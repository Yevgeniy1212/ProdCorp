Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем СохраненныйСчет Экспорт;
Перем ОтображатьОформление Экспорт;
Перем ПрименяемаяСхемаКомпоновкиДанных Экспорт;

#Если Клиент Тогда

//
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , КонецПериода);	
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент"  , Ложь);
	
	Возврат СписокПараметров;
	
КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если ДанныеОтчета = Неопределено Тогда
		ДанныеОтчета = Новый Структура;		
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;  
	
	// Дополнительные поля	
	Если Не ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Использование");
		ДополнительныеПоля.Колонки.Добавить("Представление");
		ДополнительныеПоля.Колонки.Добавить("Поле");
		ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Регистратор";
		НоваяСтрока.Представление  = "Документ отгрузки";
		НоваяСтрока.Использование  = Истина;			
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СчетФактураПоступления";
		НоваяСтрока.Представление  = "Счет-фактура";
		НоваяСтрока.Использование  = НЕ ВидОтчета = "НаличиеДокументовПоступления";			
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СчетФактураПроведен";
		НоваяСтрока.Представление  = "Счет-фактура проведен";
		НоваяСтрока.Использование  = НЕ ВидОтчета = "НаличиеДокументовПоступления";
				
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ЭСФ";
		НоваяСтрока.Представление  = "Электронный счет-фактура";
		НоваяСтрока.Использование  = Ложь;			
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Контрагент";
		НоваяСтрока.Представление  = "Контрагент";
		НоваяСтрока.Использование  = Ложь;

		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "Контрагент.ИдентификационныйКодЛичности";
		НоваяСтрока.Представление  = "БИН/ИИН контрагента";
		НоваяСтрока.Использование  = Ложь;	
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "СпособПолучения";
		НоваяСтрока.Представление  = "Способ выписки счета-фактуры";
		НоваяСтрока.Использование  = Ложь;
		
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 1);
	КонецЕсли;
		
	// Группировки
	Если Не ДанныеОтчета.Свойство("Группировка") Тогда
		Группировка = Новый ТаблицаЗначений;
		Группировка.Колонки.Добавить("Использование");
		Группировка.Колонки.Добавить("Представление");
		Группировка.Колонки.Добавить("Поле");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
		Группировка.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));   
		Группировка.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ДанныеОтчета.Вставить("Группировка", Группировка);
	
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "Организация";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "Организация";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;				
		
		НоваяСтрока.Оформление  = Новый НастройкаОформления();
		Шрифт = НоваяСтрока.Оформление["Шрифт"];
		Шрифт.Использование = Истина;
		НоваяСтрока.ПоУмолчанию  = Истина;
		
		Если ВидОтчета = "НаличиеДокументовПоступления" Тогда
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = "СчетФактураПоступления";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = "Счет-фактура";
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			
			НоваяСтрока.Оформление  = Новый НастройкаОформления();
			Шрифт = НоваяСтрока.Оформление["Шрифт"];
			Шрифт.Использование = Истина;
			НоваяСтрока.ПоУмолчанию  = Истина;
		КонецЕсли;
		
	КонецЕсли;	
		
	ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "СчетФактураПроведен",Ложь,, Ложь); // 
	ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "СчетФактураПоступления.ВалютаДокумента", Справочники.Валюты.ПустаяСсылка(),, Ложь); // 	
	
КонецПроцедуры

Функция ПолучитьСписокВидовДокументовОснованияСФ(ВидСчетФактуры = "СчетФактураПолученный")
	СписокТиповДокументов = Новый СписокЗначений;
	МетаданныеДокумента = Документы[ВидСчетФактуры].ПустаяСсылка().Метаданные();
	Для Каждого Документ Из МетаданныеДокумента.ТабличныеЧасти["ДокументыОснования"].Реквизиты["ДокументОснование"].Тип.Типы() Цикл		
		СписокТиповДокументов.Добавить(Документ);
	КонецЦикла;		
    Возврат СписокТиповДокументов;
КонецФункции


Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт

	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	
		
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
			
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(КонецПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СрокВыписки", 15); // для электронных
	
	СписокВидовДокументов = ПолучитьСписокВидовДокументовОснованияСФ();
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТипЗначенияРегистратора", СписокВидовДокументов);	
	
	МассивСостоянийПриема = Новый Массив;	
	МассивСостоянийПриема.Добавить(Перечисления.СостоянияЭСФ.ДоставленПолучателю);
	МассивСостоянийПриема.Добавить(Перечисления.СостоянияЭСФ.ПринятСервером);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СостоянияПриема", МассивСостоянийПриема); // для электронных
		
	Структура = КомпоновщикНастроек.Настройки;	
	ТиповыеОтчеты.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитовКомпоновкиДанных.Отдельно); 
	ЕстьДетальныеЗаписи = Ложь;		
	Для Каждого ДополнительноеПоле Из ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ДополнительноеПоле.Использование Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ДополнительноеПоле.Поле);			
			ЕстьДетальныеЗаписи = Истина;
		КонецЕсли;
	КонецЦикла;
	// Добавляем группу ошибок по операции
	ГруппаОшибок = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОшибок.Заголовок     = "Ошибки";
	ГруппаОшибок.Использование = Истина;
	ГруппаОшибок.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОшибок, "Ошибка1", "Ошибка");					
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОшибок, "Ошибка2", "Ошибка");			
		

	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
									
			СтандартныеОтчеты.ДобавитьОформлениеГруппировки(ПолеВыбраннойГруппировки, Структура, , ИспользоватьОформлениеГруппировок);
		КонецЕсли;
	КонецЦикла;
	
	ГруппаДанныеДокумента = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеДокумента.Заголовок     = "Данные документа отгрузки";
	ГруппаДанныеДокумента.Использование = Истина;
	
	ГруппаСчетаФактуры = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСчетаФактуры.Заголовок     = "Данные счета-фактуры";
	ГруппаСчетаФактуры.Использование = Истина;
	
	Для Каждого ВыбранныйПоказатель Из ДанныеОтчета.ПоказателиОтчета Цикл 
		Если ВыбранныйПоказатель.Значение.Значение Тогда
			Если ВыбранныйПоказатель.Ключ = "СФСуммаНДСРеглОборот" ИЛИ ВыбранныйПоказатель.Ключ = "СФОборотПоРеализацииРеглОборот" Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСчетаФактуры, ВыбранныйПоказатель.Ключ);
			Иначе
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеДокумента, ВыбранныйПоказатель.Ключ);
			КонецЕсли;
		КонецЕсли;							
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если ЕстьДетальныеЗаписи Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;    	
	                                             	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
			  		
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Отчет по наличию полученных счетов-фактур" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = Новый Структура("СуммаБезНДСОборот, СуммаНДСОборот, СуммаВсего, СФСуммаНДСРеглОборот, СФОборотПоРеализацииРеглОборот", 
				Новый Структура("Значение, Использование, Представление", Истина, Истина, "Сумма без НДС"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина, "Сумма НДС"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина, "Сумма всего"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина, "Сумма НДС регл. (по счету-фактуре)"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина, "Оборот по реализации регл. (по счету-фактуре)"));
				
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
		
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();	
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//Если СохранятьНастройкуОтчета Тогда
		//сохраним список структурных единиц
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		               
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета(РежимОтчета = "") Экспорт
		
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц 	= Новый СписокЗначений;
мСписокПодразделений 		= Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц 	= Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();


НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

СохраненныйСчет = ПланыСчетов.Типовой.ПустаяСсылка();

ОтображатьОформление = Ложь;

#КонецЕсли