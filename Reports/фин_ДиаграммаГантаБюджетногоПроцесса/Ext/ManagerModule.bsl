
Процедура СформироватьДиаграмму(Отчет,Диаграмма,ВидШкалыВремени = Неопределено,ПерезаполнятьДанные = Истина,ВыводитьПериоды = Истина,РазрешеноРедактирование = Ложь) Экспорт
	Диаграмма.Очистить();
	
	Если Отчет.Детализация.Количество()=0 Тогда
		НоваяСтрока = Отчет.Детализация.Добавить();
		НоваяСтрока.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Бюджет;
	КонецЕсли;
	
	ТекстЗапроса = "";
	МассивТребуемыхРазрезов = Новый Массив;
	Для Каждого СтрокаДетализации Из Отчет.Детализация Цикл
		ИмяРазреза = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДетализации.ВидДетализации);
		МассивТребуемыхРазрезов.Добавить(ИмяРазреза);
		ТекстЗапроса = ТекстЗапроса+",
		|	ВТ_График."+ИмяРазреза;
	КонецЦикла;
	
	#Область ПодготовкаДанныхОтчета
	Если ПерезаполнятьДанные Тогда
		Отчет.ГрафикПроцесса.Очистить();
//		Если ЗначениеЗаполнено(Отчет.КалендарныйПлан) Тогда
			
			Если ЗначениеЗаполнено(Отчет.КалендарныйПлан) Тогда
				Отчет.Организация 			= Отчет.КалендарныйПлан.Организация;
				Отчет.СценарийПланирования 	= Отчет.КалендарныйПлан.Сценарий;
				Отчет.БюджетныйРегламент 	= Документы.фин_КалендарныйПланБюджетнойКампании.БюджетныйРегламент(Отчет.КалендарныйПлан);
			Иначе
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент
					|ИЗ
					|	РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СрезПоследних КАК фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних";
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Отчет.БюджетныйРегламент 	= ВыборкаДетальныеЗаписи.Регламент;
				КонецЦикла;
	
			КонецЕсли;
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_КалендарныеПланыБюджетныхКампаний.ВидЗадачи,
				|	фин_КалендарныеПланыБюджетныхКампаний.Бюджет,
				|	фин_КалендарныеПланыБюджетныхКампаний.ЭтапБюджетногоПроцесса,
				|	фин_КалендарныеПланыБюджетныхКампаний.Пользователь,
				|	фин_КалендарныеПланыБюджетныхКампаний.ДатаНачала,
				|	фин_КалендарныеПланыБюджетныхКампаний.ДатаЗавершения,
				|	фин_КалендарныеПланыБюджетныхКампаний.УровеньДетализации,
				|	фин_КалендарныеПланыБюджетныхКампаний.СценарийПланирования КАК Сценарий,
				|	фин_КалендарныеПланыБюджетныхКампаний.Организация,
				|	фин_КалендарныеПланыБюджетныхКампаний.Исполнитель,
				|	фин_РегламентФормированияБюджетовСрезПоследних.Ранг,
				|	фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан
				|ПОМЕСТИТЬ ВТ_План
				|ИЗ
				|	РегистрСведений.фин_КалендарныеПланыБюджетныхКампаний КАК фин_КалендарныеПланыБюджетныхКампаний
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(, Регламент = &Регламент) КАК фин_РегламентФормированияБюджетовСрезПоследних
				|		ПО фин_КалендарныеПланыБюджетныхКампаний.Бюджет = фин_РегламентФормированияБюджетовСрезПоследних.Бюджет
				|ГДЕ
				|	(фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан = &КалендарныйПлан
				|			ИЛИ &КалендарныйПлан = ЗНАЧЕНИЕ(Документ.фин_КалендарныйПланБюджетнойКампании.ПустаяСсылка))
				|	И (НЕ фин_КалендарныеПланыБюджетныхКампаний.Регистратор ССЫЛКА Документ.фин_ОтчетОбИсполненииЗадачиБюджетногоПроцесса)
				|	И (фин_КалендарныеПланыБюджетныхКампаний.Организация = &Организация
				|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
				|	И (фин_КалендарныеПланыБюджетныхКампаний.СценарийПланирования = &Сценарий
				|			ИЛИ &Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.ВидЗадачи,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Бюджет,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Организация,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.ЭтапБюджетногоПроцесса,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.УровеньДетализации,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.СценарийПланирования КАК Сценарий,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Исполнитель,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Пользователь,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.КалендарныйПлан,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.ДатаНачала,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.ДатаЗавершения,
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Завершено
				|ПОМЕСТИТЬ ВТ_Исполнение
				|ИЗ
				|	РегистрСведений.фин_КалендарныеПланыБюджетныхКампаний.СрезПоследних(
				|			,
				|			(КалендарныйПлан = &КалендарныйПлан
				|				ИЛИ &КалендарныйПлан = ЗНАЧЕНИЕ(Документ.фин_КалендарныйПланБюджетнойКампании.ПустаяСсылка))
				|				И (Организация = &Организация
				|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
				|				И (СценарийПланирования = &Сценарий
				|					ИЛИ &Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка))) КАК фин_КалендарныеПланыБюджетныхКампанийСрезПоследних
				|ГДЕ
				|	фин_КалендарныеПланыБюджетныхКампанийСрезПоследних.Регистратор ССЫЛКА Документ.фин_ОтчетОбИсполненииЗадачиБюджетногоПроцесса
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_План.ВидЗадачи,
				|	ВТ_План.Бюджет,
				|	ВТ_План.ЭтапБюджетногоПроцесса,
				|	ВЫБОР
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.ЗарегистрированноеИсполнение)
				|			ТОГДА ВТ_Исполнение.Пользователь
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.Просрочки)
				|				И НЕ ВТ_Исполнение.Пользователь ЕСТЬ NULL 
				|			ТОГДА ВТ_Исполнение.Пользователь
				|		ИНАЧЕ ВТ_План.Пользователь
				|	КОНЕЦ КАК Пользователь,
				|	ВЫБОР
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.ЗарегистрированноеИсполнение)
				|			ТОГДА ВТ_Исполнение.ДатаНачала
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.Просрочки)
				|			ТОГДА ВТ_План.ДатаЗавершения
				|		ИНАЧЕ ВТ_План.ДатаНачала
				|	КОНЕЦ КАК ДатаНачала,
				|	ВЫБОР
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.ЗарегистрированноеИсполнение)
				|			ТОГДА ВТ_Исполнение.ДатаЗавершения
				|		КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.Просрочки)
				|			ТОГДА ВЫБОР
				|					КОГДА ВТ_Исполнение.ДатаЗавершения ЕСТЬ NULL 
				|						ТОГДА &ТекущаяДата
				|					ИНАЧЕ ВТ_Исполнение.ДатаЗавершения
				|				КОНЕЦ
				|		ИНАЧЕ ВТ_План.ДатаЗавершения
				|	КОНЕЦ КАК ДатаЗавершения,
				|	ВТ_План.УровеньДетализации,
				|	ВТ_План.Сценарий,
				|	ВТ_План.Организация,
				|	ВТ_Исполнение.ДатаНачала КАК ДатаНачалаФакт,
				|	ВТ_Исполнение.ДатаЗавершения КАК ДатаЗавершенияФакт,
				|	ВТ_План.Ранг,
				|	ВТ_План.КалендарныйПлан
				|ИЗ
				|	ВТ_План КАК ВТ_План
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнение КАК ВТ_Исполнение
				|		ПО ВТ_План.Бюджет = ВТ_Исполнение.Бюджет
				|			И ВТ_План.ВидЗадачи = ВТ_Исполнение.ВидЗадачи
				|			И ВТ_План.ЭтапБюджетногоПроцесса = ВТ_Исполнение.ЭтапБюджетногоПроцесса
				|			И ВТ_План.УровеньДетализации = ВТ_Исполнение.УровеньДетализации
				|			И ВТ_План.Сценарий = ВТ_Исполнение.Сценарий
				|			И ВТ_План.Организация = ВТ_Исполнение.Организация
				|			И ВТ_План.Исполнитель = ВТ_Исполнение.Исполнитель
				|			И ВТ_План.КалендарныйПлан = ВТ_Исполнение.КалендарныйПлан
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.ЗарегистрированноеИсполнение)
				|				ТОГДА ВЫБОР
				|							КОГДА &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|								ТОГДА ИСТИНА
				|							ИНАЧЕ ВТ_Исполнение.ДатаНачала > &НачалоПериода
				|									ИЛИ ВТ_Исполнение.ДатаНачала < &НачалоПериода
				|										И ВТ_Исполнение.ДатаЗавершения > &НачалоПериода
				|						КОНЕЦ
				|						И ВЫБОР
				|							КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|								ТОГДА ИСТИНА
				|							ИНАЧЕ ВТ_Исполнение.ДатаЗавершения < &КонецПериода
				|									ИЛИ ВТ_Исполнение.ДатаНачала < &КонецПериода
				|										И ВТ_Исполнение.ДатаЗавершения > &КонецПериода
				|						КОНЕЦ
				|			ИНАЧЕ ВЫБОР
				|						КОГДА &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|							ТОГДА ИСТИНА
				|						ИНАЧЕ ВТ_План.ДатаНачала > &НачалоПериода
				|								ИЛИ ВТ_План.ДатаНачала < &НачалоПериода
				|									И ВТ_План.ДатаЗавершения > &НачалоПериода
				|					КОНЕЦ
				|					И ВЫБОР
				|						КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|							ТОГДА ИСТИНА
				|						ИНАЧЕ ВТ_План.ДатаЗавершения < &КонецПериода
				|								ИЛИ ВТ_План.ДатаНачала < &КонецПериода
				|									И ВТ_План.ДатаЗавершения > &КонецПериода
				|					КОНЕЦ
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.НеисполненныеЗадачи)
				|				ТОГДА ВТ_Исполнение.ДатаЗавершения ЕСТЬ NULL 
				|			КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.ЗарегистрированноеИсполнение)
				|				ТОГДА НЕ ВТ_Исполнение.ДатаЗавершения ЕСТЬ NULL 
				|			КОГДА &Вариант = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыДиаграммыБюджетногоПроцесса.Просрочки)
				|				ТОГДА ВЫБОР
				|						КОГДА НЕ ВТ_Исполнение.ДатаЗавершения ЕСТЬ NULL 
				|								И ВТ_Исполнение.ДатаЗавершения > ВТ_План.ДатаЗавершения
				|							ТОГДА ИСТИНА
				|						КОГДА ВТ_Исполнение.ДатаЗавершения ЕСТЬ NULL 
				|								И ВТ_План.ДатаЗавершения < &ТекущаяДата
				|							ТОГДА ИСТИНА
				|						ИНАЧЕ ЛОЖЬ
				|					КОНЕЦ
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ";
			
			Запрос.УстановитьПараметр("НачалоПериода",		Отчет.НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода",		Отчет.КонецПериода);
			Запрос.УстановитьПараметр("Организация",		Отчет.Организация);
			Запрос.УстановитьПараметр("Сценарий", 			Отчет.СценарийПланирования);
			Запрос.УстановитьПараметр("Вариант", 			Отчет.Вариант);
			Запрос.УстановитьПараметр("КалендарныйПлан", 	Отчет.КалендарныйПлан);
			Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
			Запрос.УстановитьПараметр("Регламент", 			Отчет.БюджетныйРегламент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Отчет.ГрафикПроцесса.Загрузить(РезультатЗапроса.Выгрузить());
	//
	//	Иначе
	//
	//		Запрос = Новый Запрос;
	//		Запрос.УстановитьПараметр("Регламент",				Отчет.БюджетныйРегламент);
	//		Запрос.УстановитьПараметр("СценарийПланирования",	Отчет.СценарийПланирования);
	//		Запрос.УстановитьПараметр("Организация",			Отчет.Организация);
	//		Запрос.УстановитьПараметр("ОтборПоДетализации",		ЗначениеЗаполнено(Отчет.УровеньДетализации));
	//		Запрос.УстановитьПараметр("Детализация",			Отчет.УровеньДетализации);
	//		Запрос.УстановитьПараметр("ОтборПоПользователю",	ЗначениеЗаполнено(Отчет.Пользователь));
	//		Запрос.УстановитьПараметр("Пользователь",			Отчет.Пользователь);

	//		
	//		ТаблицаГрафикаПоРегламенту = фин_ПроцедурыКалендарногоПланирования.ПолучитьСписокЗадачПоНастройкамРегламента(Отчет.БюджетныйРегламент,Отчет.СценарийПланирования,Отчет.Организация,,ЗначениеЗаполнено(Отчет.УровеньДетализации),Отчет.УровеньДетализации,ЗначениеЗаполнено(Отчет.Пользователь),Отчет.Пользователь);
	//		
	//		Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаГрафикаПоРегламенту Цикл
	//			НоваяСтрока = Отчет.ГрафикПроцесса.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
	//			НоваяСтрока.УровеньДетализации 	= ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УправленческоеПодразделение),ВыборкаДетальныеЗаписи.УправленческоеПодразделение,ВыборкаДетальныеЗаписи.Проект);
	//			НоваяСтрока.ДатаНачала 			= ТекущаяДата() + фин_ПроцедурыКалендарногоПланирования.НачалоСобытия(ВыборкаДетальныеЗаписи,ВыборкаДетальныеЗаписи.Сценарий)*60;
	//			НоваяСтрока.ДатаЗавершения 		= ТекущаяДата() + фин_ПроцедурыКалендарногоПланирования.КонецСобытия(ВыборкаДетальныеЗаписи,ВыборкаДетальныеЗаписи.Сценарий)*60;
	//		КонецЦикла;
	//
	//	КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	
	#Область ПодготовкаДанныхДляДиаграммы
	
	Запрос = Новый Запрос;
	
	УсловиеЗапроса = "";
	Запрос.УстановитьПараметр("Организация",Отчет.Организация);
	Если ПерезаполнятьДанные Тогда
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Иначе
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.Организация = &Организация";
	КонецЕсли;
	Запрос.УстановитьПараметр("СценарийПланирования",Отчет.СценарийПланирования);
	Если ПерезаполнятьДанные Тогда
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.Сценарий = &СценарийПланирования ИЛИ &СценарийПланирования = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)";
	Иначе
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.Сценарий = &СценарийПланирования";
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчет.Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь",Отчет.Пользователь);
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.Пользователь = &Пользователь";
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчет.УровеньДетализации) Тогда
		Запрос.УстановитьПараметр("УровеньДетализации",Отчет.УровеньДетализации);
		УсловиеЗапроса = УсловиеЗапроса + "
		|	И ВТ_График.УровеньДетализации = &УровеньДетализации";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГрафикПроцесса",Отчет.ГрафикПроцесса.Выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПроцесса.КалендарныйПлан,
		|	ГрафикПроцесса.Сценарий,
		|	ГрафикПроцесса.Организация,
		|	ГрафикПроцесса.ВидЗадачи,
		|	ГрафикПроцесса.Бюджет,
		|	ГрафикПроцесса.ЭтапБюджетногоПроцесса,
		|	ГрафикПроцесса.Ранг,
		|	ГрафикПроцесса.Пользователь,
		|	ГрафикПроцесса.ДатаНачала,
		|	ГрафикПроцесса.ДатаЗавершения,
		|	ГрафикПроцесса.ДатаНачалаФакт,
		|	ГрафикПроцесса.ДатаЗавершенияФакт,
		|	ГрафикПроцесса.УровеньДетализации
		|ПОМЕСТИТЬ ВТ_График
		|ИЗ
		|	&ГрафикПроцесса КАК ГрафикПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА Как Поле1,
		|	МИНИМУМ(ВТ_График.Ранг) КАК Ранг,
		|	МИНИМУМ(ВТ_График.ДатаНачала) КАК ДатаНачала,
		|	МИНИМУМ(ВТ_График.ДатаНачалаФакт) КАК ДатаНачалаФакт,
		|	МАКСИМУМ(ВТ_График.ДатаЗавершенияФакт) КАК ДатаЗавершенияФакт,
		|	МАКСИМУМ(ВТ_График.ДатаЗавершения) КАК ДатаЗавершения"+ТекстЗапроса+"
		|ИЗ
		|	ВТ_График КАК ВТ_График
		|ГДЕ
		|	ИСТИНА"+УсловиеЗапроса+"
		|
		|СГРУППИРОВАТЬ ПО
		|	ИСТИНА"+ТекстЗапроса+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ранг"+?(МассивТребуемыхРазрезов.Найти("ВидЗадачи")<>Неопределено,",ВидЗадачи.Порядок","");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаГрафика = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаГрафика.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДата 	= Неопределено;
	МаксимальнаяДата 	= Неопределено;
	
	Для Каждого СтрокаГрафика Из ТаблицаГрафика Цикл
		МинимальнаяДата 	= ?(МинимальнаяДата=Неопределено,СтрокаГрафика.ДатаНачала,Мин(МинимальнаяДата,СтрокаГрафика.ДатаНачала));
		МаксимальнаяДата 	= ?(МаксимальнаяДата=Неопределено,СтрокаГрафика.ДатаЗавершения,Макс(МаксимальнаяДата,СтрокаГрафика.ДатаЗавершения));
	КонецЦикла;
	
	#КонецОбласти
	
	ОбновитьГрафикРабот(Отчет.Вариант,МинимальнаяДата,МаксимальнаяДата,ТаблицаГрафика,Диаграмма,МассивТребуемыхРазрезов,ВидШкалыВремени,ВыводитьПериоды,РазрешеноРедактирование);
	Для Каждого Серия Из Диаграмма.Серии Цикл
		Диаграмма.РазвернутьСерию(Серия,Истина);
	КонецЦикла;
	Для Каждого Точка Из Диаграмма.Точки Цикл
		Диаграмма.РазвернутьТочку(Точка,Истина);
	КонецЦикла;
КонецПроцедуры


// Процедура строит диаграмму Ганта для графика работ
Процедура ОбновитьГрафикРабот(Вариант,ПериодРегистрации=Неопределено, ГоризонтПланирования=Неопределено, ЗапланированныеРаботы, Диаграмма, Знач МассивТребуемыхРазрезов, Знач ЕдиницаШкалыВремени = Неопределено,ВыводитьПериоды=Истина,РазрешеноРедактирование = Ложь) Экспорт
	Диаграмма.Очистить();
	
	Если Не ЗначениеЗаполнено(ЗапланированныеРаботы) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Диаграмма = Неопределено Тогда 
		Возврат;
		Диаграмма = Новый ДиаграммаГанта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЕдиницаШкалыВремени) Тогда
		ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.День;
	КонецЕсли;
	
	КоличествоУровнейИерархии = МассивТребуемыхРазрезов.Количество();	
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.ОбластьЗаголовка.Текст = "Календарный график бюджетного процесса";
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	Диаграмма.АвтоУстановкаТекстаСерий = Ложь;
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГоризонтПланирования) Тогда 
		Возврат;
	КонецЕсли;
	
	НачДата = НачалоМесяца(ПериодРегистрации);
	КонДата = КонецМесяца(ГоризонтПланирования);
	Диаграмма.УстановитьПолныйИнтервал(НачДата, КонДата);	
	
	ПроизводственныйКалендарь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ГрафикУчетаРаботПоСогласованию");
	
	РежимВстраивания = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	
	Если РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана 
		ИЛИ РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеПроизводственногоКалендаря.ДатаКалендаря КАК ДатаКалендаря
		               |ИЗ
		               |	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДанныеПроизводственногоКалендаря
		               |ГДЕ
		               |	ДанныеПроизводственногоКалендаря.ДатаКалендаря МЕЖДУ &НачДата И &КонДата
		               |	И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеПроизводственногоКалендаря.ДатаКалендаря";
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ИнтервалФона = Диаграмма.ИнтервалыФона.Добавить(НачалоДня(Выборка.ДатаКалендаря), КонецДня(Выборка.ДатаКалендаря));
			ИнтервалФона.Цвет = WebЦвета.Персиковый;
		КонецЦикла;
	ИначеЕсли РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный
		ИЛИ РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
		ИЛИ РежимВстраивания = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря
		               |ИЗ
		               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		               |ГДЕ
		               |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		               |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачДата И &КонДата
		               |	И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ДанныеПроизводственногоКалендаря.Дата";
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
		Запрос.УстановитьПараметр("НачДата", НачДата);
		Запрос.УстановитьПараметр("КонДата", КонДата);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ИнтервалФона = Диаграмма.ИнтервалыФона.Добавить(НачалоДня(Выборка.ДатаКалендаря), КонецДня(Выборка.ДатаКалендаря));
			ИнтервалФона.Цвет = WebЦвета.Персиковый;
		КонецЦикла;
	КонецЕсли;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(150);
	
	// Устанавливаем точки
	Для Каждого ЗапланированнаяРабота Из ЗапланированныеРаботы Цикл	
		
		СоответствиеНомеровТочекИТочек 			= Новый Соответствие;
		СоответствиеНомеровИДанныхРасшифровки 	= Новый Соответствие;
		
		ДанныеТочки = ЗапланированнаяРабота[МассивТребуемыхРазрезов[0]];
		
		ПолныйИдСтроки = "";
		
		Для Инд = 1 По КоличествоУровнейИерархии Цикл
			СоответствиеНомеровИДанныхРасшифровки.Вставить(Инд,ЗапланированнаяРабота[МассивТребуемыхРазрезов[Инд-1]]);
			ЗначениеУровня = ЗапланированнаяРабота[МассивТребуемыхРазрезов[Инд-1]];
			ИдСтрокиРодителя = ПолныйИдСтроки;
			ПолныйИдСтроки = ПолныйИдСтроки + ?(ЗначениеУровня=Неопределено,"Неопределено",?(Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеУровня)),Строка(ЗначениеУровня),Строка(ЗначениеУровня.УникальныйИдентификатор())));
			ТочкаХ = Диаграмма.УстановитьТочку(ПолныйИдСтроки, ?(Инд=1,Неопределено,ИдСтрокиРодителя));
			ТочкаХ.Расшифровка = ЗначениеУровня;
			Если Вариант = Перечисления.фин_ВариантыДиаграммыБюджетногоПроцесса.ПланСОтметкамиИсполнения Тогда
				ПометкаОбИсполнении = "/ По факту: "+ПредставлениеПериодаПостроке(ЗапланированныеРаботы,СоответствиеНомеровИДанныхРасшифровки,МассивТребуемыхРазрезов,,"Факт");
			Иначе
				ПометкаОбИсполнении = "";
			КонецЕсли;
			ТочкаХ.Текст = ?(ЗначениеЗаполнено(ЗначениеУровня), Строка(ЗначениеУровня), " ")+?(ВыводитьПериоды,?(ПометкаОбИсполнении=""," /","/ По плану: ")+ПредставлениеПериодаПостроке(ЗапланированныеРаботы,СоответствиеНомеровИДанныхРасшифровки,МассивТребуемыхРазрезов)+ПометкаОбИсполнении,"");
			СоответствиеНомеровТочекИТочек.Вставить(Инд,ТочкаХ);
		КонецЦикла;
		
		
		Серия = Диаграмма.УстановитьСерию(МассивТребуемыхРазрезов[0]);
			
		
		Для Инд = 1 По КоличествоУровнейИерархии Цикл
			ТочкаХ = СоответствиеНомеровТочекИТочек.Получить(Инд);
			Если Не ТочкаХ = Неопределено Тогда
				
				Значение = Диаграмма.ПолучитьЗначение(ТочкаХ, Серия);
				Значение.Редактирование = РазрешеноРедактирование И Инд = КоличествоУровнейИерархии;
				Интервал = Значение.Добавить();
				ДанныеРасшифровкиХ = СоответствиеНомеровИДанныхРасшифровки.Получить(Инд);
				Если Вариант = Перечисления.фин_ВариантыДиаграммыБюджетногоПроцесса.ПланСОтметкамиИсполнения Тогда
					ПометкаОбИсполнении = "/ По факту: "+ПредставлениеПериодаПостроке(ЗапланированныеРаботы,СоответствиеНомеровИДанныхРасшифровки,МассивТребуемыхРазрезов,ДанныеРасшифровкиХ,"Факт");
				Иначе
					ПометкаОбИсполнении = "";
				КонецЕсли;
				Интервал.Текст 	= Строка(ДанныеРасшифровкиХ) + ?(ВыводитьПериоды,?(ПометкаОбИсполнении=""," /","/ По плану: ")+ПредставлениеПериодаПостроке(ЗапланированныеРаботы,СоответствиеНомеровИДанныхРасшифровки,МассивТребуемыхРазрезов,ДанныеРасшифровкиХ) + ПометкаОбИсполнении,"");
				Интервал.Начало = НачалоДня(ЗапланированнаяРабота.ДатаНачала);
				Интервал.Конец 	= КонецДня(ЗапланированнаяРабота.ДатаЗавершения);
				Если РазрешеноРедактирование Тогда
					СтруктураРасшифровки = Новый Структура;
					Для Уровень = 1 По КоличествоУровнейИерархии Цикл //Инд Цикл
						СтруктураРасшифровки.Вставить(МассивТребуемыхРазрезов[Уровень-1],СоответствиеНомеровИДанныхРасшифровки.Получить(Уровень));
					КонецЦикла;
					Интервал.Расшифровка = СтруктураРасшифровки;
				Иначе
					СтруктураРасшифровки = Новый Структура;
					Для Уровень = 1 По КоличествоУровнейИерархии Цикл //Инд Цикл
						СтруктураРасшифровки.Вставить(МассивТребуемыхРазрезов[Уровень-1],СоответствиеНомеровИДанныхРасшифровки.Получить(Уровень));
					КонецЦикла;
					Интервал.Расшифровка = Новый Структура("ДанныеРасшифровки,СтруктураРасшифровки",ДанныеРасшифровкиХ,СтруктураРасшифровки);
				КонецЕсли;
				
				Интервал.Цвет = Новый Цвет(ГСЧ.СлучайноеЧисло(0, 255), ГСЧ.СлучайноеЧисло(0, 255), ГСЧ.СлучайноеЧисло(0, 255));
			КонецЕсли;		
		КонецЦикла;
		
	КонецЦикла;
	
	// Оформление диаграммы
	Если Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Количество()>0 Тогда
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].Видимость = Истина;
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].ОтображатьПериодическиеМетки = Истина;
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].Единица = ЕдиницаШкалыВремени;
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].Кратность = 1;
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяца;
		Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы[0].Формат = ?(НачалоМесяца(НачДата)<>НачалоМесяца(КонДата), "ДФ='dd.MM'", "ДФ='dd'");
	КонецЕсли;
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	Если ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.День Тогда 
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		КратностьПериодическогоВарианта = (КонДата - НачДата)/(24*60*60);
	ИначеЕсли ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.Неделя Тогда 
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		КратностьПериодическогоВарианта = (КонДата - НачДата)/(7*24*60*60);
	ИначеЕсли ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.Месяц Тогда 
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		КратностьПериодическогоВарианта = (КонДата - НачДата)/(31*24*60*60);
	ИначеЕсли ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.Квартал Тогда 
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		КратностьПериодическогоВарианта = (КонДата - НачДата)/(3*30*24*60*60);
	ИначеЕсли ЕдиницаШкалыВремени = ТипЕдиницыШкалыВремени.Год Тогда 
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		КратностьПериодическогоВарианта = (КонДата - НачДата)/(360*24*60*60);
	КонецЕсли;
	КратностьПериодическогоВарианта = Окр(КратностьПериодическогоВарианта,0,РежимОкругления.Окр15как20);
	Диаграмма.КратностьПериодическогоВарианта = ?(КратностьПериодическогоВарианта=0,1,КратностьПериодическогоВарианта);
	Диаграмма.Обновление = Истина;
	Диаграмма.ОтображениеТекстаЗначения=ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	Диаграмма.ОтображатьЛегенду=Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОбластьЛегенды.Лево = 1;
	Диаграмма.ОбластьПостроения.Право = 1;
	
КонецПроцедуры

Функция ПредставлениеПериодаПостроке(ЗапланированныеРаботы,СоответствиеНомеровИДанныхРасшифровки,МассивТребуемыхРазрезов,ДанныеРасшифровки=Неопределено,Постфикс = "")
	СтруктураПоиска = Новый Структура;
	Для Каждого ЭлементСоответствия Из СоответствиеНомеровИДанныхРасшифровки Цикл
		СтруктураПоиска.Вставить(МассивТребуемыхРазрезов[ЭлементСоответствия.Ключ-1],ЭлементСоответствия.Значение);
		Если ДанныеРасшифровки<>Неопределено И ЭлементСоответствия.Значение = ДанныеРасшифровки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрокиТаблицы = ЗапланированныеРаботы.НайтиСтроки(СтруктураПоиска);	
	МинимальнаяДата 	= Неопределено;
	МаксимальнаяДата 	= Неопределено;
	
	Для Каждого СтрокаГрафика Из СтрокиТаблицы Цикл
		МинимальнаяДата 	= ?(МинимальнаяДата=Неопределено,СтрокаГрафика["ДатаНачала"+Постфикс],Мин(МинимальнаяДата,СтрокаГрафика["ДатаНачала"+Постфикс]));
		МаксимальнаяДата 	= ?(МаксимальнаяДата=Неопределено,СтрокаГрафика["ДатаЗавершения"+Постфикс],Макс(МаксимальнаяДата,СтрокаГрафика["ДатаЗавершения"+Постфикс]));
	КонецЦикла;
	
	Если МинимальнаяДата = Неопределено ИЛИ МаксимальнаяДата = Неопределено Тогда
		Возврат "";	
	КонецЕсли;
	Возврат Формат(МинимальнаяДата,"ДФ='дд МММ'")+" - "+Формат(МаксимальнаяДата,"ДФ='дд МММ'")
КонецФункции
