
#Если Клиент Тогда

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт
	
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата" , '00010101000000');
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Год", Год(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Месяц", Месяц(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_День", День(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "ПройденныеУчебныеКурсы";
	ОбщийОтчет.мНазваниеОтчета = "Пройденные учебные курсы";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// представление полей
	СтруктураПредставлениеПолей = Новый Структура();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПройденныеУчебныеКурсы.КурсОбучения          КАК КурсОбучения,
	|	ПройденныеУчебныеКурсы.ФизЛицо               КАК ФизЛицо
	|{
	| ВЫБРАТЬ
	|	ПройденныеУчебныеКурсы.КурсОбучения.*          КАК КурсОбучения,
	|	ПройденныеУчебныеКурсы.ФизЛицо.*               КАК ФизЛицо,
	|	ПройденныеУчебныеКурсы.ДокументОбОбразовании   КАК ДокументОбОбразовании,
	|	ПройденныеУчебныеКурсы.НомерДокумента          КАК НомерДокумента,
	|	ПройденныеУчебныеКурсы.ДатаДокумента           КАК ДатаДокумента,
	|	ПройденныеУчебныеКурсы.Регистратор.Дата		   КАК ДатаНачалаКурса,
	|	ПройденныеУчебныеКурсы.Регистратор.ДатаЗавершенияКурса	   КАК ДатаЗавершенияКурса,
	|	Работники.Подразделение.* 					   КАК Подразделение,
	|	Работники.Должность.*	 					   КАК Должность,
	|	ПоследнееНазначениеРаботников.Подразделение.* 					   КАК ПодразделениеНаКонец,
	|	ПоследнееНазначениеРаботников.Должность.*	 					   КАК ДолжностьНаКонец,
	|	ПоследнееНазначениеРаботников.ПричинаИзмененияСостояния			   КАК ПричинаИзмененияСостоянияНаКонец
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|	//СВОЙСТВА
	|}
	|ИЗ
	|	РегистрСведений.ПройденныеУчебныеКурсы КАК ПройденныеУчебныеКурсы
	|
	|	{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ПройденныеУчебныеКурсы.ФизЛицо,
	|							ПройденныеУчебныеКурсы.Период,
	|							МАКСИМУМ(ВЫБОР
	|										КОГДА Работники.ПричинаИзмененияСостояния = &Уволен
	|											ТОГДА ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)
	|										ИНАЧЕ Работники.Период
	|									КОНЕЦ) КАК ПериодРаботники
	|						ИЗ
	|							РегистрСведений.ПройденныеУчебныеКурсы КАК ПройденныеУчебныеКурсы
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|								ПО ПройденныеУчебныеКурсы.ФизЛицо = Работники.ФизЛицо
	|									И Работники.Период <= ПройденныеУчебныеКурсы.Период
	|						ГДЕ
	|							ПройденныеУчебныеКурсы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|							ИЛИ (&ДатаКон = &ПустаяДата И ПройденныеУчебныеКурсы.Период >= &ДатаНач)
	|						СГРУППИРОВАТЬ ПО
	|							ПройденныеУчебныеКурсы.ФизЛицо,
	|							ПройденныеУчебныеКурсы.Период) КАК РаботникиСрезПоследних
	|		ПО ПройденныеУчебныеКурсы.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
	|			И ПройденныеУчебныеКурсы.Период = РаботникиСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК Работники
	|		ПО РаботникиСрезПоследних.ФизЛицо = Работники.ФизЛицо
	|			И РаботникиСрезПоследних.ПериодРаботники = Работники.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности) КАК ПоследнееНазначениеРаботников
	|		ПО ПройденныеУчебныеКурсы.ФизЛицо = ПоследнееНазначениеРаботников.ФизЛицо
	|		
	|	//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: СОЕДИНЕНИЯ
	|	//СОЕДИНЕНИЯ
	|	}
	|
	|ГДЕ
	|	ПройденныеУчебныеКурсы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	ИЛИ (&ДатаКон = &ПустаяДата И ПройденныеУчебныеКурсы.Период >= &ДатаНач)
	|{
	| ГДЕ
	|	ПройденныеУчебныеКурсы.КурсОбучения.*          КАК КурсОбучения,
	|	ПройденныеУчебныеКурсы.ФизЛицо.*               КАК ФизЛицо,
	|	ПройденныеУчебныеКурсы.ДокументОбОбразовании   КАК ДокументОбОбразовании,
	|	ПройденныеУчебныеКурсы.НомерДокумента          КАК НомерДокумента,
	|	ПройденныеУчебныеКурсы.ДатаДокумента           КАК ДатаДокумента,
	|	ПройденныеУчебныеКурсы.Регистратор.Дата		   КАК ДатаНачалаКурса,
	|	ПройденныеУчебныеКурсы.Регистратор.ДатаЗавершенияКурса	   КАК ДатаЗавершенияКурса,
	|	Работники.Подразделение.* 					   КАК Подразделение,
	|	Работники.Должность.*	 					   КАК Должность,
	|	ПоследнееНазначениеРаботников.Подразделение.* 					   КАК ПодразделениеНаКонец,
	|	ПоследнееНазначениеРаботников.Должность.*	 					   КАК ДолжностьНаКонец,
	|	ПоследнееНазначениеРаботников.ПричинаИзмененияСостояния			   КАК ПричинаИзмененияСостоянияНаКонец
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	ПройденныеУчебныеКурсы.КурсОбучения.*          КАК КурсОбучения,
	|	ПройденныеУчебныеКурсы.ФизЛицо.*               КАК ФизЛицо,
	|	ПройденныеУчебныеКурсы.ДокументОбОбразовании   КАК ДокументОбОбразовании,
	|	ПройденныеУчебныеКурсы.НомерДокумента          КАК НомерДокумента,
	|	ПройденныеУчебныеКурсы.ДатаДокумента           КАК ДатаДокумента,
	|	ПройденныеУчебныеКурсы.Регистратор.Дата		   КАК ДатаНачалаКурса,
	|	ПройденныеУчебныеКурсы.Регистратор.ДатаЗавершенияКурса	   КАК ДатаЗавершенияКурса,
	|	Работники.Подразделение.* 					   КАК Подразделение,
	|	Работники.Должность.*	 					   КАК Должность,
	|	ПоследнееНазначениеРаботников.Подразделение.* 					   КАК ПодразделениеНаКонец,
	|	ПоследнееНазначениеРаботников.Должность.*	 					   КАК ДолжностьНаКонец,
	|	ПоследнееНазначениеРаботников.ПричинаИзмененияСостояния			   КАК ПричинаИзмененияСостоянияНаКонец
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ 
	|	//СВОЙСТВА
	|}
	|{ИТОГИ ПО
	|	ПройденныеУчебныеКурсы.КурсОбучения.*          КАК КурсОбучения,
	|	ПройденныеУчебныеКурсы.ФизЛицо.*               КАК ФизЛицо,
	|	ПройденныеУчебныеКурсы.ДокументОбОбразовании   КАК ДокументОбОбразовании,
	|	ПройденныеУчебныеКурсы.НомерДокумента          КАК НомерДокумента,
	|	ПройденныеУчебныеКурсы.ДатаДокумента           КАК ДатаДокумента,
	|	ПройденныеУчебныеКурсы.Регистратор.Дата		   КАК ДатаНачалаКурса,
	|	ПройденныеУчебныеКурсы.Регистратор.ДатаЗавершенияКурса	   КАК ДатаЗавершенияКурса,
	|	Работники.Подразделение.* 					   КАК Подразделение,
	|	Работники.Должность.*	 					   КАК Должность,
	|	ПоследнееНазначениеРаботников.Подразделение.* 					   КАК ПодразделениеНаКонец,
	|	ПоследнееНазначениеРаботников.Должность.*	 					   КАК ДолжностьНаКонец,
	|	ПоследнееНазначениеРаботников.ПричинаИзмененияСостояния			   КАК ПричинаИзмененияСостоянияНаКонец
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//ДОПОЛНИТЕЛЬНЫЕ ПСЕВДОНИМЫ ПОЛЕЙ
	|	//СВОЙСТВА
	|}
	|";
	
	// Преобразуем текст запроса для получения полной информации о физлице
	ПроцедурыУправленияПерсоналом.ДобавитьВТекстПостроителяДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.СтруктураФорматаПолей, "ПройденныеУчебныеКурсы", "ФизЛицо");	
	
	// Таблица описания видов объектов контактной информации для возможности вывода в отчет
	ТаблицаВидовОбъектовКИ = Новый ТаблицаЗначений;
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляется контактная информация
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("Представление");// представление поля, для которого добавляется контактная информация
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("ВидОбъекта");   // вид объекта-владельца контактной информации
	ТаблицаВидовОбъектовКИ.Колонки.Добавить("СтрокаТипОбъекта");   // тип объекта-владельца контактной информации
	
	НоваяСтрока = ТаблицаВидовОбъектовКИ.Добавить();
	НоваяСтрока.ПутьКДанным = "ПройденныеУчебныеКурсы.ФизЛицо";
	НоваяСтрока.Представление = "Сотрудник";
	НоваяСтрока.ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	НоваяСтрока.СтрокаТипОбъекта = "Справочник.ФизическиеЛица";
	
	// Добавим строки запроса, необходимые для выборки контактной информации
	УправлениеОтчетами.ДобавитьВТекстПостроителяКонтактнуюИнформацию(ТаблицаВидовОбъектовКИ, ТекстЗапроса, СтруктураПредставлениеПолей, ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры);

	// При использовании свойств и категорий в текст запроса добавляются дополнительные поля
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда

		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ПройденныеУчебныеКурсы.ФизЛицо";
		НоваяСтрока.Представление = "Сотрудник";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Работники.Подразделение";
		НоваяСтрока.Представление = "Подразделение (на момент прохождения курса)";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;

        НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ПоследнееНазначениеРаботников.Подразделение";
		НоваяСтрока.Представление = "Подразделение (на конец периода)";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;


		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;						  
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	// представление полей
	СтруктураПредставлениеПолей.Вставить("ФизЛицо", "Физическое лицо");
	СтруктураПредставлениеПолей.Вставить("КурсОбучения", "Курс обучения");
	СтруктураПредставлениеПолей.Вставить("ДокументОбОбразовании", "Документ об образовании");
	СтруктураПредставлениеПолей.Вставить("НомерДокумента", "Номер документа");
	СтруктураПредставлениеПолей.Вставить("ДатаДокумента", "Дата документа");
	СтруктураПредставлениеПолей.Вставить("ДатаНачалаКурса", "Дата начала курса");
	СтруктураПредставлениеПолей.Вставить("ДатаЗавершенияКурса", "Дата завершения курса");
	СтруктураПредставлениеПолей.Вставить("Подразделение", "Подразделение (на момент прохождения курса)");
	СтруктураПредставлениеПолей.Вставить("Должность", "Должность (на момент прохождения курса)");
	СтруктураПредставлениеПолей.Вставить("ТабельныйНомерНаКонец", "Табельный номер (на конец периода)");
	СтруктураПредставлениеПолей.Вставить("ПричинаИзмененияСостоянияНаКонец", "Состояние (на конец периода)");
	СтруктураПредставлениеПолей.Вставить("ПодразделениеНаКонец", "Подразделение (на конец периода)");
	СтруктураПредставлениеПолей.Вставить("ДолжностьНаКонец", "Должность (на конец периода)");
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ДатаДокумента", "ДФ=dd.MM.yyyy");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ДатаНачалаКурса", "ДФ=dd.MM.yyyy");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ДатаЗавершенияКурса", "ДФ=dd.MM.yyyy");
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("КурсОбучения");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("КурсОбучения");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// поля по умолчанию
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("ФизЛицо");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаНачалаКурса");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаЗавершенияКурса");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДокументОбОбразовании");
	ПостроительОтчета.ВыбранныеПоля.Добавить("НомерДокумента");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаДокумента");
	
	// настройки отчета
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 0; // Дата
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт
	
	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();
	
КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт
	
	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);
	
КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;
		
		Расшифровка = Новый Структура;
		
		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда
			
			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли; 
		
		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

#КонецЕсли

