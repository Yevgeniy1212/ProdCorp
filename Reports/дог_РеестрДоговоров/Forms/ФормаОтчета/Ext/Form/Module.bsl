////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если (НЕ СохраненнаяНастройка.Пустая()) И Сохранять() Тогда
		СохранитьНастройкуСервер();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Отчет.Организация = Неопределено;
		Отчет.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Отчет.Организация, Отчет.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Отчет.Организация, Отчет.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Отборы>

&НаКлиенте
Процедура ОтборыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Отборы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТипПараметра = ПолучитьТип(Элементы.Отборы.ТекущиеДанные.Параметр);
	Если ТипПараметра<>Неопределено Тогда
		Элементы.Отборы.ПодчиненныеЭлементы.ОтборыЗначение.ОграничениеТипа = ТипПараметра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипПараметра = ПолучитьТип(Элементы.Отборы.ТекущиеДанные.Параметр);
	Если ТипПараметра<>Неопределено Тогда
		Элементы.Отборы.ПодчиненныеЭлементы.ОтборыЗначение.ОграничениеТипа = ТипПараметра;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПараметрПриИзменении(Элемент)
	
	ТипПараметра=ПолучитьТип(Элементы.Отборы.ТекущиеДанные.Параметр);
	Если ТипПараметра<>Неопределено Тогда
		Элементы.Отборы.ТекущиеДанные.Значение = ТипПараметра.ПривестиЗначение(Элементы.Отборы.ТекущиеДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВидов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ВыводимыеПараметры>

&НаКлиенте
Процедура ВыводимыеПараметрыПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПараметров();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДействияФормыДополнительныеВосстановитьЗначения(Команда)
	
	//	СтандартныеОтчеты.ДействияФормыДополнительныеВосстановитьЗначения(Отчет, ЭтаФорма);
	ПараметрыСохранения = Новый Структура("НастраиваемыйОбъект,Заголовок","ОтчетОбъект.дог_РеестрДоговоров",Заголовок);
	ОткрытьФормуМодально("Справочник.общ_СохраненныеНастройки.Форма.ФормаВыбораУправляемая",ПараметрыСохранения,ЭтаФорма);
	Если НЕ СохраненнаяНастройка.Пустая() Тогда 
		ПрименитьНастройку();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДополнительныеСохранитьЗначения(Команда)
	
	ПараметрыСохранения = Новый Структура("НастраиваемыйОбъект,Наименование,РежимСохраненияНастройки,Заголовок","ОтчетОбъект.дог_РеестрДоговоров","Реестр договоров от "+Строка(Отчет.ДатаОкончания),Истина,Заголовок);
	ОткрытьФормуМодально("Справочник.общ_СохраненныеНастройки.Форма.ФормаВыбораУправляемая",ПараметрыСохранения,ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Отчет.Организация, Отчет.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Отчет.Организация, Отчет.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Отчет, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Отчет.ДатаОкончания = '00010101' Тогда
		Отчет.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	Если Параметры.Свойство("Договор") Тогда
		Отчет.Договор = Параметры.Договор;
	Иначе
		ЗаполнитьНастройкиПриОткрытииОтчета();
	КонецЕсли;
	Если Параметры.Свойство("Контрагент") Тогда
		Отчет.Контрагент = Параметры.Контрагент;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		Отчет.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");		
	КонецЕсли;
	Если Параметры.Свойство("СтруктурноеПодразделение") Тогда
		Отчет.СтруктурноеПодразделение = Параметры.СтруктурноеПодразделение;
	КонецЕсли;
	
	НадписьВыводимыеПараметры = "Выводимые параметры";
	НадписьОтбор = "Отбор";
	НадписьПараметры = "Параметры";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""Вид товарного договора"" КАК Параметр,
		|	""ПеречислениеСсылка.дог_ВидыДоговоровПоТоварнымОперациям"" КАК Значение
		|ПОМЕСТИТЬ ВТ_ПараметрыДоговоров
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Первоначальный договор"",
		|	""СправочникСсылка.ДоговорыКонтрагентов""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Замещающий договор"",
		|	""СправочникСсылка.ДоговорыКонтрагентов""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Вид обязательства нетоварного договора"",
		|	""ПеречислениеСсылка.дог_ВидыОбязательствПоДоговору""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Входящий номер"",
		|	""Строка""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Дата договора"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Дата начала"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Дата окончания"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Способ оплаты"",
		|	""ПеречислениеСсылка.ден_ВидыДенежныхСредств""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Вид оплаты"",
		|	""ПеречислениеСсылка.дог_ВидыОплатыПоДоговору""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Дата оплаты по разовым платежам"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""График платежей"",
		|	""СправочникСсылка.дог_ГрафикиОплатыПоДоговорам""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Периодичность регулярных платежей"",
		|	""ПеречислениеСсылка.Периодичность""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Начало регулярных платежей"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Окончание регулярных платежей"",
		|	""Дата""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Способ начисления пени"",
		|	""ПеречислениеСсылка.дог_СпособыНачисленияПени""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ставка пени"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Дней начисления пени"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Допустимых дней просрочки"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Способ расчета суммы платежа"",
		|	""ПеречислениеСсылка.дог_СпособыРасчетаСуммыПлатежей""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Минимальная сумма платежа"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Верхний предел задолженности"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Финансовый показатель планирования"",
		|	""СправочникСсылка.фин_ФинансовыеПоказатели""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Наличие доп. соглашений"",
		|	""Булево""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Вид операций документов планирования платежей"",
		|	""ПеречислениеСсылка.ден_ВидыОперацийЗаявкиНаРасходование""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Общая сумма договора"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Задолженность контрагента (регл.)"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Задолженность контрагента (вал.)"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Задолженность организации контрагенту (регл.)"",
		|	""Число""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Задолженность организации контрагенту (вал.)"",
		|	""Число""";
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьИсполнениеТоварныхДоговоров") Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""Остаток к исполнению (сумма)"",
			|	""Число""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""Остаток к исполнению (количество)"",
			|	""Число""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""% исполнения (сумма)"",
			|	""Число""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""% исполнения (количество)"",
			|	""Число""";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеПараметрыДоговоров.Ссылка КАК Параметр,
		|	NULL КАК Описание
		|ИЗ
		|	ПланВидовХарактеристик.дог_ДополнительныеПараметрыДоговоров КАК ДополнительныеПараметрыДоговоров
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ПараметрыДоговоров.Параметр,
		|	ВТ_ПараметрыДоговоров.Значение
		|ИЗ
		|	ВТ_ПараметрыДоговоров КАК ВТ_ПараметрыДоговоров";

	Отчет.ДоступныеПараметры.Загрузить(Запрос.Выполнить().Выгрузить());
	//ОтправкаПечатныхФормПоЭлектроннойПочте.НастроитьКнопкиОтправки(ЭтаФорма, Элементы.ОсновнаяКоманднаяПанель);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Отчет.Организация, Отчет.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Отчет.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет   = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(Отчет.СтруктурноеПодразделение) И Отчет.ВключаяПодчиненные Тогда
		Отчет.ВключаяПодчиненные = Ложь;
	КонецЕсли;
	//Элементы.ВключаяПодчиненные.Видимость = ЗначениеЗаполнено(Отчет.СтруктурноеПодразделение);	
	
КонецПроцедуры

&НаСервере
Функция СписокПараметров()
	
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(Отчет.ДоступныеПараметры.Выгрузить().ВыгрузитьКолонку("Параметр"));
	Возврат СЗ;
	
КонецФункции

&НаСервере
Функция СписокВидов()
	
	СЗ = Новый СписокЗначений;
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.Больше);
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.БольшеИлиРавно);
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.Меньше);
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.МеньшеИлиРавно);
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.НеРавно);
	СЗ.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.Равно);
	
	Возврат СЗ;
	
КонецФункции

&НаСервере
Функция ПолучитьТип(Параметр)
	
	Если ТипЗнч(Параметр) = Тип("ПланВидовХарактеристикСсылка.дог_ДополнительныеПараметрыДоговоров") Тогда
		Возврат Параметр.ТипЗначения;
	Иначе
		Строки = Отчет.ДоступныеПараметры.НайтиСтроки(Новый Структура("Параметр",Параметр));
		Если Строки.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый ОписаниеТипов(Строки[0].Описание);
		КонецЕсли;
	КонецЕсли;
	
Конецфункции

&НаСервере
Функция ЗаполнитьНастройкиПриОткрытииОтчета() Экспорт
	
	ПользователиДляОтбора = Новый Массив;
	ПользователиДляОтбора.Добавить(ПараметрыСеанса.ТекущийПользователь);
	Если Метаданные.Справочники.Найти("ГруппыПользователей")<>Неопределено Тогда
		
		ПользователиДляОтбора.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОтчета.Ссылка КАК СохраненнаяНастройкаОтчета,
	|	НастройкиОтчета.Пользователь КАК Владелец,
	|	НастройкиОтчета.Ссылка.НастраиваемыйОбъект
	|ПОМЕСТИТЬ СохраненныеНастройкиОтчета
	|ИЗ
	|	Справочник.общ_СохраненныеНастройки.Пользователи КАК НастройкиОтчета
	|ГДЕ
	|	(НЕ НастройкиОтчета.Ссылка.ПометкаУдаления)
	|	И НастройкиОтчета.Ссылка.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.НастройкиОтчета)
	|	И НастройкиОтчета.Пользователь В(&Пользователи)
	|	И НастройкиОтчета.Ссылка.ИспользоватьПриОткрытии = ИСТИНА
	|	И НастройкиОтчета.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиФормы.Ссылка КАК СохраненнаяНастройкаФормы,
	|	НастройкиФормы.Пользователь КАК Владелец,
	|	НастройкиФормы.Ссылка.НастраиваемыйОбъект
	|ПОМЕСТИТЬ СохраненныеНастройкиФормы
	|ИЗ
	|	Справочник.общ_СохраненныеНастройки.Пользователи КАК НастройкиФормы
	|ГДЕ
	|	(НЕ НастройкиФормы.Ссылка.ПометкаУдаления)
	|	И НастройкиФормы.Ссылка.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.НастройкиПользователяНастройкиОтчета)
	|	И НастройкиФормы.Пользователь В(&Пользователи)
	|	И НастройкиФормы.Ссылка.ИспользоватьПриОткрытии = ИСТИНА
	|	И НастройкиФормы.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СохраненныеНастройкиОтчета.СохраненнаяНастройкаОтчета, ЗНАЧЕНИЕ(Справочник.общ_СохраненныеНастройки.ПустаяСсылка)) КАК НастройкаОтчета,
	|	ЕСТЬNULL(СохраненныеНастройкиФормы.СохраненнаяНастройкаФормы, ЗНАЧЕНИЕ(Справочник.общ_СохраненныеНастройки.ПустаяСсылка)) КАК НастройкаФормы
	|ИЗ
	|	СохраненныеНастройкиОтчета КАК СохраненныеНастройкиОтчета
	|		ПОЛНОЕ СОЕДИНЕНИЕ СохраненныеНастройкиФормы КАК СохраненныеНастройкиФормы
	|		ПО СохраненныеНастройкиОтчета.Владелец = СохраненныеНастройкиФормы.Владелец
	|			И СохраненныеНастройкиОтчета.НастраиваемыйОбъект = СохраненныеНастройкиФормы.НастраиваемыйОбъект";
	
	Запрос.УстановитьПараметр("Пользователи", ПользователиДляОтбора);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "ОтчетОбъект.дог_РеестрДоговоров");
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		СохраненнаяНастройка = ТаблицаРезультата[0].НастройкаОтчета;
		Если ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
			ПрименитьНастройку();
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкуСервер() Экспорт
	
	ДополнительныеПоля = Новый СписокЗначений;
	ДополнительныеПоля.Добавить(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, "ПользовательскиеНастройки");
	ДополнительныеПоля.Добавить(Отчет.КомпоновщикНастроек.ФиксированныеНастройки, "ФиксированныеНастройки");
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Для Каждого ТЧ Из ОтчетОбъект.Метаданные().ТабличныеЧасти Цикл
		ДополнительныеПоля.Добавить(ОтчетОбъект[ТЧ.Имя].Выгрузить(),ТЧ.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
		ДополнительныеПоля.Добавить(ОтчетОбъект[Реквизит.Имя],Реквизит.Имя);
	КонецЦикла;
	ОтчетОбъект.СохраненнаяНастройка = СохраненнаяНастройка;
	общ_СтандартныеОтчетыСервер.СохранитьНастройку(ОтчетОбъект, ДополнительныеПоля);
	
КонецПроцедуры

&НаСервере
Функция Сохранять()
	
	Возврат СохраненнаяНастройка.СохранятьАвтоматически;
	
КонецФункции

&НаСервере
Процедура ПрименитьНастройку() Экспорт
	
	ОбъектНастройки = СохраненнаяНастройка.ПолучитьОбъект();
	мХранилищеНастроек = ОбъектНастройки.ХранилищеНастроек.Получить();
	Если ТипЗнч(мХранилищеНастроек) = Тип("Структура") Тогда
		Если мХранилищеНастроек.Свойство("ПользовательскиеНастройки") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(мХранилищеНастроек.ПользовательскиеНастройки);
		КонецЕсли;
		Если мХранилищеНастроек.Свойство("ФиксированныеНастройки") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(мХранилищеНастроек.ФиксированныеНастройки);
		КонецЕсли;
		Если мХранилищеНастроек.Свойство("НастройкиКомпоновщика") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(мХранилищеНастроек.НастройкиКомпоновщика);
		КонецЕсли;
		Для Каждого ЭлементНастроек Из мХранилищеНастроек Цикл
			Попытка
				Если ТипЗнч(ЭлементНастроек.Значение)=Тип("ТаблицаЗначений")  Тогда
                    Отчет[ЭлементНастроек.Ключ].Загрузить(ЭлементНастроек.Значение);
				Иначе
					Отчет[ЭлементНастроек.Ключ]= ЭлементНастроек.Значение;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Заголовок = "Реестр договоров / " + ОбъектНастройки.Наименование;
	СкомпоноватьРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку() Экспорт
	
	СохранитьНастройкуСервер();
	
КонецПроцедуры
