////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда

Перем НП Экспорт;  				  // Настройка периода

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	

КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат) Экспорт
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНач),КонецМесяца(ДатаНач),Истина) Тогда
		Возврат;
	КонецЕсли;

	ДокументРезультат.Очистить();
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	Явка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
	Выходной = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;
	ОтработанноеВПределахНормы = Перечисления.ВидыВремени.ОтработанноеВПределахНормы;	
	
	ЗапросТабель = Новый Запрос();
	ЗапросТабель.УстановитьПараметр("НачалоМесяца", 		  НачалоКвартала(ДатаНач));
	ЗапросТабель.УстановитьПараметр("ОкончаниеМесяца", 		  КонецКвартала(ДатаНач));
	ЗапросТабель.УстановитьПараметр("НеуказанноеОбозначение", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	ЗапросТабель.УстановитьПараметр("ПустаяОрганизация",	  Справочники.Организации.ПустаяСсылка());
	ЗапросТабель.УстановитьПараметр("ПоДням",				  Перечисления.ВидыУчетаВремени.ПоДням);
	ЗапросТабель.УстановитьПараметр("Уволен",				  Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	МассивПраздничные = Новый Массив;
	МассивПраздничные.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных);
	МассивПраздничные.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	ЗапросТабель.УстановитьПараметр("Праздничные", МассивПраздничные);
	
	МассивСверхурочные = Новый Массив();
	МассивСверхурочные.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	МассивСверхурочные.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаСверхурочныеЧасы);
	
	ЗапросТабель.УстановитьПараметр("Сверхурочные", МассивСверхурочные);
	ЗапросТабель.УстановитьПараметр("ОплатаСверхурочных", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	ЗапросТабель.УстановитьПараметр("СпособРасчетаДоплатаЗаНочные", Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);

	МассивОпределенияКодовПоКоду = Новый Массив;
	МассивОпределенияКодовПоКоду.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);
	МассивОпределенияКодовПоКоду.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);

	ЗапросТабель.УстановитьПараметр("Праздник",			Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	ЗапросТабель.УстановитьПараметр("ОчередныеОтпуска",	МассивОпределенияКодовПоКоду);
	ЗапросТабель.УстановитьПараметр("БуквенныйКодПраздника", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.БуквенныйКод);
	ЗапросТабель.УстановитьПараметр("ЦифровойКодПраздника", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.ЦифровойКод);
	ЗапросТабель.УстановитьПараметр("Явка",		Явка);
	ЗапросТабель.УстановитьПараметр("Выходной", Выходной);
	ЗапросТабель.УстановитьПараметр("ОтработанноеВПределахНормы",	Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	ЗапросТабель.УстановитьПараметр("ЧасовоеНеотработанное",		Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	
	УсловиеВЗапрос = "";
	УсловиеНаГоловныеОрганизации = "";
	Если ОтборОрганизации Тогда
		ЗапросТабель.УстановитьПараметр("Организация", Организация);
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ЗапросТабель.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.ГоловнаяОрганизация
			|	КОНЕЦ КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организация)");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  
			
			ЗапросТабель.УстановитьПараметр("ГоловнаяОрганизация", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаГоловныеОрганизации = " Организация " + ВидСравненияДляОрганизации + " &ГоловнаяОрганизация";
		Иначе
			УсловиеНаГоловныеОрганизации = " Организация " + ВидСравненияДляОрганизации + " (&ГоловнаяОрганизация)";
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеВЗапрос = " И ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " &Организация";
		Иначе
			УсловиеВЗапрос = " И ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " (&Организация)";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПодразделение Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		
		Если ВидСравненияПодразделение = ВидСравнения.Равно Тогда
			ВидСравненияДляПодразделения = "=" 
		ИначеЕсли ВидСравненияПодразделение = ВидСравнения.НеРавно Тогда
			ВидСравненияДляПодразделения = "<>"
		ИначеЕсли ВидСравненияПодразделение = ВидСравнения.ВСписке Тогда
			ВидСравненияДляПодразделения = "В"
		ИначеЕсли ВидСравненияПодразделение = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляПодразделения = "НЕ В"
		ИначеЕсли ВидСравненияПодразделение = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделение = ВидСравнения.ВИерархии Тогда
			ВидСравненияДляПодразделения = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияПодразделение = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделение = ВидСравнения.НеВИерархии Тогда
			ВидСравненияДляПодразделения = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияПодразделение = ВидСравнения.Равно ИЛИ ВидСравненияПодразделение = ВидСравнения.НеРавно Тогда
			УсловиеВЗапрос = УсловиеВЗапрос + " И ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " &ПодразделениеОрганизации";
		Иначе
			УсловиеВЗапрос = УсловиеВЗапрос + " И ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " (&ПодразделениеОрганизации)";
		КонецЕсли;
		
	КонецЕсли;
	
	УсловиеПоРаботникам = "";
	Если ОтборРаботника Тогда
		
		ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", Работник);
	
		Если ВидСравненияРаботника = ВидСравнения.Равно Тогда
			ВидСравненияРаботник = "=" 
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеРавно Тогда
			ВидСравненияРаботник = "<>"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСписке Тогда
			ВидСравненияРаботник = "В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСписке Тогда
			ВидСравненияРаботник = "НЕ В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.ВИерархии Тогда
			ВидСравненияРаботник = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.НеВИерархии Тогда
			ВидСравненияРаботник = "НЕ В ИЕРАРХИИ"
		КонецЕсли; 
		
		Если ВидСравненияРаботник = "=" ИЛИ ВидСравненияРаботник = "<>" Тогда
			УсловиеПоРаботникам = " ФизЛицо " + ВидСравненияРаботник + " &РаботникиОрганизации"
		Иначе
			УсловиеПоРаботникам = " ФизЛицо " + ВидСравненияРаботник + "(&РаботникиОрганизации)"
		КонецЕсли; 
			
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПоРаботникам
	КонецЕсли; 

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Начисления.Приказ КАК Приказ,
	|	МАКСИМУМ(Работники.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(НЕ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ NULL )
	|				И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &НеуказанноеОбозначение
	|				И ПериодДействия МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|				" + УсловиеВЗапрос + ") КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО Начисления.Организация = Работники.Организация
	|			И Начисления.ОбособленноеПодразделение = Работники.ОбособленноеПодразделение
	|			И Начисления.ФизЛицо = Работники.Физлицо
	|			И Начисления.Приказ = Работники.Приказ
	|			И (Работники.Период <= Начисления.ПериодДействияНачало)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.НомерСтроки,
	|	Начисления.ФизЛицо,
	|	Начисления.Организация,
	|	Начисления.ОбособленноеПодразделение,
	|	Начисления.Приказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Приказ,
	|	Организация,
	|	ОбособленноеПодразделение,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоследнихНазначений.Регистратор КАК Регистратор,
	|	ДатыПоследнихНазначений.НомерСтроки КАК НомерСтроки,
	|	ДатыПоследнихНазначений.ФизЛицо,
	|	ДатыПоследнихНазначений.Приказ,
	|	ДатыПоследнихНазначений.Организация,
	|	ДатыПоследнихНазначений.ОбособленноеПодразделение,
	|	Работники.ТабельныйНомер КАК ТабельныйНомер,
	|	Работники.Должность КАК Должность,
	|	Работники.ТарифныйРазряд КАК ТарифныйРазряд,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТ_Работники
	|ИЗ
	|	ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ДатыПоследнихНазначений.Организация = Работники.Организация
	|			И ДатыПоследнихНазначений.ОбособленноеПодразделение = Работники.ОбособленноеПодразделение
	|			И ДатыПоследнихНазначений.ФизЛицо = Работники.Физлицо
	|			И ДатыПоследнихНазначений.Приказ = Работники.Приказ
	|			И ДатыПоследнихНазначений.Период = Работники.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДниМесяца.ДатаКалендаря КАК ДатаКалендаря,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
	|				И ДниМесяца.ВидДня = &Праздник
	|			ТОГДА &БуквенныйКодПраздника
	|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод
	|	КОНЕЦ КАК БуквенныйКод,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
	|				И ДниМесяца.ВидДня = &Праздник
	|			ТОГДА &ЦифровойКодПраздника
	|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ЦифровойКод
	|	КОНЕЦ КАК ЦифровойКод,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
	|				И ДниМесяца.ВидДня = &Праздник
	|			ТОГДА &Выходной
	|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|	КОНЕЦ КАК ОбозначениеВТабелеУчетаРабочегоВремени,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Приказ КАК Приказ,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета В (&Праздничные)
	|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПраздничныеЧасы,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета В (&Сверхурочные)
	|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СверхурочныеЧасы,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НочныеЧасы
	|ПОМЕСТИТЬ ВТ_ИспользованиеВремени
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДниМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				(НЕ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ NULL )
	|					И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &НеуказанноеОбозначение
	|					И (НЕ Сторно)
	|					И ПериодДействия МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|					" + УсловиеВЗапрос + ") КАК Начисления
	|		ПО ДниМесяца.ДатаКалендаря <= Начисления.ПериодДействияКонец
	|			И ДниМесяца.ДатаКалендаря >= Начисления.ПериодДействияНачало
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ НЕ NULL 
	|					И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &НеуказанноеОбозначение
	|					И Сторно
	|					И ПериодДействия МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|					" + УсловиеВЗапрос + ") КАК СторноНачисления
	|		ПО (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (Начисления.ВидРасчета = СторноНачисления.ВидРасчета)
	|			И (Начисления.ФизЛицо = СторноНачисления.ФизЛицо)
	|			И (Начисления.Организация = СторноНачисления.Организация)
	|			И (Начисления.Приказ = СторноНачисления.Приказ)
	|			И (Начисления.ПериодРегистрации < СторноНачисления.ПериодРегистрации)
	|			И (ДниМесяца.ДатаКалендаря МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец)
	|ГДЕ
	|	ДниМесяца.ДатаКалендаря МЕЖДУ &НачалоМесяца И &ОкончаниеМесяца
	|	И СторноНачисления.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИспользованиеВремени.ФизЛицо КАК ФизЛицо,
	|	ИспользованиеВремени.Приказ КАК Приказ,
	|	ИспользованиеВремени.ДатаКалендаря КАК ДатаКалендаря,
	|	ИспользованиеВремени.ВидУчетаВремени,
	|	ИспользованиеВремени.Регистратор КАК Регистратор,
	|	ИспользованиеВремени.НомерСтроки КАК НомерСтроки,
	|	ИспользованиеВремени.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ИспользованиеВремени.ПериодДействияКонец КАК ПериодДействияКонец,
	|	МАКСИМУМ(ВЫБОР
	|				// если сверхурочные регистрируются по дням, то выводим эти часы каждый день, иначе - только общую сумму часов за период
	|			КОГДА ИспользованиеВремени.ВидРасчета = &ОплатаСверхурочных
	|				ТОГДА ВЫБОР
	|						КОГДА НАЧАЛОПЕРИОДА(ИспользованиеВремени.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИспользованиеВремени.ПериодДействияКонец, ДЕНЬ)
	|							ТОГДА ИспользованиеВремени.СверхурочныеЧасы
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(ИспользованиеВремени.ОтработаноЧасов, 0)
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	ИспользованиеВремени.БуквенныйКод,
	|	ИспользованиеВремени.ЦифровойКод КАК ЦифровойКод,
	|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени КАК ВидВремени,
	|	ИспользованиеВремени.Организация КАК Организация,
	|	ИспользованиеВремени.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ИспользованиеВремени.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	Работники.ТабельныйНомер КАК ТабельныйНомер,
	|	Работники.Должность КАК Должность,
	|	Работники.ТарифныйРазряд КАК ТарифныйРазряд,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) <> 0
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
	|							ТОГДА ЕСТЬNULL(ОтработанноеВремя.Часов, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		КОГДА ИспользованиеВремени.ВидУчетаВремени = &ПоДням
	|			ТОГДА ЕСТЬNULL(МАКСИМУМ(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение), 0)
	|		ИНАЧЕ ЕСТЬNULL(МАКСИМУМ(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) - СУММА(ВЫБОР
	|						КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени = &ОтработанноеВПределахНормы
	|								И ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени = &ЧасовоеНеотработанное
	|							ТОГДА ОтработанноеВремя.Часов
	|						ИНАЧЕ 0
	|					КОНЕЦ), 0)
	|	КОНЕЦ КАК ЧасовПоГрафику,
	|	МАКСИМУМ(ИспользованиеВремени.ПраздничныеЧасы) КАК ПраздничныеЧасы,
	|	МАКСИМУМ(ИспользованиеВремени.СверхурочныеЧасы) КАК СверхурочныеЧасы,
	|	МАКСИМУМ(ИспользованиеВремени.НочныеЧасы) КАК НочныеЧасы
	|ПОМЕСТИТЬ ВТ_ВремяПоДням
	|ИЗ
	|	ВТ_ИспользованиеВремени КАК ИспользованиеВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ИспользованиеВремени.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ИспользованиеВремени.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|			И ИспользованиеВремени.ДатаКалендаря = ГрафикиРаботыПоВидамВремени.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работники КАК Работники
	|		ПО ИспользованиеВремени.Регистратор = Работники.Регистратор
	|			И ИспользованиеВремени.НомерСтроки = Работники.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
	|		ПО ИспользованиеВремени.ФизЛицо = ОтработанноеВремя.Физлицо
	|			И ИспользованиеВремени.Приказ = ОтработанноеВремя.Приказ
	|			И ИспользованиеВремени.Организация = ОтработанноеВремя.Организация
	|			И ИспользованиеВремени.ДатаКалендаря = ОтработанноеВремя.Период
	|			И (НЕ ОтработанноеВремя.СводнаяЗапись)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИспользованиеВремени.ФизЛицо,
	|	ИспользованиеВремени.Приказ,
	|	ИспользованиеВремени.ДатаКалендаря,
	|	ИспользованиеВремени.ВидУчетаВремени,
	|	ИспользованиеВремени.Регистратор,
	|	ИспользованиеВремени.НомерСтроки,
	|	ИспользованиеВремени.ПериодДействияНачало,
	|	ИспользованиеВремени.ПериодДействияКонец,
	|	ИспользованиеВремени.БуквенныйКод,
	|	ИспользованиеВремени.ЦифровойКод,
	|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени,
	|	ИспользованиеВремени.Организация,
	|	ИспользованиеВремени.ОбособленноеПодразделение,
	|	ИспользованиеВремени.ЗачетОтработанногоВремени,
	|	Работники.ТабельныйНомер,
	|	Работники.Должность,
	|	Работники.ТарифныйРазряд,
	|	Работники.ПодразделениеОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИспользованиеВремени.ФизЛицо КАК ФизЛицо,
	|	ИспользованиеВремени.Приказ КАК Приказ,
	|	ИспользованиеВремени.ДатаКалендаря КАК ДатаКалендаря,
	|	ИспользованиеВремени.ВидУчетаВремени,
	|	ИспользованиеВремени.Регистратор КАК Регистратор,
	|	ИспользованиеВремени.НомерСтроки КАК НомерСтроки,
	|	ИспользованиеВремени.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ИспользованиеВремени.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ИспользованиеВремени.ОтработаноЧасов,
	|	ИспользованиеВремени.БуквенныйКод,
	|	ИспользованиеВремени.ЦифровойКод КАК ЦифровойКод,
	|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ИспользованиеВремени.ВидВремени,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|				ТОГДА """"
	|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|				ТОГДА """"
	|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|		КОНЕЦ, ИспользованиеВремени.ФизЛицо.Наименование) КАК ФИО,
	|	ВЫРАЗИТЬ(ИспользованиеВремени.ОбособленноеПодразделение.НаименованиеПолное КАК СТРОКА(250)) КАК ИмяОрганизации,
	|	ИспользованиеВремени.ОбособленноеПодразделение КАК Организация,
	|	ИспользованиеВремени.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ИспользованиеВремени.ТабельныйНомер КАК ТабельныйНомер,
	|	ИспользованиеВремени.Должность.Наименование КАК Должность,
	|	ИспользованиеВремени.ТарифныйРазряд.Наименование КАК ТарифныйРазряд,
	|	ИспользованиеВремени.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИспользованиеВремени.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения,
	|	ИспользованиеВремени.ЧасовПоГрафику КАК ЧасовПоГрафику,
	|	ИспользованиеВремени.ПраздничныеЧасы КАК ПраздничныеЧасы,
	|	ИспользованиеВремени.СверхурочныеЧасы КАК СверхурочныеЧасы,
	|	ИспользованиеВремени.НочныеЧасы КАК НочныеЧасы
	|ИЗ
	|	ВТ_ВремяПоДням КАК ИспользованиеВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ОкончаниеМесяца, " + УсловиеПоРаботникам + ") КАК ФИОФизЛицСрезПоследних
	|		ПО ИспользованиеВремени.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизации
	|		ПО ИспользованиеВремени.Организация = УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИспользованиеВремени.ОбособленноеПодразделение.Наименование,
	|	ИмяПодразделения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL((НЕ УчетнаяПолитикаПоПерсоналуОрганизации.НеВестиУчетПоТабельнымНомерам), ИСТИНА)
	|			ТОГДА ИспользованиеВремени.ТабельныйНомер
	|		ИНАЧЕ ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|					КОГДА ФИОФизЛицСрезПоследних.Имя = """"
	|						ТОГДА """"
	|					ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
	|				КОНЕЦ + ВЫБОР
	|					КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
	|						ТОГДА """"
	|					ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|				КОНЕЦ, ИспользованиеВремени.ФизЛицо.Наименование)
	|	КОНЕЦ,
	|	Приказ,
	|	ДатаКалендаря,
	|	ЦифровойКод";
	
	ЗапросТабель.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросТабель.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Сообщить("Данные не обнаружены!");
		Возврат;
		
	КонецЕсли;
		
	Макет 		= ПолучитьМакет("Табель");
	
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	
	ОбластьДанныхШапка.Параметры.ДатаНач     = НачалоКвартала(ДатаНач);
	ОбластьДанныхШапка.Параметры.ДатаКон     = КонецКвартала(ДатаНач);
	
	ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка,
	|	КлассификаторИспользованияРабочегоВремени.БуквенныйКод
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	КлассификаторИспользованияРабочегоВремени.ВидВремени = &ЦелодневноеНеотработанное");
		
	Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		
	СоответствиеЦелодневныхНевыходов = Новый Соответствие;
	СоответствиеКодовЦелодневныхНевыходов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЦелодневныхНевыходов.Вставить(Выборка.Ссылка, 0);
		СоответствиеКодовЦелодневныхНевыходов.Вставить(Выборка.Ссылка,Выборка.БуквенныйКод);
	КонецЦикла;
	
	// Определим ссылку на элементы справочника КлассификаторИспользованияРабочегоВремени - ночное время	
	УчетВремениНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
		
	// список регистраторов и номеров строк, которые уже учли при подсчете праздничных, ночных и сверхурочных
	СоответствиеРегистраторов = Новый Соответствие;
	ОбластьДанныхСтрока3	= Макет.ПолучитьОбласть("Строка2");
	ОбластьДанныхСтрока2	= Макет.ПолучитьОбласть("Строка1");
	ОбластьДанныхСтрока1	= Макет.ПолучитьОбласть("Строка");
	ТекФизЛицо = Неопределено;
	
	Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
	
		Если ВыборкаПоРаботнику.Организация = NULL Тогда
			Продолжить;
		КонецЕсли;
	
		Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			НомерПП = 0;
			ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
						
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ФизЛицо") Цикл
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Приказ") Цикл
					
					ДниПерваяПоловина  = 0;
					ЧасыПерваяПоловина = 0;
					ДниВтораяПоловина  = 0;
					ЧасыВтораяПоловина = 0;

					ЧасыСверхурочные   = 0;
					ЧасыНочные 		   = 0;
					ЧасыПраздничные    = 0;
					ЧислоМесяца = 0;   				
					
					Если ТекФизЛицо = Неопределено Тогда 
						ТекФизЛицо = ВыборкаПоРаботнику.ФИО;
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					КонецЕсли;
															
					// заполняем раздел "Отметки о явках и неявках на работу по числам месяца"
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаКалендаря") Цикл
						
						Если ТекФизЛицо <> ВыборкаПоРаботнику.ФИО Тогда 
						
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							ТекФизЛицо = ВыборкаПоРаботнику.ФИО;
								
						КонецЕсли;
						
						Если ЧислоМесяца = 0 Тогда
							
							ЧислоМесяца = Месяц(ВыборкаПоРаботнику.ДатаКалендаря);
													
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								СоответствиеЦелодневныхНевыходов.Вставить(Элемент.Ключ,0)
							КонецЦикла; 
							
							ОбластьДанныхСтрока = ОбластьДанныхСтрока1;
													
							СоответствиеРегистраторов.Очистить();     							
						
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.Работник = ВыборкаПоРаботнику.ФИО + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность + ?(НЕ ЗначениеЗаполнено(ВыборкаПоРаботнику.ТарифныйРазряд), "", ", " + ВыборкаПоРаботнику.ТарифныйРазряд);
							ОбластьДанныхСтрока.Параметры.ТабельныйНомер = ВыборкаПоРаботнику.ТабельныйНомер;
													
						КонецЕсли;
						
						Если ЧислоМесяца <> Месяц(ВыборкаПоРаботнику.ДатаКалендаря) Тогда
		
							НомерПП = НомерПП + 1;
																												
							ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
							ОбластьДанныхСтрока.Параметры.Работник = ВыборкаПоРаботнику.ФИО + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность + ?(НЕ ЗначениеЗаполнено(ВыборкаПоРаботнику.ТарифныйРазряд), "", ", " + ВыборкаПоРаботнику.ТарифныйРазряд);
							ОбластьДанныхСтрока.Параметры.ТабельныйНомер = ВыборкаПоРаботнику.ТабельныйНомер;
														
							// заполняем раздел "Отработано за"
							ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
							ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
							ОбластьДанныхСтрока.Параметры.Месяц = ВыборкаПоРаботнику.ДатаКалендаря - 1;
							
							ОбластьДанныхСтрока.Параметры.ЧасыСверхурочные 	= ЧасыСверхурочные;
							ОбластьДанныхСтрока.Параметры.ЧасыНочные 		= ЧасыНочные;
							ОбластьДанныхСтрока.Параметры.ЧасыПраздничные 	= ЧасыПраздничные;
							
							// заполняем раздел "Неявки по причинам"
							СчНеявок = 0;
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								Если Элемент.Значение > 0 Тогда
									СчНеявок = СчНеявок + 1;
						            ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = СоответствиеКодовЦелодневныхНевыходов[Элемент.Ключ];
						            ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Элемент.Значение;
								КонецЕсли;
								
								Если СчНеявок = 8 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла; 
																
							ДокументРезультат.Вывести(ОбластьДанныхСтрока);
														
							ДниПерваяПоловина  = 0;
							ЧасыПерваяПоловина = 0;
							ДниВтораяПоловина  = 0;
							ЧасыВтораяПоловина = 0;

							ЧасыСверхурочные   = 0;
							ЧасыНочные 		   = 0;
							ЧасыПраздничные    = 0;
							
							Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								СоответствиеЦелодневныхНевыходов.Вставить(Элемент.Ключ,0)
							КонецЦикла; 
																
							СоответствиеРегистраторов.Очистить();
							
							ЧислоМесяца = Месяц(ВыборкаПоРаботнику.ДатаКалендаря);
						
						КонецЕсли;
																
						Если Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 1 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 4 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 7
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 10 Тогда  							
						
							ЗаполнитьМакет(НомерПП, ЧислоМесяца, ДниПерваяПоловина, ЧасыПерваяПоловина, ДниВтораяПоловина, ЧасыВтораяПоловина, ЧасыСверхурочные, ЧасыНочные, ЧасыПраздничные, 
								ОбластьДанныхСтрока, СоответствиеЦелодневныхНевыходов, СоответствиеРегистраторов, ВыборкаПоРаботнику, Выходной, УчетВремениНочноеВремя, 
								ОтработанноеВПределахНормы, Макет, ДокументРезультат, СоответствиеКодовЦелодневныхНевыходов, ОбластьДанныхКолонтитул);
																							
						ИначеЕсли Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 2 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 5 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 8
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 11 Тогда
																
							ОбластьДанныхСтрока = ОбластьДанныхСтрока2;  							
						
							ЗаполнитьМакет(НомерПП, ЧислоМесяца, ДниПерваяПоловина, ЧасыПерваяПоловина, ДниВтораяПоловина, ЧасыВтораяПоловина, ЧасыСверхурочные, ЧасыНочные, ЧасыПраздничные, 
								ОбластьДанныхСтрока, СоответствиеЦелодневныхНевыходов, СоответствиеРегистраторов, ВыборкаПоРаботнику, Выходной, УчетВремениНочноеВремя, 
								ОтработанноеВПределахНормы, Макет, ДокументРезультат, СоответствиеКодовЦелодневныхНевыходов, ОбластьДанныхКолонтитул);
																							
						ИначеЕсли Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 3 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 6 
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 9
								ИЛИ Месяц(ВыборкаПоРаботнику.ДатаКалендаря) = 12 Тогда
								
							ОбластьДанныхСтрока = ОбластьДанныхСтрока3;
																												
							ЗаполнитьМакет(НомерПП, ЧислоМесяца, ДниПерваяПоловина, ЧасыПерваяПоловина, ДниВтораяПоловина, ЧасыВтораяПоловина, ЧасыСверхурочные, ЧасыНочные, ЧасыПраздничные, 
								ОбластьДанныхСтрока, СоответствиеЦелодневныхНевыходов, СоответствиеРегистраторов, ВыборкаПоРаботнику, Выходной, УчетВремениНочноеВремя, 
								ОтработанноеВПределахНормы, Макет, ДокументРезультат, СоответствиеКодовЦелодневныхНевыходов, ОбластьДанныхКолонтитул); 						
																
						КонецЕсли;
																			
					КонецЦикла;
					
					НомерПП = НомерПП + 1;
											
					Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
						СоответствиеЦелодневныхНевыходов.Вставить(Элемент.Ключ,0)
					КонецЦикла; 
													
					СоответствиеРегистраторов.Очистить();
														
					ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
					ОбластьДанныхСтрока.Параметры.Работник = ВыборкаПоРаботнику.ФИО + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность + ?(НЕ ЗначениеЗаполнено(ВыборкаПоРаботнику.ТарифныйРазряд), "", ", " + ВыборкаПоРаботнику.ТарифныйРазряд);
					ОбластьДанныхСтрока.Параметры.ТабельныйНомер = ВыборкаПоРаботнику.ТабельныйНомер;
					
					// заполняем раздел "Отработано за"
					ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
					ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
					ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.Месяц = ВыборкаПоРаботнику.ДатаКалендаря;
					
					ОбластьДанныхСтрока.Параметры.ЧасыСверхурочные 	= ЧасыСверхурочные;
					ОбластьДанныхСтрока.Параметры.ЧасыНочные 		= ЧасыНочные;
					ОбластьДанныхСтрока.Параметры.ЧасыПраздничные 	= ЧасыПраздничные;
					
					// заполняем раздел "Неявки по причинам"
					СчНеявок = 0;
					Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
						Если Элемент.Значение > 0 Тогда
							СчНеявок = СчНеявок + 1;
				            ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = СоответствиеКодовЦелодневныхНевыходов[Элемент.Ключ];
				            ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Элемент.Значение;
						КонецЕсли;
						
						Если СчНеявок = 8 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;  							
					
					ДокументРезультат.Вывести(ОбластьДанныхСтрока);
					
					Если ТекФизЛицо <> ВыборкаПоРаботнику.ФИО Тогда 
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ТекФизЛицо = ВыборкаПоРаботнику.ФИО;
						
					КонецЕсли;
																				
				КонецЦикла; 
			КонецЦикла; 
			
			ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(ВыборкаПоРаботнику.Организация, КонецМесяца(ДатаНач), глЗначениеПеременной("глТекущийПользователь"));
			ОбластьДанныхПодвал.Параметры.Заполнить(ОтветЛица);
			
			//Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
			//	ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
			//	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
			//	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			//	ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			//	ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
			//КонецЕсли;
			ДокументРезультат.Вывести(ОбластьДанныхПодвал);
			
		КонецЦикла; 
	КонецЦикла; 
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, "Табель учета рабочего времени", Строка(глТекущийПользователь));
КонецПроцедуры

Функция ЗаполнитьМакет(НомерПП, ЧислоМесяца, ДниПерваяПоловина, ЧасыПерваяПоловина, ДниВтораяПоловина, ЧасыВтораяПоловина, ЧасыСверхурочные, ЧасыНочные, ЧасыПраздничные, ОбластьДанныхСтрока, СоответствиеЦелодневныхНевыходов, СоответствиеРегистраторов, ВыборкаПоРаботнику, Выходной, УчетВремениНочноеВремя, ОтработанноеВПределахНормы, Макет, ДокументРезультат, СоответствиеКодовЦелодневныхНевыходов, ОбластьДанныхКолонтитул)

	СимволДня = ""; ОтработаноЧасовЗаДень = 0;
	НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаКалендаря));
	ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаКалендаря) <= 15;
	
	// разберем записи по видам времени
	Пока ВыборкаПоРаботнику.Следующий() Цикл
		Если  ВыборкаПоРаботнику.ВидВремени = ОтработанноеВПределахНормы Тогда
			// работа в дневное время
			Если ВыборкаПоРаботнику.ЗачетОтработанногоВремени = Истина Тогда
				Если ВыборкаПоРаботнику.ЧасовПоГрафику = 0 Тогда
					СимволДня = ""
				Иначе	 
					СимволДня = ВыборкаПоРаботнику.БуквенныйКод
				КонецЕсли; 
				ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ЧасовПоГрафику;
			КонецЕсли;
		ИначеЕсли ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени = УчетВремениНочноеВремя и ВыборкаПоРаботнику.ЧасовПоГрафику = 0 Тогда
		ИначеЕсли ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени = Выходной Тогда 
			// отпуска, приходящиеся на "их собственные" выходные дни
			СимволДня = ""
		ИначеЕсли СоответствиеЦелодневныхНевыходов[ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени] <> Неопределено Тогда 
			// целодневные невыходы (кроме отпусков, приходящихся на "их собственные" выходные)
			СоответствиеЦелодневныхНевыходов.Вставить(ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени,СоответствиеЦелодневныхНевыходов[ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени] + 1);
			Если Найти("," + СимволДня + ",","," + ВыборкаПоРаботнику.БуквенныйКод + ",") = 0 Тогда
				СимволДня = СимволДня + ?(ПустаяСтрока(СимволДня),"",",") + ВыборкаПоРаботнику.БуквенныйКод;
			КонецЕсли; 
		Иначе 
			// прочие начисления, которые попадают в табель (сверхурочные, праздничные)
			Если Найти("," + СимволДня + ",","," + ВыборкаПоРаботнику.БуквенныйКод + ",") = 0 Тогда
				СимволДня = СимволДня + ?(ПустаяСтрока(СимволДня),"",",") + ВыборкаПоРаботнику.БуквенныйКод;
			КонецЕсли; 
			ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ОтработаноЧасов;
		КонецЕсли; 
									
		СоответствиеНомеровСтрок = СоответствиеРегистраторов.Получить(ВыборкаПоРаботнику.Регистратор);
		Если СоответствиеНомеровСтрок = Неопределено
				ИЛИ (СоответствиеНомеровСтрок <> Неопределено
						И СоответствиеНомеровСтрок.Получить(ВыборкаПоРаботнику.НомерСтроки) = Неопределено) Тогда
			
			// часы этой строки документа еще не учитывали
			ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.СверхурочныеЧасы;
			ЧасыПраздничные = ЧасыПраздничные + ВыборкаПоРаботнику.ПраздничныеЧасы;
			ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.НочныеЧасы;
			
			// чтобы повторно не учитывать одни и те же часы, запомним что по этой строке уже сложили часы
			Если СоответствиеНомеровСтрок = Неопределено Тогда
				СоответствиеНомеровСтрок = Новый Соответствие;
				СоответствиеРегистраторов.Вставить(ВыборкаПоРаботнику.Регистратор, СоответствиеНомеровСтрок);
			КонецЕсли;
			СоответствиеНомеровСтрок.Вставить(ВыборкаПоРаботнику.НомерСтроки, 0);
			
		КонецЕсли;
								
	КонецЦикла;
	
	Если СимволДня = "" Тогда
		СимволДня = "В"
	КонецЕсли; 

	ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
	ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = ОтработаноЧасовЗаДень;
	
	Если ОтработаноЧасовЗаДень <> 0 Тогда
		Если ПерваяПоловина Тогда
			ДниПерваяПоловина = ДниПерваяПоловина + 1;
			ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
		Иначе
			ДниВтораяПоловина = ДниВтораяПоловина + 1;
			ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

#КонецЕсли