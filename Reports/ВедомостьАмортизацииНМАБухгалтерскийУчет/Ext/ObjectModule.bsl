Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ОтображатьОформление Экспорт;

Перем ИДКонфигурации;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если ДанныеОтчета = Неопределено Тогда
		ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
	
	// Дополнительные поля
	Если Не ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Использование");
		ДополнительныеПоля.Колонки.Добавить("Представление");
		ДополнительныеПоля.Колонки.Добавить("Поле");
		ДополнительныеПоля.Колонки.Добавить("Положение");
		ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	КонецЕсли;
	
	// Группировки
	Если Не ДанныеОтчета.Свойство("Группировка") Тогда
		Группировка = Новый ТаблицаЗначений;
		Группировка.Колонки.Добавить("Использование");
		Группировка.Колонки.Добавить("Представление");
		Группировка.Колонки.Добавить("Поле");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
		Группировка.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));   
		Группировка.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ДанныеОтчета.Вставить("Группировка", Группировка);
	
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "Организация";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "Организация";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		НоваяСтрока.Оформление  = Новый НастройкаОформления();
		Шрифт = НоваяСтрока.Оформление["Шрифт"];
		Шрифт.Использование = Истина;
		НоваяСтрока.ПоУмолчанию  = Истина;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "НематериальныйАктив";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "Нематериальный актив";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		НоваяСтрока.Оформление  = Новый НастройкаОформления();
		Шрифт = НоваяСтрока.Оформление["Шрифт"];
		Шрифт.Использование = Истина;
		НоваяСтрока.ПоУмолчанию  = Истина;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "Счет";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = "Счет";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		НоваяСтрока.Оформление  = Новый НастройкаОформления();
		Шрифт = НоваяСтрока.Оформление["Шрифт"];
		Шрифт.Использование = Истина;
		НоваяСтрока.ПоУмолчанию  = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений	, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт

	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	

	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	ЗаголовокКолонкиОС = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + ?(ПустаяСтрока(ЗаголовокКолонкиОС), "", " \ ");
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		
		ЗаголовокКолонкиДоп = ""; 
		Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
			
			Если Строка.Ячейки[1].Элементы.Количество() > 0 Тогда
				ЗаголовокКолонкиДоп = ЗаголовокКолонкиДоп + ?(ПустаяСтрока(ЗаголовокКолонкиДоп), "", " \ ");
			КонецЕсли;
			
			Для Каждого Элемент Из Строка.Ячейки[1].Элементы Цикл
				ЗаголовокКолонкиДоп = ЗаголовокКолонкиДоп + Элемент.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	
	Если ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[2];
		ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	КонецЕсли;

	МассивДляУдаления = Новый Массив;
	Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
		
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	НовыйЭлемент.Значение = ЗаголовокКолонкиОС;	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	
	Если ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[1];
		Ячейка2.Элементы.Очистить();
		НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		НовыйЭлемент.Значение = ЗаголовокКолонкиДоп;	
		Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
		Ячейка2.Элементы.Очистить();
		ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	КонецЕсли;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	
	// Форматирование заголовков колонок таблицы
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(ИндексКолонки = 0, Ложь, Истина), Истина);
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериода",         НачалоДня(НачалоПериода));
	КонецЕсли;
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПустаяДата", Дата(1,1,1,0,0,0));
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", КонецДня(КонецПериода));
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки;
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			СтандартныеОтчеты.ДобавитьОформлениеГруппировки(ПолеВыбраннойГруппировки, Структура, , ИспользоватьОформлениеГруппировок);
		КонецЕсли;
	КонецЦикла;
	
	ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПоказатели.Заголовок     = "Показатели";
	ГруппаПоказатели.Использование = Истина;
	ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;      	
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПервоначальнаяСтоимость");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "СтоимостьДляВычисленияАмортизации");
	
	ГруппаДанныеНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачало.Заголовок     = "На начало периода";
	ГруппаДанныеНаНачало.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоСтоимость.Заголовок     = "Стоимость";
	ГруппаДанныеНаНачалоСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоАмортизация = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоАмортизация.Заголовок     = "Амортизация (износ)";
	ГруппаДанныеНаНачалоАмортизация.Использование = Истина;
	ГруппаДанныеНаНачалоАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = "За период";
	ГруппаОбороты.Использование = Истина;
	ГруппаУвеличениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУвеличениеСтоимости.Заголовок     = "Увеличение стоимости";
	ГруппаУвеличениеСтоимости.Использование = Истина;
	ГруппаУвеличениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачислениеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачислениеАмортизации.Заголовок     = "Начисление амортизации (износа)";
	ГруппаНачислениеАмортизации.Использование = Истина;
	ГруппаНачислениеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСписаниеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСписаниеАмортизации.Заголовок     = "Списание амортизации (износа)";
	ГруппаСписаниеАмортизации.Использование = Истина;
	ГруппаСписаниеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаУменьшениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУменьшениеСтоимости.Заголовок     = "Уменьшение стоимости";
	ГруппаУменьшениеСтоимости.Использование = Истина;
	ГруппаУменьшениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаДанныеНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонец.Заголовок     = "На конец периода";
	ГруппаДанныеНаКонец.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецСтоимость.Заголовок     = "Стоимость";
	ГруппаДанныеНаКонецСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецАмортизация = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецАмортизация.Заголовок     = "Амортизация (износ)";
	ГруппаДанныеНаКонецАмортизация.Использование = Истина;
	ГруппаДанныеНаКонецАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		ЭлементПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));		
		ЭлементПорядка.Поле  = Новый  ПолеКомпоновкиДанных("НематериальныйАктив");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;		
	КонецЕсли;	

	КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);		
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели,                "ПоказательБУ");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,   "НаНачалоПериода.СтоимостьНачальныйОстаток");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация, "НаНачалоПериода.АмортизацияНачальныйОстаток");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,       "ЗаПериод.СтоимостьОборотДт");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,       "ЗаПериод.СтоимостьОборотКт");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,     "ЗаПериод.АмортизацияОборотКт");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,       "ЗаПериод.АмортизацияОборотДт");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,    "НаКонецПериода.СтоимостьКонечныйОстаток");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,  "НаКонецПериода.АмортизацияКонечныйОстаток");
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОстаточнаяСтоимость");
	
	Если ГруппаПоказатели.Элементы.Количество() <= 1 Тогда
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
   	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Функция ПолучитьПредставлениеНастройкиДляИстории() Экспорт
	
	ПредставлениеОрганизации = СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект);
	ПредставлениеОрганизации = ?(Не ПустаяСтрока(ПредставлениеОрганизации), " ", "") + ПредставлениеОрганизации;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	
	ОсновнаяЧастьПредставления = СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект) + ПредставлениеОрганизации;// + ПредставлениеПодразделение;
	
	СоответствиеПоказателей = Новый Соответствие;
	СоответствиеПоказателей.Вставить("БУ", "БУ");
	
	ПредставлениеПоказатели = "";
	Для Каждого Показатель Из ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение Тогда
			ПредставлениеПоказатели = ПредставлениеПоказатели + СоответствиеПоказателей[Показатель.Ключ]+ ", ";
		КонецЕсли;
	КонецЦикла;
	ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
	
	ПредставлениеГруппировка = "";
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
		КонецЕсли;	
	КонецЦикла;
	ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
	
	ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
	
	Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеНастройкиДляИстории()

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Ведомость амортизации НМА" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета();
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
КонецПроцедуры

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(ТаблицаПолей) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	Если Не ПоказателиОтчета.БУ.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.СтоимостьНачальныйОстаток";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.АмортизацияНачальныйОстаток";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаНачалоПериода.ОстаточнаяСтоимостьНачПериода";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.СтоимостьОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияОборотКт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЗаПериод.АмортизацияОборотДт";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.СтоимостьКонечныйОстаток";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.АмортизацияКонечныйОстаток";
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "НаКонецПериода.ОстаточнаяСтоимость";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
	
	ДобавитьПоляРесурсовВЗапрещенныеПоля(РодителиПоля);
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	Форма.Режим = "Отбор";
	Форма.РодителиПоля = РодителиПоля;
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;

		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры // ОтборДобавитьЭлемент()

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//Если СохранятьНастройкуОтчета Тогда	
		
		//сохраним список структурных единиц
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений	, "мСписокПодразделений");		               
		
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений 	 = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ОтображатьОформление = Ложь;

#КонецЕсли