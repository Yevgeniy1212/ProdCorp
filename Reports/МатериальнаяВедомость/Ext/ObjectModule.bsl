Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем СписокНоменклатурныхСчетов Экспорт;
Перем ВедетсяУчетПоСкладам Экспорт;

#Если Клиент Тогда 

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
		
	УстановитьПараметрыВывода();
	
	Если мСписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		Сообщить("Не выбрана ни одна организация. Формирование отчета прервано...");
		Возврат Ложь;
	КонецЕсли;
	
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ЕстьСумма = Ложь;
		ЕстьКоличество = Ложь;
		Для каждого Колонка Из Элемент.Колонки Цикл
			Для каждого ВыбранноеПоле Из Колонка.Выбор.Элементы Цикл
				Если Найти(ВыбранноеПоле.Поле, "Сумма") И ВыбранноеПоле.Использование Тогда
					ЕстьСумма = Истина;
				КонецЕсли;
				Если Найти(ВыбранноеПоле.Поле, "Количество") И ВыбранноеПоле.Использование Тогда
					ЕстьКоличество = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если НЕ ЕстьСумма И НЕ ЕстьКоличество Тогда
			Сообщить("Не выбраны показатели ""Сумма"" или ""Количество"". Формирование отчета прервано...");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВидыСубконто = Новый СписокЗначений;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено ТОгда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	Иначе
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	КонецЕсли;
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидыСубконто"));
	ПараметрКомпоновки.Использование = Истина;
	ПараметрКомпоновки.Значение = ВидыСубконто;
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокОрганизаций"));
	ПараметрКомпоновки.Использование = Истина;
	ПараметрКомпоновки.Значение = мСписокСтруктурныхЕдиниц;
	
	Если (ТипЗнч(Счет) = Тип("СписокЗначений") И Счет.Количество() > 0) ИЛИ ЗначениеЗаполнено(Счет) ТОгда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Типовой.Ссылка
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		| ГДЕ
		| 	//УСЛОВИЕ СЧЕТА");
		
		Запрос.УстановитьПараметр("Счет", Счет);
		
		Если ВидСравненияСчета = ВидСравнения.ВИерархии ТОгда
			ТекстЗамены = "Ссылка В ИЕРАРХИИ (&Счет)";
		ИначеЕсли ВидСравненияСчета = ВидСравнения.НеВИерархии ТОгда
			ТекстЗамены = "Ссылка НЕ В ИЕРАРХИИ (&Счет)";
		ИначеЕсли ВидСравненияСчета = ВидСравнения.Равно ТОгда
			ТекстЗамены = "Ссылка = &Счет";
		ИначеЕсли ВидСравненияСчета = ВидСравнения.НеРавно ТОгда
			ТекстЗамены = "Ссылка <> &Счет";
		ИначеЕсли ВидСравненияСчета = ВидСравнения.ВСписке ТОгда
			ТекстЗамены = "Ссылка В (&Счет)";
		ИначеЕсли ВидСравненияСчета = ВидСравнения.НеВСписке ТОгда
			ТекстЗамены = "Ссылка НЕ В (&Счет)";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УСЛОВИЕ СЧЕТА",ТекстЗамены);
		
		СписокСчетов = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСчетов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		СписокСчетов = СписокНоменклатурныхСчетов;
	КонецЕсли;
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокСчетов"));
	ПараметрКомпоновки.Использование = Истина;
	ПараметрКомпоновки.Значение = СписокСчетов;
	
	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЕстьСклады"));
	ПараметрКомпоновки.Использование = Истина;
	
	Если ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено ТОгда
		ПараметрКомпоновки.Значение = Истина;
	Иначе
		ПараметрКомпоновки.Значение = Ложь;
	КонецЕсли;
	
	Если РаскрашиватьГруппировки Тогда
		СвойМакетОформления = ПолучитьМакет("МакетЦветной");
	Иначе
		СвойМакетОформления = ПолучитьМакет("МакетБелый");
	КонецЕсли;
	
	ПерваяВыведеннаяОрганизация = Неопределено;
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,,СвойМакетОформления);
	
	// выводим подвал
	Макет = ПолучитьМакет("МакетПодвала");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подписи");
	
	//организацию берем также первую из списка
	ИскомаяОрганизация = мСписокСтруктурныхЕдиниц[0].Значение;
	Если Не ЗначениеЗаполнено(ИскомаяОрганизация) Тогда
		ИскомаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
																							           "ОсновнаяОрганизация");             
	КонецЕсли;
																								   
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(ИскомаяОрганизация, КонецПериода, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ОбластьПодвал.Параметры.Заполнить(ОтветЛица);															   
	
	
	// попытаемся определить ответственного по складу, если отбор установлен
	ОтборПоСкладу = Неопределено;
	ИскомыйСклад = Неопределено;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ВРег(ЭлементОтбора.ЛевоеЗначение) = "СКЛАД" Тогда
			ОтборПоСкладу = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборПоСкладу <> Неопределено И ОтборПоСкладу.Использование Тогда
		
		Склады = ОтборПоСкладу.ПравоеЗначение;
		
		// в отборе может присутствовать список складов
		Если ТипЗнч(Склады) = Тип("СписокЗначений") Тогда
			Если Склады.Количество() > 0 Тогда
				ИскомыйСклад = Склады[0].Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Склады) = Тип("СправочникСсылка.Склады") Тогда
			ИскомыйСклад = Склады;
		КонецЕсли;
	КонецЕсли;
	
		// если ничего не нашли, то берем из настроек пользователя
	Если Не ЗначениеЗаполнено(ИскомыйСклад) Тогда
		ИскомыйСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
																							     "ОсновнойСклад");             		
		
	КонецЕсли;
              			
	ОтветЛицо = ПрочитатьОтветственноеЛицо(ИскомыйСклад);
	Если Не ОтветЛицо = Неопределено Тогда
		ОбластьПодвал.Параметры.ОтветственноеЛицо = ОбщегоНазначения.ФамилияИнициалыФизЛица(ОтветЛицо);
	КонецЕсли;
	Результат.Вывести(ОбластьПодвал);
	
    		
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыВывода()
	
	// отыграть отрицательное красным
	ЕстьОтрицательное = Ложь;
	Для Каждого ЭлементУсловногоОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		УсловноеОформление = ЭлементУсловногоОформления;
		Если УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#" Тогда
			ЕстьОтрицательное = Истина;
			прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтрицательное Тогда
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#";
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаНачало.КоличествоНачальныйОстаток");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаНачало.СуммаНачальныйОстаток");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаНачало.УчетнаяЦенаНачальныйОстаток");
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОборотыПриход.КоличествоДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОборотыПриход.СуммаДт");
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОборотыРасход.КоличествоКт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОборотыРасход.СуммаКт");
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаКонец.КоличествоКонечныйОстаток");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаКонец.СуммаКонечныйОстаток");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстатокНаКонец.УчетнаяЦенаКонечныйОстаток");
	КонецЕсли;
	
	ЗначениеПараметра = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
	ЗначениеПараметра.Использование = ОтрицательноеКрасным;
	
	// Выводить итоги
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) <> Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = Элемент.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("HorizontalOverallPlacement"));
	ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = Элемент.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("VerticalOverallPlacement"));
	ЗначениеПараметра.Использование = Истина;
	Если ВыводитьОбщиеИтоги Тогда
		ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Конец;
	Иначе
		ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	КонецЕсли;
	
	Для Каждого Элемент ИЗ КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") ТОгда
			Для Каждого Колонка ИЗ Элемент.Колонки Цикл
				Если ТипЗнч(Колонка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
					ЭтоПриход = Ложь;
					ЭтоРасход = Ложь;
					Для Каждого ПолеГруппировки ИЗ Колонка.ПоляГруппировки.Элементы Цикл
						Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОборотыПриход.Приход") Тогда
							ЭтоПриход = Истина;
							прервать;
						КонецЕсли;
						Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОборотыРасход.Расход") Тогда
							ЭтоРасход = Истина;
							прервать;
						КонецЕсли;
					КонецЦикла;
					Если ЭтоПриход ИЛИ ЭтоРасход ТОгда
						ЗначениеПараметра = Колонка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("GroupPlacement"));
						ЗначениеПараметра.Использование = Истина;
						ЗначениеПараметра.Значение = РасположениеИтоговКомпоновкиДанных.Конец;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
		
	
КонецПроцедуры

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
		
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);	
	
КонецПроцедуры

// Процедура читает данные о текущем ответсвенном лице.
//
Функция ПрочитатьОтветственноеЛицо(ИскомыйСклад)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Период, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ИскомыйСклад);
	
	СрезПоследних = Запрос.Выполнить().Выгрузить();
	 	
	Если СрезПоследних.Количество() < 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецФункции // ПрочитатьОтветственноеЛицо()

Функция ПолучитьСписокСчетовСНоменклатурой() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Типовой.Ссылка
	                      |ИЗ
	                      |	ПланСчетов.Типовой КАК Типовой
	                      |ГДЕ
	                      |	Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоНоменклатура
	                      |	И Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоСклад
	                      |	И (НЕ Типовой.ЗапретитьИспользоватьВПроводках)");
						  
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если ПланыСчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады)<>Неопределено ТОгда
		Запрос.УстановитьПараметр("ВидСубконтоСклад", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		ВедетсяУчетПоСкладам = Истина;
	Иначе
		Запрос.УстановитьПараметр("ВидСубконтоСклад", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		ВедетсяУчетПоСкладам = Ложь;
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Типовой.Запасы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСчетов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокСчетов;
	
КонецФункции
	
Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Материальная ведомость " + Счет + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции	

//Функция сохраняет параметры отчета в структуру
//
Функция ПоместитьПараметрыОтчетаВСтруктуру()

	СтруктураОбщихПараметров = Новый Структура;
	СтруктураОбщихПараметров.Вставить("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	СтруктураОбщихПараметров.Вставить("ПоОрганизациям", ПоОрганизациям);
	СтруктураОбщихПараметров.Вставить("ОтрицательноеКрасным", ОтрицательноеКрасным);
	СтруктураОбщихПараметров.Вставить("ВыводитьНачальныйОстаток", ВыводитьНачальныйОстаток);
	СтруктураОбщихПараметров.Вставить("ВыводитьКонечныйОстаток", ВыводитьКонечныйОстаток);
	СтруктураОбщихПараметров.Вставить("ВыводитьПриход", ВыводитьПриход);
	СтруктураОбщихПараметров.Вставить("ВыводитьРасход", ВыводитьРасход);
	СтруктураОбщихПараметров.Вставить("ВыводитьДанныеПоКорСчетам", ВыводитьДанныеПоКорСчетам);
	СтруктураОбщихПараметров.Вставить("ВыводитьДанныеПоКорСубконто1", ВыводитьДанныеПоКорСубконто1);
	СтруктураОбщихПараметров.Вставить("ВыводитьДанныеПоКорСубконто2", ВыводитьДанныеПоКорСубконто2);
	СтруктураОбщихПараметров.Вставить("ВыводитьДанныеПоКорСубконто3", ВыводитьДанныеПоКорСубконто3);
	СтруктураОбщихПараметров.Вставить("ВыводитьОбщиеИтоги", ВыводитьОбщиеИтоги);
	СтруктураОбщихПараметров.Вставить("Счет", Счет);
	СтруктураОбщихПараметров.Вставить("ВидСравненияСчета", ВидСравненияСчета);
	СтруктураОбщихПараметров.Вставить("НастройкиКомпоновщика", КомпоновщикНастроек.Настройки);
	СтруктураОбщихПараметров.Вставить("РаскрашиватьГруппировки", РаскрашиватьГруппировки);
	СтруктураОбщихПараметров.Вставить("ПоказыватьПодписи", ПоказыватьПодписи);
	
	СтруктураОбщихПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураОбщихПараметров.Вставить("КонецПериода", КонецПериода);
	
	Возврат СтруктураОбщихПараметров;
    
КонецФункции

// процедура устанавливает параметры из структуры данных
//
Процедура УстановитьПараметрыОтчетаИзСтруктуры(СтруктураПараметров)
	
	// Тип восстановленного значения должен быть Структура
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;

	СписокОрганизацийСохраняемый = "";
	СтруктураПараметров.Свойство("СписокОрганизаций", СписокОрганизацийСохраняемый);
	Если ТипЗнч(СписокОрганизацийСохраняемый) = Тип("СписокЗначений") Тогда
		мСписокСтруктурныхЕдиниц = СписокОрганизацийСохраняемый;
	Иначе
		мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
	КонецЕсли;
	//ПредставлениеСпискаСтруктурныхЕдиниц = РаботаСДиалогами.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = РаботаСДиалогами.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
	
	НастройкиКомпоновщика = "";
	СтруктураПараметров.Свойство("НастройкиКомпоновщика", НастройкиКомпоновщика);
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ОтрицательноеКрасным", ОтрицательноеКрасным);
	СтруктураПараметров.Свойство("ВыводитьНачальныйОстаток", ВыводитьНачальныйОстаток);
	СтруктураПараметров.Свойство("ВыводитьКонечныйОстаток", ВыводитьКонечныйОстаток);
	СтруктураПараметров.Свойство("ВыводитьПриход", ВыводитьПриход);
	СтруктураПараметров.Свойство("ВыводитьРасход",       ВыводитьРасход);
	СтруктураПараметров.Свойство("ПоОрганизациям",       	  ПоОрганизациям);
	СтруктураПараметров.Свойство("ВыводитьДанныеПоКорСчетам", ВыводитьДанныеПоКорСчетам);
	СтруктураПараметров.Свойство("ВыводитьДанныеПоКорСубконто1",       ВыводитьДанныеПоКорСубконто1);
	СтруктураПараметров.Свойство("ВыводитьДанныеПоКорСубконто2",       ВыводитьДанныеПоКорСубконто2);
	СтруктураПараметров.Свойство("ВыводитьДанныеПоКорСубконто3",       ВыводитьДанныеПоКорСубконто3);
	СтруктураПараметров.Свойство("ВыводитьОбщиеИтоги", ВыводитьОбщиеИтоги);
	СтруктураПараметров.Свойство("Счет",       Счет);
	СтруктураПараметров.Свойство("ВидСравненияСчета",       ВидСравненияСчета);
	СтруктураПараметров.Свойство("РаскрашиватьГруппировки", РаскрашиватьГруппировки);
	СтруктураПараметров.Свойство("ПоказыватьПодписи", ПоказыватьПодписи);
	
	СтруктураПараметров.Свойство("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Свойство("КонецПериода", КонецПериода);
	
КонецПроцедуры

Процедура ОбработкаРасшировкиОтчета(Форма, Расшифровка, СтандартнаяОбработка) Экспорт
	
	// если расшифровываем ресурс отчета - вызываем карточку счета,
	// иначе - стандартная расшифровка
	
	Ресурсы                   = ПолучитьРесурсыРасшифровки(Расшифровка, Форма.ДанныеРасшифровки);
	ПоляРасшифровки           = ПолучитьПоляРасшифровки(Расшифровка, Форма.ДанныеРасшифровки);
	ЗначениеСклада = Неопределено;
	ВидСравненияСклада = Неопределено;
	ЗначениеНоменклатуры = Неопределено;
	ВидСравненияНоменклатуры = Неопределено;
	
	// Если есть хотя-бы один ресурс, значит расшифровываем число
	Если Ресурсы.Количество() <> 0 Тогда
		
		// формируем отчет
		Отчет = Отчеты.КарточкаСчетаТиповой.Создать();
		Отчет.РежимРасшифровки = Истина;
		
		СтандартнаяОбработка = Ложь;
			
		Отчет.НачалоПериода = НачалоПериода;
		Отчет.КонецПериода = КонецПериода;
		Отчет.мСписокСтруктурныхЕдиниц = мСписокСтруктурныхЕдиниц;
		
		МассивЭлементыОтбораКарточкаСчета = Новый Массив;
		
		СчетНайден = Ложь;
		// ищем значение отборов для карточки счета
		Для Каждого Ресурс ИЗ ПоляРасшифровки Цикл
			//так как у нас в расшифровку уже включены значения отборов, то 
			//непосредтсвенно сами отборы пропускаем			
			Если ТипЗнч(Ресурс) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Ресурс.Использование Тогда
					МассивЭлементыОтбораКарточкаСчета.Добавить(Ресурс);
				КонецЕсли;
				Продолжить;
			КонецЕсли;			

			Если Ресурс.Поле = "СчетУчета" Тогда
				СчетНайден = Истина;
				Отчет.Счет = Ресурс.Значение;
			КонецЕсли;
			Если Ресурс.Поле = "Номенклатура" Тогда
				ЗначениеНоменклатуры = Ресурс.Значение;
			КонецЕсли;
			Если Ресурс.Поле = "Склад" Тогда
				ЗначениеСклада = Ресурс.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// если для расшифровки не известен счет и счет из шапки отчета однозначно определить нельзя
		// расшифровку не выполняем
		Если НЕ СчетНайден Тогда
			Если ВидСравненияСчета<>ВидСравнения.Равно Тогда
				Отчет.Счет = ПланыСчетов.Типовой.ПустаяСсылка();
			Иначе
				Отчет.Счет = Счет;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отчет.Счет) ТОгда
			Предупреждение("Расшифровка невозможна. Неизвестен счет.");
			Возврат;
		КонецЕсли;
		
		ЗаполненныеОтборы = Новый Массив;
		
		// заполняем параметры отборов
		Если ЗначениеЗаполнено(ЗначениеНоменклатуры) ТОгда
			НомерСубконто = Отчет.Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура).НомерСтроки;
			ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто" + НомерСубконто, ЗначениеНоменклатуры);
			ЗаполненныеОтборы.Добавить("Номенклатура");
		КонецЕсли;
		
		// заполняем параметры отборов
		Если ЗначениеЗаполнено(ЗначениеСклада) ТОгда
			НомерСубконто = Отчет.Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады).НомерСтроки;
			ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто" + НомерСубконто, ЗначениеСклада);
			ЗаполненныеОтборы.Добавить("Склад");
		КонецЕсли;
		
		Отчет.НачалоПериода = НачалоПериода;
		Отчет.КонецПериода = КонецПериода;
		
		Если МассивЭлементыОтбораКарточкаСчета.Количество() > 0 Тогда
			ОтборКарточкаСчета = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			Для Каждого ЭлементМассива Из МассивЭлементыОтбораКарточкаСчета Цикл
				Если ЭлементМассива.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад")
					 И ЗаполненныеОтборы.Найти("Склад") = Неопределено Тогда
					НомерСубконто = Отчет.Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады).НомерСтроки;
					ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто" + НомерСубконто, ЭлементМассива.ПравоеЗначение, ЭлементМассива.ВидСравнения);
				КонецЕсли;
				Если ЭлементМассива.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура")
					 И ЗаполненныеОтборы.Найти("Номенклатура") = Неопределено Тогда
					НомерСубконто = Отчет.Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура).НомерСтроки;
					ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто" + НомерСубконто, ЭлементМассива.ПравоеЗначение, ЭлементМассива.ВидСравнения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
		
		Попытка
		
			Отчет.Настроить();

			ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
			ФормаОтчета.Открыть();
			ФормаОтчета.ОбновитьОтчет();
		
		Исключение
		КонецПопытки;
		
	Иначе
		// если расшифровываем не ресурс отчета
		СтандартнаяОбработка = Ложь;
		ЭлементДляРасшифровки = ПоляРасшифровки[ПоляРасшифровки.Количество() - 1];
		Если ЗначениеЗаполнено(ЭлементДляРасшифровки.Значение) Тогда
			ОткрытьЗначение(ЭлементДляРасшифровки.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшировкиОтчета()

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ПоместитьПараметрыОтчетаВСтруктуру();
	
	Если СохраненнаяНастройка = Неопределено Тогда
		СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Настройка.Записать();
		
		СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	УстановитьПараметрыОтчетаИзСтруктуры(СтруктураПараметров);
	
КонецПроцедуры

// Получает список группировок, по которым расшифровываем
Функция ПолучитьПоляРасшифровки(Расшифровка, ДанныеРасшифровки)
	
	// Подготовим список полей группировки без ресурсов
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки);
	
	// Модифицируем список.
	// 1. Удалим из списка группы отбора, т.к. при расшифровке другими отчетами (не на СКД) мы эти группы не сможем обработать
	// 2. Удалим поля отбора, отличающиеся по виду от <Поле ВидСравнения Константа>, т.к. только их можем обработать вне СКД
	// 3. Поменяем порядок полей, для того, чтобы порядок группировок в расшифровываемом отчете 
	//    соответствовал порядку расшифровок в исходном отчете (в массиве полей он почему-то обычно "кверх-ногами")
	НовыйМассивПолей = Новый Массив();
	КоличествоПолей  = МассивПолей.Количество();
	Для НомерПоля = 1 По КоличествоПолей Цикл
		
		Поле = МассивПолей[КоличествоПолей - НомерПоля];
		
		Если ТипЗнч(Поле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Поле) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(Поле.ЛевоеЗначение) <> Тип("ПолеКомпоновкиДанных") 
			ИЛИ ТипЗнч(Поле.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") 
			ИЛИ Поле.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено 
			ИЛИ Поле.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовыйМассивПолей.Добавить(Поле);
		
	КонецЦикла;
	
	Возврат НовыйМассивПолей;
	
КонецФункции

// Получает список ресурсов, которые расшифровываются
Функция ПолучитьРесурсыРасшифровки(Расшифровка, ДанныеРасшифровки)
	
	// Подготовим список ресурсов
	ПоляРасшифровки = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(
		Расшифровка, 
		ДанныеРасшифровки,
		,
		Истина // в массиве будут и ресурсы
		);
	Ресурсы = Новый Массив;
	Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
		
		// Ресурсами могут быть только поля расшифровки
		Если ТипЗнч(ПолеРасшифровки) <> Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПолеРасшифровки.Поле = "Показатель" ТОгда
			Ресурсы.Добавить(ПолеРасшифровки.Поле);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ресурсы;
	
КонецФункции

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений 		= Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц 	= Новый ДеревоЗначений;

ПорядокГруппировок = Новый ТаблицаЗначений;
ПорядокГруппировок.Колонки.Добавить("Поле");
ПорядокГруппировок.Колонки.Добавить("ИмяРеквизита");

СписокНоменклатурныхСчетов = ПолучитьСписокСчетовСНоменклатурой();

#КонецЕсли
