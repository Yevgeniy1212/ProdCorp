////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем НачисленияУдержания                        Экспорт; // Таблица значений - внешний источник данных
Перем СохраненнаяНастройка                       Экспорт; // Текущий вариант отчета
Перем ТаблицаВариантовОтчета                     Экспорт; // Таблица вариантов доступных текущему пользователю
Перем СписокПолейОтбора                          Экспорт; // Список названий поле схемы компоновки по которым можно устанавливать отбор
Перем ЭлементНастройкиРасчетногоЛистка           Экспорт; // Элемент структуры настройки схемы компоновки данных
Перем ТекстЗапроса                               Экспорт;
Перем ИмяМакетаНачало;
Перем ИмяМакетаКонец;
Перем НастройкаШириныКолонокРасчетногоЛистка     Экспорт;
Перем НастройкаРазмТекстаКолонокРасчетногоЛистка Экспорт;
Перем СоответствиеНаборовДанныхИЗапросов;
Перем мМакетНалоги;
Перем мМакетПогашениеЗаймов;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

#Если Клиент тогда
	
Функция СформироватьСписокМесяцев(ТекстЗапроса, НачалоПериода, КонецПериода) Экспорт
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|ПОМЕСТИТЬ Периоды
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДтНачМесяца, "ДФ=yyyy") +  ", " + Месяц(ДтНачМесяца) + ", " + День(ДтНачМесяца) + ") КАК ПериодРегистрации
		|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДтНачМесяца, "ДФ=yyyy") + ", " + Месяц(ДтНачМесяца) + ", " + День(ДтНачМесяца) + ") КАК ПериодРегистрации
		|";
		
		ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗапПоКалендарю, ТекстЗапросаЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции //ЗаменитьРегистрРегламентированныйПроизводственныйКалендарь

// Настраивает отчет
//
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

// Инициализация отчета
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияОтчета() Экспорт
	
КонецПроцедуры //ИнициализацияОтчета()

// Заполняет отборы и параметры схемы копоновки
//
Функция НастроитьОтборыПарметры(Отбор = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Отбор = Неопределено И Параметры = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(Отбор) = Тип("Массив") Тогда
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("Структура") Тогда
				
				ЛевоеЗначение    = Неопределено;
				ВидСравненияКомп = Неопределено;
				ПравоеЗначение   = Неопределено;
				
				Если НЕ ЭлементОтбора.Свойство("ЛевоеЗначение", ЛевоеЗначение) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ВидСравнения", ВидСравненияКомп) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ЭлементОтбора.Свойство("ПравоеЗначение", ПравоеЗначение) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ПолеОтбора = Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЛевоеЗначение)));
				
				Если ПолеОтбора = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ТипЗнч(ВидСравненияКомп) = Тип("ВидСравненияКомпоновкиДанных") Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ПолеОтбора.Тип.СодержитТип(ТипЗнч(ПравоеЗначение)) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ЭлементОтбораКомпоновки = Неопределено;
				
				Для Каждого ЭлементОтбораКомп Из Настройки.Отбор.Элементы Цикл
					Если ЭлементОтбораКомп.ЛевоеЗначение = ПолеОтбора.Поле Тогда
						ЭлементОтбораКомпоновки = ЭлементОтбораКомп;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементОтбораКомпоновки = Неопределено Тогда
					ЭлементОтбораКомпоновки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				КонецЕсли;
				
				ЭлементОтбораКомпоновки.ЛевоеЗначение  = ПолеОтбора.Поле;
				ЭлементОтбораКомпоновки.ВидСравнения   = ВидСравненияКомп;
				ЭлементОтбораКомпоновки.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораКомпоновки.Использование  = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Массив") Тогда
		
		Для Каждого ЭлементПараметра из Параметры Цикл
			Если ТипЗнч(ЭлементПараметра) = Тип("Структура") Тогда
				
				Параметр = Неопределено;
				Значение = Неопределено;
				
				Если НЕ ЭлементПараметра.Свойство("Параметр", Параметр) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ЭлементПараметра.Свойство("Значение", Значение) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ПараметрКомпоновки = Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				
				Если ПараметрКомпоновки = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если НЕ ПараметрКомпоновки.Тип.СодержитТип(ТипЗнч(Значение)) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ЗначениеПараметра               = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Строка(Параметр)));
				ЗначениеПараметра.Значение      = Значение;
				ЗначениеПараметра.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
 КонецФункции

// Вывод заголовка отчета
//
Процедура ВыводЗаголовкаОтчета(Результат, ВыводВФормуОтчета = Истина) Экспорт
	
	Если РасширеннаяНастройка Тогда
		Возврат;                                           
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));
	ВыводитьЗаголовок = (ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить И ЗначениеПараметра.Использование);
	
	Если НЕ ВыводВФормуОтчета И НЕ ВыводитьЗаголовок Тогда
		Возврат;
	КонецЕсли;

	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета"); 
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры
	
// Возвращает значение вида сравнения компоновки данных в зависимости от вида сравнения
//
Функция ПолучитьВидСравнения(ВидСравненияЭлемента) Экспорт
	
	ВидСравненияДляСхемыКомпоновки = Неопределено;
	Если ВидСравненияЭлемента = ВидСравнения.Равно Тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.НеРавно Тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВСписке Тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВСпискеПоИерархии Тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияЭлемента = ВидСравнения.ВИерархии Тогда
		ВидСравненияДляСхемыКомпоновки = ВидСравненияКомпоновкиДанных.ВИерархии;
	КонецЕсли;
	
	Возврат ВидСравненияДляСхемыКомпоновки;
	
КонецФункции

// Удаление элементов структуры настройки	
//	
Процедура УдалитьГруппировку()
	
	ЗапомнитьНастройкуРасчетногоЛистка();
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если Настройки.Структура.Количество() <> 0 тогда
		Настройки.Структура.Удалить(Настройки.Структура[0]);
	КОнецЕсли;
	
	ВосстановитьНастройкуРасчетногоЛистка();
	
КонецПроцедуры

// Установим видимость дополнительной информации в расчетных листках.
//
Процедура УстановитьВыводДополнительнойИнформации(Структура, ВыводитьДоходы, ВыводитьЗаймы)
	
	Для Каждого ЭлементСтруктурыОтчета Из Структура Цикл
		
		Если ЭлементСтруктурыОтчета.Имя = "Налоги" Тогда
			// установим видимость выплат и налогов в зависимости от параметра ВыводитьДоходы
			ЭлементСтруктурыОтчета.Использование = ВыводитьДоходы;
		ИначеЕсли ЭлементСтруктурыОтчета.Имя = "ПогашениеЗаймов" Тогда
			// установим видимость погашений в зависимости от параметре ВыводитьЗаймы
			ЭлементСтруктурыОтчета.Использование = ВыводитьЗаймы;	
		КонецЕсли;
		УстановитьВыводДополнительнойИнформации(ЭлементСтруктурыОтчета.Структура, ВыводитьДоходы, ВыводитьЗаймы);
	
	КонецЦикла;
	
КонецПроцедуры

// Формирование отчета в табличный документ "Результат"
//
// Параметры:
//   Результат         – табличный документ, в который помещается результат вывода расчетных листков.
//	 ДанныеРасшифровки - данные расшифровки компоновки данных
//
Функция СформироватьОтчет(Результат, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Ложь, ВыводитьПоСтраницам = Ложь) Экспорт
	
	СохранитьНастройкуТабличногоДокумента(Результат);
	
	Если ДанныеРасшифровки = Неопределено Тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Группировать"));
	
	Если ЗначениеПараметра.Использование и НЕ ЗначениеПараметра.Значение тогда
		УдалитьГруппировку();
	КонецЕсли;

	// Получить настройки схемы компоновки данных
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Преобразовать отбор по физ лицу в отбор по сотруднику
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник") И 
				(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии) 
				И ЭлементОтбора.ПравоеЗначение <> Справочники.СотрудникиОрганизаций.ПустаяСсылка()
				И НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементОтбора.ПравоеЗначение, "ЭтоГруппа") Тогда
				
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизЛицо");
				ЭлементОтбора.ПравоеЗначение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементОтбора.ПравоеЗначение, "ФизЛицо");
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник") И 
				(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии) Тогда
				ОтборБезГрупп = Истина;
				СписокФизЛиц = Новый СписокЗначений;
				Для Каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
					Если ЭлементСписка.Значение <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() И НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементСписка.Значение, "ЭтоГруппа") Тогда
						СписокФизЛиц.Добавить(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементСписка.Значение, "ФизЛицо"));
					Иначе
						ОтборБезГрупп = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОтборБезГрупп Тогда
					ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ФизЛицо");
					ЭлементОтбора.ПравоеЗначение = СписокФизЛиц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("парамВалютаРегламентУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЗначениеНачалоПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	НачалоПериода           = ЗначениеНачалоПараметра.Значение;
	
	ЗначениеКонецПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	КонецПериода           = ЗначениеКонецПараметра.Значение;
	
	ЗначениеВыводитьДокументВыплаты = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьДокументВыплаты"));
	ДетализацияВыплат = ЗначениеВыводитьДокументВыплаты.Значение;
	
	ЗначениеВыводитьЗаймы = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаймы"));
	ВыводитьЗаймы = ЗначениеВыводитьЗаймы.Значение;
	
	ЗначениеВыводитьДоходы = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьДоходы"));
	ВыводитьДоходы = ЗначениеВыводитьДоходы.Значение;
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если НачалоПериода = '00010101' И (КонецПериода = '00010101' ИЛИ Год(КонецПериода) = Год(Дата('00010101235959'))) Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода  = КонецМесяца(ТекущаяДата());
    ИначеЕсли НачалоПериода = '00010101' Тогда
		НачалоПериода = НачалоМесяца(КонецПериода);
	ИначеЕсли КонецПериода = '00010101' Тогда
		КонецПериода  = КонецМесяца(НачалоПериода);
	ИначеЕсли НачалоПериода > КонецПериода ИЛИ КонецПериода < НачалоПериода Тогда
		КонецПериода  = КонецМесяца(НачалоПериода);
	КонецЕсли;
	ПараметрКонецПериода.Использование  = Истина;
	ПараметрНачалоПериода.Использование = Истина;
	
	ПараметрКонецПериода.Значение  = КонецПериода;
	ПараметрНачалоПериода.Значение = НачалоПериода;
	
	Если НачалоПериода <> Неопределено И КонецПериода <> Неопределено Тогда
		УправлениеОтчетами.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
	// установим параметры и текст запроса построителя запроса
	ПостроительОтчетов = Новый ПостроительОтчета;
	
	НастроитьПостроительЗапросов(ПостроительОтчетов, ДетализацияВыплат);
	
	// установим отбор р/л без без начислений и удержаний
	ГруппаОтбора                 = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы       = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Использование   = Истина;
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвижения")).Поле;
	ЭлементОтбора.ПравоеЗначение = "1";
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвиженияУд")).Поле;
	ЭлементОтбора.ПравоеЗначение = "2";
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвиженияВычет")).Поле;
	ЭлементОтбора.ПравоеЗначение = "5";
	
	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвиженияКорректировка")).Поле;
	ЭлементОтбора.ПравоеЗначение = "5";
    
   	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДвиженияСуммаУменьшенияОблагаемогоДохода")).Поле;
	ЭлементОтбора.ПравоеЗначение = "5";

	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СальдоНачальное").Поле;
	ЭлементОтбора.ПравоеЗначение = 0;

	ЭлементОтбора                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.Элементы.Найти("СальдоКонечное").Поле;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЗначениеОтбораСотрудника = Неопределено;
	ЕстьОтборПоФизЛицу = Ложь;
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		
		// если отбор установлен по сотруднику
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник") Тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				ЗначениеОтбораСотрудника = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
		
		//если отбор установлен по физлицу
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(0).Значение Тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				ЕстьОтборПоФизЛицу = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОтборПоФизЛицу И ЗначениеОтбораСотрудника <> Неопределено 
		  И ((ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") 
		  И  НЕ ЗначениеОтбораСотрудника.ПравоеЗначение.ЭтоГруппа)
		ИЛИ ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СписокЗначений")) Тогда
		
		ОтборПоФизЛицу                = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоФизЛицу.ВидСравнения   = ЗначениеОтбораСотрудника.ВидСравнения;
		ОтборПоФизЛицу.Использование  = Истина;
		ОтборПоФизЛицу.ЛевоеЗначение  = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ФизЛицо")).Поле;
		
		Если ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			ОтборПоФизЛицу.ПравоеЗначение = ЗначениеОтбораСотрудника.ПравоеЗначение.Физлицо;
		ИначеЕсли ТипЗнч(ЗначениеОтбораСотрудника.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			
			СписокЗначенийОтбораФизЛиц = Новый СписокЗначений;
			
			Для Каждого ЭлементСписка Из ЗначениеОтбораСотрудника.ПравоеЗначение Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
					СписокЗначенийОтбораФизЛиц.Добавить(ЭлементСписка.Значение.ФизЛицо);
				КонецЕсли;
			КонецЦикла;
			
			ОтборПоФизЛицу.ПравоеЗначение = СписокЗначенийОтбораФизЛиц;
			
		Иначе
			
			Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
			
		КонецЕсли;
	КонецЕсли;
	
	// установим отборы в построителе запросов 
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И СписокПолейОтбора.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено 
			Тогда
			ВидСравненияОтбора = Неопределено;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ВидСравненияОтбора = ВидСравнения.Равно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ВидСравненияОтбора = ВидСравнения.ВСписке;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ВидСравненияОтбора = ВидСравнения.НеРавно;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ВидСравненияОтбора = ВидСравнения.ВИерархии;
			КонецЕсли;
			Если ВидСравненияОтбора <> Неопределено Тогда 
				Имя = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПостроительОтчетов.Отбор.Добавить(Имя);
				ПостроительОтчетов.Отбор[Имя].ВидСравнения  = ВидСравненияОтбора;
				Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ЭлементОтбора.ПравоеЗначение <> NULL И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					ПостроительОтчетов.Отбор[Имя].Значение      = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				ПостроительОтчетов.Отбор[Имя].Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// если отбор установлен по сотруднику
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(1).Значение Тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				ЗначениеОтбораСотрудника = ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
		
		// если отбор установлен по физлицу
		Если ЭлементОтбора.Использование И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = СписокПолейОтбора.Получить(0).Значение Тогда
			Если ЭлементОтбора.ПравоеЗначение <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				ЕстьОтборПоФизЛицу = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним ТЗ "НачисленияУдержания"
	ЗаполнитьВнешнийИсточникДанных(ПостроительОтчетов);
	
	//Установить параметрыы расшифровки макета
	Для Каждого МакетГруппировки Из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
		
		Если МакетГруппировки.ИмяГруппировки = "СтрокаНачисленийУдержаний" Тогда
			ИмяМакетаСтрокаНачислений = МакетГруппировки.Макет;
		КонецЕсли;
		Если МакетГруппировки.ИмяГруппировки = "ДоходыВНатуральнойФормеВыплата" Тогда
			ИмяМакетаДоходыВнатруальнойФорме = МакетГруппировки.Макет;
		КонецЕсли;
		
		Если МакетГруппировки.ИмяГруппировки = "ВычетСтрока" Тогда
			ИмяМакетаВычетСтрока = МакетГруппировки.Макет;
		КонецЕсли;

	КонецЦикла;                                    
	
	СотрудникМесяц = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	СотрудникМесяц1 = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	СотрудникМесяц2 = Новый ПараметрКомпоновкиДанных("СотрудникМесяц");
	
	МакетСтрокиНачисленийУдержаний = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаСтрокаНачислений);
	МакетСтрокиДоходовВыплат       = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаДоходыВнатруальнойФорме);
	МакетСтрокиВычеты              = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаВычетСтрока);
	
	ЯчейкиСтрокиНачисленийУдержаний = МакетСтрокиНачисленийУдержаний.Макет[0].Ячейки;
	ЯчейкиСтрокиДоходовВыплат       = МакетСтрокиДоходовВыплат.Макет[0].Ячейки;
	ЯчейкиСтрокиВычеты              = МакетСтрокиВычеты.Макет[0].Ячейки;
	
	Для Сч = 0 По 16 Цикл
		ЯчейкиСтрокиНачисленийУдержаний[Сч].Оформление.Элементы.Найти("Details").Значение = СотрудникМесяц;
		ЯчейкиСтрокиДоходовВыплат[Сч].Оформление.Элементы.Найти("Details").Значение       = СотрудникМесяц1;
		ЯчейкиСтрокиВычеты[Сч].Оформление.Элементы.Найти("Details").Значение       = СотрудникМесяц2;
	КонецЦикла;
	
	УстановитьВыводДополнительнойИнформации(Настройки.Структура, ВыводитьДоходы, ВыводитьЗаймы);
	
	// создадим структуру с внешним набором данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НачисленияУдержания", НачисленияУдержания);
	
	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	// создадим и инициализируем процессор компоновки данных
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	                           
	// очистим результирующий табличный документ
	Результат.Очистить();
	
	Если ВыводВФормуОтчета Тогда
		ВыводЗаголовкаОтчета(Результат);
	КонецЕсли;
	
	// удалим отбор пустых строк начислений
	Настройки.Отбор.Элементы.Удалить(ГруппаОтбора);
	//Настройки.Отбор.Элементы.Удалить(ГруппаОтбораСальдо);

	Если ОтборПоФизЛицу <> Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(ОтборПоФизЛицу);
	КонецЕсли;
	
	// выведем отчет в табличный документ "Результат"
	ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновки, Результат, ВыводитьПоСтраницам);
	
	УправлениеОтчетами.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ВыводВФормуОтчета Тогда
		ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, Результат);
	КонецЕсли;
	
	Результат.Область(1, 1, 1, 1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	ВосстановитьНастройкуТабличногоДокумента(Результат);

	Возврат Результат;
	
КонецФункции

// Восстановление настройки печати табличного документа.
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура ВосстановитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	Перем СтруктураПараметров;
	
	СтруктураПараметров = ВосстановитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛисткаОрганизации");
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
		СтруктураПараметров.ПолеСверху    = 10;
		СтруктураПараметров.ПолеСлева     = 20;
		СтруктураПараметров.ПолеСправа    = 10;
		СтруктураПараметров.ПолеСнизу     = 10;
		СтруктураПараметров.МасштабПечати = 100;
		СтруктураПараметров.АвтоМасштаб   = Истина;
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСверху    = СтруктураПараметров.ПолеСверху;
	ТабличныйДокумент.ПолеСлева     = СтруктураПараметров.ПолеСлева;
	ТабличныйДокумент.ПолеСправа    = СтруктураПараметров.ПолеСправа;
	ТабличныйДокумент.ПолеСнизу     = СтруктураПараметров.ПолеСнизу;
	ТабличныйДокумент.МасштабПечати = ?(СтруктураПараметров.МасштабПечати = Неопределено, 100, СтруктураПараметров.МасштабПечати);
	ТабличныйДокумент.АвтоМасштаб   = СтруктураПараметров.АвтоМасштаб;
	
КонецПроцедуры

// Сохранение настроек печати табличного документа
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура СохранитьНастройкуТабличногоДокумента(ТабличныйДокумент) Экспорт
	
	СтруктураПараметров = Новый Структура("ПолеСверху, ПолеСлева, ПолеСправа, ПолеСнизу, МасштабПечати, АвтоМасштаб");
	
	СтруктураПараметров.ПолеСверху    = ТабличныйДокумент.ПолеСверху;
	СтруктураПараметров.ПолеСлева     = ТабличныйДокумент.ПолеСлева;
	СтруктураПараметров.ПолеСправа    = ТабличныйДокумент.ПолеСправа;
	СтруктураПараметров.ПолеСнизу     = ТабличныйДокумент.ПолеСнизу;
	СтруктураПараметров.МасштабПечати = ТабличныйДокумент.МасштабПечати;
	СтруктураПараметров.АвтоМасштаб   = ТабличныйДокумент.АвтоМасштаб;
	
	СохранитьЗначение("ПАРАМЕТРЫ_ПЕЧАТИ_РасчетногоЛисткаОрганизации", СтруктураПараметров);
	
КонецПроцедуры	
	
// Вывод результата компоновки в табличный документ
//
Процедура ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновкиДанных, ТабличныйДокумент, ВыводитьПоСтраницам) Экспорт
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);

	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));

	// Основной цикл вывода отчета
	Счетчик = 0;
	Пока Истина Цикл
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		// Получим следующий элемент результата компоновки
		Если ЭлементРезультата = Неопределено Тогда
			
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ВыводитьПоСтраницам Тогда
		РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент);
	КонецЕсли
	
КонецПроцедуры

// Разбивает табличный документ по страницам
//
// Параметры:
//  ТабличныйДокумент - ссылка на табличный документ.
//
Процедура РазбитьТабличныйДокументПоСтраницам(ТабличныйДокумент)
	
	Состояние(НСТР("ru='Разделение расчетных листков по страницам ...  (Если вы хотите прервать вывод отчета, нажмите Ctrl+Break)'"));
	
	ТабличныйДокументДляПроверки = Новый ТабличныйДокумент;
	ТабличныйДокументДляПроверки.Очистить();
	
	Для Сч = 0 По НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокумент.Область(, Сч + 1, , Сч + 1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[Сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[Сч]);
	КонецЦикла;
	  		
	Для Сч = 0 По НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
		ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, Сч + 1, , Сч + 1);
		ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[Сч];
		ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[Сч]);
	КонецЦикла;

	ТабличныйДокументДляПроверки.АвтоМасштаб = Истина;

	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок");
	
	Если ОбластьПервойЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтрокиНачалаРЛ = ОбластьПервойЯчейки.Верх;
	НомерСтрокиНачалаРЛ = НомерСтрокиНачалаРЛ - 1;
	
	ОбластьГруппировки = ТабличныйДокумент.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(1, , НомерСтрокиНачалаРЛ - 2, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ");
	НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
	
	ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы+1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ)+1, );
	ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , Истина);
	
	ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
	
	Пока ОбластьПервойЯчейки <> Неопределено Цикл
		
		Если ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ > 2 Тогда
			ОбластьГруппировки = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ + 1, , ОбластьПервойЯчейки.Верх - 1, );
			ОбластьПриемник    = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (ОбластьПервойЯчейки.Верх - НомерСтрокиКонцаРЛ - 2) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьГруппировки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		НомерСтрокиНачалаРЛ    = ОбластьПервойЯчейки.Верх - 1;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ, );
		ОбластьПоследнейЯчейки = ТабличныйДокумент.НайтиТекст("Долг за ", ОбластьСлед);
		НомерСтрокиКонцаРЛ     = ОбластьПоследнейЯчейки.Верх + 1;
		
		ОбластьРЛ = ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
		ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , Истина);
		
		КоличествоСтраниц = 0;
		Попытка
			КоличествоСтраниц = ТабличныйДокументДляПроверки.КоличествоСтраниц();
		Исключение
		КонецПопытки;
		
		Если КоличествоСтраниц > 1 Тогда
			
			ТабличныйДокумент.Область(НомерСтрокиНачалаРЛ, , НомерСтрокиНачалаРЛ,).НачалоСтраницы = Истина;
			
			ТабличныйДокументДляПроверки.Очистить();
			
			Для Сч = 0 По НастройкаШириныКолонокРасчетногоЛистка.ВГраница() Цикл
				ОбластьКолонкиРЛ                  = ТабличныйДокументДляПроверки.Область(, Сч+1, , Сч+1);
				ОбластьКолонкиРЛ.ШиринаКолонки    = НастройкаШириныКолонокРасчетногоЛистка[Сч];
				ОбластьКолонкиРЛ.РазмещениеТекста = ПолучитьТипРазмещенияТекста(НастройкаРазмТекстаКолонокРасчетногоЛистка[Сч]);
			КонецЦикла;
			
			ОбластьПриемник = ТабличныйДокументДляПроверки.Область(ТабличныйДокументДляПроверки.ВысотаТаблицы + 1, ,ТабличныйДокументДляПроверки.ВысотаТаблицы + (НомерСтрокиКонцаРЛ - НомерСтрокиНачалаРЛ) + 1, );
			ТабличныйДокументДляПроверки.ВставитьОбласть(ОбластьРЛ, ОбластьПриемник, , Истина);
			
		КонецЕсли;
		
		ОбластьСлед = ТабличныйДокумент.Область(НомерСтрокиКонцаРЛ, , НомерСтрокиКонцаРЛ, );
		ОбластьПервойЯчейки    = ТабличныйДокумент.НайтиТекст("Расчетный листок", ОбластьСлед);
		
		Если ОбластьПервойЯчейки <> Неопределено И ОбластьПервойЯчейки.Верх < ОбластьСлед.Верх Тогда
	        ОбластьПервойЯчейки = Неопределено;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТипРазмещенияТекста(ТипРазмещения)
	
	Если ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Выступать Тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Забивать Тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Забивать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Обрезать Тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	ИначеЕсли ТипРазмещения = ТипРазмещенияТекстаКомпоновкиДанных.Переносить Тогда
		Возврат ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
КонецФункции

// Заполняет таблицу значений "НачисленияУдержания" (внешний источник данных).
//
Процедура ЗаполнитьВнешнийИсточникДанных(ПостроительОтчетов) Экспорт 
	
	// Выполнить запрос 
 	ПостроительОтчетов.Выполнить();
	
	// Получим таблицу результатов запроса
	ТаблицаРезультатаЗапроса = ПостроительОтчетов.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	СведенияОВидахРасчета     = Новый Соответствие;
	
	// Сформировать таблицу значений
	НачисленияУдержания.Очистить();

	ЗначениеКонецПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьДокументВыплаты"));
	ДетализацияВыплат = ЗначениеКонецПараметра.Значение;
	
	ТекстДокументаВыплаты = "";
	
	// Заполним таблицу значений
 	Для Каждого СтрокаОрганизация  Из ТаблицаРезультатаЗапроса.Строки Цикл
		Для Каждого СтрокаПериодаРегистрации Из СтрокаОрганизация.Строки Цикл
			Для Каждого СтрокаФизЛицо Из СтрокаПериодаРегистрации.Строки Цикл
				
				Выполнился = Истина;
				
				// Получим таблицы значений по каждой из частей расчетного листка
				Начисления              = СтрокаФизЛицо.Строки.Найти("Начислено", 				"ВидДвижения");
				Удержания               = СтрокаФизЛицо.Строки.Найти("Удержано", 				"ВидДвижения");
				ДоходыВНатуральнойФорме = СтрокаФизЛицо.Строки.Найти("ДоходыВНатуральнойФорме", "ВидДвижения");
				Выплачено              	= СтрокаФизЛицо.Строки.Найти("Выплата", 				"ВидДвижения");
				Сальдо                  = СтрокаФизЛицо.Строки.Найти("Сальдо", 					"ВидДвижения");
				
				Вычеты                  = СтрокаФизЛицо.Строки.Найти("Вычет",					"ВидДвижения");
				Корректировки           = СтрокаФизЛицо.Строки.Найти("Корректировка",			"ВидДвижения");
				СуммаУменьшенияОблагаемогоДохода  = СтрокаФизЛицо.Строки.Найти("СуммаУменьшенияОблагаемогоДохода",			"ВидДвижения");
                
				// Определим максимальное количество строк из таблиц начислений и удержания
				КолВоСтрокНачислений = ?(Начисления <> Неопределено, Начисления.Строки.Количество(), 0) - 1;
				КолВоСтрокУдержаний  = ?(Удержания <> Неопределено, Удержания.Строки.Количество(), 0) - 1; 
				МаксКолвоСтрок = Макс(КолВоСтрокНачислений, КолВоСтрокУдержаний); 
				
				//Проверяем количество строк в отчет
				Если Сальдо <> Неопределено И Сальдо.Строки.Количество() > 0 Тогда
					СтрокаСальдо = Сальдо.Строки.Найти("Сальдо", "ВидРасчета");
					Если СтрокаСальдо <> Неопределено Тогда
						СальдоКон = ?(СтрокаСальдо.СальдоКонечное = NULL, 0, СтрокаСальдо.СальдоКонечное);
						СальдоНач = ?(СтрокаСальдо.СальдоНачальное = NULL, 0, СтрокаСальдо.СальдоНачальное);
					Иначе
						СальдоКон = 0;
						СальдоНач = 0;
    				КонецЕсли;
				Иначе
					СальдоКон = 0;
					СальдоНач = 0;
				КонецЕсли; 
				
				// Перенесем таблицы начисления  значений в таблицу внешнего источника данных 
				Сч = 0;
				
				Пока Сч <= МаксКолвоСтрок Цикл
					
					НомерСтрокиНачисления = 0;
					РегистраторНачисления = "";
					
					// Добавим строку и заполним значений колонок
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "1";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = Сч;
					СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
						
					Если Сч <= КолВоСтрокНачислений Тогда
						
						СтрокаНачисленияУдержания.ФизЛицо             = Начисления.Строки[Сч].ФизЛицо;
						СтрокаНачисленияУдержания.Организация         = Начисления.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(Начисления.Строки[Сч].Организация = NULL ИЛИ Начисления.Строки[Сч].Организация.ГоловнаяОрганизация = Начисления.Строки[Сч].Организация, Начисления.Строки[Сч].Организация, Начисления.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации   = Начисления.Строки[Сч].ПериодРегистрации;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = Начисления.Строки[Сч].ВидРасчета;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеДни   = Начисления.Строки[Сч].ОтработаноДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеЧасы  = Начисления.Строки[Сч].ОтработаноЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = Начисления.Строки[Сч].Результат;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = УправлениеОтчетами.ОписаниеПериода(Начисления.Строки[Сч].ПериодДействияНачало, Начисления.Строки[Сч].ПериодДействияКонец);
						
					КонецЕсли;
					
					// Добавим строку 2-го раздела
					Если Сч <= КолВоСтрокУдержаний Тогда
						
						СтрокаНачисленияУдержания.ФизЛицо                         = Удержания.Строки[Сч].ФизЛицо;
						СтрокаНачисленияУдержания.Организация                     = Удержания.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация             = ?(Удержания.Строки[Сч].Организация = NULL ИЛИ Удержания.Строки[Сч].Организация.ГоловнаяОрганизация = Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации               = Удержания.Строки[Сч].ПериодРегистрации;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация             = ?(Удержания.Строки[Сч].Организация = NULL ИЛИ Удержания.Строки[Сч].Организация.ГоловнаяОрганизация = Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации               = Удержания.Строки[Сч].ПериодРегистрации;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация             = ?(Удержания.Строки[Сч].Организация = NULL ИЛИ Удержания.Строки[Сч].Организация.ГоловнаяОрганизация= Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация, Удержания.Строки[Сч].Организация.ГоловнаяОрганизация);
						
						ВидРасчета = Удержания.Строки[Сч].ВидРасчета;
						ВидУдержанияНаименование = Строка(ВидРасчета);	
						
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодУдержания = УправлениеОтчетами.ОписаниеПериода(Удержания.Строки[Сч].ПериодДействияНачало, Удержания.Строки[Сч].ПериодДействияКонец);
						
						Если  ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
							СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, ВидРасчета, "ПриРасчете");
							ПервыйРаз = Истина;
							Для СчПоказатель = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"], 6) Цикл
								Если СведенияОВидеРасчета["Показатель"+СчПоказатель+"Видимость"] И СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] <> NULL Тогда
									Если ПервыйРаз Тогда
										ВидУдержанияНаименование = ВидУдержанияНаименование + Символы.ПС + " показатели:";
										ПервыйРаз                 = Ложь;
									КонецЕсли;
									ВидУдержанияНаименование = ВидУдержанияНаименование + Символы.ПС + " " + СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] + " - " + Удержания.Строки[Сч]["Показатель"+СчПоказатель];
								ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "НаименованиеВидимость"] И СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "Наименование"] <> NULL Тогда
									Если ПервыйРаз Тогда
										ВидУдержанияНаименование = ВидУдержанияНаименование + Символы.ПС + " показатели:";
										ПервыйРаз                 = Ложь;
									КонецЕсли;
									ВидУдержанияНаименование = ВидУдержанияНаименование + Символы.ПС + " " + СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "Наименование"] + " - " + Удержания.Строки[Сч]["Показатель"+СчПоказатель];
								КонецЕсли;                                                                  
							КонецЦикла;
						КонецЕсли;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания = ВидУдержанияНаименование; 
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаУдержания = Удержания.Строки[Сч].Результат;
												
					КонецЕсли;
					
					Сч = Сч + 1;
					
				КонецЦикла;
				
				КолВоСтрокДоходыВНатуральнойФорме = ?(ДоходыВНатуральнойФорме <> Неопределено, ДоходыВНатуральнойФорме.Строки.Количество(), 0)-1;
				КолВоСтрокВыплачено               = ?(Выплачено <> Неопределено, Выплачено.Строки.Количество(), 0) - 1;
				
				Если МаксКолвоСтрок = -1 И Макс(КолВоСтрокДоходыВНатуральнойФорме, КолВоСтрокВыплачено) = -1 Тогда
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "3";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
					СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.ФизЛицо;
					СтрокаНачисленияУдержания.Организация       = СтрокаФизЛицо.Организация;
					СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(СтрокаФизЛицо.Организация = NULL ИЛИ СтрокаФизЛицо.Организация.ГоловнаяОрганизация = СтрокаФизЛицо.Организация , СтрокаФизЛицо.Организация, СтрокаФизЛицо.Организация.ГоловнаяОрганизация);
					СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
					
				КонецЕсли;
				
				МаксКолвоСтрок = Макс(КолВоСтрокДоходыВНатуральнойФорме, КолВоСтрокВыплачено);
				
				// заполним строки 3-го и 4-го разделов
				Для Сч = 0 По МаксКолвоСтрок Цикл
					
					СтрокаНачисленияУдержания = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвиженияУд = "2";
					
					СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
					
					
					Если Сч <= КолВоСтрокДоходыВНатуральнойФорме Тогда
						
						СтрокаНачисленияУдержания.ФизЛицо             = ДоходыВНатуральнойФорме.Строки[Сч].ФизЛицо;
						СтрокаНачисленияУдержания.Организация         = ДоходыВНатуральнойФорме.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(ДоходыВНатуральнойФорме.Строки[Сч].Организация = NULL ИЛИ ДоходыВНатуральнойФорме.Строки[Сч].Организация.ГоловнаяОрганизация = ДоходыВНатуральнойФорме.Строки[Сч].Организация, ДоходыВНатуральнойФорме.Строки[Сч].Организация, ДоходыВНатуральнойФорме.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации   = ДоходыВНатуральнойФорме.Строки[Сч].ПериодРегистрации;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = ДоходыВНатуральнойФорме.Строки[Сч].ВидРасчета;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = УправлениеОтчетами.ОписаниеПериода(ДоходыВНатуральнойФорме.Строки[Сч].ПериодДействияНачало, ДоходыВНатуральнойФорме.Строки[Сч].ПериодДействияКонец);
						
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеДни   = ДоходыВНатуральнойФорме.Строки[Сч].ОтработаноДней;
						СтрокаНачисленияУдержания.НачисленияУдержанияОтработанныеЧасы  = ДоходыВНатуральнойФорме.Строки[Сч].ОтработаноЧасов;
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = ДоходыВНатуральнойФорме.Строки[Сч].Результат;
						
					КонецЕсли;
					
					Если Сч <= КолВоСтрокВыплачено Тогда
						
						СтрокаНачисленияУдержания.ФизЛицо                         = Выплачено.Строки[Сч].ФизЛицо;
						СтрокаНачисленияУдержания.Организация                     = Выплачено.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация             = ?(Выплачено.Строки[Сч].Организация = NULL ИЛИ Выплачено.Строки[Сч].Организация.ГоловнаяОрганизация = Выплачено.Строки[Сч].Организация, Выплачено.Строки[Сч].Организация, Выплачено.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации               = Выплачено.Строки[Сч].ПериодРегистрации;
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодУдержания = УправлениеОтчетами.ОписаниеПериода(Выплачено.Строки[Сч].ПериодДействияНачало, Выплачено.Строки[Сч].ПериодДействияКонец); 
						
						Если ДетализацияВыплат Тогда
							ТекстДокументаВыплаты = " (" + Метаданные.НайтиПоТипу(ТипЗнч(Выплачено.Строки[Сч].Регистратор)).Синоним + " " + Выплачено.Строки[Сч].НомерРегистратора + " от " + Формат(Выплачено.Строки[Сч].ДатаРегистратора, "ДФ=дд.ММ.гг") + ")";
						КонецЕсли;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидУдержания = Выплачено.Строки[Сч].ВидРасчета + ТекстДокументаВыплаты; 
					
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаУдержания = Выплачено.Строки[Сч].Результат;                
						
					КонецЕсли;
				КонецЦикла;
				
				
				
				КолВоСтрокВычеты = ?(Вычеты <> Неопределено, Вычеты.Строки.Количество(), 0)-1;
				
				Если МаксКолвоСтрок = -1 И КолВоСтрокВычеты = -1 Тогда
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "3";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
					СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.ФизЛицо;
					СтрокаНачисленияУдержания.Организация       = СтрокаФизЛицо.Организация;
					СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(СтрокаФизЛицо.Организация = NULL ИЛИ СтрокаФизЛицо.Организация.ГоловнаяОрганизация = СтрокаФизЛицо.Организация , СтрокаФизЛицо.Организация, СтрокаФизЛицо.Организация.ГоловнаяОрганизация);
					СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
					
				КонецЕсли;
				
				МаксКолвоСтрок = КолВоСтрокВычеты;
				
				// заполним строки 3-го и 4-го разделов
				Для Сч = 0 По МаксКолвоСтрок Цикл
					
					СтрокаНачисленияУдержания = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвиженияВычет = "5";
					
					СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
					
					
					Если Сч <= КолВоСтрокВычеты Тогда
						
						СтрокаНачисленияУдержания.ФизЛицо             = Вычеты.Строки[Сч].ФизЛицо;
						СтрокаНачисленияУдержания.Организация         = Вычеты.Строки[Сч].Организация;
						СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(Вычеты.Строки[Сч].Организация = NULL ИЛИ Вычеты.Строки[Сч].Организация.ГоловнаяОрганизация = Вычеты.Строки[Сч].Организация, Вычеты.Строки[Сч].Организация, Вычеты.Строки[Сч].Организация.ГоловнаяОрганизация);
						СтрокаНачисленияУдержания.ПериодРегистрации   = Вычеты.Строки[Сч].ПериодРегистрации;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = Вычеты.Строки[Сч].ВидРасчета;
						
						СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = УправлениеОтчетами.ОписаниеПериода(Вычеты.Строки[Сч].ПериодДействияНачало, Вычеты.Строки[Сч].ПериодДействияКонец);
						
						СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = Вычеты.Строки[Сч].Результат;
						
					КонецЕсли;
					
				КонецЦикла;
				
				КолВоСтрокКорректировки = ?(Корректировки <> Неопределено, Корректировки.Строки.Количество(), 0)-1;
                
				Если МаксКолвоСтрок = -1 И КолВоСтрокКорректировки = -1 Тогда
					СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
					СтрокаНачисленияУдержания.ВидДвижения                = "3";
					СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
					СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.ФизЛицо;
					СтрокаНачисленияУдержания.Организация       = СтрокаФизЛицо.Организация;
					СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(СтрокаФизЛицо.Организация = NULL ИЛИ СтрокаФизЛицо.Организация.ГоловнаяОрганизация = СтрокаФизЛицо.Организация , СтрокаФизЛицо.Организация, СтрокаФизЛицо.Организация.ГоловнаяОрганизация);
					СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
					СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
					СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
					
				КонецЕсли;
				
                МаксКолвоСтрок = КолВоСтрокКорректировки;
                // заполним строки 5-го раздела
                Для Сч = 0 По МаксКолвоСтрок Цикл
                    Если Корректировки.Строки[Сч].Результат = 0 Тогда
                        Продолжить;
                    КонецЕсли;
                    СтрокаНачисленияУдержания = НачисленияУдержания.Добавить();
                    СтрокаНачисленияУдержания.ВидДвиженияКорректировка = "5";
                    
                    СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
                    СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
                    
                    
                    Если Сч <= КолВоСтрокКорректировки Тогда
                        
                        СтрокаНачисленияУдержания.ФизЛицо             = Корректировки.Строки[Сч].ФизЛицо;
                        СтрокаНачисленияУдержания.Организация         = Корректировки.Строки[Сч].Организация;
                        СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(Корректировки.Строки[Сч].Организация = NULL ИЛИ Корректировки.Строки[Сч].Организация.ГоловнаяОрганизация = Корректировки.Строки[Сч].Организация, Корректировки.Строки[Сч].Организация, Корректировки.Строки[Сч].Организация.ГоловнаяОрганизация);
                        СтрокаНачисленияУдержания.ПериодРегистрации   = Корректировки.Строки[Сч].ПериодРегистрации;
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = Корректировки.Строки[Сч].ВидРасчета;
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = УправлениеОтчетами.ОписаниеПериода(Корректировки.Строки[Сч].ПериодДействияНачало, Корректировки.Строки[Сч].ПериодДействияКонец);
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления   = Корректировки.Строки[Сч].Результат;
                        
                    КонецЕсли;
                    
                КонецЦикла;		
                
                КолВоСтрокСуммаУменьшенияОблагаемогоДохода = ?(СуммаУменьшенияОблагаемогоДохода <> Неопределено, СуммаУменьшенияОблагаемогоДохода.Строки.Количество(), 0)-1;
                
                Если МаксКолвоСтрок = -1 И КолВоСтрокСуммаУменьшенияОблагаемогоДохода = -1 Тогда
                    СтрокаНачисленияУдержания                            = НачисленияУдержания.Добавить();
                    СтрокаНачисленияУдержания.ВидДвижения                = "3";
                    СтрокаНачисленияУдержания.ПризнакУпорядочиванияСтрок = 0;
                    СтрокаНачисленияУдержания.ФизЛицо           = СтрокаФизЛицо.ФизЛицо;
                    СтрокаНачисленияУдержания.Организация       = СтрокаФизЛицо.Организация;
                    СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(СтрокаФизЛицо.Организация = NULL ИЛИ СтрокаФизЛицо.Организация.ГоловнаяОрганизация = СтрокаФизЛицо.Организация , СтрокаФизЛицо.Организация, СтрокаФизЛицо.Организация.ГоловнаяОрганизация);
                    СтрокаНачисленияУдержания.ПериодРегистрации = СтрокаФизЛицо.ПериодРегистрации;
                    СтрокаНачисленияУдержания.СальдоНачальное   = СальдоНач;
                    СтрокаНачисленияУдержания.СальдоКонечное    = СальдоКон;
                    
                КонецЕсли;
                
                МаксКолвоСтрок = КолВоСтрокСуммаУменьшенияОблагаемогоДохода;
                
                // заполним строки 5-го раздела
                Для Сч = 0 По МаксКолвоСтрок Цикл
                    Если СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Результат = 0 Тогда
                        Продолжить;
                    КонецЕсли;
                    
                    СтрокаНачисленияУдержания = НачисленияУдержания.Добавить();
                    СтрокаНачисленияУдержания.ВидДвиженияСуммаУменьшенияОблагаемогоДохода = "5";
                    
                    СтрокаНачисленияУдержания.СальдоНачальное = СальдоНач;
                    СтрокаНачисленияУдержания.СальдоКонечное  = СальдоКон;
                    
                    
                    Если Сч <= КолВоСтрокСуммаУменьшенияОблагаемогоДохода Тогда
                        
                        СтрокаНачисленияУдержания.ФизЛицо             = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].ФизЛицо;
                        СтрокаНачисленияУдержания.Организация         = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация;
                        СтрокаНачисленияУдержания.ГоловнаяОрганизация = ?(СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация = NULL ИЛИ СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация.ГоловнаяОрганизация = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация, СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация, СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Организация.ГоловнаяОрганизация);
                        СтрокаНачисленияУдержания.ПериодРегистрации   = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].ПериодРегистрации;
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияВидНачисления = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].ВидРасчета;
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияПериодНачисления = УправлениеОтчетами.ОписаниеПериода(СуммаУменьшенияОблагаемогоДохода.Строки[Сч].ПериодДействияНачало, СуммаУменьшенияОблагаемогоДохода.Строки[Сч].ПериодДействияКонец);
                        
                        СтрокаНачисленияУдержания.НачисленияУдержанияСуммаНачисления  = СуммаУменьшенияОблагаемогоДохода.Строки[Сч].Результат;
                        
                    КонецЕсли;
                КонецЦикла;		
                
            КонецЦикла;
        КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Настраивает построитель запросов
//
Процедура НастроитьПостроительЗапросов(ПостроительОтчетов, ВыводитьДокументВыплаты) Экспорт
	
	ДатаНач = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
	ДатаКон = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
	
	// Заполнить параметры построителя запросов
	ПостроительОтчетов.Параметры.Вставить("НачалоПериода", 	  	     ДатаНач);
	ПостроительОтчетов.Параметры.Вставить("КонецПериода", 	         КонецДня(ДатаКон));
	
	ПостроительОтчетов.Параметры.Вставить("парамДатаНачалаРасчетаПоФиксСтавке", '20070101');
	ПостроительОтчетов.Параметры.Вставить("парамДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРаб", ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням());
	ПостроительОтчетов.Параметры.Вставить("ДетализацияВыплаты", ВыводитьДокументВыплаты);
                                          
	ТекстПостроителя = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) КАК Налогоплательщик
	|ПОМЕСТИТЬ ВТ_ИсчислениеНалогов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И (ИсчислениеНалогов.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Налогоплательщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	|				И ИсчислениеНалогов.Организация = ИПНСведенияОДоходах.Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПрочимДоходом,
	|	ИПНСведенияОДоходах.ВидРасчета КАК ВидРасчета,
	|	ИПНСведенияОДоходах.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	ИсчислениеНалогов.Организация,
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.СпособНалогообложения,
	|	ИПНСведенияОДоходах.СуммаДохода,
	|	ИПНСведенияОДоходах.СуммаВычета,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА ИПНСведенияОДоходах.ПримененнаяЛьгота
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененнаяЛьгота,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) >= ДАТАВРЕМЯ(2019, 1, 1)
	|		    И НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) < ДАТАВРЕМЯ(2020, 12, 31)
	|			ТОГДА ИПНСведенияОДоходах.ПримененнаяЛьгота
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененнаяКорректировка,
   	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) >= ДАТАВРЕМЯ(2021, 1, 1)
	|			ТОГДА ИПНСведенияОДоходах.ПримененнаяЛьгота
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУменьшенияОблагаемогоДохода,
	|	ИПНСведенияОДоходах.ПримененныйВычет КАК ПримененныйВычет,
	|	0 КАК ОПВ,
	|	0 КАК ИПН
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	ВТ_ИсчислениеНалогов КАК ИсчислениеНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|		ПО ИсчислениеНалогов.Налогоплательщик = ИПНСведенияОДоходах.Налогоплательщик
	|ГДЕ
	|	(ИПНСведенияОДоходах.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &КонецПериода
	|			ИЛИ ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	NULL,
	|	"""",
	|	ИсчислениеНалогов.Организация,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом),
	|	СведенияПредыдущегоМестаРаботыФизЛиц.Доход,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ДоходНеОблагаемыйИПН,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота,
	|	0 КАК ПримененнаяКорректировка,
    |   0 КАК СуммаУменьшенияОблагаемогоДохода,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененныйВычет,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ОПВ,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ИПН
	|ИЗ
	|	ВТ_ИсчислениеНалогов КАК ИсчислениеНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ПО ИсчислениеНалогов.Налогоплательщик = СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &КонецПериода
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода < &парамДатаНачалаРасчетаПоФиксСтавке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСРаботниками.Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, СЕКУНДА, -1) КАК Период,
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_ВзаиморасчетыСРаботниками
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачалоПериода, ) КАК ВзаиморасчетыСРаботниками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	ВзаиморасчетыСРаботниками.Период,
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОборот
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, ) КАК ВзаиморасчетыСРаботниками
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, СЕКУНДА, -1) КАК Период,
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТ_ВзаиморасчетыСДепонентами
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&НачалоПериода, ) КАК ВзаиморасчетыСДепонентами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.Период, МЕСЯЦ),
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОборот
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, ) КАК ВзаиморасчетыСДепонентами
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСРаботниками.Организация КАК Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА &ДетализацияВыплаты
	|			ТОГДА ВзаиморасчетыСРаботниками.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСРаботниками.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Возврат)
	|						ТОГДА ""Возвращено в кассу ""
	|					ИНАЧЕ ""Выплачено из кассы ""
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|			ТОГДА ""Перечислено в банк""
	|		ИНАЧЕ ""Способ выплаты не указан""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВзаиморасчетыСРаботниками.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА "" (аванс)""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Вид,
	|	СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов) КАК Удержания,
	|	0 КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	0 КАК СуммаВзаиморасчетовКонечныйОстаток
	|ПОМЕСТИТЬ ВТ_ЗапросПоВзаиморасчетам
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
	|ГДЕ
	|	ВзаиморасчетыСРаботниками.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВзаиморасчетыСРаботниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ВзаиморасчетыСРаботниками.Регистратор ССЫЛКА Документ.ДепонированиеЗаработнойПлаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСРаботниками.Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияВыплаты
	|			ТОГДА ВзаиморасчетыСРаботниками.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСРаботниками.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Возврат)
	|						ТОГДА ""Возвращено в кассу ""
	|					ИНАЧЕ ""Выплачено из кассы ""
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|			ТОГДА ""Перечислено в банк""
	|		ИНАЧЕ ""Способ выплаты не указан""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВзаиморасчетыСРаботниками.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА "" (аванс)""
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСРаботниками.Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	МесяцыОтчета.ПериодРегистрации,
	|	NULL,
	|	""Сальдо"",
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСРаботниками.Период < МесяцыОтчета.ПериодРегистрации
	|				ТОГДА ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСРаботниками.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|				ТОГДА ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	Периоды КАК МесяцыОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	|		ПО (ВзаиморасчетыСРаботниками.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСРаботниками.Организация,
	|	ВзаиморасчетыСРаботниками.Физлицо,
	|	МесяцыОтчета.ПериодРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияВыплаты
	|			ТОГДА ВзаиморасчетыСДепонентами.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСДепонентами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Возврат)
	|						ТОГДА ""Возвращено в кассу ""
	|					ИНАЧЕ ""Выплачено из кассы ""
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|			ТОГДА ""Перечислено в банк""
	|		ИНАЧЕ ""Способ выплаты не указан""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВзаиморасчетыСДепонентами.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА "" (аванс)""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	СУММА(ВзаиморасчетыСДепонентами.СуммаВзаиморасчетов),
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций КАК ВзаиморасчетыСДепонентами
	|ГДЕ
	|	ВзаиморасчетыСДепонентами.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НЕ ВзаиморасчетыСДепонентами.Регистратор ССЫЛКА Документ.ДепонированиеЗаработнойПлаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияВыплаты
	|			ТОГДА ВзаиморасчетыСДепонентами.Регистратор
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСДепонентами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Возврат)
	|						ТОГДА ""Возвращено в кассу ""
	|					ИНАЧЕ ""Выплачено из кассы ""
	|				КОНЕЦ
	|		КОГДА ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|			ТОГДА ""Перечислено в банк""
	|		ИНАЧЕ ""Способ выплаты не указан""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВзаиморасчетыСДепонентами.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА "" (аванс)""
	|		ИНАЧЕ """"
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	МесяцыОтчета.ПериодРегистрации,
	|	NULL,
	|	""Сальдо"",
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.Период < МесяцыОтчета.ПериодРегистрации
	|				ТОГДА ВзаиморасчетыСДепонентами.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|				ТОГДА ВзаиморасчетыСДепонентами.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	Периоды КАК МесяцыОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|		ПО (ВзаиморасчетыСДепонентами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВзаиморасчетыСДепонентами.Физлицо,
	|	МесяцыОтчета.ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.Регистратор.Номер КАК НомерРегистратора,
	|	НачисленияУдержания.Регистратор.Дата КАК ДатаРегистратора,
	|	НачисленияУдержания.ФизЛицо КАК ФизЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.Организация.Наименование КАК ОрганизацияНаименование,
	|	НачисленияУдержания.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияУдержания.ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета,
	|	НачисленияУдержания.Результат КАК Результат,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачисленияУдержания.СуммаВзаиморасчетовНачальныйОстаток КАК СальдоНачальное,
	|	НачисленияУдержания.СуммаВзаиморасчетовКонечныйОстаток КАК СальдоКонечное
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяПрочимДоходом
	|				ТОГДА ""ДоходыВНатуральнойФорме""
	|			ИНАЧЕ ""Начислено""
	|		КОНЕЦ КАК ВидДвижения,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.Регистратор
	|		КОНЕЦ КАК Регистратор,
	|		ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.ФизЛицо КАК ФизЛицо,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ КАК ВидРасчета,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА ""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование
	|			ИНАЧЕ ""Б"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование
	|		КОНЕЦ КАК ПорядокВидаРасчета,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		МИНИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало) КАК ПериодДействияНачало,
	|		МАКСИМУМ(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец) КАК ПериодДействияКонец,
	|		СУММА(ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней + ОсновныеНачисленияРаботниковОрганизации.УчитываемыеДни) КАК ОтработаноДней,
	|		СУММА(ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов + ОсновныеНачисленияРаботниковОрганизации.УчитываемыеЧасы) КАК ОтработаноЧасов,
	|		СУММА(ОсновныеНачисленияРаботниковОрганизации.Результат) КАК Результат,
	|		0 КАК СуммаВзаиморасчетовНачальныйОстаток,
	|		0 КАК СуммаВзаиморасчетовКонечныйОстаток
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|		И (ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней + ОсновныеНачисленияРаботниковОрганизации.УчитываемыеДни <> 0
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов + ОсновныеНачисленияРаботниковОрганизации.УчитываемыеЧасы <> 0
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.Результат <> 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.Регистратор
	|		КОНЕЦ,
	|		ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.ФизЛицо,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник,
	|		ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА ""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование
	|			ИНАЧЕ ""Б"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяПрочимДоходом
	|				ТОГДА ""ДоходыВНатуральнойФорме""
	|			ИНАЧЕ ""Начислено""
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержано"",
	|		ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ УдержанияРаботниковОрганизации.Регистратор
	|		КОНЕЦ,
	|		УдержанияРаботниковОрганизации.ОбособленноеПодразделение,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.ФизЛицо,
	|		NULL,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
	|					И УдержанияРаботниковОрганизации.ДокументОснование.Получатель.Наименование <> """"
	|				ТОГДА "" ("" + УдержанияРаботниковОрганизации.ДокументОснование.Получатель.Наименование + "")""
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		""В"" + УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ УдержанияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		0,
	|		0,
	|		СУММА(УдержанияРаботниковОрганизации.Результат),
	|		0,
	|		0
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|		И УдержанияРаботниковОрганизации.Результат <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ УдержанияРаботниковОрганизации.Регистратор
	|		КОНЕЦ,
	|		УдержанияРаботниковОрганизации.ОбособленноеПодразделение,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.ФизЛицо,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
	|					И УдержанияРаботниковОрганизации.ДокументОснование.Получатель.Наименование <> """"
	|				ТОГДА "" ("" + УдержанияРаботниковОрганизации.ДокументОснование.Получатель.Наименование + "")""
	|			ИНАЧЕ """"
	|		КОНЕЦ,
	|		""В"" + УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		ВЫБОР
	|			КОГДА УдержанияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ УдержанияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ,
	|		КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		УдержанияРаботниковОрганизации.ПериодРегистрации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяПрочимДоходом
	|				ТОГДА ""ДоходыВНатуральнойФорме""
	|			ИНАЧЕ ""Начислено""
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.Регистратор
	|		КОНЕЦ,
	|		ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
	|		ДополнительныеНачисленияРаботниковОрганизации.Сотрудник,
	|		ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ,
	|		""Б"" + ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		СУММА(ВЫБОР
	|				КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|						И (ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|								И НЕ ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|							ИЛИ НЕ ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|								И НЕ ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ))
	|					ТОГДА ДополнительныеНачисленияРаботниковОрганизации.Показатель1
	|				КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска)
	|					ТОГДА ВЫБОР
	|							КОГДА ДополнительныеНачисленияРаботниковОрганизации.ДатаНачалаСобытия < &парамДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРаб
	|								ТОГДА ДополнительныеНачисленияРаботниковОрганизации.Показатель1
	|							КОГДА ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|										И НЕ ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|									ИЛИ НЕ ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|										И НЕ ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|								ТОГДА ДополнительныеНачисленияРаботниковОрганизации.Показатель2
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		СУММА(ВЫБОР
	|				КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|						И (ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|								И ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|							ИЛИ НЕ ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|								И ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ))
	|					ТОГДА ДополнительныеНачисленияРаботниковОрганизации.Показатель1
	|				КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска)
	|					ТОГДА ВЫБОР
	|							КОГДА ДополнительныеНачисленияРаботниковОрганизации.ДатаНачалаСобытия < &парамДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРаб
	|								ТОГДА 0
	|							КОГДА ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|										И ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|									ИЛИ НЕ ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботыФизЛиц
	|										И ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|								ТОГДА ДополнительныеНачисленияРаботниковОрганизации.Показатель2
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		СУММА(ДополнительныеНачисленияРаботниковОрганизации.Результат),
	|		0,
	|		0
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДополнительныеНачисленияРаботниковОрганизации.Результат <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.Регистратор
	|		КОНЕЦ,
	|		ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение,
	|		ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
	|		ДополнительныеНачисленияРаботниковОрганизации.Сотрудник,
	|		ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ,
	|		""Б"" + ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ОбъединятьВРасчетномЛистке
	|				ТОГДА NULL
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.НомерСтроки
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяПрочимДоходом
	|				ТОГДА ""ДоходыВНатуральнойФорме""
	|			ИНАЧЕ ""Начислено""
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержано"",
	|		NULL,
	|		ИсчислениеНалогов.Организация,
	|		МесяцыОтчета.ПериодРегистрации,
	|		ИПНРасчетыСБюджетом.ФизЛицо,
	|		NULL,
	|		""ИПН исчисленный"",
	|		""Г"",
	|		NULL,
	|		ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|					И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|					И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|						И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|					ТОГДА ИПНРасчетыСБюджетом.Налог
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		0,
	|		0
	|	ИЗ
	|		Периоды КАК МесяцыОтчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалогов
	|			ПО (ИСТИНА)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|			ПО (ИсчислениеНалогов.Налогоплательщик = ИПНРасчетыСБюджетом.Налогоплательщик)
	|				И (ИПНРасчетыСБюджетом.Период >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ИПНРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					ИЛИ ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИПНРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|	ГДЕ
	|		ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|		И ВЫБОР
	|				КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|						И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|					ТОГДА ИПНРасчетыСБюджетом.Налог
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МесяцыОтчета.ПериодРегистрации,
	|		ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|					И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИПНРасчетыСБюджетом.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете = ЛОЖЬ
	|					И ИсчислениеНалогов.Организация = ИПНРасчетыСБюджетом.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		ИсчислениеНалогов.Организация,
	|		ИПНРасчетыСБюджетом.ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержано"",
	|		NULL,
	|		ИсчислениеНалогов.Организация,
	|		МесяцыОтчета.ПериодРегистрации,
	|		ОПВРасчетыСФондами.ФизЛицо,
	|		NULL,
	|		""ОПВ исчисленные"",
	|		""Д"",
	|		NULL,
	|		ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|					ТОГДА ОПВРасчетыСФондами.Взнос
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		0,
	|		0
	|	ИЗ
	|		Периоды КАК МесяцыОтчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалогов
	|			ПО (ИСТИНА)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|			ПО (ИсчислениеНалогов.Налогоплательщик = ОПВРасчетыСФондами.Налогоплательщик)
	|				И (ОПВРасчетыСФондами.Период >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					ИЛИ ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|	ГДЕ
	|		ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|		И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|		И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|		И ВЫБОР
	|				КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|					ТОГДА ОПВРасчетыСФондами.Взнос
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МесяцыОтчета.ПериодРегистрации,
	|		КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ),
	|		ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОПВРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ОПВРасчетыСФондами.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		ИсчислениеНалогов.Организация,
	|		ОПВРасчетыСФондами.ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержано"",
	|		NULL,
	|		ИсчислениеНалогов.Организация,
	|		МесяцыОтчета.ПериодРегистрации,
	|		ВОСМСРасчетыСФондами.ФизЛицо,
	|		NULL,
	|		""Взносы ОСМС исчисленные"",
	|		""Е"",
	|		NULL,
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|					ТОГДА ВОСМСРасчетыСФондами.Взнос
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		0,
	|		0
	|	ИЗ
	|		Периоды КАК МесяцыОтчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалогов
	|			ПО (ИСТИНА)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|			ПО (ИсчислениеНалогов.Налогоплательщик = ВОСМСРасчетыСФондами.Налогоплательщик)
	|				И (ВОСМСРасчетыСФондами.Период >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					ИЛИ ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|	ГДЕ
	|		ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|		И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|		И ВЫБОР
	|				КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|					ТОГДА ВОСМСРасчетыСФондами.Взнос
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МесяцыОтчета.ПериодРегистрации,
	|		КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ),
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|				ТОГДА НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ МесяцыОтчета.ПериодРегистрации
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВОСМСРасчетыСФондами.Период МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					И ИсчислениеНалогов.Организация = ВОСМСРасчетыСФондами.Организация
	|				ТОГДА КОНЕЦПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|		КОНЕЦ,
	|		ИсчислениеНалогов.Организация,
	|		ВОСМСРасчетыСФондами.ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Удержано"",
	|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|		NULL,
	|		""Погашение займа"",
	|		""Ж"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		0,
	|		0,
	|		ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|	ГДЕ
	|		ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(ВЫБОР
	|				КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|						И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|					ТОГДА ""ДоходыВНатуральнойФорме""
	|				ИНАЧЕ ""Сальдо""
	|			КОНЕЦ),
	|		NULL,
	|		ИПНСведенияОДоходах.Организация,
	|		МесяцыОтчета.ПериодРегистрации,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|					И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|				ТОГДА ИПНСведенияОДоходах.ВидРасчета
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|					И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|				ТОГДА ИПНСведенияОДоходах.ВидРасчетаНаименование
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		NULL,
	|		ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|							И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|						ТОГДА НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|					ИНАЧЕ NULL
	|				КОНЕЦ), МесяцыОтчета.ПериодРегистрации),
	|		ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|					КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|							И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|						ТОГДА КОНЕЦПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|					ИНАЧЕ NULL
	|				КОНЕЦ), КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)),
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|						И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|					ТОГДА ИПНСведенияОДоходах.СуммаДохода
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		0,
	|		0
	|	ИЗ
	|		Периоды КАК МесяцыОтчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|			ПО (ИПНСведенияОДоходах.ПериодРегистрации >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ИПНСведенияОДоходах.ПериодРегистрации <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|					ИЛИ ИПНСведенияОДоходах.Период >= НАЧАЛОПЕРИОДА(МесяцыОтчета.ПериодРегистрации, ГОД)
	|						И ИПНСведенияОДоходах.Период <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ)
	|						И ИПНСведенияОДоходах.ПериодРегистрации <= КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МесяцыОтчета.ПериодРегистрации,
	|		КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ),
	|		ИПНСведенияОДоходах.Организация,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|					И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|				ТОГДА ИПНСведенияОДоходах.ВидРасчета
	|			ИНАЧЕ NULL
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.ЯвляетсяПрочимДоходом
	|					И (ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ МесяцыОтчета.ПериодРегистрации И КОНЕЦПЕРИОДА(МесяцыОтчета.ПериодРегистрации, МЕСЯЦ))
	|				ТОГДА ИПНСведенияОДоходах.ВидРасчетаНаименование
	|			ИНАЧЕ NULL
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВыплатаЗарплаты.Вид = ""Сальдо""
	|				ТОГДА ""Сальдо""
	|			ИНАЧЕ ""Выплата""
	|		КОНЕЦ,
	|		ВыплатаЗарплаты.Регистратор,
	|		ВыплатаЗарплаты.Организация,
	|		ВыплатаЗарплаты.ПериодРегистрации,
	|		ВыплатаЗарплаты.ФизЛицо,
	|		NULL,
	|		ВыплатаЗарплаты.Вид,
	|		ВыплатаЗарплаты.Регистратор.Дата,
	|		NULL,
	|		ВыплатаЗарплаты.ПериодРегистрации,
	|		КОНЕЦПЕРИОДА(ВыплатаЗарплаты.ПериодРегистрации, МЕСЯЦ),
	|		0,
	|		0,
	|		СУММА(ВыплатаЗарплаты.Удержания),
	|		СУММА(ВыплатаЗарплаты.СуммаВзаиморасчетовНачальныйОстаток),
	|		СУММА(ВыплатаЗарплаты.СуммаВзаиморасчетовКонечныйОстаток)
	|	ИЗ
	|		ВТ_ЗапросПоВзаиморасчетам КАК ВыплатаЗарплаты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВыплатаЗарплаты.Организация,
	|		ВыплатаЗарплаты.ПериодРегистрации,
	|		ВыплатаЗарплаты.ФизЛицо,
	|		ВЫБОР
	|			КОГДА ВыплатаЗарплаты.Вид = ""Сальдо""
	|				ТОГДА ""Сальдо""
	|			ИНАЧЕ ""Выплата""
	|		КОНЕЦ,
	|		ВыплатаЗарплаты.Вид,
	|		ВыплатаЗарплаты.Регистратор.Дата,
	|		ВыплатаЗарплаты.Регистратор,
	|		ВыплатаЗарплаты.ПериодРегистрации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Вычет"",
	|		NULL,
	|		СведенияОбИсчисленииВычетовИПН.Организация,
	|		НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|		NULL,
	|		СведенияОбИсчисленииВычетовИПН.ВидВычета,
	|		""Я"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		0,
	|		0,
	|		СУММА(СведенияОбИсчисленииВычетовИПН.ПримененныйВычет),
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.СведенияОбИсчисленииВычетовИПН КАК СведенияОбИсчисленииВычетовИПН
	|	ГДЕ
	|		СведенияОбИсчисленииВычетовИПН.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОбИсчисленииВычетовИПН.Организация,
	|		СведенияОбИсчисленииВычетовИПН.ФизическоеЛицо,
	|		НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		СведенияОбИсчисленииВычетовИПН.ВидВычета,
	|		КОНЕЦПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПН.Период, МЕСЯЦ)
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(СведенияОбИсчисленииВычетовИПН.ПримененныйВычет) <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Корректировка"",
	|		NULL,
	|		ИПНСведенияОДоходах.Организация,
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		NULL,
	|		""Корректировка дохода"",
	|		""Я"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		0,
	|		0,
	|		СУММА(ИПНСведенияОДоходах.ПримененнаяКорректировка) КАК ПримененнаяКорректировка,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|	ГДЕ
	|		ИПНСведенияОДоходах.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ИПНСведенияОДоходах.ПериодРегистрации >= ДАТАВРЕМЯ(2019,1,1) 
   	|		И ИПНСведенияОДоходах.ПериодРегистрации < ДАТАВРЕМЯ(2020,12,31) 
	|		И НЕ ИПНСведенияОДоходах.ПримененнаяКорректировка = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ),
	|		ИПНСведенияОДоходах.Организация,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		""Корректировка дохода"",
	|		КОНЕЦПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|
    |	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""СуммаУменьшенияОблагаемогоДохода"",
	|		NULL,
	|		ИПНСведенияОДоходах.Организация,
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		NULL,
	|		""Сумма уменьшения облагаемого дохода"",
	|		""Я"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		0,
	|		0,
	|		СУММА(ИПНСведенияОДоходах.СуммаУменьшенияОблагаемогоДохода) КАК СуммаУменьшенияОблагаемогоДохода,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|	ГДЕ
	|		ИПНСведенияОДоходах.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ИПНСведенияОДоходах.ПериодРегистрации >= ДАТАВРЕМЯ(2021,1,1) 
	|		И НЕ ИПНСведенияОДоходах.СуммаУменьшенияОблагаемогоДохода = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ),
	|		ИПНСведенияОДоходах.Организация,
	|		ИПНСведенияОДоходах.ФизЛицо,
	|		""Сумма уменьшения облагаемого дохода"",
	|		КОНЕЦПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)) КАК НачисленияУдержания
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРегистрации,
	|	ОрганизацияНаименование,
	|	НачисленияУдержания.ВидДвижения,
	|	НачисленияУдержания.ПорядокВидаРасчета,
	|	НачисленияУдержания.ПериодДействияНачало
	|ИТОГИ ПО
	|	ПериодРегистрации,
	|	Организация,
	|	ФизЛицо,
	|	ВидДвижения";
		
	ТекстПостроителя = СформироватьСписокМесяцев(ТекстПостроителя, ДатаНач, ДатаКон);
	
	ПостроительОтчетов.Текст = ТекстПостроителя;
	
	// Подготовим построитель запросов к настройке отборов
	ПостроительОтчетов.ЗаполнитьНастройки();
	ПостроительОтчетов.Отбор.Сбросить();
	
КонецПроцедуры

// Запоминает настройку группировки расчетного листка
//
Процедура ЗапомнитьНастройкуРасчетногоЛистка() Экспорт  
	
	// Найдем элемент группировки с названием "ШапкаРасчетногоЛистка"
	ЭлементНайден = Ложь;
	
	Для Каждого ЭлементСтруктурыГруппировки Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктурыГруппировки.Имя = "ШапкаРасчетногоЛистка" Тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктурыГруппировки;
			КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			// Рекурсивно проверим остальные элементы структуры
			ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет рекурсивный поиск элемента группировки с именем "ШапкаРасчетногоЛистка"
//
Процедура ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден)
	
	Для Каждого ЭлементСтруктуры Из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементНайден Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" Тогда
			
			ЭлементНастройкиРасчетногоЛистка = ЭлементСтруктуры;
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			ПроверитьВложенныеЭлементы(ЭлементСтруктуры , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктуруРасчетногоЛистка(Структура) 
	
	ЭлементСтруктурыРасчетногоЛистка = Структура.Добавить(ТипЗнч(ЭлементНастройкиРасчетногоЛистка));
	
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыРасчетногоЛистка, ЭлементНастройкиРасчетногоЛистка);
	
	ЭлементСтруктурыРасчетногоЛистка.Имя                           = "ШапкаРасчетногоЛистка";
	ЭлементСтруктурыРасчетногоЛистка.Структура[0].Имя              = "Налоги";
	ЭлементСтруктурыРасчетногоЛистка.Структура[1].Имя              = "ПогашениеЗаймов";
	ЭлементСтруктурыРасчетногоЛистка.Структура[2].Имя              = "ОППВ";
	ЭлементСтруктурыРасчетногоЛистка.Структура[3].Имя              = "ВзносыИОтчисленияОСМС";
	ЭлементСтруктурыРасчетногоЛистка.Структура[4].Имя              = "ЗаголовокТаблицы";
	ЭлементСтруктурыРасчетногоЛистка.Структура[5].Имя              = "Начисление";
	ЭлементСтруктурыРасчетногоЛистка.Структура[5].Структура[0].Имя = "СтрокаНачисленийУдержаний";
	ЭлементСтруктурыРасчетногоЛистка.Структура[6].Имя              = "Удержание";
	ЭлементСтруктурыРасчетногоЛистка.Структура[6].Структура[0].Имя = "СтрокаНачисленийУдержаний";
	ЭлементСтруктурыРасчетногоЛистка.Структура[7].Имя			   = "Вычет";
    ЭлементСтруктурыРасчетногоЛистка.Структура[7].Структура[0].Имя = "ВычетСтрока";
	ЭлементСтруктурыРасчетногоЛистка.Структура[8].Имя			   = "Корректировка";
	ЭлементСтруктурыРасчетногоЛистка.Структура[9].Имя              = "Сальдо";

КонецПроцедуры

// Добавление расчетного листка в настройку схемы компоновки
//
Процедура ВосстановитьНастройкуРасчетногоЛистка() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		
		ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
		
	Иначе
		
		Для Каждого ЭлементСтруктурыГруппировки Из КомпоновщикНастроек.Настройки.Структура Цикл
			
			Если ТипЗнч(ЭлементСтруктурыГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
				ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
				Возврат;
			КонецЕсли;
			
			Если ЭлементСтруктурыГруппировки.Структура.Количество() <> 0 Тогда
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() <> 0 Тогда
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки); 
					НайтиСледующийУровень(ЭлементСтруктурыГруппировки);
					
				Иначе
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() = 0 Тогда
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(КомпоновщикНастроек.Настройки.Структура);
				
				Иначе
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Поиск последнего уровня иерархии группировки
//
Процедура НайтиСледующийУровень(ЭлементСтруктурыГруппировки)
	
	Для Каждого ЭлементСтруктуры Из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "ШапкаРасчетногоЛистка" Тогда
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Структура.Количество() <> 0 Тогда
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() <> 0 Тогда
				
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				НайтиСледующийУровень(ЭлементСтруктуры);
				
			Иначе
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
				
			КонецЕсли;
		Иначе
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктурыГруппировки.Структура);
				
			Иначе
			
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетногоЛистка(ЭлементСтруктуры.Структура);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавление поля в таблицу выбранных полей из таблицы группировок
//
Процедура ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры)
	
	ЭлементСтруктуры.Выбор.Элементы.Очистить();
	
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Значение      = ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный;
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Использование = Истина;
	
	Для Каждого ЭлементИсточник Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		
		ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЭлементИсточник.Поле)));
		Если ДоступноеПоле <> Неопределено Тогда
			ЭлементПриемник               = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементПриемник.Поле          = ДоступноеПоле.Поле;
			ЭлементПриемник.Заголовок     = ДоступноеПоле.Заголовок;
			ЭлементПриемник.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если НЕ СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию,
	|СписокДоступныхПредопределенныхНастроек,
	|МинимальныйПериодОтчета", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, СписокПолейПодстановкиОтборовПоУмолчанию, , "Месяц");

КонецФункции

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
	
#КонецЕсли

НастройкаШириныКолонокРасчетногоЛистка     = Новый Массив();
НастройкаРазмТекстаКолонокРасчетногоЛистка = Новый Массив();

#Если Клиент тогда
Для Каждого МакетГруппировки Из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
	Если МакетГруппировки.ИмяГруппировки = "ШапкаРасчетногоЛистка" Тогда
		ИмяМакетаШапкаРасчетногоЛистка = МакетГруппировки.Макет;
	КонецЕсли;
КонецЦикла;
МакетШапкаРасчетногоЛистка = СхемаКомпоновкиДанных.Макеты.Найти(ИмяМакетаШапкаРасчетногоЛистка);

// запомнить настройки макета
ЯчейкиМакета = МакетШапкаРасчетногоЛистка.Макет[0].Ячейки;

Для Каждого Ячейка Из ЯчейкиМакета Цикл
	НастройкаШириныКолонокРасчетногоЛистка.Вставить(ЯчейкиМакета.Индекс(Ячейка), Ячейка.Оформление.Элементы.Найти("MaximumWidth").Значение);
	НастройкаРазмТекстаКолонокРасчетногоЛистка.Вставить(ЯчейкиМакета.Индекс(Ячейка), Ячейка.Оформление.Элементы.Найти("Placement").Значение);
КонецЦикла;

НастройкаРазмТекстаКолонокРасчетногоЛистка[1] = ТипРазмещенияТекстаКомпоновкиДанных.Выступать;

МакетШапкаРасчетногоЛистка = Неопределено;
ЯчейкиМакета               = Неопределено;

#КонецЕсли

НачисленияУдержания = Новый ТаблицаЗначений();
НачисленияУдержания.Колонки.Добавить("ВидДвижения");
НачисленияУдержания.Колонки.Добавить("ВидДвиженияУд");
НачисленияУдержания.Колонки.Добавить("ВидДвиженияВычет");
НачисленияУдержания.Колонки.Добавить("ВидДвиженияКорректировка");
НачисленияУдержания.Колонки.Добавить("ВидДвиженияСуммаУменьшенияОблагаемогоДохода");
НачисленияУдержания.Колонки.Добавить("ФизЛицо");
НачисленияУдержания.Колонки.Добавить("Организация");
НачисленияУдержания.Колонки.Добавить("ГоловнаяОрганизация");
НачисленияУдержания.Колонки.Добавить("ПериодРегистрации");
НачисленияУдержания.Колонки.Добавить("ПризнакУпорядочиванияСтрок");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеДни");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияОтработанныеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаНачисления");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияВидУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияПериодУдержания");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияСуммаУдержания");
НачисленияУдержания.Колонки.Добавить("СальдоНачальное");
НачисленияУдержания.Колонки.Добавить("СальдоКонечное");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияУчитываемыеЧасы");
НачисленияУдержания.Колонки.Добавить("НачисленияУдержанияУчитываемыеДни");

СписокПолейОтбора = Новый СписокЗначений;
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ФизЛицо"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("ПериодРегистрации"));
СписокПолейОтбора.Добавить(Новый ПолеКомпоновкиДанных("Организация"));
