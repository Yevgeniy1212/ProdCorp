Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;


#Если Клиент Тогда

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	// Проверим заполнение обязательных реквизитов
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	
	Организация 			   = Налогоплательщик;
	СведенияОНалогоплательщике = ОбщегоНазначения.СведенияОЮрФизЛице(Организация, КонецПериода);
	
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок_388");
	
	ОбластьЗаголовок.Параметры.НомерПриложения  = "1";
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета  = "Налоговый регистр" + Символы.ПС + "по применению инвестиционных налоговых преференций";
	ОбластьЗаголовок.Параметры.ЗаголовокТаблицы = "Вычеты по инвестиционным налоговым преференциям";

	Если СведенияОНалогоплательщике <> Неопределено Тогда 
		ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
		ОбластьЗаголовок.Параметры.НалоговыйПериод = ОбщегоНазначения.ПолучитьПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода));
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ДопПоле  = "(тенге)";
	
	Результат.Вывести(ОбластьЗаголовок);
       
	
	ОтчетыДляРуководителя.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал_388");
	
	Если Организация <> Неопределено Тогда 
		ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, КонецПериода, глЗначениеПеременной("глТекущийПользователь").Физлицо);
		ОбластьПодвал.Параметры.ФИОРуководителя = ОтветЛица.Руководитель;
		ОбластьПодвал.Параметры.ФИОглБухгалтера = ОтветЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ФИОИсполнителя  = ОтветЛица.ОтветственныйЗаРегистры;
		ОбластьПодвал.Параметры.ДатаСоставления = Формат(ОбщегоНазначения.ПолучитьРабочуюДату(), "ДФ=""дд ММММ гггг 'г.'""");
	КонецЕсли;
	
	Результат.Вывести(ОбластьПодвал);

	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ОтрицательноеКрасным Тогда
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#";
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ОстаточнаяСумма");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Выплаты");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ПервоначальныйОстаток");
		
		ЗначениеПараметра = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
		ЗначениеПараметра.Использование = ОтрицательноеКрасным;
		
	КонецЕсли;

	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЛьготыФА", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидРемонтаОС", Перечисления.ВидыРемонтаВА.Преференции);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Событие", Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетовН312", ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетовН340", ПланыСчетов.Налоговый.ПреренцииДоВводаВЭксплуатацию);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетовН860", ПланыСчетов.Налоговый.РасходыНаРемонтВА);
		
	Если ЗначениеЗаполнено(СписокСтруктурныхЕдиниц) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "СписокОрганизаций", СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);			
 	КонецЕсли;
							
КонецПроцедуры

//Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
//	
//	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
//	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
//	
//	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();
//	
//	Результат.Вывести(ОбластьЗаголовок);
//			
//КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Вычеты по инвестиционным налоговым преференциям";
	
	Возврат ТиповыеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		Сообщить("Не указан период формирования отчета", СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли НачалоПериода > КонецПериода Тогда
		Сообщить("Дата начала периода не может быть больше даты конца периода", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
			
	Возврат Отказ;
	
КонецФункции
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	//
	//Если СохраненнаяНастройка = Неопределено Тогда
	//	СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	//	Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	//	Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
	//	Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
	//	Настройка.Владелец = глЗначениеПеременной("глТекущийПользователь");
	//	Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
	//	Настройка.ИспользоватьПриОткрытии = Истина;
	//	НовыйПользователь = Настройка.Пользователи.Добавить();
	//	НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	//	Настройка.Записать();
	//	
	//	СохраненнаяНастройка = Настройка.Ссылка;
	//КонецЕсли;
	//
	//СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	//
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода",  КонецПериода);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

ОтрицательноеКрасным = Истина;
РасширеннаяНастройка = Истина;