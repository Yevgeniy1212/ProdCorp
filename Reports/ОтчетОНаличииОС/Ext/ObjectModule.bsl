Перем мСписокИсточниковФинансирования Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;
Перем РежимРасшифровки Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//КомпоновщикНастроек.Восстановить();
	//НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ЗначениеЗаполнено(Период) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(Период));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Дата(3999, 11, 1));
	КонецЕсли;
	
	Если ТипОтчета = 1 Тогда
		мВидыСубконто = Новый Массив;
		мВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	ИначеЕсли ТипОтчета = 0 Тогда
		мВидыСубконто = Новый Массив;
		мВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Иначе
		мВидыСубконто = Новый Массив;
		мВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	КонецЕсли;
			
	Если ТипОтчета = 1 Тогда
		СписокСчетовАмортизации = Новый Массив;
		СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	ИначеЕсли ТипОтчета = 0 Тогда
		СписокСчетовАмортизации = Новый Массив;
		СписокСчетовАмортизации.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	КонецЕсли;
	
	ЗапросСчетовУчета = Новый Запрос;
	ЗапросСчетовУчета.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетУчетаБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетаУчетаНМА.СчетУчетаБУ КАК СчетУчетаБУ
	|	ИЗ
	|		РегистрСведений.СчетаУчетаНМА КАК СчетаУчетаНМА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаУчетаОС.СчетУчетаБУ
	|	ИЗ
	|		РегистрСведений.СчетаУчетаОС КАК СчетаУчетаОС) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетУчетаБУ";
	ВыборкаСчетовУчета = ЗапросСчетовУчета.Выполнить().Выбрать();
	СчетаУчета = Новый Массив;
	СчетаУчета.Очистить();
		
	Если ТипОтчета = 2 Тогда
		СчетаУчета.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи);
	Иначе
		Пока ВыборкаСчетовУчета.Следующий() Цикл
			СчетаУчета.Добавить(ВыборкаСчетовУчета.СчетУчетаБУ);		
		КонецЦикла;
	КонецЕсли;		
		
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетаУчета", СчетаУчета);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТипОтчета", ТипОтчета);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовАмортизации", СписокСчетовАмортизации);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "мВидыСубконто", мВидыСубконто);
		
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводЗаголовкаСпециализированногоОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	Если ТипОтчета = 0 Тогда
		ЗаголовокОтчета = "Отчет о наличии ОС "+ " на " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";
	ИначеЕсли ТипОтчета = 1 Тогда
		ЗаголовокОтчета = "Отчет о наличии НМА "+ " на " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";
	Иначе
		ЗаголовокОтчета = "Отчет о наличии активов для продажи "+ " на " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";
	КонецЕсли;

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
		
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	//ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СтруктураНастроек.Вставить("мСписокПодразделений", мСписокПодразделений);
	СтруктураНастроек.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	СтруктураНастроек.Вставить("мДеревоСтруктурныхЕдиниц", мДеревоСтруктурныхЕдиниц);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);

КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокИсточниковФинансирования = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;