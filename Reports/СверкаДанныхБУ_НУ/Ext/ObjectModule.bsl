Перем СохраненнаяНастройка Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем ОтображатьОформление Экспорт;

#Если Клиент Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета", Истина);
	
КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект, "Налоговый");
	
	Если ДанныеОтчета.ДополнительныеПоля.Найти("СчетНУ.Наименование", "Поле") = Неопределено Тогда
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Представление = "Выводить наименование счета";
		НоваяСтрока.Поле          = "СчетНУ.Наименование";
		НоваяСтрока.Использование = Истина;
	КонецЕсли;			
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда                                                        
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);		
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);	
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	                                                                                 
	Если ВыводитьПолностью Тогда                                                
		// Выполним дополнительную обработку Результата отчета                       
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, 	"мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, 	"мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, 	 	"мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	
	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	КоличествоГруппировок = 1;
	
	ЗаголовокКолонкиГруппировок = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиГруппировок = ЗаголовокКолонкиГруппировок + ?(ПустаяСтрока(ЗаголовокКолонкиГруппировок), "", Символы.ПС);
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиГруппировок = ЗаголовокКолонкиГруппировок + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ДанныеОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();		
	КонецЦикла;
	
	МакетПодвалаОтчета            = СтандартныеОтчеты.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчетНУ        = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "СчетНУ");
	МакетГруппировкиПодразделение = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
		
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	НовыйЭлемент.Значение = ЗаголовокКолонкиГруппировок;	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			МассивПоказателей.Добавить("НУ");
			МассивПоказателей.Добавить("НУНУ");
			МассивПоказателей.Добавить("НУПР");
			МассивПоказателей.Добавить("НУВР");
			МассивПоказателей.Добавить("Контроль");
			
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей     = 0 + ПоказателиОтчета.БУ.Значение + ПоказателиОтчета.НУ.Значение + + ПоказателиОтчета.НУНУ.Значение + ПоказателиОтчета.НУПР.Значение + ПоказателиОтчета.НУВР.Значение  + ПоказателиОтчета.Контроль.Значение;
	ЗначенияПоказателей = Новый Массив(6, КоличествоПоказателей);
	Для Каждого Массив Из ЗначенияПоказателей Цикл
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Массив[Индекс] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеОтчета.Вставить("МакетШапкиОтчета"     , МакетШапкиОтчета);
	ДанныеОтчета.Вставить("МакетСчетНУ"          , МакетГруппировкиСчетНУ);
	ДанныеОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета);
	ДанныеОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	ДанныеОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	
	// Форматирование заголовков колонок таблицы
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(ИндексКолонки = 0, Ложь, Истина), Истина);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	

КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("НУНУ");
	МассивПоказателей.Добавить("НУПР");
	МассивПоказателей.Добавить("НУВР");
	МассивПоказателей.Добавить("Контроль");
	
			
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	// Строим структуру с учетом отмеченных пользователем полей
    ЕстьСальдоНаНачало  	= СальдоНаНачалоДт 	ИЛИ СальдоНаНачалоКт  ИЛИ СальдоНаНачалоИтого;
	ЕстьСальдоНаКонец  		= СальдоНаКонецДт 	ИЛИ СальдоНаКонецКт   ИЛИ СальдоНаКонецИтого;
	ЕстьОборотыЗаПериод  	= ОборотыЗаПериодДт ИЛИ ОборотыЗаПериодКт ИЛИ ОборотыЗаПериодИтого;
	ЕстьДетализацияПоДокументДвижения = Ложь;
		
	Если НЕ ЕстьСальдоНаНачало И НЕ ЕстьСальдоНаКонец И НЕ ЕстьОборотыЗаПериод Тогда
		// Если пользователь не отметил ни один показатель, устанавливаем по умолчанию 
		// итоги по всем
		СальдоНаНачалоИтого 	= Истина;
		СальдоНаКонецИтого 		= Истина;
		ОборотыЗаПериодИтого 	= Истина;
		ЕстьСальдоНаНачало 		= Истина;
		ЕстьСальдоНаКонец 		= Истина;
		ЕстьОборотыЗаПериод		= Истина;
	КонецЕсли;	
	
	ГруппировкаДокументДвижения = ДанныеОтчета.ГруппировкаДоп.Найти(Новый ПолеКомпоновкиДанных("ДокументДвижения"), "Поле");
	Если ГруппировкаДокументДвижения <> Неопределено И ГруппировкаДокументДвижения.Использование Тогда
		ЕстьДетализацияПоДокументДвижения =  Истина; // в этом случае строим отчет без сведений о вышестоящих группировках и сальдо
		ЕстьСальдоНаНачало 	= Ложь;
		ЕстьСальдоНаКонец 	= Ложь;
	КонецЕсли;
	
	// Строим структуру отчета 
	Если ЕстьСальдоНаНачало	Тогда
		// групповая ветка
		ГруппаСальдоНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаСальдоНаНачало.Заголовок     = "Сальдо на начало периода";
		ГруппаСальдоНаНачало.Использование = Истина;
	    Если СальдоНаНачалоДт Тогда
			ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
			ГруппаСальдоНаНачалоДт.Использование = Истина;
			ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;
		Если СальдоНаНачалоКт Тогда
			ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
			ГруппаСальдоНаНачалоКт.Использование = Истина;
			ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;	
	    Если СальдоНаНачалоИтого Тогда
			ГруппаСальдоНаНачалоОбщие = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаНачалоОбщие.Заголовок     = "Итого";
			ГруппаСальдоНаНачалоОбщие.Использование = Истина;
			ГруппаСальдоНаНачалоОбщие.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОборотыЗаПериод Тогда
		// групповая ветка
		ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаОбороты.Заголовок     = "Обороты за период";
		ГруппаОбороты.Использование = Истина;	
	    Если ОборотыЗаПериодДт Тогда
			ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаОборотыДт.Заголовок     = "Дебет";
			ГруппаОборотыДт.Использование = Истина;
			ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;
		Если ОборотыЗаПериодКт Тогда
			ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаОборотыКт.Заголовок     = "Кредит";
			ГруппаОборотыКт.Использование = Истина;
			ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;	
		Если ОборотыЗаПериодИтого Тогда
			ГруппаОборотыОбщие = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаОборотыОбщие.Заголовок     = "Итого";
			ГруппаОборотыОбщие.Использование = Истина;
			ГруппаОборотыОбщие.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЕстьСальдоНаКонец Тогда
		// групповая ветка
		ГруппаСальдоНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаСальдоНаКонец.Заголовок     = "Сальдо на конец периода";
		ГруппаСальдоНаКонец.Использование = Истина;
		Если СальдоНаКонецДт Тогда
			ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
			ГруппаСальдоНаКонецДт.Использование = Истина;
			ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;
		Если СальдоНаКонецКт Тогда
			ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
			ГруппаСальдоНаКонецКт.Использование = Истина;
			ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;	
	    Если СальдоНаКонецИтого Тогда
			ГруппаСальдоНаКонецОбщие = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаСальдоНаКонецОбщие.Заголовок     = "Итого";
			ГруппаСальдоНаКонецОбщие.Использование = Истина;
			ГруппаСальдоНаКонецОбщие.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		КонецЕсли;	
	КонецЕсли;	
	
	ВидОстатков = "";
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			// в расшифровке по регистратору сальдо не выводится
			Если ЕстьСальдоНаНачало И СальдоНаНачалоИтого Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоОбщие, 	"СальдоНаНачалоПериода." + ЭлементМассива + "СуммаНачальныйОстаток");			
			КонецЕсли;
			Если ЕстьСальдоНаНачало И СальдоНаНачалоДт Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, 	"СальдоНаНачалоПериода." + ЭлементМассива + "СуммаНачальныйОстатокДт");
			КонецЕсли;
			Если ЕстьСальдоНаНачало И СальдоНаНачалоКт Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, 	"СальдоНаНачалоПериода." + ЭлементМассива + "СуммаНачальныйОстатокКт");
			КонецЕсли;
			Если ОборотыЗаПериодИтого Тогда
				Если ЕстьДетализацияПоДокументДвижения Тогда
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыОбщие,       	"ДетальныеОборотыЗаПериод."       + ЭлементМассива + "СуммаОборот");
				Иначе					
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыОбщие,       	"ОборотыЗаПериод."       + ЭлементМассива + "СуммаОборот");
				КонецЕсли;
			КонецЕсли;
			
			Если ОборотыЗаПериодДт Тогда
				Если ЕстьДетализацияПоДокументДвижения Тогда
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыДт,       "ДетальныеОборотыЗаПериод."       + ЭлементМассива + "СуммаОборотДт");
				Иначе	
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыДт,       "ОборотыЗаПериод."       + ЭлементМассива + "СуммаОборотДт");
				КонецЕсли;	
			КонецЕсли;				
			
			Если ОборотыЗаПериодКт Тогда
				Если ЕстьДетализацияПоДокументДвижения Тогда
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыКт,       "ДетальныеОборотыЗаПериод."       + ЭлементМассива + "СуммаОборотКт");
				Иначе	
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыКт,       "ОборотыЗаПериод."       + ЭлементМассива + "СуммаОборотКт");
				КонецЕсли;
			КонецЕсли;
			// в расшифровке по регистратору сальдо не выводится
			Если ЕстьСальдоНаКонец И СальдоНаКонецИтого Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецОбщие,  	"СальдоНаКонецПериода."  + ЭлементМассива + "СуммаКонечныйОстаток");
			КонецЕсли;
			Если ЕстьСальдоНаКонец И СальдоНаКонецДт Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  	"СальдоНаКонецПериода."  + ЭлементМассива + "СуммаКонечныйОстатокДт");
			КонецЕсли;
			Если ЕстьСальдоНаКонец И СальдоНаКонецКт Тогда
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  	"СальдоНаКонецПериода."  + ЭлементМассива + "СуммаКонечныйОстатокКт");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	КонецЕсли;
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);
	
	// Формирование структуры отчета
	//Установим группировку по полям дополнительной группировки
	//группировка счета и валюты будут всегда ниже доп. группировок
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.ГруппировкаДоп Цикл 
		Если ЕстьДетализацияПоДокументДвижения И НЕ ПолеВыбраннойГруппировки.Поле = Новый ПолеКомпоновкиДанных("ДокументДвижения") Тогда
			Продолжить;
			// для расшифровки не выводим вышестоящие группировки,
			// так как компоновка не может пока вывести разнонаправленные ресурсы при наличии нескольких группировок в нужном нам виде
		КонецЕсли;	
		
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;			
        			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));														
									
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("СчетНУ") Тогда 												
				Если Не ПоСубсчетам Тогда
					ЗначениеОтбора = ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
					ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
					ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				КонецЕсли;				
			КонецЕсли;						
		                        		
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		КонецЕсли;
	КонецЦикла;
	
	ВыполненоСчетОформление = Ложь;
	СдвигРазмераШрифта      = Ложь;
	ТаблицаГруппировокКомпоновки = Новый ТаблицаЗначений;
	ТаблицаГруппировокКомпоновки.Колонки.Добавить("Группировка");
	ТаблицаГруппировокКомпоновки.Колонки.Добавить("Поле");
	СтандартныеОтчеты.РазобратьСтруктуруКомпоновщикаНастроек(КомпоновщикНастроек.Настройки.Структура, ТаблицаГруппировокКомпоновки);
	
	МаксИндекс = ДанныеОтчета.ГруппировкаДоп.Количество() - 1;
	Для Индекс = 0 По МаксИндекс Цикл
		ТекущаяГруппировка = ДанныеОтчета.ГруппировкаДоп.Получить(МаксИндекс - Индекс);
		ТекущееОформление  = ТекущаяГруппировка.Оформление;
		ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных(ТекущаяГруппировка.Поле);
		
		СтрокаГруппировки = ТаблицаГруппировокКомпоновки.Найти(ТекущееПолеГруппировки, "Поле");

		Если ИспользоватьОформлениеГруппировок
			И Строка(ТекущееОформление) <> ""
			И СтрокаГруппировки <> Неопределено Тогда   
			
			ОформлениеГруппировкиВКомпоновщике = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
			ОформлениеГруппировкиВКомпоновщике.Использование = Истина;
			
			Для Каждого ЭлементОформления Из ТекущееОформление Цикл
				Если ЭлементОформления.Использование Тогда
					ЭлементОформленияКомпоновки = ОформлениеГруппировкиВКомпоновщике.Оформление.Элементы.Найти(ЭлементОформления.Имя);
					Если ЭлементОформленияКомпоновки <> Неопределено Тогда
						// Изменяем шрифт, если были выделены подразделы счетов
						Если ЭлементОформления.Имя = "Шрифт" И ВыполненоСчетОформление Тогда
							ИсходныйШрифт = ЭлементОформления.Значение;
							НовыйШрифт = Новый Шрифт(ИсходныйШрифт, ,
													 ?(СдвигРазмераШрифта, ИсходныйШрифт.Размер + 1, ИсходныйШрифт.Размер),
													 НЕ ИсходныйШрифт.Жирный);
							ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
							ЭлементОформленияКомпоновки.Использование = Истина;
						Иначе
							ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
							ЭлементОформленияКомпоновки.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяГруппировка.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия
				И НЕ (ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("СчетНУ") И НЕ ПоСубсчетам)Тогда
				
				НовоеОформление = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
				НовоеОформление.Использование = Истина;
				
				Для Каждого ЭлементОформления Из ТекущееОформление Цикл
					Если ЭлементОформления.Использование Тогда
						ЭлементОформленияКомпоновки = НовоеОформление.Оформление.Элементы.Найти(ЭлементОформления.Имя);
					// Выделяем группы курсивом
						Если ЭлементОформления.Имя = "Шрифт" Тогда
							ИсходныйШрифт = ЭлементОформления.Значение;
							НовыйШрифт = Новый Шрифт(ИсходныйШрифт, , , , Истина);
							ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
							ЭлементОформленияКомпоновки.Использование = Истина;
						Иначе
							ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
							ЭлементОформленияКомпоновки.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				РеквизитДляОтбора = ?(ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("СчетНУ"),
									   ".ЗапретитьИспользоватьВПроводках",
									   ".ЭтоГруппа");
				
				ТиповыеОтчеты.ДобавитьОтбор(НовоеОформление.Отбор, Строка(ТекущееПолеГруппировки) + РеквизитДляОтбора, Истина);
				
			КонецЕсли;
			
			Если (ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("СчетНУ")) И ПоСубсчетам Тогда
				
				ВыполненоСчетОформление = Истина;
				
				ОформлениеГруппировкиВКомпоновщике = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
				ОформлениеГруппировкиВКомпоновщике.Использование = Истина;
		
				ТиповыеОтчеты.ДобавитьОтбор(ОформлениеГруппировкиВКомпоновщике.Отбор, "СчетНУ.Родитель", ПланыСчетов.Налоговый.ПустаяСсылка());
				
				Для Каждого ЭлементОформления Из ТекущееОформление Цикл
					Если ЭлементОформления.Использование Тогда
						ЭлементОформленияКомпоновки = ОформлениеГруппировкиВКомпоновщике.Оформление.Элементы.Найти(ЭлементОформления.Имя);
						Если ЭлементОформленияКомпоновки <> Неопределено Тогда
							Если (ЭлементОформления.Имя = "Шрифт") Тогда
								ИсходныйШрифт      = ЭлементОформления.Значение;
								СдвигРазмераШрифта = ИсходныйШрифт.Жирный;
								НовыйШрифт = Новый Шрифт(ИсходныйШрифт, ,
														 ?(СдвигРазмераШрифта, ИсходныйШрифт.Размер + 1, ИсходныйШрифт.Размер),
														 НЕ ИсходныйШрифт.Жирный);
								ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
								ЭлементОформленияКомпоновки.Использование = Истина;
							Иначе
								ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
								ЭлементОформленияКомпоновки.Использование = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключим вывод отборов
	ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ПоСубсчетам И НЕ ВыполненоСчетОформление Тогда
		
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
		
		РазмерШрифта = -1;
		Для Каждого Элемент Из УсловноеОформление Цикл
			Если Найти(Элемент.Представление, "Основной шрифт") <> 0
				 И Элемент.Использование Тогда
				 
				ШрифтОсновной = Элемент.Оформление.Элементы.Найти("Шрифт");
				РазмерШрифта = ШрифтОсновной.Значение.Размер;
			КонецЕсли;
		КонецЦикла;
		
		НовоеУсловноеОформление = УсловноеОформление.Добавить();
		УстановитьОформлениеПолей(КомпоновщикНастроек.Настройки.Выбор.Элементы, НовоеУсловноеОформление);
		
		Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СчетНУ");
		
		Если ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда 
			Для Каждого ДопПоле Из ДанныеОтчета.ДополнительныеПоля Цикл 
				
				Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Сред(ДопПоле.Поле, 1, Найти(ДопПоле.Поле, ".")));			
				
			КонецЦикла;
		КонецЕсли;
			
		ТиповыеОтчеты.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "СчетНУ.Родитель", ПланыСчетов.Налоговый.ПустаяСсылка());
		ТиповыеОтчеты.УстановитьПараметр(НовоеУсловноеОформление.Оформление, "Шрифт", Новый Шрифт(, РазмерШрифта, Истина));
		
		НовоеУсловноеОформление.Представление = "Выделять группы счетов";
		
	КонецЕсли;			
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ЕстьДетализацияПоДокументДвижения",ЕстьДетализацияПоДокументДвижения);
	
	СчетаУчетаВА = Новый СписокЗначений;
	СчетаУчетаВА.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_); 							// 2400
	СчетаУчетаВА.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);  			// 2700
	СчетаУчетаВА.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);   			// 2500 
	СчетаУчетаВА.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи_); 	// 1500
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетаВА", СчетаУчетаВА);
КонецПроцедуры

Процедура УстановитьОформлениеПолей(ЭлеметыКомпоновки, УсловноеОформление)
	
	Для Каждого Элемент Из ЭлеметыКомпоновки Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			УстановитьОформлениеПолей(Элемент.Элементы, УсловноеОформление);
		Иначе 
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат, "Налоговой");
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Контрольная ведомость данных БУ и НУ " + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = Новый Структура("БУ,НУ, НУНУ, НУПР, НУВР, Контроль", 
				Новый Структура("Значение, Использование, Представление", Истина, Истина,           "Общие данные БУ"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,           "Общие данные НУ"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,           "НУ (данные налогового учета"),				
				Новый Структура("Значение, Использование, Представление", Истина, Истина,			"ПР (данные по учету постоянных разниц)"),				
				Новый Структура("Значение, Использование, Представление", Истина, Истина,			"ВР (данные по учету временных разниц)"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,           "Контрольная сумма (БУ-НУ)"));
				

	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + ДанныеОтчета.ВысотаШапки;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	Если СохранятьНастройкуОтчета Тогда
		//сохраним список структурных единиц
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		               
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	ПоСубсчетам = Истина;	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;

ОтображатьОформление = Ложь;

#КонецЕсли