#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мВерсияФормы Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мТаблицаСтраницНаПечать Экспорт;

Перем ВсегоСтраниц Экспорт;

// Хранит ФИО исполнителя 
Перем мИсполнитель Экспорт;

Перем мСписокСтруктурныхЕдиниц Экспорт;

Перем мСчетаДляРасчета Экспорт;
Перем мСчетаИсключенныеИзРасчета  Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОбОрганизации()Экспорт 
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
			
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации
			
	Сведения.Добавить("", "КодПоОКПО"); // ОКПО
			
	Сведения.Добавить("", "ИИН_БИН"); // ИИН_БИН
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = ОбщегоНазначения.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), Сведения);
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

Функция ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности() Экспорт
	
	НастраиваемыйОбъект = "ОтчетИнвентаризацияЗадолженности.СчетаИсключаемыеИзРасчетаЗадолженности";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности() Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности();
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

Процедура СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности();
	
	НастраиваемыйОбъект = "ОтчетИнвентаризацияЗадолженности.СчетаИсключаемыеИзРасчетаЗадолженности";
	Наименование        = "Счета исключаемые из расчета задолженности";
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

ОписаниеТиповСтрока15 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока50 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

// Таблица значений хранит состав показателей отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя поля табличного документа;
//    - код показатели по составу показателей;
//    - код показателя по форме (имя области табличного документа);
//    - признак многострочности;
//    - тип данных показателя.
//
мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",ОписаниеТиповСтрока50);

мСтруктураВариантыЗаполнения = Новый Структура;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");


ВсегоСтраниц = 0;

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Лев(Выборка.Имя, 1) + ".", "") + ?(Выборка.Отчество <> "", " " + Лев(Выборка.Отчество, 1) + ".", "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    

// определим счета, учавствующие в расчете
МассивВидовСубконто = Новый Массив;
МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДебиторыКредиторыОрганизации);
МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
МассивСчетов = Новый Массив;

Запрос = Новый Запрос;
Запрос.Текст = 
		"ВЫБРАТЬ
		|	Типовой.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Типовой КАК Типовой
		|ГДЕ
		|	Типовой.ВидыСубконто.ВидСубконто В (&МассВидыСубконто)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Типовой.Порядок";

Запрос.УстановитьПараметр("МассВидыСубконто", МассивВидовСубконто);
	
ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
мСчетаДляРасчета   = ТаблицаРезультатов.ВыгрузитьКолонку("Счет");
	
// определим счета, исключенные из расчета
СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности();
мСчетаИсключенныеИзРасчета = СписокСчетовИсключаемыхИзРасчетаЗадолженности;

#КонецЕсли
