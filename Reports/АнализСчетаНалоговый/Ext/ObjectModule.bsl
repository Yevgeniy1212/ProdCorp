Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем СохраненныйСчет Экспорт;
Перем ФормироватьДиаграмму Экспорт;
Перем ОтображатьОформление Экспорт;

#Если Клиент Тогда

//
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , КонецПериода);
	СписокПараметров.Вставить("СчетУчета"         , Счет);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	//СписокПараметров.Вставить("Организация"       , Организация);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	СписокПараметров.Вставить("ЭтоНовыйДокумент"  , Ложь);
	
	Возврат СписокПараметров;
	
КонецФункции
//
Процедура ОбработкаИзмененияСчета(ПолнаяОбработка = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		КоличествоСубконто = Счет.ВидыСубконто.Количество();
		ИмяПоляПрефикс = "Субконто";
		
		ПараметрыОС      		= Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыНМА     		= Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыФизЛица 		= Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыСтатейЗатрат 	= Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыВидовДохода 	= Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		
		МассивНаборовДанных = Новый Массив;
		МассивНаборовДанных.Добавить("ОсновнойНаборДанных");
		МассивНаборовДанных.Добавить("Обороты");
		
		// Изменение представления и наложения ограничения типа значения
		Для Индекс = 1 По КоличествоСубконто Цикл
			Для Каждого ЭлементМассива Из МассивНаборовДанных Цикл
				Набор = СхемаКомпоновкиДанных.НаборыДанных[ЭлементМассива];
				Поле = Набор.Поля.Найти(ИмяПоляПрефикс + Индекс);
				Если Поле <> Неопределено Тогда
					ТипЗначения = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения;
					Поле.ТипЗначения = ТипЗначения;
					Поле.Заголовок   = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
				КонецЕсли;
				
				Если Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
					ПараметрыОС.ИндексСубконто    = Индекс;
					ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ПараметрыНМА.ИндексСубконто    = Индекс;
					ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
					ПараметрыСтатейЗатрат.ИндексСубконто    = Индекс;
					ПараметрыСтатейЗатрат.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Доходы")) Тогда
					ПараметрыВидовДохода.ИндексСубконто    = Индекс;
					ПараметрыВидовДохода.ЗаголовокСубконто = Поле.Заголовок;					
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПараметрыФизЛица.ИндексСубконто    = Индекс;
					ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеОС"     , ПараметрыОС);
		СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеНМА"    , ПараметрыНМА);
		СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеФизЛица", ПараметрыФизЛица);
		СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеСтатейЗатрат", ПараметрыСтатейЗатрат);
		СтандартныеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(СхемаКомпоновкиДанных, "ДанныеВидовДохода", ПараметрыВидовДохода);
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
		Если ПолнаяОбработка Тогда
			
			// Управление показателями
			
			ДанныеОтчета.ПоказателиОтчета.БУ.Использование = Истина;
			ДанныеОтчета.ПоказателиОтчета.БУ.Значение      = Истина;
			
			Если Счет.Количественный Тогда
				ДанныеОтчета.ПоказателиОтчета.Количество.Использование 		= Истина;
				ДанныеОтчета.ПоказателиОтчета.Количество.Значение      		= Истина;
				ДанныеОтчета.ПоказателиОтчета.КоличествоНУ.Использование 	= Истина;
				ДанныеОтчета.ПоказателиОтчета.КоличествоПР.Использование 	= Истина;
			Иначе
				ДанныеОтчета.ПоказателиОтчета.Количество.Использование 		= Ложь;
				ДанныеОтчета.ПоказателиОтчета.Количество.Значение      		= Ложь;
				ДанныеОтчета.ПоказателиОтчета.КоличествоНУ.Использование 	= Ложь;
				ДанныеОтчета.ПоказателиОтчета.КоличествоНУ.Значение      	= Ложь;
				ДанныеОтчета.ПоказателиОтчета.КоличествоПР.Использование 	= Ложь;
				ДанныеОтчета.ПоказателиОтчета.КоличествоПР.Значение      	= Ложь;
			КонецЕсли;
			
			Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Истина;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;		
			Иначе
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Использование = Ложь;
				ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение      = Ложь;	
			КонецЕсли;
			
			// Добавление группировок с соответствии с выбранным счетом	
			ДанныеОтчета.Группировка.Очистить();
						
			Если ВедётсяУчетПоПодразделениям Тогда
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				НоваяСтрока.Поле           = "Подразделение";
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = "Структурное подразделение";
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
				
				НоваяСтрока.Оформление  = Новый НастройкаОформления();
				Шрифт = НоваяСтрока.Оформление["Шрифт"];
				Шрифт.Использование = Истина;
				НоваяСтрока.ПоУмолчанию  = Истина;
				
				НастройкиФормы.Вставить("ДоступностьПодразделения", Истина);
			Иначе
				НастройкиФормы.Вставить("ДоступностьПодразделения", Ложь);	
			КонецЕсли;
		
			
			Для Индекс = 1 По КоличествоСубконто Цикл
				НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
				Поле = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Ложь;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
				
				НоваяСтрока.Оформление  = Новый НастройкаОформления();
				Шрифт = НоваяСтрока.Оформление["Шрифт"];
				Шрифт.Использование = Истина;
				НоваяСтрока.ПоУмолчанию  = Истина;
			КонецЦикла;	
			
			// Обработка дополнительных полей
			СтандартныеОтчеты.ЗаполнитьДополнительныеПоляПоУмолчанию(ЭтотОбъект);
			
			Если Не РежимРасшифровки Тогда
				СтандартныеОтчеты.ОбработатьОтборПриСменеСчета(СохраненныйСчет, Счет, КомпоновщикНастроек);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СохраненныйСчет = Счет;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект, "Налоговый");
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	СтрокаГруппировкиСчет = ДанныеОтчета.Группировка.Найти(Новый ПолеКомпоновкиДанных("Счет"), "Поле");
	Если НЕ СтрокаГруппировкиСчет = Неопределено Тогда
		ИспользованиеСчета = СтрокаГруппировкиСчет.Использование;
		СтрокаГруппировкиСчет.Использование = Истина;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);	
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Если ВыводитьПолностью Тогда
		
		СтрокаГруппировкиСчет.Использование = ?(ИспользованиеСчета, Истина, Ложь);
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	КорСчетаВсе = Новый СписокЗначений;
	
	// Корректировка запроса для группировка по кор. счетам
	ИсходныйТекстЗапроса = МакетКомпоновки.НаборыДанных.Обороты.Запрос;
	КонечныйТекстЗапроса = "";
	ЗавершающаяЧастьЗапроса = ") КАК НалоговыйОбороты";
	ПозицияКорсчета = Найти(ИсходныйТекстЗапроса, ", " + ЗавершающаяЧастьЗапроса);
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	
	// Поиск условия по кор. счету
	Индекс = СтрДлина(ПостояннаяЧастьЗапроса);
	Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1); 
	УсловиеКорСчета = "";
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1);		
		Если Символ = "," Тогда
			УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, Индекс + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос-объединение для детализации корсчетов
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.ГруппировкаКор Цикл 
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			КорСчетаВсе.Добавить(СтрокаТаблицы.Счет);
			
			Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
				ТекстУсловияКорСчета = " И КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			Иначе
				ТекстУсловияКорСчета = " КорСчет В ИЕРАРХИИ(&КорСчет" + Индекс + ")";
			КонецЕсли;
			
			//Добавим значение корсчета
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСчет" + Индекс;
			НовоеЗначение.Значение = СтрокаТаблицы.Счет;
						
			//Добавим значение корсубконто
			СписокКорСубконто = Новый СписокЗначений;
			
			ЕстьПодразделение = Ложь;
			Для Каждого ВидКорСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если ВидКорСубконто.Пометка И ТипЗнч(ВидКорСубконто.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые") Тогда
					СписокКорСубконто.Добавить(ВидКорСубконто.Значение); 
				Иначе
					ЕстьПодразделение = Истина;
				КонецЕсли;
			КонецЦикла;
						
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСубконто" + Индекс;
			НовоеЗначение.Значение = СтрокаТаблицы.ПоСубконто;			
			
			Если СписокКорСубконто.Количество() = 0 Тогда 
				ТекстУсловияКорСубконто = "";                 
				НачальныйИндексКор = 0;
			Иначе
				ТекстУсловияКорСубконто = "&КорСубконто" + Индекс;
				НачальныйИндексКор = СписокКорСубконто.Количество();
			КонецЕсли;
			
			ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
			
			Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл
				НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "НалоговыйОбороты.КорСубконто" + ИндексКор);
				Пока НачалоСтроки <> 0 Цикл
					ВременныйТекст = Сред(ПромежуточныйТекстЗапроса, НачалоСтроки);
					КонецСтроки = Найти(ВременныйТекст, " КАК ");
					СтрокаЗамены = Сред(ВременныйТекст, 1, КонецСтроки - 1) + " КАК "; 
					ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаЗамены, "NULL КАК ");
					НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "НалоговыйОбороты.КорСубконто" + ИндексКор);
				КонецЦикла;
			КонецЦикла;
			
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " " + ПромежуточныйТекстЗапроса + " " + ТекстУсловияКорСчета + ", " + ТекстУсловияКорСубконто + ЗавершающаяЧастьЗапроса;
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
					
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Индекс > 1 Тогда 
		КонечныйТекстЗапроса = Сред(КонечныйТекстЗапроса, 0, СтрДлина(КонечныйТекстЗапроса) - 16);
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "НалоговыйОбороты.КорСубконто" + Индекс + " КАК", "NULL КАК");
	КонецЦикла;
	
	Если Индекс > 1 Тогда
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		Иначе
			ТекстУсловияКорСчета = " КорСчет НЕ В ИЕРАРХИИ(&КорСчетВсе)";
		КонецЕсли;
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;	
		
		ИсходныйТекстЗапроса = ПостояннаяЧастьЗапроса + ТекстУсловияКорСчета + ЗавершающаяЧастьЗапроса;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КонечныйТекстЗапроса) Тогда
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + КонечныйТекстЗапроса;
	Иначе
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса;
	КонецЕсли;
	
	КонечныйТекстЗапроса = СокрЛП(СтрЗаменить(КонечныйТекстЗапроса, "РАЗРЕШЕННЫЕ", ""));
	КонечныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(КонечныйТекстЗапроса, 8); 
	
	МакетКомпоновки.НаборыДанных.Обороты.Запрос = КонечныйТекстЗапроса;
	
	
	
	// Обработка макета компоновки для вывода
	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
		
	КолонкаКорСчета = 1;
	Для Каждого СтрокаМакета Из МакетШапкиОтчета.Макет Цикл
		КолонкаМакета = 0;
		Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
			Если Ячейка.Элементы.Количество() = 1 Тогда
				Если ТипЗнч(Ячейка.Элементы[0].Значение) = Тип("Строка") 
					И ВРег(Строка(Ячейка.Элементы[0].Значение)) = "КОР. СЧЕТ" Тогда 
					КолонкаКорСчета = КолонкаМакета;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			КолонкаМакета = КолонкаМакета + 1;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоГруппировок = 0 + ?(Периодичность > 0, 1, 0);
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл
		Если Группировка.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОсновныхГруппировок = КоличествоГруппировок;
	
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = 0;
			Для Каждого Субконто Из СтрокаГруппировки.ПоСубконто Цикл
				Если Субконто.Пометка Тогда
					КоличествоКорСубконто = КоличествоКорСубконто + 1;
				КонецЕсли;
			КонецЦикла;
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, КоличествоКорГруппировок);
	ДанныеОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 3 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	// Форматирование шапки таблицы
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(ИндексКолонки = 0, Ложь, Истина), Истина);
			
		КонецЦикла;
	КонецЦикла;
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	КоличествоКолонок = МакетШапкиОтчета.Макет[0].Ячейки.Количество();
	МаксимальныйИндексКорКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл
		Если КоличествоОсновныхГруппировок > 1 Тогда
			Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
				ЯчейкаПриемник = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
				ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоОсновныхГруппировок + ИндексСтроки - 1].Ячейки[ИндексКолонки];
				
				ЯчейкаПриемник.Элементы.Очистить();
				Для Каждого Элемент Из ЯчейкаИсточник.Элементы Цикл
					НовыйЭлемент = ЯчейкаПриемник.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
					Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
					ЗаполнитьЗначенияСвойств(ЯчейкаПриемник.Оформление.Элементы[Индекс], Элемент);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл 
		ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоКорГруппировок - 1].Ячейки[ИндексКолонки];
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
				Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
				ЗаполнитьЗначенияСвойств(Ячейка.Оформление.Элементы[Индекс], Элемент);
			КонецЦикла;
		КонецЦикла;
		Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
		КонецЦикла;
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл 
		Для ИндексСтроки = КоличествоОсновныхГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
		
	МакетГруппировкиСчетЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Заголовок");
	МакетГруппировкиСчетПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Подвал");
	
	МакетГруппировкиСубконтоЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Заголовок");
	МакетГруппировкиСубконтоПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Подвал");
	
	МакетГруппировкиПодразделениеЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Заголовок");
	МакетГруппировкиПодразделениеПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Подвал");

	МакетГруппировкиОрганизацияЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Заголовок");
	МакетГруппировкиОрганизацияПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Подвал");

	//МакетГруппировкиВалютаЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Заголовок");
	//МакетГруппировкиВалютаПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Подвал");

	МакетГруппировкиПериодЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Заголовок");
	МакетГруппировкиПериодПодвал    = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Подвал");

	
	МакетГруппировкиКорЗаголовок = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Кор", , "Заголовок");

	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	//
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	//
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		МассивДляУдаления.Очистить();
		Если МакетГруппировкиСчетЗаголовок.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияЗаголовок.Найти(Макет) <> Неопределено
			//ИЛИ МакетГруппировкиВалютаЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = КоличествоПоказателей По Макет.Макет.Количество() - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);	
			КонецЦикла;
			
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = ТиповыеОтчеты.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			ПараметрШрифт = ТиповыеОтчеты.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Шрифт");
			Ячейка01 = Макет.Макет[0].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Начальное сальдо";
			ТиповыеОтчеты.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			ТиповыеОтчеты.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Шрифт", ПараметрШрифт.Значение);
			ТиповыеОтчеты.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		КонецЕсли;
		
		Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияПодвал.Найти(Макет) <> Неопределено
			//ИЛИ МакетГруппировкиВалютаПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодПодвал.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = ТиповыеОтчеты.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			ПараметрШрифт = ТиповыеОтчеты.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Шрифт");
			
			// Область итога "Оборот"
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей].Ячейки Цикл
				ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			ЯчейкаN1 = Макет.Макет[КоличествоПоказателей].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = ЯчейкаN1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Оборот";
			ТиповыеОтчеты.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			ТиповыеОтчеты.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Шрифт", ПараметрШрифт.Значение);
			ТиповыеОтчеты.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		
			Для Индекс = 0 По Макет.Макет.Количество() - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			// Область итога "Конечное сальдо"
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей * 2].Ячейки Цикл
				ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			Ячейка2N1 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка2N1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = "Конечное сальдо";
			ТиповыеОтчеты.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			ТиповыеОтчеты.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Шрифт", ПараметрШрифт.Значение);
			ТиповыеОтчеты.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
			
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
				Для ИндексСтроки = КоличествоПоказателей * 2 + 1 По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если МакетГруппировкиКорЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Для Индекс = КоличествоПоказателей * 2 По КоличествоПоказателей * 3 - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			
			КоличествоКолонок = Макет.Макет[0].Ячейки.Количество();
			МаксимальныйИндексКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
			Для ИндексКолонки = 0 По МаксимальныйИндексКолонки Цикл
				Ячейка = Макет.Макет[КоличествоПоказателей].Ячейки[ИндексКолонки];
				Ячейка01 = Макет.Макет[0].Ячейки[ИндексКолонки];
				Для Каждого Элемент Из Ячейка01.Элементы Цикл
					НовыйЭлемент = Ячейка.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из Ячейка01.Оформление.Элементы Цикл
					Индекс = Ячейка01.Оформление.Элементы.Индекс(Элемент);
					Приемник = Ячейка.Оформление.Элементы[Индекс];
					ЗаполнитьЗначенияСвойств(Приемник, Элемент);
				КонецЦикла;
				ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		//
		Для Каждого Элемент Из МассивДляУдаления Цикл
			Макет.Макет.Удалить(Элемент);
		КонецЦикла;
	//	
	КонецЦикла;
	
	Если Не ПоСубсчетам И ФормироватьДиаграмму Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Если ТипЗнч(Макет.Макет) = Тип("МакетГруппировкиДиаграммыОбластиКомпоновкиДанных")
				ИЛИ ТипЗнч(Макет.Макет) = Тип("МакетРесурсаДиаграммыОбластиКомпоновкиДанных") Тогда
				Для Каждого Параметр Из Макет.Параметры Цикл
					Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
						ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();	
						ВыражениеПоля.Поле      = "Счет";
						ВыражениеПоля.Выражение = "&Счет";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт

	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ФормироватьДиаграмму Тогда
		СтандартныеОтчеты.ДобавитьДиаграммуВСтандартныеОтчеты(ЭтотОбъект);
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Счет"         , Счет);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(КонецПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
			
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("Количество");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("КоличествоНУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("КоличествоПР");
	МассивПоказателей.Добавить("ВР");
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Индекс = 1 По 3 Цикл
			Если Индекс = 1 Тогда
					ЗначениеПодстановки = "НачальныйОстаток";
				ИначеЕсли Индекс = 2 Тогда 
					ЗначениеПодстановки = "Оборот";
				Иначе
					ЗначениеПодстановки = "КонечныйОстаток";
				КонецЕсли;
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
					ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива + ЗначениеПодстановки);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	ГруппаДт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДт.Заголовок     = "Дебет";
	ГруппаДт.Использование = Истина;
	ГруппаДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаКт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаКт.Заголовок     = "Кредит";
	ГруппаКт.Использование = Истина;
	ГруппаКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;	
	
	//МассивПоказателей = Новый Массив;
	//МассивПоказателей.Добавить("БУ");
	//МассивПоказателей.Добавить("Количество");
	//МассивПоказателей.Добавить("НУ");
	//МассивПоказателей.Добавить("КоличествоНУ");
	//МассивПоказателей.Добавить("ПР");
	//МассивПоказателей.Добавить("КоличествоПР");
	//МассивПоказателей.Добавить("ВР");
		
	МассивПоказателейДоп = Новый Массив;
	//МассивПоказателейДоп.Добавить("Количество");
	
	ВидОстатков = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатков + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатков + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПоказателейДоп Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);
  
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
			
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Счет") Тогда 
												
				Если Не ПоСубсчетам Тогда
					ЗначениеОтбора = ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
					ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
					ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				КонецЕсли;
				
			КонецЕсли;
			
			СтандартныеОтчеты.ДобавитьОформлениеГруппировки(ПолеВыбраннойГруппировки, Структура, , ИспользоватьОформлениеГруппировок);
		КонецЕсли;
	КонецЦикла;
	
	// Период
	Если Периодичность > 0 Тогда
		СтандартныеОтчеты.ДобавитьГруппировкуПоПериоду(ЭтотОбъект, Структура);
		СтандартныеОтчеты.ДобавитьОформлениеГруппировки( , Структура, КомпоновщикНастроек, ИспользоватьОформлениеГруппировок);
		ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
	КонецЕсли;
		
	// Кор счет
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");	
	Если ПоСубсчетамКорСчетов И ДанныеПоКорПодразделам Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли ПоСубсчетамКорСчетов Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ИначеЕсли ДанныеПоКорПодразделам Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	КонецЕсли;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор"               , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах);  // ОтдельноИТолькоВИтогах
	
	//КорСубконто 
	КоличествоКорГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = 0;
			Для Каждого Субконто Из СтрокаГруппировки.ПоСубконто Цикл
				Если Субконто.Пометка Тогда
					КоличествоКорСубконто = КоличествоКорСубконто + 1;
				КонецЕсли;
			КонецЦикла;
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = 1 По КоличествоКорГруппировок Цикл 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСубконто" + Индекс);		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат, "Налоговой");
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Анализ счета (налоговый учет) " + Счет + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета(,,,,, Ложь, Ложь, Истина, Истина);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	ВыводитьКолонкуСчет = Ложь;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоСубсчетам ИЛИ Периодичность > 0 ИЛИ КоличествоГруппировок > 0 Тогда 
		ВыводитьКолонкуСчет = Истина;
	КонецЕсли;
	
	Если ФормироватьДиаграмму Тогда
		СтандартныеОтчеты.ОбработкаРезультатаОтчетаСДиаграммой(ЭтотОбъект, Результат);
	КонецЕсли;
	
	СтандартныеОтчеты.ОбработкаИзмененияНастроекДиаграммы(ЭтотОбъект, Результат, ДанныеОтчета.ВысотаШапки);
	
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	НомерСтрокиШапки = 183 + ВысотаЗаголовка;
	
	Если Не ВыводитьКолонкуСчет Тогда
		КоличествоКолонок = Результат.ШиринаТаблицы;
		ШиринаКолонок = Новый Массив;
		Для Парам = 1 По КоличествоКолонок Цикл
			ТекущаяОбласть = Результат.Область( НомерСтрокиШапки, Парам, Результат.ВысотаТаблицы, Парам);
			ШиринаКолонок.Добавить(ТекущаяОбласть.ШиринаКолонки);
		КонецЦикла;
		Результат.УдалитьОбласть(Результат.Область( НомерСтрокиШапки, 1, Результат.ВысотаТаблицы, 1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Для Индекс = 1 По КоличествоКолонок - 1 Цикл
			ТекущаяОбласть = Результат.Область( НомерСтрокиШапки, Индекс, Результат.ВысотаТаблицы, Индекс);
			ТекущаяОбласть.ШиринаКолонки = ШиринаКолонок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	ОбработкаИзмененияСчета(РежимРасшифровки);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//Если СохранятьНастройкуОтчета Тогда
		//сохраним список структурных единиц
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

СохраненныйСчет = ПланыСчетов.Типовой.ПустаяСсылка();

ОтображатьОформление = Ложь;

#КонецЕсли