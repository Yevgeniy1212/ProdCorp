////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит список структурных единиц, по которым стоится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура формирует отчет в соответствии с переданными параметрами
//
Процедура СформироватьОтчетПоПараметрам(ДокументРезультат, ДатаФормирования, ВыбОрганизация, ВыбФизлицо) Экспорт

	ДатаАктуальности = ДатаФормирования;
	
	мСписокСтруктурныхЕдиниц.Очистить();
	Если ТипЗнч(ВыбОрганизация) = Тип("СписокЗначений") Тогда
		мСписокСтруктурныхЕдиниц.ЗагрузитьЗначения(ВыбОрганизация.ВыгрузитьЗначения());
	Иначе
		мСписокСтруктурныхЕдиниц.Добавить(ВыбОрганизация);
	КонецЕсли;
	
	ФизЛицо = ВыбФизЛицо;
	
	СформироватьОтчет(ДокументРезультат, Ложь);
	

КонецПроцедуры // СформироватьОтчетПоПараметрам()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки) Экспорт

	Если мСписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		Сообщить("Не указаны организации, по которым формировать отчет!", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Сообщить("Не указан работник, по которому формировать отчет", СтатусСообщения.Важное);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	  
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
	Запрос.УстановитьПараметр("Физлицо",			Физлицо);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ПустаяСтрана",		Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЮрАдресФизЛица",		Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ФактАдресФизЛица",	Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
	Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ТипТелефон",			Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ПриемНаРаботу",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("Увольнение",			Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	
	// найдем организации, по которым формировать отчет
	Если мСписокСтруктурныхЕдиниц.Количество() = 1 Тогда
		Запрос.УстановитьПараметр("СписокГоловныхОрганизаций", ОбщегоНазначения.ГоловнаяОрганизация(мСписокСтруктурныхЕдиниц[0].Значение));
	Иначе
		// составим список всех головных организаций по списку структурных единиц
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ 
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&СписокСтруктурныхЕдиниц)
		|	И НЕ (Организации.Наименование ЕСТЬ NULL) // для корректной работы RLS
		|";
		
		Запрос.УстановитьПараметр("СписокГоловныхОрганизаций", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГоловнаяОрганизация"));
	КонецЕсли;
	
	МассивВУ = Новый Массив;
	МассивВУ.Добавить(Перечисления.ОтношениеКВоинскойОбязанности.Призывник);
	МассивВУ.Добавить(Перечисления.ОтношениеКВоинскойОбязанности.Военнообязанный);
	Запрос.УстановитьПараметр("ПодлежитВУ",			МассивВУ);
	
	МассивВУ = Новый Массив;
	МассивВУ.Добавить(Перечисления.ОтношениеКВоинскомуУчету.СнятПоВозрасту);
	МассивВУ.Добавить(Перечисления.ОтношениеКВоинскомуУчету.СнятПоСостояниюЗдоровья);
	Запрос.УстановитьПараметр("СнятСВУ",			МассивВУ);
	
	МассивСостоитНаВУ = Новый Массив;
	МассивСостоитНаВУ.Добавить(Перечисления.ОтношениеКВоинскомуУчету.Встает);
	МассивСостоитНаВУ.Добавить(Перечисления.ОтношениеКВоинскомуУчету.Состоит);
	Запрос.УстановитьПараметр("СостоитНаВУ",МассивСостоитНаВУ);
	
    СписокОфицерскихЗваний	=	Новый СписокЗначений;
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.МладшийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.Лейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.СтаршийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.Капитан);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.Майор);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.Подполковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.Полковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.ГенералМайор);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.ГенералЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.ГенералПолковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.ГенералАрмии);
	СписокОфицерскихЗваний.Добавить(Справочники.ВоинскиеЗвания.МаршалРеспубликиКазахстан);
	Запрос.УстановитьПараметр("Офицеры",			СписокОфицерскихЗваний);
	
	Запрос.УстановитьПараметр("Призывник",			Перечисления.ОтношениеКВоинскойОбязанности.Призывник);
	Запрос.УстановитьПараметр("Военнообязанный",	Перечисления.ОтношениеКВоинскойОбязанности.Военнообязанный);
	Запрос.УстановитьПараметр("ВидТелефон",			Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
    Запрос.УстановитьПараметр("ПустаяДата",			'00010101');
    Запрос.УстановитьПараметр("ТипПоказателяТарифныйРазряд", Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд);
    
    МассивВидыСтажи = Новый Массив;
    МассивВидыСтажи.Добавить(Справочники.ВидыСтажа.НепрерывныйСтаж);
    МассивВидыСтажи.Добавить(Справочники.ВидыСтажа.ОбщийСтаж);
    МассивВидыСтажи.Добавить(Справочники.ВидыСтажа.СтажНаНадбавкуЗаВыслугуЛет);
    Запрос.УстановитьПараметр("ВидыСтажа", МассивВидыСтажи);
    
	Запрос.Текст	=	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ФизическиеЛица.ОсновноеИзображение КАК ОсновноеИзображение,
	            	 	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,";
						Если мСписокСтруктурныхЕдиниц.Количество() = 1 Тогда
						     Запрос.Текст = Запрос.Текст + "
								 |	ВЫРАЗИТЬ(РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолноеОрганизации,";
						Иначе
						     Запрос.Текст = Запрос.Текст + "
						  		 |	ВЫРАЗИТЬ(РаботникиОрганизацииСрезПоследних.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолноеОрганизации,";
						КонецЕсли;
						    Запрос.Текст = Запрос.Текст + "
	            	 	|	ФизическиеЛица.Наименование КАК Представление,
	            	 	|	ВЫБОР 
	            	 	|		КОГДА ФизическиеЛица.ДатаРождения = &ПустаяДата 
	            	 	|			ТОГДА """" 
	            	 	|		ИНАЧЕ ГОД(ФизическиеЛица.ДатаРождения) 
	            	 	|	КОНЕЦ КАК ГодРождения,
	            	 	|	ВЫБОР 
	            	 	|		КОГДА ФизическиеЛица.ДатаРождения = &ПустаяДата 
	            	 	|			ТОГДА """" 
	            	 	|		ИНАЧЕ МЕСЯЦ(ФизическиеЛица.ДатаРождения) 
	            	 	|	КОНЕЦ КАК МесяцРождения,
	            	 	|	ВЫБОР 
	            	 	|		КОГДА ФизическиеЛица.ДатаРождения = &ПустаяДата 
	            	 	|			ТОГДА """" 
	            	 	|		ИНАЧЕ ДЕНЬ(ФизическиеЛица.ДатаРождения) 
	            	 	|	КОНЕЦ КАК ЧислоРождения,
	            	 	|	ФизическиеЛица.МестоРождения,
	            	 	|	ФизическиеЛица.Национальность,
	            	 	|	ПоследнееМестоРаботы.Организация КАК ПоследнееМестоРаботыОрганизация,
	            	 	|	ПоследнееМестоРаботы.ДатаОкончания КАК ПоследнееМестоРаботыДатаУвольнения,
	            	 	|	ПоследнееМестоРаботы.Должность КАК ПоследнееМестоРаботыДолжность,
	            	 	|	ПоследнееМестоРаботы.ОснованиеУвольнения КАК ПоследнееМестоРаботыОснованиеУвольнения,
	            	 	|	ФИОФизЛицСрезПоследних.Фамилия,
	            	 	|	ФИОФизЛицСрезПоследних.Имя,
	            	 	|	ФИОФизЛицСрезПоследних.Отчество,
	            	 	|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Наименование КАК СемейноеПоложение,
	            	 	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ВидДокумента,
	            	 	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
	            	 	|	ВЫБОР 
	            	 	|		КОГДА (ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи) ЕСТЬ NULL  
	            	 	|			ТОГДА &ПустаяДата 
	            	 	|		ИНАЧЕ ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи 
	            	 	|	КОНЕЦ КАК ДокументДатаВыдачи,
	            	 	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	            	 	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	            	 	|	КонтактнаяИнформацияАдрес.Представление КАК ДомашнийАдрес,
	            	 	|	КонтактнаяИнформацияТелефон.Представление КАК Телефон,
	            	 	|	ВоинскийУчетСрезПоследних.ГруппаУчета,
	            	 	|	ВоинскийУчетСрезПоследних.КатегорияУчета,
	            	 	|	ВоинскийУчетСрезПоследних.Звание.Наименование КАК ВоинскоеЗвание,
	            	 	|	ВоинскийУчетСрезПоследних.Состав,
	            	 	|	ВоинскийУчетСрезПоследних.ВУС,
	            	 	|	ВоинскийУчетСрезПоследних.Годность,
	            	 	|	ВоинскийУчетСрезПоследних.Военкомат.Наименование КАК НаименованиеВоенкомата
	            	 	|ИЗ
	            	 	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	            	 	|
	            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	            	 	|							ТрудоваяДеятельность.Ссылка,
	            	 	|							ТрудоваяДеятельность.Организация,
	            	 	|							ТрудоваяДеятельность.ДатаОкончания,
	            	 	|							ТрудоваяДеятельность.Должность,
	            	 	|							ТрудоваяДеятельность.ОснованиеУвольнения.Наименование КАК ОснованиеУвольнения
	            	 	|						  ИЗ 
	            	 	|							Справочник.ФизическиеЛица.ТрудоваяДеятельность КАК ТрудоваяДеятельность
	            	 	|							ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	            	 	|													Ссылка,
	            	 	|													МАКСИМУМ(ДатаОкончания) КАК ДатаОкончания
	            	 	|											  ИЗ 
	            	 	|													Справочник.ФизическиеЛица.ТрудоваяДеятельность
	            	 	|											  ГДЕ 
	            	 	|													Ссылка = &ФизЛицо
	            	 	|											  СГРУППИРОВАТЬ ПО 
	            	 	|													Ссылка) КАК ПоследнееМестоРаботы
						|							ПО ТрудоваяДеятельность.Ссылка = ПоследнееМестоРаботы.Ссылка 
						|								И ТрудоваяДеятельность.ДатаОкончания = ПоследнееМестоРаботы.ДатаОкончания
						|						  ГДЕ 
						|								ТрудоваяДеятельность.Ссылка = &ФизЛицо) КАК ПоследнееМестоРаботы
	            	 	|		ПО ФизическиеЛица.Ссылка = ПоследнееМестоРаботы.Ссылка
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	            	 	|				&ДатаАктуальности, 
	            	 	|				ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	            	 	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	            	 	|				&ДатаАктуальности, 
	            	 	|				ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	            	 	|		ПО ФизическиеЛица.Ссылка = ФизическиеЛица.Ссылка
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВоинскийУчет.СрезПоследних(
	            	 	|				&ДатаАктуальности, 
	            	 	|				ФизЛицо = &ФизЛицо) КАК ВоинскийУчетСрезПоследних
	            	 	|		ПО ФизическиеЛица.Ссылка = ВоинскийУчетСрезПоследних.Физлицо
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
	            	 	|		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформацияАдрес.Объект 
	            	 	|			И (КонтактнаяИнформацияАдрес.Тип = &Адрес) 
	            	 	|			И (КонтактнаяИнформацияАдрес.Вид = &ЮрАдресФизЛица)
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	            	 	|		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформацияТелефон.Объект 
	            	 	|			И (КонтактнаяИнформацияТелефон.Тип = &ТипТелефон) 
	            	 	|			И (КонтактнаяИнформацияТелефон.Вид = &ВидТелефон)
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	            	 	|							&ДатаАктуальности, 
	            	 	|							Сотрудник.ФизЛицо = &ФизЛицо 
	            	 	|							И Организация В (&СписокГоловныхОрганизаций)
	            	 	|							И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	            	 	|							И ОбособленноеПодразделение В (&СписокСтруктурныхЕдиниц)) КАК РаботникиОрганизацииСрезПоследних
	            	 	|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо 
	            	 	|
	            	 	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(
	            	 	|				&ДатаАктуальности, 
	            	 	|				ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
	            	 	|		ПО СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
	            	 	|
	            	 	|ГДЕ
	            	 	|	ФизическиеЛица.Ссылка = &Физлицо
						|УПОРЯДОЧИТЬ ПО
						|	РаботникиОрганизацииСрезПоследних.Период УБЫВ";
                        
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();

	ДокументРезультат.Очистить();
 	Макет 					= 	ПолучитьМакет("Т2");
	ПерваяСтраницаТ2		= 	Макет.ПолучитьОбласть("ПерваяСтраницаТ2");
	ВоинскийУчет			= 	Макет.ПолучитьОбласть("ВоинскийУчет");
	ШапкаНазначения 		= 	Макет.ПолучитьОбласть("ШапкаНазначения");
	СтрокаНазначения		=	Макет.ПолучитьОбласть("СтрокаНазначения");
	ШапкаОтпуска	 		= 	Макет.ПолучитьОбласть("ШапкаОтпуска");
	СтрокаОтпуска			=	Макет.ПолучитьОбласть("СтрокаОтпуска");
	ДополнительныеСведения	=	Макет.ПолучитьОбласть("ДополнительныеСведения");
	
	Если ВыборкаРезультата.Следующий() тогда
		
		Если ВыборкаРезультата.ТабельныйНомер = NULL Тогда
			Сообщить("Сотрудник не работает в выбранной организации!");
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	
		ПерваяСтраницаТ2.Параметры.Заполнить(ВыборкаРезультата);
		
		// Фотография
		ЕстьФотография = ЗначениеЗаполнено(ВыборкаРезультата.ОсновноеИзображение);
		Если ЕстьФотография И ВыборкаРезультата.ОсновноеИзображение <> Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка() Тогда
			ПерваяСтраницаТ2.Рисунки["Фотография"].Картинка = ВыборкаРезультата.ОсновноеИзображение.Хранилище.Получить();
		Иначе	
			ПерваяСтраницаТ2.Рисунки["Фотография"].Картинка = Новый Картинка;
		КонецЕсли; 
		
		Если ВыборкаРезультата.Фамилия = NULL тогда
			ФИО		=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ВыборкаРезультата.Представление, " ");
			Если ФИО.Количество()	>	0	тогда
				Фамилия	=	ФИО[0];
			КонецЕсли;
			Если ФИО.Количество()	>	1	тогда
				Имя		=	ФИО[1];
			КонецЕсли;
			Если ФИО.Количество()	>	2	тогда
				Отчество=	ФИО[2];
			КонецЕсли;
			// ФИО
			ПерваяСтраницаТ2.Параметры.Фамилия					=	Фамилия;
			ПерваяСтраницаТ2.Параметры.Имя						=	Имя;
			ПерваяСтраницаТ2.Параметры.Отчество         		=	Отчество;
		КонецЕсли;
		
		ПерваяСтраницаТ2.Параметры.НаименованиеОрганизации	= ВыборкаРезультата.НаименованиеПолноеОрганизации;
		
		ПерваяСтраницаТ2.Параметры.МестоРождения			= ПроцедурыУправленияПерсоналом.ПредставлениеМестаРожденияКраткое(ВыборкаРезультата.МестоРождения);
		ПерваяСтраницаТ2.Параметры.ДатаАктуальности			= ДатаАктуальности;
		
		// ПАСПОРТ
		Если ВыборкаРезультата.ВидДокумента <> Null Тогда
			ПерваяСтраницаТ2.Параметры.ДокументНомер = ?(ВыборкаРезультата.ДокументСерия<>""," сер. "+СокрЛП(ВыборкаРезультата.ДокументСерия),"") 
				+ ?(ВыборкаРезультата.ДокументНомер<>""," "+СокрЛП(ВыборкаРезультата.ДокументНомер),"");
			ПерваяСтраницаТ2.Параметры.ВидДокумента = "Документ, удостоверяющий личность: " + ВыборкаРезультата.ВидДокумента;
			ПерваяСтраницаТ2.Параметры.ДокументКемВыдан = СокрЛП(ВыборкаРезультата.ДокументКемВыдан);
			ПерваяСтраницаТ2.Параметры.ДокументДатаВыдачи = Формат(ВыборкаРезультата.ДокументДатаВыдачи,"ДЛФ=D");
		КонецЕсли;
		
		//Последнее место работы
		Если ВыборкаРезультата.ПоследнееМестоРаботыОрганизация <> Null Тогда
			ПерваяСтраницаТ2.Параметры.ПоследнееМестоРаботы = СокрЛП(ВыборкаРезультата.ПоследнееМестоРаботыОрганизация) 
				+ ", " + СокрЛП(ВыборкаРезультата.ПоследнееМестоРаботыДолжность);
		КонецЕсли;
		
		// АДРЕС
		Если ЗначениеЗаполнено(ВыборкаРезультата.ДомашнийАдрес) Тогда
			ПерваяСтраницаТ2.Параметры.ДомашнийАдрес1 = Сред(ВыборкаРезультата.ДомашнийАдрес, 1, 30);
			ПерваяСтраницаТ2.Параметры.ДомашнийАдрес2 = Сред(ВыборкаРезультата.ДомашнийАдрес, 31);
		КонецЕсли;
		ПерваяСтраницаТ2.Параметры.Телефон = ВыборкаРезультата.Телефон;
	
		ВоинскийУчет.Параметры.Заполнить(ВыборкаРезультата);
		
		// Воинский учет 
		Если ЗначениеЗаполнено(ВыборкаРезультата.Состав) Тогда
			Если ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.РядовойСостав Тогда
				ВоинскийУчет.Параметры.Состав = "солдаты или матросы";
			ИначеЕсли  ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.СержантскийИСтаршинскийСостав Тогда
				ВоинскийУчет.Параметры.Состав = "сержанты или старшины";
			ИначеЕсли ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.СоставПрапорщиковИМичманов Тогда
				ВоинскийУчет.Параметры.Состав = "прапорщики или мичманы";
			ИначеЕсли ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.МладшийОфицерскийСостав
				ИЛИ ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.СтаршийОфицерскийСостав
				ИЛИ ВыборкаРезультата.Состав = Справочники.СоставыВоеннослужащих.ВысшийОфицерскийСостав Тогда
				ВоинскийУчет.Параметры.Состав = "офицеры";
			Иначе
				ВоинскийУчет.Параметры.Состав = ВыборкаРезультата.Состав.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРезультата.Годность) Тогда
			Если ВыборкаРезультата.Годность = Перечисления.ГодностьКВоеннойСлужбе.Годен Тогда
				ВоинскийУчет.Параметры.Годность = "строевой";
			ИначеЕсли ВыборкаРезультата.Годность = Перечисления.ГодностьКВоеннойСлужбе.ГоденКНестроевой Тогда
				ВоинскийУчет.Параметры.Годность = "нестроевой";
			Иначе
				ВоинскийУчет.Параметры.Годность = "негоден";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	// ОБРАЗОВАНИЕ
	МассивВО = Новый Массив; //высшее образование
	МассивВО.Добавить(Справочники.ВидыОбразованияФизЛиц.АспирантураОрдинатураАдъюнктура);
	МассивВО.Добавить(Справочники.ВидыОбразованияФизЛиц.ВысшееОбразование);
	МассивВО.Добавить(Справочники.ВидыОбразованияФизЛиц.Докторантура);
	Запрос.УстановитьПараметр("ВысшееОбразование",МассивВО);
	
	Запрос.Текст	=	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					 	|	ФизическиеЛицаОбразование.ВидОбразования.Наименование КАК ВидОбразования,
					 	|	ВЫБОР 
					 	|		КОГДА ФизическиеЛицаОбразование.Специальность ССЫЛКА Справочник.КлассификаторСпециальностейПоОбразованию 
					 	|			ТОГДА ФизическиеЛицаОбразование.Специальность.Наименование 
					 	|		ИНАЧЕ ФизическиеЛицаОбразование.Специальность 
					 	|	КОНЕЦ КАК Специальность,
					 	|	ВЫБОР 
					 	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&ВысшееОбразование) 
					 	|			ТОГДА ФизическиеЛицаОбразование.УчебноеЗаведение.Наименование 
					 	|		ИНАЧЕ """" 
					 	|	КОНЕЦ КАК НазваниеВУЗа,
					 	|	ВЫБОР 
					 	|		КОГДА ФизическиеЛицаОбразование.ВидОбразования В (&ВысшееОбразование) 
					 	|			ТОГДА ФизическиеЛицаОбразование.ГодОкончания 
					 	|		ИНАЧЕ 0 
					 	|	КОНЕЦ КАК ГодОкончанияВУЗа,
					 	|	ВЫБОР 
					 	|		КОГДА НЕ (ФизическиеЛицаОбразование.ВидОбразования В (&ВысшееОбразование)) 
					 	|			ТОГДА ФизическиеЛицаОбразование.УчебноеЗаведение.Наименование 
					 	|		ИНАЧЕ """" 
					 	|	КОНЕЦ КАК НазваниеУчилища,
					 	|	ВЫБОР 
					 	|		КОГДА НЕ (ФизическиеЛицаОбразование.ВидОбразования В (&ВысшееОбразование)) 
					 	|			ТОГДА ФизическиеЛицаОбразование.ГодОкончания 
					 	|		ИНАЧЕ 0 
					 	|	КОНЕЦ КАК ГодОкончанияУчилища,
					 	|	ФизическиеЛицаОбразование.ГодОкончания КАК ГодОкончания,
					 	|	ФизическиеЛицаОбразование.Диплом КАК Диплом,
					 	|	ФизическиеЛицаОбразование.Квалификация КАК Квалификация,
					 	|	ФизическиеЛицаОбразование.ФормаОбучения КАК ФормаОбучения
					 	|ИЗ
					 	|	Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
					 	|
					 	|ГДЕ
					 	|	ФизическиеЛицаОбразование.Ссылка = &Физлицо
					 	|
					 	|УПОРЯДОЧИТЬ ПО
					 	|	ГодОкончания ВОЗР";
						 
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();

	ВидОбразования = "";
	НазваниеВУЗа = "";
	ГодОкончанияВуза = "";
	НазваниеУчилища = "";
	ГодОкончанияУчилища = "";
	Специальность = "";
	НомерДиплома1 = "";
	Квалификация = "";	
	КоличествоДипломов = 0;
	
	ОчноеОбучение	 = Ложь;
	ЗаочноеОбучение	 = Ложь;
	ВечернееОбучение = Ложь;

	Пока ВыборкаРезультата.Следующий()	Цикл
		ВидОбразования = ?(ВидОбразования <> "", ВидОбразования + "; ", "") + СокрЛП(ВыборкаРезультата.ВидОбразования);

		Если ЗначениеЗаполнено(ВыборкаРезультата.НазваниеВУЗа) Тогда
			НазваниеВУЗа = ?(НазваниеВУЗа <> "", НазваниеВУЗа + "; ", "") + СокрЛП(ВыборкаРезультата.НазваниеВУЗа);
			ГодОкончанияВУЗа = ?(ГодОкончанияВУЗа <> "", ГодОкончанияВУЗа + "; ", "") + Формат(ВыборкаРезультата.ГодОкончанияВУЗа,"ЧГ=0");
		КонецЕсли;

		Если ЗначениеЗаполнено(ВыборкаРезультата.НазваниеУчилища) Тогда
			НазваниеУчилища = ?(НазваниеУчилища <> "", НазваниеУчилища + "; ", "") + СокрЛП(ВыборкаРезультата.НазваниеУчилища);
			ГодОкончанияУчилища = ?(ГодОкончанияУчилища <> "", ГодОкончанияУчилища + "; ", "") + Формат(ВыборкаРезультата.ГодОкончанияУчилища,"ЧГ=0");
		КонецЕсли;
		
		Специальность = ?(Специальность <> "", Специальность + "; ", "") + СокрЛП(ВыборкаРезультата.Специальность);
		Квалификация = ?(Квалификация <> "", Квалификация + "; ", "") + СокрЛП(ВыборкаРезультата.Квалификация);
		
		Если ЗначениеЗаполнено(ВыборкаРезультата.Диплом) Тогда
			КоличествоДипломов = КоличествоДипломов + 1;
			
			Если КоличествоДипломов = 1 Тогда
				НомерДиплома1 = НомерДиплома1 + СокрЛП(ВыборкаРезультата.Диплом);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаРезультата.ФормаОбучения = Перечисления.ФормыОбученияФизЛиц.ОчноеОбучение Тогда
			ОчноеОбучение = Истина;
		ИначеЕсли ВыборкаРезультата.ФормаОбучения = Перечисления.ФормыОбученияФизЛиц.ЗаочноеОбучение 
			ИЛИ ВыборкаРезультата.ФормаОбучения = Перечисления.ФормыОбученияФизЛиц.ДистанционноеОбучение
			ИЛИ ВыборкаРезультата.ФормаОбучения = Перечисления.ФормыОбученияФизЛиц.Экстернат Тогда
			ЗаочноеОбучение = Истина;
		ИначеЕсли ВыборкаРезультата.ФормаОбучения = Перечисления.ФормыОбученияФизЛиц.ВечернееОбучение Тогда 
			ВечернееОбучение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОчноеОбучение Тогда
		ПерваяСтраницаТ2.Области.Дневное.Шрифт = Новый Шрифт("Arial", 9,,,, Истина);	
	КонецЕсли;
	
	Если НЕ ЗаочноеОбучение Тогда
		ПерваяСтраницаТ2.Области.Заочное.Шрифт = Новый Шрифт("Arial", 9,,,, Истина);	
	КонецЕсли;
	
	Если НЕ ВечернееОбучение Тогда
		ПерваяСтраницаТ2.Области.Вечернее.Шрифт = Новый Шрифт("Arial", 9,,,, Истина);	
	КонецЕсли;
	
	ПерваяСтраницаТ2.Параметры.ВидОбразования = ВидОбразования;
	ПерваяСтраницаТ2.Параметры.НазваниеВУЗа = НазваниеВУЗа;
	ПерваяСтраницаТ2.Параметры.ГодОкончанияВУЗа = ГодОкончанияВУЗа;
	ПерваяСтраницаТ2.Параметры.НазваниеУчилища = НазваниеУчилища;
	ПерваяСтраницаТ2.Параметры.ГодОкончанияУчилища = ГодОкончанияУчилища;
	ПерваяСтраницаТ2.Параметры.Специальность = Специальность;
	ПерваяСтраницаТ2.Параметры.НомерДиплома1 = НомерДиплома1;
	ПерваяСтраницаТ2.Параметры.Квалификация = Квалификация;
	
	// Профессии
	Запрос.Текст	=	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					 	|	ФизическиеЛицаПрофессии.Профессия.Наименование КАК Профессия
					 	|ИЗ
					 	|	Справочник.ФизическиеЛица.Профессии КАК ФизическиеЛицаПрофессии
					 	|
					 	|ГДЕ
					 	|	ФизическиеЛицаПрофессии.Ссылка = &Физлицо
					 	|
					 	|УПОРЯДОЧИТЬ ПО
					 	|	ФизическиеЛицаПрофессии.НомерСтроки";
						 
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();
	Профессия = "";
	Пока ВыборкаРезультата.Следующий()	Цикл
		Профессия = ?(Профессия <> "", Профессия + "; ", "") + ВыборкаРезультата.Профессия;
	КонецЦикла;
	ПерваяСтраницаТ2.Параметры.Профессия = Профессия;
	
	// СТАЖИ
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Стажи.ВидСтажа,
	|	" + ПроведениеРасчетов.СформироватьТекстЗапросаОСтаже("Стажи", "&ДатаАктуальности") + "
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК Стажи
	|ГДЕ
	|	Стажи.Ссылка = &ФизЛицо И
	|	Стажи.ВидСтажа В (&ВидыСтажа)
	|"; 
	
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата 	= 	РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		ИмяПараметраМакета = "";
		Если ВыборкаРезультата.ВидСтажа = Справочники.ВидыСтажа.ОбщийСтаж Тогда
			ИмяПараметраМакета = "ОбщийСтажРаботы";
		ИначеЕсли ВыборкаРезультата.ВидСтажа = Справочники.ВидыСтажа.НепрерывныйСтаж Тогда
			ИмяПараметраМакета = "НепрерывныйСтаж";
		ИначеЕсли ВыборкаРезультата.ВидСтажа = Справочники.ВидыСтажа.СтажНаНадбавкуЗаВыслугуЛет Тогда
			ИмяПараметраМакета = "СтажРаботыПоСпециальности";
		КонецЕсли;
			
		Если ИмяПараметраМакета <> "" Тогда
			СтрокаСтажа = "";
			Если ВыборкаРезультата.РазмерЛет <> 0 Тогда
				СтрокаСтажа = "" + ВыборкаРезультата.РазмерЛет + ?(ВыборкаРезультата.РазмерЛет <= 4, " г.", " л.");
			КонецЕсли;
			
			Если ВыборкаРезультата.РазмерМесяцев <> 0 Тогда
				Если СтрокаСтажа <> "" Тогда
					СтрокаСтажа = СтрокаСтажа + " ";
				КонецЕсли;
				
				СтрокаСтажа = СтрокаСтажа + ВыборкаРезультата.РазмерМесяцев + " м.";
			КонецЕсли;

			Если ВыборкаРезультата.РазмерДней <> 0 Тогда
				Если СтрокаСтажа <> "" Тогда
					СтрокаСтажа = СтрокаСтажа + " ";
				КонецЕсли;
				
				СтрокаСтажа = СтрокаСтажа + ВыборкаРезультата.РазмерДней + " дн.";
			КонецЕсли;
			
			ПерваяСтраницаТ2.Параметры[ИмяПараметраМакета] = СтрокаСтажа;			
		КонецЕсли;
	КонецЦикла;
	
	// СОСТАВ СЕМЬИ
	Запрос.Текст	=	"ВЫБРАТЬ ПЕРВЫЕ 4 РАЗРЕШЕННЫЕ
					 	|	ФизическиеЛицаСоставСемьи.Имя КАК Родственник,
					 	|	ФизическиеЛицаСоставСемьи.СтепеньРодства.Наименование КАК СтепеньРодства,
					 	|	ФизическиеЛицаСоставСемьи.ДатаРождения
					 	|ИЗ
					 	|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛицаСоставСемьи
					 	|
					 	|ГДЕ
					 	|	ФизическиеЛицаСоставСемьи.Ссылка = &Физлицо";
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();
	инд	=	0;
	Пока ВыборкаРезультата.Следующий()	Цикл
		инд	=	1	+	инд;
		ПерваяСтраницаТ2.Параметры["ЧленСемьи"+инд]	= "" + ВыборкаРезультата.СтепеньРодства + " " 
			+ СокрЛП(ВыборкаРезультата.Родственник) + ", " + Формат(ВыборкаРезультата.ДатаРождения, "ДФ=dd.MM.yyyy");;
	КонецЦикла;

	// выводим первую страницу
	ДокументРезультат.Вывести(ПерваяСтраницаТ2);
	ДокументРезультат.Вывести(ВоинскийУчет);

	// ПРИЕМ И ПЕРЕВОДЫ НА ДРУГУЮ РАБОТУ
	Запрос.Текст =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ДатыПриемовВОрганизации.Период) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|			РаботникиОрганизацийСрезПоследних.Организация,
	|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник.Физлицо = &Физлицо
	|						И Организация В (&СписокГоловныхОрганизаций)
	|						И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|						И ПричинаИзмененияСостояния = &ПриемНаРаботу) КАК РаботникиОрганизацийСрезПоследних
	|		СГРУППИРОВАТЬ ПО
	|			РаботникиОрганизацийСрезПоследних.Организация) КАК ДатыПриемовВОрганизации";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	ДатаПриема = Дата(1,1,1);
	Если ВыборкаРезультата.Следующий() Тогда
		ДатаПриема = ВыборкаРезультата.Период	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаПриема",ДатаПриема);
	
	Запрос.Текст	=	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоказателиПлановыхНачисленийРаботниковОрганизаций.ВидРасчета,
	|	ПоказателиПлановыхНачисленийРаботниковОрганизаций.Показатель1ТипПоказателя КАК Показатель1ТипПоказателя
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|		Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ГДЕ
	|			ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ГДЕ
	|			ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|			И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения <> НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисленияРаботниковОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|			ПО ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета = Показатели1.Ссылка
	|				И (Показатели1.НомерСтроки = 1)) КАК ПоказателиПлановыхНачисленийРаботниковОрганизаций
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	Работники.Должность.Наименование КАК Должность,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|	Работники.ТарифныйРазряд.Наименование КАК ТарифныйРазряд,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер,
	|	Работники.Период КАК ДатаПеревода,
	|	Работники.Сотрудник,
	|	Работники.Регистратор,
	|	Работники.Регистратор.Дата КАК ДатаПриказа,
	|	Работники.Регистратор.Номер КАК НомерПриказа,
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостояния = &Увольнение
	|			ТОГДА Работники.СтатьяЗаконаОТрудеРК.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОснованиеУвольнения,
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостояния = &Увольнение
	|			ТОГДА ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения < Работники.Период
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ИЛИ ПоказателиЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1Завершения
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Показатель1
	|			  КОНЕЦ
	|	КОНЕЦ КАК ТарифнаяСтавка,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения < Работники.Период
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ИЛИ ПоказателиЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|						ТОГДА РазмерТарифныхСтавок.Валюта.Наименование
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1Завершения.Наименование
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|					ТОГДА РазмерТарифныхСтавок.Валюта.Наименование
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1.Наименование
	|			  КОНЕЦ
	|	КОНЕЦ КАК ИмяВалюты,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения < Работники.Период
	|			ТОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ИЛИ ПоказателиЗавершения.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|						ТОГДА РазмерТарифныхСтавок.Валюта
	|					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1Завершения
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.Валюта1
	|			  КОНЕЦ
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							РаботникиОрганизации.Сотрудник,
	|							РаботникиОрганизации.Организация,
	|							РаботникиОрганизации.Период,
	|							МАКСИМУМ(ПлановыеНачисления.Период) КАК ПериодНачислений
	|						ИЗ
	|							РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|								ПО ПлановыеНачисления.Сотрудник.ФизЛицо = &ФизЛицо
	|									И РаботникиОрганизации.Организация = ПлановыеНачисления.Организация 
	|									И РаботникиОрганизации.Сотрудник = ПлановыеНачисления.Сотрудник 
	|									И ПлановыеНачисления.Период <= РаботникиОрганизации.Период
	|									И (ПлановыеНачисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО)
	|						ГДЕ
	|							РаботникиОрганизации.Организация В (&СписокГоловныхОрганизаций)
	|							И РаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|							И РаботникиОрганизации.Период МЕЖДУ &ДатаПриема И &ДатаАктуальности
	|						СГРУППИРОВАТЬ ПО
	|							РаботникиОрганизации.Сотрудник,
	|							РаботникиОрганизации.Организация,
	|							РаботникиОрганизации.Период) КАК ПлановыеНачисленияСрезПоследних
	|		ПО Работники.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
	|			И Работники.Организация = ПлановыеНачисленияСрезПоследних.Организация
	|			И Работники.Период = ПлановыеНачисленияСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО ПлановыеНачисленияРаботниковОрганизаций.Сотрудник.ФизЛицо = &ФизЛицо
	|			И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|			И ПлановыеНачисленияСрезПоследних.Организация = ПлановыеНачисленияРаботниковОрганизаций.Организация
	|			И ПлановыеНачисленияСрезПоследних.ПериодНачислений = ПлановыеНачисленияРаботниковОрганизаций.Период
	|			И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК Показатели
	|		ПО ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета = Показатели.ВидРасчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ПоказателиЗавершения
	|		ПО ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения = ПоказателиЗавершения.ВидРасчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|								РаботникиОрганизации.Период КАК ДатаПеревода,
	|								РаботникиОрганизации.Организация,
	|								РаботникиОрганизации.Сотрудник,
	|								РазмерТарифныхСтавок.ТарифныйРазряд,
	|								МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК Период
	|							ИЗ
	|								РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|
	|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|									ПО РаботникиОрганизации.Должность = РазмерТарифныхСтавок.Должность
	|										И РазмерТарифныхСтавок.Период <= РаботникиОрганизации.Период
	|							ГДЕ
	|								РаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|								И РаботникиОрганизации.Организация В (&СписокГоловныхОрганизаций)
	|
	|							СГРУППИРОВАТЬ ПО
	|								РаботникиОрганизации.Период,
	|								РаботникиОрганизации.Организация,
	|								РаботникиОрганизации.Сотрудник,
	|								РазмерТарифныхСтавок.ТарифныйРазряд) КАК ПериодыСменыТарифныхРазрядов
	|		ПО Работники.Организация = ПериодыСменыТарифныхРазрядов.Организация
	|			И Работники.Сотрудник = ПериодыСменыТарифныхРазрядов.Сотрудник
	|			И Работники.Период = ПериодыСменыТарифныхРазрядов.ДатаПеревода
	|			И ВЫБОР
	|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения < Работники.Период
	|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1Завершения
	|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ТарифныйРазряд1
	|			КОНЕЦ = ПериодыСменыТарифныхРазрядов.ТарифныйРазряд
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|		ПО Работники.Должность = РазмерТарифныхСтавок.Должность
	|			И ПериодыСменыТарифныхРазрядов.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
	|			И ПериодыСменыТарифныхРазрядов.Период = РазмерТарифныхСтавок.Период
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостояния = &Увольнение
	|			ТОГДА ДОБАВИТЬКДАТЕ(Работники.Период, ДЕНЬ, -1)
	|		ИНАЧЕ Работники.Период
	|	КОНЕЦ МЕЖДУ &ДатаПриема И &ДатаАктуальности И
	|	Работники.Сотрудник.Физлицо = &Физлицо И
	|	Работники.Организация В (&СписокГоловныхОрганизаций) И
	|	Работники.ОбособленноеПодразделение В (&СписокСтруктурныхЕдиниц)";
	
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();
	инд	=	0;
	ДополнительныеСведения.Параметры.ДатаИПричинаУвольнения = "";
	РеглВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// шапка таблицы назначений
	ДокументРезультат.Вывести(ШапкаНазначения);
	
	Пока ВыборкаРезультата.Следующий()	Цикл
		
		Если ЗначениеЗаполнено(ВыборкаРезультата.ДатаУвольнения) тогда
			
				//Встретили увольнение документом "Прием на работу" или "Увольнение"
				ДополнительныеСведения.Параметры.Регистратор = ВыборкаРезультата.Регистратор;
				ДополнительныеСведения.Параметры.ДатаИПричинаУвольнения	= Формат(ВыборкаРезультата.ДатаУвольнения, "ДЛФ=D") + ", "
					+ СокрЛП(ВыборкаРезультата.ОснованиеУвольнения) + ", приказ (распоряжение) №" + СокрЛП(ВыборкаРезультата.НомерПриказа) 
					+ " от " + Формат(ВыборкаРезультата.ДатаПриказа, "ДФ=дд.ММ.гггг");

		Иначе// Кадровое назначение	
			
			инд	= инд + 1;
			
			СтрокаНазначения.Параметры.Регистратор 				= 	ВыборкаРезультата.Регистратор;
			СтрокаНазначения.Параметры.ДатаНазначения			=	ВыборкаРезультата.ДатаПеревода;
			СтрокаНазначения.Параметры.ПодразделениеНазначения	=	ВыборкаРезультата.ПодразделениеОрганизации;
			СтрокаНазначения.Параметры.ДолжностьНазначения		=	ВыборкаРезультата.Должность + ?(ЗначениеЗаполнено(ВыборкаРезультата.ТарифныйРазряд), ", " + ВыборкаРезультата.ТарифныйРазряд, "");
			
			Если ВыборкаРезультата.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				СтрокаНазначения.Параметры.ДолжностьНазначения	=	СтрокаНазначения.Параметры.ДолжностьНазначения + " (внеш.совмест-ль)";
			ИначеЕсли ВыборкаРезультата.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
				СтрокаНазначения.Параметры.ДолжностьНазначения	=	СтрокаНазначения.Параметры.ДолжностьНазначения + " (внутр.совмест-ль)";
			КонецЕсли;
			
			Если ВыборкаРезультата.ТарифнаяСтавка = NULL Тогда
			
				ТарифнаяСтавка	= 0;
				Валюта			= РеглВалюта;
				ИмяВалюты		= "";
			
			Иначе
			
				ТарифнаяСтавка	= ВыборкаРезультата.ТарифнаяСтавка;
				Валюта			= ВыборкаРезультата.Валюта;
				ИмяВалюты		= ВыборкаРезультата.ИмяВалюты;
			
			КонецЕсли; 
			Если Валюта = РеглВалюта Тогда
				СтрокаНазначения.Параметры.ОкладНазначения	=	ТарифнаяСтавка;
			Иначе
				СтрокаНазначения.Параметры.ОкладНазначения	=   Формат(ТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '") + " (" + ИмяВалюты + ")"
			КонецЕсли;
			СтрокаНазначения.Параметры.ОснованиеНазначения	=	"Пр.№ "+ СокрЛП(ВыборкаРезультата.НомерПриказа) +" от " + Формат(ВыборкаРезультата.ДатаПриказа, "ДФ=dd.MM.yy");
			
			ДокументРезультат.Вывести(СтрокаНазначения);			
		КонецЕсли;
	КонецЦикла;

	// Добьем до 10 строк
	// уберем все параметры, чтобы были пустые строки
	Для Инд2 = 0 По СтрокаНазначения.Параметры.Количество() - 1 Цикл
		СтрокаНазначения.Параметры[Инд2] = Неопределено;
	КонецЦикла;	

	Для Инд2 = Инд + 1 По 10 Цикл
		ДокументРезультат.Вывести(СтрокаНазначения);
	КонецЦикла;
	
	// ОТПУСКА
	ДокументРезультат.Вывести(ШапкаОтпуска);
	
	СписокОтпусков = ПроцедурыУправленияПерсоналом.ПолучитьСписокСостоянийОтпусковОрганизации();
	Запрос.УстановитьПараметр("СписокОтпусков",	СписокОтпусков);
	Запрос.УстановитьПараметр("НеиспользованныйОтпуск", Перечисления.ИспользованиеОтпусковВидСтроки.НеиспользованныйОтпуск);
	Запрос.УстановитьПараметр("СостояниеОтпускЕжегодный", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("РегистрацияОтпуска", Перечисления.ИспользованиеОтпусковВидСтроки.РегистрацияОтпуска);
	
	Запрос.Текст = "
	|// реально предоставленные отпуска
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИспользованиеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска КАК ОчередностьПредоставленияОтпуска,
	|	ВЫБОР
	|		КОГДА НЕ (ИспользованиеОтпуска.ВидТрудовогоОтпуска ЕСТЬ NULL)
	|			ТОГДА ИспользованиеОтпуска.ВидТрудовогоОтпуска.Наименование
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПериодыОтпуска.Состояние)
	|	КОНЕЦ КАК ВидОтпуска,
	|	ИспользованиеОтпуска.РабочийГодС,
	|	ИспользованиеОтпуска.РабочийГодПо,
	|	ВЫБОР
	|		КОГДА НЕ (ИспользованиеОтпуска.Период ЕСТЬ NULL)
	|			ТОГДА ИспользованиеОтпуска.Период
	|		ИНАЧЕ ПериодыОтпуска.НачалоОтпуска
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ (ИспользованиеОтпуска.ДатаНачала ЕСТЬ NULL) 
	|			ТОГДА ИспользованиеОтпуска.ДатаНачала
	|		ИНАЧЕ ПериодыОтпуска.НачалоОтпуска
	|	КОНЕЦ КАК НачалоОтпуска,
	|	ВЫБОР
	|		КОГДА НЕ (ИспользованиеОтпуска.ДатаОкончания ЕСТЬ NULL) 
	|			ТОГДА ИспользованиеОтпуска.ДатаОкончания
	|		ИНАЧЕ ПериодыОтпуска.ОкончаниеОтпуска
	|	КОНЕЦ КАК ОкончаниеОтпуска,
	|	ВЫБОР
	|		КОГДА НЕ (ИспользованиеОтпуска.ИспользованоДней ЕСТЬ NULL)
	|			ТОГДА ИспользованиеОтпуска.ИспользованоДней
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыОтпуска.НачалоОтпуска, ПериодыОтпуска.ОкончаниеОтпуска, ДЕНЬ) + 1
	|	КОНЕЦ КАК Продолжительность,
	|	ВЫБОР
	|		КОГДА НЕ(ИспользованиеОтпуска.ВидСтроки ЕСТЬ NULL) 
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ИспользованиеОтпуска.ВидСтроки)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидСтроки,
	|	ПериодыОтпуска.Регистратор КАК Регистратор,
	|	ПериодыОтпуска.Регистратор.Дата КАК ДатаПриказа,
	|	ПериодыОтпуска.Регистратор.Номер КАК НомерПриказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыУходаВОтпуск.Период КАК НачалоОтпуска,
	|		ВЫБОР
	|			КОГДА ДатыУходаВОтпуск.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1) 
	|					ИЛИ ДатыУходаВОтпуск.ПериодЗавершения > МИНИМУМ(ДОБАВИТЬКДАТЕ(ДатыВозвращенияИзОтпуска.Период, ДЕНЬ, -1))
	|				ТОГДА МИНИМУМ(ДОБАВИТЬКДАТЕ(ДатыВозвращенияИзОтпуска.Период, ДЕНЬ, -1)) 
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДатыУходаВОтпуск.ПериодЗавершения, ДЕНЬ, -1)
	|		КОНЕЦ КАК ОкончаниеОтпуска,
	|		ДатыУходаВОтпуск.Состояние КАК Состояние,
	|		ДатыУходаВОтпуск.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрСведений.СостояниеРаботниковОрганизаций КАК ДатыУходаВОтпуск
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ДатыВозвращенияИзОтпуска
	|			ПО ДатыУходаВОтпуск.Сотрудник = ДатыВозвращенияИзОтпуска.Сотрудник 
	|				И ДатыУходаВОтпуск.Организация = ДатыВозвращенияИзОтпуска.Организация 
	|				И ДатыУходаВОтпуск.Период < ДатыВозвращенияИзОтпуска.Период
	|	
	|	ГДЕ
	|		ДатыУходаВОтпуск.Период МЕЖДУ &ДатаПриема И &ДатаАктуальности
	|		И ДатыУходаВОтпуск.Состояние В (&СписокОтпусков)
	|		И ДатыУходаВОтпуск.Сотрудник.ФизЛицо = &ФизЛицо
	|		И ДатыУходаВОтпуск.Регистратор.Организация В (&СписокСтруктурныхЕдиниц)
	|		И (ДатыУходаВОтпуск.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
	|				ИЛИ НЕ (ДатыВозвращенияИзОтпуска.Период ЕСТЬ NULL))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыУходаВОтпуск.Период,
	|		ДатыУходаВОтпуск.ПериодЗавершения,
	|		ДатыУходаВОтпуск.Состояние,
	|		ДатыУходаВОтпуск.Регистратор) КАК ПериодыОтпуска
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							НАЧАЛОПЕРИОДА(ИспользованиеОтпуска.Период, ДЕНЬ) КАК Период,
	|							ИспользованиеОтпуска.ДатаНачала,
	|							ИспользованиеОтпуска.ДатаОкончания,
	|							ИспользованиеОтпуска.ВидТрудовогоОтпуска,
	|							ИспользованиеОтпуска.ВидСтроки,
	|							ИспользованиеОтпуска.ИспользованоДней,
	|							ИспользованиеОтпуска.РабочийГодС,
	|							ИспользованиеОтпуска.РабочийГодПо
	|               		ИЗ
	|							РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпуска
	|						ГДЕ
	|							ИспользованиеОтпуска.Период МЕЖДУ &ДатаПриема И КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|							И ИспользованиеОтпуска.Сотрудник.ФизЛицо = &ФизЛицо
	|							И ИспользованиеОтпуска.Организация В (&СписокГоловныхОрганизаций)
	|							И ИспользованиеОтпуска.ВидСтроки В (&РегистрацияОтпуска)) КАК ИспользованиеОтпуска
	|		ПО ПериодыОтпуска.НачалоОтпуска = ИспользованиеОтпуска.Период
	|			И ПериодыОтпуска.Состояние = &СостояниеОтпускЕжегодный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// отзывы и компенсации отпусков
	|ВЫБРАТЬ
	|	ИспользованиеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска,
	|	ИспользованиеОтпуска.ВидТрудовогоОтпуска.Наименование КАК ВидОтпуска,
	|	ИспользованиеОтпуска.РабочийГодС,
	|	ИспользованиеОтпуска.РабочийГодПо,
	|	ИспользованиеОтпуска.Период,
	|	ВЫБОР
	|		КОГДА ИспользованиеОтпуска.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИспользованиеОтпуска.ДатаНачала
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ИспользованиеОтпуска.Период, ДЕНЬ)
	|	КОНЕЦ КАК НачалоОтпуска,
	|	ИспользованиеОтпуска.ДатаОкончания КАК ОкончаниеОтпуска,
	|	ИспользованиеОтпуска.ИспользованоДней КАК Продолжительность,
	|	ПРЕДСТАВЛЕНИЕ(ИспользованиеОтпуска.ВидСтроки) КАК ВидСтроки,
	|	ИспользованиеОтпуска.Регистратор КАК Регистратор,
	|	ИспользованиеОтпуска.Регистратор.Дата КАК ДатаПриказа,
	|	ИспользованиеОтпуска.Регистратор.Номер КАК НомерПриказа
	|ИЗ
	|	РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпуска
	|ГДЕ
	|	ИспользованиеОтпуска.Период МЕЖДУ &ДатаПриема И КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|	И ИспользованиеОтпуска.Регистратор.Организация В (&СписокСтруктурныхЕдиниц)
	|	И ИспользованиеОтпуска.Сотрудник.ФизЛицо = &ФизЛицо
	|	И ИспользованиеОтпуска.ВидСтроки НЕ В (&НеиспользованныйОтпуск, &РегистрацияОтпуска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НачалоОтпуска,
	|	РабочийГодС,
	|	ОчередностьПредоставленияОтпуска
	|";
						
	РезультатЗапроса 	= 	Запрос.Выполнить();
	ВыборкаРезультата	=	РезультатЗапроса.Выбрать();
	инд	=	0;
	Пока ВыборкаРезультата.Следующий()	Цикл
		
		инд	= инд + 1;
			
		СтрокаОтпуска.Параметры.Заполнить(ВыборкаРезультата);
		
		Если ВыборкаРезультата.РабочийГодС <> NULL Тогда
			СтрокаОтпуска.Параметры.ОтпускЗаПериод = Формат(ВыборкаРезультата.РабочийГодС,"ДФ=дд.ММ.гг") + "-" + Формат(ВыборкаРезультата.РабочийГодПо,"ДФ=дд.ММ.гг");
		Иначе
			СтрокаОтпуска.Параметры.ОтпускЗаПериод = "";
		КонецЕсли;
		
		СтрокаОтпуска.Параметры.ОснованиеОтпуска = ?(ВыборкаРезультата.ВидСтроки <> "", СокрЛП(ВыборкаРезультата.ВидСтроки) + " ", "") + 
													"пр.№ "+ СокрЛП(ВыборкаРезультата.НомерПриказа) +
													" от " + Формат(ВыборкаРезультата.ДатаПриказа, "ДФ=dd.MM.yy");
			
		ДокументРезультат.Вывести(СтрокаОтпуска);
		
	КонецЦикла;
	
	// Добьем пустыми строками до 10
	Для Инд2 = 0 По СтрокаОтпуска.Параметры.Количество() - 1 Цикл
		СтрокаОтпуска.Параметры[инд2] = Неопределено;
	КонецЦикла;
	
	Для Инд2 = Инд + 1 По 10 Цикл
		ДокументРезультат.Вывести(СтрокаОтпуска);
	КонецЦикла;
	
	// Дополнительные сведения
	ДокументРезультат.Вывести(ДополнительныеСведения);
	
	//Параметры документа
	ДокументРезультат.ИмяПараметровПечати 	= "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_Т2";
	ДокументРезультат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСлева             = 0;
	ДокументРезультат.ПолеСправа            = 0;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, "Личная карточка (форма Т-2)", Строка(глТекущийПользователь));
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;