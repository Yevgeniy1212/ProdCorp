////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки(ВосстанавливаемНастройку = Ложь) Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Оценки компетенций работников";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ОценкиКомпетенцийРаботников.Оценка,
	                |	ОценкиКомпетенцийРаботников.Период КАК ДатаОценки
	                |
					|{ВЫБРАТЬ
	                |	ОценкиКомпетенцийРаботников.Оценка,
	                |	ОценкиКомпетенцийРаботников.Период КАК ДатаОценки,
	                |	ОценкиКомпетенцийРаботников.ФизЛицо КАК Сотрудник,
	                |	ВложенныйЗапрос.Подразделение,
	                |	ВложенныйЗапрос.Должность,
	                |	ОценкиКомпетенцийРаботников.Компетенция
					|	//СВОЙСТВА
					|}
	                |
	                |ИЗ
	                |	РегистрСведений.ОценкиКомпетенцийРаботников КАК ОценкиКомпетенцийРаботников
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			РаботникиСрезПоследних.ФизЛицо КАК ФизЛицо,
	                |			РаботникиСрезПоследних.Подразделение КАК Подразделение,
	                |			РаботникиСрезПоследних.Должность КАК Должность
	                |		ИЗ
	                |			РегистрСведений.Работники.СрезПоследних(&КонПериода) КАК РаботникиСрезПоследних) КАК ВложенныйЗапрос
	                |		ПО ОценкиКомпетенцийРаботников.ФизЛицо = ВложенныйЗапрос.ФизЛицо
	                |//СОЕДИНЕНИЯ
					|
	                |ГДЕ
	                |	ОценкиКомпетенцийРаботников.Период МЕЖДУ &НачПериода И &КонПериода 
	                |
					|{ГДЕ
	                |	ОценкиКомпетенцийРаботников.ФизЛицо КАК Сотрудник,
	                |	ВложенныйЗапрос.Подразделение,
	                |	ВложенныйЗапрос.Должность,
	                |	ОценкиКомпетенцийРаботников.Компетенция
					|	//СВОЙСТВА
					|	//КАТЕГОРИИ
					|}
	                |
					|{ИТОГИ ПО
	                |	ОценкиКомпетенцийРаботников.ФизЛицо КАК Сотрудник,
	                |	ВложенныйЗапрос.Подразделение,
	                |	ВложенныйЗапрос.Должность,
	                |	ОценкиКомпетенцийРаботников.Компетенция
					|	//СВОЙСТВА
					|}
	                |
					|";
					
		
	// представление полей запроса
	СтруктураПредставлениеПолей.Вставить("ДатаОценки", "Дата оценки");
	СтруктураПредставлениеПолей.Вставить("Сотрудник", "Сотрудник");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ОценкиКомпетенцийРаботников.ФизЛицо";
		НоваяСтрока.Представление = "Сотрудник";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ВложенныйЗапрос.Подразделение";
		НоваяСтрока.Представление = "Подразделение";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;
		
		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);		
		
	КонецЕсли;
	
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда			
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
    Если Не ВосстанавливаемНастройку Тогда
		
		// группировки по умолчанию
		ПостроительОтчета.ИзмеренияСтроки.Добавить("Сотрудник");
		
		// отборы по умолчанию
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить("Сотрудник");
		МассивОтбора.Добавить("Подразделение");
		МассивОтбора.Добавить("Должность");
		МассивОтбора.Добавить("Компетенция");
		//МассивОтбора.Добавить("Оценка");


		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
		
		// поля по умолчанию
		ПостроительОтчета.ВыбранныеПоля.Очистить();
		ПостроительОтчета.ВыбранныеПоля.Добавить("Сотрудник");
		ПостроительОтчета.ВыбранныеПоля.Добавить("Подразделение");	    
		ПостроительОтчета.ВыбранныеПоля.Добавить("Должность");
		ПостроительОтчета.ВыбранныеПоля.Добавить("Компетенция");
		ПостроительОтчета.ВыбранныеПоля.Добавить("Оценка");
		ПостроительОтчета.ВыбранныеПоля.Добавить("ДатаОценки");

		
		// настройки отчета
		ОбщийОтчет.РаскрашиватьИзмерения = Истина;
		ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
		ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
		ОбщийОтчет.мРежимВводаПериода = 0; // Период
	КонецЕсли;
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("НачПериода",ОбщийОтчет.ДатаНач);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("КонПериода",ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ТекущаяДата",ТекущаяДата());
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

#КонецЕсли