#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получить параметры исполнения отчета
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат общ_ОтчетыВызовСервера.ПолучитьПараметрыИсполненияОтчета();
							
КонецФункции

// Получить текст заголовка
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт
	
	Возврат общ_ОтчетыВызовСервера.ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале, "Сравнительный анализ движения денежных средств");
	
КонецФункции

Процедура ЗаполнитьНачальныеНастройки(Отчет, АдресСхемыКомпоновки, КопияТаблицаСценарии, ГруппировкиОтчета,Показатели) Экспорт

	ЗаполнитьПоказателиОтчета(Показатели);
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить(); // очистка отбора
	Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить(); // очистка порядка
	
	Если Отчет.ТаблицаСценарии.Количество() > 0 Тогда
		Попытка
			СформироватьНастройкиОтчета(Отчет, АдресСхемыКомпоновки, КопияТаблицаСценарии, ГруппировкиОтчета,Показатели);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при инициализации настроек отчета: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновки, КомпоновщикНастроек) Экспорт
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	ДетализацияПоПериодам = ПараметрыОтчета.ДетализацияПоПериодам;
	Периодичность = ПараметрыОтчета.Периодичность;
	
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Очищаем структуру отчета
	НастройкиКомпоновщика.Выбор.Элементы.Очистить();
	НастройкиКомпоновщика.УсловноеОформление.Элементы.Очистить();
	НастройкиКомпоновщика.Структура.Очистить();
	СхемаКомпоновки.ПоляИтога.Очистить();
	
	// Задаем настройки отчета
	МакетОформления = НастройкиКомпоновщика.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
	МакетОформления.Значение = БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый.Имя; 
	МакетОформления.Использование = Истина;
	
	РасположениеПолейГруппировки = НастройкиКомпоновщика.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РасположениеПолейГруппировки"));
	РасположениеПолейГруппировки.Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Отдельно; 
	РасположениеПолейГруппировки.Использование = Истина;
	
	РасположениеОбщихИтогов = НастройкиКомпоновщика.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"));
	РасположениеОбщихИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Нет; 
	РасположениеОбщихИтогов.Использование = Истина;
	
	ВыводитьПараметрыДанных = НастройкиКомпоновщика.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	ВыводитьПараметрыДанных.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; 
	ВыводитьПараметрыДанных.Использование = Истина;

	ВыводитьОтбор = НастройкиКомпоновщика.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
	ВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; 
	ВыводитьОтбор.Использование = Истина;
	
	ТаблицаГруппировкаОтчета = НастройкиКомпоновщика.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
	// Группировка из настроек отчета
	Структура = ТаблицаГруппировкаОтчета.Строки.Добавить();
	Первый = Истина;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить();
			Иначе
				Структура.Имя = "Группировка";
			КонецЕсли;
			Первый = Ложь;                      
						
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.Поле = "Период" Тогда
				Продолжить;
			Иначе
				Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
				Иначе
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				КонецЕсли;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
			
		КонецЕсли;
	КонецЦикла;

	Если ДетализацияПоПериодам Тогда
		
		ГруппировкаКолонки = ТаблицаГруппировкаОтчета.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаКолонки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("НомерСценария");
		ГруппировкаКолонки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ПолеПериод = "Период" + Периодичность;
		
		НоваяГруппировка = ГруппировкаКолонки.Структура.Добавить();
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПолеПериод);

		НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
	Иначе
		
		ГруппировкаКолонки = ТаблицаГруппировкаОтчета.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаКолонки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("НомерСценария");

		ГруппировкаКолонки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
	КонецЕсли;
	
	// Настройка условного оформления
	Для Каждого Показатель Из ПараметрыОтчета.Показатели Цикл
		Для НомерПоказателя = 0 По ПараметрыОтчета.ТаблицаСценарии.Количество() - 1 Цикл
			ИмяРесурса = Показатель.Поле + "_" + НомерПоказателя;
			
			НовыйЭлементУсловногоОформления = ТаблицаГруппировкаОтчета.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяРесурса;
			НовыйЭлементУсловногоОформления.Представление = ИмяРесурса;
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			// Область использования
			НовыйЭлементУсловногоОформления.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовыйЭлементУсловногоОформления.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовыйЭлементУсловногоОформления.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовыйЭлементУсловногоОформления.ИспользоватьВОтборе = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовыйЭлементУсловногоОформления.ИспользоватьВПараметрах = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРесурса);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяРесурса);

			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 0);
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 0.0001);
		КонецЦикла; 
	КонецЦикла;
	
	// Добавляем ресурсы
	Для Каждого Показатель Из ПараметрыОтчета.Показатели Цикл
		Если Не Показатель.Использование Тогда
			Продолжить;		
		КонецЕсли;
		Для НомерПоказателя = 0 По ПараметрыОтчета.ТаблицаСценарии.Количество() - 1 Цикл
			ИмяРесурса = Показатель.Поле + "_" + НомерПоказателя;
		
			ПолеРесурса             = СхемаКомпоновки.ПоляИтога.Добавить();
			ПолеРесурса.Выражение   = "Сумма" + "(" + ИмяРесурса + ")";
			ПолеРесурса.ПутьКДанным = ИмяРесурса;
			
			общ_ОтчетыВызовСервера.ДобавитьВыбранноеПоле(НастройкиКомпоновщика.Выбор, ИмяРесурса, Показатель.Представление);
		КонецЦикла; 
	КонецЦикла;
	
	// Задаем порядок сортировки
	ПолеСортировки = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("НомерСценария");
	Если ДетализацияПоПериодам Тогда
		ПолеСортировки = НастройкиКомпоновщика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("Период" + Периодичность);
	КонецЕсли;	
	 
КонецПроцедуры

// После вывода результата
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
 	общ_ОтчетыВызовСервера.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
	
	ОбработатьЗаголовки(Результат, ПараметрыОтчета.КопияТаблицаСценарии, ПараметрыОтчета.ДетализацияПоПериодам, ПараметрыОтчета.Периодичность);

	// По-умолчанию сворачиваем колонки 
	Результат.ПоказатьУровеньГруппировокКолонок(0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьНастройкиОтчета(Отчет, АдресСхемыКомпоновки, КопияТаблицаСценарии, ГруппировкиОтчета,Показатели)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ПериодДанных = ?(Отчет.Периодичность.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Отчет.Периодичность));
	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	ТаблицаСценарии 		= Отчет.ТаблицаСценарии;	
	КомпоновщикНастроек 	= Отчет.КомпоновщикНастроек;
	
	// Далее используются таблицы значений, полученные выгрузкой строк из т.ч. отчета
	КопияТаблицаСценарии.Загрузить(ТаблицаСценарии.Выгрузить());

	СтруктураПараметров = Новый Структура;
	
	СтруктураГруппировки = Новый Структура;
		
	СценарийЭталон = Отчет.ТаблицаСценарии[0].Сценарий;
	
	ТекстЗапросаСценарии = "";
	Номер = 0;
		
	Для каждого СтрокаСценарий Из КопияТаблицаСценарии Цикл
		
		ТекстЗапросаСценарии = ТекстЗапросаСценарии + ТекстЗапросаПоСценарию(Отчет, НаборДанных, СтрокаСценарий, СтруктураПараметров, Номер, ПериодДанных, СтруктураГруппировки, ГруппировкиОтчета,Показатели);
		
		// Эталонный период - самый первый
		СтрокаСценарий.Эталон = ?(Номер = 0, Истина, Ложь);
		
		СтрокаПериод = "Период с "+Формат(СтрокаСценарий.ДатаНач,"ДФ=dd.MM.yyyy")+" по "+Формат(СтрокаСценарий.ДатаКон,"ДФ=dd.MM.yyyy");

		Если СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеДанные Тогда
			СтрокаСценарий.ТекстПараметра = ?(Номер = 0, " Эталонный период.", "Сравниваемый период "  + Номер + ".")
				+ Символы.ПС + "Фактические данные." + " " + ПериодДанных + "." + Символы.ПС + СтрокаПериод;
		ИначеЕсли СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.Сценарий Тогда
			СтрокаСценарий.ТекстПараметра = ?(Номер = 0, " Эталонный период.", "Сравниваемый период " + Номер + ".")
				+ Символы.ПС + СтрокаСценарий.Сценарий + " " + ПериодДанных + "." + Символы.ПС + СтрокаПериод;
		ИначеЕсли СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеИПланируемые Тогда
			СтрокаСценарий.ТекстПараметра = ?(Номер = 0, " Эталонный период.", "Сравниваемый период " + Номер + ".")
				+ Символы.ПС + "Фактические данные с учетом заявок и планируемых поступлений." + " " + ПериодДанных + "." + Символы.ПС + СтрокаПериод;
		КонецЕсли;
		
		Номер = Номер + 1;

	КонецЦикла;
	
	ТекстЗапросаСценарии = Сред(ТекстЗапросаСценарии, 16);
	ТекстИтоги = "";
	
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если Не СтрокаПоказатели.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		Для Индекс = 0 По ТаблицаСценарии.Количество() - 1 Цикл
			
			ТекстИтоги = ТекстИтоги + ",
			|	" + СтрокаПоказатели.Поле + "_" + Индекс + "";
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Формируем финальный текст запроса.
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|ДанныеСценариев.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|ДанныеСценариев.НомерСценария КАК НомерСценария,
	|ДанныеСценариев.Период КАК Период,
	|ДанныеСценариев.ЦФО КАК ЦФО,
	|ДанныеСценариев.Проект КАК Проект,
	|ДанныеСценариев.Контрагент КАК Контрагент,
	|ДанныеСценариев.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|" + фин_УправлениеБюджетированием.СформироватьТекстЗапросаПоПериодам(ПериодДанных,"ДанныеСценариев.Период") + "
	|ДанныеСценариев.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|" + ТекстИтоги + "
	|{ВЫБРАТЬ
	|СтатьяДвиженияДенежныхСредств.* КАК СтатьяДвиженияДенежныхСредств,
	|ВидДенежныхСредств КАК ВидДенежныхСредств,
	|НомерСценария,
	|Период КАК Период,
	|ЦФО.* КАК ЦФО,
	|Проект.* КАК Проект,
	|Контрагент.* КАК Контрагент,
	|ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств}";
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ 
	|(" + ТекстЗапросаСценарии + ") КАК ДанныеСценариев
	|{ГДЕ
	|ДанныеСценариев.СтатьяДвиженияДенежныхСредств.*,
	|ДанныеСценариев.ВидДенежныхСредств,
	|ДанныеСценариев.ЦФО.*,
	|ДанныеСценариев.Проект.*,
	|ДанныеСценариев.Контрагент.*,
	|ДанныеСценариев.ДоговорКонтрагента.*,
	|ДанныеСценариев.ВалютаДенежныхСредств
	|}
	|УПОРЯДОЧИТЬ ПО ДанныеСценариев.НомерСценария";
	
	// Определяем набор данных
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
	
	// Добавление полей компоновки данных 
	СтруктураПредставлениеПолей = ПолучитьСтруктуруПредставленияПолей(ВалютаУправленческогоУчета);
	
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СтатьяДвиженияДенежныхСредств", СтруктураПредставлениеПолей["СтатьяДвиженияДенежныхСредств"], "СтатьяДвиженияДенежныхСредств"); 
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СуммаПриходВал", СтруктураПредставлениеПолей["СуммаПриходВал"], "СуммаПриходВал"); 
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СуммаРасходВал", СтруктураПредставлениеПолей["СуммаРасходВал"], "СуммаРасходВал"); 
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СуммаПриходУпр", СтруктураПредставлениеПолей["СуммаПриходУпр"], "СуммаПриходУпр"); 
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ДенежныйПотокУпр", СтруктураПредставлениеПолей["ДенежныйПотокУпр"], "ДенежныйПотокУпр"); 
	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "ДенежныйПотокВал", СтруктураПредставлениеПолей["ДенежныйПотокВал"], "ДенежныйПотокВал"); 
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресСхемыКомпоновки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	
	Для каждого Параметр Из СтруктураПараметров Цикл
		общ_ОтчетыВызовСервера.УстановитьПараметр(КомпоновщикНастроек.Настройки, Параметр.Ключ, Параметр.Значение);  
	КонецЦикла;
	
	общ_ОтчетыВызовСервера.УстановитьПараметр(КомпоновщикНастроек.Настройки, "Приход", Перечисления.ден_ВидыДвиженийПриходРасход.Приход); 
	общ_ОтчетыВызовСервера.УстановитьПараметр(КомпоновщикНастроек.Настройки, "Расход", Перечисления.ден_ВидыДвиженийПриходРасход.Расход); 
	общ_ОтчетыВызовСервера.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ПустойСценарий", фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()); 
	общ_ОтчетыВызовСервера.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ПустойЦФО", Справочники.Подразделения.ПустаяСсылка()); 
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОтчета(Показатели)

	Если Показатели.Количество() = 0 Тогда
		
		// Управление показателями
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле          	= "СуммаПриходВал";
		СтрПоказатели.Представление 	= "Поступления в валюте операций";
		СтрПоказатели.Использование 	= Ложь;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле           	= "СуммаРасходВал";
		СтрПоказатели.Представление 	= "Платежи в валюте операций";
		СтрПоказатели.Использование   	= Ложь;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле           	= "ДенежныйПотокВал";
		СтрПоказатели.Представление 	= "Чистый денежный поток в валюте операций";
		СтрПоказатели.Использование   	= Ложь;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле           	= "СуммаПриходУпр";
		СтрПоказатели.Представление 	= "Поступления в валюте упр. учета";
		СтрПоказатели.Использование   	= Истина;
		
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле           	= "СуммаРасходУпр";
		СтрПоказатели.Представление 	= "Платежи в валюте упр. учета";
		СтрПоказатели.Использование   	= Истина;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Поле           	= "ДенежныйПотокУпр";
		СтрПоказатели.Представление 	= "Чистый денежный поток в валюте упр. учета";
		СтрПоказатели.Использование   	= Истина;		
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтруктуруПредставленияПолей(ВалютаУправленческогоУчета)

	СтруктураПредставлениеПолей = Новый Структура(
	"	СтатьяДвиженияДенежныхСредств,
	|	ВидДенежныхСредств,
	|	ЦФО,
	|	Проект,
	|	Контрагент,
	|	ВалютаДенежныхСредств,
	|	ДоговорКонтрагента,
	|	СуммаПриходВал,
	|	СуммаРасходВал,
	|	СуммаПриходУпр,
	|	СуммаРасходУпр,
	|	ДенежныйПотокУпр,
	|	ДенежныйПотокВал",
	"Статья движения денежных средств",
	"Вид денежных средств (наличные, безналичные)",
	"Подразделение",
	"Проект",
	"Контрагент",
	"Валюта движения",
	"Договор контрагента",
	"Поступления в валюте операций",
	"Платежи в валюте операций",
	"Поступления в валюте упр. учета (" + ВалютаУправленческогоУчета +")",
	"Платежи в валюте упр. учета (" + ВалютаУправленческогоУчета +")",
	"Чистый денежный поток в валюте упр. учета (" + ВалютаУправленческогоУчета +")",
	"Чистый денежный поток в валюте операций");
	
	СтруктураПредставлениеПолей.Вставить("Период", "Период");
	СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
	СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
	СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
	СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
	СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");
	
	Возврат СтруктураПредставлениеПолей;

КонецФункции

// Формирует текст отбора данных по строке ТЧ "ТаблицаСценарии"
//
Функция ТекстЗапросаПоСценарию(Отчет, НаборДанных, СтрокаСценарий, СтруктураПараметров, Номер, ПериодДанных, СтруктураГруппировки, ГруппировкиОтчета,Показатели)
  	  
	ТаблицаСценарии = Отчет.ТаблицаСценарии;
	
	Если СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.Сценарий Тогда
		
		ТекстЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|&ПараметрНомерСценария_" + Номер + " КАК НомерСценария,
		|&ПараметрВидДанных_" + Номер + " КАК ВидДанных,
		|Сценарий КАК Сценарий,
		|Период КАК Период,
		|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ЦФО КАК ЦФО,
		|Проект КАК Проект,
		|Контрагент КАК Контрагент,
		|ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
			
		Для Каждого СтрокаПоказатели Из Показатели Цикл
			
			Если Не СтрокаПоказатели.Использование Тогда
				Продолжить;
			КонецЕсли; 
			
			Для Индекс = 0 По ТаблицаСценарии.Количество() - 1 Цикл
				Если Номер = Индекс Тогда
					ТекстЗапроса = ТекстЗапроса + ",
					|	СУММА(" + СтрокаПоказатели.Поле + ") КАК " + СтрокаПоказатели.Поле + "_" + Индекс;
				Иначе
					ТекстЗапроса = ТекстЗапроса + ",
					|0 КАК " + СтрокаПоказатели.Поле + "_" + Индекс;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|(ВЫБРАТЬ
		|ПланДвижения.Сценарий КАК Сценарий,
		|ПланДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ПланДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ПланДвижения.ЦФО КАК ЦФО,
		|ПланДвижения.Проект КАК Проект,
		|ПланДвижения.Контрагент КАК Контрагент,
		|ПланДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ПланДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|ПланДвижения.Период,
		|ПланДвижения.СуммаПриходВал КАК СуммаПриходВал,
		|ПланДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
		|ПланДвижения.СуммаРасходВал КАК СуммаРасходВал,
		|ПланДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
		|ПланДвижения.СуммаПриходВал-ПланДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
		|ПланДвижения.СуммаПриходУпр-ПланДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
		|ИЗ	
		|(ВЫБРАТЬ
		|	ПланПоступления.Период,
		|	ПланПоступления.Сценарий,
		|	ПланПоступления.ДокументПланирования.Подразделение КАК ЦФО,
		|	ПланПоступления.ВидДенежныхСредств,
		|	ПланПоступления.ВалютаДенежныхСредств,
		|	ПланПоступления.СтатьяДвиженияДенежныхСредств,
		|	ПланПоступления.Проект,
		|	ПланПоступления.Контрагент,
		|	ПланПоступления.ДоговорКонтрагента,
		|	ПланПоступления.СуммаОборот КАК СуммаПриходВал,
		|	ПланПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
		|	0 КАК СуммаРасходВал,
		|	0 КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ПланыДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",Сценарий = &Сценарий_"+Номер+" И ПриходРасход=&Приход) КАК ПланПоступления
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ПланПлатежи.Период,
		|	ПланПлатежи.Сценарий,
		|	ПланПлатежи.ДокументПланирования.Подразделение,
		|	ПланПлатежи.ВидДенежныхСредств,
		|	ПланПлатежи.ВалютаДенежныхСредств,
		|	ПланПлатежи.СтатьяДвиженияДенежныхСредств,
		|	ПланПлатежи.Проект,
		|	ПланПлатежи.Контрагент,
		|	ПланПлатежи.ДоговорКонтрагента,
		|	0 КАК СуммаПриходВал,
		|	0 КАК СуммаПриходУпр,
		|	ПланПлатежи.СуммаОборот КАК СуммаРасходВал,
		|	ПланПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ПланыДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",Сценарий = &Сценарий_"+Номер+" И ПриходРасход=&Расход) КАК ПланПлатежи) КАК ПланДвижения) КАК План"+"_"+Номер+"
		|СГРУППИРОВАТЬ ПО
		|Сценарий,
		|Период,
		|СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств,
		|ЦФО,
		|Проект,
		|Контрагент,
		|ДоговорКонтрагента,
		|ВалютаДенежныхСредств";
					
	ИначеЕсли СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеДанные Тогда
		
		ТекстЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
		|&ПараметрВидДанных_"+Номер+" КАК ВидДанных,
		|&ПустойСценарий КАК Сценарий,
		|Период КАК Период,
		|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ЦФО КАК ЦФО,
		|Проект КАК Проект,
		|Контрагент КАК Контрагент,
		|ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
			
		Для Каждого СтрокаПоказатели Из Показатели Цикл
			
			Если Не СтрокаПоказатели.Использование Тогда
				Продолжить;
			КонецЕсли; 
			
			Для Индекс = 0 По ТаблицаСценарии.Количество() - 1 Цикл
				
				Если Номер = Индекс Тогда
					ТекстЗапроса = ТекстЗапроса + ",
					|	СУММА("+СтрокаПоказатели.Поле+") КАК " + СтрокаПоказатели.Поле+"_"+Индекс;
				Иначе
					ТекстЗапроса = ТекстЗапроса + ",
					|0 КАК " + СтрокаПоказатели.Поле +"_"+Индекс;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|(ВЫБРАТЬ
		|ФактДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ФактДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ФактДвижения.ЦФО КАК ЦФО,
		|ФактДвижения.Проект КАК Проект,
		|ФактДвижения.Контрагент КАК Контрагент,
		|ФактДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ФактДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|ФактДвижения.Период,
		|ФактДвижения.СуммаПриходВал КАК СуммаПриходВал,
		|ФактДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
		|ФактДвижения.СуммаРасходВал КАК СуммаРасходВал,
		|ФактДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
		|ФактДвижения.СуммаПриходВал-ФактДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
		|ФактДвижения.СуммаПриходУпр-ФактДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
		|ИЗ	
		|(ВЫБРАТЬ
		|	ФактПоступления.Период,
		|	ФактПоступления.Подразделение КАК ЦФО,
		|	ФактПоступления.ВидДенежныхСредств,
		|	ФактПоступления.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	ФактПоступления.СтатьяДвиженияДенежныхСредств,
		|	ФактПоступления.Проект,
		|	ФактПоступления.Контрагент,
		|	ФактПоступления.ДоговорКонтрагента,
		|	ФактПоступления.СуммаОборот КАК СуммаПриходВал,
		|	ФактПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
		|	0 КАК СуммаРасходВал,
		|	0 КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Приход) КАК ФактПоступления
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ФактПлатежи.Период,
		|	ФактПлатежи.Подразделение,
		|	ФактПлатежи.ВидДенежныхСредств,
		|	ФактПлатежи.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ФактПлатежи.СтатьяДвиженияДенежныхСредств,
		|	ФактПлатежи.Проект,
		|	ФактПлатежи.Контрагент,
		|	ФактПлатежи.ДоговорКонтрагента,
		|	0 КАК СуммаПриходВал,
		|	0 КАК СуммаПриходУпр,
		|	ФактПлатежи.СуммаОборот КАК СуммаРасходВал,
		|	ФактПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Расход) КАК ФактПлатежи) КАК ФактДвижения) КАК Факт"+"_"+Номер+"
		|СГРУППИРОВАТЬ ПО
		|Период,
		|СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств,
		|ЦФО,
		|Проект,
		|Контрагент,
		|ДоговорКонтрагента,
		|ВалютаДенежныхСредств";
			
	ИначеЕсли СтрокаСценарий.ВидДанных = Перечисления.ден_ВидыДанныхДляПланФактногоАнализаДДС.ФактическиеИПланируемые Тогда 
		
		ТекстЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|&ПараметрНомерСценария_"+Номер+" КАК НомерСценария,
		|&ПараметрВидДанных_"+Номер+" КАК ВидДанных,
		|&ПустойСценарий КАК Сценарий,
		|Период КАК Период,
		|СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ЦФО КАК ЦФО,
		|Проект КАК Проект,
		|Контрагент КАК Контрагент,
		|ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ВалютаДенежныхСредств КАК ВалютаДенежныхСредств";
		
		Для Каждого СтрокаПоказатели Из Показатели Цикл
			
			Если Не СтрокаПоказатели.Использование Тогда
				Продолжить;
			КонецЕсли; 
			
			Для Индекс = 0 По ТаблицаСценарии.Количество() - 1 Цикл
				
				Если Номер = Индекс Тогда
					ТекстЗапроса = ТекстЗапроса + ",
					|	СУММА("+СтрокаПоказатели.Поле+") КАК " + СтрокаПоказатели.Поле+"_"+Индекс;
				Иначе
					ТекстЗапроса = ТекстЗапроса + ",
					|0 КАК " + СтрокаПоказатели.Поле +"_"+Индекс;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|(ВЫБРАТЬ
		|ПланИФактДвижения.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|ПланИФактДвижения.ВидДенежныхСредств КАК ВидДенежныхСредств,
		|ПланИФактДвижения.ЦФО КАК ЦФО,
		|ПланИФактДвижения.Проект КАК Проект,
		|ПланИФактДвижения.Контрагент КАК Контрагент,
		|ПланИФактДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|ПланИФактДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|ПланИФактДвижения.Период,
		|ПланИФактДвижения.СуммаПриходВал КАК СуммаПриходВал,
		|ПланИФактДвижения.СуммаПриходУпр КАК СуммаПриходУпр,
		|ПланИФактДвижения.СуммаРасходВал КАК СуммаРасходВал,
		|ПланИФактДвижения.СуммаРасходУпр КАК СуммаРасходУпр,
		|ПланИФактДвижения.СуммаПриходВал-ПланИФактДвижения.СуммаРасходВал КАК ДенежныйПотокВал,
		|ПланИФактДвижения.СуммаПриходУпр-ПланИФактДвижения.СуммаРасходУпр КАК ДенежныйПотокУпр
		|ИЗ	
		|(ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ДатаПоступления, "+ПериодДанных+") КАК Период,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ЦФО КАК ЦФО,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ФормаОплаты КАК ВидДенежныхСредств,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ВалютаДокумента КАК ВалютаДенежныхСредств,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.СтатьяДвиженияДенежныхСредств,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.Проект КАК Проект,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток КАК СуммаПриходВал,
		|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаУпрОстаток КАК СуммаПриходУпр,
		|	0 КАК СуммаРасходВал,
		|	0 КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(
		|		,
		|		ДокументПланирования.ДатаПоступления МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
		|		    И Проект ССЫЛКА Справочник.Проекты) КАК ПланируемыеПоступленияДенежныхСредствОстатки
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ДатаПоступления, "+ПериодДанных+") КАК Период,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ЦФО КАК ЦФО,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ФормаОплаты КАК ВидДенежныхСредств,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДокументПланирования.ВалютаДокумента КАК ВалютаДенежныхСредств,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СтатьяДвиженияДенежныхСредств,
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СуммаОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаПриходВал,
		|	ПланируемыеПоступленияДенежныхСредствОстатки_1.СуммаУпрОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаПриходУпр,
		|	0 КАК СуммаРасходВал,
		|	0 КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(
		|		,
		|		ДокументПланирования.ДатаПоступления МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
		|			И Проект ССЫЛКА Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"ВидыРаспределенияПоПроектам) КАК ПланируемыеПоступленияДенежныхСредствОстатки_1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&ДатаКон_"+Номер+", ) КАК РаспределениеПоПроектамСрезПоследних
		|		ПО ПланируемыеПоступленияДенежныхСредствОстатки_1.Проект = РаспределениеПоПроектамСрезПоследних.ВидРаспределения
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ДатаРасхода, "+ПериодДанных+") КАК Период,
		|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ЦФО КАК ЦФО,
		|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ФормаОплаты КАК ВидДенежныхСредств,
		|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаДокумента КАК ВалютаДенежныхСредств,
		|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
		|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	0 КАК СуммаПриходВал,
		|	0 КАК СуммаПриходУпр,
		|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаРасходВал,
		|	ЗаявкиНаРасходованиеСредствОстатки.СуммаУпрОстаток КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки(
		|		,
		|		ЗаявкаНаРасходование.ДатаРасхода МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
		|		    И Проект ССЫЛКА Справочник.Проекты) КАК ЗаявкиНаРасходованиеСредствОстатки
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ДатаРасхода, "+ПериодДанных+") КАК Период,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ЦФО КАК ЦФО,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ФормаОплаты КАК ВидДенежныхСредств,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.ЗаявкаНаРасходование.ВалютаДокумента КАК ВалютаДенежныхСредств,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.СтатьяДвиженияДенежныхСредств,
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	0 КАК СуммаПриходВал,
		|	0 КАК СуммаПриходУпр,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.СуммаОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаРасходВал,
		|	ЗаявкиНаРасходованиеСредствОстатки_1.СуммаУпрОстаток * РаспределениеПоПроектамСрезПоследних.ДоляРаспределения КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки(
		|		,
		|		ЗаявкаНаРасходование.ДатаРасхода МЕЖДУ &ДатаНач_"+Номер+" И &ДатаКон_"+Номер+"
		|			И Проект ССЫЛКА Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"ВидыРаспределенияПоПроектам) КАК ЗаявкиНаРасходованиеСредствОстатки_1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&ДатаКон_"+Номер+", ) КАК РаспределениеПоПроектамСрезПоследних
		|		ПО ЗаявкиНаРасходованиеСредствОстатки_1.Проект = РаспределениеПоПроектамСрезПоследних.ВидРаспределения
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ФактПоступления.Период,
		|	ФактПоступления.Подразделение КАК ЦФО,
		|	ФактПоступления.ВидДенежныхСредств,
		|	ФактПоступления.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
		|	ФактПоступления.СтатьяДвиженияДенежныхСредств,
		|	ФактПоступления.Проект,
		|	ФактПоступления.Контрагент,
		|	ФактПоступления.ДоговорКонтрагента,
		|	ФактПоступления.СуммаОборот КАК СуммаПриходВал,
		|	ФактПоступления.СуммаУпрОборот КАК СуммаПриходУпр,
		|	0 КАК СуммаРасходВал,
		|	0 КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Приход) КАК ФактПоступления
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ФактПлатежи.Период,
		|	ФактПлатежи.Подразделение,
		|	ФактПлатежи.ВидДенежныхСредств,
		|	ФактПлатежи.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ФактПлатежи.СтатьяДвиженияДенежныхСредств,
		|	ФактПлатежи.Проект,
		|	ФактПлатежи.Контрагент,
		|	ФактПлатежи.ДоговорКонтрагента,
		|	0 КАК СуммаПриходВал,
		|	0 КАК СуммаПриходУпр,
		|	ФактПлатежи.СуммаОборот КАК СуммаРасходВал,
		|	ФактПлатежи.СуммаУпрОборот КАК СуммаРасходУпр
		|ИЗ
		|	РегистрНакопления.ден_ДвиженияДенежныхСредств.Обороты(&ДатаНач_"+Номер+", &ДатаКон_"+Номер+", "+ПериодДанных+",ПриходРасход=&Расход) КАК ФактПлатежи) КАК ПланИФактДвижения) КАК ПланФакт"+"_"+Номер+"
		|СГРУППИРОВАТЬ ПО
		|Период,
		|СтатьяДвиженияДенежныхСредств,
		|ВидДенежныхСредств,
		|ЦФО,
		|Проект,
		|Контрагент,
		|ДоговорКонтрагента,
		|ВалютаДенежныхСредств";
		
	КонецЕсли;
	
	ГруппировкиОтчета.Очистить();
			
	НоваяСтрока = ГруппировкиОтчета.Добавить();
	НоваяСтрока.Поле           = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.Использование  = Истина;
	НоваяСтрока.Представление  = НСтр("ru = 'Статья движения денежных средств'");
	НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия;	

	ПолеДанных = общ_ОтчетыВызовСервера.ДобавитьПолеНабораДанных(НаборДанных, "СтатьяДвиженияДенежныхСредств", "Статья движения денежных средств", "СтатьяДвиженияДенежныхСредств"); 
	
	СтруктураПараметров.Вставить("ДатаНач_" + Номер,СтрокаСценарий.ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон_" + Номер,КонецДня(СтрокаСценарий.ДатаКон));
	СтруктураПараметров.Вставить("Сценарий_" + Номер, СтрокаСценарий.Сценарий);
	СтруктураПараметров.Вставить("ПараметрНомерСценария_" + Номер,Номер);
    СтруктураПараметров.Вставить("ПараметрВидДанных_" + Номер,СтрокаСценарий.ВидДанных);
	
	общ_ОтчетыВызовСервера.УстановитьПараметр(Отчет.КомпоновщикНастроек.Настройки, "ПараметрНомерСценария_" + Номер, Номер); 
	
	Возврат ТекстЗапроса;
			  
КонецФункции

// Обработка заголовков таблицы
//
Процедура ОбработатьЗаголовки(ТабДок, КопияТаблицаСценарии, ДетализацияПоПериодам, Периодичность)

	НачальнаяКолонка = 0;
	
	КоличествоОбрабатываемыхСтрок = ?(ДетализацияПоПериодам, 2, 1);

	Для НомерСтроки = 1 По КоличествоОбрабатываемыхСтрок Цикл
		Для НомерКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
			// Определяем начало объединения
			ОбъединяемаяОбласть = ?(НомерСтроки = 1, "Период", "Итоги");
			Если ОбъединятьЯчейки(ТабДок, НомерСтроки, НомерКолонки, ОбъединяемаяОбласть) Тогда
				Если Не НачальнаяКолонка Тогда
					НачальнаяКолонка = НомерКолонки;
				КонецЕсли;
			ИначеЕсли НачальнаяКолонка Тогда
				// Завершение объединения
				ТекстЗаголовка = ТабДок.Область(НомерСтроки, НомерКолонки).Текст;
				ОбъединяемаяОбласть = ТабДок.Область(НомерСтроки, НачальнаяКолонка, НомерСтроки, НомерКолонки);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				НачальнаяКолонка = 0;
			Иначе
				НачальнаяКолонка = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПереименоватьЗаголовки(ТабДок, КопияТаблицаСценарии, ДетализацияПоПериодам, Периодичность);
	
КонецПроцедуры

Функция ОбъединятьЯчейки(ТабДок, НомерСтроки, НомерКолонки, ОбъединяемаяОбласть = "Период")
	
	Ячейка = ТабДок.Область(НомерСтроки, НомерКолонки);
	ЯчейкаСлед = ТабДок.Область(НомерСтроки, НомерКолонки + 1);
	
	Если Ячейка.Текст = ЯчейкаСлед.Текст Тогда 
		Если ОбъединяемаяОбласть <> "Период" Тогда
			Возврат Истина	
		Иначе
			Если ПустаяСтрока(Ячейка.Текст) И НомерКолонки = ТабДок.ШиринаТаблицы Тогда
				Возврат Ложь
			Иначе	
		 		Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

Процедура ПереименоватьЗаголовки(ТабДок, КопияТаблицаСценарии, ДетализацияПоПериодам, Периодичность)
	
	// Заголовки сравниваемых периодов
	НомерСтроки = 1;
	Для НомерКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
		Ячейка = ТабДок.Область(НомерСтроки, НомерКолонки);
		Попытка
		    НомерСценария = ?(ПустаяСтрока(Ячейка.Текст), 0, Число(Ячейка.Текст));
			СтрокаДанныхОтчета = КопияТаблицаСценарии[НомерСценария];
			Ячейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			Ячейка.Текст = СтрокаДанныхОтчета.ТекстПараметра;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ДетализацияПоПериодам Тогда
		Возврат;	
	КонецЕсли;
	
	// Заголовки итогов по сценариям
	НомерСтроки = 2;
	Для НомерКолонки = 1 По ТабДок.ШиринаТаблицы Цикл
		Ячейка = ТабДок.Область(НомерСтроки, НомерКолонки);
		ТекстЯчейки = Ячейка.Текст;
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			Ячейка.Текст = "Итого";
			Ячейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Иначе
			Попытка
				Период = Дата(ТекстЯчейки + " " + "00:00:00");
				Ячейка.Текст = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период, Периодичность);
				Ячейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли