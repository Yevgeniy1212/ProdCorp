&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не может быть открыт, т.к. система защиты не функционирует!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяОтчета = "ден_СравнительныйАнализДвиженияДенежныхСредств";
	ИзменятьСтруктуруОтчета = Истина;
	
	ИспользоватьСтандартныеНастройкиСтруктуры = Ложь;
	//Элементы.РазделыНастроек.Доступность = НЕ ИспользоватьСтандартныеНастройкиСтруктуры;
	
	ЗаполнитьНастройкамиПоУмолчанию();
	
	общ_ОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Создание схемы компоновки данных
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник                    = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя                = "ИсточникДанных1";
	Источник.СтрокаСоединения   = "";
	Источник.ТипИсточникаДанных = "Local";
	
	НаборДанных = общ_ОтчетыВызовСервера.ДобавитьНаборДанныхЗапрос(СхемаКомпоновки.НаборыДанных, Источник); 
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор);

	Элементы.ПоказатьНастройки.Видимость 			= ИзменятьСтруктуруОтчета;
	Элементы.ПоказатьНастройкиВсеДействия.Видимость	= ИзменятьСтруктуруОтчета;
	
	НадписьРезультат = "Результат";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючУникальности = ИмяОтчета;
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	общ_ОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	общ_ОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		//ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	
	Если Параметры.НеВосстанавливатьНастройки Тогда
		Настройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	Если не ЗначениеЗаполнено(Настройки) И НЕ Параметры.НеВосстанавливатьНастройки Тогда
		//ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
	Если Параметры.НеВосстанавливатьНастройки Тогда
		Для Каждого ПараметрОтчета Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			Имя 			= Строка(ПараметрОтчета.Параметр);
			Параметр 	= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрОтчета.Параметр);
			Если НЕ Параметр.Видимость Тогда
				Продолжить;
			КонецЕсли;
			ПараметрОтчета.Значение = ЭтаФорма[Имя];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = СписокПараметровОтчетаДляФормирования.ВыгрузитьЗначения();
	СохраняемыеРеквизитыФормы.Добавить("ТаблицаСценарии");
//	СохраняемыеРеквизитыФормы.Добавить("Показатели");
//	СохраняемыеРеквизитыФормы.Добавить("ОтображатьОтборИСортировку");
//	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьСтандартныеНастройкиСтруктуры");
	СохраняемыеТаблицыФормы = Новый Массив;
	СохраняемыеТаблицыФормы.Добавить("ГруппировкиОтчета");
	СохраняемыеТаблицыФормы.Добавить("Показатели");
	
	общ_ОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,?(ИзменятьСтруктуруОтчета,СохраняемыеТаблицыФормы,Неопределено),СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = СписокПараметровОтчетаДляФормирования.ВыгрузитьЗначения();
	СохраняемыеРеквизитыФормы.Добавить("ТаблицаСценарии");
//	СохраняемыеРеквизитыФормы.Добавить("Показатели");
//	СохраняемыеРеквизитыФормы.Добавить("ОтображатьОтборИСортировку");
//	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьСтандартныеНастройкиСтруктуры");
	
	СохраняемыеТаблицыФормы = Новый Массив;
	СохраняемыеТаблицыФормы.Добавить("ГруппировкиОтчета");
	СохраняемыеТаблицыФормы.Добавить("Показатели");
	
	ЗагруженыИндивидуальныеНастройки = Ложь;
	
	общ_ОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы,ЗагруженыИндивидуальныеНастройки);
	Если ИзменятьСтруктуруОтчета Тогда
		
		
		
		общ_ОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы,ЗагруженыИндивидуальныеНастройки);
		
//		ИспользоватьСтандартныеНастройкиСтруктуры = НЕ ЗагруженыИндивидуальныеНастройки;
		//Элементы.РазделыНастроек.Доступность = НЕ ИспользоватьСтандартныеНастройкиСтруктуры;
		
	КонецЕсли;
	ЗаполнитьНачальныеНастройкиНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Настройки) Тогда
		//ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДетализацияПоПериодамПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазделыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ДоступностьНастроек = Отчет.ТаблицаСценарии.Количество() > 0; 
	
	Если ТекущаяСтраница = Элементы.ГруппаГруппировка Тогда
		Элементы.Группировка.Доступность = ДоступностьНастроек;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаОтбор Тогда
		Элементы.КомпоновщикНастроекНастройкиОтбор.Доступность = ДоступностьНастроек;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РезультатОбработки = ОбработатьРасшифровку(Расшифровка);
	Если РезультатОбработки = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатОбработки.Действие = "ОткрытьЗначение" Тогда
		ПоказатьЗначение(,РезультатОбработки.Параметр);
	ИначеЕсли РезультатОбработки.Действие = "ВыбратьРасшифровку" Тогда
		ОбратчикВыборРасшифровки = Новый ОписаниеОповещения("ОбрататьВыборРасшифровки",ЭтаФорма,Расшифровка);
		ПоказатьВыборИзСписка(ОбратчикВыборРасшифровки,РезультатОбработки.Параметр);
	Иначе
		ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтаФорма,УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиИспользованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаСценарии

&НаКлиенте
Процедура ТаблицаСценарииПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСценарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Отчет.ТаблицаСценарии.Количество() = 0  Тогда
		ПредыдущаяСтрока = Отчет.ТаблицаСценарии.Количество() - 1;
		Если Не ЗначениеЗаполнено(Отчет.ТаблицаСценарии[ПредыдущаяСтрока].ВидДанных) Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно добавление новой строки, сначала необходимо заполнить ""Вид данных"".'");
			НезаполненноеПоле = "ТаблицаСценарии[" + ПредыдущаяСтрока + "].ВидДанных";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , НезаполненноеПоле, "Отчет", Отказ);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСценарииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И ТекущиеДанные <> Неопределено  Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидДанных) Тогда
			Если Отчет.ТаблицаСценарии.Количество() = 1 Тогда
				ЭталонныйСценарий = ТекущиеДанные.Сценарий;
				ЭталонныйВидДанных = ТекущиеДанные.ВидДанных;
			КонецЕсли;
			ОпределитьПериодичностьДанных();
			ЗаполнитьНачальныеНастройкиНаСервере();
			Оповестить("ИзмененыПараметрыНастройки",,ЭтаФорма);
		Иначе
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Вид данных""'");
			Поле = "ТаблицаСценарии[" + Строка(Элемент.ТекущиеДанные.НомерСтроки-1) + "].ВидДанных";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Отчет", ОтменаРедактирования);	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСценарииВидДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСценарии.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.ден_ВидыДанныхДляПланФактногоАнализаДДС.Сценарий") Тогда
		ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСценарииСценарийПриИзменении(Элемент)
	
	ОпределитьПериодичностьДанных();
	
	Для Каждого Строка Из Отчет.ТаблицаСценарии Цикл
	
		 Строка.ДатаНач = ДатаНачалаПериода(Строка.ДатаНач, Отчет.Периодичность);
		 Строка.ДатаКон = ДатаКонцаПериода(Строка.ДатаКон, Отчет.Периодичность);
	
	 КонецЦикла; 

 КонецПроцедуры
 
&НаКлиенте
Функция ДатаНачалаПериода(ДатаНачала, Периодичность)
	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(?(ДатаНачала='00010101',ТекущаяДата(),ДатаНачала),Периодичность);
 
КонецФункции 

&НаКлиенте
Функция ДатаКонцаПериода(ДатаОкончания, Периодичность)
	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(?(ДатаОкончания='00010101',ТекущаяДата(),ДатаОкончания),Периодичность);
 
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГРУППИРОВКА

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	Если Отчет.ТаблицаСценарии.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		Возврат;		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	Попытка
		РезультатВыполнения = СформироватьОтчетНаСервере();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ПоказатьПредупреждение(,"Отчет не сформирован из-за возникшей ошибки!");
		Возврат;
	КонецПопытки;
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ГруппировкиОтчета Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ГруппировкиОтчета Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Показатели Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Показатели Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбрататьВыборРасшифровки(РезультатВыбора,Расшифровка) Экспорт
	
	Если РезультатВыбора<>Неопределено Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка,РезультатВыбора.Значение);
		Если РезультатОбработки<>Неопределено Тогда
			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтаФорма,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРасшифровку(Расшифровка,ВариантРасшифровки = Неопределено)
	
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки).ДанныеРасшифровки;
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			Возврат Новый Структура("Действие,Параметр","ОткрытьЗначение",Данные[0].Значение);
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = общ_ОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию() Экспорт
	
	ЗаполнитьНачальныеНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		общ_ОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"общ_ОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			общ_ОтчетыВызовСервера.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Группировка"                       	 , ГруппировкиОтчета.Выгрузить());
	ПараметрыОтчета.Вставить("Показатели"                    	 	 , Показатели.Выгрузить());
	ПараметрыОтчета.Вставить("ТаблицаСценарии"                 	 	 , Отчет.ТаблицаСценарии.Выгрузить());
	ПараметрыОтчета.Вставить("КопияТаблицаСценарии"            	 	 , КопияТаблицаСценарии.Выгрузить());
	ПараметрыОтчета.Вставить("Периодичность"                 	 	 , Отчет.Периодичность);
	ПараметрыОтчета.Вставить("ДетализацияПоПериодам"                 , Отчет.ДетализацияПоПериодам);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                      , Ложь);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                     , Ложь);
	ПараметрыОтчета.Вставить("ВыводитьПодписи"                       , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                     , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                       , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"                 , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"                   , ИмяОтчета);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"             , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураПараметровОтчетаДляФормирования = Новый Структура;
	Для Каждого ЭлементПараметров Из СписокПараметровОтчетаДляФормирования Цикл
		СтруктураПараметровОтчетаДляФормирования.Вставить(ЭлементПараметров.Значение,ЭтотОбъект[ЭлементПараметров.Значение]);
	КонецЦикла;
	ПараметрыОтчета.Вставить("СтруктураПараметровОтчетаДляФормирования", СтруктураПараметровОтчетаДляФормирования);	
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	общ_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИПараметры()
	
	Попытка
		СтруктураПараметров = РеквизитФормыВЗначение("Отчет").ЗаполнениеПараметров;
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			мПараметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ЭлементСтруктуры.Ключ);
			Если мПараметр<>Неопределено И НЕ ЗначениеЗаполнено(мПараметр.Значение) Тогда
				мПараметр.Значение 		= ЭлементСтруктуры.Значение;
				мПараметр.Использование	= Истина;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт

	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
			
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
			
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
		
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВыгрузитьСписокВСтроку()

&НаСервере
Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ОтчетОбъект <> Неопределено Тогда 
		ПараметрНачало = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
		ПараметрКонец = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
		ПараметрПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если ПараметрНачало = Неопределено И  ПараметрКонец = Неопределено И ПараметрПериод = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		НачалоПериода = ?(ПараметрНачало=Неопределено,ПараметрПериод.Значение,ПараметрНачало.Значение);
		КонецПериода  = ?(ПараметрКонец=Неопределено,ПараметрПериод.Значение,ПараметрКонец.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки)
	
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ПолеРодителя.Поле;
				НС.Значение = ПолеРодителя.Значение;
				НС.ВидСравнения = ?(ЗначениеЗаполнено(ПолеРодителя.Значение),?(ПолеРодителя.Иерархия,"ВИерархии","Равно"),"Незаполнено");
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

// Определяет максимальную из периодичностей сценариев, выбранных
// в ТЧ
//
// Параметры: нет
//
&НаСервере
Процедура ОпределитьПериодичностьДанных()

	ТекущаяПериодичность = Перечисления.фин_Периодичность.День;
	
	Для Каждого Строка Из Отчет.ТаблицаСценарии Цикл
	
		Если Не Строка.Сценарий.Пустая() 
			И фин_УправлениеБюджетированием.ЧислоДнейВПериоде(Строка.Сценарий.Периодичность)>фин_УправлениеБюджетированием.ЧислоДнейВПериоде(ТекущаяПериодичность) Тогда
			ТекущаяПериодичность = Строка.Сценарий.Периодичность;
		КонецЕсли;
	
	КонецЦикла;
	
	Отчет.Периодичность = ТекущаяПериодичность;
	
КонецПроцедуры // ОпределитьПериодичностьДанных()

&НаСервере
Процедура ЗаполнитьНачальныеНастройкиНаСервере()

	Отчеты.ден_СравнительныйАнализДвиженияДенежныхСредств.ЗаполнитьНачальныеНастройки(Отчет, СхемаКомпоновкиДанных, КопияТаблицаСценарии, ГруппировкиОтчета,Показатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	                    
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НоваяСтрока = ГруппировкиОтчета.Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Представление  = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("НомерСценария");
	СписокПолей.Добавить("Период");
	
	// Добавляем в список запрещенных полей ресурсы
	Для Каждого Показатель Из Показатели Цикл
		Для НомерПоказателя = 0 По Отчет.ТаблицаСценарии.Количество() - 1 Цикл
			ИмяРесурса = Показатель.Поле + "_" + НомерПоказателя;
		    СписокПолей.Добавить(ИмяРесурса);
		КонецЦикла; 
	КонецЦикла;
	
	ДополнитьЗапрещенныеПоляГруппировкиПоПериодичности(СписокПолей);	
	
	Если Режим = "Группировка" Тогда
		общ_ОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Процедура ДополнитьЗапрещенныеПоляГруппировкиПоПериодичности(СписокПолей)

	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("День");
	СписокПериодов.Добавить("Неделя");
	СписокПериодов.Добавить("Декада");
	СписокПериодов.Добавить("Месяц");
	СписокПериодов.Добавить("Квартал");
	СписокПериодов.Добавить("Полугодие");
	СписокПериодов.Добавить("Год");
	
	Периодичность = Строка(Отчет.Периодичность);
	
	НачальныйИндекс = СписокПериодов.Индекс(СписокПериодов.НайтиПоЗначению(?(Периодичность="","День",Периодичность)));
	
	Для Сч = НачальныйИндекс По СписокПериодов.Количество()-1 Цикл
		ТекущаяПериодичность = СписокПериодов.Получить(Сч).Значение;
		СписокПолей.Добавить("Период" + ТекущаяПериодичность);
	КонецЦикла;

КонецПроцедуры



