#Если Клиент Тогда
// Валюта регламентированного учета организаций
Перем мВалютаРегламентированногоУчета Экспорт;

// Настройка периода
Перем НП Экспорт;

// Все возможные группировки
Перем мДеревоГруппировки Экспорт;
// Все возможные показатели
Перем мТаблицаПоказатели Экспорт; 
// Все возможные фильтры
Перем мДеревоФильтры Экспорт;

// Все возможные описания типов
Перем мТаблицаТипы Экспорт;

//Запрос к базе
Перем Запрос;

// Свойства метаданных ресурсов регистра
Перем мСтруктураМетаданныеРегистраРесурсы;
// Свойства метаданных измерений регистра
Перем мСтруктураМетаданныеРегистраИзмерения;

// Структура, содержащая допустимые типы фильтров
Перем мСтруктураТиповФильтров Экспорт;
// Значение типа фильтра по умолчанию
Перем мТипФильтраПоУмолчанию Экспорт;
// Структура, содержащая допустимые поля реквизитов, по которым
// выполняется сортировка показателей (начост, приход, расход и т.д.)
Перем мСтруктураНазванийПолейСортировки Экспорт;

// Имя отчета в метаданных
Перем мИмяОтчета Экспорт;

Перем мНазваниеОтчета Экспорт;

// Список имен быстрых отборов
Перем мСписокОбязательныхОтборов Экспорт;

// служебная переменная для корректной группировки строк
Перем КоличествоНачатыхУровней;

//Формируется Отчет по регистраторам
Перем ЕстьРегистратор;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Определяет пустую ссылку одного из типов значений
// Параметры
//  ОписаниеТиповЗначения - Описание типов
//
// Возвращаемое значение:
//   Пустая ссылка (справочник, перечисление)
//
Функция ОпределитьПустоеЗначениеТипа(ОписаниеТиповЗначения) Экспорт

	Если ТипЗнч(ОписаниеТиповЗначения) = Тип("ОписаниеТипов") Тогда
		
		МассивТипов = ОписаниеТиповЗначения.Типы();
		Для каждого Тип Из МассивТипов Цикл
		
			Если Тип <> Тип("СписокЗначений") Тогда
			
				Возврат Новый(Тип);
			
			КонецЕсли; 
		
		КонецЦикла; 

	Иначе

		Возврат Неопределено;
		
	КонецЕсли; 

КонецФункции //ОпределитьПустоеЗначениеТипа()

// Функция возвращает ВидОтбора по строке
// 
// Параметры
//  СтрокаОтбора, строка вида отбора
// 
// Возвращаемое значение 
//  ЗначениеВозврата, ВидОтбора
Функция ВозвратитьВидаОтбораПоСтроке(СтрокаОтбора) Экспорт

	ЗначениеВозврата = Неопределено;
	
	СтрокаОтбора = ВРег(СтрокаОтбора);
	
	Если СтрокаОтбора = "РАВНО" Тогда
		ЗначениеВозврата = ВидСравнения.Равно;
	ИначеЕсли СтрокаОтбора = "НЕ РАВНО" Тогда
		ЗначениеВозврата = ВидСравнения.НеРавно;
	ИначеЕсли СтрокаОтбора = "В СПИСКЕ" Тогда
		ЗначениеВозврата = ВидСравнения.ВСписке;
	ИначеЕсли СтрокаОтбора = "НЕ В СПИСКЕ" Тогда
		ЗначениеВозврата = ВидСравнения.НеВСписке;
	ИначеЕсли СтрокаОтбора = "В ГРУППЕ ИЗ СПИСКА" Тогда
		ЗначениеВозврата = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли СтрокаОтбора = "НЕ В ГРУППЕ ИЗ СПИСКА" Тогда
		ЗначениеВозврата = ВидСравнения.НеВСпискеПоИерархии;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Процедура устанавливает значения быстрых отборов формы в соответствии
//  с табличной частью ФильтрыОтчета
// 
// Параметры
//  ФормаБыстрыхОтборов - форма, на которой расположены контролы быстрых отборов
//
// Возвращаемые значения
//  НЕТ
Процедура ПроставитьЗначенияБыстрыхОтборов(ФормаБыстрыхОтборов) Экспорт

	СписокОбработанныхОтборов = Новый СписокЗначений;
	
	Для каждого Строки Из ФильтрыОтчета Цикл

		Если мСписокОбязательныхОтборов.НайтиПоЗначению(Строки.ИмяФильтра) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
	
		Если СписокОбработанныхОтборов.НайтиПоЗначению(Строки.ИмяФильтра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ФормаБыстрыхОтборов.ЭлементыФормы["Флажок" + Строки.ИмяФильтра].Значение = Строки.ИспользованиеФильтра;
		ФормаБыстрыхОтборов.ЭлементыФормы["ВидСравнения" + Строки.ИмяФильтра].Значение = ВозвратитьВидаОтбораПоСтроке(Строки.ТипФильтра);
		Если Строки.ТипФильтра = "РАВНО" ИЛИ Строки.ТипФильтра = "НЕ РАВНО" Тогда
			ФормаБыстрыхОтборов.ЭлементыФормы["Значение" + Строки.ИмяФильтра].Значение = Строки.ЗначениеФильтра;
		Иначе
			СписокЗначенийОтбора = Новый СписокЗначений;
			Для каждого СтрокаФильтров Из ФильтрыОтчета Цикл
				Если СтрокаФильтров.ИмяФильтра = Строки.ИмяФильтра Тогда
					СписокЗначенийОтбора.Добавить(СтрокаФильтров.ЗначениеФильтра);
				КонецЕсли;
			КонецЦикла;
			ФормаБыстрыхОтборов.ЭлементыФормы["Значение" + Строки.ИмяФильтра].Значение = СписокЗначенийОтбора;
		КонецЕсли;

		СписокОбработанныхОтборов.Добавить(Строки.ИмяФильтра);
	
	КонецЦикла; 

КонецПроцедуры

// Процедура подготавливает таблицы, содержащие все возможные группировки, показатели отчета
// и описания типов возможных фильтров. Заполнение таблиц производится по данным макета отчета,
// "ПараметрыОтчетаВедомостьПоРасчетамСРодителями".
//
Процедура ЗаполнитьНачальныеНастройки(ВосстановлениеНастройки = Ложь) Экспорт

	мНазваниеОтчета = "Ведомость по учету ГСМ";

	мТаблицаПоказатели.Очистить();
	мДеревоГруппировки.Строки.Очистить();
	мДеревоФильтры.Строки.Очистить();

	мТаблицаТипы.Очистить();

	//Создается структура, содержащая данные об измерениях регистров.
	
	мСтруктураМетаданныеРегистраИзмерения= Новый Структура;
	СтруктураМетаданныеРегистрХозрасчетный=Новый Структура;

	МассивВсехТипов = Новый Массив;

	//Заполнение таблиц по данным макета.
	МакетПараметрыОтчетов = ПолучитьМакет("ПараметрыОтчетаВедомостьУчетаГСМ");

	ОбластьПоказатели = МакетПараметрыОтчетов.ПолучитьОбласть("Показатели");

	ОбластьПоказателиВысота = ОбластьПоказатели.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьПоказателиВысота Цикл
		СтрПоказатели = мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = СокрЛП(ОбластьПоказатели.Область(НСтр, 1).Текст);
		СтрПоказатели.ПредставлениеПоля = СокрЛП(ОбластьПоказатели.Область(НСтр, 2).Текст);
		СтрПоказатели.ОписаниеПоля      = СокрЛП(ОбластьПоказатели.Область(НСтр, 3).Текст);
		СтрПоказатели.ВклПоУмолчанию    = Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 4).Текст));
		СтрПоказатели.ФорматнаяСтрока   = СокрЛП(ОбластьПоказатели.Область(НСтр, 5).Текст);
		СтдВалюта         = СокрЛП(ОбластьПоказатели.Область(НСтр, 8).Текст);
		СтрПоказатели.ПредставлениеПоля = СтрПоказатели.ПредставлениеПоля + " в " +мВалютаРегламентированногоУчета;

		Если ПустаяСтрока(СтрПоказатели.ОписаниеПоля) Тогда
			СтрПоказатели.ОписаниеПоля = СтрПоказатели.ИмяПоля;
		КонецЕсли;

		СтрокаПоказателя = ПоказателиОтчета.Добавить();
		СтрокаПоказателя.ИмяПоказателя = СтрПоказатели.ИмяПоля;
		СтрокаПоказателя.ПредставлениеПоказателя = СтрПоказатели.ПредставлениеПоля;
		СтрокаПоказателя.ОписаниеПоказателя = СтрПоказатели.ОписаниеПоля;
		СтрокаПоказателя.ИспользованиеПоказателя = СтрПоказатели.ВклПоУмолчанию;
	КонецЦикла;

	ОбластьТипов = МакетПараметрыОтчетов.ПолучитьОбласть("Типы");
	ОбластьТиповВысота=ОбластьТипов.ВысотаТаблицы;

	ТекГруппировка="";
	МассивТипов=Новый Массив;
	СтрТаблицаТипы="";

	Для Нстр = 1 По ОбластьТиповВысота цикл
		Группировка=СокрЛП(ОбластьТипов.Область(НСтр, 1).Текст);
		Если Группировка<>ТекГруппировка Тогда
			Если МассивТипов.Количество()>0 Тогда
				СтрТаблицаТипы.ОписаниеТипов=Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;

			СтрТаблицаТипы=мТаблицаТипы.Добавить();
			ТекГруппировка=Группировка;
			МассивТипов=Новый Массив;

			СтрТаблицаТипы.ИмяПоля=Группировка;
			ТекстТипа=СокрЛП(ОбластьТипов.Область(НСтр, 2).Текст);
			Если (Найти(ТекстТипа,".")=0) И (ТекстТипа<>"Число") И (ТекстТипа<>"Строка") И (ТекстТипа<>"Дата") И (ТекстТипа<>"Булево") Тогда

				Для Каждого Элемент Из Метаданные[ТекстТипа] Цикл
					МассивТипов.Добавить(Тип(Лев(ТекстТипа,СтрДлина(ТекстТипа)-1)+"Ссылка."+Элемент.Имя));
				КонецЦикла;

			Иначе

				МассивТипов.Добавить(Тип(ТекстТипа));

			КонецЕсли;

		Иначе
			ТекстТипа=СокрЛП(ОбластьТипов.Область(НСтр, 2).Текст);
			Если (Найти(ТекстТипа,".")=0) И (ТекстТипа<>"Число") И (ТекстТипа<>"Строка") И (ТекстТипа<>"Дата") И (ТекстТипа<>"Булево") Тогда

				Для Каждого Элемент Из Метаданные[ТекстТипа] Цикл
					МассивТипов.Добавить(Тип(Лев(ТекстТипа,СтрДлина(ТекстТипа)-1)+"Ссылка."+Элемент.Имя));
				КонецЦикла;

			Иначе

				МассивТипов.Добавить(Тип(ТекстТипа));

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если МассивТипов.Количество()>0 Тогда
		СтрТаблицаТипы.ОписаниеТипов=Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;

	ОбластьГруппировки = МакетПараметрыОтчетов.ПолучитьОбласть("Группировки");
	ОбластьГруппировкиВысота = ОбластьГруппировки.ВысотаТаблицы;

	Запрос = Новый Запрос;

	Запрос.Текст = "";

	Для НСтр = 1 По ОбластьГруппировкиВысота Цикл
		СтрГруппировки = мДеревоГруппировки.Строки.Добавить();
		СтрГруппировки.ИмяПоля           = СокрЛП(ОбластьГруппировки.Область(НСтр, 1).Текст);
		СтрГруппировки.ПредставлениеПоля = СокрЛП(ОбластьГруппировки.Область(НСтр, 2).Текст);
		СтрГруппировки.ОписаниеПоля      = СокрЛП(ОбластьГруппировки.Область(НСтр, 3).Текст);
		СтрГруппировки.ВклПоУмолчанию    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 4).Текст));
		СтрГруппировки.РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 5).Текст));
		СтрГруппировки.ТипИтога = ?(Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст)),"Иерархия", "Элементы");
        СтрГруппировки.ВозможенФильтр    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 8).Текст));
		
		ИмяПоля = СтрГруппировки.ИмяПоля;

		Если ПустаяСтрока(СтрГруппировки.ОписаниеПоля) Тогда
			СтрГруппировки.ОписаниеПоля = СтрГруппировки.ИмяПоля;
		КонецЕсли;

		СтрВыводитьПустые = СокрЛП(ОбластьГруппировки.Область(НСтр, 9).Текст);
		Если Нрег(СтрВыводитьПустые) = Нрег("Истина")
			Или Нрег(СтрВыводитьПустые) = Нрег("Ложь") Тогда
			СтрГруппировки.ВыводитьПустые = Булево(СтрВыводитьПустые);
		Иначе
			СтрГруппировки.ВыводитьПустые = СтрВыводитьПустые;
		КонецЕсли;

		Если СтрГруппировки.ВыводитьПустые = Ложь Тогда
			СтрГруппировки.ВыводитьПустыеСвязаннаяГруппировка = СокрЛП(ОбластьГруппировки.Область(НСтр, 10).Текст);
		КонецЕсли;

		// Добавляем группировки по умолчанию
		Если СтрГруппировки.ВклПоУмолчанию Тогда
			СтрокаГруппировки = ГруппировкиОтчета.Добавить();
			СтрокаГруппировки.ИмяГруппировки = СтрГруппировки.ИмяПоля;
			СтрокаГруппировки.ПредставлениеГруппировки = СтрГруппировки.ПредставлениеПоля;
			СтрокаГруппировки.ОписаниеГруппировки = СтрГруппировки.ОписаниеПоля;
			СтрокаГруппировки.РассчитыватьИтоги = СтрГруппировки.РассчитыватьИтоги;
			СтрокаГруппировки.ТипИтога = СтрГруппировки.ТипИтога;
		КонецЕсли;
		
		Если СтрГруппировки.ВозможенФильтр Тогда

			СтрФильтры = мДеревоФильтры.Строки.Добавить();
			СтрФильтры.ИмяПоля           = СтрГруппировки.ИмяПоля;
			СтрФильтры.ПредставлениеПоля = СтрГруппировки.ПредставлениеПоля;
			СтрФильтры.ОписаниеПоля      = СтрГруппировки.ОписаниеПоля;
			СтрФильтры.ВклПоУмолчанию    = СтрГруппировки.ВклПоУмолчанию;

			Если ПустаяСтрока(СтрФильтры.ОписаниеПоля) Тогда
				СтрФильтры.ОписаниеПоля = СтрФильтры.ИмяПоля;
			КонецЕсли;

			НайденнаяСтрока = мТаблицаТипы.Найти(СтрГруппировки.ИмяПоля, "ИмяПоля");
			СтрФильтры.ОписаниеТипов = НайденнаяСтрока.ОписаниеТипов;
			СтрФильтры.ИмяПоляВладелец = СокрЛП(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));
			
			// Добавляем фильтры по умолчанию
			СтрокаФильтра = ФильтрыОтчета.Добавить();
			СтрокаФильтра.ИмяФильтра = СтрГруппировки.ИмяПоля;
			СтрокаФильтра.ПредставлениеФильтра = СтрГруппировки.ПредставлениеПоля;
			СтрокаФильтра.ТипФильтра = "РАВНО";

		КонецЕсли;

	КонецЦикла;

	Для Каждого Строка Из мДеревоФильтры.Строки Цикл

		Типы = Строка.ОписаниеТипов.Типы();

		Для Каждого ЭлементТипа Из Типы Цикл

			// Если тип примитивный, то не анализируем
			Если ЭлементТипа = Тип("Число")
				ИЛИ ЭлементТипа = Тип("Строка")
				ИЛИ ЭлементТипа = Тип("Дата") 
				ИЛИ ЭлементТипа = Тип("Булево") Тогда
				Прервать;
			КонецЕсли;

			ПустоеЗначениеТипа = Новый(ЭлементТипа);

			МетаданныеСправочника = Метаданные.Справочники.Найти(ПустоеЗначениеТипа.Метаданные().Имя);

			// Если это не справочник, то не анализируем
			Если МетаданныеСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ВладелецСправочника = ПустоеЗначениеТипа.Владелец;
			Если ВладелецСправочника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ПроверяемаяСтрока Из мДеревоФильтры.Строки Цикл
				Если ПроверяемаяСтрока.ОписаниеТипов.СодержитТип(ТипЗнч(ВладелецСправочника)) Тогда
					Строка.ИмяПоляВладелец = ПроверяемаяСтрока.ИмяПоля;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Служебная процедура, устанавливает признаки возможности расчета итогов по иерархии и 
// принадлежности поля к ссылочным типам
//
Процедура ЗаполнитьПараметрыПолей(ТаблицаГруппировки)

	Для Каждого СтрокаГруппировки Из ТаблицаГруппировки Цикл

		Если ПустаяСтрока(СтрокаГруппировки.ОписаниеГруппировки) Тогда
			ОписаниеПоляЗапроса = СтрокаГруппировки.ОписаниеГруппировки;
		Иначе
			ОписаниеПоляЗапроса = СтрокаГруппировки.ИмяГруппировки;
		КонецЕсли;

		// Описание типов получаем либо из заполненной таблицы фильтров, либо заново
		НайденнаяСтрока = мДеревоФильтры.Строки.Найти(СтрокаГруппировки.ИмяГруппировки, "ИмяПоля", Истина);

		Если НайденнаяСтрока <> Неопределено Тогда
			ОписаниеТиповГруппировки = НайденнаяСтрока.ОписаниеТипов;
		Иначе
			Возврат;
		КонецЕсли;

		МассивТипов = ОписаниеТиповГруппировки.Типы();

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПараметрыПолей()

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)

	ТабДок = СтруктураПараметров.ТабДок;

	ОбластьЗначенияПоказателя = СтруктураПараметров.ЗначенияПоказателя;

	ЗначениеНачальныйОстатокСумма		 	= "";
	ЗначениеНачальныйОстатокКоличество		= "";
	ЗначениеПриходСумма		 				= "";
	ЗначениеПриходКоличество 				= "";
	ЗначениеРасходСумма						= "";
	ЗначениеРасходКоличество				= "";
	ЗначениеКонечныйОстатокСумма			= "";
	ЗначениеКонечныйОстатокКоличество		= "";

	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказатели Цикл

		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);		

		ЗначениеНачальныйОстатокСумма		= ЗначениеНачальныйОстатокСумма			+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "НачальныйОстаток"], ФорматПоказателя);
		ЗначениеНачальныйОстатокКоличество	= ЗначениеНачальныйОстатокКоличество	+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "НачальныйОстаток"], ФорматПоказателя);
		ЗначениеКонечныйОстатокСумма 		= ЗначениеКонечныйОстатокСумма			+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "КонечныйОстаток"], ФорматПоказателя);
		ЗначениеКонечныйОстатокКоличество	= ЗначениеКонечныйОстатокКоличество		+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "КонечныйОстаток"], ФорматПоказателя);
		ЗначениеПриходСумма          		= ЗначениеПриходСумма					+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "Приход"], ФорматПоказателя);
		ЗначениеПриходКоличество      		= ЗначениеПриходКоличество				+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "Приход"], ФорматПоказателя);
		ЗначениеРасходСумма        		 	= ЗначениеРасходСумма 					+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "Расход"], ФорматПоказателя);
		ЗначениеРасходКоличество   		 	= ЗначениеРасходКоличество				+ Символы.ПС+" " 
		+ Формат(Выборка[ИмяПоказателя 
		+ "Расход"], ФорматПоказателя);
		
	КонецЦикла;

	ОбластьЗначенияПоказателя.Параметры.НачальнаяСумма	 			= Сред(ЗначениеНачальныйОстатокСумма,3);
	ОбластьЗначенияПоказателя.Параметры.СуммаПриход    	 			= Сред(ЗначениеПриходСумма,3);
	ОбластьЗначенияПоказателя.Параметры.СуммаРасход    	 			= Сред(ЗначениеРасходСумма,3);
	ОбластьЗначенияПоказателя.Параметры.КонечнаяСумма	  			= Сред(ЗначениеКонечныйОстатокСумма,3);

	ТабДок.Присоединить(ОбластьЗначенияПоказателя);

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиГруппировку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = СтруктураПараметров.ЗначениеГруппировки;
	ОбластьЗначенияПоказателя    = СтруктураПараметров.ЗначенияПоказателя;

	ОформлениеСтроки                = СтруктураПараметров.ОформлениеСтроки;
	ОформлениеСтрокиИерархии        = СтруктураПараметров.ОформлениеСтрокиИерархии;

	СтруктураВыводГруппировок = СтруктураПараметров.СтруктураВыводГруппировок;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(ОформлениеСтроки.Количество()-СтруктураПараметров.МассивГруппировки.Количество(),0);

	// Берутся группировки все подряд, 
	//Если Номер>0 Тогда СтруктураПараметров.ТабДок.НачатьГруппуСтрок(); КонецЕсли;
	Пока Выборка.Следующий() Цикл

		ИспользоватьОформление = РаскрашиватьИзмерения;
		Если ОформлениеСтроки.Количество()>0 Тогда
			ИндексОформления = Сдвиг+((Номер) - (ОформлениеСтроки.Количество()-Сдвиг)*Цел((Номер)/(ОформлениеСтроки.Количество()-Сдвиг)));
		Иначе
			ИспользоватьОформление = Ложь;
		КонецЕсли;

		УровеньЗаписи   = Выборка.Уровень();
		СдвигУровня     = 0;

		ИмяГруппировки  = Выборка.Группировка();

		ТабДок = СтруктураПараметров.ТабДок;

		ЗначениеГруппировки = "";

		ЗначениеРасшифровки = Неопределено;

		ТипЗаписиВыборки = Выборка.ТипЗаписи();

		МассивВыводГруппировок = Новый Массив;

		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда

				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;

			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

		ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			Если СтруктураВыводГруппировок.Свойство(ИмяГруппировки, МассивВыводГруппировок) Тогда

				КоличествоДопПолей=МассивВыводГруппировок.Количество();
				ВыведеноГруппировок=0;

				Для Каждого ВыводимаяГруппировка Из МассивВыводГруппировок Цикл

					ВыведеноГруппировок=ВыведеноГруппировок+1;

					ЗначениеТекущейГруппировки = "" + Выборка[ВыводимаяГруппировка];

					Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
						ЗначениеТекущейГруппировки = "<...>";
					КонецЕсли;

					ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки + ", ";

					Если ЗначениеРасшифровки = Неопределено Тогда 
						ЗначениеРасшифровки = Выборка[ВыводимаяГруппировка];
					КонецЕсли;

					МассивРасшифровки.Добавить(ВыводимаяГруппировка);

				КонецЦикла;

				// Если группировки нет в списке, то не выводим, нам нужна только выборка, 
				// т.о. искусственно получаем группировку по набору полей, указанных в одной строке
				// таблицы группировок
			Иначе

				МассивРасшифровки.Добавить(ИмяГруппировки);
				Перейти ~М1;

			КонецЕсли;

			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];

			Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
				ЗначениеТекущейГруппировки = "<...>";
			КонецЕсли;

			ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

			Если ЗначениеРасшифровки = Неопределено Тогда 
				ЗначениеРасшифровки = Выборка[ИмяГруппировки];
			КонецЕсли;

		КонецЕсли;

		// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
		// заранее рассчитанное для каждой группировки
		Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

			МассивРасшифровки.Добавить(ИмяГруппировки);

			ЗначениеРасшифровкиСтрока = Новый Структура;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
			КонецЦикла;

			СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

			// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
			// заранее рассчитанное для каждой группировки
		ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			Если Номер>0 Тогда
				СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
			КонецЕсли;
		КонецЕсли;

		УровеньЗаписи = УровеньЗаписи - СдвигУровня;

		Если (Не ПустаяСтрока(ИмяГруппировки)) И (Найти(ЗначениеГруппировки,"{}НеВыводить")=0) Тогда
			// Выводятся только группировки, которые могут иметь значение на данном уровне обхода.

			НачСтрока = ТабДок.ВысотаТаблицы+1;

			//при выводе группировки смотрим ее уровень

			//Если уровень повысился:
			Пока УровеньЗаписи > КоличествоНачатыхУровней Цикл
				ТабДок.НачатьГруппуСтрок();
				КоличествоНачатыхУровней = КоличествоНачатыхУровней + 1;
			КонецЦикла;

			//Если уровень понизился
			Пока УровеньЗаписи < КоличествоНачатыхУровней Цикл
				ТабДок.ЗакончитьГруппуСтрок();
				КоличествоНачатыхУровней = КоличествоНачатыхУровней - 1;
			КонецЦикла;

			ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);
			ТабДок.Область(ТабДок.ВысотаТаблицы,1).Расшифровка = ЗначениеРасшифровкиСтрока;

			ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
			ОбластьЗначениеГруппировки.Параметры.Расшифровка = ЗначениеРасшифровки;
			ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

			ТабДок.Присоединить(ОбластьЗначениеГруппировки);

			ВывестиПоказатели(Выборка, СтруктураПараметров);

			Если ИспользоватьОформление Тогда

				Область = ТабДок.Область(НачСтрока, 2, ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы);

				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

					//Область.Шрифт      = ОформлениеСтроки[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтроки[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтроки[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтроки[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтроки[ИндексОформления].ЦветУзора;

				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда

					//Область.Шрифт      = ОформлениеСтрокиИерархии[ИндексОформления].Шрифт;
					Область.ЦветФона   = ОформлениеСтрокиИерархии[ИндексОформления].ЦветФона;
					Область.ЦветТекста = ОформлениеСтрокиИерархии[ИндексОформления].ЦветТекста;
					//Область.Узор       = ОформлениеСтрокиИерархии[ИндексОформления].Узор;
					//Область.ЦветУзора  = ОформлениеСтрокиИерархии[ИндексОформления].ЦветУзора;
				КонецЕсли;
			КонецЕсли;

			ТабДок.Область(	ТабДок.ВысотаТаблицы,2, 
			ТабДок.ВысотаТаблицы,2).РазмещениеТекста =  ТипРазмещенияТекстаТабличногоДокумента.Переносить;

			Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				ТабДок.Область(ТабДок.ВысотаТаблицы, 2, ТабДок.ВысотаТаблицы,2).Шрифт = СтруктураПараметров.ШрифтГрупп;
			КонецЕсли;
		КонецЕсли;

~М1:	Если Номер+1 < СтруктураПараметров.МассивГруппировки.Количество() Тогда

			// На каждом уровне используется своя копия структуры расшифровок
			КопияМассивРасшифровки = Новый Массив;
			Для Каждого Элемент Из МассивРасшифровки Цикл
				КопияМассивРасшифровки.Добавить(Элемент);
			КонецЦикла;
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СтруктураПараметров.МассивГруппировки[Номер+1]), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки);

		КонецЕсли; 
	КонецЦикла;
	//Если Номер>0 Тогда СтруктураПараметров.ТабДок.ЗакончитьГруппуСтрок(); КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()

// Функция формирует текст запроса по переданной в качестве параметра таблице.
// Параметры:
//			Источник (строка): Таблица, по которой строится запрос.
//			КопияГруппировкиОтчета (таблица значений): таблица выбранных группировок.
//			СтруктураДоступныхГруппировок (структура): содержит поля, возможные к выбору из таблицы - источника.
//			СтруктураДоступныхПоказателей (структура): содержит ресурсы, возможные к получению из таблицы - источника.
// Возвращаемое значение:
//			Текст запроса к таблице - источнику.
//
Функция СформироватьТекстЗапроса(Источник,КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей)

	ТекстПоляЗапроса = "";
	СтруктураИзмеренийРегистра=Новый Структура;
	
	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ОписаниеПоляЗапроса = "";
		Если Не ПустаяСтрока(СтрокаГруппировки.ОписаниеГруппировки) Тогда
			ОписаниеПоляЗапроса = СтрокаГруппировки.ОписаниеГруппировки;
		Иначе 
			ОписаниеПоляЗапроса = СтрокаГруппировки.ИмяГруппировки;
		КонецЕсли;

		СтруктураДоступныхГруппировок.Свойство(СтрокаГруппировки.ИмяГруппировки,ОписаниеПоляЗапроса);

		ТекстПоляЗапроса = ТекстПоляЗапроса + ",
		|	" + ОписаниеПоляЗапроса + " КАК " + СтрокаГруппировки.ИмяГруппировки;

	КонецЦикла;
	
	Для Каждого СтрокаПоказателей Из мТаблицаПоказатели Цикл

		ОписаниеПоказателя="";

		Для Каждого ЭлементСтруктуры Из мСтруктураНазванийПолейСортировки Цикл	

			//Если СтрокаПоказателей.ИмяПоля="Количество" Тогда
			//	Продолжить;
			//КонецЕсли;

			ИмяПоказателя=СтрокаПоказателей.ИмяПоля+ЭлементСтруктуры.Ключ;

			СтруктураДоступныхПоказателей.Свойство(ИмяПоказателя,ОписаниеПоказателя);

			ТекстПоляЗапроса=ТекстПоляЗапроса+",
			|"+ОписаниеПоказателя+" КАК "+ИмяПоказателя;

		КонецЦикла;

	КонецЦикла;

	// Фильтр на значения измерений регистра, передаваемый в качестве параметров
	ТекстФильтры = "";

	// Фильтр на значения других полей, накладываемый на весь запрос
	ТекстОбщиеФильтры = "";

	ТаблицаСписокВсехФильтров = ФильтрыОтчета.Выгрузить();
	ТаблицаСписокВсехФильтров.Свернуть("ИмяФильтра, ПредставлениеФильтра, ТипФильтра, ИспользованиеФильтра",);

	СтруктураПоиска = Новый Структура("ИмяФильтра");

	НомерФильтра =0;

	// Фильтр
	Для Каждого СтрокаФильтры Из ТаблицаСписокВсехФильтров Цикл

		Если НЕ СтрокаФильтры.ИспользованиеФильтра Тогда
			Продолжить;
		КонецЕсли; 

		НомерФильтра = НомерФильтра+1;

		СтруктураПоиска.ИмяФильтра = СтрокаФильтры.ИмяФильтра;

		НайденнаяСтрока = мДеревоФильтры.Строки.Найти(СтрокаФильтры.ИмяФильтра, "ИмяПоля", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			ОписаниеФильтра = НайденнаяСтрока.ОписаниеПоля;
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеФильтра) Тогда
			ОписаниеФильтра = СтрокаФильтры.ИмяФильтра;
		КонецЕсли;

		НайденныеСтроки = ФильтрыОтчета.НайтиСтроки(СтруктураПоиска);

		// Формируем текст вложенного фильтра
		ТекстВложенногоФильтры = "";

		СтрЗначенияФильтры = "";

		Массив = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			Массив.Добавить(НайденнаяСтрока.ЗначениеФильтра);

			// Строка для шапки отчета
			СтрЗначенияФильтры = СтрЗначенияФильтры + ", " + НайденнаяСтрока.ЗначениеФильтра;
		
		КонецЦикла; 
		Запрос.УстановитьПараметр("Параметр" + НомерФильтра, Массив);

		ТекстВложенногоФильтры = ТекстВложенногоФильтры + ",  &Параметр" + НомерФильтра;

		Если Врег(СтрокаФильтры.ТипФильтра) = "РАВНО" Тогда
			ОператорСравнения = " В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "В СПИСКЕ" Тогда
			ОператорСравнения = " В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ РАВНО" Тогда
			ОператорСравнения = " НЕ В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ В СПИСКЕ" Тогда
			ОператорСравнения = " НЕ В ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "В ГРУППЕ ИЗ СПИСКА" Тогда
			ОператорСравнения = " В ИЕРАРХИИ ";
		ИначеЕсли Врег(СтрокаФильтры.ТипФильтра) = "НЕ В ГРУППЕ ИЗ СПИСКА" Тогда
			ОператорСравнения = " НЕ В ИЕРАРХИИ ";
		КонецЕсли;

		ТекстВложенногоФильтры = Сред(СокрЛП(ТекстВложенногоФильтры),2);

		Если Не ПустаяСтрока(ТекстВложенногоФильтры) Тогда

			// Фильтры, передаваемые в качестве параметров таблицы регистра

			ПолеЗапроса = "";
			СтруктураДоступныхГруппировок.Свойство(СтруктураПоиска.ИмяФильтра,ПолеЗапроса);

			Если мСтруктураМетаданныеРегистраИзмерения.Свойство(СтрЗаменить(Источник,".",""),СтруктураИзмеренийРегистра) Тогда
				Если СтруктураИзмеренийРегистра.Свойство(СтруктураПоиска.ИмяФильтра) Тогда
					ТекстФильтры = ТекстФильтры + " И " + СтруктураПоиска.ИмяФильтра 
					+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
				Иначе
					ТекстОбщиеФильтры = ТекстОбщиеФильтры 	+ " И " + ПолеЗапроса+" "
					+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
				КонецЕсли;
				// Общие фильтры запроса
			Иначе
				ТекстОбщиеФильтры = ТекстОбщиеФильтры 	+ " И " + ПолеЗапроса+" "
				+ ОператорСравнения + " (" + ТекстВложенногоФильтры + ")";
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	// Фильтры

	// Удаление лишних запятых
	ТекстПоляЗапроса     = Сред(ТекстПоляЗапроса,         2);
	ТекстФильтры         = Сред(СокрЛП(ТекстФильтры),     2);
	ТекстОбщиеФильтры    = Сред(СокрЛП(ТекстОбщиеФильтры),2);

	ТекстИсточника="";
	ТекстОсновногоФильтра = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		Если не ПустаяСтрока(ТекстОбщиеФильтры) Тогда
			ТекстОсновногоФильтра = " Организация = &Организация И ";
		Иначе
			ТекстОсновногоФильтра = " Организация = &Организация ";
		КонецЕсли; 
	КонецЕсли;
		
	Если Источник="УчетГСМ.ОстаткиНачало" Тогда
		ТекстИсточника= "РегистрНакопления.УчетГСМ.Остатки(&ДатаНач, ";
		
		Если Не ПустаяСтрока(ТекстФильтры) Тогда 
			ТекстИсточника = ТекстИсточника + Символы.ПС + " И "+ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ") КАК ОстаткиНачало";

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) ИЛИ ЗначениеЗаполнено(Организация) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ" + ТекстОсновногоФильтра + ТекстОбщиеФильтры;
		КонецЕсли;
		
	ИначеЕсли Источник="УчетГСМ.ОстаткиКонец" Тогда
		ТекстИсточника= "РегистрНакопления.УчетГСМ.Остатки(&ДатаКон, ";
		
		Если Не ПустаяСтрока(ТекстФильтры) Тогда 
			ТекстИсточника = ТекстИсточника + Символы.ПС + " И "+ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ") КАК ОстаткиКонец";

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) ИЛИ ЗначениеЗаполнено(Организация) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ" + ТекстОсновногоФильтра + ТекстОбщиеФильтры;
		КонецЕсли;
	
	ИначеЕсли Источник = "УчетГСМ.Обороты" Тогда
		ТекстИсточника= "РегистрНакопления.УчетГСМ.Обороты(&ДатаНач,&ДатаКон," + ЕстьРегистратор + " ";
		
		Если Не ПустаяСтрока(ТекстФильтры) Тогда
			ТекстИсточника = ТекстИсточника + Символы.ПС + " И "+ТекстФильтры;
		КонецЕсли;
		ТекстИсточника= ТекстИсточника + ") КАК Обороты";

		Если Не ПустаяСтрока(ТекстОбщиеФильтры) ИЛИ ЗначениеЗаполнено(Организация) Тогда
			ТекстИсточника = ТекстИсточника  + Символы.ПС +
			"ГДЕ" + ТекстОсновногоФильтра +  ТекстОбщиеФильтры;
		КонецЕсли;
		
	КонецЕсли;

	ТекстЗапроса=	
	"ВЫБРАТЬ " + ТекстПоляЗапроса + "
	|ИЗ 
	|"+ТекстИсточника;

	Возврат ТекстЗапроса;

КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь,  ПоказыватьПодвал = Ложь, ЕстьОшибки = Ложь) Экспорт

	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода", 60);
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;

	// Список полей запроса
	ТекстЗапроса = "";
	ТекстПоляИтогов = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляУпорядочивания = "";

	// Строки списков для шапки отчета
	СтрПоказатели = "";
	СтрГруппировки = "";
	СтрФильтры = "";

	// Строка в которую выводятся обнаруженные ошибки
	СтрОшибки = "";

	ОсновноеПоле=Истина;
	
	//Дальше по коду переменной ЕстьРегистратор изменим тип на Тип("Строка");
	ЕстьРегистратор = ложь;
	
	Для Каждого Строка Из ГруппировкиОтчета цикл

		Если ПустаяСтрока(Строка.ИмяГруппировки) Тогда
			Предупреждение("Не указано имя группировки!", 60);
			Возврат;
		КонецЕсли;
		// Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеГруппировки) Тогда
			Строка.ПредставлениеГруппировки = Строка.ИмяГруппировки;
		КонецЕсли;
		Если Строка.РассчитыватьИтоги Тогда
			Если НЕ ОсновноеПоле Тогда
				ОсновноеПоле=Истина;
				СтрГруппировки=СтрГруппировки+"), ";
			Иначе
				СтрГруппировки=СтрГруппировки+", ";
			КонецЕсли;
		Иначе
			Если ОсновноеПоле Тогда
				ОсновноеПоле=Ложь;
				СтрГруппировки=СтрГруппировки+" (";
			Иначе
				СтрГруппировки=СтрГруппировки+", ";
			КонецЕсли;
		КонецЕсли;
		СтрГруппировки=СтрГруппировки+Строка.ПредставлениеГруппировки;
		ЕстьРегистратор = ?(ЕстьРегистратор,Истина,Строка.ИмяГруппировки = "Регистратор" ИЛИ Найти(Строка.ОписаниеГруппировки, "Регистратор") > 0);
		ОписаниеПоляЗапроса = "";
	КонецЦикла;
	
	ЕстьРегистратор = ?(ЕстьРегистратор," Регистратор ","");
	
	Если НЕ ОсновноеПоле Тогда
		СтрГруппировки=СтрГруппировки+")";
		ОсновноеПоле=Истина;
	КонецЕсли;

	ТаблицаСписокВсехФильтров = ФильтрыОтчета.Выгрузить();

	// Удаление отключенных фильтров
	Инд=0;
	Пока Инд<ТаблицаСписокВсехФильтров.Количество() Цикл
		Если НЕ ТаблицаСписокВсехФильтров[Инд].ИспользованиеФильтра Тогда
			ТаблицаСписокВсехФильтров.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСписокВсехФильтров.Свернуть("ИмяФильтра",);

	СтруктураПоиска = Новый Структура("ИмяФильтра");

	Для Каждого Строка Из ТаблицаСписокВсехФильтров Цикл

		Если ПустаяСтрока(Строка.ИмяФильтра) Тогда
			Предупреждение("Не указано имя отбора!", 60);
			Возврат;
		КонецЕсли;

		СтруктураПоиска.ИмяФильтра = Строка.ИмяФильтра;

		НайденныеСтроки = ФильтрыОтчета.НайтиСтроки(СтруктураПоиска);

		СтрТипФильтра = "";
		СтрТипФильтра = НРег(НайденныеСтроки[0].ТипФильтра);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			// Если не задано представление, берем его из имени
			Если ПустаяСтрока(НайденныеСтроки[0].ПредставлениеФильтра) Тогда
				НайденныеСтроки[0].ПредставлениеФильтра = НайденныеСтроки[0].ИмяФильтра;
			КонецЕсли;

			// Для единичного значения используется все кроме первого слова
			СтрФильтры=СтрФильтры+", "+НайденныеСтроки[0].ПредставлениеФильтра+ " " + СтрТипФильтра + " "+НайденныеСтроки[0].ЗначениеФильтра;
		Иначе

			СтрФильтры=СтрФильтры+", "+НайденныеСтроки[0].ПредставлениеФильтра+" "+СтрТипФильтра+" [";
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Если не задано представление, берем его из имени
				Если ПустаяСтрока(НайденнаяСтрока.ПредставлениеФильтра) Тогда
					НайденнаяСтрока.ПредставлениеФильтра = НайденнаяСтрока.ИмяФильтра;
				КонецЕсли;

				СтрФильтры=СтрФильтры+НайденнаяСтрока.ЗначениеФильтра+", ";
			КонецЦикла;

			СтрФильтры=Лев(СокрЛП(СтрФильтры), СтрДлина(СокрЛП(СтрФильтры))-1)+"]";
		КонецЕсли;

	КонецЦикла;

	Если НЕ ОсновноеПоле Тогда
		ОсновноеПоле=Истина;
	КонецЕсли;

	Если ПоказателиОтчета.Количество() = 0 Тогда
		Предупреждение("Не выбрано ни одного показателя!", 60);
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из ПоказателиОтчета цикл
		Если ПустаяСтрока(Строка.ИмяПоказателя) Тогда
			Предупреждение("Не указано имя показателя!", 60);
			Возврат;
		КонецЕсли;
		// Если не задано представление, берем его из имени
		Если ПустаяСтрока(Строка.ПредставлениеПоказателя) Тогда
			Строка.ПредставлениеПоказателя = Строка.ИмяПоказателя;
		КонецЕсли;
	КонецЦикла;

	// Структура вывода группировок: ключи определяют "основные" группировки,
	// значения - дополнительные.
	СтруктураВыводГруппировок = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// Структура "поправок" сдвига группировок вправо: уровень записи строки 
	// формируемого запроса будет отличаться от нужного из-за пропусков группировок,
	// по которым не нужно выводить итоги.
	СтруктураСдвигУровняГруппировок = Новый Структура;

	// Далее используется таблица значений, полученная выгрузкой строк из т.ч. отчета
	КопияГруппировкиОтчета = ГруппировкиОтчета.Выгрузить();

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	КопияГруппировкиОтчета.Колонки.Добавить("ИтогПоИерархии", 		 ОписаниеТиповБулево);

	// ...и заполним эту служебную колонку
	ЗаполнитьПараметрыПолей(КопияГруппировкиОтчета);

	ВсегоГруппировок = 1;
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

    ТекстГруппировки="";
	
	// Формируем текст группировок запроса.
	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ТекстЗапроса = ТекстЗапроса + ",
		|ЗапросПоУчетуГСМ." + СтрокаГруппировки.ИмяГруппировки + " КАК " + СтрокаГруппировки.ИмяГруппировки;

		Если Найти(СтрокаГруппировки.ИмяГруппировки,"Организация")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"ИсточникФинансирования")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"КлассификацияРасходов")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"Водитель")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"Автотранспорт")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"ГСМ")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"ГСМ")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Наименование Возр";
		КонецЕсли;
		
		Если Найти(СтрокаГруппировки.ИмяГруппировки,"Регистратор")>0 Тогда
			ТекстПоляУпорядочивания=ТекстПоляУпорядочивания+", 
			|ЗапросПоУчетуГСМ."+ СтрокаГруппировки.ИмяГруппировки+".Дата Возр";
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаПоказателей Из ПоказателиОтчета Цикл

		Если СтрокаПоказателей.ИспользованиеПоказателя = Ложь Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого ЭлементСтруктуры Из мСтруктураНазванийПолейСортировки Цикл	

			//Если СтрокаПоказателей.ИмяПоказателя="Количество" Тогда
			//	Продолжить;
			//КонецЕсли;

			ИмяПоказателя=СтрокаПоказателей.ИмяПоказателя+ЭлементСтруктуры.Ключ;

			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяПоказателя+" КАК "+ИмяПоказателя;

			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоказателя + ")";

		КонецЦикла;

	КонецЦикла;

	ТекстЗапроса     			= Сред(ТекстЗапроса,         2);
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|"+ТекстЗапроса+"
	|ИЗ
	|(";
	
	СтруктураДоступныхГруппировок=Новый Структура; // Содержит поля, возможные к выбору из таблицы - источника.
	СтруктураДоступныхПоказателей=Новый Структура; // Содержит ресурсы, возможные к получению из таблицы - источника.

	//ЧАСТЬ		I
	СтруктураДоступныхГруппировок.Вставить("Регистратор",							"&НеВыводить");
	СтруктураДоступныхГруппировок.Вставить("Организация",							"Организация.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ИсточникФинансирования",				"ИсточникФинансирования.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("КлассификацияРасходов",					"КлассификацияРасходов.Ссылка");
	
	СтруктураДоступныхГруппировок.Вставить("Водитель",								"Водитель.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("Автотранспорт",							"Автотранспорт.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ГСМ",									"ГСМ.Ссылка");

	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйОстаток",					"ОстаткиНачало.СуммаОстаток");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйОстаток",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",							"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",							"0");
	
	СтруктураДоступныхПоказателей.Вставить("КоличествоНачальныйОстаток",			"ОстаткиНачало.КоличествоОстаток");
	СтруктураДоступныхПоказателей.Вставить("КоличествоКонечныйОстаток",				"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",						"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",						"0");
	
	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("УчетГСМ.ОстаткиНачало",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);
	
	
	ТекстЗапроса=ТекстЗапроса+"
	|ОБЪЕДИНИТЬ ВСЕ 
	|";
	//ЧАСТЬ		II
	СтруктураДоступныхГруппировок.Вставить("Регистратор",							"&НеВыводить");
	СтруктураДоступныхГруппировок.Вставить("Организация",							"Организация.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ИсточникФинансирования",				"ИсточникФинансирования.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("КлассификацияРасходов",					"КлассификацияРасходов.Ссылка");
	
	СтруктураДоступныхГруппировок.Вставить("Водитель",								"Водитель.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("Автотранспорт",							"Автотранспорт.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ГСМ",									"ГСМ.Ссылка");

	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйОстаток",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйОстаток",					"ОстаткиКонец.СуммаОстаток");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",							"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",							"0");
	
	СтруктураДоступныхПоказателей.Вставить("КоличествоНачальныйОстаток",			"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоКонечныйОстаток",				"ОстаткиКонец.КоличествоОстаток");
	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",						"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",						"0");
	
	
	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("УчетГСМ.ОстаткиКонец",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);

	
	ТекстЗапроса=ТекстЗапроса+"
	|ОБЪЕДИНИТЬ ВСЕ  
	|";
	//ЧАСТЬ		III
	СтруктураДоступныхГруппировок.Вставить("Регистратор",							"Обороты.Регистратор");
	СтруктураДоступныхГруппировок.Вставить("Организация",							"Организация.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ИсточникФинансирования",				"ИсточникФинансирования.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("КлассификацияРасходов",					"КлассификацияРасходов.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("Водитель",								"Водитель.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("Автотранспорт",							"Автотранспорт.Ссылка");
	СтруктураДоступныхГруппировок.Вставить("ГСМ",									"ГСМ.Ссылка");

	СтруктураДоступныхПоказателей.Вставить("СуммаНачальныйОстаток",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаКонечныйОстаток",					"0");
	СтруктураДоступныхПоказателей.Вставить("СуммаПриход",							"Обороты.СуммаПриход");
	СтруктураДоступныхПоказателей.Вставить("СуммаРасход",							"Обороты.СуммаРасход");
	
	СтруктураДоступныхПоказателей.Вставить("КоличествоНачальныйОстаток",			"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоКонечныйОстаток",				"0");
	СтруктураДоступныхПоказателей.Вставить("КоличествоПриход",						"Обороты.КоличествоПриход");
	СтруктураДоступныхПоказателей.Вставить("КоличествоРасход",						"Обороты.КоличествоРасход");
	
	ТекстЗапроса=ТекстЗапроса+СформироватьТекстЗапроса("УчетГСМ.Обороты",
	КопияГруппировкиОтчета,СтруктураДоступныхГруппировок,СтруктураДоступныхПоказателей);

	ТекстЗапроса=ТекстЗапроса+"
	|) КАК ЗапросПоУчетуГСМ";

	// Заголовок первой колонки шапки таблицы
	ЗаголовокКолонки = "Общий итог"; // этот заголовок выводится в случае отсутствия группировок

	Для Каждого СтрокаГруппировки Из КопияГруппировкиОтчета Цикл

		ДобавитьГруппировку = Ложь;
		Если (КопияГруппировкиОтчета.Индекс(СтрокаГруппировки) = КопияГруппировкиОтчета.Количество() - 1) Тогда
			ДобавитьГруппировку = Истина;
		Иначе
			Если КопияГруппировкиОтчета[КопияГруппировкиОтчета.Индекс(СтрокаГруппировки) + 1].РассчитыватьИтоги Тогда
				ДобавитьГруппировку = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ДобавитьГруппировку Тогда
			СтруктураВыводГруппировок.Вставить(СтрокаГруппировки.ИмяГруппировки, Массив);
			Массив = Новый Массив;
		Иначе
			Массив.Добавить(СтрокаГруппировки.ИмяГруппировки);
			КолГруппировокБезИтогов = КолГруппировокБезИтогов + 1;
		КонецЕсли;

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(СтрокаГруппировки.ИмяГруппировки, КолГруппировокБезИтогов);
		МассивГруппировки.Добавить(СтрокаГруппировки.ИмяГруппировки);


		Если Врег(СтрокаГруппировки.ТипИтога) = "ИЕРАРХИЯ" Тогда

			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки + " ИЕРАРХИЯ";

		ИначеЕсли Врег(СтрокаГруппировки.ТипИтога) = "ТОЛЬКО ИЕРАРХИЯ" Тогда

			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки + " ТОЛЬКО ИЕРАРХИЯ";

		Иначе
			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + СтрокаГруппировки.ИмяГруппировки;

		КонецЕсли;

		ТекстПоляИтогов = ТекстПоляИтогов + " КАК " + СтрокаГруппировки.ИмяГруппировки;

		Если СтрокаГруппировки.РассчитыватьИтоги Тогда

			ЗаголовокКолонки = СтрокаГруппировки.ПредставлениеГруппировки;

		КонецЕсли; 

	КонецЦикла;

	Для Каждого СтрокаПоказатели Из ПоказателиОтчета Цикл // Формирование списка итогов запроса.

		Если СтрокаПоказатели.ИспользованиеПоказателя = Ложь Тогда
			Продолжить;
		КонецЕсли;

		// Упорядочивание по показателю:
		СтрокаУпорядочивания = "";
		Если СтрокаПоказатели.Сортировка <> 0 Тогда
			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ", " + 
			СтрокаПоказатели.ИмяПоказателя + СтрокаПоказатели.ВидПоляСортировки + ?(СтрокаПоказатели.Сортировка = 1, " Возр", " Убыв");

			// Строка для шапки отчета
			ПредставлениеПоляСортировки = "";
			мСтруктураНазванийПолейСортировки.Свойство(СтрокаПоказатели.ВидПоляСортировки, ПредставлениеПоляСортировки);
			СтрокаУпорядочивания = СтрокаУпорядочивания + ": " + Нрег(ПредставлениеПоляСортировки) 
														+ ?(СтрокаПоказатели.Сортировка = 1, " по возрастанию", " по убыванию");
		КонецЕсли;
		// Строка для шапки отчета
		СтрПоказатели = СтрПоказатели + ", " + СтрокаПоказатели.ПредставлениеПоказателя + СтрокаУпорядочивания;
		
	КонецЦикла;

	// Удаление лишних запятых
	ТекстПоляИтогов      = Сред(ТекстПоляИтогов,2);
	ТекстПоляИтоговЗапроса      = Сред(ТекстПоляИтоговЗапроса,2);
	ТекстГруппировки         	= Сред(СокрЛП(ТекстГруппировки),     2);

	ТекстОбщиеФильтры    = Сред(СокрЛП(ТекстОбщиеФильтры),2);
	ТекстПоляУпорядочивания = Сред(ТекстПоляУпорядочивания, 2);

	СтрПоказатели  = Сред(СтрПоказатели,  2);
	СтрГруппировки = Сред(СтрГруппировки, 2);
	СтрФильтры     = Сред(СтрФильтры,     2);

	// Пустой период - без ограничения
	Если ДатаНач = '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаНач", '00010101000000');
	Иначе
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	КонецЕсли;
	Если ДатаКон = '00010101000000' Тогда
		Запрос.УстановитьПараметр("ДатаКон", '00010101000000');
	Иначе
		ГраницаКонец = Новый Граница(КонецДня(ДатаКон),ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаКон", ГраницаКонец);
	КонецЕсли; 

	Запрос.УстановитьПараметр("НеВыводить", "{}НеВыводить");

	Запрос.Текст=ТекстЗапроса;

	Если Не ПустаяСтрока(ТекстПоляУпорядочивания) Тогда
		Запрос.Текст = Запрос.Текст  + Символы.ПС +
		"УПОРЯДОЧИТЬ ПО " + ТекстПоляУпорядочивания;
	КонецЕсли;

	Если Не ПустаяСтрока(ТекстПоляИтогов) Тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС +  
		"ИТОГИ " + ТекстПоляИтоговЗапроса + Символы.ПС + 
		"ПО ОБЩИЕ, " + ТекстПоляИтогов;
	Иначе
		Запрос.Текст = Запрос.Текст + Символы.ПС +  
		"ИТОГИ  " + ТекстПоляИтоговЗапроса + Символы.ПС + 
		"ПО ОБЩИЕ";
	КонецЕсли;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;

	// Области строки отчета - табличные документы из макета отчета
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("Показатель|Строка"));

	// Табличный документ - результат отчета
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	// Массив выводимых показателей отчета
	СтруктураПараметров.Вставить("МассивПоказатели", Новый Массив);
	Для каждого Строка Из ПоказателиОтчета Цикл

		Если Строка.ИспользованиеПоказателя Тогда

			СтруктураПараметров.МассивПоказатели.Добавить(Строка.ИмяПоказателя);

		КонецЕсли;

	КонецЦикла;

	// Общее количество группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("ВсегоГруппировок", ВсегоГруппировок);

	// Заполненная структура вывода группировок
	СтруктураПараметров.Вставить("СтруктураВыводГруппировок", СтруктураВыводГруппировок);

	// Массив всех группировок запроса, т.е. как выводимых, так и пропускаемых
	СтруктураПараметров.Вставить("МассивГруппировки", МассивГруппировки);

	// Заполненная структура "поправки" сдвига группировок вправо
	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	// Наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|Показатель").Шрифт,,,,Истина));

	// Форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", Новый Структура);
	Для Каждого Строка Из ПоказателиОтчета Цикл

		Если Строка.ИспользованиеПоказателя = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.ИмяПоказателя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		// Если не задано при начальном заполнении, то из метаданных
		Если ПустаяСтрока(ФорматнаяСтрока) Тогда
			Если мСтруктураМетаданныеРегистраРесурсы.Свойство(Строка.ИмяПоказателя, МетаданныеРесурса) Тогда
				ФорматнаяСтрока = "ЧЦ = " 	+ Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.Разрядность) 
											+ " ; ЧДЦ = " + Строка(МетаданныеРесурса.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.ИмяПоказателя, ФорматнаяСтрока);
	КонецЦикла;

	// Оформление измерений
	ОформлениеСтроки = Новый Массив;

	ОформлениеСтрокиИерархии = Новый Массив;
	
	Если РаскрашиватьИзмерения Тогда

		ТабДокОформлениеИзмерений = Макет.ПолучитьОбласть("ОформлениеИзмерений");
		Для Сч = 1 По ТабДокОформлениеИзмерений.ВысотаТаблицы Цикл

			// Нечетные строки - иерархия, четные - измерения
			Если Сч - Цел(Сч/2)*2 = 1 Тогда

				ОформлениеСтроки.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			Иначе
				ОформлениеСтрокиИерархии.Добавить(ТабДокОформлениеИзмерений.Область(Сч,2));
			КонецЕсли;

		КонецЦикла;

	КонецЕсли; 

	// Оформление строк
	СтруктураПараметров.Вставить("ОформлениеСтроки", ОформлениеСтроки);
	СтруктураПараметров.Вставить("ОформлениеСтрокиИерархии", ОформлениеСтрокиИерархии);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", Новый Структура);

	ДатаСведений			= КонецДня(ДатаКон);
	СведенияОбОрганизации	= ОбщегоНазначения.СведенияОЮрФизЛице(Организация, ДатаСведений);
	Руководители			= ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, ДатаСведений);
	
	// 1. Вывод заголовка отчета
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ОписаниеПериода = "за " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
	ОбластьЗаголовок.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, РНН");
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда

		Возврат;
	
	КонецЕсли;

	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьШапкаТаблицы.Область(2,2).Текст = ЗаголовокКолонки;
	ДокументРезультат.Вывести(ОбластьШапкаТаблицы);

	// Выполнение сформированного запроса
	Результат = Запрос.Выполнить();

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	//ДокументРезультат.ФиксацияСлева = 2;

	// 2. Вывод строк отчета
	//ДокументРезультат.НачатьАвтогруппировкуСтрок();
	КоличествоНачатыхУровней = 0;

	Если МассивГруппировки.Количество()>0 Тогда

		ВывестиГруппировку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировки[0]), СтруктураПараметров, 0, Новый Массив);

	КонецЕсли;
	
	//Заканчиваем ранее начатые группы строк
	Пока КоличествоНачатыхУровней > 0 Цикл
		СтруктураПараметров.ТабДок.ЗакончитьГруппуСтрок();
		КоличествоНачатыхУровней = КоличествоНачатыхУровней - 1;
	КонецЦикла;
	

	//ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// 3. Вывод общих итогов
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ОбщиеИтоги"));
	ДокументРезультат.Присоединить(Макет.ПолучитьОбласть("Значение|ОбщиеИтоги"));
	
	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("Показатель|ОбщиеИтоги"));

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
	ВыборкаОбщийИтог.Следующий();
	
	ВывестиПоказатели(ВыборкаОбщийИтог, СтруктураПараметров);

	// 4. Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ПодвалТаблицы"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ПодвалТаблицы");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("Показатель|ПодвалТаблицы");

	ДокументРезультат.Присоединить(ОбластьПоказатель);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.ФИОИсполнителя = "";
	ОбластьПодвал.Параметры.ФИОГлавБухгалтера = Руководители.ГлавныйБухгалтер;
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	// Управление подвалом
	ДокументРезультат.Области.Подвал.Видимость = ПоказыватьПодвал;
	
	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
	ДокументРезультат.Автомасштаб=Истина;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мДеревоГруппировки 	= Новый ДеревоЗначений;
мТаблицаПоказатели  = Новый ТаблицаЗначений;
мДеревоФильтры     	= Новый ДеревоЗначений;
мТаблицаТипы	    = Новый ТаблицаЗначений;

МассивСтрока = Новый Массив; 
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки = Новый КвалификаторыСтроки("110", ДопустимаяДлина.Переменная);
ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

ОписаниеТиповБулевоИСтрока = Новый ОписаниеТипов(ОписаниеТиповСтрока, МассивБулево);

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

МассивОписаниеТипов = Новый Массив;
МассивОписаниеТипов.Добавить(Тип("ОписаниеТипов"));
ОписаниеТиповОписаниеТипов = Новый ОписаниеТипов(МассивОписаниеТипов);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию", ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка", ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);

мДеревоГруппировки.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ОписаниеПоля", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("РассчитыватьИтоги", ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ТипИтога", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ВозможенФильтр", ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ВыводитьПустые", ОписаниеТиповБулевоИСтрока);
мДеревоГруппировки.Колонки.Добавить("ВыводитьПустыеСвязаннаяГруппировка", ОписаниеТиповСтрока);
мДеревоГруппировки.Колонки.Добавить("ВклПоУмолчанию", ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("Пометка", ОписаниеТиповБулево);
мДеревоГруппировки.Колонки.Добавить("ОписаниеТипов", ОписаниеТиповОписаниеТипов);

мДеревоФильтры.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ОписаниеПоля", ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ИмяПоляВладелец", ОписаниеТиповСтрока);
мДеревоФильтры.Колонки.Добавить("ВклПоУмолчанию", ОписаниеТиповБулево);
мДеревоФильтры.Колонки.Добавить("Пометка", ОписаниеТиповБулево);
мДеревоФильтры.Колонки.Добавить("ОписаниеТипов", ОписаниеТиповОписаниеТипов);

мТаблицаТипы.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
мТаблицаТипы.Колонки.Добавить("ОписаниеТипов");

// Инициализация структуры типов фильтров
мСтруктураТиповФильтров = Новый Структура;
мСтруктураТиповФильтров.Вставить("ОдноИз", "Одно из:");
мСтруктураТиповФильтров.Вставить("ВсеКроме", "Все, кроме:");

мТипФильтраПоУмолчанию = "ОдноИз";

// Инициализация структуры видов полей сортировки
мСтруктураНазванийПолейСортировки = Новый Структура;
//мСтруктураНазванийПолейСортировки.Вставить("НачальныйДолг", "Долг нач.");
//мСтруктураНазванийПолейСортировки.Вставить("КонечныйДолг",  "Долг кон.");
мСтруктураНазванийПолейСортировки.Вставить("НачальныйОстаток", "Остаток нач.");
мСтруктураНазванийПолейСортировки.Вставить("КонечныйОстаток",  "Остаток кон.");
мСтруктураНазванийПолейСортировки.Вставить("Приход", "Приход");
мСтруктураНазванийПолейСортировки.Вставить("Расход", "Расход");

мИмяОтчета = Метаданные().Имя;

НП = Новый НастройкаПериода;

мНазваниеОтчета = "";

мВыбиратьИмяРегистра = Истина;

мНаДату = Ложь;

ПоказыватьЗаголовок = Истина;
ПоказыватьПодвал = Ложь;

мСписокОбязательныхОтборов = Новый СписокЗначений;

мСтруктураМетаданныеРегистраРесурсы = Новый Структура;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецЕсли
