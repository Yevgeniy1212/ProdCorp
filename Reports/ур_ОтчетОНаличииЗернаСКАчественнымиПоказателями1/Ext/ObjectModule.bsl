Перем мСписокИсточниковФинансирования Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;
Перем РежимРасшифровки Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//КомпоновщикНастроек.Восстановить();
	//НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	  ВывестиПодписи(Результат);

	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Возврат;
	
КонецПроцедуры

Процедура ВывестиПодписи(Результат)
	
	// выводим подвал
	Макет = ПолучитьОбщийМакет("ПодписиОтчета");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подписи");
	
	//организацию берем также первую из списка
	ИскомаяОрганизация = мСписокСтруктурныхЕдиниц[0].Значение;
	Если Не ЗначениеЗаполнено(ИскомаяОрганизация) Тогда
		ИскомаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
																							           "ОсновнаяОрганизация");             
	КонецЕсли;
																								   
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(ИскомаяОрганизация, КонецПериода, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ОбластьПодвал.Параметры.Заполнить(ОтветЛица);															   
	
	Результат.Вывести(ОбластьПодвал);

КонецПроцедуры


// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ЗначениеЗаполнено(Период) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(Период));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Дата(3999, 11, 1));
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВыборкаДанных = ПолучитьВыборку();
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ВыборкаДанных);
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Функция ПолучитьВыборку()
	
	запрос = Новый Запрос;
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстатки.Организация,
	|	ур_ЗерноНаСкладахОстатки.Видзерна,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса.ТипРесурса КАК ТипРесурса,
	|	ур_ЗерноНаСкладахОстатки.Склад,
	|	ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|	ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка,
	|	ур_ЗерноНаСкладахОстатки.Культура,
	|	ур_ЗерноНаСкладахОстатки.Класс,
	|	ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|	ВЫБОР
	|		КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|			ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|		ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|			ТОГДА ЕСТЬNULL(ОстаткиЗабронированные.Забронировано, 0) * 1000
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиЗабронированные.Забронировано, 0)
	|	КОНЕЦ КАК Забронировано,
	|	ВЫБОР
	|		КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|			ТОГДА ЕСТЬNULL(ОстаткиЗалога.Заложено, 0) * 1000
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиЗалога.Заложено, 0)
	|	КОНЕЦ КАК Заложено
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&Период, ) КАК ур_ЗерноНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ур_ЗабронированноеЗерноОстатки.Организация КАК Организация,
	|			ур_ЗабронированноеЗерноОстатки.ВидРесурса КАК ВидРесурса,
	|			ур_ЗабронированноеЗерноОстатки.Склад КАК Склад,
	|			ур_ЗабронированноеЗерноОстатки.Зерноваярасписка КАК Зерноваярасписка,
	|			ур_ЗабронированноеЗерноОстатки.Культура КАК Культура,
	|			ур_ЗабронированноеЗерноОстатки.Класс КАК Класс,
	|			ур_ЗабронированноеЗерноОстатки.ЗачтенныйвесОстаток КАК Забронировано
	|		ИЗ
	|			РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(&Период, ) КАК ур_ЗабронированноеЗерноОстатки) КАК ОстаткиЗабронированные
	|		ПО ур_ЗерноНаСкладахОстатки.Организация = ОстаткиЗабронированные.Организация
	|			И ур_ЗерноНаСкладахОстатки.ВидРесурса = ОстаткиЗабронированные.ВидРесурса
	|			И ур_ЗерноНаСкладахОстатки.Склад = ОстаткиЗабронированные.Склад
	|			И ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка = ОстаткиЗабронированные.Зерноваярасписка
	|			И ур_ЗерноНаСкладахОстатки.Культура = ОстаткиЗабронированные.Культура
	|			И ур_ЗерноНаСкладахОстатки.Класс = ОстаткиЗабронированные.Класс
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ур_ЗерноВЗалогеОстатки.Организация КАК Организация,
	|			ур_ЗерноВЗалогеОстатки.ВидРесурса КАК ВидРесурса,
	|			ур_ЗерноВЗалогеОстатки.Склад КАК Склад,
	|			ур_ЗерноВЗалогеОстатки.Зерноваярасписка КАК Зерноваярасписка,
	|			ур_ЗерноВЗалогеОстатки.Культура КАК Культура,
	|			ур_ЗерноВЗалогеОстатки.Класс КАК Класс,
	|			ур_ЗерноВЗалогеОстатки.ГодУрожая КАК ГодУрожая,
	|			ур_ЗерноВЗалогеОстатки.ЗачтенныйвесОстаток КАК Заложено
	|		ИЗ
	|			РегистрНакопления.ур_ЗерноВЗалоге.Остатки(&Период, ) КАК ур_ЗерноВЗалогеОстатки) КАК ОстаткиЗалога
	|		ПО ур_ЗерноНаСкладахОстатки.Организация = ОстаткиЗалога.Организация
	|			И ур_ЗерноНаСкладахОстатки.ВидРесурса = ОстаткиЗалога.ВидРесурса
	|			И ур_ЗерноНаСкладахОстатки.Склад = ОстаткиЗалога.Склад
	|			И ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка = ОстаткиЗалога.Зерноваярасписка
	|			И ур_ЗерноНаСкладахОстатки.Класс = ОстаткиЗалога.Класс
	|			И ур_ЗерноНаСкладахОстатки.ГодУрожая = ОстаткиЗалога.ГодУрожая";
	
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",ЕдиницаИзмеренияОтчета);
	
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводЗаголовкаСпециализированногоОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
		
	ЗаголовокОтчета = "Отчет о количественно-качественном наличии зерна " + " на " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
		
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	//ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СтруктураНастроек.Вставить("мСписокПодразделений", мСписокПодразделений);
	СтруктураНастроек.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	СтруктураНастроек.Вставить("мДеревоСтруктурныхЕдиниц", мДеревоСтруктурныхЕдиниц);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);

КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокИсточниковФинансирования = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;