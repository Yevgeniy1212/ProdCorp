Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

Функция ПолучитьРежимНабораПерсонала() Экспорт
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчет");
	
	Если НЕ ИспользоватьУправленческийУчетЗарплаты Тогда
		
		РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц;
		
	Иначе
		
		РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоЦентрамОтветственности;
		
	КонецЕсли;
	
	Возврат РежимНабораПерсонала;
	
КонецФункции

#Если Клиент Тогда

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	РезультатОтчета = ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
	Область = Результат.Области.Найти("Заголовок");
	Если Область <> Неопределено Тогда
		Результат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		Область = Результат.Область("R1:R10");
		Область.Имя = "Заголовок";
		Результат.ФиксацияСверху = 11;
		ПоказыватьЗаголовок = (КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
		Область.Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Возврат РезультатОтчета;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидУчета"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение = ПолучитьРежимНабораПерсонала();
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Валюта"));
	Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		ЗначениеПараметра.Значение = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаРеглУчета"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаУпрУчета"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Данные"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ОтчетформируетсяПоДанным = ЗначениеПараметра.Значение;
	КонецЕсли;
	
	МассивГрыпировок = ТиповыеОтчеты.ПолучитьГруппировки(КомпоновщикНастроек);
	Для Каждого Группировка Из МассивГрыпировок Цикл
		Для Каждого ПолеГруппировки Из Группировка.Значение.ПоляГруппировки.Элементы Цикл
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Источник") тогда
				Группировка.Значение.Имя = ОтчетформируетсяПоДанным;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметра <> Неопределено и ЗначениеПараметра.Значение = '00010101' тогда
		
		ЗначениеПараметра.Значение = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
		
	КонецЕсли;

КонецПроцедуры

// Описание дополнитльеных настроек отчета
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт

	СтруктураНаcтроек = Новый Структура();
	
	Возврат СтруктураНаcтроек;

КонецФункции

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли