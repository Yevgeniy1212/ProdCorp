
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Отчет.Дата='00010101' Тогда
		Отчет.Дата = ТекущаяДата();
	КонецЕсли;
	Если Параметры.Свойство("Документ") Тогда
		Отчет.Документ = Параметры.Документ;
		ИД = Отчет.Документ.Метаданные().Имя;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ВидыДокументов.Ссылка
			|ИЗ
			|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
			|ГДЕ
			|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор";

		Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИД);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Отчет.ВидДокументов = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;

	КонецЕсли;
	Элементы.Документ.ОграничениеТипа = ТипДокумента();
	Если ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		 Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПолеГеографическойСхемы;
	Иначе
		 Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаТабличныйДокумент
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументовПриИзменении(Элемент)
	Элементы.Документ.ОграничениеТипа = ТипДокумента();
	Отчет.Документ = Элементы.Документ.ОграничениеТипа.ПривестиЗначение(Отчет.Документ);
КонецПроцедуры

&НаСервере
Функция ТипДокумента()
	Если Отчет.ВидДокументов.Пустая() Тогда
		Возврат Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	Возврат Новый ОписаниеТипов("ДокументСсылка."+Отчет.ВидДокументов.ПрограммныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура Сформировать(Команда)
	Если ПроверитьЗаполнение() Тогда
		ФормироватьОтчет();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормироватьОтчет()
	
	// определим маршрут
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	усд_НазначенияМаршрутов.Маршрут
	               |ИЗ
	               |	РегистрСведений.усд_НазначенияМаршрутов КАК усд_НазначенияМаршрутов
	               |ГДЕ
	               |	усд_НазначенияМаршрутов.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Отчет.Документ);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Маршрут = ВыборкаДетальныеЗаписи.Маршрут;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не находится на маршрутах!'"));
		Возврат;
	КонецЕсли;

	// заполнение прав подписи
	ПраваПодписи = Новый ТаблицаЗначений;
	ПраваПодписи.Колонки.Добавить("Этап");
	ПраваПодписи.Колонки.Добавить("Пользователь");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПраваПодписиНаЭтапахМаршрутов.Этап,
	               |	ПраваПодписиНаЭтапахМаршрутов.Пользователь
	               |ИЗ
	               |	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутов
	               |ГДЕ
	               |	ПраваПодписиНаЭтапахМаршрутов.Маршрут = &Маршрут";	
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НС = ПраваПодписи.Добавить();
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	// создание таблицы координат условий
	КоординатыУсловий = Новый ТаблицаЗначений;
	КоординатыУсловий.Колонки.Добавить("Условие");
	КоординатыУсловий.Колонки.Добавить("Идентификатор");
	КоординатыУсловий.Колонки.Добавить("х1");
	КоординатыУсловий.Колонки.Добавить("х2");
	КоординатыУсловий.Колонки.Добавить("у1");
	КоординатыУсловий.Колонки.Добавить("у2");
	
	// настройка цветов
	ЦветЛинии					= Новый Цвет(46,139,87);
	ЦветБлока					= Новый Цвет(192,220,192);
	ЦветТекста					= Новый Цвет(0,100,0);
	ЦветЛинииСлужебногоБлока 	= Новый Цвет(255,140,0);
	ЦветСлужебногоБлока 		= Новый Цвет(255,236,139);
	ЦветТекстаСлужебногоБлока 	= Новый Цвет(178,34,34);
								
	ЦветПройденногоБлока 	= Новый Цвет(192,220,192);
	ЦветТекущегоБлока 		= Новый Цвет(240,230,140);
	ЦветПредстоящегоБлока 	= Новый Цвет(176,196,222);
	ЦветБлокаВнимание 		= Новый Цвет(255,160,122);
	
	// отрисовка карты
	Если ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		фин_Защита.НарисоватьКарту(	Маршрут,
								ПолеГеографическойСхемы,
								КоординатыУсловий,
								ПраваПодписи,
								Истина,
								ЦветБлока,
								ЦветЛинии,
								ЦветТекста,
								ЦветСлужебногоБлока,
								ЦветЛинииСлужебногоБлока,
								ЦветТекстаСлужебногоБлока,
								Маршрут.ВысотаБлока,
								Маршрут.ШиринаБлока,
								Маршрут.РасстояниеМеждуЭтапами,
								Маршрут.СимволовВСтроке,
								Маршрут.КоличествоСтрок);
		фин_Защита.ОтметитьПройденные(Маршрут, Отчет.Документ, ПолеГеографическойСхемы, ЦветПредстоящегоБлока, ЦветТекущегоБлока, ЦветПройденногоБлока, ЦветБлокаВнимание);
	Иначе
		// отрисовка карты
		СоответствиеОбъектовИРисунков = Неопределено;
		фин_Защита.НарисоватьКартуТабличныйДокумент(Маршрут, 
									ПолеКарты, 
									КоординатыУсловий,
									ПраваПодписи,
									Истина,
									ЦветБлока,
									ЦветЛинии,
									ЦветТекста,
									ЦветСлужебногоБлока,
									ЦветЛинииСлужебногоБлока,
									ЦветТекстаСлужебногоБлока,
									Маршрут.ВысотаБлока,
									Маршрут.ШиринаБлока,
									Маршрут.РасстояниеМеждуЭтапами,
									Маршрут.СимволовВСтроке,
									Маршрут.КоличествоСтрок,
									Маршрут.Масштаб,
									СоответствиеОбъектовИРисунков);
		ПолеЛегенды.ОтображатьЗаголовки	= Ложь;
		ПолеЛегенды.ОтображатьСетку		= Ложь;
		ПолеЛегенды.ТолькоПросмотр		= Истина;
		ПолеЛегенды.Защита				= Истина;
		Справочники.усд_МаршрутыДвиженияДокументов.НастроитьЛегенду(ПолеЛегенды,Истина,ЦветТекстаСлужебногоБлока);
		фин_Защита.ОтметитьПройденные_ТабличныйДокумент(Маршрут, Отчет.Документ, ПолеКарты, ЦветПредстоящегоБлока, ЦветТекущегоБлока, ЦветПройденногоБлока, ЦветБлокаВнимание,СоответствиеОбъектовИРисунков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры
