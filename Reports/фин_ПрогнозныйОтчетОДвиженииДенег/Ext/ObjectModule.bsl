Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
//Перем ДоступныеПоказатели Экспорт;
//Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;
Перем ТаблицаИтоговСтатей Экспорт;
Перем ПолеРезультата;
Перем мПериодичность;
Перем СтруктураЯчеек;
Перем СпискиВыбораДляПереключателей Экспорт;

//Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
//	
//КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров(Отбор)
	Ошибки = Ложь;
	//Если НЕ ЗначениеЗаполнено(Бюджет) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан бюджет!");
	//	Ошибки = Истина;
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидДанных) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид данных!");
		Ошибки = Истина;
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыДанныхОтчета.Плановые И НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан сценарий!");
		Ошибки = Истина;
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыДанныхОтчета.Фактические И НЕ ЗначениеЗаполнено(Периодичность) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана периодичность!");
		Ошибки = Истина;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьОграниченияПоБюджетам")=Истина Тогда
		Если НЕ фин_ПривилегированныеПроцедуры.РазрешеноПолучениеОтчета(Бюджет,?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Плановые,Сценарий,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()),Отбор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя недостаточно прав!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат НЕ Ошибки;	
КонецФункции

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
	ПолеРезультата = ДокументРезультат;
	
	мПериодичность = Строка(?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,Периодичность,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	Если Не ЗначениеЗаполнено(мПериодичность) Тогда
		мПериодичность = Перечисления.фин_Периодичность.Месяц;//"Месяц";
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ЗагрузитьМакетВТабличныйДокумент(ДокументРезультат);
	
	//Заполняем сначала для отчетного периода
	ДатаНачала    = НачалоПериодаПланирования;
	ДатаОкончания = КонецПериодаПланирования;
	ЗаполнитьАвто(ДатаНачала, ДатаОкончания, "3");
	
	//заполним для прошлого отчетного периода
	ДатаНачалаПР = Неопределено;
	ДатаОкончанияПР = Неопределено;
	ОпределитьДатуОкончанияПредыдущегоПериода(ДатаНачалаПР,ДатаОкончанияПР,мПериодичность);
	ЗаполнитьАвто(ДатаНачалаПР, ДатаОкончанияПР, "4");
		
КонецПроцедуры

Процедура ОпределитьДатуОкончанияПредыдущегоПериода(ДатаНачалаПР,ДатаОкончанияПР,мПериодичность)
	мДатаНачалаПериодаОтчета = НачалоПериодаПланирования;
	мДатаКонцаПериодаОтчета = КонецПериодаПланирования;
	
	Если СравнениеСПредыдущимГодом = 0 Тогда // сравниваем с предыдущим периодом от текущего периода
		
		Если мПериодичность = Перечисления.фин_Периодичность.Месяц Тогда 		
			ДатаОкончанияПР  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-1))); 
			ДатаНачалаПР     = НачалоМесяца(ДатаОкончанияПР);
		ИначеЕсли мПериодичность = Перечисления.фин_Периодичность.Квартал Тогда
			ДатаОкончанияПР  = КонецКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-3))); 
			ДатаНачалаПР     = НачалоКвартала(ДатаОкончанияПР);  		
		ИначеЕсли мПериодичность = Перечисления.фин_Периодичность.Год Тогда
			ДатаОкончанияПР  = КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-12))); 
			ДатаНачалаПР     = НачалоГода(ДатаОкончанияПР);  
		Иначе //если был выбран произвольный период
			// найдем даты предыдущего периода для проивольного периода
			ДатаНач = НачалоДня(мДатаНачалаПериодаОтчета);
			ДатаКон = КонецДня(мДатаКонцаПериодаОтчета);
			КоличествоДней  = (ДатаКон - ДатаНач+1)/(60*60*24);
			ДатаОкончанияПР = ДатаКон - КоличествоДней*(60*60*24);
			ДатаНачалаПР    = ДатаНач - КоличествоДней*(60*60*24);  		
		КонецЕсли;
		
	Иначе // сравниваем с сопоставимым периодом предшествующего финансового года
		
		Если мПериодичность = Перечисления.фин_Периодичность.Месяц Тогда 		
			ДатаОкончанияПР  = КонецМесяца(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-12))); 
			ДатаНачалаПР     = НачалоМесяца(ДатаОкончанияПР);
		ИначеЕсли мПериодичность = Перечисления.фин_Периодичность.Квартал Тогда
			ДатаОкончанияПР  = КонецКвартала(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-12))); 
			ДатаНачалаПР     = НачалоКвартала(ДатаОкончанияПР);  		
		ИначеЕсли мПериодичность = Перечисления.фин_Периодичность.Год Тогда
			ДатаОкончанияПР  = КонецГода(ДобавитьМесяц(мДатаКонцаПериодаОтчета, (-12))); 
			ДатаНачалаПР     = НачалоГода(ДатаОкончанияПР);  
		Иначе //если был выбран произвольный период
			// найдем даты предыдущего периода для проивольного периода
			ДатаНач = НачалоДня(мДатаНачалаПериодаОтчета);
			ДатаКон = КонецДня(мДатаКонцаПериодаОтчета);
			КоличествоДней  = (ДатаКон - ДатаНач+1)/(60*60*24);
			ДатаОкончанияПР = КонецДня(ДобавитьМесяц(ДатаКон, (-12))); 			
			ДатаНачалаПР    = ДатаОкончанияПР - КоличествоДней*(60*60*24)+1;  		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В зависимости от языка заполнения процедура загружает макет в поле табличного документа
//
Процедура ЗагрузитьМакетВТабличныйДокумент(ТабличныйДокумент)
	
//	Если ЯзыкЗаполнения = "Русский" Тогда
		Макет = Отчеты.фин_ПрогнозныйОтчетОДвиженииДенег.ПолучитьМакет("Макет2016");
	//Иначе
	//	Макет = ПолучитьМакет("Макет2016Кв1_Каз");
	//КонецЕсли;
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовокНСФО 	= Макет.ПолучитьОбласть("ЗаголовокНСФО");
	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница2");
		
		
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокНСФО);	
	ТабличныйДокумент.Вывести(ОбластьСтраница1);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабличныйДокумент.Вывести(ОбластьСтраница2);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	мЕстьМакет = Истина;
	
	ВыводЗаголовка(ТабличныйДокумент);
КонецПроцедуры

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка(ТабДок)

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ТабДок.ВысотаТаблицы = 0 Тогда
		ЗаполнитьАвто(НачалоПериодаПланирования, КонецПериодаПланирования, "3");		
	КонецЕсли;
	
	ПоказыватьЗаголовокНСФО 	 = Ложь;
	ПоказыватьЗаголовокПриказ422 = Ложь;
	
	//Если ПоказыватьЗаголовок = "НСФО" Тогда
	//	ПоказыватьЗаголовокНСФО = Истина;		
	//КонецЕсли;	
	//
	//Если ПоказыватьЗаголовок = "Приказ422" Тогда
	//	ПоказыватьЗаголовокПриказ422 = Истина;		
	//КонецЕсли;	
	
	Если ТабДок.Области.Найти("Заголовок") <> Неопределено Тогда
		ТабДок.Область("Заголовок").Видимость = ПоказыватьЗаголовокПриказ422;
	КонецЕсли;
	
	Если ТабДок.Области.Найти("ЗаголовокНСФО") <> Неопределено Тогда
		ТабДок.Область("ЗаголовокНСФО").Видимость = ПоказыватьЗаголовокНСФО;
	КонецЕсли;

		
КонецПроцедуры // ВыводЗаголовка()


// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто(ДатаНачала, ДатаОкончания, Ячейка)
    		
	
	Д1_Ячейка  = 0;//СНД(Счет010, РезультатЗапроса);
	Д2_Ячейка  = 0;//СКД(Счет010, РезультатЗапроса);
	
	
	СписокСтатей = Новый СписокЗначений;
	ТаблицаСтатей = фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуПостатейногоСоставаБюджетов(,Перечисления.фин_КлассификаторБюджетов.БюджетДвиженияДенежныхСредств);
	СтрокиОтдельныхСтатей = ТаблицаСтатей.НайтиСтроки(Новый Структура("ЭтоГруппа",Ложь));
	Для Каждого СтрокаСтатья Из СтрокиОтдельныхСтатей Цикл
		СписокСтатей.Добавить(СтрокаСтатья.Статья);
	КонецЦикла;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("СписокСтатей",СписокСтатей);
	Запрос.УстановитьПараметр("Бюджет",Бюджет);
	Запрос.УстановитьПараметр("ГраницаАктуальности",?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)));
	Запрос.УстановитьПараметр("ГраницаФактическихИПрогнозныхДанных",?(ГраницаФактическихИПрогнозныхДанных='00010101',КонецДня(ТекущаяДата()),КонецДня(ГраницаФактическихИПрогнозныхДанных)));
	Запрос.УстановитьПараметр("Сценарий",?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Плановые,Сценарий,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",ДатаОкончания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	фин_СтатьиБюджета.ФинансовыйПоказатель,
	               |	ЕСТЬNULL(фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам.КлассификаторПозицииОтчета,фин_СтатьиБюджета.ПозицияКлассификатора) КАК ПозицияКлассификатора
	               |ПОМЕСТИТЬ ВТ_Статьи
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам КАК фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам
	               |		ПО фин_СтатьиБюджета.Ссылка = фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам.СтатьяБюджета
	               |			И (фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам.КлассификаторБюджетов = ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторБюджетов.БюджетДвиженияДенежныхСредств))
	              // |			И (фин_СтатьиБюджета.Владелец.ПозицияКлассификатора = ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторБюджетов.ПустаяСсылка))
	               |ГДЕ
	               |	НЕ фин_СтатьиБюджета.ПометкаУдаления
	               |	И (фин_СтатьиБюджета.Владелец = &Бюджет ИЛИ &Бюджет=ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Статьи.ФинансовыйПоказатель,
	               |	ВТ_Статьи.ПозицияКлассификатора
	               |ПОМЕСТИТЬ ВТ_СтатьиСЗаполненнымиПозициями
	               |ИЗ
	               |	ВТ_Статьи КАК ВТ_Статьи
	               |ГДЕ
	               |	ЕСТЬNULL(ВТ_Статьи.ПозицияКлассификатора, ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторСтатейБюджетов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторСтатейБюджетов.ПустаяСсылка)
				   |	И ВТ_Статьи.ПозицияКлассификатора В (&СписокСтатей)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	               |	фин_ОборотыБюджетовОбороты.СуммаУпрОборот КАК Сумма,
	               |	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот КАК СуммаСценария,
	               |	ВТ_СтатьиСЗаполненнымиПозициями.ПозицияКлассификатора КАК ДвижениеДенежныхСредств
	               |ИЗ
	               |	РегистрНакопления."+?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Прогнозные,"фин_ПрогнозИсполненияБюджетов","фин_ОборотыБюджетов")+".Обороты(
	               |			,
	               |			&ГраницаАктуальности,
	               |			,
	               |			Сценарий = &Сценарий
	               |				И Организация = &Организация
	               |				И ПериодПланирования >= &НачалоПериода
	               |				И ПериодПланирования <= &КонецПериода
	               |				И ФинансовыйПоказатель В
	               |					(ВЫБРАТЬ
	               |						ВТ_СтатьиСЗаполненнымиПозициями.ФинансовыйПоказатель
	               |					ИЗ
	               |						ВТ_СтатьиСЗаполненнымиПозициями КАК ВТ_СтатьиСЗаполненнымиПозициями)) КАК фин_ОборотыБюджетовОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиСЗаполненнымиПозициями КАК ВТ_СтатьиСЗаполненнымиПозициями
	               |		ПО фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель = ВТ_СтатьиСЗаполненнымиПозициями.ФинансовыйПоказатель";
	Если ВидДанных=Перечисления.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
       |ВЫБРАТЬ
       |	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
       |	фин_ОборотыБюджетовОбороты.СуммаУпрОборот КАК Сумма,
       |	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот КАК СуммаСценария,
       |	ВТ_СтатьиСЗаполненнымиПозициями.ПозицияКлассификатора КАК ДвижениеДенежныхСредств
       |ИЗ
       |	РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(
       |			,
       |			&ГраницаАктуальности,
       |			,
       |			Сценарий = &Сценарий
       |				И Организация = &Организация
       |				И ПериодПланирования >= &НачалоПериода
       |				И ПериодПланирования <= &КонецПериода  И ПериодПланирования >=&ГраницаФактическихИПрогнозныхДанных
       |				И ФинансовыйПоказатель В
       |					(ВЫБРАТЬ
       |						ВТ_СтатьиСЗаполненнымиПозициями.ФинансовыйПоказатель
       |					ИЗ
       |						ВТ_СтатьиСЗаполненнымиПозициями КАК ВТ_СтатьиСЗаполненнымиПозициями)) КАК фин_ОборотыБюджетовОбороты
       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиСЗаполненнымиПозициями КАК ВТ_СтатьиСЗаполненнымиПозициями
       |		ПО фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель = ВТ_СтатьиСЗаполненнымиПозициями.ФинансовыйПоказатель";
					   
	КонецЕсли;
				  			    	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	СтруктураЯчеек = Новый Структура;


	Пока ВыборкаДанных.Следующий() Цикл
		
		Сумма = ВыборкаДанных.Сумма;
		
		КодСтрокиОтчета = Отчеты.фин_ПрогнозныйОтчетОДвиженииДенег.КодСтрокиОтчета(ВыборкаДанных.ДвижениеДенежныхСредств);
		
		Если СтруктураЯчеек.Свойство("Б"+КодСтрокиОтчета) Тогда
			ИтогоСумма = СтруктураЯчеек["Б"+КодСтрокиОтчета]+Сумма;
			СтруктураЯчеек.Вставить("Б"+КодСтрокиОтчета,ИтогоСумма);
		Иначе
			СтруктураЯчеек.Вставить("Б"+КодСтрокиОтчета,Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("Б140_" + Ячейка);
	УстановитьЗначениеПоказателя("Б150_" + Ячейка);
	
	
	//установим значения в табличном документе
	УстановитьЗначениеПоказателя("Б011_" + Ячейка);
	УстановитьЗначениеПоказателя("Б012_" + Ячейка);
	УстановитьЗначениеПоказателя("Б013_" + Ячейка);
	УстановитьЗначениеПоказателя("Б014_" + Ячейка);
	УстановитьЗначениеПоказателя("Б015_" + Ячейка);
	УстановитьЗначениеПоказателя("Б016_" + Ячейка);
		
	УстановитьЗначениеПоказателя("Б021_" + Ячейка);
	УстановитьЗначениеПоказателя("Б022_" + Ячейка);
	УстановитьЗначениеПоказателя("Б023_" + Ячейка);
	УстановитьЗначениеПоказателя("Б024_" + Ячейка);
	УстановитьЗначениеПоказателя("Б025_" + Ячейка);
	УстановитьЗначениеПоказателя("Б026_" + Ячейка);
	УстановитьЗначениеПоказателя("Б027_" + Ячейка);
	
	УстановитьЗначениеПоказателя("Б041_" + Ячейка);
	УстановитьЗначениеПоказателя("Б042_" + Ячейка);
	УстановитьЗначениеПоказателя("Б043_" + Ячейка);
	УстановитьЗначениеПоказателя("Б044_" + Ячейка);
	УстановитьЗначениеПоказателя("Б045_" + Ячейка);
	УстановитьЗначениеПоказателя("Б046_" + Ячейка);
	УстановитьЗначениеПоказателя("Б047_" + Ячейка);
	УстановитьЗначениеПоказателя("Б048_" + Ячейка);
	УстановитьЗначениеПоказателя("Б049_" + Ячейка);
	УстановитьЗначениеПоказателя("Б050_" + Ячейка);
	УстановитьЗначениеПоказателя("Б051_" + Ячейка);
	
	
	УстановитьЗначениеПоказателя("Б061_" + Ячейка);
	УстановитьЗначениеПоказателя("Б062_" + Ячейка);
	УстановитьЗначениеПоказателя("Б063_" + Ячейка);
	УстановитьЗначениеПоказателя("Б064_" + Ячейка);
	УстановитьЗначениеПоказателя("Б065_" + Ячейка);
	УстановитьЗначениеПоказателя("Б066_" + Ячейка);
	УстановитьЗначениеПоказателя("Б067_" + Ячейка);
	УстановитьЗначениеПоказателя("Б068_" + Ячейка);
	УстановитьЗначениеПоказателя("Б069_" + Ячейка);
	УстановитьЗначениеПоказателя("Б070_" + Ячейка);
	УстановитьЗначениеПоказателя("Б071_" + Ячейка);
	
	УстановитьЗначениеПоказателя("Б091_" + Ячейка);
	УстановитьЗначениеПоказателя("Б092_" + Ячейка);
	УстановитьЗначениеПоказателя("Б093_" + Ячейка);
	УстановитьЗначениеПоказателя("Б094_" + Ячейка);
	
	УстановитьЗначениеПоказателя("Б101_" + Ячейка);
	УстановитьЗначениеПоказателя("Б102_" + Ячейка);
	УстановитьЗначениеПоказателя("Б103_" + Ячейка);
	УстановитьЗначениеПоказателя("Б104_" + Ячейка);
	УстановитьЗначениеПоказателя("Б105_" + Ячейка);
	
	УстановитьЗначениеПоказателя("Б120_" + Ячейка);
	
	ПолеРезультата.Области.НаимЮЛПол.Значение    = Организация;
	ПолеРезультата.Области.ФИОРук.Значение 	   = "";
	ПолеРезультата.Области.ФИОБух.Значение 	   = "";
	
	ПолеРезультата.Области.Дата.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(НачалоПериодаПланирования,мПериодичность) + " - " + фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(КонецПериодаПланирования,мПериодичность);
	//вычисляем значения для итоговых полей
	Отчеты.фин_ПрогнозныйОтчетОДвиженииДенег.Расчет(ПолеРезультата);  
	
КонецПроцедуры // ЗаполнитьАвто()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя)
	
	ИмяСвойства = Лев(ИмяПоказателя,4);
	ЗначениеПоказателя = 0;
	Если НЕ СтруктураЯчеек.Свойство(ИмяСвойства,ЗначениеПоказателя) Тогда
		ЗначениеПоказателя =0 ;
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
		Делитель=1/1000000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
		Делитель=1/100000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
		Делитель=1/10000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
		Делитель=1/1000;
	ИначеЕсли ЕдиницаИзмерения = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
		Делитель=1/100;
	Иначе
		Делитель = 1;
	КонецЕсли;
	

    Если ПолеРезультата.Области.Найти(ИмяПоказателя) <> Неопределено Тогда
 		ПолеРезультата.Области[ИмяПоказателя].Значение = Окр(ЗначениеПоказателя*Делитель,ТочностьЕдиницыИзмерения);
	КонецЕсли;
КонецПроцедуры // УстановитьЗначениеПоказателя()


ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("Бюджет");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("НачалоПериодаПланирования",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериодаПланирования",КонецМесяца(ТекущаяДата()));
//ЗаполнениеПараметров.Вставить("ГраницаАктуальности",ТекущаяДата());
//ЗаполнениеПараметров.Вставить("ГраницаФактическихИПрогнозныхДанных",ТекущаяДата());
//ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());  
ЗаполнениеПараметров.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
ЗаполнениеПараметров.Вставить("Периодичность",Перечисления.фин_Периодичность.Месяц);
ЗаполнениеПараметров.Вставить("ЕдиницаИзмерения",Перечисления.фин_РазрядностьПланированияБюджетов.Единицы);
ЗаполнениеПараметров.Вставить("ТочностьЕдиницыИзмерения",2);

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджеты.Ссылка
		|ИЗ
		|	Справочник.фин_Бюджеты КАК фин_Бюджеты
		|ГДЕ
		|	НЕ фин_Бюджеты.ПометкаУдаления
		|	И фин_Бюджеты.ПозицияКлассификатора = ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторБюджетов.БюджетДвиженияДенежныхСредств)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ЗаполнениеПараметров.Вставить("ВидДанных",ВыборкаДетальныеЗаписи.Ссылка);
КонецЦикла;


ДополнительныеПараметры = Новый Массив;
//ДополнительныеПараметры.Добавить("ГраницаАктуальности");
ДополнительныеПараметры.Добавить("Периодичность");
ДополнительныеПараметры.Добавить("ЕдиницаИзмерения");
ДополнительныеПараметры.Добавить("ТочностьЕдиницыИзмерения");
ДополнительныеПараметры.Добавить("ПоказыватьЗаголовок");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("ДатаПодписи");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");

СпискиВыбораДляПереключателей = Новый Структура;
СписокСравнениеСПредыдущимГодом = Новый СписокЗначений;
СписокСравнениеСПредыдущимГодом.Добавить(0,"С предыдущим периодом");
СписокСравнениеСПредыдущимГодом.Добавить(1,"С сопоставимым периодом предшествующего фин. года");

СпискиВыбораДляПереключателей.Вставить("СравнениеСПредыдущимГодом",СписокСравнениеСПредыдущимГодом);