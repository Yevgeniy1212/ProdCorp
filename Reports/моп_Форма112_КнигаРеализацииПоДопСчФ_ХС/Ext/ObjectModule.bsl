#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//переменная хранит общую структуру документа
Перем мСтруктураОтчета Экспорт;

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаПоказателей Экспорт;

// Переменная хранит начало периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;

// Переменная хранит начало периода построения отчета
Перем мДатаКонцаПериодаОтчета  Экспорт;

// Переменная хранит периодичность отчета
Перем мПериодичность Экспорт;


// Переменная хранит год периода формирования отчета.
Перем мГод Экспорт;

// Переменная хранит квартал периода формирования отчета.
Перем мКвартал Экспорт;

// Переменная хранит месяц периода формирования отчета.
Перем мМесяц Экспорт;


//количество строк, в многострочных таблицах
Перем мКоличествоНаЛисте Экспорт;

// Хранит ФИО исполнителя 
Перем мИсполнитель Экспорт;

//храним список тегов XML и имя областей
//макета "Показатели" для невыгружаемых форм
Перем мСписокНезаполняемыхФорм;

//хранит области, на которых последний раз 
//спозиционировался пользователь
//запоминается при закрытии формы
Перем мАктивныеОбласти Экспорт;

//Переменная хранит список страниц отчета на печать
Перем мТаблицаСтраницНаПечать Экспорт;

// Выбранная форма
Перем мВыбраннаяФорма Экспорт;

// Открытая в данный момент форма рег.отчета
Перем мФорма Экспорт;

// Признак, определяющий многострочность формы
Перем МногострочностьФормы;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым строится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

////////////////////////////////////////////////////////////////////////////////
// Блок ГСМ – Начало

// Хранит признак того что МОП встроен в Нефтебазу
Перем мЕстьДополнениеГСМ Экспорт;

// Блок ГСМ – Окончание
////////////////////////////////////////////////////////////////////////////////

// Хранит значение константы "МОП: Основная конфигурация"
Перем мОсновнаяКонфигурация Экспорт;

// Хранит дерево настройки страниц.
Перем мДеревоНастройкиСтраниц Экспорт;

// Хранит данные отчета.
Перем мСписокФормБезИерархии Экспорт;

// Хранит список сохранения
Перем мСписокСохранения Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;

// Хранит таблицу значений - состав показателей для передачи данных.
Перем мТаблицаПоказателейДляПередачиДанных Экспорт;

// Хранит макет, содержащий представление многострочных форм
// Равен "Неопределено", если отчет не содержит многострочных форм
//                       и соответственно в таких отчетах макет не создается
Перем мМакет Экспорт;

// Заполняет структуру отчета
//
Процедура ЗаполнитьСтруктуруФормОтчета()
	
	//записываем все формы отчета в структуру
	Макет        = ПолучитьМакет("Показатели");
	Префикс      = Прав(мВыбраннаяФорма,7);
	мСтруктураОтчета = Новый Структура;
	ТаблицаУпорядочивания = Новый ТаблицаЗначений();
	ТаблицаУпорядочивания.Колонки.Добавить("Область");
	ТаблицаУпорядочивания.Колонки.Добавить("Верх");
	
	Для  НомерОбласти = 0 По  Макет.Области.Количество() -1 Цикл
		Область = Макет.Области[НомерОбласти];
		
		Если Лев(Область.Имя,8) <> "Документ" И Прав(Область.Имя,7) = Префикс Тогда
			НоваяСтрока = ТаблицаУпорядочивания.Добавить();
			НоваяСтрока.Область = Область;
			НоваяСтрока.Верх = Область.Верх;			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУпорядочивания.Сортировать("Верх");
	
	Для Каждого Строка Из ТаблицаУпорядочивания Цикл					
		ИмяФормы     = СокрП(Макет.Область(Строка.Верх, 1).Текст);
		//объявляем основную структуру отчета
		мСтруктураОтчета.Вставить(ИмяФормы);
	КонецЦикла;
                    КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 // Выполняет начальные настройки параметров отчета.
// По данным макета "Показатели" формирует:
//   - состав показателей отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЗаполнитьСтруктуруФормОтчета();
	
	мСписокНезаполняемыхФорм = Новый СписокЗначений;
	
	Показатели = ПолучитьМакет("Показатели");
	мТаблицаПоказателей.Очистить();
	СоответствиеАтрибутов = Новый Соответствие();
	ЗаполнениеАтрибутов = Ложь;
	НоваяСтрока = Неопределено;
	ИмяСтраницы = "";
	Для Каждого ТекОбласть Из Показатели.Области Цикл
		ИмяФормы      = ТекОбласть.Имя;
				
		Префикс = Прав(мВыбраннаяФорма,7);
		Если  Прав(ИмяФормы,7) = Префикс Тогда
			//незаполняемая, но выгружаемая форма
			Если ЭтотОбъект.Метаданные().Формы.Найти(ИмяФормы)= Неопределено Тогда
				КодПоказателя          = СокрП(Показатели.Область(ТекОбласть.Верх, 1).Текст);
				мСписокНезаполняемыхФорм.Добавить(КодПоказателя,ИмяФормы);				
				Продолжить;
			КонецЕсли;

			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя          = СокрП(Показатели.Область(Ном, 1).Текст);
			КодПоказателяПоФорме   = СокрП(Показатели.Область(Ном, 2).Текст);
			КодЛиста               = СокрП(Показатели.Область(Ном, 5).Текст);

			//Признак многострочности формы, если есть - то ставиться *
			Многострочность = СокрП(Показатели.Область(Ном,3).Текст);
			
			ПризнакФлажка   = СокрП(Показатели.Область(Ном,4).Текст);
			Если Лев(КодПоказателяПоФорме,4)= "form" Тогда
				ИмяФормыXML = КодПоказателя;
			КонецЕсли;
						
			Если Лев(КодПоказателя,4)= "page" Тогда
				ИмяСтраницы = КодПоказателя;
				ИмяЛиста    = КодЛиста;
			КонецЕсли;
					
			Если КодПоказателя = "Атрибуты" Тогда
				ЗаполнениеАтрибутов = Истина;
				СоответствиеАтрибутов = Новый Соответствие();
			
			ИначеЕсли КодПоказателя = "КонецАтрибуты" Тогда
				ЗаполнениеАтрибутов = Ложь;				     
			ИначеЕсли   ЗаполнениеАтрибутов  Тогда
				НоваяСтрока.Атрибуты.Вставить(КодПоказателя,КодПоказателяПоФорме);	
			Иначе  				
				ИмяПоказателя = КодПоказателя;
				
				// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
				КодПоказателяПоФорме = СокрЛП(Показатели.Область(Ном, 2).Текст);
				
				// формируем таблицу значений, содержащей состав показателей отчета
				НоваяСтрока = мТаблицаПоказателей.Добавить();
				НоваяСтрока.ИмяФормыТаблДокумента    = ИмяФормы;
				НоваяСтрока.ИмяФормыXML              = ИмяФормыXML;
				НоваяСтрока.ИмяСтраницыФормы         = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателя;
				НоваяСтрока.ПризнакМногострочности   = Многострочность;
				НоваяСтрока.ПризнакФлажка            = ПризнакФлажка;
				НоваяСтрока.Атрибуты                 = Новый Соответствие();				
				НоваяСтрока.ИмяЛиста                 = ИмяЛиста;				
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;	
КонецЦикла; 	
КонецПроцедуры   //ЗаполнитьНачальныеНастройки()

 //Функция управляет показом в форме периода построения отчета.
 //
Функция ПоказатьОсновнойПериод() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета, "ФП = истина");
	ОпределитьНомерКвартала(СтрПериодОтчета);
	Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьПериод()

// Заполняет значения года, квартала и месяца
//
Процедура ОпределитьНомерКвартала(СтрПериодОтчета)
	
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
		мКвартал = Лев(СтрПериодОтчета,1);
	ИначеЕсли  мПериодичность = Перечисления.Периодичность.Месяц Тогда
		мМесяц = Месяц(мДатаНачалаПериодаОтчета);
		мКвартал = Лев(ПредставлениеПериода(НачалоКвартала(мДатаКонцаПериодаОтчета),КонецКвартала(мДатаКонцаПериодаОтчета),"ФП = истина"),1);
	Иначе
		мКвартал = Лев(ПредставлениеПериода(НачалоКвартала(мДатаКонцаПериодаОтчета),КонецКвартала(мДатаКонцаПериодаОтчета),"ФП = истина"),1);
	КонецЕсли;
	
	мГод     = Лев(Прав(СтрПериодОтчета,7),4); 
	
КонецПроцедуры

//открывает форму расшифровки, предназначенную для значения выбранной ячейки
//
//Параметры:
//	Ячейка - имя ячейки в табличном документе
//  ИмяЯчейки - имя, как оно задано в таблице расшифровке для формы
//  ИмяГруппы - имя листа
//  ТаблицаРасшифровки  - таблица значений, в которой хранятся имена ячеек и их значения
//  Форма - Форма, которая должна открыться для значения ячейки
//  ВсегдаОткрыватьФормуВыбора - если установлен в значение "Ложь", то если значение расшифровки заполнено, открывается форма элемента
//  вместо формы выбора
//
Процедура ОткрытьРасшифровкуЯчейки(Ячейка, ИмяЯчейки, ИмяГруппы, ТаблицаРасшифровки, Форма, ВсегдаОткрыватьФормуВыбора = Истина) Экспорт
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
	Если Строка.Количество() = 0  Тогда
		Если НЕ Форма = Неопределено Тогда
			ЗначениеВыбора = Форма.ОткрытьМодально();  
			Если ЗначениеВыбора <> Неопределено Тогда
				НоваяСтрока = ТаблицаРасшифровки.Добавить();
				НоваяСтрока.Имягруппы   = ИмяГруппы;
				НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
				НоваяСтрока.ПолеПоиска  = ЗначениеВыбора;
				НоваяСтрока.НомерСтроки = Число(НомерЯчейки);				
			КонецЕсли;
		КонецЕсли;  				       
		Возврат;
	КонецЕсли;		
	Расшифровка        = Строка[0].ПолеПоиска;
	Если  Расшифровка <> Неопределено Тогда
		Если ЗначениеЗаполнено(Расшифровка) Тогда
			// Если расшифровка первой ячейки, то просто откроем форму документа
			// в обычном, немодальном режиме, т.к. при этом не обновляются звисимые
			// ячейки
			ЗначениеВыбора = Неопределено;
			Если ИмяЯчейки = "Ф112_01"  Тогда
				Расшифровка.ПолучитьФорму().Открыть();
			ИначеЕсли Форма <> Неопределено и ВсегдаОткрыватьФормуВыбора Тогда
				Попытка
					Форма.НачальноеЗначениеВыбора = Расшифровка;
					Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						Форма.ПараметрОтборПоВладельцу = Расшифровка.Владелец;
					КонецЕсли;
					ЗначениеВыбора = Форма.ОткрытьМодально();
				Исключение
				КонецПопытки;
			Иначе
				ЗначениеВыбора = Расшифровка.ПолучитьФорму( , , ЭтотОбъект).ОткрытьМодально();
			КонецЕсли;
		Иначе
			ЗначениеВыбора = Форма.ОткрытьМодально();
		КонецЕсли;
		Если ЗначениеВыбора <> Неопределено Тогда
			Строка[0].ПолеПоиска = ЗначениеВыбора;	
		КонецЕсли;
	ИначеЕсли Форма <> Неопределено Тогда
		ЗначениеВыбора = Форма.ОткрытьМодально();
		Если ЗначениеВыбора <> Неопределено Тогда
			Строка[0].ПолеПоиска = ЗначениеВыбора;	
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры //ОткрытьРасшифровкуЯчейки

//приводит значение к нужному формату для выгрузки в формате XML
//
//Параметры:
//	Значение - значение, которое нужно привести к нужному формату
//	ПризнакФлажка - признак значения, на проверку по типу "Булево"
//  Область - область по таблице показателей, содержащая показатель
//
Функция ПривестиЗначениеКФормату(Значение, ПризнакФлажка, Область) Экспорт
	
	Если Область <> Неопределено Тогда
		//если заполняем месяц, то нужно установить формат	 
		Если Лев(Область,5) = "Месяц" Тогда
			Если Значение = 0 Тогда
				Значение = "";
				Возврат Значение;		
			КонецЕсли;			
		ИначеЕсли (Лев(Область,7) = "Квартал" И Значение = 0) Или (Лев(Область,3) = "РНН" и Значение = 0)  Тогда
			Значение = "";
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПризнакФлажка = "*" Тогда
		Если Врег(Значение) = "Х" Тогда
			Значение = "1";
		Иначе
			Значение = "0";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = ""
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли; 		
		//если значение, то нам нужно записать его как строку, а
		//иначе не отобразиться в выгрузке (будет пусто у этого поля)				
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		Значение = "";						 
	КонецЕсли;	  	
	
	Возврат Значение;
	
КонецФункции //ПривестиЗначениеКФормату()

//Процедура перенумеровывает номера строк в таблица расшифровке, после удаления 
//строки пользователем
//	Параметры:
//	ТаблицаРасшифровки: Таблица значений, в которой хранятся расшифровки ячеек
//	НомерСтроки: Число, номер удаляемой ячейки
//
Процедура  ПерезаполнитьТаблицуРасшифровки(ТаблицаРасшифровки, НомерСтроки)Экспорт
	
	Отбор = Новый Структура("НомерСтроки", Число(НомерСтроки));
	ТаблицаРасшифровки.Сортировать("НомерСтроки");
	МассивСтрок = ТаблицаРасшифровки.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивСтрок Цикл
			Индекс = ТаблицаРасшифровки.Индекс(Элемент);
			ТаблицаРасшифровки.Удалить(Элемент);
		КонецЦикла;
		Для ИндексСтроки = Индекс По ТаблицаРасшифровки.Количество()-1 Цикл
			ТаблицаРасшифровки[ИндексСтроки].НомерСтроки = ТаблицаРасшифровки[ИндексСтроки].НомерСтроки - 1;
		КонецЦикла;			 
	КонецЕсли;    
	
КонецПроцедуры   //ПерезаполнитьТаблицуРасшифровки()
  
////////////////////////////////////////////////////////////////////////////////
// Блок ГСМ – Начало

//Процедура выполняет отбор справочника ПинКод по номенклатуре 
//
//	Параметры:
//	ФормаВыбора - форма выбора справочника ПинКод
//	Ячейка - имя ячейки в табличном документе
//  ТаблицаРасшифровки - таблица значений, в которой хранятся имена ячеек и их значения
//
Процедура ОтобратьСписокПодчиненныхПинКодов(ФормаВыбора, Ячейка, ТаблицаРасшифровки)  Экспорт
	
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки","Ф112_4");
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);

	Если Строка.Количество() <> 0  Тогда
		Расшифровка        = Строка[0].ПолеПоиска;
		Если Расшифровка <> Неопределено Тогда
			Владелец = Расшифровка;
			ФормаВыбора.Отбор.Владелец.ВидСравнения = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Владелец.Значение = Владелец;
			ФормаВыбора.Отбор.Владелец.Использование = Истина;
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

// Блок ГСМ – Окончание
///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ЗАПИСИ В ФОРМАТ XML

//Предназначена для выгрузки данных в файл XML, только тех форм
//у которых присутствует многострочная часть
//
//Параметры:
//  Документ -  Соответствие, содержит данные формы
//  ОбъектXML - объект ЗаписьXML
//
Процедура ВыгрузитьМногострочнуюЧастьВXML(Документ,ОбъектXML)
	
	Стр      = 1;
	Страницы = 1;
	
	Пока  Стр <= Страницы Цикл
		Имя = "sheet";
		ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
		
		Для Каждого СтраницаФормы Из Документ.Значение Цикл
			КоличествоЭлементов = СтраницаФормы.Значение.Количество();
			Если КоличествоЭлементов > мКоличествоНаЛисте Тогда
				Страницы = Цел(КоличествоЭлементов/мКоличествоНаЛисте);
			КонецЕсли;
			КоличествоС = Стр*мКоличествоНаЛисте-мКоличествоНаЛисте+1;
			КоличествоПо = Стр*мКоличествоНаЛисте;
			
			Для Каждого Страница из СтраницаФормы.Ключ Цикл
				//записываем  страницу	
				ИмяСтраницы = Страница.Ключ;
				ОбъектXML.ЗаписатьНачалоЭлемента(ИмяСтраницы);
				
				//устанавливаем атрибуты для страниц
				СтрокаАтрибутов = мТаблицаПоказателей.Найти(ИмяСтраницы,"КодПоказателяПоСтруктуре");
				Для Каждого Атрибут Из СтрокаАтрибутов.Атрибуты Цикл
					ОбъектXML.ЗаписатьАтрибут(Атрибут.Ключ, Атрибут.Значение);
				КонецЦикла;

				//получаем данные страницы
				Для Каждого ЭлементСтраницы Из Страница.Значение Цикл
		     	//записываем данные из шапки документа					
					ТаблицаТегов = ЭлементСтраницы.Ключ;
					Для Каждого Элемент Из таблицаТегов Цикл
						Ключ = Элемент[0];
						Значение = Элемент[1];
						//записываем страницу
						Если Значение = Неопределено Тогда
							Значение = Формат(Стр,"ЧЦ=5; ЧВН=; ЧГ=");
						//проверяем на признак флажка
						ИначеЕсли Врег(Значение) = "Х" Тогда
							Значение = 1;
						КонецЕсли;   						
						ЗаписатьУзелXML(ОбъектXML,Ключ, Значение);											
					КонецЦикла;
					ВыгрузитьТаблицуВXML(ОбъектXML, СтраницаФормы.Значение, КоличествоС,КоличествоПо);					
					//если есть подвал, то записываем его
					Если ЭлементСтраницы.Значение <> Неопределено Тогда
						Для Каждого Подвал Из ЭлементСтраницы.Значение Цикл
							ЗаписатьУзелXML(ОбъектXML,Подвал.Ключ, Подвал.Значение);
						КонецЦикла; 
					КонецЕсли;
					
					ОбъектXML.ЗаписатьКонецЭлемента();//закрываем страницу
					
				КонецЦикла; //закрываем цикл постранично
			КонецЦикла;
		КонецЦикла; 		
		ОбъектXML.ЗаписатьКонецЭлемента();//sheet	
		Стр = Стр +1;
	КонецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры   //ВыгрузитьМногострочнуюЧастьВXML()

//Выгружает данные отчета в формат XML
// Параметры:
//   ИмяФайла - файл, куда будет идти запись
//   текста XML.
//
Процедура ВыгрузитьДанныеВXML(ИмяФайла)  Экспорт
	
	Перем ИмяФормыСтрока;
	
	Если мТаблицаПоказателей.Количество() > 0 Тогда
	ИмяФормы = СокрЛП(мТаблицаПоказателей[0].ИмяФормыТаблДокумента);
	КонецЕсли;
	
	мСписокТегов = моп_РаботаСДиалогами.ПолучитьСписокТегов(112, ИмяФормы);	
	Если мСписокТегов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запись = Новый ЗаписьXML();
	
	Запись.ОткрытьФайл(ИмяФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("document");	 
	 
	 Для Ном = 0 По мСписокТегов.Количество()-1 Цикл
	 	Запись.ЗаписатьАтрибут(мСписокТегов[Ном].Значение, мСписокТегов[Ном].Представление);
	 КонецЦикла;
	
	Для Каждого Документ Из мСтруктураОтчета Цикл	 
	 ИмяФормы = Документ.Ключ;		
		Запись.ЗаписатьНачалоЭлемента(ИмяФормы);
		
		СтрокаАтрибутов = мТаблицаПоказателей.Найти(ИмяФормы,"КодПоказателяПоСтруктуре");
		Для Каждого Атрибут Из СтрокаАтрибутов.Атрибуты Цикл
			Запись.ЗаписатьАтрибут(Атрибут.Ключ, Атрибут.Значение);
		КонецЦикла; 		
								
		Если МногострочностьФормы = 1 Тогда
			ВыгрузитьМногострочнуюЧастьВXML(Документ,Запись);
		Иначе
			//форма не содержит табличных частей
			Для Каждого СтраницаФормы Из Документ.Значение Цикл//перебираем значения формы
				//идем постранично по форме
				Для Каждого Страница из СтраницаФормы.Ключ Цикл
					//записываем  страницу	                           
					ИмяСтраницы = Страница.Ключ;
					Запись.ЗаписатьНачалоЭлемента(ИмяСтраницы);
					
					//устанавливаем атрибуты для страниц
					СтрокаАтрибутов = мТаблицаПоказателей.Найти(ИмяСтраницы,"КодПоказателяПоСтруктуре");
					Для Каждого Атрибут Из СтрокаАтрибутов.Атрибуты Цикл
						Запись.ЗаписатьАтрибут(Атрибут.Ключ, Атрибут.Значение);
					КонецЦикла;
					
						//получаем данные страницы
					Для Каждого ЭлементСтраницы Из Страница.Значение Цикл
						//записываем данные из шапки документа
												
						ТаблицаТегов = ЭлементСтраницы.Ключ;
						Для Каждого Элемент Из таблицаТегов Цикл
							Ключ = Элемент[0];
							Значение = Элемент[1];
							ЗаписатьУзелXML(Запись,Ключ, Значение);
						КонецЦикла; 						
						//если есть подвал, то записываем его
						Если ЭлементСтраницы.Значение <> Неопределено Тогда
							Для Каждого Подвал Из ЭлементСтраницы.Значение Цикл
								ЗаписатьУзелXML(Запись,Подвал.Ключ, Подвал.Значение);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;	
					
					Запись.ЗаписатьКонецЭлемента();//закрываем страницу
					
				КонецЦикла; 
			КонецЦикла;
			Запись.ЗаписатьКонецЭлемента();// закрываем sheet
		КонецЕсли;
		
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();  //закрываем форму
	
	#Если Клиент Тогда
		//выдаем пользователю сообщение о конце выгрузки
		РегламентированнаяОтчетность.ВыдатьОтветПриВыгрузке() ;
	#КонецЕсли 	

КонецПроцедуры   //ВыгрузитьДанныеВXML()

// Процедура записывает текстовой узел в файл XML
//
// Параметры:
//  ОбъектXML         - объект ЗаписьXML
//  Элемент           - строка,наименования узла
//  ЗначениеЭлемента  - строка,текстовое значение для записи в файл
//  
Процедура ЗаписатьУзелXML(ОбъектXML,Элемент, ЗначениеЭлемента)  Экспорт
	
	ОбъектXML.ЗаписатьНачалоЭлемента(Элемент);
	ОбъектXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьУзелXML()

//Записывает табличную часть страницы в файл XML
//
//Параметры: 
//  Запись            - объект ЗаписьXML
//  ТаблицаДокументов - Таблица значений, строки которой 
//                        нужно записать в файл XML
//  КоличествоС       - число, с какой строки начинать запись
//  КоличествоПо      - число, до какой строки продолжать запись
//
Процедура ВыгрузитьТаблицуВXML(Запись, ТаблицаДокумента, КоличествоС, КоличествоПо) Экспорт
	
	Запись.ЗаписатьНачалоЭлемента("rowset");
	Для Инд = КоличествоС-1 По КоличествоПо-1  Цикл
		Запись.ЗаписатьНачалоЭлемента("row");
		Для Каждого Колонка Из ТаблицаДокумента.Колонки Цикл
			ИмяЭлемента = Колонка.Имя;
			Элемент =ТаблицаДокумента[Инд]; 
			ЗначениеЭлемента = Элемент[ИмяЭлемента];
			ЗаписатьУзелXML(Запись,ИмяЭлемента, ЗначениеЭлемента)
		КонецЦикла;
		КоличествоС = КоличествоС +1;
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры   //ВыгрузитьТаблицуВXML()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мТаблицаПоказателей    = Новый ТаблицаЗначений;
мТаблицаПоказателей.Колонки.Добавить("ИмяФормыТаблДокумента");
мТаблицаПоказателей.Колонки.Добавить("ИмяФормыXML");
мТаблицаПоказателей.Колонки.Добавить("ИмяСтраницыФормы");
мТаблицаПоказателей.Колонки.Добавить("Атрибуты");
мТаблицаПоказателей.Колонки.Добавить("КодПоказателяПоФорме");
мТаблицаПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре");
мТаблицаПоказателей.Колонки.Добавить("ПризнакМногострочности");
мТаблицаПоказателей.Колонки.Добавить("ПризнакФлажка");   
мТаблицаПоказателей.Колонки.Добавить("ИмяЛиста");   


мКоличествоНаЛисте = 20;

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");


// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;
	
МногострочностьФормы = 1;	

//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = истина;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

////////////////////////////////////////////////////////////////////////////////
// Блок ГСМ – Начало

мЕстьДополнениеГСМ = Метаданные.Константы.Найти("гсм_НомерВерсииКонфигурации");

// Блок ГСМ – Окончание
////////////////////////////////////////////////////////////////////////////////

мОсновнаяКонфигурация = моп_Общий.ПолучитьОсновнуюКонфигурацию();

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    

мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       

мСписокСохранения = Новый Структура;

#КонецЕсли
