Перем СохраненнаяНастройка Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем ОтображатьОформление Экспорт;

#Если Клиент Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета", Истина);
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт	
		
	ПоказателиОтчета = Новый Структура("СуммаНачальныйОстаток, УплаченныйНалог, НачисленныйНалог, ВозвратНалога, СуммаКонечныйОстаток, СуммаНалогаВычет, СуммаНалогаНЕВычет", 
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Начальное сальдо"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Уплата налога"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Начисление налога"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Возврат налога"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Конечное сальдо"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Сумма вычета"),
				Новый Структура("Значение, Использование, Представление", Истина, Истина,        "Не разрешено к вычету"),);
				
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	//Данные отчета
	Если ДанныеОтчета = Неопределено Тогда
		ДанныеОтчета = Новый Структура;
	КонецЕсли;
	// Показатели отчета
	Если Не ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
	
	// Дополнительные поля
	Если Не ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	КонецЕсли;
		
	Если Не ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Использование");
		ДополнительныеПоля.Колонки.Добавить("Представление");
		ДополнительныеПоля.Колонки.Добавить("Поле");
		ДополнительныеПоля.Колонки.Добавить("Положение");
		ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	КонецЕсли;
	 	
	//Добавим дополнительную группировку в отчет
	Если Не ДанныеОтчета.Свойство("ГруппировкаДоп") Тогда
		
		Группировка = Новый ТаблицаЗначений;
		Группировка.Колонки.Добавить("Использование");
		Группировка.Колонки.Добавить("Представление");
		Группировка.Колонки.Добавить("Поле");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
		Группировка.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));   
		Группировка.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ДанныеОтчета.Вставить("ГруппировкаДоп", Группировка);
		
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		ТиповыеОтчеты.ДобавитьОтбор(
			КомпоновщикНастроек,
			"Субконто1",
			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.Ссылка,
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	 	 	
	//Настройки формы
	Если НастройкиФормы = Неопределено Тогда
		НастройкиФормы = Новый Структура;
	КонецЕсли;	 	
		
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда                                                        
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);		
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);	
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	                                                                                 
	Если ВыводитьПолностью Тогда                                                
		// Выполним дополнительную обработку Результата отчета                       
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	Если МакетКомпоновки.Макеты.Количество() > 0 Тогда
		МакетШапкиТаблицы = МакетКомпоновки.Макеты[0].Макет;
		Для Каждого СтрокаГруппировки Из МакетШапкиТаблицы Цикл
			Для Индекс = 0 По СтрокаГруппировки.Ячейки.Количество() - 1 Цикл
				Ячейка = СтрокаГруппировки.Ячейки[Индекс];
				СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(Индекс = 0, Ложь, Истина), Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	//МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоГруппировок = 0;
	Для Каждого Группировка Из ДанныеОтчета.ГруппировкаДоп Цикл
		Если Группировка.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ДанныеОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	//МакетПодвалаОтчета            = СтандартныеОтчеты.ПолучитьМакетПодвала(МакетКомпоновки);
	//МакетГруппировкиОрганизация   = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	//МакетГруппировкиСубконто1      = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	//МакетГруппировкиПодразделение = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
	//	
	//Для Каждого Элемент Из МассивДляУдаления Цикл
	//	МакетШапкиОтчета.Макет.Удалить(Элемент);
	//КонецЦикла;
	//
	//Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
	//	Если Макет = МакетШапкиОтчета Тогда
	//	Иначе
	//		Индекс = -1;
	//		МассивПоказателей = Новый Массив;
	//		МассивПоказателей.Добавить("БУ");
	//		МассивПоказателей.Добавить("НУ");
	//		МассивПоказателей.Добавить("ПР");
	//		МассивПоказателей.Добавить("ВР");
	//		
	//		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
	//			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда
	//				Индекс = Индекс + 1;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//КоличествоПоказателей     = 0 + ПоказателиОтчета.БУ.Значение + ПоказателиОтчета.НУ.Значение + ПоказателиОтчета.ПР.Значение + ПоказателиОтчета.ВР.Значение;
	//ЗначенияПоказателей = Новый Массив(6, КоличествоПоказателей);
	//Для Каждого Массив Из ЗначенияПоказателей Цикл
	//	Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
	//		Массив[Индекс] = 0;
	//	КонецЦикла;
	//КонецЦикла;
	//
	//ДанныеОтчета.Вставить("МакетШапкиОтчета"     , МакетШапкиОтчета);
	//ДанныеОтчета.Вставить("МакетСчет"            , МакетГруппировкиСчет);
	//ДанныеОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета);
	//ДанныеОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	//ДанныеОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	//
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	//СмещениеПоСтроке = ДанныеОтчета.МакетШапкиОтчета.Макет[0].Ячейки.Количество() - 7;
	//// Накапливаем суммы по корневым счетам
	//Попытка
	//	Если ДанныеОтчета.МакетСчет.Найти(МакетКомпоновки.Макеты[ЭлементРезультата.Макет]) <> Неопределено Тогда
	//		ЗначениеСчет = ДанныеРасшифровки.Элементы[ЭлементРезультата.ЗначенияПараметров.П2.Значение].ПолучитьПоля()[0].Значение;
	//		Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) Тогда
	//			Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
	//				Для ПодИндекс = 1 По 6 Цикл
	//					Значение = ЭлементРезультата.ЗначенияПараметров[Строка(МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение;
	//					ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] + Значение;
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли; 
	//Исключение
	//КонецПопытки;
	//
	//// Проставляем накопленные суммы в подвал отчета
	//Если ЭлементРезультата.Макет = ДанныеОтчета.МакетПодвал.Имя Тогда
	//	Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
	//		Для ПодИндекс = 1 По 6 Цикл
	//			ЭлементРезультата.ЗначенияПараметров[Строка(ДанныеОтчета.МакетПодвал.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс];
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	//
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СуммаНачальныйОстаток");
	МассивПоказателей.Добавить("УплаченныйНалог");
	МассивПоказателей.Добавить("НачисленныйНалог");	
	МассивПоказателей.Добавить("ВозвратНалога");
	МассивПоказателей.Добавить("СуммаКонечныйОстаток");
	МассивПоказателей.Добавить("СуммаНалогаВычет");
	МассивПоказателей.Добавить("СуммаНалогаНЕВычет");

	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);	
	Если КоличествоПоказателей >= 1 Тогда				
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ЭлементМассива);					
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
   	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НалогОСМС", Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.Ссылка);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);
	
	// Формирование структуры отчета
	//Установим группировку по полям дополнительной группировки
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.ГруппировкаДоп Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Счет") Тогда 
												
				Если Не ПоСубсчетам Тогда
					ЗначениеОтбора = ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
					ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
					ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				КонецЕсли;
				
			КонецЕсли;
			
			СтандартныеОтчеты.ДобавитьОформлениеГруппировки(ПолеВыбраннойГруппировки, Структура, , ИспользоватьОформлениеГруппировок);
			
		КонецЕсли;
	КонецЦикла;
	
	// Отключим вывод отборов
	ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();	
	УстановитьОформлениеПолей(КомпоновщикНастроек.Настройки.Выбор.Элементы, УсловноеОформление);			
КонецПроцедуры

Процедура УстановитьОформлениеПолей(ЭлеметыКомпоновки, УсловноеОформление)
	
	Для Каждого Элемент Из ЭлеметыКомпоновки Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			УстановитьОформлениеПолей(Элемент.Элементы, УсловноеОформление);
		Иначе 
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат, "Налоговой");
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Справка-расчет вычетов по налогам, уплаченным в бюджет (НУ) " + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс,"ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
//	Результат.ФиксацияСверху = ВысотаЗаголовка + ДанныеОтчета.ВысотаШапки;
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	
	//сохраним список структурных единиц
	ДополнительныеПоля = Новый СписокЗначений;
	ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
	ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
	ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
	
	СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();


РежимРасшифровки = Ложь;

ОтображатьОформление = Ложь;

#КонецЕсли