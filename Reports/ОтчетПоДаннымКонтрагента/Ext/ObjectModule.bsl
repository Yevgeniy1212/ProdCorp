#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция определяет контактных лиц контрагента
//Параметры:
//Контрагент - СправочникСсылка.Контрагенты, по которому происходит отбор
//ВыбТипКЛ - Тип контактного лица
//Возвращается таблица значений с колонками
//КонтактноеЛицо, ДолжностьКЛ
Функция ПолучитьКонтакныхЛицКонтрагента(КонтрагентОтчета)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВыбКонтрагент", КонтрагентОтчета);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка    КАК КонтактноеЛицо,
	|	КонтактныеЛица.Должность КАК Должность,
	|	КонтактныеЛица.Роль      КАК Роль,
	|	КонтактныеЛица.Фамилия   КАК Фамилия,
	|	КонтактныеЛица.Имя       КАК Имя,
	|	КонтактныеЛица.Отчество  КАК Отчество
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &ВыбКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактныеЛица.Наименование ВОЗР";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьКонтакныхЛицКонтрагента()

//Возвращает таблицу значений с данными о контактной информации по заданным параметрам
//
Функция ПолучитьДанныеКонтактнойИнформации(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено)

	Запрос = Новый Запрос;

	СтрокаВиртуальныхПараметров = "КонтактнаяИнформация.Объект = &Объект";

	Если ТипИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ТипИнформации);
	КонецЕсли;

	Если ВидИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидИнформации);
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект        КАК Объект,
	|	КонтактнаяИнформация.Вид           КАК Вид,
	|	КонтактнаяИнформация.Тип           КАК Тип,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	" + СтрокаВиртуальныхПараметров + "";

	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаОтчета = '00010101000000', Неопределено, ДатаОтчета));
	Запрос.УстановитьПараметр("Объект"   , Объект);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДанныеКонтактнойИнформации()

// Функция возвращает данные о принадлежности объекта к категориям
//
// Переметры
//  ВыбОбъект - анализируемый объект
//
// Возвращаемое значение
//  ТаблицаЗапроса - таблица значений с данными о принадлежности
//   объекта к категориям
Функция ПрочитатьКатегорииОбъекта(КонтрагентОтчета)

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеКатегорий",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Запрос.УстановитьПараметр("ОбъектОтбораКатегорий", КонтрагентОтчета);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КатегорииОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	КатегорииОбъектов.Ссылка                                     КАК Категория,
	|
	|	ВЫБОР КОГДА
	|		РегистрСведений.КатегорииОбъектов.Объект ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ                                                        КАК Принадлежность
	|
	|
	|ИЗ
	|// Отбираются категории, предназначенные для заданного типа объектов.
	|	(
	|	ВЫБРАТЬ 
	|		Справочник.КатегорииОбъектов.Ссылка          КАК Ссылка,
	|		Справочник.КатегорииОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		Справочник.КатегорииОбъектов
	|
	|	ГДЕ
	|		Справочник.КатегорииОбъектов.НазначениеКатегории В ( &НазначениеКатегорий )
	|
	|	)                                                            КАК КатегорииОбъектов
	|
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются категории, назначенные для заданного объекта.
	|	РегистрСведений.КатегорииОбъектов
	|ПО
	|	РегистрСведений.КатегорииОбъектов.Категория = КатегорииОбъектов.Ссылка
	|	И
	|	РегистрСведений.КатегорииОбъектов.Объект = &ОбъектОтбораКатегорий
	|
	|ГДЕ
	|     (РегистрСведений.КатегорииОбъектов.Объект ЕСТЬ НЕ NULL) и (КатегорииОбъектов.ПометкаУдаления = Ложь)
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииОбъектов.Ссылка.Наименование
	|";


	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Функция свойства и значения свойст объекта
//
// Переметры
//  ВыбОбъект - анализируемый объект
//
// Возвращаемое значение
//  ТаблицаЗапроса - таблица значений с данными о всойствах объекта
Функция ПрочитатьСвойстваИЗначенияОбъекта(КонтрагентОтчета)

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеСвойств",       ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    КонтрагентОтчета);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", КонтрагентОтчета);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект = &СписокНазначенийСвойств
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Ссылка.Наименование
	|";

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;

КонецФункции

// Процедура заполняет поле табличного документа
//
// Переметры
//  Таб - поле табличного документа
//  ПорядковыйНомер - порядковый номер выводимого параметра
//  Имя - строка, имя выводимого параметра
//
// Возвращаемое значение
//  НЕТ
Процедура ВывестиДанные(КонтрагентОтчета, Таб, ПорядковыйНомер, Имя, УровеньКонтрагента)

	//Общая информация

	Макет = ПолучитьМакет("Макет");

	Если Имя = "ОбщиеДанные" Тогда

		Секция = Макет.ПолучитьОбласть("Шапка_Общие");

		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;

		Таб.Вывести(Секция,УровеньКонтрагента);

		Секция = Макет.ПолучитьОбласть("Строка_Общие");

		Если ЗначениеЗаполнено(КонтрагентОтчета.ЮрФизЛицо) Тогда

			Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Секция.Параметры.ЮрФизЛицо = "Юридическое лицо";
			Иначе //Физическое лицо
				Секция.Параметры.ЮрФизЛицо = "Физическое лицо";
			КонецЕсли;

		Иначе
			Секция.Параметры.ЮрФизЛицо = "Не задано";
		КонецЕсли;

		Если ЗначениеЗаполнено(КонтрагентОтчета.ГоловнойКонтрагент) Тогда

			СтрокаГоловногоКонтрагента = Строка(КонтрагентОтчета.ГоловнойКонтрагент);

			Если ЗначениеЗаполнено(КонтрагентОтчета.ГоловнойКонтрагент.ЮрФизЛицо) Тогда
				Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + " (Юридическое лицо)";
				Иначе //Физическое лицо
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + " (Физическое лицо)";
				КонецЕсли;
			КонецЕсли;

			Секция.Параметры.ГоловнойКонтрагент           = СтрокаГоловногоКонтрагента;
			Секция.Области.ГоловнойКонтрагент.Расшифровка = КонтрагентОтчета.ГоловнойКонтрагент;

		Иначе
			Секция.Параметры.ГоловнойКонтрагент = "Не задан";

		КонецЕсли;
		
		МассивКатегорий = ПрочитатьКатегорииОбъекта(КонтрагентОтчета).ВыгрузитьКолонку("Категория");
		СтрокаКатегорий = "";
		Для а=0 По (МассивКатегорий.Количество()-1) Цикл
			Если а=0 Тогда
				СтрокаКатегорий = СтрокаКатегорий + Строка(СокрЛП(МассивКатегорий[а].Наименование));
			Иначе
				СтрокаКатегорий = СтрокаКатегорий + ", " + Символы.ПС + Строка(СокрЛП(МассивКатегорий[а].Наименование));
			КонецЕсли; 
		КонецЦикла; 
		Секция.Параметры.СтрокаКатегорий = СокрЛП(СтрокаКатегорий);


		//Секция = Макет.ПолучитьОбласть("Шапка_ИнформацияКонтрагента");
		Таб.Вывести(Секция, УровеньКонтрагента+1);

		Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда //Юридическое лицо

			Секция = Макет.ПолучитьОбласть("ИнформацияЮрЛицо");
			Секция.Параметры.РНН       = КонтрагентОтчета.РНН;
			Секция.Параметры.КодПоОКПО = КонтрагентОтчета.КодПоОКПО;
       		Секция.Параметры.БИН_ИИН   = КонтрагентОтчета.ИдентификационныйКодЛичности;
			
		Иначе //Физическое лицо

			Секция = Макет.ПолучитьОбласть("ИнформацияФизЛицо");
			Секция.Параметры.РНН                = КонтрагентОтчета.РНН;
			Секция.Параметры.ДокументУдЛичность = КонтрагентОтчета.ДокументУдостоверяющийЛичность;
			Секция.Параметры.БИН_ИИН   			= КонтрагентОтчета.ИдентификационныйКодЛичности;

		КонецЕсли;

		ЮрАдрес   = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Секция.Параметры.ЮрАдрес   = ?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление);

		ФактАдрес = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Секция.Параметры.ФактАдрес = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);

		Телефон   = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Секция.Параметры.Телефон   = ?(Телефон.Количество() = 0, "", Телефон[0].Представление);

		Таб.Вывести(Секция,УровеньКонтрагента+2);

		Если ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойБанковскийСчет) тогда

			Секция = Макет.ПолучитьОбласть("БанкКонтрагента");
			Секция.Параметры.НомерСчета = КонтрагентОтчета.ОсновнойБанковскийСчет.НомерСчета;

			Если ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойБанковскийСчет.Банк) Тогда
				Секция.Параметры.Банк    = КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.ПолноеНаименование() + " " + КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.Город;
				Секция.Параметры.Бик     = УправлениеДенежнымиСредствами.ПолучитьБИКБанка(ДатаОтчета,КонтрагентОтчета.ОсновнойБанковскийСчет.Банк);
				Секция.Параметры.КорСчет = КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.КоррСчет;
			КонецЕсли; 

			Таб.Вывести(Секция,УровеньКонтрагента+2);

		КонецЕсли;

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтИнф" Тогда

		//Контактная информация контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактнаяИнформация");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,УровеньКонтрагента);

		ТЗКонтИнф = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета);
		ТЗКонтИнф.Сортировать("Тип ВОЗР");
		ПрошлыйТип = Неопределено;

		Для каждого СтрокаКИ Из ТЗКонтИнф Цикл

			Если ПрошлыйТип <> СтрокаКИ.Тип Тогда

				Секция = Макет.ПолучитьОбласть("ПустаяСтрока");

				Таб.Вывести(Секция, УровеньКонтрагента+1);

				СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
				СекцияКИ_Тип.Параметры.ТипКИ = СтрокаКИ.Тип;

				Таб.Вывести(СекцияКИ_Тип,УровеньКонтрагента+1);

			КонецЕсли;

			Секция = Макет.ПолучитьОбласть("Строка_КонтактнаяИнформация");
			Секция.Параметры.ВидКИ    = ?(ТипЗнч(СтрокаКИ.Вид)=Тип("Строка"),СокрЛП(СтрокаКИ.Вид),СтрокаКИ.Вид.Наименование);
			Секция.Параметры.Значение = СтрокаКИ.Представление;

			Таб.Вывести(Секция,УровеньКонтрагента+1);

			ПрошлыйТип = СтрокаКИ.Тип;

		КонецЦикла;

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "СвойстваИЗначения" Тогда
		
		//ПрочаяИнформация по свойствам
		ТаблицаСвойств = ПрочитатьСвойстваИЗначенияОбъекта(КонтрагентОтчета);
		Секция = Макет.ПолучитьОбласть("Шапка_Свойства");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,УровеньКонтрагента);
		Секция = Макет.ПолучитьОбласть("Строка_Свойства");
		Ном=0;
		Для каждого СтрокаСвойств Из ТаблицаСвойств Цикл
			Ном=Ном+1;
			Секция.Параметры.ИмяСвойства = ""+Ном+". "+СтрокаСвойств.Свойство.Наименование;
			Секция.Параметры.ЗначениеСвойства = ""+СтрокаСвойств.Значение;
			Таб.Вывести(Секция,УровеньКонтрагента+1);
		КонецЦикла; 

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтЛица" Тогда

		//Контактные лица контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактныеЛица");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;

		Таб.Вывести(Секция,УровеньКонтрагента);

		ТаблицаКЛ = ПолучитьКонтакныхЛицКонтрагента(КонтрагентОтчета);
		Ном       = 0;

		Для каждого СтрокаКЛ Из ТаблицаКЛ Цикл

			Ном    = Ном + 1;
			Секция = Макет.ПолучитьОбласть("Строка_КонтактныеЛица");
			ПредставлениеКонтактногоЛица = СокрЛП(СтрокаКЛ.Фамилия) + " "+ СокрЛП(СтрокаКЛ.Имя) + " " + СокрЛП(СтрокаКЛ.Отчество);

			Если НЕ ПустаяСтрока(СтрокаКЛ.Должность) Тогда
				ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица + ", " + СокрЛП(СтрокаКЛ.Должность);
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаКЛ.Роль) Тогда
				ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица + " (роль: " + СокрЛП(СтрокаКЛ.Роль) + ")";
			КонецЕсли;

			Секция.Параметры.ПредставлениеКонтактногоЛица           = ПредставлениеКонтактногоЛица;
			Секция.Области.ПредставлениеКонтактногоЛица.Расшифровка = СтрокаКЛ.КонтактноеЛицо;
			Таб.Вывести(Секция,УровеньКонтрагента+1);

			Если ВыводитьДопКонтИнф Тогда

				ТЗКонтИнф = ПолучитьДанныеКонтактнойИнформации(СтрокаКЛ.КонтактноеЛицо);
				ТЗКонтИнф.Сортировать("Тип ВОЗР");
				ПрошлыйТип = Неопределено;

				Для каждого СтрокаКИ Из ТЗКонтИнф Цикл

					Если ПрошлыйТип <> СтрокаКИ.Тип Тогда

						Если ПрошлыйТип <> Неопределено Тогда
							Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
							Таб.Вывести(Секция);
						КонецЕсли;

						СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
						СекцияКИ_Тип.Параметры.ТипКИ = СтрокаКИ.Тип;

						Таб.Вывести(СекцияКИ_Тип,УровеньКонтрагента+1);

					КонецЕсли;

					СекцияКИ = Макет.ПолучитьОбласть("КонтИнф_КонтактныеЛица");
					СекцияКИ.Параметры.ВидКИ    = ?(ТипЗнч(СтрокаКИ.Вид)=Тип("Строка"),СокрЛП(СтрокаКИ.Вид),СтрокаКИ.Вид.Наименование);
					СекцияКИ.Параметры.Значение = СтрокаКИ.Представление;

					Таб.Вывести(СекцияКИ,УровеньКонтрагента+2);

					ПрошлыйТип = СтрокаКИ.Тип;

				КонецЦикла;

				Секция = Макет.ПолучитьОбласть("ПустаяСтрока");

				Таб.Вывести(Секция, УровеньКонтрагента+1);

			КонецЕсли;

		КонецЦикла;

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	КонецЕсли;

КонецПроцедуры // ВывестиОбщиеДанные()

Процедура ВывестиДанныеПоКонтрагенту(КонтрагентОтчета, Макет, Таб, УровеньКонтрагента)
	
	Если ЗначениеЗаполнено(КонтрагентОтчета) И (Не КонтрагентОтчета.ЭтоГруппа) Тогда
	
		//Шапка
		Секция = Макет.ПолучитьОбласть("Шапка");
		Секция.Параметры.ПечВыбКонтрагент = КонтрагентОтчета.Наименование;
		Секция.Параметры.ДатаОтчета       = Формат(ДатаОтчета,"ДФ=dd.MM.yyyy");
		Таб.Вывести(Секция, УровеньКонтрагента);
		
		ПрядковыйНомер = 0;

		Для Индекс = 0 По СписокНастроек.Количество() - 1 Цикл

			Если НЕ СписокНастроек[Индекс].Пометка Тогда
				Продолжить;
			КонецЕсли; 

			ПрядковыйНомер = ПрядковыйНомер + 1;
			ВывестиДанные(КонтрагентОтчета, Таб, ПрядковыйНомер, СписокНастроек[Индекс].Значение, УровеньКонтрагента+1);

		КонецЦикла;
		
	Иначе
		
		Секция = Макет.ПолучитьОбласть("СтрокаГруппы");
		Секция.Параметры.ПечВыбКонтрагент = ?(ЗначениеЗаполнено(КонтрагентОтчета), "Группа контрагентов: " + КонтрагентОтчета.Наименование, "Все контрагенты");
		Таб.Вывести(Секция, УровеньКонтрагента);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагенты.ЭтоГруппа УБЫВ,
		|	Контрагенты.Наименование");
		
		Запрос.УстановитьПараметр("Родитель", КонтрагентОтчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаРезультатов = РезультатЗапроса.Выбрать();
			Пока ВыборкаРезультатов.Следующий() Цикл
				Состояние(СокрЛП(ВыборкаРезультатов.Ссылка));
				ВывестиДанныеПоКонтрагенту(ВыборкаРезультатов.Ссылка, Макет, Таб, УровеньКонтрагента+1);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура формирует отчет
//
// Переметры
//  Таб - поле табличного документа
//
// Возвращаемое значение
//  НЕТ
Процедура СформироватьОтчет(Таб) Экспорт

	//Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//	Предупреждение("Выберите контрагента!");
	//	Возврат;
	//КонецЕсли;

	Таб.Очистить();

	Макет = ПолучитьМакет("Макет");
	Таб.НачатьАвтогруппировкуСтрок();

	ВывестиДанныеПоКонтрагенту(КонтрагентОтчета, Макет, Таб, 1);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();

//	Таб.ПоказатьУровеньГруппировокСтрок(2);

	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();

КонецПроцедуры

ДатаОтчета = НачалоДня(ТекущаяДата());

СписокНастроек.Добавить("ОбщиеДанные", "Общие данные контрагента"         , Истина);
СписокНастроек.Добавить("КонтИнф",     "Контактная информация контрагента", Истина);
СписокНастроек.Добавить("КонтЛица",    "Контактные лица контрагента"      , Истина);
СписокНастроек.Добавить("СвойстваИЗначения","Прочие свойства и значения контрагента"       ,Истина);

ВыводитьДопКонтИнф = Истина;

#КонецЕсли