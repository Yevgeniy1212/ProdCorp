#Если Клиент Тогда

Перем мПараметрыЗапроса;

Перем СтруктураПредставлениеПолей;

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;

	// сначала перепишем все параметры, используемые запросов из ф-и ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаПредоставляемыеОтпуска()
	Для Каждого Параметр Из мПараметрыЗапроса Цикл
		ПостроительОтчета.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	// т.к. отчет строится сложным запросом из ф-и ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаПредоставляемыеОтпуска(),
	// то в случае наличия отборов по организации/подразделении/физлицу сразу включим их в текст вложенного запроса
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("ФизЛицо");
	СтруктураОтборов.Вставить("Организация");
	СтруктураОтборов.Вставить("ПодразделениеОрганизации");
	СтруктураОтборов.Вставить("Состояние");
	
	ДопУсловиеТекст = "";  // для предоставляемых отпусков
	Инд = 0;
	Для Каждого КлючИЗначениеОтбора Из СтруктураОтборов Цикл
		ЭлементОтбора = ПостроительОтчета.Отбор.Найти(КлючИЗначениеОтбора.Ключ);
		Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
			
			Если КлючИЗначениеОтбора.Ключ = "Организация" Тогда
				ПутьКДанным = "ОбособленноеПодразделение";
			ИначеЕсли КлючИЗначениеОтбора.Ключ = "Состояние" Тогда
				ПутьКДанным = "ПричинаИзмененияСостояния";
			ИначеЕсли КлючИЗначениеОтбора.Ключ = "ФизЛицо" Тогда
				ПутьКДанным = "Сотрудник.ФизЛицо";
			Иначе
				ПутьКДанным = КлючИЗначениеОтбора.Ключ;
			КонецЕсли;
		
			Инд = Инд + 1;
			ВидСравненияТекст = "";
			ЗначениеПараметра = ЭлементОтбора.Значение;
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				ВидСравненияТекст = "= &ДопПараметр" + Инд;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
				ВидСравненияТекст = "<> &ДопПараметр" + Инд;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				ВидСравненияТекст = " В (&ДопПараметр" + Инд + ")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
				ВидСравненияТекст = " НЕ В (&ДопПараметр" + Инд + ")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии 
						Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
				ВидСравненияТекст = " В ИЕРАРХИИ (&ДопПараметр" + Инд + ")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии
						Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияТекст = " НЕ В ИЕРАРХИИ (&ДопПараметр" + Инд + ")";
			КонецЕсли;
			ПостроительОтчета.Параметры.Вставить("ДопПараметр" + Инд, ЗначениеПараметра);			
			
			Если ВидСравненияТекст <> "" Тогда
				Если ДопУсловиеТекст <> "" Тогда
					ДопУсловиеТекст = ДопУсловиеТекст + " И ";
				КонецЕсли;
				ДопУсловиеТекст = ДопУсловиеТекст + ПутьКДанным + ВидСравненияТекст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДопУсловиеТекст <> "" Тогда
		// сохраним текущие найстройки построителя
		ИсходныйТекст = ПостроительОтчета.Текст;
		НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки();
	
		ТекстЗапроса = СтрЗаменить(ИсходныйТекст, "//доп_условие_отчета", "ГДЕ " + ДопУсловиеТекст);
		
		ПостроительОтчета.Текст = ТекстЗапроса;
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
		               
	КонецЕсли;
        
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Год", Год(ОбщийОтчет.ДатаКон));
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Месяц", Месяц(ОбщийОтчет.ДатаКон));
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_День", День(ОбщийОтчет.ДатаКон));
	ПостроительОтчета.Параметры.Вставить("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ПостроительОтчета.Параметры.Вставить("НеиспользованныйОтпуск", Перечисления.ИспользованиеОтпусковВидСтроки.НеиспользованныйОтпуск);
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);
	
	Если ДопУсловиеТекст <> "" Тогда
		// восстановим прежние настройки построителя
		ПостроительОтчета.Текст = ИсходныйТекст;
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;

	// перезаполним представления полей
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

	// пересортируем поля
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Неиспользованные трудовые отпуска работников организаций";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// берем всех работников, какие есть в базе
	мПараметрыЗапроса = Новый Структура();
	// для определения самых начальных и самых конечных дат расчета передаем конец текущего года
	// реальный расчет будет производится на ДатуАктуальности включительно
	мПараметрыЗапроса.Вставить("ДатаАктуальности", НачалоДня(КонецГода(ТекущаяДата())));
	
	ДанныеРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ВЫРАЗИТЬ(&ДатаАктуальности КАК ДАТА) КАК ДатаРасчета
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности) КАК ДанныеРасчета
	|//доп_условие_отчета
	|";
	
	ПредоставляемыеОтпускаТекст = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаПредоставляемыеОтпуска(ДанныеРасчетаТекст, мПараметрыЗапроса);
	//ПредоставляемыеОтпускаТекст = СтрЗаменить(ПредоставляемыеОтпускаТекст, "РАЗРЕШЕННЫЕ", "");
	
	ПредоставляемыеИФактическиеОтпускаТекст = "
	|" + ПредоставляемыеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРасчета.Организация,
	|	ДанныеРасчета.Сотрудник,
	|	ДанныеРасчета.ДатаРасчета,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета_1
	|ИЗ
	|	ВТ_ДанныеРасчета КАК ДанныеРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ДанныеРасчета.Организация = РаботникиОрганизации.Организация
	|			И ДанныеРасчета.Сотрудник = РаботникиОрганизации.Сотрудник
	|			И РаботникиОрганизации.Период <= ДанныеРасчета.ДатаРасчета
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния = &ПриемНаРаботу
	|
	|СГРУППИРОВАТЬ ПО
	|			ДанныеРасчета.Организация,
	|			ДанныеРасчета.Сотрудник,
	|			ДанныеРасчета.ДатаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.Сотрудник,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РабочийГодС,
	|	ПредоставляемыеОтпуска.РабочийГодПо,
	|	ВЫРАЗИТЬ(СУММА(ПредоставляемыеОтпуска.Результат) КАК ЧИСЛО(5, 0)) КАК ПредоставляемыеДни,
	|	0 КАК ФактическиеДни
	|ПОМЕСТИТЬ ВТ_Отпуска
	|ИЗ
	|	ВТ_ПредоставляемыеОтпуска КАК ПредоставляемыеОтпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставляемыеОтпуска.Организация,
	|	ПредоставляемыеОтпуска.Сотрудник,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.РабочийГодС,
	|	ПредоставляемыеОтпуска.РабочийГодПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИспользованиеОтпусков.Организация,
	|	ИспользованиеОтпусков.Сотрудник,
	|	ИспользованиеОтпусков.ВидТрудовогоОтпуска,
	|	ИспользованиеОтпусков.РабочийГодС,
	|	ИспользованиеОтпусков.РабочийГодПо,
	|	ВЫБОР 
	|		КОГДА ИспользованиеОтпусков.ВидСтроки = &НеиспользованныйОтпуск 
	|			ТОГДА - ИспользованиеОтпусков.ИспользованоДней 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПредоставляемыеДни,
	|	ВЫБОР
	|		КОГДА ИспользованиеОтпусков.ВидСтроки <> &НеиспользованныйОтпуск 
	|			ТОГДА ИспользованиеОтпусков.ИспользованоДней 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФактическиеДни
	|ИЗ
	|	РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчета_1 КАК ДанныеРасчета
	|		ПО ИспользованиеОтпусков.Организация = ДанныеРасчета.Организация
	|			И ИспользованиеОтпусков.Сотрудник = ДанныеРасчета.Сотрудник
	|			И ИспользованиеОтпусков.Период МЕЖДУ ДанныеРасчета.ДатаПриема И КОНЕЦПЕРИОДА(ДанныеРасчета.ДатаРасчета, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Отпуска.Организация,
	|	Отпуска.Сотрудник.ФизЛицо,
	|	Отпуска.Сотрудник,
	|	Отпуска.ВидТрудовогоОтпуска,
	|	Отпуска.РабочийГодС,
	|	Отпуска.РабочийГодПо,
	|	СУММА(Отпуска.ПредоставляемыеДни) КАК ПредоставляемыеДни,
	|	СУММА(Отпуска.ФактическиеДни) КАК ФактическиеДни,
	|	СУММА(Отпуска.ПредоставляемыеДни - Отпуска.ФактическиеДни) КАК НеиспользованныеДни
	|ПОМЕСТИТЬ ВТ_ПредоставляемыеИФактическиеОтпуска
	|ИЗ
	|	ВТ_Отпуска КАК Отпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	Отпуска.Организация,
	|	Отпуска.Сотрудник.ФизЛицо,
	|	Отпуска.Сотрудник,
	|	Отпуска.ВидТрудовогоОтпуска,
	|	Отпуска.РабочийГодС,
	|	Отпуска.РабочийГодПо
	|";
	
	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	
	ТекстЗапроса =" 
	|" + ПредоставляемыеИФактическиеОтпускаТекст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ПредоставляемыеИФактическиеОтпуска.ПредоставляемыеДни,
	|	ПредоставляемыеИФактическиеОтпуска.ФактическиеДни,
	|	ПредоставляемыеИФактическиеОтпуска.НеиспользованныеДни КАК НеиспользованныеДни
	|	//ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ
	|
	|{ВЫБРАТЬ
	|	// данные о работнике организации
	|	РаботникиОрганизации.Сотрудник.ФизЛицо.* КАК ФизЛицо,
	|	РаботникиОрганизации.Сотрудник.* КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	РаботникиОрганизации.ГрафикРаботы.* КАК ГрафикРаботы,
	|	ПредоставляемыеИФактическиеОтпуска.ВидТрудовогоОтпуска.* КАК ВидТрудовогоОтпуска,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодС,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодПо,
	|	НАЧАЛОПЕРИОДА(ПредоставляемыеИФактическиеОтпуска.РабочийГодС, ГОД) КАК КалендарныйГод
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ
	|	//СВОЙСТВА
	|}
	|
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности) КАК РаботникиОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПредоставляемыеИФактическиеОтпуска КАК ПредоставляемыеИФактическиеОтпуска
	|		ПО РаботникиОрганизации.Организация = ПредоставляемыеИФактическиеОтпуска.Организация
	|			И РаботникиОрганизации.Сотрудник = ПредоставляемыеИФактическиеОтпуска.Сотрудник
	|
	|	//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ
	|	//КОНТАКТНАЯ ИНФОРМАЦИЯ: СОЕДИНЕНИЯ
	|	//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.Сотрудник.* КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	РаботникиОрганизации.ГрафикРаботы.* КАК ГрафикРаботы,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния КАК Состояние,
	|	ПредоставляемыеИФактическиеОтпуска.ВидТрудовогоОтпуска.* КАК ВидТрудовогоОтпуска,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодС,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодПо,
	|	НАЧАЛОПЕРИОДА(ПредоставляемыеИФактическиеОтпуска.РабочийГодС, ГОД) КАК КалендарныйГод,
	|	ПредоставляемыеИФактическиеОтпуска.НеиспользованныеДни КАК НеиспользованныеДни
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|
	|{УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.Сотрудник.* КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	РаботникиОрганизации.ГрафикРаботы.* КАК ГрафикРаботы,
	|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния КАК Состояние,
	|	ПредоставляемыеИФактическиеОтпуска.ВидТрудовогоОтпуска.* КАК ВидТрудовогоОтпуска,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодС,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодПо,
	|	НАЧАЛОПЕРИОДА(ПредоставляемыеИФактическиеОтпуска.РабочийГодС, ГОД) КАК КалендарныйГод,
	|	ПредоставляемыеИФактическиеОтпуска.НеиспользованныеДни КАК НеиспользованныеДни
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//СВОЙСТВА
	|}
	|
	|ИТОГИ 
	|	СУММА(ПредоставляемыеДни), 
	|	СУММА(ФактическиеДни),
	|	СУММА(НеиспользованныеДни)
	|	ПО ОБЩИЕ
	|
	|{ИТОГИ ПО
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.Сотрудник.* КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК Организация,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	РаботникиОрганизации.ГрафикРаботы.* КАК ГрафикРаботы,
	|	РаботникиОрганизации.Организация.* КАК ГоловнаяОрганизация,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния КАК Состояние,
	|	ПредоставляемыеИФактическиеОтпуска.ВидТрудовогоОтпуска.* КАК ВидТрудовогоОтпуска,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодС,
	|	ПредоставляемыеИФактическиеОтпуска.РабочийГодПо,
	|	НАЧАЛОПЕРИОДА(ПредоставляемыеИФактическиеОтпуска.РабочийГодС, ГОД) КАК КалендарныйГод
	| 	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|	//ДОПОЛНИТЕЛЬНЫЕ ПСЕВДОНИМЫ ПОЛЕЙ
	|	//СВОЙСТВА
	|}";

	// При использовании свойств и категорий в текст запроса добавляются дополнительные поля
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда

		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.Сотрудник.ФизЛицо";
		НоваяСтрока.Представление = "Физическое лицо";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.Сотрудник";
		НоваяСтрока.Представление = "Сотрудник";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.ОбособленноеПодразделение";
		НоваяСтрока.Представление = "Организация";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
				
        НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.ПодразделениеОрганизации";
		НоваяСтрока.Представление = "Подразделение организации";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;

        НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "РаботникиОрганизации.Должность";
		НоваяСтрока.Представление = "Должность";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;


		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;						  
	                  
	ПостроительОтчета.Текст = ТекстЗапроса;
	                          
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории = Истина Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	//представление полей запроса
	СтруктураПредставлениеПолей.Вставить("ФизЛицо", "Физическое лицо");
	СтруктураПредставлениеПолей.Вставить("ЗанимаемыхСтавок", "Занято ставок");
	СтруктураПредставлениеПолей.Вставить("ВидЗанятости", "Вид занятости");
	СтруктураПредставлениеПолей.Вставить("ПодразделениеОрганизации", "Подразделение");
	СтруктураПредставлениеПолей.Вставить("ТарифныйРазряд", "Тарифный разряд");
	СтруктураПредставлениеПолей.Вставить("ГрафикРаботы", "График работы");
	СтруктураПредставлениеПолей.Вставить("ТабельныйНомер", "Табельный номер");
	СтруктураПредставлениеПолей.Вставить("РабочийГодС", "Начало рабочего года");
	СтруктураПредставлениеПолей.Вставить("РабочийГодПо", "Конец рабочего года");
	СтруктураПредставлениеПолей.Вставить("КалендарныйГод", "Календарный год");
	СтруктураПредставлениеПолей.Вставить("ВидТрудовогоОтпуска", "Вид трудового отпуска");
	СтруктураПредставлениеПолей.Вставить("НеиспользованныеДни", "Неиспользованные дни");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("РабочийГодС", "ДФ=dd.MM.yyyy");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("РабочийГодПо", "ДФ=dd.MM.yyyy");
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("КалендарныйГод", "ДФ=yyyy");
	
	
	ОбщийОтчет.ЗаполнитьПоказатели("ПредоставляемыеДни", "Предоставляемые дни", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("ФактическиеДни", "Использованные дни", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("НеиспользованныеДни", "Неиспользованные дни", Истина, "ЧЦ=15; ЧДЦ=0");
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("КалендарныйГод");	
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Сотрудник");
	ПостроительОтчета.ИзмеренияКолонки.Добавить("ВидТрудовогоОтпуска");
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Организация");
	МассивОтбора.Добавить("ПодразделениеОрганизации");
	МассивОтбора.Добавить("Сотрудник");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// отбор не уволенных
	ЭлементОтбора = ПостроительОтчета.Отбор.Добавить("Состояние",,"Состояние сотрудника");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Значение = Перечисления.ПричиныИзмененияСостояния.Увольнение;
	ЭлементОтбора.Использование = Истина;
	
	// отбор только тех, у кого есть неиспользованные дни
	ЭлементОтбора = ПостроительОтчета.Отбор.Добавить("НеиспользованныеДни",,"Неиспользованные дни");
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Значение = 0;
	ЭлементОтбора.Использование = Истина;
	
	// поля по умолчанию
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	// сортировки по умолчанию
	ПостроительОтчета.Порядок.Добавить("КалендарныйГод");
	ПостроительОтчета.Порядок.Добавить("Сотрудник.Наименование");

	// настройки отчета
	ОбщийОтчет.ИспользоватьИнтервальныеГруппировки = Ложь;
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1; // Дата
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
КонецПроцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мПараметрыЗапроса = Новый Структура();

#КонецЕсли




