Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран счет! Отчет не сформирован");
		Возврат;
	КонецЕсли;
	Если Показатели.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны показатели отчета! Отчет не сформирован");
		Возврат;
	КонецЕсли;
	
	ТекстФильтрОстатки = "";
	ТекстФильтрДвижения = "";
	МассивСубконто = Новый Массив;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
			ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
			ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии  Тогда
			ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
			ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
			ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Валюта "+ТекстУсловия;
			ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"ВалютаДт "+ТекстУсловия+" ИЛИ ВалютаКт "+ТекстУсловия;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования Тогда
			ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"НАЧАЛОПЕРИОДА(фин_БюджетированиеДвиженияССубконто.Период,"+Строка(ПериодичностьОтчета)+") "+ТекстУсловия;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
			ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Организация "+ТекстУсловия;
			ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"Организация "+ТекстУсловия;
		Иначе
			НомерСубконто = 0;
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
			Если МассивСубконто.Найти(Разрез)=Неопределено Тогда
				МассивСубконто.Добавить(Разрез);
				НомерСубконто = МассивСубконто.Количество();
			Иначе
				НомерСубконто = МассивСубконто.Найти(Разрез)+1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаОтбор.Значение) Тогда
				ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Субконто"+Строка(НомерСубконто)+" "+ТекстУсловия;
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"ВЫБОР 
				|	КОГДА ВидСубконто1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто1
				|	КОГДА ВидСубконто2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто2
				|	КОГДА ВидСубконто3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто3
				|	КОГДА ВидСубконто4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто4
				|	КОГДА ВидСубконто5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия;
			Иначе
				ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"(Субконто"+Строка(НомерСубконто)+" "+ТекстУсловия+" ИЛИ Субконто"+Строка(НомерСубконто)+" ЕСТЬ Null";
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"(ВЫБОР 
				|	КОГДА ВидСубконто1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто1
				|	КОГДА ВидСубконто2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто2
				|	КОГДА ВидСубконто3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто3
				|	КОГДА ВидСубконто4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто4
				|	КОГДА ВидСубконто5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА Субконто5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия+"
					|	ИЛИ ВЫБОР 
					|	КОГДА ВидСубконто1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто1
					|	КОГДА ВидСубконто2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто2
					|	КОГДА ВидСубконто3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто3
					|	КОГДА ВидСубконто4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто4
					|	КОГДА ВидСубконто5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто5
					|	ИНАЧЕ Null
					|КОНЕЦ ЕСТЬ NULL";
				Для Каждого Тип Из Разрез.ТипЗначения.Типы() Цикл
					ИмяТаблицы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьТаблицуПоТипу(Тип);
					ИмяТипа = СтрЗаменить(ИмяТаблицы,".","Ссылка.");
					ТекстФильтрОстатки = ТекстФильтрОстатки + " ИЛИ Субконто"+Строка(НомерСубконто)+" =ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
					ТекстФильтрДвижения = ТекстФильтрДвижения +"
					|	ИЛИ ВЫБОР 
					|	КОГДА ВидСубконто1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто1
					|	КОГДА ВидСубконто2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто2
					|	КОГДА ВидСубконто3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто3
					|	КОГДА ВидСубконто4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто4
					|	КОГДА ВидСубконто5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
					|		ТОГДА Субконто5
					|	ИНАЧЕ Null
					|КОНЕЦ = ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
				КонецЦикла;
				ТекстФильтрДвижения = ТекстФильтрДвижения+")";
				ТекстФильтрОстатки = ТекстФильтрОстатки + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// установка текста условия в текст запроса
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	СтрокаПоиска = "РегистрБухгалтерии.фин_Бюджетирование.ОстаткиИОбороты(";
		
	НовыйТекст = Лев(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)-1);
	ТекстЗапроса = Сред(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)+1);
	ПозицияЗакрывающейСкобки = Найти(ТекстЗапроса,") КАК");
	НовыйТекст=НовыйТекст+"&НачалоПериода, &КонецПериода, , , Счет В ИЕРАРХИИ (&Счет),"+?(МассивСубконто.Количество()=0,"","&ВидыСубконто")+" , Сценарий = &Сценарий"+?(ТекстФильтрОстатки="",""," И "+ТекстФильтрОстатки)+Сред(ТекстЗапроса,ПозицияЗакрывающейСкобки);
	
	ТекстЗапроса = НовыйТекст;
	СтрокаПоиска = "РегистрБухгалтерии.фин_Бюджетирование.ДвиженияССубконто(";
		
	НовыйТекст = Лев(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)-1);
	ТекстЗапроса = Сред(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)+1);
	ПозицияЗакрывающейСкобки = Найти(ТекстЗапроса,") КАК");
	НовыйТекст=НовыйТекст+"
			|&НачалоПериода,
			|&КонецПериода,
			|Счет В ИЕРАРХИИ (&Счет)
			|	И Сценарий = &Сценарий"+?(ТекстФильтрДвижения="",""," И "+ТекстФильтрДвижения)+",
			|,
			|"+Сред(ТекстЗапроса,ПозицияЗакрывающейСкобки);
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = НовыйТекст;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//установа параметров запроса
	Если МассивСубконто.Количество()>0 Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидыСубконто",МассивСубконто);
	КонецЕсли;
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = "ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекстУсловия,СтрокаОтбор.Значение);
		
		Если СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И
		 	СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования И
		 	СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор)),Разрез);
		КонецЕсли;
	КонецЦикла;
	
		
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Счет",Счет);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",Сценарий);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",НачалоПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",КонецДня(КонецПериода));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	
	ПолеЗаголовок = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеЗаголовок.Использование = Истина;
	ПолеРазрезаАналитики=ПолеЗаголовок.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеРазрезаАналитики.Использование	= Истина;
	ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Заголовок");
	ВыбранныеПоляДляТекущей=ПолеЗаголовок.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляТекущей.Использование=Истина;
	
	Порядок = ПолеЗаголовок.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Порядок.Использование = Истина;
	Порядок.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
	Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;

	ДобавленноеПоле = ДобавитьВыбранныеПоля(ПолеЗаголовок);
	Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		СтрокаПоиска = "НАЧАЛОПЕРИОДА(фин_БюджетированиеДвиженияССубконто.Период,";
		
		НовыйТекст = Лев(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска));
		ТекстЗапроса = Сред(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)+1);
		ПозицияЗакрывающейСкобки = Найти(ТекстЗапроса,")");
		НовыйТекст=НовыйТекст+Строка(ПериодичностьОтчета)+Сред(ТекстЗапроса,ПозицияЗакрывающейСкобки);
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = НовыйТекст;
		
		СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("ПериодАгрегации").ВыражениеПредставления="фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодАгрегации,ЗНАЧЕНИЕ(Перечисление.фин_Периодичность."+Строка(ПериодичностьОтчета)+"),&ЯзыкОтчета)";
		
		пОтбор = ДобавленноеПоле.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		пОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		пОтбор.Использование = Истина;
		пОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Порядок");
		пОтбор.ПравоеЗначение = 2;
		ДобавленноеПоле.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
		ДобавленноеПоле.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		
		
		ПолеПериодАгрегации = ПолеЗаголовок.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеПериодАгрегации.Использование = Истина;
		
			
		ПолеРазрезаАналитики=ПолеПериодАгрегации.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРазрезаАналитики.Использование	= Истина;
		ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("ПериодАгрегации");
		ВыбранныеПоляДляТекущей=ПолеПериодАгрегации.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
		ПолеПериодАгрегации.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Использование = Истина;
		ПолеПериодАгрегации.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Значение = РасположениеГруппировкиКомпоновкиДанных.Конец;
		
		
		ДобавленноеПоле = ДобавитьВыбранныеПоля(ПолеПериодАгрегации);
		
		пОтбор = ПолеПериодАгрегации.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		пОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		пОтбор.Использование = Истина;
		пОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Порядок");
		пОтбор.ПравоеЗначение = 2;
		ПолеПериодАгрегации.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
		ПолеПериодАгрегации.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЕсли;
	
	
	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Попытка
		МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,КомпоновщикНастроек.Настройки,ДанныеРасшифровки);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//СхемаКомпоновкиДанных.НаборыДанных.Основной.Поля.Найти("Период").ВыражениеПредставления="фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период,"""+Периодичность+""")";
	
	//ВЫПОЛНЕНИЕ КОМПОНОВКИ ДАННЫХ
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	//ВЫВОД РЕЗУЛЬТАТА В ТАБЛИЧНЫЙ ДОКУМЕНТ
	ДокументРезультат.Очистить();
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//инициализация начала вывода
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	МаксимальноеКоличествоСубконто	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто");
	Граница = ДокументРезультат.ФиксацияСверху;
	ОбъединяемыеЯчейки = Макс(МаксимальноеКоличествоСубконто,Показатели.Количество());
	СворачиваемыеРяды = Новый Массив;
	СворачиваемыеРяды.Добавить(3);
	СворачиваемыеРяды.Добавить(4);
	СворачиваемыеРяды.Добавить(5);
	СворачиваемыеРяды.Добавить(7);
	СворачиваемыеРяды.Добавить(9);
	СворачиваемыеРяды.Добавить(10);
	Для Каждого Ряд Из СворачиваемыеРяды Цикл
		ДокументРезультат.Область("R"+Строка(Граница-ОбъединяемыеЯчейки+?(Ряд<>7 И Ряд<>9,0,1))+"C"+Строка(Ряд)+":R"+Строка(Граница)+"C"+Строка(Ряд)).Объединить();
		Если Ряд=7 ИЛИ Ряд=9 Тогда
			ДокументРезультат.Область("R"+Строка(Граница-ОбъединяемыеЯчейки+?(Ряд<>7 И Ряд<>9,0,1))+"C"+Строка(Ряд)+":R"+Строка(Граница)+"C"+Строка(Ряд)).Текст = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Оборот",ЯзыкОтчета);
		КонецЕсли;
	КонецЦикла;
	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("R"+Строка(Граница-ОбъединяемыеЯчейки-1)+":R1"),ТипСмещенияТабличногоДокумента.ПоВертикали);
	ДокументРезультат.ФиксацияСверху = 1+Макс(Показатели.Количество(),МаксимальноеКоличествоСубконто);
	// расчет текущего сальдо
	Граница = ДокументРезультат.ФиксацияСверху;
	МассивОстатков = Новый Массив(Показатели.Количество());
	Попытка
	Для Каждого Показатель Из Показатели Цикл
		Ряд = Граница + 1 + Показатель.НомерСтроки;
		МассивОстатков[Показатель.НомерСтроки-1]=?(ДокументРезультат.Область("R"+Ряд+"C10:R"+Ряд+"C10").Текст="",0,Число(ДокументРезультат.Область("R"+Ряд+"C10:R"+Ряд+"C10").Текст));
	КонецЦикла;
	ЗавершениеТаблицы = ДокументРезультат.ВысотаТаблицы - 1 - Макс(Показатели.Количество(),МаксимальноеКоличествоСубконто);
	НачалоРасчета = Граница + 2 + Макс(Показатели.Количество(),МаксимальноеКоличествоСубконто);
	Попытка
		МассивИтоговыхСтрок = Новый Массив;
		Пока НачалоРасчета < ЗавершениеТаблицы Цикл
			СчетДт = ДокументРезультат.Область("R"+Формат(НачалоРасчета+1,"ЧГ=")+"C6:R"+Формат(НачалоРасчета+1,"ЧГ=")+"C6").Расшифровка;
			СчетКт = ДокументРезультат.Область("R"+Формат(НачалоРасчета+1,"ЧГ=")+"C8:R"+Формат(НачалоРасчета+1,"ЧГ=")+"C8").Расшифровка;
			Если СчетДт = Неопределено И ДанныеРасшифровки.Элементы.Получить(ДокументРезультат.Область("R"+Формат(НачалоРасчета+1,"ЧГ=")+"C1:R"+Формат(НачалоРасчета+1,"ЧГ=")+"C1").Расшифровка).ПолучитьПоля()[0].Поле="ПериодАгрегации" Тогда
				МассивИтоговыхСтрок.Вставить(0,НачалоРасчета+1);
				НачалоРасчета = НачалоРасчета + 1;
				Если НачалоРасчета = ЗавершениеТаблицы Тогда
					Прервать;
				КонецЕсли;
				СчетДт = ДокументРезультат.Область("R"+Формат(НачалоРасчета+1,"ЧГ=")+"C6:R"+Формат(НачалоРасчета+1,"ЧГ=")+"C6").Расшифровка;
				СчетКт = ДокументРезультат.Область("R"+Формат(НачалоРасчета+1,"ЧГ=")+"C8:R"+Формат(НачалоРасчета+1,"ЧГ=")+"C8").Расшифровка;
			КонецЕсли;
			Для Каждого Показатель Из Показатели Цикл
				ПозицияПоказателя = Формат(НачалоРасчета + Показатель.НомерСтроки,"ЧГ=");
				МассивОстатков[Показатель.НомерСтроки-1] = МассивОстатков[Показатель.НомерСтроки-1] + ПолучитьВеличинуПриращения(СчетДт,СчетКт,ДокументРезультат.Область("R"+ПозицияПоказателя+"C7:R"+ПозицияПоказателя+"C7").Расшифровка,ДокументРезультат.Область("R"+ПозицияПоказателя+"C9:R"+ПозицияПоказателя+"C9").Расшифровка);
				ДокументРезультат.Область("R"+ПозицияПоказателя+"C10:R"+ПозицияПоказателя+"C10").Текст = МассивОстатков[Показатель.НомерСтроки-1];
			КонецЦикла;
			НачалоРасчета = НачалоРасчета + Макс(Показатели.Количество(),МаксимальноеКоличествоСубконто);
		КонецЦикла;
		Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
			Для Каждого СтрокаИтогов Из МассивИтоговыхСтрок Цикл
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C1:R"+Строка(СтрокаИтогов)+"C10").Разъединить();
				МассивОборотыДт = Новый Массив(Показатели.Количество());
				МассивОборотыКт = Новый Массив(Показатели.Количество());
				СтрокаПоискаИтогов = СтрокаИтогов-Макс(МаксимальноеКоличествоСубконто,Показатели.Количество());
				ТекстИтогов = "";
				ТекстПоказатели = "";
				ТекстОборотДт = "";
				ТекстОборотКт = "";
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					ТекстИтога = ДокументРезультат.Область("R"+Строка(СтрокаПоискаИтогов+СтрокаПоказатель.НомерСтроки-1)+"C10:R"+Строка(СтрокаПоискаИтогов+СтрокаПоказатель.НомерСтроки-1)+"C10").Текст;
					ТекстПоказатели = ТекстПоказатели + ?(СтрокаПоказатель.НомерСтроки=1,"",Символы.ПС) + фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель),ЯзыкОтчета);
					МассивОборотыДт[СтрокаПоказатель.НомерСтроки-1] = 0;
					МассивОборотыКт[СтрокаПоказатель.НомерСтроки-1] = 0;
					НачалоПоиска = СтрокаИтогов-Макс(МаксимальноеКоличествоСубконто,Показатели.Количество());
					Пока НачалоПоиска>Макс(Граница + 2 + Макс(Показатели.Количество(),МаксимальноеКоличествоСубконто),?(МассивИтоговыхСтрок.Найти(СтрокаИтогов)=МассивИтоговыхСтрок.Количество()-1,0,МассивИтоговыхСтрок.Получить(МассивИтоговыхСтрок.Найти(СтрокаИтогов)+1))) Цикл
						ТекстДт = ДокументРезультат.Область("R"+Строка(НачалоПоиска+СтрокаПоказатель.НомерСтроки-1)+"C7:R"+Строка(НачалоПоиска+СтрокаПоказатель.НомерСтроки-1)+"C7").Расшифровка;
						ТекстКт = ДокументРезультат.Область("R"+Строка(НачалоПоиска+СтрокаПоказатель.НомерСтроки-1)+"C9:R"+Строка(НачалоПоиска+СтрокаПоказатель.НомерСтроки-1)+"C9").Расшифровка;
						ТекстСчетДт = ДокументРезультат.Область("R"+Строка(НачалоПоиска)+"C6:R"+Строка(НачалоПоиска)+"C6").Расшифровка;;
						ТекстСчетКт = ДокументРезультат.Область("R"+Строка(НачалоПоиска)+"C8:R"+Строка(НачалоПоиска)+"C8").Расшифровка;;
						МассивОборотыДт[СтрокаПоказатель.НомерСтроки-1] = МассивОборотыДт[СтрокаПоказатель.НомерСтроки-1]+ПолучитьВеличинуОборота(ТекстСчетДт,ТекстДт);
						МассивОборотыКт[СтрокаПоказатель.НомерСтроки-1] = МассивОборотыКт[СтрокаПоказатель.НомерСтроки-1]+ПолучитьВеличинуОборота(ТекстСчетКт,ТекстКт);
						НачалоПоиска = НачалоПоиска-Макс(МаксимальноеКоличествоСубконто,Показатели.Количество());
					КонецЦикла;
					ТекстОборотДт = ТекстОборотДт+?(СтрокаПоказатель.НомерСтроки=1,"",Символы.ПС)+Строка(МассивОборотыДт[СтрокаПоказатель.НомерСтроки-1]);
					ТекстОборотКт = ТекстОборотКт+?(СтрокаПоказатель.НомерСтроки=1,"",Символы.ПС)+Строка(МассивОборотыКт[СтрокаПоказатель.НомерСтроки-1]);
					ТекстИтогов = ТекстИтогов+?(СтрокаПоказатель.НомерСтроки=1,"",Символы.ПС)+?(ТекстИтога="","0",ТекстИтога);
				КонецЦикла;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C10:R"+Строка(СтрокаИтогов)+"C10").Текст = ТекстИтогов;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C10:R"+Строка(СтрокаИтогов)+"C10").РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C10:R"+Строка(СтрокаИтогов)+"C10").Отступ = 0;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C5:R"+Строка(СтрокаИтогов)+"C5").Текст = ТекстПоказатели;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C5:R"+Строка(СтрокаИтогов)+"C5").РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C5:R"+Строка(СтрокаИтогов)+"C5").Отступ = 0;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C7:R"+Строка(СтрокаИтогов)+"C7").Текст = ТекстОборотДт;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C7:R"+Строка(СтрокаИтогов)+"C7").РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C7:R"+Строка(СтрокаИтогов)+"C7").Отступ = 0;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C9:R"+Строка(СтрокаИтогов)+"C9").Текст = ТекстОборотКт;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C9:R"+Строка(СтрокаИтогов)+"C9").РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C9:R"+Строка(СтрокаИтогов)+"C9").Отступ = 0;
				//КопируемаяОбласть = ДокументРезультат.Область("R"+Строка(СтрокаИтогов-Макс(МаксимальноеКоличествоСубконто,Показатели.Количество()))+":R"+Строка(СтрокаИтогов-1));
				//ДокументРезультат.ВставитьОбласть(КопируемаяОбласть,ДокументРезультат.Область("R"+Строка(СтрокаИтогов+1)),ТипСмещенияТабличногоДокумента.ПоВертикали);
				////очистка
				//ДокументРезультат.Область("R"+Строка(СтрокаИтогов+1)+"C1:R"+Строка(СтрокаИтогов+Макс(МаксимальноеКоличествоСубконто,Показатели.Количество()))+"C4").Очистить(Истина,Ложь,Ложь);
				//ДокументРезультат.Область("R"+Строка(СтрокаИтогов)+"C1:R"+Строка(СтрокаИтогов+Макс(МаксимальноеКоличествоСубконто,Показатели.Количество()))+"C4").Объединить();
				//ДокументРезультат.Область("R"+Строка(СтрокаИтогов+1)+"C6:R"+Строка(СтрокаИтогов+Макс(МаксимальноеКоличествоСубконто,Показатели.Количество()))+"C9").Очистить(Истина,Ложь,Ложь);
				//// заполним суммы оборотов
			КонецЦикла;
		КонецЕсли;
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ДобавитьВыбранныеПоля(ПолеГруппы)
	Аналитика = ПолеГруппы.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Аналитика.Использование=Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	// период
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Дата",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("Период");
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование = Истина;
	ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("Период");
				
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 12;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 12;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	
	// регистратор
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Регистратор",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование = Истина;
	ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("Регистратор");
				
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 30;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 30;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	
	// аналитика Дт
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("АналитикаДт",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		ИмяПоля = "СубконтоДт"+Строка(Инд);
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// аналитика Кт
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("АналитикаКт",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		ИмяПоля = "СубконтоКт"+Строка(Инд);
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// Показатели
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Показатели",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = "Заголовок"+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// Дебет
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Дебет",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ПолеСчет=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСчет.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СчетДт",ЯзыкОтчета);
	ПолеСчет.Использование	=Истина;
	ПолеСчет.Поле	=Новый ПолеКомпоновкиДанных("СчетДт");
	
	ПолеПоказатели=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеПоказатели.Заголовок = "";
	ПолеПоказатели.Использование	=Истина;
	ПолеПоказатели.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+"ОборотДт";
		ПолеДопРазрезаАналитики=ПолеПоказатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// Кредит
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Кредит",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ПолеСчет=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСчет.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СчетКт",ЯзыкОтчета);
	ПолеСчет.Использование	=Истина;
	ПолеСчет.Поле	=Новый ПолеКомпоновкиДанных("СчетКт");
	
	ПолеПоказатели=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеПоказатели.Заголовок = "";
	ПолеПоказатели.Использование	=Истина;
	ПолеПоказатели.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+"ОборотКт";
		ПолеДопРазрезаАналитики=ПолеПоказатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// остатки
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("ТекущееСальдо",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+"Остаток";
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Право;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	Возврат Аналитика;
КонецФункции

Функция ПолучитьВеличинуПриращения(мСчетДт,мСчетКт,мСуммаДт,мСуммаКт)
	СуммаДт = ДанныеРасшифровки.Элементы.Получить(мСуммаДт).ПолучитьПоля()[0].Значение;
	СуммаДт = ?(СуммаДт=Null,0,СуммаДт);
	СуммаКт = ДанныеРасшифровки.Элементы.Получить(мСуммаКт).ПолучитьПоля()[0].Значение;
	СуммаКт = ?(СуммаКт=Null,0,СуммаКт);
	СчетДт = ДанныеРасшифровки.Элементы.Получить(мСчетДт).ПолучитьПоля()[0].Значение;	
	СчетКт = ДанныеРасшифровки.Элементы.Получить(мСчетКт).ПолучитьПоля()[0].Значение;	
	Результат = 0;
	Если СчетВходитВИерархию(СчетДт) Тогда
		Если СчетДт.Вид = ВидСчета.Активный Тогда
			Результат = Результат + СуммаДт;
		ИначеЕсли СчетДт.Вид = ВидСчета.Пассивный Тогда
			Результат = Результат - СуммаДт;
		Иначе
			Результат = Результат + СуммаДт;
		КонецЕсли;
	КонецЕсли;
	Если СчетВходитВИерархию(СчетКт) Тогда
		Если СчетКт.Вид = ВидСчета.Активный Тогда
			Результат = Результат - СуммаКт;
		ИначеЕсли СчетКт.Вид = ВидСчета.Пассивный Тогда
			Результат = Результат + СуммаКт;
		Иначе
			Результат = Результат - СуммаКт;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;	
КонецФункции

Функция ПолучитьВеличинуОборота(мСчет,мСумма)
	Сумма = ДанныеРасшифровки.Элементы.Получить(мСумма).ПолучитьПоля()[0].Значение;
	Сумма = ?(Сумма=Null,0,Сумма);
	СчетПроверки = ДанныеРасшифровки.Элементы.Получить(мСчет).ПолучитьПоля()[0].Значение;	
	Результат = 0;
	Если СчетВходитВИерархию(СчетПроверки) Тогда
        Возврат Сумма;
	КонецЕсли;
	Возврат 0;	
КонецФункции

Функция СчетВходитВИерархию(СчетПроверяемый) 
	Если СчетПроверяемый = Счет Тогда
		Возврат Истина;
	КонецЕсли;
	РодительСчета = СчетПроверяемый.Родитель;
	Пока ЗначениеЗаполнено(РодительСчета) Цикл
		Если РодительСчета = Счет Тогда
			Возврат Истина;
		КонецЕсли;
		РодительСчета = РодительСчета.Родитель;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	ДоступныеПоказатели = Новый СписокЗначений;
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	ДоступныеГруппировки = Новый СписокЗначений;
	Для Каждого СтрокаСубконто Из Счет.ВидыСубконто Цикл
		Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИзмерениеПоРазрезу(СтрокаСубконто.ВидСубконто);
		ДоступныеГруппировки.Добавить(Измерение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Измерение));
	КонецЦикла;
	//Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
	//	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования,"Период группировки");
	//КонецЕсли;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта,"Валюта операции");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Организация");
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("Счет");
//ПереченьОсновныхРеквизитов.Добавить("ПериодичностьОтчета");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("НачалоПериода",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериода",КонецМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());

ДополнительныеПараметры = Новый Массив;
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;
ДополнительныеПредставления.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования,"Период группировки");

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
