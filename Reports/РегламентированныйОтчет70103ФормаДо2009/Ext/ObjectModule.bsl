#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей для передачи данных.
Перем мТаблицаПоказателейДляПередачиДанных Экспорт;

// Хранит имя пространства имен, использующееся
// для идентификации модели типов XDTO.
Перем ИмяПакета Экспорт;
// Хранит таблицу форматов
// для корректной выгрузки отчета в XML.
Перем мТаблицаФорматов Экспорт;
// имя файла по умолчанию для выгрузки
Перем ИмяФайлаВыгрузки Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;

// Хранит имя открытой формы отчета.
Перем мФорма Экспорт;

// Хранит макет, содержащий представление многострочных форм
// Равен "Неопределено", если отчет не содержит многострочных форм
//                       и соответственно в таких отчетах макет не создается
Перем мМакет Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета.
Перем мСохраненныйДок Экспорт;

// Хранит все данные отчета.
Перем мДеревоНастройкиСтраниц Экспорт;
Перем мСписокФормБезИерархии Экспорт;
Перем мСписокСохранения Экспорт;

// Переменные хранят границы
// периода построения отчета.
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;
Перем мПериодичность Экспорт;

// Переменная хранит год периода формирования отчета.
Перем мКвартал Экспорт;
Перем мГод Экспорт;

// Хранит название формы навигации.
// При открытии этой формы из других объектов
// также записываем имя в эту переменую.
Перем мФормаНавигации Экспорт;

// Хранит название основной формы.
Перем мОсновнаяФорма Экспорт;   

// Хранит имя выбранной формы отчета.
Перем мВыбраннаяФорма Экспорт;

// Хранит ФИО исполнителя. 
Перем мИсполнитель Экспорт;

// Хранит области, на которых последний раз 
// спозиционировался пользователь
// запоминаются при закрытии формы.
Перем мАктивныеОбласти Экспорт;

// Переменная хранит список страниц отчета на печать.
Перем мТаблицаСтраницНаПечать Экспорт;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым стоится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Записывает страницы для печати в мТаблицаСтраницНаПечать,
// и вызывают общую форму "ПечатьРегламентированныхОтчетов" для 
// печати уазанных листов формы
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - с предварительным просмтром;
//              "ПечататьСразу" - непосредственный вывод на печать.
//
Процедура Печать(ВидПечати) Экспорт 
	
	Перем СтруктураГруппы;            
	
	//очистим таблицу значений
	мТаблицаСтраницНаПечать.Очистить();
	Стр = 1;
	
	Если Не мФорма.ПризнакМногострочности Тогда 
				
		Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
			ТабДок = Новый ТабличныйДокумент;
			ИмяОбласти = Страница.Имя;
			ТекПТД = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + Страница.Имя;
			ТекОбласть = мФорма.ЭлементыФормы[ТекПТД].ПолучитьОбласть(ИмяОбласти);
			ТабДок.Вывести(ТекОбласть);
			ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			ТабДок.ЧерноБелаяПечать   = Ложь;
			ТабДок.АвтоМасштаб = Истина;
		
			Строка = мТаблицаСтраницНаПечать.Добавить();
			Строка.ПолеТабличногоДокумента = ТабДок;
			Строка.ИмяЛиста = "Страница № " + Строка(Стр);
			Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " - стр. " + Строка(Стр);
			Стр = Стр + 1;
		КонецЦикла;
	
	Иначе
	    
	    Пока Стр < мФорма.ВсегоСтраниц + 1 Цикл		 
		 	Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
			 
			 	ТабДок = Новый ТабличныйДокумент;
			 	ИмяГруппы = Страница.Имя;
				мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);		
			 	РегламентированнаяОтчетность.ВывестиРазделВТабличныйДокументФормы(мФорма, Стр,ИмяГруппы, СтруктураГруппы,мФорма.ИмяФормы);
			 	ТекущееТабПоле = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + ИмяГруппы;
			 	ТабДок.Вывести(мФорма.ЭлементыФормы[ТекущееТабПоле]);
			 	ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	ТабДок.АвтоМасштаб        = Истина;
			 	ТабДок.ЧерноБелаяПечать   = Ложь;
			 
			 	//добавляем значения в таблицу страниц для печати
			 	Строка = мТаблицаСтраницНаПечать.Добавить();
			 	Строка.ПолеТабличногоДокумента = ТабДок;
				Строка.ИмяЛиста = ИмяГруппы + ". Страница № " + Строка(Стр);
				Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " " +ИмяГруппы + ". cтр. № " + Строка(Стр);
			КонецЦикла;
			Стр = Стр + 1;		 
	 	КонецЦикла;
		
		РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(мФорма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПечатьРегламентированногоОтчета(мТаблицаСтраницНаПечать,  мФорма, ВидПечати);
	
КонецПроцедуры // Печать()

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОНалогоплательщике()Экспорт
	
	Если (Налогоплательщик  = Неопределено) Или (Налогоплательщик = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации
	
	Сведения.Добавить("", "РННЮЛ"); // РНН

	Сведения.Добавить("", "ОКЭД"); // ОКЭД
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = ОбщегоНазначения.ПолучитьСведенияОбОрганизации(Налогоплательщик, ТекущаяДата(), Сведения);
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначения.СведенияОЮрФизЛице(НалоговыйКомитет, ДатаПодписи);
	
	ОргСведения.Вставить("КодНалоговогоОргана", 		СокрЛП(Лев(НКСведения.РНН, 4)));
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

// Вызывает диалог выбора файла для выбора файла данных
//
Функция ВыборФайла() Экспорт
	
	Режим                 = РежимДиалогаВыбораФайла.Открытие;
	Диалог                = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок      = "Выберите файл";
	Диалог.Фильтр         = "*.efn|*.efn|Все файлы(*.*)|*.*";
	Диалог.ПолноеИмяФайла = "70103";
	Диалог.Расширение     = "efn";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;	
	Возврат ИмяФайла;
	
КонецФункции // ВыборФайла()

 //Функция управляет показом в форме периода построения отчета.
 //
Функция ПоказатьОсновнойПериод(ТекДатаНачала,ТекДатаОкончания) Экспорт

	СтрПериодОтчета = ПредставлениеПериода(ТекДатаНачала,ТекДатаОкончания, "ФП = истина");
	мКвартал = Лев(СтрПериодОтчета,1);
	мГод     = Лев(Прав(СтрПериодОтчета,7),4);
	Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьОсновнойПериод()


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ОТЧЕТА

// Функция для определения даты начала отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуНачала() экспорт
	// первый квартал
	Если Месяц(мДатаНачалаПериодаОтчета) = 1 Тогда
		Возврат мДатаНачалаПериодаОтчета
	КонецЕсли;
	// второй квартал
	Если Месяц(мДатаНачалаПериодаОтчета) = 4 Тогда
		Возврат Дата(мГод,2,1);
	КонецЕсли;
	// третий квартал
	Если Месяц(мДатаНачалаПериодаОтчета) = 7 Тогда
		Возврат Дата(мГод,5,1);
	КонецЕсли;
	// четвертый квартал
	Если Месяц(мДатаНачалаПериодаОтчета) = 10 Тогда
		Возврат Дата(мГод,8,1);
	КонецЕсли;
КонецФункции // ПолучитьДатуНачала

// Функция для определения даты окончания отчетного
// периода, исходя из номера отчетного квартала
Функция ПолучитьДатуОкончания() экспорт
	
	Возврат КонецМесяца(Дата(мГод,Месяц(мДатаНачалаПериодаОтчета),1));	
	
КонецФункции // ПолучитьДатуОкончания

//
//
Функция СформироватьОсновнойЗапросРасчета()экспорт
	Запрос = Новый Запрос;
	
	ДатаНач = ПолучитьДатуНачала();
	ДатаКон = ПолучитьДатуОкончания();
	
	ТекстЗапросаПоМесяцам = "";
	ТекстЗапросаПоОстаткамДоОтчетногоПериода = "";
	Для Счетчик  = 1 по 13 Цикл		
		// для таблицы 13 периодов
		Если Не ТекстЗапросаПоМесяцам = "" ТОгда
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		
		
        ТекстЗапросаПоМесяцам =ТекстЗапросаПоМесяцам +  "
		                        |	ВЫБРАТЬ
		                        |	&Дата" + СокрЛП(Счетчик) + " как Период		                        
								| ";	
								
		ОтчетнаяДата = ДобавитьМесяц(НачалоГода(мДатаНачалаПериодаОтчета),Счетчик-1);
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), ОтчетнаяДата);								
		
		// для таблицы отчетных месяцев при получении входящих остатков
		Если ОтчетнаяДата <= ДатаНач Тогда
			
			Если Не ТекстЗапросаПоОстаткамДоОтчетногоПериода = "" ТОгда
				ТекстЗапросаПоОстаткамДоОтчетногоПериода = ТекстЗапросаПоОстаткамДоОтчетногоПериода + "
				|							ОБЪЕДИНИТЬ ВСЕ
				| ";
			КонецЕсли;
		
		
        ТекстЗапросаПоОстаткамДоОтчетногоПериода =ТекстЗапросаПоОстаткамДоОтчетногоПериода +  "
	               |							ВЫБРАТЬ
	               |								&Дата" + СокрЛП(Счетчик) + " КАК Период,
	               |								Остатки.Субконто1 КАК Субконто1,
				   |								Остатки.Организация КАК Организация,
	               |								Остатки.СуммаОстаток КАК СуммаОстаток
	               |							ИЗ
	               |								РегистрБухгалтерии.Типовой.Остатки(&Дата" + СокрЛП(Счетчик) + ", Счет В ИЕРАРХИИ (&СписокСчетовОстаточнойСтоимости), , ) КАК Остатки	";			   
		
		КонецЕсли;	
	КонецЦикла;					  
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", Налогоплательщик);
	
	СписокСчетовПервоначальнойСтоимости = Новый СписокЗначений;
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.Гудвилл);
	СписокСчетовПервоначальнойСтоимости.Добавить(ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы);
	
	СписокСчетовОстаточнойСтоимости = Новый СписокЗначений;
	СписокСчетовОстаточнойСтоимости .Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);
	СписокСчетовОстаточнойСтоимости .Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);
	СписокСчетовОстаточнойСтоимости .Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);	
	СписокСчетовОстаточнойСтоимости .Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовПервоначальнойСтоимости);
	Запрос.УстановитьПараметр("СчетПереоценки", ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств);
	
	Запрос.УстановитьПараметр("СписокСчетовОстаточнойСтоимости", 	СписокСчетовОстаточнойСтоимости);
	Запрос.УстановитьПараметр("Налогоплательщик", 					Налогоплательщик);
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 			мСписокСтруктурныхЕдиниц);	  
	
	ТекстЗапросаПоОбъектамОбложения = "	ВЫБРАТЬ
	               |			ДельтаСостоянийОбъектов.ПериодГода КАК ПериодГода,
	               |			ДельтаСостоянийОбъектов.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			ОбъектыИмущественногоНалога.Организация КАК Организация,
	               |			Выбор Когда ОбъектыИмущественногоНалога.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц) Тогда ОбъектыИмущественногоНалога.НачислятьНалог Иначе Ложь Конец КАК НачислятьНалог,
	               |			ЕСТЬNULL(ОбъектыИмущественногоНалогаНаОтчетнуюДату.НачислятьНалог, ЛОЖЬ) КАК НачислятьНалогНАотчетнуюДату
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				Периоды.Период КАК ПериодГода,
	               |				МАКСИМУМ(ДельтаСостоянийОбъектов.Период) КАК ПериодЗаписи,
	               |				ДельтаСостоянийОбъектов.ОбъектНалогообложения КАК ОбъектНалогообложения
	               |			ИЗ
	               |				(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |						ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |						ОбъектыИмущественногоНалогаСрезПоследних.Период КАК Период
	               |					ИЗ
	               |						РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&ДатаНач, Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаСрезПоследних
	               |					ГДЕ
	               |						ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)
	               |					
	               |					ОБЪЕДИНИТЬ ВСЕ
	               |					
	               |					ВЫБРАТЬ
	               |						ОбъектыИмущественногоНалога.ОбъектНалогообложения,
	               |						ОбъектыИмущественногоНалога.Период
	               |					ИЗ
	               |						РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	               |					ГДЕ
	               |						ОбъектыИмущественногоНалога.Налогоплательщик = &Налогоплательщик
	               |						И ОбъектыИмущественногоНалога.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ДельтаСостоянийОбъектов
	               |					ПО (ВЫБОР
	               |							КОГДА Периоды.Период < &ДатаНач
	               |								ТОГДА ДельтаСостоянийОбъектов.Период < &ДатаНач
	               |							ИНАЧЕ ДельтаСостоянийОбъектов.Период <= Периоды.Период
	               |						КОНЕЦ)
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ДельтаСостоянийОбъектов.ОбъектНалогообложения,
	               |				Периоды.Период) КАК ДельтаСостоянийОбъектов
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ОбъектыИмущественногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
				   |					ОбъектыИмущественногоНалога.Организация КАК Организация,
				   |					ОбъектыИмущественногоНалога.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |					ОбъектыИмущественногоНалога.НачислятьНалог КАК НачислятьНалог,
	               |					ОбъектыИмущественногоНалога.Период КАК Период
	               |				ИЗ
	               |					РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
	               |				ГДЕ
	               |					ОбъектыИмущественногоНалога.Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалога
	               |				ПО ОбъектыИмущественногоНалога.Период = ДельтаСостоянийОбъектов.ПериодЗаписи
	               |					И ОбъектыИмущественногоНалога.ОбъектНалогообложения = ДельтаСостоянийОбъектов.ОбъектНалогообложения
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&ДатаНач, Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаНаОтчетнуюДату
	               |				ПО ОбъектыИмущественногоНалога.ОбъектНалогообложения = ОбъектыИмущественногоНалогаНаОтчетнуюДату.ОбъектНалогообложения И ОбъектыИмущественногоНалогаНаОтчетнуюДату.СтруктурнаяЕдиница в (&СписокСтруктурныхЕдиниц)";
				   
	Запрос.Текст = ТекстЗапросаПоОбъектамОбложения;
	
	ТекстЗапросаПоОборотамЗаПериод = "ВЫБРАТЬ
	                                 |	ТиповойОбороты.Период КАК Период,
									 |	ТиповойОбороты.Организация КАК Организация,
	                                 |	ТиповойОбороты.Субконто1 КАК Субконто1,
	                                 |	СУММА(ТиповойОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	                                 |	СУММА(ТиповойОбороты.СуммаОборотКт) КАК СуммаОборотКт
	                                 |ИЗ
	                                 |	(ВЫБРАТЬ
	                                 |		ТиповойОбороты.Период КАК Период,
									 |		ТиповойОбороты.Организация КАК Организация,
	                                 |		ТиповойОбороты.Субконто1 КАК Субконто1,
	                                 |		ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	                                 |		ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт
	                                 |	ИЗ
	                                 |		РегистрБухгалтерии.Типовой.Обороты(
	                                 |			&ДатаНач, &ДатаКон, Месяц,
	                                 |			Счет В ИЕРАРХИИ (&СписокСчетов), ,
	                                 |			,
	                                 |			(НЕ КорСчет В ИЕРАРХИИ (&СписокСчетовОстаточнойСтоимости))
	                                 |			    И (НЕ КорСчет = &СчетПереоценки),
	                                 |			) КАК ТиповойОбороты
	                                 |	
	                                 |	ОБЪЕДИНИТЬ ВСЕ
	                                 | // Отдельно 	данные по переоценке с учетом переоценки амортизации
	                                 |	ВЫБРАТЬ
	                                 |		ТиповойОбороты.Период,
									 |		ТиповойОбороты.Организация КАК Организация,
	                                 |		ТиповойОбороты.Субконто1,
	                                 |		ВЫБОР
	                                 |			КОГДА ТиповойОбороты.СуммаОборотДт - ТиповойОбороты.СуммаОборотКт > 0
	                                 |				ТОГДА ТиповойОбороты.СуммаОборотДт - ТиповойОбороты.СуммаОборотКт
	                                 |			ИНАЧЕ 0
	                                 |		КОНЕЦ,
	                                 |		ВЫБОР
	                                 |			КОГДА ТиповойОбороты.СуммаОборотКт - ТиповойОбороты.СуммаОборотДт > 0
	                                 |				ТОГДА ТиповойОбороты.СуммаОборотКт - ТиповойОбороты.СуммаОборотДт
	                                 |			ИНАЧЕ 0
	                                 |		КОНЕЦ
	                                 |	ИЗ
	                                 |		РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В ИЕРАРХИИ (&СписокСчетовОстаточнойСтоимости), , , КорСчет = &СчетПереоценки, ) КАК ТиповойОбороты) КАК ТиповойОбороты
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	ТиповойОбороты.Период,
									 |	ТиповойОбороты.Организация,
	                                 |	ТиповойОбороты.Субконто1";
									 
	Запрос.Текст = ТекстЗапросаПоОборотамЗаПериод;
	
	// Таблица изменения стоимости
	ТекстЗапросаТаблицыДвижений = "
	               |		ВЫБРАТЬ
	               |				ТаблицаДвижений.Период КАК Период,
				   |				ТаблицаДвижений.Организация КАК Организация,
	               |				ТаблицаДвижений.Субконто1 КАК Субконто1,
	               |				СУММА(ТаблицаДвижений.СуммаОстаток) КАК СуммаОстаток,
	               |				СУММА(ТаблицаДвижений.СуммаОборотДт) КАК СуммаОборотДт,
	               |				СУММА(ТаблицаДвижений.СуммаОборотКт) КАК СуммаОборотКт,
	               |				СУММА(ТаблицаДвижений.СуммаОстаток + ТаблицаДвижений.СуммаОборотДт) КАК СуммаРасчетныйОстатокДт,
	               |				СУММА(ТаблицаДвижений.СуммаОстаток - ТаблицаДвижений.СуммаОборотКт) КАК СуммаРасчетныйОстатокКт
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ВходящиеОстатки.Период КАК Период,
				   |					ВходящиеОстатки.Организация КАК Организация,
	               |					ВходящиеОстатки.Субконто1 КАК Субконто1,
	               |					ВходящиеОстатки.СуммаОстаток КАК СуммаОстаток,
	               |					0 КАК СуммаОборотДт,
	               |					0 КАК СуммаОборотКт
	               |				ИЗ
	               |					(ВЫБРАТЬ
	               |						Периоды.Период КАК Период,
				   |						Остатки.Организация КАК Организация,
	               |						Остатки.Субконто1 КАК Субконто1,    				   
	               |						ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
	               |					ИЗ
	               |						(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	               |							ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоОстаткамДоОтчетногоПериода + ") КАК Остатки
	               |							ПО (ВЫБОР
	               |									КОГДА Периоды.Период < &ДатаНач
	               |										ТОГДА Периоды.Период = Остатки.Период
	               |									ИНАЧЕ Остатки.Период = &ДатаНач
	               |								КОНЕЦ)) КАК ВходящиеОстатки
	               |				
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |				ВЫБРАТЬ
	               |					ОборотыСНакоплением.Период,
				   |					ОборотыСНакоплением.Организация КАК Организация,
	               |					ОборотыСНакоплением.Субконто1,
	               |					0,
	               |					ОборотыСНакоплением.СуммаОборотДт,
	               |					ОборотыСНакоплением.СуммаОборотКт
	               |				ИЗ
	               |					(ВЫБРАТЬ
	               |						Периоды.Период КАК Период,
				   |						ТиповойОбороты.Организация КАК Организация,
	               |						ТиповойОбороты.Субконто1 КАК Субконто1,
	               |						СУММА(ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0)) КАК СуммаОборотДт,
	               |						СУММА(ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0)) КАК СуммаОборотКт
	               |					ИЗ
	               |						(" + ТекстЗапросаПоМесяцам + ") КАК Периоды
	               |							ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоОборотамЗаПериод + ") КАК ТиповойОбороты
	               |							ПО Периоды.Период > ТиповойОбороты.Период
	               |					
	               |					СГРУППИРОВАТЬ ПО
	               |						ТиповойОбороты.Субконто1,
				   |						ТиповойОбороты.Организация,
	               |						Периоды.Период) КАК ОборотыСНакоплением) КАК ТаблицаДвижений
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ТаблицаДвижений.Субконто1,
				   |				ТаблицаДвижений.Организация,
	               |				ТаблицаДвижений.Период";
				   
	
	Запрос.Текст = ТекстЗапросаТаблицыДвижений;
	
	ТекстЗапросаТаблицыДвиженийСУчетомИзмененияПризнакаОбложения = "
	               |		ВЫБРАТЬ
	               |			ОбъектыНалогообложения.ПериодГода КАК ПериодГода,
	               |			ОбъектыНалогообложения.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			ОбъектыНалогообложения.НачислятьНалог КАК НачислятьНалог,
	               |			ОбъектыНалогообложения.НачислятьНалогНаОтчетнуюДату КАК НачислятьНалогНаОтчетнуюДату,
	               |			ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалогНаОтчетнуюДату
	               |					ТОГДА ТаблицаДвижений.СуммаОстаток
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК СуммаОстаток,
	               |			ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалог
	               |					ТОГДА ТаблицаДвижений.СуммаОборотДт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК СуммаОборотДт,
	               |			ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалог
	               |					ТОГДА ТаблицаДвижений.СуммаОборотКт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК СуммаОборотКт,
	               |			ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалог
	               |					ТОГДА ТаблицаДвижений.СуммаРасчетныйОстатокДт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ + ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалогНаОтчетнуюДату
	               |					И (НЕ ОбъектыНалогообложения.НачислятьНалог)
	               |				ТОГДА ТаблицаДвижений.СуммаОстаток
	               |				ИНАЧЕ 0
	               |			КОНЕЦ КАК СуммаРасчетныйОстатокДт,
	               |			ВЫБОР
	               |				КОГДА ОбъектыНалогообложения.НачислятьНалог И ТаблицаДвижений.СуммаОборотКт <>0
				   |					ТОГДА ТаблицаДвижений.СуммаРасчетныйОстатокКт				   
	               |				КОГДА НЕ ОбъектыНалогообложения.НачислятьНалогНаОтчетнуюДату ТОГДА 0
				   |				КОГДА ТаблицаДвижений.СуммаОборотКт <>0 ТОГДА ТаблицаДвижений.СуммаРасчетныйОстатокКт
				   |				КОГДА ОбъектыНалогообложения.НачислятьНалог И ОбъектыНалогообложения.НачислятьНалогНаОтчетнуюДату
				   |					ТОГДА ТаблицаДвижений.СуммаРасчетныйОстатокКт	               
				   |                ИНАЧЕ 0
				   |			 КОНЕЦ КАК СуммаРасчетныйОстатокКт
	               |	ИЗ
	               |		(" + ТекстЗапросаПоОбъектамОбложения + ") КАК ОбъектыНалогообложения
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаТаблицыДвижений + ") КАК ТаблицаДвижений
	               |			ПО ТаблицаДвижений.Период = ОбъектыНалогообложения.ПериодГода				   
				   |			И ТаблицаДвижений.Организация = ОбъектыНалогообложения.Организация				   
	               |				И ТаблицаДвижений.Субконто1 = ОбъектыНалогообложения.ОбъектНалогообложения";
				   
	Запрос.Текст = ТекстЗапросаТаблицыДвиженийСУчетомИзмененияПризнакаОбложения;			   
				   
	// Итоговый запрос
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговыйРасчет.ПериодГода КАК ПериодГода,
	               |	ИтоговыйРасчет.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |	ИтоговыйРасчет.СуммаОстаток КАК СуммаОстаток,
	               |	ИтоговыйРасчет.СуммаРасчетныйОстатокДт КАК СуммаРасчетныйОстатокДт,
	               |	ИтоговыйРасчет.СуммаРасчетныйОстатокКт КАК СуммаРасчетныйОстатокКт,
	               |	ИтоговыйРасчет.СуммаРасчетныйОстатокКт - ИтоговыйРасчет.СуммаОстаток КАК ИзменениеСтоимостиВыбывшихАктивов,
	               |	ИтоговыйРасчет.СуммаРасчетныйОстатокДт - ИтоговыйРасчет.СуммаОстаток КАК ИзменениеСтоимостиПоступившихАктивов
	               |ИЗ
	               |	(" + ТекстЗапросаТаблицыДвиженийСУчетомИзмененияПризнакаОбложения + ") КАК ИтоговыйРасчет
	               |ГДЕ
	               |	((НЕ ИтоговыйРасчет.СуммаРасчетныйОстатокКт = ИтоговыйРасчет.СуммаОстаток)
	               |			ИЛИ (НЕ ИтоговыйРасчет.СуммаРасчетныйОстатокДт = ИтоговыйРасчет.СуммаОстаток))
	               |ИТОГИ
	               |	СУММА(ИзменениеСтоимостиВыбывшихАктивов),
	               |	СУММА(ИзменениеСтоимостиПоступившихАктивов)
	               |ПО
	               |	ОБЩИЕ,
	               |	ОбъектНалогообложения, ПериодГода";
	
	
	
	Возврат  Запрос;
КонецФункции // СформироватьОсновнойЗапросРасчета

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    
                                                         
мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       
                                                     
ИмяПакета = "http://www.fno70103.rating.kz";
ИмяФайлаВыгрузки = "70103.efn";

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");
          
#КонецЕсли