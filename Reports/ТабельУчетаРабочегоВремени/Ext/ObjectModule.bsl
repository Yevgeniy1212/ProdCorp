
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Настройка периода
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Функция ПолучитьВидСравнения(ВС) Экспорт
	
	Если ВС = ВидСравнения.Равно Тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВС = ВидСравнения.ВИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ВС = ВидСравнения.ВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВС = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеВИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;     
	ИначеЕсли ВС = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеРавно Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;     
	Иначе
		Возврат ВС;
	КонецЕсли;
	
КонецФункции

//  Процедура заполняет фильтр по переданным значениям
//  	Организация, ОтборОрганизации, ВидСравненияОрганизации
// 		Подразделение, ОтборПодразделения, ВидСравненияПодразделения,
//		Работник, ОтборРаботника, ВидСравненияРаботника,
//		ПериодРегистрации
Процедура УстановитьФильтр(ФильтрСоответствия) Экспорт
	
	Если ФильтрСоответствия["Организация"] <> Неопределено Тогда
		Организация = ФильтрСоответствия["Организация"];
		ОтборОрганизации = Ложь;
		ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборОрганизации"] <> Неопределено Тогда
			ОтборОрганизации = ФильтрСоответствия["ОтборОрганизации"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияОрганизации"] <> Неопределено Тогда
			ВидСравненияОрганизации = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияОрганизации"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Организация", Организация, ВидСравненияОрганизации, ОтборОрганизации);
	КонецЕсли;
	
	Если ФильтрСоответствия["Подразделение"] <> Неопределено Тогда
		Подразделение = ФильтрСоответствия["Подразделение"];
		ОтборПодразделения = Ложь;
		ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборПодразделения"] <> Неопределено Тогда
			ОтборПодразделения = ФильтрСоответствия["ОтборПодразделения"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияПодразделения"] <> Неопределено Тогда
			ВидСравненияПодразделения = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияПодразделения"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "ПодразделениеОрганизации", Подразделение, ВидСравненияПодразделения, ОтборПодразделения);
	КонецЕсли;
	
	Если ФильтрСоответствия["Работник"] <> Неопределено Тогда
		Работник = ФильтрСоответствия["Работник"];
		ОтборРаботника = Ложь;
		ВидСравненияРаботника = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборРаботника"] <> Неопределено Тогда
			ОтборРаботника = ФильтрСоответствия["ОтборРаботника"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияРаботника"] <> Неопределено Тогда
			ВидСравненияРаботника = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияРаботника"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Сотрудник", Работник, ВидСравненияРаботника, ОтборРаботника);
	КонецЕсли;
	
	Если ФильтрСоответствия["Период"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецМесяца(ФильтрСоответствия["Период"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаНачала"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ФильтрСоответствия["ДатаНачала"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаОкончания"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ФильтрСоответствия["ДатаОкончания"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаЗаполнения"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ДатаЗаполнения", ФильтрСоответствия["ДатаЗаполнения"]);
	КонецЕсли;
	
	Если ФильтрСоответствия["НомерДокумента"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НомерДокумента", ФильтрСоответствия["НомерДокумента"]);
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтветственноеЛицо"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицо", ФильтрСоответствия["ОтветственноеЛицо"]);
	КонецЕсли;
	
КонецПроцедуры // УстановитьФильтр()


// Процедура Формирует отчет 
//
Процедура СформироватьМакет(ДокументРезультат, Период, ТаблицаРаботниковОрганизации, ВозвращаемоеСообщениеОбОшибке)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Сообщить("Не указан период формирования табеля!");
		Возврат;
	КонецЕсли; 

	НачалоПериода = НачалоМесяца(Период);
	КонецПериода  = КонецМесяца(Период);
	
	Если НЕ ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(НачалоПериода, КонецПериода, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ЗапросТабель = Новый Запрос();
	//
	ЗапросТабель.УстановитьПараметр("БуквенныйКодПраздника", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.БуквенныйКод);
	ЗапросТабель.УстановитьПараметр("ЦифровойКодПраздника", Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни.ЦифровойКод);
	
	ЗапросТабель.УстановитьПараметр("НеуказанноеОбозначение", Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());

	МассивОпределенияКодовПоКоду = Новый Массив;
	МассивОпределенияКодовПоКоду.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);
	МассивОпределенияКодовПоКоду.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПВР.Ссылка КАК ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПВР
	               |ГДЕ
	               |	(ПВР.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
	               |			ИЛИ ПВР.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеРабочиеДни))
	               |	И ПВР.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке)";
				   
	МассивПраздничные = Новый Массив;
	МассивПраздничные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПВР.Ссылка КАК ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПВР
	               |ГДЕ
	               |	ПВР.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
	               |	И ПВР.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомПоЧасовойТарифнойСтавке)";
				   
	МассивСверхурочные = Новый Массив();
	МассивСверхурочные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
	ЗапросТабель.УстановитьПараметр("Сверхурочные", МассивСверхурочные);
	ЗапросТабель.УстановитьПараметр("Праздничные", МассивПраздничные);
	ЗапросТабель.УстановитьПараметр("ОчередныеОтпуска",	МассивОпределенияКодовПоКоду);
	
	ЗапросТабель.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросТабель.УстановитьПараметр("КонецПериода",  КонецПериода);
	ЗапросТабель.УстановитьПараметр("ТаблицаРаботниковОрганизации",  ТаблицаРаботниковОрганизации);
	
	// условия на измерения регистра
	УсловиеНаОрганизации = "";
	
	ОтборОрганизации        = Ложь;
	Организация             = Неопределено;
	ВидСравненияДляОрганизации = "";
	
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") И ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				Если ОтборОрганизации И Организация <> Неопределено Тогда
					ОтборОрганизации           = Ложь;
					Организация                = Неопределено;
					ВидСравненияОрганизации = "";
				Иначе
					ОтборОрганизации = Истина;
					Организация      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияОрганизации = ВидСравнения.Равно; 
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияОрганизации = ВидСравнения.НеРавно;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСпискеПоИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// условия на ресурсы регистра
	УсловиеВЗапрос = "";
	Если ОтборОрганизации Тогда
		ЗапросТабель.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСпискеПоИерархии Тогда
			ВидСравненияДляОрганизации = "В ИЕРАРХИИ";
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОбособленноеПодразделение = " ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " &ОбособленноеПодразделение";
		Иначе
			УсловиеНаОбособленноеПодразделение = " ОбособленноеПодразделение " + ВидСравненияДляОрганизации + " (&ОбособленноеПодразделение)";
		КонецЕсли;
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеНаОбособленноеПодразделение;
	КонецЕсли;
	
	ОтборПодразделения        = Ложь;
	Подразделение             = Неопределено;
	ВидСравненияПодразделения = "";
	
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации") И ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				Если ОтборПодразделения И Подразделение <> Неопределено Тогда
					ОтборПодразделения        = Ложь;
					Подразделение             = Неопределено;
					ВидСравненияПодразделения = "";
				Иначе
					ОтборПодразделения = Истина;
					Подразделение      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияПодразделения = ВидСравнения.Равно; 
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияПодразделения = ВидСравнения.НеРавно;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеПодразделение = "";
	Если ОтборПодразделения Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно Тогда
			ВидСравненияДляПодразделения = "=" 
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			ВидСравненияДляПодразделения = "<>"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСписке Тогда
			ВидСравненияДляПодразделения = "В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляПодразделения = "НЕ В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.ВИерархии Тогда
			ВидСравненияДляПодразделения = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.НеВИерархии Тогда
			ВидСравненияДляПодразделения = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно ИЛИ ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			УсловиеПодразделение = " ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " &ПодразделениеОрганизации";
		Иначе
			УсловиеПодразделение = " ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " (&ПодразделениеОрганизации)";
		КонецЕсли;
		
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПодразделение;
	КонецЕсли;
	
	ОтборРаботника        = Ложь;
	Работники              = Неопределено;
	ВидСравненияРаботника = "";
	
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для Каждого ЭлементОтбора Из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизЛицо") И ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				Если ОтборРаботника И Работники <> Неопределено Тогда
					ОтборРаботника        = Ложь;
					Работники             = Неопределено;
					ВидСравненияРаботника = "";
				Иначе
					ОтборРаботника = Истина;
					Работники      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияРаботника = ВидСравнения.Равно; 
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияРаботника = ВидСравнения.НеРавно;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияРаботника = ВидСравнения.ВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияРаботника = ВидСравнения.НеВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияРаботника = ВидСравнения.ВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияРаботника = ВидСравнения.НеВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияРаботника = ВидСравнения.ВСпискеПоИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияРаботника = ВидСравнения.НеВСпискеПоИерархии;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	УсловиеПоРаботникам = "";
	Если ОтборРаботника Тогда
		
		ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", Работники);
	
		Если ВидСравненияРаботника = ВидСравнения.Равно Тогда
			ВидСравненияРаботник = "=" 
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеРавно Тогда
			ВидСравненияРаботник = "<>"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСписке Тогда
			ВидСравненияРаботник = "В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСписке Тогда
			ВидСравненияРаботник = "НЕ В"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.ВИерархии Тогда
			ВидСравненияРаботник = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияРаботника = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияРаботника = ВидСравнения.НеВИерархии Тогда
			ВидСравненияРаботник = "НЕ В ИЕРАРХИИ"
		КонецЕсли; 
		
		Если ВидСравненияРаботник = "=" ИЛИ ВидСравненияРаботник = "<>" Тогда
			УсловиеПоРаботникам = " ФизЛицо " + ВидСравненияРаботник + " &РаботникиОрганизации"
		Иначе
			УсловиеПоРаботникам = " ФизЛицо " + ВидСравненияРаботник + "(&РаботникиОрганизации)"
		КонецЕсли; 
			
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПоРаботникам
	КонецЕсли; 
	
	Макет = ПолучитьМакет("Табель");
	
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	
	Если ОтборПодразделения И ТипЗнч(Подразделение) <> Тип("СписокЗначений") Тогда
		ЗапросТабель.УстановитьПараметр("Подразделение",  Подразделение);
	КонецЕсли;
	ПараметровВстроке = ОбластьДанныхСтрока.Параметры.Количество();
	ЗапросТабель.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Запрос дат периода
	Если РабочаяДата < НачалоПериода Тогда
		// формируем пустую таблицу
		ВозвращаемоеСообщениеОбОшибке = "Отчет можно формировать только за текущий или предыдущий периоды!";
		Возврат;
	Иначе
		ТекстЗапросаДат = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , " + День(НачалоПериода) + ") КАК ДатаТабеля,
		|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТДатыТабеля 
		|	";           
		ДатаВОтчете = НачалоПериода + 86400;
		Пока ДатаВОтчете <= НачалоДня(КонецПериода) Цикл
			НомерДня    = День(ДатаВОтчете);
			НомерМесяца = Месяц(ДатаВОтчете);
			НомерГода   = Год(ДатаВОтчете);
			ТекстЗапросаДат = ТекстЗапросаДат + 
			"ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
			|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
			|	";
			ДатаВОтчете = ДатаВОтчете + 86400;
		КонецЦикла;
	КонецЕсли;
	
		// Запрос сотрудников
		ЗапросТабель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Сотрудник КАК Справочник.СотрудникиОрганизаций) КАК Сотрудник,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Организация КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.ПодразделениеОрганизации КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Должность КАК Справочник.ДолжностиОрганизаций) КАК Должность,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.ТарифныйРазряд КАК Справочник.ТарифныеРазряды) КАК ТарифныйРазряд,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.ОбособленноеПодразделение КАК Справочник.Организации) КАК ОбособленноеПодразделение,
		|	РаботникиОрганизаций.Период КАК Период
		|ПОМЕСТИТЬ ВТТаблицаРаботниковОрганизации
		|ИЗ
		|	&ТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.ФизЛицо КАК ФизЛицо,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(Работники.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			(НЕ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ NULL )
		|				И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &НеуказанноеОбозначение
		|				И ПериодДействия = &НачалоПериода
		|				" + УсловиеВЗапрос + ") КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Начисления.Организация = Работники.Организация
		|			И Начисления.ОбособленноеПодразделение = Работники.ОбособленноеПодразделение
		|			И Начисления.Сотрудник = Работники.Сотрудник
		|			И (Работники.Период <= Начисления.ПериодДействияНачало)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.ФизЛицо,
		|	Начисления.Организация,
		|	Начисления.ОбособленноеПодразделение,
		|	Начисления.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Сотрудник,
		|	Организация,
		|	ОбособленноеПодразделение,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыПоследнихНазначений.Регистратор КАК Регистратор,
		|	ДатыПоследнихНазначений.НомерСтроки КАК НомерСтроки,
		|	ДатыПоследнихНазначений.ФизЛицо,
		|	ДатыПоследнихНазначений.Сотрудник,
		|	ДатыПоследнихНазначений.Организация,
		|	ДатыПоследнихНазначений.ОбособленноеПодразделение,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		|	Работники.Должность КАК Должность,
		|	Работники.ТарифныйРазряд КАК ТарифныйРазряд,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|ПОМЕСТИТЬ ВТ_Работники
		|ИЗ
		|	ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаРаботниковОрганизации КАК Работники
		|		ПО ДатыПоследнихНазначений.Организация = Работники.Организация
		|			И ДатыПоследнихНазначений.ОбособленноеПодразделение = Работники.ОбособленноеПодразделение
		|			И ДатыПоследнихНазначений.Сотрудник = Работники.Сотрудник
		|			И ДатыПоследнихНазначений.Период = Работники.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДниМесяца.ДатаКалендаря КАК ДатаКалендаря,
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
		|				И ДниМесяца.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ТОГДА &БуквенныйКодПраздника
		|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод
		|	КОНЕЦ КАК БуквенныйКод,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
		|				И ДниМесяца.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ТОГДА &ЦифровойКодПраздника
		|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ЦифровойКод
		|	КОНЕЦ КАК ЦифровойКод,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&ОчередныеОтпуска)
		|				И ДниМесяца.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|		ИНАЧЕ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|	КОНЕЦ КАК ОбозначениеВТабелеУчетаРабочегоВремени,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ФизЛицо КАК ФизЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Начисления.Сторно КАК Сторно,
		|	Начисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета В (&Праздничные)
		|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПраздничныеЧасы,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета В (&Сверхурочные)
		|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СверхурочныеЧасы,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|			ТОГДА Начисления.ОтработаноЧасов + Начисления.УчитываемыеЧасы
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НочныеЧасы
		|ПОМЕСТИТЬ ВТ_ИспользованиеВремени
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДниМесяца
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|				(НЕ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ NULL )
		|					И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|					И (НЕ Сторно)
		|					И ПериодДействия = &НачалоПериода
		|					" + УсловиеВЗапрос + ") КАК Начисления
		|		ПО ДниМесяца.ДатаКалендаря <= Начисления.ПериодДействияКонец
		|			И ДниМесяца.ДатаКалендаря >= Начисления.ПериодДействияНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|				ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ НЕ NULL 
		|					И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
		|					И Сторно
		|					И ПериодДействия = &НачалоПериода
		|					" + УсловиеВЗапрос + ") КАК СторноНачисления
		|		ПО (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		|			И (Начисления.ВидРасчета = СторноНачисления.ВидРасчета)
		|			И (Начисления.Сотрудник = СторноНачисления.Сотрудник)
		|			И (Начисления.Организация = СторноНачисления.Организация)
		|			И (Начисления.ПериодРегистрации < СторноНачисления.ПериодРегистрации)
		|			И (ДниМесяца.ДатаКалендаря МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец)
		|ГДЕ
		|	ДниМесяца.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СторноНачисления.ФизЛицо ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИспользованиеВремени.ФизЛицо КАК ФизЛицо,
		|	ИспользованиеВремени.Сотрудник КАК Сотрудник,
		|	ИспользованиеВремени.ДатаКалендаря КАК ДатаКалендаря,
		|	ИспользованиеВремени.ВидУчетаВремени,
		|	ИспользованиеВремени.Регистратор КАК Регистратор,
		|	ИспользованиеВремени.НомерСтроки КАК НомерСтроки,
		|	ИспользованиеВремени.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ИспользованиеВремени.ПериодДействияКонец КАК ПериодДействияКонец,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ИспользованиеВремени.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных)
		|				ТОГДА ВЫБОР
		|						КОГДА НАЧАЛОПЕРИОДА(ИспользованиеВремени.ПериодДействияНачало, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИспользованиеВремени.ПериодДействияКонец, ДЕНЬ)
		|							ТОГДА ИспользованиеВремени.СверхурочныеЧасы
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ИспользованиеВремени.ОтработаноЧасов, 0)
		|		КОНЕЦ) КАК ОтработаноЧасов,
		|	ИспользованиеВремени.БуквенныйКод,
		|	ИспользованиеВремени.ЦифровойКод КАК ЦифровойКод,
		|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени КАК ВидВремени,
		|	ИспользованиеВремени.Организация КАК Организация,
		|	ИспользованиеВремени.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ИспользованиеВремени.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		|	Работники.Должность КАК Должность,
		|	Работники.ТарифныйРазряд КАК ТарифныйРазряд,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА СУММА(ВЫБОР
		|					КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) <> 0
		|			ТОГДА СУММА(ВЫБОР
		|						КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
		|							ТОГДА ЕСТЬNULL(ОтработанноеВремя.Часов, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|		КОГДА ИспользованиеВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|			ТОГДА ЕСТЬNULL(МАКСИМУМ(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение), 0)
		|		ИНАЧЕ ЕСТЬNULL(МАКСИМУМ(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) - СУММА(ВЫБОР
		|						КОГДА ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|								И ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
		|							ТОГДА ОтработанноеВремя.Часов
		|						ИНАЧЕ 0
		|					КОНЕЦ), 0)
		|	КОНЕЦ КАК ЧасовПоГрафику,
		|	МАКСИМУМ(ИспользованиеВремени.ПраздничныеЧасы) КАК ПраздничныеЧасы,
		|	МАКСИМУМ(ИспользованиеВремени.СверхурочныеЧасы) КАК СверхурочныеЧасы,
		|	МАКСИМУМ(ИспользованиеВремени.НочныеЧасы) КАК НочныеЧасы
		|ПОМЕСТИТЬ ВТ_ВремяПоДням
		|ИЗ
		|	ВТ_ИспользованиеВремени КАК ИспользованиеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ИспользованиеВремени.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И ИспользованиеВремени.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|			И ИспользованиеВремени.ДатаКалендаря = ГрафикиРаботыПоВидамВремени.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работники КАК Работники
		|		ПО ИспользованиеВремени.Регистратор = Работники.Регистратор
		|			И ИспользованиеВремени.НомерСтроки = Работники.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
		|		ПО ИспользованиеВремени.Сотрудник = ОтработанноеВремя.Сотрудник
		|			И ИспользованиеВремени.Организация = ОтработанноеВремя.Организация
		|			И ИспользованиеВремени.ДатаКалендаря = ОтработанноеВремя.Период
		|			И ((НЕ ОтработанноеВремя.СводнаяЗапись))
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользованиеВремени.ФизЛицо,
		|	ИспользованиеВремени.Сотрудник,
		|	ИспользованиеВремени.ДатаКалендаря,
		|	ИспользованиеВремени.ВидУчетаВремени,
		|	ИспользованиеВремени.Регистратор,
		|	ИспользованиеВремени.НомерСтроки,
		|	ИспользованиеВремени.ПериодДействияНачало,
		|	ИспользованиеВремени.ПериодДействияКонец,
		|	ИспользованиеВремени.БуквенныйКод,
		|	ИспользованиеВремени.ЦифровойКод,
		|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени,
		|	ИспользованиеВремени.Организация,
		|	ИспользованиеВремени.ОбособленноеПодразделение,
		|	ИспользованиеВремени.ЗачетОтработанногоВремени,
		|	Работники.Сотрудник.Код,
		|	Работники.Должность,
		|	Работники.ТарифныйРазряд,
		|	Работники.ПодразделениеОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИспользованиеВремени.ФизЛицо КАК ФизЛицо,
		|	ИспользованиеВремени.Сотрудник КАК Сотрудник,
		|	ИспользованиеВремени.ДатаКалендаря КАК ДатаКалендаря,
		|	ИспользованиеВремени.ВидУчетаВремени,
		|	ИспользованиеВремени.Регистратор КАК Регистратор,
		|	ИспользованиеВремени.НомерСтроки КАК НомерСтроки,
		|	ИспользованиеВремени.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ИспользованиеВремени.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ИспользованиеВремени.ОтработаноЧасов,
		|	ИспользованиеВремени.БуквенныйКод,
		|	ИспользованиеВремени.ЦифровойКод КАК ЦифровойКод,
		|	ИспользованиеВремени.ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ИспользованиеВремени.ВидВремени,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		КОНЕЦ, ИспользованиеВремени.ФизЛицо.Наименование) КАК ФИО,
		|	ВЫРАЗИТЬ(ИспользованиеВремени.ОбособленноеПодразделение.НаименованиеПолное КАК СТРОКА(1000)) КАК ИмяОрганизации,
		|	ИспользованиеВремени.ОбособленноеПодразделение КАК Организация,
		|	ИспользованиеВремени.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ИспользованиеВремени.ТабельныйНомер КАК ТабельныйНомер,
		|	ИспользованиеВремени.Должность КАК Должность,
		|	ИспользованиеВремени.ТарифныйРазряд КАК ТарифныйРазряд,
		|	ИспользованиеВремени.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ИспользованиеВремени.ПодразделениеОрганизации КАК ИмяПодразделения,
		|	ИспользованиеВремени.ЧасовПоГрафику КАК ЧасовПоГрафику,
		|	ИспользованиеВремени.ПраздничныеЧасы КАК ПраздничныеЧасы,
		|	ИспользованиеВремени.СверхурочныеЧасы КАК СверхурочныеЧасы,
		|	ИспользованиеВремени.НочныеЧасы КАК НочныеЧасы
		|ИЗ
		|	ВТ_ВремяПоДням КАК ИспользованиеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, " + УсловиеПоРаботникам + ") КАК ФИОФизЛицСрезПоследних
		|		ПО ИспользованиеВремени.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеВремени.ОбособленноеПодразделение.Наименование,
		|	ИмяПодразделения,
		|	ИспользованиеВремени.ТабельныйНомер,
		|	Сотрудник,
		|	ДатаКалендаря,
		|	ЦифровойКод";
		                  
	РезультатЗапроса = ЗапросТабель.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		
		Сообщить("Данные не обнаружены!");
		Возврат;
		
	КонецЕсли;

	Макет 		= ПолучитьМакет("Табель");

	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");

	ОбластьДанныхШапка.Параметры.ДатаНач     = НачалоПериода;
	ОбластьДанныхШапка.Параметры.ДатаКон     = КонецМесяца(КонецПериода);

	ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторИспользованияРабочегоВремени.Ссылка,
	|	КлассификаторИспользованияРабочегоВремени.БуквенныйКод
	|ИЗ
	|	Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|ГДЕ
	|	КлассификаторИспользованияРабочегоВремени.ВидВремени = &ЦелодневноеНеотработанное");
		
	Запрос.УстановитьПараметр("ЦелодневноеНеотработанное", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		
	СоответствиеЦелодневныхНевыходов = Новый Соответствие;
	СоответствиеКодовЦелодневныхНевыходов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеЦелодневныхНевыходов.Вставить(Выборка.Ссылка, 0);
		СоответствиеКодовЦелодневныхНевыходов.Вставить(Выборка.Ссылка,Выборка.БуквенныйКод);
	КонецЦикла;

	// Определим ссылку на элементы справочника КлассификаторИспользованияРабочегоВремени - ночное время	
	УчетВремениНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
		
	// список регистраторов и номеров строк, которые уже учли при подсчете праздничных, ночных и сверхурочных
	СоответствиеРегистраторов = Новый Соответствие;

	Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл

		Если ВыборкаПоРаботнику.Организация = NULL Тогда
			Продолжить;
		КонецЕсли;

		Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			НомерПП = 0;
			ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
			ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ФизЛицо") Цикл
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						НомерПП = НомерПП + 1;
						
						Для Каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
							СоответствиеЦелодневныхНевыходов.Вставить(Элемент.Ключ,0)
						КонецЦикла; 
						
						ДниПерваяПоловина  = 0;
						ЧасыПерваяПоловина = 0;
						ДниВтораяПоловина  = 0;
						ЧасыВтораяПоловина = 0;

						ЧасыСверхурочные   = 0;
						ЧасыНочные 		   = 0;
						ЧасыПраздничные    = 0;
						
						СоответствиеРегистраторов.Очистить();
						
						ОбластьДанныхСтрока	= Макет.ПолучитьОбласть("Строка");
						ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
						ОбластьДанныхСтрока.Параметры.Работник = ВыборкаПоРаботнику.ФИО + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность + ?(НЕ ЗначениеЗаполнено(ВыборкаПоРаботнику.ТарифныйРазряд), "", ", " + ВыборкаПоРаботнику.ТарифныйРазряд);
						ОбластьДанныхСтрока.Параметры.ТабельныйНомер = ВыборкаПоРаботнику.ТабельныйНомер;
						
						// заполняем раздел "Отметки о явках и неявках на работу по числам месяца"
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаКалендаря") Цикл
							
							СимволДня = ""; ОтработаноЧасовЗаДень = 0;
							НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаКалендаря));
							ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаКалендаря) <= 15;
							
							// разберем записи по видам времени
							Пока ВыборкаПоРаботнику.Следующий() Цикл
								Если  ВыборкаПоРаботнику.ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
									// работа в дневное время
									Если ВыборкаПоРаботнику.ЗачетОтработанногоВремени = Истина Тогда
										Если ВыборкаПоРаботнику.ЧасовПоГрафику = 0 Тогда
											СимволДня = ""
										Иначе	 
											СимволДня = ВыборкаПоРаботнику.БуквенныйКод
										КонецЕсли; 
										ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ЧасовПоГрафику;
									КонецЕсли;
								ИначеЕсли ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени = УчетВремениНочноеВремя и ВыборкаПоРаботнику.ЧасовПоГрафику = 0 Тогда
								ИначеЕсли ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда 
									// отпуска, приходящиеся на "их собственные" выходные дни
									СимволДня = ""
								ИначеЕсли СоответствиеЦелодневныхНевыходов[ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени] <> Неопределено Тогда 
									// целодневные невыходы (кроме отпусков, приходящихся на "их собственные" выходные)
									СоответствиеЦелодневныхНевыходов.Вставить(ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени,СоответствиеЦелодневныхНевыходов[ВыборкаПоРаботнику.ОбозначениеВТабелеУчетаРабочегоВремени] + 1);
									Если Найти("," + СимволДня + ",","," + ВыборкаПоРаботнику.БуквенныйКод + ",") = 0 Тогда
										СимволДня = СимволДня + ?(ПустаяСтрока(СимволДня),"",",") + ВыборкаПоРаботнику.БуквенныйКод;
									КонецЕсли; 
								Иначе 
									// прочие начисления, которые попадают в табель (сверхурочные, праздничные)
									Если Найти("," + СимволДня + ",","," + ВыборкаПоРаботнику.БуквенныйКод + ",") = 0 Тогда
										СимволДня = СимволДня + ?(ПустаяСтрока(СимволДня),"",",") + ВыборкаПоРаботнику.БуквенныйКод;
									КонецЕсли; 
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ОтработаноЧасов;
								КонецЕсли; 
															
								СоответствиеНомеровСтрок = СоответствиеРегистраторов.Получить(ВыборкаПоРаботнику.Регистратор);
								Если СоответствиеНомеровСтрок = Неопределено
										ИЛИ (СоответствиеНомеровСтрок <> Неопределено
												И СоответствиеНомеровСтрок.Получить(ВыборкаПоРаботнику.НомерСтроки) = Неопределено) Тогда
									
									// часы этой строки документа еще не учитывали
									ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.СверхурочныеЧасы;
									ЧасыПраздничные = ЧасыПраздничные + ВыборкаПоРаботнику.ПраздничныеЧасы;
									ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.НочныеЧасы;
									
									// чтобы повторно не учитывать одни и те же часы, запомним что по этой строке уже сложили часы
									Если СоответствиеНомеровСтрок = Неопределено Тогда
										СоответствиеНомеровСтрок = Новый Соответствие;
										СоответствиеРегистраторов.Вставить(ВыборкаПоРаботнику.Регистратор, СоответствиеНомеровСтрок);
									КонецЕсли;
									СоответствиеНомеровСтрок.Вставить(ВыборкаПоРаботнику.НомерСтроки, 0);
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если СимволДня = "" Тогда
								СимволДня = "В"
							КонецЕсли; 

							ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
							ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = ОтработаноЧасовЗаДень;
							
							Если ОтработаноЧасовЗаДень <> 0 Тогда
								Если ПерваяПоловина Тогда
									ДниПерваяПоловина = ДниПерваяПоловина + 1;
									ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
								Иначе
									ДниВтораяПоловина = ДниВтораяПоловина + 1;
									ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
						// заполняем раздел "Отработано за"
						ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
						ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
						ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
						
						ОбластьДанныхСтрока.Параметры.ЧасыСверхурочные 	= ЧасыСверхурочные;
						ОбластьДанныхСтрока.Параметры.ЧасыНочные 		= ЧасыНочные;
						ОбластьДанныхСтрока.Параметры.ЧасыПраздничные 	= ЧасыПраздничные;
						
						// заполняем раздел "Неявки по причинам"
						СчНеявок = 0;
						Для Каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
							Если Элемент.Значение > 0 Тогда
								СчНеявок = СчНеявок + 1;
		                        ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = СоответствиеКодовЦелодневныхНевыходов[Элемент.Ключ];
		                        ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Элемент.Значение;
							КонецЕсли;
							
							Если СчНеявок = 8 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла; 
						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьДанныхСтрока);
						
					КонецЦикла; 
				КонецЦикла; 
				
				ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(ВыборкаПоРаботнику.Организация, КонецМесяца(КонецПериода), глЗначениеПеременной("глТекущийПользователь"));
				ОбластьДанныхПодвал.Параметры.Заполнить(ОтветЛица);
				
				Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
			
			КонецЦикла; 
		КонецЦикла; 

КонецПроцедуры // СформироватьОтчет()

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВозвращаемоеСообщениеОбОшибке = Неопределено) Экспорт
	
	ТиповыеОтчеты.СохранитьПараметрыТабличногоДокумента(Результат, СохраненнаяНастройка);
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	Период = '00010101';
	
	ПараметрНачалоПериода = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрНачалоПериода <> Неопределено Тогда
		Период = Дата(ПараметрНачалоПериода.Значение);
	КонецЕсли;	
	
	// Получение списка работников
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Результат;
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек,);
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Сотрудник");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПодразделениеОрганизации");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Должность");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Период");
	//ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо");
	//ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "НомерСтроки");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОбособленноеПодразделение");
	//ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Регистратор");
	//ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ТабельныйНомер");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ТарифныйРазряд");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений =  Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СформироватьМакет(Результат, Период, ТаблицаЗначений, ВозвращаемоеСообщениеОбОшибке);	
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	ТиповыеОтчеты.ВосстановитьПараметрыТабличногоДокумента(Результат, СохраненнаяНастройка);
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
	
	// Считываение структуры настроек отчета
	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если НЕ СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ПараметрПериод = Неопределено Тогда
		Возврат;
	Иначе
		ПараметрПериод = ?(ПараметрПериод.Значение <> Неопределено, Дата(ПараметрПериод.Значение), '00010101');
		Если ПараметрПериод = '00010101' Тогда
			ПараметрПериод = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрПериод.Использование = Истина;
		ПараметрПериод.Значение  = ПараметрПериод;
	КонецЕсли;
	
КонецПроцедуры

// Восстановление настройки печати табличного документа.
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура УстановитьНастройкуТабличногоДокументаПоУмолчанию(ТабличныйДокумент) Экспорт
	
	ТабличныйДокумент.ПолеСверху    = 10;
	ТабличныйДокумент.ПолеСлева     = 10;
	ТабличныйДокумент.ПолеСправа    = 10;
	ТабличныйДокумент.ПолеСнизу     = 10;
	ТабличныйДокумент.МасштабПечати = 100;
	ТабличныйДокумент.АвтоМасштаб   = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Функция ПолучитьДополнительныеНастройкиОтчета() Экспорт
	
	МассивДополнительныхНастроек = Новый Массив;
	Возврат МассивДополнительныхНастроек;
	
КонецФункции	
	
#КонецЕсли
Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
