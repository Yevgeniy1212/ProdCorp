////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Составляет список возможных вариантов отображения
//
// Параметры: 
//  Отчет - объект отчета.
//
// Возвращаемое значение:
//  спиок значений.
//
Функция ПолучитьСписокВариантовОтображенияОтчета() Экспорт

	СписокВариантовОтображения = Новый СписокЗначений;
	СписокВариантовОтображения.Добавить("СводнаяТаблица","Сводная таблица");
	СписокВариантовОтображения.Добавить("Диаграмма","Диаграмма");
	СписокВариантовОтображения.Добавить("Таблица","Таблица");
	Возврат СписокВариантовОтображения

КонецФункции // ПолучитьСписокВариантовОтображенияОтчета

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ВалютаОтчета = Параметры["ЭтотОтчет"].ВалютаОтчета;
	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Фонд затрат на персонал";
	ОтчетДиаграмма.ИмяРегистра = "-";
	ОтчетДиаграмма.мНазваниеОтчета = "Фонд затрат на персонал";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	// Описание текста запроса:
	//
	//  1. выборка МесяцыОтчета
	//  из рег-ра РегламентированныйПроизводственныйКалендарь (который, как правило, заполнен)
	//  выбираем месяцы, входящие в период формирования отчета
	//  2. выборка ДатыПсевдоСрезов
	//  для каждой строки кадрового плана выбираем дату движения, непосредственно предшествующего
	//  началу очередного месяца из выборки МесяцыОтчета
	//  3. выборка ДвиженияКадровогоПлана
	//  состоит из движений рег-ра Кадровый план на даты из выборки ДатыПсевдоСрезов (фактически,
	//  это объединение срезов последних рег-ра на начало каждого месяца из выборки МесяцыОтчета)
	//  и всех движений рег-ра попавших в период формирования отчета
	//  4. выборка ПериодыПостоянстваКадровогоПлана
	//  для каждого движения из выборки ДвиженияКадровогоПлана определяем дату следующего движения,
	//  органичивая ее сверху концом месяца - определяем периоды существования строк кадрового плана 
	//  с неизменными параметрами
	//
	//  в итоговой выбоке для каждого периода существования строки кадрового плана (выборка ПериодыПостоянстваКадровогоПлана)
	//  рассчитываем его "вклад" в фонд затрат с учетом времени существования строки плана в течение 
	//  месяца (по календарным дням) с пересчетом в валюту отчета
	//
	
	ТекстЗапроса = "ВЫБРАТЬ
	              |	ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ПериодыПостоянстваКадровогоПлана.ДатаПо, ПериодыПостоянстваКадровогоПлана.ДатаС, ДЕНЬ) + 1) / (РАЗНОСТЬДАТ(ПериодыПостоянстваКадровогоПлана.КонецМесяца, ПериодыПостоянстваКадровогоПлана.НачалоМесяца, ДЕНЬ) + 1) * ПериодыПостоянстваКадровогоПлана.Количество * ПериодыПостоянстваКадровогоПлана.ПлановыеЕжемесячныеЗатраты * ВЫБОР КОГДА ПериодыПостоянстваКадровогоПлана.Валюта = &ВалютаРегламентУчета ТОГДА 1 КОГДА КурсыВалют.Курс = NULL ТОГДА 0 ИНАЧЕ КурсыВалют.Курс / КурсыВалют.Кратность КОНЕЦ / &КроссКурсВалютыОтчета КАК ЧИСЛО(15, 2)) КАК ФондЗатрат
	              |		
				  |{ВЫБРАТЬ
	              |	ПериодыПостоянстваКадровогоПлана.Подразделение.* КАК Подразделение,
	              |	ПериодыПостоянстваКадровогоПлана.Должность.* КАК Должность,
	              |	ПериодыПостоянстваКадровогоПлана.Количество,
	              |	ПериодыПостоянстваКадровогоПлана.ПлановыеЕжемесячныеЗатраты,
	              |	ПериодыПостоянстваКадровогоПлана.НачалоМесяца КАК Месяц,
	              |	ПериодыПостоянстваКадровогоПлана.Валюта.* КАК Валюта
				  |	//СВОЙСТВА
				  |}
	              |		
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		МАКСИМУМ(КурсыВалют.Период) КАК ДатаВалюты,
	              |		ДвиженияКадровогоПлана.ДатаС КАК ДатаС,
	              |		ДвиженияКадровогоПлана.Подразделение КАК Подразделение,
	              |		ДвиженияКадровогоПлана.Должность КАК Должность,
	              |		ДвиженияКадровогоПлана.Количество КАК Количество,
	              |		ДвиженияКадровогоПлана.ПлановыеЕжемесячныеЗатраты КАК ПлановыеЕжемесячныеЗатраты,
	              |		НАЧАЛОПЕРИОДА(ДвиженияКадровогоПлана.ДатаС, МЕСЯЦ) КАК НачалоМесяца,
	              |		КОНЕЦПЕРИОДА(ДвиженияКадровогоПлана.ДатаС, МЕСЯЦ) КАК КонецМесяца,
	              |		ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(МАКСИМУМ(КадровыйПлан.Период), ДЕНЬ, -(1)) > КОНЕЦПЕРИОДА(ДвиженияКадровогоПлана.ДатаС, МЕСЯЦ) ИЛИ (МАКСИМУМ(КадровыйПлан.Период)) ЕСТЬ NULL  ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ДвиженияКадровогоПлана.ДатаС, МЕСЯЦ), ДЕНЬ) ИНАЧЕ МАКСИМУМ(КадровыйПлан.Период) КОНЕЦ КАК ДатаПо,
	              |		ВЫБОР КОГДА (ДвиженияКадровогоПлана.Валюта) ЕСТЬ NULL  ИЛИ ДвиженияКадровогоПлана.Валюта = &ПустаяВалюта ТОГДА &УпрВалюта ИНАЧЕ ДвиженияКадровогоПлана.Валюта КОНЕЦ КАК Валюта
	              |	ИЗ
	              |		(ВЫБРАТЬ
	              |			ДатыПсевдоСрезов.Месяц КАК ДатаС,
	              |			ДатыПсевдоСрезов.Подразделение КАК Подразделение,
	              |			ДатыПсевдоСрезов.Должность КАК Должность,
	              |			КадровыйПлан.Количество КАК Количество,
	              |			КадровыйПлан.ПлановыеЕжемесячныеЗатраты КАК ПлановыеЕжемесячныеЗатраты,
	              |			КадровыйПлан.Валюта КАК Валюта,
	              |			ДатыПсевдоСрезов.Решение КАК Решение
	              |		ИЗ
	              |			(ВЫБРАТЬ
	              |				МАКСИМУМ(КадровыйПлан.Период) КАК ДатаСреза,
	              |				МесяцыОтчета.Месяц КАК Месяц,
	              |				КадровыйПлан.Подразделение КАК Подразделение,
	              |				КадровыйПлан.Должность КАК Должность,
	              |				КадровыйПлан.Решение КАК Решение
	              |			ИЗ
	              |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |					НАЧАЛОПЕРИОДА(Календарь.ДатаКалендаря, МЕСЯЦ) КАК Месяц
	              |				ИЗ
	              |					РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	              |				
	              |				ГДЕ
	              |					Календарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаПо) КАК МесяцыОтчета
	              |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадровыйПлан КАК КадровыйПлан
	              |					ПО МесяцыОтчета.Месяц > КадровыйПлан.Период
	              |			
	              |			ГДЕ
	              |				КадровыйПлан.Решение = &Решение
				  |
				  |			{ГДЕ
	              |				КадровыйПлан.Подразделение.* КАК Подразделение,
	              |				КадровыйПлан.Должность.* КАК Должность,
	              |				КадровыйПлан.Количество,
	              |				КадровыйПлан.ПлановыеЕжемесячныеЗатраты,
	              |				КадровыйПлан.Валюта.* КАК Валюта
				  |			}
	              |			
	              |			СГРУППИРОВАТЬ ПО
	              |				МесяцыОтчета.Месяц,
	              |				КадровыйПлан.Подразделение,
	              |				КадровыйПлан.Должность,
	              |				КадровыйПлан.Решение) КАК ДатыПсевдоСрезов
	              |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадровыйПлан КАК КадровыйПлан
	              |				ПО ДатыПсевдоСрезов.Подразделение = КадровыйПлан.Подразделение И ДатыПсевдоСрезов.Должность = КадровыйПлан.Должность И ДатыПсевдоСрезов.Решение = КадровыйПлан.Решение И ДатыПсевдоСрезов.ДатаСреза = КадровыйПлан.Период
	              |		
	              |		ОБЪЕДИНИТЬ
	              |		
	              |		ВЫБРАТЬ
	              |			КадровыйПлан.Период,
	              |			КадровыйПлан.Подразделение,
	              |			КадровыйПлан.Должность,
	              |			КадровыйПлан.Количество,
	              |			КадровыйПлан.ПлановыеЕжемесячныеЗатраты,
	              |			КадровыйПлан.Валюта,
	              |			КадровыйПлан.Решение
	              |		ИЗ
	              |			РегистрСведений.КадровыйПлан КАК КадровыйПлан
	              |		
	              |		ГДЕ
	              |			КадровыйПлан.Период МЕЖДУ &ДатаНач И &ДатаПо И
	              |			КадровыйПлан.Решение = &Решение
				  |
				  |			{ГДЕ
	              |				КадровыйПлан.Подразделение.* КАК Подразделение,
	              |				КадровыйПлан.Должность.* КАК Должность,
	              |				КадровыйПлан.Количество,
	              |				КадровыйПлан.ПлановыеЕжемесячныеЗатраты,
	              |				КадровыйПлан.Валюта.* КАК Валюта
				  |			}
				  |
	              |			) КАК ДвиженияКадровогоПлана
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадровыйПлан КАК КадровыйПлан
	              |			ПО ДвиженияКадровогоПлана.Подразделение = КадровыйПлан.Подразделение И ДвиженияКадровогоПлана.Должность = КадровыйПлан.Должность И ДвиженияКадровогоПлана.Решение = КадровыйПлан.Решение И ДвиженияКадровогоПлана.ДатаС < КадровыйПлан.Период
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК КурсыВалют
	              |			ПО ДвиженияКадровогоПлана.Валюта = КурсыВалют.Валюта И ДвиженияКадровогоПлана.ДатаС >= КурсыВалют.Период
	              |	
				  |
	              |	СГРУППИРОВАТЬ ПО
	              |		ДвиженияКадровогоПлана.ДатаС,
	              |		ДвиженияКадровогоПлана.Подразделение,
	              |		ДвиженияКадровогоПлана.Должность,
	              |		ДвиженияКадровогоПлана.Количество,
	              |		ДвиженияКадровогоПлана.ПлановыеЕжемесячныеЗатраты,
	              |		ВЫБОР КОГДА (ДвиженияКадровогоПлана.Валюта) ЕСТЬ NULL  ИЛИ ДвиженияКадровогоПлана.Валюта = &ПустаяВалюта ТОГДА &УпрВалюта ИНАЧЕ ДвиженияКадровогоПлана.Валюта КОНЕЦ) КАК ПериодыПостоянстваКадровогоПлана
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК КурсыВалют
	              |		ПО ПериодыПостоянстваКадровогоПлана.Валюта = КурсыВалют.Валюта И ПериодыПостоянстваКадровогоПлана.ДатаВалюты = КурсыВалют.Период
	              |
	    		  |	//СОЕДИНЕНИЯ
				  |
				  |ИТОГИ СУММА(ФондЗатрат) ПО
	              |	ОБЩИЕ
				  |
				  |{ГДЕ
	              |	ПериодыПостоянстваКадровогоПлана.Подразделение.* КАК Подразделение,
	              |	ПериодыПостоянстваКадровогоПлана.Должность.* КАК Должность,
	              |	ПериодыПостоянстваКадровогоПлана.Количество,
	              |	ПериодыПостоянстваКадровогоПлана.ПлановыеЕжемесячныеЗатраты,
	              |	ПериодыПостоянстваКадровогоПлана.Валюта.* КАК Валюта
				  |	//СВОЙСТВА
				  |	//КАТЕГОРИИ
				  |}
				  |
				  |{УПОРЯДОЧИТЬ ПО
	              |	ПериодыПостоянстваКадровогоПлана.НачалоМесяца КАК Месяц,
	              |	ПериодыПостоянстваКадровогоПлана.Количество,
	              |	ПериодыПостоянстваКадровогоПлана.ПлановыеЕжемесячныеЗатраты,
	              |	ПериодыПостоянстваКадровогоПлана.Подразделение.* КАК Подразделение,
	              |	ПериодыПостоянстваКадровогоПлана.Должность.* КАК Должность,
	              |	ПериодыПостоянстваКадровогоПлана.Валюта.* КАК Валюта
				  |	//СВОЙСТВА
				  |}
				  |
				  |{ИТОГИ ПО
	              |	ПериодыПостоянстваКадровогоПлана.НачалоМесяца КАК Месяц,
	              |	ПериодыПостоянстваКадровогоПлана.Подразделение.* КАК Подразделение,
	              |	ПериодыПостоянстваКадровогоПлана.Должность.* КАК Должность,
	              |	ПериодыПостоянстваКадровогоПлана.Валюта.* КАК Валюта
				  |	//СВОЙСТВА
				  |}
				  |";
	
	СтруктураПредставлениеПолей = Новый Структура();
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "	ПериодыПостоянстваКадровогоПлана.Подразделение";
		НоваяСтрока.Представление = "Подразделение";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;
		
		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);		
		
		// переписываем структуру для отбора по категориям
		Если ТипЗнч(ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям) <> Тип("Структура") Тогда
			ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям = Новый Структура;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОбщийОтчет.мСтруктураДляОтбораПоКатегориям Цикл
			ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		// переписываем соответствие назначений
		Если ТипЗнч(ОтчетДиаграмма.мСоответствиеНазначений) <> Тип("Соответствие") Тогда
			ОтчетДиаграмма.мСоответствиеНазначений = Новый Соответствие;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОбщийОтчет.мСоответствиеНазначений Цикл
			ОтчетДиаграмма.мСоответствиеНазначений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда			
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Месяц");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Подразделение");
	
	// список показателей и форматы их предстовления
	ОбщийОтчет.ЗаполнитьПоказатели("ФондЗатрат", "Фонд затрат на персонал", Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("ФондЗатрат", "Фонд затрат на персонал", Истина, "ЧЦ=15; ЧДЦ=2");
	
	// представление полей
	СтруктураПредставлениеПолей.Вставить("ПлановыеЕжемесячныеЗатраты", "Плановые ежемесячные затраты");
	СтруктураПредставлениеПолей.Вставить("Количество", "Плановое количество работников");
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Подразделение");
	МассивОтбора.Добавить("Должность");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// очистка автозаполненных полей построителя
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
	// формат полей
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("Месяц", "ДФ='ММММ yyyy'");
	
	// копирование настроек построителя
	ОтчетДиаграмма.ПостроительОтчета.Текст = ПостроительОтчета.Текст;
	ОтчетДиаграмма.ПостроительОтчета.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки());
	
	Для Каждого Параметр Из ПостроительОтчета.Параметры Цикл
		ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	// параметры отчета
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 0; // произвольный период
	
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ФондЗатрат", Новый Структура());
	
	ОтчетДиаграмма.мВыбиратьИмяРегистра = Ложь;
	ОтчетДиаграмма.мРежимВводаПериода = 0;
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("ФондЗатрат", Новый Структура());
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		Сообщить("Не указана валюта отчета!");
		Возврат;
	КонецЕсли; 
	
	// Кросс курс валюты отчета
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаОтчета = мВалютаРегламентированногоУчета Тогда
		КроссКурсВалютыОтчета = 1;
	иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(ОбщийОтчет.ДатаКон, Новый Структура("Валюта", ВалютаОтчета));
		КроссКурсВалютыОтчета = ?(Структура.Кратность = 0, 0, Структура.Курс/Структура.Кратность);
	КонецЕсли; 
	
	Если КроссКурсВалютыОтчета = 0 Тогда
		Сообщить("На " + Формат(ОбщийОтчет.ДатаКон,"ДФ=dd.MM.yyyy") + " не задан курс валюты " + ВалютаОтчета + " для расчетов с персоналом!");
		Возврат;
	КонецЕсли; 
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(ОбщийОтчет.ДатаНач, ОбщийОтчет.ДатаКон, Истина) Тогда
		Возврат
	КонецЕсли;
	
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("КроссКурсВалютыОтчета", КроссКурсВалютыОтчета);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаПо", КонецДня(ОбщийОтчет.ДатаКон));
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаРегламентУчета", мВалютаРегламентированногоУчета);
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

// Выполняет запрос и формирует диаграмму-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьДиаграмму(Диаграмма) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		Сообщить("Не указана валюта отчета!");
		Возврат;
	КонецЕсли; 
	
	// Кросс курс валюты отчета
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаОтчета = мВалютаРегламентированногоУчета Тогда
		КроссКурсВалютыОтчета = 1;
	иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(ОбщийОтчет.ДатаКон, Новый Структура("Валюта", ВалютаОтчета));
		КроссКурсВалютыОтчета = ?(Структура.Кратность = 0, 0, Структура.Курс/Структура.Кратность);
	КонецЕсли; 
	
	Если КроссКурсВалютыОтчета = 0 Тогда
		Сообщить("На " + Формат(ОбщийОтчет.ДатаКон,"ДФ=dd.MM.yyyy") + " не задан курс валюты " + ВалютаОтчета + " для расчетов с персоналом!");
		Возврат;
	КонецЕсли; 
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(ОбщийОтчет.ДатаНач, ОбщийОтчет.ДатаКон, Истина) Тогда
		Возврат
	КонецЕсли;
	
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("КроссКурсВалютыОтчета", КроссКурсВалютыОтчета);
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаПо", КонецДня(ОтчетДиаграмма.ДатаКон));
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ВалютаРегламентУчета", мВалютаРегламентированногоУчета);
	
	ОтчетДиаграмма.СформироватьОтчет(Диаграмма);

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьСводнуюТаблицу(ДокументРезультат) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		Сообщить("Не указана валюта отчета!");
		Возврат;
	КонецЕсли; 
	
	// Кросс курс валюты отчета
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВалютаОтчета = мВалютаРегламентированногоУчета Тогда
		КроссКурсВалютыОтчета = 1;
	иначе	
		Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(ОбщийОтчет.ДатаКон, Новый Структура("Валюта", ВалютаОтчета));
		КроссКурсВалютыОтчета = ?(Структура.Кратность = 0, 0, Структура.Курс/Структура.Кратность);
	КонецЕсли; 
	
	Если КроссКурсВалютыОтчета = 0 Тогда
		Сообщить("На " + Формат(ОбщийОтчет.ДатаКон,"ДФ=dd.MM.yyyy") + " не задан курс валюты " + ВалютаОтчета + " для расчетов с персоналом!");
		Возврат;
	КонецЕсли; 
	
	Если Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(ОбщийОтчет.ДатаНач, ОбщийОтчет.ДатаКон, Истина) Тогда
		Возврат
	КонецЕсли;
	
	ПостроительОтчета = ПолучитьПостроительОтчета();
	
	ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ПостроительОтчета.Параметры.Вставить("КроссКурсВалютыОтчета", КроссКурсВалютыОтчета);
	ПостроительОтчета.Параметры.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	ПостроительОтчета.Параметры.Вставить("ДатаПо", КонецДня(ОбщийОтчет.ДатаКон));
	ПостроительОтчета.Параметры.Вставить("ВалютаРегламентУчета", мВалютаРегламентированногоУчета);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ОбщийОтчет.ДатаНач);
	Если ОбщийОтчет.ДатаКон <> '00010101000000' Тогда
		Если ОбщийОтчет.мРежимВводаПериода = 1 Тогда
			ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоДня(ОбщийОтчет.ДатаКон + 60*60*24));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ОбщийОтчет.ДатаКон ));
		КонецЕсли;
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	ДокументРезультат.ИсточникДанных = ПостроительОтчета.Результат;
	ОбновлятьОформлениеСводнойТаблицы = ДокументРезультат.Данные.Количество() = 0 и ДокументРезультат.Строки.Количество() = 0;
	Если ОбновлятьОформлениеСводнойТаблицы Тогда
		Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
			ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
			Если ПолеТаблицы.Ресурс Тогда
				ДокументРезультат.Данные.Добавить(ПолеТаблицы)
			Иначе
				ДокументРезультат.Строки.Добавить(ПолеТаблицы)
			КонецЕсли;
		КонецЦикла;
		ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ВариантОтображения = "Таблица";

#КонецЕсли