#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивОтбора = Новый Массив;
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Контрольная ведомость отражения зарплаты в регламентированном учете";
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;

	ТекстЗапроса = ПроведениеРасчетов.СформироватьТекстЗапросаДляПроверкиОтраженияЗарплатыВРеглУчете();
	
	ОбщийОтчет.ЗаполнитьПоказатели("Начислено", "Начислено", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("НачисленоБух", "Отражено начислений", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьНачислено", "Начислено - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("ИПН", "ИПН", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ИПНБух", "Отражено ИПН", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьИПН", "ИПН - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("ОПВ", "ОПВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ОПВБух", "Отражено ОПВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьОПВ", "ОПВ - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("Удержано", "Прочие удержания", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("УдержаноБух", "Отражено прочих удержаний", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьУдержано", "Прочие удержания - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("СоциальныеОтчисления", "Социальные отчисления", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("СоциальныеОтчисленияБух", "Отражено социальных отчислений", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьСоциальныеОтчисления", "Социальные отчисления - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("СоциальныйНалог", "Социальный налог", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("СоциальныйНалогБух", "Отражено социальный налог", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьСоциальныйНалог", "Социальный налог - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ОППВ", "ОППВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ОППВБух", "Отражено ОППВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьОППВ", "ОППВ - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ВОСМС", "ВОСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ВОСМСБух", "Отражено ВОСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьВОСМС", "ВОСМС - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("ООСМС", "ООСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ООСМСБух", "Отражено ООСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьООСМС", "ООСМС - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ОПВР", "ОПВР", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ОПВРБух", "Отражено ОПВР", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьОПВР", "ОПВР - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("ПениВОСМС", "Пени по ВОСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениВОСМСБух", "Отражено пени по ВОСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениВОСМС", "Пени по ВОСМС - отражено", Истина, "ЧЦ=15; ЧДЦ=2");

	ОбщийОтчет.ЗаполнитьПоказатели("ПениООСМС", "Пени по ООСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениООСМСБух", "Отражено пени по ООСМС", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениООСМС", "Пени по ООСМС - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОПВ", "Пени по ОПВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОПВБух", "Отражено пени по ОПВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениОПВ", "Пени по ОПВ - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ПениСО", "Пени по СО", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениСОБух", "Отражено пени по СО", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениСО", "Пени по СО - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОППВ", "Пени по ОППВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОППВБух", "Отражено пени по ОППВ", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениОППВ", "Пени по ОППВ - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОПВР", "Пени по ОПВР", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ПениОПВРБух", "Отражено пени по ОПВР", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("РазностьПениОПВР", "Пени по ОПВР - отражено", Истина, "ЧЦ=15; ЧДЦ=2");
	
	СтруктураПредставлениеПолей = Новый Структура("ФизЛицо,ПериодРегистрации",
	"Сотрудник",
	"Месяц");	
	
	ОбщийОтчет.СтруктураФорматаПолей.Вставить("ПериодРегистрации", "ДФ='MMMM yyyy'");
	
	// При использовании свойств и категорий в текст запроса добавляются дополнительные поля
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Данные.ФизЛицо";
		НоваяСтрока.Представление = "Сотрудник";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Данные.Организация";
		НоваяСтрока.Представление = "Организация";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
		
		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;
	
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда			
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;

	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	МассивОтбора.Добавить("Организация");
	МассивОтбора.Добавить("ФизЛицо");

	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ФизЛицо");
	
	// Сортировка по умолчанию
	ПостроительОтчета.Порядок.Добавить("Организация.Наименование");
	ПостроительОтчета.Порядок.Добавить("ФизЛицо.Наименование");
	
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.РаскрашиватьИзмерения = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 0;

КонецПроцедуры

// Процедура формирует отчет по переданным параметрам 
//
Процедура СформироватьОтчетПоПараметрам(ДокументРезультат, НачалоПериодаОтчета, КонецПериодаОтчета, ВыбОрганизация) Экспорт

	ОбщийОтчет.ДатаНач = НачалоМесяца(НачалоПериодаОтчета);
	ОбщийОтчет.ДатаКон = КонецМесяца(КонецПериодаОтчета);

	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ПостроительОтчета.Отбор.Организация.Использование = Истина;
	ПостроительОтчета.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
	ПостроительОтчета.Отбор.Организация.Значение = ВыбОрганизация;
	
	СформироватьОтчет(ДокументРезультат);	
	

КонецПроцедуры // СформироватьОтчетПоПараметрам

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	Налоги = Справочники.НалогиСборыОтчисления;


	ИмяПланаСчетов 	= "Типовой";
	
		Типовой = ПланыСчетов[ИмяПланаСчетов];
	
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетОплатаТруда", Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда);
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетСО", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоСоциальномуСтрахованию, Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетОПВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетИПН", ?(НЕ ЗначениеЗаполнено(Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ИндивидуальныйПодоходныйНалог, Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетСН", ?(НЕ ЗначениеЗаполнено(Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.СоциальныйНалог, Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетОППВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетВОСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоВзносамОСМС, Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетООСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоОтчислениямОСМС, Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
		//++ЗУП
		ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("СчетОПВР", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ));
		//--ЗУП
		
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

#КонецЕсли