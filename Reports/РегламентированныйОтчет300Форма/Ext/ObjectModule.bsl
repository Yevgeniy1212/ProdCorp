#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей для передачи данных.
Перем мТаблицаПоказателейДляПередачиДанных Экспорт;

// Хранит имя пространства имен, использующееся
// для идентификации модели типов XDTO.
Перем ИмяПакета Экспорт;
// Хранит таблицу форматов
// для корректной выгрузки отчета в XML.
Перем мТаблицаФорматов Экспорт;
// имя файла по умолчанию для выгрузки
Перем ИмяФайлаВыгрузки Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;

// Хранит имя открытой формы отчета.
Перем мФорма Экспорт;

// Хранит макет, содержащий представление многострочных форм
// Равен "Неопределено", если отчет не содержит многострочных форм
//                       и соответственно в таких отчетах макет не создается
Перем мМакет Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета.
Перем мСохраненныйДок Экспорт;

// Хранит значения формы.
Перем мСтруктураЗначений Экспорт;

// Хранит все данные отчета.
Перем мДеревоНастройкиСтраниц Экспорт;
Перем мСписокФормБезИерархии Экспорт;
Перем мСписокСохранения Экспорт;

// Переменные хранят границы
// периода построения отчета.
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;
Перем мПериодичность Экспорт;

// Переменная хранит год периода формирования отчета.
Перем мГод Экспорт;
Перем мКвартал Экспорт;
Перем мМесяц Экспорт;

// Хранит название формы навигации.
// При открытии этой формы из других объектов
// также записываем имя в эту переменую.
Перем мФормаНавигации Экспорт;

// Хранит название основной формы.
Перем мОсновнаяФорма Экспорт;   

// Хранит имя выбранной формы отчета.
Перем мВыбраннаяФорма Экспорт;

// Хранит ФИО исполнителя. 
Перем мИсполнитель Экспорт;

// Хранит области, на которых последний раз 
// спозиционировался пользователь
// запоминаются при закрытии формы.
Перем мАктивныеОбласти Экспорт;

// Переменная хранит список страниц отчета на печать.
Перем мТаблицаСтраницНаПечать Экспорт;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым стоится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

Перем мМетодРасчета Экспорт;

Перем УдВес Экспорт;

// настройка расшифровки
Перем СохраненнаяНастройка Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Записывает страницы для печати в мТаблицаСтраницНаПечать,
// и вызывают общую форму "ПечатьРегламентированныхОтчетов" для 
// печати уазанных листов формы
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - с предварительным просмтром;
//              "ПечататьСразу" - непосредственный вывод на печать.
//
Процедура Печать(ВидПечати) Экспорт 
	
	Перем СтруктураГруппы;
	
	ГодФормирования = Год(мДатаНачалаПериодаОтчета);
	
	//очистим таблицу значений
	мТаблицаСтраницНаПечать.Очистить();
	Стр = 1;
	
	Если НЕ мФорма.ПризнакМногострочности Тогда 
				
		Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
			ТабДок = Новый ТабличныйДокумент;
			ИмяОбласти = Страница.Имя;
			ТекПТД = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + Страница.Имя;
			ТекОбласть = мФорма.ЭлементыФормы[ТекПТД].ПолучитьОбласть(ИмяОбласти);
			ТабДок.Вывести(ТекОбласть);
			ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			ТабДок.ЧерноБелаяПечать   = Ложь;
			ТабДок.АвтоМасштаб = Истина;
		
			Строка = мТаблицаСтраницНаПечать.Добавить();
			Строка.ПолеТабличногоДокумента = ТабДок;
			Строка.ИмяЛиста = "Страница № " + Строка(Стр);
			Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " - стр. " + Строка(Стр);
			Стр = Стр + 1;
		КонецЦикла;
	
	Иначе
	    
	    Пока Стр < мФорма.ВсегоСтраниц + 1 Цикл		 
			Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
				Если мФорма.ИмяФормы = "Форма300_05" И Страница.Имя = "ЛистA" И Стр > 1 И ГодФормирования < 2020 Тогда
					Продолжить;
				КонецЕсли;	
			 	ТабДок = Новый ТабличныйДокумент;
			 	ИмяГруппы = Страница.Имя;
				мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);		
				Стр2 = Стр;
			 	РегламентированнаяОтчетность.ВывестиРазделВТабличныйДокументФормы(мФорма, Стр2,ИмяГруппы, СтруктураГруппы,мФорма.ИмяФормы);
			 	ТекущееТабПоле = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + ИмяГруппы;
			 	ТабДок.Вывести(мФорма.ЭлементыФормы[ТекущееТабПоле]);
			 	ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	ТабДок.АвтоМасштаб        = Истина;
			 	ТабДок.ЧерноБелаяПечать   = Ложь;
			 
			 	//добавляем значения в таблицу страниц для печати
			 	Строка = мТаблицаСтраницНаПечать.Добавить();
			 	Строка.ПолеТабличногоДокумента = ТабДок;
				Строка.ИмяЛиста = ИмяГруппы + ". Страница № " + Строка(Стр);
				Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " " +ИмяГруппы + ". cтр. № " + Строка(Стр);
			КонецЦикла;
			Стр = Стр + 1;		 
	 	КонецЦикла;
		
		РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(мФорма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПечатьРегламентированногоОтчета(мТаблицаСтраницНаПечать,  мФорма, ВидПечати);
	
КонецПроцедуры // Печать()

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОНалогоплательщике()Экспорт
	
	Если (Налогоплательщик  = Неопределено) ИЛИ (Налогоплательщик = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации
	
	Сведения.Добавить("", "РННЮЛ"); // РНН

	Сведения.Добавить("", "ИИН_БИН"); // ИИН_БИН
	
	Сведения.Добавить("", "ОКЭД"); // ОКЭД
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	Сведения.Добавить("", "АдрЮР"); // юридический адрес
	
	Сведения.Добавить("", "АдрФакт"); // юридический адрес

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = ОбщегоНазначения.ПолучитьСведенияОбОрганизации(Налогоплательщик, ТекущаяДата(), Сведения);
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначения.СведенияОЮрФизЛице(НалоговыйКомитет, ДатаПодписи);
	
	ОргСведения.Вставить("КодНалоговогоОргана", 		СокрЛП(Лев(НКСведения.РНН, 4)));
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

// Вызывает диалог выбора файла для выбора файла данных
//
Функция ВыборФайла() Экспорт
	
	Префикс = Число(Лев(Прав(мВыбраннаяФорма,7),4));
	
	Режим                 = РежимДиалогаВыбораФайла.Открытие;
	Диалог                = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок      = "Выберите файл";
	Диалог.ПолноеИмяФайла = "300";
	Если Префикс >= 2009 Тогда
		Диалог.Фильтр         = "*.xml|*.xml|Все файлы(*.*)|*.*";
		Диалог.Расширение     = "xml";
	Иначе
		Диалог.Фильтр         = "*.nds|*.nds|Все файлы(*.*)|*.*";
		Диалог.Расширение     = "nds";
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;	
	Возврат ИмяФайла;
	
КонецФункции // ВыборФайла()

 //Функция управляет показом в форме периода построения отчета.
 //
Функция ПоказатьОсновнойПериод(ТекДатаНачала, ТекДатаОкончания) Экспорт

	СтрПериодОтчета = ПредставлениеПериода(ТекДатаНачала,ТекДатаОкончания, "ФП = истина");
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
		мКвартал = Лев(СтрПериодОтчета,1);
		мМесяц = Неопределено;
	Иначе
		мМесяц = Месяц(ТекДатаНачала);
		мКвартал = Неопределено;
	КонецЕсли;
	 мГод     = Лев(Прав(СтрПериодОтчета,7),4);
	 
	 Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьОсновнойПериод()

// Функция проверяет соответствие номера ГТД чиловому формату 
// и в случае если номер ГТД соот-ет формату ххххх/ххххх/ххххххх
// преобразует к числовому значению
Функция ПроверитьСоответствиеНомераГТДФормату(НомерГТД, ВыдаватьСообщение = Истина) Экспорт
	
	// Справочный номер ГТД формируется по следующей схеме: 
    //
	// 99999/99999/9999999
    //   1     2     3
	//
	// элемент 1 - код таможенного органа;
	// элемент 2 - дата принятия ГТД (день, месяц и последняя цифра текущего года);
	// элемент 3 - регистрационный номер ГТД, присваиваемый по журналу регистрации ГТД.

	// Справочный номер ГТД для 2010 года формируется по следующей схеме: 
    //       ддммгг
	// 99999/999999/9999999
    //   1     2     3
	//
	// элемент 1 - код таможенного органа;
	// элемент 2 - дата принятия ГТД (день, месяц и последняя цифра текущего года);
	// элемент 3 - регистрационный номер ГТД, присваиваемый по журналу регистрации ГТД.

	КодГТД = СокрЛП(НомерГТД);
	
	Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КодГТД) Тогда 
		Если НЕ ЗначениеЗаполнено(КодГТД) Тогда
			Возврат "";
		КонецЕсли;
		Если Число(КодГТД) = 0 Тогда
			Возврат "";
		КонецЕсли;
		Если СтрДлина(КодГТД)>17 Тогда 
			Возврат "";		
		КонецЕсли;
	ИначеЕсли Найти(КодГТД, "/") > 0 Тогда
		НомерСимвола = Найти(КодГТД, "/");
		Код = КодГТД;
		// обработка 1 части кода
		КодГТД1 = СокрЛП(Лев(Код, НомерСимвола-1));
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КодГТД1) И СтрДлина(КодГТД1)<=5 И СтрДлина(КодГТД1)>0 Тогда // если в первом блоке только цифры
			КодГТД1 = Формат(Число(КодГТД1), "ЧЦ=5; ЧВН=; ЧГ=");
			// обработка 2 части кода
			Код = СокрЛП(Сред(Код,НомерСимвола+1));
			Если Найти(Код, "/") > 0 Тогда
				НомерСимвола = Найти(Код, "/");
				КодГТД2 = СокрЛП(Лев(Код, НомерСимвола-1));
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КодГТД2) И СтрДлина(КодГТД2)<=5 ИЛИ СтрДлина(КодГТД2)<=6 И СтрДлина(КодГТД2)>0 Тогда // если во втором блоке только цифры
					Если СтрДлина(КодГТД2) = 5 Тогда 
						КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=5; ЧВН=; ЧГ=");
					Иначе 
						КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=6; ЧВН=; ЧГ=");
					КонецЕсли;	
					Если ЗначениеЗаполнено(КодГТД2) Тогда
						// разбираем КодГТД2, проверяем правильность числа и месяца
						ТекЧисло = Лев(КодГТД2,2);
						ТекМесяц = Сред(КодГТД2,3,2);
						Если СтрДлина(КодГТД2) <= 5 Тогда 
							ТекГод   = Прав(КодГТД2,1);
						Иначе 
							ТекГод   = Прав(КодГТД2,2);
						КонецЕсли;	
					    ГодНаДанныйМомент = Формат(Год(ТекущаяДата()),"ЧВН=; ЧГ=");
						Попытка
							Если СтрДлина(КодГТД2) <= 5 Тогда 
								НоваяДата = Дата(Число(Лев(ГодНаДанныйМомент,3) + ТекГод), Число(ТекМесяц), Число(ТекЧисло));
							Иначе 
								НоваяДата = Дата(Число(Лев(ГодНаДанныйМомент,2) + ТекГод), Число(ТекМесяц), Число(ТекЧисло));
							КонецЕсли;	
					    Исключение
							Если ВыдаватьСообщение Тогда
								ТекстСообщения = "В номере ГТД некорректно заполнена дата - """+ КодГТД2 + """.";
								Если Число(ТекЧисло) > 28 Тогда
									ТекстСообщения = ТекстСообщения + Символы.ПС + "    Число месяца """ + ТекЧисло + """ некорректно.";
								КонецЕсли;
								Если Число(ТекМесяц) > 12 Тогда
									ТекстСообщения = ТекстСообщения + Символы.ПС + "    Месяц """ + ТекМесяц + """ некорректен.";
								КонецЕсли;
								Сообщить(ТекстСообщения);
							КонецЕсли;
						КонецПопытки;					
					КонецЕсли;
					// обработка 3 части кода
					Код = СокрЛП(Сред(Код,НомерСимвола+1)); // оставшаяся часть строки для обработки
					Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Код) И СтрДлина(Код)<=7 И СтрДлина(Код)>0 Тогда
						КодГТД3 = Формат(Число(Код), "ЧЦ=7; ЧВН=; ЧГ=");
						Попытка
							КодГТД = Число(КодГТД1 + КодГТД2 + КодГТД3);
						Исключение
							КодГТД = 0;
						КонецПопытки;
						Если СтрДлина(КодГТД2) <= 5 Тогда 
							КодГТД = Формат(КодГТД, "ЧЦ=17; ЧВН=; ЧГ="); // преобразуем числовое значение в строку
						Иначе 
							КодГТД = Формат(КодГТД, "ЧЦ=18; ЧВН=; ЧГ="); // преобразуем числовое значение в строку
						КонецЕсли;	
					    КодГТД = ?(КодГТД = "", 0, КодГТД);
					Иначе
						Возврат "";
					КонецЕсли;
				Иначе
				    Возврат "";
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ТолькоЦифрыВСтроке(Код) Тогда
				Если Код = "" Тогда
					Возврат "";
				КонецЕсли;
			    КодГТД2 = Код; 
				// если формат кода с одним "/", то то что до "/" - это относится к первым 5 символам номера ГТД (т.е. к коду таможенного органа),
				// то что после "/" - то записываем в дату, если длина символов после "/" меньше или равно пяти, 
				// если больше 5ти, то относим это к регистрационному номеру ГТД.
				Если СтрДлина(КодГТД2)>12 Тогда 
					КодГТД2 = Лев(КодГТД2,12);
				ИначеЕсли СтрДлина(КодГТД2)<12 И СтрДлина(КодГТД2)>5 Тогда
					КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=12; ЧВН=; ЧГ=");
				Иначе
					КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=5; ЧВН=; ЧГ=");
					// разбираем КодГТД2, проверяем правильность числа и месяца
					ТекЧисло = Лев(КодГТД2,2);
					ТекМесяц = Сред(КодГТД2,3,2);
				    ТекГод   = Прав(КодГТД2,1);
					ГодНаДанныйМомент = Формат(Год(ТекущаяДата()),"ЧВН=; ЧГ=");
					Попытка
						НоваяДата = Дата(Число(Лев(ГодНаДанныйМомент,3) + ТекГод), Число(ТекМесяц), Число(ТекЧисло))
					Исключение
						Если ВыдаватьСообщение Тогда
							ТекстСообщения = "В номере ГТД некорректно заполнена дата - """+ КодГТД2 + """.";
							Если Число(ТекЧисло) > 28 Тогда
								ТекстСообщения = ТекстСообщения + Символы.ПС + "    Число месяца """ + ТекЧисло + """ некорректно.";
							КонецЕсли;
							Если Число(ТекМесяц) > 12 Тогда
								ТекстСообщения = ТекстСообщения + Символы.ПС + "    Месяц """ + ТекМесяц + """ некорректен.";
							КонецЕсли;
							Сообщить(ТекстСообщения);
						КонецЕсли;
					КонецПопытки;
				КонецЕсли; 
				КодГТД = Число(КодГТД1 + КодГТД2);
				КодГТД = Формат(КодГТД, "ЧЦ=17; ЧВН=; ЧГ="); // преобразуем числовое значение в строку
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;		
	Иначе
		КодГТД = "";
	КонецЕсли;
		
	Возврат КодГТД;
	
КонецФункции // ПроверитьСоответствиеНомераГТДФормату()

// Функция получает дату ГТД из номера ГТД
//
Функция ПолучитьДатуИзНомераГТД(НомерГТД, ВыдаватьСообщение = Истина) Экспорт
	
	// Справочный номер ГТД формируется по следующей схеме: 
    //
	// 99999/99999/9999999
    //   1     2     3
	//
	// элемент 1 - код таможенного органа;
	// элемент 2 - дата принятия ГТД (день, месяц и последняя цифра текущего года);
	// элемент 3 - регистрационный номер ГТД, присваиваемый по журналу регистрации ГТД.

	// Справочный номер ГТД для 2010 года формируется по следующей схеме: 
    //       ддммгг
	// 99999/999999/9999999
    //   1     2     3
	//
	// элемент 1 - код таможенного органа;
	// элемент 2 - дата принятия ГТД (день, месяц и последняя цифра текущего года);
	// элемент 3 - регистрационный номер ГТД, присваиваемый по журналу регистрации ГТД.


	КодГТД = СокрЛП(НомерГТД);
	ДатаГТД = Дата('00010101000000');
	
	Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КодГТД) Тогда 
		Если НЕ ЗначениеЗаполнено(КодГТД) Тогда
			Возврат "";
		КонецЕсли;
		Если Число(КодГТД) = 0 Тогда
			Возврат "";
		КонецЕсли;
		Если СтрДлина(КодГТД)>17 Тогда 
			Возврат "";		
		КонецЕсли;
	ИначеЕсли Найти(КодГТД, "/") > 0 Тогда
		НомерСимвола = Найти(КодГТД, "/");
		// обработка 2 части кода
		Код = СокрЛП(Сред(КодГТД,НомерСимвола+1));
		Если Найти(Код, "/") > 0 Тогда
			НомерСимвола = Найти(Код, "/");
			КодГТД2 = СокрЛП(Лев(Код, НомерСимвола-1));
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(КодГТД2) И СтрДлина(КодГТД2)<=5 ИЛИ СтрДлина(КодГТД2)<=6 И СтрДлина(КодГТД2)>0 Тогда // если во втором блоке только цифры
				Если СтрДлина(КодГТД2) = 5 Тогда 
					КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=5; ЧВН=; ЧГ=");
				Иначе 
					КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=6; ЧВН=; ЧГ=");
				КонецЕсли;	
					Если ЗначениеЗаполнено(КодГТД2) Тогда
					// разбираем КодГТД2, проверяем правильность числа и месяца для получения даты
					ТекЧисло = Лев(КодГТД2,2);
					ТекМесяц = Сред(КодГТД2,3,2);
					Если СтрДлина(КодГТД2) <= 5 Тогда 
						ТекГод   = Прав(КодГТД2,1);
					Иначе 
						ТекГод   = Прав(КодГТД2,2);
					КонецЕсли;	
					ГодНаДанныйМомент = Формат(Год(ТекущаяДата()),"ЧВН=; ЧГ=");
					Попытка
						Если СтрДлина(КодГТД2) <= 5 Тогда 
							ДатаГТД = Дата(Число(Лев(ГодНаДанныйМомент,3) + ТекГод), Число(ТекМесяц), Число(ТекЧисло));
						Иначе 
							ДатаГТД = Дата(Число(Лев(ГодНаДанныйМомент,2) + ТекГод), Число(ТекМесяц), Число(ТекЧисло));
						КонецЕсли;	
					Исключение
						Если ВыдаватьСообщение Тогда
							ТекстСообщения = "В номере ГТД некорректно заполнена дата - """+ КодГТД2 + """.";
							Если Число(ТекЧисло) > 28 Тогда
								ТекстСообщения = ТекстСообщения + Символы.ПС + "    Число месяца """ + ТекЧисло + """ некорректно.";
							КонецЕсли;
							Если Число(ТекМесяц) > 12 Тогда
								ТекстСообщения = ТекстСообщения + Символы.ПС + "    Месяц """ + ТекМесяц + """ некорректен.";
							КонецЕсли;
							Сообщить(ТекстСообщения);
						КонецЕсли;
					КонецПопытки;					
				КонецЕсли;			
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ТолькоЦифрыВСтроке(Код) Тогда
			Если Код = "" Тогда
				Возврат ДатаГТД;
			КонецЕсли;
		    КодГТД2 = Код; 
			// если формат кода с одним "/", то то что до "/" - это относится к первым 5 символам номера ГТД (т.е. к коду таможенного органа),
			// берем первые 5 цифр после "/" для получения даты
			Если СтрДлина(КодГТД2)<=5 Тогда
				КодГТД2 = Формат(Число(КодГТД2), "ЧЦ=5; ЧВН=; ЧГ=");
			Иначе
				КодГТД2 = Лев(КодГТД2,5);
			КонецЕсли;
			// разбираем КодГТД2, проверяем правильность числа и месяца
			ТекЧисло = Лев(КодГТД2,2);
			ТекМесяц = Сред(КодГТД2,3,2);
		    ТекГод   = Прав(КодГТД2,1);
			ГодНаДанныйМомент = Формат(Год(ТекущаяДата()),"ЧВН=; ЧГ=");
			Попытка
				ДатаГТД = Дата(Число(Лев(ГодНаДанныйМомент,3) + ТекГод), Число(ТекМесяц), Число(ТекЧисло))
			Исключение
				Если ВыдаватьСообщение Тогда
					ТекстСообщения = "В номере ГТД некорректно заполнена дата - """+ КодГТД2 + """.";
					Если Число(ТекЧисло) > 28 Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "    Число месяца """ + ТекЧисло + """ некорректно.";
					КонецЕсли;
					Если Число(ТекМесяц) > 12 Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "    Месяц """ + ТекМесяц + """ некорректен.";
					КонецЕсли;
					Сообщить(ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;		
	КонецЕсли;
		
	Возврат ДатаГТД;
	
КонецФункции // ПолучитьДатуИзНомераГТД()

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Документ - (ДокументСсылка), документ, чей номер надо получить для отображения.
//
// Возвращаемое значение.
//  Строка - номер документа 
//
Функция ПолучитьНомерСФ(Документ, ПредставлениеНомераДокумента, глСписокПрефиксовУзлов = Неопределено, СчетФактура) Экспорт

	Если Документ = Неопределено ИЛИ Документ = NULL Тогда 
		Возврат 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактура.Номер,
	               |	Организации.Префикс
	               |ИЗ
	               |	Документ."+СчетФактура+" КАК СчетФактура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	               |		ПО СчетФактура.Организация = Организации.Ссылка
	               |ГДЕ
	               |	СчетФактура.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить().Выгрузить();
	НомерДокумента   = Результат[0].Номер;
	ПрефиксДокумента = Результат[0].Префикс;
	
	Номер = СокрЛП(НомерДокумента);	
			
	Если (ПредставлениеНомераДокумента <> Перечисления.ВидыПредставленийНомеровДокументов.ПустаяСсылка()) И (ПредставлениеНомераДокумента <> 
		 Перечисления.ВидыПредставленийНомеровДокументов.ПрефиксИНули) Тогда
		 
		Попытка
			ПрефиксОрганизации = СокрЛП(ПрефиксДокумента); 
		Исключение
			Попытка
				ПрефиксОрганизации = СокрЛП(Документ.ДокументОснование.Организация.Префикс); 
			Исключение
				ПрефиксОрганизации = "";
			КонецПопытки;
		КонецПопытки;
		СписокПрефиксовУзлов = ?(глСписокПрефиксовУзлов<>Неопределено, глСписокПрефиксовУзлов, Новый Структура);
				
		ПолныйПрефиксНайден = Ложь;
		
		//в номере может быть префикс любого узла
		Для Каждого ЭлементСпискаПрефиксовУзлов Из СписокПрефиксовУзлов Цикл
			ПрефиксУзла = СокрЛП(ЭлементСпискаПрефиксовУзлов.Значение);
			ПолныйПрефикс = ПрефиксУзла + ПрефиксОрганизации;
			ПозицияПолногоПрефикса = Найти(Номер, ПолныйПрефикс);
			Если ПозицияПолногоПрефикса = 1 Тогда
				Номер = Прав(Номер, СтрДлина(Номер) - СтрДлина(ПолныйПрефикс));
				ПолныйПрефиксНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
			
		//возможно в номере есть только префикс организации
		Если Не ПолныйПрефиксНайден Тогда
			ПолныйПрефикс = ПрефиксОрганизации;
			Если Не ПустаяСтрока(ПолныйПрефикс) Тогда 
				ПозицияПолногоПрефикса = Найти(Номер, ПолныйПрефикс);
				Если ПозицияПолногоПрефикса = 1 Тогда
					Номер = Прав(Номер, СтрДлина(Номер) - СтрДлина(ПолныйПрефикс));
					ПолныйПрефиксНайден = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока Лев(Номер, 1) = "0" Цикл
			Номер = Прав(Номер, СтрДлина(Номер) - 1);
		КонецЦикла;
		
		Если ПредставлениеНомераДокумента = Перечисления.ВидыПредставленийНомеровДокументов.ПрефиксБезНулей Тогда
			Если ПолныйПрефиксНайден Тогда
				Номер = ПолныйПрефикс + Номер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции // ПолучитьНомерСФ()


// Процедура вывода расшифровки 
//
Процедура СформироватьРасшифровку(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();	
	//ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//// выводим шапку
	Организация 	= ПолучитьПараметр(ЭтотОбъект.КомпоновщикНастроек, "Организация");
	
	Если Организация = Неопределено Тогда 
		Предупреждение("Данный отчет предназначен для вызова из регламентированного отчета",,"Отчет не сформирован");
		Возврат;
	КонецЕсли;
			
	НачалоПериодаОтчета 	= ПолучитьПараметр(ЭтотОбъект.КомпоновщикНастроек, "НачалоПериода");
	КонецПериодаОтчета		= ПолучитьПараметр(ЭтотОбъект.КомпоновщикНастроек, "КонецПериода"); 
	СведенияОНалогоплательщике = ОбщегоНазначения.СведенияОЮрФизЛице(Организация.Значение, КонецПериодаОтчета.Значение);
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение;
			
	ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
	ОбластьЗаголовок.Параметры.НалоговыйПериод = ОбщегоНазначения.ПолучитьПредставлениеПериода(НачалоДня(НачалоПериодаОтчета.Значение), КонецДня(КонецПериодаОтчета.Значение));
	Результат.Вывести(ОбластьЗаголовок);
	
	ТиповыеОтчеты.ВывестиТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	//// выводим подвал
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация.Значение, КонецПериодаОтчета.Значение, глЗначениеПеременной("глТекущийПользователь").Физлицо);
	ОбластьПодвал.Параметры.ФИОРуководителя = ОтветЛица.Руководитель;
	ОбластьПодвал.Параметры.ФИОглБухгалтера = ОтветЛица.ГлавныйБухгалтер;
	ОбластьПодвал.Параметры.ФИОИсполнителя 	= ОтветЛица.ОтветственныйЗаРегистры;
	ОбластьПодвал.Параметры.ДатаСоставления = Формат(ОбщегоНазначения.ПолучитьРабочуюДату(), "ДФ=""дд ММММ гггг 'г.'""");
	
	Результат.Вывести(ОбластьПодвал);
		
	Возврат;
	
КонецПроцедуры

// Получает параметр данных компоновщика настроек
//
Функция ПолучитьПараметр(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

УдВес = 0;

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    
                                                         
мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       
                                                     
ИмяПакета = "http://www.fno300.rating.kz";
ИмяФайлаВыгрузки = "300.xml";

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");

#КонецЕсли

