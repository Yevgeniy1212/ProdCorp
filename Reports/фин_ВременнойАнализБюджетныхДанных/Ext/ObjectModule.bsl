Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;
Перем ТаблицаИтоговСтатей Экспорт;


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ДАННЫХ ОТЧЕТА


Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировок(ЭтотОбъект,,Ложь);	
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров(Отбор)
	Ошибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Бюджет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан бюджет!");
		Ошибки = Истина;
	КонецЕсли;
	Если ДанныеОтчета.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не настроены данные отчета!");
		Ошибки = Истина;
	КонецЕсли;
	Если ДанныеОтчета.НайтиСтроки(Новый Структура("ПоФормуле",Ложь)).Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не настроено ни одного исходного поля!");
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
		Если СтрокаПоказатель.Использование=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПоказатель.ПоФормуле=Ложь Тогда
			Если СтрокаПоказатель.НачалоПериода='00010101' Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено начало периода в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
				Ошибки = Истина;
			КонецЕсли;
			Если СтрокаПоказатель.ОкончаниеПериода='00010101' Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен конец периода в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
				Ошибки = Истина;
			КонецЕсли;
			Если СтрокаПоказатель.Ресурс=Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма И НЕ (ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта ИЛИ Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта)).Количество()<>0) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя отражать валютную сумму в отчете без использования группировки по валюте!");
				Ошибки = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СокрЛП(СтрокаПоказатель.Заголовок)="" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен заголовок в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
			Ошибки = Истина;
		КонецЕсли;
		Если СокрЛП(СтрокаПоказатель.ИдентификаторПоля)="" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен идентификатор поля в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.ПоФормуле И СокрЛП(СтрокаПоказатель.Формула)="" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена формула поля в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.ПоФормуле=Ложь И НЕ ЗначениеЗаполнено(СтрокаПоказатель.Ресурс) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан ресурс поля в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка данных отчета!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Группировки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена группировка в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидГруппировки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид группировки в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И ДанныеОтчета.НайтиСтроки(Новый Структура("Ресурс",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать группировку по валюте без отражения валютной суммы в отчете!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И ДанныеОтчета.НайтиСтроки(Новый Структура("Ресурс",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать разделение данных по валюте без отражения валютной суммы в отчете!");
		Ошибки = Истина;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьОграниченияПоБюджетам")=Истина Тогда
		Если НЕ фин_ПривилегированныеПроцедуры.РазрешеноПолучениеОтчета(Бюджет,ДанныеОтчета.Выгрузить(Новый Структура("Использование",Истина)).ВыгрузитьКолонку("Данные"),Отбор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя недостаточно прав!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ Ошибки;	
КонецФункции

Функция МинимальныйПериод()
	Дата = ДанныеОтчета[0].НачалоПериода;
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		Если СтрокаДанных.ПоФормуле Тогда
			Продолжить;
		КонецЕсли;
		Дата = Мин(Дата,СтрокаДанных.НачалоПериода);
	КонецЦикла;
	Возврат Дата;
КонецФункции

Функция МаксимальныйПериод()
	Дата = ДанныеОтчета[0].ОкончаниеПериода;
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		Если СтрокаДанных.ПоФормуле Тогда
			Продолжить;
		КонецЕсли;
		Дата = Макс(Дата,СтрокаДанных.ОкончаниеПериода);
	КонецЦикла;
	Возврат Дата;
КонецФункции

Функция ПолучитьТаблицуДанных(Отбор,мГруппировки)
	ТекстРазрядность = "";
	ТекстРазрядностьКоличество = "";
	РазрядностьПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрядностьПланированияБюджетов");
	Если РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
		ТекстРазрядность="/1000000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
		ТекстРазрядность="/100000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
		ТекстРазрядность="/10000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
		ТекстРазрядность="/1000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
		ТекстРазрядность="/100";
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПрименятьРазрядностьДляКоличества") Тогда
		ТекстРазрядностьКоличество = ТекстРазрядность;
	КонецЕсли;
	
	ВРазрезеВалют = ДанныеОтчета.НайтиСтроки(Новый Структура("Ресурс,ПоФормуле,Использование",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма,Ложь,Ложь)).Количество()<>0 И (ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта ИЛИ Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта)).Количество()<>0);
	
	ПересчетВНоменклатурныеГруппы = Ложь;
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		//Если НЕ СтрокаДанных.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		Если СтрокаДанных.ПоФормуле Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоПлановыеДанные(СтрокаДанных.Данные) И СтрокаДанных.Данные.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
			ПересчетВНоменклатурныеГруппы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекстФильтраОбороты = "";
	ТекстОтбораОбороты = "";
	Показатели = ДанныеОтчета.Выгрузить(Новый Структура("Использование,ПоФормуле",Истина,Ложь));
	Показатели.Колонки.Ресурс.Имя = "Показатель";
	ТекстИзмерения = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,"Период",ПересчетВНоменклатурныеГруппы);
	ТекстОтбораИтоговыеОбороты = "";
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораИтоговыеОбороты,,"",,Новый Структура("СтатьяБюджета"));
	
	СписокИсключаемыхТиповВнутригрупповыхОборотов = Новый Массив;
	СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОбороты);
	Если Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)).Количество()>0 ИЛИ ОсновнаяГруппировка=Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеПодразделения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеОрганизации);
	КонецЕсли;
	ВерсииБюджета = фин_ПроцедурыМеханизмовБюджетирования.ВерсииБюджетаЗаПериод(Бюджет,МинимальныйПериод(),МаксимальныйПериод());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсииБюджета",				ВерсииБюджета);
	Запрос.УстановитьПараметр("СписокВГО",					СписокИсключаемыхТиповВнутригрупповыхОборотов);
	Запрос.УстановитьПараметр("ГраницаАктуальности",		?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)));
	Запрос.УстановитьПараметр("ГраницаФактическихИПрогнозныхДанных",		?(ГраницаФактическихИПрогнозныхДанных='00010101',КонецДня(ТекущаяДата()),КонецДня(ГраницаФактическихИПрогнозныхДанных)));
	Запрос.УстановитьПараметр("Бюджет",						Бюджет);
	Запрос.УстановитьПараметр("Организация",				Организация);
	
	ТекстОтборПоОрганизации = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") И ЗначениеЗаполнено(Организация),"Организация = &Организация","ИСТИНА");
	
	ТаблицаОтбора.Очистить();
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.Версия";
	НС.Значение = ВерсииБюджета;
	НС.ВидСравнения = "ВСписке";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПометкаУдаления";
	НС.Значение = Ложь;
	НС.ВидСравнения = "Равно";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПризнакВнутригрупповогоОборота";
	НС.Значение = СписокИсключаемыхТиповВнутригрупповыхОборотов;
	НС.ВидСравнения = "ВСписке";
	Если ГраницаАктуальности<>'00010101' Тогда
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = "Период";
		НС.Значение = ГраницаАктуальности;
		НС.ВидСравнения = "МеньшеИЛИРавно";
	КонецЕсли;	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "Бюджет";
	НС.Значение = Бюджет;
	НС.ВидСравнения = "Равно";
	
	
	// получим список показателей бюджета
	СписокФинансовыхПоказателей = Новый СписокЗначений;
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБюджета.ФинансовыйПоказатель
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Владелец
	|	И НЕ СтатьиБюджета.ЭтоГруппа
	|	И НЕ СтатьиБюджета.ПометкаУдаления
	|	И СтатьиБюджета.Версия В (&Версии)
	|	И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&ВГО)";
	
	ЗапросПоказатели.УстановитьПараметр("Версии", ВерсииБюджета);
	ЗапросПоказатели.УстановитьПараметр("Владелец", Бюджет);
	ЗапросПоказатели.УстановитьПараметр("ВГО", СписокИсключаемыхТиповВнутригрупповыхОборотов);
	
	Результат = ЗапросПоказатели.Выполнить();
	СписокФинансовыхПоказателей.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Финансовыйпоказатель"));
	Запрос.УстановитьПараметр("Показатели",				СписокФинансовыхПоказателей);
	// параметры отбора
	ОтборыПоДополнительнымРазрезам = Новый Массив;
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(СтрокаОтбор.Путь,"Разрез")<>0 Тогда
			ОтборыПоДополнительнымРазрезам.Добавить(СтрокаОтбор.Путь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// расчет по формулам
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		//Если НЕ СтрокаДанных.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		Если СтрокаДанных.ПоФормуле Тогда
			Продолжить;
		КонецЕсли;
		МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
		Если НЕ ЭтоПлановыеДанные(СтрокаДанных.Данные) Тогда
			СтруктураПараметровОтбора = Новый Структура;
			Для Каждого Параметр Из Запрос.Параметры Цикл
				Если Найти(Параметр.Ключ,"ПараметрОтбора")<>0 Тогда
					СтруктураПараметровОтбора.Вставить(Параметр.Ключ,Параметр.Значение);
				КонецЕсли;
			КонецЦикла;
			ТекстПоказатели = ",
			|	Обороты."+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот КАК "+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот";
			ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуламБюджета(Бюджет,ВерсииБюджета,Организация,СписокИсключаемыхТиповВнутригрупповыхОборотов,СтрокаДанных.НачалоПериода,СтрокаДанных.ОкончаниеПериода,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),?(НЕ ЭтоПлановыеДанные(СтрокаДанных.Данные),Периодичность(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.Данные)),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,ВРазрезеВалют,СтрокаДанных.Данные,ГраницаФактическихИПрогнозныхДанных);
			Если ТаблицаРасчетыПоФормулам.Колонки.Найти("Номенклатура")<>Неопределено Тогда
				Для Каждого СтрокаРасчетПоФормулам Из ТаблицаРасчетыПоФормулам Цикл
					Если СтрокаРасчетПоФормулам.Номенклатура = Неопределено Тогда
						СтрокаРасчетПоФормулам.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			МассивСуществующихКолонок = Новый Массив;
			Если ОтборыПоДополнительнымРазрезам.Количество()>0 Тогда
				Для Каждого ПутьОтбора Из ОтборыПоДополнительнымРазрезам Цикл
					Если ТаблицаРасчетыПоФормулам.Колонки.Найти(ПутьОтбора)<>Неопределено Тогда
						МассивСуществующихКолонок.Добавить(ПутьОтбора);
					Иначе
						ТаблицаРасчетыПоФормулам.Колонки.Добавить(ПутьОтбора,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[ПутьОтбора]).ТипЗначения);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаРасчетыПоФормулам Цикл
					Для Каждого ПутьОтбора Из ОтборыПоДополнительнымРазрезам Цикл
						Если МассивСуществующихКолонок.Найти(ПутьОтбора)<>Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТаблицы[ПутьОтбора] = СтрокаТаблицы.ДополнительныеРазрезы[ПутьОтбора];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			Запрос.УстановитьПараметр("ВТ_Формулы"+МеткаУровня,ТаблицаРасчетыПоФормулам);
			ТекстФормированияВременныхТаблиц ="	
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель,
			|	Обороты.ДополнительныеРазрезы КАК ДополнительныеРазрезы"+фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,,ОсновнаяГруппировка,?(ЭтоПлановыеДанные(СтрокаДанных.Данные),Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.Данные)),Строка(Периодичность())),,,Истина)+ТекстПоказатели+"
			|ПОМЕСТИТЬ ВТ_ФормулыПредрасчет"+МеткаУровня+"
			|ИЗ &ВТ_Формулы"+МеткаУровня+" КАК Обороты
			|"+?(ТекстОтбораОбороты="" И ТекстФильтраОбороты="",""," ГДЕ ")+СтрЗаменить(ТекстОтбораОбороты,"ДополнительныеРазрезы.","")+?(ТекстОтбораОбороты="",""," И ")+СтрЗаменить(ТекстФильтраОбороты,"ДополнительныеРазрезы.","");
			Запрос.Текст = ТекстФормированияВременныхТаблиц;
			Запрос.Выполнить();
		КонецЕсли;
	КонецЦикла;
	ТекстФормированияВременныхТаблиц = "";
	ТекстВсеПоказателиСПсевдонимом = "";
	ТекстВсеПоказатели = "";
	Первая = Истина;
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		
		//Если НЕ СтрокаДанных.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		Если СтрокаДанных.ПоФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
		ТекстПоказатели = "";
		ТекстПоказателиСМинусом = "";
		
		мТекстПоказатели = ",
		|	Обороты."+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот "+?(НЕ ЭтоПлановыеДанные(СтрокаДанных.Данные),?(СтрокаДанных.Ресурс=Перечисления.фин_РесурсыДанныхБюджетирования.Количество,ТекстРазрядностьКоличество,ТекстРазрядность),"")+ " КАК "+СтрокаДанных.ИдентификаторПоля;
		мТекстПоказателиСМинусом = ",
		|	Обороты."+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот * (-1) "+?(НЕ ЭтоПлановыеДанные(СтрокаДанных.Данные),?(СтрокаДанных.Ресурс=Перечисления.фин_РесурсыДанныхБюджетирования.Количество,ТекстРазрядностьКоличество,ТекстРазрядность),"")+ " КАК "+СтрокаДанных.ИдентификаторПоля;
		
		ТекстВсеПоказатели = ТекстВсеПоказатели + ",
		|	Обороты."+СтрокаДанных.ИдентификаторПоля+ " КАК "+СтрокаДанных.ИдентификаторПоля;
		Для Каждого СтрокаДанныхОбход Из ДанныеОтчета Цикл
			Если СтрокаДанныхОбход.ПоФормуле Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаДанных.НомерСтроки = СтрокаДанныхОбход.НомерСтроки Тогда
				ТекстПоказатели = ТекстПоказатели + мТекстПоказатели;
				ТекстПоказателиСМинусом = ТекстПоказателиСМинусом + мТекстПоказателиСМинусом;
			Иначе
				ТекстПоказатели = ТекстПоказатели+",
				|	0 КАК "+СтрокаДанныхОбход.ИдентификаторПоля;
				ТекстПоказателиСМинусом = ТекстПоказателиСМинусом+",
				|	0 КАК "+СтрокаДанныхОбход.ИдентификаторПоля;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Сценарий"+МеткаУровня,					?(ЭтоПлановыеДанные(СтрокаДанных.Данные),СтрокаДанных.Данные,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()));
		Запрос.УстановитьПараметр("НачалоПланирования"+МеткаУровня,			СтрокаДанных.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПланирования"+МеткаУровня,		СтрокаДанных.ОкончаниеПериода);
		
		ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц + ?(ТекстФормированияВременныхТаблиц="","","	
		|ОБЪЕДИНИТЬ ВСЕ");
		Если НЕ ЭтоПлановыеДанные(СтрокаДанных.Данные) Тогда
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмерения,"Обороты.ДополнительныеРазрезы","Набор")+ТекстПоказатели+?(Первая=Ложь,"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ ВТ_ФормулыПредрасчет"+МеткаУровня+" КАК Обороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Набор
			|		ПО Обороты.ДополнительныеРазрезы = Набор.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ";
			Первая = Ложь;
		КонецЕсли;
		Если СтрокаДанных.Данные = Перечисления.фин_ВидыДанныхОтчета.Прогнозные Тогда
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказатели+?(Первая=Ложь,"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
			|																							ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
			|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
			|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
		ИначеЕсли СтрокаДанных.Данные = Перечисления.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных Тогда
			//ГраницаФактическихДанных = ?(ГраницаФактическихИПрогнозныхДанных='00010101',"&ГраницаАктуальности","&ГраницаФактическихИПрогнозныхДанных");
			ГраницаФактическихДанных = "&ГраницаФактическихИПрогнозныхДанных";
			Для Каждого ИмяРегистра Из МассивРегистров Цикл
				ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
				|ВЫБРАТЬ
				|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказатели+?(Первая=Ложь,"","
				|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
				|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
				|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
				|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
				|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты+"
				|ОБЪЕДИНИТЬ ВСЕ";
			КонецЦикла;
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказатели+?(Первая=Ложь,"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
			|																							ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"  И ПериодПланирования >=&ГраницаФактическихИПрогнозныхДанных
			|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
			|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
		Иначе
			Если ЭтоПлановыеДанные(СтрокаДанных.Данные) Тогда
				ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
				|ВЫБРАТЬ
				|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказатели+?(Первая=Ложь,"","
				|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
				|ИЗ РегистрНакопления.фин_ОборотыБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
				|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
				|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
				|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
			Иначе
				Для Каждого ИмяРегистра Из МассивРегистров Цикл
					ТекстФормированияВременныхТаблиц = ТекстФормированияВременныхТаблиц+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|") +"
					|ВЫБРАТЬ
					|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказатели+?(Первая=Ложь,"","
					|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
					|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
					|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
					|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
					|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Первая = Ложь;
	КонецЦикла;
	ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
	|;
	|ВЫБРАТЬ
	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмерения,"ДополнительныеРазрезы.","")+ТекстВсеПоказатели+"
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ ВТ_ПредварительныеОбороты КАК Обороты";
	Запрос.Текст = ТекстФормированияВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.КодСтрокиБюджета КАК КодСтрокиБюджета"+ТекстВсеПоказатели+СтрЗаменить(ТекстИзмерения,"ДополнительныеРазрезы.","")+"
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обороты КАК Обороты
	|		ПО СтатьиБюджета.ФинансовыйПоказатель = Обороты.ФинансовыйПоказатель
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Бюджет И НЕ СтатьиБюджета.ЭтоГруппа И НЕ СтатьиБюджета.ПометкаУдаления И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&СписокВГО)  И СтатьиБюджета.Версия В (&ВерсииБюджета)"+?(ТекстОтбораИтоговыеОбороты="",""," И ")+ТекстОтбораИтоговыеОбороты;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Группировки.Количество()>0 Тогда
		СтрокаСверткиИзмерения = "";
		СтрокаСверткиРесурсы = "";
		Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
			//Если СтрокаПоказатель.Использование И НЕ СтрокаПоказатель.ПоФормуле Тогда
			Если НЕ СтрокаПоказатель.ПоФормуле Тогда
				СтрокаСверткиРесурсы = СтрокаСверткиРесурсы + ?(СтрокаСверткиРесурсы="","",",")+СтрокаПоказатель.ИдентификаторПоля;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Колонка Из Таблица.Колонки Цикл
			Если ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля,ПоФормуле",Колонка.Имя,Ложь)).Количество()=0 Тогда
				СтрокаСверткиИзмерения = СтрокаСверткиИзмерения + ?(СтрокаСверткиИзмерения="","",",")+Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		Таблица.Свернуть(СтрокаСверткиИзмерения,СтрокаСверткиРесурсы);
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

Функция ЭтоПлановыеДанные(Данные)
	Возврат ЗначениеЗаполнено(Данные) И ТипЗнч(Данные)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования();	
КонецФункции

Функция Периодичность()
	Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
		Если ЭтоПлановыеДанные(СтрокаДанных.Данные) Тогда
			Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.Данные);
		КонецЕсли;
	КонецЦикла;
	Возврат Перечисления.фин_Периодичность.Месяц;
КонецФункции

Функция ПолучитьСКД(мГруппировки)
	//получаем схему компоновки данных
	СхемаКомпоновкиДанных=фин_УправлениеОтчетамиБюджетирование.ПолучитьСКД(ЭтотОбъект,мГруппировки,СтруктураПеревода,ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),КЭШ,"фин_ВременнойАнализБюджетныхДанных");
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ПолучитьНастройкиСКД()
	Настройки = фин_УправлениеОтчетамиБюджетирование.ПолучитьНастройкиСКД(ЭтотОбъект,КомпоновщикНастроек,СтруктураПеревода,КЭШ,Периодичность(),"фин_ВременнойАнализБюджетныхДанных");
	Возврат Настройки;
КонецФункции

Процедура ДополнитьТаблицуИтогами(ТаблицаВнешнегоНабораДанных,Отбор)
	СтрокаИтог = Неопределено;
	Если Бюджет.РучнаяНастройкаИтоговПоГруппам И фин_УправлениеОтчетамиБюджетирование.ИтогиТребуются(Группировки) Тогда
		ТаблицаИтоговСтатей = ТаблицаВнешнегоНабораДанных.СкопироватьКолонки();
		ПоляРасчетаИтогов = Новый Массив;
		ОбязательныеПоляРасчетаИтогов = Новый Массив;
		ПоляРасчетаИтогов.Добавить("СтатьяБюджета");
		ОбязательныеПоляРасчетаИтогов.Добавить("СтатьяБюджета");
		Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
			ПоляРасчетаИтогов.Добавить(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
			ОбязательныеПоляРасчетаИтогов.Добавить(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
		КонецЕсли;
		СтруктураСверткиДляФормул = ?(ЗначениеЗаполнено(ОсновнаяГруппировка),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
		ИндексГруппировкиСтатьи = Неопределено;
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
			Если СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
				СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
				ПоляРасчетаИтогов.Добавить(Имя);
			КонецЕсли;
			Если СтрокаГруппировки.Измерение=Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией) Тогда
				ИндексГруппировкиСтатьи = СтрокаГруппировки.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		Если ИндексГруппировкиСтатьи<>Неопределено Тогда
			Для Каждого СтрокаГруппировки Из Группировки Цикл
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
				Если ИндексГруппировкиСтатьи>СтрокаГруппировки.НомерСтроки И СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И СтрокаГруппировки.Измерение<>Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией) Тогда
					СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
					ПоляРасчетаИтогов.Добавить(Имя);
					ОбязательныеПоляРасчетаИтогов.Добавить(Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекстФильтраОбороты = "";
		ТекстОтбораОбороты = "";
		фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
		// параметры отбора
		СтруктураПараметровОтбора = Новый Структура;
		Для Каждого СтрокаОтбор Из Отбор Цикл
			Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПараметровОтбора.Вставить("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
		КонецЦикла;
		

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
			|	""Сумма"" КАК ПолеРасчета,
			|	фин_СтатьиБюджета.Формула
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|ГДЕ
			|	фин_СтатьиБюджета.Владелец = &Бюджет
			|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
			|	И фин_СтатьиБюджета.ЭтоГруппа
			|	И фин_СтатьиБюджета.Формула <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	фин_СтатьиБюджета.Ссылка,
			|	""Количество"",
			|	фин_СтатьиБюджета.ФормулаКоличество
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|ГДЕ
			|	фин_СтатьиБюджета.Владелец = &Бюджет
			|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
			|	И фин_СтатьиБюджета.ЭтоГруппа
			|	И фин_СтатьиБюджета.ФормулаКоличество <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)";

		Запрос.УстановитьПараметр("Бюджет", Бюджет);

		Результат = Запрос.Выполнить();
		
		ТаблицаИтоговСтатей.Колонки.Добавить("Ранг",Новый ОписаниеТипов("Число"));

		ВыборкаДетальныеЗаписи = Результат.Выбрать();
        УпрВалюта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		МассивРесурсовОтчета = Новый Массив;
		Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
			МассивРесурсовОтчета.Добавить(СтрокаДанных.ИдентификаторПоля);
		КонецЦикла;
		ТаблицаИтоговСтатей.Очистить();
		Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
			Если СтрокаДанных.ПоФормуле  Тогда// ИЛИ НЕ СтрокаДанных.Использование Тогда
				Продолжить;
			КонецЕсли;
			Сценарий = ?(ЭтоПлановыеДанные(СтрокаДанных.Данные),СтрокаДанных.Данные,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
			НачалоПериодаПланирования = СтрокаДанных.НачалоПериода;
			КонецПериодаПланирования = КонецДня(СтрокаДанных.ОкончаниеПериода);
			ВидДанных = ?(ЭтоПлановыеДанные(СтрокаДанных.Данные),Перечисления.фин_ВидыДанныхОтчета.Плановые,Перечисления.фин_ВидыДанныхОтчета.Фактические);
			ВыборкаДетальныеЗаписи.Сбросить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если СтрокаДанных.Ресурс = Перечисления.фин_РесурсыДанныхБюджетирования.Количество И ВыборкаДетальныеЗаписи.ПолеРасчета <> "Количество" Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаДанных.Ресурс <> Перечисления.фин_РесурсыДанныхБюджетирования.Количество И ВыборкаДетальныеЗаписи.ПолеРасчета = "Количество" Тогда
					Продолжить;
				КонецЕсли;
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(ВыборкаДетальныеЗаписи.Формула,ВыборкаДетальныеЗаписи.ПолеРасчета,?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот"].Имя = СтрокаДанных.ИдентификаторПоля;
				Ранг = 0;
				ГруппаСтатьи = ВыборкаДетальныеЗаписи.СтатьяБюджета.Родитель;
				Пока ЗначениеЗаполнено(ГруппаСтатьи) Цикл
					Ранг = Ранг + 1;
					ГруппаСтатьи = ГруппаСтатьи.Родитель;
				КонецЦикла;
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = ТаблицаИтоговСтатей.Добавить();
					НС.СтатьяБюджета = ВыборкаДетальныеЗаписи.СтатьяБюджета;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
					НС.Ранг = Ранг;
				КонецЦикла;
			КонецЦикла;
			СтрокаСверткиИзмерения = "";
			СтрокаСверткиРесурсы = "";
			Для Каждого Колонка Из ТаблицаИтоговСтатей.Колонки  Цикл
				Если МассивРесурсовОтчета.Найти(Колонка.Имя)=Неопределено Тогда
					Если ПоляРасчетаИтогов.Найти(Колонка.Имя)<>Неопределено ИЛИ Колонка.Имя = "Ранг" Тогда
						СтрокаСверткиИзмерения = СтрокаСверткиИзмерения + ?(СтрокаСверткиИзмерения="","",",") + Колонка.Имя;
					КонецЕсли;
				Иначе
					СтрокаСверткиРесурсы = СтрокаСверткиРесурсы + ?(СтрокаСверткиРесурсы="","",",") + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			ТаблицаИтоговСтатей.Свернуть(СтрокаСверткиИзмерения,СтрокаСверткиРесурсы);
			ТаблицаИтоговСтатей.Сортировать("Ранг ВОЗР");
			МассивРесурсы = Новый Массив;
			МассивРесурсы.Добавить(СтрокаДанных.ИдентификаторПоля);
			Для Каждого СтрокаБазовая Из ТаблицаИтоговСтатей Цикл
				Для Инд = ТаблицаИтоговСтатей.Индекс(СтрокаБазовая)+2 По ТаблицаИтоговСтатей.Количество() Цикл
					СтрокаПроверочная = ТаблицаИтоговСтатей[Инд-1];
					Если СтрокаБазовая<>СтрокаПроверочная И СтрокаПроверочная.СтатьяБюджета.Родитель = СтрокаБазовая.СтатьяБюджета Тогда
						ОтборВыполнен = Истина;
						Для Каждого ПолеРазрез Из ПоляРасчетаИтогов Цикл
							Если ПолеРазрез = "СтатьяБюджета" Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаБазовая[ПолеРазрез]<>СтрокаПроверочная[ПолеРазрез] Тогда
								ОтборВыполнен = Ложь;
								Продолжить;
							КонецЕсли;
						КонецЦикла;
						Если НЕ ОтборВыполнен Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого Ресурс Из МассивРесурсы Цикл
							Если ТаблицаИтоговСтатей.Колонки.Найти(Ресурс)<>Неопределено Тогда
								СтрокаБазовая[Ресурс] = СтрокаБазовая[Ресурс] - СтрокаПроверочная[Ресурс];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			//Для Каждого СтрокаБазовая Из ТаблицаИтоговСтатей Цикл
			//	НС = ТаблицаВнешнегоНабораДанных.Добавить();
			//	ЗаполнитьЗначенияСвойств(НС,СтрокаБазовая);
			//	Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
			//		Если СтрокаПоказатель.ПоФормуле ИЛИ НЕ СтрокаПоказатель.Использование Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		Имя = СтрокаПоказатель.ИдентификаторПоля;
			//		НС[Имя] = 0;
			//	КонецЦикла;
			//	НС[СтрокаДанных.ИдентификаторПоля] = СтрокаБазовая[СтрокаДанных.ИдентификаторПоля];
			//КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать ИЛИ Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПустаяСсылка() Тогда
		Возврат;
	ИначеЕсли Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("РезультатРасчетаИтога",Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("КоличествоЗначений",Новый ОписаниеТипов("Число"));
		СтруктураИтога = Новый Структура;
		СтруктураСвертки = "СтатьяБюджета"+?(ЗначениеЗаполнено(ОсновнаяГруппировка),","+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
		Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
			ИмяОГ = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
			ТаблицаРезультат.Колонки.Добавить(ИмяОГ);
			СтруктураИтога.Вставить(ИмяОГ);
		КонецЕсли;
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
			Если СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
				ТаблицаРезультат.Колонки.Добавить(Имя);
				СтруктураИтога.Вставить(Имя);
				СтруктураСвертки = СтруктураСвертки+","+Имя;
			КонецЕсли;
		КонецЦикла;
		ПоляСуммирования = "";
		СписокРесурсов = Новый Массив;
		Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
			Если СтрокаПоказатель.ПоФормуле ИЛИ НЕ СтрокаПоказатель.Использование Тогда
				Продолжить;
			КонецЕсли;
			Имя = СтрокаПоказатель.ИдентификаторПоля;
			ПоляСуммирования = ПоляСуммирования+?(ПоляСуммирования="","",",")+Имя;
			ТаблицаРезультат.Колонки.Добавить(Имя,Новый ОписаниеТипов("Число"));
			СписокРесурсов.Добавить(Имя);
		КонецЦикла;
		Если СписокРесурсов.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		КопияТаблицы = ТаблицаВнешнегоНабораДанных.Скопировать();
		КопияТаблицы.Свернуть(СтруктураСвертки,ПоляСуммирования);
		ИтоговаяФункцияБюджета = Бюджет.ИтоговаяФункция;
		Для Каждого СтрокаТаблицы Из КопияТаблицы Цикл
			Если СтрокаТаблицы.СтатьяБюджета.ИсключитьИзИтогов Тогда
				Продолжить;
			КонецЕсли;
			Новая = Ложь;
			Если СтруктураИтога.Количество()=0 Тогда
				Если ТаблицаРезультат.Количество()=0 Тогда
					Новая = Истина;
				КонецЕсли;
				ЗаполняемаяСтрока = ?(ТаблицаРезультат.Количество()=0,ТаблицаРезультат.Добавить(),ТаблицаРезультат[0]);
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураИтога,СтрокаТаблицы);
				НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураИтога);
				Если НайденныеСтроки.Количество()=0 Тогда
					Новая = Истина;
					ЗаполняемаяСтрока = ТаблицаРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока,СтруктураИтога);
				Иначе
					ЗаполняемаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			ЗаполняемаяСтрока.КоличествоЗначений = ЗаполняемаяСтрока.КоличествоЗначений + 1;
			Для Каждого Ресурс Из СписокРесурсов Цикл
				Если Новая ИЛИ (ИтоговаяФункцияБюджета<>Перечисления.фин_ИтоговыеФункции.Минимум И ИтоговаяФункцияБюджета<>Перечисления.фин_ИтоговыеФункции.Максимум) Тогда
					ЗаполняемаяСтрока[Ресурс] = ЗаполняемаяСтрока[Ресурс] + СтрокаТаблицы[Ресурс];
				ИначеЕсли ИтоговаяФункцияБюджета=Перечисления.фин_ИтоговыеФункции.Минимум Тогда
					ЗаполняемаяСтрока[Ресурс] = Мин(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
				Иначе
					ЗаполняемаяСтрока[Ресурс] = Макс(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Бюджет.ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.Сумма И Бюджет.ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.ПустаяСсылка() Тогда
			Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
				Если Бюджет.ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Количество Тогда
					Для Каждого Ресурс Из СписокРесурсов Цикл
						СтрокаРезультат[Ресурс] = СтрокаРезультат["КоличествоЗначений"];
					КонецЦикла;
				ИначеЕсли Бюджет.ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Среднее Тогда
					Для Каждого Ресурс Из СписокРесурсов Цикл
						СтрокаРезультат[Ресурс] = СтрокаРезультат[Ресурс]/СтрокаРезультат["КоличествоЗначений"];
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			НС = ТаблицаВнешнегоНабораДанных.Добавить();
			НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
			Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
				Если СтрокаПоказатель.ПоФормуле ИЛИ НЕ СтрокаПоказатель.Использование Тогда
					Продолжить;
				КонецЕсли;
				Имя = СтрокаПоказатель.ИдентификаторПоля;
				НС[Имя] = 0;
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(НС,СтрокаРезультат);
			Если ТаблицаВнешнегоНабораДанных.Колонки.Найти("ПериодПланирования")<>Неопределено И НС.ПериодПланирования = Неопределено Тогда
				НС.ПериодПланирования = '00010101';
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле Тогда
		КопияТаблицаВнешнегоНабораДанных = ТаблицаВнешнегоНабораДанных.СкопироватьКолонки();
		Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
			Если СтрокаДанных.ПоФормуле Тогда// ИЛИ НЕ СтрокаДанных.Использование Тогда
				Продолжить;
			КонецЕсли;
			Сценарий = ?(ЭтоПлановыеДанные(СтрокаДанных.Данные),СтрокаДанных.Данные,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
			НачалоПериодаПланирования = СтрокаДанных.НачалоПериода;
			КонецПериодаПланирования = КонецДня(СтрокаДанных.ОкончаниеПериода);
			ВидДанных = ?(ЭтоПлановыеДанные(СтрокаДанных.Данные),Перечисления.фин_ВидыДанныхОтчета.Плановые,Перечисления.фин_ВидыДанныхОтчета.Фактические);
			СтруктураСверткиДляФормул = ?(ЗначениеЗаполнено(ОсновнаяГруппировка),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
			//Для Каждого СтрокаГруппировки Из Группировки Цикл
			//	Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
			//	Если СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
			//		СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
			//	КонецЕсли;
			//КонецЦикла;
			ТекстФильтраОбороты = "";
			ТекстОтбораОбороты = "";
			фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
			// параметры отбора
			СтруктураПараметровОтбора = Новый Структура;
			Для Каждого СтрокаОтбор Из Отбор Цикл
				Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПараметровОтбора.Вставить("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
			КонецЦикла;
			
			Если Бюджет.УчетПоСумме И ЗначениеЗаполнено(Бюджет.Формула) И СтрокаДанных.Ресурс<>Перечисления.фин_РесурсыДанныхБюджетирования.Количество Тогда
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(Бюджет.Формула,"Сумма",?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот"].Имя = СтрокаДанных.ИдентификаторПоля;
				
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = КопияТаблицаВнешнегоНабораДанных.Добавить();
					НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
					Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
						Если СтрокаПоказатель.ПоФормуле тогда//ИЛИ НЕ СтрокаПоказатель.Использование Тогда
							Продолжить;
						КонецЕсли;
						Имя = СтрокаПоказатель.ИдентификаторПоля;
						НС[Имя] = 0;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
				КонецЦикла;
			КонецЕсли;
			
			Если Бюджет.УчетПоКоличеству И ЗначениеЗаполнено(Бюджет.ФормулаКоличество) И СтрокаДанных.Ресурс=Перечисления.фин_РесурсыДанныхБюджетирования.Количество Тогда
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(Бюджет.ФормулаКоличество,"Количество",?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаДанных.Ресурс)+"Оборот"].Имя = СтрокаДанных.ИдентификаторПоля;
				
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = КопияТаблицаВнешнегоНабораДанных.Добавить();
					НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
					Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
						Если СтрокаПоказатель.ПоФормуле Тогда//ИЛИ НЕ СтрокаПоказатель.Использование Тогда
							Продолжить;
						КонецЕсли;
						Имя = СтрокаПоказатель.ИдентификаторПоля;
						НС[Имя] = 0;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		СтруктураСвертки = "СтатьяБюджета"+?(ЗначениеЗаполнено(ОсновнаяГруппировка),","+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
		ПоляСуммирования = "";
		Для Каждого СтрокаПоказатель Из ДанныеОтчета Цикл
			Если СтрокаПоказатель.ПоФормуле Тогда //ИЛИ НЕ СтрокаПоказатель.Использование Тогда
				Продолжить;
			КонецЕсли;
			Имя = СтрокаПоказатель.ИдентификаторПоля;
			ПоляСуммирования = ПоляСуммирования+?(ПоляСуммирования="","",",")+Имя;
		КонецЦикла;
		КопияТаблицаВнешнегоНабораДанных.Свернуть(СтруктураСвертки,ПоляСуммирования);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(КопияТаблицаВнешнегоНабораДанных,ТаблицаВнешнегоНабораДанных);
	КонецЕсли;
КонецПроцедуры

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		СтрокаОтбор.Путь = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора);
	КонецЦикла;
	
	//ВЫБОР СХЕМЫ КОМПОНОВКИ И НАСТРОЙКА ПОЛЕЙ НАБОРА ДАННЫХ
	
	//Если Не ЗначениеЗаполнено(Параметр_Сценарий.Значение) Тогда
	//	Сообщить("Не указан сценарий!");
	//	Возврат;
	//КонецЕсли;
	
	мГруппировки = фин_УправлениеОтчетамиБюджетирование.ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка);
	ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуДанных(Отбор,мГруппировки);
	ДополнитьТаблицуИтогами(ТаблицаВнешнегоНабораДанных,Отбор);
	СхемаКомпоновкиДанных = ПолучитьСКД(мГруппировки);
	Настройки = ПолучитьНастройкиСКД();
	
	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	Заголовок=фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Бюджет,ЯзыкОтчета,,КЭШ);
	фин_УправлениеОтчетамиБюджетирование.ВыполнитьФормированиеОтчета(ЭтотОбъект,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,"фин_ВременнойАнализБюджетныхДанных",Заголовок);	
	
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("Бюджет");
ЗаполнениеПараметров = Новый Структура;
//ЗаполнениеПараметров.Вставить("ГраницаАктуальности",ТекущаяДата());
//ЗаполнениеПараметров.Вставить("ГраницаФактическихИПрогнозныхДанных",ТекущаяДата());
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("ШиринаКолонкиПоказателя",12);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиРеквизита",25);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиСтатьиБюджета",25);

ДополнительныеПараметры = Новый Массив;
//ДополнительныеПараметры.Добавить("ГраницаАктуальности");
ДополнительныеПараметры.Добавить("Периодичность");
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("ЗаголовокОтчета");
ПараметрыОформления.Добавить("ВыводитьКодыСтрокБюджета");
ПараметрыОформления.Добавить("УпорядочиваниеСтатей");
ПараметрыОформления.Добавить("ШиринаКолонкиРеквизита");
ПараметрыОформления.Добавить("ШиринаКолонкиСтатьиБюджета");
ПараметрыОформления.Добавить("ШиринаКолонкиПоказателя");
ПараметрыОформления.Добавить("ВыводитьГруппыСтатейВнизу");
ПараметрыОформления.Добавить("АналитическиеПоляВОднойКолонке");
ПараметрыОформления.Добавить("ПоказателиВОднойКолонке");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
