#Если Клиент Тогда
	
Перем НП Экспорт;
// переменные для управления отображения структурного подразделения
Перем мОтображатьСтруктурныеПодразделения Экспорт;
	
Функция СформироватьТекстЗапроса()
	
	Текст = "ВЫБРАТЬ
	        |	РасчетРаспределенияКосвенныхРасходов.ПериодРасчета КАК Период,
	        |	РасчетРаспределенияКосвенныхРасходов.БазаРаспределения КАК База,
	        |	РасчетРаспределенияКосвенныхРасходов.Подразделение КАК ПодразделениеЗатрат,
	        |	РасчетРаспределенияКосвенныхРасходов.СтатьяЗатрат КАК СтатьяЗатрат,
	        |	РасчетРаспределенияКосвенныхРасходов.СчетРаспределения.Код КАК СчетЗатрат,
	        |	РасчетРаспределенияКосвенныхРасходов.ПодразделениеРаспределения КАК Подразделение,
	        |	РасчетРаспределенияКосвенныхРасходов.НоменклатурнаяГруппаРаспределения КАК НоменклатурнаяГруппа,
	        |	РасчетРаспределенияКосвенныхРасходов.Сумма КАК Сумма,
	        |	РасчетРаспределенияКосвенныхРасходов.СуммаБазы КАК СуммаБазы,
	        |	ВЫБОР
	        |		КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения ССЫЛКА ПланСчетов.Типовой
	        |			ТОГДА ВЫБОР
	        |					КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы))
	        |						ТОГДА ИСТИНА
	        |					ИНАЧЕ ЛОЖЬ
	        |				КОНЕЦ
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	        |					ТОГДА ИСТИНА
	        |				ИНАЧЕ ЛОЖЬ
	        |			КОНЕЦ
	        |	КОНЕЦ КАК ПризнакПроизводственногоСчета,
	        |	ВЫБОР
	        |		КОГДА РасчетРаспределенияКосвенныхРасходов.ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	        |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК СуммаБазыНУ,
	        |	ВЫБОР
	        |		КОГДА РасчетРаспределенияКосвенныхРасходов.ВидУчета.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)
	        |			ТОГДА РасчетРаспределенияКосвенныхРасходов.СуммаБазы
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК СуммаБазыПР,
	        |	ВЫБОР
	        |		КОГДА РасчетРаспределенияКосвенныхРасходов.ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
	        |			ТОГДА РасчетРаспределенияКосвенныхРасходов.Сумма
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК СуммаНУ,
	        |	ВЫБОР
	        |		КОГДА РасчетРаспределенияКосвенныхРасходов.ВидУчета.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР)
	        |			ТОГДА РасчетРаспределенияКосвенныхРасходов.Сумма
	        |		ИНАЧЕ 0
	        |	КОНЕЦ КАК СуммаПР
	        |ИЗ
	        |	РегистрСведений.РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
	        |ГДЕ
	        |	РасчетРаспределенияКосвенныхРасходов.Активность
	        |	И РасчетРаспределенияКосвенныхРасходов.Организация = &Организация
	        |	И РасчетРаспределенияКосвенныхРасходов.ВидОперации = &ВидОперации
	        |	И РасчетРаспределенияКосвенныхРасходов.ВидУчета = &ВидУчета
	        |	И РасчетРаспределенияКосвенныхРасходов.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон
	        |	И РасчетРаспределенияКосвенныхРасходов.СтруктурноеПодразделение = &СтруктурноеПодразделение
	        |	И НЕ РасчетРаспределенияКосвенныхРасходов.РасчетБазы
	        |	И ВЫБОР
	        |			КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения ССЫЛКА ПланСчетов.Типовой
	        |				ТОГДА ВЫБОР
	        |						КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы))
	        |							ТОГДА ИСТИНА
	        |						ИНАЧЕ ЛОЖЬ
	        |					КОНЕЦ
	        |			ИНАЧЕ ВЫБОР
	        |					КОГДА РасчетРаспределенияКосвенныхРасходов.СчетРаспределения В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
	        |						ТОГДА ИСТИНА
	        |					ИНАЧЕ ЛОЖЬ
	        |				КОНЕЦ
	        |		КОНЕЦ
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	База УБЫВ
	        |ИТОГИ
	        |	СУММА(Сумма),
	        |	СУММА(СуммаБазы),
	        |	СУММА(СуммаБазыНУ),
	        |	СУММА(СуммаБазыПР),
	        |	СУММА(СуммаНУ),
	        |	СУММА(СуммаПР)
	        |ПО
	        |	Период";
	
	Возврат Текст;
	
КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь, НачалоПодписи, ПоказыватьПодписи) Экспорт
	
	НачалоПериода = НачалоДня(ДатаНач);
	КонецПериода  = КонецДня(ДатаКон);
	
	ДокументРезультат.Очистить();
	
	Макет      = ПолучитьМакет("ОбщепроизводственныеРасходы");
	МакетОбщий = ПолучитьОбщийМакет("СправкаРасчет");
	
	ЗаголовокОтчета = МакетОбщий.ПолучитьОбласть("Заголовок");
	
	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон",     КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	
	ОграниченияПоПостроителюОтчета = Отчеты_БК.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		ОграниченияПоПостроителюОтчета = СтрЗаменить(ОграниченияПоПостроителюОтчета, "Субконто1", "ПодразделениеРаспределения");
		ОграниченияПоПостроителюОтчета = СтрЗаменить(ОграниченияПоПостроителюОтчета, "Субконто2", "НоменклатурнаяГруппаРаспределения");
		ОграниченияПоПостроителюОтчета = СтрЗаменить(ОграниченияПоПостроителюОтчета, "ПодразделениеЗатрат", "Подразделение");
		//ОграниченияПоПостроителюОтчета = СтрЗаменить(ОграниченияПоПостроителюОтчета, "Субконто2_1", "СтатьяЗатрат");

		
	КонецЕсли;
	
	Запрос.Текст = СформироватьТекстЗапроса();
	
	Запрос.Текст  = СтрЗаменить(Запрос.Текст, "Активность","Активность " + ОграниченияПоПостроителюОтчета);
	
	ТекстЗаголовка = "общепроизводственных расходов";
	Запрос.Текст = Запрос.Текст + ",База,ПодразделениеЗатрат,СтатьяЗатрат,СчетЗатрат,Подразделение,НоменклатурнаяГруппа";
	Запрос.УстановитьПараметр("ВидОперации",    Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов);
	
	Если ВариантОтчета = 1  Тогда  //БУ
		Запрос.УстановитьПараметр("ВидУчета",  Справочники.ВидыУчетаНУ.ПустаяСсылка());
		
	ИначеЕсли 	ВариантОтчета = 2 Тогда  //НУ
		Запрос.УстановитьПараметр("ВидУчета",   Справочники.ВидыУчетаНУ.НУ);
	Иначе //НУ+ПР +ВР 
		ВидУчета = Новый Массив;
		ВидУчета.Добавить(Справочники.ВидыУчетаНУ.НУ);
		ВидУчета.Добавить(Справочники.ВидыУчетаНУ.ПР);
		ВидУчета.Добавить(Справочники.ВидыУчетаНУ.ВР);		
		Запрос.УстановитьПараметр("ВидУчета",   ВидУчета);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВидУчета = &ВидУчета", "ВидУчета В Иерархии(&ВидУчета)" );
	КонецЕсли;	

	Результат = Запрос.Выполнить();
	
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	СтрОтбор = СтрЗаменить(СтрОтбор, "Субконто1", "ПодразделениеРаспределения");
	СтрОтбор = СтрЗаменить(СтрОтбор, "Субконто2", "НоменклатурныеГруппы");
	СтрОтбор = СтрЗаменить(СтрОтбор, "ПодразделениеЗатрат", "Подразделение");
		
	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = МакетОбщий.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ДокументРезультат.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	ОбластьШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьПодСтрока        = Макет.ПолучитьОбласть("ПодСтрока");
	ОбластьИтого            = Макет.ПолучитьОбласть("Итого");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьОкончаниеТаблицы = Макет.ПолучитьОбласть("ОкончаниеТаблицы");
	
	ОбластьСтрокаРазниц      = Макет.ПолучитьОбласть("СтрокаРазниц");
	ОбластьИтогоРазниц       = Макет.ПолучитьОбласть("ИтогоРазниц");  	
	ОбластьВсегоРазниц       = Макет.ПолучитьОбласть("ВсегоРазниц");  	
	
	ОбластьПодвал             = МакетОбщий.ПолучитьОбласть("Подвал");
	
	ВыборкаПериод = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	Всего = 0;
	ВсегоНУ = 0;
	ВсегоПР = 0;
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ЗаголовокОтчета.Параметры.Период              = "" + ПредставлениеПериода(НачалоМесяца(ВыборкаПериод.Период), КонецМесяца(ВыборкаПериод.Период), "ФП = Истина");
		ЗаголовокОтчета.Параметры.НазваниеОрганизации = "" + Организация.НаименованиеПолное;
		ЗаголовокОтчета.Параметры.ДатаСоставления     = КонецМесяца(ВыборкаПериод.Период);
		ЗаголовокОтчета.Параметры.НазваниеОтчета      = "Распределение " + ТекстЗаголовка + " на расходы производства (бухгалтерский учет)";
		ДокументРезультат.Вывести(ЗаголовокОтчета);
		
		// Параметр для показа заголовка
		ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;
		
		ВыборкаБаза = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаБаза.Следующий() Цикл
			
			Если ВыборкаБаза.База = Перечисления.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка() Тогда
				ДокументРезультат.Вывести(ОбластьОкончаниеТаблицы);
				Продолжить;
			КонецЕсли;
			
			ОбластьШапка.Параметры.База = "Распределение пропорционально " + БазаПадеж(ВыборкаБаза.База, "Дательный");
			ОбластьШапка.Параметры.ТекстБазы = ВыборкаБаза.База;
			ДокументРезультат.Вывести(ОбластьШапка);
			
			ВыборкаПодразделение = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодразделение.Следующий() Цикл
				
				ВыборкаСтатьяЗатрат = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСтатьяЗатрат.Следующий() Цикл
					
					ВсегоБаза  = 0;
					ВсегоСумма = ВыборкаСтатьяЗатрат.Сумма;
					
					//для показа разниц
					ВсегоБазаПР  = 0;
					ВсегоСуммаПР = ВыборкаСтатьяЗатрат.СуммаПР;
					
					Выборка = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
					Пока Выборка.Следующий() Цикл
						ВыборкаНГ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
						Пока ВыборкаНГ.Следующий() Цикл
							ВсегоБаза = ВсегоБаза  + ?(ВыборкаНГ.СуммаБазы = NULL, 0, ВыборкаНГ.СуммаБазы);
							ВсегоБазаПР = ВсегоБазаПР  + ?(ВыборкаНГ.СуммаБазыПР = NULL, 0, ВыборкаНГ.СуммаБазыПР);
						КонецЦикла;	
					КонецЦикла;
					
					ПерваяСтрокаСтатьиЗатрат = Истина;
					
					ВыборкаСчет = ВыборкаСтатьяЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаСчет.Следующий() Цикл
						ВыборкаПодзраделениеЗакрытия = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПодзраделениеЗакрытия.Следующий() Цикл 
							ВыборкаНомГруппа = ВыборкаПодзраделениеЗакрытия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
							Пока ВыборкаНомГруппа.Следующий() Цикл
								Выборка = ВыборкаНомГруппа;
								
								Если ПерваяСтрокаСтатьиЗатрат Тогда
									Область = ОбластьСтрока;
									Область.Параметры.Подразделение    = ВыборкаПодразделение.ПодразделениеЗатрат;
									Область.Параметры.СчетУчета       = ?(ВариантОтчета = 1 , ПланыСчетов.Типовой.НакладныеРасходы.Код,ПланыСчетов.Налоговый.НакладныеРасходы.Код );
									Область.Параметры.СтатьяЗатрат     = Выборка.СтатьяЗатрат;
									Область.Параметры.СуммаЗатрат      = ВыборкаСтатьяЗатрат.Сумма;
								Иначе
									
									Область = ОбластьПодСтрока;
								КонецЕсли;
								
								Область.Параметры.СчетЗатрат       	   = Выборка.СчетЗатрат;
								Область.Параметры.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
								Область.Параметры.СуммаБазы            = Выборка.СуммаБазы;
								Область.Параметры.Коэффициент          = ?(ВсегоБаза = 0, 0, Выборка.СуммаБазы / ВсегоБаза);
								Область.Параметры.Сумма                = Выборка.Сумма;
								
								Область.Параметры.ПодразделениеЗакрытия = Выборка.Подразделение;
								ДокументРезультат.Вывести(Область);
								
								Если ВариантОтчета = 3 Тогда
									Если ПерваяСтрокаСтатьиЗатрат Тогда										
										ОбластьСтрокаРазниц.Параметры.СуммаЗатрат = ПоказатьРазницы("ПР",ВыборкаСтатьяЗатрат.СуммаПР);									
									КонецЕсли;
									ОбластьСтрокаРазниц.Параметры.СуммаБазы            = ПоказатьРазницы("ПР",ВыборкаСтатьяЗатрат.СуммаБазыПР);
									ОбластьСтрокаРазниц.Параметры.Коэффициент          = ПоказатьРазницы("ПР",?(ВсегоБазаПР = 0, 0, Выборка.СуммаБазыПР / ВсегоБазаПР));
									ОбластьСтрокаРазниц.Параметры.Сумма                = ПоказатьРазницы("ПР",Выборка.СуммаПР);									
									
									
									Если Не Выборка.СуммаПР = 0 Или НЕ ВсегоБазаПР = 0 Тогда
										ДокументРезультат.Вывести(ОбластьСтрокаРазниц);
									КонецЕсли;
																		
								КонецЕсли;
								
								
								ПерваяСтрокаСтатьиЗатрат = Ложь;
								
							КонецЦикла;  // НомГруппа 
						КонецЦикла; // ПодразделениеЗакрытия	
					КонецЦикла;  // СчетУчета
					
					ОбластьИтого.Параметры.СуммаБазы   = ВсегоБаза;
					ОбластьИтого.Параметры.Сумма       = ВсегоСумма;
					ДокументРезультат.Вывести(ОбластьИтого);
					
					Если ВариантОтчета = 3 Тогда						
						ОбластьИтогоРазниц.Параметры.СуммаБазы             = ПоказатьРазницы("ПР",ВсегоБазаПР);
						ОбластьИтогоРазниц.Параметры.Сумма                 = ПоказатьРазницы("ПР",ВсегоСуммаПР);									
						                  						
						Если Не ВсегоБазаПР = 0 Или НЕ ВсегоСуммаПР = 0 Тогда
							ДокументРезультат.Вывести(ОбластьИтогоРазниц);
						КонецЕсли;
						
					КонецЕсли;

					
				КонецЦикла;  // СтатьяЗатрат
			КонецЦикла;  // Подразделение
			
			ОбластьВсего.Параметры.Сумма       = ВыборкаБаза.Сумма;
			ДокументРезультат.Вывести(ОбластьВсего);
			
			Если ВариантОтчета = 3 Тогда						
				ОбластьВсегоРазниц.Параметры.Сумма             = ПоказатьРазницы("ПР",ВыборкаБаза.СуммаПР);
				
				Если Не ВыборкаБаза.СуммаПР = 0  Тогда
					ДокументРезультат.Вывести(ОбластьВсегоРазниц);
				КонецЕсли;  				
			КонецЕсли;  			
                       			
			ДокументРезультат.Вывести(ОбластьОкончаниеТаблицы);
		КонецЦикла;  // База
		
		ОбластьПодвал.Параметры.ТекстПримечания = "";
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		ВысотаПодписи = ДокументРезультат.Области.Подвал.Низ - ДокументРезультат.Области.Подвал.Верх;
		
		ДокументРезультат.Области.Подвал.Видимость = ПоказыватьПодписи;
		
	КонецЦикла;    // Период	
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = 8;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "Распределение косвенных расходов";
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета, Строка(глТекущийПользователь));
	
КонецПроцедуры // СформироватьОтчет

	
Функция БазаПадеж(База, Падеж)
		
	Если База = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
		Возврат ?(Падеж = "Родительный", " материальных расходов", " материальным расходам");
	ИначеЕсли База = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
		Возврат ?(Падеж = "Родительный", " расходов по оплате труда", " расходам по оплате труда");
	ИначеЕсли База = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		Возврат " плановой себестоимости";
	ИначеЕсли База = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска Тогда
		Возврат ?(Падеж = "Родительный", " выпуска", " выпуску");
	ИначеЕсли База = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда	
		Возврат ?(Падеж = "Родительный", " расходов, не распределяемых автоматически", " расходам, не распределяемым автоматически");
	КонецЕсли;	 
		
КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт
		
	СтарыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СоотвСубконто = Новый Соответствие;
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт
	        |{ВЫБРАТЬ
	        |	ТиповойОбороты.Субконто1 КАК Субконто1,
	        |	ТиповойОбороты.Субконто2 КАК Субконто2,
	        |	ТиповойОбороты.Субконто1 КАК ПодразделениеЗатрат,
	        |	ТиповойОбороты.Субконто2 КАК СтатьяЗатрат}
	        |ИЗ
	        |	РегистрБухгалтерии.Типовой.Обороты(, , Месяц, Счет В ИЕРАРХИИ (&Счет), , {(Субконто1).*, (Субконто2).*, (Субконто1).* КАК ПодразделениеЗатрат, (Субконто2).* КАК СтатьяЗатрат}, , ) КАК ТиповойОбороты
	        |ИТОГИ
	        |	СУММА(СуммаОборотКт)
	        |ПО
	        |	ОБЩИЕ
	        |{ИТОГИ ПО
	        |	ТиповойОбороты.Субконто1.*,
	        |	ТиповойОбороты.Субконто2.*}";
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
	Массив.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);
	Массив.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
	Массив.Добавить(ПланыСчетов.Типовой.НакладныеРасходы);
	
	ПостроительОтчета.Параметры.Вставить("Счет", Массив);
	ПостроительОтчета.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	ПостроительОтчета.Текст = Текст;
	
	СоотвСубконто = Новый Соответствие;
	СоотвСубконто.Вставить("Субконто1",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	СоотвСубконто.Вставить("Субконто2",    ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы);
	СоотвСубконто.Вставить("ПодразделениеЗатрат",  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	СоотвСубконто.Вставить("СтатьяЗатрат",  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат); 	
	
	Сч = 0;
	Для каждого Элемент Из СоотвСубконто Цикл
		Сч = Сч+1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти(Элемент.Ключ);
		Поле.ТипЗначения = Элемент.Значение.ТипЗначения;
		Если Элемент.Ключ = "ПодразделениеЗатрат" Тогда
			Поле.Представление = "Подразделения затрат";
		ИначеЕсли Элемент.Ключ = "Субконто1" Тогда
			Поле.Представление = "Подразделения распределения";
		ИначеЕсли Элемент.Ключ = "Субконто2" Тогда
			Поле.Представление = "Номенклатурные группы распределения";
		Иначе
			Поле.Представление = Элемент.Значение.Наименование;
		КонецЕсли;             		
		
		ПостроительОтчета.Отбор.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	УправлениеОтчетами.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);

КонецПроцедуры

Функция ПоказатьРазницы(Разницы, СуммаРазниц)
	
	Если СуммаРазниц = 0 Тогда
		Возврат "";
	Иначе
		Возврат Разницы + ": " + Формат(СуммаРазниц, "ЧДЦ=2");
	КонецЕсли;
		
КонецФункции

// Функция преобразует дату в представление периода
//
// Параметры:
//   ПериодОтчета - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаОтчета(ПериодОтчета) Экспорт

	Возврат Формат(ПериодОтчета, "ДФ='MMMM yyyy'");

КонецФункции

// Обрабатывает установку периода в формах отчета
// с шагом в 1 месяц
//
// Параметры
//  Направление  - направление регулирования периода 
//                 (1 - добавить месяц, -1 - убавить месяц)
//
Процедура УстановитьПериодОтчета(Направление) Экспорт

	Если Направление = 1 Тогда
		ДатаНач = КонецМесяца(ДатаНач) + 1;
		ДатаКон = КонецДня(КонецМесяца(ДатаНач));
	ИначеЕсли Направление = -1 Тогда
		ДатаНач = НачалоМесяца(ДатаНач - 1);
		ДатаКон = КонецДня(КонецМесяца(ДатаНач));
	КонецЕсли;
	
	НП.УстановитьПериод(ДатаНач, ДатаКон);

КонецПроцедуры // УстановитьПериодОтчета()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
НП = Новый НастройкаПериода;
	
#КонецЕсли