Перем мСписокИсточниковФинансирования Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;
Перем РежимРасшифровки Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//КомпоновщикНастроек.Восстановить();
	//НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ЗначениеЗаполнено(Период) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(Период));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Дата(3999, 11, 1));
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВыборкаДанных = ПолучитьВыборку();
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ВыборкаДанных);
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Функция ПолучитьВыборку()
	
	запрос = Новый Запрос;
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	ур_ЗерноНаСкладахОстатки.Организация,
	|	ур_ЗерноНаСкладахОстатки.Видзерна,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса.ТипРесурса КАК ТипРесурса,
	|	ур_ЗерноНаСкладахОстатки.Склад,
	|	ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|	ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.СортСеменногоРесурса КАК Сорт,
	|	ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КлассПосевногоСтандарта = ЗНАЧЕНИЕ(Перечисление.ур_КлассыПосевныхСтандартов.ПервыйКласс)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКлассПосевногоСтандартаПервыйКласс,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КлассПосевногоСтандарта = ЗНАЧЕНИЕ(Перечисление.ур_КлассыПосевныхСтандартов.ВторойКласс)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКлассПосевногоСтандартаВторойКласс,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КлассПосевногоСтандарта = ЗНАЧЕНИЕ(Перечисление.ур_КлассыПосевныхСтандартов.ТретийКласс)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКлассПосевногоСтандартаТретийКласс,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.Репродукция = ЗНАЧЕНИЕ(Перечисление.ур_Репродукция.Элита)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокРепродукцияЭлита,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.Репродукция = ЗНАЧЕНИЕ(Перечисление.ур_Репродукция.Первая)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокРепродукцияПервая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.Репродукция = ЗНАЧЕНИЕ(Перечисление.ур_Репродукция.Вторая)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокРепродукцияВторая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.Репродукция = ЗНАЧЕНИЕ(Перечисление.ур_Репродукция.Третья)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокРепродукцияТретья,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.Репродукция = ЗНАЧЕНИЕ(Перечисление.ур_Репродукция.Четвертая)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокРепродукцияЧетвертая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КатегорияСеменногоРесурса = ЗНАЧЕНИЕ(Перечисление.ур_КатегорииСеменныхРесурсов.ПерваяКатегория)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКатегорияСеменногоРесурсаПервая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КатегорияСеменногоРесурса = ЗНАЧЕНИЕ(Перечисление.ур_КатегорииСеменныхРесурсов.ВтораяКатегория)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКатегорияСеменногоРесурсаВторая,
	|	ВЫБОР
	|		КОГДА ур_ЗерноНаСкладахОстатки.ЗерноваяРасписка.КатегорияСеменногоРесурса = ЗНАЧЕНИЕ(Перечисление.ур_КатегорииСеменныхРесурсов.ТретьяКатегория)
	|			ТОГДА ВЫБОР
	|					КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|						ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|					ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОстатокКатегорияСеменногоРесурсаТретья,
	|	ВЫБОР
	|		КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|			ТОГДА ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0) * 1000
	|		ИНАЧЕ ЕСТЬNULL(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток, 0)
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&Период, Видзерна = &ОтборСемена) КАК ур_ЗерноНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("ОтборСемена",Перечисления.ур_ВидыЗерна.Семенные);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",ЕдиницаИзмеренияОтчета);
	
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводЗаголовкаСпециализированногоОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
		
	ЗаголовокОтчета = "Отчет о наличии сортовых семян " + " на " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
		
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	//ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СтруктураНастроек.Вставить("мСписокПодразделений", мСписокПодразделений);
	СтруктураНастроек.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	СтруктураНастроек.Вставить("мДеревоСтруктурныхЕдиниц", мДеревоСтруктурныхЕдиниц);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);

КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокИсточниковФинансирования = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;