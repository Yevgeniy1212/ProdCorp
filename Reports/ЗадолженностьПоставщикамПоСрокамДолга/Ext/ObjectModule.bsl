Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент Тогда

Перем ТабИнтервалы;
Перем Запрос;

Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтервалов() Экспорт
	
	КоличествоПолейПериодов = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Количество() - 4;
	Для Индекс = 1 По КоличествоПолейПериодов Цикл
		СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Удалить(СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("ОстатокПериода" + Индекс));
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	СхемаКомпоновкиДанных.ПоляИтога.Очистить();
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ОстатокДолга";
	ПолеИтога.Выражение   = "Сумма(ОстатокДолга)";
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОстатокДолга");
	ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПапкаСПолями.Заголовок = "В том числе по срокам появления долга";
	Индекс = 1;
	ЗначениеПоследнего = 0;
	Для Каждого Интервал Из СписокИнтервалов Цикл
		ИмяПоля = "ОстатокПериода" + Индекс;
		Поле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти(ИмяПоля);
		Если Поле = Неопределено Тогда
			Поле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		КонецЕсли;
		Поле.Поле        = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок   = Интервал.Представление;
		Поле.ТипЗначения = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0);
		УстановитьПараметрКомп(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
		УстановитьПараметрКомп(Поле.Оформление, "МинимальнаяШирина", 15);
		УстановитьПараметрКомп(Поле.Оформление, "МаксимальнаяШирина", 15);
		//
		//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
		//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
		//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
		//
		ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
		
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
		Индекс = Индекс + 1;
		ЗначениеПоследнего = Интервал.Значение;
	КонецЦикла;
	
	ИмяПоля = "ОстатокПериода" + Индекс;
	Поле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		Поле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;
	Поле.Заголовок   = "Свыше " + ЗначениеПоследнего + " дней";
	Поле.ТипЗначения = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0);
	УстановитьПараметрКомп(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
	УстановитьПараметрКомп(Поле.Оформление, "МинимальнаяШирина", 15);
	УстановитьПараметрКомп(Поле.Оформление, "МаксимальнаяШирина", 15);
	//
	//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
	//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	//ТиповыеОтчеты.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	//
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
КонецПроцедуры

Процедура УстановитьТекстЗапроса()

	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.ОстатокДолга0
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокКт КАК ОстатокДолга0
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(
	|				&ДатаОстатков,
	|				(Не Счет.Забалансовый)
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СчетаПользователя))
	|				И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|				&ВидыСубконтоКД,
	|				Организация В(&СписокОрганизаций)) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос";
	
	Если НЕ ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "Организация В(&СписокОрганизаций)", "");
	КонецЕсли;
	
	ТекстЗапросаПоОборотам =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга1
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала1,
	|			,
	|			НЕ Счет.Забалансовый
	|			И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|				ИЛИ Счет В (&СчетаПользователя))
	|			И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			Организация В(&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОборотам = СтрЗаменить(ТекстЗапросаПоОборотам, "Организация В(&СписокОрганизаций)", "");
	КонецЕсли;
	
	КолИнтервалов = ТабИнтервалы.Количество();
	
	ТекстЗапросаОстатокИОбороты = 
	"ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Контрагент,
	|	Остатки.Договор,
	|	Остатки.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + ",
		|	ЕСТЬNULL(Обороты" + Ном + ".УвеличениеДолга" + Ном + ", 0) КАК УвеличениеДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
	|ИЗ
	|	(" + ТекстЗапросаПоОстаткам + ") КАК Остатки";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотам, "УвеличениеДолга1", "УвеличениеДолга" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&КонецИнтервала1", "&КонецИнтервала" + Ном);
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапросаПоОборотамИнтервала + ") КАК " + ОборотыНом + "
		|	ПО
		|		Остатки.Организация = " + ОборотыНом + ".Организация
		|			И Остатки.Контрагент = " + ОборотыНом + ".Контрагент
		|			И Остатки.Договор = " + ОборотыНом + ".Договор";
	КонецЦикла;
	
	ТекстЗапросаОстаткиПоПериодам =
	"ВЫБРАТЬ
	|	ОстатокИОбороты.Организация,
	|	ОстатокИОбороты.Контрагент,
	|	ОстатокИОбороты.Договор,
	|	ОстатокИОбороты.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстатокИОбороты.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов Цикл
		ВыражениеОстатка = "ОстатокИОбороты.ОстатокДолга0";
		Для й = 1 По Ном Цикл
			ВыражениеОстатка = ВыражениеОстатка + " - ОстатокИОбороты.УвеличениеДолга" + й;
		КонецЦикла;
		ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + ",
		|	ВЫБОР
		|		КОГДА " + ВыражениеОстатка + " > 0
		|			ТОГДА " + ВыражениеОстатка + "
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + "
	|ИЗ
	|	(" + ТекстЗапросаОстатокИОбороты + ") КАК ОстатокИОбороты";
	
	ТекстПоказателей = "
	|	ОстаткиПоПериодам.ОстатокДолга0 КАК ОстатокДолга";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + (Ном - 1) + " - ОстаткиПоПериодам.ОстатокДолга" + Ном + " КАК ОстатокПериода" + Ном;
	КонецЦикла;
	Если КолИнтервалов > 0 Тогда
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + КолИнтервалов + " КАК ОстатокПериода" + (КолИнтервалов + 1);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоПериодам.Организация КАК Организация,
	|	ОстаткиПоПериодам.Контрагент КАК Контрагент,
	|	ОстаткиПоПериодам.Договор КАК Договор,
	|	ОстаткиПоПериодам.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,"
	+ ТекстПоказателей + "
	|ИЗ
	|	(" + ТекстЗапросаОстаткиПоПериодам + ") КАК ОстаткиПоПериодам";
	
	Запрос.Текст = ТекстЗапроса;

КонецПроцедуры

Процедура УстановитьИнтервалыЗапроса()

	Сутки = 60 * 60 * 24;
	
	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("ИмяИнтервала");
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	ДатаКон = ?(Период = '00010101', РабочаяДата, Период);
	СписокИнтервалов.СортироватьПоЗначению();
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из СписокИнтервалов Цикл
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.ИмяИнтервала    = Интервал.Представление;
		НоваяСтрока.НомерИнтервала  = Индекс;
		Если Первый Тогда  
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон);
			ПредыдущееЗначение = Интервал.Значение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон)  - (ПредыдущееЗначение + 1) * Сутки;
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
		
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаКон) + 1);
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		Запрос.УстановитьПараметр("НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		Запрос.УстановитьПараметр("КонецИнтервала"  + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
КонецПроцедуры
	
Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);	
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	ОтчетыДляРуководителя.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Ложь);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	// Данные для компоновщика получаем запросом и передаем в СКД таблицу значений
	Запрос = Новый Запрос;
	
	УстановитьИнтервалыЗапроса();
	
	УстановитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СчетаРасчетов"    , ОтчетыДляРуководителя.ВозвратитьМассивСчетовДтКтЗадолженности(Истина, Истина, Истина));
	Запрос.УстановитьПараметр("ИсключенныеСчета" , ОтчетыДляРуководителя.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));
	Запрос.УстановитьПараметр("СчетаПользователя", ОтчетыДляРуководителя.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(2));	
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	
	ЗадолженностьПоСрокам = Запрос.Выполнить();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ЗадолженностьПоСрокам", ЗадолженностьПоСрокам);

	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Период);
	
	Если ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Организация", мСписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ТиповыеОтчеты.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
		
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();

	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Задолженность поставщикам по срокам долга";
	
	Возврат ТиповыеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);

КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	Если СохраненнаяНастройка = Неопределено Тогда
		СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Настройка.Записать();
		
		СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период",  Период);
	
	Если Не ЗначениеЗаполнено(СписокИнтервалов) Тогда
		СписокИнтервалов.Добавить(7 , "До 7 дней");
		СписокИнтервалов.Добавить(15, "От 8 до 15 дней");
		СписокИнтервалов.Добавить(30, "От 16 до 30 дней");
		СписокИнтервалов.Добавить(60, "От 31 до 60 дней");
		СписокИнтервалов.Добавить(90, "От 61 до 90 дней");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр данных компоновщика настроек
Функция УстановитьПараметрКомп(КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Найти(ИмяПараметра);
	ИначеЕсли ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;