Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент Тогда

Перем Запрос; 

Процедура УстановитьТекстЗапроса(КонДата)
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	Запрос.УстановитьПараметр("СчетаДтЗадолженности", ОтчетыДляРуководителя.ВозвратитьМассивСчетовДтКтЗадолженности(Ложь, Истина, Истина));
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций", мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(КонДата));
	Запрос.УстановитьПараметр("ИсключенныеСчета", ОтчетыДляРуководителя.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	Запрос.УстановитьПараметр("СчетаПользователя", ОтчетыДляРуководителя.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(1));	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Типовой.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		ГДЕ
	|			ТиповойВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты)
	|	И (СчетаКонтрагентов.Ссылка В ИЕРАРХИИ(&СчетаДтЗадолженности) ИЛИ СчетаКонтрагентов.Ссылка В (&СчетаПользователя))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.Организация,
	|	ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|		ИНАЧЕ &СтандартныйСрокОплатыПокупателей
	|	КОНЕЦ КАК СрокОплаты,
	|	ВзаиморасчетыОстатки.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКД.Счет
	|					ИЗ
	|						СчетаКД КАК СчетаКД)
	|				И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
	|ГДЕ
	|	ВзаиморасчетыОстатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	Если НЕ ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаПоОстаткам;
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОстатки = 
	"ВЫБРАТЬ
	|	ОстаткиДолга.Организация,
	|	ОстаткиДолга.Контрагент,
	|	ОстаткиДолга.Договор,
	|	ОстаткиДолга.СрокОплаты,
	|	ОстаткиДолга.ОстатокДолга,
	|	ЕСТЬNULL(Обороты.УвеличениеДолга, 0) КАК УвеличениеДолга
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга";
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКД.Счет
	|				ИЗ
	|					СчетаКД КАК СчетаКД)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация В (&СписокОрганизаций)", "");
	КонецЕсли;
	
	ТекстОборотыПоВсемСрокам = "";
	Для Ном = 1 По МассивСроковОплаты.Количество() Цикл
		
		СрокОплаты = МассивСроковОплаты[Ном - 1];
		Запрос.УстановитьПараметр("НачалоИнтервала" + Ном, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
		Запрос.УстановитьПараметр("СрокОплаты" + Ном, СрокОплаты);
		
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + Ном);
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") 
		+ ТекстОборотыПоСрокуНом;
	
	КонецЦикла;
	
	ТекстОстаткиИОбороты = ТекстОстатки + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
	|	ПО ОстаткиДолга.Организация = Обороты.Организация
	|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
	|		И ОстаткиДолга.Договор = Обороты.Договор";
	
	ТекстПросрочено =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ КАК Просрочено
	|ИЗ
	|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстПросрочено;
	
КонецПроцедуры
	
Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);	
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	ОтчетыДляРуководителя.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Ложь);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	// Данные для компоновщика получаем запросом и передаем в СКД результат запроса
	Запрос = Новый Запрос;
	
	УстановитьТекстЗапроса(Период);
	
	ПросроченнаяЗадолженность1 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(НачалоДня(Дата2) - 1);
	
	ПросроченнаяЗадолженность2 = Запрос.Выполнить();
	
	УстановитьТекстЗапроса(НачалоДня(Дата3) - 1);
	
	ПросроченнаяЗадолженность3 = Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность1", ПросроченнаяЗадолженность1);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность2", ПросроченнаяЗадолженность2);
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность3", ПросроченнаяЗадолженность3);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПросроченнаяЗадолженность1.Организация,
	|	ПросроченнаяЗадолженность1.Контрагент,
	|	ПросроченнаяЗадолженность1.Договор,
	|	ПросроченнаяЗадолженность1.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность1
	|ИЗ
	|	&ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность2.Организация,
	|	ПросроченнаяЗадолженность2.Контрагент,
	|	ПросроченнаяЗадолженность2.Договор,
	|	ПросроченнаяЗадолженность2.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность2
	|ИЗ
	|	&ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность3.Организация,
	|	ПросроченнаяЗадолженность3.Контрагент,
	|	ПросроченнаяЗадолженность3.Договор,
	|	ПросроченнаяЗадолженность3.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность3
	|ИЗ
	|	&ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено) КАК Просрочено,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено2) КАК Просрочено2,
	|	СУММА(ПросроченнаяЗадолженность.Просрочено3) КАК Просрочено3
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПросроченнаяЗадолженность1.Организация КАК Организация,
	|		ПросроченнаяЗадолженность1.Контрагент КАК Контрагент,
	|		ПросроченнаяЗадолженность1.Договор КАК Договор,
	|		ПросроченнаяЗадолженность1.Просрочено КАК Просрочено,
	|		0 КАК Просрочено2,
	|		0 КАК Просрочено3
	|	ИЗ
	|		ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность2.Организация,
	|		ПросроченнаяЗадолженность2.Контрагент,
	|		ПросроченнаяЗадолженность2.Договор,
	|		0,
	|		ПросроченнаяЗадолженность2.Просрочено,
	|		0
	|	ИЗ
	|		ПросроченнаяЗадолженность2 КАК ПросроченнаяЗадолженность2
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПросроченнаяЗадолженность3.Организация,
	|		ПросроченнаяЗадолженность3.Контрагент,
	|		ПросроченнаяЗадолженность3.Договор,
	|		0,
	|		0,
	|		ПросроченнаяЗадолженность3.Просрочено
	|	ИЗ
	|		ПросроченнаяЗадолженность3 КАК ПросроченнаяЗадолженность3) КАК ПросроченнаяЗадолженность
	|
	|СГРУППИРОВАТЬ ПО
	|	ПросроченнаяЗадолженность.Организация,
	|	ПросроченнаяЗадолженность.Контрагент,
	|	ПросроченнаяЗадолженность.Договор";
	
	ПросроченнаяЗадолженность = Запрос.Выполнить();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);

	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Период);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Дата2", Дата2);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Дата3", Дата3);
	
	ТиповыеОтчеты.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
		
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();

	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Просроченная задолженность покупателей";
	
	Возврат ТиповыеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	Если СохраненнаяНастройка = Неопределено Тогда
		СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Настройка.Записать();
		
		СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;