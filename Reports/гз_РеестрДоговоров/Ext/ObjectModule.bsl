#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;  // экспортная переменная

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;  // экспортная переменная

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;  // экспортная переменная

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;  // экспортная переменная

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;  // экспортная переменная
//хранит дату конца периода отчета
Перем мДатаКонцаПериодаОтчета  Экспорт;  // экспортная переменная

//хранит версию формы
Перем мВерсияФормы Экспорт;  // экспортная переменная

//хранит полное имя файла внешней обработки
Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // (переменная отчета)

//хранит флаг разрешения записи
Перем мЗаписьЗапрещена Экспорт; // (переменная отчета)

//хранит интервал автосохранения
Перем мИнтервалАвтосохранения Экспорт; // (переменная отчета)

//хранит таблицу страниц к печати
Перем мТаблицаСтраницНаПечать Экспорт; // (переменная отчета)

//хранит общее количество страниц
Перем ВсегоСтраниц Экспорт; // (переменная отчета)

// Хранит ФИО исполнителя 
Перем мИсполнитель Экспорт; // (переменная отчета)

//список
Перем мСписокСтруктурныхЕдиниц Экспорт; // список

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОбОрганизации()Экспорт
	
	Если (Организация  = Неопределено) ИЛИ (Организация = гз_ОбщегоНазначения.мПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
			
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации
			
	Сведения.Добавить("", "КодПоОКПО"); // ОКПО
			
	Сведения.Добавить("", "АдрЮР"); // Юридический адрес
	
	Сведения.Добавить("", "ТелОрганизации"); // Телефон организации
	
	Сведения.Добавить("", "ФИОБухКраткое"); // ФИО гл. бухгалтера
	
	Сведения.Добавить("", "ФИОРукКраткое"); // ФИО руководителя
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = гз_ОбщегоНазначения.мПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), Сведения);
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

// Функция формирует запрос
// 
Функция СформироватьЗапрос(мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета)Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.Организация, гз_НоменклатураПоДоговорамГосударственныхЗакупок.Регистратор.Организация) КАК Организация,
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.Регистратор КАК Регистратор,
	|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.СпособЗакупки КАК СпособЗакупки,
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.Номенклатура КАК Номенклатура,
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.Сумма КАК Сумма,
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.Количество КАК Количество,
	|	гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.СуммаОборот КАК СуммаОплаты
	|ИЗ
	|	РегистрСведений.гз_НоменклатураПоДоговорамГосударственныхЗакупок.СрезПоследних КАК гз_НоменклатураПоДоговорамГосударственныхЗакупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам КАК гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
	|		ПО гз_НоменклатураПоДоговорамГосударственныхЗакупок.ДоговорКонтрагента = гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупок.Обороты(&ДатаНачала, &ДатаОкончания, , Организация В (&Организация)) КАК гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты
	|		ПО гз_НоменклатураПоДоговорамГосударственныхЗакупок.ДоговорКонтрагента = гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.ДоговорКонтрагента
	|ГДЕ
	|	гз_НоменклатураПоДоговорамГосударственныхЗакупок.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И гз_НоменклатураПоДоговорамГосударственныхЗакупок.ДоговорКонтрагента.Организация В (&Организация)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(Количество),
	|	МАКСИМУМ(СуммаОплаты)
	|ПО
	|	Организация,
	|	Регистратор,
	|	СпособЗакупки,
	|	ДоговорКонтрагента
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Организация", мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(мДатаКонцаПериодаОтчета));
	Возврат Запрос.Выполнить();
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

ОписаниеТиповСтрока15  = гз_ОбщегоНазначения.мПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока50  = гз_ОбщегоНазначения.мПолучитьОписаниеТиповСтроки(50);


мСтруктураВариантыЗаполнения = Новый Структура;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");

// определим ФИО исполнителя
Если НЕ гз_ОбщегоНазначения.АвтономныйРежимРаботы() Тогда
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ФИОФИзЛиц.Фамилия,
	|	ФИОФИзЛиц.Имя,
	|	ФИОФИзЛиц.Отчество
	|Из
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Лев(Выборка.Имя, 1) + ".", "") + ?(Выборка.Отчество <> "", " " + Лев(Выборка.Отчество, 1) + ".", "");
	Иначе
		Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
			мИсполнитель = глТекущийПользователь.Наименование;
		Иначе
			мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
#КонецЕсли
