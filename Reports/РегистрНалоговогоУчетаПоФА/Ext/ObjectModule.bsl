Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;


#Если Клиент Тогда

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВидОтчета) Экспорт
	
	// Проверим заполнение обязательных реквизитов
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных, ВидОтчета);
	
	Организация 			   = Налогоплательщик;
	СведенияОНалогоплательщике = ОбщегоНазначения.СведенияОЮрФизЛице(Организация, КонецПериода);
	
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок_388");
	
	ОбластьЗаголовок.Параметры.НомерПриложения  = "2";
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета  = "Налоговый регистр" + Символы.ПС + "по определению стоимостных балансов групп (подгрупп)"
	                                            + Символы.ПС + "фиксированных активов и последующим расходам по"
	                                            + Символы.ПС + "фиксированным активам";
	ОбластьЗаголовок.Параметры.ЗаголовокТаблицы = ПолучитьТекстЗаголовка(Ложь, Ложь);

	Если СведенияОНалогоплательщике <> Неопределено Тогда 
		ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
		ОбластьЗаголовок.Параметры.НалоговыйПериод = ОбщегоНазначения.ПолучитьПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода));
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ДопПоле  = "(тенге)";
	
	Результат.Вывести(ОбластьЗаголовок);
       
	ТиповыеОтчеты.ВывестиТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);

	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал_388");
	
	Если Организация <> Неопределено Тогда 
		ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, КонецПериода, глЗначениеПеременной("глТекущийПользователь").Физлицо);
		ОбластьПодвал.Параметры.ФИОРуководителя = ОтветЛица.Руководитель;
		ОбластьПодвал.Параметры.ФИОглБухгалтера = ОтветЛица.ГлавныйБухгалтер;
		ОбластьПодвал.Параметры.ФИОИсполнителя 	= ОтветЛица.ОтветственныйЗаРегистры;
		ОбластьПодвал.Параметры.ДатаСоставления = Формат(ОбщегоНазначения.ПолучитьРабочуюДату(), "ДФ=""дд ММММ гггг 'г.'""");
	КонецЕсли;
	
	Результат.Вывести(ОбластьПодвал);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Примечание_388ГК");
	Результат.Вывести(ОбластьПодвал);
  	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных, ВидОтчета) Экспорт
	
	Если ВидОтчета = "АмортизацияФАиДр" Тогда 
		
		Если ОтрицательноеКрасным Тогда
			УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#";
		
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("ГруппаПрочее");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("Группа1");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("Итог");
		
			ЗначениеПараметра = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = ОтрицательноеКрасным;
		КонецЕсли;
        		
		СостоянияФА = Новый СписокЗначений();	
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
		МассивСубконтоЗатратНаРемонт = Новый СписокЗначений();
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЛьготыФА", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаНачала", 					НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания", 				КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокОрганизаций", 			СписокСтруктурныхЕдиниц);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СостоянияФА", 				СостоянияФА);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетУчетаВА",					ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс);		//Счет Н311
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетРемонтаВА",				ПланыСчетов.Налоговый.РасходыНаРемонтВА);	    //Счет Н860
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидРемонтаВА_Капитальный",	Перечисления.ВидыРемонтаВА.Капитальный);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидРемонтаВА_Текущий",		Перечисления.ВидыРемонтаВА.Текущий);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеПоступления", 						Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеВыбытия", 							Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеАмортизации", 						Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаМенееМинимума", 		Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаВыбывших", 			Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеУвеличениеСтоимостиЗаСчетРемонта", 	Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	
	
	ИначеЕсли ВидОтчета = "РасшифровкаАмортизационныхОтчислений" Тогда 
		
		Если ОтрицательноеКрасным Тогда
			УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#";
		
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("НачальныйОстаток");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("Поступление");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("Выбытие");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("РасходыНаТекущийРемонт");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("УвеличениеСтоимостиЗаСчетРемонта");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("СтоимостнойБалансНаКонец");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("АмортизацияНачисленная");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("СписаниеБалансаВыбывших");
		    Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("СписаниеБалансаМененееМинимума");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("СтоимостнойБалансНаКонецСУчетомКорректировок");
			
			ЗначениеПараметра = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = ОтрицательноеКрасным;
		КонецЕсли;

		СостоянияФА = Новый СписокЗначений();	
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
		МассивСубконтоЗатратНаРемонт = Новый СписокЗначений();
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЛьготыФА", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаНачала", 					НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания", 				КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокОрганизаций", 			СписокСтруктурныхЕдиниц);//СписокСтруктурныхЕдиниц);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СостоянияФА", 				СостоянияФА);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетУчетаВА",					ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс);		//Счет Н311
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетРемонтаВА",				ПланыСчетов.Налоговый.РасходыНаРемонтВА);	    //Счет Н860
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидРемонтаВА_Капитальный",	Перечисления.ВидыРемонтаВА.Капитальный);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидРемонтаВА_Текущий",		Перечисления.ВидыРемонтаВА.Текущий);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеПоступления", 						Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеВыбытия", 							Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеАмортизации", 						Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаМенееМинимума", 		Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаВыбывших", 			Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеУвеличениеСтоимостиЗаСчетРемонта", 	Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);

	ИначеЕсли ВидОтчета = "ДвойнаяНормаАмортизацииФА" Тогда 
		
		Если ОтрицательноеКрасным Тогда
			УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			УсловноеОформление.Представление = "#ПараметрыВывода.ВыделятьОтрицательные#";
		
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("Поступление");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("АмортизацияНачисленная");
			Поле = УсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных("КонечныйОстаток");
		    
			ЗначениеПараметра = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = ОтрицательноеКрасным;
		КонецЕсли;
        		
		СостоянияФА = Новый СписокЗначений();	
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"Период", 					    КонецДня(КонецПериода));
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаНачала", 					НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания", 				КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания1ГодНазад", 		ДобавитьМесяц(КонецДня(КонецПериода),-12));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания2ГодаНазад", 	ДобавитьМесяц(КонецДня(КонецПериода),-24));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокОрганизаций", 			СписокСтруктурныхЕдиниц);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СостоянияФА", 				СостоянияФА);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетУчетаВА",					ПланыСчетов.Налоговый.ВнеоборотныеАктивы);		//Счет Н300
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВключенВСоставГруппы",		Перечисления.СобытияФАУчитываемыхОтдельно.ВключениеВСоставГруппы);	    
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"Выбыл",						Перечисления.ВидыСостоянийФА.Выбыл);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПринятКУчету",				Перечисления.ВидыСостоянийФА.ПринятКУчету);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеПоступления", 		Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеВыбытия", 			Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеАмортизации", 		Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
	
	КонецЕсли;
						
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();
	
	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина, СтандартныйЗаголовокОтчета = Истина) Экспорт 
	
	Если ВидРегистраОтчета = "АмортизацияФАиДр" Тогда 
		ЗаголовокОтчета = "Амортизационные отчисления и другие вычеты по фиксированным активам";
	ИначеЕсли ВидРегистраОтчета = "РасшифровкаАмортизационныхОтчислений" Тогда 
		ЗаголовокОтчета = "Расшифровка амортизационных отчислении  и других вычетов по фиксированным активам";
	ИначеЕсли ВидРегистраОтчета = "ДвойнаяНормаАмортизацииФА" Тогда 
		ЗаголовокОтчета = "Амортизационные отчисления по фиксированным активам, впервые введенным в эксплуатацию на территории Республики Казахстан";
	КонецЕсли;
	
	Если НЕ СтандартныйЗаголовокОтчета Тогда
		Возврат ЗаголовокОтчета;
	КонецЕсли;
	
	Возврат ТиповыеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		Сообщить("Не указан период формирования отчета", СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли НачалоПериода > КонецПериода Тогда
		Сообщить("Дата начала периода не может быть больше даты конца периода", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
			
	Возврат Отказ;
	
КонецФункции
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	//
	//Если СохраненнаяНастройка = Неопределено Тогда
	//	СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	//	Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
	//	Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
	//	Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
	//	Настройка.Владелец = глЗначениеПеременной("глТекущийПользователь");
	//	Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
	//	Настройка.ИспользоватьПриОткрытии = Истина;
	//	НовыйПользователь = Настройка.Пользователи.Добавить();
	//	НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	//	Настройка.Записать();
	//	
	//	СохраненнаяНастройка = Настройка.Ссылка;
	//КонецЕсли;
	//
	//СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	//
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода",  КонецПериода);
	
		
		СостоянияФА = Новый СписокЗначений();	
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
		СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
		МассивСубконтоЗатратНаРемонт = Новый Массив;
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыРемонтаВА);
		МассивСубконтоЗатратНаРемонт.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидЛьготыФА", Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
	
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаНачала", 					НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДатаОкончания", 				КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяГруппаНУ",				Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ПустаяОрганизация",			Справочники.Организации.ПустаяСсылка());	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокОрганизаций", 			СписокСтруктурныхЕдиниц);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчетПоОбъектам",				Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СостоянияФА", 				СостоянияФА);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетУчетаВА",					ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс);		//Счет Н311
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СчетРемонтаВА",				ПланыСчетов.Налоговый.РасходыНаРемонтВА);	    //Счет Н860
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидУчетаНУ",					Справочники.ВидыУчетаНУ.НУ);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ВидРемонтаВА_Капитальный",	Перечисления.ВидыРемонтаВА.Капитальный);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"СписокСубконтоСчетаРемонта",	МассивСубконтоЗатратНаРемонт);
	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"УчитываетсяОтдельноОтСтоимостногоБаланса",	Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);	
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеПоступления", 						Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеВыбытия", 							Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеАмортизации", 						Перечисления.ВидыДвиженияСтоимостиФА.Амортизация);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаМенееМинимума", 		Перечисления.ВидыДвиженияСтоимостиФА.СписаниеСтоимостногоБалансаГруппыМенееМинимума);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеСписаниеБалансаВыбывших", 			Перечисления.ВидыДвиженияСтоимостиФА.СписаниеПриВыбытииВсехАктивовГруппы);
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек,"ДвижениеУвеличениеСтоимостиЗаСчетРемонта", 	Перечисления.ВидыДвиженияСтоимостиФА.УвеличениеСтоимостиЗаСчетРемонта);
	
	

КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

ОтрицательноеКрасным = Истина;
