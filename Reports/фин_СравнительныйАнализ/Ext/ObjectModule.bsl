Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;
Перем ТаблицаИтоговСтатей Экспорт;
Перем ВыводитьОтклонения Экспорт;
Перем СценарийДляОтклонений Экспорт;


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ДАННЫХ ОТЧЕТА


Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировок(ЭтотОбъект);	
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров(Отбор)
	Ошибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Бюджет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан бюджет!");
		Ошибки = Истина;
	КонецЕсли;
	Если ДанныеДляАнализа.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны данные для анализа!");
		Ошибки = Истина;
	КонецЕсли;
	Если Показатели.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны показатели отчета!");
		Ошибки = Истина;
	КонецЕсли;
	Если ВидыАналитическихДанных.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны виды аналитических данных!");
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Показатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен показатель в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка показателей!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Показатель=Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма И НЕ (ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта ИЛИ Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта)).Количество()<>0) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя отражать валютную сумму в отчете без использования группировки по валюте!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из ВидыАналитическихДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидДанных) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид данных в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка видов аналитических данных!");
			Ошибки = Истина;
		ИначеЕсли СтрокаПоказатель.ВидДанных = Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения И НЕ Отчеты.фин_СравнительныйАнализ.ДоступенАнализОтклонений(ЭтотОбъект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вид данных, выбранный в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка видов аналитических данных, не доступен при текущих настройках отчета!
			|	Для его использования необходимо сравнивать плановые и фактические данные за идентичный интервал времени");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из ДанныеДляАнализа Цикл
		Если СтрокаПоказатель.НачалоПериода='00010101' Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено начало периода в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка анализируемых данных!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.ОкончаниеПериода='00010101' Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен конец периода в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка анализируемых данных!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Группировки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена группировка в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидГруппировки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид группировки в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать группировку по валюте без отражения валютной суммы в отчете!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать разделение данных по валюте без отражения валютной суммы в отчете!");
		Ошибки = Истина;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьОграниченияПоБюджетам")=Истина Тогда
		Если НЕ фин_ПривилегированныеПроцедуры.РазрешеноПолучениеОтчета(Бюджет,ДанныеДляАнализа.ВыгрузитьКолонку("ДанныеДляСравнения"),Отбор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя недостаточно прав!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ВыводитьСреднююЦену Тогда
		Если (НЕ Бюджет.УчетПоКоличеству) ИЛИ (НЕ Бюджет.УчетПоСумме) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода средней цены бюджет должен содержать как количественные, так и суммовые показатели!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода средней цены в отчете необходимо вывести показатель ""Количество""!");
			Ошибки = Истина;
		КонецЕсли;
		Если Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вывода средней цены в отчете необходимо вывести показатель ""Сумма (упр.)""!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	фин_УправлениеОтчетамиБюджетирование.ПроверитьКорректностьЦеновыхПоказателей(Показатели,Бюджет,Ошибки);
	Возврат НЕ Ошибки;	
КонецФункции

Функция МинимальныйПериод()
	Дата = ДанныеДляАнализа[0].НачалоПериода;
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Дата = Мин(Дата,СтрокаДанных.НачалоПериода);
	КонецЦикла;
	Возврат Дата;
КонецФункции

Функция МаксимальныйПериод()
	Дата = ДанныеДляАнализа[0].ОкончаниеПериода;
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Дата = Макс(Дата,СтрокаДанных.ОкончаниеПериода);
	КонецЦикла;
	Возврат Дата;
КонецФункции

Функция ПолучитьТаблицуДанных(Отбор,мГруппировки)
	ТекстРазрядность = "";
	ТекстРазрядностьКоличество = "";
	РазрядностьПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрядностьПланированияБюджетов");
	Если РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
		ТекстРазрядность="/1000000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
		ТекстРазрядность="/100000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
		ТекстРазрядность="/10000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
		ТекстРазрядность="/1000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
		ТекстРазрядность="/100";
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПрименятьРазрядностьДляКоличества") Тогда
		ТекстРазрядностьКоличество = ТекстРазрядность;
	КонецЕсли;
	
	ВРазрезеВалют = Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()<>0 И (ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта ИЛИ Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта)).Количество()<>0);
	
	ТекстФильтраОбороты = "";
	ТекстОтбораОбороты = "";
	ТекстОтбораИтоговыеОбороты = "";
	ТекстОтбораСтатьи = "";
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораИтоговыеОбороты,,"",,Новый Структура("СтатьяБюджета"));
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораСтатьи,,,,,Истина);
	
	СписокИсключаемыхТиповВнутригрупповыхОборотов = Новый Массив;
	СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОбороты);
	Если мГруппировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)).Количество()>0 ИЛИ ОсновнаяГруппировка=Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеПодразделения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеОрганизации);
	КонецЕсли;
	ВерсииБюджета = фин_ПроцедурыМеханизмовБюджетирования.ВерсииБюджетаЗаПериод(Бюджет,МинимальныйПериод(),МаксимальныйПериод());
	
	ТекстОтборПоОрганизации = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") И ЗначениеЗаполнено(Организация),"Организация = &Организация","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсииБюджета",				ВерсииБюджета);
	Запрос.УстановитьПараметр("СписокВГО",					СписокИсключаемыхТиповВнутригрупповыхОборотов);
	Запрос.УстановитьПараметр("ГраницаАктуальности",		?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)));
	Запрос.УстановитьПараметр("ГраницаФактическихИПрогнозныхДанных",		?(ГраницаФактическихИПрогнозныхДанных='00010101',КонецДня(ТекущаяДата()),КонецДня(ГраницаФактическихИПрогнозныхДанных)));
	Запрос.УстановитьПараметр("Бюджет",						Бюджет);
	Запрос.УстановитьПараметр("Организация",				Организация);
	
	СценарийДляОтклонений = Неопределено;
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
			 СценарийДляОтклонений = СтрокаДанных.ДанныеДляСравнения;
		КонецЕсли;
	КонецЦикла;
	ВыводитьОтклонения = ПолучитьФункциональнуюОпцию("фин_ИспользоватьАнализОтклоненийФактическихДанных") И Отчеты.фин_СравнительныйАнализ.ДоступенАнализОтклонений(ЭтотОбъект) И ВидыАналитическихДанных.НайтиСтроки(Новый Структура("ВидДанных",Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения)).Количество()>0;
	
	ТаблицаОтбора.Очистить();
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.Версия";
	НС.Значение = ВерсииБюджета;
	НС.ВидСравнения = "ВСписке";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПометкаУдаления";
	НС.Значение = Ложь;
	НС.ВидСравнения = "Равно";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПризнакВнутригрупповогоОборота";
	НС.Значение = СписокИсключаемыхТиповВнутригрупповыхОборотов;
	НС.ВидСравнения = "ВСписке";
	Если ГраницаАктуальности<>'00010101' Тогда
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = "Период";
		НС.Значение = ГраницаАктуальности;
		НС.ВидСравнения = "МеньшеИЛИРавно";
	КонецЕсли;
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "Бюджет";
	НС.Значение = Бюджет;
	НС.ВидСравнения = "Равно";
	
	
	// получим список показателей бюджета
	СписокФинансовыхПоказателей = Новый СписокЗначений;
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|	И СтатьиБюджета.Версия В (&Версии)
		|	И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&ВГО)";

	ЗапросПоказатели.УстановитьПараметр("Версии", ВерсииБюджета);
	ЗапросПоказатели.УстановитьПараметр("Владелец", Бюджет);
	ЗапросПоказатели.УстановитьПараметр("ВГО", СписокИсключаемыхТиповВнутригрупповыхОборотов);

	Результат = ЗапросПоказатели.Выполнить();
	СписокФинансовыхПоказателей.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Финансовыйпоказатель"));
	Запрос.УстановитьПараметр("Показатели",				СписокФинансовыхПоказателей);
	// параметры отбора
	ОтборыПоДополнительнымРазрезам = Новый Массив;
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(СтрокаОтбор.Путь,"Разрез")<>0 Тогда
			ОтборыПоДополнительнымРазрезам.Добавить(СтрокаОтбор.Путь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// расчет по формулам
	ПересчетВНоменклатурныеГруппы = Ложь;
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Если ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения) И СтрокаДанных.ДанныеДляСравнения.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
			ПересчетВНоменклатурныеГруппы = Истина;
		КонецЕсли;
		МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
		Если (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)) Тогда
			СтруктураПараметровОтбора = Новый Структура;
			Для Каждого Параметр Из Запрос.Параметры Цикл
				Если Найти(Параметр.Ключ,"ПараметрОтбора")<>0 Тогда
					СтруктураПараметровОтбора.Вставить(Параметр.Ключ,Параметр.Значение);
				КонецЕсли;
			КонецЦикла;
			ТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,"Оборот");

			ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуламБюджета(Бюджет,ВерсииБюджета,Организация,СписокИсключаемыхТиповВнутригрупповыхОборотов,СтрокаДанных.НачалоПериода,СтрокаДанных.ОкончаниеПериода,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),?((НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),Периодичность(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения)),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,ВРазрезеВалют,СтрокаДанных.ДанныеДляСравнения,ГраницаФактическихИПрогнозныхДанных);
			МассивСуществующихКолонок = Новый Массив;
			Если ОтборыПоДополнительнымРазрезам.Количество()>0 Тогда
				Для Каждого ПутьОтбора Из ОтборыПоДополнительнымРазрезам Цикл
					Если ТаблицаРасчетыПоФормулам.Колонки.Найти(ПутьОтбора)<>Неопределено Тогда
						МассивСуществующихКолонок.Добавить(ПутьОтбора);
					Иначе
						ТаблицаРасчетыПоФормулам.Колонки.Добавить(ПутьОтбора,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[ПутьОтбора]).ТипЗначения);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаТаблицы Из ТаблицаРасчетыПоФормулам Цикл
					Для Каждого ПутьОтбора Из ОтборыПоДополнительнымРазрезам Цикл
						Если МассивСуществующихКолонок.Найти(ПутьОтбора)<>Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТаблицы[ПутьОтбора] = СтрокаТаблицы.ДополнительныеРазрезы[ПутьОтбора];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			Запрос.УстановитьПараметр("ВТ_Формулы"+МеткаУровня,ТаблицаРасчетыПоФормулам);
			ТекстФормированияВременныхТаблиц ="	
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель,
			|	Обороты.ДополнительныеРазрезы КАК ДополнительныеРазрезы"+фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения)),Строка(Периодичность())),,,Истина)+ТекстПоказателиСПсевдонимом+"
			|ПОМЕСТИТЬ ВТ_ФормулыПредрасчет"+МеткаУровня+"
			|ИЗ &ВТ_Формулы"+МеткаУровня+" КАК Обороты
			//|"+?(ТекстОтбораОбороты="" И ТекстФильтраОбороты="",""," ГДЕ ")+СтрЗаменить(ТекстОтбораОбороты,"ДополнительныеРазрезы.","")+?(ТекстОтбораОбороты="",""," И ")+СтрЗаменить(ТекстФильтраОбороты,"ДополнительныеРазрезы.","");
			|";
			Запрос.Текст = ТекстФормированияВременныхТаблиц;
			Запрос.Выполнить();
		КонецЕсли;
	КонецЦикла;
	ТекстФормированияВременныхТаблиц = "";
	ТекстВсеПоказателиСПсевдонимом = "";
	ТекстВсеПоказатели = "";
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		ПериодичностьДляЗапроса = ?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения)),Строка(Периодичность()));
		ТекстИзмерения 						= фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,ПериодичностьДляЗапроса,ПересчетВНоменклатурныеГруппы);
		ТекстИзмеренияФинал 				= фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,ПериодичностьДляЗапроса,ПересчетВНоменклатурныеГруппы,,,Истина);
		ТекстИзмеренияФиналБезИсточников 	= фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,ПериодичностьДляЗапроса,ПересчетВНоменклатурныеГруппы,,,Истина,Истина);
		ТекстИзмеренияСтатей 				= фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,ПериодичностьДляЗапроса,ПересчетВНоменклатурныеГруппы,,,Истина,,Истина);
	

		МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
		ТекстПоказатели = "";
		ТекстПоказателиСПсевдонимом = "";
		ТекстПоказателиСМинусом = "";
		Если НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения) Тогда
			мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,МеткаУровня);
			мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,"Оборот"+МеткаУровня);
			мТекстПоказателиСМинусом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность+"*(-1)",ТекстРазрядностьКоличество+"*(-1)","Оборот"+МеткаУровня);
		Иначе
			мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,МеткаУровня);
			мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,"Оборот"+МеткаУровня);
			мТекстПоказателиСМинусом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,"*(-1)","*(-1)","Оборот"+МеткаУровня);
		КонецЕсли;
		ТекстВсеПоказателиСПсевдонимом = ТекстВсеПоказателиСПсевдонимом + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,"Оборот"+МеткаУровня);
		ТекстВсеПоказатели = ТекстВсеПоказатели + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,МеткаУровня);
		Для Каждого СтрокаДанныхОбход Из ДанныеДляАнализа Цикл
			Если СтрокаДанных.НомерСтроки = СтрокаДанныхОбход.НомерСтроки Тогда
				ТекстПоказатели = ТекстПоказатели + мТекстПоказатели;
				ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом + мТекстПоказателиСПсевдонимом;
				ТекстПоказателиСМинусом = ТекстПоказателиСМинусом + мТекстПоказателиСМинусом;
			Иначе
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
						Продолжить;
					КонецЕсли;
					СтрокиПоказателя = Показатели.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказатель.Показатель));
					Если СтрокиПоказателя.Количество()>1 И СтрокиПоказателя[0]<>СтрокаПоказатель Тогда
						Продолжить;
					КонецЕсли;
					Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
					ТекстПоказатели = ТекстПоказатели+",
					|	0 КАК "+Имя+Строка(СтрокаДанныхОбход.НомерСтроки);
					ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом+",
					|	0 КАК "+Имя+"Оборот"+Строка(СтрокаДанныхОбход.НомерСтроки);
					ТекстПоказателиСМинусом = ТекстПоказателиСМинусом+",
					|	0 КАК "+Имя+"Оборот"+Строка(СтрокаДанныхОбход.НомерСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ВыводитьОтклонения Тогда
			Для Каждого СтрокаПоказатель Из Показатели Цикл
				Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
					Продолжить;
				КонецЕсли;
				СтрокиПоказателя = Показатели.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказатель.Показатель));
				Если СтрокиПоказателя.Количество()>1 И СтрокиПоказателя[0]<>СтрокаПоказатель Тогда
					Продолжить;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
				ТекстПоказатели = ТекстПоказатели+",
				|	0 КАК "+Имя+Строка(ДанныеДляАнализа.Количество()+1);
				ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом+",
				|	0 КАК "+Имя+"Оборот"+Строка(ДанныеДляАнализа.Количество()+1);
				ТекстПоказателиСМинусом = ТекстПоказателиСМинусом+",
				|	0 КАК "+Имя+"Оборот"+Строка(ДанныеДляАнализа.Количество()+1);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Сценарий"+МеткаУровня,					?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),СтрокаДанных.ДанныеДляСравнения,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()));
		Запрос.УстановитьПараметр("НачалоПланирования"+МеткаУровня,			СтрокаДанных.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПланирования"+МеткаУровня,		СтрокаДанных.ОкончаниеПериода);
		
		ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц + ?(ТекстФормированияВременныхТаблиц="","","	
	    |ОБЪЕДИНИТЬ ВСЕ");
		Если (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)) Тогда
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмерения,"Обороты.ДополнительныеРазрезы","Набор")+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1,"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ ВТ_ФормулыПредрасчет"+МеткаУровня+" КАК Обороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Набор
			|		ПО Обороты.ДополнительныеРазрезы = Набор.Ссылка
			|"+?(ТекстОтбораОбороты="" И ТекстФильтраОбороты="",""," ГДЕ ")+СтрЗаменить(ТекстОтбораОбороты,"Обороты.ДополнительныеРазрезы","Набор")+?(ТекстОтбораОбороты="",""," И ")+СтрЗаменить(ТекстФильтраОбороты,"Обороты.ДополнительныеРазрезы","Набор")+"
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		Если СтрокаДанных.ДанныеДляСравнения = Перечисления.фин_ВидыДанныхОтчета.Прогнозные Тогда
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1 ИЛИ (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
			|																							ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
			|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
			|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
		ИначеЕсли СтрокаДанных.ДанныеДляСравнения = Перечисления.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных Тогда
			//ГраницаФактическихДанных = ?(ГраницаФактическихИПрогнозныхДанных='00010101',"&ГраницаАктуальности","&ГраницаФактическихИПрогнозныхДанных");
			ГраницаФактическихДанных = "&ГраницаФактическихИПрогнозныхДанных";
			Для Каждого ИмяРегистра Из МассивРегистров Цикл
				ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
				|ВЫБРАТЬ
				|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1 ИЛИ (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),"","
				|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
				|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
				|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
				|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
				|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты+"
				|ОБЪЕДИНИТЬ ВСЕ";
			КонецЦикла;
			ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1 ИЛИ (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),"","
			|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
			|ИЗ РегистрНакопления.фин_ПрогнозИсполненияБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
			|																							ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+" И ПериодПланирования >=&ГраницаФактическихИПрогнозныхДанных
			|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
			|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
		Иначе
			Если ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения) Тогда
				ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
				|ВЫБРАТЬ
				|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1 ИЛИ (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),"","
				|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
				|ИЗ РегистрНакопления.фин_ОборотыБюджетов.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
				|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
				|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
				|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
			Иначе
				Для Каждого ИмяРегистра Из МассивРегистров Цикл
					ТекстФормированияВременныхТаблиц = ТекстФормированияВременныхТаблиц+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|") +"
					|ВЫБРАТЬ
					|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1 ИЛИ (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)),"","
					|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
					|ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
					|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
					|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
					|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ВыводитьОтклонения Тогда
		ТекстИзмерения = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СценарийДляОтклонений),ПересчетВНоменклатурныеГруппы);

		МеткаУровня = Строка(ДанныеДляАнализа.Количество()+1);
		ТекстПоказатели = "";
		ТекстПоказателиСПсевдонимом = "";
		ТекстПоказателиСМинусом = "";
		//Если НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения) Тогда
		//	мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,МеткаУровня);
		//	мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,"Оборот"+МеткаУровня);
		//	мТекстПоказателиСМинусом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность+"*(-1)",ТекстРазрядностьКоличество+"*(-1)","Оборот"+МеткаУровня);
		//Иначе
			мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,МеткаУровня);
			мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,"Оборот"+МеткаУровня);
			мТекстПоказателиСМинусом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,"*(-1)","*(-1)","Оборот"+МеткаУровня);
		//КонецЕсли;
		ТекстВсеПоказателиСПсевдонимом = ТекстВсеПоказателиСПсевдонимом + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,"Оборот"+МеткаУровня);
		ТекстВсеПоказатели = ТекстВсеПоказатели + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,МеткаУровня);
		Для Каждого СтрокаДанныхОбход Из ДанныеДляАнализа Цикл
			Для Каждого СтрокаПоказатель Из Показатели Цикл
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
				ТекстПоказатели = ТекстПоказатели+",
				|	0 КАК "+Имя+Строка(СтрокаДанныхОбход.НомерСтроки);
				ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом+",
				|	0 КАК "+Имя+"Оборот"+Строка(СтрокаДанныхОбход.НомерСтроки);
				ТекстПоказателиСМинусом = ТекстПоказателиСМинусом+",
				|	0 КАК "+Имя+"Оборот"+Строка(СтрокаДанныхОбход.НомерСтроки);
			КонецЦикла;
		КонецЦикла;
		ТекстПоказатели = ТекстПоказатели + мТекстПоказатели;
		ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом + мТекстПоказателиСПсевдонимом;
		ТекстПоказателиСМинусом = ТекстПоказателиСМинусом + мТекстПоказателиСМинусом;
		
		Запрос.УстановитьПараметр("Сценарий"+МеткаУровня,					СценарийДляОтклонений);
		Запрос.УстановитьПараметр("НачалоПланирования"+МеткаУровня,			МинимальныйПериод());
		Запрос.УстановитьПараметр("ОкончаниеПланирования"+МеткаУровня,		МаксимальныйПериод());
		
		ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц + ?(ТекстФормированияВременныхТаблиц="","","	
	    |ОБЪЕДИНИТЬ ВСЕ");
		//Если (НЕ ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения)) Тогда
		//	ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
		//	|ВЫБРАТЬ
		//	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмерения,"Обороты.ДополнительныеРазрезы","Набор")+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1,"","
		//	|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
		//	|ИЗ ВТ_ФормулыПредрасчет"+МеткаУровня+" КАК Обороты
		//	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Набор
		//	|		ПО Обороты.ДополнительныеРазрезы = Набор.Ссылка
		//	|
		//	|ОБЪЕДИНИТЬ ВСЕ";
		//КонецЕсли;
		ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
			|ВЫБРАТЬ
			|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+"
			|ИЗ РегистрНакопления.фин_АнализОтклоненийФактическихДанных.Обороты(,&ГраницаАктуальности, ,"+ТекстОтборПоОрганизации+" И 
			|																							Сценарий = &Сценарий"+МеткаУровня+" И ПериодПланирования>=&НачалоПланирования"+МеткаУровня+" И ПериодПланирования<=&ОкончаниеПланирования"+МеткаУровня+"
			|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+ТекстФильтраОбороты)+") КАК Обороты
			|"+?(ТекстОтбораОбороты="",""," ГДЕ ")+ТекстОтбораОбороты;
	КонецЕсли;
	ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
		|;
		|ВЫБРАТЬ
		|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмеренияФинал,"ДополнительныеРазрезы.","")+ТекстВсеПоказателиСПсевдонимом+"
		|ПОМЕСТИТЬ ВТ_Обороты
		|ИЗ ВТ_ПредварительныеОбороты КАК Обороты";
	Запрос.Текст = ТекстФормированияВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	Обороты.Финансовыйпоказатель КАК Финансовыйпоказатель,
	|	СтатьиБюджета.КодСтрокиБюджета КАК КодСтрокиБюджета"+ТекстВсеПоказатели+СтрЗаменить(ТекстИзмеренияФиналБезИсточников,"ДополнительныеРазрезы.","")+ТекстИзмеренияСтатей+"
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обороты КАК Обороты
	|		ПО СтатьиБюджета.ФинансовыйПоказатель = Обороты.ФинансовыйПоказатель
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Бюджет И НЕ СтатьиБюджета.ЭтоГруппа И НЕ СтатьиБюджета.ПометкаУдаления И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&СписокВГО)  И СтатьиБюджета.Версия В (&ВерсииБюджета)"+?(ТекстОтбораИтоговыеОбороты="",""," И ")+ТекстОтбораИтоговыеОбороты+?(ТекстОтбораСтатьи="",""," И ")+ТекстОтбораСтатьи;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЭтоПлановыеДанные(Данные) Экспорт
	Возврат ЗначениеЗаполнено(Данные) И ТипЗнч(Данные)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования();	
КонецФункции

Функция Периодичность() Экспорт
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Если ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения) Тогда
			Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения);
		КонецЕсли;
	КонецЦикла;
	Возврат Перечисления.фин_Периодичность.Месяц;
КонецФункции

Функция ПолучитьСКД(мГруппировки)
	//получаем схему компоновки данных
	СхемаКомпоновкиДанных=фин_УправлениеОтчетамиБюджетирование.ПолучитьСКД(ЭтотОбъект,мГруппировки,СтруктураПеревода,ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),КЭШ,"фин_СравнительныйАнализ");
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ПолучитьНастройкиСКД(ОтборТаблиц)
	Настройки = фин_УправлениеОтчетамиБюджетирование.ПолучитьНастройкиСКД(ЭтотОбъект,КомпоновщикНастроек,СтруктураПеревода,КЭШ,Периодичность(),"фин_СравнительныйАнализ",ОтборТаблиц);
	Возврат Настройки;
КонецФункции

Процедура ДополнитьТаблицуИтогами(ТаблицаВнешнегоНабораДанных,Отбор)
	СтрокаИтог = Неопределено;
	Если Бюджет.РучнаяНастройкаИтоговПоГруппам И фин_УправлениеОтчетамиБюджетирование.ИтогиТребуются(Группировки) Тогда
		ТаблицаИтоговСтатей = ТаблицаВнешнегоНабораДанных.СкопироватьКолонки();
		ПоляРасчетаИтогов = Новый Массив;
		ОбязательныеПоляРасчетаИтогов = Новый Массив;
		ПоляРасчетаИтогов.Добавить("СтатьяБюджета");
		ОбязательныеПоляРасчетаИтогов.Добавить("СтатьяБюджета");
		Если ЗначениеЗаполнено(ОсновнаяГруппировка) И ТипЗнч(ОсновнаяГруппировка)<>Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
			ПоляРасчетаИтогов.Добавить(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
			ОбязательныеПоляРасчетаИтогов.Добавить(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка));
		КонецЕсли;
		СтруктураСверткиДляФормул = ?(ЗначениеЗаполнено(ОсновнаяГруппировка),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
		ИндексГруппировкиСтатьи = Неопределено;
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
				Продолжить;
			КонецЕсли;
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
			Если Найти(СтруктураСверткиДляФормул,Имя)=0 И  СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
				СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
				ПоляРасчетаИтогов.Добавить(Имя);
			КонецЕсли;
			Если СтрокаГруппировки.Измерение=Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией) Тогда
				ИндексГруппировкиСтатьи = СтрокаГруппировки.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		Если ИндексГруппировкиСтатьи<>Неопределено Тогда
			Для Каждого СтрокаГруппировки Из Группировки Цикл
				Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
					Продолжить;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
				Если Найти(СтруктураСверткиДляФормул,Имя)=0 И ИндексГруппировкиСтатьи>СтрокаГруппировки.НомерСтроки И СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И СтрокаГруппировки.Измерение<>Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией) Тогда
					СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
					ПоляРасчетаИтогов.Добавить(Имя);
					ОбязательныеПоляРасчетаИтогов.Добавить(Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекстФильтраОбороты = "";
		ТекстОтбораОбороты = "";
		фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
		// параметры отбора
		СтруктураПараметровОтбора = Новый Структура;
		Для Каждого СтрокаОтбор Из Отбор Цикл
			Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПараметровОтбора.Вставить("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
		КонецЦикла;
		

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
			|	""Сумма"" КАК ПолеРасчета,
			|	фин_СтатьиБюджета.Формула
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|ГДЕ
			|	фин_СтатьиБюджета.Владелец = &Бюджет
			|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
			|	И фин_СтатьиБюджета.ЭтоГруппа
			|	И фин_СтатьиБюджета.Формула <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	фин_СтатьиБюджета.Ссылка,
			|	""Количество"",
			|	фин_СтатьиБюджета.ФормулаКоличество
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|ГДЕ
			|	фин_СтатьиБюджета.Владелец = &Бюджет
			|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
			|	И фин_СтатьиБюджета.ЭтоГруппа
			|	И фин_СтатьиБюджета.ФормулаКоличество <> ЗНАЧЕНИЕ(Справочник.фин_формулыРасчетаФинансовыхПоказателей.ПустаяСсылка)";

		Запрос.УстановитьПараметр("Бюджет", Бюджет);

		Результат = Запрос.Выполнить();
		
		ТаблицаИтоговСтатей.Колонки.Добавить("Ранг",Новый ОписаниеТипов("Число"));
		
		МассивРесурсы = Новый Массив;
		Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
			МассивРесурсы.Добавить("СуммаУпр"+Строка(СтрокаДанных.НомерСтроки));
			МассивРесурсы.Добавить("ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки));
			МассивРесурсы.Добавить("СуммаСценария"+Строка(СтрокаДанных.НомерСтроки));
			МассивРесурсы.Добавить("Количество"+Строка(СтрокаДанных.НомерСтроки));
		КонецЦикла;
	
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
        УпрВалюта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		ТаблицаИтоговСтатей.Очистить();
		Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
			Сценарий = СтрокаДанных.ДанныеДляСравнения;
			НачалоПериодаПланирования = СтрокаДанных.НачалоПериода;
			КонецПериодаПланирования = КонецДня(СтрокаДанных.ОкончаниеПериода);
			ВидДанных = ?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),Перечисления.фин_ВидыДанныхОтчета.Плановые,Перечисления.фин_ВидыДанныхОтчета.Фактические);
			МножительРазрядности = 1;
			Если ВидДанных = Перечисления.фин_ВидыДанныхОтчета.Фактические Тогда
				РазрядностьПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрядностьПланированияБюджетов");
				Если РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
					МножительРазрядности=1/1000000;
				ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
					МножительРазрядности=1/100000;
				ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
					МножительРазрядности=1/10000;
				ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
					МножительРазрядности=1/1000;
				ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
					МножительРазрядности=1/100;
				КонецЕсли;
			КонецЕсли;
			ВыборкаДетальныеЗаписи.Сбросить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(ВыборкаДетальныеЗаписи.Формула,ВыборкаДетальныеЗаписи.ПолеРасчета,?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаУпрОборот.Имя = "СуммаУпр"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.ВалютнаяСуммаОборот.Имя = "ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаСценарияОборот.Имя = "СуммаСценария"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.КоличествоОборот.Имя = "Количество"+Строка(СтрокаДанных.НомерСтроки);
				Если ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Плановые Тогда
					Для Каждого СтрокаРасчетов Из ТаблицаРасчетыПоФормулам Цикл
						Если Сценарий.Валюта = УпрВалюта Тогда
							СтрокаРасчетов["СуммаСценария"+Строка(СтрокаДанных.НомерСтроки)] = СтрокаРасчетов["СуммаУпр"+Строка(СтрокаДанных.НомерСтроки)];
						Иначе
							ДатаКурса = ?(ТаблицаРасчетыПоФормулам.ПериодПланирования='00010101',НачалоПериодаПланирования,ТаблицаРасчетыПоФормулам.ПериодПланирования);
							КурсУпр = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(УпрВалюта,ДатаКурса,Сценарий);
							КурсСценария = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(Сценарий.Валюта,ДатаКурса,Сценарий);
							СтрокаРасчетов["СуммаСценария"+Строка(СтрокаДанных.НомерСтроки)] = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов["СуммаУпр"+Строка(СтрокаДанных.НомерСтроки)],УпрВалюта,Сценарий.Валюта,КурсУпр.Курс,КурсСценария.Курс,КурсУпр.Кратность,КурсСценария.Кратность);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Ранг = 0;
				ГруппаСтатьи = ВыборкаДетальныеЗаписи.СтатьяБюджета.Родитель;
				Пока ЗначениеЗаполнено(ГруппаСтатьи) Цикл
					Ранг = Ранг + 1;
					ГруппаСтатьи = ГруппаСтатьи.Родитель;
				КонецЦикла;
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = ТаблицаИтоговСтатей.Добавить();
					НС.СтатьяБюджета = ВыборкаДетальныеЗаписи.СтатьяБюджета;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
					НС.Ранг = Ранг;
					Если ТаблицаИтоговСтатей.Колонки.Найти("СуммаУпр"+Строка(СтрокаДанных.НомерСтроки))<>Неопределено Тогда
						НС["СуммаУпр"+Строка(СтрокаДанных.НомерСтроки)] 		= НС["СуммаУпр"+Строка(СтрокаДанных.НомерСтроки)] * МножительРазрядности;
					КонецЕсли;
					Если ТаблицаИтоговСтатей.Колонки.Найти("ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки))<>Неопределено Тогда
						НС["ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки)] 	= НС["ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки)] * МножительРазрядности;
					КонецЕсли;
					Если ТаблицаИтоговСтатей.Колонки.Найти("СуммаСценария"+Строка(СтрокаДанных.НомерСтроки))<>Неопределено Тогда
						НС["СуммаСценария"+Строка(СтрокаДанных.НомерСтроки)] 	= НС["СуммаСценария"+Строка(СтрокаДанных.НомерСтроки)] * МножительРазрядности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СтрокаСверткиИзмерения = "";
			СтрокаСверткиРесурсы = "";
			Для Каждого Колонка Из ТаблицаИтоговСтатей.Колонки  Цикл
				Если Найти(Колонка.Имя,"Сумма")=0 И Найти(Колонка.Имя,"Количество")=0 Тогда
					Если ПоляРасчетаИтогов.Найти(Колонка.Имя)<>Неопределено ИЛИ Колонка.Имя = "Ранг" Тогда
						СтрокаСверткиИзмерения = СтрокаСверткиИзмерения + ?(СтрокаСверткиИзмерения="","",",") + Колонка.Имя;
					КонецЕсли;
				Иначе
					СтрокаСверткиРесурсы = СтрокаСверткиРесурсы + ?(СтрокаСверткиРесурсы="","",",") + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			ТаблицаИтоговСтатей.Свернуть(СтрокаСверткиИзмерения,СтрокаСверткиРесурсы);
			ТаблицаИтоговСтатей.Сортировать("Ранг ВОЗР");
			//Для Каждого СтрокаБазовая Из ТаблицаИтоговСтатей Цикл
			//	Для Инд = ТаблицаИтоговСтатей.Индекс(СтрокаБазовая)+2 По ТаблицаИтоговСтатей.Количество() Цикл
			//		СтрокаПроверочная = ТаблицаИтоговСтатей[Инд-1];
			//		Если СтрокаБазовая<>СтрокаПроверочная И СтрокаПроверочная.СтатьяБюджета.Родитель = СтрокаБазовая.СтатьяБюджета Тогда
			//			ОтборВыполнен = Истина;
			//			Для Каждого ПолеРазрез Из ПоляРасчетаИтогов Цикл
			//				Если ПолеРазрез = "СтатьяБюджета" Тогда
			//					Продолжить;
			//				КонецЕсли;
			//				Если СтрокаБазовая[ПолеРазрез]<>СтрокаПроверочная[ПолеРазрез] Тогда
			//					ОтборВыполнен = Ложь;
			//					Продолжить;
			//				КонецЕсли;
			//			КонецЦикла;
			//			Если НЕ ОтборВыполнен Тогда
			//				Продолжить;
			//			КонецЕсли;
			//			Для Каждого Ресурс Из МассивРесурсы Цикл
			//				Если ТаблицаИтоговСтатей.Колонки.Найти(Ресурс)<>Неопределено Тогда
			//					СтрокаБазовая[Ресурс] = СтрокаБазовая[Ресурс] - СтрокаПроверочная[Ресурс];
			//				КонецЕсли;
			//			КонецЦикла;
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЦикла;
			//Для Каждого СтрокаБазовая Из ТаблицаИтоговСтатей Цикл
			//	НС = ТаблицаВнешнегоНабораДанных.Добавить();
			//	ЗаполнитьЗначенияСвойств(НС,СтрокаБазовая);
			//КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Сценарий = СтрокаДанных.ДанныеДляСравнения;
		НачалоПериодаПланирования = СтрокаДанных.НачалоПериода;
		КонецПериодаПланирования = КонецДня(СтрокаДанных.ОкончаниеПериода);
		ВидДанных = ?(ЭтоПлановыеДанные(СтрокаДанных.ДанныеДляСравнения),Перечисления.фин_ВидыДанныхОтчета.Плановые,Перечисления.фин_ВидыДанныхОтчета.Фактические);
		Если Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать ИЛИ Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПустаяСсылка() Тогда
			Возврат;
		ИначеЕсли Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции Тогда
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ТаблицаРезультат.Колонки.Добавить("РезультатРасчетаИтога",Новый ОписаниеТипов("Число"));
			ТаблицаРезультат.Колонки.Добавить("КоличествоЗначений",Новый ОписаниеТипов("Число"));
			СтруктураИтога = Новый Структура;
			СтруктураСвертки = "СтатьяБюджета"+?(ЗначениеЗаполнено(ОсновнаяГруппировка),","+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
			Если ЗначениеЗаполнено(ОсновнаяГруппировка) И ТипЗнч(ОсновнаяГруппировка)<>Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
				ИмяОГ = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
				ТаблицаРезультат.Колонки.Добавить(ИмяОГ);
				СтруктураИтога.Вставить(ИмяОГ);
			КонецЕсли;
			Для Каждого СтрокаГруппировки Из Группировки Цикл
				Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
					Продолжить;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
				Если СтруктураИтога.Свойство(Имя)=Ложь И  СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
					ТаблицаРезультат.Колонки.Добавить(Имя);
					СтруктураИтога.Вставить(Имя);
					СтруктураСвертки = СтруктураСвертки+","+Имя;
				КонецЕсли;
			КонецЦикла;
			ПоляСуммирования = "";
			СписокРесурсов = Новый Массив;
			Для Каждого СтрокаПоказатель Из Показатели Цикл
				Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
					Продолжить;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+Строка(СтрокаДанных.НомерСтроки);
 				Если СписокРесурсов.Найти(Имя)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
	            ПоляСуммирования = ПоляСуммирования+?(ПоляСуммирования="","",",")+Имя;
				ТаблицаРезультат.Колонки.Добавить(Имя,Новый ОписаниеТипов("Число"));
				СписокРесурсов.Добавить(Имя);
			КонецЦикла;
			КопияТаблицы = ТаблицаВнешнегоНабораДанных.Скопировать();
			КопияТаблицы.Свернуть(СтруктураСвертки,ПоляСуммирования);
			ИтоговаяФункцияБюджета = Бюджет.ИтоговаяФункция;
			Для Каждого СтрокаТаблицы Из КопияТаблицы Цикл
				Если СтрокаТаблицы.СтатьяБюджета.ИсключитьИзИтогов Тогда
					Продолжить;
				КонецЕсли;
				Новая = Ложь;
				Если СтруктураИтога.Количество()=0 Тогда
					Если ТаблицаРезультат.Количество()=0 Тогда
						Новая = Истина;
					КонецЕсли;
					ЗаполняемаяСтрока = ?(ТаблицаРезультат.Количество()=0,ТаблицаРезультат.Добавить(),ТаблицаРезультат[0]);
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураИтога,СтрокаТаблицы);
					НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураИтога);
					Если НайденныеСтроки.Количество()=0 Тогда
						Новая = Истина;
						ЗаполняемаяСтрока = ТаблицаРезультат.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока,СтруктураИтога);
					Иначе
						ЗаполняемаяСтрока = НайденныеСтроки[0];
					КонецЕсли;
				КонецЕсли;
				ЗаполняемаяСтрока.КоличествоЗначений = ЗаполняемаяСтрока.КоличествоЗначений + 1;
				Для Каждого Ресурс Из СписокРесурсов Цикл
					Если Новая ИЛИ (ИтоговаяФункцияБюджета<>Перечисления.фин_ИтоговыеФункции.Минимум И ИтоговаяФункцияБюджета<>Перечисления.фин_ИтоговыеФункции.Максимум) Тогда
						ЗаполняемаяСтрока[Ресурс] = ЗаполняемаяСтрока[Ресурс] + СтрокаТаблицы[Ресурс];
					ИначеЕсли ИтоговаяФункцияБюджета=Перечисления.фин_ИтоговыеФункции.Минимум Тогда
						ЗаполняемаяСтрока[Ресурс] = Мин(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
					Иначе
						ЗаполняемаяСтрока[Ресурс] = Макс(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если Бюджет.ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.Сумма И Бюджет.ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.ПустаяСсылка() Тогда
				Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
					Если Бюджет.ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Количество Тогда
						Для Каждого Ресурс Из СписокРесурсов Цикл
							СтрокаРезультат[Ресурс] = СтрокаРезультат["КоличествоЗначений"];
						КонецЦикла;
					ИначеЕсли Бюджет.ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Среднее Тогда
						Для Каждого Ресурс Из СписокРесурсов Цикл
							СтрокаРезультат[Ресурс] = СтрокаРезультат[Ресурс]/СтрокаРезультат["КоличествоЗначений"];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
				НС = ТаблицаВнешнегоНабораДанных.Добавить();
				НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
					Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
						МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
						НС[Имя+МеткаУровня] = 0;
					КонецЦикла;
					Если ВидыАналитическихДанных.НайтиСтроки(Новый Структура("ВидДанных",Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения)).Количество()>0 Тогда
						МеткаУровня = Строка(ДанныеДляАнализа.Количество()+1);
						НС[Имя+МеткаУровня] = 0;
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(НС,СтрокаРезультат);
				Если ТаблицаВнешнегоНабораДанных.Колонки.Найти("ПериодПланирования")<>Неопределено И НС.ПериодПланирования = Неопределено Тогда
					НС.ПериодПланирования = '00010101';
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Бюджет.РежимыРасчетаИтоговойСтрокиБюджета=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле Тогда
			СтруктураСверткиДляФормул = ?(ЗначениеЗаполнено(ОсновнаяГруппировка),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка),"");
			Для Каждого СтрокаГруппировки Из Группировки Цикл
				Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам") Тогда
					Продолжить;
				КонецЕсли;
				Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
				Если Найти(СтруктураСверткиДляФормул,Имя)=0 И  СтрокаГруппировки.Измерение<>ОсновнаяГруппировка И (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
					СтруктураСверткиДляФормул = СтруктураСверткиДляФормул+?(СтруктураСверткиДляФормул="","",",")+Имя;
				КонецЕсли;
			КонецЦикла;
			ТекстФильтраОбороты = "";
			ТекстОтбораОбороты = "";
			фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
			// параметры отбора
			СтруктураПараметровОтбора = Новый Структура;
			Для Каждого СтрокаОтбор Из Отбор Цикл
				Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПараметровОтбора.Вставить("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
			КонецЦикла;
			
			Если Бюджет.УчетПоСумме И ЗначениеЗаполнено(Бюджет.Формула) Тогда
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(Бюджет.Формула,"Сумма",?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаУпрОборот.Имя = "СуммаУпр"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.ВалютнаяСуммаОборот.Имя = "ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаСценарияОборот.Имя = "СуммаСценария"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.КоличествоОборот.Имя = "Количество"+Строка(СтрокаДанных.НомерСтроки);
				
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = ТаблицаВнешнегоНабораДанных.Добавить();
					НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
					Для Каждого СтрокаПоказатель Из Показатели Цикл
						Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
							Продолжить;
						КонецЕсли;
						Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
						Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
							МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
							НС[Имя+МеткаУровня] = 0;
						КонецЦикла;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
				КонецЦикла;
			КонецЕсли;
			
			Если Бюджет.УчетПоКоличеству И ЗначениеЗаполнено(Бюджет.ФормулаКоличество) Тогда
				ТаблицаРасчетыПоФормулам = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьРасчетПоФормуле(Бюджет.ФормулаКоличество,"Количество",?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Фактические,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),Сценарий),Организация,НачалоПериодаПланирования,КонецПериодаПланирования,?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)),Периодичность(),ТекстОтбораОбороты,ТекстФильтраОбороты,СтруктураПараметровОтбора,СтруктураСверткиДляФормул);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаУпрОборот.Имя = "СуммаУпр"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.ВалютнаяСуммаОборот.Имя = "ВалютнаяСумма"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.СуммаСценарияОборот.Имя = "СуммаСценария"+Строка(СтрокаДанных.НомерСтроки);
				ТаблицаРасчетыПоФормулам.Колонки.КоличествоОборот.Имя = "Количество"+Строка(СтрокаДанных.НомерСтроки);
				
				Для Каждого СтрокаРасчет Из ТаблицаРасчетыПоФормулам Цикл
					НС = ТаблицаВнешнегоНабораДанных.Добавить();
					НС.СтатьяБюджета = Справочники.фин_СтатьиБюджета.ПустаяСсылка();
					Для Каждого СтрокаПоказатель Из Показатели Цикл
						Если ТипЗнч(СтрокаПоказатель.Показатель)=Тип("СправочникСсылка.фин_ДополнительныеРасчетныеПоляОтчетовПоБюджетам") Тогда
							Продолжить;
						КонецЕсли;
						Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
						Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
							МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
							НС[Имя+МеткаУровня] = 0;
						КонецЦикла;
						Если ВидыАналитическихДанных.НайтиСтроки(Новый Структура("ВидДанных",Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.РассмотренныеОтклонения)).Количество()>0 Тогда
							МеткаУровня = Строка(ДанныеДляАнализа.Количество()+1);
							НС[Имя+МеткаУровня] = 0;
						КонецЕсли;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(НС,СтрокаРасчет);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура Скомпоновать(ДокументРезультат,Отбор,ЭтоОтчетПоИсполнению=Ложь) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		СтрокаОтбор.Путь = ?(ТипЗнч(СтрокаОтбор.ПолеОтбора)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),СтрокаОтбор.ПолеОтбора.Путь,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора));
	КонецЦикла;
	
	//ВЫБОР СХЕМЫ КОМПОНОВКИ И НАСТРОЙКА ПОЛЕЙ НАБОРА ДАННЫХ
	
	//Если Не ЗначениеЗаполнено(Параметр_Сценарий.Значение) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан сценарий!");
	//	Возврат;
	//КонецЕсли;
	
	ГенеральныйОтбор = Отбор;//Отбор.Скопировать(Новый Структура("Таблица",Справочники.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка()));
	
	мГруппировки = фин_УправлениеОтчетамиБюджетирование.ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка);
	ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуДанных(ГенеральныйОтбор,мГруппировки);
	ДополнитьТаблицуИтогами(ТаблицаВнешнегоНабораДанных,ГенеральныйОтбор);
	СхемаКомпоновкиДанных = ПолучитьСКД(мГруппировки);
	Настройки = ПолучитьНастройкиСКД(Неопределено);//(Отбор);

	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	Заголовок=фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(?(ЭтоОтчетПоИсполнению,"АнализИсполненияБюджета","СравнительныйАнализ"),ЯзыкОтчета,,КЭШ)+": "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Бюджет,ЯзыкОтчета,,КЭШ)+Символы.ПС+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(ЗаголовокОтчета,ЯзыкОтчета,,КЭШ);
	фин_УправлениеОтчетамиБюджетирование.ВыполнитьФормированиеОтчета(ЭтотОбъект,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,"фин_СравнительныйАнализ",Заголовок,фин_ПроцедурыМеханизмовБюджетирования.ВерсииБюджетаЗаПериод(Бюджет,МинимальныйПериод(),МаксимальныйПериод()));	
	
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("Бюджет");
ЗаполнениеПараметров = Новый Структура;
//ЗаполнениеПараметров.Вставить("ГраницаАктуальности",ТекущаяДата());
//ЗаполнениеПараметров.Вставить("ГраницаФактическихИПрогнозныхДанных",ТекущаяДата());
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("ШиринаКолонкиПоказателя",12);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиРеквизита",25);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиСтатьиБюджета",25);
ЗаполнениеПараметров.Вставить("РасположениеИтоговОтчета",Перечисления.фин_РасположениеИтоговОтчета.Конец);

ДополнительныеПараметры = Новый Массив;
//ДополнительныеПараметры.Добавить("ГраницаАктуальности");
ДополнительныеПараметры.Добавить("Периодичность");
ДополнительныеПараметры.Добавить("ЯзыкОтчета");
ДополнительныеПараметры.Добавить("ВыводитьСреднююЦену");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("ЗаголовокОтчета");
ПараметрыОформления.Добавить("ВыводитьКодыСтрокБюджета");
ПараметрыОформления.Добавить("УпорядочиваниеСтатей");
ПараметрыОформления.Добавить("ШиринаКолонкиРеквизита");
ПараметрыОформления.Добавить("ШиринаКолонкиСтатьиБюджета");
ПараметрыОформления.Добавить("ШиринаКолонкиПоказателя");
ПараметрыОформления.Добавить("ВыводитьГруппыСтатейВнизу");
ПараметрыОформления.Добавить("АналитическиеПоляВОднойКолонке");
ПараметрыОформления.Добавить("ПоказателиВОднойКолонке");
ПараметрыОформления.Добавить("РасположениеИтоговОтчета");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
