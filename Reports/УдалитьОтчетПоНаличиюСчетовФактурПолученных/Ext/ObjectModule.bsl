#Если Клиент Тогда

Перем мСписокСтруктурныхЕдиниц Экспорт;

Функция ОпределитьНаличиеСчетовФактур(НачПериода = Неопределено, КонПериода = Неопределено, Организация, Фильтр = Неопределено, ВсеКромеФильтра = Ложь, НаличиеСчетаФактуры = Неопределено, ИмяСчетФактуры = "СчетФактураПолученный", ВалютаОтбора = Неопределено) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	  
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачПериода"    , НачПериода);
	Запрос.УстановитьПараметр("КонПериода"    , ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("Организация"   , Организация);
	Запрос.УстановитьПараметр("Фильтр"        , Фильтр);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаОтбора"  , ВалютаОтбора);
			
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", " ГДЕ " + ?(НаличиеСчетаФактуры, "НЕ СчетФактура.Ссылка ЕСТЬ NULL", "СчетФактура.Ссылка ЕСТЬ NULL"));
	
	//добавим фильтр по типу регистратору, т.к. из регистров выбирается данные по документам,
	//которые не регситрируется счет-фактурой.
	СписокТиповДокументов = Новый СписокЗначений;
	МетаданныеДокумента = Документы[ИмяСчетФактуры].ПустаяСсылка().Метаданные();
	Для Каждого Документ Из МетаданныеДокумента.ТабличныеЧасти["ДокументыОснования"].Реквизиты["ДокументОснование"].Тип.Типы() Цикл
		ТипДокумента = Метаданные.НайтиПоТипу(Документ);
		СписокТиповДокументов.Добавить(ТипДокумента.Имя);
	КонецЦикла;		
	
	//признак добавление в условие соединительного "ИЛИ"
	НужноДобавлятьСоединение = Ложь;
	
	//Признак закртыия скобки после перечисления всех типов регистраторов
	НуженКонецСкобки        = Ложь;
	
	Если УсловиеЗапроса = "" Тогда 
		Если СписокТиповДокументов.Количество() > 0 Тогда
			УсловиеЗапроса = " ГДЕ ";				
		КонецЕсли;			
	Иначе
		УсловиеЗапроса = УсловиеЗапроса + "  И (";      			
		НуженКонецСкобки = Истина;
	КонецЕсли;
	
	Для Каждого ТипДок Из СписокТиповДокументов Цикл 			
		УсловиеЗапроса = УсловиеЗапроса + ?(НужноДобавлятьСоединение , " ИЛИ", "") + "  ЗапросПоДокументам.ДокументОснование ССЫЛКА Документ." + ТипДок.Значение;
		НужноДобавлятьСоединение = Истина;
	КонецЦикла;

	Если НуженКонецСкобки Тогда
		УсловиеЗапроса = УсловиеЗапроса + ")";
	КонецЕсли;
	 		
	ЗапросПоДокументам = "ВЫБРАТЬ
						|	НДС.Регистратор КАК ДокументОснование,
						|	НДС.Период КАК ДатаДокументаОснования,
						|	НДС.Контрагент,
						|	ВЫБОР
						|		КОГДА НДС.Регистратор ССЫЛКА Документ.Сторнирование
						|				ИЛИ НДС.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
						|			ТОГДА &ВалютаРегУчета
						|		ИНАЧЕ НДС.Регистратор.ВалютаДокумента
						|	КОНЕЦ КАК ВалютаДокумента,
						|	НДС.СуммаНДС
						|ИЗ
						|	РегистрНакопления.<<ИмяРегистраНДС>> КАК НДС
						|ГДЕ
						|	НДС.Активность
						|	" + УчетНДСИАкциза.СформироватьУсловиеОграниченияПоПериоду("НДС.Период", НачПериода, КонПериода) +
						?(НЕ ЗначениеЗаполнено(Организация), "",  " И НДС.Организация В (&Организация) ") + 
						// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
						?(НЕ ЗначениеЗаполнено(Фильтр), "", " И НДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ") +
						"
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	КорректировкаНДС.Регистратор КАК ДокументОснование,
						|	КорректировкаНДС.Период КАК ДатаДокументаОснования,
						|	КорректировкаНДС.Контрагент,
						|	ВЫБОР
						|		КОГДА КорректировкаНДС.Регистратор ССЫЛКА Документ.Сторнирование
						|				ИЛИ КорректировкаНДС.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
						|				ИЛИ КорректировкаНДС.Регистратор ССЫЛКА Документ.СписаниеТоваров
						|			ТОГДА &ВалютаРегУчета
						|		ИНАЧЕ КорректировкаНДС.Регистратор.ВалютаДокумента
						|	КОНЕЦ,
						|	КорректировкаНДС.СуммаНДС
						|ИЗ
						|	РегистрНакопления.<<ИмяРегистраКорректировкаНДС>> КАК КорректировкаНДС
						|ГДЕ
						|	КорректировкаНДС.Активность 
						|	" + УчетНДСИАкциза.СформироватьУсловиеОграниченияПоПериоду("КорректировкаНДС.Период", НачПериода, КонПериода) +
						?(НЕ ЗначениеЗаполнено(Организация), "",  " И КорректировкаНДС.Организация В (&Организация) ") + 
						// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
						?(НЕ ЗначениеЗаполнено(Фильтр), "", " И КорректировкаНДС.Регистратор " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");
					
	// В зависимости от параметра ИмяСчетФактуры = "СчетФактураПолученный" заменяем имена базовых регистов
	ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "НДСКВозмещению", "НДС"));
	ЗапросПоДокументам = СтрЗаменить(ЗапросПоДокументам, "<<ИмяРегистраКорректировкаНДС>>", ?(ИмяСчетФактуры = "СчетФактураПолученный", "КорректировкаНДСКВозмещению", "КорректировкаНДС"));
	
	ЗапросПоДокументам = "ВЫБРАТЬ
	                     |	ЗапросПоДокументам.ДокументОснование,
	                     |	ЗапросПоДокументам.ДатаДокументаОснования,
	                     |	ЗапросПоДокументам.Контрагент,
	                     |	ЗапросПоДокументам.ВалютаДокумента,
	                     |	СУММА(ЗапросПоДокументам.СуммаНДС) КАК СуммаНДС
	                     |ИЗ
	                     |	(" + ЗапросПоДокументам + ") КАК ЗапросПоДокументам
	                     |	" + ?(НЕ ЗначениеЗаполнено(ВалютаОтбора), "", " ГДЕ ЗапросПоДокументам.ВалютаДокумента = &ВалютаОтбора") + "
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ЗапросПоДокументам.ДокументОснование,
	                     |	ЗапросПоДокументам.ДатаДокументаОснования,
	                     |	ЗапросПоДокументам.Контрагент,
	                     |	ЗапросПоДокументам.ВалютаДокумента";
	
	Запрос.Текст = Запрос.Текст +
	"Выбрать РАЗРЕШЕННЫЕ
	|	ЗапросПоДокументам.ДокументОснование КАК ДокументОснование,
	|	ЗапросПоДокументам.ДатаДокументаОснования КАК ДатаДокументаОснования,
	|	ЗапросПоДокументам.Контрагент КАК Контрагент,
	|	ЗапросПоДокументам.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗапросПоДокументам.СуммаНДС КАК СуммаНДС,
	|	ЕСТЬNULL(СчетФактура.Ссылка,Неопределено) КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактура.Ссылка.Проведен, ЛОЖЬ) КАК СчетФактураПроведен
	|ИЗ(" + ЗапросПоДокументам +")КАК ЗапросПоДокументам					
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактура.Ссылка КАК Ссылка,
	|			СчетФактура.ДокументОснование КАК ДокументОснование
	|		ИЗ
	|			Документ."+ ИмяСчетФактуры + ".ДокументыОснования КАК СчетФактура) КАК СчетФактура
	|		ПО ЗапросПоДокументам.ДокументОснование = СчетФактура.ДокументОснование  
	| " + УсловиеЗапроса + "
	| УПОРЯДОЧИТЬ ПО ЗапросПоДокументам.ДатаДокументаОснования ";
			
	Запрос.Текст =  Запрос.Текст;
			
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
		
КонецФункции // ОпределитьНаличиеСчетовФактур()

// Процедура формирует табличный документ с отчетом по наличию счетов-фактур.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводится
//                      отчет по наличию счетов-фактур
//  ТаблицаРезультат - таблица значений, содержащая данные для построения
//                     отчета
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьОтчетПоНаличиюСчетовФактур(ДокументРезультат, ТаблицаРезультат) Экспорт
	
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху         = 10;
	ДокументРезультат.ПолеСнизу          = 10;
	ДокументРезультат.ПолеСлева          = 20;
	ДокументРезультат.ПолеСправа         = 20;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПоНаличиюСчетовФактур";
	
	// Получим макет и области макета.
	Макет = ПолучитьМакет("ОтчетПоНаличиюСчетовФактур");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	Шапка           = Макет.ПолучитьОбласть("Шапка");
	Строка          = Макет.ПолучитьОбласть("Строка");
	Подвал          = Макет.ПолучитьОбласть("Подвал");
	
	// Выведем заголовок отчета.
			
	ЗаголовокОтчета.Параметры.НаименованиеОрганизации = РаботаСДиалогами.ВыгрузитьСписокВСтроку(мСписокСтруктурныхЕдиниц);
		
	Если ЗначениеЗаполнено(НачалоПериода) И НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "С " + Формат(НачалоПериода, "ДЛФ=DD");
	ИначеЕсли НЕ ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "По " + Формат(КонецПериода, "ДЛФ=DD");
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ЗаголовокОтчета.Параметры.ОписаниеПериода = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП=Истина");
	Иначе
		ЗаголовокОтчета.Параметры.ОписаниеПериода = "(Без ограничения периода)";
	КонецЕсли;
		
	ДокументРезультат.Вывести(ЗаголовокОтчета);
	
	// Выведем шапку таблицы.
	ДокументРезультат.Вывести(Шапка);
	
	// Выведем строки таблицы.
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		Строка.Параметры.Заполнить(СтрокаРезультат);
		
		Строка.Параметры.СчетФактураПроведен = ?(СтрокаРезультат.СчетФактураПроведен = Истина, "●", "");
		
		Строка.Параметры.НомерСтроки = ТаблицаРезультат.Индекс(СтрокаРезультат) + 1;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Строка);
		СтрокаСПодвалом.Добавить(Подвал);

		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ДокументРезультат, СтрокаСПодвалом) Тогда
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ДокументРезультат.Вывести(Шапка);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(Строка);
		
	КонецЦикла;

	ДокументРезультат.Вывести(Подвал);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры // СформироватьОтчетПоНаличиюСчетовФактур()

#КонецЕсли