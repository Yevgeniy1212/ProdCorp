Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	ДополнительныеГруппировки = Новый СписокЗначений;
	ДополнительныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаОтклонения,"Причина отклонения");
	ДополнительныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.ПричинаКорректировки,"Причина корректировки");
	ДополнительныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.ДокументПланирования,"Документ планирования");
	ДополнительныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.СпособКорректировки,"Способ корректировки");
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировок(ЭтотОбъект,,,ДополнительныеГруппировки);	
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров(Отбор)
	Ошибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Бюджет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан бюджет!");
		Ошибки = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан сценарий!");
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Показатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен показатель в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка показателей!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Группировки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена группировка в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидГруппировки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид группировки в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать группировку по валюте без отражения валютной суммы в отчете!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из АналитическиеПоляСводаКорректировок Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Поле) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено поле анализа в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка полей анализа корректировок и отклонений!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать разделение данных по валюте без отражения валютной суммы в отчете!");
		Ошибки = Истина;
	КонецЕсли;
	//Если УпорядочиваниеСтатей="КодСтрокиБюджета" И НЕ ВыводитьКодыСтрокБюджета Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя упорядочивать статьи по коду строки, если он не выводится в отчет!");
	//	Ошибки = Истина;
	//КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьОграниченияПоБюджетам")=Истина Тогда
		Если НЕ фин_ПривилегированныеПроцедуры.РазрешеноПолучениеОтчета(Бюджет,Сценарий,Отбор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя недостаточно прав!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат НЕ Ошибки;	
КонецФункции

Функция ПолучитьТаблицуДанных(мПериодичность,Отбор,мГруппировки)
	ТекстРазрядность = "";
	ТекстРазрядностьКоличество = "";
	
	ТекстИзмерения = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,мПериодичность);
	ТекстФильтраОбороты = "";
	ТекстОтбораОбороты = "";
	ТекстОтбораИтоговыеОбороты = "";
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораОбороты,,ТекстФильтраОбороты,Новый Структура("СтатьяБюджета"));
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьТекстУсловийОтбора(Отбор,ТекстОтбораИтоговыеОбороты,,"",,Новый Структура("СтатьяБюджета"));
	
	СписокИсключаемыхТиповВнутригрупповыхОборотов = Новый Массив;
	СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОбороты);
	Если Группировки.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)).Количество()>0 ИЛИ ОсновнаяГруппировка=Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеПодразделения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СписокИсключаемыхТиповВнутригрупповыхОборотов.Добавить(Перечисления.фин_ТипыВнутригрупповыхОборотовПоБюджету.ВнутригрупповыеОборотыНаУровнеОрганизации);
	КонецЕсли;
	ВерсииБюджета = Новый Массив;
	ВерсииБюджета.Добавить(фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Бюджет,НачалоПериодаПланирования));
	ВерсииБюджета.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВерсииБюджета",				ВерсииБюджета);
	Запрос.УстановитьПараметр("СписокВГО",					СписокИсключаемыхТиповВнутригрупповыхОборотов);
	Запрос.УстановитьПараметр("ГраницаАктуальности",		?(ГраницаАктуальности='00010101','00010101',КонецДня(ГраницаАктуальности)));
	Запрос.УстановитьПараметр("Бюджет",						Бюджет);
	Запрос.УстановитьПараметр("Сценарий",					Сценарий);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("НачалоПланирования",			НачалоПериодаПланирования);
	Запрос.УстановитьПараметр("ОкончаниеПланирования",		КонецПериодаПланирования);
	
	ТаблицаОтбора.Очистить();
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.Версия";
	НС.Значение = ВерсииБюджета;
	НС.ВидСравнения = "ВСписке";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПометкаУдаления";
	НС.Значение = Ложь;
	НС.ВидСравнения = "Равно";
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "СтатьяБюджета.ПризнакВнутригрупповогоОборота";
	НС.Значение = СписокИсключаемыхТиповВнутригрупповыхОборотов;
	НС.ВидСравнения = "ВСписке";
	Если ГраницаАктуальности<>'00010101' Тогда
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = "Период";
		НС.Значение = ГраницаАктуальности;
		НС.ВидСравнения = "МеньшеИЛИРавно";
	КонецЕсли;
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "Бюджет";
	НС.Значение = Бюджет;
	НС.ВидСравнения = "Равно";
	
	ТекстПоказатели = "";
	Для Каждого Показатель Из Показатели Цикл
		ИмяПоказателя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель);
		Для Каждого ВидАнализа Из АналитическиеПоляСводаКорректировок Цикл
			ИмяПоля = ИмяПоказателя+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.Поле);
			ТекстПоказатели = ТекстПоказатели + ",
			|	Обороты."+ИмяПоля+" КАК "+ИмяПоля;
		КонецЦикла;
	КонецЦикла;
	ВидыПоказателей = Новый Массив;
	ВидыПоказателей.Добавить(Перечисления.фин_ВидыФинансовыхПоказателей.Оборотный);
	ВидыПоказателей.Добавить(Перечисления.фин_ВидыФинансовыхПоказателей.ПустаяСсылка());
	ВидыПоказателей.Добавить(Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый);
	// получим список показателей бюджета
	СписокФинансовыхПоказателей = Новый СписокЗначений;
	ЗапросПоказатели = Новый Запрос;
	ЗапросПоказатели.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя В (&ВидыПоказателей)
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|	И СтатьиБюджета.Версия В (&Версии)
		|	И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&ВГО)";

	ЗапросПоказатели.УстановитьПараметр("ВидыПоказателей", ВидыПоказателей);
	ЗапросПоказатели.УстановитьПараметр("Версии", ВерсииБюджета);
	ЗапросПоказатели.УстановитьПараметр("Владелец", Бюджет);
	ЗапросПоказатели.УстановитьПараметр("ВГО", СписокИсключаемыхТиповВнутригрупповыхОборотов);

	Результат = ЗапросПоказатели.Выполнить();
	СписокФинансовыхПоказателей.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Финансовыйпоказатель"));
	Запрос.УстановитьПараметр("Показатели",				СписокФинансовыхПоказателей);
	// параметры отбора
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
	КонецЦикла;
	
	Запрос.Текст ="	
	|ВЫБРАТЬ
	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель,
	// исходная сумма
	|	-Обороты.КоличествоОборот КАК КоличествоИсходноеЗначение,
	|	-Обороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаИсходноеЗначение,
	|	-Обороты.СуммаУпрОборот КАК СуммаУпрИсходноеЗначение,
	|	-Обороты.СуммаСценарияОборот КАК СуммаСценарияИсходноеЗначение,
	// сумма корректировок
	|	Обороты.КоличествоОборот КАК КоличествоВеличинаКорректировки,
	|	Обороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаВеличинаКорректировки,
	|	Обороты.СуммаУпрОборот КАК СуммаУпрВеличинаКорректировки,
	|	Обороты.СуммаСценарияОборот КАК СуммаСценарияВеличинаКорректировки,
	// сумма отклонений
	|	0 КАК КоличествоОтклоненнаяВеличина,
	|	0 КАК ВалютнаяСуммаОтклоненнаяВеличина,
	|	0 КАК СуммаУпрОтклоненнаяВеличина,
	|	0 КАК СуммаСценарияОтклоненнаяВеличина,
	// сумма итоговая
	|	0 КАК КоличествоРезультирующееЗначение,
	|	0 КАК ВалютнаяСуммаРезультирующееЗначение,
	|	0 КАК СуммаУпрРезультирующееЗначение,
	|	0 КАК СуммаСценарияРезультирующееЗначение"+СтрЗаменить(ТекстИзмерения,"Обороты.ПричинаОтклонения","ЗНАЧЕНИЕ(Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка)")+"
	|ПОМЕСТИТЬ ВТ_ПредварительныеОбороты
	|ИЗ РегистрНакопления.фин_МониторингКорректировок.Обороты(,&ГраницаАктуальности, ,ВЫБОР КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ Организация = &Организация КОНЕЦ И 
	|																							Сценарий = &Сценарий И ПериодПланирования>=&НачалоПланирования И ПериодПланирования<=&ОкончаниеПланирования
	|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+СтрЗаменить(ТекстФильтраОбороты,"ПричинаОтклонения","ЗНАЧЕНИЕ(Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка)"))+") КАК Обороты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель,
	// исходная сумма
	|	Обороты.КоличествоОборот,
	|	Обороты.ВалютнаяСуммаОборот,
	|	Обороты.СуммаУпрОборот,
	|	Обороты.СуммаСценарияОборот,
	// сумма корректировок
	|	0,
	|	0,
	|	0,
	|	0,
	// сумма отклонений
	|	Обороты.КоличествоОборот,
	|	Обороты.ВалютнаяСуммаОборот,
	|	Обороты.СуммаУпрОборот,
	|	Обороты.СуммаСценарияОборот,
	// сумма итоговая
	|	0,
	|	0,
	|	0,
	|	0"+СтрЗаменить(ТекстИзмерения,"Обороты.ПричинаКорректировки","ЗНАЧЕНИЕ(Справочник.фин_ОснованияКорректировокБюджетов.ПустаяСсылка)")+"
	|ИЗ РегистрНакопления.фин_МониторингНепринятияСтрокБюджетов.Обороты(,&ГраницаАктуальности, ,ВЫБОР КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ Организация = &Организация КОНЕЦ И 
	|																							Сценарий = &Сценарий И ПериодПланирования>=&НачалоПланирования И ПериодПланирования<=&ОкончаниеПланирования
	|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+СтрЗаменить(ТекстФильтраОбороты,"ПричинаКорректировки","ЗНАЧЕНИЕ(Справочник.фин_ОснованияКорректировокБюджетов.ПустаяСсылка)"))+") КАК Обороты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель,
	// исходная сумма
	|	Обороты.КоличествоОборот,
	|	Обороты.ВалютнаяСуммаОборот,
	|	Обороты.СуммаУпрОборот,
	|	Обороты.СуммаСценарияОборот,
	// сумма корректировок
	|	0,
	|	0,
	|	0,
	|	0,
	// сумма отклонений
	|	0,
	|	0,
	|	0,
	|	0,
	// сумма итоговая
	|	Обороты.КоличествоОборот,
	|	Обороты.ВалютнаяСуммаОборот,
	|	Обороты.СуммаУпрОборот,
	|	Обороты.СуммаСценарияОборот"+СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстИзмерения,"Обороты.СпособКорректировки","ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.ПустаяСсылка)"),"Обороты.ПричинаОтклонения","ЗНАЧЕНИЕ(Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка)"),"Обороты.ПричинаКорректировки","ЗНАЧЕНИЕ(Справочник.фин_ОснованияКорректировокБюджетов.ПустаяСсылка)")+"
	|ИЗ РегистрНакопления.фин_ОборотыБюджетов.Обороты(,&ГраницаАктуальности, ,ВЫБОР КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ Организация = &Организация КОНЕЦ И 
	|																							Сценарий = &Сценарий И ПериодПланирования>=&НачалоПланирования И ПериодПланирования<=&ОкончаниеПланирования
	|																							И ФинансовыйПоказатель В (&Показатели)"+?(ТекстФильтраОбороты="",""," И "+СтрЗаменить(СтрЗаменить(СтрЗаменить(ТекстФильтраОбороты,"СпособКорректировки","ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.ПустаяСсылка)"),"ПричинаОтклонения","ЗНАЧЕНИЕ(Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка)"),"ПричинаКорректировки","ЗНАЧЕНИЕ(Справочник.фин_ОснованияКорректировокБюджетов.ПустаяСсылка)"))+") КАК Обороты
	|;
	|ВЫБРАТЬ
	|	Обороты.ФинансовыйПоказатель КАК Финансовыйпоказатель"+СтрЗаменить(ТекстИзмерения,"ДополнительныеРазрезы.","")+ТекстПоказатели+"
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ ВТ_ПредварительныеОбороты КАК Обороты
	|;
	|ВЫБРАТЬ 
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.КодСтрокиБюджета КАК КодСтрокиБюджета"+ТекстПоказатели+СтрЗаменить(ТекстИзмерения,"ДополнительныеРазрезы.","")+"
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обороты КАК Обороты
	|		ПО СтатьиБюджета.ФинансовыйПоказатель = Обороты.ФинансовыйПоказатель
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Бюджет И НЕ СтатьиБюджета.ЭтоГруппа И НЕ СтатьиБюджета.ПометкаУдаления И НЕ СтатьиБюджета.ПризнакВнутригрупповогоОборота В (&СписокВГО)  И СтатьиБюджета.Версия В (&ВерсииБюджета)"+?(ТекстОтбораИтоговыеОбороты="",""," И ")+ТекстОтбораИтоговыеОбороты;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьСКД(мГруппировки)
	//получаем схему компоновки данных
	СхемаКомпоновкиДанных=фин_УправлениеОтчетамиБюджетирование.ПолучитьСКД(ЭтотОбъект,мГруппировки,СтруктураПеревода,ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"),КЭШ,"фин_СводКорректировокИОтклоненийПоБюджетам");
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ПолучитьНастройкиСКД()
	Настройки = фин_УправлениеОтчетамиБюджетирование.ПолучитьНастройкиСКД(ЭтотОбъект,КомпоновщикНастроек,СтруктураПеревода,КЭШ,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),"фин_СводКорректировокИОтклоненийПоБюджетам");
	Возврат Настройки;
КонецФункции

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		СтрокаОтбор.Путь = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора);
	КонецЦикла;
	
	//ВЫБОР СХЕМЫ КОМПОНОВКИ И НАСТРОЙКА ПОЛЕЙ НАБОРА ДАННЫХ
	мПериодичность = Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	Если Не ЗначениеЗаполнено(мПериодичность) Тогда
		мПериодичность = "Месяц";
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Параметр_Сценарий.Значение) Тогда
	//	Сообщить("Не указан сценарий!");
	//	Возврат;
	//КонецЕсли;
	
	Если мПериодичность="" Тогда
		Сообщить("Не задана периодичность сценария!");
		Возврат;
	КонецЕсли;
	
	мГруппировки = фин_УправлениеОтчетамиБюджетирование.ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка);
	ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуДанных(мПериодичность,Отбор,мГруппировки);
	СхемаКомпоновкиДанных = ПолучитьСКД(мГруппировки);
	Настройки = ПолучитьНастройкиСКД();

	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	Заголовок=фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("СводКорректировокИОтклонений",ЯзыкОтчета,,КЭШ)+": "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Бюджет,ЯзыкОтчета,,КЭШ)+Символы.ПС+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("Сценарий",ЯзыкОтчета,,КЭШ)+": "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(Сценарий,ЯзыкОтчета,,КЭШ)+Символы.ПС+
		фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(НачалоПериодаПланирования,мПериодичность),ЯзыкОтчета,,КЭШ)+" - "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(КонецПериодаПланирования,мПериодичность),ЯзыкОтчета,,КЭШ);
	фин_УправлениеОтчетамиБюджетирование.ВыполнитьФормированиеОтчета(ЭтотОбъект,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,,Заголовок,фин_ПроцедурыМеханизмовБюджетирования.ВерсииБюджетаЗаПериод(Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования));	
	
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("Бюджет");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("НачалоПериодаПланирования",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериодаПланирования",КонецМесяца(ТекущаяДата()));
//ЗаполнениеПараметров.Вставить("ГраницаАктуальности",ТекущаяДата());
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
ЗаполнениеПараметров.Вставить("Периодичность",Перечисления.фин_Периодичность.Месяц);
ЗаполнениеПараметров.Вставить("ФиксацияКолонок",Перечисления.фин_ФиксируемыеКолонки.Первая);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиПоказателя",12);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиРеквизита",25);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиСтатьиБюджета",25);
ЗаполнениеПараметров.Вставить("РасположениеИтоговОтчета",Перечисления.фин_РасположениеИтоговОтчета.Конец);

ДополнительныеПараметры = Новый Массив;
//ДополнительныеПараметры.Добавить("ГраницаАктуальности");
ДополнительныеПараметры.Добавить("Периодичность");
ДополнительныеПараметры.Добавить("ЯзыкОтчета");
ДополнительныеПараметры.Добавить("ПрименятьРазрядностьПланирования");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("ВыводитьКодыСтрокБюджета");
ПараметрыОформления.Добавить("УпорядочиваниеСтатей");
ПараметрыОформления.Добавить("ФиксацияКолонок");
ПараметрыОформления.Добавить("ШиринаКолонкиРеквизита");
ПараметрыОформления.Добавить("ШиринаКолонкиСтатьиБюджета");
ПараметрыОформления.Добавить("ШиринаКолонкиПоказателя");
ПараметрыОформления.Добавить("ВыводитьГруппыСтатейВнизу");
ПараметрыОформления.Добавить("ПоказателиВОднойКолонке");
ПараметрыОформления.Добавить("АналитическиеПоляВОднойКолонке");
ПараметрыОформления.Добавить("РасположениеИтоговОтчета");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
