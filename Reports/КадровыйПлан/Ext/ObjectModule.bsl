////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Составляет список возможных вариантов отображения
//
// Параметры: 
//  Отчет - объект отчета.
//
// Возвращаемое значение:
//  спиок значений.
//
Функция ПолучитьСписокВариантовОтображенияОтчета() Экспорт

	СписокВариантовОтображения = Новый СписокЗначений;
	СписокВариантовОтображения.Добавить("СводнаяТаблица","Сводная таблица");
	СписокВариантовОтображения.Добавить("Диаграмма","Диаграмма");
	СписокВариантовОтображения.Добавить("Таблица","Таблица");
	Возврат СписокВариантовОтображения

КонецФункции // ПолучитьСписокВариантовОтображенияОтчета

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Кадровый план";
	ОтчетДиаграмма.ИмяРегистра = "-";
	ОтчетДиаграмма.мНазваниеОтчета = "Кадровый план";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КадровыйПлан.Подразделение КАК Подразделение,
	|	КадровыйПлан.Должность КАК Должность,
	|	КадровыйПлан.Валюта КАК Валюта,
	|	КадровыйПлан.ПлановыеЕжемесячныеЗатраты КАК ПлановыеЕжемесячныеЗатраты,
	|	КадровыйПлан.Количество КАК Количество,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА КадровыйПлан.Количество ИНАЧЕ КадровыйПлан.Количество - ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК Вакантно,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Информация КАК СТРОКА(1000)) КАК Информация,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.ДолжностныеИнструкции КАК СТРОКА(1000)) КАК ДолжностныеИнструкции,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Требования КАК СТРОКА(1000)) КАК Требования
	|ИЗ
	|	РегистрСведений.КадровыйПлан.СрезПоследних(&ДатаАктуальности, Решение = &Решение) КАК КадровыйПлан
	|		{
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеРабочиеМеста.Остатки(&ДатаПослеАктуальности) КАК ЗанятыеРабочиеМеста
	|		ПО КадровыйПлан.Должность = ЗанятыеРабочиеМеста.Должность И КадровыйПлан.Подразделение = ЗанятыеРабочиеМеста.Подразделение
	|		}
	|		{
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОРабочихМестах КАК СведенияОРабочихМестах
	|		ПО КадровыйПлан.Должность = СведенияОРабочихМестах.Должность И КадровыйПлан.Подразделение = СведенияОРабочихМестах.Подразделение
	|		}
	|//СОЕДИНЕНИЯ
	|
	|ГДЕ КадровыйПлан.Количество <> 0 или ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ <> 0
	|
	|ИТОГИ СУММА(Количество), СУММА(ЗанятоСтавок), СУММА(Вакантно) ПО
	|	ОБЩИЕ
	|
	|{ВЫБРАТЬ
	|	Подразделение.* КАК Подразделение,
	|	Должность.* КАК Должность,
	|	Валюта.* КАК Валюта,
	|	КадровыйПлан.ПлановыеЕжемесячныеЗатраты,
	|	КадровыйПлан.Количество КАК Количество,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА КадровыйПлан.Количество ИНАЧЕ КадровыйПлан.Количество - ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК Вакантно,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Информация КАК СТРОКА(1000)) КАК Информация,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.ДолжностныеИнструкции КАК СТРОКА(1000)) КАК ДолжностныеИнструкции,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Требования КАК СТРОКА(1000)) КАК Требования
	|	//СВОЙСТВА
	|}
	|
	|{ГДЕ
	|	КадровыйПлан.Подразделение.* КАК Подразделение,
	|	КадровыйПлан.Должность.* КАК Должность,
	|	КадровыйПлан.Валюта.* КАК Валюта,
	|	КадровыйПлан.ПлановыеЕжемесячныеЗатраты,
	|	КадровыйПлан.Количество КАК Количество,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеРабочиеМеста.КоличествоОстаток) ЕСТЬ NULL  ТОГДА КадровыйПлан.Количество ИНАЧЕ КадровыйПлан.Количество - ЗанятыеРабочиеМеста.КоличествоОстаток КОНЕЦ КАК Вакантно,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Информация КАК СТРОКА(1000)) КАК Информация,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.ДолжностныеИнструкции КАК СТРОКА(1000)) КАК ДолжностныеИнструкции,
	|	ВЫРАЗИТЬ(СведенияОРабочихМестах.Требования КАК СТРОКА(1000)) КАК Требования
	|	//СВОЙСТВА
	|   //КАТЕГОРИИ
	|}
	|
	|{УПОРЯДОЧИТЬ ПО
	|	Подразделение.*,
	|	Должность.*,
	|	Валюта.*
	|	//СВОЙСТВА
	|}
	|
	|{ИТОГИ ПО 
	|	Подразделение.*,
	|	Должность.*,
	|	Валюта.*
	|	//СВОЙСТВА
	|}
	|";
	
	// представление полей
	СтруктураПредставлениеПолей = Новый Структура();
	СтруктураПредставлениеПолей.Вставить("Подразделение", "Подразделение");
	СтруктураПредставлениеПолей.Вставить("Валюта", "Валюта");
	СтруктураПредставлениеПолей.Вставить("ПлановыеЕжемесячныеЗатраты", "Плановые ежемесячные затраты");
	СтруктураПредставлениеПолей.Вставить("ЗанятоСтавок", "Занято ставок");
	СтруктураПредставлениеПолей.Вставить("Количество", "Количество рабочих мест (всего)");
	СтруктураПредставлениеПолей.Вставить("ДолжностныеИнструкции", "Должностные обязанности");
	
	// При использовании свойств и категорий в текст запроса добавляются дополнительные поля
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "КадровыйПлан.Подразделение";
		НоваяСтрока.Представление = "Подразделение";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;
		
		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);		
		
		// переписываем структуру для отбора по категориям
		Если ТипЗнч(ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям) <> Тип("Структура") Тогда
			ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям = Новый Структура;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОбщийОтчет.мСтруктураДляОтбораПоКатегориям Цикл
			ОтчетДиаграмма.мСтруктураДляОтбораПоКатегориям.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		// переписываем соответствие назначений
		Если ТипЗнч(ОтчетДиаграмма.мСоответствиеНазначений) <> Тип("Соответствие") Тогда
			ОтчетДиаграмма.мСоответствиеНазначений = Новый Соответствие;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ОбщийОтчет.мСоответствиеНазначений Цикл
			ОтчетДиаграмма.мСоответствиеНазначений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда			
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Подразделение");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Должность");
	
	// список показателей и форматы их представления (в.ч. включаемые по умолчанию)
	ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество рабочих мест (всего)", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("Вакантно", "Вакантно", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ЗанятоСтавок", "Занято рабочих мест", Ложь, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("Количество", "Количество рабочих мест (всего)", Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("Вакантно", "Вакантно", Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("ЗанятоСтавок", "Занято рабочих мест", Ложь, "ЧЦ=15; ЧДЦ=2");
		
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Подразделение");
	МассивОтбора.Добавить("Должность");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// очистка автозаполненных полей построителя
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
	// копирование настроек построителя
	ОтчетДиаграмма.ПостроительОтчета.Текст = ПостроительОтчета.Текст;
	ОтчетДиаграмма.ПостроительОтчета.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки());
	
	// переписываем параметры
	Для Каждого Параметр Из ПостроительОтчета.Параметры Цикл
		ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	
	// параметры отчета
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1; // Дата
	
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("Вакантно", Новый Структура());
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("Количество", Новый Структура());
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ЗанятоСтавок", Новый Структура());
	
	ОтчетДиаграмма.мВыбиратьИмяРегистра = Ложь;
	ОтчетДиаграмма.мРежимВводаПериода = 1;
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("Вакантно", Новый Структура());
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("Количество", Новый Структура());
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("ЗанятоСтавок", Новый Структура());
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОбщийОтчет.ДатаКон+ 1);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

// Выполняет запрос и формирует диаграмму-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьДиаграмму(Диаграмма) Экспорт

	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОтчетДиаграмма.ДатаКон);
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОтчетДиаграмма.ДатаКон+ 1);
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ОтчетДиаграмма.СформироватьОтчет(Диаграмма);

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьСводнуюТаблицу(ДокументРезультат) Экспорт

	ПостроительОтчета = ПолучитьПостроительОтчета();
	
	ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОбщийОтчет.ДатаКон+ 1);
	ПостроительОтчета.Параметры.Вставить("Решение", Перечисления.СостоянияОбъектов.Утвержден);
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);

	ПостроительОтчета.Параметры.Вставить("ДатаНач", ОбщийОтчет.ДатаНач);
	Если ОбщийОтчет.ДатаКон <> '00010101000000' Тогда
		Если ОбщийОтчет.мРежимВводаПериода = 1 Тогда
			ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоДня(ОбщийОтчет.ДатаКон + 60*60*24));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ОбщийОтчет.ДатаКон ));
		КонецЕсли;
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;
	
	//Добавим показатели в выбранные поля
	Для Каждого Показатель Из ОбщийОтчет.Показатели Цикл
		Если Показатель.Использование Тогда

			Попытка
				УправлениеОтчетами.ОбработкаПоказателейДобавитьВВыбранныеПоля(Показатель.Имя, ПостроительОтчета);
			Исключение
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();
	ДокументРезультат.ИсточникДанных = ПостроительОтчета.Результат;
	ОбновлятьОформлениеСводнойТаблицы = ДокументРезультат.Данные.Количество() = 0 и ДокументРезультат.Строки.Количество() = 0;
	Если ОбновлятьОформлениеСводнойТаблицы Тогда
		Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
			ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
			Если ПолеТаблицы.Ресурс Тогда
				ДокументРезультат.Данные.Добавить(ПолеТаблицы)
			Иначе
				ДокументРезультат.Строки.Добавить(ПолеТаблицы)
			КонецЕсли;
		КонецЦикла;
		ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
	КонецЕсли;
	
	//попрячем показатели из доступных полей
	Для Каждого Показатель Из ОбщийОтчет.Показатели Цикл

		Если Показатель.Использование Тогда

			УправлениеОтчетами.ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.Имя, ПостроительОтчета);

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ВариантОтображения = "Таблица";

#КонецЕсли