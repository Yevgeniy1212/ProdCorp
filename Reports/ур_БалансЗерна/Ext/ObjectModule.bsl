Перем мСписокИсточниковФинансирования Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;
Перем РежимРасшифровки Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//КомпоновщикНастроек.Восстановить();
	//НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ВывестиПодписи(Результат);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	Если ЗначениеЗаполнено(Период) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", НачалоДня(Период));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Период", Дата(3999, 11, 1));
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВыборкаДанных = ПолучитьВыборку();
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ВыборкаДанных);
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Функция ПолучитьВыборку()
	
	запрос = Новый Запрос;
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	&ПредставлениеНачалоГода КАК ID,
	|	ур_ЗерноНаСкладахОстатки.Организация,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|	ур_ЗерноНаСкладахОстатки.Склад,
	|	ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|	ур_ЗерноНаСкладахОстатки.Культура,
	|	ур_ЗерноНаСкладахОстатки.Класс,
	|	ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|	Значение(Справочник.ТипыОпераций.ПустаяСсылка) КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|	0 КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&НачалоГода, ) КАК ур_ЗерноНаСкладахОстатки
	|
	|//приход с начала года
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеПриходСНачалаГода КАК ID,
	|	ур_ЗерноНаСкладахОбороты.Организация,
	|	ур_ЗерноНаСкладахОбороты.ВидРесурса,
	|	ур_ЗерноНаСкладахОбороты.Склад,
	|	ур_ЗерноНаСкладахОбороты.Склад.Область,
	|	ур_ЗерноНаСкладахОбороты.Культура,
	|	ур_ЗерноНаСкладахОбороты.Класс,
	|	ур_ЗерноНаСкладахОбороты.ГодУрожая,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПоступлениеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ВозвратЗернаПоставщику)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПеремещениеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ОприходованиеЗерна)
	|		ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперации
	|	ИНАЧЕ ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПереоформлениеРесурсов)
	|				ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперацииПолучателя
	|			ИНАЧЕ Значение(Справочник.ТипыОпераций.ПустаяСсылка)
	|		КОНЕЦ
	|	КОНЕЦ КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесПриход,0)*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесПриход,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|	0 КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Обороты(&НачалоГода, &КонецМесяцаПредыдущегоПериода, Регистратор, ) КАК ур_ЗерноНаСкладахОбороты
	|ГДЕ
	|   ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) <> ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|
	|//расход с начала года
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеРасходСНачалаГода КАК ID,
	|	ур_ЗерноНаСкладахОбороты.Организация,
	|	ур_ЗерноНаСкладахОбороты.ВидРесурса,
	|	ур_ЗерноНаСкладахОбороты.Склад,
	|	ур_ЗерноНаСкладахОбороты.Склад.Область,
	|	ур_ЗерноНаСкладахОбороты.Культура,
	|	ур_ЗерноНаСкладахОбороты.Класс,
	|	ур_ЗерноНаСкладахОбороты.ГодУрожая,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_РеализацияЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПеремещениеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_СписаниеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПереоформлениеРесурсов)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|		ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперации
	|	ИНАЧЕ ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.Сторнирование)
	|			    ТОГДА ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ур_РеализацияЗерна) 
	|								  ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ур_ПеремещениеЗерна)
	|								  ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ур_СписаниеЗерна)
	|								  ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ур_ПереоформлениеРесурсов)
	|								  ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|							ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ДокументОснование.ТипОперации
	|							ИНАЧЕ Значение(Справочник.ТипыОпераций.ПустаяСсылка)
	|					  КОНЕЦ
	|		  КОНЕЦ
	|	КОНЕЦ КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесРасход,0)*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесРасход,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|	0 КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Обороты(&НачалоГода, &КонецМесяцаПредыдущегоПериода, Регистратор, ) КАК ур_ЗерноНаСкладахОбороты	
	|ГДЕ
	|   ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) <> ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|
	|//остатки на начало отчетного месяца
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеНачалоМесяца КАК ID,
	|	ур_ЗерноНаСкладахОстатки.Организация,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|	ур_ЗерноНаСкладахОстатки.Склад,
	|	ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|	ур_ЗерноНаСкладахОстатки.Культура,
	|	ур_ЗерноНаСкладахОстатки.Класс,
	|	ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|	Значение(Справочник.ТипыОпераций.ПустаяСсылка) КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|	0 КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&НачалоМесяца, ) КАК ур_ЗерноНаСкладахОстатки
	|
	|//приход за месяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеПриходМесяц КАК ID,
	|	ур_ЗерноНаСкладахОбороты.Организация,
	|	ур_ЗерноНаСкладахОбороты.ВидРесурса,
	|	ур_ЗерноНаСкладахОбороты.Склад,
	|	ур_ЗерноНаСкладахОбороты.Склад.Область,
	|	ур_ЗерноНаСкладахОбороты.Культура,
	|	ур_ЗерноНаСкладахОбороты.Класс,
	|	ур_ЗерноНаСкладахОбороты.ГодУрожая,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПоступлениеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ВозвратЗернаПоставщику)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПеремещениеЗерна)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ОприходованиеЗерна)
	|		ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперации
	|	ИНАЧЕ ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПереоформлениеРесурсов)
	|				ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперацииПолучателя
	|			ИНАЧЕ Значение(Справочник.ТипыОпераций.ПустаяСсылка)
	|		КОНЕЦ
	|	КОНЕЦ КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесПриход,0)*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесПриход,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|	0 КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Обороты(&НачалоМесяца, &период, Регистратор, ) КАК ур_ЗерноНаСкладахОбороты
	|ГДЕ
	|   ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) <> ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|
	|//расход месяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеРасходМесяц КАК ID,
	|	Вн_РасходПериода.Организация,
	|	Вн_РасходПериода.ВидРесурса,
	|	Вн_РасходПериода.Склад,
	|	Вн_РасходПериода.Склад.Область,
	|	Вн_РасходПериода.Культура,
	|	Вн_РасходПериода.Класс,
	|	Вн_РасходПериода.ГодУрожая,
	|	Вн_РасходПериода.ТипОперации КАК ТипОперации,
	|	Вн_РасходПериода.ЗачтенныйВес+Вн_РасходПериода.Забронировано КАК ЗачтенныйВес,
	|	Вн_РасходПериода.Забронировано КАК Забронировано
	|ИЗ
	|	(ВЫБРАТЬ
	|		ур_ЗерноНаСкладахОбороты.Организация,
	|		ур_ЗерноНаСкладахОбороты.ВидРесурса,
	|		ур_ЗерноНаСкладахОбороты.Склад,
	|		ур_ЗерноНаСкладахОбороты.Склад.Область,
	|		ур_ЗерноНаСкладахОбороты.Культура,
	|		ур_ЗерноНаСкладахОбороты.Класс,
	|		ур_ЗерноНаСкладахОбороты.ГодУрожая,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_РеализацияЗерна)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПеремещениеЗерна)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_СписаниеЗерна)
	|			ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперации
	|		ИНАЧЕ ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) = ТИП(Документ.ур_ПереоформлениеРесурсов)
	|					ТОГДА ур_ЗерноНаСкладахОбороты.Регистратор.ТипОперации
	|				ИНАЧЕ Значение(Справочник.ТипыОпераций.ПустаяСсылка)
	|			  КОНЕЦ
	|		КОНЕЦ КАК ТипОперации,
	|   	ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|			  Тогда ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесРасход,0)*1000
	|		  	Иначе ЕстьNull(ур_ЗерноНаСкладахОбороты.ЗачтенныйВесРасход,0)
	|		КОНЕЦ КАК ЗачтенныйВес,
	|		0 КАК Забронировано
	|	ИЗ
	|		РегистрНакопления.ур_ЗерноНаСкладах.Обороты(&НачалоМесяца, &Период, Регистратор, ) КАК ур_ЗерноНаСкладахОбороты	
	|	ГДЕ
	|   	ТИПЗНАЧЕНИЯ(ур_ЗерноНаСкладахОбороты.Регистратор) <> ТИП(Документ.ур_ПереоформлениеЗерновыхРасписок)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ур_ЗерноНаСкладахОстатки.Организация,
	|		ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|		ур_ЗерноНаСкладахОстатки.Склад,
	|		ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|		ур_ЗерноНаСкладахОстатки.Культура,
	|		ур_ЗерноНаСкладахОстатки.Класс,
	|		ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|		ЕстьNull(ОстаткиЗабронированные.ТипОперации,Значение(Справочник.ТипыОпераций.ПустаяСсылка)) КАК ТипОперации,
	|   	0 КАК ЗачтенныйВес,
	|   	ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0)*1000
	|		  Иначе ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0)
	|		КОНЕЦ КАК Забронировано
	|	ИЗ
	|		РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&Период, ) КАК ур_ЗерноНаСкладахОстатки
	|
	|	Левое Соединение РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(&Период, ) КАК ОстаткиЗабронированные
	|    ПО  ур_ЗерноНаСкладахОстатки.Организация=ОстаткиЗабронированные.Организация 
	|		И ур_ЗерноНаСкладахОстатки.ВидРесурса=ОстаткиЗабронированные.ВидРесурса
	|		И ур_ЗерноНаСкладахОстатки.Склад=ОстаткиЗабронированные.Склад
	|		И ур_ЗерноНаСкладахОстатки.Зерноваярасписка=ОстаткиЗабронированные.Зерноваярасписка
	|		И ур_ЗерноНаСкладахОстатки.Культура=ОстаткиЗабронированные.Культура
	|		И ур_ЗерноНаСкладахОстатки.Класс=ОстаткиЗабронированные.Класс
	|		И ур_ЗерноНаСкладахОстатки.ГодУрожая=ОстаткиЗабронированные.ГодУрожая
	|   	
	|   ) КАК Вн_РасходПериода
	|ГДЕ
	|   (Вн_РасходПериода.ЗачтенныйВес+Вн_РасходПериода.Забронировано) <> 0
	|
	|//остатки на начало отчетной даты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	&ПредставлениеПериода КАК ID,
	|	ур_ЗерноНаСкладахОстатки.Организация,
	|	ур_ЗерноНаСкладахОстатки.ВидРесурса,
	|	ур_ЗерноНаСкладахОстатки.Склад,
	|	ур_ЗерноНаСкладахОстатки.Склад.Область КАК Область,
	|	ур_ЗерноНаСкладахОстатки.Культура,
	|	ур_ЗерноНаСкладахОстатки.Класс,
	|	ур_ЗерноНаСкладахОстатки.ГодУрожая,
	|	Значение(Справочник.ТипыОпераций.ПустаяСсылка) КАК ТипОперации,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда (ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)-ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0))*1000
	|		  Иначе ЕстьNull(ур_ЗерноНаСкладахОстатки.ЗачтенныйВесОстаток,0)-ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0)
	|	КОНЕЦ КАК ЗачтенныйВес,
	|   ВЫБОР КОГДА &ЕдиницаИзмерения = Значение(Перечисление.ур_ВариантыВыводаОтчетовПоУчетуЗерна.килограммы)
	|		  Тогда ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0)*1000
	|		  Иначе ЕстьNull(ОстаткиЗабронированные.ЗачтенныйВесОстаток,0)
	|	КОНЕЦ КАК Забронировано
	|ИЗ
	|	РегистрНакопления.ур_ЗерноНаСкладах.Остатки(&Период, ) КАК ур_ЗерноНаСкладахОстатки
	|
	|	Левое Соединение РегистрНакопления.ур_ЗабронированноеЗерно.Остатки(&Период, ) КАК ОстаткиЗабронированные
	|    ПО  ур_ЗерноНаСкладахОстатки.Организация=ОстаткиЗабронированные.Организация 
	|		И ур_ЗерноНаСкладахОстатки.ВидРесурса=ОстаткиЗабронированные.ВидРесурса
	|		И ур_ЗерноНаСкладахОстатки.Склад=ОстаткиЗабронированные.Склад
	|		И ур_ЗерноНаСкладахОстатки.Зерноваярасписка=ОстаткиЗабронированные.Зерноваярасписка
	|		И ур_ЗерноНаСкладахОстатки.Культура=ОстаткиЗабронированные.Культура
	|		И ур_ЗерноНаСкладахОстатки.Класс=ОстаткиЗабронированные.Класс
	|		И ур_ЗерноНаСкладахОстатки.ГодУрожая=ОстаткиЗабронированные.ГодУрожая
	|";
	
	НачалоГода = НачалоДня(НачалоГода(Период));
	НачалоМесяца = ?(День(период)=1,НачалоДня(НачалоМесяца(Период-86400)),НачалоДня(НачалоМесяца(Период)));
	КонецМесяцаПредыдущегоПериода = Конецдня(НачалоМесяца-86400);	
	
	Запрос.УстановитьПараметр("ПредставлениеНачалоГода","1. Наличие на "+Формат(НачалоГода, "ДФ=dd.MM.yyyy")+" в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеПриходСНачалаГода","2. Приход в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеРасходСНачалаГода","3. Расход в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеНачалоМесяца","4. Наличие на "+Формат(НачалоМесяца, "ДФ=dd.MM.yyyy")+" в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеПриходМесяц","5. Приход в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеРасходМесяц","6. Расход в т.ч.");
	Запрос.УстановитьПараметр("ПредставлениеПериода","7. Наличие на "+Формат(Период, "ДФ=dd.MM.yyyy")+" в т.ч.");
	Запрос.УстановитьПараметр("НачалоГода",НачалоГода);
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца);
	Запрос.УстановитьПараметр("КонецМесяцаПредыдущегоПериода",КонецМесяцаПредыдущегоПериода);
	Запрос.УстановитьПараметр("Период",НачалоДня(Период));
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",ЕдиницаИзмеренияОтчета);
	
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводЗаголовкаСпециализированногоОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
		
	ЗаголовокОтчета = "Баланс зерна " + " с " + Формат(НачалоГода(Период), "ДФ=dd.MM.yyyy")+ " по " + Формат(Период, "ДФ=dd.MM.yyyy")+" ("+ЕдиницаИзмеренияОтчета+")";

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
		
КонецФункции

Процедура ВывестиПодписи(Результат)
	
	// выводим подвал
	Макет = ПолучитьОбщийМакет("ПодписиОтчета");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подписи");
	
	//организацию берем также первую из списка
	ИскомаяОрганизация = мСписокСтруктурныхЕдиниц[0].Значение;
	Если Не ЗначениеЗаполнено(ИскомаяОрганизация) Тогда
		ИскомаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
																							           "ОсновнаяОрганизация");             
	КонецЕсли;
																								   
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(ИскомаяОрганизация, КонецПериода, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ОбластьПодвал.Параметры.Заполнить(ОтветЛица);															   
	
	Результат.Вывести(ОбластьПодвал);

КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	//ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СтруктураНастроек.Вставить("мСписокПодразделений", мСписокПодразделений);
	СтруктураНастроек.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	СтруктураНастроек.Вставить("мДеревоСтруктурныхЕдиниц", мДеревоСтруктурныхЕдиниц);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);

КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокИсточниковФинансирования = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;