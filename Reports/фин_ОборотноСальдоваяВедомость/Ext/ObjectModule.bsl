Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	
	Если Показатели.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны показатели отчета! Отчет не сформирован");
		Возврат;
	КонецЕсли;
	
	ТекстФильтрОстатки = "";
	МассивСубконто = Новый Массив;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
			ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛи СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
			ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии Тогда
			ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
			ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
			ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Валюта "+ТекстУсловия;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
			ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Организация "+ТекстУсловия;
		Иначе
			НомерСубконто = 0;
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
			Если МассивСубконто.Найти(Разрез)=Неопределено Тогда
				МассивСубконто.Добавить(Разрез);
				НомерСубконто = МассивСубконто.Количество();
			Иначе
				НомерСубконто = МассивСубконто.Найти(Разрез)+1;
			КонецЕсли;
			ТекстФильтрОстатки = ТекстФильтрОстатки + ?(ТекстФильтрОстатки="",""," И ") +"Субконто"+Строка(НомерСубконто)+" "+ТекстУсловия;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеПолейИзмерениям = Новый Соответствие;
	ДополнительныеПоля = Новый Массив;
	
	Для Инд = 1 По МассивСубконто.Количество() Цикл
		ДополнительныеПоля.Добавить("Субконто"+Строка(Инд));
	КонецЦикла;
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	// установка текста условия в текст запроса
	СхемаКомпоновкиДанных.НаборыДанных["Обороты"].Запрос = ТекстЗапросаОбороты(ТекстФильтрОстатки,МассивСубконто,ДополнительныеПоля,ДополнительныеПараметрыЗапроса);
	СхемаКомпоновкиДанных.НаборыДанных["Обороты"].Поля.Найти("Счет").Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Счет",ЯзыкОтчета);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//СхемаКомпоновкиДанных.МакетыГруппировок.Очистить();
	НомерМакета = 1;
	Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
		СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти("Период").ВыражениеПредставления = "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(Период,&Периодичность,&ЯзыкОтчета)";
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КонецЕсли;
	//установа параметров запроса
	Если МассивСубконто.Количество()>0 Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидыСубконто",МассивСубконто);
	КонецЕсли;
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = "ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекстУсловия,СтрокаОтбор.Значение);
	КонецЦикла;
	
	Для Каждого ДопПараметр Из ДополнительныеПараметрыЗапроса Цикл
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ДопПараметр.Ключ,ДопПараметр.Значение);
	КонецЦикла;
	
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстНачальноеСальдо",фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СальдоНаНачало",ЯзыкОтчета));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОбороты",фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Оборот",ЯзыкОтчета));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстКонечноеСальдо",фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СальдоНаКонец",ЯзыкОтчета));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность",ПериодичностьОтчета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",Сценарий);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",НачалоПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",КонецДня(КонецПериода));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПоСубсчетам",ПоСубсчетам);
	Если МассивСубконто.Количество()>0 Тогда
		СписокСубконто = Новый СписокЗначений;
		СписокСубконто.ЗагрузитьЗначения(МассивСубконто);
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидыСубконто",СписокСубконто);
	КонецЕсли;
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	Таблица.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов").Использование = Истина;
	Таблица.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов").Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	Таблица.ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов").Использование = Истина;
	Таблица.ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов").Значение = РасположениеИтоговКомпоновкиДанных.Конец;
	
	ГруппаПолей = Таблица.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	//ГруппаПолей.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(Группа.Значение,ЯзыкОтчета);
	ГруппаПолей.Использование=Истина;
	ГруппаПолей.Расположение=РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Для Каждого Показатель Из Показатели Цикл
		Имя =  фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель);
		Дт = ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Дт.Использование=Истина;
		Дт.Поле = Новый ПолеКомпоновкиДанных(Имя);
		Дт.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(Имя,ЯзыкОтчета);
	КонецЦикла;
	
	ПолеСчет = Таблица.Строки.Добавить();
	ПолеСчет.Использование = Истина;
	ПолеРазрезаАналитики=ПолеСчет.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеРазрезаАналитики.Использование	= Истина;
	ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Счет");
	ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ВыбранныеПоляДляТекущей=ПолеСчет.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляТекущей.Использование=Истина;
	
	Порядок = ПолеСчет.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Порядок.Использование = Истина;
	Порядок.Поле = Новый ПолеКомпоновкиДанных("Счет");
	Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	ПолеСчет.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
	ПолеСчет.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе;
	
	РодительскаяГруппировка = ПолеСчет;
	
	
	ПолеКорсчет = Таблица.Колонки.Добавить();
	ПолеКорсчет.Использование = Истина;
	ПолеРазрезаАналитики=ПолеКорсчет.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеРазрезаАналитики.Использование	= Истина;
	ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Колонка");
	
	ПолеРазрезаАналитики=ПолеКорсчет.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеРазрезаАналитики.Использование	= Истина;
	ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Порядок");
	//ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ВыбранныеПоляДляТекущей=ПолеКорсчет.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляТекущей.Использование=Истина;
	
	ПолеКорсчет.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
	
	Порядок = ПолеКорсчет.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Порядок.Использование = Истина;
	Порядок.Поле = Новый ПолеКомпоновкиДанных("Колонка");
	Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	
	СписокСчетовПоСубконто = Новый СписокЗначений;
	СписокСчетовПоСубконто.ЗагрузитьЗначения(ДетализацияСчетов.Выгрузить(Новый Структура("ПоСубконто",Истина)).ВыгрузитьКолонку("Счет"));
	Если ПоСубсчетам Тогда
		Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
			ПолеПериод = РодительскаяГруппировка.Структура.Добавить();
			ПолеПериод.Использование = Истина;
			ПолеРазрезаАналитики=ПолеПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеРазрезаАналитики.Использование	= Истина;
			ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Период");
			//ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ВыбранныеПоляДляТекущей=ПолеПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = ПолеПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
			ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе;
			Отбор = ПолеПериод.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
			Отбор.ПравоеЗначение = СписокСчетовПоСубконто;
			
			ПолеПериод.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ПолеПериод.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
			ПолеКорСубконто = РодительскаяГруппировка.Структура.Добавить();
			ПолеКорСубконто.Использование = Истина;
			ПолеРазрезаАналитики=ПолеКорСубконто.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеРазрезаАналитики.Использование	= Истина;
			ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Субконто"+Строка(Инд));
			//ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ВыбранныеПоляДляТекущей=ПолеКорСубконто.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = ПолеКорСубконто.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных("Субконто"+Строка(Инд));
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеКорСубконто.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
			ПолеКорСубконто.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе;
			
			Отбор = ПолеКорСубконто.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто"+Строка(Инд));
			
			Если Инд = 1 Тогда
				Отбор = ПолеКорСубконто.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
				Отбор.ПравоеЗначение = СписокСчетовПоСубконто;
			КонецЕсли;
			
			ПолеКорСубконто.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ПолеКорСубконто.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			
			РодительскаяГруппировка = ПолеКорСубконто;
			
			Если ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
				ПолеПериод = РодительскаяГруппировка.Структура.Добавить();
				ПолеПериод.Использование = Истина;
				ПолеРазрезаАналитики=ПолеПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	= Истина;
				ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Период");
				//ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ВыбранныеПоляДляТекущей=ПолеПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				ВыбранныеПоляДляТекущей.Использование=Истина;
				
				Порядок = ПолеПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				Порядок.Использование = Истина;
				Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
				Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
				ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
				ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе;
				Если Инд = 1 Тогда
					ОтборГруппа = ПолеПериод.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ОтборГруппа.Использование = Истина;
					ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					Отбор = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
					Отбор.ПравоеЗначение = СписокСчетовПоСубконто;
					Отбор = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто"+Строка(Инд+1));
				ИначеЕсли Инд<>5 Тогда
					Отбор = ПолеКорСубконто.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто"+Строка(Инд+1));
				КонецЕсли;
				
				ПолеПериод.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				ПолеПериод.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПериодичностьОтчета) Тогда
		ПолеПериод = РодительскаяГруппировка.Структура.Добавить();
		ПолеПериод.Использование = Истина;
		ПолеРазрезаАналитики=ПолеПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРазрезаАналитики.Использование	= Истина;
		ПолеРазрезаАналитики.Поле			= Новый ПолеКомпоновкиДанных("Период");
		ПолеРазрезаАналитики.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		ВыбранныеПоляДляТекущей=ПолеПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
		
		Порядок = ПолеПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Использование = Истина;
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
		ПолеПериод.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных.Вместе;
		
		РодительскаяГруппировка = ПолеПериод;
	КонецЕсли;	
	
	
	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Попытка
		МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,КомпоновщикНастроек.Настройки,ДанныеРасшифровки);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//СхемаКомпоновкиДанных.НаборыДанных.Основной.Поля.Найти("Период").ВыражениеПредставления="фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период,"""+Периодичность+""")";
	
	//ВЫПОЛНЕНИЕ КОМПОНОВКИ ДАННЫХ
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	//ВЫВОД РЕЗУЛЬТАТА В ТАБЛИЧНЫЙ ДОКУМЕНТ
	ДокументРезультат.Очистить();
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//инициализация начала вывода
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
	Граница= ДокументРезультат.ФиксацияСверху;
	Для Инд = 1 по ДокументРезультат.ШиринаТаблицы Цикл
		ДокументРезультат.Область("R1C"+Строка(Инд)+":R"+Строка(Граница)+"C"+строка(Инд)).Объединить();
		ДокументРезультат.Область("R1C"+Строка(Инд)+":R"+Строка(Граница)+"C"+строка(Инд)).ВысотаСтроки=6;
	КонецЦикла;
	ОбластьВставляемая = ДокументРезультат.Область("C2");
	ДокументРезультат.ВставитьОбласть(ОбластьВставляемая,ДокументРезультат.Область("C2"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ДокументРезультат.Область("C2").Очистить(Истина,Ложь,Ложь);
	ДокументРезультат.Область("C2").ГоризонтальноеПоложение =ГоризонтальноеПоложение.Лево;
	ДокументРезультат.Область("C2").РазмещениеТекста =ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ДокументРезультат.ФиксацияСлева = 2;	
	МассивИменПоказателей = Новый Массив;
	Для Каждого Показатель Из Показатели Цикл
		МассивИменПоказателей.Добавить(фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель),ЯзыкОтчета));
	КонецЦикла;
	НачальнаяЯчейка = Граница;
	Пока НачальнаяЯчейка < ДокументРезультат.ВысотаТаблицы Цикл
		Для Каждого Имя Из МассивИменПоказателей Цикл
			НачальнаяЯчейка = НачальнаяЯчейка + 1;
			ДокументРезультат.Область("R"+Строка(НачальнаяЯчейка)+"C2").Текст = Имя;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	ДоступныеПоказатели = Новый СписокЗначений;
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр);
	ДоступныеГруппировки = Новый СписокЗначений;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта,"Валюта операции");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Организация");
КонецПроцедуры

Функция ТекстЗапросаОбороты(ТекстФильтрОстатки,МассивВидовСубконто,ДополнительныеПоля,ДополнительныеПараметрыЗапроса)
	ТекстПоля = "";
	Для Каждого Поле Из ДополнительныеПоля Цикл
		Если Найти(Поле,"Субконто")=0 Тогда
			Продолжить;
		КонецЕсли;
		ТекстПоля = ТекстПоля+",
		|	Обороты."+Поле;
	КонецЦикла;
	ТаблицаСоответствий = Новый Соответствие;
	ВыборкаСчета = ПланыСчетов.фин_Бюджетирование.Выбрать();
	Пока ВыборкаСчета.Следующий() Цикл
		Выводимый = ВыборкаСчета.Ссылка;
		Если ПоСубсчетам Тогда
			РодительСчета = ВыборкаСчета.Родитель;
			Пока ЗначениеЗаполнено(РодительСчета) Цикл
				Если ДетализацияСчетов.НайтиСтроки(Новый Структура("Счет,ПоСубсчетам",РодительСчета,Ложь)).Количество()>0 Тогда
					Выводимый = РодительСчета;
				КонецЕсли;
				РодительСчета = РодительСчета.Родитель;
			КонецЦикла;
		Иначе
			РодительСчета = ВыборкаСчета.Родитель;
			Пока ЗначениеЗаполнено(РодительСчета) Цикл
				Если ДетализацияСчетов.НайтиСтроки(Новый Структура("Счет,ПоСубсчетам",РодительСчета,Истина)).Количество()=0 Тогда
					Выводимый = РодительСчета;
				КонецЕсли;
				РодительСчета = РодительСчета.Родитель;
			КонецЦикла;
		КонецЕсли;
		ТаблицаСоответствий.Вставить(ВыборкаСчета.Ссылка,Выводимый);
	КонецЦикла;
	ТекстСчета = "ВЫБОР";
	НомерПараметра = 1;
	Для Каждого Соответствие Из ТаблицаСоответствий Цикл
		ТекстСчета = ТекстСчета+"
		|	КОГДА Обороты.Счет=&Счет"+Строка(НомерПараметра)+"
		|		ТОГДА &Счет"+Строка(НомерПараметра+1);
		ДополнительныеПараметрыЗапроса.Вставить("Счет"+Строка(НомерПараметра),Соответствие.Ключ);
		ДополнительныеПараметрыЗапроса.Вставить("Счет"+Строка(НомерПараметра+1),Соответствие.Значение);
		НомерПараметра = НомерПараметра + 2;
	КонецЦикла;
	ТекстСчета = ТекстСчета + "
	|КОНЕЦ";
	Текст = "ВЫБРАТЬ
	|	Обороты.Счет,
	|	Обороты.Валюта,
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.Период КАК Период,
	|	Обороты.КоличествоНачальныйОстатокДт,
	|	Обороты.КоличествоНачальныйОстатокКт,
	|	Обороты.КоличествоКонечныйОстатокДт,
	|	Обороты.КоличествоКонечныйОстатокКт,
	|	Обороты.КоличествоОборотДт,
	|	Обороты.КоличествоОборотКт,
	|	Обороты.СуммаУпрНачальныйОстатокДт,
	|	Обороты.СуммаУпрНачальныйОстатокКт,
	|	Обороты.СуммаУпрКонечныйОстатокДт,
	|	Обороты.СуммаУпрКонечныйОстатокКт,
	|	Обороты.СуммаУпрОборотДт,
	|	Обороты.СуммаУпрОборотКт,
	|	Обороты.ВалютнаяСуммаНачальныйОстатокДт,
	|	Обороты.ВалютнаяСуммаНачальныйОстатокКт,
	|	Обороты.ВалютнаяСуммаКонечныйОстатокДт,
	|	Обороты.ВалютнаяСуммаКонечныйОстатокКт,
	|	Обороты.ВалютнаяСуммаОборотДт,
	|	Обороты.ВалютнаяСуммаОборотКт,
	|	Обороты.СуммаСценарияНачальныйОстатокДт,
	|	Обороты.СуммаСценарияНачальныйОстатокКт,
	|	Обороты.СуммаСценарияКонечныйОстатокДт,
	|	Обороты.СуммаСценарияКонечныйОстатокКт,
	|	Обороты.СуммаСценарияОборотДт,
	|	Обороты.СуммаСценарияОборотКт,
	|	Обороты.Организация"+ТекстПоля+"
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		"+ТекстСчета+" КАК Счет,
	|		Обороты.Валюта КАК Валюта,
	|		Обороты.Субконто1 КАК Субконто1,
	|		Обороты.Субконто2 КАК Субконто2,
	|		Обороты.Субконто3 КАК Субконто3,
	|		Обороты.Субконто4 КАК Субконто4,
	|		Обороты.Субконто5 КАК Субконто5,
	|		"+?(ЗначениеЗаполнено(ПериодичностьОтчета),"Обороты.Период","ДАТАВРЕМЯ(1, 1, 1)")+" КАК Период,
	|		Обороты.КоличествоНачальныйОстатокДт КАК КоличествоНачальныйОстатокДт,
	|		Обороты.КоличествоНачальныйОстатокКт КАК КоличествоНачальныйОстатокКт,
	|		Обороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
	|		Обороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
	|		Обороты.КоличествоОборотДт КАК КоличествоОборотДт,
	|		Обороты.КоличествоОборотКт КАК КоличествоОборотКт,
	|		Обороты.СуммаУпрНачальныйОстатокДт КАК СуммаУпрНачальныйОстатокДт,
	|		Обороты.СуммаУпрНачальныйОстатокКт КАК СуммаУпрНачальныйОстатокКт,
	|		Обороты.СуммаУпрКонечныйОстатокДт КАК СуммаУпрКонечныйОстатокДт,
	|		Обороты.СуммаУпрКонечныйОстатокКт КАК СуммаУпрКонечныйОстатокКт,
	|		Обороты.СуммаУпрОборотДт КАК СуммаУпрОборотДт,
	|		Обороты.СуммаУпрОборотКт КАК СуммаУпрОборотКт,
	|		Обороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
	|		Обороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
	|		Обороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалютнаяСуммаКонечныйОстатокДт,
	|		Обороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалютнаяСуммаКонечныйОстатокКт,
	|		Обороты.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
	|		Обороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
	|		Обороты.СуммаСценарияНачальныйОстатокДт КАК СуммаСценарияНачальныйОстатокДт,
	|		Обороты.СуммаСценарияНачальныйОстатокКт КАК СуммаСценарияНачальныйОстатокКт,
	|		Обороты.СуммаСценарияКонечныйОстатокДт КАК СуммаСценарияКонечныйОстатокДт,
	|		Обороты.СуммаСценарияКонечныйОстатокКт КАК СуммаСценарияКонечныйОстатокКт,
	|		Обороты.СуммаСценарияОборотДт КАК СуммаСценарияОборотДт,
	|		Обороты.СуммаСценарияОборотКт КАК СуммаСценарияОборотКт,
	|		Обороты.Организация КАК Организация"+ТекстПоля+"
	|	ИЗ
	|		РегистрБухгалтерии.фин_Бюджетирование.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,"+?(ЗначениеЗаполнено(ПериодичностьОтчета),Строка(ПериодичностьОтчета),"")+", , "+?(ВыводитьЗабалансовыеСчета,"","Счет.Забалансовый=Ложь")+","+?(МассивВидовСубконто.Количество()=0,"","&ВидыСубконто")+" , Сценарий = &Сценарий"+?(ТекстФильтрОстатки="",""," И "+ТекстФильтрОстатки)+") КАК Обороты) КАК Обороты
	|;
	
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.НачальноеСальдоДт) КАК Колонка,
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоНачальныйОстатокДт КАК Количество,
	|	Обороты.СуммаУпрНачальныйОстатокДт КАК СуммаУпр,
	|	Обороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСумма,
	|	Обороты.СуммаСценарияНачальныйОстатокДт КАК СуммаСценария,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	2,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.НачальноеСальдоКт),
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоНачальныйОстатокКт,
	|	Обороты.СуммаУпрНачальныйОстатокКт,
	|	Обороты.ВалютнаяСуммаНачальныйОстатокКт,
	|	Обороты.СуммаСценарияНачальныйОстатокКт,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	3,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.ОборотДт),
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоОборотДт,
	|	Обороты.СуммаУпрОборотДт,
	|	Обороты.ВалютнаяСуммаОборотДт,
	|	Обороты.СуммаСценарияОборотДт,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	5,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.ОборотКт),
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоОборотКт,
	|	Обороты.СуммаУпрОборотКт,
	|	Обороты.ВалютнаяСуммаОборотКт,
	|	Обороты.СуммаСценарияОборотКт,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	7,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.КонечноеСальдоДт),
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоКонечныйОстатокДт,
	|	Обороты.СуммаУпрКонечныйОстатокДт,
	|	Обороты.ВалютнаяСуммаКонечныйОстатокДт,
	|	Обороты.СуммаСценарияКонечныйОстатокДт,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Обороты.Счет,
	|	8,
	|	ЗНАЧЕНИЕ(Справочник.фин_СлужебныеТерминыБюджетирования.КонечноеСальдоКт),
	|	Обороты.Субконто1,
	|	Обороты.Субконто2,
	|	Обороты.Субконто3,
	|	Обороты.Субконто4,
	|	Обороты.Субконто5,
	|	Обороты.КоличествоКонечныйОстатокКт,
	|	Обороты.СуммаУпрКонечныйОстатокКт,
	|	Обороты.ВалютнаяСуммаКонечныйОстатокКт,
	|	Обороты.СуммаСценарияКонечныйОстатокКт,
	|	Обороты.Валюта,
	|	Обороты.Период,
	|	Обороты.Организация"+ТекстПоля+"
	|ИЗ
	|	ВТ_Остатки КАК Обороты";
	Возврат Текст;
КонецФункции

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
//ПереченьОсновныхРеквизитов.Добавить("ПериодичностьОтчета");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("НачалоПериода",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериода",КонецМесяца(ТекущаяДата()));

ДополнительныеПараметры = Новый Массив;
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
