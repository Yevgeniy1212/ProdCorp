#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит имя пространства имен, использующееся
// для идентификации модели типов XDTO.
Перем ИмяПакета Экспорт;

// Хранит таблицу значений - состав показателей для передачи данных.
Перем мТаблицаПоказателейДляПередачиДанных Экспорт;

// Хранит таблицу форматов
// для корректной выгрузки отчета в XML.
Перем мТаблицаФорматов Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;
// Хранит данные отчета.
Перем мСписокФормБезИерархии Экспорт;

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаПоказателей Экспорт;

// Переменная хранит начало периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;

// Переменная хранит начало периода построения отчета
Перем мДатаКонцаПериодаОтчета  Экспорт;

// Переменная хранит периодичность отчета
Перем мПериодичность Экспорт;


// Переменная хранит год периода формирования отчета.
Перем мГод Экспорт;

// Переменная хранит квартал периода формирования отчета.
Перем мКвартал Экспорт;

// Переменная хранит месяц периода формирования отчета.
Перем мМесяц Экспорт;

//количество строк, в многострочных таблицах
Перем мКоличествоНаЛисте Экспорт;

// Хранит ФИО исполнителя 
Перем мИсполнитель Экспорт;

//хранит области, на которых последний раз 
//спозиционировался пользователь
//запоминается при закрытии формы
Перем мАктивныеОбласти Экспорт;

//Переменная хранит список страниц отчета на печать
Перем мТаблицаСтраницНаПечать Экспорт;

// Выбранная форма
Перем мВыбраннаяФорма Экспорт;

// Открытая в данный момент форма рег.отчета
Перем мФорма Экспорт;

// Признак, определяющий многострочность формы
Перем МногострочностьФормы;

// Количество страниц
Перем ВсегоСтраниц Экспорт;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым строится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

// Хранит дерево настройки страниц.
Перем мДеревоНастройкиСтраниц Экспорт;

// Хранит список сохранения
Перем мСписокСохранения Экспорт;


// Хранит макет, содержащий представление многострочных форм
// Равен "Неопределено", если отчет не содержит многострочных форм
//                       и соответственно в таких отчетах макет не создается
Перем мМакет Экспорт;

// Заполняет структуру отчета
//
Процедура ЗаполнитьСтруктуруФормОтчета()

	//записываем все формы отчета в структуру
	Макет        = ПолучитьМакет("Показатели");
	Префикс      = Прав(мВыбраннаяФорма,7);
	мСтруктураОтчета = Новый Структура;
	ТаблицаУпорядочивания = Новый ТаблицаЗначений();
	ТаблицаУпорядочивания.Колонки.Добавить("Область");
	ТаблицаУпорядочивания.Колонки.Добавить("Верх");
	Для  НомерОбласти = 0 По  Макет.Области.Количество() -1 Цикл
		Область = Макет.Области[НомерОбласти];
		Если Лев(Область.Имя,8) <> "Документ" И Прав(Область.Имя,7) = Префикс Тогда
			НоваяСтрока = ТаблицаУпорядочивания.Добавить();
			НоваяСтрока.Область = Область;
			НоваяСтрока.Верх = Область.Верх;			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУпорядочивания.Сортировать("Верх");
	Для Каждого Строка Из ТаблицаУпорядочивания Цикл			
		
		ИмяФормы     = СокрП(Макет.Область(Строка.Верх, 1).Текст);
		//объявляем основную структуру отчета
		мСтруктураОтчета.Вставить(ИмяФормы);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 // Выполняет начальные настройки параметров отчета.
// По данным макета "Показатели" формирует:
//   - состав показателей отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЗаполнитьСтруктуруФормОтчета();
	
	мСписокНезаполняемыхФорм = Новый СписокЗначений;
	
	Показатели = ПолучитьМакет("Показатели");
	мТаблицаПоказателей.Очистить();
	СоответствиеАтрибутов = Новый Соответствие();
	ЗаполнениеАтрибутов = Ложь;
	НоваяСтрока = Неопределено;
	ИмяСтраницы = "";
	Для Каждого ТекОбласть Из Показатели.Области Цикл
		ИмяФормы      = ТекОбласть.Имя;
				
		Префикс = Прав(мВыбраннаяФорма,7);
		Если  Прав(ИмяФормы,7) = Префикс Тогда
			//незаполняемая, но выгружаемая форма
			Если ЭтотОбъект.Метаданные().Формы.Найти(ИмяФормы)= Неопределено Тогда
				КодПоказателя          = СокрП(Показатели.Область(ТекОбласть.Верх, 1).Текст);
				мСписокНезаполняемыхФорм.Добавить(КодПоказателя,ИмяФормы);				
				Продолжить;
			КонецЕсли;

			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя          = СокрП(Показатели.Область(Ном, 1).Текст);
			КодПоказателяПоФорме   = СокрП(Показатели.Область(Ном, 2).Текст);
			КодЛиста               = СокрП(Показатели.Область(Ном, 5).Текст);

			//Признак многострочности формы, если есть - то ставиться *
			Многострочность = СокрП(Показатели.Область(Ном,3).Текст);
			
			ПризнакФлажка   = СокрП(Показатели.Область(Ном,4).Текст);
			Если Лев(КодПоказателя,4)= "form" Тогда
				ИмяФормыXML = КодПоказателя;
			КонецЕсли;
						
			Если Лев(КодПоказателя,4)= "page" Тогда
				ИмяСтраницы = КодПоказателя;
				ИмяЛиста    = КодЛиста;
			КонецЕсли;
					
			Если КодПоказателя = "Атрибуты" Тогда
				ЗаполнениеАтрибутов = Истина;
				СоответствиеАтрибутов = Новый Соответствие();
			
			ИначеЕсли КодПоказателя = "КонецАтрибуты" Тогда
				ЗаполнениеАтрибутов = Ложь;				     
			ИначеЕсли   ЗаполнениеАтрибутов  Тогда
				НоваяСтрока.Атрибуты.Вставить(КодПоказателя,КодПоказателяПоФорме);	
			Иначе  				
				ИмяПоказателя = КодПоказателя;
				
				// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
				КодПоказателяПоФорме = СокрЛП(Показатели.Область(Ном, 2).Текст);
				
				// формируем таблицу значений, содержащей состав показателей отчета
				НоваяСтрока = мТаблицаПоказателей.Добавить();
				НоваяСтрока.ИмяФормыТаблДокумента    = ИмяФормы;
				НоваяСтрока.ИмяФормыXML              = ИмяФормыXML;
				НоваяСтрока.ИмяСтраницыФормы         = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателя;
				НоваяСтрока.ПризнакМногострочности   = Многострочность;
				НоваяСтрока.ПризнакФлажка            = ПризнакФлажка;
				НоваяСтрока.Атрибуты                 = Новый Соответствие();				
				НоваяСтрока.ИмяЛиста                 = ИмяЛиста;				
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;	
КонецЦикла; 	
КонецПроцедуры   //ЗаполнитьНачальныеНастройки()

 //Функция управляет показом в форме периода построения отчета.
 //
Функция ПоказатьОсновнойПериод() Экспорт

	СтрПериодОтчета = ПредставлениеПериода(мДатаНачалаПериодаОтчета,мДатаКонцаПериодаОтчета, "ФП = истина");
	ОпределитьНомерКвартала(СтрПериодОтчета);
	Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьПериод()

// Заполняет значения года, квартала и месяца
//
Процедура ОпределитьНомерКвартала(СтрПериодОтчета)
	
	Если мПериодичность = Перечисления.Периодичность.Квартал Тогда
		мКвартал = Лев(СтрПериодОтчета,1);
	Иначе
		мМесяц = Месяц(мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	мГод     = Лев(Прав(СтрПериодОтчета,7),4); 
	
КонецПроцедуры

//открывает форму расшифровку, предназначенную для значения выбранной ячейки
//
//Параметры:
//	Ячейка - имя ячейки в табличном документе
//  ИмяЯчейки - имя, как оно задано в таблице расшифровке для формы
//  ТаблицаРасшифровки  - таблица значений, в которой хранятся имена ячеек и их значения
//  Форма - Форма, которая должна открыться для значения ячейки
//
Процедура ОткрытьРасшифровкуЯчейки(Ячейка, ИмяЯчейки, ТаблицаРасшифровки, Форма) Экспорт
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2) -1);
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки +1);
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
	Если Строка.Количество() = 0  Тогда
		Если НЕ Форма = Неопределено Тогда
			Форма.ОткрытьМодально();  				
		КонецЕсли;		
		Возврат;
	КонецЕсли;				 
	Расшифровка        = Строка[0].ПолеПоиска;
	Если  Расшифровка <> Неопределено Тогда
		Если Не Расшифровка.Пустая() Тогда
			Расшифровка.ПолучитьФорму().ОткрытьМодально();
		Иначе
			Форма.ОткрытьМодально();  				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ОткрытьРасшифровкуЯчейки

//Процедура перенумеровывает номера строк в таблица расшифровке, после удаления 
//строки пользователем
//	Параметры:
//	ТаблицаРасшифровки: Таблица значений, в которой хранятся расшифровки ячеек
//	НомерСтроки: Число, номер удаляемой ячейки
//
Процедура  ПерезаполнитьТаблицуРасшифровки(ТаблицаРасшифровки, НомерСтроки)Экспорт
	
	Отбор = Новый Структура("НомерСтроки", Число(НомерСтроки));
	ТаблицаРасшифровки.Сортировать("НомерСтроки");
	МассивСтрок = ТаблицаРасшифровки.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивСтрок Цикл
			Индекс = ТаблицаРасшифровки.Индекс(Элемент);
			ТаблицаРасшифровки.Удалить(Элемент);
		КонецЦикла;
		Для ИндексСтроки = Индекс По ТаблицаРасшифровки.Количество()-1 Цикл
			ТаблицаРасшифровки[ИндексСтроки].НомерСтроки = ТаблицаРасшифровки[ИндексСтроки].НомерСтроки - 1;
		КонецЦикла;			 
	КонецЕсли;    
	
КонецПроцедуры   //ПерезаполнитьТаблицуРасшифровки()
   
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мТаблицаПоказателей    = Новый ТаблицаЗначений;
мТаблицаПоказателей.Колонки.Добавить("ИмяФормыТаблДокумента");
мТаблицаПоказателей.Колонки.Добавить("ИмяФормыXML");
мТаблицаПоказателей.Колонки.Добавить("ИмяСтраницыФормы");
мТаблицаПоказателей.Колонки.Добавить("Атрибуты");
мТаблицаПоказателей.Колонки.Добавить("КодПоказателяПоФорме");
мТаблицаПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре");
мТаблицаПоказателей.Колонки.Добавить("ПризнакМногострочности");
мТаблицаПоказателей.Колонки.Добавить("ПризнакФлажка");   
мТаблицаПоказателей.Колонки.Добавить("ИмяЛиста");   

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    


мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");


мКоличествоНаЛисте = 20;

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       

ИмяПакета = "http://www.mop130.rating.kz";

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = истина;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

МногострочностьФормы = 0;	

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    

мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       

мСписокСохранения = Новый Структура;

мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");

#КонецЕсли
