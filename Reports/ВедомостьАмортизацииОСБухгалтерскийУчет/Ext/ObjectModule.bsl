Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем ОтображатьОформление Экспорт;

Перем ВестиУчетОСВРазрезеМОЛ;
Перем ВестиУчетОСВРазрезеПодразделений;

Перем ИДКонфигурации;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если ДанныеОтчета = Неопределено Тогда
		ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	Если Не ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;  
	
	// Дополнительные поля	
	Если Не ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Использование");
		ДополнительныеПоля.Колонки.Добавить("Представление");
		ДополнительныеПоля.Колонки.Добавить("Поле");
		ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ОсновноеСредство.ДатаПринятияКУчету";
		НоваяСтрока.Представление  = "Дата принятия к учету";
		НоваяСтрока.Использование  = Ложь;
		
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле           = "ОсновноеСредство.ИнвентарныйНомер";
		НоваяСтрока.Представление  = "Инвентарный номер";
		НоваяСтрока.Использование  = Ложь;
		
	КонецЕсли;
	
	// Группировки
	Если Не ДанныеОтчета.Свойство("Группировка") Тогда
		Группировка = Новый ТаблицаЗначений;
		Группировка.Колонки.Добавить("Использование");
		Группировка.Колонки.Добавить("Представление");
		Группировка.Колонки.Добавить("Поле");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
		Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
		Группировка.Колонки.Добавить("Оформление", Новый ОписаниеТипов("НастройкаОформления"));   
		Группировка.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ДанныеОтчета.Вставить("Группировка", Группировка);
	
		Если ВестиУчетОСВРазрезеПодразделений Тогда
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = "Субконто2";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = "Подразделение (БУ)";
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			НоваяСтрока.Оформление  = Новый НастройкаОформления();
			Шрифт = НоваяСтрока.Оформление["Шрифт"];
			Шрифт.Использование = Истина;
			НоваяСтрока.ПоУмолчанию  = Истина;
		КонецЕсли;
	
		Если ВестиУчетОСВРазрезеМОЛ Тогда
			ПолеМОЛБУ = ?(ВестиУчетОСВРазрезеПодразделений, "Субконто3", "Субконто2");
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = ПолеМОЛБУ;
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = "МОЛ (БУ)";
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			НоваяСтрока.Оформление  = Новый НастройкаОформления();
			Шрифт = НоваяСтрока.Оформление["Шрифт"];
			Шрифт.Использование = Истина;
			НоваяСтрока.ПоУмолчанию  = Истина;
		КонецЕсли;
		
		Если НЕ ВестиУчетОСВРазрезеПодразделений И НЕ ВестиУчетОСВРазрезеМОЛ Тогда
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = "Местонахождение";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = "Подразделение (упр.)";
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			НоваяСтрока.Оформление  = Новый НастройкаОформления();
			Шрифт = НоваяСтрока.Оформление["Шрифт"];
			Шрифт.Использование = Истина;
			НоваяСтрока.ПоУмолчанию  = Истина;
			
			НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
			НоваяСтрока.Поле           = "МОЛ";
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = "МОЛ (упр.)";
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
			НоваяСтрока.Оформление  = Новый НастройкаОформления();
			Шрифт = НоваяСтрока.Оформление["Шрифт"];
			Шрифт.Использование = Истина;
			НоваяСтрока.ПоУмолчанию  = Истина;
		КонецЕсли;
		
		НоваяСтрока = ДанныеОтчета.Группировка.Добавить();
		НоваяСтрока.Поле           = "ОсновноеСредство";
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = "Основное средство";
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		НоваяСтрока.Оформление  = Новый НастройкаОформления();
		Шрифт = НоваяСтрока.Оформление["Шрифт"];
		Шрифт.Использование = Истина;
		НоваяСтрока.ПоУмолчанию  = Истина;
	КонецЕсли;	
		
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений    , "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт

	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	

	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	ЗаголовокКолонкиОС = ""; 
	Для Каждого Строка Из  МакетШапкиОтчета.Макет Цикл
		
		Если Строка.Ячейки[0].Элементы.Количество() > 0 Тогда
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + ?(ПустаяСтрока(ЗаголовокКолонкиОС), "", " \ ");
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.Ячейки[0].Элементы Цикл
			ЗаголовокКолонкиОС = ЗаголовокКолонкиОС + Элемент.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[1];
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);

	МассивДляУдаления = Новый Массив;
	Для Индекс = 2 По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
		
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Ячейка2 = МакетШапкиОтчета.Макет[0].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	НовыйЭлемент = Ячейка2.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	НовыйЭлемент.Значение = ЗаголовокКолонкиОС;	
	Ячейка2 = МакетШапкиОтчета.Макет[1].Ячейки[0];
	Ячейка2.Элементы.Очистить();
	ТиповыеОтчеты.УстановитьПараметр(Ячейка2.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	
	// Форматирование заголовков колонок таблицы
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(ИндексКолонки = 0, Ложь, Истина), Истина);
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериода", НачалоДня(НачалоПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачПериода", Дата(1,1,1,0,0,0));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", КонецДня(КонецПериода));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериодаОстатков", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериода", Дата(3999,12,31,23,59,59));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонПериодаОстатков", Новый Граница(Дата(3999,12,31,23,59,59), ВидГраницы.Включая));
	КонецЕсли;
	
	ВидыСубконтоОС = Новый Массив;
	ВидыСубконтоВА = Новый Массив;
	
	ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Если ВестиУчетОСВРазрезеПодразделений Тогда
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	КонецЕсли;
	Если ВестиУчетОСВРазрезеМОЛ Тогда
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
		ВидыСубконтоВА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоОС", ВидыСубконтоОС);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоВА", ВидыСубконтоВА);
	
	ИсключатьВнутренниеОбороты = НастройкиФормы.ИсключатьВнутренниеОбороты;
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ИсключатьВнутренниеОбороты", ИсключатьВнутренниеОбороты);
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
	Структура = КомпоновщикНастроек.Настройки;
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			СтандартныеОтчеты.ДобавитьОформлениеГруппировки(ПолеВыбраннойГруппировки, Структура, , ИспользоватьОформлениеГруппировок);
		КонецЕсли;
	КонецЦикла;
	
	ГруппаЛиквидационнаяСтоимость = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаЛиквидационнаяСтоимость.Заголовок     = "";
	ГруппаЛиквидационнаяСтоимость.Использование = Истина;
	ГруппаЛиквидационнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ГруппаПервоначальнаяСтоимость = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПервоначальнаяСтоимость.Заголовок     = "";
	ГруппаПервоначальнаяСтоимость.Использование = Истина;
	ГруппаПервоначальнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ГруппаСтоимостьДляВычисленияАмортизации = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСтоимостьДляВычисленияАмортизации.Заголовок     = "";
	ГруппаСтоимостьДляВычисленияАмортизации.Использование = Истина;
	ГруппаСтоимостьДляВычисленияАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	//На начало периода
	ГруппаДанныеНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачало.Заголовок     = "На начало периода";
	ГруппаДанныеНаНачало.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоСтоимость.Заголовок     = "Стоимость на начало периода";
	ГруппаДанныеНаНачалоСтоимость.Использование = Истина;
	ГруппаДанныеНаНачалоСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаНачалоАмортизация = ГруппаДанныеНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаНачалоАмортизация.Заголовок     = "Амортизация на начало периода";
	ГруппаДанныеНаНачалоАмортизация.Использование = Истина;
	ГруппаДанныеНаНачалоАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//За период
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = "За период";
	ГруппаОбороты.Использование = Истина;
	ГруппаУвеличениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУвеличениеСтоимости.Заголовок     = "Увеличение стоимости";
	ГруппаУвеличениеСтоимости.Использование = Истина;
	ГруппаУвеличениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаНачислениеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаНачислениеАмортизации.Заголовок     = "Амортизация начисление";
	ГруппаНачислениеАмортизации.Использование = Истина;
	ГруппаНачислениеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСписаниеАмортизации = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСписаниеАмортизации.Заголовок     = "Амортизация списание";
	ГруппаСписаниеАмортизации.Использование = Истина;
	ГруппаСписаниеАмортизации.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаУменьшениеСтоимости = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаУменьшениеСтоимости.Заголовок     = "Уменьшение стоимости";
	ГруппаУменьшениеСтоимости.Использование = Истина;
	ГруппаУменьшениеСтоимости.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//На конец периода	
	ГруппаДанныеНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонец.Заголовок     = "На конец периода";
	ГруппаДанныеНаКонец.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецСтоимость.Заголовок     = "Стоимость на конец периода";
	ГруппаДанныеНаКонецСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецАмортизация = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецАмортизация.Заголовок     = "Амортизация на конец периода";
	ГруппаДанныеНаКонецАмортизация.Использование = Истина;
	ГруппаДанныеНаКонецАмортизация.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаДанныеНаКонецОстаточнаяСтоимость = ГруппаДанныеНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Заголовок     = "Остаточная стоимость";
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Использование = Истина;
	ГруппаДанныеНаКонецОстаточнаяСтоимость.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		ЭлементПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));		
		ЭлементПорядка.Поле  = Новый  ПолеКомпоновкиДанных("ОсновноеСредство");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;		
	КонецЕсли;	

    КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);		
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	Если ПоказателиОтчета.ЛиквидационнаяСтоимость.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаЛиквидационнаяСтоимость,           "ЛиквидационнаяСтоимость");
	КонецЕсли;
    	
	Если ПоказателиОтчета.ПервоначальнаяСтоимость.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПервоначальнаяСтоимость,           "ПервоначальнаяСтоимость");
	КонецЕсли;
	
	Если ПоказателиОтчета.СтоимостьДляВычисленияАмортизации.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСтоимостьДляВычисленияАмортизации, "СтоимостьДляВычисленияАмортизации");
	КонецЕсли;
	
	//На начало периода
	Если ПоказателиОтчета.СтоимостьНачальныйОстаток.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоСтоимость,           "СтоимостьНачальныйОстаток");
	КонецЕсли;
    Если ПоказателиОтчета.АмортизацияНачальныйОстаток.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаНачалоАмортизация,         "АмортизацияНачальныйОстаток");
	КонецЕсли;

	//За период
	Если ПоказателиОтчета.СтоимостьУвеличение.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУвеличениеСтоимости,               "СтоимостьУвеличение");
	КонецЕсли;
	Если ПоказателиОтчета.АмортизацияНачисление.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаНачислениеАмортизации,             "АмортизацияНачисление");
	КонецЕсли;
	Если ПоказателиОтчета.АмортизацияСписание.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСписаниеАмортизации,               "АмортизацияСписание");
	КонецЕсли;
	Если ПоказателиОтчета.СтоимостьУменьшение.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаУменьшениеСтоимости,               "СтоимостьУменьшение");
	КонецЕсли;

	//На конец периода
	Если ПоказателиОтчета.СтоимостьКонечныйОстаток.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецСтоимость,            "СтоимостьКонечныйОстаток");
	КонецЕсли;
	Если ПоказателиОтчета.АмортизацияКонечныйОстаток.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецАмортизация,          "АмортизацияКонечныйОстаток");
	КонецЕсли;
	
	Если ПоказателиОтчета.ОстаточнаяСтоимость.Значение Тогда
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаДанныеНаКонецОстаточнаяСтоимость,  "ОстаточнаяСтоимость");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеНастройкиДляИстории() Экспорт
	
	ПредставлениеОрганизации = СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект);
	ПредставлениеОрганизации = ?(Не ПустаяСтрока(ПредставлениеОрганизации), " ", "") + ПредставлениеОрганизации;
	
	ПредставлениеПодразделение = РаботаСДиалогами.ВыгрузитьСписокВСтроку(мСписокПодразделений);
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	
	ОсновнаяЧастьПредставления = СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект) + ПредставлениеОрганизации + ПредставлениеПодразделение;
	
	СоответствиеПоказателей = Новый Соответствие;
	СоответствиеПоказателей.Вставить("ПервоначальнаяСтоимость", "ПервоначальнаяСтоимость"); 
	СоответствиеПоказателей.Вставить("СтоимостьДляВычисленияАмортизации", "СтоимостьДляВычисленияАмортизации");
	
	//На начало периода
	СоответствиеПоказателей.Вставить("СтоимостьНачальныйОстаток"  , "СтоимостьНачальныйОстаток");
	СоответствиеПоказателей.Вставить("АмортизацияНачальныйОстаток", "АмортизацияНачальныйОстаток");
	
	//За период
	СоответствиеПоказателей.Вставить("СтоимостьУвеличение"  , "СтоимостьУвеличение");
	СоответствиеПоказателей.Вставить("АмортизацияНачисление", "АмортизацияНачисление");
	СоответствиеПоказателей.Вставить("АмортизацияСписание"  , "АмортизацияСписание");
	СоответствиеПоказателей.Вставить("СтоимостьУменьшение"  , "СтоимостьУменьшение");
	
	//На конец периода
	СоответствиеПоказателей.Вставить("СтоимостьКонечныйОстаток"  , "СтоимостьКонечныйОстаток");
    СоответствиеПоказателей.Вставить("АмортизацияКонечныйОстаток", "АмортизацияКонечныйОстаток");
	СоответствиеПоказателей.Вставить("ОстаточнаяСтоимость"       , "ОстаточнаяСтоимость");
	
	СоответствиеПоказателей.Вставить("ЛиквидационнаяСтоимость", "ЛиквидационнаяСтоимость");
	
	ПредставлениеПоказатели = "";
	Для Каждого Показатель Из ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение Тогда
			ПредставлениеПоказатели = ПредставлениеПоказатели + СоответствиеПоказателей[Показатель.Ключ]+ ", ";
		КонецЕсли;
	КонецЦикла;
	ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
	
	ПредставлениеГруппировка = "";
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
		КонецЕсли;	
	КонецЦикла;
	ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
	
	ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
	ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
	
	Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеНастройкиДляИстории()

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Ведомость амортизации ОС" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПервоначальнаяСтоимость"			 , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Первоначальная cтоимость"));
	ПоказателиОтчета.Вставить("СтоимостьДляВычисленияАмортизации", Новый Структура("Значение, Использование, Представление", Истина, Истина, "Стоимость для вычисления амортизации"));
	
	//На начало периода
	ПоказателиОтчета.Вставить("СтоимостьНачальныйОстаток"  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Стоимость на начало периода"));
	ПоказателиОтчета.Вставить("АмортизацияНачальныйОстаток", Новый Структура("Значение, Использование, Представление", Истина, Истина, "Амортизация на начало периода"));
	
	//За период
	ПоказателиОтчета.Вставить("СтоимостьУвеличение"  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Увеличение стоимости"));
	ПоказателиОтчета.Вставить("АмортизацияНачисление", Новый Структура("Значение, Использование, Представление", Истина, Истина, "Амортизация начисление"));
	ПоказателиОтчета.Вставить("АмортизацияСписание"  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Амортизация списание"));
	ПоказателиОтчета.Вставить("СтоимостьУменьшение"  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Уменьшение стоимости"));
	
	//На конец периода	
	ПоказателиОтчета.Вставить("СтоимостьКонечныйОстаток"  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Стоимость на конец периода"));
	ПоказателиОтчета.Вставить("АмортизацияКонечныйОстаток", Новый Структура("Значение, Использование, Представление", Истина, Истина, "Амортизация на конец периода"));
	ПоказателиОтчета.Вставить("ОстаточнаяСтоимость"		  , Новый Структура("Значение, Использование, Представление", Истина, Истина, "Остаточная стоимость"));
	
	ПоказателиОтчета.Вставить("ЛиквидационнаяСтоимость", Новый Структура("Значение, Использование, Представление", Истина, Истина, "Ликвидационная стоимость"));
		
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
КонецПроцедуры

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(ТаблицаПолей) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	Если НЕ ПоказателиОтчета.ПервоначальнаяСтоимость.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ПервоначальнаяСтоимость";
	КонецЕсли;
    	
	Если НЕ ПоказателиОтчета.СтоимостьНачальныйОстаток.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СтоимостьНачальныйОстаток";
	КонецЕсли;

    Если НЕ ПоказателиОтчета.АмортизацияНачальныйОстаток.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "АмортизацияНачальныйОстаток";
	КонецЕсли;

	Если НЕ ПоказателиОтчета.СтоимостьУвеличение.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СтоимостьУвеличение";
	КонецЕсли;

	Если НЕ ПоказателиОтчета.СтоимостьУменьшение.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СтоимостьУменьшение";
	КонецЕсли;

	Если НЕ ПоказателиОтчета.АмортизацияНачисление.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "АмортизацияНачисление";
	КонецЕсли;
	
	Если НЕ ПоказателиОтчета.АмортизацияСписание.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "АмортизацияСписание";
	КонецЕсли;

	Если НЕ ПоказателиОтчета.АмортизацияКонечныйОстаток.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "АмортизацияКонечныйОстаток";
	КонецЕсли;
	
	Если НЕ ПоказателиОтчета.СтоимостьКонечныйОстаток.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "СтоимостьКонечныйОстаток";
	КонецЕсли;
	
	Если НЕ ПоказателиОтчета.ОстаточнаяСтоимость.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ОстаточнаяСтоимость";
	КонецЕсли;

	Если НЕ ПоказателиОтчета.ЛиквидационнаяСтоимость.Значение Тогда
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.Поле = "ЛиквидационнаяСтоимость";
	КонецЕсли;
	
	НоваяСтрока = ТаблицаПолей.Добавить();
	НоваяСтрока.Поле = "Выработка";
	
КонецПроцедуры

Процедура ОтборДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
	
	ДобавитьПоляРесурсовВЗапрещенныеПоля(РодителиПоля);
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	Форма.Режим = "Отбор";
	Форма.РодителиПоля = РодителиПоля;
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		СтандартныеОтчеты.ОтборПриОкончанииРедактирования(ФормаОтчета, Неопределено, Истина, Ложь);
		
		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры // ОтборДобавитьЭлемент()

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//сохраним список структурных единиц ОборотноСальдоваяВедомостьТиповой
	ДополнительныеПоля = Новый СписокЗначений;
	ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
	ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
	ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		
	СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
	Иначе
		ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
		ПроверитьНастройки(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	ПоляНабораДанных   = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Поля;
	
	ИмяПоляПодразделениеБУ = "";
	ИмяПоляМОЛБУ           = "";
	
	Если ВестиУчетОСВРазрезеПодразделений Тогда
		ИмяПоляПодразделениеБУ = "Субконто2";
		ПолеПодразделениеБУ = ПоляНабораДанных.Найти(ИмяПоляПодразделениеБУ);
		ПолеПодразделениеБУ.Заголовок = "Подразделение (БУ)";
		ПолеПодразделениеБУ.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	КонецЕсли;
	
	Если ВестиУчетОСВРазрезеМОЛ Тогда
		ИмяПоляМОЛБУ = ?(ВестиУчетОСВРазрезеПодразделений, "Субконто3", "Субконто2");
		ПолеМОЛБУ = ПоляНабораДанных.Найти(ИмяПоляМОЛБУ);
		ПолеМОЛБУ.Заголовок = "МОЛ (БУ)";
		ПолеМОЛБУ.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	
	КоличествоСубконтоОС = 1 + ВестиУчетОСВРазрезеПодразделений + ВестиУчетОСВРазрезеМОЛ;
	
	Для Индекс = КоличествоСубконтоОС + 1 По 3 Цикл
		ПолеНедоступногоСубконто = ПоляНабораДанных.Найти("Субконто" + Индекс);
		Если ПолеНедоступногоСубконто <> Неопределено Тогда
			ПолеНедоступногоСубконто.ОграничениеИспользования.Группировка = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользования.Условие     = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользования.Порядок     = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользования.Поле        = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользованияРеквизитов.Группировка = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользованияРеквизитов.Условие     = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			ПолеНедоступногоСубконто.ОграничениеИспользованияРеквизитов.Поле        = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверитьНастройки(СтруктураПараметров)
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ДанныеОтчета") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = СтруктураПараметров.ДанныеОтчета;
	
	ПерезаполнитьГруппировкиПоУмолчанию = Ложь;
	ДоступныеПоляГруппировок = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Для Каждого СтрокаГруппировки Из Отчет.Группировка Цикл
		ДоступноеПоле = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрокаГруппировки.Поле));
		Если (ДоступноеПоле = Неопределено) И НЕ ПерезаполнитьГруппировкиПоУмолчанию Тогда
			ПерезаполнитьГруппировкиПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ПерезаполнитьГруппировкиПоУмолчанию Тогда
		Отчет.Удалить("Группировка");
		ЗаполнитьНачальныеНастройки();
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	ПроверитьОтбор(КомпоновщикНастроек.Настройки.Отбор, УдаляемыеЭлементы);
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	Для Каждого ДополнительноеПоле Из Отчет.ДополнительныеПоля Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ДополнительноеПоле.Поле));
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ДополнительноеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Отчет.ДополнительныеПоля.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	УдаляемыеЭлементы.Очистить();
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
	ПоляПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы;
	Для Каждого ПолеПорядка Из ПоляПорядка Цикл
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(ПолеПорядка.Поле);
		Если ДоступноеПоле = Неопределено Тогда
			УдаляемыеЭлементы.Добавить(ПолеПорядка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ПоляПорядка.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтбор(Отбор, МассивЭлементовДляУдаления)
	
	ДоступныеПоляОтбора = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора;
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПроверитьОтбор(ЭлементОтбора, МассивЭлементовДляУдаления);
		Иначе
			ДоступныйОтбор = ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			Если ДоступныйОтбор = Неопределено Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

РежимРасшифровки = Ложь;

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

ОтображатьОформление = Ложь;

ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
		
ВестиУчетОСВРазрезеМОЛ = Не(ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Дата(1,1,1));
ВестиУчетОСВРазрезеПодразделений = Не(ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Дата(1,1,1));

#КонецЕсли