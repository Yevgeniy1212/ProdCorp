#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей для передачи данных.
Перем мТаблицаПоказателейДляПередачиДанных Экспорт;

// Хранит имя пространства имен, использующееся
// для идентификации модели типов XDTO.
Перем ИмяПакета Экспорт;
// Хранит таблицу форматов
// для корректной выгрузки отчета в XML.
Перем мТаблицаФорматов Экспорт;
// имя файла по умолчанию для выгрузки
Перем ИмяФайлаВыгрузки Экспорт;

// Хранит перечень форм отчета.
Перем СписокФормДерева Экспорт;

// Хранит имя открытой формы отчета.
Перем мФорма Экспорт;

// Хранит макет, содержащий представление многострочных форм
// Равен "Неопределено", если отчет не содержит многострочных форм
//                       и соответственно в таких отчетах макет не создается
Перем мМакет Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета.
Перем мСохраненныйДок Экспорт;

// Хранит все данные отчета.
Перем мДеревоНастройкиСтраниц Экспорт;
Перем мСписокФормБезИерархии Экспорт;
Перем мСписокСохранения Экспорт;

// Переменные хранят границы
// периода построения отчета.
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;
Перем мПериодичность Экспорт;

// Переменная хранит год периода формирования отчета.
Перем мГод Экспорт;

// Хранит название формы навигации.
// При открытии этой формы из других объектов
// также записываем имя в эту переменую.
Перем мФормаНавигации Экспорт;

// Хранит название основной формы.
Перем мОсновнаяФорма Экспорт;   

// Хранит имя выбранной формы отчета.
Перем мВыбраннаяФорма Экспорт;

// Хранит ФИО исполнителя. 
Перем мИсполнитель Экспорт;

// Хранит области, на которых последний раз 
// спозиционировался пользователь
// запоминаются при закрытии формы.
Перем мАктивныеОбласти Экспорт;

// Переменная хранит список страниц отчета на печать.
Перем мТаблицаСтраницНаПечать Экспорт;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым стоится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

// Хранит значение МРП
Перем мпарамМРП Экспорт;

Перем мТаблицаРасшифровкиналогаНаТранспорт Экспорт;

Перем ТаблицаДобавленныхПриложений Экспорт;

Перем СвойстваДобавляемыхПриложений Экспорт;

Перем ТаблицаМестныхБюджетов Экспорт;

Перем КодФормыВызоваРасшифровки Экспорт;

Перем ТаблицаДляОтражениеВУчете Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Записывает страницы для печати в мТаблицаСтраницНаПечать,
// и вызывают общую форму "ПечатьРегламентированныхОтчетов" для 
// печати уазанных листов формы
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - с предварительным просмтром;
//              "ПечататьСразу" - непосредственный вывод на печать.
//
Процедура Печать(ВидПечати) Экспорт 
	
	Перем СтруктураГруппы;            
	
	//очистим таблицу значений
	мТаблицаСтраницНаПечать.Очистить();
	Стр = 1;
	
	Если Не мФорма.ПризнакМногострочности Тогда 
				
		Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
			ТабДок = Новый ТабличныйДокумент;
			ИмяОбласти = Страница.Имя;
			ТекПТД = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + Страница.Имя;
			ТекОбласть = мФорма.ЭлементыФормы[ТекПТД].ПолучитьОбласть(ИмяОбласти);
			ТабДок.Вывести(ТекОбласть);
			ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			ТабДок.ЧерноБелаяПечать   = Ложь;
			ТабДок.АвтоМасштаб = Истина;
		
			Строка = мТаблицаСтраницНаПечать.Добавить();
			Строка.ПолеТабличногоДокумента = ТабДок;
			Строка.ИмяЛиста = "Страница № " + Строка(Стр);
			Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " - стр. " + Строка(Стр);
			Стр = Стр + 1;
		КонецЦикла;
	
	Иначе
	    
	    Пока Стр < мФорма.ВсегоСтраниц + 1 Цикл		 
		 	Для Каждого Страница Из мФорма.ЭлементыФормы["Панель" + мФорма.ИмяФормы].Страницы Цикл
			 
			 	ТабДок = Новый ТабличныйДокумент;
			 	ИмяГруппы = Страница.Имя;
				мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);		
			 	РегламентированнаяОтчетность.ВывестиРазделВТабличныйДокументФормы(мФорма, Стр,ИмяГруппы, СтруктураГруппы,мФорма.ИмяФормы);
			 	ТекущееТабПоле = мФорма.ИмяФормы + "ПолеТабличногоДокумента" + ИмяГруппы;
			 	ТабДок.Вывести(мФорма.ЭлементыФормы[ТекущееТабПоле]);
			 	ТабДок.ОриентацияСтраницы = РегламентированнаяОтчетность.ОпределитьОриентациюСтраницы(мФорма.ИмяФормы,мСписокФормБезИерархии);
			 	ТабДок.АвтоМасштаб        = Истина;
			 	ТабДок.ЧерноБелаяПечать   = Ложь;
			 
			 	//добавляем значения в таблицу страниц для печати
			 	Строка = мТаблицаСтраницНаПечать.Добавить();
			 	Строка.ПолеТабличногоДокумента = ТабДок;
				Строка.ИмяЛиста = ИмяГруппы + ". Страница № " + Строка(Стр);
				Строка.ИмяЛистаДляЗаписи = "Рег. отчет " + мФормаНавигации.Заголовок+ " " +ИмяГруппы + ". cтр. № " + Строка(Стр);
			КонецЦикла;
			Стр = Стр + 1;		 
	 	КонецЦикла;
		
		РегламентированнаяОтчетность.ВывестиСтраницуМногострочнойФормы(мФорма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПечатьРегламентированногоОтчета(мТаблицаСтраницНаПечать,  мФорма, ВидПечати);
	
КонецПроцедуры // Печать()

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОНалогоплательщике()Экспорт
	
	Если (Налогоплательщик  = Неопределено) Или (Налогоплательщик = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации	
	Сведения.Добавить("", "РННЮЛ"); 	// РНН
	Сведения.Добавить("", "ИИН_БИН"); 	// ИИН_БИН
	Сведения.Добавить("", "ОКЭД"); 		// ОКЭД	
	Сведения.Добавить("", "ФИОРук"); 	// ФИО руководителя	
	Сведения.Добавить("", "ФИОБух"); 	// ФИО бухгалтера
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = ОбщегоНазначения.ПолучитьСведенияОбОрганизации(Налогоплательщик, ДатаПодписи, Сведения);
	
	// Добавим сведения о кодах налоговых органов
	НКСведения = ОбщегоНазначения.СведенияОЮрФизЛице(НалоговыйКомитет, ДатаПодписи);
	
	ОргСведения.Вставить("КодНалоговогоОргана", СокрЛП(Лев(НКСведения.РНН, 4)));	
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации

// Вызывает диалог выбора файла для выбора файла данных
//
Функция ВыборФайла() Экспорт
	Префикс = Число(Лев(Прав(мВыбраннаяФорма,7),4));
	
	Режим                 = РежимДиалогаВыбораФайла.Открытие;
	Диалог                = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок      = "Выберите файл";
	Диалог.ПолноеИмяФайла = "700";
	Если Префикс >= 2009 Тогда
		Диалог.Фильтр         = "*.xml|*.xml|Все файлы(*.*)|*.*";
		Диалог.Расширение     = "xml";
	Иначе
		Диалог.Фильтр         = "*.efn|*.efn|Все файлы(*.*)|*.*";
		Диалог.Расширение     = "efn";
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;	
	
	Возврат ИмяФайла;	
	
КонецФункции // ВыборФайла()

 //Функция управляет показом в форме периода построения отчета.
 //
Функция ПоказатьОсновнойПериод(ТекДатаНачала,ТекДатаОкончания) Экспорт

	СтрПериодОтчета = ПредставлениеПериода(ТекДатаНачала,ТекДатаОкончания, "ФП = истина");
	мГод     = Лев(Прав(СтрПериодОтчета,7),4);
	Возврат СтрПериодОтчета;
		
КонецФункции // ПоказатьОсновнойПериод()

//Выгружает данные отчета в формат XML
// Параметры:
//   ИмяФайла - файл, куда будет идти запись текста XML.
//   Объект - объект регламентированного отчета.
//
Процедура ВыгрузитьОтчетВXMLДляСОНО(ИмяФайла, Объект, ВыдаватьСообщение = Истина) Экспорт

	Префикс = Прав(Объект.мВыбраннаяФорма,7);
	
	// запишем общие атрибуты (code, version) и создадим элемент form
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = Объект.ПолучитьМакет("ВыгрузкаВXML");
	
	// Для форм ранее 2018 года ТаблицаДобавленныхПриложений будет незаполнена
	Для Каждого СтрокаПриложения Из ТаблицаДобавленныхПриложений Цикл
		ДобавленноеПриложениеМакетВыгрузкаВXML(СтрокаПриложения.КодФормы, СтрокаПриложения.КодИсходнойФормы, МакетВыгрузки);
	КонецЦикла;

	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута,Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// создадим таблицу для выгрузки
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	
	ВыгрузитьФормыВXML(Объект, Запись, МакетВыгрузки, ОбластьВыгрузки, ТаблицаВыгрузки);
	
	// Для форм ранее 2018 года ТаблицаДобавленныхПриложений будет незаполнена
	Для Каждого СтрокаПриложения Из ТаблицаДобавленныхПриложений Цикл
		ОбластьВыгрузки         = Неопределено;
		МакетВыгрузкиПриложения = Неопределено;
		ДобавленныеПриложенияОбластьВыгрузки(СтрокаПриложения.КодФормы, МакетВыгрузки, ОбластьВыгрузки, МакетВыгрузкиПриложения);	
		Если ОбластьВыгрузки <> Неопределено Тогда
			ТаблицаВыгрузки.Очистить();
			ВыгрузитьФормыВXML(Объект, Запись, МакетВыгрузкиПриложения, ОбластьВыгрузки, ТаблицаВыгрузки);
		КонецЕсли;
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();  // fno
		
	Запись.Закрыть();
	
	// данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла,"windows-1251");
	Строка = ТекстДок.ПолучитьСтроку(1);
	ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
	ВыбФайл = Новый Файл(ИмяФайла);
	ТекстДок.Записать(ВыбФайл.Путь+ВыбФайл.ИмяБезРасширения+ВыбФайл.Расширение,"windows-1251");
	// СОНО
	
	Если ВыдаватьСообщение Тогда
		//выдаем пользователю сообщение о конце выгрузки
		РегламентированнаяОтчетность.ВыдатьОтветПриВыгрузке();
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОтчетаВXMLДляСОНО()

// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXML(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма = Неопределено, ТекущаяСтраница = Неопределено)
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма = СтрокаВыгрузки.Форма; 
	НоваяСтраница = СтрокаВыгрузки.Страница; 
	
	Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
	   Запись.ЗаписатьКонецЭлемента();			// </sheet>
	КонецЕсли;
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");
		Состояние("Выгружается форма " + НоваяФорма);
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Форма);
		Запись.ЗаписатьНачалоЭлемента("sheetGroup");
	КонецЕсли;                                       	
	Если НЕ НоваяСтраница = ТекущаяСтраница Тогда
		Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
			// ничего не делаем
	    ИначеЕсли НЕ ТекущаяСтраница = Неопределено Тогда		
			Запись.ЗаписатьКонецЭлемента();			// </sheet>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("sheet");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Страница);
	КонецЕсли;
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФорму(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений = Число(СтрокаВыгрузки.КоличествоROW);
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				
				// Проверим многострочная ли следующая строка
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
					НомерСтроки = НомерСтроки+1;
					НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
					Если (НомерСтроки+1) >= КоличествоСтрокВТаблице Тогда
						Прервать;
					КонецЕсли;
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				КонецЦикла;   				
			КонецЕсли;
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлемента(Запись, МногСтрока);	
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузки);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраница = НоваяСтраница;
		
КонецПроцедуры // ВыгрузитьСтрокуВXML()

// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФорму(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
        		
		МногСтруктура = СтрокаВыгрузки.Значение[0].Данные;
		
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		ВсегоСтр = 0;
		
		Если КоличествоЗаписей <= 1 Тогда 
			ВсегоСтр = 0;
		Иначе 
			ВсегоСтр = КоличествоЗаписей - 1;	
		КонецЕсли;
		
		ОдинШаг = Истина;
		НачальнаяСтрока = ?(НачальнаяСтрока = 0, НачальнаяСтрока, НачальнаяСтрока - 1);	
		
		Для ШагФорм = 0 По ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраница   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + 1);
				
				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
				
				Если ОдинШаг Тогда 
					НомерЛиста = Новый Структура;
					НомерЛиста.Вставить("НомерЛиста",ШагФорм);
					Если СтрокаВыгрузкиТек.КодФормы = СтрокаВыгрузкиСлед.КодФормы И Найти(СтрокаВыгрузкиТек.КодФормы, "Форма700_01_") <> 0 Тогда
						ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузкиТек, НомерЛиста);
					Иначе
						ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
					КонецЕсли;
                    ОдинШаг = Ложь;
					Продолжить;
				КонецЕсли;


				Если НоваяФорма <> ТекущаяФорма Тогда
					Запись.ЗаписатьКонецЭлемента();			// </sheet>
				КонецЕсли;
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");
					Состояние("Выгружается форма " + НоваяФорма);
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
				КонецЕсли;                                       	
				Если НЕ НоваяСтраница = ТекущаяСтраница Тогда
					Если НоваяФорма <> ТекущаяФорма Тогда
						// ничего не делаем
					Иначе
						Запись.ЗаписатьКонецЭлемента();			// </sheet>
					КонецЕсли;
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Страница);
				КонецЕсли;
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста",ШагФорм);
				ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузкиСлед, НомерЛиста);
			КонецЦикла;
		КонецЦикла;
		
	Иначе // форма многострочная
		
		// Определяем одинаковое ли количество строк на всех страницах формы и создаем таблицу значений
		// например, в форме 300.07 и 300.08 одинаковое количество
		// а в других может быть неодинаковое - и там другой механизм выгрузки по строкам
		ОдинаковоеКоличествоСтрок = Истина;
		КоличествоСтрокНаЛисте = 0;
		
		ТаблицаМногострочнойФормы = ТаблицаВыгрузки.СкопироватьКолонки();
		НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
			Если ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Тогда
				ТекКоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
				Если КоличествоСтрокНаЛисте <> 0 И КоличествоСтрокНаЛисте <> ТекКоличествоСтрокНаЛисте Тогда
					 ОдинаковоеКоличествоСтрок = Ложь;
				КонецЕсли;
				КоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
			КонецЕсли;
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				Если (ТаблицаВыгрузки.Количество()-1) > НомерСтроки  Тогда
					СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
				Иначе
					Прервать;
				КонецЕсли;					
				НоваяФорма = СледСтрокаВыгрузки.Форма;
			Иначе
				НоваяФорма = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//Выгружаем многострочные данные, у которых одинаковое количество строк
		//Если ОдинаковоеКоличествоСтрок Тогда //как для 300.07, 300.08 и большинства других многострочных
			
			// Определим количество <sheetGroup>
			МногСтруктура = СтрокаВыгрузки.Значение[0].Данные;
			
			КоличествоЗаписей = 0;
			Для Каждого КлючИЗначение Из МногСтруктура Цикл
				ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
				КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
				Прервать;
			КонецЦикла;
						
			мКоличествоНаЛисте = СтрокаВыгрузки.КоличествоНаЛисте; // из макета Показатели
			Стр =  Цел(КоличествоЗаписей/мКоличествоНаЛисте);
			Если Стр = КоличествоЗаписей/мКоличествоНаЛисте  Тогда
				ВсегоСтр = Стр;
			Иначе
				ВсегоСтр = Стр + 1;
			КонецЕсли;
			
			Если КоличествоЗаписей = 0 Тогда // форма не заполнена, то выгружаем пустые теги
				ВсегоСтр = 1;
			КонецЕсли;
			
			Для КолСтр = 1 По ВсегоСтр Цикл // sheetgroup
				Если КолСтр <> 1 Тогда
					Запись.ЗаписатьКонецЭлемента();		// </sheet>
					Запись.ЗаписатьКонецЭлемента();		// </sheetgroup>
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name", СтрокаВыгрузки.Страница);
				КонецЕсли;
				ТекущаяСтраница = СтрокаВыгрузки.Страница;
				Для Ном = 0 По ТаблицаМногострочнойФормы.Количество()-1 Цикл 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					НоваяСтраница = СтрокаТаблицы.Страница;
					// если перешли на новую страницу
					Если НоваяСтраница <> ТекущаяСтраница Тогда
						 Запись.ЗаписатьКонецЭлемента();		// </sheet>
						 Запись.ЗаписатьНачалоЭлемента("sheet");
						 Запись.ЗаписатьАтрибут("name", СтрокаТаблицы.Страница);
					КонецЕсли;		
					Если ЗначениеЗаполнено(СтрокаТаблицы.Отображение) И КолСтр <> Число(СтрокаТаблицы.Отображение) Тогда
						Продолжить;
					КонецЕсли;
					// проверим элемент это или нет
					Если Лев(СтрокаТаблицы.ИмяАтрибута,1) = "#" Тогда
						Атрибут = Сред(СтрокаТаблицы.ИмяАтрибута,2);
						// опеределим начальный или конечный элемент
						Если Лев(Атрибут,1) = "/" Тогда // это конечный элемент							
							Запись.ЗаписатьКонецЭлемента();
						Иначе // это начальный
							Запись.ЗаписатьНачалоЭлемента(Атрибут);
						КонецЕсли;						
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КоличествоROW) И СтрокаТаблицы.КоличествоROW <> "0" Тогда
						КоличествоПовторений = Число(СтрокаТаблицы.КоличествоROW);
						Если КолСтр = ВсегоСтр И КолСтр <> 1  Тогда // рассчитаем сколько должно быть строк на последней странице, при этом на 1 стр - должно быть количество строк как в макете
							КоличествоПовторений = КоличествоЗаписей - КоличествоПовторений*(КолСтр-1);
						КонецЕсли;
						Для Н = 1 По КоличествоПовторений Цикл 
							Запись.ЗаписатьНачалоЭлемента("row");							
							Если Н = 1 Тогда
								ТаблицаМногострочныхТегов = ТаблицаМногострочнойФормы.СкопироватьКолонки();
								НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
								
								// Проверим многострочная ли следующая строка
								СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
									Ном = Ном+1;
									НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
									Если Ном + 1 = ТаблицаМногострочнойФормы.Количество() Тогда
										Прервать;
									КонецЕсли;
									СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								КонецЦикла;   				
							КонецЕсли;
							Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
								СтруктураПараметров.Вставить("НомерЗаписи", Н);
								ЗаписатьЗначениеЭлемента(Запись, МногСтрока, СтруктураПараметров);	
							КонецЦикла;    			
												
							Запись.ЗаписатьКонецЭлемента();			// </row>
						КонецЦикла;	
					Иначе			
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
						ЗаписатьЗначениеЭлемента(Запись, СтрокаТаблицы, СтруктураПараметров);					
					КонецЕсли;				 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					ТекущаяСтраница = СтрокаТаблицы.Страница;
				КонецЦикла; 
			КонецЦикла; 				
					
		//Иначе //многострочных, у которых разное количество строк на страницах
		//	
		//КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьМногострочнуюФорму()

// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузки, СтруктураПараметров = Неопределено)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;
				МногСтруктура = СтрокаВыгрузки.Значение[0].Данные;
				Если ЗначениеЗаполнено(ИмяЛиста) И МногСтруктура.Свойство(ИмяЛиста) Тогда            					
					МногСтруктура.Свойство(ИмяЛиста,СтруктураГруппы);				
				Иначе
					Сообщить("Не заполнено ""Имя листа"" или ""Имя листа"" указано неверно для ячейки """ + ИмяЯчейки + """ в макете для выгрузки значения в XML!", СтатусСообщения.Важное);	
				КонецЕсли;
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(Формат(КолСтр,"ЧЦ=3; ЧВН=")));
				// заполнения многостраничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда 
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 
						 Если ИмяЯчейки = "НомерСтраницы" Тогда
							Значение = ПривестиЗначениеКФорматуСОНО(НомерЛиста + 1); //СтрокаФорматов);
							Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе 
							// ищем в данных строки
							Строка = СтруктураГруппы.Строки[НомерЛиста];
							Попытка
								Значение = Строка[ИмяЯчейки];
							Исключение							 
								// ищем в данных шапки							 
								ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
								Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
								Если Строка = Неопределено Тогда								 
									Сообщить("Не найден в структуре хранения данных показатель " + ИмяЯчейки + " для формы " + СтрокаВыгрузки.Форма);	
									Значение = "";
								Иначе
									Значение = Строка.Значение;
								КонецЕсли;							 
							КонецПопытки;
							 
							 Если Строка <> Неопределено Тогда							 
								 Значение = ПривестиЗначениеКФорматуСОНО(Значение); //СтрокаФорматов);
								 Запись.ЗаписатьТекст(XMLСтрока(Значение));
							 КонецЕсли;
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 ТаблицаСтрокГруппы = СтруктураГруппы.Строки;						 					
						 // рассчитаем индекс строки и проверим есть ли такая строка в таблице данных
						 ИндексСтроки = НомерЗаписиНаЛисте + (КолСтр-1)* КоличествоНаЛисте - 1;
						 Если ИндексСтроки < ТаблицаСтрокГруппы.Количество() Тогда  // строк в таблице может быть меньше, чем выгружается в XML
							 Строка = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
							 Если Строка <> Неопределено Тогда // найдена строка для выгрузки значения
								 Если ТаблицаСтрокГруппы.Колонки.Найти(ИмяЯчейки) <> Неопределено Тогда 
									 Значение = Строка[ИмяЯчейки];
									 Значение = ПривестиЗначениеКФорматуСОНО(Значение); //СтрокаФорматов);
					    		 	 Запись.ЗаписатьТекст(XMLСтрока(Значение));
								 КонецЕсли;
							 КонецЕсли;
						 КонецЕсли;
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
						 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
						 Строка = ОбщиеЭлементыГруппы.Найти(ИмяЯчейки,"ИмяОбласти");
						 Если Строка <> Неопределено Тогда
							 Значение = Строка.Значение;
							 // Для формы 700.02 начиная с 2018 года
							 // итоговые суммы заполняются только для первой страницы.
							 // В связи с этим добавлена очистка итогов после заполнения первой страницы.
							 Если Найти(СтрокаВыгрузки.КодФормы, "Форма700_02") > 0 Тогда
								 СтрокаГод = ОбщиеЭлементыГруппы.Найти("Год", "ИмяПараметра");
								 Если СтрокаГод <> Неопределено Тогда
									 ЗначениеГод = СтрокаГод.Значение;
								 Иначе
									 ЗначениеГод = Неопределено;
								 КонецЕсли;
								 Если ЗначениеГод <> Неопределено И Число(ЗначениеГод) >= 2018 Тогда
									 Если Найти(СтрокаВыгрузки.КодФормы, "Форма700_02") > 0
											И (Найти(СтрокаВыгрузки.ИмяЯчейки, "_P") > 0
												ИЛИ Найти(СтрокаВыгрузки.ИмяЯчейки, "_S") > 0) Тогда
										КолСтр = Неопределено;
										СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);
										Если КолСтр <> Неопределено И КолСтр > 1 Тогда
										 	Значение = 0;
										КонецЕсли;
									 КонецЕсли;
								 КонецЕсли;
							 КонецЕсли;
							 Значение = ПривестиЗначениеКФорматуСОНО(Значение); //СтрокаФорматов);
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 Иначе
							 Сообщить("Не найден в структуре хранения данных показатель " + ИмяЯчейки + " для формы " + СтрокаВыгрузки.Форма);	
							 Значение = "";
						 КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТаблицаДанных = СтрокаВыгрузки.Значение;
				СтрокаОбласти = ТаблицаДанных.Найти(ИмяЯчейки,"ИмяОбласти");
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти.Значение;
					Значение = ПривестиЗначениеКФорматуСОНО(Значение); //СтрокаФорматов);
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе
					Сообщить("Не найдена ячейка """ + ИмяЯчейки + """ для выгрузки значения в XML!", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры // ЗаписатьЗначениеЭлемента()

//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНО(Значение) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции // ПривестиЗначениеКФорматуСОНО()

Процедура ВыгрузитьФормыВXML(Объект, Запись, МакетВыгрузки, ОбластьВыгрузки, ТаблицаВыгрузки)
	
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     = СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки       = СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   = СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        = СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        = СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     = СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Форма = Объект.мСписокФормБезИерархии.Строки.Найти(Строка.ИмяФормы, "ИмяФормы");
		КонецЕсли;
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = Форма.КодФормы;
			Строка.Выгружать  		 = Форма.Выгружать;
			Строка.Многострочность   = Форма.Многострочность;
			Строка.ЗаголовокФормы    = Форма.ЗаголовокФормы;
			Строка.КоличествоНаЛисте = Форма.КоличествоНаЛисте;
			Строка.Значение  		 = Форма.Значение;			
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// выгрузка в XML 
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраница = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXML(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ТекущаяФорма, ТекущаяСтраница);			
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();		// </sheet>
	Запись.ЗаписатьКонецЭлемента();		// </sheetGroup>
	Запись.ЗаписатьКонецЭлемента();		// </form> 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПРИЛОЖЕНИЯМИ

Процедура ДобавитьПриложениеБазовыеДанные(КодИсходногоПриложения, КодИсходногоПриложенияПредставление, ДополнительныеПараметрыПриложения = Неопределено) Экспорт
	
	Если ДополнительныеПараметрыПриложения = Неопределено Тогда
		ДополнительныеПараметрыПриложения = Новый Структура;
	КонецЕсли;
	
	ВосстановлениеСохраненныхДанных = Неопределено;
	ДополнительныеПараметрыПриложения.Свойство("ВосстановлениеСохраненныхДанных", ВосстановлениеСохраненныхДанных);
	ВосстановлениеСохраненныхДанных = ?(ВосстановлениеСохраненныхДанных = Неопределено, Ложь, ВосстановлениеСохраненныхДанных);
	// при открытии сохраненного ранее отчета: ВосстановлениеСохраненныхДанных = Истина
	
	Если ВосстановлениеСохраненныхДанных Тогда
		// определяем номер добавленного приложения
		КоличествоДобавленныхПриложений = ДополнительныеПараметрыПриложения.Порядок;
		
	Иначе
		ПараметрыОтбора = Новый Структура("КодИсходнойФормы", КодИсходногоПриложения);
		ДобавленныеПриложения = ТаблицаДобавленныхПриложений.Скопировать(ПараметрыОтбора);
		
		МассивПорядков = ДобавленныеПриложения.ВыгрузитьКолонку("Порядок");
		МаксимальныйПорядок = 0;
		Для Каждого Порядок Из МассивПорядков Цикл
			МаксимальныйПорядок = Макс(МаксимальныйПорядок, Порядок);
		КонецЦикла;
		КоличествоДобавленныхПриложений = МаксимальныйПорядок + 1;
		
		ДополнительныеПараметрыПриложения.Вставить("Порядок", КоличествоДобавленныхПриложений);
		
	КонецЕсли;
	
	////////////////////////////////////
	// КодИсходногоПриложения, КодИсходногоПриложенияПредставление, КоличествоДобавленныхПриложений
	
	// Добавление областей приложений во временный макет Показатели

	ПостфиксПриложения = "_" + Строка(КоличествоДобавленныхПриложений);
	
	Макет = ПолучитьМакет("Показатели");
	МакетПоказателиПриложений = Новый ТабличныйДокумент;
	ИмяМакетаПриложения = СтрЗаменить(мВыбраннаяФорма, "Форма700", КодИсходногоПриложения);
	
	ИмяМакетаНовогоПриложения = СтрЗаменить(ИмяМакетаПриложения, КодИсходногоПриложения, КодИсходногоПриложения + ПостфиксПриложения);
	
	МакетПриложения = Макет.ПолучитьОбласть(ИмяМакетаПриложения);
	
	Область = МакетПриложения.Область(ИмяМакетаПриложения);
	Область.Имя = ИмяМакетаНовогоПриложения;
	МакетПриложения.Область(1, 7).Текст = КодИсходногоПриложения + ПостфиксПриложения; // Код формы		
	МакетПриложения.Область(1, 2).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 2).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	МакетПриложения.Область(1, 9).Текст = СтрЗаменить(
	МакетПриложения.Область(1, 9).Текст, КодИсходногоПриложенияПредставление, КодИсходногоПриложенияПредставление + "(" + КоличествоДобавленныхПриложений + ")");
	
	МакетПоказателиПриложений.Присоединить(МакетПриложения);
	
	// Добавление новых форм приложений в реквизиты формы СписокФормДерева, мСписокФормБезИерархии
	
	СтрокиДереваФорм = СписокФормДерева.Строки;
	СтрокиДереваСписокФормБезИерархии = мСписокФормБезИерархии.Строки;
	
	ФормаПериода = ПолучитьФорму(мВыбраннаяФорма);
	ПереименоватьЭлементыФормы(ФормаПериода, КодИсходногоПриложения + ПостфиксПриложения);

	// заполним структуру значений для всех заполняемых форм из макетов
	//Попытка 
	//	Макет = ПолучитьМакет("Макет" + мВыбраннаяФорма);    
	//Исключение
	//	Макет = Неопределено; // для форм, в которых нет многострочных форм, в них не создаются макеты
	//КонецПопытки;
	
	Для  НомерОбласти = 0 По МакетПоказателиПриложений.Области.Количество()-1 Цикл
		
		Область = МакетПоказателиПриложений.Области[НомерОбласти];
		
		КодФормы_           = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 7).Текст);
		КодИсходнойФормы    = Лев(КодФормы_, 11);
		
		ИмяФормыXML      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  1).Текст) + ПостфиксПриложения;
		ИмяСтраницы      	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  2).Текст);
		ПоказатьСтраницу 	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  3).Текст));
		Выгружать        	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  4).Текст));
		Признакосновной  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  5).Текст));
		Многострочность  	= Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх,  6).Текст));
		ФормаРодитель    	= СокрП(МакетПоказателиПриложений.Область(Область.Верх,  8).Текст);  
		ЗаголовокФормы      = СокрП(МакетПоказателиПриложений.Область(Область.Верх,  9).Текст);  
		КоличествоНаЛисте   = Число(СокрП(МакетПоказателиПриложений.Область(Область.Верх, 10).Текст));  		
		ОриентацияСтр       = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 11).Текст);  
		ИспользуетсяМакет   = СокрП(МакетПоказателиПриложений.Область(Область.Верх, 13).Текст);  
		
		ИсходнаяФорма       = СтрокиДереваФорм.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФорма = Неопределено Тогда
			Продолжить;
		Иначе
			
			Если ИсходнаяФорма.Родитель <> Неопределено Тогда
				СтрокиДерева = ИсходнаяФорма.Родитель.Строки;
			Иначе
				СтрокиДерева = СтрокиДереваФорм;
			КонецЕсли;
			
			НоваяФорма = СтрокиДерева.Вставить(СтрокиДерева.Индекс(ИсходнаяФорма) + Число(Сред(КодФормы_, 13)));
			НоваяФорма.ИмяФормы            = ИмяФормыXML;
			НоваяФорма.КодФормы            = КодФормы_;
			НоваяФорма.Страницы            = ИмяСтраницы;
			НоваяФорма.Многострочность     = Многострочность;
			НоваяФорма.Выгружать           = Выгружать;
			НоваяФорма.Признакосновной     = ПризнакОсновной;
			НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;	
			НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;  
			НоваяФорма.АвтополучениеИтогов = 1;           
			НоваяФорма.АвтоЗаполнение      = 1;           
			НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;           
			НоваяФорма.ОриентацияСтр       = ОриентацияСтр;          
			
		КонецЕсли;
		
		// Добавление областей в макет мМакет для многострочных форм
		Если Многострочность = 1 Тогда
			
			КодИсходнойФормыБезПрефикса = Сред(КодИсходногоПриложения  , 6);
			КодФормыБезПрефикса         = Сред(КодФормы_, 6);
			
			МакетИсходный = мМакет.ПолучитьОбласть(КодИсходногоПриложения);
			МакетНовый    = мМакет.ПолучитьОбласть(КодИсходногоПриложения);
			
			Для Каждого ТекОбласть Из МакетИсходный.Области Цикл
				Если Найти(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса) <> 0 Тогда
					ТекОбластьНовая     = МакетНовый.Область(ТекОбласть.Имя);
					ТекОбластьНовая.Имя = СтрЗаменить(ТекОбласть.Имя, КодИсходнойФормыБезПрефикса, КодФормыБезПрефикса);
				КонецЕсли;
			КонецЦикла;
			
			НачальнаяСтрока = мМакет.ВысотаТаблицы + 1;
			ОбластьПриемник = мМакет.Область(НачальнаяСтрока, , НачальнаяСтрока + МакетНовый.ВысотаТаблицы - 1);
			мМакет.ВставитьОбласть(МакетНовый.Область(КодФормы_), ОбластьПриемник);
			
			Для Каждого ИсходнаяОбласть Из МакетНовый.Области Цикл
				ТекОбласть = мМакет.Области.Найти(ИсходнаяОбласть.Имя);
				Если ТекОбласть <> Неопределено Тогда
					Если ИсходнаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
						ЗаполнитьЗначенияСвойств(ТекОбласть, ИсходнаяОбласть, , "Значение");
					КонецЕсли;
					ТекОбласть.Защита = ИсходнаяОбласть.Защита;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		///////////////////
		Если ВосстановлениеСохраненныхДанных Тогда
			 // при открытии сохраненного ранее отчета
			 // не заполняем мСписокФормБезИерархии и ТаблицаДобавленныхПриложений
			Продолжить;
		КонецЕсли;
		/////////////////////
		
		ИсходнаяФормаБезИерархии = СтрокиДереваСписокФормБезИерархии.Найти(КодИсходнойФормы, "КодФормы", Истина);
		
		Если ИсходнаяФормаБезИерархии <> Неопределено Тогда
			
			Если ИсходнаяФормаБезИерархии.Родитель <> Неопределено Тогда
				СтрокиДереваБезИерархии = ИсходнаяФормаБезИерархии.Родитель.Строки;
			Иначе
				СтрокиДереваБезИерархии = СтрокиДереваСписокФормБезИерархии;
			КонецЕсли;
			
			НоваяФорма = СтрокиДереваБезИерархии.Добавить();
			
		Иначе
			
			НоваяФорма = СтрокиДереваСписокФормБезИерархии.Добавить();
			
		КонецЕсли;
		
		НоваяФорма.КодФормы            = КодФормы_;
		НоваяФорма.ПоказатьСтраницу    = ПоказатьСтраницу;
		НоваяФорма.Выгружать           = Выгружать;
		НоваяФорма.АвтополучениеИтогов = 1; 
		НоваяФорма.АвтоЗаполнение      = 1; 
		НоваяФорма.Страницы            = ИмяСтраницы;
		НоваяФорма.ИмяФормы            = ИмяФормыXML;
		НоваяФорма.Многострочность     = Многострочность;
		НоваяФорма.КоличествоНаЛисте   = КоличествоНаЛисте;
		НоваяФорма.ОриентацияСтр       = ОриентацияСтр; 
		НоваяФорма.ПризнакОсновной     = ПризнакОсновной;
		НоваяФорма.ЗаголовокФормы      = ЗаголовокФормы;
		
		МногСтруктура = РегламентированнаяОтчетностьФормированиеСтруктурыМногострочнойФормы(КодФормы_ ,ФормаПериода, мМакет);
		ТаблицаРасшифровки = Новый ТаблицаЗначений;         
		ТаблицаРасшифровки.Колонки.Добавить("ИмяГруппы");   
		ТаблицаРасшифровки.Колонки.Добавить("ИмяЯчейки");   
		ТаблицаРасшифровки.Колонки.Добавить("ПолеПоиска");  
		ТаблицаРасшифровки.Колонки.Добавить("НомерСтроки");
		ТаблицаРасшифровки.Индексы.Добавить("НомерСтроки");
		ТаблицаРасшифровки.Индексы.Добавить("ИмяЯчейки");
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Данные");
		ТаблицаДанных.Колонки.Добавить("ТаблицаРасшифровки");
		Строка = ТаблицаДанных.Добавить();
		Строка.Данные = МногСтруктура;
		Строка.ТаблицаРасшифровки = ТаблицаРасшифровки;
		НоваяФорма.Значение = ТаблицаДанных;
		
		ДобавленноеПриложение = ТаблицаДобавленныхПриложений.Добавить();
		ДобавленноеПриложение.КодФормы = КодФормы_;
		ДобавленноеПриложение.КодИсходнойФормы  = КодИсходнойФормы;
		ДобавленноеПриложение.НаименованиеФормы = ИмяСтраницы;
		
		ЗаполнитьЗначенияСвойств(ДобавленноеПриложение, ДополнительныеПараметрыПриложения);   // СтруктурнаяЕдиница, МестныйБюджет
		
	КонецЦикла;  	
	
	ТаблицаДобавленныхПриложений.Сортировать("КодФормы, Порядок");
	СтрокиДереваСписокФормБезИерархии.Сортировать("КодФормы", Истина);
	СтрокиДереваФорм.Сортировать("КодФормы", Истина);
	
КонецПроцедуры

Процедура УдалитьПриложение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИндексПриложения = ДополнительныеПараметры.ИндексПриложения;
	
	Автозаполнение = Неопределено;
	ДополнительныеПараметры.Свойство("Автозаполнение", Автозаполнение);
	Автозаполнение = ?(Автозаполнение = Неопределено, Ложь, Автозаполнение);

	СтрокаПриложения = ТаблицаДобавленныхПриложений.Получить(ИндексПриложения);
	
	КодИсходнойФормы  = СтрокаПриложения.КодИсходнойФормы;
	КодУдаляемойФормы = СтрокаПриложения.КодФормы;
	
	ПередаватьВТабличноеПоле = мФорма.ИмяФормы = "Форма700";
	
	Если Найти(КодУдаляемойФормы, "Форма700_01") <> 0 И НЕ Автозаполнение Тогда
		СтруктураГруппы = Неопределено;
		ТекИмяФормыБезПрефикса = Сред(КодУдаляемойФормы, 6);
		Если мСписокФормБезИерархии.Строки.Найти(КодУдаляемойФормы, "КодФормы") = Неопределено Тогда
			СтруктураГруппы = Неопределено;
		Иначе
			ДП_МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(КодУдаляемойФормы, мСписокФормБезИерархии);
			ДП_МногострочнаяСтруктура.Свойство("Страница2", СтруктураГруппы);
		КонецЕсли;
		Если СтруктураГруппы <> Неопределено Тогда
			ДП_ТаблицаСтрокГруппыСтраница2 = СтруктураГруппы.Строки;
			Если ДП_ТаблицаСтрокГруппыСтраница2.Количество() = 0 Тогда
				УдаляемаяСумма = 0;
			Иначе
				ЗначениеСтроки = ДП_ТаблицаСтрокГруппыСтраница2.Получить(0)["Ф" + ТекИмяФормыБезПрефикса + "_034"];
				УдаляемаяСумма = ?(ЗначениеСтроки = Неопределено, 0, ЗначениеСтроки);
			КонецЕсли;
		Иначе
			УдаляемаяСумма = 0;
		КонецЕсли;
		
		// Пересчет номеров страниц приложений 700.01
		СтрокиПриложения = ТаблицаДобавленныхПриложений.НайтиСтроки(Новый Структура("КодИсходнойФормы", КодИсходнойФормы));
		НомерСтраницы = 1;
		Для Каждого ДобавленноеПриложение Из СтрокиПриложения Цикл
			
			Если ДобавленноеПриложение.КодФормы = КодУдаляемойФормы Тогда
				Продолжить;
			КонецЕсли;
			Если мСписокФормБезИерархии.Строки.Найти(ДобавленноеПриложение.КодФормы, "КодФормы") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы = НомерСтраницы + 1;
			НомерСтраницыСтрока = Формат(НомерСтраницы, "ЧЦ=3; ЧДЦ=0; ЧВН=");
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(мФорма, ДобавленноеПриложение.КодФормы, "НомСт", НомерСтраницыСтрока, ПередаватьВТабличноеПоле);
			
		КонецЦикла;
		
		// Пересчет суммы налога в форме 700.00
		Если УдаляемаяСумма <> 0 Тогда
			
			ТаблицаДанных  = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы("Форма700", мСписокФормБезИерархии);
			ЗначениеСтроки = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_001");
			СуммаНалога    = ?(ЗначениеСтроки = Неопределено, 0, ЗначениеСтроки);
			
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(мФорма, "Форма700", "s_700_00_001", СуммаНалога - УдаляемаяСумма, ПередаватьВТабличноеПоле);

		КонецЕсли;
		
	КонецЕсли;

	Если Найти(КодУдаляемойФормы, "Форма700_02") <> 0 И НЕ Автозаполнение Тогда
		СтруктураГруппы = Неопределено;
		ТекИмяФормыБезПрефикса = Сред(КодУдаляемойФормы, 6);
		Если мСписокФормБезИерархии.Строки.Найти(КодУдаляемойФормы, "КодФормы") = Неопределено Тогда
			СтруктураГруппы = Неопределено;
		Иначе
			ДП_МногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(КодУдаляемойФормы, мСписокФормБезИерархии);
			ДП_МногострочнаяСтруктура.Свойство("ЛистC", СтруктураГруппы);
		КонецЕсли;
		Если СтруктураГруппы <> Неопределено Тогда
			ДП_ТаблицаСтрокГруппыЛистC = СтруктураГруппы.ШапкаИПодвал;
			УдаляемаяСумма104302 = ?(ДП_ТаблицаСтрокГруппыЛистC.Найти("Ф" + ТекИмяФормыБезПрефикса + "_P1", "ИмяОбласти").Значение = Неопределено, 0, ДП_ТаблицаСтрокГруппыЛистC.Найти("Ф" + ТекИмяФормыБезПрефикса + "_P1", "ИмяОбласти").Значение);
			УдаляемаяСумма104309 = ?(ДП_ТаблицаСтрокГруппыЛистC.Найти("Ф" + ТекИмяФормыБезПрефикса + "_S1", "ИмяОбласти").Значение = Неопределено, 0, ДП_ТаблицаСтрокГруппыЛистC.Найти("Ф" + ТекИмяФормыБезПрефикса + "_S1", "ИмяОбласти").Значение);
		Иначе
			УдаляемаяСумма104302 = 0;
			УдаляемаяСумма104309 = 0;
		КонецЕсли;
		
		// Пересчет суммы налога в форме 700.00
		Если УдаляемаяСумма104302 <> 0 ИЛИ УдаляемаяСумма104309 <> 0 Тогда
			
			ТаблицаДанных     = РегламентированнаяОтчетность.ПолучитьТаблицуДанныхОбычнойФормы("Форма700", мСписокФормБезИерархии);
			
			ЗначениеСтроки    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002");
			СуммаНалога       = ?(ЗначениеСтроки = Неопределено, 0, ЗначениеСтроки);
			
			ЗначениеСтроки    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002_I");
			СуммаНалога104302 = ?(ЗначениеСтроки = Неопределено, 0, ЗначениеСтроки);
			
			ЗначениеСтроки    = РегламентированнаяОтчетность.ЗначениеТаблицыДанныхОбычнойФормы(ТаблицаДанных, "s_700_00_002_II");
			СуммаНалога104309 = ?(ЗначениеСтроки = Неопределено, 0, ЗначениеСтроки);

			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(мФорма, "Форма700", "s_700_00_002"   , СуммаНалога - УдаляемаяСумма104302 - УдаляемаяСумма104309, ПередаватьВТабличноеПоле);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(мФорма, "Форма700", "s_700_00_002_I" , СуммаНалога104302 - УдаляемаяСумма104302, ПередаватьВТабличноеПоле);
			РегламентированнаяОтчетность.ПередатьЗначениеВСтруктуру(мФорма, "Форма700", "s_700_00_002_II", СуммаНалога104309 - УдаляемаяСумма104309, ПередаватьВТабличноеПоле);
			
		КонецЕсли;

	КонецЕсли;

	СтрокиДереваФорм = СписокФормДерева.Строки;
	УдаляемаяСтрока  = СтрокиДереваФорм.Найти(КодУдаляемойФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФорм = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФорм.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	
	СтрокиДереваФормБезИерархии = мСписокФормБезИерархии.Строки;
	УдаляемаяСтрока  = СтрокиДереваФормБезИерархии.Найти(КодУдаляемойФормы, "КодФормы", Истина);
	Если УдаляемаяСтрока <> Неопределено Тогда
		Если УдаляемаяСтрока.Родитель <> Неопределено Тогда
			СтрокиДереваФормБезИерархии = УдаляемаяСтрока.Родитель.Строки;
		КонецЕсли;
		СтрокиДереваФормБезИерархии.Удалить(УдаляемаяСтрока);
	КонецЕсли;
	
	УдаляемаяОбласть = мМакет.Области.Найти(КодУдаляемойФормы);
	Если УдаляемаяОбласть <> Неопределено Тогда
		мМакет.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	ТаблицаДобавленныхПриложений.Удалить(СтрокаПриложения);
	
	мФормаНавигации.ЭлементыФормы.Дерево.Значение = СписокФормДерева;
	
	Если НЕ Автозаполнение Тогда
		РегламентированнаяОтчетность.СформироватьПризнакиФормыИПередатьИтоги(мФорма, мФорма.ИмяФормы, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереименоватьЭлементыФормы(Форма, КодФормыНовый) Экспорт
	
	Если Найти(КодФормыНовый, "Форма700_01") <> 0 Тогда
		КодИсходнойФормы = "Форма700_01";
	ИначеЕсли Найти(КодФормыНовый, "Форма700_02") <> 0 Тогда
		КодИсходнойФормы = "Форма700_02";
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Страница Из Форма.ЭлементыФормы.ГлавнаяПанель.Страницы Цикл
		Если Найти(Страница.Имя, КодИсходнойФормы) <> 0 Тогда
			Страница.Имя = КодФормыНовый;
		КонецЕсли;
	КонецЦикла;
		
	СвойстваПриложения = Неопределено;
	СвойстваДобавляемыхПриложений.Свойство(КодИсходнойФормы, СвойстваПриложения);
	
	Если СвойстваПриложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДобПриложений = ТаблицаДобавленныхПриложений.Скопировать(Новый Структура("КодИсходнойФормы", КодИсходнойФормы), "КодФормы");
	МассивКодовФорм  = ТабДобПриложений.ВыгрузитьКолонку("КодФормы");
	МассивКодовФорм.Вставить(0, КодИсходнойФормы);
	
	Для Каждого КодФормыДобавленный Из МассивКодовФорм Цикл
		
		Для Каждого ИсходныйРеквизитИмя Из СвойстваПриложения.РеквизитыФормы Цикл
			
			ТекущееИмя = СтрЗаменить(ИсходныйРеквизитИмя, КодИсходнойФормы, КодФормыДобавленный);
			НовоеИмя   = СтрЗаменить(ИсходныйРеквизитИмя, КодИсходнойФормы, КодФормыНовый);
			
			ИзменяемыйЭлемент = Форма.ЭлементыФормы.Найти(ТекущееИмя);
			Если ИзменяемыйЭлемент <> Неопределено Тогда
				ИзменяемыйЭлемент.Имя = НовоеИмя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегламентированнаяОтчетностьФормированиеСтруктурыМногострочнойФормы(мТекущаяЗакладка, ФормаПериода, Макет) Экспорт
	
	Если Макет = Неопределено Тогда
		Сообщить("Не найден макет для многострочных форм!!!");
		Возврат Новый Структура;
	КонецЕсли;
	
	//Формируем структуры групп для многострочных форм 
	
	// структура многострочных разделов формы              	
 	мМногострочнаяСтруктура = Новый Структура;
	
	Для Каждого Страница Из ФормаПериода.ЭлементыФормы["Панель" + мТекущаяЗакладка].Страницы Цикл
			
		ИмяГруппы = Страница.Имя;							
		ОбластьШапка  = Неопределено;
		ОбластьИтог   = Неопределено;
		ОбластьСтрока = Неопределено;
		ОбластьПодвал = Неопределено;
		Если Макет.Области.Найти("Шапка"   + мТекущаяЗакладка + ИмяГруппы) <> Неопределено Тогда
			ОбластьШапка  = Макет.ПолучитьОбласть("Шапка"  + мТекущаяЗакладка + ИмяГруппы);	 
		КонецЕсли;
		Если Макет.Области.Найти("Итог"   + мТекущаяЗакладка + ИмяГруппы) <> Неопределено Тогда
			ОбластьИтог   = Макет.ПолучитьОбласть("Итог"   + мТекущаяЗакладка + ИмяГруппы);	
		КонецЕсли;
		Если Макет.Области.Найти("Строка"   + мТекущаяЗакладка + ИмяГруппы) <> Неопределено Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка" + мТекущаяЗакладка + ИмяГруппы);
		КонецЕсли;
		Если Макет.Области.Найти("Подвал"   + мТекущаяЗакладка + ИмяГруппы) <> Неопределено Тогда
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал" + мТекущаяЗакладка + ИмяГруппы); 
		КонецЕсли;
		
		ТаблицаСтрокГруппы = Новый ТаблицаЗначений;
		Если ОбластьСтрока <> Неопределено Тогда
			Для каждого Область Из ОбластьСтрока.Области Цикл
				// Область может включать саму себ. исключаем ее из структуры
				Если Врег(Область.Имя) = Врег("Строка" + мТекущаяЗакладка + ИмяГруппы) Тогда
					Продолжить;
				КонецЕсли;
			    //отсекаем 3 последних символа "__1"
				ИмяКолонки = Лев(Область.Имя,СтрДлина(Область.Имя) - 3);
				ТаблицаСтрокГруппы.Колонки.Добавить(ИмяКолонки);
			КонецЦикла;
		КонецЕсли;
		
		// заполняем именами областей подвала, шапки и итогов таблицу значений ОбщиеЭлементыГруппы
		ОбщиеЭлементыГруппы = Новый ТаблицаЗначений;
		ОбщиеЭлементыГруппы.Колонки.Добавить("ИмяОбласти");
		ОбщиеЭлементыГруппы.Колонки.Добавить("ИмяПараметра");
		ОбщиеЭлементыГруппы.Колонки.Добавить("Итог");
		ОбщиеЭлементыГруппы.Колонки.Добавить("Значение");
		ОбщиеЭлементыГруппы.Индексы.Добавить("ИмяОбласти");
		ОбщиеЭлементыГруппы.Индексы.Добавить("ИмяПараметра");
		Если ОбластьШапка <> Неопределено Тогда
			Для каждого Область Из ОбластьШапка.Области Цикл
				// Область может включать саму себ. исключаем ее из структуры
				Если Врег(Область.Имя) = Врег("Шапка" + мТекущаяЗакладка + ИмяГруппы) Тогда
					Продолжить;
				КонецЕсли;
				Если Врег(Область.Параметр) = Врег("Стр") Тогда
					Продолжить;
				КонецЕсли;
	            ТекИмяОбласти       = Область.Имя;
				ТекИмяПараметра     = Область.Параметр;
				Строка = ОбщиеЭлементыГруппы.Добавить();
				Строка.ИмяОбласти   = ТекИмяОбласти;
				Строка.ИмяПараметра = ТекИмяПараметра;
				Строка.Итог = Ложь;
			КонецЦикла;
		КонецЕсли;
		Если ОбластьИтог <> Неопределено Тогда
			Для каждого Область Из ОбластьИтог.Области Цикл
				// Область может включать саму себ. исключаем ее из структуры
				Если Врег(Область.Имя) = Врег("Итог" + мТекущаяЗакладка + ИмяГруппы) Тогда
					Продолжить;
				КонецЕсли;
	            ТекИмяОбласти       = Область.Имя;
				ТекИмяПараметра     = Область.Параметр;
				Строка = ОбщиеЭлементыГруппы.Добавить();
				Строка.ИмяОбласти   = ТекИмяОбласти;
				Строка.ИмяПараметра = ТекИмяПараметра;
				Если ТаблицаСтрокГруппы.Колонки.Найти(ТекИмяОбласти) <> Неопределено Тогда 
		    		Строка.Итог = Истина;
				Иначе
					Строка.Итог = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ОбластьПодвал <> Неопределено Тогда
			Для каждого Область Из ОбластьПодвал.Области Цикл
				// Область может включать саму себ. исключаем ее из структуры
				Если Врег(Область.Имя) = Врег("Подвал" + мТекущаяЗакладка + ИмяГруппы) Тогда
					Продолжить;
				КонецЕсли;
	            ТекИмяОбласти       = Область.Имя;
				ТекИмяПараметра     = Область.Параметр;
				Строка = ОбщиеЭлементыГруппы.Добавить();
				Строка.ИмяОбласти   = ТекИмяОбласти;
				Строка.ИмяПараметра = ТекИмяПараметра;
				Строка.Итог = Ложь;
			КонецЦикла;
		КонецЕсли;	         		
		ОбщиеЭлементыГруппы.Индексы.Добавить("ИмяОбласти,ИмяПараметра,Итог");
		ДанныеСтраницы = Новый Структура;
		ДанныеСтраницы.Вставить("ШапкаИПодвал", ОбщиеЭлементыГруппы);
		ДанныеСтраницы.Вставить("Строки",       ТаблицаСтрокГруппы);
					
	    //записываем данные страницы в многострочную структуру
 		мМногострочнаяСтруктура.Вставить(ИмяГруппы, ДанныеСтраницы);
				
	КонецЦикла;
	
	Возврат мМногострочнаяСтруктура;
	   
КонецФункции // ФормированиеСтруктурыМногострочнойФормы()

Процедура ДобавленноеПриложениеМакетВыгрузкаВXML(КодФормыПриложения, КодИсходнойФормы, МакетВыгрузки)
	
	Если МакетВыгрузки.Области.Найти(КодФормыПриложения) <> Неопределено Тогда
		// Область уже была добавлена ранее
		Возврат;
	КонецЕсли;
	
	КодИсходнойФормыБезПрефикса   = Сред(КодИсходнойФормы, 6);
	КодИсходнойФормыБезПрефикса2  = СтрЗаменить(КодИсходнойФормыБезПрефикса, "_", "");
	КодФормыПриложенияБезПрефикса = Сред(КодФормыПриложения, 6);
	
	ПостфиксПриложения = СтрЗаменить(КодФормыПриложенияБезПрефикса, КодИсходнойФормыБезПрефикса, "");
	
	МакетВыгрузкаВXMLОсновной = ПолучитьМакет("ВыгрузкаВXML");
	
	Префикс = Прав(мВыбраннаяФорма, 7);
	
	ОбластьВыгрузкиОсновная = МакетВыгрузкаВXMLОсновной.Область("Выгрузка" + Префикс);
	
	Если ОбластьВыгрузкиОсновная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПриложения = Новый ТабличныйДокумент;
	
	Для Ном = ОбластьВыгрузкиОсновная.Верх По ОбластьВыгрузкиОсновная.Низ Цикл
		
		ИмяФормыВыгрузки = СокрЛП(МакетВыгрузкаВXMLОсновной.Область(Ном, 1).Текст);
		
		Если Найти(ИмяФормыВыгрузки, "form_" + КодИсходнойФормыБезПрефикса) <> 0 И ИмяФормыВыгрузки <> "form_700_01_002" Тогда
			
			НачальнаяСтрока = ОбластьПриложения.ВысотаТаблицы + 1;
			ОбластьПриемник = ОбластьПриложения.Область(НачальнаяСтрока, 1, НачальнаяСтрока, 8);
			ОбластьПриложения.ВставитьОбласть(МакетВыгрузкаВXMLОсновной.Область(Ном, 1, Ном, 8), ОбластьПриемник);
			
			ИмяПоля = ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст;
			Если Найти(ИмяПоля, КодИсходнойФормыБезПрефикса) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 4).Текст = СокрЛП(СтрЗаменить(ИмяПоля, КодИсходнойФормыБезПрефикса, КодФормыПриложенияБезПрефикса));
			КонецЕсли;
			
			ИмяИсходнойФормыПриложения = ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст;
			Если Найти(ИмяИсходнойФормыПриложения, КодИсходнойФормыБезПрефикса2) <> 0 Тогда
				ОбластьПриложения.Область(НачальнаяСтрока, 6).Текст = ИмяИсходнойФормыПриложения + ПостфиксПриложения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьПриложения.ВысотаТаблицы <> 0 Тогда
		ОбластьИсточник = ОбластьПриложения.Область(1, 1, ОбластьПриложения.ВысотаТаблицы, 8);
		ОбластьИсточник.Имя = КодФормыПриложения;
		
		НачальнаяСтрока = МакетВыгрузки.ВысотаТаблицы + 1;
		ОбластьПриемник = МакетВыгрузки.Область(НачальнаяСтрока, 1, НачальнаяСтрока + ОбластьПриложения.ВысотаТаблицы - 1, 8);
		МакетВыгрузки.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавленныеПриложенияОбластьВыгрузки(КодФормыПриложения, МакетВыгрузки, ОбластьВыгрузки, МакетВыгрузкиПриложения)
	
	// Области добавленных приложений ранее добавлены в конец МакетВыгрузки
	
	ОбластьПриложения = МакетВыгрузки.Области.Найти(КодФормыПриложения);
	Если ОбластьПриложения <> Неопределено Тогда
		МакетВыгрузкиПриложения = Новый ТабличныйДокумент;
		ОбластьПриемник = МакетВыгрузкиПриложения.Область(1, 1, ОбластьПриложения.Низ - ОбластьПриложения.Верх + 1, ОбластьПриложения.Право);
		МакетВыгрузкиПриложения.ВставитьОбласть(ОбластьПриложения, ОбластьПриемник);
		Если МакетВыгрузкиПриложения.ВысотаТаблицы <> 0 Тогда
			ОбластьВыгрузки = МакетВыгрузкиПриложения.Область(1, 1, МакетВыгрузкиПриложения.ВысотаТаблицы, МакетВыгрузкиПриложения.ШиринаТаблицы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавленныеПриложенияВосстановить() Экспорт
	
	Для Каждого ДобавленноеПриложение ИЗ ТаблицаДобавленныхПриложений Цикл
		
		КодФормы         = ДобавленноеПриложение.КодФормы;
		КодИсходнойФормы = ДобавленноеПриложение.КодИсходнойФормы;
		
		Если КодИсходнойФормы = "Форма700_01" Тогда
			КодИсходнойФормыПредставление = "700.01";
		ИначеЕсли КодИсходнойФормы = "Форма700_02" Тогда
			КодИсходнойФормыПредставление = "700.02";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПараметрыПриложения = Новый Структура("ВосстановлениеСохраненныхДанных, Порядок", Истина, ДобавленноеПриложение.Порядок);
		ДобавитьПриложениеБазовыеДанные(КодИсходнойФормы, КодИсходнойФормыПредставление, ДополнительныеПараметрыПриложения);
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

//заполняем всеми формами, которые входят в отчет
//в качестве кода формы назначает имя  форм, входящих в отчет
СписокФормДерева  = Новый ДеревоЗначений;
СписокФормДерева.Колонки.Добавить("Страницы");
СписокФормДерева.Колонки.Добавить("КодФормы");
СписокФормДерева.Колонки.Добавить("ИмяФормы");
СписокФормДерева.Колонки.Добавить("ПоказатьСтраницу");
СписокФормДерева.Колонки.Добавить("Выгружать");
СписокФормДерева.Колонки.Добавить("Многострочность");
СписокФормДерева.Колонки.Добавить("ПризнакОсновной");
СписокФормДерева.Колонки.Добавить("ЗаголовокФормы"); 
СписокФормДерева.Колонки.Добавить("АвтополучениеИтогов");    
СписокФормДерева.Колонки.Добавить("Автозаполнение");    
СписокФормДерева.Колонки.Добавить("КоличествоНаЛисте");    
СписокФормДерева.Колонки.Добавить("ОриентацияСтр");    
СписокФормДерева.Колонки.Добавить("Значение");    
                                                         
мТаблицаФорматов  = Новый ТаблицаЗначений;                        
мТаблицаФорматов.Колонки.Добавить("ИмяФормы");       
мТаблицаФорматов.Колонки.Добавить("ИмяСтраницы");                 
мТаблицаФорматов.Колонки.Добавить("Элемент");            
мТаблицаФорматов.Колонки.Добавить("Тип");                    
мТаблицаФорматов.Колонки.Добавить("ПроверкаНаПустое");        
мТаблицаФорматов.Колонки.Добавить("НеРедактируется");    
мТаблицаФорматов.Колонки.Добавить("Мин");      
мТаблицаФорматов.Колонки.Добавить("Макс");               
мТаблицаФорматов.Колонки.Добавить("ФиксированнаяДлина");                    
мТаблицаФорматов.Колонки.Добавить("Длина");
мТаблицаФорматов.Колонки.Добавить("Дополнение");
мТаблицаФорматов.Колонки.Добавить("НаименованиеФормы");

мТаблицаПоказателейДляПередачиДанных = Новый ТаблицаЗначений;
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиИсточник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("КодФормыПриемник");       
мТаблицаПоказателейДляПередачиДанных.Колонки.Добавить("ИмяОбластиПриемник");       
                                                     
ИмяПакета = "http://www.fno700.rating.kz";
ИмяФайлаВыгрузки = "700.efn";

мПризнакАлиментов = Ложь;

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
|ВЫБРАТЬ
|	ФИОФИзЛиц.Фамилия,
|	ФИОФИзЛиц.Имя,
|	ФИОФИзЛиц.Отчество
|ИЗ
|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Выборка.Имя, "") + ?(Выборка.Отчество <> "", " " + Выборка.Отчество, "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");

ТаблицаДобавленныхПриложений  = Новый ТаблицаЗначений;                        
ТаблицаДобавленныхПриложений.Колонки.Добавить("КодФормы");       
ТаблицаДобавленныхПриложений.Колонки.Добавить("КодИсходнойФормы");                 
ТаблицаДобавленныхПриложений.Колонки.Добавить("ДобавленныеРеквизиты");            
ТаблицаДобавленныхПриложений.Колонки.Добавить("ГруппаФормыПриложения");                    
ТаблицаДобавленныхПриложений.Колонки.Добавить("СтруктурнаяЕдиница");        
ТаблицаДобавленныхПриложений.Колонки.Добавить("ГоловнаяОрганизация");    
ТаблицаДобавленныхПриложений.Колонки.Добавить("МестныйБюджет");      
ТаблицаДобавленныхПриложений.Колонки.Добавить("НаименованиеФормы");               
ТаблицаДобавленныхПриложений.Колонки.Добавить("Порядок");                    

СвойстваДобавляемыхПриложений = Новый Структура;

СвойстваПриложения = Новый Структура("ГруппаФормыВладелец, ИсходнаяСтраница, Количество, РеквизитыФормы, Многострочность");

СвойстваПриложения.ГруппаФормыВладелец = "ГлавнаяПанель";
СвойстваПриложения.ИсходнаяСтраница = "Форма700_01";
СвойстваПриложения.Количество = 0;
РеквизитыФормы = Новый Массив;
РеквизитыФормы.Добавить("Форма700_01ПолеТабличногоДокументаСтраница1");
РеквизитыФормы.Добавить("Форма700_01ПолеТабличногоДокументаСтраница2");
РеквизитыФормы.Добавить("ПанельФорма700_01");
СвойстваПриложения.РеквизитыФормы = РеквизитыФормы;
СвойстваПриложения.Многострочность = Ложь;

СвойстваДобавляемыхПриложений.Вставить("Форма700_01", СвойстваПриложения);

СвойстваПриложения = Новый Структура("ГруппаФормыВладелец, ИсходнаяСтраница, Количество, РеквизитыФормы, Многострочность");

СвойстваПриложения.ГруппаФормыВладелец = "ГлавнаяПанель";
СвойстваПриложения.ИсходнаяСтраница = "Форма700_02";
СвойстваПриложения.Количество = 0;
РеквизитыФормы = Новый Массив;
РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистA");
РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистB");                                      
РеквизитыФормы.Добавить("Форма700_02ПолеТабличногоДокументаЛистC");
РеквизитыФормы.Добавить("ПанельФорма700_02");
СвойстваПриложения.РеквизитыФормы = РеквизитыФормы;
СвойстваПриложения.Многострочность = Истина;

ТаблицаДляОтражениеВУчете = Новый ТаблицаЗначений;
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ВидНалога");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ДатаУплаты");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("КБК");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ДатаОтражения");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ДатаНачалаОтчета");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ДатаОкончанияОтчета");                                    
ТаблицаДляОтражениеВУчете.Колонки.Добавить("Организация");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("СтруктурнаяЕдиница");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("НалоговыйКомитет");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("РННПлательщика");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("Комментарий");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("Значение");
ТаблицаДляОтражениеВУчете.Колонки.Добавить("ИмяФормы");

СвойстваДобавляемыхПриложений.Вставить("Форма700_02", СвойстваПриложения);

#КонецЕсли
