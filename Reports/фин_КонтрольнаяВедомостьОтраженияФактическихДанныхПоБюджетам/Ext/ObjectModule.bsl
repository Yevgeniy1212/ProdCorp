
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВидДанных) Тогда
		СтандартнаяОбработка = Ложь;
		ДокументРезультат.Очистить();
		Возврат;
	КонецЕсли;
	Если ВыводитьДанныеИсточника И ОтображениеБюджетныхДанных = 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован, т.к. одновременный вывод данных источника и отображение разрезов в строках невозможны");
		СтандартнаяОбработка = Ложь;
		ДокументРезультат.Очистить();
		Возврат;
	КонецЕсли;
	Для Каждого Реквизит Из Метаданные().Реквизиты Цикл
		Если КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Реквизит.Имя)<>Неопределено Тогда
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Реквизит.Имя,?(НРег(Реквизит.Имя)=НРег("КонецПериода"),КонецДня(ЭтотОбъект[Реквизит.Имя]),ЭтотОбъект[Реквизит.Имя]));
		КонецЕсли;
	КонецЦикла;
	СхемаКомпоновкиДанных.НаборыДанных.Основной.Запрос = ПолучитьТекстЗапроса();
	Если ВыводитьДанныеИсточника Тогда
		СписокПолейИсточника = фин_ПроцедурыМеханизмовБюджетирования.СписокПолейИсточникаДанных(ВидДанных,?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах,ИмяИсточникаБезГруппы,ПрограммныйИдентификатор),ИмяИсточникаБезГруппы,ВидРегистра,,Истина);
		СхемаКомпоновкиДанных.НаборыДанных.Связанный.Запрос = ПолучитьТекстСвязанногоЗапроса(СписокПолейИсточника);
		МассивУдалить = Новый Массив;
		Для Каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных.Связанный.Поля Цикл
			Если ПолеНабора.ПутьКДанным <> "НомерСтроки" И ПолеНабора.ПутьКДанным <> "Документ" Тогда
				МассивУдалить.Добавить(ПолеНабора);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из МассивУдалить Цикл
			СхемаКомпоновкиДанных.НаборыДанных.Связанный.Поля.Удалить(ПолеНабора);
		КонецЦикла;
		Для Каждого ПолеНабора Из СписокПолейИсточника Цикл
			НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных.Связанный.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.ПутьКДанным 	= ПолеНабора.Поле;
			НовоеПоле.Поле 			= ПолеНабора.Поле;
			НовоеПоле.Заголовок 	= ПолеНабора.ЗаголовокПоля;
		КонецЦикла;
	КонецЕсли;
	СписокБюджетов = Новый СписокЗначений;
	СписокБюджетов.ЗагрузитьЗначения(Бюджеты.ВыгрузитьКолонку("Бюджет"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Бюджеты",СписокБюджетов);
	СписокШаблонов = Новый СписокЗначений;
	СписокШаблонов.ЗагрузитьЗначения(Шаблоны.ВыгрузитьКолонку("Шаблон"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Шаблоны",СписокШаблонов);
	СписокФинансовыеПоказатели = Новый СписокЗначений;
	СписокФинансовыеПоказатели.ЗагрузитьЗначения(ФинансовыеПоказатели.ВыгрузитьКолонку("ФинансовыйПоказатель"));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФинансовыеПоказатели",СписокФинансовыеПоказатели);
	ТаблицаОтчета = КомпоновщикНастроек.Настройки.Структура[0];
	Для Каждого Поле Из ТаблицаОтчета.Выбор.Элементы Цикл
		Если Метаданные().Реквизиты.Найти(Строка(Поле.Поле))<>Неопределено Тогда
			Поле.Использование = ЭтотОбъект[Строка(Поле.Поле)];
		КонецЕсли;
	КонецЦикла;
	
	// строки
	
	ТаблицаОтчета.Строки.Очистить();
	
	СтрокаДокумент = ДобавитьГруппировку(ТаблицаОтчета.Строки,Истина,"Документ",,,Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",15,15),(НЕ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента) ИЛИ (Не ВыводитьДанныеИсточника));
	
	УсловноеОформление = Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",25,25);
	НовыйЭлементОформления 					= СтрокаДокумент.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование	= Истина;
	Для Каждого ЭлементОформления Из УсловноеОформление Цикл
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
	КонецЦикла;
	Поле = НовыйЭлементОформления.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("Документ");
	
	УсловноеОформление = Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",3,3);
	НовыйЭлементОформления 					= СтрокаДокумент.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование	= Истина;
	Для Каждого ЭлементОформления Из УсловноеОформление Цикл
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
	КонецЦикла;
	Поле = НовыйЭлементОформления.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("ПризнакОтражения");
	
	УсловноеОформление = Новый Структура("ЦветФона",WebЦвета.ТусклоРозовый);
	НовыйЭлементОформления 					= СтрокаДокумент.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование	= Истина;
	Для Каждого ЭлементОформления Из УсловноеОформление Цикл
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
	КонецЦикла;
	НовыйОтбор = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.Использование	= Истина;
	НовыйОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПризнакОтражения");
	НовыйОтбор.ПравоеЗначение 	= Ложь;
	
	Если НЕ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		СтрокаНомерСтроки = ДобавитьГруппировку(СтрокаДокумент,,"НомерСтроки",,Новый Структура("ВидСравнения,Значение","Заполнено",0),,Не ВыводитьДанныеИсточника);
	
		УсловноеОформление = Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",3,3);
		НовыйЭлементОформления 					= СтрокаНомерСтроки.УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		Для Каждого ЭлементОформления Из УсловноеОформление Цикл
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
		КонецЦикла;
		Поле = НовыйЭлементОформления.Поля.Элементы.Добавить();
		Поле.Использование = Истина;
		Поле.Поле = Новый ПолеКомпоновкиДанных("ПризнакОтражения");
		
		УсловноеОформление = Новый Структура("ЦветФона",WebЦвета.ТусклоРозовый);
		НовыйЭлементОформления 					= СтрокаНомерСтроки.УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		Для Каждого ЭлементОформления Из УсловноеОформление Цикл
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
		КонецЦикла;
		НовыйОтбор = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.Использование	= Истина;
		НовыйОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПризнакОтражения");
		НовыйОтбор.ПравоеЗначение 	= Ложь;
		
	КонецЕсли;
	Если ВыводитьДанныеИсточника Тогда
		СтрокаДобавления = ?(НЕ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,СтрокаНомерСтроки,СтрокаДокумент);
		СтрокаДобавления.Выбор.Элементы.Очистить();
		ПолеСКД 				= СтрокаДобавления.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Если НЕ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
			ПолеСКД.Поле 			= Новый	ПолеКомпоновкиДанных("НомерСтроки");
			ПолеСКД.Заголовок 		= "Номер строки"; 
		Иначе
			ПолеСКД.Поле 			= Новый	ПолеКомпоновкиДанных("Документ");
			ПолеСКД.Заголовок 		= "Документ"; 
		КонецЕсли;
		ПолеСКД.Использование 	= Истина;
		// добавим общую группу полей
		ГруппаДанныеСтроки		= СтрокаДобавления.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаДанныеСтроки.Заголовок 		= "Данные строки";
		ГруппаДанныеСтроки.Использование 	= Истина;
		ГруппаДанныеСтроки.Расположение 	= РасположениеПоляКомпоновкиДанных.Горизонтально;
		
		// получим список групп полей
		КопияПоля = СписокПолейИсточника.Скопировать();
		КопияПоля.Свернуть("ПорядокГруппы,ГруппаПолей,Горизонтально,Ширина");
		КопияПоля.Сортировать("ПорядокГруппы");
		Для Каждого СтрокаГруппа Из КопияПоля Цикл
			// добавим колонку
			ГруппаКолонка		= ГруппаДанныеСтроки.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаКолонка.Заголовок 		= СтрокаГруппа.ГруппаПолей;
			ГруппаКолонка.Использование 	= Истина;
			ГруппаКолонка.Расположение 		= ?(СтрокаГруппа.Горизонтально,РасположениеПоляКомпоновкиДанных.Горизонтально,РасположениеПоляКомпоновкиДанных.Вертикально);
			
			Поля = СписокПолейИсточника.НайтиСтроки(Новый Структура("ПорядокГруппы,ГруппаПолей,Горизонтально",СтрокаГруппа.ПорядокГруппы,СтрокаГруппа.ГруппаПолей,СтрокаГруппа.Горизонтально));
			Для Каждого СтрокаПоле Из Поля Цикл
				ПолеСКД 				= ГруппаКолонка.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ПолеСКД.Поле 			= Новый	ПолеКомпоновкиДанных(СтрокаПоле.Поле);
				ПолеСКД.Заголовок 		= СтрокаПоле.ЗаголовокПоля;
				ПолеСКД.Использование 	= Истина;
				Если СтрокаГруппа.Ширина <> 0 Тогда
					НовыйЭлементОформления 					= СтрокаНомерСтроки.УсловноеОформление.Элементы.Добавить();
					НовыйЭлементОформления.Использование	= Истина;
					УсловноеОформление = Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",СтрокаГруппа.Ширина,СтрокаГруппа.Ширина);
					Для Каждого ЭлементОформления Из УсловноеОформление Цикл
						НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	
	// колонки
	
	ТаблицаОтчета.Колонки.Очистить();
	
	Если НЕ (РазрезОтчета=4) Тогда
		ИмяГруппировки = ?(РазрезОтчета=0 ИЛИ РазрезОтчета=4,"ФинансовыйПоказатель",?(РазрезОтчета=1,"СтатьяБюджета","Бюджет"));
		ИсточникДляДобавления = ?(ОтображениеБюджетныхДанных=0,ТаблицаОтчета.Колонки,?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,СтрокаДокумент,СтрокаНомерСтроки));
		
		КолонкаПервогоУровня = ДобавитьГруппировку(ИсточникДляДобавления,ОтображениеБюджетныхДанных=0,ИмяГруппировки,ВыводитьДетализациюСИерархией И РазрезОтчета<>3,,Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",15,15));
	КонецЕсли;
	
	Если РазрезОтчета = 3 Тогда
		ЭлементСтруктуры_Статья = ДобавитьГруппировку(КолонкаПервогоУровня,,"СтатьяБюджета",ВыводитьДетализациюСИерархией,,Новый Структура("МинимальнаяШирина,МаксимальнаяШирина",15,15));
	КонецЕсли;
	
	Если ДетализироватьПоШаблонам>0 Тогда
		Если РазрезОтчета = 4 Тогда
			Если ОтображениеБюджетныхДанных=1 Тогда
				ЭлементСтруктуры = ?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,СтрокаДокумент,СтрокаНомерСтроки);
			Иначе
				ЭлементСтруктуры = ТаблицаОтчета.Колонки;
			КонецЕсли;
		ИначеЕсли РазрезОтчета<>3 Тогда
			ЭлементСтруктуры = КолонкаПервогоУровня;
		Иначе
			ЭлементСтруктуры = ЭлементСтруктуры_Статья;
		КонецЕсли;
		ЭлементСтруктуры_Шаблон = ДобавитьГруппировку(ЭлементСтруктуры,РазрезОтчета = 4 И ОтображениеБюджетныхДанных=0,"Схема",,Новый Структура("ВидСравнения,Значение","Заполнено",Неопределено),Новый Структура("Шрифт,МинимальнаяШирина,МаксимальнаяШирина",Новый Шрифт(,8,,Истина),15,15));
		Если ДетализироватьПоШаблонам = 2 Тогда
			ЭлементСтруктуры_Правило = ДобавитьГруппировку(ЭлементСтруктуры_Шаблон,,"Правило",,,Новый Структура("Шрифт,МинимальнаяШирина,МаксимальнаяШирина",Новый Шрифт(,7,,Ложь),10,10));
		КонецЕсли;
	КонецЕсли;
	
	Если ВалютнаяСумма Тогда
		Если ОтображениеБюджетныхДанных = 0 Тогда
			ЭлементСтруктуры = ?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,СтрокаДокумент,СтрокаНомерСтроки);
		Иначе
			Если ДетализироватьПоШаблонам>0 Тогда
				ЭлементСтруктуры = ?(ДетализироватьПоШаблонам=1,ЭлементСтруктуры_Шаблон,ЭлементСтруктуры_Правило);
			Иначе
				Если РазрезОтчета = 4 Тогда
					ЭлементСтруктуры = ?(ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента,СтрокаДокумент,СтрокаНомерСтроки);
				ИначеЕсли РазрезОтчета<>3 Тогда
					ЭлементСтруктуры = КолонкаПервогоУровня;
				Иначе
					ЭлементСтруктуры = ЭлементСтруктуры_Статья;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЭлементСтруктуры_Валюта = ДобавитьГруппировку(ЭлементСтруктуры,,"Валюта",,,Новый Структура("Шрифт,МинимальнаяШирина,МаксимальнаяШирина",Новый Шрифт(,8,,Истина),8,8));
	КонецЕсли;
	

	Заголовок = Метаданные().Синоним + Символы.ПС+Источник;
	ПредставлениеПериода = "";
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		ПредставлениеПериода = " за период "+ Формат(НачалоПериода,"ДФ='MMMM гггг'")+" - "+Формат(КонецПериода,"ДФ='MMMM гггг'");
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		ПредставлениеПериода = " за период начиная с "+Формат(НачалоПериода,"ДФ='MMMM гггг'");
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		ПредставлениеПериода = " за период по "+Формат(КонецПериода,"ДФ='MMMM гггг'");
	КонецЕсли;
	Заголовок = Заголовок + ПредставлениеПериода;
	Если ПоУказаннымБюджетам Тогда
		ПредставлениеСписка = "";
		Для Каждого СтрокаБюджет Из Бюджеты Цикл
			ПредставлениеСписка = ПредставлениеСписка + ?(ПредставлениеСписка="","","; ") + Строка(СтрокаБюджет.Бюджет);
		КонецЦикла;
		Заголовок = Заголовок + Символы.ПС+ " отбор по бюджетам: "+ПредставлениеСписка;
	КонецЕсли;
	Если ПоУказаннымШаблонамРегистрации Тогда
		ПредставлениеСписка = "";
		Для Каждого СтрокаШаблоны Из Шаблоны Цикл
			ПредставлениеСписка = ПредставлениеСписка + ?(ПредставлениеСписка="","","; ") + Строка(СтрокаШаблоны.Шаблон)+?(ЗначениеЗаполнено(СтрокаШаблоны.Правило)," (по правилу """+СтрокаШаблоны.Правило+""")","");
		КонецЦикла;
		Заголовок = Заголовок + Символы.ПС+ " отбор по шаблонам: "+ПредставлениеСписка;
	КонецЕсли;
	Если ОтборПоПризнакуОтражения>0 Тогда
		Заголовок = Заголовок + Символы.ПС+ " только "+?(ОтборПоПризнакуОтражения=1,"не","")+"отраженные по бюджетам данные";
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок",Заголовок);
	
КонецПроцедуры

Функция ДобавитьГруппировку(ЭлементСтруктуры,КолонкаСтрокаТаблицы = Ложь,ИмяПоля,Иерархия = Ложь,Отбор = Неопределено,УсловноеОформление = Неопределено,ДобавлятьГруппировки = Истина)
	Если КолонкаСтрокаТаблицы = Истина Тогда
		НоваяГруппировка 				= ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка 				= ЭлементСтруктуры.Структура.Добавить();
	КонецЕсли;
	НоваяГруппировка.Имя 			= ИмяПоля;
	НоваяГруппировка.Использование 	= Истина;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Если ДобавлятьГруппировки Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле 			= Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеГруппировки.Использование 	= Истина;
		ПолеГруппировки.ТипГруппировки 	= ?(Иерархия,ТипГруппировкиКомпоновкиДанных.Иерархия,ТипГруппировкиКомпоновкиДанных.Элементы);
	КонецЕсли;
	
	НоваяГруппировка.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если Отбор <> Неопределено Тогда
		НовыйОтбор = НоваяГруппировка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных[Отбор.ВидСравнения];
		НовыйОтбор.Использование	= Истина;
		НовыйОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		НовыйОтбор.ПравоеЗначение 	= Отбор.Значение;
	КонецЕсли;
	
	Если УсловноеОформление <> Неопределено Тогда
		НовыйЭлементОформления 					= НоваяГруппировка.УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		Для Каждого ЭлементОформления Из УсловноеОформление Цикл
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ,ЭлементОформления.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьТекстЗапроса()
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
		ПолеПериод 		= "Период";
		ПолеДокумент 	= "Регистратор";
		ПолеНомерСтроки = "Документ.НомерСтроки";
		ИсточникДанных 	= ИмяИсточника;
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		ПолеПериод 		= "Дата";
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки = "0";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор;
	Иначе
		ПолеПериод 		= "Ссылка.Дата";
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки	= "Документ.НомерСтроки";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор+"."+ИмяИсточникаБезГруппы;
	КонецЕсли;
	
	ФрагментФильтраШаблонов 	= "";
	Если ПоУказаннымШаблонамРегистрации Тогда
		СписокШаблонов = Шаблоны.Выгрузить();
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаТЧ Из СписокШаблонов Цикл
			Если НЕ (ЗначениеЗаполнено(СтрокаТЧ.Шаблон) И ЗначениеЗаполнено(СтрокаТЧ.Правило)) Тогда
				СтрокиУдалить.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из СтрокиУдалить Цикл
			СписокШаблонов.Удалить(СтрокаТЧ);
		КонецЦикла;
		СписокШаблонов.Свернуть("Шаблон");
		Для Каждого СтрокаТЧ Из СписокШаблонов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Шаблон) Тогда
				Фрагмент = "
				|					КОГДА НаборПравилОтражения.Ссылка.Код = """+СтрокаТЧ.Шаблон.Код+"""
				|						ТОГДА ";
				УсловиеКФрагменту = "";
				СтрокиПоШаблону = Шаблоны.НайтиСтроки(Новый Структура("Шаблон",СтрокаТЧ.Шаблон));
				Для Каждого СтрокаПоШаблону Из СтрокиПоШаблону Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаПоШаблону.Правило) Тогда
						Продолжить;
					КонецЕсли;
					УсловиеКФрагменту = УсловиеКФрагменту + ?(УсловиеКФрагменту="",""," ИЛИ 
					|								")+ "НаборПравилОтражения.Код = """+СтрокаПоШаблону.Правило.Код+"""";	
				КонецЦикла;
				Если УсловиеКФрагменту = "" Тогда
					Продолжить;
				КонецЕсли;
				Фрагмент = Фрагмент + УсловиеКФрагменту;
				ФрагментФильтраШаблонов 	= ФрагментФильтраШаблонов + Фрагмент;
			КонецЕсли;
		КонецЦикла;
		Если ФрагментФильтраШаблонов <> "" Тогда
			 ФрагментФильтраШаблонов = "
			 |					И ВЫБОР"+ФрагментФильтраШаблонов+"
			 |							ИНАЧЕ ИСТИНА
			 |					КОНЕЦ
			 |					";
		КонецЕсли;
	КонецЕсли;
	
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	НаборПравилОтражения.Ссылка,
	        |	НаборПравилОтражения.Наименование
	        |ПОМЕСТИТЬ ВТ_Правила
	        |ИЗ
	        |	Справочник.фин_ПравилаОтраженияФактическихДанных КАК НаборПравилОтражения
	        |ГДЕ
			|	ВЫБОР 
			|		КОГДА НаборПравилОтражения.Владелец.Владелец ССЫЛКА Справочник.фин_ВидыДокументов
			|			ИЛИ (НаборПравилОтражения.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных И НаборПравилОтражения.Владелец.Владелец.Владелец ССЫЛКА Справочник.фин_ВидыДокументов)
	        |				ТОГДА НаборПравилОтражения.ВидДанных = &ВидДанных
	        |					И ВЫБОР
	        |							КОГДА &ВидДанных <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента)
	        |								ТОГДА НаборПравилОтражения.ИмяИсточника = &ИмяИсточника
	        |						ИНАЧЕ ИСТИНА 
	        |					  КОНЕЦ
			|		ИНАЧЕ
	        |			&ВидДанных = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах)
	        |			И ВЫБОР
			|				КОГДА НаборПравилОтражения.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных 
			|					ТОГДА НаборПравилОтражения.Владелец.Владелец.Владелец.ПрограммныйИдентификатор = &ИмяИсточникаБезГруппы И НаборПравилОтражения.Владелец.Владелец.Владелец.ВидРегистра = &ВидРегистра
			|				ИНАЧЕ НаборПравилОтражения.Владелец.Владелец.ПрограммныйИдентификатор = &ИмяИсточникаБезГруппы И НаборПравилОтражения.Владелец.Владелец.ВидРегистра = &ВидРегистра
			|			  КОНЕЦ
			|	КОНЕЦ
	        |	И ВЫБОР
	        |			КОГДА &ПоУказаннымШаблонамРегистрации 
	        |				ТОГДА НаборПравилОтражения.Ссылка В (&Шаблоны) "+ФрагментФильтраШаблонов+"
	        |			ИНАЧЕ ИСТИНА 
	        |		КОНЕЦ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	фин_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	        |	фин_СтатьиБюджета.Владелец КАК Бюджет,
	        |	фин_СтатьиБюджета.ФинансовыйПоказатель
	        |ПОМЕСТИТЬ ВТ_СтатьиБюджетов
	        |ИЗ
	        |	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
	        |ГДЕ
	        |	НЕ фин_СтатьиБюджета.ПометкаУдаления
	        |	И ВЫБОР
	        |			КОГДА &ПоУказаннымБюджетам
	        |				ТОГДА фин_СтатьиБюджета.Владелец В (&Бюджеты)
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |;
	        |";
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
				Текст = Текст+?(МассивРегистров.Найти(ИмяРегистра)=0,"","
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|") +"	
		        |////////////////////////////////////////////////////////////////////////////////
		        |ВЫБРАТЬ "+?(МассивРегистров.Найти(ИмяРегистра)=0,"РАЗРЕШЕННЫЕ","")+"
		        |	фин_ОборотыБюджетов.Регистратор КАК Регистратор,
		        |	фин_ОборотыБюджетов.НомерСтрокиИсточника КАК НомерСтроки,
		        |	фин_ОборотыБюджетов.ФинансовыйПоказатель,
		        |	фин_ОборотыБюджетов.СуммаУпр,
		        |	фин_ОборотыБюджетов.Количество,
		        |	фин_ОборотыБюджетов.Схема,
		        |	фин_ОборотыБюджетов.Валюта,
		        |	фин_ОборотыБюджетов.ВалютнаяСумма,
				|	фин_ОборотыБюджетов.Правило КАК Правило,
				|	ВТ_СтатьиБюджетов.СтатьяБюджета,
				|	ВТ_СтатьиБюджетов.Бюджет
		        |"+?(МассивРегистров.Найти(ИмяРегистра)=0,"ПОМЕСТИТЬ ВТ_ПроводкиБюджета","")+"
		        |ИЗ
		        |	РегистрНакопления."+ИмяРегистра+" КАК фин_ОборотыБюджетов
		        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Правила КАК ВТ_Правила
		        |		ПО фин_ОборотыБюджетов.Правило = ВТ_Правила.Ссылка
		        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиБюджетов КАК ВТ_СтатьиБюджетов
		        |		ПО фин_ОборотыБюджетов.ФинансовыйПоказатель = ВТ_СтатьиБюджетов.ФинансовыйПоказатель
		        |			И (ВЫБОР
		        |				КОГДА &РазрезОтчета = 0
		        |						И &ПоУказаннымБюджетам = ЛОЖЬ
		        |					ТОГДА ЛОЖЬ
		        |				ИНАЧЕ ИСТИНА
		        |			КОНЕЦ)
		        |ГДЕ
		        |	ВЫБОР
		        |			КОГДА фин_ОборотыБюджетов.ВидДанных = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПустаяСсылка)
		        |				ТОГДА НЕ ВТ_Правила.Ссылка ЕСТЬ NULL 
		        |			ИНАЧЕ фин_ОборотыБюджетов.ВидДанных = &ВидДанных
		        |					И ВЫБОР
		        |						КОГДА &ВидДанных <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента)
		        |							ТОГДА фин_ОборотыБюджетов.ИмяИсточника = &ИмяИсточникаБезГруппы
		        |						ИНАЧЕ ИСТИНА
		        |					КОНЕЦ
		        |		КОНЕЦ
		        |	И ВЫБОР
		        |			КОГДА &ПоУказаннымБюджетам
		        |				ТОГДА НЕ ВТ_СтатьиБюджетов.Бюджет ЕСТЬ NULL 
		        |			ИНАЧЕ ИСТИНА
		        |		КОНЕЦ
		        |	И ВЫБОР
		        |			КОГДА &ПоУказаннымФинансовымПоказателям
		        |				ТОГДА фин_ОборотыБюджетов.ФинансовыйПоказатель В (&ФинансовыеПоказатели) 
		        |			ИНАЧЕ ИСТИНА
		        |		КОНЕЦ
		        |	И фин_ОборотыБюджетов.Период >= &НачалоПериода
		        |	И (фин_ОборотыБюджетов.Период <= &КонецПериода
		        |			ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		        |";
		КонецЦикла;
		Текст = Текст +"
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Регистратор,
	        |	НомерСтроки
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Документ."+ПолеДокумент+" КАК Документ,
	        |	Документ."+ПолеПериод+" КАК Дата,
	        |	"+ПолеНомерСтроки+" КАК НомерСтроки,
	        |	ВЫБОР
	        |		КОГДА фин_ОборотыБюджетов.ФинансовыйПоказатель ЕСТЬ NULL 
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ПризнакОтражения,
	        |	ВЫБОР
	        |		КОГДА фин_ОборотыБюджетов.ФинансовыйПоказатель ЕСТЬ NULL 
	        |			ТОГДА 1
	        |		ИНАЧЕ 2
	        |	КОНЕЦ КАК Порядок,
	        |	ВЫБОР
	        |		КОГДА фин_ОборотыБюджетов.ФинансовыйПоказатель ЕСТЬ NULL 
	        |			ТОГДА ""<не отражено>""
	        |		ИНАЧЕ фин_ОборотыБюджетов.ФинансовыйПоказатель
	        |	КОНЕЦ КАК ФинансовыйПоказатель,
	        |	фин_ОборотыБюджетов.СуммаУпр,
	        |	фин_ОборотыБюджетов.Количество,
	        |	фин_ОборотыБюджетов.Схема,
	        |	фин_ОборотыБюджетов.Валюта,
	        |	фин_ОборотыБюджетов.ВалютнаяСумма,
	        |	фин_ОборотыБюджетов.Правило,
	        |	ВЫБОР
	        |		КОГДА фин_ОборотыБюджетов.СтатьяБюджета ЕСТЬ NULL 
	        |			ТОГДА ""<не отражено>""
	        |		ИНАЧЕ фин_ОборотыБюджетов.СтатьяБюджета
	        |	КОНЕЦ КАК СтатьяБюджета,
	        |	ВЫБОР
	        |		КОГДА фин_ОборотыБюджетов.Бюджет ЕСТЬ NULL 
	        |			ТОГДА ""<не отражено>""
	        |		ИНАЧЕ фин_ОборотыБюджетов.Бюджет
	        |	КОНЕЦ КАК Бюджет
			//|	фин_ОборотыБюджетов.СтатьяБюджета,
			//|	фин_ОборотыБюджетов.Бюджет
	        |ИЗ
	        |	"+ИсточникДанных+" КАК Документ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроводкиБюджета КАК фин_ОборотыБюджетов
	        |		ПО Документ."+ПолеДокумент+" = фин_ОборотыБюджетов.Регистратор
	        |			И "+ПолеНомерСтроки+" = фин_ОборотыБюджетов.НомерСтроки
	        |ГДЕ
	        |	ВЫБОР
	        |			КОГДА &ОтборПоПризнакуОтражения=1
	        |				ТОГДА фин_ОборотыБюджетов.Регистратор ЕСТЬ NULL 
	        |			КОГДА &ОтборПоПризнакуОтражения=2
	        |				ТОГДА НЕ фин_ОборотыБюджетов.Регистратор ЕСТЬ NULL 
	        |			ИНАЧЕ ИСТИНА
	        |		КОНЕЦ
	        |	И Документ."+ПолеПериод+" >= &НачалоПериода
	        |	И (Документ."+ПолеПериод+" <= &КонецПериода
	        |			ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах И ЭтоДокумент Тогда
		Текст = Текст + "
		|	И Документ.Регистратор ССЫЛКА Документ."+ПрограммныйИдентификатор;
	КонецЕсли;
	Возврат Текст;
КонецФункции

Функция ПолучитьТекстСвязанногоЗапроса(СписокПолейИсточника)
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
		ПолеПериод 		= "Период";
		ПолеДокумент 	= "Регистратор";
		ПолеНомерСтроки = "Документ.НомерСтроки";
		ИсточникДанных 	= ИмяИсточника+?(ВидРегистра<>Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии,"",".ДвиженияССубконто(&НачалоПериода,&КонецПериода, , , )");
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		ПолеПериод 		= "Дата";
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки = "0";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор;
	Иначе
		ПолеПериод 		= "Ссылка.Дата";
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки	= "Документ.НомерСтроки";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор+"."+ИмяИсточникаБезГруппы;
	КонецЕсли;
	
	ТекстПоля = "";
	Для Каждого ПолеНабора Из СписокПолейИсточника Цикл
		ТекстПоля = ТекстПоля+",
		|	Документ."+ПолеНабора.Поле+" КАК "+ПолеНабора.Поле;
	КонецЦикла;

	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Документ."+ПолеДокумент+" КАК Документ,
	        |	Документ."+ПолеПериод+" КАК Дата,
	        |	"+ПолеНомерСтроки+" КАК НомерСтроки"+ТекстПоля+"
	        |ИЗ
	        |	"+ИсточникДанных+" КАК Документ
	        |ГДЕ
	        |	Документ."+ПолеПериод+" >= &НачалоПериода
	        |	И (Документ."+ПолеПериод+" <= &КонецПериода
	        |			ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах И ЭтоДокумент Тогда
		Текст = Текст + "
		|	И Документ.Регистратор ССЫЛКА Документ."+ПрограммныйИдентификатор;
	КонецЕсли;
	Возврат Текст;
КонецФункции
