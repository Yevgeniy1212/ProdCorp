
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Отчет.Источник = "<Источник для сверки не выбран>";
	ПериодОтчета.ДатаНачала 	= НачалоГода(ТекущаяДата());
	ПериодОтчета.ДатаОкончания 	= КонецГода(ТекущаяДата());
	Отчет.НачалоПериода = ПериодОтчета.ДатаНачала;
	Отчет.КонецПериода 	= ПериодОтчета.ДатаОкончания;
	Отчет.СуммаУпр = Истина;
	Элементы.ПоказатьНастройки.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаНастройки;
	ЗаполнитьДеревоИсточников();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИсточников()
	Дерево = ДанныеФормыВЗначение(ДанныеДляПроверки,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаОтраженияФактическихДанных.ВидДанных,
		|	фин_ПравилаОтраженияФактическихДанных.ИмяИсточника,
		|	ВЫБОР
		|		КОГДА фин_ПравилаОтраженияФактическихДанных.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных
		|			ТОГДА фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец.Владелец
		|		ИНАЧЕ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец
		|	КОНЕЦ КАК ВидДокументов
		|ПОМЕСТИТЬ ВТ_ШаблоныДокументов
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	НЕ фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА фин_ПравилаОтраженияФактическихДанных.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных
		|				ТОГДА фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец.Владелец
		|			ИНАЧЕ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец
		|		КОНЕЦ ССЫЛКА Справочник.фин_ВидыДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	фин_ПравилаОтраженияФактическихДанных.ВидДанных,
		|	фин_ПравилаОтраженияФактическихДанных.ИмяИсточника,
		|	ВЫБОР
		|		КОГДА фин_ПравилаОтраженияФактическихДанных.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных
		|			ТОГДА фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец.Владелец
		|		ИНАЧЕ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ШаблоныДокументов.ВидДанных,
		|	ВТ_ШаблоныДокументов.ИмяИсточника,
		|	фин_ВидыДокументов.ПрограммныйИдентификатор,
		|	ИСТИНА КАК ЭтоДокумент
		|ПОМЕСТИТЬ ВТ_ИтогПоДокументам
		|ИЗ
		|	ВТ_ШаблоныДокументов КАК ВТ_ШаблоныДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|		ПО ВТ_ШаблоныДокументов.ВидДокументов = фин_ВидыДокументов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА фин_ПравилаОтраженияФактическихДанных.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных
		|			ТОГДА фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец.Владелец
		|		ИНАЧЕ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец
		|	КОНЕЦ КАК Владелец
		|ПОМЕСТИТЬ ВТ_ИспользуемыеВидыРегистров
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	НЕ фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА фин_ПравилаОтраженияФактическихДанных.Владелец ССЫЛКА Справочник.фин_ГруппыПравилОтраженияФактическихДанных
		|				ТОГДА фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец.Владелец
		|			ИНАЧЕ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец
		|		КОНЕЦ ССЫЛКА Справочник.фин_КлассификаторРегистров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ИтогПоДокументам.ВидДанных,
		|	ВТ_ИтогПоДокументам.ИмяИсточника,
		|	ВТ_ИтогПоДокументам.ПрограммныйИдентификатор,
		|	ВТ_ИтогПоДокументам.ЭтоДокумент,
		|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыРегистровСистемы.ПустаяСсылка) КАК ВидРегистра
		|ИЗ
		|	ВТ_ИтогПоДокументам КАК ВТ_ИтогПоДокументам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах),
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	ЛОЖЬ,
		|	фин_КлассификаторРегистров.ВидРегистра
		|ИЗ
		|	ВТ_ИспользуемыеВидыРегистров КАК ВТ_ИспользуемыеВидыРегистров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
		|		ПО ВТ_ИспользуемыеВидыРегистров.Владелец = фин_КлассификаторРегистров.Ссылка
		|ИТОГИ ПО
		|	ВидРегистра";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИспользуемыхРегистров = Новый ТаблицаЗначений;
	ТаблицаИспользуемыхРегистров.Колонки.Добавить("ПрограммныйИдентификатор",Новый ОписаниеТипов("Строка"));
	ТаблицаИспользуемыхРегистров.Колонки.Добавить("ИмяИсточника",Новый ОписаниеТипов("Строка"));
	ТаблицаИспользуемыхРегистров.Колонки.Добавить("ВидРегистра",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыРегистровСистемы"));
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаВид = Дерево.Строки.Добавить();
		СтрокаВид.ВидСтроки = 1;
		Если НЕ ЗначениеЗаполнено(Выборка.ВидРегистра) Тогда
			СтрокаВид.Представление = "Документы";
		Иначе
			СтрокаВид.Представление = Выборка.ВидРегистра;
		КонецЕсли;
		СтрокаВид.ВидРегистра = Выборка.ВидРегистра;
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.ЭтоДокумент = Ложь Тогда
				СтрокаРегистр = СтрокаВид.Строки.Добавить();
				СтрокаРегистр.ВидСтроки = 2;
				ЗаполнитьЗначенияСвойств(СтрокаРегистр,ВыборкаДетали);
				СтрокаРегистр.ИмяИсточникаБезГруппы = СтрокаРегистр.ИмяИсточника;
				ИмяВидаРегистров = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Выборка.ВидРегистра);
				СтрокаРегистр.ИмяИсточника = СтрЗаменить(ИмяВидаРегистров,"Регистры","Регистр")+"."+СтрокаРегистр.ИмяИсточника;
				СтрокаРегистр.Представление = Метаданные[ИмяВидаРегистров][СтрокаРегистр.ИмяИсточникаБезГруппы].Синоним;
			Иначе
				СтрокиДокумент = СтрокаВид.Строки.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ВыборкаДетали.ПрограммныйИдентификатор));
				МетаданныеДокумента = Метаданные.Документы[ВыборкаДетали.ПрограммныйИдентификатор];
				Если СтрокиДокумент.Количество()=0 Тогда
					СтрокаДокумент = СтрокаВид.Строки.Добавить();
					СтрокаДокумент.ЭтоДокумент = Истина;
					СтрокаДокумент.ВидСтроки = 2;
					СтрокаДокумент.Представление = МетаданныеДокумента.Синоним;
					СтрокаДокумент.ПрограммныйИдентификатор =  ВыборкаДетали.ПрограммныйИдентификатор;
				Иначе
					СтрокаДокумент = СтрокиДокумент[0];
				КонецЕсли;
				Если ВыборкаДетали.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
					Если СтрокаДокумент.Строки.НайтиСтроки(Новый Структура("ВидДанных",Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента)).Количество()=0 Тогда
						СтрокаШапка = СтрокаДокумент.Строки.Добавить();
						СтрокаШапка.ВидСтроки = 4;
						ЗаполнитьЗначенияСвойств(СтрокаШапка,ВыборкаДетали);
//						СтрокаШапка.ИмяИсточникаБезГруппы = "";
						СтрокаШапка.Представление = "Данные шапки документа";
						СтрокаШапка.ЭтоДокумент = Истина;
					КонецЕсли;
				ИначеЕсли ВыборкаДетали.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
					СтрокиТЧ = СтрокаДокумент.Строки.НайтиСтроки(Новый Структура("Представление","Табличные части документа"));
					Если СтрокиТЧ.Количество()=0 Тогда
						СтрокаТЧ = СтрокаДокумент.Строки.Добавить();
						СтрокаТЧ.ВидСтроки = 3;
						СтрокаТЧ.Представление = "Табличные части документа";
						СтрокаТЧ.ПрограммныйИдентификатор =  ВыборкаДетали.ПрограммныйИдентификатор;
						СтрокаТЧ.ЭтоДокумент = Истина;
					Иначе
						СтрокаТЧ = СтрокиТЧ[0];
					КонецЕсли;
					Если СтрокаТЧ.Строки.НайтиСтроки(Новый Структура("ИмяИсточника",ВыборкаДетали.ИмяИсточника)).Количество()=0 Тогда
						СтрокаПравилоТЧ = СтрокаТЧ.Строки.Добавить();
						СтрокаПравилоТЧ.ВидСтроки = 4;
						ЗаполнитьЗначенияСвойств(СтрокаПравилоТЧ,ВыборкаДетали);
						СтрокаПравилоТЧ.ИмяИсточникаБезГруппы = СтрокаПравилоТЧ.ИмяИсточника;
						СтрокаПравилоТЧ.Представление = МетаданныеДокумента.ТабличныеЧасти[СтрокаПравилоТЧ.ИмяИсточника].Синоним;
						СтрокаПравилоТЧ.ЭтоДокумент = Истина;
					КонецЕсли;
				Иначе // по регистрам
					СтрокиТЧ = СтрокаДокумент.Строки.НайтиСтроки(Новый Структура("Представление","Движения по регистрам"));
					Если СтрокиТЧ.Количество()=0 Тогда
						СтрокаТЧ = СтрокаДокумент.Строки.Добавить();
						СтрокаТЧ.ВидСтроки = 3;
						СтрокаТЧ.Представление = "Движения по регистрам";
						СтрокаТЧ.ПрограммныйИдентификатор =  ВыборкаДетали.ПрограммныйИдентификатор;
						СтрокаТЧ.ЭтоДокумент = Истина;
					Иначе
						СтрокаТЧ = СтрокиТЧ[0];
					КонецЕсли;
					Если СтрокаТЧ.Строки.НайтиСтроки(Новый Структура("ИмяИсточника",ВыборкаДетали.ИмяИсточника)).Количество()=0 Тогда
						СтрокаПравилоТЧ = СтрокаТЧ.Строки.Добавить();
						СтрокаПравилоТЧ.ВидСтроки = 4;
						ЗаполнитьЗначенияСвойств(СтрокаПравилоТЧ,ВыборкаДетали);
						СтрокаПравилоТЧ.ИмяИсточникаБезГруппы = Сред(СтрокаПравилоТЧ.ИмяИсточника,Найти(СтрокаПравилоТЧ.ИмяИсточника,".")+1);
						ВидРегистровИмя = СтрЗаменить(Лев(СтрокаПравилоТЧ.ИмяИсточника,Найти(СтрокаПравилоТЧ.ИмяИсточника,".")-1),"Регистр","Регистры");
						СтрокаПравилоТЧ.Представление = Метаданные[ВидРегистровИмя][СтрокаПравилоТЧ.ИмяИсточникаБезГруппы].Синоним;
						СтрокаПравилоТЧ.ВидРегистра = Перечисления.фин_ВидыРегистровСистемы[ВидРегистровИмя];
						СтрокаПравилоТЧ.ЭтоДокумент = Истина;
						Если ТаблицаИспользуемыхРегистров.НайтиСтроки(Новый Структура("ИмяИсточника,ВидРегистра",СтрокаПравилоТЧ.ИмяИсточникаБезГруппы,Перечисления.фин_ВидыРегистровСистемы[ВидРегистровИмя])).Количество()=0 Тогда
							НоваяСтрока = ТаблицаИспользуемыхРегистров.Добавить();
							НоваяСтрока.ИмяИсточника = СтрокаПравилоТЧ.ИмяИсточникаБезГруппы;
							НоваяСтрока.ПрограммныйИдентификатор = СтрокаПравилоТЧ.ИмяИсточникаБезГруппы;
							НоваяСтрока.ВидРегистра = Перечисления.фин_ВидыРегистровСистемы[ВидРегистровИмя];
						КонецЕсли;
					КонецЕсли;                     
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтрокаВид.Строки.Сортировать("Представление",Истина);
	КонецЦикла;
	
	Для Каждого СтрокаРегистров Из ТаблицаИспользуемыхРегистров Цикл
		Если Дерево.Строки.НайтиСтроки(Новый Структура("ВидРегистра,ИмяИсточника",СтрокаРегистров.ВидРегистра,СтрокаРегистров.ИмяИсточника),Истина).Количество()=0 Тогда
			СтрокиВид = Дерево.Строки.НайтиСтроки(Новый Структура("ВидРегистра",СтрокаРегистров.ВидРегистра));
			Если СтрокиВид.Количество()=0 Тогда
				СтрокаВид = Дерево.Строки.Добавить();
				СтрокаВид.Представление = СтрокаРегистров.ВидРегистра;
				СтрокаВид.ВидРегистра 	= СтрокаРегистров.ВидРегистра;
				СтрокаВид.ВидСтроки = 1;
			Иначе
				СтрокаВид = СтрокиВид[0];
			КонецЕсли;
			СтрокаРегистр = СтрокаВид.Строки.Добавить();
			СтрокаРегистр.ВидСтроки = 2;
			ЗаполнитьЗначенияСвойств(СтрокаРегистр,СтрокаРегистров);
			СтрокаРегистр.ИмяИсточникаБезГруппы = СтрокаРегистр.ИмяИсточника;
			СтрокаРегистр.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах;
			ИмяВидаРегистров = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРегистр.ВидРегистра);
			СтрокаРегистр.ИмяИсточника = СтрЗаменить(ИмяВидаРегистров,"Регистры","Регистр")+"."+СтрокаРегистр.ИмяИсточника;
			СтрокаРегистр.Представление = Метаданные[ИмяВидаРегистров][СтрокаРегистр.ИмяИсточникаБезГруппы].Синоним;
			СтрокаВид.Строки.Сортировать("Представление",Истина);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВДанныеФормы(Дерево,ДанныеДляПроверки);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляПроверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтруктураВыбранныхДанных = Новый Структура("ЭтоДокумент,ВидДанных,ИмяИсточника,ИмяИсточникаБезГруппы,ВидРегистра,ПрограммныйИдентификатор,Представление");
	ЗаполнитьЗначенияСвойств(СтруктураВыбранныхДанных,Элементы.ДанныеДляПроверки.ТекущиеДанные);
	Если ЗначениеЗаполнено(СтруктураВыбранныхДанных.ВидДанных) Тогда
		УстановитьПараметрыВыбраннойСтроки(СтруктураВыбранныхДанных,ЭтотОбъект);
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаШаблон Из Отчет.Шаблоны Цикл
			Если СписокШаблонов.НайтиПоЗначению(СтрокаШаблон.Шаблон)=Неопределено Тогда
				СтрокиУдалить.Добавить(СтрокаШаблон);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаШаблон Из СтрокиУдалить Цикл
			Отчет.Шаблоны.Удалить(СтрокаШаблон);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбраннойСтроки(СтруктураВыбранныхДанных,Форма)
	 Форма.Отчет.Источник = "<Источник для сверки не выбран>";
	 ЗаполнитьЗначенияСвойств(Форма.Отчет,СтруктураВыбранныхДанных);
	 Если СтруктураВыбранныхДанных.ЭтоДокумент=Ложь Тогда
		Форма.Отчет.Источник = Строка(СтруктураВыбранныхДанных.ВидРегистра)+": "+СтруктураВыбранныхДанных.Представление; 
	 Иначе
		Форма.Отчет.Источник = "Документ "+СинонимДокумента(СтруктураВыбранныхДанных.ПрограммныйИдентификатор)+": "+?(СтруктураВыбранныхДанных.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти"),"данные табличной части ",?(СтруктураВыбранныхДанных.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах"),"движения по регистру ",""))+СтруктураВыбранныхДанных.Представление; 
	КонецЕсли;
	ЗаполнитьСписокВыбораШаблонов(Форма.СписокШаблонов,Форма.Отчет.ЭтоДокумент,Форма.Отчет.ВидДанных,Форма.Отчет.ПрограммныйИдентификатор,Форма.Отчет.ВидРегистра,Форма.Отчет.ИмяИсточникаБезГруппы);
 КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораШаблонов(СписокШаблонов,ЭтоДокумент,ВидДанных,ПрограммныйИдентификатор,ВидРегистра,ИмяИсточникаБезГруппы)
	СписокШаблонов.Очистить();
	Если ЭтоДокумент Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СхемыОтраженияФактическихДанных.Ссылка
			|ИЗ
			|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СхемыОтраженияФактическихДанных КАК фин_СхемыОтраженияФактическихДанных
			|		ПО фин_ВидыДокументов.Ссылка = фин_СхемыОтраженияФактическихДанных.Владелец
			|ГДЕ
			|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор";
		
		Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ПрограммныйИдентификатор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокШаблонов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	Если ЭтоДокумент = Ложь ИЛИ ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СхемыОтраженияФактическихДанных.Ссылка
			|ИЗ
			|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СхемыОтраженияФактическихДанных КАК фин_СхемыОтраженияФактическихДанных
			|		ПО фин_КлассификаторРегистров.Ссылка = фин_СхемыОтраженияФактическихДанных.Владелец
			|ГДЕ
			|	фин_КлассификаторРегистров.ВидРегистра = &ВидРегистра
			|	И фин_КлассификаторРегистров.ПрограммныйИдентификатор = &ИмяИсточникаБезГруппы";
		
		Запрос.УстановитьПараметр("ВидРегистра", 			ВидРегистра);
		Запрос.УстановитьПараметр("ИмяИсточникаБезГруппы", 	ИмяИсточникаБезГруппы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокШаблонов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция СинонимДокумента(ПрограммныйИдентификатор)
	Возврат Метаданные.Документы[ПрограммныйИдентификатор].Синоним;	 
КонецФункции

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	Отчет.НачалоПериода = ПериодОтчета.ДатаНачала;
	Отчет.КонецПериода 	= ПериодОтчета.ДатаОкончания;
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	СкомпоноватьРезультат();
	Результат.Область("R1:R3").Шрифт=Новый Шрифт(,12,Истина);
	Если Отчет.ВыводитьДанныеИсточника Тогда
		Результат.ФиксацияСлева = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	Элементы.ПоказатьНастройки.Пометка = Ложь;
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРезультат;
	СформироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПоказатьНастройки.Пометка = НЕ Элементы.ПоказатьНастройки.Пометка;
	Элементы.Страницы.ТекущаяСтраница = ?(Элементы.ПоказатьНастройки.Пометка,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаНастройки,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРезультат);
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПравилоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Шаблоны.ТекущиеДанные;
	Шаблон = ТекущиеДанные.Шаблон;
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ШаблоныПравилоНачалоВыбораНаСервере(Шаблон,СписокПравил);
		ДанныеВыбора = СписокПравил;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ШаблоныПравилоНачалоВыбораНаСервере(Шаблон,СписокПравилШаблона)
	СписокПравилШаблона.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборПравилОтражения.Ссылка
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК НаборПравилОтражения
		|ГДЕ
		|	НаборПравилОтражения.Владелец = &Ссылка ИЛИ НаборПравилОтражения.Владелец.Владелец = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Шаблон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПравилШаблона.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка, СтандартнаяОбработка);
		Если РезультатОбработки = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатОбработки.Действие = "ОткрытьЗначение" Тогда
			ПоказатьЗначение(,РезультатОбработки.Параметр);
		ИначеЕсли РезультатОбработки.Действие = "ПоказатьДанныеСтрокиДокумента" Тогда
			ТабличныйДокументРасшифровки = Новый ТабличныйДокумент;
			ЗаполнитьДанныеРасшифровкиПоСтроке(ТабличныйДокументРасшифровки,РезультатОбработки.Документ,РезультатОбработки.НомерСтроки,Отчет.ВидДанных,Отчет.ВидРегистра,Отчет.ИмяИсточникаБезГруппы,Отчет.ИмяИсточника,Отчет.ЭтоДокумент,Отчет.ПрограммныйИдентификатор);
			Если ТабличныйДокументРасшифровки.ВысотаТаблицы<>0 Тогда
				ТабличныйДокументРасшифровки.ОтображатьЗаголовки = Ложь;
				ТабличныйДокументРасшифровки.ОтображатьСетку=Ложь;
				ТабличныйДокументРасшифровки.Показать("Данные строки № "+РезультатОбработки.НомерСтроки);
			КонецЕсли;
		//ИначеЕсли РезультатОбработки.Действие = "ВыбратьРасшифровку" Тогда
		//	РезультатВыбора = ВыбратьИзСписка(РезультатОбработки.Параметр);
		//	Если РезультатВыбора<>Неопределено Тогда
		//		РезультатОбработки = ОбработатьРасшифровку(Расшифровка,РезультатВыбора.Значение);
		//		Если РезультатОбработки<>Неопределено Тогда
		//			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
		//		КонецЕсли;
		//	КонецЕсли;
		Иначе
			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеРасшифровкиПоСтроке(ТабличныйДокументРасшифровки,Документ,НомерСтроки,ВидДанных,ВидРегистра,ИмяИсточникаБезГруппы,ИмяИсточника,ЭтоДокумент,ПрограммныйИдентификатор)
	ТабличныйДокументРасшифровки.Защита = Истина;
	
	Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
		ЭтоРегистрБухгалтерии = ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии;
		ПолеДокумент 	= "Регистратор";
		ПолеНомерСтроки = "Таблица.НомерСтроки";
		ИсточникДанных 	= ИмяИсточника+?(НЕ ЭтоРегистрБухгалтерии,"",".ДвиженияССубконто(, , Регистратор = &Документ, , )");
	ИначеЕсли ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки = "0";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор;
	Иначе
		ПолеДокумент 	= "Ссылка";
		ПолеНомерСтроки	= "Таблица.НомерСтроки";
		ИсточникДанных 	= "Документ."+ПрограммныйИдентификатор+"."+ИмяИсточникаБезГруппы;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ "+ИсточникДанных+" КАК Таблица ГДЕ Таблица."+ПолеДокумент+"=&Документ И "+ПолеНомерСтроки+"=&НомерСтроки";
	Запрос.УстановитьПараметр("Документ",Документ);
	Запрос.УстановитьПараметр("НомерСтроки",НомерСтроки);
	Результат = Запрос.Выполнить();
	Таблица = Результат.Выгрузить();
	Если Таблица.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Отчеты.Найти("ДвиженияДокумента")<>Неопределено И Метаданные.Отчеты["ДвиженияДокумента"].Макеты.Найти("МакетНастройкиРегистра"+СтрЗаменить(ИмяИсточника,".",""))<>Неопределено Тогда
		Макет = Отчеты["ДвиженияДокумента"].ПолучитьМакет("МакетНастройкиРегистра"+СтрЗаменить(ИмяИсточника,".",""));
		Шапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапки = Шапка.Область("R1C1:R"+Строка(Шапка.ВысотаТаблицы)+"C"+Строка(Шапка.ШиринаТаблицы));
		ОбластьШапки.ЦветТекста	= Новый Цвет(0, 63, 47);
		ОбластьШапки.ЦветФона 	= Новый Цвет(214, 229, 203);
		ОбластьШапки.ЦветРамки 	= Новый Цвет(179, 172, 134);
		ТабличныйДокументРасшифровки.Вывести(Шапка);
		СтрокаМакета = Макет.ПолучитьОбласть("Строка");
		Для Ряд = 1 По СтрокаМакета.ВысотаТаблицы Цикл
			Для Колонка = 1 По СтрокаМакета.ШиринаТаблицы Цикл
				Попытка
					ОбластьМакета = СтрокаМакета.Область("R"+Ряд+"C"+Колонка);
					Если ОбластьМакета.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр И ЗначениеЗаполнено(ОбластьМакета.Параметр) И НЕ ЗначениеЗаполнено(ОбластьМакета.ПараметрРасшифровки) Тогда
						ОбластьМакета.ПараметрРасшифровки = ОбластьМакета.Параметр;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
		СтрокаМакета.Параметры.Заполнить(Таблица[0]);
		СтрокаМакета.Область().ЦветРамки 	= Новый Цвет(172, 200, 189);
		ТабличныйДокументРасшифровки.Вывести(СтрокаМакета);
	Иначе
		
		ВысотаТаблицы = 0;
		
		Если ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
			МетаданныеОбъекта = Метаданные.Документы[ПрограммныйИдентификатор].ТабличныеЧасти[ИмяИсточникаБезГруппы];
			ВысотаТаблицы = МетаданныеОбъекта.Реквизиты.Количество();
			ВывестиДанныеВКолонку(МетаданныеОбъекта.Реквизиты,,,Таблица[0],ТабличныйДокументРасшифровки,2,2,"Реквизиты","Значения реквизитов",ВысотаТаблицы);
		Иначе
			ИмяВидаРегистров = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидРегистра);
			МетаданныеОбъекта = Метаданные[ИмяВидаРегистров][ИмяИсточникаБезГруппы];
			ДополнениеКРесурсам = 0;
			ДополнениеКИзмерениям = 0;
			Свойства = Новый Массив;
			Если ЭтоРегистрБухгалтерии Тогда
				//МетаданныеОбъекта = Метаданные.РегистрыБухгалтерии.Типовой;
				Если МетаданныеОбъекта.Корреспонденция Тогда
					Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
						Если НЕ Измерение.Балансовый Тогда
							ДополнениеКИзмерениям = ДополнениеКИзмерениям + 1;
						КонецЕсли;
					КонецЦикла;
					Для Каждого Ресурс Из МетаданныеОбъекта.Ресурсы Цикл
						Если НЕ Ресурс.Балансовый Тогда
							ДополнениеКРесурсам = ДополнениеКРесурсам + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ВысотаТаблицы = Макс(ВысотаТаблицы,МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто);
				Свойства.Добавить(Новый Структура("Синоним,Имя,Балансовый","Счет","Счет",Ложь));
			КонецЕсли;
			Если ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета Тогда
				Свойства.Добавить(Новый Структура("Синоним,Имя","Вид расчета","ВидРасчета"));
			//	Свойства.Добавить(Новый Структура("Синоним,Имя","Период расчета","ПериодРасчета"));
			ИначеЕсли ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления Тогда
				Свойства.Добавить(Новый Структура("Синоним,Имя","Вид движения","ВидДвижения"));
			КонецЕсли;
			ВысотаТаблицы = Макс(ВысотаТаблицы,МетаданныеОбъекта.Реквизиты.Количество());
			ВысотаТаблицы = Макс(ВысотаТаблицы,МетаданныеОбъекта.Ресурсы.Количество()-ДополнениеКРесурсам);
			ВысотаТаблицы = Макс(ВысотаТаблицы,МетаданныеОбъекта.Измерения.Количество()-ДополнениеКИзмерениям);
			ВысотаТаблицы = Макс(ВысотаТаблицы,ДополнениеКРесурсам);
			ВысотаТаблицы = Макс(ВысотаТаблицы,ДополнениеКИзмерениям);
			ТекущаяКолонка = 2;
			Если Свойства.Количество()>0 И НЕ ЭтоРегистрБухгалтерии Тогда
				ВывестиДанныеВКолонку(Свойства,10,10,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Свойства","Значения свойств",ВысотаТаблицы,ЭтоРегистрБухгалтерии);
			КонецЕсли;
			ВывестиДанныеВКолонку(МетаданныеОбъекта.Измерения,?(ЭтоРегистрБухгалтерии,10,15),?(ЭтоРегистрБухгалтерии,15,25),Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Измерения","Значения измерений",ВысотаТаблицы,ЭтоРегистрБухгалтерии);
			Если ЭтоРегистрБухгалтерии Тогда
				ВывестиДанныеВКолонку(Свойства,5,5,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Дебет",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Дт");
				ВывестиДанныеВКолонку(МетаданныеОбъекта.Измерения,10,10,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Измерения Дт","Значения измерений Дт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Дт");
				ВидыСубконто = Новый Массив;
				Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
					ВидыСубконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Вид субконто Дт "+Строка(Инд),"ВидСубконтоДт"+Строка(Инд),Истина));
				КонецЦикла;
				ВывестиДанныеВКолонку(ВидыСубконто,5,8,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Вид субконто Дт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,,Ложь);
				Субконто = Новый Массив;
				Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
					Субконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Субконто Дт "+Строка(Инд),"СубконтоДт"+Строка(Инд),Истина));
				КонецЦикла;
				ВывестиДанныеВКолонку(Субконто,5,15,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Субконто Дт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,,Ложь);
				ВывестиДанныеВКолонку(МетаданныеОбъекта.Ресурсы,8,10,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Ресурсы Дт","Значения ресурсов Дт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Дт");
				
				ВывестиДанныеВКолонку(Свойства,5,5,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Кредит",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Кт");
				ВывестиДанныеВКолонку(МетаданныеОбъекта.Измерения,10,10,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Измерения Кт","Значения измерений Кт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Кт");
				ВидыСубконто = Новый Массив;
				Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
					ВидыСубконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Вид субконто Кт "+Строка(Инд),"ВидСубконтоКт"+Строка(Инд),Истина));
				КонецЦикла;
				ВывестиДанныеВКолонку(ВидыСубконто,5,8,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Вид субконто Кт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,,Ложь);
				Субконто = Новый Массив;
				Для Инд = 1 По МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Цикл
					Субконто.Добавить(Новый Структура("Синоним,Имя,Балансовый","Субконто Кт "+Строка(Инд),"СубконтоКт"+Строка(Инд),Истина));
				КонецЦикла;
				ВывестиДанныеВКолонку(Субконто,5,15,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"","Субконто Кт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,,Ложь);
				ВывестиДанныеВКолонку(МетаданныеОбъекта.Ресурсы,8,10,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Ресурсы Кт","Значения ресурсов Кт",ВысотаТаблицы,ЭтоРегистрБухгалтерии,"Кт");
			КонецЕсли;
			ВывестиДанныеВКолонку(МетаданныеОбъекта.Ресурсы,?(ЭтоРегистрБухгалтерии,10,15),?(ЭтоРегистрБухгалтерии,15,25),Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Ресурсы","Значения ресурсов",ВысотаТаблицы,ЭтоРегистрБухгалтерии);
			ВывестиДанныеВКолонку(МетаданныеОбъекта.Реквизиты,,,Таблица[0],ТабличныйДокументРасшифровки,2,ТекущаяКолонка,"Реквизиты","Значения реквизитов",ВысотаТаблицы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиДанныеВКолонку(КоллекцияМетаданных,ШиринаЗаголовка=15,ШиринаЗначений=25,СтрокаДанных,ТабличныйДокументРасшифровки,Ряд,Колонка,НазваниеКолонки="",НазваниеКолонкиЗначений="",ВысотаТаблицы,ЭтоРегистрБухгалтерии=Ложь,ВидПоля="",ВыводитьКолонкуНазваний=Истина)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	НомерКолонкиЗначений = ?(ВыводитьКолонкуНазваний,Колонка+1,Колонка);
	Если ВыводитьКолонкуНазваний Тогда
		ОбластьЗаголовокКолонкиНазваний = ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд)+"C"+Строка(Колонка));
		ОбластьЗаголовокКолонкиНазваний.Текст 				= НазваниеКолонки;
		ОбластьЗаголовокКолонкиНазваний.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьЗаголовокКолонкиНазваний.Обвести(Линия,Линия,Линия,Линия);
	КонецЕсли;
	ОбластьЗаголовокКолонкиЗначений = ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд)+"C"+Строка(НомерКолонкиЗначений));
	ОбластьЗаголовокКолонкиЗначений.Текст 				= НазваниеКолонкиЗначений;
	ОбластьЗаголовокКолонкиЗначений.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьЗаголовокКолонкиЗначений.Обвести(Линия,Линия,Линия,Линия);
	
	НомерСтроки = 1;
	Если ВыводитьКолонкуНазваний Тогда
		ТабличныйДокументРасшифровки.Область("C"+Строка(Колонка)).ШиринаКолонки = ШиринаЗаголовка;
	КонецЕсли;
	ТабличныйДокументРасшифровки.Область("C"+Строка(НомерКолонкиЗначений)).ШиринаКолонки = ШиринаЗначений;
	Для Каждого ЭлементКоллекции Из КоллекцияМетаданных Цикл
		ИмяРеквизита = ЭлементКоллекции.Имя;
		Если ЭтоРегистрБухгалтерии Тогда
			Если ВидПоля = "" И НЕ ЭлементКоллекции.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПоля <> "" И ЭлементКоллекции.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПоля <> "" Тогда
				ИмяРеквизита = ИмяРеквизита+ВидПоля;
			КонецЕсли;
		КонецЕсли;
		Если ВыводитьКолонкуНазваний Тогда
			ОбластьИмяПоля 					= ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд+НомерСтроки)+"C"+Строка(Колонка));
			ОбластьИмяПоля.Текст 			= ЭлементКоллекции.Синоним;
			ОбластьИмяПоля.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьИмяПоля.Шрифт 			= Новый Шрифт(,8,,Истина);
			ОбластьИмяПоля.ЦветТекста		= Новый Цвет(0, 63, 47);
			ОбластьИмяПоля.ЦветФона 		= Новый Цвет(228, 240, 221);
			ОбластьИмяПоля.ЦветРамки		= Новый Цвет(172, 200, 189);
			ОбластьИмяПоля.Обвести(Линия,Линия,Линия,Линия);
		КонецЕсли;
		ОбластьЗначениеПоля 					=  ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд+НомерСтроки)+"C"+Строка(НомерКолонкиЗначений));
		ОбластьЗначениеПоля.Заполнение			= ТипЗаполненияОбластиТабличногоДокумента.Текст;
		//ОбластьЗначениеПоля.Параметр 	= "Значение";
		//ОбластьЗначениеПоля.ПараметрРасшифровки 	= "Значение";
		//ОбластьЗначениеПоля.Параметры.Значение 	= СтрокаДанных[ЭлементКоллекции.Имя];
		ОбластьЗначениеПоля.Текст 				= СтрокаДанных[ИмяРеквизита];
		ОбластьЗначениеПоля.Расшифровка			= СтрокаДанных[ИмяРеквизита];
		ОбластьЗначениеПоля.РазмещениеТекста	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьЗначениеПоля.ЦветРамки			= Новый Цвет(172, 200, 189);
		ОбластьЗначениеПоля.Обвести(Линия,Линия,Линия,Линия);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	Для Инд = НомерСтроки По ВысотаТаблицы Цикл
		Если ВыводитьКолонкуНазваний Тогда
			ОбластьИмяПоля 				= ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд+Инд)+"C"+Строка(Колонка));
			ОбластьИмяПоля.ЦветФона 	= Новый Цвет(228, 240, 221);
			ОбластьИмяПоля.ЦветРамки	= Новый Цвет(172, 200, 189);
			ОбластьИмяПоля.Обвести(Линия,Линия,Линия,Линия);
		КонецЕсли;
		ОбластьЗначениеПоля 			= ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд+Инд)+"C"+Строка(НомерКолонкиЗначений));
		ОбластьЗначениеПоля.ЦветРамки	= Новый Цвет(172, 200, 189);
		ОбластьЗначениеПоля.ЦветРамки	= Новый Цвет(172, 200, 189);
		ОбластьЗначениеПоля.Обвести(Линия,Линия,Линия,Линия);
	КонецЦикла;
	ОбластьЗаголовка 			= ТабличныйДокументРасшифровки.Область("R"+Строка(Ряд)+"C"+Строка(Колонка)+":"+"R"+Строка(Ряд)+"C"+Строка(НомерКолонкиЗначений));
	ОбластьЗаголовка.ЦветТекста	= Новый Цвет(0, 63, 47);
	ОбластьЗаголовка.ЦветФона 	= Новый Цвет(214, 229, 203);
	ОбластьЗаголовка.ЦветРамки 	= Новый Цвет(179, 172, 134);
	ОбластьЗаголовка.Шрифт 		= Новый Шрифт(,9,Истина);
	Колонка 					= Колонка + ?(ВыводитьКолонкуНазваний,2,1);
КонецПроцедуры

&НаСервере
Функция ОбработатьРасшифровку(Расшифровка,СтандартнаяОбработка)
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
			НомерСтроки = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"НомерСтроки",ДанныеДляОбработки);
			Если (НомерСтроки<>Неопределено И Данные.Количество()=0) ИЛИ Данные.Найти("НомерСтроки")<>Неопределено  Тогда
				Документ = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"Документ",ДанныеДляОбработки);
				СтандартнаяОбработка = Ложь;
				НомерСтрокиДанных = ?(НомерСтроки = Неопределено,Данные[0].Значение,НомерСтроки);
				Возврат Новый Структура("Действие,Документ,НомерСтроки","ПоказатьДанныеСтрокиДокумента",Документ,НомерСтрокиДанных);
			Иначе
				Попытка
					Ресурс = Данные[0].Поле;
					ТаблицаОтбора = Новый ТаблицаЗначений;
					ТаблицаОтбора.Колонки.Добавить("Поле");
					ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
					ТаблицаОтбора.Колонки.Добавить("Значение");
					ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
					Документ = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"Документ",ДанныеДляОбработки);
					Если ЗначениеЗаполнено(Документ) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "Регистратор";
						НС.Значение 	= Документ;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					НомерСтрокиИсточника = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"НомерСтроки",ДанныеДляОбработки);
					Если ЗначениеЗаполнено(НомерСтрокиИсточника) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "НомерСтрокиИсточника";
						НС.Значение 	= НомерСтрокиИсточника;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					Шаблон = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"Шаблон",ДанныеДляОбработки);
					Если ЗначениеЗаполнено(Шаблон) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "Шаблон";
						НС.Значение 	= Шаблон;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					Правило = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"Правило",ДанныеДляОбработки);
					Если ЗначениеЗаполнено(Правило) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "Правило";
						НС.Значение 	= Правило;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					ФинансовыйПоказатель = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"ФинансовыйПоказатель",ДанныеДляОбработки);
					Если Отчет.РазрезОтчета=0 И ЗначениеЗаполнено(ФинансовыйПоказатель) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "ФинансовыйПоказатель";
						НС.Значение 	= ФинансовыйПоказатель;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					СтатьяБюджета = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"СтатьяБюджета",ДанныеДляОбработки);
					Если (Отчет.РазрезОтчета=1 ИЛИ Отчет.РазрезОтчета=3) И ЗначениеЗаполнено(СтатьяБюджета) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "СтатьяБюджета";
						НС.Значение 	= СтатьяБюджета;
						НС.ВидСравнения = "Равно";
					КонецЕсли;
					Бюджет = ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,"Бюджет",ДанныеДляОбработки);
					Если (Отчет.РазрезОтчета=2 ИЛИ Отчет.РазрезОтчета=3) И ЗначениеЗаполнено(Бюджет) Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле 		= "СтатьяБюджета.Владелец";
						НС.Значение 	= Бюджет;
						НС.ВидСравнения = "Равно";
					КонецЕсли;

					СтруктураПараметровФормы = Новый Структура();
					СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(ТаблицаОтбора));
					СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
					СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
					СтандартнаяОбработка = Ложь;
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_РасшифровкаОборотовПоБюджету.Форма.ФормаОтчета",СтруктураПараметровФормы);
				Исключение
					Возврат Неопределено;
				КонецПопытки;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции


&НаСервере
Функция ДанныеРодительскойГруппировки(ИнформацияДляРасшифровки,ИмяПоля,ДанныеРасшифровки)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле <> ИмяПоля Тогда
					Продолжить;
				КонецЕсли;
				Возврат ПолеРодителя.Значение;
			КонецЦикла;
		КонецЕсли;
		РезультатРасчета = ДанныеРодительскойГруппировки(ПолеРодитель,ИмяПоля,ДанныеРасшифровки);
		Если РезультатРасчета <> Неопределено Тогда
			Возврат РезультатРасчета;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции


&НаКлиенте
Процедура ШаблоныШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = СписокШаблонов.Количество()=0;
	ДанныеВыбора = СписокШаблонов;
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДанныеИсточникаПриИзменении(Элемент)
	Если Отчет.ВыводитьДанныеИсточника И Отчет.ОтображениеБюджетныхДанных = 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отображение разрезов перенесено в колонки, т.к. одновременный вывод данных источника и отображение разрезов в строках невозможны");
		Отчет.ОтображениеБюджетныхДанных = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПоказателейПриИзменении(Элемент)
	Если Отчет.ВыводитьДанныеИсточника И Отчет.ОтображениеБюджетныхДанных = 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отображение данных источника отключено, т.к. одновременный вывод данных источника и отображение разрезов в строках невозможны");
		Отчет.ВыводитьДанныеИсточника = Ложь;
	КонецЕсли;
КонецПроцедуры
