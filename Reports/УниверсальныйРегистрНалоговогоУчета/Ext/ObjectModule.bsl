Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мСтруктураРегистровИРазделовНУ Экспорт;

Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент Тогда

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДоработатьКомпоновщикПередВыводом();
	
	// выводим шапку
	СведенияОНалогоплательщике = ОбщегоНазначения.СведенияОЮрФизЛице(Налогоплательщик, КонецПериода);
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();
	ОбластьЗаголовок.Параметры.Заполнить(СведенияОНалогоплательщике);
	ОбластьЗаголовок.Параметры.НалоговыйПериод = ОбщегоНазначения.ПолучитьПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода));
	Результат.Вывести(ОбластьЗаголовок);
	
	// сохраним признак РасширеннойНастройки
	СохраненныйПризнакРасширеннойНастройки = ЭтотОбъект.РасширеннаяНастройка;
	ЭтотОбъект.РасширеннаяНастройка = Ложь; // выставляем в ЛОЖЬ, чтобы зафиксировать шапку таблицы при выводе
	
	ТиповыеОтчеты.ВывестиТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// восстанавливаем признак расширенной настройки
	ЭтотОбъект.РасширеннаяНастройка = СохраненныйПризнакРасширеннойНастройки;
	
	// выводим подвал
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Налогоплательщик, КонецПериода, глЗначениеПеременной("глТекущийПользователь").Физлицо);
	ОбластьПодвал.Параметры.ФИОРуководителя = ОтветЛица.Руководитель;
	ОбластьПодвал.Параметры.ФИОглБухгалтера = ОтветЛица.ГлавныйБухгалтер;
	ОбластьПодвал.Параметры.ФИОИсполнителя  = ОтветЛица.ОтветственныйЗаРегистры;
	ОбластьПодвал.Параметры.ДатаСоставления = Формат(ОбщегоНазначения.ПолучитьРабочуюДату(), "ДФ=""дд ММММ гггг 'г.'""");
	Результат.Вывести(ОбластьПодвал);
	
	Возврат;
	
КонецПроцедуры // СформироватьОтчет()

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
		
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", ?(ЗначениеЗаполнено(КонецПериода),КонецДня(КонецПериода), КонецПериода));
	
	ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Налогоплательщик", Налогоплательщик, ВидСравненияКомпоновкиДанных.Равно);
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями 
		И СхемаКомпоновкиДанных.НаборыДанных["НаборДанныхИсточникДанных"].Поля.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "СтруктурнаяЕдиница", СписокСтруктурныхЕдиниц, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Налогоплательщик", 				Налогоплательщик);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РазделНалоговогоУчета", 			мСтруктураРегистровИРазделовНУ[ИмяРегистра]);
КонецПроцедуры

// Функция формирует текст заголовка отчета 
//
Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Регистр налогового учета" + ?(НЕ ПустаяСтрока(ИмяРегистра), " """ + Метаданные.РегистрыНакопления[ИмяРегистра].Синоним + """", "");

	Возврат ЗаголовокОтчета;
	
КонецФункции // ПолучитьТекстЗаголовка()

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	Если СохраненнаяНастройка = Неопределено Тогда
		СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Настройка.Записать();
		
		СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

// Процедура добавляет переданное поле в группировку
//
Процедура ДобавитьПолеВГруппировку(ЭлементСтруктуры, ИмяПоля)
	
	НовоеПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	НовоеПолеГруппировки.Использование = Истина;	

КонецПроцедуры // ДобавитьПолеВГруппировку()

// Процедура заполняет настройки схемы компоновки по умолчанию
//
Процедура ЗаполнитьСтруктуруПоУмолчанию(НаборДанных, НастройкиКомпоновкиДанных)
	
	// добавляем динамически формируемую структуру после заголовка отчета
	
	ЭлементСтруктурыТаблицаРегистра = Неопределено;
	
	Для Каждого ЭлементСтруктуры Из НастройкиКомпоновкиДанных.Структура Цикл
		Если ЭлементСтруктуры.Имя = "ТаблицаРегистра" Тогда
			ЭлементСтруктурыТаблицаРегистра = ЭлементСтруктуры;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементСтруктурыТаблицаРегистра <> Неопределено Тогда
		НастройкиКомпоновкиДанных.Структура.Удалить(ЭлементСтруктурыТаблицаРегистра);
	КонецЕсли;
	
	ЭлементСтруктуры = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Имя = "ТаблицаРегистра";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];

	// Код строки декларации ставим первой, т.к. основное назначение регистров - это расшифровка отдельных строк
	Если Найти(НаборДанных.Запрос, "КодСтрокиДекларации") > 0 Тогда
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, "КодСтрокиДекларации");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "КодСтрокиДекларации", "Код строки декларации");
		
		// установим сортировку по код строки
		ПолеПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("КодСтрокиДекларации");
		ПолеПорядка.Использование = Истина;
		
		// добавляем в итоги по коду строки все ресурсы из регистра
		ДобавитьПоказатели(ЭлементСтруктуры);
		
		// создаем еще один уровень - группировку, вложенную в код строки декларации
		ЭлементСтруктуры = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;

	ТиповыеОтчеты.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "SystemFields.SerialNumber", "№ п/п");
	
	// по умолчанию выводим все поля из регистра
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если ВРег(Лев(Измерение.Имя, 7)) = "УДАЛИТЬ" Тогда  // помеченные на удаление поля не учитываем
			Продолжить;
		КонецЕсли;
		
		Если Измерение.Имя = "Налогоплательщик" Тогда
			// по налогоплательщику по умолчанию и так отбор стоит
			Продолжить;
		КонецЕсли;
		
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями = ЛОЖЬ Тогда
			Если Измерение.Имя = "Организация" Или Измерение.Имя = "СтруктурнаяЕдиница" Тогда
				// если в базе не ведется учет по структурным подразделениям, 
				// то организация и структурная единица должны совпадать с налогоплательщиком
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, Измерение.Имя);
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, Измерение.Имя, Измерение.Синоним);
	КонецЦикла;
	
	// измерения, которые получаются из других источников
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ДобавитьПолеВГруппировку(ЭлементСтруктуры, "НалоговыйКомитет");
		ТиповыеОтчеты.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, "НалоговыйКомитет", "Налоговый комитет");
	КонецЕсли;
	
	ДобавитьПоказатели(ЭлементСтруктуры);
	
	Если ИмяТаблицы = "Движения" Тогда // если таблица движений, то добавим еще и реквизиты
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			Если ВРег(Лев(Реквизит.Имя, 7)) = "УДАЛИТЬ" Тогда // помеченные на удаление поля не учитываем
				Продолжить;
			КонецЕсли;

			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями = ЛОЖЬ Тогда
				Если Реквизит.Имя = "Организация" Или Реквизит.Имя = "СтруктурнаяЕдиница" Тогда
					// если в базе не ведется учет по структурным подразделениям, 
					// то организация и структурная единица должны совпадать с налогоплательщиком
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьПолеВГруппировку(ЭлементСтруктуры, Реквизит.Имя);
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруПоУмолчанию()

// Процедура добавляет в показатели отчета ресурсы регистра
//
Процедура ДобавитьПоказатели(ЭлементСтруктуры)
	
	Если ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = "Нач. остаток";
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляПриход = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляПриход.Заголовок = "Приход";
		ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляРасход = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляРасход.Заголовок = "Расход";
		ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
		ВыбранныеПоляКонечныйОстаток = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = "Кон. остаток";
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	КонецЕсли;
	
	Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
		Если ИмяТаблицы = "Обороты" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
		ИначеЕсли ИмяТаблицы = "ОстаткиИОбороты" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "." + Ресурс.Имя + "Приход", Ресурс.Синоним);
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "." + Ресурс.Имя + "Расход", Ресурс.Синоним);
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
		ИначеЕсли ИмяТаблицы = "Движения" Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПоказатели()

// Процедура добавляет поля в динамически формируемый набор данных по регистру
//
Процедура ДобавитьПоляНабораДанных(НаборДанных)
		
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];

	// Добавляем измерения
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ПолеНаборДанных = ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Измерение.Имя, Измерение.Синоним);
	КонецЦикла;
	
	// добавим НалоговыйКомитет
	ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, "НалоговыйКомитет", "Налоговый комитет");
	
	// еще может быть КодСтрокиДекларации
	Если Найти(НаборДанных.Запрос, "КодСтрокиДекларации") > 0 Тогда
		ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, "КодСтрокиДекларации", "Код строки декларации");
	КонецЕсли;
	
	// Добавляем реквизиты
	Если ИмяТаблицы = "Движения" Тогда
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем поля периода
	Если ИмяТаблицы = "ОстаткиИОбороты" ИЛИ ИмяТаблицы = "Обороты" Тогда
		ТиповыеОтчеты.ДобавитьПоляПериодаВНаборДанных(НаборДанных);
	КонецЕсли;
	
	// Добавляем ресурсы
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Если ИмяТаблицы = "Обороты" Тогда
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Оборот", Ресурс.Синоним);
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");

		ИначеЕсли ИмяТаблицы = "ОстаткиИОбороты" Тогда
			
			ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
			ПапкаПолейНабораДанных.Заголовок   = Ресурс.Синоним;
			ПапкаПолейНабораДанных.ПутьКДанным = Ресурс.Имя;
																						 
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + " нач. остаток", Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток");
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "." + Ресурс.Имя + "НачальныйОстаток");
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Приход", Ресурс.Синоним + " приход", Ресурс.Имя + "." + Ресурс.Имя + "Приход");
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "." + Ресурс.Имя + "Приход");
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Расход", Ресурс.Синоним + " расход", Ресурс.Имя + "." + Ресурс.Имя + "Расход");
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "." + Ресурс.Имя + "Расход");
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "Оборот", Ресурс.Синоним + " оборот", Ресурс.Имя + "." + Ресурс.Имя + "Оборот");
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "." + Ресурс.Имя + "Оборот");
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + " кон. остаток", Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток");
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "." + Ресурс.Имя + "КонечныйОстаток");
			
		ИначеЕсли ИмяТаблицы = "Движения" Тогда
			
			ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, Ресурс.Имя, Ресурс.Синоним);
			ТиповыеОтчеты.ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
			
		КонецЕсли;	
	КонецЦикла;
	
	Если Найти(НаборДанных.Запрос, "Страна") > 0 Тогда
		// добавляем сведения о стране и НомерНалоговойРегистрацииВСтранеРезидентства
		ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, "Страна", "Страна");
		ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, "НомерНалоговойРегистрацииВСтранеРезидентства", "Номер налоговой регистрации в стране резидентства");
		
		НовоеПоле = ТиповыеОтчеты.ДобавитьПолеНабораДанных(НаборДанных, "НеЯвляетсяНалоговымРезидентомРК", "Резидент/Нерезидент");
		НовоеПоле.ВыражениеПредставления = "ВЫБОР КОГДА НеЯвляетсяНалоговымРезидентомРК ТОГДА ""Нерезидент"" ИНАЧЕ ""Резидент"" КОНЕЦ";
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПоляНабораДанных()

// Процедура формирует текст запроса для получения данных из выбранного регистра
//
Функция СформироватьЗапросПоМетаданным()

	ТекстПоля = "";
	ТекстСоединения = "";
	ЕстьФизЛицо = Ложь;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА (НЕ ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL )
	|				И ИсчислениеНалогов.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИсчислениеНалогов.НалоговыйКомитет
	|		ИНАЧЕ Организации.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет
	|
	|ПОМЕСТИТЬ ВТ_ИсчислениеНалогов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И (ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА ВЫБОР
	|					КОГДА (НЕ ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL )
	|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
	|					КОГДА (НЕ ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL )
	|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
	|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
	|				КОНЕЦ
	|		КОГДА (НЕ ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL )
	|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
	|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
	|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
	|			И (ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением)
	|			И (ИсчислениеНалогов_Подр.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
	|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
	|			И (ИсчислениеНалогов_Орг.РазделНалоговогоУчета = &РазделНалоговогоУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|";
	
	// для физлиц добавим еще получение информации о гражданстве
	Если Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Физлицо") <> Неопределено Тогда
		
		ЕстьФизлицо = Истина; // при наличии физлица выполняем еще получение данных о его гражданстве, поэтому необходимо обороты по месяца
	
		ТекстЗапроса = ТекстЗапроса + "
		|
		|//////////////////////////////
		|// все возможные даты месяцев, за которые могут быть данные - считаем, что есть в календаре, тот период и в базе 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РеглКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцНалоговогоПериода
		|
		|ПОМЕСТИТЬ ВТ_Календарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РеглКалендарь
		|{ГДЕ
		|	РеглКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И ВЫБОР КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(2999, 12, 31) ИНАЧЕ &КонецПериода КОНЕЦ}
		|;
		|
		|//////////////////////////////
		|// сведения о гражданстве
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Календарь.МесяцНалоговогоПериода,
		|	ГражданствоФизЛиц.ФизЛицо,
		|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяДатаГражданства
		|ИЗ
		|	ВТ_Календарь КАК Календарь
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ПО ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Календарь.МесяцНалоговогоПериода, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Календарь.МесяцНалоговогоПериода,
		|	ГражданствоФизЛиц.ФизЛицо
		|ИНДЕКСИРОВАТЬ ПО
		|	ГражданствоФизЛиц.ФизЛицо,
		|	Период
		|;
		|
		|//////////////////////////////
		|// данные о гражданстве
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоследняяДатаГражданства.ФизЛицо КАК ФизЛицо,
		|	ПоследняяДатаГражданства.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛиц.Страна = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|		ИНАЧЕ ГражданствоФизЛиц.Страна
		|	КОНЕЦ КАК СтранаРезидентства,
		|	ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства,
		|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
		|
		|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
		|ИЗ
		|	ВТ_ПоследняяДатаГражданства КАК ПоследняяДатаГражданства
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|		ПО ПоследняяДатаГражданства.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|			И ПоследняяДатаГражданства.Период = ГражданствоФизЛиц.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	МесяцНалоговогоПериода
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|//////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникДанных.*
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ
	|	
	|ИЗ РегистрНакопления." + ИмяРегистра;
	
	Если ИмяТаблицы <> "Движения" Тогда
		ТекстЗапроса = ТекстЗапроса + "." + ИмяТаблицы;
	КонецЕсли;

    Если ИмяТаблицы = "ОстаткиИОбороты" ИЛИ ИмяТаблицы = "Обороты" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,{&КонецПериода} ," + ?(ЕстьФизЛицо, "МЕСЯЦ", "Авто")+ ")";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК ИсточникДанных
	|//ДОПОЛНИТЕЛЬНЫЕ_СОЕДИНЕНИЯ
	|";
	
	// в зависимости от имени регистра присоединяем еще вспомогательные регистры

	Если ИмяРегистра = "Акциз" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоАкцизу.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоАкцизу.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоАкцизу
		|		ПО ИсточникДанных.ТМЗ.ВидПодакцизногоТМЗ = КодыСтрокДекларацииПоАкцизу.ВидТМЗ
		|			И ИсточникДанных.ВидОперации = КодыСтрокДекларацииПоАкцизу.ВидОперации";
		
	ИначеЕсли ИмяРегистра = "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
		Или ИмяРегистра = "ВзаиморасчетыОрганизацийСПолучателямиИЛ"
		Или ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций"
		Или ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций"
		Или ИмяРегистра = "ВыплаченныеДоходыРаботникамОрганизацийНУ"
		Или ИмяРегистра = "ИПНРасчетыСБюджетом"
		Или ИмяРегистра = "ИПНСведенияОДоходах"
		Или ИмяРегистра = "ОПВПодлежитПеречислениюВФонды"
		Или ИмяРегистра = "ОПВРасчетыСФондами"
		Или ИмяРегистра = "ОПВСведенияОДоходах"
		Или ИмяРегистра = "ОППВРасчетыСФондами"
		Или ИмяРегистра = "ОППВСведенияОДоходах"
		Или ИмяРегистра = "ОПВРРасчетыСФондами"
		Или ИмяРегистра = "ОПВРСведенияОДоходах"
		Или ИмяРегистра = "СНИсчисленный"
		Или ИмяРегистра = "СОРасчетыСФондами"
		Или ИмяРегистра = "СОСведенияОДоходах"
		Или ИмяРегистра = "ВОСМССведенияОДоходах"
		Или ИмяРегистра = "ВОСМСРасчетыСФондами"
		Или ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды"
		Или ИмяРегистра = "ООСМССведенияОДоходах"
		Или ИмяРегистра = "ООСМСРасчетыСФондами" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница";
		
		// соединяем еще с данными о гражданстве
		Если ИмяРегистра <> "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
			И ИмяРегистра <> "ВзаиморасчетыОрганизацийСПолучателямиИЛ" Тогда
			
			Если ИмяРегистра = "ИПНСведенияОДоходах"
				ИЛИ ИмяРегистра = "ВОСМССведенияОДоходах" Тогда
				ТекстПоля = ТекстПоля + ",
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ВЫБОР
				|					КОГДА ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).СтранаРезидентства = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
				|						ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
				|					ИНАЧЕ ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).СтранаРезидентства
				|				КОНЕЦ
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) 
				|	КОНЕЦ КАК Страна,
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ВЫРАЗИТЬ(ИсточникДанных.Физлицо КАК Справочник.Контрагенты).НомерНалоговойРегистрацииВСтранеРезидентства
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") 
				|	КОНЕЦ КАК НомерНалоговойРегистрацииВСтранеРезидентства,
				|	ВЫБОР
				|		КОГДА ИсточникДанных.Физлицо ССЫЛКА Справочник.Контрагенты 
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
				|	КОНЕЦ КАК НеЯвляетсяНалоговымРезидентомРК";
			Иначе
				ТекстПоля = ТекстПоля + ",
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна,
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
				|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК";
			КонецЕсли;
			
			Если ИмяРегистра = "ОПВРасчетыСФондами"
				ИЛИ ИмяРегистра = "СНИсчисленный"
				ИЛИ ИмяРегистра = "СОРасчетыСФондами"
				ИЛИ ИмяРегистра = "ООСМСРасчетыСФондами"
				ИЛИ ИмяРегистра = "ВОСМСРасчетыСФондами" Тогда
				
				ТекстСоединения = ТекстСоединения + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
				|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
				|			И ИсточникДанных.МесяцНалоговогоПериода = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
			
			Иначе
			
				ТекстСоединения = ТекстСоединения + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
				|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
				|			И НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ) = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
				
			КонецЕсли;
			
		КонецЕсли;		
		
	ИначеЕсли ИмяРегистра = "СНСведенияОДоходах" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоСН.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоСН
		|		ПО ИсточникДанных.ВидРасчета = КодыСтрокДекларацииПоСН.ВидРасчета";

		ТекстПоля = ТекстПоля + ",
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.СтранаРезидентства, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна,
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НомерНалоговойРегистрацииВСтранеРезидентства, """") КАК НомерНалоговойРегистрацииВСтранеРезидентства,
		|	ЕСТЬNULL(ВТ_ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК";
		
		ТекстСоединения = ТекстСоединения + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГражданствоФизЛиц КАК ВТ_ГражданствоФизЛиц
		|		ПО ИсточникДанных.ФизЛицо = ВТ_ГражданствоФизЛиц.ФизЛицо
		|			И НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ) = ВТ_ГражданствоФизЛиц.МесяцНалоговогоПериода";
			
	ИначеЕсли ИмяРегистра = "КорректировкаНДС" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС
		|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации";
		
	
	ИначеЕсли ИмяРегистра = "КорректировкаНДСКВозмещению" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету
		|		ПО ИсточникДанных.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
		|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВидОборота";
		
	ИначеЕсли ИмяРегистра = "НДС" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДС
		|		ПО ИсточникДанных.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации";
		
	ИначеЕсли ИмяРегистра = "НДСКВозмещению" Тогда
		
		ТекстПоля = ",
		|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет КАК НалоговыйКомитет,
		|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних({&КонецПериода}) КАК КодыСтрокДекларацииПоНДСКЗачету
		|		ПО ИсточникДанных.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
		|			И ИсточникДанных.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВидОборота";
		
	Иначе // все прочие регистры
	
		ТекстПоля = ",
		|	ЕСТЬNULL(ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет, ИсточникДанных.Налогоплательщик.НалоговыйКомитет) КАК НалоговыйКомитет";
		
		ТекстСоединения = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсчислениеНалогов КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО ИсточникДанных.Налогоплательщик = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ", ТекстПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_СОЕДИНЕНИЯ", ТекстСоединения);
	
    Если ИмяТаблицы = "Движения" Тогда
		ТекстЗапроса = ТекстЗапроса + "ГДЕ ИсточникДанных.Период МЕЖДУ &НачалоПериода И ВЫБОР КОГДА &КонецПериода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(2999, 12, 31) ИНАЧЕ &КонецПериода КОНЕЦ";
	КонецЕсли;
	
	// добавим в запрос возможность получения характеристик объектов
	ВыборкаВидовОбъектовСоСвойствами = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Выбрать();
	Пока ВыборкаВидовОбъектовСоСвойствами.Следующий() Цикл
		
		Если ВыборкаВидовОбъектовСоСвойствами.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаВидовОбъектовСоСвойствами.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыборкаВидовОбъектовСоСвойствами.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
	
		ИмяПредопределенногоЭлемента = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.ПолучитьИмяПредопределенного(ВыборкаВидовОбъектовСоСвойствами.Ссылка);
		ТипЭлемента = ВыборкаВидовОбъектовСоСвойствами.ТипЗначения.Типы()[0];
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЭлемента);
		Если МетаданныеСправочника = Неопределено Или НЕ Метаданные.Справочники.Содержит(МетаданныеСправочника) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|{ХАРАКТЕРИСТИКИ
		|	ТИП(Справочник." + МетаданныеСправочника.Имя + ")
		|	СПИСОК (ВЫБРАТЬ
		|				СвойстваОбъектов.Ссылка,
		|				"" Дополнительное свойство: "" + СвойстваОбъектов.Наименование КАК Наименование,
		|				СвойстваОбъектов.ТипЗначения
		|			ИЗ
		|				ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|			ГДЕ
		|				СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов." + ИмяПредопределенногоЭлемента + ")
		|				И НЕ СвойстваОбъектов.ПометкаУдаления) 
		|	ИДЕНТИФИКАТОР Ссылка
		|	ИМЯ Наименование
		|	ТИПЗНАЧЕНИЯ ТипЗначения
		|	ЗНАЧЕНИЯ РегистрСведений.ЗначенияСвойствОбъектов
		|	ОБЪЕКТ Объект
		|	ХАРАКТЕРИСТИКА Свойство
		|	ЗНАЧЕНИЕ Значение}
		|{ХАРАКТЕРИСТИКИ
		|	ТИП(Справочник." + МетаданныеСправочника.Имя + ")
		|	СПИСОК (ВЫБРАТЬ
		|				КатегорииОбъектов.Ссылка,
		|				"" Дополнительная категория: "" + КатегорииОбъектов.Наименование КАК Наименование
		|			ИЗ
		|				Справочник.КатегорииОбъектов КАК КатегорииОбъектов
		|			ГДЕ
		|				КатегорииОбъектов.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов." + ИмяПредопределенногоЭлемента + ")
		|				И НЕ КатегорииОбъектов.ПометкаУдаления) 
		|	ИДЕНТИФИКАТОР Ссылка
		|	ИМЯ Наименование
		|	ЗНАЧЕНИЯ РегистрСведений.КатегорииОбъектов
		|	ОБЪЕКТ Объект
		|	ХАРАКТЕРИСТИКА Категория}
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьЗапросПоМетаданным()

// Инициализирует схему компоновки данных
//
Процедура ИнициализацияОтчета() Экспорт
	
	Если ПустаяСтрока(ИмяРегистра) ИЛИ ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	//СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	СтарыйНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанныхИсточникДанных");
	Если СтарыйНаборДанных <> Неопределено Тогда
		СхемаКомпоновкиДанных.НаборыДанных.Удалить(СтарыйНаборДанных);
	КонецЕсли;
	
	// очистим поля итогов (Ресурсы) перед новым созданием
	Н = СхемаКомпоновкиДанных.ПоляИтога.Количество() - 1;
	Пока Н >= 0 Цикл
		ТекущееПолеИтога = СхемаКомпоновкиДанных.ПоляИтога[Н];
		СхемаКомпоновкиДанных.ПоляИтога.Удалить(ТекущееПолеИтога);
		Н = Н - 1;
	КонецЦикла;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0];
	
	НаборДанных = ТиповыеОтчеты.ДобавитьНаборДанныхЗапрос(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанных, "НаборДанныхИсточникДанных");
	
	НаборДанных.Запрос = СформироватьЗапросПоМетаданным();
	ДобавитьПоляНабораДанных(НаборДанных);

	ЗаполнитьСтруктуруПоУмолчанию(НаборДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры // ИнициализацияОтчета()

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить(); //-=-=
//-=-=
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
//-=-=

// список регистров НУ и соответствующих им значений из перечисления РазделыНалоговогоУчета
мСтруктураРегистровИРазделовНУ = Новый Структура;
ВспомогательнаяСтруктураРегистровИРазделовНУ = Новый Структура;

ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("Акциз", "Акциз");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыОрганизацийСПолучателямиИЛ", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыСДепонентамиОрганизаций", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВзаиморасчетыСРаботникамиОрганизаций", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВыплаченныеДоходыРаботникамОрганизацийНУ", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ИПНРасчетыСБюджетом", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ИПНСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("КорректировкаНДС", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("КорректировкаНДСКВозмещению", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДС", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСВзаиморасчетыСБюджетом", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСЗаНерезидента", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДСКВозмещению", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("НДССИзмененнымСрокомУплаты", "НДС");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВПодлежитПеречислениюВФонды", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОППВРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОППВСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВРРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ОПВРСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СНИсчисленный", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СНСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СОРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("СОСведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ООСМССведенияОДоходах", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ООСМСРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМСПодлежитПеречислениюВФонды", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМСРасчетыСФондами", "НалогиСЗаработнойПлаты");
ВспомогательнаяСтруктураРегистровИРазделовНУ.Вставить("ВОСМССведенияОДоходах", "НалогиСЗаработнойПлаты");

Для Каждого КлючИЗначение Из ВспомогательнаяСтруктураРегистровИРазделовНУ Цикл
	Если Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления.Найти(КлючИЗначение.Значение) <> Неопределено Тогда
		мСтруктураРегистровИРазделовНУ.Вставить(КлючИЗначение.Ключ, Перечисления.РазделыНалоговогоУчета[КлючИЗначение.Значение]);
	КонецЕсли;
КонецЦикла;
