Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;

#Если Клиент Тогда

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	ОтчетыДляРуководителя.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура;
	ВыборкаДанных = ПолучитьВыборку();
	ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ВыборкаДанных);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода" , КонецДня(КонецПериода));
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Контрагент");	
	Если ВыводитьДанныеПоДоговорам Тогда
		ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Договор");
	КонецЕсли;
	
	СтруктураПараметр   = ОтчетыДляРуководителя.ПолучитьОписаниеСтруктурыПараметра();
	ПромежуточныеДанные = ОтчетыДляРуководителя.ПолучитьОписаниеТаблицыПромежуточныеДанные();	
	
	Выборка = ВыборкаДанных.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПараметр, Выборка);
		СтруктураПараметр.Субконто1 = Выборка.Контрагент;
		СтруктураПараметр.Субконто2 = Выборка.Договор;
		Если Выборка.ДолгНаНачало <> 0 Тогда
			СтруктураПараметр.Сумма         = Выборка.ДолгНаНачало;
			СтруктураПараметр.ВидРесурса    = "начало";
			СтруктураПараметр.БухВидРесурса = "Дт";
			ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
		КонецЕсли;
		Если Выборка.АвансНаНачало <> 0 Тогда
			СтруктураПараметр.Сумма         = Выборка.АвансНаНачало;
			СтруктураПараметр.ВидРесурса    = "начало";
			СтруктураПараметр.БухВидРесурса = "Кт";
			ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
		КонецЕсли;
		Если Выборка.КорСчет <> null Тогда
			Если Выборка.УвеличениеДолга <> 0 Тогда
				СтруктураПараметр.Сумма         = Выборка.УвеличениеДолга;
				СтруктураПараметр.ВидРесурса    = "оборот";
				СтруктураПараметр.БухВидРесурса = "Дт";
				ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
			КонецЕсли;
			Если Выборка.ПогашениеДолга <> 0 Тогда
				СтруктураПараметр.Сумма         = Выборка.ПогашениеДолга;
				СтруктураПараметр.ВидРесурса    = "оборот";
				СтруктураПараметр.БухВидРесурса = "Кт";
				ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ДолгНаКонец <> 0 Тогда
			СтруктураПараметр.Сумма         = Выборка.ДолгНаКонец;
			СтруктураПараметр.ВидРесурса    = "конец";
			СтруктураПараметр.БухВидРесурса = "Дт";
			ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
		КонецЕсли;
		Если Выборка.АвансНаКонец <> 0 Тогда
			СтруктураПараметр.Сумма         = Выборка.АвансНаКонец;
			СтруктураПараметр.ВидРесурса    = "конец";
			СтруктураПараметр.БухВидРесурса = "Кт";
			ОтчетыДляРуководителя.ДобавитьЗаписьВТаблицуПромежуточныеДанные(ПромежуточныеДанные, СтруктураПараметр);
		КонецЕсли;
	КонецЦикла;

	ТиповыеОтчеты.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект);

КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокОтчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка();

	Результат.Вывести(ОбластьЗаголовок);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Задолженность поставщикам";
	
	Возврат ТиповыеОтчеты.ПолучитьТекстЗаголовка(ЭтотОбъект, ЗаголовокОтчета, ОрганизацияВНачале);
	
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
КонецПроцедуры

Функция ПолучитьВыборку() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.Субконто1 КАК Контрагент,
	|	Обороты.Субконто2 КАК Договор,
	|	СУММА(Обороты.СуммаОборотКт) КАК УвеличениеДолга,
	|	СУММА(Обороты.СуммаОборотДт) КАК ПогашениеДолга,
	|	Обороты.Счет КАК Счет,
	|	Обороты.КорСчет КАК КорСчет,
	|	СУММА(0) КАК ДолгНаНачало,
	|	СУММА(0) КАК АвансНаНачало,
	|	СУММА(0) КАК ДолгНаКонец,
	|	СУММА(0) КАК АвансНаКонец,
	|	""+"" КАК Знак
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТиповойОбороты.Субконто1 КАК Субконто1,
	|		ТиповойОбороты.Субконто2 КАК Субконто2,
	|		ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|		ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|		ТиповойОбороты.Счет КАК Счет,
	|		ТиповойОбороты.КорСчет КАК КорСчет
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				НЕ Счет.Забалансовый
	|					И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|						ИЛИ Счет В (&СписокСчетовПользователя))
	|					И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД,
	|				Организация В (&СписокОрганизаций),
	|				,
	|				) КАК ТиповойОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТиповойОбороты.Субконто1,
	|		ТиповойОбороты.Субконто2,
	|		-ТиповойОбороты.СуммаОборотДт,
	|		-ТиповойОбороты.СуммаОборотКт,
	|		ТиповойОбороты.Счет,
	|		ТиповойОбороты.КорСчет
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				НЕ Счет.Забалансовый
	|					И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|						ИЛИ Счет В (&СписокСчетовПользователя))
	|					И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД,
	|				Организация В (&СписокОрганизаций),
	|				(КорСчет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ КорСчет В (&СписокСчетовПользователя))
	|					И НЕ КорСчет В ИЕРАРХИИ (&ИсключенныеСчета),
	|				&ВидыСубконтоКД) КАК ТиповойОбороты
	|	ГДЕ
	|		ТиповойОбороты.Субконто1 = ТиповойОбороты.КорСубконто1
	|		И ТиповойОбороты.Субконто2 = ТиповойОбороты.КорСубконто2) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.Счет,
	|	Обороты.КорСчет,
	|	Обороты.Субконто1,
	|	Обороты.Субконто2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальныеОстатки.Субконто1,
	|	НачальныеОстатки.Субконто2,
	|	0,
	|	0,
	|	НачальныеОстатки.Счет,
	|	NULL,
	|	НачальныеОстатки.СуммаРазвернутыйОстатокКт,
	|	НачальныеОстатки.СуммаРазвернутыйОстатокДт,
	|	0,
	|	0,
	|	""+""
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериодаОстатки,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Организация В (&СписокОрганизаций)) КАК НачальныеОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонечныеОстатки.Субконто1,
	|	КонечныеОстатки.Субконто2,
	|	0,
	|	0,
	|	КонечныеОстатки.Счет,
	|	NULL,
	|	0,
	|	0,
	|	КонечныеОстатки.СуммаРазвернутыйОстатокКт,
	|	КонечныеОстатки.СуммаРазвернутыйОстатокДт,
	|	""+""
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&КонецПериодаОстатки,
	|			НЕ Счет.Забалансовый
	|				И (Счет В ИЕРАРХИИ (&СчетаРасчетов)
	|					ИЛИ Счет В (&СписокСчетовПользователя))
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Организация В (&СписокОрганизаций)) КАК КонечныеОстатки";
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = ОтчетыДляРуководителя.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2);
    СписокСчетовДтЗадолженности = ОтчетыДляРуководителя.ВозвратитьМассивСчетовДтКтЗадолженности(Истина, Истина, Истина);
	СписокСчетовПользователя    = ОтчетыДляРуководителя.ПолучитьСписокСчетовПользователяДляРасчетаЗадолженности(2);
	
	Запрос.УстановитьПараметр("НачалоПериода"           , НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("НачалоПериодаОстатки"    , НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода"            , КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("КонецПериодаОстатки"     , КонецДня(КонецПериода) + 1);
	Запрос.УстановитьПараметр("СписокОрганизаций"       , мСписокСтруктурныхЕдиниц);
	Запрос.УстановитьПараметр("ИсключенныеСчета"        , СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	Запрос.УстановитьПараметр("СчетаРасчетов"           , СписокСчетовДтЗадолженности);
	Запрос.УстановитьПараметр("СписокСчетовПользователя", СписокСчетовПользователя);
	
	ВидыСубконтоКД = Новый Массив;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКД"  , ВидыСубконтоКД);
	
	Если Не ЗначениеЗаполнено(мСписокСтруктурныхЕдиниц) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В(&СписокОрганизаций)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
Конецфункции
 
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	Если СохраненнаяНастройка = Неопределено Тогда
		СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		Настройка.ИспользоватьПриОткрытии = Истина;
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Настройка.Записать();
		
		СохраненнаяНастройка = Настройка.Ссылка;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;