Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;
Перем ПараметрыОтчета Экспорт;
Перем ЗначенияПараметровОтчета Экспорт;

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
   	ДоступныеПоказатели.Очистить();
	ДоступныеГруппировки.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоляОтчета.Поле,
		|	ПоляОтчета.Поле.РольПоля КАК РольПоля
		|ИЗ
		|	Справочник.фин_ШаблоныПользовательскихОтчетов.ПоляОтчета КАК ПоляОтчета
		|ГДЕ
		|	ПоляОтчета.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ВидОтчета);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.РольПоля <> Перечисления.фин_РолиПолейПользовательскихОтчетов.Измерение Тогда
			ДоступныеПоказатели.Добавить(ВыборкаДетальныеЗаписи.Поле);
		Иначе
			ДоступныеГруппировки.Добавить(ВыборкаДетальныеЗаписи.Поле,ВыборкаДетальныеЗаписи.Поле);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОтчета = Новый Структура;
	Для Каждого Параметр Из ВидОтчета.ПараметрыШаблона Цикл
		Если Параметр.ЗаполнятьВФормеОтчета Тогда
			Если Параметр.СписокЗначений Тогда
				Список = Новый СписокЗначений;
				Для Каждого СтрокаЗначение Из ВидОтчета.СписочныеЗначенияПараметров.НайтиСтроки(Новый Структура("Параметр",Параметр.Параметр)) Цикл
					Список.Добавить(СтрокаЗначение.Значение);
				КонецЦикла;
				Параметр_Значение = ?(Список.Количество()=0,Неопределено,Список);
			Иначе
				Параметр_Значение = Параметр.Значение;
			КонецЕсли;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Параметр.ТипПараметра));
			ПараметрыОтчета.Вставить(Параметр.Параметр,Новый Структура("Тип,Список,Значение",Новый ОписаниеТипов(МассивТипов),Параметр.СписокЗначений,Параметр_Значение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров()
	Ошибки = Ложь;
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан шаблон отчета!");
		Ошибки = Истина;
	КонецЕсли;
	Если Группировки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны группировки отчета!");
		Ошибки = Истина;
	КонецЕсли;
	Если Показатели.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны показатели отчета!");
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Показатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен показатель в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка показателей!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Группировки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена группировка в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидГруппировки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид группировки в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать группировку по валюте без отражения валютной суммы в отчете!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ Ошибки;	
КонецФункции

Функция ПолучитьТаблицуДанных(Отбор,мГруппировки)
	
	Запрос = Новый Запрос;
	
	ТаблицаОтбора.Очистить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СтруктураПредставленийПолей = Новый Структура;
	СписокИзмерений = Группировки.ВыгрузитьКолонку("Измерение");
	Для Каждого СтрокаОформления Из Группировки Цикл
		Если СтрокаОформления.СоставноеПоле И ЗначениеЗаполнено(СтрокаОформления.Состав) И ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаОформления.Состав))=Тип("СписокЗначений") Тогда
			Для Каждого ВложенноеПоле Из ЗначениеИзСтрокиВнутр(СтрокаОформления.Состав) Цикл
				Если ТипЗнч(ВложенноеПоле.Значение)=Тип("СправочникСсылка.фин_ПоляПользовательскихОтчетов") И СписокИзмерений.Найти(ВложенноеПоле.Значение)=Неопределено Тогда
					СписокИзмерений.Добавить(ВложенноеПоле.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = Отчеты.фин_ПользовательскийОтчет.ПолучитьТекстЗапроса(ВидОтчета,ЗначенияПараметровОтчета,Запрос,СтруктураПредставленийПолей,СписокИзмерений,Показатели.ВыгрузитьКолонку("Показатель"));
	//Запрос.МенеджерВременныхТаблиц.Закрыть();
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьСКД(мГруппировки)
	//получаем схему компоновки данных
	СхемаКомпоновкиДанных=ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъект;
	
	
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		СтрокиГрупп = Показатели.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказатель.Показатель));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаПоказатель.Показатель))[0].ИмяПоля;
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
			НовоеПоле.ПутьКДанным	= Имя;
			НовоеПоле.Поле			= Имя;
//			НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("Число");
			НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка 	= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Поле 			= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок 		= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Условие 		= Истина; 
			НовоеПолеИтога=СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовоеПолеИтога.ПутьКДанным=Имя;
			НовоеПолеИтога.Выражение=?(ЗначениеЗаполнено(СтрокаПоказатель.Показатель.АгрегатнаяФункция),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель.АгрегатнаяФункция),"Сумма")+"("+Имя+")";
	КонецЦикла;
	
	Для Каждого СтрокаПоказатель Из мГруппировки Цикл
		Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаПоказатель.Измерение))[0].ИмяПоля;
		СтрокиГрупп = Группировки.НайтиСтроки(Новый Структура("Измерение",СтрокаПоказатель.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Измерение,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(СтрокаПоказатель.Измерение);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
	КонецЦикла;
	
	Если ОсновнаяГруппировка<>Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета И ЗначениеЗаполнено(ОсновнаяГруппировка) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 Тогда
		Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",ОсновнаяГруппировка))[0].ИмяПоля;
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(ОсновнаяГруппировка);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ПолучитьНастройкиСКД()
	Настройки=КомпоновщикНастроек.Настройки;
	Настройки.Структура.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
		Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",ОсновнаяГруппировка))[0].ИмяПоля;
		ГруппировкаПоОсновномуПолю=Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоОсновномуПолю.Использование = Истина;
		ПолеОсновнаяГруппировка					=ГруппировкаПоОсновномуПолю.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеОсновнаяГруппировка.Использование	=Истина;
		ПолеОсновнаяГруппировка.Поле			=Новый ПолеКомпоновкиДанных(Имя);
		ВыбранноеПоле=ГруппировкаПоОсновномуПолю.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Истина;
		ВыбранноеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
		Если Показатели.Количество()>0 Тогда
			ГруппаОтбора =  ГруппировкаПоОсновномуПолю.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.Использование = Истина;
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			Для Каждого Показатель Из Показатели Цикл
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Показатель.Показатель))[0].ИмяПоля);
			КонецЦикла;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Порядок = ГруппировкаПоОсновномуПолю.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Использование = Истина;
		Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ПолеОформления = ГруппировкаПоОсновномуПолю.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = Новый Шрифт(,12,Истина);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
		
		ТаблицаБюджета=ГруппировкаПоОсновномуПолю.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	Иначе	
		ТаблицаБюджета=Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	КонецЕсли;
	
	//добавляем таблицу
	
	ТаблицаБюджета.Использование=Истина;
	ТекущийРодительКолонки = ТаблицаБюджета.Колонки;
	ТекущийРодительСтроки = ТаблицаБюджета.Строки;
	
	ГруппировкаСтатья = Неопределено;
	
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаГруппировки.Измерение))[0].ИмяПоля;
		Если Не (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
			Продолжить;
		КонецЕсли;
		// как структура
	//	Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
			НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительКолонки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительКолонки.Добавить(),ТекущийРодительКолонки.Структура.Добавить());
			НоваяГруппировкаАналитикиОтчета.Использование = Истина;
			Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
			Иначе
				Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
				Для Каждого СтрокаПолей Из Поля Цикл
					ДопПоле = СтрокаПолей.Значение;
					Если ДопПоле="ЗначениеПоля" Тогда
						ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеРазрезаАналитики.Использование	=Истина;
						ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
					ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",ДопПоле))[0].ИмяПоля);
					Иначе
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
				КонецЕсли;
			КонецЕсли;
			Если СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			КонецЕсли;
			ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			ДопПоле.Использование = Истина;
			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) Тогда
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Расположение)];
			КонецЕсли;
				Если Показатели.Количество()>0 Тогда
					ГруппаОтбора =  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.Использование = Истина;
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					Для Каждого Показатель Из Показатели Цикл
						Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
						Отбор.Использование = Истина;
						Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Показатель.Показатель))[0].ИмяПоля);
					КонецЦикла;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
			
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Центр;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Центр;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			ТекущийРодительКолонки = НоваяГруппировкаАналитикиОтчета;
			
			СтрокаОформление = СтрокаГруппировки;
			Если СтрокаОформление.ПрименятьОформление Тогда
				ПолеОформления = НоваяГруппировкаАналитикиОтчета.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
			КонецЕсли;
	//	КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		Если Не (СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия) Тогда
			Продолжить;
		КонецЕсли;
		Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаГруппировки.Измерение))[0].ИмяПоля;
		//Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
			НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
			НоваяГруппировкаАналитикиОтчета.Использование = Истина;
			Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
			Иначе
				Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
				Для Каждого СтрокаПолей Из Поля Цикл
					ДопПоле = СтрокаПолей.Значение;
					Если ДопПоле="ЗначениеПоля" Тогда
						ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеРазрезаАналитики.Использование	=Истина;
						ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
					ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",ДопПоле))[0].ИмяПоля);
					Иначе
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
				КонецЕсли;
			КонецЕсли;
			Если СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			КонецЕсли;
			ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			ДопПоле.Использование = Истина;
			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) Тогда
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Расположение)];
			КонецЕсли;
			Если Показатели.Количество()>0 Тогда
				ГруппаОтбора =  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = Истина;
				ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
				Для Каждого Показатель Из Показатели Цикл
					Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Показатель.Показатель))[0].ИмяПоля);
				КонецЦикла;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиРеквизита;
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиРеквизита;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			ТекущийРодительСтроки = НоваяГруппировкаАналитикиОтчета;
			
			СтрокаОформление = СтрокаГруппировки;
			Если СтрокаОформление.ПрименятьОформление Тогда
				ПолеОформления = НоваяГруппировкаАналитикиОтчета.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
			КонецЕсли;
	//	КонецЕсли;
	КонецЦикла;
	
	Если Группировки.НайтиСтроки(Новый Структура("ВидГруппировки",Перечисления.фин_ВидыГруппировокОтчета.Поле)).Количество() >0 Тогда
		ГруппировкаАналитика=?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
		ГруппировкаАналитика.Использование=Истина;
		Если Показатели.Количество()>0 Тогда
			ГруппаОтбора =  ГруппировкаАналитика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.Использование = Истина;
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			Для Каждого Показатель Из Показатели Цикл
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Показатель.Показатель))[0].ИмяПоля);
			КонецЦикла;
			ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаГруппировки.Измерение))[0].ИмяПоля;
			Если СтрокаГруппировки.ВидГруппировки <> Перечисления.фин_ВидыГруппировокОтчета.Поле Тогда
				Продолжить;
			КонецЕсли;
			//Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
				Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
					ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеРазрезаАналитики.Использование	=Истина;
					ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
				Иначе
					Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
					Для Каждого СтрокаПолей Из Поля Цикл
						ДопПоле = СтрокаПолей.Значение;
						Если ДопПоле="ЗначениеПоля" Тогда
							ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеРазрезаАналитики.Использование	=Истина;
							ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
						ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
							ДопПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ДопПолеРазрезаАналитики.Использование	=Истина;
							ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",ДопПоле))[0].ИмяПоля);
						Иначе
							ДопПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ДопПолеРазрезаАналитики.Использование	=Истина;
							ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
						ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
						ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
					КонецЕсли;
				КонецЕсли;
				//ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				//ПолеРазрезаАналитики.Использование	=Истина;
				//ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
				ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
				ДопПоле.Использование = Истина;
				ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
				
				Порядок = ГруппировкаАналитика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				Порядок.Использование = Истина;
				Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
				Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиРеквизита;
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиРеквизита;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
				
				СтрокаОформление = СтрокаГруппировки;
				Если СтрокаОформление.ПрименятьОформление Тогда
					ПолеОформления = ГруппировкаАналитика.УсловноеОформление.Элементы.Добавить();
					ПолеОформления.Использование = Истина;
					ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
					ДопПоле.Использование = Истина;
					ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
					ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
					ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
					ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		//для созданной группировки добавляем автовыбор полей
		ВыбранныеПоляДляТекущей=ГруппировкаАналитика.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
	КонецЕсли;
	
	КорневаяГруппаПолей = ТаблицаБюджета.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	КорневаяГруппаПолей.Использование	= Истина;
	//КорневаяГруппаПолей.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
	КорневаяГруппаПолей.Расположение	= ?(ПоказателиВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
	Для Каждого СтрокаПоказатель Из Показатели Цикл
			Имя = ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаПоказатель.Показатель))[0].ИмяПоля;
			ВыбранноеПоле=КорневаяГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование	= Истина;
			ВыбранноеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
			ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
			ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			ДопПоле.Использование = Истина;
			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Формат").Значение = ?(СтрокаПоказатель.Показатель="Количество","ЧЦ=15; ЧДЦ=3","ЧЦ=15; ЧДЦ=2");
			ПолеОформления.Оформление.Элементы.Найти("Формат").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Право;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			
			Поле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование	= Истина;
			Поле.Заголовок		= СтрокаПоказатель.Показатель;
			Поле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
			
			Если ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаПоказатель.Показатель))[0].ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение Тогда
				ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
				ПолеПользователя.Заголовок = Строка(СтрокаПоказатель.Показатель)+"Итоги";
				ПолеПользователя.Использование = Истина;
				ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей(ВидОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаПоказатель.Показатель))[0].Выражение,?(ЗначениеЗаполнено(СтрокаПоказатель.Показатель.АгрегатнаяФункция),фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель.АгрегатнаяФункция),"Сумма")));
				
				ПолеОформления = ТаблицаБюджета.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
				ДопПоле.Использование = Истина;
				ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
				ПолеОформления.Оформление.Элементы.Найти("Текст").Значение = Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
				ПолеОформления.Оформление.Элементы.Найти("Текст").Использование = Истина;
            КонецЕсли;
	КонецЦикла;
	
	//новые значения параметров вывода
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение= ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=фин_БюджетированиеОбщегоНазначения.ПолучитьМакетОформленияУпр();
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	
	Возврат Настройки;
КонецФункции

Функция ВыражениеИтоговыхЗаписей(Формула,ВключаяВсе=Ложь,ВидФункции="Сумма")
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель");
	ТаблицаПоказателей.Колонки.Добавить("Длина");
	Для Каждого СтрокаДанные ИЗ ВидОтчета.ПоляОтчета Цикл
		Если СтрокаДанные.ТипПоля<>Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение И СтрокаДанные.Поле.РольПоля=Перечисления.фин_РолиПолейПользовательскихОтчетов.Ресурс Тогда
			НС = ТаблицаПоказателей.Добавить();
			НС.Показатель = СтрокаДанные.ИмяПоля;
			НС.Длина = СтрДлина(НС.Показатель);
		КонецЕсли;
	КонецЦикла;
	ТаблицаПоказателей.Сортировать("Длина УБЫВ");
	ВыходнаяСтрока = Формула;
	Для Каждого СтрокаПоказатель Из ТаблицаПоказателей Цикл
		ПолеДополнения = ВидФункции+"("+СтрокаПоказатель.Показатель+")";
		ВыходнаяСтрокаЭтапа = "";
		Остаток = ВыходнаяСтрока;
		Позиция = Найти(Остаток,СтрокаПоказатель.Показатель);
		Если Позиция <> 0 Тогда
			Пока Позиция <> 0 Цикл
				Если СтрДлина(Остаток) = Позиция +СтрДлина(СтрокаПоказатель.Показатель)-1 Тогда
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция-1) + ПолеДополнения;
					Остаток = "";
				ИначеЕсли фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьНедопустимыеСимволы(Истина).Найти(Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель),1))<>Неопределено Тогда
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция-1) + ПолеДополнения;
					Остаток = Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель));
				Иначе
					ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Лев(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель));
					Остаток = Сред(Остаток,Позиция+СтрДлина(СтрокаПоказатель.Показатель)+1);
				КонецЕсли;
				Позиция = Найти(Остаток,СтрокаПоказатель.Показатель);
			КонецЦикла;
			ВыходнаяСтрокаЭтапа = ВыходнаяСтрокаЭтапа + Остаток;
			ВыходнаяСтрока = ВыходнаяСтрокаЭтапа;
		КонецЕсли;
	КонецЦикла;
	Возврат ВыходнаяСтрока;
КонецФункции

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
    Попытка
		мГруппировки = фин_УправлениеОтчетамиБюджетирование.ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка);
		ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуДанных(Отбор,мГруппировки);
		СхемаКомпоновкиДанных = ПолучитьСКД(мГруппировки);
		Настройки = ПолучитьНастройкиСКД();

		//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
		Заголовок=фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(ВидОтчета,ЯзыкОтчета,,КЭШ);
		фин_УправлениеОтчетамиБюджетирование.ВыполнитьФормированиеОтчета(ЭтотОбъект,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,,Заголовок);	
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован по причине: "+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("ВидОтчета");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("ШиринаКолонкиПоказателя",12);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиРеквизита",25);

ДополнительныеПараметры = Новый Массив;
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;
ПараметрыОтчета = Новый Структура;
ПараметрыОформления.Добавить("ШиринаКолонкиРеквизита");
ПараметрыОформления.Добавить("ШиринаКолонкиПоказателя");
ПараметрыОформления.Добавить("ПоказателиВОднойКолонке");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
