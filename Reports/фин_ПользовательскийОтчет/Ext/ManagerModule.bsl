
Функция ПолучитьТекстЗапроса(ШаблонОтчета,ЗначенияПараметровОтчета,Запрос,СтруктураПредставленийПолей,мМассивИзмерений,мМассивПоказателей,Построитель=Неопределено,НомерВТ=Неопределено,Вложенный=Ложь,ТекстДляПостроителя=Неопределено) Экспорт
	Если ШаблонОтчета.ВидИсточника<>Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов Тогда
		ТекстДляСозданияЗапроса = ШаблонОтчета.ТекстЗапроса;
		Если ШаблонОтчета.ВидИсточника = Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы Тогда
			СтруктураЗаменыСлужебныхСлов = Новый Структура;
			СтруктураЗаменыСлужебныхСлов.Вставить("условие","");
			СтруктураЗаменыСлужебныхСлов.Вставить("Счет","");
			СтруктураЗаменыСлужебныхСлов.Вставить("СчетДт","");
			СтруктураЗаменыСлужебныхСлов.Вставить("СчетКт","");
			СтруктураЗаменыСлужебныхСлов.Вставить("КорСчет","");
			ОбъектМетаданныхОтчета = Неопределено;
			СписокСоответствийМетаданных = Новый Соответствие;
			СписокСоответствийМетаданных.Вставить("РегистрСведений",	Метаданные.РегистрыСведений);
			СписокСоответствийМетаданных.Вставить("РегистрБухгалтерии",	Метаданные.РегистрыБухгалтерии);
			СписокСоответствийМетаданных.Вставить("РегистрНакопления",	Метаданные.РегистрыНакопления);
			СписокСоответствийМетаданных.Вставить("РегистрРасчета",		Метаданные.РегистрыРасчета);
			ОбъектМетаданныхОтчета = СписокСоответствийМетаданных.Получить(Лев(ШаблонОтчета.ИмяРегистра,Найти(ШаблонОтчета.ИмяРегистра,".")-1));
			Если ОбъектМетаданныхОтчета<>Неопределено Тогда
				ИмяРегистра = Сред(ШаблонОтчета.ИмяРегистра,Найти(ШаблонОтчета.ИмяРегистра,".")+1);
				ИмяРегистра = ?(Найти(ИмяРегистра,".")=0,ИмяРегистра,Лев(ИмяРегистра,Найти(ИмяРегистра,".")-1));
				ОбъектМетаданныхОтчета = ОбъектМетаданныхОтчета[ИмяРегистра];
			КонецЕсли;
			Для Каждого ПараметрВТ Из ШаблонОтчета.ПараметрыОтбораВиртуальнойТаблицы Цикл
				КореньСлова = ?(Найти(ПараметрВТ.ПолеОтбора,".")=0,ПараметрВТ.ПолеОтбора,Лев(ПараметрВТ.ПолеОтбора,Найти(ПараметрВТ.ПолеОтбора,".")-1));
				ЗнакСравнения ="=&";
				Списочный = Ложь;
				мВидСравнения = ПараметрВТ.ВидСравнения;
				Если мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Больше Тогда
					ЗнакСравнения =">&";
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.БольшеИлиРавно Тогда
					ЗнакСравнения =">=&";
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Меньше Тогда
					ЗнакСравнения ="<&";
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.МеньшеИлиРавно Тогда
					ЗнакСравнения ="<=&";
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно Тогда
					ЗнакСравнения ="<>&";
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
					ЗнакСравнения ="В (&";
					Списочный = Истина;
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии Тогда
					ЗнакСравнения ="В ИЕРАРХИИ (&";
					Списочный = Истина;
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке Тогда
					ЗнакСравнения ="НЕ В (&";
					Списочный = Истина;
				ИначеЕсли мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ мВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии Тогда
					ЗнакСравнения ="НЕ В ИЕРАРХИИ (&";
					Списочный = Истина;
				КонецЕсли;
				Вид = "";
				Если ОбъектМетаданныхОтчета.Измерения.Найти(КореньСлова)<>Неопределено Тогда
					 Вид="условие";
				ИначеЕсли Найти(ОбъектМетаданныхОтчета.ПолноеИмя(),"РегистрБухгалтерии.")<>0 Тогда
					Если СтруктураЗаменыСлужебныхСлов.Свойство(КореньСлова) Тогда
						Вид=КореньСлова;
					КонецЕсли;
				КонецЕсли;
				Если Вид<>"" Тогда
					 ТекстПоУсловию = СтруктураЗаменыСлужебныхСлов[Вид];
					 ТекстПоУсловию = ТекстПоУсловию+?(ТекстПоУсловию="",""," И ")+ПараметрВТ.ПолеОтбора+" "+ЗнакСравнения+ПараметрВТ.Параметр+?(Списочный,")","");
					 СтруктураЗаменыСлужебныхСлов.Вставить(Вид,ТекстПоУсловию);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементСтруктуры Из СтруктураЗаменыСлужебныхСлов Цикл
				ТекстДляСозданияЗапроса = СтрЗаменить(ТекстДляСозданияЗапроса,"//"+ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
		Построитель = Новый ПостроительОтчета(ТекстДляСозданияЗапроса);
		Для Каждого Параметр Из ШаблонОтчета.ПараметрыШаблона Цикл
			Если Параметр.ЗаполнятьВФормеОтчета Тогда
				СтрокиПараметра = ЗначенияПараметровОтчета.НайтиСтроки(Новый Структура("Параметр",Параметр.Параметр));
				Если СтрокиПараметра.Количество()>0 Тогда
					ЗначениеПараметра = СтрокиПараметра[0].Значение; 
					Запрос.УстановитьПараметр(Параметр.Параметр,ЗначениеПараметра);
				КонецЕсли;
			Иначе
				ЗначениеПараметра =  Параметр.Значение;
				Если Параметр.СписокЗначений Тогда
					ЗначениеПараметра = Новый СписокЗначений;
					Для Каждого СтрокаСписочныхЗначений Из ШаблонОтчета.СписочныеЗначенияПараметров.НайтиСтроки(Новый Структура("Параметр",Параметр.Параметр)) Цикл
						ЗначениеПараметра.Добавить(СтрокаСписочныхЗначений.Значение);
					КонецЦикла;
				КонецЕсли;
				Запрос.УстановитьПараметр(Параметр.Параметр,ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		ПозицияСловаВыбрать = Найти(Построитель.Текст,"ВЫБРАТЬ");
		ТекстТестовый = Построитель.Текст;
		Пока ПозицияСловаВыбрать<>0 Цикл
			ПозицияВставки = ПозицияСловаВыбрать;
			ТекстТестовый = Лев(ТекстТестовый,ПозицияСловаВыбрать-1)+"ХХХХХХХ"+Сред(ТекстТестовый,ПозицияСловаВыбрать+СтрДлина("ВЫБРАТЬ"));
			ПозицияСловаВыбрать = Найти(ТекстТестовый,"ВЫБРАТЬ");
		КонецЦикла;
		Для Каждого Измерение Из мМассивИзмерений Цикл
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+"&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки)+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			ИначеЕсли СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+СтрокаПоле.Выражение+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение Из мМассивПоказателей Цикл
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+"&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки)+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			ИначеЕсли СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+СтрокаПоле.Выражение+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			КонецЕсли;
		КонецЦикла;
		Построитель.ЗаполнитьНастройки();
		Построитель.ВыбранныеПоля.Очистить();
		Для Каждого Измерение Из мМассивИзмерений Цикл
			Путь="";
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Путь = СтрокаПоле.ИмяПоля;
				Запрос.УстановитьПараметр("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
				Построитель.Параметры.Вставить("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
			Иначе
				Путь = СтрокаПоле.ИмяПоля;
			КонецЕсли;
			ПолеОтчета = Построитель.ВыбранныеПоля.Добавить(Путь,СтрокаПоле.ИмяПоля);
			ПолеОтчета.Представление = ?(Измерение.СпособОтображения=Перечисления.фин_СпособыОтображенияПолейПользовательскихОтчетов.ПоПользовательскомуПредставлению,Измерение.Наименование,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Измерение.Измерение));
			СтруктураПредставленийПолей.Вставить(СтрокаПоле.ИмяПоля,ПолеОтчета.Представление);
			Если (НЕ Вложенный) И ЗначениеЗаполнено(Измерение.Сортировка) И НЕ Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.БезСортировки Тогда
				Построитель.Порядок.Добавить(Путь,Измерение,,?(Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.ВОЗР,НаправлениеСортировки.Возр,НаправлениеСортировки.Убыв));
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение Из мМассивПоказателей Цикл
			Путь="";
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Путь = СтрокаПоле.ИмяПоля;
				//Путь = "&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки);
				Запрос.УстановитьПараметр("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
				Построитель.Параметры.Вставить("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
			Иначе
				Путь = СтрокаПоле.ИмяПоля;
			КонецЕсли;
			ПолеОтчета = Построитель.ВыбранныеПоля.Добавить(Путь,СтрокаПоле.ИмяПоля);
			ПолеОтчета.Представление = ?(Измерение.СпособОтображения=Перечисления.фин_СпособыОтображенияПолейПользовательскихОтчетов.ПоПользовательскомуПредставлению,Измерение.Наименование,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Измерение.Измерение));
			СтруктураПредставленийПолей.Вставить(СтрокаПоле.ИмяПоля,ПолеОтчета.Представление);
			Если (НЕ Вложенный) И ЗначениеЗаполнено(Измерение.Сортировка) И НЕ Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.БезСортировки Тогда
				Построитель.Порядок.Добавить(Путь,Измерение,,?(Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.ВОЗР,НаправлениеСортировки.Возр,НаправлениеСортировки.Убыв));
			КонецЕсли;
		КонецЦикла;
		пТекстЗапроса = Построитель.ПолучитьЗапрос().Текст;
		Если НомерВТ <> Неопределено Тогда
			Если Найти(пТекстЗапроса,"ПОМЕСТИТЬ")=0 Тогда
				пТекстЗапроса = СтрЗаменить(пТекстЗапроса," ИЗ "," ПОМЕСТИТЬ ВТ_"+Строка(НомерВТ)+"
				| ИЗ ");
				пТекстЗапроса = СтрЗаменить(пТекстЗапроса,Символы.ПС+"ИЗ"+Символы.ПС," ПОМЕСТИТЬ ВТ_"+Строка(НомерВТ)+"
				| ИЗ ");
			Иначе
				ПозицияСловаВыбрать = Найти(пТекстЗапроса,"ВЫБРАТЬ");
				ТекстТестовый = пТекстЗапроса;
				Пока ПозицияСловаВыбрать<>0 Цикл
					ПозицияВставки = ПозицияСловаВыбрать;
					ТекстТестовый = Лев(ТекстТестовый,ПозицияСловаВыбрать-1)+"ХХХХХХХ"+Сред(ТекстТестовый,ПозицияСловаВыбрать+СтрДлина("ВЫБРАТЬ"));
					ПозицияСловаВыбрать = Найти(ТекстТестовый,"ВЫБРАТЬ");
				КонецЦикла;
				НачалоТекста = Лев(пТекстЗапроса,ПозицияВставки+СтрДлина("ВЫБРАТЬ"));
				КонецТекста = Сред(пТекстЗапроса,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
				КонецТекста = СтрЗаменить(КонецТекста," ИЗ "," ПОМЕСТИТЬ ВТ_"+Строка(НомерВТ)+"
				| ИЗ ");
				КонецТекста = СтрЗаменить(КонецТекста,Символы.ПС+"ИЗ"+Символы.ПС," ПОМЕСТИТЬ ВТ_"+Строка(НомерВТ)+"
				| ИЗ ");
			    пТекстЗапроса = НачалоТекста + КонецТекста;
			КонецЕсли;
		КонецЕсли;
		Возврат пТекстЗапроса;
	Иначе
		// серия запросов
		мНомерВТ = НомерВТ;
		Если НомерВТ = Неопределено Тогда
			НомерВТ = 0;
		КонецЕсли;
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		ТекстФормированияВременныхТаблиц = "";
		СоответствиеШаблоновИВременныхТаблиц = Новый Соответствие;
		Для Каждого СоставнойЭлемент Из ШаблонОтчета.ОбъединяемыеШаблоны Цикл
			МассивИзмерений 	= Новый Массив;
			НомерВТ = НомерВТ + 1;
			МассивПоказателей 	= Новый Массив;
			СтрокиТекущихПолей = ШаблонОтчета.СоответствиеПолейИШаблонов.НайтиСтроки(Новый Структура("Шаблон",СоставнойЭлемент.Шаблон));
			Для Каждого СтрокаПоля Из СтрокиТекущихПолей Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаПоля.ПоляШаблона) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаПоля.ПоляШаблона.РольПоля=Перечисления.фин_РолиПолейПользовательскихОтчетов.Измерение Тогда
					МассивИзмерений.Добавить(СтрокаПоля.ПоляШаблона);
				Иначе
					МассивПоказателей.Добавить(СтрокаПоля.ПоляШаблона);
				КонецЕсли;
			КонецЦикла;
			СоответствиеШаблоновИВременныхТаблиц.Вставить(СоставнойЭлемент.Шаблон,НомерВТ);
			ТекстДляПостроителя = "";
			Запрос.Текст = ПолучитьТекстЗапроса(СоставнойЭлемент.Шаблон,ЗначенияПараметровОтчета,Запрос,СтруктураПредставленийПолей,МассивИзмерений,МассивПоказателей,,НомерВТ,Истина,ТекстДляПостроителя);
			ТекстФормированияВременныхТаблиц = ТекстФормированияВременныхТаблиц + ?(СоставнойЭлемент.Шаблон.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов,ТекстДляПостроителя,Запрос.Текст)  +"
			|;
			|
			|";
			Запрос.Выполнить();
		КонецЦикла;
		Запрос.Текст = "";
		
		ТекстКомпоновочногоЗапроса = "";
		ТекстКомпоновочногоЗапросаПолный = "";
		Для Инд=1 По ШаблонОтчета.ОбъединяемыеШаблоны.Количество() Цикл
			ОбъединяемыйШаблон = ШаблонОтчета.ОбъединяемыеШаблоны[Инд-1].Шаблон;
			ТекстКомпоновочногоЗапроса = ТекстКомпоновочногоЗапроса + "ВЫБРАТЬ
			|	";
			Для Каждого ПолеТекущегоОтчета Из ШаблонОтчета.ПоляОтчета Цикл
				СтрокиТекущихПолей = ШаблонОтчета.СоответствиеПолейИШаблонов.НайтиСтроки(Новый Структура("Шаблон,ПоляТекущегоШаблона",ОбъединяемыйШаблон,ПолеТекущегоОтчета.Поле));
				Выражение = "NULL";
				Если СтрокиТекущихПолей.Количество()<>0 И ЗначениеЗаполнено(СтрокиТекущихПолей[0].ПоляШаблона) Тогда
					Выражение = "ВТ_"+Строка(СоответствиеШаблоновИВременныхТаблиц.Получить(ОбъединяемыйШаблон))+"."+СокрЛП(ОбъединяемыйШаблон.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокиТекущихПолей[0].ПоляШаблона))[0].ИмяПоля);
				ИначеЕсли ПолеТекущегоОтчета.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение Тогда
					Продолжить;
				КонецЕсли;
				ТекстКомпоновочногоЗапроса=ТекстКомпоновочногоЗапроса+?(ШаблонОтчета.ПоляОтчета.Индекс(ПолеТекущегоОтчета)=0,"",",
				|	")+Выражение+?(Инд=1," КАК "+ПолеТекущегоОтчета.ИмяПоля,"");
			КонецЦикла;
			ТекстКомпоновочногоЗапроса = ТекстКомпоновочногоЗапроса+?(Инд=1,"
			| ПОМЕСТИТЬ ВТ_ПромежуточнаяТаблица"+Строка(?(мНомерВТ=Неопределено,0,мНомерВТ)),"")+"
			|	ИЗ ВТ_"+Строка(СоответствиеШаблоновИВременныхТаблиц.Получить(ОбъединяемыйШаблон))+" КАК ВТ_"+Строка(СоответствиеШаблоновИВременныхТаблиц.Получить(ОбъединяемыйШаблон))+?(Инд=ШаблонОтчета.ОбъединяемыеШаблоны.Количество(),"","
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	");
		КонецЦикла;
		Запрос.Текст = ТекстКомпоновочногоЗапроса;
		Запрос.Выполнить();
		ТекстФормированияВременныхТаблиц = ТекстФормированияВременныхТаблиц+ТекстКомпоновочногоЗапроса+"
		|;
		|";
		ТекстКомпоновочногоЗапросаПолный = "ВЫБРАТЬ
		|	";
		Для Каждого ПолеТекущегоОтчета Из ШаблонОтчета.ПоляОтчета Цикл
			Если ПолеТекущегоОтчета.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Продолжить;
			ИначеЕсли ПолеТекущегоОтчета.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.Выражение Тогда
				ТекстКомпоновочногоЗапросаПолный=ТекстКомпоновочногоЗапросаПолный+?(ШаблонОтчета.ПоляОтчета.Индекс(ПолеТекущегоОтчета)=0,"",",
				|	")+ПолеТекущегоОтчета.Выражение+" КАК "+ПолеТекущегоОтчета.ИмяПоля;
			Иначе
				ТекстКомпоновочногоЗапросаПолный=ТекстКомпоновочногоЗапросаПолный+?(ШаблонОтчета.ПоляОтчета.Индекс(ПолеТекущегоОтчета)=0,"",",
				|	")+"ВложенныйЗапрос."+ПолеТекущегоОтчета.ИмяПоля+" КАК "+ПолеТекущегоОтчета.ИмяПоля;
			КонецЕсли;
		КонецЦикла;
		ТекстКомпоновочногоЗапросаПолный = ТекстКомпоновочногоЗапросаПолный+"
		|	ИЗ ВТ_ПромежуточнаяТаблица"+Строка(?(мНомерВТ=Неопределено,0,мНомерВТ))+" КАК ВложенныйЗапрос";
		
		// составление компонующего запроса
		Построитель = Новый ПостроительОтчета(ТекстФормированияВременныхТаблиц + ТекстКомпоновочногоЗапросаПолный);
		Для Каждого Параметр Из ШаблонОтчета.ПараметрыШаблона Цикл
			 Если Параметр.ЗаполнятьВФормеОтчета Тогда
				 СтрокиПараметра = ЗначенияПараметровОтчета.НайтиСтроки(Новый Структура("Параметр",Параметр.Параметр));
				 Если СтрокиПараметра.Количество()>0 Тогда
					ЗначениеПараметра = СтрокиПараметра[0].Значение; 
				 	Запрос.УстановитьПараметр(Параметр.Параметр,ЗначениеПараметра);
				 КонецЕсли;
			 Иначе
				 ЗначениеПараметра =  Параметр.Значение;
				 Если Параметр.СписокЗначений Тогда
					 ЗначениеПараметра = Новый СписокЗначений;
					 Для Каждого СтрокаСписочныхЗначений Из ШаблонОтчета.СписочныеЗначенияПараметров.НайтиСтроки(Новый Структура("Параметр",Параметр.Параметр)) Цикл
						 ЗначениеПараметра.Добавить(СтрокаСписочныхЗначений.Значение);
					 КонецЦикла;
				 КонецЕсли;
				 Запрос.УстановитьПараметр(Параметр.Параметр,ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		ПозицияСловаВыбрать = Найти(Построитель.Текст,"ВЫБРАТЬ");
		ТекстТестовый = Построитель.Текст;
		Пока ПозицияСловаВыбрать<>0 Цикл
			ПозицияВставки = ПозицияСловаВыбрать;
			ТекстТестовый = Лев(ТекстТестовый,ПозицияСловаВыбрать-1)+"ХХХХХХХ"+Сред(ТекстТестовый,ПозицияСловаВыбрать+СтрДлина("ВЫБРАТЬ"));
			ПозицияСловаВыбрать = Найти(ТекстТестовый,"ВЫБРАТЬ");
		КонецЦикла;
		Для Каждого Измерение Из мМассивИзмерений Цикл
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+"&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки)+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение Из мМассивПоказателей Цикл
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Построитель.Текст = Лев(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ"))+"
				|	"+"&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки)+" КАК "+СтрокаПоле.ИмяПоля+","+Сред(Построитель.Текст,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			КонецЕсли;
		КонецЦикла;
		Построитель.ЗаполнитьНастройки();
		Построитель.ВыбранныеПоля.Очистить();
		Для Каждого Измерение Из мМассивИзмерений Цикл
			Путь="";
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Путь = СтрокаПоле.ИмяПоля;
				Запрос.УстановитьПараметр("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
				Построитель.Параметры.Вставить("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
			Иначе
				Путь = СтрокаПоле.ИмяПоля;
			КонецЕсли;
			ПолеОтчета = Построитель.ВыбранныеПоля.Добавить(Путь,СтрокаПоле.ИмяПоля);
			ПолеОтчета.Представление = ?(Измерение.СпособОтображения=Перечисления.фин_СпособыОтображенияПолейПользовательскихОтчетов.ПоПользовательскомуПредставлению,Измерение.Наименование,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Измерение.Измерение));
			СтруктураПредставленийПолей.Вставить(СтрокаПоле.ИмяПоля,ПолеОтчета.Представление);
			Если (НЕ Вложенный) И ЗначениеЗаполнено(Измерение.Сортировка) И НЕ Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.БезСортировки Тогда
				Построитель.Порядок.Добавить(Путь,Измерение,,?(Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.ВОЗР,НаправлениеСортировки.Возр,НаправлениеСортировки.Убыв));
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение Из мМассивПоказателей Цикл
			Путь="";
			СтрокаПоле = ШаблонОтчета.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",Измерение))[0];
			Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение Тогда
				Путь = СтрокаПоле.ИмяПоля;
				//Путь = "&Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки);
				Запрос.УстановитьПараметр("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
				Построитель.Параметры.Вставить("Параметр"+ШаблонОтчета.Код+Строка(СтрокаПоле.НомерСтроки),СтрокаПоле.Значение);
			Иначе
				Путь = СтрокаПоле.ИмяПоля;
			КонецЕсли;
			ПолеОтчета = Построитель.ВыбранныеПоля.Добавить(Путь,СтрокаПоле.ИмяПоля);
			ПолеОтчета.Представление = ?(Измерение.СпособОтображения=Перечисления.фин_СпособыОтображенияПолейПользовательскихОтчетов.ПоПользовательскомуПредставлению,Измерение.Наименование,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Измерение.Измерение));
			СтруктураПредставленийПолей.Вставить(СтрокаПоле.ИмяПоля,ПолеОтчета.Представление);
			Если (НЕ Вложенный) И ЗначениеЗаполнено(Измерение.Сортировка) И НЕ Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.БезСортировки Тогда
				Построитель.Порядок.Добавить(Путь,Измерение,,?(Измерение.Сортировка=Перечисления.фин_ВидыСортировкиПользовательскихОтчетов.ВОЗР,НаправлениеСортировки.Возр,НаправлениеСортировки.Убыв));
			КонецЕсли;
		КонецЦикла;
		пТекстЗапроса = Построитель.ПолучитьЗапрос().Текст;
		Если мНомерВТ <> Неопределено Тогда
			ПозицияСловаВыбрать = Найти(пТекстЗапроса,"ВЫБРАТЬ");
			ТекстТестовый = пТекстЗапроса;
			Пока ПозицияСловаВыбрать<>0 Цикл
				ПозицияВставки = ПозицияСловаВыбрать;
				ТекстТестовый = Лев(ТекстТестовый,ПозицияСловаВыбрать-1)+"ХХХХХХХ"+Сред(ТекстТестовый,ПозицияСловаВыбрать+СтрДлина("ВЫБРАТЬ"));
				ПозицияСловаВыбрать = Найти(ТекстТестовый,"ВЫБРАТЬ");
			КонецЦикла;
			НачалоТекста = Лев(пТекстЗапроса,ПозицияВставки+СтрДлина("ВЫБРАТЬ"));
			КонецТекста = Сред(пТекстЗапроса,ПозицияВставки+СтрДлина("ВЫБРАТЬ")+1);
			КонецТекста = СтрЗаменить(КонецТекста," ИЗ "," ПОМЕСТИТЬ ВТ_"+Строка(мНомерВТ)+"
			| ИЗ ");
			КонецТекста = СтрЗаменить(КонецТекста,Символы.ПС+"ИЗ"+Символы.ПС," ПОМЕСТИТЬ ВТ_"+Строка(мНомерВТ)+"
			| ИЗ ");
			пТекстЗапроса = НачалоТекста + КонецТекста;
		КонецЕсли;
		ТекстДляПостроителя = пТекстЗапроса;
		//Если ШаблонОтчета = ВидОтчета Тогда
			ПозицияУдаления = Найти(пТекстЗапроса,";");
			Пока ПозицияУдаления <> 0 Цикл
				пТекстЗапроса = Сред(пТекстЗапроса,ПозицияУдаления+1);
				ПозицияУдаления = Найти(пТекстЗапроса,";");
			КонецЦикла;
		//КонецЕсли;
		Возврат пТекстЗапроса;
	КонецЕсли;
КонецФункции
