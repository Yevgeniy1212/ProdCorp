////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Составляет список возможных вариантов отображения
//
// Параметры: 
//  Отчет - объект отчета.
//
// Возвращаемое значение:
//  спиок значений.
//
Функция ПолучитьСписокВариантовОтображенияОтчета() Экспорт

	СписокВариантовОтображения = Новый СписокЗначений;
	СписокВариантовОтображения.Добавить("СводнаяТаблица","Сводная таблица");
	СписокВариантовОтображения.Добавить("Диаграмма","Диаграмма");
	СписокВариантовОтображения.Добавить("Таблица","Таблица");
	Возврат СписокВариантовОтображения

КонецФункции // ПолучитьСписокВариантовОтображенияОтчета

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию для заданного вида отчета
//
// Параметры: 
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ОбщийОтчет.ИмяРегистра = "-";
	ОбщийОтчет.мНазваниеОтчета = "Штатное расписание организации";
	ОтчетДиаграмма.ИмяРегистра = "-";
	ОтчетДиаграмма.мНазваниеОтчета = "Кадровый план";
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец КАК Организация,
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизаций.Должность КАК Должность,
	|	ШтатноеРасписаниеОрганизаций.ТарифныйРазряд КАК ТарифныйРазряд,
	|	ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	|	ШтатноеРасписаниеОрганизаций.УсловияТруда КАК УсловияТруда,
	|	ШтатноеРасписаниеОрганизаций.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизаций.КоличествоСтавок КАК КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизаций.МинимальнаяТарифнаяСтавка КАК МинимальнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизаций.МаксимальнаяТарифнаяСтавка КАК МаксимальнаяТарифнаяСтавка,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL  ТОГДА ШтатноеРасписаниеОрганизаций.КоличествоСтавок ИНАЧЕ ШтатноеРасписаниеОрганизаций.КоличествоСтавок - ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК Вакантно,
	|	ВЫРАЗИТЬ(СведенияОШтатныхЕдиницахОрганизации.Информация КАК СТРОКА(1000)) КАК Информация,
	|	ВЫРАЗИТЬ(СведенияОШтатныхЕдиницахОрганизации.ДолжностныеОбязанности КАК СТРОКА(1000)) КАК ДолжностныеОбязанности,
	|	ВЫРАЗИТЬ(СведенияОШтатныхЕдиницахОрганизации.ДолженЗнать КАК СТРОКА(1000)) КАК ДолженЗнать,
	|	ВЫРАЗИТЬ(СведенияОШтатныхЕдиницахОрганизации.ТребованияККвалификации КАК СТРОКА(1000)) КАК ТребованияККвалификации
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК ШтатноеРасписаниеОрганизаций
	|		{
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций.Остатки(&ДатаПослеАктуальности) КАК ЗанятыеШтатныеЕдиницыОрганизаций
	|		ПО ШтатноеРасписаниеОрганизаций.Должность = ЗанятыеШтатныеЕдиницыОрганизаций.Должность 
	|			И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации = ЗанятыеШтатныеЕдиницыОрганизаций.ПодразделениеОрганизации
	|			И ШтатноеРасписаниеОрганизаций.ТарифныйРазряд = ЗанятыеШтатныеЕдиницыОрганизаций.ТарифныйРазряд
	|		}
	|		{
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОШтатныхЕдиницахОрганизаций КАК СведенияОШтатныхЕдиницахОрганизации
	|		ПО ШтатноеРасписаниеОрганизаций.Должность = СведенияОШтатныхЕдиницахОрганизации.Должность 
	|			И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации = СведенияОШтатныхЕдиницахОрганизации.ПодразделениеОрганизации
	|			И ШтатноеРасписаниеОрганизаций.ТарифныйРазряд = СведенияОШтатныхЕдиницахОрганизации.ТарифныйРазряд
	|		}
	|//СОЕДИНЕНИЯ
	|
	|ГДЕ ШтатноеРасписаниеОрганизаций.КоличествоСтавок <> 0 или ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ <> 0
	|
	|ИТОГИ СУММА(КоличествоСтавок), СУММА(ЗанятоСтавок), СУММА(Вакантно) ПО
	|	ОБЩИЕ
	|
	|{ВЫБРАТЬ
	|	Организация.* КАК Организация,
	|	ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	Должность.* КАК Должность,
	|	ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	ГрафикРаботы.* КАК ГрафикРаботы,
	|	УсловияТруда.* КАК УсловияТруда,
	|	ВидТарифнойСтавки.* КАК ВидТарифнойСтавки,
	|	ВалютаТарифнойСтавки.* КАК ВалютаТарифнойСтавки,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL  ТОГДА ШтатноеРасписаниеОрганизаций.КоличествоСтавок ИНАЧЕ ШтатноеРасписаниеОрганизаций.КоличествоСтавок - ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК Вакантно,
	|	МинимальнаяТарифнаяСтавка,
	|	МаксимальнаяТарифнаяСтавка,
	|   Информация,
	|   ВЫРАЗИТЬ(ДолжностныеОбязанности КАК СТРОКА(1000)) КАК ДолжностныеОбязанности,
	|   ДолженЗнать,
	|   ТребованияККвалификации
	|	//СВОЙСТВА
	|}
	|
	|{ГДЕ
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец.* КАК Организация,
	|	ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.* КАК ПодразделениеОрганизации,
	|	ШтатноеРасписаниеОрганизаций.Должность.* КАК Должность,
	|	ШтатноеРасписаниеОрганизаций.ТарифныйРазряд.* КАК ТарифныйРазряд,
	|	ШтатноеРасписаниеОрганизаций.ГрафикРаботы.* КАК ГрафикРаботы,
	|	ШтатноеРасписаниеОрганизаций.УсловияТруда.* КАК УсловияТруда,
	|	ШтатноеРасписаниеОрганизаций.ВидТарифнойСтавки.* КАК ВидТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизаций.ВалютаТарифнойСтавки.* КАК ВалютаТарифнойСтавки,
	|	МинимальнаяТарифнаяСтавка,
	|	МаксимальнаяТарифнаяСтавка,
	|	КоличествоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК ЗанятоСтавок,
	|	ВЫБОР КОГДА (ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток) ЕСТЬ NULL  ТОГДА ШтатноеРасписаниеОрганизаций.КоличествоСтавок ИНАЧЕ ШтатноеРасписаниеОрганизаций.КоличествоСтавок - ЗанятыеШтатныеЕдиницыОрганизаций.КоличествоСтавокОстаток КОНЕЦ КАК Вакантно,
	|   Информация,
	|   ВЫРАЗИТЬ(ДолжностныеОбязанности КАК СТРОКА(1000)) КАК ДолжностныеОбязанности,
	|   ДолженЗнать,
	|   ТребованияККвалификации
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|
	|{УПОРЯДОЧИТЬ ПО
	|	Организация.*,
	|	ПодразделениеОрганизации.*,
	|	Должность.*,
	|	ТарифныйРазряд.*,
	|	ГрафикРаботы.*,
	|	УсловияТруда.*,
	|	ВидТарифнойСтавки.*,
	|	ВалютаТарифнойСтавки.*
	|	//СВОЙСТВА
	|}
	|
	|{ИТОГИ ПО 
	|	Организация.*,
	|	ПодразделениеОрганизации.*,
	|	Должность.*,
	|	ТарифныйРазряд.*,
	|	ГрафикРаботы.*,
	|	УсловияТруда.*,
	|	ВидТарифнойСтавки.*,
	|	ВалютаТарифнойСтавки.*
	|	//СВОЙСТВА
	|}
	|";
	
	СтруктураПредставлениеПолей = Новый Структура();
	СтруктураПредставлениеПолей.Вставить("ПодразделениеОрганизации", "Подразделение");
	СтруктураПредставлениеПолей.Вставить("ТарифныйРазряд", "Тарифный разряд");
	СтруктураПредставлениеПолей.Вставить("ВидТарифнойСтавки", "Вид тарифной ставки");
	СтруктураПредставлениеПолей.Вставить("ГрафикРаботы", "График работы");
	СтруктураПредставлениеПолей.Вставить("УсловияТруда", "Условия труда");
	СтруктураПредставлениеПолей.Вставить("ВалютаТарифнойСтавки", "Валюта тарифной ставки");
	СтруктураПредставлениеПолей.Вставить("МинимальнаяТарифнаяСтавка", "Минимальная тарифная ставка");
	СтруктураПредставлениеПолей.Вставить("МаксимальнаяТарифнаяСтавка", "Максимальная тарифная ставка");
	СтруктураПредставлениеПолей.Вставить("ЗанятоСтавок", "Занято ставок");
	СтруктураПредставлениеПолей.Вставить("КоличествоСтавок", "Количество ставок (всего)");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Свойства и категории, назначаемые пользователем:
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец";
		НоваяСтрока.Представление = "Организация";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации";
		НоваяСтрока.Представление = "Подразделение организации";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ШтатноеРасписаниеОрганизаций.Должность";
		НоваяСтрока.Представление = "Должность";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
		
		// Добавим строки запроса, необходимые для использования свойств и категорий
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, 
		ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
		,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);		
		
	КонецЕсли;
	
		ПостроительОтчета.Текст = ТекстЗапроса;
		
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда			
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	// представление полей
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

	// группировки по умолчанию
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ПодразделениеОрганизации");
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Должность");
	
	// список показателей и форматы их предстовления
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоСтавок", "Количество ставок (всего)", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("ЗанятоСтавок", "Занято ставок", Истина, "ЧЦ=15; ЧДЦ=2");
	ОбщийОтчет.ЗаполнитьПоказатели("Вакантно", "Вакантно", Ложь, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("КоличествоСтавок", "Количество ставок (всего)", Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("ЗанятоСтавок", "Занято ставок", Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетДиаграмма.ЗаполнитьПоказатели("Вакантно", "Вакантно", Ложь, "ЧЦ=15; ЧДЦ=2");
	
		
	// отборы по умолчанию
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Организация");
	МассивОтбора.Добавить("ПодразделениеОрганизации");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	// очистка автозаполненных полей построителя
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	// копирование настроек построителя
	ОтчетДиаграмма.ПостроительОтчета.Текст = ПостроительОтчета.Текст;
	ОтчетДиаграмма.ПостроительОтчета.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки());
	
	// параметры отчета
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.мРежимВводаПериода = 1; // Дата
	
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("КоличествоСтавок", Новый Структура());
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ЗанятоСтавок", Новый Структура());
	ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("Вакантно", Новый Структура());
	
	ОтчетДиаграмма.мВыбиратьИмяРегистра = Ложь;
	ОтчетДиаграмма.мРежимВводаПериода = 1;
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("КоличествоСтавок", Новый Структура());
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("ЗанятоСтавок", Новый Структура());
	ОтчетДиаграмма.мСтруктураСвязиПоказателейИИзмерений.Вставить("Вакантно", Новый Структура());
	
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт

	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОбщийОтчет.ДатаКон+ 1);
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры

// Выполняет запрос и формирует диаграмму-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьДиаграмму(Диаграмма) Экспорт

	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОтчетДиаграмма.ДатаКон);
	ОтчетДиаграмма.ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОтчетДиаграмма.ДатаКон+ 1);
	ОтчетДиаграмма.СформироватьОтчет(Диаграмма);

КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
//Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Ложь) Экспорт
Процедура СформироватьСводнуюТаблицу(ДокументРезультат) Экспорт

	ПостроительОтчета = ПолучитьПостроительОтчета();
	
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ОбщийОтчет.ДатаКон);
	ПостроительОтчета.Параметры.Вставить("ДатаПослеАктуальности", ОбщийОтчет.ДатаКон+ 1);

	ПостроительОтчета.Параметры.Вставить("ДатаНач", ОбщийОтчет.ДатаНач);
	Если ОбщийОтчет.ДатаКон <> '00010101000000' Тогда
		Если ОбщийОтчет.мРежимВводаПериода = 1 Тогда
			ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоДня(ОбщийОтчет.ДатаКон + 60*60*24));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ОбщийОтчет.ДатаКон ));
		КонецЕсли;
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '00010101000000');
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	ДокументРезультат.ИсточникДанных = ПостроительОтчета.Результат;
	ОбновлятьОформлениеСводнойТаблицы = ДокументРезультат.Данные.Количество() = 0 и ДокументРезультат.Строки.Количество() = 0;
	Если ОбновлятьОформлениеСводнойТаблицы Тогда
		Для ИндексПоля = 0 По ДокументРезультат.Поля.Количество() - 1 Цикл
			ПолеТаблицы = ДокументРезультат.Поля[ИндексПоля];
			Если ПолеТаблицы.Ресурс Тогда
				ДокументРезультат.Данные.Добавить(ПолеТаблицы)
			Иначе
				ДокументРезультат.Строки.Добавить(ПолеТаблицы)
			КонецЕсли;
		КонецЦикла;
		ДокументРезультат.Колонки.Добавить(ДокументРезультат.Данные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ВариантОтображения = "Таблица";

#КонецЕсли