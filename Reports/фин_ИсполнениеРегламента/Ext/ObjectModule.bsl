Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;


// процедура формирует отчет 
// 
//
//
Процедура Скомпоновать(ТабличныйДокумент,Отбор)  Экспорт
	
	ТабличныйДокумент.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент,
		|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.РасширенныйРежим,
		|	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент.Масштаб КАК Масштаб
		|ИЗ
		|	РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СрезПоследних(&Дата, ) КАК фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", НачалоПериодаПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Регламент = ВыборкаДетальныеЗаписи.Регламент;
		Масштаб = ВыборкаДетальныеЗаписи.Масштаб;
	Иначе
		Возврат;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	ПродолжительностьЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий);
	ТабличныйДокумент.Очистить();
	Если Масштаб = 0 Тогда
		Масштаб = 10;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регламент",		Регламент);
	Запрос.УстановитьПараметр("Дата",			НачалоПериодаПланирования);
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("ЦФО",			УправленческоеПодразделение);
	Запрос.УстановитьПараметр("ДатаНачала",		?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериодаПланирования,Сценарий),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериодаПланирования,Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),-ПродолжительностьЦикла+1)));
	Запрос.УстановитьПараметр("ДатаОкончания",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериодаПланирования,Сценарий),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериодаПланирования,Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	Запрос.Текст = "ВЫБРАТЬ 
				   |	СформированныеБюджеты.Бюджет КАК Бюджет,
				   |	СформированныеБюджеты.Регистратор КАК Регистратор,
				   |	СформированныеБюджеты.Регистратор.Автор КАК Автор
				   |ПОМЕСТИТЬ ВТ_Бюджеты
	               |ИЗ
	               |	РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
	               |ГДЕ
	               |	СформированныеБюджеты.Сценарий = &Сценарий"+?(УправленческоеПодразделение.Пустая(),"","
	               |	И СформированныеБюджеты.УправленческоеПодразделение = &ЦФО")+"
	               |	И СформированныеБюджеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Бюджет)
				   //|	И СформированныеБюджеты.ПериодПланирования >= &ДатаНачала
				   //|	И СформированныеБюджеты.ПериодПланирования < &ДатаОкончания) КАК ВложенныйЗапрос
	               |	И СформированныеБюджеты.ПериодПланирования = &Дата
				   |
				   |;
				   |ВЫБРАТЬ
	               |	РегламентФормированияБюджетовСрезПоследних.Бюджет,
	               |	РегламентФормированияБюджетовСрезПоследних.Ранг,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Бюджет ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Сформирован
	               |ИЗ
	               |	РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(,Регламент = &Регламент) КАК РегламентФормированияБюджетовСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ_Бюджеты.Бюджет КАК Бюджет ИЗ ВТ_Бюджеты) КАК ВложенныйЗапрос
	               |		ПО РегламентФормированияБюджетовСрезПоследних.Бюджет = ВложенныйЗапрос.Бюджет
				   |;
				   |ВЫБРАТЬ 
				   |	ВТ.Бюджет,
				   |	ВТ.Автор,
				   |	ВТ.Регистратор
				   |ИЗ ВТ_Бюджеты КАК ВТ";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИсполнениеРегламента=РезультатЗапроса[1].Выгрузить();
	Регистраторы = РезультатЗапроса[2].Выгрузить();
	ЦветЛинии = Новый Цвет(100,149,237); //василек
	ЦветТекста 	= Новый Цвет(165,42,42); // коричневый
	ЦветБлока	= Новый Цвет(230,230,250); // лаванда
	Документы.фин_БюджетныйРегламент.ОбновитьПолеРегламента(Регламент,ТабличныйДокумент,ЦветБлока,ЦветТекста,ЦветЛинии,Масштаб);
	Если ТолькоРегламент Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаИсполнение Из ИсполнениеРегламента Цикл
		Блок = ТабличныйДокумент.НайтиЗначение(СтрокаИсполнение.Бюджет);
		Если Блок=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаИсполнение.Сформирован Тогда
			Блок.ЦветФона = WebЦвета.НейтральноЗеленый;
			Список = Новый СписокЗначений;
			Список.Добавить(СтрокаИсполнение.Бюджет,"Структура бюджета");
			СтрокиРегистратор = Регистраторы.НайтиСтроки(Новый Структура("Бюджет",СтрокаИсполнение.Бюджет));
			Для Каждого СтрокаРегистратор Из СтрокиРегистратор Цикл
				Список.Добавить(СтрокаРегистратор.Регистратор,Строка(СтрокаРегистратор.Регистратор)+"/"+СтрокаРегистратор.Автор);
			КонецЦикла;
			Блок.Расшифровка = Список;
		Иначе
			Блок.ЦветФона = WebЦвета.ТусклоРозовый;
			Блок.Расшифровка = СтрокаИсполнение.Бюджет;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //НастроитьОтчет

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	ДоступныеПоказатели = Новый СписокЗначений;
	ДоступныеГруппировки = Новый СписокЗначений;
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("НачалоПериодаПланирования",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериодаПланирования",КонецМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("Масштаб",10);


ДополнительныеПараметры = Новый Массив;
ДополнительныеПараметры.Добавить("ТолькоРегламент");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("Масштаб");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");