
&НаКлиенте
Процедура Сформировать(Команда)
	Если ПроверитьЗаполнение() Тогда
		СкомпоноватьРезультат();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НадписьАнализируемыеДанные = "Анализируемые данные";
	НадписьАнализируемыйПериод = "Анализируемый период";
	НадписьОтбор = "Отбор";
	НадписьПрогнозируемыйПериод = "Прогнозируемый период";
	ИмяОтчета = Метаданные.Имя;
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПолеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокОтбора = СписокРазрезовУчета();
	СтандартнаяОбработка = Ложь;
	мРезультат = СписокОтбора.ВыбратьЭлемент("Выберите поле отбора");
	Если мРезультат <> Неопределено Тогда
		Элементы.РазрезыУчета.ТекущиеДанные.Путь 		= фин_РаботаСДиалогамиБюджетирование.ИмяРазреза(мРезультат.Значение);
		Элементы.РазрезыУчета.ТекущиеДанные.ПолеОтбора 	= мРезультат.Значение;
		ОписаниеТипов = ОписаниеТипаДляОтбора(Элементы.РазрезыУчета.ТекущиеДанные.ПолеОтбора,Элементы.РазрезыУчета.ТекущиеДанные.ВидСравнения);
		Элементы.РазрезыУчета.ТекущиеДанные.Значение 	= ОписаниеТипов.ПривестиЗначение(Элементы.РазрезыУчета.ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеТипаДляОтбора(Путь,ВидСравнения)
	Возврат фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Путь).ТипЗначения,ВидСравнения)
КонецФункции

&НаСервере
Функция СписокРазрезовУчета()
	Список = Новый СписокЗначений;	
	Список.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация);
	Список.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение);
	Список.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект);
	Для Каждого СтрокаРазрез Из Отчет.ФинансовыйПоказатель.РазрезыУчета Цикл
		Список.Добавить(СтрокаРазрез.Измерение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(СтрокаРазрез.Измерение));
	КонецЦикла;
	Список.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта);
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура РазрезыУчетаВидСравненияПриИзменении(Элемент)
	ОписаниеТипов = ОписаниеТипаДляОтбора(Элементы.РазрезыУчета.ТекущиеДанные.ПолеОтбора,Элементы.РазрезыУчета.ТекущиеДанные.ВидСравнения);
	Элементы.РазрезыУчета.ТекущиеДанные.Значение 	= ОписаниеТипов.ПривестиЗначение(Элементы.РазрезыУчета.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.Равно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеРавно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии"));
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОписаниеТипов = ОписаниеТипаДляОтбора(Элементы.РазрезыУчета.ТекущиеДанные.ПолеОтбора,Элементы.РазрезыУчета.ТекущиеДанные.ВидСравнения);
	Элементы.РазрезыУчетаЗначение.ОграничениеТипа = ОписаниеТипов;
	//Элементы.РазрезыУчетаЗначение.ТипЗначенияСписка = фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(Элементы.РазрезыУчета.ТекущиеДанные.Путь,Элементы.РазрезыУчета.ТекущиеДанные.ВидСравнения,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ЗаполнитьПериодичность();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодичность()
	Если НЕ Отчет.Сценарий.Пустая() Тогда
		Отчет.Периодичность=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.Сценарий);	
	ИначеЕсли Отчет.Периодичность.Пустая() Тогда
		Отчет.Периодичность=Перечисления.фин_Периодичность.Месяц;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоИнтервалаПриИзменении(Элемент)
    ПриИзмененииНачалаИнтервала();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНачалаИнтервала()
	Если НЕ Отчет.НачалоИнтервала='00010101' Тогда
		Отчет.НачалоИнтервала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.НачалоИнтервала,Отчет.Периодичность);
		Если Отчет.БазисныйПериод='00010101' ИЛИ Отчет.БазисныйПериод<Отчет.НачалоИнтервала Тогда
			Отчет.БазисныйПериод = Отчет.НачалоИнтервала;
		КонецЕсли;	
		Если Отчет.КонецИнтервала='00010101' ИЛИ Отчет.КонецИнтервала<Отчет.НачалоИнтервала Тогда
			Отчет.КонецИнтервала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Отчет.НачалоИнтервала,Отчет.Периодичность);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецИнтервалаПриИзменении(Элемент)
    ПриИзмененииКонцаИнтервала();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонцаИнтервала()
	Если НЕ Отчет.КонецИнтервала='00010101' Тогда
		Отчет.КонецИнтервала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Отчет.КонецИнтервала,Отчет.Периодичность);
		Если Отчет.БазисныйПериод='00010101' ИЛИ Отчет.БазисныйПериод>Отчет.КонецИнтервала Тогда
			Отчет.БазисныйПериод = Отчет.НачалоИнтервала;
		КонецЕсли;	
		Если Отчет.НачалоИнтервала='00010101' ИЛИ Отчет.КонецИнтервала<Отчет.НачалоИнтервала Тогда
			Отчет.НачалоИнтервала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Отчет.КонецИнтервала,Отчет.Периодичность);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазисныйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПериодов();
КонецПроцедуры

&НаКлиенте
Функция СписокПериодов()
	Список = Новый СписокЗначений;
	Если Отчет.НачалоИнтервала<>'00010101' Тогда
		Если Отчет.КонецИнтервала='00010101' Тогда
			Список.Добавить(Отчет.НачалоИнтервала);
		Иначе
			Дата = Отчет.НачалоИнтервала;
			Пока Дата<Отчет.КонецИнтервала Цикл
				Список.Добавить(Дата);
				Дата = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Дата,Отчет.Периодичность,1);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Список;
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт
	
	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
				
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
			
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьСписокВСтроку()

&НаСервере
Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	НадписьПериодПланирования = "";
	ОбъектПериодичность = ?(Отчет.Сценарий.Пустая(),Отчет.Периодичность,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Отчет.Сценарий));
	КонецПериодаПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Отчет.НачалоИнтервала,ОбъектПериодичность);
	НадписьПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Отчет.НачалоИнтервала,ОбъектПериодичность);
	ТекстГоризонт 				= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Отчет.КонецИнтервала,ОбъектПериодичность);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
	
	Возврат НадписьПериодПланирования;
	
КонецФункции

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("ФинансовыйПоказатель");
	СохраняемыеРеквизитыФормы.Добавить("Сценарий");
	СохраняемыеРеквизитыФормы.Добавить("Периодичность");
	СохраняемыеРеквизитыФормы.Добавить("НачалоИнтервала");
	СохраняемыеРеквизитыФормы.Добавить("КонецИнтервала");
	СохраняемыеРеквизитыФормы.Добавить("БазисныйПериод");
	СохраняемыеРеквизитыФормы.Добавить("КоличествоПрогнозируемыхПериодов");
	СохраняемыеРеквизитыФормы.Добавить("СДиаграммой");
	СохраняемыеРеквизитыФормы.Добавить("АнализируемыйРесурс");
	СохраняемыеРеквизитыФормы.Добавить("РесурсДиаграммы");
	СохраняемыеРеквизитыФормы.Добавить("РазрезыУчета");
	
	СохраняемыеТаблицыФормы = Новый Массив;
	//СохраняемыеТаблицыФормы.Добавить("РазрезыУчета");
	
	общ_ОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = Новый Массив;
	СохраняемыеРеквизитыФормы.Добавить("ФинансовыйПоказатель");
	СохраняемыеРеквизитыФормы.Добавить("Сценарий");
	СохраняемыеРеквизитыФормы.Добавить("Периодичность");
	СохраняемыеРеквизитыФормы.Добавить("НачалоИнтервала");
	СохраняемыеРеквизитыФормы.Добавить("КонецИнтервала");
	СохраняемыеРеквизитыФормы.Добавить("БазисныйПериод");
	СохраняемыеРеквизитыФормы.Добавить("КоличествоПрогнозируемыхПериодов");
	СохраняемыеРеквизитыФормы.Добавить("СДиаграммой");
	СохраняемыеРеквизитыФормы.Добавить("АнализируемыйРесурс");
	СохраняемыеРеквизитыФормы.Добавить("РесурсДиаграммы");
	
	СохраняемыеТаблицыФормы = Новый Массив;
	СохраняемыеТаблицыФормы.Добавить("РазрезыУчета");
	
	
	ЗагруженыИндивидуальныеНастройки = Ложь;
	
	общ_ОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы,ЗагруженыИндивидуальныеНастройки);
	
	фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры
