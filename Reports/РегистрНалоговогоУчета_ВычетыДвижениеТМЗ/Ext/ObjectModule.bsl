Перем мСписокИсточниковФинансирования Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;
Перем ПромежуточныеДанные Экспорт;
Перем РежимРасшифровки Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;

#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	Результат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
	//КомпоновщикНастроек.Восстановить();
	//НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Выполним дополнительную обработку Результата отчета
	ОбработкаРезультатаОтчета(Результат);
	
	ВыводПодписиОтчета(ЭтотОбъект,Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Возврат;
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	СписокСчетовРесурсов = Новый Массив;
	СписокСчетовРесурсов.Добавить(Планысчетов.Типовой.КоммерческиеРесурсыЗерна);
	
	
	СписокСчетовВнПеремещенияРесурсов = Новый Массив;
	СписокСчетовВнПеремещенияРесурсов.Добавить(Планысчетов.Типовой.ПереоформлениеПереводМеждуРесурсами);
	СписокСчетовВнПеремещенияРесурсов.Добавить(Планысчетов.Типовой.ТоварыВПутиСоб);
	
	СписокСчетовСчетовОС = Новый Массив;
	СписокСчетовСчетовОС.Добавить(Планысчетов.Типовой.ОсновныеСредства);
	
	СписокСчетовСчетовНезавершенногоСтроительства = Новый Массив;
	СписокСчетовСчетовНезавершенногоСтроительства.Добавить(Планысчетов.Типовой.НезавершенноеСтроительство_);
	
	СписокСчетовПриобретения = Новый Массив;
	СписокСчетовПриобретения.Добавить(Планысчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьРаботников);
	СписокСчетовПриобретения.Добавить(Планысчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);
	
	СписокСчетовТМЦ = Новый Массив;
	СписокСчетовТМЦ.Добавить(Планысчетов.Типовой.ПрочиеЗапасы);
	
	СписокСчетовРасчетовПоФилиалам = Новый Массив;
	СписокСчетовРасчетовПоФилиалам.Добавить(Планысчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);
	
	СписокСчетовРасходовНеВЦеляхНУ = Новый Массив;
	СписокСчетовРасходовНеВЦеляхНУ.Добавить(Планысчетов.Типовой.ПрочиеАдминистративныеРасходыНеОтносимыеНавычет);
	СписокСчетовРасходовНеВЦеляхНУ.Добавить(Планысчетов.Типовой.ПрочиеРасходы);
	
	СписокСчетовРеализации = Новый Массив;
	СписокСчетовРеализации.Добавить(Планысчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг);
	
	мВИдыСубконто1 = Новый Массив;
	мВИдыСубконто1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", Дата(1, 1, 1));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	Иначе
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", Дата(3999, 11, 1));
	КонецЕсли;
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовРасчетовПоФилиалам", СписокСчетовРасчетовПоФилиалам);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовРеализации", СписокСчетовРеализации);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовРесурсов", СписокСчетовРесурсов);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовВнПеремещенияРесурсов", СписокСчетовВнПеремещенияРесурсов);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовТМЦ", СписокСчетовТМЦ);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовРасходовНеВЦеляхНУ", СписокСчетовРасходовНеВЦеляхНУ);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовПриобретения", СписокСчетовПриобретения);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовСчетовОС", СписокСчетовСчетовОС);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовСчетовНезавершенногоСтроительства", СписокСчетовСчетовНезавершенногоСтроительства);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "мВИдыСубконто1", мВИдыСубконто1);
	
	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыводПодписиОтчета(ОтчетОбъект,Результат)
	
	Макет = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьПодписи        = Макет.ПолучитьОбласть("Подвал");
	
	Если ОтчетОбъект <> Неопределено Тогда
		Организации                       = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		НомСтр = 0;
		Для Каждого Организация Из Организации Цикл 
			НомСтр= НомСтр + 1;
			Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация.Значение,КонецПериода);
		КонецЦикла;                                   		
		
		Если НомСтр >=14 Тогда
			Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организации[0].Значение,КонецПериода);
		КонецЕсли;
		
	КонецЕсли;
	
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	ОбластьПодписи.Параметры.ФИОРуководителя	= Руководитель;
	ОбластьПодписи.Параметры.ФИОглБухгалтера 	= Бухгалтер;
	
	Результат.Вывести(ОбластьПодписи);
	
КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	Если ОтчетОбъект <> Неопределено Тогда
		Организации                       = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	КонецЕсли;
	
	ТекстОрганизации = "";
	
	Если ЗначениеЗаполнено(Организации) Тогда
		НомСтр = 0;
		Для Каждого Организация Из Организации Цикл 
			НомСтр= НомСтр + 1;
			СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организация.Значение);
		КонецЦикла;                                   		
		
		Если НомСтр >=14 Тогда
			СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Организации[0].Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	
	МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокРегистраНалоговогоУчета");
	ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "Вычеты: Товары, сырье, материалы поступление и выбытие ";
	
	ОбластьЗаголовок.Параметры.ПолноеНаименование	= СведенияОбОрганизации.Представление;
	//ОбластьЗаголовок.Параметры.РНН 					= СведенияОбОрганизации.РНН;
	ОбластьЗаголовок.Параметры.БИН_ИИН				= СведенияОбОрганизации.БИН_ИИН;
	ОбластьЗаголовок.Параметры.Налоговыйпериод 		= СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);
	ОбластьЗаголовок.Параметры.ОписаниеНастроекОтчета 		= ТекстОтбор;
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
		
		
КонецФункции

Процедура ОбработкаРезультатаОтчета(Результат)
	
	ТиповыеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);

КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	//ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	СтруктураНастроек.Вставить("мСписокПодразделений", мСписокПодразделений);
	СтруктураНастроек.Вставить("мСписокСтруктурныхЕдиниц", мСписокСтруктурныхЕдиниц);
	СтруктураНастроек.Вставить("мДеревоСтруктурныхЕдиниц", мДеревоСтруктурныхЕдиниц);
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);

КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры


Расшифровки = Новый СписокЗначений;

НастройкаПериода = Новый НастройкаПериода;

#КонецЕсли
мСписокИсточниковФинансирования = Новый СписокЗначений;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;