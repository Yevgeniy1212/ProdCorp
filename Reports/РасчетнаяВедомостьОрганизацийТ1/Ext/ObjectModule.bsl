////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЭлементыНастройки    Экспорт; // Массив элементов структуры СКД         
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю
Перем СоответствиеНаборовДанныхИЗапросов;
Перем ЭлементНастройкиРасчетнойВедомости Экспорт; // Элемент структуры настройки схемы компоновки данных

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Сохранение настроек схемы компоновки
//
Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Запоминает настройку группировки расчетной ведомости
//
Процедура ЗапомнитьНастройкуРасчетнойВедомости() Экспорт  
	
	// Найдем элемент группировки с названием "ТаблицаОтчета"
	ЭлементНайден = Ложь;
	
	Для Каждого ЭлементСтруктурыГруппировки Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ЭлементСтруктурыГруппировки.Имя = "ТаблицаОтчета" Тогда
			
			ЭлементНастройкиРасчетнойВедомости = ЭлементСтруктурыГруппировки;
			КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			// Рекурсивно проверим остальные элементы структуры
			ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет рекурсивный поиск элемента группировки с именем "ТаблицаОтчета"
//
Процедура ПроверитьВложенныеЭлементы(ЭлементСтруктурыГруппировки , ЭлементНайден)
	
	Для Каждого ЭлементСтруктуры Из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементНайден Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭлементСтруктуры.Имя = "ТаблицаОтчета" Тогда
			
			ЭлементНастройкиРасчетнойВедомости = ЭлементСтруктуры;
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ЭлементНайден = Истина;
			Возврат;
			
		Иначе
			
			ПроверитьВложенныеЭлементы(ЭлементСтруктуры , ЭлементНайден);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтруктуруРасчетнойВедомости(Структура) 
	
	ЭлементСтруктурыРасчетнойВедомости = Структура.Добавить(ТипЗнч(ЭлементНастройкиРасчетнойВедомости));
	
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыРасчетнойВедомости, ЭлементНастройкиРасчетнойВедомости);
	
	ЭлементСтруктурыРасчетнойВедомости.Имя = "ТаблицаОтчета";	

КонецПроцедуры

// Добавление таблицы отчета в настройку схемы компоновки
//
Процедура ВосстановитьНастройкуРасчетнойВедомости() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		
		ДобавитьСтруктуруРасчетнойВедомости(КомпоновщикНастроек.Настройки.Структура);
		
	Иначе
		
		Для Каждого ЭлементСтруктурыГруппировки Из КомпоновщикНастроек.Настройки.Структура Цикл
			
			Если ТипЗнч(ЭлементСтруктурыГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
				ДобавитьСтруктуруРасчетнойВедомости(КомпоновщикНастроек.Настройки.Структура);
				Возврат;
			КонецЕсли;
			
			// В случае если группировка по организации, необходимо задать название группировки
			НайденноеПолеОрганизации = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных("Организация"));
			Если НайденноеПолеОрганизации <> Неопределено Тогда			
				Для Каждого ПолеГруппировкиКомпоновки ИЗ ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы Цикл
					Если ПолеГруппировкиКомпоновки.Поле = НайденноеПолеОрганизации.Поле Тогда // присутствует группировка по организации
						ЭлементСтруктурыГруппировки.Имя = "ЗаголовокОтчета";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЭлементСтруктурыГруппировки.Структура.Количество() <> 0 Тогда
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() <> 0 Тогда
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки); 
					НайтиСледующийУровень(ЭлементСтруктурыГруппировки);
					
				Иначе
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);					
					ДобавитьСтруктуруРасчетнойВедомости(КомпоновщикНастроек.Настройки.Структура);
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктурыГруппировки.ПоляГруппировки.Элементы.Количество() = 0 Тогда
					
					КомпоновщикНастроек.Настройки.Структура.Удалить(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетнойВедомости(КомпоновщикНастроек.Настройки.Структура);
				
				Иначе
					
					ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктурыГруппировки);
					ДобавитьСтруктуруРасчетнойВедомости(ЭлементСтруктурыГруппировки.Структура);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Добавление поля в таблицу выбранных полей из таблицы группировок
//
Процедура ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры)
	
	ЭлементСтруктуры.Выбор.Элементы.Очистить();
	
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Значение      = ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный;
	ЭлементСтруктуры.ПараметрыВывода.Элементы.Найти("TemplateType").Использование = Истина;
	
	Для Каждого ЭлементИсточник Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		
		ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЭлементИсточник.Поле)));
		Если ДоступноеПоле <> Неопределено Тогда
			ЭлементПриемник               = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементПриемник.Поле          = ДоступноеПоле.Поле;
			ЭлементПриемник.Заголовок     = ДоступноеПоле.Заголовок;
			ЭлементПриемник.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Поиск последнего уровня иерархии группировки
//
Процедура НайтиСледующийУровень(ЭлементСтруктурыГруппировки)
	
	Для Каждого ЭлементСтруктуры Из ЭлементСтруктурыГруппировки.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "ТаблицаОтчета" Тогда
			ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
			ДобавитьСтруктуруРасчетнойВедомости(ЭлементСтруктурыГруппировки.Структура);
			Возврат;
		КонецЕсли;
		
		// В случае если группировка по организации, необходимо задать название группировки
		НайденноеПолеОрганизации = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных("Организация"));
		Если НайденноеПолеОрганизации <> Неопределено Тогда			
			Для Каждого ПолеГруппировкиКомпоновки ИЗ ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировкиКомпоновки.Поле = НайденноеПолеОрганизации.Поле Тогда // присутствует группировка по организации
					ЭлементСтруктуры.Имя = "ЗаголовокОтчета";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если ЭлементСтруктуры.Структура.Количество() <> 0 Тогда
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() <> 0 Тогда
				
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				НайтиСледующийУровень(ЭлементСтруктуры);
				
			Иначе
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				
				ДобавитьСтруктуруРасчетнойВедомости(ЭлементСтруктурыГруппировки.Структура);
				
			КонецЕсли;
		Иначе
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
				
				ЭлементСтруктурыГруппировки.Структура.Удалить(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетнойВедомости(ЭлементСтруктурыГруппировки.Структура);
				
			Иначе
			
				ДобавитьГруппировкиВВыводимыеПоля(ЭлементСтруктуры);
				ДобавитьСтруктуруРасчетнойВедомости(ЭлементСтруктуры.Структура);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
              
// Заполнение параметров отчета по элементу справочника из переменной СохраненнаяНастройка.
//
Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры
              
// Инициализация отчета
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры //ИнициализацияОтчета()

// Формирование отчета в табличный документ
// 
Функция СформироватьОтчет(Результат, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ЭтоФормаОтчета = Ложь) Экспорт
	
	Если ДанныеРасшифровки = Неопределено Тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	Результат.Очистить();
		
	ТиповыеОтчеты.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект);	
	
	ПараметрыИсполненияОтчета = Неопределено;
	ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета();

	ДоработатьКомпоновщикПередВыводом();
	ТиповыеОтчеты.ВывестиТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, , Ложь, ПараметрыИсполненияОтчета);			
	
	ДоработатьТабличныйДокументПередВыводом(Результат);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетами.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	
	Возврат Результат;
	
КонецФункции

Процедура ДоработатьТабличныйДокументПередВыводом(ТабличныйДокумент)
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	
	ТабличныйДокумент.МасштабПечати = 79;
	ТабличныйДокумент.РазмерСтраницы = "A4";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ФиксацияСлева = 13;
	ТабличныйДокумент.ВывестиВертикальныйРазделительСтраниц();
	
	ОбластьПервойЯчейки = ТабличныйДокумент.НайтиТекст("Фамилия, имя, отчество");
	ОбластьСледЯчейки = ТабличныйДокумент.НайтиТекст("Фамилия, имя, отчество", ОбластьПервойЯчейки); // подтверждает наличие нескольких организаций в отчете
	
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = Неопределено;
	Если ОбластьПервойЯчейки <> Неопределено И ОбластьСледЯчейки = Неопределено Тогда
		ОбластьШапкиТаблицы  = ТабличныйДокумент.Область(ОбластьПервойЯчейки.Верх, , ОбластьПервойЯчейки.Верх+3, );
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ОбластьШапкиТаблицы;
	КонецЕсли;
	
КонецПроцедуры
               
// Настройка отчета 
//
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Функция НайтиПоследнийЭлементСтруктурыСтрок(Строки) 
	
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ЭлементСтруктуры = Строки[0];
	КонецЕсли;
	Пока ЭлементСтруктуры.Структура.Количество() <> 0 Цикл
		ЭлементСтруктуры = ЭлементСтруктуры.Структура[0];
	КонецЦикла;
	
	Возврат ЭлементСтруктуры;
	
КонецФункции

Процедура УстановитьВыводИтогов(Элемент, ВыводитьИтоги)
	
	Если ВыводитьИтоги Тогда
		УстановитьПараметрВывода(Элемент, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Конец);
	Иначе
		УстановитьПараметрВывода(Элемент, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрВывода(Элемент, ИмяПараметра, Значение)
	
	ЗначениеПараметра = Элемент.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;		
	КонецЕсли;
	
КонецПроцедуры

// Доработка компоновщика отчета перед выводом
//
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеВыводитьИтоги = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьИтоги"));
	ВыводитьИтоги = ЗначениеВыводитьИтоги.Значение;
	
	Для Каждого ЭлементСтруктурыОтчета ИЗ КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктурыОтчета) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Если ЭлементСтруктурыОтчета.Имя = "ТаблицаОтчета" Тогда
				УстановитьВыводИтогов(ЭлементСтруктурыОтчета, ВыводитьИтоги); 
				Прервать;
			Иначе
				ПоследнийЭлементСтруктуры = НайтиПоследнийЭлементСтруктурыСтрок(ЭлементСтруктурыОтчета.Структура);
				Если ПоследнийЭлементСтруктуры <> Неопределено Тогда
					Если ПоследнийЭлементСтруктуры.Имя = "ТаблицаОтчета" Тогда
						УстановитьВыводИтогов(ПоследнийЭлементСтруктуры, ВыводитьИтоги); 
						Прервать;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаРеглУчета"));
	ЗначениеПараметра.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗначениеПараметра.Использование = Истина;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачальнаяДата"));
	ЗначениеПараметра.Значение = '00010101';
	ЗначениеПараметра.Использование = Истина;
	      	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));  	
	
	Если ПараметрНачалоПериода = Неопределено ИЛИ ПараметрКонецПериода = Неопределено Тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  Тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' Тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено И КонецПериода <> Неопределено Тогда
		УправлениеОтчетами.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
	
	ПредставлениеПериода = УправлениеОтчетами.ПолноеОписаниеПериода(НачалоПериода, КонецПериода, Ложь);
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПредставлениеПериода"));
	ЗначениеПараметра.Значение = ПредставлениеПериода;
	ЗначениеПараметра.Использование = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт

	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию,
	|СписокДоступныхПредопределенныхНастроек,
	|МинимальныйПериодОтчета", 
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Истина, СписокПолейПодстановкиОтборовПоУмолчанию, , "Месяц");

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
ЭлементыНастройки = Новый Массив(7);

#КонецЕсли

