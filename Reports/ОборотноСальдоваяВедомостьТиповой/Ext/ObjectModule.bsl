Перем СохраненнаяНастройка Экспорт;
Перем РежимРасшифровки Экспорт;
Перем СохранятьНастройкуОтчета Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;
Перем мСписокПодразделений Экспорт;
Перем мДеревоСтруктурныхЕдиниц Экспорт;
Перем ВедётсяУчетПоПодразделениям Экспорт;
Перем ОтображатьОформление Экспорт;

// Начало - Ручной расчет итогов по группировкам
Перем ОрганизацияДляИтогов;
Перем ПодразделениеДляИтогов;
Перем СчетчикОрганизаций;
Перем СчетчикПодразделений;
Перем ИтогиОрганизации;
Перем ИтогиПодразделения;
Перем ТаблицаИтогов;
Перем РассчитыватьИтогиОрганизации;
Перем РассчитыватьИтогиПодразделения;
Перем УровеньОрганизации;
Перем УровеньПодразделения;
Перем УровеньСчета;
// Конец - Ручной расчет итогов по группировкам

#Если Клиент Тогда

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета", Истина);
	
КонецФункции

Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтандартныеОтчеты.ЗаполнитьДанныеОтчета(ЭтотОбъект);
	
	Если ДанныеОтчета.ДополнительныеПоля.Найти("Счет.Наименование", "Поле") = Неопределено Тогда
		НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
		НоваяСтрока.Представление = "Выводить наименование счета";
		НоваяСтрока.Поле          = "Счет.Наименование";
		НоваяСтрока.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьПолностью = Истина) Экспорт
	
	Результат.Очистить();
	
	// Начало - Ручной расчет итогов по группировкам
	// Если группировки Организация или Подразделение расположены выше группировки Счет,
	// то производится "ручной" расчет итогов по этим группировкам
	РассчитыватьИтогиОрганизации   = Ложь;
	РассчитыватьИтогиПодразделения = Ложь;
	Если НЕ ДанныеОтчета.ГруппировкаДоп.Количество() = 0 Тогда
		СтрокаСчет   = ДанныеОтчета.ГруппировкаДоп.Найти(Новый ПолеКомпоновкиДанных("Счет"), "Поле");
		УровеньСчета = ДанныеОтчета.ГруппировкаДоп.Индекс(СтрокаСчет);
		УровеньОрганизации   = 0;
		УровеньПодразделения = 0;
		Если СтрокаСчет <> Неопределено И УровеньСчета > 0 Тогда
			
			Для Индекс = 0 По УровеньСчета Цикл
				СтрокаГруппировки = ДанныеОтчета.ГруппировкаДоп.Получить(Индекс);
				Если СтрокаГруппировки.Использование Тогда
					Если СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("Организация")
						ИЛИ СтрокаГруппировки.Поле = "Организация" Тогда
						РассчитыватьИтогиОрганизации = Истина;
						УровеньОрганизации = Индекс;
					ИначеЕсли СтрокаГруппировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение")
						ИЛИ СтрокаГруппировки.Поле = "Подразделение" Тогда
						РассчитыватьИтогиПодразделения = Истина;
						УровеньПодразделения = Индекс;
				    КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если РассчитыватьИтогиОрганизации ИЛИ РассчитыватьИтогиПодразделения Тогда
				ТаблицаИтогов.Очистить();
				Если РассчитыватьИтогиОрганизации Тогда
					СчетчикОрганизаций     = 0;
					ОрганизацияДляИтогов   = "";
				КонецЕсли;
				Если РассчитыватьИтогиПодразделения Тогда
					СчетчикПодразделений   = 0;
					ПодразделениеДляИтогов = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	// Конец - Ручной расчет итогов по группировкам
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
	Если ВыводитьПолностью Тогда
		ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных);
		КомпоновщикНастроек.Восстановить();
		НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, Истина, НастройкаКомпоновкиДанных);
	КонецЕсли; 
	ВыводПодписейОтчета(ЭтотОбъект, Результат);
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ПолучитьТекстЗаголовка(), Строка(глТекущийПользователь));
	
	Если ВыводитьПолностью Тогда
		// Выполним дополнительную обработку Результата отчета
		ОбработкаРезультатаОтчета(Результат);
		
		// Сохраним настройки для Истории
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");
		СтандартныеОтчеты.СохранитьНастройкуДляИстории(ЭтотОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки) Экспорт
	
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;	
	
	МакетШапкиОтчета = СтандартныеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	КоличествоГруппировок = 0;
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл
		Если Группировка.Использование Тогда
			КоличествоСубконто = 0;
			Для Каждого Субконто Из Группировка.ПоСубконто Цикл
				Если Субконто.Пометка Тогда
					КоличествоСубконто = КоличествоСубконто + 1;
				КонецЕсли;
			КонецЦикла;
			КоличествоГруппировок = Макс(КоличествоГруппировок, КоличествоСубконто);
		КонецЕсли;
	КонецЦикла;
	КоличествоГруппировок = КоличествоГруппировок + 1;

	КоличествоСтрокШапки = Макс(КоличествоГруппировок, 2);
	ДанныеОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 2 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 6 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПоказателей > 1 Тогда
		Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
			СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
			
			КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
			Ячейка = СтрокаМакета.Ячейки[КоличествоКолонок - 7];
			ТиповыеОтчеты.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЕсли;	
	
	МакетПодвалаОтчета            = СтандартныеОтчеты.ПолучитьМакетПодвала(МакетКомпоновки);
	МакетГруппировкиОрганизация   = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация");
	МакетГруппировкиСчет          = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет");
	МакетГруппировкиПодразделение = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение");
	МакетГруппировкиВалюта        = СтандартныеОтчеты.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта");
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		Если Макет = МакетШапкиОтчета Тогда
		Иначе
			Индекс = -1;
			МассивПоказателей = Новый Массив;
			МассивПоказателей.Добавить("БУ");
			
			Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				Если ПоказателиОтчета[ЭлементМассива].Значение Тогда
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
						
			Если ПоказателиОтчета.ВалютнаяСумма.Значение И КоличествоПоказателей = 1 Тогда
			ИначеЕсли ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				Индекс = Индекс + 1;				
				Если МакетГруппировкиВалюта.Найти(Макет) <> Неопределено Тогда
					
				Иначе
					Макет.Макет.Удалить(Макет.Макет[Индекс]);
					Индекс = Индекс - 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей     = 0 + ПоказателиОтчета.БУ.Значение;
	ЗначенияПоказателей = Новый Массив(6, КоличествоПоказателей);
	
	// Начало - Ручной расчет итогов по группировкам
	Если РассчитыватьИтогиОрганизации Тогда
		ИтогиОрганизации = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ИтогиОрганизации Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если РассчитыватьИтогиПодразделения Тогда
		ИтогиПодразделения = Новый Массив(6, КоличествоПоказателей);
		Для Каждого Массив Из ИтогиПодразделения Цикл
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Массив[Индекс] = 0;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
	Для Каждого Массив Из ЗначенияПоказателей Цикл
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Массив[Индекс] = 0;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеОтчета.Вставить("МакетШапкиОтчета"     , МакетШапкиОтчета);
	ДанныеОтчета.Вставить("МакетСчет"            , МакетГруппировкиСчет);
	ДанныеОтчета.Вставить("МакетПодвал"          , МакетПодвалаОтчета);
	ДанныеОтчета.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	ДанныеОтчета.Вставить("ЗначенияПоказателей"  , ЗначенияПоказателей);
	
	// Начало - Ручной расчет итогов по группировкам
	Если МакетГруппировкиОрганизация.Количество() > 0 И РассчитыватьИтогиОрганизации Тогда
		ДанныеОтчета.Вставить("МакетОрганизация", МакетГруппировкиОрганизация[0]);
	Иначе
		Если ДанныеОтчета.Свойство("МакетОрганизация") Тогда
			ДанныеОтчета.Удалить("МакетОрганизация");
		КонецЕсли;	
	КонецЕсли;
	
	Если МакетГруппировкиПодразделение.Количество() > 0 И РассчитыватьИтогиПодразделения Тогда
		ДанныеОтчета.Вставить("МакетПодразделение", МакетГруппировкиПодразделение[0]);
	Иначе
		Если ДанныеОтчета.Свойство("МакетПодразделение") Тогда
			ДанныеОтчета.Удалить("МакетПодразделение");
		КонецЕсли;	
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
	Если МакетПодвалаОтчета.Макет.Количество() > 0 Тогда
		ЯчейкаОбразец = МакетПодвалаОтчета.Макет[0].Ячейки[0];
		ЦветНеОтрицательный = ТиповыеОтчеты.ПолучитьПараметр(ЯчейкаОбразец.Оформление.Элементы, "ЦветТекста").Значение;
		
		ВыделятьОтрицательные 	= Ложь;
		Для Каждого ЭлементУсловногоОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
			ПараметрВыделятьОтрицательные = ТиповыеОтчеты.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление.Элементы, "ВыделятьОтрицательные");
			Если ПараметрВыделятьОтрицательные <> Неопределено Тогда
				ВыделятьОтрицательные = ПараметрВыделятьОтрицательные.Использование И ЭлементУсловногоОформления.Использование;				
			КонецЕсли;
			Если ВыделятьОтрицательные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		КоличествоЯчеек = МакетПодвалаОтчета.Макет[0].Ячейки.Количество();
		Для Каждого СтрокаМакета Из МакетПодвалаОтчета.Макет Цикл
			
			Для Индекс = КоличествоЯчеек - 7 По КоличествоЯчеек - 1 Цикл
				ТиповыеОтчеты.УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ЦветТекста", ЦветНеОтрицательный);
				ТиповыеОтчеты.УстановитьПараметр(СтрокаМакета.Ячейки[Индекс].Оформление.Элементы, "ВыделятьОтрицательные", ВыделятьОтрицательные);
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли;
	
	// Форматирование заголовков колонок таблицы
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 0 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = 0 По КоличествоКолонок - 1 Цикл
			
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			СтандартныеОтчеты.ОформитьЯчейкуШапкиТаблицы(Ячейка, ?(ИндексКолонки = 0, Ложь, Истина), Истина);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ = Ложь) Экспорт
	
	Попытка
		Если ЭлементРезультата.ЗначенияПараметров.П1.Значение = null 
			И ДанныеОтчета.МакетШапкиОтчета.Имя <> ЭлементРезультата.Макет
			И ДанныеОтчета.МакетПодвал.Имя <> ЭлементРезультата.Макет Тогда
			Отказ = Истина;
		КонецЕсли;                                                          
	Исключение
	КонецПопытки;
	
	СмещениеПоСтроке = ДанныеОтчета.МакетШапкиОтчета.Макет[0].Ячейки.Количество() - 7;
	// Накапливаем суммы по корневым счетам
	Попытка
		Если ДанныеОтчета.МакетСчет.Найти(МакетКомпоновки.Макеты[ЭлементРезультата.Макет]) <> Неопределено Тогда
			ЗначениеСчет = ДанныеРасшифровки.Элементы[ЭлементРезультата.ЗначенияПараметров.П2.Значение].ПолучитьПоля()[0].Значение;
			Если НЕ ПоПодразделам И НЕ ДанныеОтчета.ГруппировкаДоп.Количество() = 0 Тогда
				ЭлементРезультата.ЗначенияПараметров.П4.Значение  = УровеньСчета * 2;
				ЭлементРезультата.ЗначенияПараметров.П24.Значение = УровеньСчета;
				Отказ = ЗначениеСчет.ЗапретитьИспользоватьВПроводках;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗначениеСчет.Родитель) И Не ЗначениеСчет.Забалансовый Тогда
				Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						Значение = ЭлементРезультата.ЗначенияПараметров[Строка(МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение;
						ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс] + Значение;
						
						// Начало - Ручной расчет итогов по группировкам
						Если РассчитыватьИтогиОрганизации Тогда
							ИтогиОрганизации[ПодИндекс - 1][Индекс] = ИтогиОрганизации[ПодИндекс - 1][Индекс] + Значение;
						КонецЕсли;
						Если РассчитыватьИтогиПодразделения Тогда
							ИтогиПодразделения[ПодИндекс - 1][Индекс] =  ИтогиПодразделения[ПодИндекс - 1][Индекс] + Значение;
						КонецЕсли;
						// Конец - Ручной расчет итогов по группировкам
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
	// Проставляем накопленные суммы в подвал отчета
	Если ЭлементРезультата.Макет = ДанныеОтчета.МакетПодвал.Имя Тогда
		Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
			Для ПодИндекс = 1 По 6 Цикл
				ЭлементРезультата.ЗначенияПараметров[Строка(ДанныеОтчета.МакетПодвал.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = ДанныеОтчета.ЗначенияПоказателей[ПодИндекс - 1][Индекс];
			КонецЦикла;
		КонецЦикла;
		
		// Начало - Ручной расчет итогов по группировкам
		Если РассчитыватьИтогиОрганизации И СчетчикОрганизаций <> 0 Тогда
			Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
				СтрокаИтогов = ТаблицаИтогов.Добавить();
				СтрокаИтогов.Группировка = "Организация" + СчетчикОрганизаций;
				СтрокаИтогов.Показатель = Строка(Индекс);
				Для ПодИндекс = 1 По 6 Цикл
					СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиОрганизации[ПодИндекс - 1][Индекс];
					ИтогиОрганизации[ПодИндекс - 1][Индекс]= 0;
				КонецЦикла;
			КонецЦикла;
			ОрганизацияДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			СчетчикОрганизаций = СчетчикОрганизаций + 1;
			Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
				Для ПодИндекс = 1 По 6 Цикл
					ЭлементРезультата.ЗначенияПараметров[Строка(ДанныеОтчета.МакетОрганизация.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Организация" + СчетчикОрганизаций + "_" + ПодИндекс + "#";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если РассчитыватьИтогиПодразделения И СчетчикПодразделений <> 0 Тогда
			Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
				СтрокаИтогов = ТаблицаИтогов.Добавить();
				СтрокаИтогов.Группировка = "Подразделение" + СчетчикПодразделений;
				СтрокаИтогов.Показатель = Строка(Индекс);
				Для ПодИндекс = 1 По 6 Цикл
					СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиПодразделения[ПодИндекс - 1][Индекс];
					ИтогиПодразделения[ПодИндекс - 1][Индекс]= 0;
				КонецЦикла;
			КонецЦикла;
			ПодразделениеДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
			СчетчикПодразделений = СчетчикПодразделений + 1;
			Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
				Для ПодИндекс = 1 По 6 Цикл
					ЭлементРезультата.ЗначенияПараметров[Строка(ДанныеОтчета.МакетПодразделение.Макет[Индекс].Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Подразделение" + СчетчикПодразделений + "_" + ПодИндекс + "#";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		// Конец - Ручной расчет итогов по группировкам
	КонецЕсли;
	
	// Начало - Ручной расчет итогов по группировкам
	Если РассчитыватьИтогиОрганизации И ДанныеОтчета.Свойство("МакетОрганизация") Тогда
		Если ЭлементРезультата.Макет = ДанныеОтчета.МакетОрганизация.Имя Тогда
			Если ОрганизацияДляИтогов <> ЭлементРезультата.ЗначенияПараметров.П1.Значение Тогда
				Если СчетчикОрганизаций <> 0 Тогда
					Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
						СтрокаИтогов = ТаблицаИтогов.Добавить();
						СтрокаИтогов.Группировка = "Организация" + СчетчикОрганизаций;
						СтрокаИтогов.Показатель = Строка(Индекс);
						Для ПодИндекс = 1 По 6 Цикл
							СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиОрганизации[ПодИндекс - 1][Индекс];
							ИтогиОрганизации[ПодИндекс - 1][Индекс]= 0;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				ОрганизацияДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
				Если РассчитыватьИтогиПодразделения И УровеньПодразделения > УровеньОрганизации Тогда
					ПодразделениеДляИтогов = "";
				КонецЕсли;
				СчетчикОрганизаций = СчетчикОрганизаций + 1;
				Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						ЭлементРезультата.ЗначенияПараметров[
							Строка(ДанныеОтчета.МакетОрганизация.Макет[Индекс].
								Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Организация" + СчетчикОрганизаций + "_" + ПодИндекс + "#";
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитыватьИтогиПодразделения И ДанныеОтчета.Свойство("МакетПодразделение") Тогда
		Если ЭлементРезультата.Макет = ДанныеОтчета.МакетПодразделение.Имя Тогда
			Если ПодразделениеДляИтогов <> ЭлементРезультата.ЗначенияПараметров.П1.Значение Тогда
				Если СчетчикПодразделений <> 0 Тогда
					Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
						СтрокаИтогов = ТаблицаИтогов.Добавить();
						СтрокаИтогов.Группировка = "Подразделение" + СчетчикПодразделений;
						СтрокаИтогов.Показатель = Строка(Индекс);
						Для ПодИндекс = 1 По 6 Цикл
							СтрокаИтогов["_" + Строка(ПодИндекс)] = ИтогиПодразделения[ПодИндекс - 1][Индекс];
							ИтогиПодразделения[ПодИндекс - 1][Индекс]= 0;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				ПодразделениеДляИтогов = ЭлементРезультата.ЗначенияПараметров.П1.Значение;
				Если РассчитыватьИтогиОрганизации И УровеньПодразделения < УровеньОрганизации Тогда
					ОрганизацияДляИтогов = "";
				КонецЕсли;
				СчетчикПодразделений = СчетчикПодразделений + 1;
				Для Индекс = 0 По ДанныеОтчета.КоличествоПоказателей - 1 Цикл
					Для ПодИндекс = 1 По 6 Цикл
						ЭлементРезультата.ЗначенияПараметров[
							Строка(ДанныеОтчета.МакетПодразделение.Макет[Индекс].
								Ячейки[ПодИндекс + СмещениеПоСтроке].Элементы[0].Значение)].Значение = "#Подразделение" + СчетчикПодразделений + "_" + ПодИндекс + "#";
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец - Ручной расчет итогов по группировкам
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом(ВнешниеНаборыДанных) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("ВалютнаяСумма");
	МассивПоказателей.Добавить("Количество");
		
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	
	КоличествоПоказателей = СтандартныеОтчеты.КоличествоПоказателей(ЭтотОбъект);
	
	Если КоличествоПоказателей > 1 Тогда
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = "Показатели";
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ЭлементМассива);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
	ГруппаСальдоНаНачало = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачало.Заголовок     = "Сальдо на начало периода";
	ГруппаСальдоНаНачало.Использование = Истина;
	ГруппаСальдоНаНачалоДт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоДт.Заголовок     = "Дебет";
	ГруппаСальдоНаНачалоДт.Использование = Истина;
	ГруппаСальдоНаНачалоДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаНачалоКт = ГруппаСальдоНаНачало.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаНачалоКт.Заголовок     = "Кредит";
	ГруппаСальдоНаНачалоКт.Использование = Истина;
	ГруппаСальдоНаНачалоКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОбороты.Заголовок     = "Обороты за период";
	ГруппаОбороты.Использование = Истина;
	ГруппаОборотыДт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыДт.Заголовок     = "Дебет";
	ГруппаОборотыДт.Использование = Истина;
	ГруппаОборотыДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаОборотыКт = ГруппаОбороты.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОборотыКт.Заголовок     = "Кредит";
	ГруппаОборотыКт.Использование = Истина;
	ГруппаОборотыКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаСальдоНаКонец = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонец.Заголовок     = "Сальдо на конец периода";
	ГруппаСальдоНаКонец.Использование = Истина;
	ГруппаСальдоНаКонецДт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецДт.Заголовок     = "Дебет";
	ГруппаСальдоНаКонецДт.Использование = Истина;
	ГруппаСальдоНаКонецДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаСальдоНаКонецКт = ГруппаСальдоНаКонец.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаСальдоНаКонецКт.Заголовок     = "Кредит";
	ГруппаСальдоНаКонецКт.Использование = Истина;
	ГруппаСальдоНаКонецКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ВидОстатков = ?(ПоказателиОтчета.РазвернутоеСальдо.Значение, "Развернутый", "");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатков + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "Начальный" + ВидОстатков + "ОстатокКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + ВидОстатков + "ОборотДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + ВидОстатков + "ОборотКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатков + "ОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "Конечный"  + ВидОстатков + "ОстатокКт");
		КонецЕсли;
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("ВалютнаяСумма");
	МассивПоказателей.Добавить("Количество");
	
	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
		Если ПоказателиОтчета[ЭлементМассива].Значение Тогда 
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоДт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаНачалоКт, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыДт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаОборотыКт,        "ОборотыЗаПериод."       + ЭлементМассива + "ОборотКт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецДт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокДт");
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ГруппаСальдоНаКонецКт,  "СальдоНаКонецПериода."  + ЭлементМассива + "КонечныйОстатокКт");
		КонецЕсли;
	КонецЦикла;
  	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Доработка схемы - развернутое сальдо
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое; // Набор "ПоСубконтоРазвернутое"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросПоСубконтоРазвернутое       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто РазвернутоеСальдо", "//Конец ЗапросПоСубконто РазвернутоеСальдо");
	ТекстУсловиеСчетаПоСубконтоРазвернутое = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета РазвернутоеСальдо"    , "//Конец УсловиеСчета РазвернутоеСальдо");
	ТекстСубконтоПоСубконтоРазвернутое     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто РазвернутоеСальдо"        , "//Конец Субконто РазвернутоеСальдо");
		
	ВыводитьРазвернутоеСальдо = Ложь;
	
	ТекстУсловие = "Ложь ИЛИ ";
	
	СписокВсехСчетовРазвернутоеСальдо = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.РазвернутоеСальдо Цикл
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СписокВсехСчетовРазвернутоеСальдо.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.РазвернутоеСальдо Цикл
		СубконтоРазвернутоеСальдо = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			ВыводитьРазвернутоеСальдо = Истина;
			Для Каждого СтрокаТаблицыСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоРазвернутоеСальдо.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
			
			//СписокСчетовРазвернутоеСальдо.Добавить(Строка.Счет, , Истина);
			
			Индекс = ДанныеОтчета.РазвернутоеСальдо.Индекс(СтрокаТаблицы) + 1;
			
			ТекстУсловие = ТекстУсловие + "Счет = &СчетРазвернутоеСальдо" + Индекс + " ИЛИ "; 
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое = "Счет В ИЕРАРХИИ (&СчетРазвернутоеСальдо" + Индекс + ")
																	| И Счет НЕ В (&СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс + ")
																	| И ((НЕ Счет.Забалансовый)
																	| ИЛИ &ВыводитьЗабалансовыеСчета)";
			
			// Формируем текст параметра Субконто запроса по субконто развернутое
			ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое = "&СубконтоРазвернутый" + Индекс;
			
			// Установка параметра СчетРазвернутоеСальдо
			СтандартныеОтчеты.СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, "СчетРазвернутоеСальдо" + Индекс, "СчетРазвернутоеСальдо", СтрокаТаблицы.Счет);
			
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое = СписокВсехСчетовРазвернутоеСальдо.Скопировать();
			СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.Удалить(СчетаИсключенныеИзЗапросаПоСчетамРазвернутое.НайтиПоЗначению(СтрокаТаблицы.Счет));
			// Установка параметра СчетаИсключенныеИзЗапросаПоСчетамРазвернутое
			СтандартныеОтчеты.СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое" + Индекс, "СчетаИсключенныеИзЗапросаПоСчетамРазвернутое", СчетаИсключенныеИзЗапросаПоСчетамРазвернутое);
			
			// Установка параметра "СубконтоДетализацииРазвернутый
			СтандартныеОтчеты.СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, "СубконтоРазвернутый" + Индекс, "СубконтоРазвернутый", СубконтоРазвернутоеСальдо);
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = ТекстЗапросПоСубконтоРазвернутое;//СтрЗаменить(ТекстЗапросПоСубконтоРазвернутое, ТекстПолеСчетПоСубконтоРазвернутое, ТекстДляПодстановкиПолеСчетПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстУсловиеСчетаПоСубконтоРазвернутое, ТекстДляПодстановкиУсловиеСчетаПоСубконтоРазвернутое);
			ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, ТекстСубконтоПоСубконтоРазвернутое, ТекстДляПодстановкиСубконтоПоСубконтоРазвернутое);
			
			Для Индекс = 1 По СубконтоРазвернутоеСальдо.Количество() Цикл
				ТекстДляПодстановкиЗапросПоСубконтоРазвернутое = СтрЗаменить(ТекстДляПодстановкиЗапросПоСубконтоРазвернутое, "//Null КАК Субконто" + Индекс, "ОстаткиИОбороты.Субконто" + Индекс + " КАК Субконто" + Индекс);
			КонецЦикла;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросПоСубконтоРазвернутое;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;	
	КонецЦикла;
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	
	Если ВыводитьРазвернутоеСальдо Тогда
		ТекстУсловие = Лев(ТекстУсловие, СтрДлина(ТекстУсловие) - 4);
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт) Конец";
			
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти("СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт) Конец";
			
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокДт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт) Конец";
			
			ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Найти("СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт");
			ПолеИтога.Выражение = "Выбор Когда " + ТекстУсловие + " Тогда Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйРазвернутыйОстатокКт) Иначе Сумма(СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт) Конец";
		КонецЦикла;
	КонецЕсли;
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто; // Набор "ПоСубконто"
	ТекстЗапроса = НаборДанных.Запрос;
	НаборДанных.Запрос = "";
	
	ТекстЗапросДетализацииПоСубконто       = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало ЗапросПоСубконто Детализация", "//Конец ЗапросПоСубконто Детализация");
	ТекстУсловиеСчетаДетализацииПоСубконто = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало УсловиеСчета Детализация", "//Конец УсловиеСчета Детализация");
	ТекстСубконтоДетализацииПоСубконто     = ПолучитьТекстПоМаркерам(ТекстЗапроса, "//Начало Субконто Детализация", "//Конец Субконто Детализация");
	
	СчетаИсключенныеИзЗапросаПоСчетам = Новый СписокЗначений;
	
	// Доработка для детализации
	ЕстьДетализацияПоСубконто = Ложь;
	Для Каждого СтрокаТаблицы Из ДанныеОтчета.Группировка Цикл	
		СубконтоДетализации = Новый СписокЗначений;
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда	
			Для Каждого СтрокаТаблицыСубконто Из СтрокаТаблицы.ПоСубконто Цикл
				Если СтрокаТаблицыСубконто.Пометка Тогда
					СубконтоДетализации.Добавить(СтрокаТаблицыСубконто.Значение);            
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		Если СубконтоДетализации.Количество() > 0 Тогда
			ЕстьДетализацияПоСубконто = Истина;
			
			СчетаИсключенныеИзЗапросаПоСчетам.Добавить(СтрокаТаблицы.Счет);
			Индекс = ДанныеОтчета.Группировка.Индекс(СтрокаТаблицы) + 1;
			
			// Формируем текст параметра УсловиеСчета запроса детализации по субконто
			ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто = "Счет В ИЕРАРХИИ (&СчетДетализации" + Индекс + ")
																   | И ((НЕ Счет.Забалансовый)
																   | ИЛИ &ВыводитьЗабалансовыеСчета)";
											  
			// Формируем текст параметра Субконто запроса детализации по субконто
			ТекстДляПодстановкиСубконтоДетализацииПоСубконто = "&СубконтоДетализации" + Индекс;
			
			// Формируем текст запроса для счета детализации
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстЗапросДетализацииПоСубконто, ТекстУсловиеСчетаДетализацииПоСубконто, ТекстДляПодстановкиУсловиеСчетаДетализацииПоСубконто);
			ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, ТекстСубконтоДетализацииПоСубконто, ТекстДляПодстановкиСубконтоДетализацииПоСубконто);
			
			// Корректировка текста запроса в зависимости от количества указанных видов субконто
			Если Индекс > 1 Тогда
				Для ИндексПсевдонима = 1 По 3 Цикл
					ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, " КАК Субконто" + ИндексПсевдонима, "");
				КонецЦикла;
			КонецЕсли;
			Для ИндексСубконто = СубконтоДетализации.Количество() + 1 По 3 Цикл
				ТекстДляПодстановкиЗапросДетализацииПоСубконто = СтрЗаменить(ТекстДляПодстановкиЗапросДетализацииПоСубконто, "ОстаткиИОбороты.Субконто" + ИндексСубконто , "Null");	
			КонецЦикла;
			
			// Добавление и установка значения параметра СчетДетализации{Индекс}
			
			СтандартныеОтчеты.СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, "СчетДетализации" + Индекс, "СчетДетализации", СтрокаТаблицы.Счет);
			
			// Добавление и установка значения параметра СубконтоДетализации{Индекс}
			СтандартныеОтчеты.СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, "СубконтоДетализации" + Индекс, "СубконтоДетализации", СубконтоДетализации);
							
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + ТекстДляПодстановкиЗапросДетализацииПоСубконто;
			
			// Доработка запроса набора данных
			НаборДанных.Запрос = НаборДанных.Запрос + " ОБЪЕДИНИТЬ ВСЕ ";	
		КонецЕсли;
	КонецЦикла;
	
	НаборДанных.Запрос = Лев(НаборДанных.Запрос, СтрДлина(НаборДанных.Запрос) - 16);
	
	СхемаКомпоновкиДанных.Параметры.ВыводитьЗабалансовыеСчета.Значение = Истина;
	
	СхемаКомпоновкиДанных.Параметры.СчетаИсключенныеИзЗапросаПоСчетам.Значение = СчетаИсключенныеИзЗапросаПоСчетам;
	
	Если Не ЕстьДетализацияПоСубконто Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконто);
	КонецЕсли;
	Если Не ВыводитьРазвернутоеСальдо Тогда
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.Удалить(СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъединение.Элементы.ПоСубконтоРазвернутое);
	КонецЕсли;
		
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Для Каждого Параметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Использование = Истина;
	КонецЦикла;
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СчетаИсключенныеИзЗапросаПоСчетам", СчетаИсключенныеИзЗапросаПоСчетам);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода));
	КонецЕсли;
		
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ВыводитьЗабалансовыеСчета", ВыводитьЗабалансовыеСчета);
	
	// Дополнительные данные
	СтандартныеОтчеты.ДобавитьДополнительныеПоля(ЭтотОбъект);
	
	// Формирование структуры отчета
	
	//Установи группировку по полям дополнительной группировки
	//группировка счета и валюты будут всегда ниже доп. группировок
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Первый = Истина;
	ИспользоватьОформлениеГруппировок = НастройкиФормы.ИспользоватьОформлениеГруппировок;
	Для Каждого ПолеВыбраннойГруппировки Из ДанныеОтчета.ГруппировкаДоп Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Если Не Первый Тогда 
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			Первый = Ложь;
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Счет") Тогда 
												
				Если Не ПоСубсчетам Тогда
					ЗначениеОтбора = ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
					ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
					ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЕсли;
	КонецЦикла; 
	
	ВыполненоСчетОформление = Ложь;
	СдвигРазмераШрифта      = Ложь;
	ТаблицаГруппировокКомпоновки = Новый ТаблицаЗначений;
	ТаблицаГруппировокКомпоновки.Колонки.Добавить("Группировка");
	ТаблицаГруппировокКомпоновки.Колонки.Добавить("Поле");
	СтандартныеОтчеты.РазобратьСтруктуруКомпоновщикаНастроек(КомпоновщикНастроек.Настройки.Структура, ТаблицаГруппировокКомпоновки);
	
	МаксИндекс = ДанныеОтчета.ГруппировкаДоп.Количество() - 1;
	Для Индекс = 0 По МаксИндекс Цикл
		ТекущаяГруппировка = ДанныеОтчета.ГруппировкаДоп.Получить(МаксИндекс - Индекс);
		ТекущееОформление  = ТекущаяГруппировка.Оформление;
		ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных(ТекущаяГруппировка.Поле);
		
		СтрокаГруппировки = ТаблицаГруппировокКомпоновки.Найти(ТекущееПолеГруппировки, "Поле");

		Если ИспользоватьОформлениеГруппировок
			И Строка(ТекущееОформление) <> ""
			И СтрокаГруппировки <> Неопределено Тогда   // УсловноеОформлениеОтчета
			
			ОформлениеГруппировкиВКомпоновщике = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
			ОформлениеГруппировкиВКомпоновщике.Использование = Истина;
			
			Для Каждого ЭлементОформления Из ТекущееОформление Цикл
				Если ЭлементОформления.Использование Тогда
					ЭлементОформленияКомпоновки = ОформлениеГруппировкиВКомпоновщике.Оформление.Элементы.Найти(ЭлементОформления.Имя);
					Если ЭлементОформленияКомпоновки <> Неопределено Тогда
						// Изменяем шрифт, если были выделены подразделы счетов
						Если ЭлементОформления.Имя = "Шрифт" И ВыполненоСчетОформление Тогда
							ИсходныйШрифт = ЭлементОформления.Значение;
							НовыйШрифт = Новый Шрифт(ИсходныйШрифт, ,
													 ?(СдвигРазмераШрифта, ИсходныйШрифт.Размер + 1, ИсходныйШрифт.Размер),
													 НЕ ИсходныйШрифт.Жирный);
							ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
							ЭлементОформленияКомпоновки.Использование = Истина;
						Иначе
							ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
							ЭлементОформленияКомпоновки.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяГруппировка.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия
				И НЕ (ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("Счет") И НЕ ПоСубсчетам)Тогда
				
				НовоеОформление = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
				НовоеОформление.Использование = Истина;
				
				Для Каждого ЭлементОформления Из ТекущееОформление Цикл
					Если ЭлементОформления.Использование Тогда
						ЭлементОформленияКомпоновки = НовоеОформление.Оформление.Элементы.Найти(ЭлементОформления.Имя);
					// Выделяем группы курсивом
						Если ЭлементОформления.Имя = "Шрифт" Тогда
							ИсходныйШрифт = ЭлементОформления.Значение;
							НовыйШрифт = Новый Шрифт(ИсходныйШрифт, , , , Истина);
							ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
							ЭлементОформленияКомпоновки.Использование = Истина;
						Иначе
							ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
							ЭлементОформленияКомпоновки.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				РеквизитДляОтбора = ?(ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("Счет"),
									   ".ЗапретитьИспользоватьВПроводках",
									   ".ЭтоГруппа");
				
				ТиповыеОтчеты.ДобавитьОтбор(НовоеОформление.Отбор, Строка(ТекущееПолеГруппировки) + РеквизитДляОтбора, Истина);
				
			КонецЕсли;
			
			Если (ТекущееПолеГруппировки = Новый ПолеКомпоновкиДанных("Счет")) И ПоСубсчетам Тогда
				
				ВыполненоСчетОформление = Истина;
				
				ОформлениеГруппировкиВКомпоновщике = СтрокаГруппировки.Группировка.УсловноеОформление.Элементы.Добавить();
				ОформлениеГруппировкиВКомпоновщике.Использование = Истина;
		
				ТиповыеОтчеты.ДобавитьОтбор(ОформлениеГруппировкиВКомпоновщике.Отбор, "Счет.Родитель", ПланыСчетов.Типовой.ПустаяСсылка());
				
				Для Каждого ЭлементОформления Из ТекущееОформление Цикл
					Если ЭлементОформления.Использование Тогда
						ЭлементОформленияКомпоновки = ОформлениеГруппировкиВКомпоновщике.Оформление.Элементы.Найти(ЭлементОформления.Имя);
						Если ЭлементОформленияКомпоновки <> Неопределено Тогда
							Если (ЭлементОформления.Имя = "Шрифт") Тогда
								ИсходныйШрифт      = ЭлементОформления.Значение;
								СдвигРазмераШрифта = ИсходныйШрифт.Жирный;
								НовыйШрифт = Новый Шрифт(ИсходныйШрифт, ,
														 ?(СдвигРазмераШрифта, ИсходныйШрифт.Размер + 1, ИсходныйШрифт.Размер),
														 НЕ ИсходныйШрифт.Жирный);
								ЭлементОформленияКомпоновки.Значение = НовыйШрифт;
								ЭлементОформленияКомпоновки.Использование = Истина;
							Иначе
								ЭлементОформленияКомпоновки.Значение = ЭлементОформления.Значение;
								ЭлементОформленияКомпоновки.Использование = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключим вывод отборов
	ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	КонецЕсли;
	
	Если ЕстьДетализацияПоСубконто Тогда
		Для Индекс = 1 По 3 Цикл 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Субконто" + Индекс);
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));		
				ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				
				Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мДеревоСтруктурныхЕдиниц.Колонки.Количество() = 0 Тогда 
		
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
		СписокСтруктурныхЕдиниц.ЗагрузитьЗначения(мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		
		Для Каждого СтрПодразделение Из мСписокПодразделений Цикл 
			СписокСтруктурныхЕдиниц.Добавить(СтрПодразделение.Значение);
		КонецЦикла;		
				
		мДеревоСтруктурныхЕдиниц = СтандартныеОтчеты.СформироватьДеревоСЕ(, СписокСтруктурныхЕдиниц);
		
	КонецЕсли;
	
   	ТиповыеОтчеты.ДобавитьОтборПоОрганизациямИПодразделениям(КомпоновщикНастроек, мДеревоСтруктурныхЕдиниц);
	
	Если ПоСубсчетам И НЕ ВыполненоСчетОформление Тогда
		
		УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы;
		
		РазмерШрифта = -1;
		Для Каждого Элемент Из УсловноеОформление Цикл
			Если Найти(Элемент.Представление, "Основной шрифт") <> 0
				 И Элемент.Использование Тогда
				 
				ШрифтОсновной = Элемент.Оформление.Элементы.Найти("Шрифт");
				РазмерШрифта = ШрифтОсновной.Значение.Размер;
			КонецЕсли;
		КонецЦикла;
		
		НовоеУсловноеОформление = УсловноеОформление.Добавить();
		УстановитьОформлениеПолей(КомпоновщикНастроек.Настройки.Выбор.Элементы, НовоеУсловноеОформление);
		
		Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Счет");
		
		Если ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда 
			Для Каждого ДопПоле Из ДанныеОтчета.ДополнительныеПоля Цикл 
				
				Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Сред(ДопПоле.Поле, 1, Найти(ДопПоле.Поле, ".")));			
				
			КонецЦикла;
		КонецЕсли;
			
		ТиповыеОтчеты.ДобавитьОтбор(НовоеУсловноеОформление.Отбор, "Счет.Родитель", ПланыСчетов.Типовой.ПустаяСсылка());
		ТиповыеОтчеты.УстановитьПараметр(НовоеУсловноеОформление.Оформление, "Шрифт", Новый Шрифт(, РазмерШрифта, Истина));
		
		НовоеУсловноеОформление.Представление = "Выделять группы счетов";
		
	КонецЕсли;
	
	Если ПоказателиОтчета.ВалютнаяСумма.Значение Тогда 
		
		УсловноеОформлениеНеВалютныеСчета = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УстановитьОформлениеПолей(КомпоновщикНастроек.Настройки.Выбор.Элементы, УсловноеОформлениеНеВалютныеСчета, Ложь);
		
		ТиповыеОтчеты.ДобавитьОтбор(УсловноеОформлениеНеВалютныеСчета.Отбор, "Счет.Валютный", Ложь);
		//ТиповыеОтчеты.УстановитьПараметр(УсловноеОформлениеНеВалютныеСчета.Оформление, "МаксимальнаяВысота", 1);		
		
	КонецЕсли;	
	
			
КонецПроцедуры

Процедура УстановитьОформлениеПолей(ЭлеметыКомпоновки, УсловноеОформление, ПроверятьВалютность = Истина)
	
	Для Каждого Элемент Из ЭлеметыКомпоновки Цикл 
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			УстановитьОформлениеПолей(Элемент.Элементы, УсловноеОформление, ПроверятьВалютность);
		Иначе 
			Если (Найти(Строка(Элемент.Поле), "ВалютнаяСумма") <> 0) Или ПроверятьВалютность Тогда 
				Поле = УсловноеОформление.Поля.Элементы.Добавить();
				Поле.Поле = Элемент.Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
	
	 СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат)
	
	СтандартныеОтчеты.ВыводПодписейОтчета(ОтчетОбъект, Результат);
			
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОрганизацияВНачале = Истина) Экспорт 
	
	ЗаголовокОтчета = "Оборотно-сальдовая ведомость" + СтандартныеОтчеты.ПолучитьПредставлениеПериода(ЭтотОбъект);

	Возврат ?(ОрганизацияВНачале, ЗаголовокОтчета, ЗаголовокОтчета + " " + СтандартныеОтчеты.ПолучитьТекстОрганизация(ЭтотОбъект));
	
КонецФункции

Процедура ПолучитьСтруктуруПоказателейОтчета() Экспорт
	
	ПоказателиОтчета = СтандартныеОтчеты.ПолучитьСтруктуруПоказателейОтчета(,,,, Истина, Истина, Ложь, Ложь);
	ДанныеОтчета.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(Результат)
	
	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
	
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс,"ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Результат.ФиксацияСверху = ВысотаЗаголовка + ДанныеОтчета.ВысотаШапки;
	
	// Начало - Ручной расчет итогов по группировкам
	Для каждого СтрокаИтогов Из ТаблицаИтогов Цикл
		Для НомерИтога = 1 По 6 Цикл
			ОбластьДляЗамены = Результат.НайтиТекст("#" + СтрокаИтогов.Группировка + "_" + НомерИтога + "#");
			Если ОбластьДляЗамены <> Неопределено Тогда
				ОбластьДляЗамены.Текст = СтрокаИтогов["_" + НомерИтога];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Конец - Ручной расчет итогов по группировкам
	
КонецПроцедуры

// Для настройки отчета (расшифровка и др.)
Процедура Настроить() Экспорт
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	//Если СохранятьНастройкуОтчета Тогда
		//сохраним список структурных единиц
		ДополнительныеПоля = Новый СписокЗначений;
		ДополнительныеПоля.Добавить(мСписокСтруктурныхЕдиниц, "мСписокСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мДеревоСтруктурныхЕдиниц, "мДеревоСтруктурныхЕдиниц");
		ДополнительныеПоля.Добавить(мСписокПодразделений, "мСписокПодразделений");		               
		СтандартныеОтчеты.СохранитьНастройку(ЭтотОбъект, ДополнительныеПоля);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	
	Если СтруктураПараметров<>Неопределено И СтруктураПараметров.Количество() = 1
		 И СтруктураПараметров.Свойство("НастройкиФормы") Тогда
		НастройкиФормы = СтруктураПараметров.НастройкиФормы;
		СохраненнаяНастройка = Неопределено;
	КонецЕсли;
	
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

Процедура ИнициализацияОтчета() Экспорт
	
	СтандартныеОтчеты.ИнициализацияОтчета(ЭтотОбъект);
	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;
мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
мСписокПодразделений = Новый СписокЗначений;
мДеревоСтруктурныхЕдиниц = Новый ДеревоЗначений;

ВедётсяУчетПоПодразделениям = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

РежимРасшифровки = Ложь;

ОтображатьОформление = Ложь;

// Начало - Ручной расчет итогов по группировкам
СчетчикОрганизаций     = 0;
ОрганизацияДляИтогов   = "";
СчетчикПодразделений   = 0;
ПодразделениеДляИтогов = "";

ТаблицаИтогов = Новый ТаблицаЗначений();
ТаблицаИтогов.Колонки.Добавить("Группировка");
ТаблицаИтогов.Колонки.Добавить("Показатель");
ТаблицаИтогов.Колонки.Добавить("_1");
ТаблицаИтогов.Колонки.Добавить("_2");
ТаблицаИтогов.Колонки.Добавить("_3");
ТаблицаИтогов.Колонки.Добавить("_4");
ТаблицаИтогов.Колонки.Добавить("_5");
ТаблицаИтогов.Колонки.Добавить("_6");

РассчитыватьИтогиОрганизации   = Ложь;
РассчитыватьИтогиПодразделения = Ложь;
// Конец - Ручной расчет итогов по группировкам

#КонецЕсли