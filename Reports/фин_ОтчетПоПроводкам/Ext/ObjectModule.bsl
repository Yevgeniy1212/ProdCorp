Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	
	Если Показатели.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны показатели отчета! Отчет не сформирован");
		Возврат;
	КонецЕсли;
	
	ТекстФильтрДвижения = "";
	ТекстОтбор = "";
	МассивСубконто = Новый Массив;
	УсловиеНаСчет = "";
	УсловиеНаКорСчет = "";
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
			ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии Тогда
			ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии  Тогда
			ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
			ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет Тогда
			УсловиеНаСчет = ТекстУсловия;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет Тогда
			УсловиеНаКорСчет = ТекстУсловия;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если УсловиеНаСчет="" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задано условие на счет! Отчет не сформирован");
		Возврат;
	КонецЕсли;
	Если УсловиеНаКорСчет = "" Тогда
		ТекстФильтрДвижения = "Сценарий = &Сценарий И СчетДт "+УсловиеНаСчет+" ИЛИ СчетКт "+УсловиеНаСчет;
	Иначе
		ТекстФильтрДвижения = "Сценарий = &Сценарий И ВЫБОР КОГДА СчетДт "+УсловиеНаСчет+" ТОГДА СчетКт "+УсловиеНаКорСчет+"
				|	КОГДА СчетКт "+УсловиеНаСчет+" ТОГДА СчетДт "+УсловиеНаКорСчет+"
				|	ИНАЧЕ ЛОЖЬ КОНЕЦ";
	КонецЕсли;
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет ИЛИ СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
			ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
			ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии  Тогда
			ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
			ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Валюта Тогда
			Если УсловиеНаКорСчет = "" Тогда
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
						|	КОГДА СчетДт "+УсловиеНаСчет+"
						|		ТОГДА ВалютаДт "+ТекстУсловия+"
						|	КОГДА СчетКт "+УсловиеНаСчет+" 
						|		ТОГДА ВалютаКт "+ТекстУсловия+"
						|	ИНАЧЕ ЛОЖЬ 
						|КОНЕЦ";
			Иначе
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
						|	КОГДА СчетДт "+УсловиеНаСчет+" И СчетКт "+УсловиеНаКорСчет+"
						|		ТОГДА ВалютаДт "+ТекстУсловия+"
						|	КОГДА СчетКт "+УсловиеНаСчет+" И СчетДт "+УсловиеНаКорСчет+" 
						|		ТОГДА ВалютаКт "+ТекстУсловия+"
						|	ИНАЧЕ ЛОЖЬ 
						|КОНЕЦ";
			КонецЕсли;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВалютаКор И УсловиеНаКорСчет<>"" Тогда
			Если УсловиеНаКорСчет = "" Тогда
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетКт "+УсловиеНаКорСчет+"
					|		ТОГДА ВалютаКт "+ТекстУсловия+"
					|	КОГДА СчетДт "+УсловиеНаКорСчет+" 
					|		ТОГДА ВалютаДт "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			Иначе
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетДт "+УсловиеНаСчет+" И СчетКт "+УсловиеНаКорСчет+"
					|		ТОГДА ВалютаКт "+ТекстУсловия+"
					|	КОГДА СчетКт "+УсловиеНаСчет+" И СчетДт "+УсловиеНаКорСчет+" 
					|		ТОГДА ВалютаДт "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			КонецЕсли;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
			ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +"Организация "+ТекстУсловия;
		ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора),"КорСубконто")<>0 Тогда
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора);
			Если УсловиеНаКорСчет<>"" Тогда
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетДт "+УсловиеНаСчет+" И СчетКт "+УсловиеНаКорСчет+"
					|		ТОГДА "+СтрЗаменить(Имя,"КорСубконто","СубконтоКт")+" "+ТекстУсловия+"
					|	КОГДА СчетКт "+УсловиеНаСчет+" И СчетДт "+УсловиеНаКорСчет+" 
					|		ТОГДА "+СтрЗаменить(Имя,"КорСубконто","СубконтоДт")+" "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			Иначе
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетДт "+УсловиеНаСчет+" 
					|		ТОГДА "+СтрЗаменить(Имя,"КорСубконто","СубконтоКт")+" "+ТекстУсловия+"
					|	КОГДА СчетКт "+УсловиеНаСчет+"  
					|		ТОГДА "+СтрЗаменить(Имя,"КорСубконто","СубконтоДт")+" "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			КонецЕсли;
		ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора),"Субконто")<>0 Тогда
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора);
			Если УсловиеНаКорСчет = "" Тогда
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетДт "+УсловиеНаСчет+"
					|		ТОГДА "+СтрЗаменить(Имя,"Субконто","СубконтоДт")+" "+ТекстУсловия+"
					|	КОГДА СчетКт "+УсловиеНаСчет+" 
					|		ТОГДА "+СтрЗаменить(Имя,"Субконто","СубконтоКт")+" "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			Иначе
				ТекстФильтрДвижения = ТекстФильтрДвижения + ?(ТекстФильтрДвижения="",""," И ") +" ВЫБОР 
					|	КОГДА СчетДт "+УсловиеНаСчет+" И СчетКт "+УсловиеНаКорСчет+"
					|		ТОГДА "+СтрЗаменить(Имя,"Субконто","СубконтоДт")+" "+ТекстУсловия+"
					|	КОГДА СчетКт "+УсловиеНаСчет+" И СчетДт "+УсловиеНаКорСчет+" 
					|		ТОГДА "+СтрЗаменить(Имя,"Субконто","СубконтоКт")+" "+ТекстУсловия+"
					|	ИНАЧЕ ЛОЖЬ 
					|КОНЕЦ";
			КонецЕсли;
		Иначе
			НомерСубконто = 0;
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
			Если МассивСубконто.Найти(Разрез)=Неопределено Тогда
				МассивСубконто.Добавить(Разрез);
				НомерСубконто = МассивСубконто.Количество();
			Иначе
				НомерСубконто = МассивСубконто.Найти(Разрез)+1;
			КонецЕсли;
			Если УсловиеНаКорСчет = "" Тогда
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор="",""," И ") +"ВЫБОР КОГДА СчетДт "+УсловиеНаСчет+" ТОГДА
				|ВЫБОР 
				|	КОГДА ВидСубконтоДт1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт1
				|	КОГДА ВидСубконтоДт2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт2
				|	КОГДА ВидСубконтоДт3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт3
				|	КОГДА ВидСубконтоДт4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт4
				|	КОГДА ВидСубконтоДт5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия+"
				|	КОГДА СчетКт "+УсловиеНаСчет+" ТОГДА
				|ВЫБОР 
				|	КОГДА ВидСубконтоКт1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт1
				|	КОГДА ВидСубконтоКт2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт2
				|	КОГДА ВидСубконтоКт3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт3
				|	КОГДА ВидСубконтоКт4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт4
				|	КОГДА ВидСубконтоКт5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия+"
				|ИНАЧЕ ЛОЖЬ
				|КОНЕЦ";
			Иначе
				ТекстОтбор = ТекстОтбор + ?(ТекстОтбор="",""," И ") +"ВЫБОР КОГДА СчетДт "+УсловиеНаСчет+" И СчетКт "+УсловиеНаКорСчет+" ТОГДА
				|ВЫБОР 
				|	КОГДА ВидСубконтоДт1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт1
				|	КОГДА ВидСубконтоДт2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт2
				|	КОГДА ВидСубконтоДт3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт3
				|	КОГДА ВидСубконтоДт4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт4
				|	КОГДА ВидСубконтоДт5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоДт5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия+"
				|	КОГДА СчетКт "+УсловиеНаСчет+" И СчетДт "+УсловиеНаКорСчет+" ТОГДА
				|ВЫБОР 
				|	КОГДА ВидСубконтоКт1 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт1
				|	КОГДА ВидСубконтоКт2 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт2
				|	КОГДА ВидСубконтоКт3 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт3
				|	КОГДА ВидСубконтоКт4 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт4
				|	КОГДА ВидСубконтоКт5 = &ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор))+"
				|		ТОГДА СубконтоКт5
				|	ИНАЧЕ Null
				|КОНЕЦ "+ТекстУсловия+"
				|ИНАЧЕ ЛОЖЬ
				|КОНЕЦ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// установка текста условия в текст запроса
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	СтрокаПоиска = "РегистрБухгалтерии.фин_Бюджетирование.ДвиженияССубконто(";
		
	НовыйТекст = Лев(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)-1);
	ТекстЗапроса = Сред(ТекстЗапроса,Найти(ТекстЗапроса,СтрокаПоиска)+СтрДлина(СтрокаПоиска)+1);
	ПозицияЗакрывающейСкобки = Найти(ТекстЗапроса,") КАК");
	НовыйТекст=НовыйТекст+"&НачалоПериода, &КонецПериода,"+ТекстФильтрДвижения+", , "+Сред(ТекстЗапроса,ПозицияЗакрывающейСкобки);
	Позиция = Найти(НовыйТекст,"ГДЕ");
	Если Позиция<>0 Тогда
		НовыйТекст = Лев(НовыйТекст,Позиция-1);
	КонецЕсли;
	НовыйТекст = НовыйТекст + ?(ТекстОтбор="",""," ГДЕ "+ТекстОтбор);
	
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = НовыйТекст;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = "ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекстУсловия,СтрокаОтбор.Значение);
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет ИЛИ СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Валюта Тогда
            Продолжить;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.ВалютаКор И УсловиеНаКорСчет<>"" Тогда
            Продолжить;
		ИначеЕсли СтрокаОтбор.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
            Продолжить;
		ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора),"КорСубконто")<>0 Тогда
            Продолжить;
		ИначеЕсли Найти(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора),"Субконто")<>0 Тогда
            Продолжить;
		КонецЕсли;
		Если СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И
		 	СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования И
		 	СтрокаОтбор.ПолеОтбора <> Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидСубконто"+Строка(Отбор.Индекс(СтрокаОтбор)),Разрез);
		КонецЕсли;
	КонецЦикла;
	
		
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",Сценарий);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",НачалоПериода);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",КонецДня(КонецПериода));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	

	ДобавленноеПоле = ДобавитьВыбранныеПоля(КомпоновщикНастроек.Настройки);
	
	
	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Попытка
		МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,КомпоновщикНастроек.Настройки,ДанныеРасшифровки);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	//СхемаКомпоновкиДанных.НаборыДанных.Основной.Поля.Найти("Период").ВыражениеПредставления="фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период,"""+Периодичность+""")";
	
	//ВЫПОЛНЕНИЕ КОМПОНОВКИ ДАННЫХ
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	//ВЫВОД РЕЗУЛЬТАТА В ТАБЛИЧНЫЙ ДОКУМЕНТ
	ДокументРезультат.Очистить();
	ПроцессорВывода=Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода=Истина;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//инициализация начала вывода
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
	Граница= ДокументРезультат.ФиксацияСверху;
	Для Инд = 1 По 4 Цикл
		ДокументРезультат.Область("R1C"+Строка(Инд)+":R"+Строка(Граница)+"C"+строка(Инд)).Объединить();
//		ДокументРезультат.Область("R1C"+Строка(Инд)+":R"+Строка(Граница)+"C"+строка(Инд)).ВысотаСтроки=4;
	КонецЦикла;
	ОбластьВставляемая = ДокументРезультат.Область("C8");
	ДокументРезультат.ВставитьОбласть(ОбластьВставляемая,ДокументРезультат.Область("C5"),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	ДокументРезультат.Область("C5").Очистить(Истина,Ложь,Ложь);
	ДокументРезультат.Область("C5").ГоризонтальноеПоложение =ГоризонтальноеПоложение.Лево;
	ДокументРезультат.Область("C5").РазмещениеТекста =ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ДокументРезультат.Область("R2C"+Строка(7)+":R"+Строка(Граница)+"C"+строка(7)).Объединить();
	ДокументРезультат.Область("R2C"+Строка(7)+":R"+Строка(Граница)+"C"+строка(7)).Текст = "";
	ДокументРезультат.Область("R2C"+Строка(9)+":R"+Строка(Граница)+"C"+строка(9)).Объединить();
	ДокументРезультат.Область("R2C"+Строка(9)+":R"+Строка(Граница)+"C"+строка(9)).Текст = "";
	ДокументРезультат.Область("R1C"+Строка(5)+":R"+Строка(Граница)+"C"+строка(5)).Объединить();
	ДокументРезультат.Область("R1C"+Строка(5)+":R"+Строка(Граница)+"C"+строка(5)).Текст = "";
	ДокументРезультат.Область("R1C"+Строка(5)+":R"+Строка(Граница)+"C"+строка(5)).ЦветФона = ДокументРезультат.Область("R1C1:R1C1").ЦветФона;
	МассивИменПоказателей = Новый Массив;
	Для Каждого Показатель Из Показатели Цикл
		МассивИменПоказателей.Добавить(фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель),ЯзыкОтчета));
	КонецЦикла;
	НачальнаяЯчейка = Граница;
	КоличествоСубконто = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто");
	Пока НачальнаяЯчейка < ДокументРезультат.ВысотаТаблицы Цикл
		Для Каждого Имя Из МассивИменПоказателей Цикл
			НачальнаяЯчейка = НачальнаяЯчейка + 1;
			ДокументРезультат.Область("R"+Строка(НачальнаяЯчейка)+"C5").Текст = Имя;
		КонецЦикла;
		НачальнаяЯчейка = НачальнаяЯчейка + Макс(КоличествоСубконто,МассивИменПоказателей.Количество())-МассивИменПоказателей.Количество();
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьВыбранныеПоля(ПолеГруппы)
	Аналитика = ПолеГруппы.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Аналитика.Использование=Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	// период
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Дата",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("Период");
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование = Истина;
	ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("Период");
				
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 12;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 12;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	
	// регистратор
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Регистратор",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
	ДопПоле.Использование = Истина;
	ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("Регистратор");
				
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 30;
	ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 30;
	ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
	ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
	ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
	ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	
	// аналитика Дт
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("АналитикаДт",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		ИмяПоля = "СубконтоДт"+Строка(Инд);
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// аналитика Кт
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("АналитикаКт",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		ИмяПоля = "СубконтоКт"+Строка(Инд);
		ПолеДопРазрезаАналитики=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 15;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// Дебет
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Дебет",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ПолеСчет=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСчет.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СчетДт",ЯзыкОтчета);
	ПолеСчет.Использование	=Истина;
	ПолеСчет.Поле	=Новый ПолеКомпоновкиДанных("СчетДт");
	
	ПолеПоказатели=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеПоказатели.Заголовок = "";
	ПолеПоказатели.Использование	=Истина;
	ПолеПоказатели.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+"Дт";
		ПолеДопРазрезаАналитики=ПолеПоказатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	// Кредит
	
	ПолеРазрезаАналитики=Аналитика.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеРазрезаАналитики.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("Кредит",ЯзыкОтчета);
	ПолеРазрезаАналитики.Использование	=Истина;
	ПолеРазрезаАналитики.Расположение	=РасположениеПоляКомпоновкиДанных.Горизонтально;
	
	ПолеСчет=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеСчет.Заголовок = фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("СчетКт",ЯзыкОтчета);
	ПолеСчет.Использование	=Истина;
	ПолеСчет.Поле	=Новый ПолеКомпоновкиДанных("СчетКт");
	
	ПолеПоказатели=ПолеРазрезаАналитики.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПолеПоказатели.Заголовок = "";
	ПолеПоказатели.Использование	=Истина;
	ПолеПоказатели.Расположение	=РасположениеПоляКомпоновкиДанных.Вертикально;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель)+"Кт";
		ПолеДопРазрезаАналитики=ПолеПоказатели.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеДопРазрезаАналитики.Заголовок = "";
		ПолеДопРазрезаАналитики.Использование	=Истина;
		ПолеДопРазрезаАналитики.Поле	=Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 10;
		ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
		ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
		ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Право;
		ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
	КонецЦикла;
	
	
	Возврат Аналитика;
КонецФункции

Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
	ДоступныеПоказатели = Новый СписокЗначений;
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр);
	ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	ДоступныеГруппировки = Новый СписокЗначений;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет,"Счет");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет,"Кор счет");
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов["Субконто"+Строка(Инд)],"Субконто "+Строка(Инд));
		ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов["КорСубконто"+Строка(Инд)],"Кор субконто "+Строка(Инд));
	КонецЦикла;
	СписокГруппировок = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	Для Каждого Разрез Из СписокГруппировок Цикл
		ДоступныеГруппировки.Добавить(Разрез.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез.Значение));
	КонецЦикла;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Организация");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Валюта");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"ВалютаКор");
КонецПроцедуры

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
//ПереченьОсновныхРеквизитов.Добавить("ПериодичностьОтчета");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("НачалоПериода",НачалоМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("КонецПериода",КонецМесяца(ТекущаяДата()));
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());

ДополнительныеПараметры = Новый Массив;
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;
ДополнительныеПредставления.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования,"Период группировки");

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
