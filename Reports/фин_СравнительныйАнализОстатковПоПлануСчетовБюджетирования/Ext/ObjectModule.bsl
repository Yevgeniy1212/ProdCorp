Перем ЗаполнениеПараметров Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ДополнительныеПараметры Экспорт;
Перем ПараметрыОформления Экспорт;
Перем СтруктураПеревода;
Перем КЭШ;
Перем ДоступныеПоказатели Экспорт;
Перем ДоступныеГруппировки Экспорт;
Перем ПереченьОсновныхРеквизитов Экспорт;
Перем ДополнительныеПредставления Экспорт;
Перем ДанныеРасшифровки Экспорт;
Перем ОтборыРасшифровки Экспорт;
Перем ТаблицаОтбора Экспорт;


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА ДАННЫХ ОТЧЕТА


Процедура ЗаполнитьСпискиПоказателейИГруппировок() Экспорт
   	ДоступныеПоказатели.Очистить();
	ДоступныеГруппировки.Очистить();
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр);
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма);
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.СуммаСценария);
		ДоступныеПоказатели.Добавить(Перечисления.фин_РесурсыДанныхБюджетирования.Количество);
	ДоступныеГруппировки.Добавить(Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет,"Счет");
	Для Каждого СтрокаРазрез Из фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов() Цикл
		ДоступныеГруппировки.Добавить(СтрокаРазрез.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(СтрокаРазрез.Значение));
	КонецЦикла;
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта,"Валюта операции");
	ДоступныеГруппировки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация,"Организация");
КонецПроцедуры

Функция ПроверитьЗаполнениеПараметров()
	Ошибки = Ложь;
	//Если НЕ ЗначениеЗаполнено(СтатьяБаланса) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана статья баланса!");
	//	Ошибки = Истина;
	//КонецЕсли;
	Если ДанныеОстатковДляАнализа.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указаны данные для анализа!");
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Показатель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен показатель в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка показателей!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из ВидыАналитическихДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидДанных) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид данных в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка видов аналитических данных!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из ДанныеОстатковДляАнализа Цикл
		Если СтрокаПоказатель.ДатаОстатков='00010101' Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дата остатков в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка анализируемых данных!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Группировки Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена группировка в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоказатель.ВидГруппировки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен вид группировки в строке № "+Строка(СтрокаПоказатель.НомерСтроки)+" списка группировок!");
			Ошибки = Истина;
		КонецЕсли;
		Если СтрокаПоказатель.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать группировку по валюте без отражения валютной суммы в отчете!");
			Ошибки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяГруппировка = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма)).Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя использовать разделение данных по валюте без отражения валютной суммы в отчете!");
		Ошибки = Истина;
	КонецЕсли;
	
	Возврат НЕ Ошибки;	
КонецФункции

Функция ПолучитьТаблицуДанных(Отбор,мГруппировки)
	ТекстРазрядность = "";
	ТекстРазрядностьКоличество = "";
	РазрядностьПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрядностьПланированияБюджетов");
	Если РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Миллионы Тогда
		ТекстРазрядность="/1000000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.СотниТысяч Тогда
		ТекстРазрядность="/100000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.ДесяткиТысяч Тогда
		ТекстРазрядность="/10000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Тысячи Тогда
		ТекстРазрядность="/1000";
	ИначеЕсли РазрядностьПланирования = Перечисления.фин_РазрядностьПланированияБюджетов.Сотни Тогда
		ТекстРазрядность="/100";
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПрименятьРазрядностьДляКоличества") Тогда
		ТекстРазрядностьКоличество = ТекстРазрядность;
	КонецЕсли;
	Запрос = Новый Запрос;
	мПериодичность = Строка(Периодичность());
	
	ТекстИзмерения = "";
	Для Каждого Измерение Из мГруппировки Цикл
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Измерение.Измерение);
		СтрокиГрупп = мГруппировки.НайтиСтроки(Новый Структура("Измерение",Измерение.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если Измерение <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Имя = "Счет" Тогда
			Продолжить;
		ИначеЕсли Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	НАЧАЛОПЕРИОДА(Обороты.Период,"+мПериодичность+") КАК ПериодПланирования";
		ИначеЕсли Имя = "Валюта" ИЛИ Имя="Организация" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	Обороты."+Имя+" КАК "+Имя;
		Иначе
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Измерение.Измерение);
			Запрос.УстановитьПараметр("ВидСубконто"+Имя,Разрез);
			Запрос.УстановитьПараметр("ПустоеЗначение"+Имя,Разрез.ТипЗначения.ПривестиЗначение(Неопределено));
			ТекстИзмерения = ТекстИзмерения+",
			|	"+ПолеИзмерение(Имя);
			Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	"+ПолеЕдиницыИзмерения();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
		Если Имя = "Счет" Тогда
			//
		ИначеЕсли Имя = "ПериодПланирования" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	НАЧАЛОПЕРИОДА(Обороты.Период,"+мПериодичность+") КАК ПериодПланирования";
		ИначеЕсли Имя = "Валюта" ИЛИ Имя="Организация" Тогда
			ТекстИзмерения = ТекстИзмерения+",
			|	Обороты."+Имя+" КАК "+Имя;
		Иначе
			Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ОсновнаяГруппировка);
			Запрос.УстановитьПараметр("ВидСубконто"+Имя,Разрез);
			Запрос.УстановитьПараметр("ПустоеЗначение"+Имя,Разрез.ТипЗначения.ПривестиЗначение(Неопределено));
			ТекстИзмерения = ТекстИзмерения+",
			|	"+ПолеИзмерение(Имя);
			Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ТекстИзмерения = ТекстИзмерения+",
				|	"+ПолеЕдиницыИзмерения();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТекстИзмеренияИтоговые = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаГруппировки(мГруппировки,Показатели,ОсновнаяГруппировка,Строка(Периодичность()));
	
	ТекстФильтраОбороты = "";
	ТекстОтбораОстатки = "";
	ТекстОтбораИтоги = "";
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = " = &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		Если СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
			ТекстУсловия = " В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке  Тогда
			ТекстУсловия = " НЕ В (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии  Тогда
			ТекстУсловия = " В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии ИЛИ СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии  Тогда
			ТекстУсловия = " НЕ В ИЕРАРХИИ (&ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор))+")";
		ИначеЕсли СтрокаОтбор.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно  Тогда
			ТекстУсловия = " <> &ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор));
		КонецЕсли;
		Если СтрокаОтбор.Путь = "Счет" Тогда
			ТекстОтбораИтоги = ТекстОтбораИтоги+?(ТекстОтбораИтоги="",""," И ")+"СтатьиБюджета.Счет "+ТекстУсловия;
		ИначеЕсли СтрокаОтбор.Путь = "Валюта" ИЛИ СтрокаОтбор.Путь = "Организация" Тогда
			ТекстОтбораОстатки = ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+"Обороты.Валюта "+ТекстУсловия;
		ИначеЕсли Имя = "ПериодПланирования" Тогда
			ТекстОтбораОстатки = ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+"НАЧАЛОПЕРИОДА(Обороты.Период,"+мПериодичность+") "+ТекстУсловия;
		Иначе
			ТекстОтбораОстатки 	= ТекстОтбораОстатки+?(ТекстОтбораОстатки="",""," И ")+ПолеИзмерение(СтрокаОтбор.Путь,Ложь)+" "+ТекстУсловия;
			Если Группировки.НайтиСтроки(Новый Структура("Измерение",СтрокаОтбор.ПолеОтбора)).Количество()=0 Тогда
				Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаОтбор.ПолеОтбора);
				Запрос.УстановитьПараметр("ВидСубконто"+СтрокаОтбор.Путь,Разрез);
				Запрос.УстановитьПараметр("ПустоеЗначение"+СтрокаОтбор.Путь,Разрез.ТипЗначения.ПривестиЗначение(Неопределено));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос.УстановитьПараметр("СтатьяБаланса",				СтатьяБаланса);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения",		Метаданные.ОпределяемыеТипы.фин_ЕдиницыИзмеренияНоменклатуры.Тип.ПривестиЗначение(Неопределено));
	
	ТаблицаОтбора.Очистить();
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "Счет";
	НС.Значение = СтатьяБаланса;
	НС.ВидСравнения = "Равно";
	
	
	// параметры отбора
	Для Каждого СтрокаОтбор Из Отбор Цикл
		Если СтрокаОтбор.Путь="" ИЛИ СтрокаОтбор.ВидСравнения.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр("ПараметрОтбора"+Строка(Отбор.Индекс(СтрокаОтбор)),СтрокаОтбор.Значение);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстФормированияВременныхТаблиц = "";
	ТекстВсеПоказателиСПсевдонимом = "";
	ТекстВсеПоказатели = "";
	Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл

		МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
		ТекстПоказатели = "";
		ТекстПоказателиСПсевдонимом = "";
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) Тогда
			мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,МеткаУровня);
			мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,ТекстРазрядность,ТекстРазрядностьКоличество,"Оборот"+МеткаУровня,"Остаток");
		Иначе
			мТекстПоказатели = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,МеткаУровня);
			мТекстПоказателиСПсевдонимом = фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,,,"Оборот"+МеткаУровня,"Остаток");
		КонецЕсли;
		ТекстВсеПоказателиСПсевдонимом = ТекстВсеПоказателиСПсевдонимом + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,"Оборот"+МеткаУровня);
		ТекстВсеПоказатели = ТекстВсеПоказатели + фин_УправлениеОтчетамиБюджетирование.ПолучитьФрагментЗапросаПоказатели(Показатели,МеткаУровня,МеткаУровня,МеткаУровня);
		Для Каждого СтрокаДанныхОбход Из ДанныеОстатковДляАнализа Цикл
			Если СтрокаДанных.НомерСтроки = СтрокаДанныхОбход.НомерСтроки Тогда
				ТекстПоказатели = ТекстПоказатели + мТекстПоказатели;
				ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом + мТекстПоказателиСПсевдонимом;
			Иначе
				Для Каждого СтрокаПоказатель Из Показатели Цикл
					Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
					ТекстПоказатели = ТекстПоказатели+",
					|	0 КАК "+Имя+Строка(СтрокаДанныхОбход.НомерСтроки);
					ТекстПоказателиСПсевдонимом = ТекстПоказателиСПсевдонимом+",
					|	0 КАК "+Имя+"Оборот"+Строка(СтрокаДанныхОбход.НомерСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Сценарий"+МеткаУровня,		СтрокаДанных.ДанныеДляСравнения);
		Запрос.УстановитьПараметр("Дата"+МеткаУровня,			СтрокаДанных.ДатаОстатков);
		
		ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц + ?(ТекстФормированияВременныхТаблиц="","","	
	    |ОБЪЕДИНИТЬ ВСЕ");
		ТекстФормированияВременныхТаблиц = ТекстФормированияВременныхТаблиц + СтрЗаменить("
		|ВЫБРАТЬ
	               |	СтатьиБюджета.Счет КАК Счет"+ТекстИзмерения+ТекстПоказателиСПсевдонимом+?(СтрокаДанных.НомерСтроки<>1,"","
				   |ПОМЕСТИТЬ ВТ_ПредварительныеОбороты")+"
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СчетаБюджета.Ссылка КАК Счет,
	               |		ВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	               |		ВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	               |		ВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	               |		ВидыСубконто4.ВидСубконто КАК ВидСубконто4,
	               |		ВидыСубконто5.ВидСубконто КАК ВидСубконто5
	               |	ИЗ
	               |		ПланСчетов.фин_Бюджетирование КАК СчетаБюджета
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК ВидыСубконто1
	               |			ПО СчетаБюджета.Ссылка = ВидыСубконто1.Ссылка
	               |				И (ВидыСубконто1.НомерСтроки = 1)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК ВидыСубконто2
	               |			ПО СчетаБюджета.Ссылка = ВидыСубконто2.Ссылка
	               |				И (ВидыСубконто2.НомерСтроки = 2)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК ВидыСубконто3
	               |			ПО СчетаБюджета.Ссылка = ВидыСубконто3.Ссылка
	               |				И (ВидыСубконто3.НомерСтроки = 3)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК ВидыСубконто4
	               |			ПО СчетаБюджета.Ссылка = ВидыСубконто4.Ссылка
	               |				И (ВидыСубконто4.НомерСтроки = 4)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК ВидыСубконто5
	               |			ПО СчетаБюджета.Ссылка = ВидыСубконто5.Ссылка
	               |				И (ВидыСубконто5.НомерСтроки = 5)
	               |	ГДЕ
	               |		СчетаБюджета.Ссылка В ИЕРАРХИИ(&СтатьяБаланса)) КАК СтатьиБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.фин_Бюджетирование.Остатки(
	               |				&ДатаМеткаУровня,
	               |				Счет В ИЕРАРХИИ (&СтатьяБаланса),
	               |				,
	               |				ВЫБОР
	               |						КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ Организация = &Организация
	               |					КОНЕЦ
	               |					И Сценарий = &СценарийМеткаУровня
	               |				) КАК Обороты
	               |		ПО (Обороты.Счет = СтатьиБюджета.Счет)
				   |		
	               |"+?(ТекстОтбораОстатки="" И ТекстОтбораИтоги="","","ГДЕ")+"
	               |	"+?(ТекстОтбораОстатки="",""," И "+ТекстОтбораОстатки)+?(ТекстОтбораИтоги="" ИЛИ ТекстОтбораОстатки="",""," И ")+ТекстОтбораИтоги,"МеткаУровня",МеткаУровня);
	КонецЦикла;
	ТекстФормированияВременныхТаблиц =ТекстФормированияВременныхТаблиц+"
		|;
		|ВЫБРАТЬ
		|	Обороты.Счет КАК Счет"+СтрЗаменить(СтрЗаменить(ТекстИзмеренияИтоговые,".ДополнительныеРазрезы",""),"НАЧАЛОПЕРИОДА(Обороты.Период,"+мПериодичность+")","Обороты.ПериодПланирования")+ТекстВсеПоказатели+"
		|ИЗ ВТ_ПредварительныеОбороты КАК Обороты";
	Запрос.Текст = ТекстФормированияВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция Периодичность()
	Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) Тогда
			Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаДанных.ДанныеДляСравнения);
		КонецЕсли;
	КонецЦикла;
	Возврат Перечисления.фин_Периодичность.Месяц;
КонецФункции

Функция ПолучитьСКД(мГруппировки)
	//получаем схему компоновки данных
	СхемаКомпоновкиДанных=ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанныхОбъект;
	
	НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета("Счет",ЯзыкОтчета,СтруктураПеревода,КЭШ);
	НовоеПоле.ПутьКДанным	= "Счет";
	НовоеПоле.Поле			= "Счет";
	НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("ПланСчетовСсылка.фин_Бюджетирование");
	НовоеПоле.Роль.Измерение = Истина;
	НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеСчета(Счет,&ЯзыкОтчета)";
	
	Для Каждого СтрокаПоказатель Из Показатели Цикл
		СтрокиГрупп = Показатели.НайтиСтроки(Новый Структура("Показатель",СтрокаПоказатель.Показатель));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
			МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(?(СтрокаДанных.НомерСтроки=1,"Эталон","ИсполнениеАбсолютное"),ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения.Валюта)+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
			НовоеПоле.ПутьКДанным	= Имя+МеткаУровня;
			НовоеПоле.Поле			= Имя+МеткаУровня;
			НовоеПоле.ТипЗначения	= Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы.Найти(Имя).Тип;
			НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка 	= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Поле 			= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок 		= Истина; 
			НовоеПоле.ОграничениеИспользованияРеквизитов.Условие 		= Истина; 
			НовоеПолеИтога=СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			НовоеПолеИтога.ПутьКДанным=Имя+МеткаУровня;
			НовоеПолеИтога.Выражение="СУММА("+Имя+МеткаУровня+")";
			Если Имя = "ВалютнаяСумма" Тогда
				НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета("Валюта",ЯзыкОтчета,СтруктураПеревода,КЭШ);
				НовоеПоле.ПутьКДанным	= "Валюта";
				НовоеПоле.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка.Валюты");
				НовоеПоле.Поле			= "Валюта";
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Для Каждого СтрокаПоказатель Из мГруппировки Цикл
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Измерение);
		Если Имя = "Счет" Тогда
			Продолжить;
		КонецЕсли;
		СтрокиГрупп = мГруппировки.НайтиСтроки(Новый Структура("Измерение",СтрокаПоказатель.Измерение));
		Если СтрокиГрупп.Количество()>1 Тогда
			Если СтрокаПоказатель <> СтрокиГрупп[0] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Измерение,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(СтрокаПоказатель.Измерение);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		Если Имя = "ПериодПланирования" Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодПланирования,&Периодичность,&ЯзыкОтчета)";
		Иначе
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
		КонецЕсли;
		Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета("ЕдиницаИзмерения",ЯзыкОтчета,СтруктураПеревода,КЭШ);
			НовоеПоле.ПутьКДанным	= "ЕдиницаИзмерения";
			НовоеПоле.Поле			= "ЕдиницаИзмерения";
			НовоеПоле.ТипЗначения	= Метаданные.Справочники.Номенклатура.Реквизиты.БазоваяЕдиницаИзмерения.Тип;
			НовоеПоле.Роль.Измерение = Истина;
			НовоеПоле.Роль.РодительскоеИзмерение  = "Номенклатура";
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(ЕдиницаИзмерения,&ЯзыкОтчета)";
		КонецЕсли;
	КонецЦикла;
	Если ОсновнаяГруппировка<>Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет И ЗначениеЗаполнено(ОсновнаяГруппировка) И мГруппировки.НайтиСтроки(Новый Структура("Измерение",ОсновнаяГруппировка)).Количество()=0 Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
		НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		НовоеПоле.ПутьКДанным	= Имя;
		НовоеПоле.ТипЗначения	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(ОсновнаяГруппировка);
		НовоеПоле.Поле			= Имя;
		НовоеПоле.Роль.Измерение = Истина;
		Если Имя = "ПериодПланирования" Тогда
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПериодаСтрокойНаЯзыке(ПериодПланирования,&Периодичность,&ЯзыкОтчета)";
		Иначе
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке("+Имя+",&ЯзыкОтчета)";
		КонецЕсли;
		Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
			НовоеПоле=НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета("ЕдиницаИзмерения",ЯзыкОтчета,СтруктураПеревода,КЭШ);
			НовоеПоле.ПутьКДанным	= "ЕдиницаИзмерения";
			НовоеПоле.Поле			= "ЕдиницаИзмерения";
			НовоеПоле.ТипЗначения	= Метаданные.Справочники.Номенклатура.Реквизиты.БазоваяЕдиницаИзмерения.Тип;
			НовоеПоле.Роль.Измерение = Истина;
			НовоеПоле.Роль.РодительскоеИзмерение  = "Номенклатура";
			НовоеПоле.ВыражениеПредставления	= "фин_УправлениеОтчетамиБюджетирование.ПредставлениеПоляСтрокойНаЯзыке(ЕдиницаИзмерения,&ЯзыкОтчета)";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Функция ПолучитьНастройкиСКД()
	Настройки=КомпоновщикНастроек.Настройки;
	Настройки.Структура.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ОсновнаяГруппировка);
		ГруппировкаПоОсновномуПолю=Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоОсновномуПолю.Использование = Истина;
		ПолеОсновнаяГруппировка					=ГруппировкаПоОсновномуПолю.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеОсновнаяГруппировка.Использование	=Истина;
		ПолеОсновнаяГруппировка.Поле			=Новый ПолеКомпоновкиДанных(Имя);
		ВыбранноеПоле=ГруппировкаПоОсновномуПолю.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование	= Истина;
		ВыбранноеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(ОсновнаяГруппировка,ЯзыкОтчета,СтруктураПеревода,КЭШ);
		ВыбранноеПоле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
		Если Имя = "ПериодПланирования" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить(NULL);
			Список.Добавить('00010101');
			Отбор = ГруппировкаПоОсновномуПолю.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
			Отбор.ПравоеЗначение = Список;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		ИначеЕсли Имя<>"Счет" Тогда
				Если Показатели.Количество()>0 Тогда
					ГруппаОтбора =  ГруппировкаПоОсновномуПолю.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.Использование = Истина;
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					Для Каждого Показатель Из Показатели Цикл
						Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
							Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
							Отбор.Использование = Истина;
							Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
						КонецЦикла;
					КонецЦикла;
					ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					ГруппировкаПоОсновномуПолю.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
		КонецЕсли;
		Порядок = ГруппировкаПоОсновномуПолю.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Использование = Истина;
		Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ПолеОформления = ГруппировкаПоОсновномуПолю.УсловноеОформление.Элементы.Добавить();
		ПолеОформления.Использование = Истина;
		ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
		ДопПоле.Использование = Истина;
		ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = Новый Шрифт(,12,Истина);
		ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
		
		ТаблицаБюджета=ГруппировкаПоОсновномуПолю.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	Иначе	
		ТаблицаБюджета=Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	КонецЕсли;
	
	//добавляем таблицу
	
	ТаблицаБюджета.Использование=Истина;
	ТекущийРодительКолонки = ТаблицаБюджета.Колонки;
	ТекущийРодительСтроки = ТаблицаБюджета.Строки;
	
	ГруппировкаСтатья = Неопределено;
	
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
		Если Не (СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией) Тогда
			Продолжить;
		КонецЕсли;
		// как структура
	//	Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
			НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительКолонки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительКолонки.Добавить(),ТекущийРодительКолонки.Структура.Добавить());
			НоваяГруппировкаАналитикиОтчета.Использование = Истина;
			Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
			Иначе
				Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
				Для Каждого СтрокаПолей Из Поля Цикл
					ДопПоле = СтрокаПолей.Значение;
					Если ДопПоле="ЗначениеПоля" Тогда
						ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеРазрезаАналитики.Использование	=Истина;
						ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
					ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле));
					Иначе
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
				КонецЕсли;
			КонецЕсли;
			Если СтрокаГруппировки.ВидГруппировки=Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией И Имя <>"ПериодПланирования" Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия И Имя <>"ПериодПланирования"  Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			КонецЕсли;
			ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			ДопПоле.Использование = Истина;
			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) Тогда
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Расположение)];
			КонецЕсли;
			Если Имя = "Счет" Тогда
				ГруппировкаСтатья = НоваяГруппировкаАналитикиОтчета;
			Иначе
				Если Показатели.Количество()>0 Тогда
					ГруппаОтбора =  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.Использование = Истина;
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					Для Каждого Показатель Из Показатели Цикл
						Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
							Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
							Отбор.Использование = Истина;
							Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
						КонецЦикла;
					КонецЦикла;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
			КонецЕсли;
			Если Имя = "ПериодПланирования" Тогда
				Список = Новый СписокЗначений;
				Список.Добавить(NULL);
				Список.Добавить('00010101');
				Отбор = НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
				Отбор.ПравоеЗначение = Список;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Центр;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Центр;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
				ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
				ДопПоле.Использование = Истина;
				ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 7;
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 7;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Центр;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Центр;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			КонецЕсли;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			ТекущийРодительКолонки = НоваяГруппировкаАналитикиОтчета;
			
			СтрокаОформление = СтрокаГруппировки;
			Если СтрокаОформление.ПрименятьОформление Тогда
				ПолеОформления = НоваяГруппировкаАналитикиОтчета.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
			КонецЕсли;
	//	КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаГруппировки Из Группировки Цикл
		Если Не (СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией ИЛИ СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия) Тогда
			Продолжить;
		КонецЕсли;
		Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
		//Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
			НоваяГруппировкаАналитикиОтчета = ?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
			НоваяГруппировкаАналитикиОтчета.Использование = Истина;
			Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
			Иначе
				Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
				Для Каждого СтрокаПолей Из Поля Цикл
					ДопПоле = СтрокаПолей.Значение;
					Если ДопПоле="ЗначениеПоля" Тогда
						ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеРазрезаАналитики.Использование	=Истина;
						ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
					ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле));
					Иначе
						ДопПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ДопПолеРазрезаАналитики.Использование	=Истина;
						ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
				КонецЕсли;
			КонецЕсли;
			Если СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли СтрокаГруппировки.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия Тогда
				ПолеРазрезаАналитики.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			КонецЕсли;
			ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
			ПолеОформления.Использование = Истина;
			ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
			ДопПоле.Использование = Истина;
			ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
			Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) Тогда
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеПолейГруппировки").Значение = РасположениеПолейГруппировкиКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Расположение)];
			КонецЕсли;
			Если Имя = "Счет" Тогда
				ГруппировкаСтатья = НоваяГруппировкаАналитикиОтчета;
			Иначе
				Если Показатели.Количество()>0 Тогда
					ГруппаОтбора =  НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ГруппаОтбора.Использование = Истина;
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
					Для Каждого Показатель Из Показатели Цикл
						Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
							Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
							Отбор.Использование = Истина;
							Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
						КонецЦикла;
					КонецЦикла;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
			КонецЕсли;
			Если Имя = "ПериодПланирования" Тогда
				Список = Новый СписокЗначений;
				Список.Добавить(NULL);
				Список.Добавить('00010101');
				Отбор = НоваяГруппировкаАналитикиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				Отбор.Использование = Истина;
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
				Отбор.ПравоеЗначение = Список;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			КонецЕсли;
			Если ВыводитьГруппыСтатейВнизу Тогда
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Использование = Истина;
				НоваяГруппировкаАналитикиОтчета.ПараметрыВывода.Элементы.Найти("РасположениеГруппировки").Значение = РасположениеГруппировкиКомпоновкиДанных.Конец;
			КонецЕсли;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			
			Порядок = НоваяГруппировкаАналитикиОтчета.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Порядок.Использование = Истина;
			Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
			Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ?(Имя="Счет",ШиринаКолонкиСтатьиБюджета,ШиринаКолонкиРеквизита);
			ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ?(Имя="Счет",ШиринаКолонкиСтатьиБюджета,ШиринаКолонкиРеквизита);
			ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
			ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
			ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
				ПолеРазрезаАналитики=НоваяГруппировкаАналитикиОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеРазрезаАналитики.Использование	=Истина;
				ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
				ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
				ДопПоле.Использование = Истина;
				ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 7;
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 7;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
			КонецЕсли;
			//для созданной группировки добавляем автовыбор полей
			ВыбранныеПоляДляТекущей=НоваяГруппировкаАналитикиОтчета.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДляТекущей.Использование=Истина;
			ТекущийРодительСтроки = НоваяГруппировкаАналитикиОтчета;
			
			СтрокаОформление = СтрокаГруппировки;
			Если СтрокаОформление.ПрименятьОформление Тогда
				ПолеОформления = НоваяГруппировкаАналитикиОтчета.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
				ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
				ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
			КонецЕсли;
	//	КонецЕсли;
	КонецЦикла;
	
	Если Группировки.НайтиСтроки(Новый Структура("ВидГруппировки",Перечисления.фин_ВидыГруппировокОтчета.Поле)).Количество() >0 Тогда
		ГруппировкаАналитика=?(ТипЗнч(ТекущийРодительСтроки)=Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных"),ТекущийРодительСтроки.Добавить(),ТекущийРодительСтроки.Структура.Добавить());
		ГруппировкаАналитика.Использование=Истина;
		Если Показатели.Количество()>0 Тогда
			ГруппаОтбора =  ГруппировкаАналитика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.Использование = Истина;
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
			Для Каждого Показатель Из Показатели Цикл
				Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
					Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Показатель.Показатель)+Строка(СтрокаДанных.НомерСтроки));
				КонецЦикла;
			КонецЦикла;
			ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
			ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Для Каждого СтрокаГруппировки Из Группировки Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.Измерение);
			Если СтрокаГруппировки.ВидГруппировки <> Перечисления.фин_ВидыГруппировокОтчета.Поле Тогда
				Продолжить;
			КонецЕсли;
			//Если СтрокаГруппировки.Измерение <> ОсновнаяГруппировка Тогда
				Если (НЕ СтрокаГруппировки.СоставноеПоле) ИЛИ (НЕ ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав))=Тип("СписокЗначений")) ИЛИ ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав).Количество()=0 Тогда
					ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеРазрезаАналитики.Использование	=Истина;
					ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
				Иначе
					Поля = ЗначениеИзСтрокиВнутр(СтрокаГруппировки.Состав);
					Для Каждого СтрокаПолей Из Поля Цикл
						ДопПоле = СтрокаПолей.Значение;
						Если ДопПоле="ЗначениеПоля" Тогда
							ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеРазрезаАналитики.Использование	=Истина;
							ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(Имя);
						ИначеЕсли ТипЗнч(ДопПоле)<>Тип("Строка") Тогда
							ДопПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ДопПолеРазрезаАналитики.Использование	=Истина;
							ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДопПоле));
						Иначе
							ДопПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ДопПолеРазрезаАналитики.Использование	=Истина;
							ДопПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных(?(Найти(ДопПоле,".")<>0,СтрЗаменить(ДопПоле,"ЗначениеПоля",Имя),Имя+"."+ДопПоле));
						КонецЕсли;
					КонецЦикла;
					Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
						ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Использование = Истина;
						ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов").Значение = РасположениеРеквизитовКомпоновкиДанных[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаГруппировки.РасположениеРеквизитов)];
					КонецЕсли;
				КонецЕсли;
				ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
				ПолеОформления.Использование = Истина;
				ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
				ДопПоле.Использование = Истина;
				ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
				Если Имя = "ПериодПланирования" Тогда
					Список = Новый СписокЗначений;
					Список.Добавить(NULL);
					Список.Добавить('00010101');
					Отбор = ГруппировкаАналитика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
					Отбор.Использование = Истина;
					Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПланирования");
					Отбор.ПравоеЗначение = Список;
					ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
					ГруппировкаАналитика.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				КонецЕсли;
				
				Порядок = ГруппировкаАналитика.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				Порядок.Использование = Истина;
				Порядок.Поле = Новый ПолеКомпоновкиДанных(Имя);
				Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ?(Имя="Счет",ШиринаКолонкиСтатьиБюджета,ШиринаКолонкиРеквизита);
				ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ?(Имя="Счет",ШиринаКолонкиСтатьиБюджета,ШиринаКолонкиРеквизита);
				ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
				ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
				ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
				ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
				Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
					ПолеРазрезаАналитики=ГруппировкаАналитика.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеРазрезаАналитики.Использование	=Истина;
					ПолеРазрезаАналитики.Поле			=Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
					ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
					ПолеОформления.Использование = Истина;
					ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
					ДопПоле.Использование = Истина;
					ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
					ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = 7;
					ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = 7;
					ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
					ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
					ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Лево;
					ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
				КонецЕсли;
				
				СтрокаОформление = СтрокаГруппировки;
				Если СтрокаОформление.ПрименятьОформление Тогда
					ПолеОформления = ГруппировкаАналитика.УсловноеОформление.Элементы.Добавить();
					ПолеОформления.Использование = Истина;
					ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
					ДопПоле.Использование = Истина;
					ДопПоле.Поле  = Новый ПолеКомпоновкиДанных(Имя);
					Если Имя = "Номенклатура" И Показатели.НайтиСтроки(Новый Структура("Показатель",Перечисления.фин_РесурсыДанныхБюджетирования.Количество)).Количество()>0 Тогда
						ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
						ДопПоле.Использование = Истина;
						ДопПоле.Поле  = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
					КонецЕсли;
					ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Цвет);
					ПолеОформления.Оформление.Элементы.Найти("ЦветФона").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("Шрифт").Значение = ЗначениеИзСтрокиВнутр(СтрокаОформление.Шрифт);
					ПолеОформления.Оформление.Элементы.Найти("Шрифт").Использование = Истина;
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
		
		//для созданной группировки добавляем автовыбор полей
		ВыбранныеПоляДляТекущей=ГруппировкаАналитика.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДляТекущей.Использование=Истина;
	КонецЕсли;
	
	СоответствиеПользовательскихПолей = Новый Соответствие;
	
	КорневаяГруппаПолей = ТаблицаБюджета.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	КорневаяГруппаПолей.Использование	= Истина;
	//КорневаяГруппаПолей.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
	КорневаяГруппаПолей.Расположение	= ?(ПоказателиВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
	Для Каждого СтрокаПоказатель Из Показатели Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаПоказатель.Показатель);
			ГруппаПолей = КорневаяГруппаПолей.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаПолей.Использование	= Истина;
			ГруппаПолей.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(СтрокаПоказатель.Показатель,ЯзыкОтчета,СтруктураПеревода,КЭШ);
			ГруппаПолей.Расположение	= ?(АналитическиеПоляВОднойКолонке,РасположениеПоляКомпоновкиДанных.Вертикально,РасположениеПоляКомпоновкиДанных.Горизонтально);
			Для Каждого СтрокаДанных Из ДанныеОстатковДляАнализа Цикл
				МеткаУровня = Строка(СтрокаДанных.НомерСтроки);
				Если СтрокаДанных.НомерСтроки=1 Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого ВидАнализа Из ВидыАналитическихДанных Цикл
					ИмяВидаАнализа = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидАнализа.ВидДанных);
					ВыбранноеПоле=ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					ВыбранноеПоле.Использование	= Истина;
					ВыбранноеПоле.Заголовок		= фин_УправлениеОтчетамиБюджетирование.ПредставлениеКолонкиОтчета(ИмяВидаАнализа,ЯзыкОтчета,СтруктураПеревода,КЭШ,СтрокаДанных.ДанныеДляСравнения.Валюта)+?(СтрокаДанных.НомерСтроки>2," #"+МеткаУровня,"");
					Если ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон Тогда
						ВыбранноеПоле.Поле		= Новый ПолеКомпоновкиДанных(Имя+"1");
					ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное Тогда
						ВыбранноеПоле.Поле		= Новый ПолеКомпоновкиДанных(Имя+МеткаУровня);
					ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное Тогда
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = ВыбранноеПоле.Заголовок;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ (Сумма("+Имя+МеткаУровня+")/Сумма("+Имя+"1))*100 КОНЕЦ");
						ВыбранноеПоле.Поле		= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
					ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное Тогда
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = ВыбранноеПоле.Заголовок;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("Сумма("+Имя+МеткаУровня+") - Сумма("+Имя+"1)");
						ВыбранноеПоле.Поле		= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
					ИначеЕсли ВидАнализа.ВидДанных	= Перечисления.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное Тогда
						ПолеПользователя = Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
						ПолеПользователя.Заголовок = ВыбранноеПоле.Заголовок;
						ПолеПользователя.Использование = Истина;
						ПолеПользователя.УстановитьВыражениеИтоговыхЗаписей("ВЫБОР КОГДА Сумма("+Имя+"1)=0 ТОГДА 0 ИНАЧЕ ((Сумма("+Имя+МеткаУровня+")-Сумма("+Имя+"1))/Сумма("+Имя+"1))*100 КОНЕЦ");
						ВыбранноеПоле.Поле		= Новый ПолеКомпоновкиДанных(ПолеПользователя.ПутьКДанным);
					КонецЕсли;
					СоответствиеПользовательскихПолей.Вставить(Имя+ИмяВидаАнализа+МеткаУровня,ВыбранноеПоле.Поле);
					ПолеОформления = Настройки.УсловноеОформление.Элементы.Добавить();
					ПолеОформления.Использование = Истина;
					ДопПоле = ПолеОформления.Поля.Элементы.Добавить();
					ДопПоле.Использование = Истина;
					ДопПоле.Поле  = ВыбранноеПоле.Поле;
					ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
					ПолеОформления.Оформление.Элементы.Найти("МинимальнаяШирина").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Значение = ШиринаКолонкиПоказателя;
					ПолеОформления.Оформление.Элементы.Найти("МаксимальнаяШирина").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("Формат").Значение = ?(СтрокаПоказатель.Показатель="Количество","ЧЦ=15; ЧДЦ=3","ЧЦ=15; ЧДЦ=2");
					ПолеОформления.Оформление.Элементы.Найти("Формат").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("Размещение").Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
					ПолеОформления.Оформление.Элементы.Найти("Размещение").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Значение = ВертикальноеПоложение.Верх;
					ПолеОформления.Оформление.Элементы.Найти("ВертикальноеПоложение").Использование = Истина;
					ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Значение = ГоризонтальноеПоложение.Право;
					ПолеОформления.Оформление.Элементы.Найти("ГоризонтальноеПоложение").Использование = Истина;
					
					//Поле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					//Поле.Использование	= Истина;
					//Поле.Заголовок		= СтрокаПоказатель.Показатель;
					//Поле.Поле			= Новый ПолеКомпоновкиДанных(Имя);
				КонецЦикла;
				
			КонецЦикла;
	КонецЦикла;
	
	//	
	//новые значения параметров вывода
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение= ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=фин_БюджетированиеОбщегоНазначения.ПолучитьМакетОформленияУпр();
	
	ПараметрВывода=Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	ПараметрВывода.Использование=Истина;
	ПараметрВывода.Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Периодичность",Периодичность());
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЯзыкОтчета",ЯзыкОтчета);
	
	Возврат Настройки;
КонецФункции

Процедура Скомпоновать(ДокументРезультат,Отбор) Экспорт
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован!");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОтбор Из Отбор Цикл
		СтрокаОтбор.Путь = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора);
	КонецЦикла;
	
	//ВЫБОР СХЕМЫ КОМПОНОВКИ И НАСТРОЙКА ПОЛЕЙ НАБОРА ДАННЫХ
	
	//Если Не ЗначениеЗаполнено(Параметр_Сценарий.Значение) Тогда
	//	Сообщить("Не указан сценарий!");
	//	Возврат;
	//КонецЕсли;
	
	мГруппировки = фин_УправлениеОтчетамиБюджетирование.ПромежуточныеГруппировкиОтчета(Группировки,ОсновнаяГруппировка);
	ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуДанных(Отбор,мГруппировки);
	СхемаКомпоновкиДанных = ПолучитьСКД(мГруппировки);
	Настройки = ПолучитьНастройкиСКД();

	//ПОДГОТОВКА К ВЫПОЛНЕНИЮ - ФОРМИРОВАНИЕ МАКЕТА КОМПОНОВКИ
	Заголовок=фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина("СравнительныйАнализОстатков",ЯзыкОтчета,,КЭШ)+": "+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(СтатьяБаланса,ЯзыкОтчета,,КЭШ)+Символы.ПС+фин_УправлениеМногоязычнымиОтчетами.ПолучитьПереводТермина(ЗаголовокОтчета,ЯзыкОтчета,,КЭШ);
	фин_УправлениеОтчетамиБюджетирование.ВыполнитьФормированиеОтчета(ЭтотОбъект,СхемаКомпоновкиДанных,КомпоновщикНастроек,Настройки,ДанныеРасшифровки,ДокументРезультат,ТаблицаВнешнегоНабораДанных,,Заголовок);	
	
КонецПроцедуры

Функция ПолеИзмерение(ИмяПоля,СПсевдонимом=Истина)
	Возврат "ВЫБОР
		|		КОГДА СтатьиБюджета.ВидСубконто1 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто1
		|		КОГДА СтатьиБюджета.ВидСубконто2 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто2
		|		КОГДА СтатьиБюджета.ВидСубконто3 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто3
		|		КОГДА СтатьиБюджета.ВидСубконто4 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто4
		|		КОГДА СтатьиБюджета.ВидСубконто5 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто5
		|		ИНАЧЕ &ПустоеЗначение"+ИмяПоля+"
		|	КОНЕЦ"+?(СПсевдонимом," КАК "+ИмяПоля,"");
КонецФункции

Функция ПолеЕдиницыИзмерения(СПсевдонимом=Истина)
	ИмяПоля = "Номенклатура";
	Возврат "ВЫБОР
		|		КОГДА СтатьиБюджета.ВидСубконто1 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто1."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
		|		КОГДА СтатьиБюджета.ВидСубконто2 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто2."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
		|		КОГДА СтатьиБюджета.ВидСубконто3 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто3."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
		|		КОГДА СтатьиБюджета.ВидСубконто4 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто4."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
		|		КОГДА СтатьиБюджета.ВидСубконто5 = &ВидСубконто"+ИмяПоля+"
		|			ТОГДА Обороты.Субконто5."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+"
		|		ИНАЧЕ &ПустаяЕдиницаИзмерения
		|	КОНЕЦ"+?(СПсевдонимом," КАК ЕдиницаИзмерения","");
КонецФункции

ДоступныеПоказатели = Новый СписокЗначений;
ДоступныеГруппировки = Новый СписокЗначений;
ПереченьОсновныхРеквизитов = Новый Массив;
ПереченьОсновныхРеквизитов.Добавить("СтатьяБаланса");
ЗаполнениеПараметров = Новый Структура;
ЗаполнениеПараметров.Вставить("ЯзыкОтчета",фин_ОбщегоНазначенияСервер.ОсновнойЯзыкОтчетов());
ЗаполнениеПараметров.Вставить("ШиринаКолонкиПоказателя",12);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиРеквизита",25);
ЗаполнениеПараметров.Вставить("ШиринаКолонкиСтатьиБюджета",25);

ДополнительныеПараметры = Новый Массив;
//ДополнительныеПараметры.Добавить("ГраницаАктуальности");
ДополнительныеПараметры.Добавить("Периодичность");
ДополнительныеПараметры.Добавить("ЯзыкОтчета");

ПараметрыОформления = Новый Массив;
ПараметрыОформления.Добавить("ЗаголовокОтчета");
ПараметрыОформления.Добавить("ВыводитьКодыСтрокБюджета");
ПараметрыОформления.Добавить("УпорядочиваниеСтатей");
ПараметрыОформления.Добавить("ШиринаКолонкиРеквизита");
ПараметрыОформления.Добавить("ШиринаКолонкиСтатьиБюджета");
ПараметрыОформления.Добавить("ШиринаКолонкиПоказателя");
ПараметрыОформления.Добавить("ВыводитьГруппыСтатейВнизу");
ПараметрыОформления.Добавить("АналитическиеПоляВОднойКолонке");
ПараметрыОформления.Добавить("ПоказателиВОднойКолонке");

ДанныеРасшифровкиМакета = Новый Соответствие;

КЭШ = Новый Соответствие;

ДополнительныеПредставления = Новый СписокЗначений;

ОтборыРасшифровки = Новый Массив;

ТаблицаОтбора = Новый ТаблицаЗначений;
ТаблицаОтбора.Колонки.Добавить("Поле");
ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
ТаблицаОтбора.Колонки.Добавить("Значение");
