#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

// Следующие переменные хранят границы
// периода построения отчета
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мВерсияФормы Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мТаблицаСтраницНаПечать Экспорт;

Перем ВсегоСтраниц Экспорт;

//Хранит количество строк многострочной части
Перем КоличествоСтрок Экспорт;
Перем КоличествоСтрок3Раздел Экспорт;

// Хранит ФИО исполнителя 
Перем мИсполнитель Экспорт;

//Переменная хранит значение константы ПоддержкаРаботыСоСтруктурнымиПодразделениями
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// Хранит список структурных единиц, по которым стоится отчет
Перем мСписокСтруктурныхЕдиниц Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция получает основные сведения о выбранной организации
// 
Функция ЗаполнитьСведенияОбОрганизации()Экспорт
	
	Если (Организация  = Неопределено) Или (Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в отчетную форму
	Сведения = Новый СписокЗначений;
			
	Сведения.Добавить("", "НаимЮЛПол"); // Полное название организации
			
	Сведения.Добавить("", "АдрЮР"); // Юридический адрес
	
	Сведения.Добавить("", "ТелОрганизации"); // Телефон организации
	
	Сведения.Добавить("", "ФИОБухКраткое"); // ФИО гл. бухгалтера
	
	Сведения.Добавить("", "ФИОРукКраткое"); // ФИО руководителя
	
	Сведения.Добавить("", "ИИН_БИН"); // БИН организации
	
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = ОбщегоНазначения.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), Сведения);
    ВидЭконДеят = Организация.ОсновнойВидДеятельности.ПолноеНаименование;
	КодОКЭД = Организация.ОсновнойВидДеятельности.КодОКЭД;
	АдресныеСведения = ОбщегоНазначения.ПолучитьАдресныеСведенияОрганизации(Организация);
	ОргСведения.Вставить("ВидЭконДеят", ВидЭконДеят);
	ОргСведения.Вставить("КодОКЭД", КодОКЭД);
	ОргСведения.Вставить("АдрФакт", АдресныеСведения.ИнформАдрес);
	
	Возврат ОргСведения;
	
КонецФункции // ЗаполнитьСведенияОбОрганизации


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

мСписокСтруктурныхЕдиниц = Новый СписокЗначений;

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

// Таблица значений хранит состав показателей отчета.
// В колонках таблицы хранятся следующие данные:
//    - имя поля табличного документа;
//    - код показатели по составу показателей;
//    - код показателя по форме (имя области табличного документа);
//    - признак многострочности;
//    - тип данных показателя.
//
мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",ОписаниеТиповСтрока50);

мСтруктураВариантыЗаполнения = Новый Структура;

мТаблицаСтраницНаПечать = Новый ТаблицаЗначений;
мТаблицаСтраницНаПечать.Колонки.Добавить("ПолеТабличногоДокумента");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛиста");
мТаблицаСтраницНаПечать.Колонки.Добавить("ИмяЛистаДляЗаписи");


ВсегоСтраниц = 0;

// определим ФИО исполнителя
Запрос =  Новый Запрос;
Запрос.УстановитьПараметр("Исполнитель", глТекущийПользователь.ФизЛицо);
Запрос.Текст = "
	|ВЫБРАТЬ
	|	ФИОФИзЛиц.Фамилия,
	|	ФИОФИзЛиц.Имя,
	|	ФИОФИзЛиц.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Исполнитель) КАК ФИОФизЛиц
	|";

Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	мИсполнитель = Выборка.Фамилия + ?(Выборка.Имя <> "", " " + Лев(Выборка.Имя, 1) + ".", "") + ?(Выборка.Отчество <> "", " " + Лев(Выборка.Отчество, 1) + ".", "");
Иначе
	Если глТекущийПользователь.ФизЛицо.Пустая() Тогда
		мИсполнитель = глТекущийПользователь.Наименование;
	Иначе
		мИсполнитель = глТекущийПользователь.ФизЛицо.Наименование;
	КонецЕсли;
КонецЕсли;

#КонецЕсли
