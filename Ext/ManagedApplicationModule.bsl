
// СтандартныеПодсистемы.ФайловыеФункции
// Признак того, что в данном сеансе не нужно повторно делать проверку доступа к каталогу на диске
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт;
// Конец СтандартныеПодсистемы.ФайловыеФункции


Перем глЗапрашиватьПодтверждениеПриЗакрытии; // запрашивать
Перем глТекущийПользователь Экспорт;   //текущий пользователь
Перем АдресРесурсовОбозревателя Экспорт;  // адрес
Перем глОбщиеЗначения Экспорт;  // хранилище общих значений

// Учет ведется по одной организации - или по нескольким.
Перем УчетПоВсемОрганизациям Экспорт; // признак учета по всем организациям
Перем ОсновнаяОрганизация Экспорт;    // основная организация

// Переменная для использования в отраслевых решениях, в типовой конфигурации не используется
Перем глХранилищеЗначений Экспорт; // Переменная для использования в отраслевых решениях, в типовой конфигурации не используется
// список префиксов узлов
Перем глСписокПрефиксовУзлов Экспорт;  // список префиксов узлов

// обработка обмена данными
Перем глОбработкаАвтоОбменДанными Экспорт; // обработка обмена данными

// переменная для проверки на создание нового пользователя
Перем СтарыйПользователь;         // признак
Перем ИмяНовогоПользователя;      // имя

Перем СеансовыеДанныеЭСФ Экспорт;


// Процедура - обработчик события "ПередНачаломРаботыСистемы"
// 
Процедура ПередНачаломРаботыСистемы(Отказ)
	
 	Если фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("ПолныеПрава") Тогда
		СтарыйПользователь = Вычислить("ПолныеПрава.ПроверитьПользователей(ИмяНовогоПользователя)");
	Иначе
		СтарыйПользователь = куфиб_ПолныеПрава.ПроверитьПользователей(ИмяНовогоПользователя);
	КонецЕсли;
	
	ПервыйЗапуск = (фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("НомерВерсииКонфигурации")="");
	Если ПервыйЗапуск ИЛИ (фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("НомерВерсииКонфигурации") <> фин_ОбщегоНазначенияСервер.ВерсияМетаданных())
		Тогда
		Предупреждение("Обновление системы не может быть произведено в управляемом режиме! Работа будет завершена");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ СтарыйПользователь Тогда 
		Предупреждение("В программе не обнаружено ни одного пользователя!" +Символы.ПС+"Был создан пользователь """+ИмяНовогоПользователя+""".");
	КонецЕсли;
	
	Если СтарыйПользователь Тогда 
		
		Если фин_ОбщегоНазначенияСервер.ПроверкаНазначенияРолиПользователь() Тогда
			Предупреждение("Вам не назначена роль ""Пользователь"". Запуск конфигурации невозможен!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если фин_ОбщегоНазначенияСервер.ПроверкаНазначенияРолиТолькоПросмотрБазовыеФункции() Тогда
			Предупреждение("Вам не назначена роль ""Только просмотр (базовые функции)"". Запуск конфигурации невозможен!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если фин_ОбщегоНазначенияСервер.ПроверкаРолейПомимоТолькоПросмотра() Тогда
			Предупреждение("Роль ""Пользователь"" не является самостоятельной и должна назначаться совместно с ролями ""Бухгалтер"" или ""Главный бухгалтер"". 
								|Запуск конфигурации невозможен!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// проверка назначенности еще каких-либо смысловых ролей, кроме дополнительных.
		Если фин_ОбщегоНазначенияСервер.ПроверкаРольДоступна("Пользователь") И НЕ фин_ОбщегоНазначенияСервер.ПроверкаРольДоступна("ПолныеПрава") Тогда		
			
			// Если кроме роли Пользователь не назначено ни одной смысловой роли - не запускаем конфигурацию
			//- так как некоторые алгоритмы  не ориентированы на работу в таком режиме
			Если НЕ фин_ОбщегоНазначенияСервер.ЗапускПользователяВозможен() Тогда
				//Предупреждение("Роль ""Пользователь"" не является самостоятельной и должна назначаться совместно с ролями ""Бухгалтер"" или ""Главный бухгалтер"". 
				//				|Запуск конфигурации невозможен!");
				Предупреждение("Роль ""Только просмотр"" не может быть назначена совместно с другими ролями. 
								|Запуск конфигурации невозможен!");
				Отказ = Истина;
				
				Возврат;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ПередНачаломРаботыСистемы()

// Процедура - обработчик события "ПриНачалеРаботыСистемы"
//
Процедура ПриНачалеРаботыСистемы()
	
	Если СтарыйПользователь Тогда 
 		Если фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("КонтрольВерсииПлатформы") Тогда
			КонтрольВерсииПлатформы.ПроверитьВерсиюПлатформы();
		КонецЕсли;

		// инициализация глобальной переменной
		// глТекущийПользователь
		фин_ОбщегоНазначенияСервер.УстановитьТекущегоПользователя();
		ПервыйЗапуск = (фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("НомерВерсииКонфигурации")="");
			
		глТекущийПользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь");
		
		ЭтоФайловаяИБ = куфиб_ОбщегоНазначения.ИнформационнаяБазаФайловая();
		
		Если ЭтоФайловаяИБ Тогда
			
			//ПользовательДляВыполненияРеглЗаданий = ОбщегоНазначения.ПолучитьЗначениеПеременной("ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте");
			//
			//Если глТекущийПользователь = ПользовательДляВыполненияРеглЗаданий Тогда
			//	
			//	// с интервалом секунд вызываем процедуру работы с регламентными заданиями
			//	ВыполнитьОбработкуЗаданий();
			//	
			//	
			//	ИнтервалДляОпроса = ОбщегоНазначения.ПолучитьЗначениеПеременной("ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте");
			//	
			//	Если ИнтервалДляОпроса = Неопределено
			//		ИЛИ ИнтервалДляОпроса = 0 Тогда
			//		
			//		ИнтервалДляОпроса = 60;	
			//		
			//	КонецЕсли;
			//	
			//	ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
		// автообмен данными
		Если куфиб_ОбщегоНазначенияСервер.ОбменДаннымиДоступен() Тогда
			
			// подключим обработчик обменов данными
			КоличествоСекундОпроса = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте");
			ПодключитьОбработчикОжидания("ПроверкаОбменаДанными",?(КоличествоСекундОпроса=0,60,КоличествоСекундОпроса));
			
		КонецЕсли;
		
		Если фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("ОбщегоНазначения") Тогда
			ОбщегоНазначения.ЗначениеСпискаПрефиксовУзлов(глСписокПрефиксовУзлов, Истина);
		КонецЕсли;
		
		ОсновнаяОрганизация    = куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		
		УчетПоВсемОрганизациям = куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"), "УчетПоВсемОрганизациям");
		//ПроверитьНаличиеОбновлений();   
		
		ЗаголовокСистемы = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ЗаголовокСистемы");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			Попытка
				ЗаголовокСистемы = ЗаголовокСистемы + " / " + СокрЛП(ОсновнаяОрганизация);
			Исключение
			КонецПопытки;
		КонецЕсли;
		куфиб_ОбщегоНазначенияСервер.НастройкаЗаголовка(ЗаголовокСистемы);
		УстановитьЗаголовокПриложения(ЗаголовокСистемы);
		// - БП - начало
		общ_ЗапускИОбновлениеИнформационнойБазы.ИнициализироватьПодсистемуБюджетированиеПредприятия();
		// - БП – конец		
			
		
		//УправлениеСоединениямиИБ.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();

		// Подключение обработчик напоминания о событиях
		ПроверитьПодключениеОбработчикаОжидания();
		ЭСФКлиент.ПриНачалеРаботыСистемыЭСФ();
		
	Иначе 
		ЗавершитьРаботуСистемы(Ложь,Истина,);
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРаботыСистемы()




///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
//
Процедура ПроверкаОбменаДанными() Экспорт

	Если НЕ куфиб_ОбщегоНазначенияСервер.ОбменДаннымиДоступен() Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	куфиб_ОбщегоНазначенияСервер.ПровестиОбменДанными(); 
		
	КоличествоСекундОпроса = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте");
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", ?(КоличествоСекундОпроса=0,60,КоличествоСекундОпроса));

КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глТекущийПользователь) Тогда
		куфиб_ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");

	Иначе
		глТекущийПользователь.ПолучитьФорму().Открыть();

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

//Процедура ПередЗавершениемРаботыСистемы
//
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПодтверждение = куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЗапрашиватьПодтверждениеПриЗакрытии");
		
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		Если ЗапрашиватьПодтверждение=Истина Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Отказ) И куфиб_ОбщегоНазначенияСервер.ОбменДаннымиДоступен() Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		куфиб_ОбщегоНазначенияСервер.ВыполнитьОбменПриЗавершенииРаботыПрограммы(); 
			
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт
	
	ИнтервалПроверкиНапоминанийВСекундах = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИнтервалПроверкиНапоминанийВСекундах");
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь") <> Неопределено
		И ТипЗнч(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь").Пустая()
		И куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"),"ИспользоватьНапоминания")
		И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);
		
		//УправлениеКонтактами.ПроверитьНапоминанияПользователя(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"));
		//усд_ПроцедурыСогласованияКлиент.ПроверитьНапоминанияПользователя();
		фин_ПроцедурыМеханизмовБюджетированияТонкийКлиент.ПроверитьНапоминанияПользователя();
		усд_ПроцедурыСогласованияКлиент.ПроверитьНапоминанияПользователяСогласование();
	Иначе
		
		ОтключитьОбработчикОжидания("ПроверитьНапоминания");
		
	КонецЕсли; 
	
КонецПроцедуры


АдресРесурсовОбозревателя = "AccountingHRMKz";

глОбработкаАвтоОбменДанными = Неопределено;

СтарыйПользователь = Истина;
ИмяНовогоПользователя = "Администратор";