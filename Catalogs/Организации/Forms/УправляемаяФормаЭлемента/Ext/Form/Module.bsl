&НаКлиенте
Перем мОбработкаТайпингаВидаКИ;
&НаКлиенте
Перем мТекстТайпингаВидаКИ;
&НаКлиенте
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;
&НаКлиенте
Перем мКнопкаРедактироватьКИВДиалоге;
&НаКлиенте
Перем мТекущийЛоготип;
&НаКлиенте
Перем мПустаяКартинка;
&НаКлиенте
Перем мЖирныйШрифт;

&НаСервере
Функция ПолучитьОпределения(парам,парамзнач)
	Если парам = "Перечисления.ЮрФизЛицо.ЮрЛицо" Тогда
		Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	Если парам = "Справочники.Контрагенты.НайтиПоРеквизиту(РНН)" Тогда
		Возврат Справочники.Контрагенты.НайтиПоРеквизиту("РНН", Объект.РНН);
	КонецЕсли;
	Если парам = "Объект.ОсновнойВидДеятельности.КодОКЭД" Тогда
		Возврат Объект.ОсновнойВидДеятельности.КодОКЭД;
	КонецЕсли;
	Если парам = "Объект.ОсновнойВидДеятельности.ПолноеНаименование" Тогда
		Возврат Объект.ОсновнойВидДеятельности.ПолноеНаименование;
	КонецЕсли;
	Если парам = "Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение" Тогда
	    Возврат Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
	КонецЕсли;
	Если парам = "Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных)" Тогда
	    Возврат Новый ХранилищеЗначения(парамзнач, Новый СжатиеДанных);
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
Процедура ЗаписатьКонтрагентаОрганизации(Отказ)
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = Объект.Ссылка;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	Если Не КонтрагентОрганизации.Пустая() Тогда
		Если НаборЗаписей.Количество() = 0 Тогда
  			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Объект.Ссылка;
			НоваяЗапись.Контрагент = КонтрагентОрганизации;
		Иначе
			НаборЗаписей[0].Контрагент = КонтрагентОрганизации;
		КонецЕсли;
	Иначе
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЕсли;
	НаборЗаписей.Записать();
КонецПроцедуры

// Процедура получения контрагента, соответствующего организации
//
&НаСервере
Процедура ПрочитатьКонтрагентаОрганизации()
	Если Не Объект.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение = Объект.Ссылка;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура считывает данные о ФИО 
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
&НаСервере
Процедура ОбновитьФИО()
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФИОФизЛицСрезПоследних.Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество,
	               |	ФИОФизЛицСрезПоследних.Фамилия,
	               |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицоФИО
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Ссылка) КАК ФИОФизЛицСрезПоследних
	               |		ПО Организации.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	               |
	               |ГДЕ
	               |	Организации.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ФизЛицоФИО <> Неопределено Тогда
			Фамилия = Выборка.Фамилия;
			Имя = Выборка.Имя;
			Отчество = Выборка.Отчество;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбновитьФИО

// Процедура устанавливает в поле картинки логотип организации
//
&НаСервере
Процедура ПоказатьЛоготип(мПустаяКартинка,мТекущийЛоготип)
	Если мТекущийЛоготип = Неопределено Тогда
		Элементы.Логотип.Картинка = мПустаяКартинка;
	Иначе
		Элементы.Логотип.Картинка = мТекущийЛоготип;
	КонецЕсли;
КонецПроцедуры // ПоказатьОсновноеИзображение()

// Процедура устанавливает значени текстовых полей для представления вида деятельности организации
//
&НаКлиенте
Процедура ПоказатьПредставлениеВидаДеятельности()
	Если Объект.ОсновнойВидДеятельности.Пустая() Тогда
		ПредставлениеОКЭД = "<укажите вид деятельности>";
		ПредставлениеВидаДеятельности = "<укажите вид деятельности>";
	Иначе
		ПредставлениеОКЭД = ?(НЕ ЗначениеЗаполнено(ПолучитьОпределения("Объект.ОсновнойВидДеятельности.КодОКЭД",)), "<не указан код ОКЭД для вида деятельности>",ПолучитьОпределения("Объект.ОсновнойВидДеятельности.КодОКЭД",));
		ПредставлениеВидаДеятельности = ?(НЕ ЗначениеЗаполнено(ПолучитьОпределения("Объект.ОсновнойВидДеятельности.ПолноеНаименование",)), "<не указано полное наименование вида деятельности>",ПолучитьОпределения("Объект.ОсновнойВидДеятельности.ПолноеНаименование",));
	КонецЕсли;	
КонецПроцедуры // ПоказатьПредставлениеВидаДеятельности

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета()
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Элементы.СчетаСделатьОсновным.Доступность = Ложь;
	Иначе
		Элементы.СчетаСделатьОсновным.Доступность = НЕ (Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка = Объект.ОсновнойБанковскийСчет);
	КонецЕсли; 
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основной кассы счета.
//
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновнойКассы()
	Если Элементы.Кассы.ТекущиеДанные = Неопределено Тогда
		Элементы.КассыСделатьОсновным.Доступность = Ложь;
	Иначе
		Элементы.КассыСделатьОсновным.Доступность = НЕ (Элементы.Кассы.ТекущиеДанные.Ссылка = Объект.ОсновнаяКасса);
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
&НаСервере
Функция ЕстьПравоНаОткрытие(глТекущийПользователь)
	// нужно проверить, есть ли у пользователя доступ к данным организации
	Если Не Объект.Ссылка.Пустая() Тогда
		Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей 
			И (Не РольДоступна("ПолныеПрава")) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТекущаяТаблица.Ссылка
			               |ИЗ
			               |	Справочник.Организации КАК ТекущаяТаблица
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |			СоставГруппы.Ссылка КАК ГруппаПользователей
			               |		ИЗ
			               |			Справочник.ГруппыПользователей.ПользователиГруппы КАК СоставГруппы
			               |		ГДЕ
			               |			СоставГруппы.Пользователь = &ТекПользователь) КАК ГруппыПользователей
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	(НЕ ГруппыПользователей.ГруппаПользователей ЕСТЬ NULL )
			               |	И (НЕ 1 В
			               |				(ВЫБРАТЬ ПЕРВЫЕ 1
			               |					1
			               |				ИЗ
			               |					РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			               |						ПО
			               |							НастройкиПравДоступаПользователей.ОбъектДоступа = &ТекОрганизация
			               |								И НастройкиПравДоступаПользователей.ВидОбъектаДоступа = НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
			               |								И НастройкиПравДоступаПользователей.ОбластьДанных = ЗНАЧЕНИЕ(Перечисление.ОбластиДанныхОбъектовДоступа.ОрганизацииДанные)
			               |								И НастройкиПравДоступаПользователей.Пользователь = ГруппыПользователей.ГруппаПользователей
			               |								И НастройкиПравДоступаПользователей.Запись = ИСТИНА
			               |				ГДЕ
			               |					НазначениеВидовОбъектовДоступа.ГруппаПользователей = ГруппыПользователей.ГруппаПользователей
			               |					И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа В (ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
			               |					И НастройкиПравДоступаПользователей.ОбъектДоступа ЕСТЬ NULL ))";
						   
			Запрос.УстановитьПараметр("ТекОрганизация", Объект.Ссылка);
			Запрос.УстановитьПараметр("ТекПользователь", глТекущийПользователь);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	Возврат Истина;
КонецФункции

// Обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мПустаяКартинка = Новый Картинка;
	мОбработкаТайпингаВидаКИ                 = Ложь;
	мТекстТайпингаВидаКИ                     = "";
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
	мЖирныйШрифт  = Новый Шрифт(,, Истина);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОрганизацияСсылка", Объект.Ссылка);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнойБанковскийСчет);
	Кассы.Параметры.УстановитьЗначениеПараметра("ОрганизацияСсылка", Объект.Ссылка);
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнаяКасса);
	Если Объект.Ссылка.Пустая() Тогда
		ОсновнойБанковскийСчет	= Неопределено;	
		ОсновнаяКасса			= Неопределено;	
		ЮрФизЛицо				= ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
	ОбновитьФИО();
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ПолучитьСписокГоловныхОрганизаций().ВыгрузитьЗначения());
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;
	ПоказатьПредставлениеВидаДеятельности();
	ОтобразитьЛоготип(мПустаяКартинка,мТекущийЛоготип);
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ПрочитатьКонтрагентаОрганизации();
	ОбновитьНадписьГоловнойОрганизацииДляЦелейНДС();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЛоготип(мПустаяКартинка,мТекущийЛоготип)
	// Выведем логотип организации
	мТекущийЛоготип = Объект.Логотип.Хранилище.Получить();
	ПоказатьЛоготип(мПустаяКартинка,мТекущийЛоготип);
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи"
//
&НаКлиенте
Процедура ПослеЗаписи()
	//глЗначениеПеременнойУстановить("глУчетнаяПолитикаПоПерсоналуОрганизации", ПолныеПрава.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации(), Истина);
	ОбновитьНадписьГоловнойОрганизацииДляЦелейНДС();
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
&НаКлиенте
Процедура ПриЗаписи(Отказ)
	СпасМодифицированность = Модифицированность;
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		РНН = Объект.ИндивидуальныйПредприниматель.РНН;
	КонецЕсли;
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		КодОКПО = "";
		ГоловнаяОрганизация = Неопределено;
		Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
			Предупреждение("Не указано физическое лицо!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;  
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		ИндивидуальныйПредприниматель = Неопределено;
	КонецЕсли;
	Модифицированность = СпасМодифицированность;
	Если Объект.Модифицированность() Тогда
		Записать();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(мОбъектКИ) И ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.Организации") Тогда
		мОбъектКИ = Объект.Ссылка;
	КонецЕсли;
	//куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);	
	//ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);	
	куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка, Отказ);
	Если Отказ Тогда 
		Сообщить("Проверьте корректность заполнения контактной информации, возможно у одной из записей не установлен вид контактной информации", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
		
	ЗаписатьКонтрагентаОрганизации(Отказ);
	
КонецПроцедуры
                    
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Процедура - обработчик нажатия кнопки "Права" командлной панели
//
&НаКлиенте
Процедура КоманднаяПанельФормыПрава(Команда)
	Если куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Обраблотчик нажатия на кнопки "ОсновныеНастройки.
//
&НаКлиенте
Процедура ФормыДействиеОсновныеНастройки(Команда)
	//Отчет = Отчеты.ОсновныеНастройкиОрганизации.Создать();
	//Отчет.Организация = Объект.Ссылка;
	//ФормаОтчета = Отчет.ПолучитьФорму();
	//Отчет.СформироватьОтчет(ФормаОтчета.Элементы.ПолеТабличногоДокумента);
	//ФормаОтчета.Открыть();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, Элементы.КонтактнаяИнформацияСделатьОсновным);
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПередНачаломДобавленияОбработкаДоступностиЭлементовОбщее(Отказ, Элемент, Объект.Ссылка, Копирование, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка)
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииПередНачаломИзменения(Элемент, Отказ)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Объект.Ссылка,Элемент, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка, ложь,,Ложь)
КонецПроцедуры

// Обработчик нажатия на кнопку УстановитьОсновным командной панели КоманднаяПанельКонтактнаяИнформация.
//
&НаКлиенте
Процедура КоманднаяПанельКонтактнаяИнформацияУстановитьОсновным(Кнопка)
	//куфиб_УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, Элементы.КонтактнаяИнформация, Кнопка);
	//УстановитьЗаписьОсновной(НаборКонтактнойИнформации, Элементы.КонтактнаяИнформация, Кнопка);
	ТабличноеПоле = Элементы.КонтактнаяИнформация;
	НаборЗаписей = НаборКонтактнойИнформации;
	Если ТабличноеПоле.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
		Иначе
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			//Кнопка.Пометка = Истина;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ОбновитьКИ(мОбъектКИ,ЗначениеКопирования=Неопределено)
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
			ОбъектКИ = Неопределено;
		Иначе
			ОбъектКИ = Объект.ИндивидуальныйПредприниматель;
		КонецЕсли;
	Иначе
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ОбъектКИ = ЗначениеКопирования;
		Иначе
			ОбъектКИ = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	Если ОбъектКИ = Неопределено Тогда
		Элементы.КонтактнаяИнформация.Видимость = Ложь;
	Иначе		
		Элементы.КонтактнаяИнформация.Видимость = Истина;
		//куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
		//ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
		куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации,Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Процедура обновляет данные заголовка о головной организации
// на странице основных значений
&НаКлиенте
Процедура ОбновитьНадписьГоловнойОрганизацииДляЦелейНДС()
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда		
		НадписьГоловнаяОрганизация = СокрЛП(Объект.ГоловнаяОрганизация)	
	Иначе
		НадписьГоловнаяОрганизация = "Не указана."
	КонецЕсли;                                   	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОсновнойВидДеятельности.
//
&НаКлиенте
Процедура ОсновнойВидДеятельностиПриИзменении(Элемент)
	ПоказатьПредставлениеВидаДеятельности();
КонецПроцедуры // ОсновнойВидДеятельностиПриИзменении

// Обработчик события ПриИзменении элемента формы ИностраннаяОрганизация.
//
&НаКлиенте
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов управления формы 
// в зависимости от значений реквизитов.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()
	//ЭтоФизЛицо = (Объект.ЮрФизЛицо = ПолучитьОпределения("Перечисления.ЮрФизЛицо.ФизЛицо",));
	ЭтоФизЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
	Элементы.ИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	Элементы.ИностраннаяОрганизация.Видимость  = Не ЭтоФизЛицо;
	Если ЭтоФизЛицо Тогда
		Элементы.РНН.Доступность 							= Ложь;
		//Элементы.НадписьРНН.Доступность 					= Ложь;
		Элементы.ИдентификационныйНомер.Доступность 		= Ложь;
		//Элементы.НадписьИдентификационныйНомер.Доступность = Ложь;
	Иначе
		Элементы.РНН.Доступность 							= Истина;
		//Элементы.НадписьРНН.Доступность 					= Истина;
		Элементы.ИдентификационныйНомер.Доступность 		= Истина;
		//Элементы.НадписьИдентификационныйНомер.Доступность = Истина;
	КонецЕсли;
	Элементы.ГруппаИностраннаяОрганизация.Видимость = Объект.ИностраннаяОрганизация;
	Элементы.НадписьГоловнаяОрганизацияНДС.Доступность = Объект.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре;
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	ОбновитьКИ(мОбъектКИ);
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
&НаКлиенте
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИндивидуальныйПредприниматель.
//
&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		РНН 					= Объект.ИндивидуальныйПредприниматель.РНН;
		ИдентификационныйНомер 	= Объект.ИндивидуальныйПредприниматель.ИдентификационныйКодЛичности;
	КонецЕсли;
	ОбновитьКИ(мОбъектКИ);
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
КонецПроцедуры

// Обработчик события Очистка элемента формы ИндивидуальныйПредприниматель.
//
&НаКлиенте
Процедура ИндивидуальныйПредпринимательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте 
Процедура ИндивидуальныйПредпринимательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаФизЛица = Объект.ИндивидуальныйПредприниматель.ПолучитьФорму(, ЭтаФорма);
	ФормаФизЛица.Открыть();	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки КнопкаПроверкиРНН.
//
&НаКлиенте
Процедура КнопкаПроверкиБИННажатие(Элемент)
	Если куфиб_ОбщегоНазначения.БИНИИНСоответствуетТребованиям(Объект.ИдентификационныйНомер) Тогда
		Предупреждение("Введенные БИН/ИИН корректен!");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДАННЫХ О БАНКОВСКИХ СЧЕТАХ и КАССАХ

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
//
&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
КонецПроцедуры // БанковскиеСчетаПриАктивизацииСтроки

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
//
&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если НЕ Отказ Тогда
		Отказ = Истина;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта",Новый Структура("Владелец",объект.Ссылка),Элемент);
	КонецЕсли;
КонецПроцедуры // БанковскиеСчетаПередНачаломДобавления

// Обработчик события ПриАктивизацииСтроки элемента формы Кассы.
//
&НаКлиенте
Процедура КассыПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновнойКассы();
КонецПроцедуры // КассыПриАктивизацииСтроки

// Обработчик события ПередНачаломДобавления элемента формы Кассы.
//
&НаКлиенте
Процедура КассыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
КонецПроцедуры // КассыПередНачаломДобавления

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
//
&НаКлиенте
Процедура КоманднаяПанельБанковскиеСчетаСделатьОсновным(Кнопка)
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнойБанковскийСчет);
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКассы.СделатьОсновным.
//
&НаКлиенте
Процедура КоманднаяПанельКассыСделатьОсновным(Кнопка)
	Если Элементы.Кассы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.Кассы.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновнаяКасса = Элементы.Кассы.ТекущиеДанные.Ссылка;
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнаяКасса);
	ПроверитьДоступностьКнопкиУстановкиОсновнойКассы();
КонецПроцедуры
                              
&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		Если НЕ Объект.Логотип = ЗначениеВыбора Тогда
			Логотип = ЗначениеВыбора;
		КонецЕсли;
		мТекущийЛоготип = Логотип.Хранилище.Получить();
		ПоказатьЛоготип(мПустаяКартинка,мТекущийЛоготип);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипНажатие(Элемент)
//выбор перехода на окно для разработки
Ответ=Вопрос("Следующая форма находится на стадии разработки управляемого приложения. Открыть?",РежимДиалогаВопрос.ОКОтмена);
Если Ответ = КодВозвратаДиалога.ОК Тогда
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Вопрос = "Перед вводом логотипа необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		ОткрытьФормуИзображения(ЭтаФорма, Объект.Логотип, Объект.Ссылка);
	КонецЕсли;
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзображения(ФормаВладелец, ОсновноеИзображение, ОбъектВладелец)
	Если ОсновноеИзображение = Неопределено ИЛИ ОсновноеИзображение.Пустая() Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл с изображением";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрИзображений();
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
		Иначе
			Возврат;
		КонецЕсли;
		ФормаИзображения = ПолучитьФорму("Справочник.ХранилищеДополнительнойИнформации.Форма.ФормаИзображения",, ВладелецФормы, );
		ФормаИзображения.Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение");
		ФормаИзображения.Объект.Хранилище = ПолучитьОпределения("Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных)",ВыбранноеИзображение);
		
		ФормаИзображения.Открыть();
	Иначе
		ФормаИзображения = ОсновноеИзображение.ПолучитьФорму("ФормаИзображения");
	КонецЕсли;
	ФормаИзображения.ВладелецФормы = ФормаВладелец;
	ФормаИзображения.РежимВыбора = Истина;
	ФормаИзображения.ЗакрыватьПриВыборе = Ложь;
	ФормаИзображения.Открыть();
КонецПроцедуры

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
&НаКлиенте
Функция ПолучитьФильтрИзображений()
	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
		  + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
		  + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		  + "Формат tiff (*.tif)|*.tif|"
		  + "Формат gif (*.gif)|*.gif|"
		  + "Формат png (*.png)|*.png|"
		  + "Формат icon (*.ico)|*.ico|"
		  + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
КонецФункции // ПолучитьФильтрИзображений()

&НаСервере
Функция СоздатьОсновнойДоговор(КонтрагентДогвора)
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйДоговор.Наименование          = "Основной (" + СокрЛП(Объект.Ссылка) + ", " + СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить()) + ")";
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйДоговор.Организация = Объект.Ссылка;
	НовыйДоговор.Владелец    = КонтрагентДогвора;
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	ОшибкаПриЗаписиДоговора = Ложь;
	НовыйДоговор.мСообщатьОбОшибках = Ложь;
	СсылкаНовогоДоговора = Неопределено;
	Попытка
		НовыйДоговор.Записать();
		СсылкаНовогоДоговора = НовыйДоговор.Ссылка;
	Исключение
	КонецПопытки;
	Возврат СсылкаНовогоДоговора;
КонецФункции

&НаСервере
Функция СоздатьОсновнойБанковскийСчет(КонтрагентБанковскогоСчета)
	Если Объект.ОсновнойБанковскийСчет.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Для Каждого Реквизит Из НовыйБанковскийСчет.Метаданные().Реквизиты Цикл
		НовыйБанковскийСчет[Реквизит.Имя] = Объект.ОсновнойБанковскийСчет[Реквизит.Имя];
	КонецЦикла;
	НовыйБанковскийСчет.Владелец = КонтрагентБанковскогоСчета;
	НовыйБанковскийСчет.Наименование = Объект.ОсновнойБанковскийСчет.Наименование;
	НовыйБанковскийСчет.Записать();
	Возврат НовыйБанковскийСчет.Ссылка;
КонецФункции

&НаКлиенте
Процедура КнопкаСозданияКонтрагентаНажатие(Элемент)
	Если ЗначениеЗаполнено(КонтрагентОрганизации) Тогда
		Сообщить("Контрагент уже выбран.");
		Возврат;
	КонецЕсли;
	НовыйКонтрагент = ПолучитьОпределения("Справочники.Контрагенты.НайтиПоРеквизиту(РНН)",);
	СоздатьНовыйЭлемент = Ложь;
	Если НовыйКонтрагент.Пустая() Тогда
		СоздатьНовыйЭлемент = Истина;
	Иначе
		РезультатВопроса = Вопрос("По РНН найден элемент справочника ""Контрагенты"": " + НовыйКонтрагент + "." + Символы.ПС 
								  + "Выбрать найденного контрагента? (если нет, то будет создан новый контрагент)", РежимДиалогаВопрос.ДаНет
								  ,30, КодВозвратаДиалога.Да); 
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			СоздатьНовыйЭлемент = Истина;
		КонецЕсли;
		Сообщить("Выбран найденный элемент справочника Контрагенты: """ + НовыйКонтрагент + """ ");
	КонецЕсли;
	Если СоздатьНовыйЭлемент Тогда
		//НовыйКонтрагентСсылка = СоздатьНовогоКонтрагента(НовыйКонтрагент);
		НовыйКонтрагентСсылка = СоздатьНовогоКонтрагента();
		Если Не НовыйКонтрагентСсылка.Пустая() Тогда
			Сообщить("Создан новый элемент справочника Контрагенты: """ + Объект.Наименование + """ ");
		КонецЕсли;
		НовыйКонтрагент = НовыйКонтрагентСсылка;		
	КонецЕсли;
	КонтрагентОрганизации = НовыйКонтрагент;
КонецПроцедуры

&НаСервере
//Функция СоздатьНовогоКонтрагента(НовыйКонтрагент)
Функция СоздатьНовогоКонтрагента()
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Наименование = Объект.Наименование;
	НовыйКонтрагент.НаименованиеПолное = Объект.НаименованиеПолное;
	НовыйКонтрагент.РНН = Объект.РНН;
	НовыйКонтрагент.ИдентификационныйКодЛичности = Объект.ИдентификационныйНомер;
	НовыйКонтрагент.ДатаСвидетельстваПоНДС = Объект.ДатаСвидетельстваПоНДС;
	НовыйКонтрагент.НомерСвидетельстваПоНДС = Объект.НомерСвидетельстваПоНДС;
	НовыйКонтрагент.СерияСвидетельстваПоНДС = Объект.СерияСвидетельстваПоНДС;
	НовыйКонтрагент.ЮрФизЛицо = Объект.ЮрФизЛицо;
	НовыйКонтрагент.КБЕ = Объект.КБЕ;
	НовыйКонтрагент.КодПоОКПО = Объект.КодПоОКПО;
	НовыйКонтрагент.СтранаРезидентства = Объект.СтранаРегистрации;
	НовыйКонтрагент.Записать();
	НовыйКонтрагент.ОсновнойДоговорКонтрагента = СоздатьОсновнойДоговор(НовыйКонтрагент.Ссылка);
	НовыйКонтрагент.ОсновнойБанковскийСчет = СоздатьОсновнойБанковскийСчет(НовыйКонтрагент.Ссылка);
	НовыйКонтрагент.Записать();
	Возврат НовыйКонтрагент.Ссылка;
КонецФункции

// Обработчик события "При изменении" элемента ГоловнаяОрганизация
//
&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	ОбновитьНадписьГоловнойОрганизацииДляЦелейНДС()
КонецПроцедуры // ГоловнаяОрганизацияПриИзменении

// Обработчик нажатия на гипер-ссылку
// с указанием головной организации, в счете фактуре
//
&НаКлиенте
Процедура НадписьГоловнаяОрганизацияНДСНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Прочее;	
	Этаформа.ТекущийЭлемент = Элементы.ГоловнаяОрганизация;
КонецПроцедуры // НадписьГоловнаяОрганизацияНДСНажатие

// Обработчик события "При изменении" признака "УказыватьРеквизитыГоловнойОрганизацииВСчете"
// с указанием головной организации, в счете фактуре
//
&НаКлиенте
Процедура УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуреПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
КонецПроцедуры // УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуреПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	оф_НалоговыйКомитетПоМестуРегистрацииОрганизацииЗаголовок = "Налоговый комитет по месту регистрации организации";
	оф_СвидетельствоОПостановкеНаУчетПоНДСЗаголовок ="Свидетельство о постановке на учет по НДС";
	оф_РеквизитыЗаголовок = "Реквизиты";
	оф_ГруппаКодПоОКПОЗаголовок = "Код по ОКПО";
	оф_ОсновнойВидДеятельностиПоОКЭДЗаголовок = "Основной вид деятельности по ОКЭД";
	оф_КонтрагентДляИдентификацииОрганизацииЗаголовок ="Контрагент для идентификации организации";
	оф_ПрочиеДанныеЗаголовок = "Прочие данные";
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Параметры.ЗначениеКопирования));
	Иначе
		НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка));
	КонецЕсли; 

	//Проверка права доступа к справочнику
	Отказ = Не ЕстьПравоНаОткрытие(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"));
	ОбновитьКИ(мОбъектКИ,Параметры.ЗначениеКопирования);
	Если Отказ = Истина Тогда
		куфиб_ОбщегоНазначения.СообщитьПользователю("Нарушение прав доступа!");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаборКонтактнойИнформацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение)
	НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ЗаписьКИВРегистр(ВыбранноеЗначение,НаборКонтактнойИнформации));
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияСделатьОсновным(Команда)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, Элементы.КонтактнаяИнформация, Элементы.КонтактнаяИнформацияСделатьОсновным);	
КонецПроцедуры

&НаКлиенте
Процедура РедиктироватьКИВДиалоге(Команда)
	Элементы.КнопкаРедактироватьКИВДиалоге.Пометка = Не Элементы.КнопкаРедактироватьКИВДиалоге.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи, глТекущийПользователь);	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи, глТекущийПользователь)
	куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка, Отказ);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнойБанковскийСчет);
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнаяКасса);
КонецПроцедуры


&НаКлиенте
Процедура НаборКонтактнойИнформацииПредставлениеПриИзменении(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, Элементы.КонтактнаяИнформация);
КонецПроцедуры


&НаКлиенте
Процедура НаборКонтактнойИнформацииПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Ложь, Объект.Ссылка,Элементы.КонтактнаяИнформация, Истина, ложь,,Ложь);
КонецПроцедуры

