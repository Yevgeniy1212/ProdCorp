
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	// установка видимости и доступности элементов в зависимости от значений реквизитов

	Если Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов") Тогда
		Элементы.Измерение.Доступность					= Истина;
		Элементы.Формула.Видимость						= Истина;
		Элементы.Измерение.Заголовок					= "Источник";
		Элементы.Формула.Заголовок						= "Показатель";
		Элементы.Измерение.АвтоОтметкаНезаполненного	= Истина;
		Элементы.Формула.АвтоОтметкаНезаполненного		= Истина;
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов") Тогда
		Элементы.Измерение.Доступность					= Истина;
		Элементы.Формула.Видимость						= Ложь;
		Элементы.Измерение.Заголовок					= "Финансовый показатель";
		Элементы.Формула.Заголовок						= "";
		Элементы.Измерение.АвтоОтметкаНезаполненного	= Истина;
		Элементы.Формула.АвтоОтметкаНезаполненного		= Ложь;
		Элементы.Формула.ОтметкаНезаполненного= Ложь;
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов") Тогда
		Элементы.Измерение.Доступность					= Истина;
		Элементы.Формула.Видимость						= Истина;
		Элементы.Измерение.Заголовок					= "Счет";
		Элементы.Формула.Заголовок						= "Вид остатка/оборота";
		Элементы.Измерение.АвтоОтметкаНезаполненного	= Истина;
		Элементы.Формула.АвтоОтметкаНезаполненного		= Истина;
	Иначе 
		Элементы.Измерение.Доступность					= Ложь;
		Элементы.Формула.Видимость						= Истина;
		Элементы.Формула.Заголовок						= "Формула";
		Элементы.Измерение.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.Измерение.ОтметкаНезаполненного		= Ложь;
		Элементы.Формула.АвтоОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов") Тогда
		Элементы.Измерение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования");
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов") Тогда
		Элементы.Измерение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов") Тогда
		Элементы.Измерение.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.фин_Бюджетирование");
	КонецЕсли;

	Если НЕ (Объект.Измерение = Неопределено ИЛИ Объект.Измерение.Пустая())  Тогда
		СписокПоказателей = Форма.СписокПоказателей;
		Если Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов") Тогда
			мСписокПоказателей = ПоказателиИсточника(Объект.Измерение);
			Для Каждого ЭлементСписка Из мСписокПоказателей Цикл
				СписокПоказателей.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
			КонецЦикла;
		ИначеЕсли Объект.ВидСтроки=ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов") Тогда
			СписокПоказателей.Добавить("КонечныйОстаток","Конечный остаток");
			СписокПоказателей.Добавить("КонечныйОстатокДт","Конечный остаток (Дт)");
			СписокПоказателей.Добавить("КонечныйОстатокКт","Конечный остаток (Кт)");
			СписокПоказателей.Добавить("КонечныйРазвернутыйОстатокДт","Конечный развернутый остаток (Дт)");
			СписокПоказателей.Добавить("КонечныйРазвернутыйОстатокКт","Конечный развернутый остаток (Кт)");
			СписокПоказателей.Добавить("НачальныйОстаток","Начальный остаток");
			СписокПоказателей.Добавить("НачальныйОстатокДт","Начальный остаток (Дт)");
			СписокПоказателей.Добавить("НачальныйОстатокКт","Начальный остаток (Кт)");
			СписокПоказателей.Добавить("НачальныйРазвернутыйОстатокДт","Начальный развернутый остаток (Дт)");
			СписокПоказателей.Добавить("НачальныйРазвернутыйОстатокКт","Начальный развернутый остаток (Кт)");
			СписокПоказателей.Добавить("Оборот","Оборот");
			СписокПоказателей.Добавить("ОборотДт","Оборот (Дт)");
			СписокПоказателей.Добавить("ОборотКт","Оборот (Кт)");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказателиИсточника(Источник)
	СписокПоказателей=Новый СписокЗначений;
	Для Каждого Показатель Из Источник.Показатели Цикл
		Если Показатель.Использование Тогда
			СписокПоказателей.Добавить(Показатель.Имя, Показатель.Представление);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокПоказателей;
КонецФункции

&НаКлиенте
Процедура ВидСтрокиПриИзменении(Элемент)

	Объект.Формула="";
	Если Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов") Тогда
		Объект.Измерение = Новый(Тип("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования"));
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов") Тогда
		Объект.Измерение = Новый(Тип("СправочникСсылка.фин_ФинансовыеПоказатели"));
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов") Тогда
		Объект.Измерение = Новый(Тип("ПланСчетовСсылка.фин_Бюджетирование"));
	ИначеЕсли Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета") Тогда		
		Объект.Измерение="";
	Иначе
		
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмерениеПриИзменении(Элемент)

	Если Объект.Наименование = "" Тогда
		Объект.Наименование = Объект.Измерение;
	КонецЕсли;
	Объект.Формула="";
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ (Объект.ВидСтроки=Перечисления.фин_ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета) Тогда
		ТекущийОбъект.СтрокиРасчетаДляФормулы.Очистить();
	КонецЕсли;
	Если ТекущийОбъект.ВидСтроки=Перечисления.фин_ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета И НЕ ТекущийОбъект.Родитель.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строки, значение которых рассчитывается по другим строкам бюджетов,
			|не должны входить в группы. Строка перенесена");
		ТекущийОбъект.Родитель = Справочники.фин_СтрокиФинансовогоРасчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов") 
		ИЛИ Объект.ВидСтроки=ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов") Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПоказателей;
	Иначе
		ОткрытьФорму("Общаяформа.фин_ФормаВводаФормулы",Новый Структура("ТекстФормулы,АдресПоказателейФормулы,ПредставлениеВВидеКодов",Объект.Формула,АдресПараметровФормулы(),Истина),ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция АдресПараметровФормулы()
	НачальныйСписок=Новый СписокЗначений;
	НачальныйСписок.Добавить(Объект.Ссылка);
	
	СписокИсключаемыхСтрок(НачальныйСписок);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчета.Код КАК Код,
	|	СтрокиРасчета.Ссылка КАК Представление
	|ИЗ
	|	Справочник.фин_СтрокиФинансовогоРасчета КАК СтрокиРасчета
	|
	|ГДЕ
	|	СтрокиРасчета.Владелец = &Владелец И
	|	СтрокиРасчета.Ссылка НЕ В (&СписокИсключаемыхСтрок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	Запрос.УстановитьПараметр("Владелец",				Объект.Владелец);
	Запрос.УстановитьПараметр("СписокИсключаемыхСтрок",	НачальныйСписок);

	ТаблицаСтрок = Запрос.Выполнить().Выгрузить();
	
	АдресПараметров = ПоместитьВоВременноеХранилище(ТаблицаСтрок,УникальныйИдентификатор);
	Возврат АдресПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВыбранноеЗначение<>Неопределено Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ЗначениеВыбора = ПолучитьИзВременногоХранилища(АдресПараметров);
	
	Объект.СтрокиРасчетаДляФормулы.Очистить();
	Объект.Формула = ВыбранноеЗначение.ТекстФормулы;
	Для Каждого СтрокаРасчета Из ЗначениеВыбора Цикл
		Если Объект.СтрокиРасчетаДляФормулы.НайтиСтроки(Новый Структура("СтрокаРасчета",СтрокаРасчета.Представление)).Количество()=0 Тогда
			НоваяСтрока = Объект.СтрокиРасчетаДляФормулы.Добавить();
			НоваяСтрока.СтрокаРасчета = СтрокаРасчета.Представление;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры


// Формирует список строк бюджета, использующих в расчетах значение текущей строки
//
// Параметры
//  СписокСтрок: список значений- текущий список
//
// Возвращаемое значение:                                         
//   СписокСтрок 
//
&НаСервере
Процедура СписокИсключаемыхСтрок(СписокСтрок)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка КАК СтрокаРасчета
	|ИЗ
	|	Справочник.фин_СтрокиФинансовогоРасчета.СтрокиРасчетаДляФормулы КАК СтрокиРасчетаСтрокиРасчетаДляФормулы
	|
	|ГДЕ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец И
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка НЕ В(&СписокСтрок) И
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета В(&СписокСтрок)";
	
	Запрос.УстановитьПараметр("Владелец",	Объект.Владелец);
	Запрос.УстановитьПараметр("СписокСтрок",СписокСтрок);
	
	РезультатЗапроса=Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка=РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСтрок.Добавить(Выборка.СтрокаРасчета);
		КонецЦикла;
		СписокИсключаемыхСтрок(СписокСтрок);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // СписокИсключаемыхСтрок()
