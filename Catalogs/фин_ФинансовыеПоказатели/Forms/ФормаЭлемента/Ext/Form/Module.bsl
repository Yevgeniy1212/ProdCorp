&НаКлиенте
Перем мНаименование;

&НаСервере
Процедура НастройкаОтображенияРазрезов()

	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,СписокЗапрещенныхКРедактированиюРазрезов);
	Если СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент)<>Неопределено Тогда
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент;
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Объект.РазрезыУчета.Измерение");
		ПолеОформления 					= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("РазрезыУчетаИзмерение");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЕсли;
	Если СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура)<>Неопределено Тогда
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура;
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Объект.РазрезыУчета.Измерение");
		ПолеОформления 					= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("РазрезыУчетаИзмерение");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЕсли;
	Если СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект)<>Неопределено Тогда
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект;
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Объект.РазрезыУчета.Измерение");
		ПолеОформления 					= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("РазрезыУчетаИзмерение");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЕсли;
	Если СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)<>Неопределено Тогда
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение;
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Объект.РазрезыУчета.Измерение");
		ПолеОформления 					= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("РазрезыУчетаИзмерение");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет списки выбора для показателей источников данных
//
//
&НаСервере
Процедура ОбновитьСпискиВыбора()
	
	Если НЕ Объект.ИсточникДанныхДляЦены.Пустая() Тогда

		СписокВыбораПоказательЦены.Очистить();

		Для Каждого Показатель Из Объект.ИсточникДанныхДляЦены.Показатели Цикл

			Если Показатель.Использование Тогда
				СписокВыбораПоказательЦены.Добавить(Показатель.Имя, Показатель.Представление);
			КонецЕсли;

		КонецЦикла; 

	КонецЕсли;
	
КонецПроцедуры // ОбновитьСпискиВыбора()
 
//Процедура УправлениеДоступностьюРеквизитов
//
&НаСервере
Процедура УправлениеДоступностьюРеквизитов()

	Если Объект.УчетПоКоличеству И Объект.УчетПоСумме И (Объект.ВидПоказателя<>Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый ИЛИ Объект.ПоРасценкам) Тогда
		Элементы.ГруппаРасчетЦены.Видимость=Истина;
		//Элементы.ГруппаЦенаПоИсточнику.Видимость = (Объект.СпособЦенообразования=Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов);
		//Элементы.ГруппаЦенаПоТипу.Видимость = (Объект.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов И Объект.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать И Объект.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.Фиксированная);
		Элементы.ГруппаФиксированнаяЦена.Видимость = (Объект.СпособЦенообразования=Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.Фиксированная);
	Иначе
		Элементы.ГруппаРасчетЦены.Видимость=Ложь;
	КонецЕсли;
	Элементы.НеКонтролироватьЛимиты.Доступность=Объект.ДляПромежуточныхРасчетов;
	Элементы.ДляПромежуточныхРасчетов.Видимость = ИспользуютсяЦиклическиеМодели;
	Элементы.НеКонтролироватьЛимиты.Видимость = ИспользуютсяЦиклическиеМодели И Объект.ДляПромежуточныхРасчетов;
	Элементы.ИспользуемыйНоменклатурныйПеречень.Видимость = (Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура"))).Количество()<>0);
	//Элементы.УчетПоКоличеству.Видимость = Объект.ВидПоказателя<>Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый;
	//Элементы.УчетПоСумме.Доступность = Объект.ВидПоказателя<>Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый;
КонецПроцедуры // УправлениеДоступностьюРеквизитов()

/////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НадписьБазовыеРазрезыУчета = "Базовые разрезы учета";
	НадписьИспользуемыеДополнительныеРазрезыУчета = "Используемые разрезы учета";
	НадписьКоличество = "Количество";
	НадписьПризнакиУчета = "Признаки учета";
	НадписьРасчетныеСвойства = "Расчетные свойства";
	НадписьСумма = "Сумма";
	НадписьФормируемыеПроводки = "Формируемые проводки";
	НадписьЦенообразование = "Расчет цен";
	НадписьРазрезыУчетаОстатков = "Разрезы учета остатков";
	НадписьИспользованиеВБюджетах = "Использование в бюджетах";
	
	ВалютаУпр = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВидСтрокиБюджета = ?(Объект.ВидПоказателя=Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый,Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле,?(Объект.Ссылка.Пустая(),Перечисления.фин_ВидыСтрокБюджета.Первичная,Справочники.фин_ФинансовыеПоказатели.ВидРасчетнойСтроки(Объект.Ссылка)));
	Элементы.ДекорацияРасчетыПредставление.Заголовок	= фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Объект,Истина,ВидСтрокиБюджета);
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	
	ОбновитьСпискиВыбора();
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокВыбораРазрезыУчета);
	
	Если НЕ (Объект.Ссылка.Пустая() ИЛИ Объект.РазрезыУчета.Количество()=0) Тогда
		
		фин_ПривилегированныеПроцедуры.ЗаполнитьСписокЗапрещенныхКРедактированиюРазрезов(СписокЗапрещенныхКРедактированиюРазрезов,Объект.Ссылка);
	КонецЕсли;
 	НастройкаОтображенияРазрезов();

	Если Объект.СпособЦенообразования=Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.Фиксированная Тогда
	 	МассивФП	 = Новый Массив();
		
		МассивФП.Добавить(Объект.Ссылка);
		СписокГрупп = фин_ОбщегоНазначенияСервер.ПолучитьСписокВышестоящихГрупп(Объект.Ссылка);
		Для каждого Элемент Из СписокГрупп Цикл
			МассивФП.Добавить(Элемент);
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФиксированныеЦеныПоФинансовымПоказателямСрезПоследних.Период,
			|	ФиксированныеЦеныПоФинансовымПоказателямСрезПоследних.Цена,
			|	ФиксированныеЦеныПоФинансовымПоказателямСрезПоследних.ФинансовыйПоказатель
			|ИЗ
			|	РегистрСведений.фин_ФиксированныеЦеныПоФинансовымПоказателям.СрезПоследних КАК ФиксированныеЦеныПоФинансовымПоказателямСрезПоследних
			|ГДЕ
			|	ФиксированныеЦеныПоФинансовымПоказателямСрезПоследних.ФинансовыйПоказатель В(&ФинансовыйПоказатель)";

		Запрос.УстановитьПараметр("ФинансовыйПоказатель", МассивФП);

		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Колонки.Добавить("Уровень");
		Для Каждого СтрокаРезультат Из Результат Цикл
			СтрокаРезультат.Уровень = ?(СтрокаРезультат.ФинансовыйПоказатель=Объект.Ссылка,1,СтрДлина(СтрокаРезультат.ФинансовыйПоказатель.ПолныйКод()));
		КонецЦикла;
        Результат.Сортировать("Уровень ВОЗР");

		Если Результат.Количество()>0 Тогда
			Цена = Результат[0].Цена;
			ДатаЦены = Результат[0].Период;
		Иначе
			ДатаЦены = ТекущаяДата();
		КонецЕсли;

	КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	NULL,
			|	РегламентнаяМодельБюджетированияОборотыПоСтатьямБюджетов.НомерСтроки
			|ИЗ
			|	Документ.фин_РасчетнаяМодельБюджетирования.ОборотыПоСтатьямБюджетов КАК РегламентнаяМодельБюджетированияОборотыПоСтатьямБюджетов
			|ГДЕ
			|	РегламентнаяМодельБюджетированияОборотыПоСтатьямБюджетов.ФинансовыйПоказатель = &ФинансовыйПоказатель
			|	И РегламентнаяМодельБюджетированияОборотыПоСтатьямБюджетов.Ссылка.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	NULL,
			|	ЗависимостиФинансовыхПоказателей.НомерСтроки
			|ИЗ
			|	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей КАК ЗависимостиФинансовыхПоказателей
			|ГДЕ
			|	ЗависимостиФинансовыхПоказателей.ЗависимаяФинансовыйПоказатель = &ФинансовыйПоказатель";

		Запрос.УстановитьПараметр("ФинансовыйПоказатель", Объект.Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВидПоказателяТолькоПросмотр=Истина;
		КонецЕсли;

	КонецЕсли;
	ИспользуютсяЦиклическиеМодели = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ПоддержкаЦиклическихМоделей");
	
	ОтборБюджеты = ИспользованиеВБюджетах.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборБюджеты.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ФинансовыйПоказатель");
	ОтборБюджеты.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ОтборБюджеты.ПравоеЗначение	= Объект.Ссылка;
	ОтборБюджеты.Использование	= Истина;
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ИспользованиеВБюджетах.Видимость = Ложь;
	КонецЕсли;
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СписокВыбораПолноеНаименование.Добавить(объект.НаименованиеПолное);
	мНаименование = Объект.Наименование;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Объект.НаименованиеПолное = "" ИЛИ Объект.НаименованиеПолное=мНаименование Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
		Если СписокВыбораПолноеНаименование.НайтиПоЗначению(Объект.НаименованиеПолное)=Неопределено Тогда
			СписокВыбораПолноеНаименование.Добавить(Объект.НаименованиеПолное);
		КонецЕсли;
	КонецЕсли;
	мНаименование = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораПолноеНаименование;
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	Если СписокВыбораПолноеНаименование.НайтиПоЗначению(Объект.НаименованиеПолное)=Неопределено Тогда
		СписокВыбораПолноеНаименование.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетПоСуммеПриИзменении(Элемент)
	
	Если НЕ Объект.УчетПоСумме Тогда
	
		Объект.ИсточникДанныхДляЦены            = "";
		Объект.ПоказательИсточникаДанныхДляЦены = "";
		Объект.СпособЦенообразования 			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать");
	    Объект.ИспользуемыйТипЦен				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
	    Объект.Формула							= ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		Элементы.ДекорацияРасчетыПредставление.Заголовок					= фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Объект,Истина);
	КонецЕсли; 
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	УправлениеДоступностьюРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКоличествуПриИзменении(Элемент)
	
	Если НЕ Объект.УчетПоКоличеству Тогда
	
		Объект.ИсточникДанныхДляЦены            = "";
		Объект.ПоказательИсточникаДанныхДляЦены = "";
		Объект.СпособЦенообразования 			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать");
	    Объект.ФормулаКоличество				= ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		Объект.ПоРасценкам						= Ложь;
		Элементы.ДекорацияРасчетыПредставление.Заголовок					= фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Объект,Истина);
	КонецЕсли; 
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	УправлениеДоступностьюРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДляПромежуточныхРасчетовПриИзменении(Элемент)
	Если НЕ Объект.ДляПромежуточныхРасчетов Тогда
		Объект.НеКонтролироватьЛимиты = Ложь;
		Объект.ВидПоказателя = "";
	КонецЕсли;
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура УчетПоПлановойНоменклатуреПриИзменении(Элемент)
	СтрокиНоменклатура = Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура")));
	Если СтрокиНоменклатура.Количество()>0 Тогда
		Если Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура") Тогда
			ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ПлановаяНоменклатура");
		ИначеЕсли Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		КонецЕсли;
		СтрокиНоменклатура[0].ОсновноеЗначение = ОписаниеТипа.ПривестиЗначение(СтрокиНоменклатура[0].ОсновноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхДляЦеныПриИзменении(Элемент)

	Объект.ПоказательИсточникаДанныхДляЦены = "";
	ОбновитьСпискиВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхДляЦеныОчистка(Элемент, СтандартнаяОбработка)
	
    Объект.ПоказательИсточникаДанныхДляЦены="";
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "Разрезы учета"

&НаКлиенте
Процедура РазрезыУчетаПередУдалением(Элемент, Отказ)
	Если СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Элементы.РазрезыУчета.ТекущиеДанные.Измерение)<>Неопределено Тогда
		ПоказатьПредупреждение(,"Невозможно удалить разрез учета "+ПредставлениеРазреза(Элементы.РазрезыУчета.ТекущиеДанные.Измерение)+", т.к. данный разрез финансового показателя используются в документах!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПредставлениеРазреза(Разрез)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез);	
КонецФункции

&НаКлиенте
Процедура РазрезыУчетаИзмерениеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.РазрезыУчета.ТекущаяСтрока;
	ОбработатьИзменениеРазрезаУчета(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРазрезаУчета(ТекущаяСтрока)
	ТекущиеДанные = Объект.РазрезыУчета.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные.Измерение.Пустая() Тогда
		ТекущиеДанные.Разрез = "";
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура;
		ТекущиеДанные.ОсновноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОсновноеЗначение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты;
		ТекущиеДанные.ОсновноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОсновноеЗначение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО;
		ТекущиеДанные.ОсновноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОсновноеЗначение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты;
		ТекущиеДанные.ОсновноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОсновноеЗначение);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
		|ГДЕ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";

	Запрос.УстановитьПараметр("Измерение", ТекущиеДанные.Измерение);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекущиеДанные.Разрез = ВыборкаДетальныеЗаписи.Разрез;
		ТекущиеДанные.ОсновноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОсновноеЗначение);
	Иначе
		ТекущиеДанные.Разрез = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазрезыУчета;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаОсновноеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура") Тогда
		МассивТипов = Новый Массив;
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре") Тогда
			Если Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура") ИЛИ Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
			КонецЕсли;
			Если Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура") ИЛИ Объект.ИспользуемыйНоменклатурныйПеречень=ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
		Иначе
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Элемент.ОграничениеТипа = ТипЗначенияРазреза(Элементы.РазрезыУчета.ТекущиеДанные.Разрез);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипЗначенияРазреза(Разрез)
	Возврат Разрез.ТипЗначения;	
КонецФункции

&НаКлиенте
Процедура ПоказательИсточникаДанныхДляЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = СписокВыбораПоказательЦены;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура"))).Количество()=0 Тогда
		Объект.ИспользуемыйНоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура");
		Элементы.ИспользуемыйНоменклатурныйПеречень.Видимость = Ложь;
	Иначе	
		Элементы.ИспользуемыйНоменклатурныйПеречень.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СпособЦенообразованияПриИзменении(Элемент)
	Объект.ИспользуемыйТипЦен 				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
	Объект.ИсточникДанныхДляЦены 			= ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка");
	Объект.ПоказательИсточникаДанныхДляЦены	= "";
	Объект.Формула							= ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
	Элементы.ДекорацияРасчетыПредставление.Заголовок					= фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Объект,Истина);
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры


&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	Модифицированность=Истина;
	Если ДатаЦены = '00010101' Тогда
		ДатаЦены = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.СпособЦенообразования = Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.Фиксированная И ДатаЦены<>'00010101' И Цена<>0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФиксированныеЦеныПоФинансовымПоказателям.Период
			|ИЗ
			|	РегистрСведений.фин_ФиксированныеЦеныПоФинансовымПоказателям КАК ФиксированныеЦеныПоФинансовымПоказателям
			|ГДЕ
			|	ФиксированныеЦеныПоФинансовымПоказателям.Период = &Период
			|	И ФиксированныеЦеныПоФинансовымПоказателям.ФинансовыйПоказатель = &ФинансовыйПоказатель";

		Запрос.УстановитьПараметр("Период", ДатаЦены);
		Запрос.УстановитьПараметр("ФинансовыйПоказатель", ТекущийОбъект.Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			МенеджерЗаписи = РегистрыСведений.фин_ФиксированныеЦеныПоФинансовымПоказателям.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФинансовыйПоказатель = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Период = ДатаЦены;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ФинансовыйПоказатель = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Период = ДатаЦены;
			МенеджерЗаписи.Цена = Цена;
			МенеджерЗаписи.Записать(Истина);
		Иначе	
			НаборЗаписей = РегистрыСведений.фин_ФиксированныеЦеныПоФинансовымПоказателям.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.ФинансовыйПоказатель.Установить(ТекущийОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			НЗ = НаборЗаписей.Добавить();
			НЗ.Период = ДатаЦены;
			НЗ.ФинансовыйПоказатель = ТекущийОбъект.Ссылка;
			НЗ.Цена = Цена;
			НаборЗаписей.Записать();
		КонецЕсли;

	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйСборФакта(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Элемент еще не записан!");
		Возврат;	
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.фин_ПравилаОтложенногоСбораФактическихДанных.ФормаСписка",Новый Структура("Отбор",Новый Структура("ФинансовыйПоказатель",Объект.Ссылка)),ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиПоСчетамБюджета(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Элемент еще не записан!");
		Возврат;	
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.фин_НастройкаПроводокДляФинансовыхПоказателей.ФормаСписка",Новый Структура("Отбор",Новый Структура("ФинансовыйПоказатель",Объект.Ссылка)),ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РегулярныйКонтроль(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Элемент еще не записан!");
		Возврат;	
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.фин_НастройкиРегулярногоКонтроляПоказателей.ФормаСписка",Новый Структура("Отбор",Новый Структура("ФинансовыйПоказатель",Объект.Ссылка)),ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпособЦенообразованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокСпособов();
КонецПроцедуры

&НаСервере
Функция СписокСпособов()
	Возврат фин_ПроцедурыУправленияПлановымЦенообразованием.СписокСпособов();
КонецФункции

&НаКлиенте
Процедура ОбработатьНастройкуРасчетов(РезультатВыбора,ДополнительныеПараметры) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект,РезультатВыбора);
		ВидСтрокиБюджета = ?(Объект.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый"),ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле"),?(Объект.Ссылка.Пустая(),ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная"),ВидРасчетнойСтроки(Объект.Ссылка)));
		Элементы.ДекорацияРасчетыПредставление.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Объект,Истина);
		Модифицированность = Истина;
		УправлениеДоступностьюРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидРасчетнойСтроки(ОбъектСсылка)
	Возврат Справочники.фин_ФинансовыеПоказатели.ВидРасчетнойСтроки(ОбъектСсылка);
КонецФункции

&НаКлиенте
Процедура ДекорацияРасчетыПредставлениеНажатие(Элемент)
	ОписаниеОповещенияНастройкаРасчетов = Новый ОписаниеОповещения("ОбработатьНастройкуРасчетов",ЭтотОбъект);
	ПараметрыНастройкаРасчетов = Новый Структура("УчетПоСумме,УчетПоКоличеству,ЭтоГруппа,Формула,ФормулаКоличество,ТолькоДляПлановыхДанных,ВидПоказателя,ПоРасценкам,ОтносительныйПоказатель,ПризнакПеретекающегоОстатка");
	ЗаполнитьЗначенияСвойств(ПараметрыНастройкаРасчетов,Объект);
	ПараметрыНастройкаРасчетов.Вставить("ВидПоказателяТолькоПросмотр",ВидПоказателяТолькоПросмотр);
	ПараметрыНастройкаРасчетов.Вставить("ВидСтрокиБюджета",ВидСтрокиБюджета);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиРасчетов",ПараметрыНастройкаРасчетов,ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияНастройкаРасчетов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСпособЦенообразованияНажатие(Элемент)
	ОписаниеОповещенияНастройкаИтогов = Новый ОписаниеОповещения("ОбработатьНастройкуЦенообразованияБюджета",ЭтотОбъект);
	ПараметрыЦены = Новый Структура("СпособЦенообразования,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
	ЗаполнитьЗначенияСвойств(ПараметрыЦены,Объект);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиЦены",ПараметрыЦены,ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияНастройкаИтогов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьНастройкуЦенообразованияБюджета(РезультатВыбора,ИдентификаторСтроки) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект,РезультатВыбора);
		Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
		Модифицированность = Истина;
		УправлениеДоступностьюРеквизитов();
	КонецЕсли;
КонецПроцедуры
