&НаКлиенте
Перем мФормироватьНаименованиеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет
&НаКлиенте
Перем мВалютаРегламентированногоУчета;
&НаКлиенте
Перем мСчетБУ, мСчетНУ;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	//Объект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.Ссылка.Пустая() тогда
		Объект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	//оформление
	оф_ПечатьЗаголовок = "Печать";
	оф_СчетаЗатратЗаголов = "Счета затрат";
	оф_УчетНДСЗаголовок = "Учет НДС";
	оф_ДляНепрямыхРасчетовЗаголовок = "Для непрямых расчетов";
	оф_ТекстПодстановкиЗаголовок = "Текст подстановки в платежные документы для особых условий платежа";
	
КонецПроцедуры

 
// Процедура проверяет, совпадало ли ранее наименование со строкой, сформированной по номеру счета и банку
// и присваивает соответствующее значение переменной мФормироватьНаименованиеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеАвтоматически()
	Если Не ЗначениеЗаполнено(Объект.Наименование) 
	 ИЛИ Объект.Наименование = (Объект.НомерСчета + " в " + Строка(Объект.Банк))
	 Или Объект.Наименование = Объект.НомерСчета
	 Или Объект.Наименование = Строка(Объект.Банк) Тогда
	 	мФормироватьНаименованиеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеАвтоматически = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьФлагФормироватьНаименованиеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьНаименованиеБанковскогоСчетаАвтоматически()
	Если мФормироватьНаименованиеАвтоматически Тогда
		Если ЗначениеЗаполнено(Объект.НомерСчета) и ЗначениеЗаполнено(Объект.Банк) Тогда
			Объект.Наименование = СокрЛП(Объект.НомерСчета) + " в " + СокрЛП(Строка(Объект.Банк));
		Иначе
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.НомерСчета), СокрЛП(Объект.НомерСчета), СокрЛП(Объект.Банк));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеБанковскогоСчетаАвтоматически()

// Заполняет реквизит "ТекстКорреспондента"
 //
 // Параметры:
 //  Нет.
 //
&НаКлиенте
Процедура ЗаполнитьТекстКорреспондента()
	мВладелец     = Объект.Владелец;
	Если НЕ ЗначениеЗаполнено(мВладелец) Тогда
		Возврат;
	КонецЕсли;
	ТипВладельца = ТипЗнч(мВладелец);
	Если ТипВладельца = Тип("СправочникСсылка.Организации") Тогда
		СтрКорреспондента = СокрЛП(мВладелецНаименованиеПолное(мВладелец));
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрКорреспондента = СокрЛП(мВладелецНаименованиеПолное(мВладелец));
	КонецЕсли;	

	Если НЕ Объект.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондента = ПолучитьСтрКорреспондента(СтрКорреспондента);
		Объект.ТекстКорреспондента = СтрКорреспондента;			
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьТекстКорреспондента()

&НаСервере
Функция ПолучитьСтрКорреспондента(СтрКорреспондента)
	Возврат СтрКорреспондента + " р/с " + Объект.НомерСчета	+ " в " + Объект.Банк + " " + Объект.Банк.Город;
КонецФункции

&НаСервере
Функция мВладелецНаименованиеПолное(мВладелец)
	Возврат мВладелец.НаименованиеПолное;	
КонецФункции
// Заполняет информационные поля, отображающие БИК банков.
//
&НаКлиенте
Процедура ЗаполнитьБИКБанка(парамБанк, ИнформационноеПоле)
	Если ЗначениеЗаполнено(парамБанк) Тогда
		ДатаПериода =  ТекущаяДата();	
		ИмяРеквизитаБИК = ?(ДатаПериода >= Дата(2010,06,07), ПарамБанкБИКПолучить(парамБанк, "БИК"), ПарамБанкБИКПолучить(парамБанк, "БИКДоРеформыБанковскихСчетов"));
		ИнформационноеПоле.Заголовок = ИмяРеквизитаБИК;
	Иначе
		ИнформационноеПоле.Заголовок = "Неопределен";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПарамБанкБИКПолучить(парамБанк, парам)
	Если парам = "БИК" тогда
		Возврат парамБанк.БИК;	
	КонецЕсли;
	Если парам = "БИКДоРеформыБанковскихСчетов" Тогда
		Возврат парамБанк.БИКДоРеформыБанковскихСчетов;		
	КонецЕсли;
КонецФункции

//Процедура устанавливает доступность элементов формы
//в зависимости от выбранных настроек
&НаКлиенте
Процедура УстановитьДоступность()
	Если ТипЗнч(Объект.Владелец) <> Тип("СправочникСсылка.Организации") Тогда 
		Если ЗначениеЗаполнено(Объект.Префикс) Тогда 
			Префикс = "";
		КонецЕсли;
		Элементы.Префикс.Доступность = Ложь;
	Иначе 
		Элементы.Префикс.Доступность = Истина
	КонецЕсли;	
	Если Элементы.КомиссионноеОбслуживание.Видимость = Истина Тогда
		Элементы.СтавкаНДС.Доступность         = Объект.УчитыватьНДС;
		Элементы.СчетУчетаНДС.Доступность      = Объект.УчитыватьНДС;
		Элементы.НДСВидОборота.Доступность     = Объект.УчитыватьНДС;
		Элементы.НДСВидПоступления.Доступность = Объект.УчитыватьНДС;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет аналитику "Статьи движения ден. средств"
// (в случае, если счет расчетов с контрагентом имеет соответствующую аналитику)
// из реквизита документа "Статья Движения Денежных Средств"
//
&НаСервере
Процедура УстановитьСтатьюДДСВАналитикеСчета()
	// если ДДС не заполнена устанавливать субконто не нужно
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;	
	
	// статья ДДС определена в аналитике счета расчетов
	Объект.СтатьяДДСВСчетеРасчетов = Объект.СчетЗатратБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Если Не  Объект.СтатьяДДСВСчетеРасчетов = Неопределено Тогда
		НомерСубконтоДДС = Объект.СтатьяДДСВСчетеРасчетов.НомерСтроки;
		Если НЕ ЗначениеЗаполнено(Объект["СубконтоЗатратБУ" + НомерСубконтоДДС]) тогда
			Объект["СубконтоЗатратБУ" + НомерСубконтоДДС] = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет трансляцию счета БУ в счет НУ
//
&НаКлиенте
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = Ложь,глТекущийПользователь)
	УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтаФорма, "СчетЗатратБУ", "СчетЗатратНУ", );
	ПроцедурыБухгалтерскогоУчета.ПриВыбореСчетаВТабличномПоле(Объект.СчетЗатратНУ,
	                             Объект.СубконтоЗатратНУ1,
	                             Элементы.СубконтоЗатратНУ1,
	                             Объект.СубконтоЗатратНУ2,
	                             Элементы.СубконтоЗатратНУ2,
	                             Объект.СубконтоЗатратНУ3,
	                             Элементы.СубконтоЗатратНУ3);
								 
	УстановитьВидимостьСубконтоНУ();
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

&НаСервере
Процедура ИзменитьДоговорКонтрагента()
	Если НЕ ЗначениеЗаполнено(Объект.Банк.Контрагент) Тогда 
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	ОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Объект.Банк.Контрагент.ОсновнойДоговорКонтрагента);	
	
	Если Не (ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
 		Возврат;
	КонецЕСли;
	
	Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКонтрагента()
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Если Не ПолучитьДанныеОбъекта("Объект.Банк.Контрагент") = Контрагент 
			ИЛИ Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ИзменитьДоговорКонтрагента()
		КонецЕсли; 
		Если ЗначениеЗаполнено(ПолучитьДанныеОбъекта("Объект.Банк.Контрагент")) Тогда
			Контрагент = ПолучитьДанныеОбъекта("Объект.Банк.Контрагент");
			Элементы.Контрагент.Заголовок = ПолучитьДанныеОбъекта("Контрагент.Наименование");
		Иначе 
			Контрагент = "";
			Элементы.Контрагент.Заголовок = "Контрагент не указан в спр. ""Банки""";			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

//Процедура устанавливает доступность элементов формы
//в зависимости от выбранных настроек
&НаКлиенте
Процедура УстановитьВидимость()
	ВидимостьКомиссии = (ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации"));
	Элементы.КомиссионноеОбслуживание.Видимость = ВидимостьКомиссии;	
	
	//видимость налогового учета
	ВидимостьНалоговогоУчета = ВидимостьКомиссии И ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(Объект.СчетЗатратБУ);
	//Элементы.НадписьСчетЗатратНУ.Видимость = ВидимостьНалоговогоУчета;
	Элементы.СчетЗатратНУ.Видимость = ВидимостьНалоговогоУчета;
	УстановитьВидимостьСубконтоНУ();
    	
КонецПроцедуры

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
&НаКлиенте
Процедура УстановитьВидимостьСубконто()
	Для Ном = 1 по 3 Цикл                                   		
		Если (Ном <= ОбъектСчетЗатратВидыСубконтоВидСубконто(Ном,"БУ Кол")) и (ЗначениеЗаполнено(Объект.СчетЗатратБУ)) Тогда
			Элементы["СубконтоЗатратБУ"+Ном].Заголовок = ОбъектСчетЗатратВидыСубконтоВидСубконто(ном,"БУ");
			Элементы["СубконтоЗатратБУ"+Ном].Видимость = Истина;
			//Элементы["СубконтоЗатратБУ"+Ном].Видимость        = Истина;
		Иначе
			//Элементы["НадписьСубконтоЗатратБУ"+Ном].Видимость = Ложь;
			Элементы["СубконтоЗатратБУ"+Ном].Видимость        = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НАСервере
Функция ОбъектСчетЗатратВидыСубконтоВидСубконто(Ном,парам)
	Если парам = "БУ" Тогда
		Возврат Объект.СчетЗатратБУ.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
	КонецЕсли;
	Если парам = "НУ" Тогда
		Возврат Объект.СчетЗатратНУ.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
	КонецЕсли;
	Если парам = "БУ Кол" тогда
		Возврат Объект.СчетЗатратБУ.ВидыСубконто.Количество();
	КонецЕсли;
	Если парам = "НУ Кол" тогда
		Возврат Объект.СчетЗатратНУ.ВидыСубконто.Количество();
	КонецЕсли;
КонецФункции
//&НАСервере
//Функция ОбъектСчетЗатратНУВидыСубконтоВидСубконтоНаименование(Ном)
//	
//КонецФункции


// Устанавливает видимость реквизитов субконто НУ  и подписей к ним.
//
&НаКлиенте
Процедура УстановитьВидимостьСубконтоНУ()
	Для Ном = 1 по 3 Цикл
		//Элементы["НадписьСубконтоЗатратНУ"+Ном].Видимость = Ложь;
		Элементы["СубконтоЗатратНУ"+Ном].Видимость        = Ложь;
		
		Если ВидимостьНалоговогоУчета Тогда
			Если (Ном <= ОбъектСчетЗатратВидыСубконтоВидСубконто(Ном,"НУ Кол")) и (ЗначениеЗаполнено(Объект.СчетЗатратНУ)) Тогда
				Элементы["СубконтоЗатратНУ"+Ном].Заголовок = ОбъектСчетЗатратВидыСубконтоВидСубконто(ном,"НУ");
				Элементы["СубконтоЗатратНУ"+Ном].Видимость = Истина;		
				//Элементы["СубконтоЗатратНУ"+Ном].Видимость        = Истина;
			КонецЕсли;                         
		КонецЕсли;
	КонецЦикла;                                 
	
КонецПроцедуры // УстановитьВидимостьСубконоНУ()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Функция КонстантыВалютаРегламентированногоУчетаПолучить()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции
// Обработчик события ПриОткрытии формы.
//

&НаКлиенте
Процедура ПриОткрытии()
СписокВидСчета = Элементы.ВидСчета.СписокВыбора;
СписокВидСчета.Добавить("Расчетный");
СписокВидСчета.Добавить("Депозитный");
СписокВидСчета.Добавить("Ссудный");
СписокВидСчета.Добавить("Иной");

мВалютаРегламентированногоУчета = КонстантыВалютаРегламентированногоУчетаПолучить();

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидСчета) Тогда
			Объект.ВидСчета = Элементы.ВидСчета.СписокВыбора[0];
		КонецЕсли;
		ЗаполнитьТекстКорреспондента();
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
			Объект.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
		КонецЕсли;
		Объект.МесяцПрописью = Истина;	
	КонецЕсли;
	
	мСчетБУ = Объект.СчетЗатратБУ;
	мСчетНУ = Объект.СчетЗатратНУ;

	ЗакрыватьПриВыборе = Ложь;
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (" + ?(Не Объект.Владелец = Неопределено и не Объект.Владелец.Пустая(), Объект.Владелец, "Владелец не задан") + ")";
	
	УстановитьФлагФормироватьНаименованиеАвтоматически();
	ЗаполнитьБИКБанка(Объект.Банк, Элементы.БИКБанка);
	ЗаполнитьБИКБанка(Объект.БанкДляРасчетов, Элементы.БИКБанкаДляРасчетов);
	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	УстановитьВидимостьСубконтоНУ();
	УстановитьДоступность();
	//заполним реквизит формы Контрагент
	Контрагент = ПолучитьДанныеОбъекта("Объект.Банк.Контрагент");
	
	ОбработкаКонтрагента();
	
КонецПроцедуры // ПриОткрытии

&НаСервере
Функция ПолучитьДанныеОбъекта(парам)
	Если парам = "Объект.Банк.Контрагент" ТОгда
		Возврат Объект.Банк.Контрагент;	
	КонецЕсли;
	Если парам = "Контрагент.Наименование" ТОгда
		Возврат Контрагент.Наименование;	
	КонецЕсли;
КонецФункции

// Обработчик события ПриЗаписи формы.
//
&НаКлиенте
//Процедура ПриЗаписи(Отказ)
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Контрагенты") 
		И НЕ Контрагент = ЗначениеВыбора	Тогда
		ОбработкаКонтрагента();
	КонецЕсли;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ЭЛЕМЕНТОВ

 // Обработчик события "ПриИзменении" реквизита "БанкДляРасчетов"
 //
&НаКлиенте
Процедура БанкДляРасчетовПриИзменении(Элемент)
	ЗаполнитьТекстКорреспондента();
	ЗаполнитьБИКБанка(Объект.БанкДляРасчетов, Элементы.БИКБанкаДляРасчетов);
КонецПроцедуры
 // Обработчик события "ПриИзменении" реквизита "НомерСчета"
 //
 
 &НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	ЗаполнитьТекстКорреспондента();
	СформироватьНаименованиеБанковскогоСчетаАвтоматически();
КонецПроцедуры

 // Обработчик события "ПриИзменении" реквизита "Банк"
 //
&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	ЗаполнитьТекстКорреспондента();
	СформироватьНаименованиеБанковскогоСчетаАвтоматически();
	ЗаполнитьБИКБанка(Объект.Банк, Элементы.БИКБанка);
	ОбработкаКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	УстановитьФлагФормироватьНаименованиеАвтоматически();
КонецПроцедуры

 // Обработчик события "ПриИзменении" реквизита "Владелец"
 //
&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	УстановитьВидимость();
	УстановитьДоступность()
КонецПроцедуры

&НаКлиенте
Процедура БанкОткрытие(Элемент, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.Банк)Тогда
		ФормаБанка = ПолучитьФорму("Справочник.Банки.ФормаОбъекта",Новый Структура("Ключ",Объект.Банк));
		ФормаБанка.ВладелецФормы = ЭтаФорма;
		Если Не ФормаБанка.Открыта() Тогда
			ФормаБанка.Открыть();
		Иначе 
			ФормаБанка.Активизировать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Контрагент = ПолучитьДанныеОбъекта("Объект.Банк.Контрагент");
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда		
		ПоказатьПредупреждение(, "Не указан контрагент!");
		Возврат;
	КонецЕсли;
	
	// Форма выбора
	СтруктураДоговоров = Новый СписокЗначений;
	СтруктураДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СтруктураДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	ОтборФормы = Новый Структура("Владелец, ВидДоговора, Организация", Контрагент, СтруктураДоговоров, Объект.Владелец);
	ОтборФормы.Вставить("ВедениеВзаиморасчетов", ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом"));
	ОтборФормы.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", Ложь);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.УправляемаяФормаВыбора", Новый Структура("Отбор", ОтборФормы), Элемент, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	//
	//ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	//ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	//ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	//
	////отбор по договорам контрагентов 
	//ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                        = ВидСравнения.ВСписке;
	//ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = СтруктураДоговоров;
	//ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	//ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;

	////также договора берем только по договру в целом, чтобы не было потом проблем с указанием сделок 
	////при выделении комисии	
	//ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.ВидСравнения                        = ВидСравнения.Равно;
	//ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.Значение                            = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	//ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.Использование                       = Истина;
	//ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВедениеВзаиморасчетов.Доступность = Ложь;
	//
	////Договора берем без признака "Вести по расчетным документам" 
	//Если  Не ФормаВыбора.СправочникСписок.Отбор.Найти("ВестиПоДокументамРасчетовСКонтрагентом") = Неопределено Тогда
	//	ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.ВидСравнения                        = ВидСравнения.Равно;
	//	ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.Значение           = Ложь;
	//	ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.Использование      = Истина;
	//	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВедениеВзаиморасчетов.Доступность = Ложь;
	//КонецЕсли;
	//
	////отбор по организации
	//ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Объект.Владелец;
	//ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	//ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	//ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	//      
	//ФормаВыбора.Открыть();	
	
	//ДоговорКонтрагентаНачалоВыбораНаСервере(Элемент);
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаНачалоВыбораНаСервере(Элемент)
	СтруктураДоговоров = Новый СписокЗначений;
	СтруктураДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
    ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	//отбор по договорам контрагентов 
	ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                        = ВидСравнения.ВСписке;
	ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = СтруктураДоговоров;
	ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;

	//также договора берем только по договру в целом, чтобы не было потом проблем с указанием сделок 
	//при выделении комисии	
	ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.Значение                            = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	ФормаВыбора.СправочникСписок.Отбор.ВедениеВзаиморасчетов.Использование                       = Истина;
	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВедениеВзаиморасчетов.Доступность = Ложь;
	
	//Договора берем без признака "Вести по расчетным документам" 
	Если  Не ФормаВыбора.СправочникСписок.Отбор.Найти("ВестиПоДокументамРасчетовСКонтрагентом") = Неопределено Тогда
		ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.Значение           = Ложь;
		ФормаВыбора.СправочникСписок.Отбор.ВестиПоДокументамРасчетовСКонтрагентом.Использование      = Истина;
		ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ВедениеВзаиморасчетов.Доступность = Ложь;
	КонецЕсли;
	
	//отбор по организации
	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = Объект.Владелец;
	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	      
	ФормаВыбора.Открыть();	

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНажатие(Элемент)
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаКонт = Контрагент.ПолучитьФорму();
		Если Не ФормаКонт.Открыта() Тогда
			ФормаКонт.Открыть();
		Иначе
			ФормаКонт.Активизировать();
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Банк) Тогда
			ФормаБанк = Объект.Банк.ПолучитьФорму();
			ФормаБанк.ВладелецФормы = ЭтаФорма;
			Если Не ФормаБанк.Открыта() Тогда
				ФормаБанк.Открыть();
			Иначе
				ФормаБанк.Активизировать();
			КонецЕсли;
		Иначе
			Сообщить("Не заполнено поле ""Банк"". Контрагент берется непосредственно из банка!!!", СтатусСообщения.Информация)
		КонецЕсли;
	КонецЕсли;  
	
	ОбработкаКонтрагента();
			
КонецПроцедуры

&НаКлиенте
Процедура Группа1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Не ПроверкаСоответствияКонтрагента() Тогда
		ОбработкаКонтрагента();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаСоответствияКонтрагента()
	Возврат Объект.Банк.Контрагент = Контрагент;
КонецФункции

&НаКлиенте
Процедура СубконтоЗатратБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(Объект["СубконтоЗатратБУ"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект["СубконтоЗатратБУ"+н]);
		КонецЕсли;
	КонецЦикла;
	
	ПроцедурыБухгалтерскогоУчета.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Объект.Владелец, СписокПараметров);
	
КонецПроцедуры
&НаКлиенте
Процедура СубконтоЗатратБУ1ПриИзменении(Элемент)
	ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 1, Объект.СубконтоЗатратБУ1, "СубконтоЗатратНУ");	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратБУ2ПриИзменении(Элемент)
	ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 2, Объект.СубконтоЗатратБУ2, "СубконтоЗатратНУ");	
КонецПроцедуры
&НаКлиенте
Процедура СубконтоЗатратБУ3ПриИзменении(Элемент)
	ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(Объект, Объект.СчетЗатратБУ, Объект.СчетЗатратНУ, 3, Объект.СубконтоЗатратБУ3, "СубконтоЗатратНУ");	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(Объект["СубконтоЗатратНУ"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект["СубконтоЗатратНУ"+н]);
		КонецЕсли;
	КонецЦикла;
                          	
	ПроцедурыБухгалтерскогоУчета.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Объект.Владелец, СписокПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СчетЗатратБУПриИзменении(Элемент)
	Если Объект.СчетЗатратБУ = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	ПриВыбореСчетаВТабличномПоле(Объект.СчетЗатратБУ,
								Объект.СубконтоЗатратБУ1, "СубконтоЗатратБУ1",
								Объект.СубконтоЗатратБУ2, "СубконтоЗатратБУ2",
								Объект.СубконтоЗатратБУ3, "СубконтоЗатратБУ3");
								
	ЗаполнитьСчетНалоговогоУчета(,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	УстановитьСтатьюДДСВАналитикеСчета();
	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();								
	
	мСчетБУ = Объект.СчетЗатратБУ;

КонецПроцедуры

// Процедура установки типа и доступности субконто в зависимости от выбранного счета
//
&НаСервере
Процедура ПриВыбореСчетаВТабличномПоле(	Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, 
										ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, 
										ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		Элементы[ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
			
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;	
				
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриВыбореСчетаВТабличномПоле()

&НаКлиенте
Процедура СчетЗатратНУПриИзменении(Элемент)
	Если Элемент = мСчетНУ Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыБухгалтерскогоУчета.ПриВыбореСчетаВТабличномПоле(Элемент,
	                             Объект.СубконтоЗатратНУ1,
	                             Элементы.СубконтоЗатратНУ1,
	                             Объект.СубконтоЗатратНУ2,
	                             Элементы.СубконтоЗатратНУ2,
	                             Объект.СубконтоЗатратНУ3,
	                             Элементы.СубконтоЗатратНУ3);
								 
	
	УстановитьВидимостьСубконтоНУ();
	
	мСчетНУ = Элемент;

КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	УстановитьДоступность();
	УчитыватьНДСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УчитыватьНДСПриИзмененииНаСервере()
	
	
	//подставим по умолчанию предопределенный элемент
	Если Не ЗначениеЗаполнено(Объект.НДСВидПоступления) Тогда
		Объект.НДСВидПоступления = Справочники.ВидыПоступления.КомиссияБанка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НДСВидОборота) И УчетНДСИАкциза.ПолучитьМетодОтнесенияНДСВЗачет(Объект.Владелец,ТекущаяДата()) = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный Тогда
		Объект.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Общий;
	Иначе
		Объект.НДСВидОборота = Перечисления.ВидыОборотовПоРеализации.Облагаемый;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДС)  Тогда
		Объект.СчетУчетаНДС = 	ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	КонецЕсли; 	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ