
#Область ОбработчикиСобытийформы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Владелец) И НЕ Справочники.фин_ВидыОтчетовПоБюджетам.ДоступноСозданиеНастроек(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вида отчетов """+Объект.Владелец+""" не доступна работа с настройками данного вида!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОграничиватьВидимостьНастроекОтчетов = фин_УправлениеОтчетамиБюджетирование.ОграничиватьВидимостьНастроекОтчетов();
	
//	Элементы.ВидНастройки.Доступность=ОграничиватьВидимостьНастроекОтчетов;
	
	// восстанавливаем отбор в поля формы
	
	Для Каждого СтрокаОтбор Из Объект.Отбор Цикл
		НоваяСтрока = Отбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбор);
		Если ЗначениеЗаполнено(СтрокаОтбор.ЗначениеСписок) Тогда
			НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(СтрокаОтбор.ЗначениеСписок);
		КонецЕсли;
	КонецЦикла;		

	фин_УправлениеОтчетамиБюджетирование.ПодготовкаФормыОтчета(ЭтотОбъект,Объект.Владелец);
	
	мОрганизацияПользователя 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОграничиватьВидимостьНастроекОтчетов Тогда
			Объект.ВидНастройки 				= Перечисления.фин_ВидыНастроекОтчета.ПерсональнаяНастройка;
			Объект.ОграничитьПоПользователям 	= Истина;
			Объект.Доступность.Очистить();
			НоваяСтрока = Объект.Доступность.Добавить();
			НоваяСтрока.Пользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.ЗначениеКопирования=Неопределено Тогда
			НачальноеЗаполнение();
		КонецЕсли;
	ИначеЕсли ОграничиватьВидимостьНастроекОтчетов И Объект.ВидНастройки=Перечисления.фин_ВидыНастроекОтчета.ШаблонДляОбщегоИспользования Тогда
		ТолькоПросмотр = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет прав на редактирование шаблонов!");
	ИначеЕсли ОграничиватьВидимостьНастроекОтчетов Тогда
		ЕстьПраво = Объект.Доступность.НайтиСтроки(Новый Структура("Пользователь,ЗапретитьИзменение",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"),Ложь)).Количество()<>0;
		Если НЕ ЕстьПраво Тогда
			ТолькоПросмотр = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет прав на редактирование данной настройки!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Отбор.Очистить();
	Для Каждого СтрокаОтбор Из Отбор Цикл
		НоваяСтрока = ТекущийОбъект.Отбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбор);
		Если ТипЗнч(СтрокаОтбор.Значение)=Тип("СписокЗначений") Тогда
			НоваяСтрока.ЗначениеСписок = ЗначениеВСтрокуВнутр(СтрокаОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	ТекущийОбъект.ДанныеОтчета.Очистить();
	Для Каждого СтрокаДанныеОтчета Из ДанныеОтчета Цикл
		НоваяСтрока = ТекущийОбъект.ДанныеОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанныеОтчета);
	КонецЦикла;
	ТекущийОбъект.ДополнительныеПараметрыОтчета.Очистить();
	Для Каждого ЭлементСписка Из СписокДополнительныхПараметров Цикл
		НоваяСтрока = ТекущийОбъект.ДополнительныеПараметрыОтчета.Добавить();
		НоваяСтрока.Параметр = ЭлементСписка.Значение;
		НоваяСтрока.Значение = ЭтотОбъект[ЭлементСписка.Значение];
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки


&НаКлиенте
Процедура ПриИзмененииПараметра(Элемент)
	УстановитьЗначениеПараметра(?(Элемент.Имя="Сценарий1","Сценарий",Элемент.Имя));
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Объект.Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	Объект.НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериодаПланирования,Объект.Периодичность);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,Объект.ВидДанных,Элементы,Объект.Периодичность,Объект.Сценарий,Объект.НачалоПериодаПланирования,Объект.КонецПериодаПланирования);
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзменении(Элемент)
	ЗаполнитьСпискиПоказателейИГруппировок();
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
	ВидДанныхПриИзмененииНаСервере(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	ПриИзмененииПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ВладелецПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидНастройкиПриИзменении(Элемент)
	Объект.СохранятьАвтоматически=Ложь;
	Элементы.СохранятьАвтоматически.Видимость=Объект.ВидНастройки=ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ПерсональнаяНастройка");
КонецПроцедуры

&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОбъектПериодичность = ?(Объект.Владелец<>ПредопределенноеЗначение("Справочник.фин_ВидыОтчетовПоБюджетам.фин_ИсполнениеБюджета") И Объект.ВидДанных<>ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Плановые") И Элементы.ВидДанных.Видимость,Объект.Периодичность,Объект.Сценарий);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.Бюджет,Объект.НачалоПериодаПланирования,Объект.КонецПериодаПланирования,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиНастройкиПериода

&НаКлиенте
Процедура НастройкаПериодаДатаНачалаПриИзменении(Элемент)
	Объект.НачалоПериода	= НастройкаПериода.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаДатаОкончанияПриИзменении(Элемент)
	Объект.КонецПериода	= НастройкаПериода.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаВариантПриИзменении(Элемент)
	Объект.НачалоПериода	= НастройкаПериода.ДатаНачала;
	Объект.КонецПериода	= НастройкаПериода.ДатаОкончания;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПериодСтроки(Команда)
	Если Элементы.ДанныеДляАнализа.ТекущиеДанные<>Неопределено Тогда
		ВыбратьПериодПланированияСтроки(Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода,Элементы.ПериодСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчета(Команда)
	ВыбратьПериодПланированияОтчета(ТекущаяДата(),Элементы.ДанныеДляАнализаПериодОтчета);
КонецПроцедуры

#КонецОбласти

#Область РаботаСПериодомПланирования

&НаКлиенте
Процедура ВыбратьПериодПланированияСтроки(Период,Элемент)
	Если Элементы.ДанныеДляАнализа.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбъектПериодичность = ?(ЗначениеЗаполнено(Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВыбораПериодаСтроки",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.Бюджет,Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода,Элементы.ДанныеДляАнализа.ТекущиеДанные.ОкончаниеПериода,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыбораПериодаСтроки(мРезультат,Элемент) Экспорт
	Если мРезультат<>Неопределено Тогда
		Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода 		= мРезультат.НачалоПериода;
		Элементы.ДанныеДляАнализа.ТекущиеДанные.ОкончаниеПериода 	= мРезультат.КонецПериода;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланированияОтчета(Период,Элемент)
	Если Объект.ДанныеДляАнализа.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ОбъектПериодичность	= ПолучитьСценарийОтчета();
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбработчикОповещенияВыбораПериодаОтчета",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.Бюджет,Объект.ДанныеДляАнализа[0].НачалоПериода,Объект.ДанныеДляАнализа[0].ОкончаниеПериода,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыбораПериодаОтчета(мРезультат,Элемент) Экспорт
	Если мРезультат<>Неопределено Тогда
		НастроитьПериодыВСтроках(мРезультат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодыВСтроках(Период)
	Для Каждого ТекущиеДанные Из Объект.ДанныеДляАнализа Цикл
		СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
		ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Период.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Период.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
		ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(Период.КонецПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Период.КонецПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПоказатели

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Таблица = ТекущаяТаблица;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДоступныеПоказатели;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыГруппировки

&НаКлиенте
Процедура ГруппировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Группировки.ТекущиеДанные.ВидГруппировки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок");
		Элементы.Группировки.ТекущиеДанные.Расположение = ПредопределенноеЗначение("Перечисление.фин_РасположениеПолейГруппировокОтчета.Вместе");
		Элементы.Группировки.ТекущиеДанные.Цвет = Новый Цвет(255,255,255);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнициироватьРедактированиеГруппировки(Элементы.Группировки.ТекущиеДанные,Элементы.Группировки.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ВидГруппировки = Неопределено;
		ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
		Если ТекущиеДанные<>Неопределено Тогда
			ВидГруппировки = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ТекущиеДанные.ВидГруппировки);
		КонецЕсли;
		ИнициироватьРедактированиеГруппировки(Новый Структура("ВидГруппировки,Расположение,Цвет",?(ВидГруппировки=Неопределено,ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок"),ВидГруппировки),ПредопределенноеЗначение("Перечисление.фин_РасположениеПолейГруппировокОтчета.Вместе"),Новый Цвет(255,255,255)));
	Иначе
		ИнициироватьРедактированиеГруппировки(Элементы.Группировки.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ГруппировкиДерево.НайтиПоИдентификатору(Строка).ПолучитьЭлементы().Количество()>0 И ГруппировкиДерево.НайтиПоИдентификатору(Строка).ВидГруппировки<>ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Поле") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	ВидГруппировкиПриемника = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ГруппировкиДерево.НайтиПоИдентификатору(Строка).ВидГруппировки);
	ВидГруппировкиИсточника = Элемент.ТекущиеДанные.ВидГруппировки;
	Если ВидГруппировкиПриемника = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ВидГруппировкиИсточника) Тогда
		СтандартнаяОбработка = Ложь;
		Приемник 		= ГруппировкиДерево.НайтиПоИдентификатору(Строка);
		Источник		= Элемент.ТекущиеДанные;
		НовыйРодитель 	= Источник.ПолучитьРодителя();
		фин_УправлениеОтчетамиКлиентСервер.ПеренестиПодчиненныеСтрокиНаРодителя(Источник,Приемник);
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Источник);
		фин_УправлениеОтчетамиКлиентСервер.ПеренестиПодчиненныеСтрокиНаУказанную(Приемник,НоваяСтрока,Источник);
		Если ГруппировкиДерево.НайтиПоИдентификатору(Источник.ПолучитьИдентификатор())<>Неопределено Тогда
			Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
		Элементы.Группировки.ТекущаяСтрока =  НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Группировки.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
	Иначе
		Элемент.ТекущиеДанные.ВидГруппировки =  фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировкиПриемникаПриПеретаскивании(ВидГруппировкиИсточника,ВидГруппировкиПриемника);
		ПодчиненнаяСтрока = Элемент.ТекущиеДанные;
		НачальнаяСтрока = ПодчиненнаяСтрока; 
		Пока ПодчиненнаяСтрока.ПолучитьЭлементы().Количество()>0 И НЕ НачальнаяСтрока = ПодчиненнаяСтрока Цикл 
			ПодчиненнаяСтрока = ПодчиненнаяСтрока.ПолучитьЭлементы()[0];
			ПодчиненнаяСтрока.ВидГруппировки =  фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировкиПриемникаПриПеретаскивании(ПодчиненнаяСтрока.ВидГруппировки,ВидГруппировкиПриемника);
		КонецЦикла;
		Элементы.Группировки.Развернуть(Строка,Истина);
	КонецЕсли;
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПослеУдаления(Элемент)
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиОтключитьПриИзменении(Элемент)
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтбор

&НаКлиенте
Процедура ОтборПолеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ДоступныеГруппировки Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования") Тогда
			Продолжить;
		КонецЕсли;
		Список.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	КонецЦикла;
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолеОтбораПриИзменении(Элемент)
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	ОбработатьИзменениеПоляОтбора(СтрокаОтбора.ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.Равно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеРавно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии"));
	Если Элемент.Родитель = Элементы.ОтборТаблиц И ЗначениеЗаполнено(ТекущаяТаблица) Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.Заполнено"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеЗаполнено"));
	КонецЕсли;
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	ОбработатьИзменениеПоляОтбора(СтрокаОтбора.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипПоля = Неопределено;
	
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	
	ОписаниеТипов = ПолучитьТипПоляОтбора(ТипПоля,СтрокаОтбора.ПолучитьИдентификатор());
	
	ПолеЗначенияОтбора 							= Элементы[Элемент.Имя];
	ПолеЗначенияОтбора.ОграничениеТипа 			= ОписаниеТипов;
	ПолеЗначенияОтбора.СписокВыбора.ТипЗначения = ТипПоля;
	
	Если ПолеЗначенияОтбора.ОграничениеТипа.СодержитТип(Тип("СписокЗначений")) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияВыбораСписка = Новый ОписаниеОповещения("ОбработатьВыборСпискаОтбора",ЭтотОбъект,СтрокаОтбора.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.фин_ЗаполнениеСпискаЗначений",Новый Структура("ТипСписка,СписокЗначений",ТипПоля,СтрокаОтбора.Значение),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораСписка,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ПолеЗначенияОтбора.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.фин_СтатьиБюджета")) Тогда
		//Попытка
			ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",Новый Структура("Отбор,ТекущаяСтрока",Новый Структура("Владелец",Объект.Бюджет),СтрокаОтбора.Значение),Элемент,УникальныйИдентификатор);
			СтандартнаяОбработка = Ложь;
		//Исключение
		//КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеДляАнализа

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияПриИзменении(Элемент)
	Для Каждого ТекущиеДанные Из Объект.ДанныеДляАнализа Цикл
		СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
		ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(ТекущиеДанные.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущиеДанные.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
		ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(ТекущиеДанные.ОкончаниеПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущиеДанные.ОкончаниеПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаНачалоПериодаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(ТекущиеДанные.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущиеДанные.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаОкончаниеПериодаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(ТекущиеДанные.ОкончаниеПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущиеДанные.ОкончаниеПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаНачалоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	Если ТекущиеДанные.НачалоПериода = '00010101' Тогда
		ТекущиеДанные.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ТекущиеДанные.ОкончаниеПериода = '00010101' Тогда
		ТекущиеДанные.ОкончаниеПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ТекущиеДанные.НачалоПериода,СценарийПериода,?(Направление>0,Истина,Ложь)),НачалоМесяца(ДобавитьМесяц(НачалоМесяца(ТекущиеДанные.НачалоПериода),Направление)));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаОкончаниеПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	Если ТекущиеДанные.НачалоПериода = '00010101' Тогда
		ТекущиеДанные.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ТекущиеДанные.ОкончаниеПериода = '00010101' Тогда
		ТекущиеДанные.ОкончаниеПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	СценарийПериода					= ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.ОкончаниеПериода 	= ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ТекущиеДанные.ОкончаниеПериода,СценарийПериода,?(Направление>0,Истина,Ложь)),СценарийПериода),КонецМесяца(ДобавитьМесяц(КонецМесяца(ТекущиеДанные.ОкончаниеПериода),Направление)));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения = фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.Форма.ФормаВыбораДляОтчетов",Новый Структура("ТекущаяСтрока",Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения),Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Очистить();
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Фактические"));
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Прогнозные"));
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеОтчета

&НаКлиенте
Процедура ДанныеОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.СуммаУпр");
		Элементы.ДанныеОтчета.ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	Если НоваяСтрока Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПоФормулеПриИзменении(Элемент)
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ПоФормуле Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.ПустаяСсылка");
		Элементы.ДанныеОтчета.ТекущиеДанные.Данные = фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();
		Элементы.ДанныеОтчета.ТекущиеДанные.НачалоПериода = '00010101';
		Элементы.ДанныеОтчета.ТекущиеДанные.ОкончаниеПериода = '00010101';
	Иначе
		Элементы.ДанныеОтчета.ТекущиеДанные.Формула = "";
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.СуммаУпр");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресХранилища = ПоместитьПоказателиВХранилище();
	ПараметрыФормулы = Новый Структура("Формула,ВходящиеПоказатели",Элементы.ДанныеОтчета.ТекущиеДанные.Формула,АдресХранилища);
	ОписаниеОбработкаВводаФормулы = Новый ОписаниеОповещения("ОбработкаВводаФормулы",ЭтотОбъект,Элементы.ДанныеОтчета.ТекущиеДанные);
	ОткрытьФорму("Отчет."+ИмяОтчета+".Форма.ФормаВводаФормулы",ПараметрыФормулы,Элемент,,,,ОписаниеОбработкаВводаФормулы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаФормулы(РезультатВвода,ТекущиеДанные) Экспорт
	Если РезультатВвода<>Неопределено Тогда
		ТекущиеДанные.Формула = РезультатВвода;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаИдентификаторПоляПриИзменении(Элемент)
	ИдентификаторПоля = Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля;
	Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(ИдентификаторПоля);
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля="" Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля<>"" И ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля",Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля)).Количество()>1  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя создавать показатели с одинаковыми идентификаторами!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьСлужебныеСловаЗапроса().Найти(ВРег(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля))<>Неопределено  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя присвоить показателю идентификатор, совпадающий с одним из ключевых слов!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля)  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя присвоить показателю числовой идентификатор!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(Лев(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля,1))  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Идентификатор показателя не может начинаться с цифры!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаДанныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.Форма.ФормаВыбораДляОтчетов",Новый Структура("ТекущаяСтрока",Элементы.ДанныеОтчета.ТекущиеДанные.Данные),Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаДанныеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Очистить();
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Фактические"));
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Прогнозные"));
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВидыАналитическихДанных

&НаКлиенте
Процедура ВидыАналитическихДанныхВидДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ИмяОтчета <> "фин_ИсполнениеБюджета" ИЛИ ПолучитьФункциональнуюОпциюИнтерфейса("фин_ИспользоватьАнализОтклоненийФактическихДанных")=Ложь Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное"));
		ДанныеВыбора = Список;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыТаблицыОтчета

&НаКлиенте
Процедура ТаблицыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование ИЛИ Объект.ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"))).Количество()>0 Тогда
		Отказ = Истина;
		ОписаниеОповещенияВыбораТаблицы = Новый ОписаниеОповещения("ОбработчикВыбораТаблицыОтчета",ЭтотОбъект,Копирование);
		ВладелецТаблиц = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВладелецТаблиц.Добавить(Объект.Ссылка);
		КонецЕсли;
		ВладелецТаблиц.Добавить(Объект.Владелец);
		ОткрытьФорму("Справочник.фин_ТаблицыОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец",ВладелецТаблиц)),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыОтчетаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицыОтчета.ТекущиеДанные;
	ТекущаяТаблица = ?(ТекущиеДанные=Неопределено,ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"),ТекущиеДанные.Таблица);
	УстановитьОтборПоТаблицеОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыОтчетаТаблицаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицыОтчета.ТекущиеДанные;
	Если Объект.ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",ТекущиеДанные.Таблица)).Количество()>1 Тогда
		ТекущиеДанные.Таблица = ТекущаяТаблица;
		ПоказатьПредупреждение(,"Нельзя добавлять две одинаковые таблицы в настройки!");
	Иначе
		НоваяТаблица = ТекущиеДанные.Таблица;
		ПеренестиНастройкиТаблицы(ТекущаяТаблица,НоваяТаблица);
		ТекущаяТаблица = ?(ТекущиеДанные=Неопределено,ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"),ТекущиеДанные.Таблица);
		УстановитьОтборПоТаблицеОтчета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыОтчетаТаблицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВладелецТаблиц = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВладелецТаблиц.Добавить(Объект.Ссылка);
	КонецЕсли;
	ВладелецТаблиц.Добавить(Объект.Владелец);
	//ВладелецТаблиц = Объект.Владелец;
	ОткрытьФорму("Справочник.фин_ТаблицыОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец",ВладелецТаблиц)),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтборТаблиц

&НаКлиенте
Процедура ОтборТаблицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ОтборТаблиц.ТекущиеДанные.Таблица = ТекущаяТаблица;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСпискиПоказателейИГруппировок()
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировокВФормеОтчета(ЭтотОбъект,Объект.Владелец,Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИПараметры(ОбъектОтчета=Неопределено)
	Сохранять = Ложь;
	Если ОбъектОтчета=Неопределено Тогда
		Сохранять = Истина; 
		ОбъектОтчета = Справочники.фин_ВидыОтчетовПоБюджетам.НовыйЭкземплярОтчета(Объект.Владелец);
	КонецЕсли;
	МетаданныеОтчета = Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(Объект.Владелец);
	Если МетаданныеОтчета=Неопределено Тогда
		Возврат;
	КонецЕсли;
	РеквизитыНастроек = фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитыСправочникаНастроекОтчетов();
	ПараметрОрганизация = МетаданныеОтчета.Реквизиты.Найти("Организация");
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") И ПараметрОрганизация<>Неопределено И НЕ ЗначениеЗаполнено(ЭтотОбъект["Организация"])  Тогда
		ЭтотОбъект["Организация"] 		= мОрганизацияПользователя;
	КонецЕсли;
	Попытка
		СтруктураПараметров = ОбъектОтчета.ЗаполнениеПараметров;
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			мПараметр = МетаданныеОтчета.Реквизиты.Найти(ЭлементСтруктуры.Ключ);
			Если мПараметр<>Неопределено Тогда
				Если РеквизитыНастроек.Найти(НРег(ЭлементСтруктуры.Ключ))<>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(Объект[ЭлементСтруктуры.Ключ]) Тогда
						Объект[ЭлементСтруктуры.Ключ] 		= ЭлементСтруктуры.Значение;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ЭлементСтруктуры.Ключ]) Тогда
						ЭтотОбъект[ЭлементСтруктуры.Ключ] 		= ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметра(Имя)
	ОтчетОбъект 		= Справочники.фин_ВидыОтчетовПоБюджетам.НовыйЭкземплярОтчета(Объект.Владелец);
	ПереченьОсновныхРеквизитов = ОтчетОбъект.ПереченьОсновныхРеквизитов;
	Если ПереченьОсновныхРеквизитов.Найти(Имя)<>Неопределено ИЛИ (Имя = "Бюджет" И Объект.Владелец=Справочники.фин_ВидыОтчетовПоБюджетам.фин_ПечатьБюджета) Тогда
		фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировокВФормеОтчета(ЭтотОбъект,Объект.Владелец,Объект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	Возврат НадписьПериодПланирования;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПериодичности()
	Объект.НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериодаПланирования,Объект.Периодичность);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,Объект.ВидДанных,Элементы,Объект.Периодичность,Объект.Сценарий,Объект.НачалоПериодаПланирования,Объект.КонецПериодаПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоляОтбора(ИдентификаторСтроки)
	ОписаниеТипов 	= ПолучитьТипПоляОтбора(,ИдентификаторСтроки);
	ТекущаяСтрока 	= Отбор.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.Значение 	= ОписаниеТипов.ПривестиЗначение(ТекущаяСтрока.Значение);
КонецПроцедуры

&НаСервере
Функция ПолучитьТипПоляОтбора(ТипПоля = Неопределено,ИдентификаторСтроки)
	ТекущаяСтрока 	= Отбор.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТипПоля 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(ТекущаяСтрока.ПолеОтбора);
	ОписаниеТипов 	= фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(ТипПоля,ТекущаяСтрока.ВидСравнения);
	Возврат ОписаниеТипов;
КонецФункции

&НаСервере
Функция ПолучитьТипПоляГруппы(Измерение)
	ТипПоля = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(Измерение);
	ОписаниеТипов = фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(ТипПоля);
	Возврат ОписаниеТипов;
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборСпискаОтбора(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <>Неопределено Тогда
		СтрокаОтбора = Отбор.НайтиПоИдентификатору(ДополнительныеПараметры);
		СтрокаОтбора.Значение = РезультатВыбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура  ОбработкаВыбораЭлементаСписка(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ПоказатьЗначение(,РезультатВыбора.Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ПолеРодителя.Поле;
				НС.Значение = ПолеРодителя.Значение;
				НС.ВидСравнения = ?(ЗначениеЗаполнено(ПолеРодителя.Значение),?(ПолеРодителя.Иерархия,"ВИерархии","Равно"),"Незаполнено");
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСценарийОтчета()
	Для Каждого СтрокаДанных Из Объект.ДанныеДляАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования() Тогда
			Возврат СтрокаДанных.ДанныеДляСравнения;
		КонецЕсли;
	КонецЦикла;
	Возврат фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();
КонецФункции

&НаСервере
Функция ПоместитьПоказателиВХранилище()
	ДанныеОтчетаТаблица = ДанныеФормыВЗначение(ДанныеОтчета,Тип("ТаблицаЗначений"));
	ВходящиеПоказатели = ДанныеОтчетаТаблица.Скопировать(Новый Структура("Использование,ПоФормуле",Истина,Ложь),"Заголовок,ИдентификаторПоля");
	ВходящиеПоказатели.Колонки.ИдентификаторПоля.Имя = "Поле";
	ВходящиеПоказатели.Колонки.Заголовок.Имя = "Показатель";
	Возврат ПоместитьВоВременноеХранилище(ВходящиеПоказатели,УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторПоля()
	НомерПоля = ДанныеОтчета.Количество();
	Пока ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля","ИД"+Строка(НомерПоля))).Количество()>0 Цикл
		НомерПоля = НомерПоля + 1;
	КонецЦикла;
	Возврат "ИД"+Строка(НомерПоля);
КонецФункции

&НаКлиенте
Процедура ИнициироватьРедактированиеГруппировки(ДанныеСтроки,ИдентификаторСтроки=Неопределено)
	СтруктураЗаполнения = Новый Структура("ДополнительныеПредставления,ВидГруппировки,Измерение,ОтборПоУровнюЗначимости,ПрименятьОформление,Расположение,РасположениеРеквизитов,Состав,СоставноеПоле,Сортировка,УровеньЗначимости,Цвет,Шрифт,ДоступныеГруппировки,ИмяОтчета,ИспользоватьВидГруппировки,ИспользоватьСоставноеПоле,ИспользоватьРасположение,ИспользоватьСортировку,ПоказателиДляСортировки");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,ЭтотОбъект);
	СтруктураЗаполнения.Вставить("СоответствиеТиповГруппировкам",Новый ФиксированноеСоответствие(СоответствиеТиповГруппировкам()));
	ОписаниеОповещенияРедактированияГруппировки = Новый ОписаниеОповещения("ОбработатьНастройкуГруппировки",ЭтотОбъект,ИдентификаторСтроки);
	ОткрытьФорму("ОбщаяФорма.фин_ФормаНастройкиГруппировкиОтчета",СтруктураЗаполнения,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияРедактированияГруппировки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуГруппировки(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		СтрокаГруппировок = ?(ДополнительныеПараметры=Неопределено,фин_УправлениеОтчетамиКлиентСервер.ОпределитьСтрокуИерархииДляДобавленияГруппировки(ГруппировкиДерево,РезультатЗакрытия).ПолучитьЭлементы().Добавить(),ГруппировкиДерево.НайтиПоИдентификатору(ДополнительныеПараметры));
		ЗаполнитьЗначенияСвойств(СтрокаГруппировок,РезультатЗакрытия);
		СтрокаГруппировок.Представление = фин_УправлениеОтчетамиКлиентСервер.ПредставлениеГруппировкиОтчета(СтрокаГруппировок,ДополнительныеПредставления);
		//СтрокаГруппировок.Таблица = ТекущаяТаблица;
		Элементы.Группировки.Развернуть(СтрокаГруппировок.ПолучитьРодителя().ПолучитьИдентификатор(),Истина);
		ПерезаполнитьВнутренниеГруппировки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоответствиеТиповГруппировкам()
	Соответствие = Новый Соответствие;
	Для Каждого ПолеГруппа Из ДоступныеГруппировки Цикл
		Соответствие.Вставить(ПолеГруппа.Значение,ПолучитьТипПоляГруппы(ПолеГруппа.Значение));
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьВнутренниеГруппировки()
	Если ПоддержкаНесколькихТаблиц Тогда
		СтрокиГруппировок = Объект.Группировки.НайтиСтроки(Новый Структура("Таблица",ТекущаяТаблица));
		Для Каждого СтрокаУдалить Из СтрокиГруппировок Цикл
			Объект.Группировки.Удалить(СтрокаУдалить);
		КонецЦикла;
	Иначе
		Объект.Группировки.Очистить();
	КонецЕсли;
	ДобавитьГруппировкиИзДерева(ГруппировкиДерево.ПолучитьЭлементы());	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировкиИзДерева(ЭлементыДерева)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоГруппа = Ложь Тогда
			НС = Объект.Группировки.Добавить();
			ЗаполнитьЗначенияСвойств(НС,ЭлементДерева);
			НС.Сортировка = ?(ЭлементДерева.Сортировка.Количество()=0,"",ПреобразоватьВСтроку(ЭлементДерева.Сортировка));
			НС.Состав = ?(ЭлементДерева.Состав.Количество()=0,"",ПреобразоватьВСтроку(ЭлементДерева.Состав));
			НС.Цвет = ПреобразоватьВСтроку(ЭлементДерева.Цвет);
			НС.Шрифт = ПреобразоватьВСтроку(ЭлементДерева.Шрифт);
			Если ПоддержкаНесколькихТаблиц Тогда
				НС.Таблица = ТекущаяТаблица;
			КонецЕсли;
		КонецЕсли;
		ДобавитьГруппировкиИзДерева(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьВСтроку(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоТаблицеОтчета()
	Если ПоддержкаНесколькихТаблиц Тогда
		Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.ВидыАналитическихДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.Отбор.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"));	
		Элементы.ОтборТаблиц.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.АналитическиеПоляСводаКорректировок.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);
		фин_УправлениеОтчетамиКлиентСервер.ЗаполнитьИерархиюГруппировокИзТаблицы(ГруппировкиДерево,Объект.Группировки,ТекущаяТаблица,ПоддержкаНесколькихТаблиц,Истина);
		Для Каждого ЭлементДерева Из ГруппировкиДерево.ПолучитьЭлементы() Цикл
			Элементы.Группировки.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиТаблицы(ИсходнаяТаблица,Результирующая,Копирование = Ложь)
	ОбрабатываемыеТаблицыФормы = Новый Массив;
	ОбрабатываемыеТаблицыФормы.Добавить(Объект.Показатели);
	ОбрабатываемыеТаблицыФормы.Добавить(Объект.Группировки);
	ОбрабатываемыеТаблицыФормы.Добавить(Объект.ВидыАналитическихДанных);
	ОбрабатываемыеТаблицыФормы.Добавить(Объект.АналитическиеПоляСводаКорректировок);
	Для Каждого ТаблицаФормы Из ОбрабатываемыеТаблицыФормы Цикл
		СтрокиОбработать = ТаблицаФормы.НайтиСтроки(Новый Структура("Таблица",ИсходнаяТаблица));
		Для Каждого СтрокаОбработать Из СтрокиОбработать Цикл
			Если Копирование Тогда
				НоваяСтрока = ТаблицаФормы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОбработать);
				НоваяСтрока.Таблица = Результирующая;
			Иначе
				СтрокаОбработать.Таблица = Результирующая;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораТаблицыОтчета(РезультатВыбора,Копирование)  Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Если Объект.ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",РезультатВыбора)).Количество()>0 Тогда
			ПоказатьПредупреждение(,"Нельзя выбрать одну и ту же таблицу более одного раза");	
		Иначе
			НоваяСтрока = Объект.ТаблицыОтчета.Добавить();
			НоваяСтрока.Таблица = РезультатВыбора;
			Если Копирование = Истина Тогда
				ПеренестиНастройкиТаблицы(ТекущаяТаблица,РезультатВыбора,Истина);
			КонецЕсли;
			Элементы.ТаблицыОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ТекущаяТаблица = РезультатВыбора;
			УстановитьОтборПоТаблицеОтчета();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИмяОтчета 			= Справочники.фин_ВидыОтчетовПоБюджетам.ПолучитьИмяМетаданныхОтчета(Объект.Владелец);
	фин_УправлениеОтчетамиБюджетирование.УправлениеФормойОтчета(ЭтотОбъект,Объект.Владелец,Параметры,,Объект);
	
	Если Объект.Владелец<>Справочники.фин_ВидыОтчетовПоБюджетам.фин_ИсполнениеБюджета Тогда
		МетаданныеОтчета = Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(Объект.Владелец);
		Если МетаданныеОтчета<>Неопределено И МетаданныеОтчета.Реквизиты.Найти("ВидДанных")<>Неопределено И МетаданныеОтчета.Реквизиты.Найти("Сценарий")<>Неопределено Тогда
			Факт = (Объект.ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.Плановые И Объект.ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.ПустаяСсылка());
			Если Факт Тогда
				Элементы.Сценарий.Видимость = Ложь;
				Элементы.Периодичность.Видимость = Истина;
			Иначе
				Элементы.Сценарий.Видимость = Истина;
				Элементы.Периодичность.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//УстановитьТекстПериода();
	//фин_УправлениеОтчетамиБюджетирование.НастроитьРасширенноеПредставлениеРазрезов(ЭтотОбъект,"Отбор","ПолеОтбора",Ложь,Истина,ДополнительныеПредставления);
	Элементы.НастройкиОтбора.Видимость			= ДоступныеГруппировки.Количество()>0 И ИмяОтчета<>"фин_ПользовательскийОтчет";
	Элементы.ВидНастройки.ТолькоПросмотр 		= ОграничиватьВидимостьНастроекОтчетов;
	Элементы.ГруппаДоступность.ТолькоПросмотр 	= ОграничиватьВидимостьНастроекОтчетов;
	Элементы.СохранятьАвтоматически.Видимость=Объект.ВидНастройки=ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ПерсональнаяНастройка");
КонецПроцедуры


&НаСервере
Процедура НачальноеЗаполнение()
	УстановитьОтборИПараметры();
	Если НЕ ПоддержкаНесколькихТаблиц Тогда
		Объект.ТаблицыОтчета.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.Владелец) И НЕ Справочники.фин_ВидыОтчетовПоБюджетам.ДоступноСозданиеНастроек(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для вида отчетов """+Объект.Владелец+""" не доступна работа с настройками данного вида!");
		Объект.Владелец = Справочники.фин_ВидыОтчетовПоБюджетам.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	ГруппировкиДерево.ПолучитьЭлементы().Очистить();
	Если Объект.Владелец=Справочники.фин_ВидыОтчетовПоБюджетам.фин_ВременнойАнализБюджетныхДанных Тогда
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаГруппировка Из Объект.Группировки Цикл
			Если СтрокаГруппировка.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.Колонка ИЛИ СтрокаГруппировка.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.КолонкаСИерерахией Тогда
				СтрокиУдалить.Добавить(СтрокаГруппировка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.Группировки.Удалить(СтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	фин_УправлениеОтчетамиБюджетирование.ПодготовкаФормыОтчета(ЭтотОбъект,Объект.Владелец);
	УправлениеФормой();
	НачальноеЗаполнение();
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Модифицированность=Истина;
		Объект.НачалоПериодаПланирования = РезультатВыбора.НачалоПериода;
		Объект.КонецПериодаПланирования = РезультатВыбора.КонецПериода;
		фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,Объект.ВидДанных,Элементы,Объект.Периодичность,Объект.Сценарий,Объект.НачалоПериодаПланирования,Объект.КонецПериодаПланирования,Ложь);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ВидДанныхПриИзмененииНаСервере(ИмяЭлемента)
	МетаданныеОтчета = Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(Объект.Владелец);
	Если МетаданныеОтчета.Реквизиты.Найти("ВидДанных")<>Неопределено И МетаданныеОтчета.Реквизиты.Найти("Сценарий")<>Неопределено Тогда
		Факт = Объект.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Плановые") И Объект.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ПустаяСсылка");
		Если Факт Тогда
			Элементы.Сценарий.Видимость = Ложь;
			Элементы.Периодичность.Видимость = Истина;
		Иначе
			Элементы.Сценарий.Видимость = Истина;
			Элементы.Периодичность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Объект.НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериодаПланирования,Объект.Периодичность);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,Объект.ВидДанных,Элементы,Объект.Периодичность,Объект.Сценарий,Объект.НачалоПериодаПланирования,Объект.КонецПериодаПланирования);
	УстановитьЗначениеПараметра(?(ИмяЭлемента="Сценарий1","Сценарий",ИмяЭлемента));
КонецПроцедуры



#КонецОбласти