
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.СправочникПриСозданииНаСервере(ЭтаФорма);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)    // пример обработки внешнего оповещения
	
	Если ИмяСобытия = "Запись_БанковскийСчет" Тогда
		Элементы.БанковскиеСчета.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_Договор" Тогда
		Элементы.Договоры.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_КонтактноеЛицо" Тогда
		Элементы.КонтактныеЛица.Обновить();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	ПериодичностьПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Периодичность""!'"),,"Периодичность");
	Иначе		
		ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("Периодичность", Периодичность));
		ОткрытьФорму("Справочник.СценарииПланирования.ФормаВыбора", ПараметрыОткрытия, Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньПлатежаПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	СпособРасчетаПриИзмененииНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен период графика!'"),, "Период");
		Возврат;
	КонецЕсли;
	
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала на должна быть больше даты окончания!'"),, "Период");
	    Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена периодичность!'"),, "Периодичность");
		Возврат;
	КонецЕсли;
	//таблица значений на сервере
	Массив = ЗаполнитьТЗНаСервере();
	
	Если ЗаполнитьЗаново Тогда
		ИмяСобытия = "ЗаполнениеГрафикаЗаново";
	Иначе
		ИмяСобытия = "ЗаполнениеГрафика";
	КонецЕсли;
	Оповестить(ИмяСобытия, Массив);
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Параметры.Свойство("ЗаполнитьЗаново") Тогда 
		ЗаполнитьЗаново = Параметры.ЗаполнитьЗаново;
	КонецЕсли;
	
	Периодичность = Перечисления.фин_Периодичность.День;
	СписокПериодичности = фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Периодичность);
	Элементы.ДеньПлатежа.СписокВыбора.ЗагрузитьЗначения(СписокПериодичности.ВыгрузитьЗначения());
	День = 1;
	СмещениеВПериодах = 1;
	НадписьОтражениеПоБюджетам = "Отражение по бюджетам";
	НадписьРасчетДатыОплаты = "Расчет даты оплаты";
	НадписьРасчетПоПлановойСумме = "Расчет по плановой сумме";
	НадписьРасчетСуммыОплаты = "Расчет суммы оплаты"; 
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// установка видимости и доступности элементов в зависимости от значений реквизитов
	Если Форма.Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		Элементы.СмещениеВПериодах.Видимость = Ложь;
		Элементы.День.Видимость = Ложь;
		Форма.ДеньПлатежа = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День");
		Элементы.ДеньПлатежа.Доступность = Ложь;
	ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Неделя")
		ИЛИ Форма.Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.Декада") Тогда
		Форма.ДеньПлатежа = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День");
		Элементы.ДеньПлатежа.Доступность = Ложь;
		Элементы.День.Видимость = Истина;
		Форма.СмещениеВПериодах = 1;
	Иначе
		Элементы.СмещениеВПериодах.Видимость = Истина;
		Элементы.День.Видимость = Истина;
		Элементы.ДеньПлатежа.Доступность = Истина;
	КонецЕсли;
	Если Форма.ДеньПлатежа = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") Тогда
		Элементы.СмещениеВПериодах.Видимость = Ложь;
	Иначе
		Элементы.СмещениеВПериодах.Видимость = Истина;
	КонецЕсли;
	Если Форма.СпособРасчета = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма") Тогда
		Элементы.Сумма.Видимость = Ложь;
		Элементы.ПроцентОтСуммы.Видимость = Истина;
		Элементы.МинимальнаяСуммаЗадолженности.Видимость = Истина;
		Элементы.ПоСценарию.Видимость = Истина;
	ИначеЕсли Форма.СпособРасчета = ПредопределенноеЗначение("Перечисление.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой") Тогда
		Элементы.Сумма.Видимость = Истина;
		Элементы.ПроцентОтСуммы.Видимость = Ложь;
		Элементы.МинимальнаяСуммаЗадолженности.Видимость = Ложь;
		Элементы.ПоСценарию.Видимость = Ложь;
	Иначе
		Элементы.Сумма.Видимость = Ложь;
		Элементы.ПроцентОтСуммы.Видимость = Истина;
		Элементы.МинимальнаяСуммаЗадолженности.Видимость = Истина;
		Элементы.ПоСценарию.Видимость = Ложь;
	КонецЕсли;
	Если Форма.Сценарий.Периодичность <> Форма.Периодичность Тогда
		Форма.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТЗНаСервере()
	Плановая = Ложь;
	Если СпособРасчета = Перечисления.дог_СпособыРасчетаСуммыПлатежей.ПлановаяСумма Тогда
		Плановая = Истина;
	КонецЕсли;
	Массив = РассчитатьГрафик(Плановая);
	Возврат Массив
КонецФункции

&НаСервере
Процедура ПериодичностьПриИзмененииНаСервере()
	
	СписокПериодичности = фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Периодичность);
	Если ЗначениеЗаполнено(Периодичность) И Периодичность<>Перечисления.фин_Периодичность.Декада И Периодичность<>Перечисления.фин_Периодичность.Неделя
		И Периодичность<>Перечисления.фин_Периодичность.День Тогда
		СписокПериодичности.Удалить(СписокПериодичности.НайтиПоЗначению(Периодичность));
	КонецЕсли;
	Если СписокПериодичности.НайтиПоЗначению(ДеньПлатежа) = Неопределено Тогда
		ДеньПлатежа = Перечисления.фин_Периодичность.День;
	КонецЕсли;
	
	Элементы.ДеньПлатежа.СписокВыбора.ЗагрузитьЗначения(СписокПериодичности.ВыгрузитьЗначения());
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьГрафик(Плановая)
	ДатаН = Период.ДатаНачала;
	Смещение = День-1;
    СмещениеП = СмещениеВПериодах-1;
	 
	Если Периодичность = Перечисления.фин_Периодичность.День Тогда
		ДатаД = ДатаН;
	Иначе
		ДатаД = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаН,Периодичность);
		Если СмещениеП>0 Тогда
			Для Инд = 1 По СмещениеП Цикл
				ДатаД = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаД,ДеньПлатежа)+1;	
			КонецЦикла;
		КонецЕсли;
		ДатаД = ДатаД+Смещение*60*60*24;
		//ДатаДКонец = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаД,Периодичность);
		//ДатаД = ?(ДатаДКонец<ДатаДДень,ДатаДКонец,ДатаДДень);
	КонецЕсли;
	
	Массив=Новый Массив;
	Пока ДатаД<=Период.ДатаОкончания Цикл
		Если ДатаД>=ДатаН Тогда
			Структура = Новый Структура;
			Структура.Вставить("ДатаОплаты",ДатаД);
			Структура.Вставить("ФинансовыйПоказатель",ФинансовыйПоказатель);
			Структура.Вставить("МинимальнаяСуммаПлатежа",МинимальнаяСуммаЗадолженности);
			Структура.Вставить("ПорядокРасчетаДатыПлатежа",Перечисления.дог_ПорядкиРасчетаДатыПлатежа.ФиксированнаяДата);
			Структура.Вставить("ПроцентОтСуммы",ПроцентОтСуммы);
			Структура.Вставить("Сумма",Сумма);
			Структура.Вставить("СпособРасчетаСуммыПлатежа",СпособРасчета);
			Если Плановая Тогда
				Структура.Вставить("Сценарий",Сценарий);
				Структура.Вставить("ФинансовыйПоказательСценария",ФинансовыйПоказательДляРасчета);
				Если ЗначениеЗаполнено(Сценарий) Тогда
					Структура.Вставить("ДатаСценария",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаД,Сценарий));
				КонецЕсли;
			КонецЕсли;
			Если СпособРасчета = Перечисления.дог_СпособыРасчетаСуммыПлатежей.ПоЗадолженностиНаНачалоПериода Тогда
				Структура.Вставить("Периодичность",Периодичность);
			КонецЕсли;
			//ДатаД = дог_УправлениеДоговорами.ПолучитьДеньОплаты(ДатаД,Периодичность,Смещение,СмещениеП,ДеньПлатежа);
		КонецЕсли;
		Если НЕ Структура = Неопределено Тогда 
			Массив.Добавить(Структура);			
		КонецЕсли;
		ДатаД = дог_УправлениеДоговорами.ПолучитьДеньОплаты(ДатаД,Периодичность,Смещение,СмещениеП,ДеньПлатежа);			
	КонецЦикла;
	Возврат Массив;
КонецФункции

&НаСервере
Процедура СпособРасчетаПриИзмененииНаСервере()
	
	Сумма = 0;
	МинимальнаяСуммаЗадолженности = 0;
	ПроцентОтСуммы = ?(СпособРасчета <> Перечисления.дог_СпособыРасчетаСуммыПлатежей.ФиксированнойСуммой,100,0);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


