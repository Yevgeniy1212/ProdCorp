////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		ПоказатьПредупреждение(,"Конструктор запроса не доступен в текущем режиме работы!");
	#Иначе
		Конструктор = Новый КонструкторЗапроса;
		Если Объект.ТекстЗапроса<>"" Тогда
			Попытка
				Конструктор.Текст = Объект.ТекстЗапроса;
			Исключение
				ТекстОшибки 	= ОписаниеОшибки();
				СтрокаБаза 		= "{Справочник.фин_ШаблоныПользовательскихОтчетов.Форма.ФормаЭлемента.Форма(7)}: Ошибка при установке значения атрибута контекста (Текст): ";
				ТекстОшибки 	= СтрЗаменить(ТекстОшибки,СтрокаБаза,"");
				СтрокаНомера 	= Сред(ТекстОшибки,Найти(ТекстОшибки,"{(")+2);
				СтрокаКолонки 	= Сред(СтрокаНомера,Найти(СтрокаНомера,",")+1);
				СтрокаКолонки	=  Лев(СтрокаКолонки,Найти(СтрокаКолонки,")")-1);
				СтрокаНомера 	= Лев(СтрокаНомера,Найти(СтрокаНомера,",")-1);
				Попытка
					Элементы.ТекстЗапроса.УстановитьГраницыВыделения(Число(СтрокаНомера),Число(СтрокаКолонки),Число(СтрокаНомера),Число(СтрокаКолонки)+1);
				Исключение
				КонецПопытки;
				ПоказатьПредупреждение(,ТекстОшибки);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		Если Конструктор.ОткрытьМодально() Тогда
			Объект.ТекстЗапроса = Конструктор.Текст;
			ЗаполнитьПараметрыПроизвольногоЗапроса();
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПроизвольногоЗапроса()
	Текст = Объект.ТекстЗапроса;
	РазбивающиеСимволы = Новый Массив;
	РазбивающиеСимволы.Добавить(" ");
	РазбивающиеСимволы.Добавить(",");
	РазбивающиеСимволы.Добавить(".");
	РазбивающиеСимволы.Добавить("/");
	РазбивающиеСимволы.Добавить("(");
	РазбивающиеСимволы.Добавить(")");
	РазбивающиеСимволы.Добавить("=");
	РазбивающиеСимволы.Добавить(Символы.ПС);
	РазбивающиеСимволы.Добавить(Символы.Таб);
	Пока Найти(Текст,"&")<>0 Цикл
		Текст = Сред(Текст,Найти(Текст,"&")+1);
		Для Инд=1 По СтрДлина(Текст) Цикл
			Если РазбивающиеСимволы.Найти(Сред(Текст,Инд,1))<>Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Объект.ПараметрыШаблона.НайтиСтроки(Новый Структура("Параметр",Лев(Текст,Инд-1))).Количество()=0 Тогда
			НовыйПараметр = Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр = Лев(Текст,Инд-1);
		КонецЕсли;
	КонецЦикла;
	УдалитьНекорректныеПоля();
КонецПроцедуры

&НаСервере
Процедура УдалитьНекорректныеПоля()
	Попытка
		Построитель = Новый ПостроительОтчета(Объект.ТекстЗапроса);
	Исключение
		Возврат;
	КонецПопытки;
	Построитель.ЗаполнитьНастройки();
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоле Из Объект.ПоляОтчета Цикл
		Если СтрокаПоле.ТипПоля = Перечисления.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника Тогда
			Если Построитель.ДоступныеПоля.Найти(СтрокаПоле.ИмяПоля) = Неопределено Тогда
				УдаляемыеСтроки.Добавить(СтрокаПоле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из УдаляемыеСтроки Цикл
		Объект.ПоляОтчета.Удалить(СтрокаУдалить);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастройкаВидимости()
	Если Объект.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов Тогда
		Навигация = ПолучитьОбщийМакет("фин_ИнтегрированныйИсточник").ПолучитьТекст();
	ИначеЕсли Объект.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы Тогда
		Навигация = ПолучитьОбщийМакет("фин_ФиксированныйИсточник").ПолучитьТекст();
	Иначе
		Навигация = ПолучитьОбщийМакет("фин_ПроизвольныйОтчет").ПолучитьТекст();
	КонецЕсли;
	Элементы.ПредставлениеРегистра.Видимость = (Объект.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы);
	Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПоляОтчета;
КонецПроцедуры

&НаСервере
Функция СписокВыбораТипов()
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Метаданные.Справочники.фин_ШаблоныПользовательскихОтчетов.ТабличныеЧасти.ПараметрыШаблона.Реквизиты.ТипПараметра.Тип.Типы());	
	Для Каждого ЭлементСписка Из Список Цикл
		ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
	КонецЦикла;
	Список.СортироватьПоПредставлению();
	Возврат Список;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗначенийПараметра(Идентификатор)
	СписокЗначенийПараметра.Очистить();
	Если Идентификатор=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТЧ = Объект.ПараметрыШаблона.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаТЧ.СписокЗначений Тогда
		мЭтотОбъект = РеквизитФормыВЗначение("Объект");
		СписокЗначенийПараметра = мЭтотОбъект.ПолучитьСписокИзХранилища(Объект.ПараметрыШаблона.НайтипоИдентификатору(Идентификатор).НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокЗначенийПараметра(Идентификатор)
	НомерСтроки = Объект.ПараметрыШаблона.НайтипоИдентификатору(Идентификатор).НомерСтроки;
	СтрокаТЧ = Объект.ПараметрыШаблона.Получить(НомерСтроки-1);
	Если СтрокаТЧ.СписокЗначений Тогда
		мЭтотОбъект = РеквизитФормыВЗначение("Объект");
		мЭтотОбъект.ЗаписатьСписокЗначенийВХранилище(НомерСтроки,СписокЗначенийПараметра);
		ЗначениеВРеквизитФормы(мЭтотОбъект,"Объект");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЛюбойТип()
	Возврат Метаданные.Справочники.фин_ШаблоныПользовательскихОтчетов.ТабличныеЧасти.ПараметрыШаблона.Реквизиты.Значение.Тип;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуБезСпецСимволов(Строка)
	МассивСпецСимволов = Новый Массив;
	МассивСпецСимволов.Добавить(" ");
	МассивСпецСимволов.Добавить("/");
	МассивСпецСимволов.Добавить("*");
	МассивСпецСимволов.Добавить("-");
	МассивСпецСимволов.Добавить("+");
	МассивСпецСимволов.Добавить(",");
	МассивСпецСимволов.Добавить(".");
	МассивСпецСимволов.Добавить("?");
	МассивСпецСимволов.Добавить("(");
	МассивСпецСимволов.Добавить(")");
	МассивСпецСимволов.Добавить("=");
	МассивСпецСимволов.Добавить("|");
	МассивСпецСимволов.Добавить("\");
	МассивСпецСимволов.Добавить("[");
	МассивСпецСимволов.Добавить("]");
	МассивСпецСимволов.Добавить("{");
	МассивСпецСимволов.Добавить("}");
	МассивСпецСимволов.Добавить("&");
	МассивСпецСимволов.Добавить("^");
	МассивСпецСимволов.Добавить("%");
	МассивСпецСимволов.Добавить("$");
	МассивСпецСимволов.Добавить("#");
	МассивСпецСимволов.Добавить("@");
	МассивСпецСимволов.Добавить("!");
	МассивСпецСимволов.Добавить("'");
	МассивСпецСимволов.Добавить("""");
	МассивСпецСимволов.Добавить("`");
	МассивСпецСимволов.Добавить(";");
	МассивСпецСимволов.Добавить(":");
	МассивСпецСимволов.Добавить("№");
	МассивСпецСимволов.Добавить("-");
	МассивСпецСимволов.Добавить("<");
	МассивСпецСимволов.Добавить(">");
	Для Каждого СпецСимвол Из МассивСпецСимволов Цикл
		Строка = СтрЗаменить(Строка,СпецСимвол,"");
	КонецЦикла;
	Возврат Строка;
КонецФункции

&НаКлиенте
Процедура НастроитьВыборПоля()
	Если Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника")  Тогда
		Элементы.ПоляОтчетаИмяПоля.КнопкаВыбора			= Истина;
		Элементы.ПоляОтчетаИмяПоля.РедактированиеТекста = (Объект.ВидИсточника=ПредопределенноеЗначение("Перечисление.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов"));
	Иначе
		Элементы.ПоляОтчетаИмяПоля.КнопкаВыбора			= Ложь;
		Элементы.ПоляОтчетаИмяПоля.РедактированиеТекста = Истина;
	КонецЕсли;
	Если Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля 		= ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника") Тогда
		Элементы.ПоляОтчетаВыражение.ТолькоПросмотр 	= Истина;
		Элементы.ПоляОтчетаЗначение.ТолькоПросмотр 		= Истина;
	ИначеЕсли Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля = ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение") Тогда
		Элементы.ПоляОтчетаВыражение.ТолькоПросмотр 	= Истина;
		Элементы.ПоляОтчетаЗначение.ТолькоПросмотр 		= Ложь;
	Иначе
		Элементы.ПоляОтчетаВыражение.ТолькоПросмотр 	= Ложь;
		Элементы.ПоляОтчетаЗначение.ТолькоПросмотр 		= Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПолейИсточника(СВложенными=Ложь)
	Если Объект.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов Тогда
		СписокПолей = Новый СписокЗначений;
		Для Каждого Шаблон Из Объект.ОбъединяемыеШаблоны Цикл
			Для Каждого СтрокаПоле Из Шаблон.Шаблон.ПоляОтчета Цикл
				Если СписокПолей.НайтиПоЗначению(СтрокаПоле.ИмяПоля)=Неопределено Тогда
					СписокПолей.Добавить(СтрокаПоле.ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Возврат СписокПолей;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ТекстЗапроса) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Попытка
		Построитель = Новый ПостроительОтчета(Объект.ТекстЗапроса);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определены поля запроса!");
		Возврат Новый СписокЗначений;
	КонецПопытки;
	Построитель.ЗаполнитьНастройки();
	СписокПолей = Новый СписокЗначений;
	СписокВидовМетаданных = Новый СписокЗначений;
	СписокВидовМетаданных.Добавить("Документы","Документ");
	СписокВидовМетаданных.Добавить("Справочники","Справочник");
	СписокВидовМетаданных.Добавить("ПланыВидовРасчета","ПланВидовРасчета");
	СписокВидовМетаданных.Добавить("ПланыВидовХарактеристик","ПланВидовХарактеристик");
	СписокВидовМетаданных.Добавить("ПланыСчетов","ПланСчетов");
	Для Каждого Поле Из Построитель.ДоступныеПоля Цикл
		СписокПолей.Добавить(Поле.Имя);
		Если СВложенными И Найти(Поле.Имя,"Субконто")=0 И Найти(Поле.Имя,"Регистратор")=0 Тогда
			Для Каждого ЭлементМетаданных Из СписокВидовМетаданных Цикл
				Для Каждого Документ Из Метаданные[ЭлементМетаданных.Значение] Цикл
					Если Поле.ТипЗначения.СодержитТип(Тип(ЭлементМетаданных.Представление+"Ссылка."+Документ.Имя)) Тогда
						Для Каждого Реквизит Из Документ.Реквизиты Цикл
							СписокПолей.Добавить(Поле.Имя+"."+Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат СписокПолей;
КонецФункции

&НаСервере
Процедура ЗаполнитьТекстЗапросаИзОбъекта()
	Если Объект.ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	Построитель = Новый ПостроительОтчета("ВЫБРАТЬ Таблица.* ИЗ "+Объект.ИмяРегистра+" КАК Таблица");
	// заполним специфические параметры виртуальных таблиц
	ПредопределенныеПараметры = Объект.ПараметрыШаблона.НайтиСтроки(Новый Структура("Предопределенный",Истина));
	Для Каждого Строка_У Из ПредопределенныеПараметры Цикл
		Объект.ПараметрыШаблона.Удалить(Строка_У);
	КонецЦикла;
	Если Найти(Объект.ИмяРегистра,"РегистрСведений.")<>0 Тогда
		Если Найти(Объект.ИмяРегистра,".СрезПоследних")<>0 ИЛИ Найти(Объект.ИмяРегистра,".СрезПервых")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&ДатаСреза,
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ДатаСреза";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';                              
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
		КонецЕсли;
	ИначеЕсли Найти(Объект.ИмяРегистра,"РегистрНакопления.")<>0 Тогда
		Если Найти(Объект.ИмяРегистра,".ОстаткиИОбороты")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода,&КонецПериода, Авто, ДвиженияИГраницыПериода, 
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
		ИначеЕсли Найти(Объект.ИмяРегистра,".Остатки")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&ДатаОстатков,
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ДатаОстатков";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
		ИначеЕсли Найти(Объект.ИмяРегистра,".Обороты")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода,&КонецПериода, Авто, 
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
		КонецЕсли;
	ИначеЕсли Найти(Объект.ИмяРегистра,"РегистрБухгалтерии.")<>0 Тогда
		ИмяРегистра = Сред(Объект.ИмяРегистра,СтрДлина("РегистрБухгалтерии.")+1);
		Если Найти(ИмяРегистра,".")<>0 Тогда
			ИмяРегистра = Лев(ИмяРегистра,Найти(ИмяРегистра,".")-1);
		КонецЕсли;
		ТипЗначенияСубконто = Тип("ПланВидовХарактеристикСсылка."+Метаданные.РегистрыБухгалтерии[ИмяРегистра].ПланСчетов.ВидыСубконто.Имя);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗначенияСубконто);
		ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
		Если Найти(Объект.ИмяРегистра,".ОстаткиИОбороты")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода, &КонецПериода, Авто, ДвиженияИГраницыПериода,
			|//Счет
			|, &ВидыСубконто,
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыСубконто";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
		ИначеЕсли Найти(Объект.ИмяРегистра,".Остатки")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&ДатаОстатков,
			|//Счет
			|,&ВидыСубконто,
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ДатаОстатков";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыСубконто";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
		ИначеЕсли Найти(Объект.ИмяРегистра,".ОборотыДтКт")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода, &КонецПериода, Авто,
			|//СчетДт
			|, &ВидыСубконтоДт, 
			|//СчетКт
			|, &ВидыСубконтоКт, 
			|//условие
			|) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыСубконтоДт";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыСубконтоКт";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
		ИначеЕсли Найти(Объект.ИмяРегистра,".Обороты")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода, &КонецПериода, Авто,
			|//Счет
			|, &ВидыСубконто,
			|//условие
			|,
			|//КорСчет
			|, &ВидыКорСубконто) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыСубконто";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "ВидыКорСубконто";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.СписокЗначений = Истина;
			НовыйПараметр.Значение 		= Неопределено;
			НовыйПараметр.ТипПараметра 	= ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);                    
			НовыйПараметр.ПредставлениеТипаПараметра 	= Строка(ТипЗначенияСубконто);
		ИначеЕсли Найти(Объект.ИмяРегистра,".ДвиженияССубконто")<>0 Тогда
			Построитель.Текст			= СтрЗаменить(Построитель.Текст," КАК Таблица",".(&НачалоПериода, &КонецПериода, 
			|//условие
			|, , ) КАК Таблица");
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "НачалоПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
			НовыйПараметр 				= Объект.ПараметрыШаблона.Добавить();
			НовыйПараметр.Параметр 		= "КонецПериода";
			НовыйПараметр.Предопределенный = Истина;
			НовыйПараметр.Значение 		= '00010101';
			НовыйПараметр.ТипПараметра 	= '00010101';
			НовыйПараметр.ПредставлениеТипаПараметра 	= "Дата";
		КонецЕсли;
	КонецЕсли;
	Построитель.ЗаполнитьНастройки();
	Объект.ТекстЗапроса = Построитель.Текст;
	УдалитьНекорректныеПоля();
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьТипПараметраСИсточником(ИмяПараметра)
	Если ИмяПараметра="" Тогда
		Возврат;
	КонецЕсли;
	ОписаниеТипаПараметра = ПолучитьТипПараметра(ИмяПараметра);
	Если ОписаниеТипаПараметра=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокиПараметр = Объект.ПараметрыОтбораВиртуальнойТаблицы.НайтиСтроки(Новый Структура("Параметр",ИмяПараметра));	
	СтрокиНастройка = Объект.ПараметрыШаблона.НайтиСтроки(Новый Структура("Параметр",ИмяПараметра));
	Если СтрокиНастройка.Количество()=0 Тогда
		НоваяСтрока = Объект.ПараметрыШаблона.Добавить();
		НоваяСтрока.Параметр = ИмяПараметра;
		СтрокиНастройка.Добавить(НоваяСтрока);
	КонецЕсли;
	Если СтрокиПараметр.Количество()>0 Тогда
		СтрокиНастройка[0].СписокЗначений = СписочныйТип(СтрокиПараметр[0].ВидСравнения);
	КонецЕсли;
	СтрокиНастройка[0].Значение = ОписаниеТипаПараметра.ПривестиЗначение(СтрокиНастройка[0].Значение);
	СтрокиНастройка[0].ТипПараметра = ?(ОписаниеТипаПараметра.Типы().Количество()=1,ОписаниеТипаПараметра.ПривестиЗначение(Неопределено),Неопределено);
	СтрокиНастройка[0].ПредставлениеТипаПараметра = ?(ОписаниеТипаПараметра.Типы().Количество()=1,Строка(ОписаниеТипаПараметра.Типы()[0]),"");
	СтрокиСписочногоПараметра = Объект.СписочныеЗначенияПараметров.НайтиСтроки(Новый Структура("Параметр",ИмяПараметра));
	Для Каждого Строка Из СтрокиСписочногоПараметра Цикл
		Строка.Значение = ОписаниеТипаПараметра.ПривестиЗначение(Строка.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СписочныйТип(ВидСравнения)
	 Список = Новый СписокЗначений;
	 Список.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.ВСписке);
	 Список.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии);
	 Список.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке);
	 Список.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии);
	 Возврат Список.НайтиПоЗначению(ВидСравнения)<>Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьТипПараметра(ИмяПараметра)
	СтрокиПараметр = Объект.ПараметрыОтбораВиртуальнойТаблицы.НайтиСтроки(Новый Структура("Параметр",ИмяПараметра));	
	Если СтрокиПараметр.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеЗапроса = СтрокиПараметр[0].ПолеОтбора;
	Если ПолеЗапроса="" Тогда
		Возврат Неопределено;
	КонецЕсли;
	Построитель = Новый ПостроительОтчета(Объект.ТекстЗапроса);
	Построитель.ЗаполнитьНастройки();
	Если Найти(ПолеЗапроса,".")=0 Тогда
		Возврат Построитель.ДоступныеПоля.Найти(ПолеЗапроса).ТипЗначения;
	Иначе
		БазовоеПоле 	= Лев(ПолеЗапроса,Найти(ПолеЗапроса,".")-1);
		ДочернееПоле 	= Сред(ПолеЗапроса,Найти(ПолеЗапроса,".")+1);
		БазовыйТип 		= Построитель.ДоступныеПоля.Найти(БазовоеПоле).ТипЗначения;
		СписокТипов = Новый СписокЗначений;
		СписокВидовМетаданных = Новый СписокЗначений;
		СписокВидовМетаданных.Добавить("Документы","Документ");
		СписокВидовМетаданных.Добавить("Справочники","Справочник");
		СписокВидовМетаданных.Добавить("ПланыВидовРасчета","ПланВидовРасчета");
		СписокВидовМетаданных.Добавить("ПланыВидовХарактеристик","ПланВидовХарактеристик");
		СписокВидовМетаданных.Добавить("ПланыСчетов","ПланСчетов");
		Для Каждого ЭлементМетаданных Из СписокВидовМетаданных Цикл
			Для Каждого Документ Из Метаданные[ЭлементМетаданных.Значение] Цикл
				Если НЕ БазовыйТип.СодержитТип(Тип(ЭлементМетаданных.Представление+"Ссылка."+Документ.Имя)) Тогда
					Продолжить;
				КонецЕсли;
				НужныйРеквизит = Документ.Реквизиты.Найти(ДочернееПоле);
				Если НужныйРеквизит<>Неопределено Тогда
					СписокТипов.Добавить(НужныйРеквизит.Тип);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Возврат Новый ОписаниеТипов(СписокТипов);
	КонецЕсли;
КонецФункции

&НаСервере
Функция СписокПараметровШаблона()
	мЭтотОбъект = РеквизитФормыВЗначение("Объект");
	Возврат мЭтотОбъект.ПараметрыШаблона.Выгрузить().ВыгрузитьКолонку("Параметр");
КонецФункции

&НаСервере
Процедура ПерерисоватьТаблицуСоответствий()
	Если Объект.ВидИсточника<>Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов Тогда
		Возврат;
	КонецЕсли;
	МассивУдаляемых = Новый Массив;
	Для Каждого Реквизит Из ЭтотОбъект.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя= "ТаблицаСоответствий" Тогда
			МассивУдаляемых.Добавить("ТаблицаСоответствий");
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИзменитьРеквизиты(,МассивУдаляемых);
	Исключение
	КонецПопытки;
	Если Элементы.Найти("ТаблицаСоответствий")<>Неопределено Тогда
		Элементы.Удалить(Элементы.Найти("ТаблицаСоответствий"));
	КонецЕсли;
	// создаем реквизит - таблицу
	ОписаниеТиповДляТаблицы = Новый ОписаниеТипов("ТаблицаЗначений");
	ТаблицаСоответствий = Новый РеквизитФормы("ТаблицаСоответствий",ОписаниеТиповДляТаблицы,,"ТаблицаСоответствий",Истина);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ТаблицаСоответствий);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	// создаем поле для ее вывода
	НовыйЭлементФормы 				= Элементы.Добавить("ТаблицаСоответствий",Тип("ТаблицаФормы"),Элементы.ГруппаСоответствиеПолейИШаблонов);
	НовыйЭлементФормы.ПутьКДанным 	= "ТаблицаСоответствий";
	НовыйЭлементФормы.ИзменятьПорядокСтрок 	= Ложь;
	НовыйЭлементФормы.ИзменятьСоставСтрок 	= Ложь;
	НовыйЭлементФормы.ЦветРамки = Новый Цвет(176,196,222);
	НовыйЭлементФормы.ЦветТекста = Новый Цвет(25,25,112);
	НовыйЭлементФормы.УстановитьДействие("ПриОкончанииРедактирования","ТаблицаСоответствийПриОкончанииРедактирования");
	// добавим колонку базовую
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПоляПользовательскихОтчетов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	НоваяКолонка = Новый РеквизитФормы("ПолеТекущегоШаблона",ОписаниеТипа,"ТаблицаСоответствий","ПолеТекущегоШаблона",Истина);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НоваяКолонка);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	НоваяКолонкаТаблицы = Элементы.Добавить("ПолеТекущегоШаблона",Тип("ПолеФормы"),НовыйЭлементФормы);
	НоваяКолонкаТаблицы.ПутьКДанным = "ТаблицаСоответствий.ПолеТекущегоШаблона";
	НоваяКолонкаТаблицы.ТолькоПросмотр = Истина;
	НоваяКолонкаТаблицы.ЦветФонаЗаголовка = Новый Цвет(176,196,222);
	НоваяКолонкаТаблицы.ЦветТекстаЗаголовка = Новый Цвет(0,66,66);
	НоваяКолонкаТаблицы.ШрифтЗаголовка = Новый Шрифт(,9,Истина);
	// создаем колонки реквизита
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ШаблонОбъединения Из Объект.ОбъединяемыеШаблоны Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПоляПользовательскихОтчетов"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		НоваяКолонка = Новый РеквизитФормы("Ш"+Строка(ШаблонОбъединения.НомерСтроки),ОписаниеТипа,"ТаблицаСоответствий",ШаблонОбъединения.Шаблон.Наименование,Истина);
		ДобавляемыеРеквизиты.Добавить(НоваяКолонка);
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	// создаем колонки на форме
	Для Каждого ШаблонОбъединения Из Объект.ОбъединяемыеШаблоны Цикл
		НоваяКолонкаТаблицы 						= Элементы.Добавить("ТаблицаСоответствийШ"+Строка(ШаблонОбъединения.НомерСтроки),Тип("ПолеФормы"),НовыйЭлементФормы);
		НоваяКолонкаТаблицы.ПутьКДанным 			= "ТаблицаСоответствий."+"Ш"+Строка(ШаблонОбъединения.НомерСтроки);
		НоваяКолонкаТаблицы.Вид						= ВидПоляФормы.ПолеВвода;
		НоваяКолонкаТаблицы.РедактированиеТекста 	= Ложь;
		НоваяКолонкаТаблицы.КнопкаВыбора 			= Истина;
		НоваяКолонкаТаблицы.КнопкаОчистки 			= Истина;
		НоваяКолонкаТаблицы.ЦветФонаЗаголовка = Новый Цвет(176,196,222);
		НоваяКолонкаТаблицы.ЦветТекстаЗаголовка = Новый Цвет(0,66,66);
		НоваяКолонкаТаблицы.ШрифтЗаголовка = Новый Шрифт(,9,Истина);
		НоваяКолонкаТаблицы.УстановитьДействие("НачалоВыбора","ТаблицаСоответствийШ1НачалоВыбора");
	КонецЦикла;
	
	Элементы.ТаблицаСоответствийКоманднаяПанель.Видимость = Ложь;	
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ПолеТекущегоШаблона",Новый ОписаниеТипов("СправочникСсылка.фин_ПоляПользовательскихОтчетов"),"Поле текущего шаблона");
//	Элементы.ТаблицаСоответствий.ПодчиненныеЭлементы.ТаблицаСоответствийПолеТекущегоШаблона.Видимость=Истина;
	Для Каждого ШаблонОбъединения Из Объект.ОбъединяемыеШаблоны Цикл
		ТаблицаЗначений.Колонки.Добавить("Ш"+Строка(ШаблонОбъединения.НомерСтроки),Новый ОписаниеТипов("СправочникСсылка.фин_ПоляПользовательскихОтчетов"),ШаблонОбъединения.Шаблон.Наименование);
//		Элементы.ТаблицаСоответствий.ПодчиненныеЭлементы["ТаблицаСоответствийШ"+Строка(ШаблонОбъединения.НомерСтроки)].Заголовок = ШаблонОбъединения.Шаблон.Наименование;
	КонецЦикла;
	Для Каждого ПолеОтчета Из Объект.ПоляОтчета Цикл
		Если ПолеОтчета.ТипПоля<>Перечисления.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.ПолеТекущегоШаблона = ПолеОтчета.Поле;
		Для Каждого ШаблонОбъединения Из Объект.ОбъединяемыеШаблоны Цикл
			СтрокиСоответствия = Объект.СоответствиеПолейИШаблонов.НайтиСтроки(Новый Структура("Шаблон,ПоляТекущегоШаблона",ШаблонОбъединения.Шаблон,ПолеОтчета.Поле));
			Если СтрокиСоответствия.Количество()>0 Тогда
				НоваяСтрока["Ш"+Строка(ШаблонОбъединения.НомерСтроки)] = СтрокиСоответствия[0].ПоляШаблона;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЗначений,"ТаблицаСоответствий");
КонецПроцедуры

&НаСервере
Процедура ОбработатьСоответствия()
	ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаСоответствий");
	Объект.СоответствиеПолейИШаблонов.Очистить();
	Для Каждого ПолеОтчета Из Объект.ПоляОтчета Цикл
		ПолеТекущегоШаблона = ПолеОтчета.Поле;
		СтрокаВТаблице = ТаблицаЗначений.НайтиСтроки(Новый Структура("ПолеТекущегоШаблона",ПолеТекущегоШаблона));
		Если СтрокаВТаблице.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ШаблонОбъединения Из Объект.ОбъединяемыеШаблоны Цикл
			ПолеШаблона = СтрокаВТаблице[0]["Ш"+Строка(ШаблонОбъединения.НомерСтроки)];
			Если ПолеШаблона <>"" Тогда
				НоваяСтрока = Объект.СоответствиеПолейИШаблонов.Добавить();
				НоваяСтрока.Шаблон 					= ШаблонОбъединения.Шаблон;
				НоваяСтрока.ПоляШаблона 			= ПолеШаблона;
				НоваяСтрока.ПоляТекущегоШаблона 	= ПолеТекущегоШаблона;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПоляШаблона(НомерШаблона)
	СписокПолей = Новый СписокЗначений;
	СтрокаШаблон = Объект.ОбъединяемыеШаблоны.НайтиСтроки(Новый Структура("НомерСтроки",НомерШаблона));
	Если СтрокаШаблон.Количество()>0 Тогда
		Для Каждого СтрокаПоле Из СтрокаШаблон[0].Шаблон.ПоляОтчета Цикл
			Если СписокПолей.НайтиПоЗначению(СтрокаПоле.Поле)=Неопределено Тогда
				СписокПолей.Добавить(СтрокаПоле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокПолей;
КонецФункции

&НаСервере
Процедура ДобавитьПараметрыШаблона(Шаблон)
	ПереносимыеПараметры = Шаблон.ПараметрыШаблона.НайтиСтроки(Новый Структура("ЗаполнятьВФормеОтчета",Истина));
	Для Каждого СтрокаПараметр Из ПереносимыеПараметры Цикл
		Если Объект.ПараметрыШаблона.НайтиСтроки(Новый Структура("Параметр",СтрокаПараметр.Параметр)).Количество()=0 Тогда
			НоваяСтрока = Объект.ПараметрыШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПараметр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущаяСтрока =-1;
	
	Навигация = ПолучитьОбщийМакет("фин_ПроизвольныйОтчет").ПолучитьТекст();
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[ЗначениеПеречисления.Имя]) <>"Неопределен!!!" Тогда
			СписокИзмерений.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования[ЗначениеПеречисления.Имя],фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[ЗначениеПеречисления.Имя]));
		КонецЕсли;
	КонецЦикла;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВидИсточника = Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы;
		Для Каждого СтрокаПоле Из Объект.ПоляОтчета Цикл
			СтрокаПоле.Поле = Справочники.фин_ПоляПользовательскихОтчетов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	НастройкаВидимости();
	мВид = Объект.ВидИсточника;
	Если Объект.ВидИсточника=Перечисления.фин_ВидыИсточниковПользовательскихОтчетов.ОбъединениеШаблонов Тогда
		ПерерисоватьТаблицуСоответствий();
	КонецЕсли;
	
	НадписьНастройкаИсточникаДанныхОтчета 	= "Настройка источника данных отчета";
	НадписьНастройкаОтбораДанных 			= "Настройка отбора данных";
	НадписьОбъединяемыеШаблоны 				= "Объединяемые шаблоны";
	НадписьПараметры 						= "Параметры";
	НадписьПоляОтчета 						= "Поля отчета";
	НадписьСоответствияПолейШаблонов 		= "Соответствия полей шаблонов";
	НадписьТекстЗапроса 					= "Текст запроса";
	НадписьФорма 							= "Пользовательский отчет";
КонецПроцедуры

&НаКлиенте
Процедура ВидИсточникаПриИзменении(Элемент)
	Если мВид <> Объект.ВидИсточника Тогда
		Объект.ОбъединяемыеШаблоны.Очистить();
		Объект.СоответствиеПолейИШаблонов.Очистить();
		Объект.ИмяРегистра = "";
		Объект.ПредставлениеРегистра = "";
		Если НЕ (мВид = ПредопределенноеЗначение("Перечисление.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы") И Объект.ВидИсточника=ПредопределенноеЗначение("Перечисление.фин_ВидыИсточниковПользовательскихОтчетов.ПроизвольныйЗапрос")) Тогда
			Объект.ПоляОтчета.Очистить();
			Объект.ПараметрыШаблона.Очистить();
			Объект.СписочныеЗначенияПараметров.Очистить();
			Объект.ТекстЗапроса = "";
		КонецЕсли;
		мВид = Объект.ВидИсточника;
	КонецЕсли;
	НастройкаВидимости();
КонецПроцедуры


///////////////////////////////////////////////////////////РЕКВИЗИТОВ ФОРМЫ
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура НавигацияРабочийСтолПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		СтрокаИмяФормы = ДанныеСобытия.Element.href;
		СтрокаИмяФормы = СтрЗаменить(СтрокаИмяФормы, "v8config://", "");
		СтрокаИмяФормы = СтрЗаменить(СтрокаИмяФормы, "/", "");
		Если СтрокаИмяФормы="Fiting" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСоответствиеПолейИШаблонов;
		ИначеЕсли СтрокаИмяФормы="Query" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПроизвольныйЗапрос;
		ИначеЕсли СтрокаИмяФормы="Fields" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПоляОтчета;
		ИначеЕсли СтрокаИмяФормы="Patterns" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОбъединяемыеШаблоны;
		ИначеЕсли СтрокаИмяФормы="Parameters" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПараметрыШаблона;
		ИначеЕсли СтрокаИмяФормы="Filter" Тогда
			Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ФильтрНаТаблицу;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОбработатьВыборТаблицы = Новый ОписаниеОповещения("ОбработатьВыборТаблицы",ЭтотОбъект);
	ОткрытьФорму("Справочник.фин_ШаблоныПользовательскихОтчетов.Форма.ФормаВыбораТаблицы",,Элемент,,,,ОписаниеОбработатьВыборТаблицы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТаблицы(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.ИмяРегистра 				= Результат.Имя;
		Объект.ПредставлениеРегистра 	= Результат.Представление;
		ЗаполнитьТекстЗапросаИзОбъекта();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "ПАРАМЕТРЫ ШАБЛОНА"

&НаКлиенте
Процедура ПараметрыШаблонаТипПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораТипов();
//	ВыбратьИзСписка(ДанныеВыбора,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаТипПараметраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ВыбранноеЗначение);
	ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.ПараметрыШаблона.ТекущиеДанные.ТипПараметра 	= ОграничениеТипа.ПривестиЗначение(Неопределено);
	Элементы.ПараметрыШаблона.ТекущиеДанные.Значение 		= ОграничениеТипа.ПривестиЗначение(Элементы.ПараметрыШаблона.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ПараметрыШаблона.ТекущиеДанные.СписокЗначений Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные<>Неопределено И Элементы.ПараметрыШаблона.ТекущиеДанные.ПолучитьИдентификатор()=ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные<>Неопределено  Тогда
		ТекущаяСтрока = Элементы.ПараметрыШаблона.ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	Элементы.СписокЗначенийПараметра.Видимость = Элемент.ТекущиеДанные<>Неопределено И Элементы.ПараметрыШаблона.ТекущиеДанные.СписокЗначений;
	ЗаполнитьСписокЗначенийПараметра(?(Элемент.ТекущиеДанные<>Неопределено,Элемент.ТекущиеДанные.ПолучитьИдентификатор(),Неопределено));
КонецПроцедуры

 &НаКлиенте
Процедура ПараметрыШаблонаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элементы.СписокЗначенийПараметра.Видимость = Элемент.ТекущиеДанные<>Неопределено И Элементы.ПараметрыШаблона.ТекущиеДанные.СписокЗначений;
	ЗаполнитьСписокЗначенийПараметра(?(Элемент.ТекущиеДанные<>Неопределено,Элемент.ТекущиеДанные.ПолучитьИдентификатор(),Неопределено));
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ПараметрыШаблона.ТекущиеДанные.ТипПараметра <>Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Элементы.ПараметрыШаблона.ТекущиеДанные.ТипПараметра));
		Элементы.ПараметрыШаблона.ПодчиненныеЭлементы.ПараметрыШаблонаЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ПолучитьТипПараметра(Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр)=Неопределено Тогда
		Элементы.ПараметрыШаблона.ПодчиненныеЭлементы.ПараметрыШаблонаЗначение.ОграничениеТипа = ЛюбойТип();
	Иначе	
		Элементы.ПараметрыШаблона.ПодчиненныеЭлементы.ПараметрыШаблонаЗначение.ОграничениеТипа = ПолучитьТипПараметра(Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр);
	КонецЕсли;
	Элементы.ПараметрыШаблона.ПодчиненныеЭлементы.ПараметрыШаблонаТипПараметра.ТолькоПросмотр 	= Элементы.ПараметрыШаблона.ТекущиеДанные.Предопределенный;
	Элементы.ПараметрыШаблона.ПодчиненныеЭлементы.ПараметрыШаблонаПараметр.ТолькоПросмотр 		= Элементы.ПараметрыШаблона.ТекущиеДанные.Предопределенный;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаПараметрПриИзменении(Элемент)
	Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр = ПолучитьСтрокуБезСпецСимволов(Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыШаблонаПередУдалением(Элемент, Отказ)
	Если Элементы.ПараметрыШаблона.ТекущиеДанные.Предопределенный И Объект.ВидИсточника=ПредопределенноеЗначение("Перечисление.фин_ВидыИсточниковПользовательскихОтчетов.ОбъектИнформационнойБазы") Тогда
		ПоказатьПредупреждение(,"Невозможно удалить предопределенный параметр");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "ПОЛЯ ОТЧЕТА"

&НаКлиенте
Процедура ПоляОтчетаИмяПоляПриИзменении(Элемент)
	Элементы.ПоляОтчета.ТекущиеДанные.ИмяПоля = ПолучитьСтрокуБезСпецСимволов(Элементы.ПоляОтчета.ТекущиеДанные.ИмяПоля);
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля 				= ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника");
	КонецЕсли;
	НастроитьВыборПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаТипПоляПриИзменении(Элемент)
	НастроитьВыборПоля();
	Если Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля 	= ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ПолеИсточника") Тогда
		Элементы.ПоляОтчета.ТекущиеДанные.ИмяПоля 	= "";
		Элементы.ПоляОтчета.ТекущиеДанные.Значение 	= "";
		Элементы.ПоляОтчета.ТекущиеДанные.Выражение	= "";
	ИначеЕсли Элементы.ПоляОтчета.ТекущиеДанные.ТипПоля 	= ПредопределенноеЗначение("Перечисление.фин_ТипыПолейПользовательскихОтчетов.ФиксированноеЗначение") Тогда
		Элементы.ПоляОтчета.ТекущиеДанные.Выражение 	= "";
	Иначе
		Элементы.ПоляОтчета.ТекущиеДанные.Значение 	= "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаИмяПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Попытка
		ДанныеВыбора = ПолучитьСписокПолейИсточника();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = ПолучитьСписокПолейИсточника(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаВыражениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Элементы.ПоляОтчета.ТекущиеДанные.ИмяПоля = "" Тогда
		 Элементы.ПоляОтчета.ТекущиеДанные.ИмяПоля = ПолучитьСтрокуБезСпецСимволов(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаСоответствия Из Объект.СоответствиеПолейИШаблонов Цикл
		СтрокиШаблона = Объект.ПоляОтчета.НайтиСтроки(Новый Структура("Поле",СтрокаСоответствия.ПоляТекущегоШаблона));
		Если СтрокиШаблона.Количество()=0 Тогда
			СтрокиУдалить.Добавить(СтрокаСоответствия);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.СоответствиеПолейИШаблонов.Удалить(СтрокаУдалить);
	КонецЦикла;
	ПерерисоватьТаблицуСоответствий();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ СПИСКА "СПИСОК ЗНАЧЕНИЙ ПАРАМЕТРА"

&НаКлиенте
Процедура СписокЗначенийПараметраПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СохранитьСписокЗначенийПараметра(Элементы.ПараметрыШаблона.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенийПараметраЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ПараметрыШаблона.ТекущиеДанные.ТипПараметра <>Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Элементы.ПараметрыШаблона.ТекущиеДанные.ТипПараметра));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ПолучитьТипПараметра(Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр)=Неопределено Тогда
		Элемент.ОграничениеТипа = ЛюбойТип();
	Иначе	
		Элемент.ОграничениеТипа = ПолучитьТипПараметра(Элементы.ПараметрыШаблона.ТекущиеДанные.Параметр);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "ПАРАМЕТРЫ ОТБОРА ВИРТУАЛЬНОЙ ТАБЛИЦЫ"


&НаКлиенте
Процедура ПараметрыОтбораВиртуальнойТаблицыПолеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = ПолучитьСписокПолейИсточника(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыОтбораВиртуальнойТаблицыПараметрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(СписокПараметровШаблона());
	ДанныеВыбора = Список;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыОтбораВиртуальнойТаблицыПараметрПриИзменении(Элемент)
	Элементы.ПараметрыОтбораВиртуальнойТаблицы.ТекущиеДанные.Параметр = ПолучитьСтрокуБезСпецСимволов(Элементы.ПараметрыОтбораВиртуальнойТаблицы.ТекущиеДанные.Параметр);
	ИмяПараметра = Элементы.ПараметрыОтбораВиртуальнойТаблицы.ТекущиеДанные.Параметр;
	Если Объект.ПараметрыШаблона.НайтиСтроки(Новый Структура("Параметр",ИмяПараметра)).Количество()=0 Тогда
		НоваяСтрока = Объект.ПараметрыШаблона.Добавить();
		НоваяСтрока.Параметр = ИмяПараметра;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыОтбораВиртуальнойТаблицыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СинхронизироватьТипПараметраСИсточником(Элементы.ПараметрыОтбораВиртуальнойТаблицы.ТекущиеДанные.Параметр);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "ОБЪЕДИНЯЕМЫЕ ШАБЛОНЫ"


&НаКлиенте
Процедура ОбъединяемыеШаблоныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаСоответствия Из Объект.СоответствиеПолейИШаблонов Цикл
		СтрокиШаблона = Объект.ОбъединяемыеШаблоны.НайтиСтроки(Новый Структура("Шаблон",СтрокаСоответствия.Шаблон));
		Если СтрокиШаблона.Количество()=0 Тогда
			СтрокиУдалить.Добавить(СтрокаСоответствия);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.СоответствиеПолейИШаблонов.Удалить(СтрокаУдалить);
	КонецЦикла;
	ПерерисоватьТаблицуСоответствий();
КонецПроцедуры

&НаКлиенте
Процедура ОбъединяемыеШаблоныШаблонПриИзменении(Элемент)
	ДобавитьПараметрыШаблона(Элементы.ОбъединяемыеШаблоны.ТекущиеДанные.Шаблон);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбработатьСоответствия();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствийШ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НомерШаблона = Число(Сред(Элемент.Имя,Найти(Элемент.Имя,"Ш")+1));
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьПоляШаблона(НомерШаблона);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединяемыеШаблоныШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПараметрыОтбора = Новый Структура();
	ОткрытьФорму("Справочник.фин_ШаблоныПользовательскихОтчетов.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка=Ложь;
		ПоказатьПредупреждение(,"Перед заполнением полей необходимо записать шаблон!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,"Перед заполнением полей необходимо записать шаблон!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры






