
//Процедура ПередЗаписью
//
Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка=Истина Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПраваПодписиНаЭтапахМаршрутов.ВидДокументов,
	               |	ПраваПодписиНаЭтапахМаршрутов.Маршрут,
	               |	ПраваПодписиНаЭтапахМаршрутов.Этап
	               |ИЗ
	               |	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_МаршрутыДвиженияДокументов.ЭтапыМаршрута КАК МаршрутыДвиженияДокументовЭтапыМаршрута
	               |		ПО ПраваПодписиНаЭтапахМаршрутов.Этап = МаршрутыДвиженияДокументовЭтапыМаршрута.Этап
	               |			И ПраваПодписиНаЭтапахМаршрутов.Маршрут = МаршрутыДвиженияДокументовЭтапыМаршрута.Ссылка
	               |			И ПраваПодписиНаЭтапахМаршрутов.ВидДокументов = МаршрутыДвиженияДокументовЭтапыМаршрута.Ссылка.Владелец
	               |ГДЕ
	               |	МаршрутыДвиженияДокументовЭтапыМаршрута.Ссылка = &Ссылка
	               |	И МаршрутыДвиженияДокументовЭтапыМаршрута.НомерСтроки ЕСТЬ NULL 
	               |	И ПраваПодписиНаЭтапахМаршрутов.Маршрут = &Ссылка";
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 НаборЗаписей = РегистрыСведений.усд_ПраваПодписиНаЭтапахМаршрутов.СоздатьНаборЗаписей();
		 НаборЗаписей.Отбор.ВидДокументов.Установить(Выборка.ВидДокументов);
		 НаборЗаписей.Отбор.Маршрут.Установить(Выборка.Маршрут);
		 НаборЗаписей.Отбор.Этап.Установить(Выборка.Этап);
		 НаборЗаписей.Прочитать();
		 НаборЗаписей.Очистить();
		 НаборЗаписей.Записать();
	 КонецЦикла;
	 СтрокиУдалить = Новый Массив;
	 Для Каждого СтрокаУдалить Из ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник,ЭтапПриемник",Неопределено,Неопределено)) Цикл
		СтрокиУдалить.Добавить(СтрокаУдалить);
	 КонецЦикла;
	 Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		 ПереходыПоЭтапам.Удалить(СтрокаУдалить);
	 КонецЦикла;
	 СписокУдалить = Новый Массив;
	 Для Каждого СтрокаКонтроля Из КонтролируемыеРеквизиты Цикл
		 Если СтрокаКонтроля.Этап.Пустая() ИЛИ ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",СтрокаКонтроля.Этап)).Количество()=0 Тогда
			 СписокУдалить.Добавить(СтрокаКонтроля);
		 КонецЕсли;
	 КонецЦикла;
	 Для Каждого СтрокаКонтроля Из СписокУдалить Цикл
		 КонтролируемыеРеквизиты.Удалить(СтрокаКонтроля);
	 КонецЦикла;
	 Для Каждого СтрокаЭтап Из ЭтапыМаршрута Цикл
		 Если ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник,ЭтапПриемник",СтрокаЭтап.Этап,Неопределено)).Количество()>0 Тогда
			 Если СтрокаЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе Тогда 
				 Отказ = Истина;
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как для последнего этапа """+СтрокаЭтап.Этап+""" запрещено проведение документов!
				 |				Последний этап маршрута должен разрешать проведение документов!");
			 КонецЕсли;
		 КонецЕсли;
	 КонецЦикла;
	 Если ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Неопределено)).Количество()>1 Тогда
		 Отказ = Истина;
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как имеется несколько стартовых этапов!");
	 КонецЕсли;
	 СтрокиАвтоматическоеЗавершение = ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка()));
	 Если СтрокиАвтоматическоеЗавершение.Количество() > 0 Тогда
		 Отказ = Истина;
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как для следующих строк не указан этап:");
		 Для Каждого СтрокаЗавершение Из СтрокиАвтоматическоеЗавершение Цикл
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("		-"+Строка(СтрокаЗавершение.НомерСтроки));
		 КонецЦикла;
	 КонецЕсли;
	 Если НЕ Отказ Тогда
		 Этапы = ЭтапыМаршрута.Выгрузить();
		 Этапы.Свернуть("Этап");
		 Если Этапы.Количество() <> ЭтапыМаршрута.Количество() Тогда
			 Отказ = Истина;
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как имеются повторяющиеся этапы!");
		 КонецЕсли;
		 Для Каждого СтрокаЭтап Из ЭтапыМаршрута Цикл
			 Если СтрокаЭтап.Этап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
				 Отказ = Истина;
				 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как в строке №"+Строка(СтрокаЭтап.НомерСтроки)+" указан этап ""Возврат инициатору маршрута"",который не может быть использован как основной этап!");
			 КонецЕсли;
			 Если ВозвратНаПересмотрНаПроизвольныйЭтап Тогда
				 ЭтапВозврата = СтрокаЭтап.ЭтапВозврата;
				 Если ЭтапВозврата = СтрокаЭтап.Этап Тогда
					 Отказ = Истина;
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как в строке №"+Строка(СтрокаЭтап.НомерСтроки)+" указан этап возврата, идентичный основному!");
				 КонецЕсли;
				 Если ЭтапВозврата <> Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
					 СтрокиЭтапа = ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",ЭтапВозврата));
					 Если СтрокиЭтапа.Количество() =0 Тогда
						 Отказ = Истина;
						 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как в строке №"+Строка(СтрокаЭтап.НомерСтроки)+" указан этап возврата, не входящий в состав маршрута!");
					 Иначе	 
						 Если ЭтапыМаршрута.Индекс(СтрокиЭтапа[0]) >= ЭтапыМаршрута.Индекс(СтрокаЭтап) Тогда
							 Отказ = Истина;
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как в строке №"+Строка(СтрокаЭтап.НомерСтроки)+" указан этап возврата, находящийся позже основного!");
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЦикла;
	 КонецЕсли;
	 Если УсловиеПопаданияНаМаршрут.Пустая() И НЕ ИспользоватьПоУмолчанию Тогда
		 Отказ = Истина;
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" Маршрут не записан, так как не указано условие использования маршрута!");
	 КонецЕсли;
КонецПроцедуры //ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ЗначениеЗаполнено(Владелец) И (НЕ ПометкаУдаления) И усд_ПроцедурыСогласованияВызовСервераПовтИсп.ИспользуетсяСогласованиеДокумента(Владелец)=Ложь Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
КонецПроцедуры
