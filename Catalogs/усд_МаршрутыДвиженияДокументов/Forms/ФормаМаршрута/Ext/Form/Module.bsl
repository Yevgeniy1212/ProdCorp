
//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТРИСОВКИ КАРТЫ МАРШРУТА

&НаСервере
Процедура НарисоватьКарту()
	Справочники.усд_МаршрутыДвиженияДокументов.НарисоватьКарту(Объект,ПолеКарты,РеквизитФормыВЗначение("КоординатыУсловий"),РеквизитФормыВЗначение("ПраваПодписи"),Элементы.УсловныеОбозначения.Пометка,ЦветБлока,ЦветЛинии,ЦветТекста,ЦветСлужебногоБлока,ЦветЛинииСлужебногоБлока,ЦветТекстаСлужебногоБлока,Объект.ВысотаБлока,Объект.ШиринаБлока,Объект.РасстояниеМеждуЭтапами,Объект.СимволовВСтроке,Объект.КоличествоСтрок,Объект.Масштаб);
КонецПроцедуры

&НаСервере
Процедура НастроитьЛегенду(Схема,Видимость=Ложь)
	Справочники.усд_МаршрутыДвиженияДокументов.НастроитьЛегенду(Схема,Видимость,ЦветТекстаСлужебногоБлока);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Владелец.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед добавлением этапов необходимо указать вид документов!");
		Возврат;
	КонецЕсли;
	ВыбратьДобавляемыйЭтап(Новый Структура("Операция","ДобавитьПроизвольный"));
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостоянияЭтапа(Этап)
	Возврат Новый Структура("СостояниеПоУмолчанию,СостояниеПриВозврате,СостояниеПриОтклонении",Этап.СостояниеПоУмолчанию,Этап.СостояниеПриВозврате,Этап.СостояниеПриОтклонении);
КонецФункции

&НаКлиенте
Процедура УсловныеОбозначения(Команда)
	Элементы.УсловныеОбозначения.Пометка = НЕ Элементы.УсловныеОбозначения.Пометка;
	Элементы.ПолеЛегенды.Видимость = Элементы.УсловныеОбозначения.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартуМаршрута(Команда)
	НарисоватьКарту();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЦветЛинии=Новый Цвет(46,139,87);
	ЦветБлока=Новый Цвет(192,220,192);
	ЦветТекста=Новый Цвет(0,100,0);
	ЦветЛинииСлужебногоБлока = Новый Цвет(255,140,0);
	ЦветСлужебногоБлока = Новый Цвет(255,236,139);
	ЦветТекстаСлужебногоБлока = Новый Цвет(178,34,34);
	ЗаполнитьСписокОпераций();
	Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0 ИЛИ Объект.Ссылка.Пустая();
	
	НадписьЗавершениеМаршрута = "Завершение маршрута";
	НадписьИспользованиеМаршрута = "Использование маршрута";
	НадписьКарточкаМаршрута = "Карточка маршрута";
	НадписьЭтапыМаршрута = "Этапы маршрута";
	НадписьЭлементыОформленияКарты = "Элементы оформления карты";
	НадписьРазмещениеПодписейНаБлокахЭтапов = "Размещение подписей на блоках этапов";
	
	ОбъектЧтенияПрав = Объект.Ссылка;
	Если Объект.Ссылка.Пустая() И Параметры.ЗначениеКопирования<>Неопределено Тогда
		ОбъектЧтенияПрав = Параметры.ЗначениеКопирования.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектЧтенияПрав) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПодписиНаЭтапахМаршрутов.Этап,
			|	ПраваПодписиНаЭтапахМаршрутов.Пользователь
			|ИЗ
			|	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутов
			|ГДЕ
			|	ПраваПодписиНаЭтапахМаршрутов.Маршрут = &Маршрут";

		Запрос.УстановитьПараметр("Маршрут", ОбъектЧтенияПрав);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НС = ПраваПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если фин_ПривилегированныеПроцедуры.ИмеютсяДокументыНаМаршруте(Объект.Ссылка) Тогда
			ТолькоПросмотр = Истина;
			Если Метаданные.Роли.Найти("ПолныеПрава")<>Неопределено И РольДоступна("ПолныеПрава") Тогда
				Сообщить("Не рекомендуется изменять настройки маршрута, так как имеются документы на данном маршруте!");
			Иначе
				Элементы.ФормаРедактировать.Видимость=Ложь;
				Сообщить("Форма маршрута открыта в режиме просмотра, так как имеются документы на данном маршруте!");
			КонецЕсли;
		Иначе
			Элементы.ФормаРедактировать.Видимость=Ложь;
		КонецЕсли;
	Иначе
		Элементы.ФормаРедактировать.Видимость=Ложь;
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.ВысотаБлока = 2;
			Объект.ШиринаБлока = 4;
			Объект.РасстояниеМеждуЭтапами = 2;
			Объект.КоличествоСтрок = 4;
			Объект.СимволовВСтроке = 25;
		КонецЕсли;
	КонецЕсли;
	Элементы.КорректируемыеАвтоматическиРеквизиты.ТолькоПросмотр = ТолькоПросмотр;
	СтрокиОбщийКонтроль = Объект.КорректировкаРеквизитовНаЭтапах.НайтиСтроки(Новый Структура("Этап",Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка()));
	Для Каждого СтрокаКонтроль Из СтрокиОбщийКонтроль Цикл
		НС = КорректируемыеАвтоматическиРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаКонтроль);
	КонецЦикла;
	НарисоватьКарту();
	ВОтдельныхОкнах = Истина;//Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
	Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка = Истина;//фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОткрыватьПодчиненныеОкнаВОтдельномОкне")<>Ложь;
	
	ПолеЛегенды.ОтображатьЗаголовки	= Ложь;
	ПолеЛегенды.ОтображатьСетку		= Ложь;
	ПолеЛегенды.ТолькоПросмотр		= Истина;
	ПолеЛегенды.Защита				= Истина;
	НастроитьЛегенду(ПолеЛегенды,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.УсловиеПопаданияНаМаршрут.Видимость = НЕ Объект.ИспользоватьПоУмолчанию;
	Элементы.КорректируемыеАвтоматическиРеквизиты.Видимость = Объект.ФинальныйКонтрольРеквизитовДокумента;
	Элементы.ЭтапыМаршрутаЭтапВозврата.Видимость = Объект.ВозвратНаПересмотрНаПроизвольныйЭтап;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЗАПОЛНЕНИЕМ МАРШРУТА

&НаСервере
Процедура ЗаполнитьСписокОпераций(ПараметрЗаполнения=Неопределено)
	СписокОперацийНадБлоком.Очистить();
	Если ТолькоПросмотр Тогда
		Если ТипЗнч(ПараметрЗаполнения)=Тип("Строка") Тогда
			СписокОперацийНадБлоком.Добавить("КарточкаЭтапа","Карточка этапа",Истина,БиблиотекаКартинок.усд_КарточкаЭтапа);
		Иначе
			СписокОперацийНадБлоком.Добавить("КарточкаЭтапа","Карточка этапа",Истина,БиблиотекаКартинок.усд_КарточкаЭтапа);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если ПараметрЗаполнения="Финиш" Тогда
		СписокОперацийНадБлоком.Добавить("ПринятьСоединение","Принять соединение от этапа-источника",Истина,БиблиотекаКартинок.усд_ПринятьСоединениеОтДругогоБлока);
	ИначеЕсли ПараметрЗаполнения="Старт" Тогда
		СписокОперацийНадБлоком.Добавить("ДобавитьСледующий","Добавить следующий этап",Истина,БиблиотекаКартинок.усд_ДобавитьСледующийЭтап);
		СписокОперацийНадБлоком.Добавить("ДобавитьПроизвольный","Добавить произвольный этап",Истина,БиблиотекаКартинок.усд_ДобавитьПроизвольныйЭтап);
		СписокОперацийНадБлоком.Добавить("УстановитьСоединение","Установить соединение с этапом-приемником",Истина,БиблиотекаКартинок.усд_УстановитьСоединениеСДругимБлоком);
		СписокОперацийНадБлоком.Добавить("ДобавитьПереход","Добавить условный переход",Истина,БиблиотекаКартинок.усд_ДобавитьУсловныйПереход);
	ИначеЕсли ТипЗнч(ПараметрЗаполнения)=Тип("Строка") ИЛИ ТипЗнч(ПараметрЗаполнения)=Тип("Структура") Тогда
		СписокОперацийНадБлоком.Добавить("ДобавитьПроизвольный","Добавить произвольный этап",Истина,БиблиотекаКартинок.усд_ДобавитьПроизвольныйЭтап);
		СписокОперацийНадБлоком.Добавить("ДобавитьСледующий","Добавить следующий этап",Истина,БиблиотекаКартинок.усд_ДобавитьСледующийЭтап);
		СписокОперацийНадБлоком.Добавить("УстановитьСоединение","Установить соединение с этапом-приемником",Истина,БиблиотекаКартинок.усд_УстановитьСоединениеСДругимБлоком);
		СписокОперацийНадБлоком.Добавить("ПринятьСоединение","Принять соединение от этапа-источника",Истина,БиблиотекаКартинок.усд_ПринятьСоединениеОтДругогоБлока);
		СписокОперацийНадБлоком.Добавить("ДобавитьПереход","Добавить условный переход",Истина,БиблиотекаКартинок.усд_ДобавитьУсловныйПереход);
		СписокОперацийНадБлоком.Добавить("КарточкаЭтапа","Карточка этапа",Истина,БиблиотекаКартинок.усд_КарточкаЭтапа);
		СписокОперацийНадБлоком.Добавить("УдалитьЭтап","Удалить этап",Истина,БиблиотекаКартинок.усд_УдалитьЭтапСМаршрута);
	Иначе
		СписокОперацийНадБлоком.Добавить("ДобавитьСледующий","Добавить следующий этап",Истина,БиблиотекаКартинок.усд_ДобавитьСледующийЭтап);
		СписокОперацийНадБлоком.Добавить("ДобавитьПроизвольный","Добавить произвольный этап",Истина,БиблиотекаКартинок.усд_ДобавитьПроизвольныйЭтап);
		СписокОперацийНадБлоком.Добавить("УстановитьСоединение","Установить соединение с этапом-приемником",Истина,БиблиотекаКартинок.усд_УстановитьСоединениеСДругимБлоком);
		СписокОперацийНадБлоком.Добавить("ПринятьСоединение","Принять соединение от этапа-источника",Истина,БиблиотекаКартинок.усд_ПринятьСоединениеОтДругогоБлока);
		СписокОперацийНадБлоком.Добавить("ДобавитьПереход","Добавить условный переход",Истина,БиблиотекаКартинок.усд_ДобавитьУсловныйПереход);
		СписокОперацийНадБлоком.Добавить("КарточкаЭтапа","Карточка этапа",Истина,БиблиотекаКартинок.усд_КарточкаЭтапа);
		СписокОперацийНадБлоком.Добавить("УдалитьЭтап","Удалить этап",Истина,БиблиотекаКартинок.усд_УдалитьЭтапСМаршрута);
		СписокОперацийНадБлоком.Добавить("ЗаменитьЭтап","Заменить этап",Истина,БиблиотекаКартинок.усд_ЗаменитьЭтап);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Расшифровка)=Тип("Строка") Тогда
		Если Расшифровка<>"Старт"
				И Расшифровка<>"Финиш"
				И Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",Расшифровка)).Количество()=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Расшифровка)=Тип("Массив") Тогда
		Текст = "";
		Для Каждого ЭлементМассива Из Расшифровка Цикл
			Текст= Текст+?(Текст="","",Символы.ПС)+"->"+Строка(ЭлементМассива);
		КонецЦикла;
		ПоказатьПредупреждение(,Текст);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗапоминаемыйЭтап) И ЗапоминаемыйЭтап<>Расшифровка Тогда
			Если Уровень(ЗапоминаемыйЭтап)>Уровень(Расшифровка) И НЕ ТипЗнч(ЗапоминаемыйЭтап)=Тип("Строка") Тогда
				Исходник = Расшифровка;
				Приемник = ЗапоминаемыйЭтап;
			Иначе
				Приемник = Расшифровка;
				Исходник = ЗапоминаемыйЭтап;
			КонецЕсли;
			Если ТипЗнч(Исходник)=Тип("Строка") И Исходник<>"Старт" Тогда
				СтруктураПоиск = Новый Структура("ЭтапИсточник",?(Исходник="Старт",Неопределено,Исходник));
				Условие = ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка");
				СписокУсловий = Новый СписокЗначений;
				СтрокиУсловий = Объект.ПереходыПоЭтапам.НайтиСтроки(СтруктураПоиск);
				Для Каждого СтрокаУсловие Из СтрокиУсловий Цикл
					СписокУсловий.Добавить(СтрокаУсловие.Условие);
				КонецЦикла;
				ОписаниеОбработкаВыбораУсловияДляРасшифровки = Новый ОписаниеОповещения("ОбработкаВыбораУсловияДляРасшифровки",ЭтотОбъект,Расшифровка);
				СписокУсловий.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораУсловияДляРасшифровки,"Укажите условие перехода");
				Возврат;
			КонецЕсли;
	КонецЕсли;
	ПродолжениеПроцедурыРасшифровки(Расшифровка,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУсловияДляРасшифровки(РезультатВыбораУсловия,Расшифровка) Экспорт
	УсловиеВыбранное = Неопределено;
	Если РезультатВыбораУсловия<>Неопределено Тогда
		УсловиеВыбранное = РезультатВыбораУсловия.Значение;
	КонецЕсли;
	ПродолжениеПроцедурыРасшифровки(Расшифровка,УсловиеВыбранное);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеПроцедурыРасшифровки(Расшифровка,УсловиеВыбранное)
	
	Если ЗначениеЗаполнено(ЗапоминаемыйЭтап) Тогда
		Если ЗапоминаемыйЭтап<>Расшифровка Тогда
			Если Уровень(ЗапоминаемыйЭтап)>Уровень(Расшифровка) И НЕ ТипЗнч(ЗапоминаемыйЭтап)=Тип("Строка") Тогда
				Исходник = Расшифровка;
				Приемник = ЗапоминаемыйЭтап;
			Иначе
				Приемник = Расшифровка;
				Исходник = ЗапоминаемыйЭтап;
			КонецЕсли;
			СтруктураПоиск = Новый Структура("ЭтапИсточник",?(Исходник="Старт",Неопределено,Исходник));
			Если ТипЗнч(Исходник)=Тип("Строка") И Исходник<>"Старт" Тогда
				Условие = ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка");
				Если УсловиеВыбранное<>Неопределено Тогда
					Условие = УсловиеВыбранное;
				КонецЕсли;
				СтруктураПоиск.Вставить("Условие",Условие);
			КонецЕсли;
			СтрокиУдалить = Объект.ПереходыПоЭтапам.НайтиСтроки(СтруктураПоиск);
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				Объект.ПереходыПоЭтапам.Удалить(СтрокаУдалить);
			КонецЦикла;
			НС = Объект.ПереходыПоЭтапам.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтруктураПоиск);
			НС.ЭтапПриемник = Приемник;
			Если ТипЗнч(Исходник)=Тип("Строка") И Исходник<>"Старт" Тогда
				НС.Идентификатор = Исходник;
			КонецЕсли;
			Модифицированность=Истина;	
		КонецЕсли;
		ЗапоминаемыйЭтап = Неопределено;
	
		НарисоватьКарту();
		Возврат; 
	КонецЕсли;
	ЗаполнитьСписокОпераций(Расшифровка);
	ОписаниеОбработкаВыбораОперации = Новый ОписаниеОповещения("ОбработкаВыбораОперации",ЭтотОбъект,Расшифровка);
	СписокОперацийНадБлоком.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораОперации,"Выберите операцию");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОперации(Результат,Расшифровка) Экспорт
	НарисоватьКарту();
	Если Результат<>Неопределено Тогда
		Операция = Результат.Значение;
		Если Операция = "КарточкаЭтапа" Тогда
			ОткрытьКарточкуЭтапа(Расшифровка);
		ИначеЕсли Операция = "ДобавитьСледующий" Тогда
			Если Объект.Владелец.Пустая() Тогда
				ПоказатьПредупреждение(,"Перед добавлением этапов необходимо указать вид документов!");
				Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
				Возврат;
			КонецЕсли;
			ВыбратьДобавляемыйЭтап(Новый Структура("Операция,Расшифровка","ДобавитьСледующий",Расшифровка));
		ИначеЕсли Операция = "ДобавитьПроизвольный" Тогда
			Если Объект.Владелец.Пустая() Тогда
				ПоказатьПредупреждение(,"Перед добавлением этапов необходимо указать вид документов!");
				Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
				Возврат;
			КонецЕсли;
			НовыйЭтап = ВыбратьДобавляемыйЭтап(Новый Структура("Операция,Расшифровка","ДобавитьПроизвольный",Расшифровка));
		ИначеЕсли Операция = "УстановитьСоединение" Тогда
			ЗапоминаемыйЭтап = Расшифровка;
		ИначеЕсли Операция = "ПринятьСоединение" Тогда
			// обрабатывается автоматически
		ИначеЕсли Операция = "ДобавитьПереход" Тогда
			Если Объект.Владелец.Пустая() Тогда
				ПоказатьПредупреждение(,"Перед добавлением этапов необходимо указать вид документов!");
				Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
				Возврат;
			КонецЕсли;
			ЗапоминаемыйЭтап = Расшифровка;
			Если ТипЗнч(ЗапоминаемыйЭтап)=Тип("Строка") Тогда
				СписокУсловий = Новый СписокЗначений;
				СтрокиУсловий = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",ЗапоминаемыйЭтап));
				Для Каждого СтрокаУсловие Из СтрокиУсловий Цикл
					СписокУсловий.Добавить(СтрокаУсловие.Условие,?(ЗначениеЗаполнено(СтрокаУсловие.Условие),СтрокаУсловие.Условие,"<безусловно>"));
				КонецЦикла;
				ОписаниеОбработкаВыбораУсловияДляДобавленияПерехода = Новый ОписаниеОповещения("ОбработкаВыбораУсловияДляДобавленияПерехода",ЭтотОбъект,Уровень(Расшифровка)+1);
				СписокУсловий.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораУсловияДляДобавленияПерехода,"Укажите условие перехода");
			ИначеЕсли ТипЗнч(ЗапоминаемыйЭтап)=Тип("Структура") Тогда
				ЗапоминаемыйЭтап = Расшифровка.Переход;
				ОбработкаВыбораУсловияДляДобавленияПерехода(Расшифровка.Ветка,Уровень(Расшифровка)+1);
			Иначе
				ОбработкаВыбораУсловияДляДобавленияПерехода(ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка"),Уровень(Расшифровка)+1);
			КонецЕсли;
		ИначеЕсли Операция = "УдалитьЭтап" Тогда
			ОписаниеОбработкаОтветаНаВопросОбУдаленииЭтапа = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОбУдаленииЭтапа",ЭтотОбъект,?(ТипЗнч(ЗапоминаемыйЭтап)=Тип("Структура"),Расшифровка.Переход,Расшифровка));
			ПоказатьВопрос(ОписаниеОбработкаОтветаНаВопросОбУдаленииЭтапа,"Удалить выбранный этап?",РежимДиалогаВопрос.ДаНет);
			Возврат;
		ИначеЕсли Операция = "ЗаменитьЭтап" Тогда
			ВыбратьДобавляемыйЭтап(Новый Структура("Операция,Расшифровка","ЗаменитьЭтап",Расшифровка));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОбУдаленииЭтапа(Ответ,Расшифровка) Экспорт
	Если Ответ=КодВозвратаДиалога.Да Тогда
		УдалитьЭтап(Расшифровка);
	КонецЕсли;
	Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостоянияЭтапа(Этап)
    СтруктураЭтап = Новый Структура("СостояниеПоУмолчанию,СостояниеПриВозврате,СостояниеПриОтклонении");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_ЭтапыМаршрутовДвиженияДокументов.СостояниеПоУмолчанию,
		|	усд_ЭтапыМаршрутовДвиженияДокументов.СостояниеПриВозврате,
		|	усд_ЭтапыМаршрутовДвиженияДокументов.СостояниеПриОтклонении
		|ИЗ
		|	Справочник.усд_ЭтапыМаршрутовДвиженияДокументов КАК усд_ЭтапыМаршрутовДвиженияДокументов
		|ГДЕ
		|	усд_ЭтапыМаршрутовДвиженияДокументов.Ссылка = &Этап";

	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЭтап,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	Возврат СтруктураЭтап;
КонецФункции

&НаКлиенте
Функция ВыбратьДобавляемыйЭтап(ПараметрыДобавления)
	Использованные = Новый СписокЗначений;
	Для Каждого СтрокаЭтап Из Объект.ЭтапыМаршрута Цикл
		Использованные.Добавить(СтрокаЭтап.Этап);
	КонецЦикла;
	ОписаниеОбработкаВыбораДобавляемогоЭтапа = Новый ОписаниеОповещения("ОбработкаВыбораДобавляемогоЭтапа",ЭтотОбъект,ПараметрыДобавления);
	ОткрытьФорму("Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ФормаВыбора",Новый Структура("ИспользованныеЭтапы",Использованные),ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОбработкаВыбораДобавляемогоЭтапа,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораДобавляемогоЭтапа(НовыйЭтап,ДополнительныеПараметры) Экспорт
	Если НовыйЭтап<>Неопределено Тогда
		Если ДополнительныеПараметры.Операция = "ЗаменитьЭтап" Тогда
			ЗаменитьЭтап(ДополнительныеПараметры.Расшифровка,НовыйЭтап);
		ИначеЕсли ДополнительныеПараметры.Операция = "ДобавитьСледующий" Тогда
			Если НовыйЭтап<>Неопределено Тогда
				Если ТипЗнч(ДополнительныеПараметры.Расшифровка)=Тип("Строка") И ДополнительныеПараметры.Расшифровка<>"Старт" Тогда
					Условие = ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка");
					СписокУсловий = Новый СписокЗначений;
					СтрокиУсловий = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",ДополнительныеПараметры.Расшифровка));
					Для Каждого СтрокаУсловие Из СтрокиУсловий Цикл
						Если НЕ (СтрокаУсловие.ЭтапИсточник = ДополнительныеПараметры.Расшифровка И	СтрокаУсловие.ЭтапПриемник = НовыйЭтап) Тогда
							СписокУсловий.Добавить(СтрокаУсловие.Условие,?(ЗначениеЗаполнено(СтрокаУсловие.Условие),СтрокаУсловие.Условие,"<безусловно>"));
						КонецЕсли;
					КонецЦикла;
					ДополнительныеПараметры.Вставить("НовыйЭтап",НовыйЭтап);
					ОписаниеОбработкаВыбораУсловияДляДобавленияСледующегоЭтапа = Новый ОписаниеОповещения("ОбработкаВыбораУсловияДляДобавленияСледующегоЭтапа",ЭтотОбъект,ДополнительныеПараметры);
					СписокУсловий.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораУсловияДляДобавленияСледующегоЭтапа,"Укажите условие перехода на этап");
				ИначеЕсли ТипЗнч(ДополнительныеПараметры.Расшифровка)=Тип("Структура") Тогда
					ДополнительныеПараметры.Вставить("НовыйЭтап",НовыйЭтап);
					ОбработкаВыбораУсловияДляДобавленияСледующегоЭтапа(Новый Структура("Значение",ДополнительныеПараметры.Расшифровка.Ветка),ДополнительныеПараметры);
				Иначе
					ДобавлениеСледующегоЭтапа(НовыйЭтап,ДополнительныеПараметры.Расшифровка,Неопределено);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.Операция = "ДобавитьПроизвольный" Тогда
			Если НовыйЭтап<>Неопределено Тогда
				ДобавлениеСледующегоЭтапа(НовыйЭтап,?(ДополнительныеПараметры.Свойство("Расшифровка"),ДополнительныеПараметры.Расшифровка,Неопределено));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ВОтдельныхОкнах Тогда
		Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУсловияДляДобавленияСледующегоЭтапа(РезультатВыбораУсловия,ДополнительныеПараметры) Экспорт
	ВыбранноеУсловие = Неопределено;
	Если РезультатВыбораУсловия<>Неопределено Тогда
		ВыбранноеУсловие = РезультатВыбораУсловия.Значение;
	КонецЕсли;
	ДобавлениеСледующегоЭтапа(ДополнительныеПараметры.НовыйЭтап,ДополнительныеПараметры.Расшифровка,ВыбранноеУсловие);
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеСледующегоЭтапа(НовыйЭтап,Расшифровка=Неопределено,ВыбранноеУсловие=Неопределено)
	Модифицированность=Истина;	
	НС = Объект.ЭтапыМаршрута.Добавить();
	НС.Этап = НовыйЭтап;
	СтруктураСостояний 				= ПолучитьСостоянияЭтапа(НовыйЭтап);
	НС.СостояниеДокумента 			= СтруктураСостояний.СостояниеПоУмолчанию;
	НС.СостояниеПриВозврате 		= СтруктураСостояний.СостояниеПриВозврате;
	НС.СостояниеПриОтклонении 		= СтруктураСостояний.СостояниеПриОтклонении;
	НС.ЕдиницыВремени 				= ПредопределенноеЗначение("Перечисление.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Дней");
	НС.Уровень 						= ?(Расшифровка=Неопределено,Уровень(),Уровень(?(ТипЗнч(Расшифровка)=Тип("Структура"),Расшифровка.Переход,Расшифровка)))+1;
	Если Расшифровка <> Неопределено Тогда
		НС 								= Объект.ПереходыПоЭтапам.Добавить();
		НС.ЭтапИсточник 				= ?(ТипЗнч(Расшифровка)=Тип("Структура"),Расшифровка.Переход,Расшифровка);
		НС.ЭтапПриемник 				= НовыйЭтап;
		Если ТипЗнч(Расшифровка)=Тип("Структура") ИЛИ (ТипЗнч(Расшифровка)=Тип("Строка") И Расшифровка<>"Старт") Тогда
			Если ВыбранноеУсловие<>Неопределено Тогда
				НС.Условие = ВыбранноеУсловие;
					НС.Безусловный = НЕ ЗначениеЗаполнено(ВыбранноеУсловие);
					СтруктураПоискаПустышек = Новый Структура("ЭтапИсточник,Условие,Безусловный");
					ЗаполнитьЗначенияСвойств(СтруктураПоискаПустышек,НС);
					СтруктураПоискаПустышек.Вставить("ЭтапПриемник",Неопределено);
					СтруктураПоискаПустышек.Вставить("Идентификатор",?(ТипЗнч(Расшифровка)=Тип("Структура"),Расшифровка.Переход,Расшифровка));
					СтрокиПустышки = Объект.ПереходыПоЭтапам.НайтиСтроки(СтруктураПоискаПустышек);
					Для Каждого СтрокаПустышек Из СтрокиПустышки Цикл
						Объект.ПереходыПоЭтапам.Удалить(СтрокаПустышек);
					КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Расшифровка)=Тип("Структура") ИЛИ (ТипЗнч(Расшифровка)=Тип("Строка") И Расшифровка<>"Старт") Тогда
			НС.Идентификатор = ?(ТипЗнч(Расшифровка)=Тип("Структура"),Расшифровка.Переход,Расшифровка);
		КонецЕсли;
	КонецЕсли;
	ПараметрыКарточки = ПараметрыКарточкиЭтапа(НовыйЭтап);
	ОткрытьФорму("Справочник.усд_МаршрутыДвиженияДокументов.Форма.КарточкаЭтапа",ПараметрыКарточки,ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
	Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтап(Этап)
	СтрокиУдалить = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапПриемник",Этап));
	ЭтапИсточник = Неопределено;
	УсловиеИсточник = Неопределено;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ЭтапИсточник = СтрокаУдалить.ЭтапИсточник;
		УсловиеИсточник = СтрокаУдалить.Условие;
		Объект.ПереходыПоЭтапам.Удалить(СтрокаУдалить);
	КонецЦикла;
	СтрокиУдалить = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Этап));
	ЭтапПриемник = Неопределено;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ЭтапПриемник = СтрокаУдалить.ЭтапПриемник;
		Объект.ПереходыПоЭтапам.Удалить(СтрокаУдалить);
	КонецЦикла;
	СтрокиУдалить = Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.ПереченьПереходов.Удалить(СтрокаУдалить);
	КонецЦикла;
	НС = Объект.ПереходыПоЭтапам.Добавить();
	НС.ЭтапИсточник = ЭтапИсточник;
	НС.Условие = УсловиеИсточник;
	НС.ЭтапПриемник = ЭтапПриемник;
	Если ТипЗнч(ЭтапИсточник)=Тип("Строка") И ЭтапИсточник<>"Старт" Тогда
		НС.Идентификатор = ЭтапИсточник;
	КонецЕсли;
	СтрокиУдалить = Объект.КонтролируемыеРеквизиты.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КонтролируемыеРеквизиты.Удалить(СтрокаУдалить);
	КонецЦикла;
	СтрокиУдалить = Объект.ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.ЭтапыМаршрута.Удалить(СтрокаУдалить);
	КонецЦикла;
	СтрокиУдалить = Объект.КорректировкаРеквизитовНаЭтапах.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КорректировкаРеквизитовНаЭтапах.Удалить(СтрокаУдалить);
	КонецЦикла;
	Модифицированность=Истина;	
	
	НарисоватьКарту();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЭтап(Этап,НовыйЭтап)
	СтрокиУдалить = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапПриемник",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокаУдалить.ЭтапПриемник = НовыйЭтап;
	КонецЦикла;
	СтрокиУдалить = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Этап));
	ЭтапПриемник = Неопределено;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокаУдалить.ЭтапИсточник = НовыйЭтап;
	КонецЦикла;
	СтрокиУдалить = Объект.КонтролируемыеРеквизиты.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокаУдалить.Этап = НовыйЭтап;
	КонецЦикла;
	СтрокиУдалить = Объект.ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокаУдалить.Этап = НовыйЭтап;
	КонецЦикла;
	СтрокиУдалить = Объект.КорректировкаРеквизитовНаЭтапах.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокаУдалить.Этап = НовыйЭтап;
	КонецЦикла;
	Модифицированность=Истина;	
	
	НарисоватьКарту();
	
КонецПроцедуры


&НаКлиенте
Функция Уровень(Этап=Неопределено)
	Уровень = 0;
	Если ТипЗнч(Этап)=Тип("Строка") Тогда
		Строки = Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",Этап));
	Иначе
		Строки = Объект.ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Этап));
	КонецЕсли;
	Если Строки.Количество()>0 Тогда
		Уровень = Строки[0].Уровень;
	КонецЕсли;
	Если Этап=Неопределено Тогда
		Для Каждого СтрокаЭтап Из Объект.ЭтапыМаршрута Цикл
			Уровень = Макс(Уровень,СтрокаЭтап.Уровень);
		КонецЦикла;
		Для Каждого СтрокаЭтап Из Объект.ПереченьПереходов Цикл
			Уровень = Макс(Уровень,СтрокаЭтап.Уровень);
		КонецЦикла;
	КонецЕсли;
	Возврат Уровень;
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуЭтапа(Этап)
	Если ТипЗнч(Этап)=Тип("СправочникСсылка.усд_ЭтапыМаршрутовДвиженияДокументов") Тогда
		ПараметрыКарточки = ПараметрыКарточкиЭтапа(Этап);
		ОткрытьФорму("Справочник.усд_МаршрутыДвиженияДокументов.Форма.КарточкаЭтапа",ПараметрыКарточки,ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
	Иначе
		ПараметрыКарточки = ПараметрыКарточкиПерехода(?(ТипЗнч(Этап)=Тип("Структура"),Этап.Переход,Этап));
		ОткрытьФорму("Справочник.усд_МаршрутыДвиженияДокументов.Форма.КарточкаУсловногоПерехода",ПараметрыКарточки,ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыКарточкиЭтапа(Этап)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Этап",							Этап);
	СтруктураПараметров.Вставить("ПроизвольныйВозвратНаПересмотр",	Объект.ВозвратНаПересмотрНаПроизвольныйЭтап);
	СтруктураПараметров.Вставить("ВидДокументов",					Объект.Владелец);
	
	// сведения о переходах этапа
	СтрокиПредыдущие = Объект.ПереходыПоЭтапам.Выгрузить(Новый Структура("ЭтапПриемник",Этап));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.усд_ЭтапыМаршрутовДвиженияДокументов"));
	Типы = Новый ОписаниеТипов(МассивТипов);
	СтрокиПредыдущие.Колонки.Добавить("Этап",Типы);
	Если СтрокиПредыдущие.Количество()=0 Тогда
		НС = СтрокиПредыдущие.Добавить();
		НС.Этап = "Старт";
	Иначе
		Для Каждого СтрокаПереход Из СтрокиПредыдущие Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПереход.ЭтапИсточник) Тогда
				СтрокаПереход.Этап = "Старт";
			ИначеЕсли СтрокаПереход.Идентификатор <> "" Тогда
				СтрокаПереход.Этап = СтрокаПереход.Идентификатор;
			Иначе
				СтрокаПереход.Этап = СтрокаПереход.ЭтапИсточник;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредыдущиеЭтапы",СтрокиПредыдущие);
	СтрокиСледующие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Этап));
	Если СтрокиСледующие.Количество()>0 Тогда
		СтруктураПараметров.Вставить("СледующийЭтап",?(СтрокиСледующие[0].Идентификатор<>"",СтрокиСледующие[0].Идентификатор,СтрокиСледующие[0].ЭтапПриемник));
	Иначе
		СтруктураПараметров.Вставить("СледующийЭтап","Финиш");
	КонецЕсли;
	
	//сведения этапа
	СтрокаЭтап = Объект.ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Этап))[0];
	СтруктураПараметров.Вставить("ТолькоПросмотр",									ТолькоПросмотр);
	СтруктураПараметров.Вставить("Уровень",									СтрокаЭтап.Уровень);
	СтруктураПараметров.Вставить("ЕдиницыВремени",								СтрокаЭтап.ЕдиницыВремени);
	СтруктураПараметров.Вставить("ЗапретитьПроведениеДокументаНаДанномЭтапе",	СтрокаЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе);
	СтруктураПараметров.Вставить("КорректироватьРеквизитыДокумента",			СтрокаЭтап.КорректироватьРеквизитыДокумента);
	СтруктураПараметров.Вставить("КонтролироватьСрокИсполнения",				СтрокаЭтап.КонтролироватьСрокИсполнения);
	СтруктураПараметров.Вставить("КонтрольЗаполнения",							СтрокаЭтап.КонтрольЗаполнения);
	СтруктураПараметров.Вставить("ОжидатьПодписиВсехОтветственных",			СтрокаЭтап.ОжидатьПодписиВсехОтветственных);
	СтруктураПараметров.Вставить("ПровестиАвтоматическиПриУтверждении",		СтрокаЭтап.ПровестиАвтоматическиПриУтверждении);
	СтруктураПараметров.Вставить("СостояниеДокумента",							СтрокаЭтап.СостояниеДокумента);
	СтруктураПараметров.Вставить("СостояниеПриВозврате",						СтрокаЭтап.СостояниеПриВозврате);
	СтруктураПараметров.Вставить("СостояниеПриОтклонении",						СтрокаЭтап.СостояниеПриОтклонении);
	СтруктураПараметров.Вставить("СрокИсполнения",								СтрокаЭтап.СрокИсполнения);
	СтруктураПараметров.Вставить("ЭтапВозврата",								СтрокаЭтап.ЭтапВозврата);
	
	СтруктураПараметров.Вставить("КорректируемыеАвтоматическиРеквизиты",Объект.КорректировкаРеквизитовНаЭтапах.Выгрузить(Новый Структура("Этап",Этап)));
	
	СтруктураПараметров.Вставить("ПраваПодписи",ПраваПодписи.Выгрузить(Новый Структура("Этап",Этап)));
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Условие");
	Для Каждого СтрокаПереход Из Объект.ПереходыПоЭтапам Цикл
		Если ЗначениеЗаполнено(СтрокаПереход.Условие) И СтрокаПереход.Идентификатор<>"" Тогда
			НС = ТЗ.Добавить();
			НС.Этап = СтрокаПереход.Идентификатор;
			НС.Условие = СтрокаПереход.Условие;
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("УсловияПоЭтапам",ТЗ);
	
	СтруктураПараметров.Вставить("КонтролируемыеРеквизиты",Объект.КонтролируемыеРеквизиты.Выгрузить(Новый Структура("Этап",Этап)));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Уровень");
	Для Каждого СтрокаПереход Из Объект.ЭтапыМаршрута Цикл
		НС = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаПереход);
	КонецЦикла;
	Для Каждого СтрокаПереход Из Объект.ПереченьПереходов Цикл
		НС = ТЗ.Добавить();
		НС.Этап = СтрокаПереход.Идентификатор;
		НС.Уровень = СтрокаПереход.Уровень;
	КонецЦикла;
	СтруктураПараметров.Вставить("ЭтапыИУровни",ТЗ);
	Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,УникальныйИдентификатор);
	Возврат Новый Структура("Адрес",Адрес);
КонецФункции

&НаСервере
Функция ПараметрыКарточкиПерехода(Идентификатор)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Идентификатор",					Идентификатор);
	СтруктураПараметров.Вставить("ВидДокументов",					Объект.Владелец);
	СтруктураПараметров.Вставить("ТолькоПросмотр",					ТолькоПросмотр);
	
	// сведения о переходах этапа
	СтрокиПредыдущие = Объект.ПереходыПоЭтапам.Выгрузить(Новый Структура("ЭтапПриемник",Идентификатор));
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.усд_ЭтапыМаршрутовДвиженияДокументов"));
	Типы = Новый ОписаниеТипов(МассивТипов);
	СтрокиПредыдущие.Колонки.Добавить("Этап",Типы);
	Если СтрокиПредыдущие.Количество()=0 Тогда
		НС = СтрокиПредыдущие.Добавить();
		НС.Этап = "Старт";
	Иначе
		Для Каждого СтрокаПереход Из СтрокиПредыдущие Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПереход.ЭтапИсточник) Тогда
				СтрокаПереход.Этап = "Старт";
			ИначеЕсли СтрокаПереход.Идентификатор <> "" Тогда
				СтрокаПереход.Этап = СтрокаПереход.Идентификатор;
			Иначе
				СтрокаПереход.Этап = СтрокаПереход.ЭтапИсточник;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредыдущиеЭтапы",СтрокиПредыдущие);
	СтрокиСледующие = Объект.ПереходыПоЭтапам.Выгрузить(Новый Структура("ЭтапИсточник",Идентификатор));
	СтрокиСледующие.Колонки.ЭтапПриемник.Имя = "Этап";
	СтруктураПараметров.Вставить("Переходы",СтрокиСледующие);
	
	
	//сведения этапа
	СтрокаЭтап = Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор))[0];
	СтруктураПараметров.Вставить("Уровень",				СтрокаЭтап.Уровень);
	СтруктураПараметров.Вставить("Представление",		СтрокаЭтап.Представление);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Условие");
	Для Каждого СтрокаПереход Из Объект.ПереходыПоЭтапам Цикл
		Если ЗначениеЗаполнено(СтрокаПереход.Условие) И СтрокаПереход.Идентификатор<>"" Тогда
			НС = ТЗ.Добавить();
			НС.Этап = СтрокаПереход.Идентификатор;
			НС.Условие = СтрокаПереход.Условие;
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("УсловияПоЭтапам",ТЗ);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Уровень");
	Для Каждого СтрокаПереход Из Объект.ЭтапыМаршрута Цикл
		НС = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаПереход);
	КонецЦикла;
	Для Каждого СтрокаПереход Из Объект.ПереченьПереходов Цикл
		НС = ТЗ.Добавить();
		НС.Этап = СтрокаПереход.Идентификатор;
		НС.Уровень = СтрокаПереход.Уровень;
	КонецЦикла;
	СтруктураПараметров.Вставить("ЭтапыИУровни",ТЗ);
	Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,УникальныйИдентификатор);
	Возврат Новый Структура("Адрес",Адрес);
КонецФункции

&НаСервере
Функция ПараметрыКарточкиНовогоПерехода(Уровень,Условие=Неопределено)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидДокументов",					Объект.Владелец);
	СтруктураПараметров.Вставить("РежимСоздания",					Истина);
	
	СтрокиПредыдущие = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.усд_ЭтапыМаршрутовДвиженияДокументов"));
	Типы = Новый ОписаниеТипов(МассивТипов);
	СтрокиПредыдущие.Колонки.Добавить("Этап",Типы);
	СтрокиПредыдущие.Колонки.Добавить("Условие");
	Если Уровень<2 Тогда
		НС = СтрокиПредыдущие.Добавить();
		НС.Этап = "Старт";
	Иначе
		НС = СтрокиПредыдущие.Добавить();
		НС.Этап = ЗапоминаемыйЭтап;
		Если ТипЗнч(ЗапоминаемыйЭтап)=Тип("Строка") Тогда
			СписокУсловий = Новый СписокЗначений;
			СтрокиУсловий = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",ЗапоминаемыйЭтап));
			Для Каждого СтрокаУсловие Из СтрокиУсловий Цикл
				СписокУсловий.Добавить(СтрокаУсловие.Условие,?(ЗначениеЗаполнено(СтрокаУсловие.Условие),СтрокаУсловие.Условие,"<безусловно>"));
			КонецЦикла;
			НС.Условие = Условие;
		КонецЕсли;
	КонецЕсли;
	ЗапоминаемыйЭтап = Неопределено;
	СтруктураПараметров.Вставить("ПредыдущиеЭтапы",СтрокиПредыдущие);
	
	СтруктураПараметров.Вставить("Уровень",				Уровень);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Условие");
	Для Каждого СтрокаПереход Из Объект.ПереходыПоЭтапам Цикл
		Если ЗначениеЗаполнено(СтрокаПереход.Условие) И СтрокаПереход.Идентификатор<>"" Тогда
			НС = ТЗ.Добавить();
			НС.Этап = СтрокаПереход.Идентификатор;
			НС.Условие = СтрокаПереход.Условие;
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("УсловияПоЭтапам",ТЗ);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Этап");
	ТЗ.Колонки.Добавить("Уровень");
	Для Каждого СтрокаПереход Из Объект.ЭтапыМаршрута Цикл
		НС = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаПереход);
	КонецЦикла;
	Для Каждого СтрокаПереход Из Объект.ПереченьПереходов Цикл
		НС = ТЗ.Добавить();
		НС.Этап = СтрокаПереход.Идентификатор;
		НС.Уровень = СтрокаПереход.Уровень;
	КонецЦикла;
	СтруктураПараметров.Вставить("ЭтапыИУровни",ТЗ);
	Адрес = ПоместитьВоВременноеХранилище(СтруктураПараметров,УникальныйИдентификатор);
	Возврат Новый Структура("Адрес",Адрес);
КонецФункции

&НаСервере
Функция ЗагрузитьКарточкуЭтапа(Карточка)
	Этап = Карточка.Этап;
	
	// сведения о переходах этапа
	СтрокиПредыдущие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапПриемник",Этап));
	Для Каждого СтрокаПредыдущая Из СтрокиПредыдущие Цикл
		Объект.ПереходыПоЭтапам.Удалить(СтрокаПредыдущая);
	КонецЦикла;
	Для Каждого СтрокаНовая Из Карточка.ПредыдущиеЭтапы Цикл
		НС = Объект.ПереходыПоЭтапам.Добавить();
		НС.ЭтапПриемник = Этап;
		Если ТипЗнч(СтрокаНовая.Этап)=Тип("Строка") Тогда
			Если СтрокаНовая.Этап<>"Старт" Тогда
				НС.ЭтапИсточник = СтрокаНовая.Этап;
				НС.Условие = СтрокаНовая.Условие;
				НС.Идентификатор = СтрокаНовая.Этап;
				НС.Безусловный = НЕ ЗначениеЗаполнено(НС.Условие);
			Иначе
				НС.Безусловный = НЕ ЗначениеЗаполнено(НС.Условие);
			КонецЕсли;
		Иначе
			СтрокиПредыдущие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",СтрокаНовая.Этап));
			Для Каждого СтрокаПредыдущая Из СтрокиПредыдущие Цикл
				Объект.ПереходыПоЭтапам.Удалить(СтрокаПредыдущая);
			КонецЦикла;
			НС.ЭтапИсточник = СтрокаНовая.Этап;
			НС.Безусловный = Истина;
		КонецЕсли;
	КонецЦикла;
	СтрокиСледующие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Этап));
	Для Каждого СтрокаСледующая Из СтрокиСледующие Цикл
		Объект.ПереходыПоЭтапам.Удалить(СтрокаСледующая);
	КонецЦикла;
	НС = Объект.ПереходыПоЭтапам.Добавить();
	НС.ЭтапИсточник = Этап;
	НС.Безусловный = Истина;
	Если Карточка.СледующийЭтап<>"Финиш" Тогда
		НС.ЭтапПриемник = Карточка.СледующийЭтап;
	КонецЕсли;
	
	//сведения этапа
	СтрокаЭтап = Объект.ЭтапыМаршрута.НайтиСтроки(Новый Структура("Этап",Этап))[0];
	ЗаполнитьЗначенияСвойств(СтрокаЭтап,Карточка);
	
	СтрокиУдалить = Объект.КорректировкаРеквизитовНаЭтапах.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КорректировкаРеквизитовНаЭтапах.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого НоваяСтрока Из Карточка.КорректируемыеАвтоматическиРеквизиты Цикл
		НС = Объект.КорректировкаРеквизитовНаЭтапах.Добавить();
		ЗаполнитьЗначенияСвойств(НС,НоваяСтрока);
		НС.Этап = Этап;
	КонецЦикла;
	СтрокиУдалить = ПраваПодписи.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ПраваПодписи.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого НоваяСтрока Из Карточка.ПраваПодписи Цикл
		НС = ПраваПодписи.Добавить();
		ЗаполнитьЗначенияСвойств(НС,НоваяСтрока);
		НС.Этап = Этап;
	КонецЦикла;
	СтрокиУдалить = Объект.КонтролируемыеРеквизиты.НайтиСтроки(Новый Структура("Этап",Этап));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.КонтролируемыеРеквизиты.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого НоваяСтрока Из Карточка.КонтролируемыеРеквизиты Цикл
		НС = Объект.КонтролируемыеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НС,НоваяСтрока);
		НС.Этап = Этап;
	КонецЦикла;
	Модифицированность=Истина;	
	
	НарисоватьКарту();
КонецФункции

&НаСервере
Функция ЗагрузитьКарточкуПерехода(Карточка)
	Идентификатор = Карточка.Идентификатор;
	Если Карточка.РежимСоздания Тогда
		мИдентификатор = Идентификатор;
		Инд = 0;
		Пока Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",мИдентификатор)).Количество()>0 Цикл
			Инд = Инд + 1;
			мИдентификатор = Идентификатор+Строка(Инд);
		КонецЦикла;
		Идентификатор = Идентификатор + ?(Инд=0,"",Строка(Инд));
		СтрокаЭтап = Объект.ПереченьПереходов.Добавить();
		СтрокаЭтап.Идентификатор = Идентификатор;
	КонецЕсли;
	// сведения о переходах этапа
	СтрокиПредыдущие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапПриемник",Идентификатор));
	Для Каждого СтрокаПредыдущая Из СтрокиПредыдущие Цикл
		Объект.ПереходыПоЭтапам.Удалить(СтрокаПредыдущая);
	КонецЦикла;
	Для Каждого СтрокаНовая Из Карточка.ПредыдущиеЭтапы Цикл
		НС = Объект.ПереходыПоЭтапам.Добавить();
		НС.ЭтапПриемник = Идентификатор;
		Если ТипЗнч(СтрокаНовая.Этап)=Тип("Строка") Тогда
			Если СтрокаНовая.Этап<>"Старт" Тогда
				НС.ЭтапИсточник = СтрокаНовая.Этап;
				НС.Идентификатор = СтрокаНовая.Этап;
				НС.Условие = СтрокаНовая.Условие;
				НС.Безусловный = НЕ ЗначениеЗаполнено(НС.Условие);
			КонецЕсли;
		Иначе
			СтрокиПредыдущие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",СтрокаНовая.Этап));
			Для Каждого СтрокаПредыдущая Из СтрокиПредыдущие Цикл
				Объект.ПереходыПоЭтапам.Удалить(СтрокаПредыдущая);
			КонецЦикла;
			НС.ЭтапИсточник = СтрокаНовая.Этап;
			НС.Безусловный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСледующие = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",Идентификатор));
	Для Каждого СтрокаСледующая Из СтрокиСледующие Цикл
		Объект.ПереходыПоЭтапам.Удалить(СтрокаСледующая);
	КонецЦикла;
	Для Каждого СтрокаНовая Из Карточка.Переходы Цикл
		НС = Объект.ПереходыПоЭтапам.Добавить();
		НС.Идентификатор = Идентификатор;
		НС.ЭтапИсточник = Идентификатор;
		Если ТипЗнч(СтрокаНовая.Этап)=Тип("Строка") Тогда
			Если СтрокаНовая.Этап<>"Финиш" Тогда
				НС.ЭтапПриемник = СтрокаНовая.Этап;
			Иначе
				НС.ЭтапПриемник = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка();
			КонецЕсли;
			НС.Условие = СтрокаНовая.Условие;
			НС.Безусловный = НЕ ЗначениеЗаполнено(НС.Условие);
		Иначе
			НС.ЭтапПриемник = СтрокаНовая.Этап;
			НС.Условие = СтрокаНовая.Условие;
			НС.Безусловный = НЕ ЗначениеЗаполнено(НС.Условие);
		КонецЕсли;
	КонецЦикла;
	
	//сведения этапа
	СтрокаЭтап = Объект.ПереченьПереходов.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор))[0];
	ЗаполнитьЗначенияСвойств(СтрокаЭтап,Карточка);
	Модифицированность=Истина;	
	НарисоватьКарту();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВыбранноеЗначение=Адрес Тогда
		ОбработатьДанныеВыбора();
		Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеВыбора()
	ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(ДанныеХранилища)=Тип("Структура") И ДанныеХранилища.Свойство("Этап") Тогда
		ЗагрузитьКарточкуЭтапа(ДанныеХранилища);
	ИначеЕсли ТипЗнч(ДанныеХранилища)=Тип("Структура") И ДанныеХранилища.Свойство("Идентификатор") Тогда
		ЗагрузитьКарточкуПерехода(ДанныеХранилища);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.КорректируемыеАвтоматическиРеквизиты.ПодчиненныеЭлементы.КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизита.ОграничениеТипа = ТипРеквизита(Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.КорректируемыйРеквизит);
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыКорректируемыйРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Список = ПолучитьСписокРеквизитов();  
	ОписаниеОбработатьВыборКорректируемогоРеквизита = Новый ОписаниеОповещения("ОбработатьВыборКорректируемогоРеквизита",ЭтотОбъект,Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные);
	ПоказатьВыборИзСписка(ОписаниеОбработатьВыборКорректируемогоРеквизита,Список,Элементы.КорректируемыеАвтоматическиРеквизитыКорректируемыйРеквизит);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКорректируемогоРеквизита(Результат,ТекущиеДанные) Экспорт
	Если Результат<>Неопределено Тогда
		ТекущиеДанные.КорректируемыйРеквизит = Результат.Значение;
		ТекущиеДанные.ЗначениеКонтролируемогоРеквизита = ТипРеквизита(Результат.Значение).ПривестиЗначение(ТекущиеДанные.ЗначениеКонтролируемогоРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.КорректируемыеАвтоматическиРеквизиты.ПодчиненныеЭлементы.КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизита.ОграничениеТипа = ТипРеквизита(Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.КорректируемыйРеквизит);
КонецПроцедуры


&НаСервере
Функция ТипРеквизита(ИмяРеквизита)
	Если ИмяРеквизита="" Тогда
		Возврат Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	Возврат Метаданные.Документы[Объект.Владелец.ПрограммныйИдентификатор].Реквизиты.Найти(ИмяРеквизита).Тип;
КонецФункции


&НаСервере
Функция ПолучитьСписокРеквизитов()
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Владелец) И НЕ Объект.Владелец.ПрограммныйИдентификатор="" Тогда
		ДокументБазы = Метаданные.Документы[Объект.Владелец.ПрограммныйИдентификатор];
		Для Каждого Реквизит Из ДокументБазы.Реквизиты Цикл
			Список.Добавить(Реквизит.Имя,Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	Список.СортироватьПоПредставлению();
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ЭтапыМаршрутаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ЭтапыМаршрута.ТекущиеДанные.Этап = ПредопределенноеЗначение("Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыМаршрутаПередУдалением(Элемент, Отказ)
	УдалитьЭтап(Элементы.ЭтапыМаршрута.ТекущиеДанные.Этап);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПоУмолчаниюПриИзменении(Элемент)
	Если Объект.ИспользоватьПоУмолчанию Тогда
		Объект.УсловиеПопаданияНаМаршрут=ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка");
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНаПересмотрНаПроизвольныйЭтапПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ФинальныйКонтрольРеквизитовДокументаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереход(Команда)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Владелец.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед добавлением этапов необходимо указать вид документов!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗапоминаемыйЭтап)=Тип("Строка") Тогда
		СписокУсловий = Новый СписокЗначений;
		СтрокиУсловий = Объект.ПереходыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапИсточник",ЗапоминаемыйЭтап));
		Для Каждого СтрокаУсловие Из СтрокиУсловий Цикл
			СписокУсловий.Добавить(СтрокаУсловие.Условие,?(ЗначениеЗаполнено(СтрокаУсловие.Условие),СтрокаУсловие.Условие,"<безусловно>"));
		КонецЦикла;
		ОписаниеОбработкаВыбораУсловияДляДобавленияПерехода = Новый ОписаниеОповещения("ОбработкаВыбораУсловияДляДобавленияПерехода",ЭтотОбъект,Уровень()+1);
		СписокУсловий.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораУсловияДляДобавленияПерехода,"Укажите условие перехода");
	Иначе
		ОбработкаВыбораУсловияДляДобавленияПерехода(ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка"),Уровень()+1);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУсловияДляДобавленияПерехода(РезультатВыбораУсловия,Уровень) Экспорт
	Если РезультатВыбораУсловия<>Неопределено Тогда
		ПараметрыКарточки = ПараметрыКарточкиНовогоПерехода(Уровень,?(ТипЗнч(РезультатВыбораУсловия)=Тип("ЭлементСпискаЗначений"),РезультатВыбораУсловия.Значение,РезультатВыбораУсловия));
		ОткрытьФорму("Справочник.усд_МаршрутыДвиженияДокументов.Форма.КарточкаУсловногоПерехода",ПараметрыКарточки,ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
	Иначе
		Элементы.Владелец.Доступность=Объект.ЭтапыМаршрута.Количество()=0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СтрокиОбщийКонтроль = Объект.КорректировкаРеквизитовНаЭтапах.НайтиСтроки(Новый Структура("Этап",ПредопределенноеЗначение("Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка")));
	Для Каждого СтрокаКонтроль Из СтрокиОбщийКонтроль Цикл
		Объект.КорректировкаРеквизитовНаЭтапах.Удалить(СтрокаКонтроль);
	КонецЦикла;
	Для Каждого СтрокаКонтроль Из КорректируемыеАвтоматическиРеквизиты Цикл
		НС = Объект.КорректировкаРеквизитовНаЭтапах.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаКонтроль);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.усд_ПраваПодписиНаЭтапахМаршрутов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДокументов.Установить(ТекущийОбъект.Владелец);
		НаборЗаписей.Отбор.Маршрут.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Очистить();
		Для Каждого СтрокаПраво Из ПраваПодписи Цикл
			НС = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаПраво);
			НС.ВидДокументов = ТекущийОбъект.Владелец;
			НС.Маршрут = ТекущийОбъект.Ссылка;
		КонецЦикла;
		НаборЗаписей.Записать();
		ЗаписьПроизведена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ТекущийОбъект.Ссылка.Пустая() И НЕ ЗаписьПроизведена Тогда
		НаборЗаписей = РегистрыСведений.усд_ПраваПодписиНаЭтапахМаршрутов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДокументов.Установить(ТекущийОбъект.Владелец);
		НаборЗаписей.Отбор.Маршрут.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Очистить();
		Для Каждого СтрокаПраво Из ПраваПодписи Цикл
			НС = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаПраво);
			НС.ВидДокументов = ТекущийОбъект.Владелец;
			НС.Маршрут = ТекущийОбъект.Ссылка;
		КонецЦикла;
		НаборЗаписей.Записать();
		ЗаписьПроизведена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	НарисоватьКарту();
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	Элементы.ФормаРедактировать.Пометка = НЕ Элементы.ФормаРедактировать.Пометка;
	ТолькоПросмотр = НЕ Элементы.ФормаРедактировать.Пометка;
КонецПроцедуры


&НаКлиенте
Процедура ОткрыватьФормыВОтдельныхОкнах(Команда)
	Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка = НЕ Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
	ВОтдельныхОкнах = Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура МасштабРегулирование(Элемент, Направление, СтандартнаяОбработка)
	НарисоватьКарту();
КонецПроцедуры
