////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Адрес") Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма не предназначена для работы в самостоятельном режиме");
		Возврат;
	КонецЕсли;
	Адрес = Параметры.Адрес;
	ПараметрыКарточки = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	Если ПараметрыКарточки.Свойство("ТолькоПросмотр") И ПараметрыКарточки.ТолькоПросмотр<>Неопределено Тогда
		ТолькоПросмотр = ПараметрыКарточки.ТолькоПросмотр;
	КонецЕсли;
	Элементы.ФормаОК.Доступность = НЕ ТолькоПросмотр;
	Для Каждого Реквизит Из ПолучитьРеквизиты() Цикл
		Если ПараметрыКарточки.Свойство(Реквизит.Имя) Тогда
			Если ТипЗнч(ПараметрыКарточки[Реквизит.Имя])=Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаИсходная Из ПараметрыКарточки[Реквизит.Имя] Цикл
					НС = ЭтотОбъект[Реквизит.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаИсходная);
				КонецЦикла;
			Иначе
				ЭтотОбъект[Реквизит.Имя] = ПараметрыКарточки[Реквизит.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СледующийЭтап = Неопределено Тогда
		СледующийЭтап = "Финиш";
	КонецЕсли;
	//оформление
	НадписьКарточкаЭтапа = "Карточка этапа";
	НадписьКонтрольПроведения = "Контроль проведения";
	НадписьКонтрольСроков = "Контроль сроков";
	НадписьКорректировкаРеквизитовДокументаПриЗавершенииЭтапа = "Корректировка реквизитов документа при завершении этапа";
	НадписьПараметрыВозвратаИОтклонения = "Параметры возврата и отклонения";
	НадписьПоложениеНаМаршруте = "Положение на маршруте - предшествующие этапы";
	НадписьПользовательскийКонтрольЗаполнения = "Пользовательский контроль заполнения";
	НадписьПраваПодписиНаЭтапе = "Права подписи на этапе";
	
	УправлениеФормой(ЭтотОбъект);
	мУровень		= Уровень;
	мСледующийЭтап 	= СледующийЭтап;
	Если Этап.Автодействие<>"" Тогда
		Элементы.Страницы.ПодчиненныеЭлементы.СистемныеДействия.Видимость = Ложь;
		Элементы.Страницы.ПодчиненныеЭлементы.НастройкиКонтроляНаЭтапе.Видимость = Ложь;
		Элементы.Права.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПредыдущийЭтапПриИзменении(Элемент)
	
	Элементы.Уровень.МинимальноеЗначение = ДоступныйУровень();
	Если мПредыдущийЭтап<>Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап Тогда
		Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Условие = ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка");
	КонецЕсли;
	Если Уровень<Элементы.Уровень.МинимальноеЗначение Тогда
		Уровень = Элементы.Уровень.МинимальноеЗначение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Изменен уровень этапа! Этап должен располагаться после предшествующего ему",,"Уровень",,);
		Если ЗначениеЗаполнено(СледующийЭтап) И УровеньЭтапа(СледующийЭтап)<=Уровень Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, "Следующий этап не может находиться на уровне, равном или предшествующем уровню текущего этапа! Очистить следующий этап?
			| Да 	 - очистить следующий этап
			| Нет 	 - оставить следующий этап без изменений
			| Отмена - отменить изменения предыдущего этапа",РежимДиалогаВопрос.ДаНетОтмена);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	мПредыдущийЭтап = Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап;
	мУровень = Уровень;
	мУсловие = Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Условие;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньПриИзменении(Элемент)
	мУровень = Уровень;
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Список = СписокЭтапов();
	Список.Вставить(0,"Старт");
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура УсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = СписокУсловий(Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап);
	Список.Вставить(0,ПредопределенноеЗначение("Справочник.усд_УсловияВыполненияОперацийПоДокументам.ПустаяСсылка"),"<безусловно>");
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура СледующийЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Список = Новый СписокЗначений;
	Для Каждого СтрокаЭтап Из ЭтапыИУровни Цикл
		Если СтрокаЭтап.Уровень>Уровень Тогда
			Список.Добавить(СтрокаЭтап.Этап);
		КонецЕсли;
	КонецЦикла;
	Список.Добавить("Финиш");
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура ЭтапВозвратаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Список = Новый СписокЗначений;
	Для Каждого СтрокаЭтап Из ЭтапыИУровни Цикл
		Если СтрокаЭтап.Уровень<Уровень Тогда
			Список.Добавить(СтрокаЭтап.Этап);
		КонецЕсли;
	КонецЦикла;
	Список.Добавить(ПредопределенноеЗначение("Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута"));
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура СледующийЭтапПриИзменении(Элемент)
	мСледующийЭтап = СледующийЭтап;
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьПроведениеДокументаНаДанномЭтапеПриИзменении(Элемент)
	Если ЗапретитьПроведениеДокументаНаДанномЭтапе Тогда
		ПровестиАвтоматическиПриУтверждении = Ложь;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольЗаполненияПриИзменении(Элемент)
	Если НЕ КонтрольЗаполнения Тогда
		КонтролируемыеРеквизиты.Очистить();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеРеквизитыПредставлениеРеквизитаИсточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокРеквизитов();
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораКонтролируемыеРеквизиты", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.КонтролируемыеРеквизитыПредставлениеРеквизитаИсточника);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСрокИсполненияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьРеквизитыДокументаПриИзменении(Элемент)
	Если НЕ КорректироватьРеквизитыДокумента Тогда
		КорректируемыеАвтоматическиРеквизиты.Очистить();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыКорректируемыйРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокРеквизитов();
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораКорректируемыеАвтоматическиРеквизиты", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.КорректируемыеАвтоматическиРеквизитыКорректируемыйРеквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.КорректируемыеАвтоматическиРеквизиты.ПодчиненныеЭлементы.КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизита.ОграничениеТипа = ТипРеквизита(Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.КорректируемыйРеквизит);
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущиеЭтапыПриАктивизацииСтроки(Элемент)
	Если Элементы.ПредыдущиеЭтапы.ТекущиеДанные<>Неопределено Тогда
		мПредыдущийЭтап = Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап;
	Иначе
		мПредыдущийЭтап = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.КорректируемыеАвтоматическиРеквизиты.ПодчиненныеЭлементы.КорректируемыеАвтоматическиРеквизитыЗначениеКонтролируемогоРеквизита.ОграничениеТипа = ТипРеквизита(Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.КорректируемыйРеквизит);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Отказ = ПроверитьЗаполнениеКонтролируемыхРеквизитов();
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена строка 'Реквизит документа'");
	Иначе
		ОповеститьОВыборе(ПараметрыКарточкиЭтапа());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ДоступныйУровень()
	МинимальныйУровень =0;
	Для Каждого СтрокаЭтап ИЗ ПредыдущиеЭтапы Цикл
		МинимальныйУровень = Макс(МинимальныйУровень,УровеньЭтапа(СтрокаЭтап.Этап));
	КонецЦикла;
	Возврат МинимальныйУровень;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораКонтролируемыеРеквизиты(Результат, ПараметрыВыбора) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Элементы.КонтролируемыеРеквизиты.ТекущиеДанные.ПредставлениеРеквизитаИсточника = Результат.Представление;
		Элементы.КонтролируемыеРеквизиты.ТекущиеДанные.РеквизитИсточника = Результат.Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СписокЭтапов()
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ЭтапыИУровни.Выгрузить().ВыгрузитьКолонку("Этап"));
	Возврат Список;
КонецФункции

&НаКлиенте
Функция УровеньЭтапа(ПараметрЭтап)
    УровеньЭтапа = 0;
	СтрокиЭтап = ЭтапыИУровни.НайтиСтроки(Новый Структура("Этап",ПараметрЭтап));
	Если СтрокиЭтап.Количество()>0 Тогда
		УровеньЭтапа=СтрокиЭтап[0].Уровень;
	КонецЕсли;
	Возврат УровеньЭтапа;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Ответ, ПараметрыОтвета) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СледующийЭтап=Неопределено;
		мСледующийЭтап = СледующийЭтап;
	ИначеЕсли Ответ=КодВозвратаДиалога.Отмена Тогда
		Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап = мПредыдущийЭтап;
		Уровень = мУровень;
		Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Условие = мУсловие;
	КонецЕсли;
	
	мПредыдущийЭтап = Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Этап;
	мУровень = Уровень;
	мУсловие = Элементы.ПредыдущиеЭтапы.ТекущиеДанные.Условие;
	УправлениеФормой(ЭтотОбъект);	
			
КонецПроцедуры

&НаСервере
Функция СписокУсловий(ЭтапДляУсловий)
	Условия = УсловияПоЭтапам.Выгрузить(Новый Структура("Этап",ЭтапДляУсловий)).ВыгрузитьКолонку("Условие");
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Условия);
	Возврат Список;
КонецФункции

&НаСервере
Функция ПолучитьСписокРеквизитов()
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ВидДокументов) И НЕ ВидДокументов.ПрограммныйИдентификатор="" Тогда
		ДокументБазы = Метаданные.Документы[ВидДокументов.ПрограммныйИдентификатор];
		Для Каждого Реквизит Из ДокументБазы.Реквизиты Цикл
			Список.Добавить(Реквизит.Имя,Реквизит.Синоним);
		КонецЦикла;
	КонецЕсли;
	Список.СортироватьПоПредставлению();
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ПослеВыбораКорректируемыеАвтоматическиРеквизиты(Результат, ПараметрыВыбора) Экспорт 
	
	Если Результат<>Неопределено Тогда
		Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.КорректируемыйРеквизит = Результат.Значение;
		Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.ЗначениеКонтролируемогоРеквизита = ТипРеквизита(Результат.Значение).ПривестиЗначение(Элементы.КорректируемыеАвтоматическиРеквизиты.ТекущиеДанные.ЗначениеКонтролируемогоРеквизита);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТипРеквизита(ИмяРеквизита)
	Если ИмяРеквизита="" Тогда
		Возврат Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	Возврат Метаданные.Документы[ВидДокументов.ПрограммныйИдентификатор].Реквизиты.Найти(ИмяРеквизита).Тип;
КонецФункции

&НаСервере
Функция ПараметрыКарточкиЭтапа()
	 СтруктураПараметров = Новый Структура;
	 
	 СтруктураПараметров.Вставить("Этап",Этап);
	 // сведения о переходах этапа
	 СтруктураПараметров.Вставить("ПредыдущиеЭтапы",ПредыдущиеЭтапы.Выгрузить());
	 СтруктураПараметров.Вставить("СледующийЭтап",СледующийЭтап);
	 
	 //сведения этапа
	 СтруктураПараметров.Вставить("Уровень",									Уровень);
	 СтруктураПараметров.Вставить("ЕдиницыВремени",								ЕдиницыВремени);
	 СтруктураПараметров.Вставить("ЗапретитьПроведениеДокументаНаДанномЭтапе",	ЗапретитьПроведениеДокументаНаДанномЭтапе);
	 СтруктураПараметров.Вставить("КорректироватьРеквизитыДокумента",			КорректироватьРеквизитыДокумента);
	 СтруктураПараметров.Вставить("КонтролироватьСрокИсполнения",				КонтролироватьСрокИсполнения);
	 СтруктураПараметров.Вставить("КонтрольЗаполнения",							КонтрольЗаполнения);
	 СтруктураПараметров.Вставить("ОжидатьПодписиВсехОтветственных",			ОжидатьПодписиВсехОтветственных);
	 СтруктураПараметров.Вставить("ПровестиАвтоматическиПриУтверждении",		ПровестиАвтоматическиПриУтверждении);
	 СтруктураПараметров.Вставить("СостояниеДокумента",							СостояниеДокумента);
	 СтруктураПараметров.Вставить("СостояниеПриВозврате",						СостояниеПриВозврате);
	 СтруктураПараметров.Вставить("СостояниеПриОтклонении",						СостояниеПриОтклонении);
	 СтруктураПараметров.Вставить("СрокИсполнения",								СрокИсполнения);
	 СтруктураПараметров.Вставить("ЭтапВозврата",								ЭтапВозврата);
	 
	 СтруктураПараметров.Вставить("КорректируемыеАвтоматическиРеквизиты",КорректируемыеАвтоматическиРеквизиты.Выгрузить());
	 
	 СтруктураПараметров.Вставить("ПраваПодписи",ПраваПодписи.Выгрузить());
	 СтруктураПараметров.Вставить("КонтролируемыеРеквизиты",КонтролируемыеРеквизиты.Выгрузить());
	 
	 #Если ТолстыйКлиентОбычноеПриложение Тогда
		 Возврат СтруктураПараметров;
	 #Иначе
		Попытка
			 	ПоместитьВоВременноеХранилище(СтруктураПараметров,Адрес);
		Исключение
			 Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров,УникальныйИдентификатор);
		КонецПопытки;
		Возврат Адрес;
	 #КонецЕсли
 КонецФункции
 
 &НаСервере
Функция ПроверитьЗаполнениеКонтролируемыхРеквизитов()
	 СписокРеквизитов = КонтролируемыеРеквизиты.Выгрузить();
	 Для Каждого СтрокаТЧ Из СписокРеквизитов Цикл
		 Если СтрокаТЧ.РеквизитИсточника="" или не ЗначениеЗаполнено(СтрокаТЧ.РеквизитИсточника) Тогда
			 Возврат Истина;
		 КонецЕсли;
	 КонецЦикла;
	 Возврат Ложь;
 КонецФункции
 
 &НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ЭтапВозврата.Видимость 							= Форма.ПроизвольныйВозвратНаПересмотр;
	Элементы.СрокИсполнения.Доступность 						= Форма.КонтролироватьСрокИсполнения;
	Элементы.ЕдиницыВремени.Доступность							= Форма.КонтролироватьСрокИсполнения;
	Элементы.ПровестиАвтоматическиПриУтверждении.Видимость 		= НЕ Форма.ЗапретитьПроведениеДокументаНаДанномЭтапе;
	Элементы.КонтролируемыеРеквизиты.Видимость 					= Форма.КонтрольЗаполнения;
	Элементы.КорректируемыеАвтоматическиРеквизиты.Видимость 	= Форма.КорректироватьРеквизитыДокумента;
	
КонецПроцедуры

