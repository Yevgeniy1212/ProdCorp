//#Если Клиент Тогда
&НаКлиенте
Перем мОбработкаТайпингаВидаКИ;
&НаКлиенте
Перем мТекстТайпингаВидаКИ;
&НаКлиенте
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;
&НаКлиенте
Перем мКнопкаРедактироватьКИВДиалоге;
&НаКлиенте
Перем мЖирныйШрифт;
&НаКлиенте
Перем мОбычныйШрифт;
&НаКлиенте
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет
&НаКлиенте
Перем мСоздаватьОсновнойДоговор;
//&НаКлиенте
//Перем Адрес;

//#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура ОбновитьТелефоныКонтактногоЛица()
	ОбновитьТелефоныКонтактногоЛицаНаСервере(Элементы.КонтактныеЛица.ТекущиеДанные);
КонецПроцедуры

&НаСервере
Процедура ОбновитьТелефоныКонтактногоЛицаНаСервере(Знач ЭлементыКонтактныеЛицаТекущиеДанные)
	СтрокаТелефонов = "";
	Если ЭлементыКонтактныеЛицаТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыКонтактныеЛицаТекущиеДанные.Ссылка) Тогда
	//Если ЭлементыКонтактныеЛицаТекущиеДанные <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Объект", ЭлементыКонтактныеЛицаТекущиеДанные.Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		КонецЦикла;
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	//Элементы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;
	//Элементы.ТелефоныКонтактногоЛица.Видимость = ЗначениеЗаполнено(СтрокаТелефонов);

КонецПроцедуры

// Процедура изменяет доступность закладок в зависимости от записанности объекта.
&НаСервере
Процедура ДоступностьЗакладок()
	Элементы.СчетаИДоговоры.Доступность = НЕ Объект.Ссылка.Пустая();
	Элементы.Контакты.Доступность       = НЕ Объект.Ссылка.Пустая();
КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельЮрФизЛицо.
&НаСервере
Процедура ВидимостьПанелейЮрФизЛица()
    ЭтоФизЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Если ЭтоФизЛицо Тогда
		ВидимаяСтраница   = Элементы.ФизЛицо;
		НеВидимаяСтраница = Элементы.ЮрЛицо;
	Иначе
		ВидимаяСтраница   = Элементы.ЮрЛицо;
		НеВидимаяСтраница = Элементы.ФизЛицо;
	КонецЕсли;
	Если Элементы.ПанельЮрФизЛицо.ТекущаяСтраница <> ВидимаяСтраница Тогда
		ВидимаяСтраница.Видимость   = Истина;
		НеВидимаяСтраница.Видимость = Ложь;
		Элементы.ПанельЮрФизЛицо.ТекущаяСтраница = ВидимаяСтраница;
	КонецЕсли;
    Элементы.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус.Видимость = 	ЭтоФизЛицо;
КонецПроцедуры

//Процедура очищает ненужные реквизиты, если сменился вид контрагента
//"Юр.Физ лицо
&НаСервере
Процедура ОчиститьДанныеЮрИлиФИзЛица() 
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Объект.ДокументУдостоверяющийЛичность = "";
		Объект.СИК = "";
		Объект.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус = Ложь;
	Иначе
		Объект.КодПоОКПО = "";
	КонецЕсли;
КонецПроцедуры

// Процедура записывает основной договор контрагента контрагента.
&НаСервере
Процедура ПроверитьОсновнойДоговорКонтрагента(мСоздаватьОсновнойДоговор,глТекущийПользователь)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент";
	ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
	Если ВыборкаДоговоров.Следующий() Тогда
		НайденныйДоговор = ВыборкаДоговоров.Ссылка;
	ИначеЕсли мСоздаватьОсновнойДоговор Тогда
		мСоздаватьОсновнойДоговор = Ложь;
		ОрганизацияПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Возврат;
		КонецЕсли;
 		НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НайденныйДоговорОбъект.Наименование          = "Без договора";
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
 		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			НайденныйДоговорОбъект.Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		НайденныйДоговорОбъект.Владелец    = Объект.Ссылка;
		НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		ОшибкаПриЗаписиДоговора = Ложь;
		НайденныйДоговорОбъект.мСообщатьОбОшибках = Ложь;
		Попытка
			НайденныйДоговорОбъект.Записать();
			НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
		Исключение
			НайденныйДоговор = Неопределено;
		КонецПопытки
	Иначе
		Возврат;
	КонецЕсли;
	Объект.ОсновнойДоговорКонтрагента = НайденныйДоговор;
	Записать();
КонецПроцедуры // ПроверитьОсновнойДоговорКонтрагента()

&НаСервере
Процедура ПроверитьОсновнойБанковскийСчет()
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ
	|	Владелец = &Контрагент
	|";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	Если ВыборкаСчетов.Следующий() Тогда
		Объект.ОсновнойБанковскийСчет = ВыборкаСчетов.Ссылка;
		//установим в истину свойство обмена данными "загрузка" чтобы при вызове метода Записать() не проверять все ещё раз 
		//Объект.ОбменДанными.Загрузка = Истина;
		НашОбъект = РеквизитФормыВЗначение("Объект");
		НашОбъект.Записать();
		ЗначениеВРеквизитФормы(НашОбъект,"Объект");
	КонецЕсли;
КонецПРоцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета()
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Элементы.БанковскиеСчетаБанковскиеСчетаУстановитьОсновным.Доступность = Ложь;
	Иначе
		Элементы.БанковскиеСчетаБанковскиеСчетаУстановитьОсновным.Доступность = НЕ (Элементы.БанковскиеСчета.ТекущиеДанные = Объект.ОсновнойБанковскийСчет);
	КонецЕсли; 
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного договора взаиморасчетов.
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора()
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Элементы.ДоговорыКонтрагентовУстановитьОсновным.Доступность = Ложь;
	Иначе
		Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные.ЭтоГруппа Тогда
			Элементы.ДоговорыКонтрагентовУстановитьОсновным.Доступность = Ложь;
		Иначе
			Элементы.ДоговорыКонтрагентовУстановитьОсновным.Доступность = НЕ (Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Объект.ОсновнойДоговорКонтрагента);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного контактного лица.
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()
	//Если Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
	//	Элементы.КонтактнаяИнформацияСделатьОсновным.Доступность = Ложь;
	//Иначе
	//	Элементы.КонтактнаяИнформацияСделатьОсновным.Доступность = НЕ (Элементы.КонтактныеЛица.ТекущиеДанные = Объект.ОсновноеКонтактноеЛицо);
	//КонецЕсли; 
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()
	Если ПустаяСтрока(Объект.НаименованиеПолное) 
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура проверки дубликатов контрагента
&НаСервере
Функция  ПроверкаДубликатовКонтрагента(ПроверкаДубликатов = Неопределено,глТекущийПользователь)
	// Проверка дубликатов
	//Если ПроверкаДубликатов = Неопределено Тогда 
	//	ПроверкаДубликатов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"КонтрольДубликатовВСправочникеКонтрагенты");
	//КонецЕсли;	
	//ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//ОбработкаКомментариев.УдалитьСообщения();
	//Если ПроверкаДубликатов Тогда
	КоличествоСообщений=0;
		КоличествоЗнаковРНН = СтрДлина(Элементы.РНН1);
		Если КоличествоЗнаковРНН = 12 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Ссылка,
			               |	Контрагенты.РНН,
			               |	Контрагенты.Наименование
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
			               |	И Контрагенты.РНН = &РНН
			               |	И Контрагенты.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.УстановитьПараметр("РНН"   , Элементы.РНН1.Значение);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда 
				Выборка = Результат.Выбрать();
				ТекстСообщения = "";
				Пока Выборка.Следующий() Цикл
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Введенный РНН совпадает с контрагентом " + Выборка.наименование;
					Сообщение.Сообщить();
					КоличествоСообщений = 1 + КоличествоСообщений;
					//РаботаССообщениями.КомментарийРасчета("Введенный РНН совпадает с контрагентом ",, Строка(Выборка.Наименование),Выборка.Ссылка);//, ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
					//глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		КоличествоЗнаковИИНБИН = СтрДлина(Элементы.ИдентификационныйКодЛичности1);
		Если КоличествоЗнаковИИНБИН = 12 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Контрагенты.Ссылка,
			               |	Контрагенты.Наименование,
			               |	Контрагенты.ИдентификационныйКодЛичности
			               |ИЗ
			               |	Справочник.Контрагенты КАК Контрагенты
			               |ГДЕ
			               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
			               |	И Контрагенты.Ссылка <> &Ссылка
			               |	И Контрагенты.ИдентификационныйКодЛичности = &ИдентификационныйКодЛичности";
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);			   
			Запрос.УстановитьПараметр("ИдентификационныйКодЛичности"   , Элементы.ИдентификационныйКодЛичности1.Значение);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда 
				Выборка = Результат.Выбрать();
				ТекстСообщения = "";
				Пока Выборка.Следующий() Цикл
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Введенный БИН/ИИН совпадает с контрагентом " + Выборка.наименование;
					Сообщение.Сообщить();
                    КоличествоСообщений = 1 + КоличествоСообщений;
					//РаботаССообщениями.КомментарийРасчета("Введенный БИН/ИИН совпадает с контрагентом ",, Строка(Выборка.Наименование),Выборка.Ссылка);
					//глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//ОбработкаКомментариев.ПоказатьСообщения();
	//КонецЕсли;
	//КоличествоСообщений = ОбработкаКомментариев.Сообщения.Строки.Количество();
	Если КоличествоСообщений <> 0 Тогда 
		ЕстьОшибки = Истина;
	Иначе 
		ЕстьОшибки = Ложь;
	КонецЕсли;
	Возврат ЕстьОшибки;
КонецФункции //ПроверкаДубликатовКонтрагента

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
//Перенесено В процедуру ПриСозданииНаСервере()
// Установка подменю "Советы".
//	РаботаСДиалогами.УстановитьПодменюСоветы(Элементы.КоманднаяПанельФормы, "Контрагенты");
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мСоздаватьОсновнойДоговор = Объект.Ссылка.Пустая();
	мОбработкаТайпингаВидаКИ                 = Ложь;
	мТекстТайпингаВидаКИ                     = "";
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
	мЖирныйШрифт  = Новый Шрифт(,, Истина);
	мОбычныйШрифт = Новый Шрифт();

	// Контактная информация
	//мКнопкаРедактироватьКИВДиалоге = Элементы.КонтактнаяИнформацияКоманднаяПанель.Кнопки.РедактироватьВДиалоге;
	//НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	//Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
	//	мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	//КонецЕсли; 
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЮрФизЛицо) Тогда
			Объект.ЮрФизЛицо = ПолучитьПеречисленияЮрФизЛицоЮрЛицо();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтранаРезидентства) Тогда
			Объект.СтранаРезидентства = ПолучитьСправочникиКлассификаторСтранМираКазахстан();
		КонецЕсли;
	КонецЕсли;
	ДоступностьЗакладок();
	//	Объект.КонтактныеЛица.Отбор.ОбъектВладелец.Значение      = Ссылка;
	//	Объект.КонтактныеЛица.Отбор.ОбъектВладелец.Использование = Истина;
	//Установка параметра для произвольного запроса Контактных лиц по контрагенту
//	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	//БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка);
	
	
	ДоговорыКонтрагентов.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	ДоговорыКонтрагентов.Параметры.УстановитьЗначениеПараметра("ОсновнойДоговор",Объект.ОсновнойДоговорКонтрагента);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Объект.ОсновнойБанковскийСчет);
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("ОсновноеКонтактноеЛицо",Объект.ОсновноеКонтактноеЛицо);
	//НаборКонтактнойИнформации.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	//НаборКонтактнойИнформации.Параметры.УстановитьЗначениеПараметра("ОсновноеКонтактноеЛицо",Объект.ОсновноеКонтактноеЛицо);

	//добавляет действие "Редактировать номер"
	//РаботаСДиалогами.ДобавитьВМенюДействияКнопкуРедактированияКода(Элементы.КоманднаяПанельФормы.Кнопки.Подменю);
	//РаботаСДиалогами.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, Элементы.КоманднаяПанельФормы.Кнопки.Подменю, Элементы.Код);	
	// Проверка однофирменности
	куфиб_РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, "Договоры");
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();	
КонецПроцедуры

&НаСервере
Функция ПолучитьПеречисленияЮрФизЛицоЮрЛицо()
	Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
КонецФункции

&НаСервере
Функция ПолучитьСправочникиКлассификаторСтранМираКазахстан()
	Возврат Справочники.КлассификаторСтранМира.Казахстан;
КонецФункции

//Конец. Обработчик события ПриОткрытии формы.

// Обработчик события ПриЗаписи формы.
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи,мСоздаватьОсновнойДоговор, глТекущийПользователь);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи,мСоздаватьОсновнойДоговор, глТекущийПользователь)
	Если НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		объект.ГоловнойКонтрагент = Объект.Ссылка;
		Модифицированность = Ложь;
	КонецЕсли;
	//ПроверитьОсновнойБанковскийСчет();
	//ПроверитьОсновнойДоговорКонтрагента();
	//Объект.КонтактныеЛица.Отбор.ОбъектВладелец.Значение = Объект.Ссылка;
//	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	ДоговорыКонтрагентов.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);

	ДоступностьЗакладок();
	Если НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		Объект.ГоловнойКонтрагент = Объект.Ссылка;
	КонецЕсли;
	/////////////////
	//об=РеквизитФормыВЗначение("НаборКонтактнойИнформации");
	//об.Зап();
	////ЗначениеВРеквизитФормы(об,"НаборКонтактнойИнформации");
	/////////////////
	куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка, Отказ);
	ПроверитьОсновнойБанковскийСчет();
	ПроверитьОсновнойДоговорКонтрагента(мСоздаватьОсновнойДоговор, глТекущийПользователь);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДоступностьЗакладок();
	
КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
&НаКлиенте
Процедура ПриИзмененииДанных()
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
    	Если ЗначениеВыбора = "ОбновлениеКонтактнойИнформации" Тогда
			ОбновитьТелефоныКонтактногоЛица();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
&НаКлиенте
Процедура БанковскиеСчетаУстановитьОсновным(Команда)
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка);
	//ОсновнойБанковскийСчет = Объект.ОсновнойБанковскийСчет;
	//Элементы.БанковскиеСчета.ТекущийЭлемент.Шрифт.Жирный;
	//БанковскиеСчета.ОсновнаяТаблица
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.СделатьОсновным.
&НаКлиенте
Процедура КонтактныеЛицаУстановитьОсновным(Команда)
	Если Элементы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновноеКонтактноеЛицо = Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("ОсновноеКонтактноеЛицо",Объект.ОсновноеКонтактноеЛицо);
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.КоманднаяПанельДоговоры.
&НаКлиенте
Процедура ДоговорыУстановитьОсновным(Команда)
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.ДоговорыКонтрагентов.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДоговорыКонтрагентов.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;
	Объект.ОсновнойДоговорКонтрагента = Элементы.ДоговорыКонтрагентов.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора();
	ДоговорыКонтрагентов.Параметры.УстановитьЗначениеПараметра("ОсновнойДоговор",Объект.ОсновнойДоговорКонтрагента);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриВыводеСтроки элемента формы Договоры.
&НаКлиенте
Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	//Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И Объект.ОсновнойДоговорКонтрагента = ДанныеСтроки.Ссылка Тогда
	//	ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	//КонецЕсли;
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы БанковскиеСчета.
&НаКлиенте
Процедура БанковскиеСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	//Если ДанныеСтроки <> Неопределено Тогда
	//	СсылкаСтроки = ДанныеСтроки.Ссылка;
	//Иначе
	//	СсылкаСтроки = Неопределено;
	//КонецЕсли;
	//Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И Объект.ОсновнойБанковскийСчет = СсылкаСтроки Тогда
	//	ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	//КонецЕсли;
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
&НаКлиенте
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	ВидимостьПанелейЮрФизЛица();
	ОчиститьДанныеЮрИлиФИзЛица();
КонецПроцедуры
        
// Обработчик события ПриИзменении элемента формы Наименование.
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Формирование списка выбора.
	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);
	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.НаименованиеПолное);
	Если РезультатВыбора <> Неопределено Тогда
		Объект.НаименованиеПолное                   = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события ПриИзменении для ФизЛица.
&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ФизЛицоПриИзмененииНаСервере(Элемент,мФормироватьНаименованиеПолноеАвтоматически);
КонецПроцедуры

&НаСервере
Процедура ФизЛицоПриИзмененииНаСервере(Элемент,мФормироватьНаименованиеПолноеАвтоматически)
	// выберем данные о физлиц
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("парамФизЛицо", Объект.ФизЛицо);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Наименование,
	               |	ФизическиеЛица.РНН,
	               |	ФизическиеЛица.СИК,
	               |	ФизическиеЛица.ИдентификационныйКодЛичности,
	               |	ПаспортныеДанные.ДокументВид.Наименование КАК ДокументВид,
	               |	ПаспортныеДанные.ДокументСерия,
	               |	ПаспортныеДанные.ДокументНомер,
	               |	ПаспортныеДанные.ДокументДатаВыдачи,
	               |	ВЫРАЗИТЬ(ПаспортныеДанные.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
	               |	ФИОФизЛиц.Фамилия,
	               |	ФИОФизЛиц.Имя,
	               |	ФИОФизЛиц.Отчество
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&парамДатаАктуальности, ФизЛицо = &парамФизЛицо) КАК ПаспортныеДанные
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДатаАктуальности, ФизЛицо = &парамФизЛицо) КАК ФИОФизЛиц
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка = &парамФизЛицо";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование = Выборка.Наименование;
		КонецЕсли;
		Если мФормироватьНаименованиеПолноеАвтоматически
				И ЗначениеЗаполнено(Выборка.Фамилия) Тогда
			Объект.НаименованиеПолное = Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество;
		КонецЕсли;
		РНН 			= Выборка.РНН;
		СИК				= Выборка.СИК;
		Объект.ИдентификационныйКодЛичности = Выборка.ИдентификационныйКодЛичности;
		Если ЗначениеЗаполнено(Выборка.ДокументВид) Тогда
			Объект.ДокументУдостоверяющийЛичность = Выборка.ДокументВид;
			Если ЗначениеЗаполнено(Выборка.ДокументСерия) Тогда
				Объект.ДокументУдостоверяющийЛичность = Объект.ДокументУдостоверяющийЛичность + ", серия " + Выборка.ДокументСерия;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДокументНомер) Тогда
				Объект.ДокументУдостоверяющийЛичность = Объект.ДокументУдостоверяющийЛичность + ", № " + Выборка.ДокументНомер;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДокументДатаВыдачи) Тогда
				Объект.ДокументУдостоверяющийЛичность = объект.ДокументУдостоверяющийЛичность + ", " + Формат(Выборка.ДокументДатаВыдачи, "ДФ='дд.ММ.гггг'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДокументКемВыдан) Тогда
				Объект.ДокументУдостоверяющийЛичность = Объект.ДокументУдостоверяющийЛичность + ", " + Выборка.ДокументКемВыдан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// перенесем контактную информацию
	// составим соответствие видов контактной информации, относящейся к физлицам и к контрагентам
	ВидыКИ = Справочники.ВидыКонтактнойИнформации;
	СоответствиеВидовКИ = Новый Соответствие();
	СоответствиеВидовКИ.Вставить(ВидыКИ.ЮрАдресФизЛица, ВидыКИ.ЮрАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(ВидыКИ.ТелефонФизЛица, ВидыКИ.ТелефонКонтрагента);
	СоответствиеВидовКИ.Вставить(ВидыКИ.ФактАдресФизЛица, ВидыКИ.ФактАдресКонтрагента);
	СписокВидовКИ = Новый СписокЗначений;
	Для Каждого ВидКИ Из СоответствиеВидовКИ Цикл
		СписокВидовКИ.Добавить(ВидКИ.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("парамСписокВидовКИ", СписокВидовКИ);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КИ.*
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КИ
	|ГДЕ
	|	КИ.Объект = &парамФизЛицо
	|	И КИ.Вид В (&парамСписокВидовКИ)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		НаборКонтактнойИнформации.Очистить();
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборКонтактнойИнформации.Добавить();
			НоваяЗапись.Вид	= СоответствиеВидовКИ[Выборка.Вид];
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ФизЛицоПриИзменении()

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Не Отказ и Не Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
		//ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
		Форма = ПолучитьФорму("Справочник.БанковскиеСчета.ФормаОбъекта",ПараметрыОткрытия);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Договоры.
&НаКлиенте
Процедура ДоговорыКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Не Отказ и Не Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
		//ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
		Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",ПараметрыОткрытия);
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактныеЛица.
&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Не Отказ и Не Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ОбъектВладелец",Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ВидКонтактногоЛица",ПредопределенноеЗначение("Перечисление.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента"));
		Форма = ПолучитьФорму("Справочник.КонтактныеЛица.ФормаОбъекта",ПараметрыОткрытия);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементКонтактныеЛица()
	Возврат Справочники.КонтактныеЛица.СоздатьЭлемент();
КонецФункции

&НаСервере
Функция ПолучитьКонтактноеЛицоКонтрагента()
	Возврат Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
КонецФункции


&НаСервере
Функция КонтактныеЛицаПередНачаломДобавленияНаСервере(Отказ, Копирование, Родитель, ЭтоГруппа)
КонецФункции

// Обработчик события ПередОкончаниемРедактирования элемента формы Договоры.
&НаКлиенте
Процедура ДоговорыКонтрагентовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
		Объект.ОсновнойДоговорКонтрагента = Элемент.ТекущаяСтрока.Ссылка;
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы Договоры.
&НаКлиенте
Процедура ДоговорыКонтрагентовПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора();
КонецПроцедуры
 
// Обработчик события ПриАктивизацииСтроки элемента формы КонтактныеЛица.
&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	ПодключитьОбработчикОжидания("ОбновитьТелефоныКонтактногоЛица",0.1,Истина);
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтактныеЛица/Обновить.
&НаКлиенте
Процедура КонтактныеЛицаОбновить(Команда)
	//КонтактныеЛицаОбновить();
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("КонтрагентСсылка",Объект.Ссылка);
	ОбновитьТелефоныКонтактногоЛица();
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактныеЛица.
&НаКлиенте
Процедура КонтактныеЛицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) И ДанныеСтроки.Ссылка = Объект.ОсновноеКонтактноеЛицо Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
КонецПроцедуры


// Обработчик события Нажате кнопки КнопкаПроверкиБИН.
&НаКлиенте
Процедура КнопкаПроверкиБИННажатие(Элемент)
	ПрисутствиеОшибок = ПроверкаДубликатовКонтрагента(Истина,глТекущийПользователь);
	Если куфиб_ОбщегоНазначения.БИНИИНСоответствуетТребованиям(Объект.ИдентификационныйКодЛичности) Тогда
		Если НЕ ПрисутствиеОшибок Тогда 
			Предупреждение("Введенный БИН/ИИН корректен!");
		Иначе
			Предупреждение("Введенный БИН/ИИН не корректен!");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриИзменении для РНН1.
&НаКлиенте
Процедура РНН1ПриИзменении(Элемент)
	ПроверкаДубликатовКонтрагента(,глТекущийПользователь);
КонецПроцедуры

// Обработчик события ПриИзменении для ИдентификационныйКодЛичности1.
&НаКлиенте
Процедура ИдентификационныйКодЛичности1ПриИзменении(Элемент)
	ПроверкаДубликатовКонтрагента(,глТекущийПользователь);
КонецПроцедуры

// Обработчик события ПриИзменении для РНН.
&НаКлиенте
Процедура РННПриИзменении(Элемент)
	ПроверкаДубликатовКонтрагента(,глТекущийПользователь);
КонецПроцедуры

// Обработчик события ПриИзменении для ИдентификационныйКодЛичности.
&НаКлиенте
Процедура ИдентификационныйКодЛичностиПриИзменении(Элемент)
	ПроверкаДубликатовКонтрагента(,глТекущийПользователь);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
&НаКлиенте
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
&НаКлиенте
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
&НаКлиенте
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КонтактнаяИнформацияПредставлениеНачалоВыбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбораНаСервере()
	Обработки.общ_РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(Элементы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
&НаКлиенте
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
&НаКлиенте
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	куфиб_УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Элементы.КонтактнаяИнформация.ТекущиеДанные.Тип, куфиб_УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект.Ссылка));
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
&НаКлиенте
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = СправочникиВидыКонтактнойИнформацииПустаяСсылка();
	КонецЕсли; 
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
КонецПроцедуры

&НаСервере
Функция СправочникиВидыКонтактнойИнформацииПустаяСсылка()
	Возврат Справочники.ВидыКонтактнойИнформации.ПустаяСсылка()
КонецФункции

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
&НаКлиенте
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	куфиб_РаботаСДиалогами.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Элементы.КонтактнаяИнформация.ТекущиеДанные.Тип, куфиб_УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект.Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
&НаКлиенте
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	//куфиб_РаботаСДиалогами.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Элементы.КонтактнаяИнформация.ТекущиеДанные.Тип, куфиб_УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект.Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
&НаКлиенте
Процедура КонтактнаяИнформацияУстановитьОсновным(Команда)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, Элементы.КонтактнаяИнформация, Элементы.КонтактнаяИнформацияСделатьОсновным);	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
&НаКлиенте
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, Элементы.КонтактнаяИнформацияСделатьОсновным);
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
&НаКлиенте
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	куфиб_УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПередНачаломДобавленияОбработкаДоступностиЭлементовОбщее(Отказ, Элемент, Объект.Ссылка, Копирование, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка)
КонецПроцедуры


// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
 	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Объект.Ссылка,Элемент, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка, ложь,,Ложь)
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ФизЛицо.Видимость = Ложь;
	Элементы.ЮрЛицо.Видимость = Истина;
	ВидимостьПанелейЮрФизЛица();
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Параметры.ЗначениеКопирования);
	Иначе
		НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка));
	КонецЕсли; 
	
	//Элементы оформления
	оф_СведенияОРезидентствеКонтрагентаЗаголовок = "Сведения о резидентстве контрагента";
	оф_СвидетельствоОПостановкеНаУчетПоНДС = "Свидетельство о постановке на учет по НДС";
	оф_КонтактнаяИнформацияЗаголовок = "Контактная информация";
	оф_КонтактныеЛицаЗаголовок = "Контактные лица";
	оф_БанковскиеСчетаЗаголовок = "Банковские счета";
	оф_ДоговорыКонтрагентовЗаголовок = "Договоры контрагентов";
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКИВДиалоге(Команда)
	Если Элементы.КнопкаРедактироватьКИВДиалоге.Пометка тогда
		Элементы.КнопкаРедактироватьКИВДиалоге.Пометка=Ложь;
	Иначе
		Элементы.КнопкаРедактироватьКИВДиалоге.Пометка=Истина;
	КонецЕсли;
	РедактироватьКИВДиалоге = Элементы.КнопкаРедактироватьКИВДиалоге.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение)
	НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ЗаписьКИВРегистр(ВыбранноеЗначение,НаборКонтактнойИнформации));
КонецПроцедуры


&НаКлиенте
Процедура КонтактныеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	а=34;
КонецПроцедуры


&НаКлиенте
Процедура НаборКонтактнойИнформацииПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Ложь, Объект.Ссылка,Элементы.КонтактнаяИнформация, Истина, ложь,,Ложь);
КонецПроцедуры


&НаКлиенте
Процедура НаборКонтактнойИнформацииПредставлениеПриИзменении(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, Элементы.КонтактнаяИнформация);
КонецПроцедуры

