#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьНастройкиПоИсточнику(Объект,ДополнительныеОтборы=Неопределено,ПараметрыЗапроса=Неопределено,ПостроительОтчета=Неопределено,Перезаполнение = Ложь,ПерезаполнятьТолькоТекстЗапроса=Ложь)  Экспорт
	
	ТекущийОбъектЗаполнения = Объект;
	
	Если ПостроительОтчета = Неопределено Тогда
		ПостроительОтчета = Новый ПостроительОтчета();
	КонецЕсли;
	
	ПредставлениеРегистра 	= ТекущийОбъектЗаполнения.ПредставлениеРегистра;
	ИмяРегистра 			= ТекущийОбъектЗаполнения.ИмяРегистра;
	Показатели				= ТекущийОбъектЗаполнения.Показатели;

	//Очистим отбор
	Сч=0;
	Пока Сч<ПостроительОтчета.Отбор.Количество() Цикл
		ПостроительОтчета.Отбор.Удалить(Сч);
		Сч=Сч+1;
	КонецЦикла;
	
	Если Перезаполнение И ДополнительныеОтборы<>Неопределено И НЕ ПерезаполнятьТолькоТекстЗапроса Тогда
		ДополнительныеОтборы.Очистить();
	КонецЕсли;
	
	Сч=0;
	Пока Сч<ПостроительОтчета.ДоступныеПоля.Количество() Цикл
		
		Поле=ПостроительОтчета.ДоступныеПоля[Сч];
		ПостроительОтчета.ДоступныеПоля.Удалить(Поле);
		
	КонецЦикла;
	
	МассивОтбора = Новый Массив;
	
	ДобавитьПоляРегистра(ТекущийОбъектЗаполнения,МассивОтбора);			
	
	ТекстПоказатели="";
	ТекстИзмерения="";
	
	Для Каждого Показатель Из Показатели Цикл
		
		ТекстПоказатели=ТекстПоказатели+", 
		|СУММА("+Показатель.Имя+") КАК "+Показатель.Имя; 
		
	КонецЦикла; 
	
	Для Каждого Элемент Из МассивОтбора Цикл
		
		ТекстИзмерения=ТекстИзмерения+", 
		|"+Элемент+".* КАК "+Элемент;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ТекущийОбъектЗаполнения.ИзмеренияИсточника Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		ТекстИзмерения=ТекстИзмерения+", 
		|"+Элемент.ПутьКДанным+".* КАК "+Элемент.ИмяПоляИсточника;
		
	КонецЦикла;
	
	
	Если Найти(ИмяРегистра,"Обороты")>0 ИЛИ Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
		ТекстИзмерения=ТекстИзмерения+",
		|Период";
	ИначеЕсли Найти(ПредставлениеРегистра,"движения:")>0 Тогда
		ТекстИзмерения=ТекстИзмерения+",
		|НачалоПериода(Период,День) КАК Период";
	ИначеЕсли Найти(ИмяРегистра,"&МоментВремени")>0 Тогда
		ТекстИзмерения=ТекстИзмерения+",
		|&МоментВремени КАК Период";
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ ";
	
	ТекстЗапроса=ТекстЗапроса+Сред(ТекстПоказатели,2);
	ТекстЗапроса=ТекстЗапроса+"
	|{ВЫБРАТЬ "+Сред(ТекстИзмерения,2)+"}
	|ИЗ
	|"+ИмяРегистра+" КАК ТаблицаРегистра";
	Если Найти(ПредставлениеРегистра,"движения:")>0 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ (ТаблицаРегистра.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|И (ТаблицаРегистра.Активность=Истина)";
		Если Найти(ПредставлениеРегистра,"движения: оборот")=0 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|И (ТаблицаРегистра.ВидДвижения=&ВидДвижения)";
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"		
	|{ГДЕ "+Сред(ТекстИзмерения,2)+"}";
	
	ПостроительОтчета.Текст=ТекстЗапроса;
	ПостроительОтчета.ЗаполнитьНастройки();
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	Для Каждого СтрокаИзмерение Из ТекущийОбъектЗаполнения.ИзмеренияИсточника Цикл
		Если ЗначениеЗаполнено(СтрокаИзмерение.ПутьКДанным) Тогда
			ПолеПостроителя = ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаИзмерение.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из ТекущийОбъектЗаполнения.Показатели Цикл
		Если СтрокаПоказатель.Использование Тогда
			ПолеПостроителя = ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаПоказатель.Имя,СтрокаПоказатель.Имя);
			ПолеПостроителя.Представление = СтрокаПоказатель.Представление;
		КонецЕсли;
	КонецЦикла;
	
	
	Если Найти(ПредставлениеРегистра,"движения: приход")>0 Тогда
		
		ПостроительОтчета.Параметры.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
		
	ИначеЕсли Найти(ПредставлениеРегистра,"движения: расход")>0 Тогда
		
		ПостроительОтчета.Параметры.Вставить("ВидДвижения",ВидДвиженияНакопления.Расход);
		
	КонецЕсли; 
		
	Если Перезаполнение И ПараметрыЗапроса<>Неопределено И НЕ ПерезаполнятьТолькоТекстЗапроса Тогда
		
		ПараметрыЗапроса.Очистить();
	
		Если Найти(ПредставлениеРегистра,"движения: приход")>0 Тогда
			
			НС = ПараметрыЗапроса.Добавить();
			НС.ИмяПараметра 		= "ВидДвижения";
			НС.ЗначениеПараметра 	= ВидДвиженияНакопления.Приход;
			
		ИначеЕсли Найти(ПредставлениеРегистра,"движения: расход")>0 Тогда
			
			НС = ПараметрыЗапроса.Добавить();
			НС.ИмяПараметра 		= "ВидДвижения";
			НС.ЗначениеПараметра 	= ВидДвиженияНакопления.Расход;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Для Каждого Элемент Из МассивОтбора Цикл
		
		ПолеОтчета=ПостроительОтчета.ДоступныеПоля[Элемент];
		ПолеОтчета.Отбор=Истина;
		
	КонецЦикла;
	
	Если Перезаполнение Тогда
		//ТекущийОбъектЗаполнения.ТекстЗапроса = ПостроительОтчета.ПолучитьЗапрос().Текст;
		ТекущийОбъектЗаполнения.ТекстЗапроса = ПостроительОтчета.Текст;
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьНастройкиПоИсточнику()


// Процедура заполняет таблицу показателей источника
// Параметры
//  Регистр (строка) - имя регистра в метаданных
//  ТаблицаРегистра (строка) - тип таблицы регистра 
//
Процедура ДобавитьПоляРегистра(Объект,МассивОтбора)
	
	ПредставлениеРегистра 	= Объект.ПредставлениеРегистра;
	ИмяРегистра 			= Объект.ИмяРегистра;
	Показатели				= Объект.Показатели;
	ДатыОтбораДанныхИсточника = Объект.ДатыОтбораДанныхИсточника;

    ВидРегистраПоМетаданным=Лев(ИмяРегистра,Найти(ИмяРегистра,".")-1);

	ТаблицаРегистра=СтрЗаменить(ИмяРегистра,ВидРегистраПоМетаданным+".","");
	
	Сч=Найти(ТаблицаРегистра,".");
	Периодический=Истина;

	Если Сч>0 Тогда	
		ИмяРегистраПоМетаданным=Лев(ТаблицаРегистра,Сч-1);
	ИначеЕсли Найти(ПредставлениеРегистра,"движения:")>0 Тогда
		ИмяРегистраПоМетаданным=ТаблицаРегистра;
	Иначе
		ИмяРегистраПоМетаданным=ТаблицаРегистра;
		Периодический=Ложь;  // Непериодический регистр сведений.
	КонецЕсли;

	МетаданныеРегистр=Метаданные[СтрЗаменить(ВидРегистраПоМетаданным,"Регистр","Регистры")][ИмяРегистраПоМетаданным];

    // Добавляются показатели источника
	Если Показатели.Количество()=0 Тогда

	Для Каждого Ресурс Из МетаданныеРегистр.Ресурсы Цикл

		Если Найти(ИмяРегистра,"РегистрБухгалтерии")>0 Тогда

			Если Найти(ПредставлениеРегистра,": обороты с корреспонденцией")>0  Тогда
											
				Если НЕ Ресурс.ПризнакУчета=Неопределено Тогда
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
					НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
					НовыйПоказатель.Использование=Истина;
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
					НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
					НовыйПоказатель.Использование=Истина;
					
				Иначе
					
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
		
				КонецЕсли;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки и обороты")>0 Тогда

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстаток";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстатокДт";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
				НовыйПоказатель.Использование=Истина;

			
			ИначеЕсли Найти(ПредставлениеРегистра,": остатки")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"Остаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"РазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"РазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,": обороты")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
				
				Если НЕ Ресурс.ПризнакУчета=Неопределено Тогда
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": Дт";
					НовыйПоказатель.Имя=Ресурс.Имя+"Дт";
					НовыйПоказатель.Использование=Истина;
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": Кт";
					НовыйПоказатель.Имя=Ресурс.Имя+"Кт";
					НовыйПоказатель.Использование=Истина;
					
				Иначе
					
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя;
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
		
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли Найти(ИмяРегистра,"РегистрНакопления")>0 Тогда

			Если Найти(ПредставлениеРегистра,": обороты")  Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки и обороты")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": приход";
				НовыйПоказатель.Имя=Ресурс.Имя+"Приход";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": расход";
				НовыйПоказатель.Имя=Ресурс.Имя+"Расход";
				НовыйПоказатель.Использование=Истина;


				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстаток";
				НовыйПоказатель.Использование=Истина;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"Остаток";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: приход")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": приход";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: расход")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": расход";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: оборот")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
							
			КонецЕсли;

		ИначеЕсли Найти(ИмяРегистра,"РегистрСведений")>0 Тогда

			ТипыРесурса=Ресурс.Тип.Типы();

			Если ТипыРесурса.Количество() = 1 И ТипыРесурса[0]=Тип("Число") Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя;
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	КонецЕсли;

    //Добавляются границы отбора данных

	Если ДатыОтбораДанныхИсточника.Количество()=0 И Периодический Тогда

		Если Найти(ПредставлениеРегистра,"обороты")>0 ИЛИ Найти(ПредставлениеРегистра,"движения:")>0 
			ИЛИ Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="НачалоПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата начала отбора данных";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода;

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="КонецПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата конца отбора данных";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода;

		Иначе

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="МоментВремени";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата значения";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода;

		КонецЕсли;

	КонецЕсли;

	// Добавляются поля источника
    СписокПолей=Новый СписокЗначений;

	Для Каждого Измерение Из МетаданныеРегистр.Измерения Цикл

		Если ((Найти(ИмяРегистра,"ОборотыДтКт")>0) ИЛИ (Найти(ИмяРегистра,"ДвиженияССубконто")>0)) 
			
			//И(Не Измерение.ПризнакУчета=Неопределено) Тогда
			И(Не Измерение.Балансовый) Тогда
			
			СписокПолей.Добавить(Измерение.Имя+"Дт",Измерение.Синоним+" Дт");
			МассивОтбора.Добавить(Измерение.Имя+"Дт");
			
			СписокПолей.Добавить(Измерение.Имя+"Кт",Измерение.Синоним+" Кт");
			МассивОтбора.Добавить(Измерение.Имя+"Кт");
	
		Иначе
		
			СписокПолей.Добавить(Измерение.Имя,Измерение.Синоним);
			МассивОтбора.Добавить(Измерение.Имя);
		
		КонецЕсли;

	КонецЦикла;
	
	Если Найти(ПредставлениеРегистра,"движения:")>0 ИЛИ Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
		
		Для Каждого Реквизит Из МетаданныеРегистр.Реквизиты Цикл
			
			СписокПолей.Добавить(Реквизит.Имя,Реквизит.Синоним);
			МассивОтбора.Добавить(Реквизит.Имя);
			
		КонецЦикла;
		
		СписокПолей.Добавить("Регистратор","Регистратор");
		МассивОтбора.Добавить("Регистратор");
		
	КонецЕсли;	
	
	Если Найти(ИмяРегистра,"РегистрБухгалтерии")>0 Тогда
		
		Если (МетаданныеРегистр.Корреспонденция) 
			И ((Найти(ИмяРегистра,"ОборотыДтКт")>0) ИЛИ (Найти(ИмяРегистра,"ДвиженияССубконто")>0)) Тогда
			
			МассивОтбора.Добавить("СчетДт");
			МассивОтбора.Добавить("СчетКт");
			
			Для Индекс=1 По МетаданныеРегистр.ПланСчетов.МаксКоличествоСубконто Цикл
				
				МассивОтбора.Добавить("СубконтоДт"+Индекс);
				МассивОтбора.Добавить("СубконтоКт"+Индекс);
				
			КонецЦикла;
			
		Иначе
			
			МассивОтбора.Добавить("Счет");
			
			Для Индекс=1 По МетаданныеРегистр.ПланСчетов.МаксКоличествоСубконто Цикл
				
				МассивОтбора.Добавить("Субконто"+Индекс);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьПоляРегистра()



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

#КонецЕсли
