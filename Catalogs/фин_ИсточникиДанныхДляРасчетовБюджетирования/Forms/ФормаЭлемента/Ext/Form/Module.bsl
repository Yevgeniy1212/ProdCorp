
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.СправочникПриСозданииНаСервере(ЭтотОбъект);
	
	ВидыСравненияИнтервал.Добавить(ВидСравнения.Интервал);
	ВидыСравненияИнтервал.Добавить(ВидСравнения.ИнтервалВключаяГраницы);
	ВидыСравненияИнтервал.Добавить(ВидСравнения.ИнтервалВключаяНачало);
	ВидыСравненияИнтервал.Добавить(ВидСравнения.ИнтервалВключаяОкончание);

	ВидыСравненияСписок.Добавить(ВидСравнения.ВСписке);
	ВидыСравненияСписок.Добавить(ВидСравнения.ВСпискеПоИерархии);
	ВидыСравненияСписок.Добавить(ВидСравнения.НеВСписке);
	ВидыСравненияСписок.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	
	ПроизвольныйЗапрос = ?(Объект.ПроизвольныйЗапрос,1,0);
	ИмяРегистра 		= Объект.ИмяРегистра;
	ТекстЗапроса 		= Объект.ТекстЗапроса;
	
	ПостроительОтчета	= Новый ПостроительОтчета;

	Если (Не ИмяРегистра="") ИЛИ (ПроизвольныйЗапрос И ТекстЗапроса<>"") Тогда
		
		Если ПроизвольныйЗапрос Тогда
			
			ПостроительОтчета.Текст=ТекстЗапроса;
			ПостроительОтчета.ЗаполнитьНастройки();
			
		Иначе
			
			Попытка
				ЗаполнитьНастройкиПоИсточнику(ПостроительОтчета);
				ПостроительОтчета.ЗаполнитьНастройки();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		мОбъект = РеквизитФормыВЗначение("Объект");
		
		СохраненнаяНастройка = ?(ЗначениеЗаполнено(Параметры.ЗначениеКопирования),Параметры.ЗначениеКопирования.НастройкиПостроителя.Получить(),мОбъект.НастройкиПостроителя.Получить());
		
		Если ТипЗнч(СохраненнаяНастройка)=Тип("Структура") И ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
			
			ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
			
			Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
				
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
				
				Если ПроизвольныйЗапрос Тогда
					
					СтрокаПараметр						= ПараметрыЗапроса.Добавить();
					СтрокаПараметр.ИмяПараметра			= Параметр.Ключ;
					СтрокаПараметр.ЗначениеПараметра	= Параметр.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Отбор Из ПостроительОтчета.Отбор Цикл
				 НС = ДополнительныеОтборы.Добавить();
				 ЗаполнитьЗначенияСвойств(НС,Отбор);
				 НС.Имя = Отбор.ПутьКДанным;
				 НС.ОписаниеТиповПоля = Отбор.ТипЗначения;
				НС.ЭтоИнтервал 	= ВидыСравненияИнтервал.НайтиПоЗначению(НС.ВидСравнения)<>Неопределено;
				НС.ЭтоСписок 	= ВидыСравненияСписок.НайтиПоЗначению(НС.ВидСравнения)<>Неопределено;
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЕсли;
	ПолеЗапроса.УстановитьТекст(ТекстЗапроса);
	
	СписокВыбора = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
    СписокВыбора.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий);
    СписокВыбора.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта);
    СписокВыбора.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация);
    СписокВыбора.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель);
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		ЭлементСписка.Представление = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(ЭлементСписка.Значение);
	КонецЦикла;
    СписокВыбора.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования);
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.фин_КорреспондирующиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Соответствующий = Перечисления.фин_ФактическиеПоказателиБюджетирования[Сред(ЗначениеПеречисления.Имя,1,Найти(ЗначениеПеречисления.Имя,"Кор")-1)];
		Если Найти(ЗначениеПеречисления.Имя,"Разрез")<>0 И СписокВыбора.НайтиПоЗначению(Соответствующий)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
   		СписокВыбора.Добавить(Перечисления.фин_КорреспондирующиеПоказателиБюджетирования[ЗначениеПеречисления.Имя],"Кор. "+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Соответствующий));
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		СписокИзмерений.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	КонецЦикла;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("БезПроверки") ИЛИ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаНаИспользование(Объект.Ссылка);
	
	Если РезультатПроверки<>"" Тогда
		Отказ = Истина;
		ОписаниеОповещенияОСогласии = Новый ОписаниеОповещения("ОписаниеОповещенияОСогласииНаЗапись",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОСогласии,РезультатПроверки,РежимДиалогаВопрос.ДаНет,180);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ТекстЗапроса = ПолеЗапроса.ПолучитьТекст();
	Если ТекущийОбъект.ТекстЗапроса = "" Тогда
		Возврат;
	КонецЕсли;
	ПостроительОтчета = Новый ПостроительОтчета(ТекущийОбъект.ТекстЗапроса);
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		Попытка
			ЗаполнитьНастройкиПоИсточнику(ПостроительОтчета,Истина,ТекущийОбъект,Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ПостроительОтчета.ЗаполнитьНастройки();
	ПеренестиДополнительныеОтборыВПостроитель(ПостроительОтчета);	
	СтруктураНастройки=Новый Структура;
	СтруктураНастройки.Вставить("НастройкиПостроителя",ПостроительОтчета.ПолучитьНастройки(Истина,Ложь,Истина,Истина));
	
	Если ТекущийОбъект.ПроизвольныйЗапрос Тогда
		
		ПостроительОтчета.Параметры.Очистить();
		
		Для Каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
			
			ПостроительОтчета.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли;
		
	СтруктураНастройки.Вставить("ПараметрыПостроителя",	ПостроительОтчета.Параметры);
	ХранилищеДанных  			= Новый ХранилищеЗначения(СтруктураНастройки);
	ТекущийОбъект.НастройкиПостроителя = ХранилищеДанных;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПроизвольныйЗапросПриИзменении(Элемент)
	ТекстВопроса="При смене режима редактирования текущие настройки будут утеряны.
	|Продолжить?";
	
	ОписаниеОповещенияИзменениеПроизвольногоЗапроса = Новый ОписаниеОповещения("ОбработчикОповещенияИзменениеПроизвольногоЗапроса",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияИзменениеПроизвольногоЗапроса,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.Форма.ФормаВыбораРегистра",,Элемент,,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРегистраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено ИЛИ ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранноеЗначение.Регистр="" Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяРегистра				= ВыбранноеЗначение.Регистр;
	Объект.ПредставлениеРегистра	= ВыбранноеЗначение.ПредставлениеПоля;
	
	Если Объект.Наименование="" Тогда
		Объект.Наименование			= Объект.ПредставлениеРегистра;
	КонецЕсли;
	
	Объект.ДатыОтбораДанныхИсточника.Очистить();
	Объект.Показатели.Очистить();
	Объект.ИзмеренияИсточника.Очистить();
	
	Если Найти(Объект.ИмяРегистра,"РегистрНакопления.фин_ОборотыБюджетов.Обороты")<>0 Тогда
		Объект.ИмяРегистра = "РегистрНакопления.фин_ОборотыБюджетов.Обороты(,,День,ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода)";
	КонецЕсли;
	ПредставлениеРегистраОбработкаВыбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПредставлениеРегистраОбработкаВыбораНаСервере()
	ЗаполнитьНастройкиПоИсточнику(,Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ИзмеренияИсточника

&НаКлиенте
Процедура ИзмеренияИсточникаИмяПоляИсточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.фин_ВыборПоляЗапроса",Новый Структура("ТекстЗапроса,ВидПоля",ПолучитьТекстПостроителя(),"Поле"),Элемент,,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияИсточникаИзмерениеБюджетированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокИзмерений;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Показатели

&НаКлиенте
Процедура ПоказателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.фин_ВыборПоляЗапроса",Новый Структура("ТекстЗапроса,ВидПоля",Объект.ТекстЗапроса,"Поле"),Элемент,,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ДополнительныеОтборы

&НаКлиенте
Процедура ДополнительныеОтборыИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.фин_ВыборПоляЗапроса",Новый Структура("ТекстЗапроса,ВидПоля",ПолучитьТекстПостроителя(),"Отбор"),Элемент,,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборыИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные 	= Элементы.ДополнительныеОтборы.ТекущиеДанные;
	ПустоеЗначение 	= Неопределено;
	ИмяПоля			= ТекущиеДанные.Имя;
	ОписаниеТипов	= Новый ОписаниеТипов;
	ДополнительныеОтборыИмяОбработкаВыбораНаСервере(Объект.ТекстЗапроса,ВыбранноеЗначение,ПустоеЗначение,ОписаниеТипов);
	ТекущиеДанные.Значение 			= ПустоеЗначение;
	ТекущиеДанные.ОписаниеТиповПоля	= ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),ОписаниеТипов);
	Элементы.ДополнительныеОтборыЗначение.ОграничениеТипа = ОписаниеТипов;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ДополнительныеОтборы.ТекущиеДанные;
	Если ТекущиеДанные.ОписаниеТиповПоля.Типы().Количество()>0 Тогда
		Элементы.ДополнительныеОтборыЗначение.ОграничениеТипа 	= ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),ТекущиеДанные.ОписаниеТиповПоля);
		Элементы.ДополнительныеОтборыЗначениеС.ОграничениеТипа 	= ТекущиеДанные.ОписаниеТиповПоля;
		Элементы.ДополнительныеОтборыЗначениеПо.ОграничениеТипа	= ТекущиеДанные.ОписаниеТиповПоля;
	Иначе
		Элементы.ДополнительныеОтборыЗначение.ОграничениеТипа 	= ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),Новый ОписаниеТипов);
		Элементы.ДополнительныеОтборыЗначениеС.ОграничениеТипа 	= Новый ОписаниеТипов;
		Элементы.ДополнительныеОтборыЗначениеПо.ОграничениеТипа	= Новый ОписаниеТипов;
	КонецЕсли;
КонецПроцедуры
	
	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Проверить(Команда)
	РезультатПроверки = ПроверитьНаСервере();
	Если ТипЗнч(РезультатПроверки)=Тип("Строка") И РезультатПроверки<>"" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки);
		ПоказатьПредупреждение(,"Проверка выполнена с ошибками!",60);
	Иначе
		РезультатПроверки.Показать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытияКонструктора(Текст,ДополнительныеПараметры) Экспорт
	Если Текст<>Неопределено Тогда
		ПолеЗапроса.УстановитьТекст(Текст);
		
		// проверка и принятие
		РезультатПроверки = ПроверкаТекстаЗапроса();
		
		Если РезультатПроверки<>"" Тогда
			ПоказатьПредупреждение(,РезультатПроверки);	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	// проверка и принятие
	РезультатПроверки = ПроверкаТекстаЗапроса();
	
	Если РезультатПроверки<>"" Тогда
		ПоказатьПредупреждение(,РезультатПроверки);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыЗапроса(Команда)
	ЗаполнитьПараметрыЗапросаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	ТекстЗапросаКонструктор = ПолеЗапроса.ПолучитьТекст();
	КонструкторЗапроса = Новый КонструкторЗапроса();
//	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	Попытка
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ТекстЗапросаКонструктор;
		КонецЕсли;
		
		ОписаниеОповещенияЗакрытияКонструктора = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияКонструктора",ЭтотОбъект);
		
		КонструкторЗапроса.Показать(ОписаниеОповещенияЗакрытияКонструктора);
		
	Исключение
        ПоказатьПредупреждение(,ОписаниеОшибки(),120);
	КонецПопытки;
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Элементы.ДатыОтбораДанныхИсточникаПериодСмещения.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.Фин_Периодичность");
	
	УправлениеФормой(ЭтотОбъект);
	
	// настройка условного оформления
	
	НастроитьПредставлениеРазрезов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеРазрезов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить().Выбрать();
	
	//УсловноеОформление.Элементы.Очистить();
	
	Пока Результат.Следующий() Цикл
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 							= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 				= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 			= Результат.Измерение;
		ОтборЭлемент.ЛевоеЗначение 				= Новый ПолеКомпоновкиДанных("Объект.ИзмеренияИсточника.ИзмерениеБюджетирования");
		ПолеОформления 							= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование			= Истина;
		ПолеОформления.Поле						= Новый ПолеКомпоновкиДанных("ИзмеренияИсточникаИзмерениеБюджетирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Результат.Измерение));
		
		НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование	= Истина;
		ОтборЭлемент 							= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения 				= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 			= Перечисления.фин_КорреспондирующиеПоказателиБюджетирования[фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Результат.Измерение)+"Кор"];
		ОтборЭлемент.ЛевоеЗначение 				= Новый ПолеКомпоновкиДанных("Объект.ИзмеренияИсточника.ИзмерениеБюджетирования");
		ПолеОформления 							= НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование			= Истина;
		ПолеОформления.Поле						= Новый ПолеКомпоновкиДанных("ИзмеренияИсточникаИзмерениеБюджетирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст","Кор: "+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Результат.Измерение));
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// установка видимости и доступности элементов в зависимости от значений реквизитов
	
	Элементы.ГруппаЗапрос.Видимость 									= Объект.ПроизвольныйЗапрос;
	Элементы.ПредставлениеРегистра.Видимость							= НЕ Объект.ПроизвольныйЗапрос;
	Элементы.Показатели.ИзменятьСоставСтрок 							= Объект.ПроизвольныйЗапрос;
	Элементы.ДатыОтбораДанныхИсточника.ИзменятьСоставСтрок				= Объект.ПроизвольныйЗапрос;
	Элементы.ДатыОтбораДанныхИсточникаИмяДатаГраницы.Видимость			= Объект.ПроизвольныйЗапрос;
	Элементы.ПоказателиПредставление.КнопкаВыбора 						= Объект.ПроизвольныйЗапрос;		
	
	
КонецПроцедуры


// Процедура заполняет настройки построителя и табличные части справочника в соответствии с
// выбранным источником
//
&НаСервере
Процедура ЗаполнитьНастройкиПоИсточнику(ПостроительОтчета=Неопределено,Перезаполнение = Ложь,ОбъектЗаполнения = Неопределено,ПерезаполнятьТолькоТекстЗапроса = Ложь)
	
	ТекущийОбъектЗаполнения = ?(ОбъектЗаполнения = Неопределено,Объект,ОбъектЗаполнения);
	
	Если ПостроительОтчета = Неопределено Тогда
		ПостроительОтчета = Новый ПостроительОтчета();
	КонецЕсли;
	
	Попытка
		Справочники.фин_ИсточникиДанныхДляРасчетовБюджетирования.ЗаполнитьНастройкиПоИсточнику(ТекущийОбъектЗаполнения,ДополнительныеОтборы,ПараметрыЗапроса,ПостроительОтчета,Перезаполнение,ПерезаполнятьТолькоТекстЗапроса);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
	КонецПопытки;
	
	Если Перезаполнение Тогда
		ПолеЗапроса.УстановитьТекст(ТекущийОбъектЗаполнения.ТекстЗапроса);
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьНастройкиПоИсточнику()
 
&НаСервере
Функция ПолучитьТекстПостроителя()
	ПостроительПроверка=Новый ПостроительОтчета;
	Попытка
		ПостроительПроверка.Текст=ПолеЗапроса.ПолучитьТекст();
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если (НЕ Объект.ПроизвольныйЗапрос) И Найти(ВРЕГ(ПостроительПроверка.Текст),"НАЧАЛОПЕРИОДА(")=0 Тогда
		ПостроительПроверка.Текст=СтрЗаменить(ПостроительПроверка.Текст,"День","");
	КонецЕсли;
	
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		Попытка	
			ЗаполнитьНастройкиПоИсточнику(ПостроительПроверка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	Возврат ПостроительПроверка.Текст;
КонецФункции

&НаКлиенте
Процедура ОписаниеОповещенияОСогласииНаЗапись(Результат,ДополнительныеПараметры)  Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записать(Новый Структура("БезПроверки",Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаИспользование(ТекущийОбъект)
    // Проверка на то, что источник был использован в расчетах
    //
    Запрос=Новый Запрос;
    Запрос.Текст= "ВЫБРАТЬ
    |	""Элемент справочника " + """" + """" + "Статьи оборотов по бюджетам" + """" + """" + """ КАК ПредставлениеОбъекта,
    |	ФинансовыеПоказатели.Представление КАК Представление
    |ИЗ
    |	Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
    |
    |ГДЕ
    |	(ФинансовыеПоказатели.ИсточникДанныхДляЦены = &Ссылка)
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	""Элемент справочника " + """" + """" + "Профили изменения планов по измерениям" + """" + """" + """ КАК ПредставлениеОбъекта,
    |	ПрофилиИзмененияПлановПоИзмерениям.Представление КАК Представление
    |ИЗ
    |	Справочник.фин_ПрофилиИзмененияПлановПоИзмерениям КАК ПрофилиИзмененияПлановПоИзмерениям
    |
    |ГДЕ
    |	ПрофилиИзмененияПлановПоИзмерениям.ИсточникДанных = &Ссылка
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	""Запись регистра сведений " + """" + """" + "Правила отложенного сбора фактических данных" + """" + """" + """ КАК ПредставлениеОбъекта,
    |	ПравилаОтложенногоСбораФактическихДанных.ФинансовыйПоказатель КАК Представление
    |ИЗ
    |	РегистрСведений.фин_ПравилаОтложенногоСбораФактическихДанных КАК ПравилаОтложенногоСбораФактическихДанных
    |
    |ГДЕ
    |	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка",ТекущийОбъект);
    Проверка=Запрос.Выполнить();
    Если НЕ Проверка.Пустой() Тогда
    				
    	ТекстВопроса="Попытка изменения источника данных, используемого в следующих объектах: ";
    	
    	Результат=Проверка.Выбрать();
    	Пока Результат.Следующий() Цикл
    		ТекстВопроса=ТекстВопроса+Символы.ПС+(СокрЛП("" + Результат.ПредставлениеОбъекта + ": " + Результат.Представление));
    	КонецЦикла;
    	
    	ТекстВопроса=ТекстВопроса+"
    	|Продолжить?";
    	
		Возврат ТекстВопроса;
		
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ПеренестиДополнительныеОтборыВПостроитель(Построитель)
	Для Каждого СтрокаОтборов Из ДополнительныеОтборы Цикл
		НС = Построитель.Отбор.Добавить(СтрокаОтборов.Имя);
//		НС.Представление 	= СтрокаОтборов.Представление;
		НС.Использование 	= СтрокаОтборов.Использование;
		НС.ВидСравнения 	= СтрокаОтборов.ВидСравнения;
		НС.Значение 		= ?(ВидыСравненияСписок.НайтиПоЗначению(НС.ВидСравнения)=Неопределено,НС.ТипЗначения,Новый ОписаниеТипов("СписокЗначений")).ПривестиЗначение(СтрокаОтборов.Значение);
		НС.ЗначениеС 		= НС.ТипЗначения.ПривестиЗначение(СтрокаОтборов.ЗначениеС);
		НС.ЗначениеПо 		= НС.ТипЗначения.ПривестиЗначение(СтрокаОтборов.ЗначениеПо);
//		НС.ПутьКДанным 		= СтрокаОтборов.Имя;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция  ПроверитьНаСервере()
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроительПроверка=Новый ПостроительОтчета;
	Попытка
		ПостроительПроверка.Текст=ПолеЗапроса.ПолучитьТекст();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Если (НЕ Объект.ПроизвольныйЗапрос) И Найти(ВРЕГ(ПостроительПроверка.Текст),"НАЧАЛОПЕРИОДА(")=0 Тогда
		ПостроительПроверка.Текст=СтрЗаменить(ПостроительПроверка.Текст,"День","");
	КонецЕсли;
	
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		Попытка	
			ЗаполнитьНастройкиПоИсточнику(ПостроительПроверка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	//Для Каждого СтрокаОтборов Из ДополнительныеОтборы Цикл
	//	Если ПостроительПроверка.ДоступныеПоля.Найти(СтрокаОтборов.Имя)=Неопределено Тогда
	//		ПостроительПроверка.ДоступныеПоля.Добавить(СтрокаОтборов.Имя,СтрокаОтборов.Имя);
	//	КонецЕсли;
	//КонецЦикла;
	
	ПостроительПроверка.ЗаполнитьНастройки();
	ПостроительПроверка.ВыбранныеПоля.Очистить();
	Для Каждого СтрокаИзмерение Из Объект.ИзмеренияИсточника Цикл
		ПолеПостроителя = ПостроительПроверка.ВыбранныеПоля.Добавить(СтрокаИзмерение.ПутьКДанным);
	КонецЦикла;
	Для Каждого СтрокаПоказатель Из Объект.Показатели Цикл
		Если СтрокаПоказатель.Использование Тогда
			ПолеПостроителя = ПостроительПроверка.ВыбранныеПоля.Добавить(СтрокаПоказатель.Имя,СтрокаПоказатель.Имя);
			ПолеПостроителя.Представление = СтрокаПоказатель.Представление;
		КонецЕсли;
	КонецЦикла;

	ПеренестиДополнительныеОтборыВПостроитель(ПостроительПроверка);	
	
	Если Объект.ПроизвольныйЗапрос Тогда
		
		Для Каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
			УстанавливаемоеЗначение = СтрокаПараметров.ЗначениеПараметра;
			Если УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДокументРегистратор Тогда
				УстанавливаемоеЗначение = Документы.фин_Бюджет.ПустаяСсылка();
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.НачалоПлановогоПериода Тогда
				УстанавливаемоеЗначение = '00010101';
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ОкончаниеПлановогоПериода Тогда
				УстанавливаемоеЗначение = ТекущаяДата();
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.Организация Тогда
				УстанавливаемоеЗначение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.СценарийРасчета Тогда
				УстанавливаемоеЗначение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПроектРасчета Тогда
				УстанавливаемоеЗначение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект");
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПодразделениеРасчета Тогда
				УстанавливаемоеЗначение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение");
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДатаРасчета Тогда
				УстанавливаемоеЗначение = ТекущаяДата();
			КонецЕсли;
			
			ПостроительПроверка.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, УстанавливаемоеЗначение);
			
		КонецЦикла;
		
	//Иначе
	//	
	//	Для Каждого Параметр Из ПостроительОтчета.Параметры Цикл
	//		
	//		ПостроительПроверка.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
	//		
	//	КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Граница Из Объект.ДатыОтбораДанныхИсточника Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Перечисления.фин_Периодичность.Месяц);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущаяДата(),Перечисления.фин_Периодичность.Месяц);
		КонецЕсли;
		
		Если НЕ Граница.СдвигВПериодах=0 Тогда
			
			НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
			
		КонецЕсли;
		
		ПостроительПроверка.Параметры.Вставить(Граница.ИмяДатаГраницы,НачальнаяДатаГраницы);
		
	КонецЦикла;
	ТабличныйДокумент.Очистить();
	Попытка
		ПостроительПроверка.Выполнить(); 
		ПостроительПроверка.Вывести(ТабличныйДокумент);
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Возврат ТабличныйДокумент;
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияИзменениеПроизвольногоЗапроса(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность=Истина;
		Объект.ПроизвольныйЗапрос = ПроизвольныйЗапрос=1;
		
		Объект.Показатели.Очистить();
		Объект.ИзмеренияИсточника.Очистить();
		Объект.ДатыОтбораДанныхИсточника.Очистить();
		ПараметрыЗапроса.Очистить();
		ДополнительныеОтборы.Очистить();
		
		Если Объект.ПроизвольныйЗапрос Тогда
			Объект.ПредставлениеРегистра="";
			Объект.ИмяРегистра="";
		Иначе
			ПолеЗапроса.УстановитьТекст(Объект.ТекстЗапроса);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);

	Иначе
		ПроизвольныйЗапрос = ?(Объект.ПроизвольныйЗапрос,1,0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаТекстаЗапроса()
	ТекстКорректен=Истина;
	ПостроительПроверка=Новый ПостроительОтчета;
	
	Попытка
		ТаблицаДанныеДокументаБюджет = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Измерения Цикл
			ТаблицаДанныеДокументаБюджет.Колонки.Добавить(Колонка.Имя,Колонка.Тип);
		КонецЦикла;
		Для Каждого Колонка Из Метаданные.РегистрыНакопления.фин_ОборотыБюджетов.Ресурсы Цикл
			ТаблицаДанныеДокументаБюджет.Колонки.Добавить(Колонка.Имя,Колонка.Тип);
		КонецЦикла;
		ПостроительПроверка.Параметры.Вставить("ДанныеДокументаБюджет",ТаблицаДанныеДокументаБюджет);
		ПостроительПроверка.Текст = ПолеЗапроса.ПолучитьТекст();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Если ТекстКорректен Тогда
		ПостроительПроверка.ЗаполнитьНастройки();
		Если ПостроительПроверка.ИзмеренияСтроки.Количество()>0 Тогда
			Возврат "В запросе, используемом для источника данных, нельзя использовать итоги.
			|Воспользуйтесь группировками.";
		КонецЕсли;
		Объект.ТекстЗапроса							= ПостроительПроверка.Текст;
		Объект.Показатели.Очистить();
		Для Каждого Поле ИЗ ПостроительПроверка.ДоступныеПоля Цикл
			Если Строка(Поле.ТипЗначения) = "Число" Тогда
				Если НЕ ПостроительПроверка.ВыбранныеПоля.Найти(Поле.Имя)=Неопределено Тогда
					СтрокаПоказатель				= Объект.Показатели.Добавить();
					СтрокаПоказатель.Имя			= Поле.Имя;
					СтрокаПоказатель.Представление	= Поле.Представление;
					СтрокаПоказатель.Использование	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивУдалить = Новый Массив;
		Для Каждого СтрокаИзмерения Из Объект.ИзмеренияИсточника Цикл
			Если ПостроительПроверка.ВыбранныеПоля.Найти(СтрокаИзмерения.ПутьКДанным)=Неопределено Тогда 
				МассивУдалить.Добавить(СтрокаИзмерения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУдалить Из МассивУдалить Цикл
			Объект.ИзмеренияИсточника.Удалить(СтрокаУдалить);
		КонецЦикла;
		
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗапросаНаСервере()
	Текст = Объект.ТекстЗапроса;
	РазбивающиеСимволы = Новый Массив;
	РазбивающиеСимволы.Добавить(" ");
	РазбивающиеСимволы.Добавить(",");
	РазбивающиеСимволы.Добавить(".");
	РазбивающиеСимволы.Добавить("/");
	РазбивающиеСимволы.Добавить("(");
	РазбивающиеСимволы.Добавить(")");
	РазбивающиеСимволы.Добавить("=");
	РазбивающиеСимволы.Добавить(Символы.ПС);
	РазбивающиеСимволы.Добавить(Символы.Таб);
	Пока Найти(Текст,"&")<>0 Цикл
		Текст = Сред(Текст,Найти(Текст,"&")+1);
		Для Инд=1 По СтрДлина(Текст) Цикл
			Если РазбивающиеСимволы.Найти(Сред(Текст,Инд,1))<>Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра",Лев(Текст,Инд-1))).Количество()=0 Тогда
			НовыйПараметр = ПараметрыЗапроса.Добавить();
			НовыйПараметр.ИмяПараметра = Лев(Текст,Инд-1);
			// попытаемся определить тип параметра
			Попытка
				Построитель = Новый ПостроительОтчета(Объект.ТекстЗапроса);
			Исключение
				Продолжить;
			КонецПопытки;
			Построитель.ЗаполнитьНастройки();
			Параметр_Тип = Неопределено;
			Для Каждого РазбивающийСимвол Из РазбивающиеСимволы Цикл
				Если РазбивающийСимвол="." ИЛИ Параметр_Тип <>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Позиция = Найти(Объект.ТекстЗапроса,"&"+НовыйПараметр.ИмяПараметра+РазбивающийСимвол);
				Если Позиция <> 0 Тогда
					ТекстПоиска = Лев(Объект.ТекстЗапроса,Позиция-1);
					Слово = "";
					Для Инд = 1 По СтрДлина(ТекстПоиска) Цикл
						Если РазбивающиеСимволы.Найти(Сред(ТекстПоиска,СтрДлина(ТекстПоиска)-Инд+1,1))<>Неопределено Тогда
							Если Слово="" ИЛИ НРег(Слово) = "в" ИЛИ НРег(Слово)="иерархии" Тогда
								Слово = "";
							Иначе
								Попытка
									НовоеПоле = Построитель.ДоступныеПоля.Найти(Слово);
									Если НовоеПоле <> Неопределено Тогда
										Параметр_Тип = НовоеПоле.ТипЗначения;
									ИначеЕсли НРег(Слово) = НРег("СрезПоследних") ИЛИ  НРег(Слово) = НРег("СрезПервых") ИЛИ НРег(Слово) = НРег("Остатки") ИЛИ  НРег(Слово) = НРег("Обороты") ИЛИ  НРег(Слово) = НРег("ОстаткиИОбороты") Тогда
										Параметр_Тип = Новый ОписаниеТипов("Дата");
									Иначе
										х=1;
									КонецЕсли;
									Прервать;
								Исключение
									Прервать;
								КонецПопытки;
							КонецЕсли;
						Иначе
							Слово = Сред(ТекстПоиска,СтрДлина(ТекстПоиска)-Инд+1,1) + Слово;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Параметр_Тип <>Неопределено Тогда
				НовыйПараметр.ЗначениеПараметра = Параметр_Тип.ПривестиЗначение("");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтборыИмяОбработкаВыбораНаСервере(ТекстЗапроса,ИмяПоля,ПустоеЗначение,ОписаниеТипов)
	ПостроительОтчета = Новый ПостроительОтчета(ТекстЗапроса);
	ПостроительОтчета.ЗаполнитьНастройки();
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		Попытка
			ЗаполнитьНастройкиПоИсточнику(ПостроительОтчета);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении построителя запроса: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ПостроительОтчета.ЗаполнитьНастройки();
	НС = ПостроительОтчета.Отбор.Добавить(ИмяПоля);
	ПустоеЗначение 	= НС.ТипЗначения.ПривестиЗначение(ПустоеЗначение);
	ОписаниеТипов 	= НС.ТипЗначения;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборыВидСравненияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДополнительныеОтборы.ТекущиеДанные;
	ТекущиеДанные.ЭтоИнтервал 	= ВидыСравненияИнтервал.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено;
	ТекущиеДанные.ЭтоСписок 	= ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено;
	Если ТекущиеДанные.ОписаниеТиповПоля.Типы().Количество()>0 Тогда
		Элементы.ДополнительныеОтборыЗначение.ОграничениеТипа 	= ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),ТекущиеДанные.ОписаниеТиповПоля);
	Иначе
		Элементы.ДополнительныеОтборыЗначение.ОграничениеТипа 	= ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),Новый ОписаниеТипов);
	КонецЕсли;
	ТекущиеДанные.Значение = ?(ВидыСравненияСписок.НайтиПоЗначению(ТекущиеДанные.ВидСравнения)<>Неопределено,Новый ОписаниеТипов("СписокЗначений"),ТекущиеДанные.ОписаниеТиповПоля).ПривестиЗначение(ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтборыПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	УстановитьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	УстановитьФлажки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Пометка)
	Для Каждого СтрокаПоказатель Из Объект.Показатели Цикл
		СтрокаПоказатель.Использование = Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение<>Неопределено Тогда
		ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
		ТекущиеДанные.Имя = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияИсточникаИмяПоляИсточникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ИзмеренияИсточника.ТекущиеДанные.ПутьКДанным = ВыбранноеЗначение;
	Элементы.ИзмеренияИсточника.ТекущиеДанные.ИмяПоляИсточника = СтрЗаменить(ВыбранноеЗначение,".","");
КонецПроцедуры


