
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_КлассификаторРегистров") Тогда
				Объект.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах;
			ИначеЕсли Объект.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидДанных) Тогда
				Объект.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСписки();

	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	 Элементы 							= Форма.Элементы;
	 Объект 							= Форма.Объект;
	 Элементы.ТабличнаяЧасть.Видимость 	= ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов") И (Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") ИЛИ 	 Элементы.ТабличнаяЧасть.Видимость 	= ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов") И (Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") ИЛИ Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах")));
	 Элементы.ВидДанных.Видимость 		= ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов");
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_КлассификаторРегистров") Тогда
		Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах");
		Объект.ТабличнаяЧасть = "";
	ИначеЕсли Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах") ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидДанных) Тогда
		Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти");
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьСписки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
	Если Объект.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидДанных) Тогда
		Объект.ТабличнаяЧасть = "";
	КонецЕсли;
	ЗаполнитьСписки(Истина);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ТабличныеЧасти;
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= ПоляОбъекта;
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные = Элементы.Колонки.ТекущиеДанные;
		ТекущиеДанные.Поле = ВыбранноеЗначение;
		ТекущиеДанные.ЗаголовокПоля = ПоляОбъекта.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКолонокПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Элементы.Колонки.ОтборСтрок = Новый ФиксированнаяСтруктура("Идентификатор",ТекущиеДанные.Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКолонокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Идентификатор = 1;
		Пока Объект.ГруппыКолонок.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор)).Количество()>0 Цикл
			Идентификатор = Идентификатор + 1;
		КонецЦикла;
		ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
		ТекущиеДанные.Идентификатор = Идентификатор;
		Элементы.Колонки.ОтборСтрок = Новый ФиксированнаяСтруктура("Идентификатор",ТекущиеДанные.Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыКолонокПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
	СтрокиУдалить = Объект.Колонки.НайтиСтроки(Новый Структура("Идентификатор",ТекущиеДанные.Идентификатор));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.Колонки.Удалить(СтрокаУдалить);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед добавлением колонки необходимо создать группу колонок!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
		Элементы.Колонки.ТекущиеДанные.Идентификатор = ТекущиеДанные.Идентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьПриИзменении(Элемент)
	ЗаполнитьСписки(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписки(УдалятьОтсутствующиеПоля=Ложь)
	ТабличныеЧасти.Очистить();
	ПоляОбъекта.Очистить();
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов") Тогда
			ОбъектМетаданных = Метаданные.Документы[Объект.Владелец.ПрограммныйИдентификатор];
			Для Каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
				ТабличныеЧасти.Добавить(ТЧ.Имя,ТЧ.Синоним);
			КонецЦикла;
			Если ТабличныеЧасти.НайтиПоЗначению(Объект.ТабличнаяЧасть)=Неопределено Тогда
				Объект.ТабличнаяЧасть = "";
			КонецЕсли;
		КонецЕсли;
		Если НЕ (Объект.ВидДанных=Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти И Объект.ТабличнаяЧасть="") Тогда
			СписокПолей = фин_ПроцедурыМеханизмовБюджетирования.СписокПолейИсточникаДанных(Объект.ВидДанных,Объект.Владелец.ПрограммныйИдентификатор,Объект.ТабличнаяЧасть,?(ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов"),Перечисления.фин_ВидыРегистровСистемы.ПустаяСсылка(),Объект.Владелец.ВидРегистра));
			Для Каждого СтрокаПоле Из СписокПолей Цикл
				ПоляОбъекта.Добавить(СтрокаПоле.Поле,СтрокаПоле.ЗаголовокПоля);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если УдалятьОтсутствующиеПоля Тогда
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаКолонка Из Объект.Колонки Цикл
			Если ПоляОбъекта.НайтиПоЗначению(СтрокаКолонка.Поле)=Неопределено Тогда
				СтрокиУдалить.Добавить(СтрокаКолонка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаКолонка Из СтрокиУдалить Цикл
			Объект.Колонки.Удалить(СтрокаКолонка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеСтруктурыНаСервере()
	СписокПолейИсточника = фин_ПроцедурыМеханизмовБюджетирования.СписокПолейИсточникаДанных(Объект.ВидДанных,Объект.Владелец.ПрограммныйИдентификатор,Объект.ТабличнаяЧасть,?(ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов"),Перечисления.фин_ВидыРегистровСистемы.ПустаяСсылка(),Объект.Владелец.ВидРегистра));
	Объект.ГруппыКолонок.Очистить();
	Объект.Колонки.Очистить();
	// получим список групп полей
	КопияПоля = СписокПолейИсточника.Скопировать();
	КопияПоля.Свернуть("ПорядокГруппы,ГруппаПолей,Горизонтально");
	КопияПоля.Сортировать("ПорядокГруппы");
	Для Каждого СтрокаГруппа Из КопияПоля Цикл
		// добавим колонку
		ГруппаКолонка			= Объект.ГруппыКолонок.Добавить();
		ГруппаКолонка.Заголовок = СтрокаГруппа.ГруппаПолей;
		ГруппаКолонка.Идентификатор = ГруппаКолонка.НомерСтроки;
		
		Поля = СписокПолейИсточника.НайтиСтроки(Новый Структура("ПорядокГруппы,ГруппаПолей,Горизонтально",СтрокаГруппа.ПорядокГруппы,СтрокаГруппа.ГруппаПолей,СтрокаГруппа.Горизонтально));
		Для Каждого СтрокаПоле Из Поля Цикл
			ПолеСКД 				= Объект.Колонки.Добавить();
			ПолеСКД.Поле 			= СтрокаПоле.Поле;
			ПолеСКД.ЗаголовокПоля	= СтрокаПоле.ЗаголовокПоля;
			ПолеСКД.Идентификатор 	= ГруппаКолонка.Идентификатор;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеСтруктуры(Команда)
	Если ПроверитьЗаполнение() Тогда
		Попытка
			АвтозаполнениеСтруктурыНаСервере();
			Элементы.ГруппыКолонок.Обновить();
			ТекущиеДанные = Элементы.ГруппыКолонок.ТекущиеДанные;
			Если ТекущиеДанные<>Неопределено Тогда
				Элементы.Колонки.ОтборСтрок = Новый ФиксированнаяСтруктура("Идентификатор",ТекущиеДанные.Идентификатор);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.ТабличнаяЧасть = ВыбранноеЗначение;
КонецПроцедуры
