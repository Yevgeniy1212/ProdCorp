&НаКлиенте
Перем КЭШ_Разрезы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() И Объект.ГруппыПравил.Количество()=0 Тогда
		НоваяСтрока = Объект.ГруппыПравил.Добавить();
		НоваяСтрока.Представление = "Основная";
	КонецЕсли;
	Сохранить = Ложь;
	Если (НЕ Объект.Ссылка.Пустая()) ИЛИ (Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПараметрыШаблоновОтраженияФактическихДанных.Шаблон,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ИдентификаторСтроки,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ВалютаИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ВалютаТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.КоличествоИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.КоличествоТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.КонтрагентИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.КонтрагентТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.НоменклатураИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.НоменклатураТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ПроектИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ПроектТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ФинансовыйПоказательИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ФинансовыйПоказательТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.СуммаИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.СуммаТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.УправленческоеПодразделениеИсточник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.УправленческоеПодразделениеТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.УправленческоеПодразделениеОбязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ПроектОбязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.КонтрагентОбязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.НоменклатураОбязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез1ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез2ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез3ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез4ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез5ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез6ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез7ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез8ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез9ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез10ТипИсточника,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез1Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез2Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез3Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез4Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез5Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез6Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез7Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез8Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез9Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез10Обязательный,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез1Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез2Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез3Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез4Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез5Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез6Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез7Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез8Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез9Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Разрез10Источник,
			|	ПараметрыШаблоновОтраженияФактическихДанных.ПрогнозноеЗначение,
			|	ПараметрыШаблоновОтраженияФактическихДанных.Сторно
			|ИЗ
			|	РегистрСведений.Удалить_фин_ПараметрыШаблоновОтраженияФактическихДанных КАК ПараметрыШаблоновОтраженияФактическихДанных
			|ГДЕ
			|	ПараметрыШаблоновОтраженияФактическихДанных.Шаблон = &Шаблон";

		Запрос.УстановитьПараметр("Шаблон", ?(Объект.Ссылка.Пустая(),Параметры.ЗначениеКопирования,Объект.Ссылка));

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаНЗ = ДанныеРегистраСведений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНЗ,ВыборкаДетальныеЗаписи);
		КонецЦикла;
        Сохранить = Истина;
	КонецЕсли;
	
	МассивИзмерений.Добавить("Проект");
	МассивИзмерений.Добавить("Контрагент");
	МассивИзмерений.Добавить("УправленческоеПодразделение");
	МассивИзмерений.Добавить("Номенклатура");
	МассивИзмерений.Добавить("Разрез1");
	МассивИзмерений.Добавить("Разрез2");
	МассивИзмерений.Добавить("Разрез3");
	МассивИзмерений.Добавить("Разрез4");
	МассивИзмерений.Добавить("Разрез5");
	МассивИзмерений.Добавить("Разрез6");
	МассивИзмерений.Добавить("Разрез7");
	МассивИзмерений.Добавить("Разрез8");
	МассивИзмерений.Добавить("Разрез9");
	МассивИзмерений.Добавить("Разрез10");
	
	НаборПоказателей.Добавить("Сумма",,Истина);
	НаборПоказателей.Добавить("Количество",,Истина);
	ПолныйПереченьРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	ЗаполнитьДерево();
	мВид = Объект.Владелец;
	МаксимальныйИдентификатор = "1";
	Для Каждого СтрокаНабор Из Объект.НаборПравилОтражения Цикл
		Если Число(СтрокаНабор.БазовыйИдентификатор)>Число(МаксимальныйИдентификатор) Тогда
			МаксимальныйИдентификатор = СтрокаНабор.БазовыйИдентификатор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	Для Инд=1 По ДеревоНавигации.ПолучитьЭлементы().Количество() Цикл
		Элементы.ДеревоНавигации.Развернуть(Инд-1,Истина);
	КонецЦикла;
	Если Объект.НаборПравилОтражения.Количество()>0 Тогда
		Найден = Ложь;
		Для Каждого Элемент Из ДеревоНавигации.ПолучитьЭлементы() Цикл
			Для Каждого ВложенныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
				Если Параметры.ТекущееПравило="" ИЛИ ВложенныйЭлемент.Идентификатор = Параметры.ТекущееПравило Тогда
					Элементы.ДеревоНавигации.ТекущаяСтрока = ВложенныйЭлемент.ПолучитьИдентификатор();
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Найден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Для Каждого СтрокаДанныхРегистра Из ДанныеРегистраСведений Цикл
		Если ((НЕ ЗначениеЗаполнено(СтрокаДанныхРегистра.ФинансовыйПоказательТипИсточника)) ИЛИ (НЕ ЗначениеЗаполнено(СтрокаДанныхРегистра.ФинансовыйПоказательИсточник))) И Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",СтрокаДанныхРегистра.ИдентификаторСтроки)).Количество()>0 Тогда
			Сообщить("Не указан источник определения финансового показателя для правила "+Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",СтрокаДанныхРегистра.ИдентификаторСтроки))[0].Комментарий);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Сохранить И НЕ Объект.Ссылка.Пустая()  Тогда
		СохранитьЗаписьРегистра();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Сохранить  Тогда
		СохранитьЗаписьРегистра();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Сохранить И НЕ Объект.Ссылка.Пустая() Тогда
		СохранитьЗаписьРегистра();
	КонецЕсли;
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Модифицированность Тогда
		ВыполнитьКонтроль();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	Если Объект.НаборПравилОтражения.Количество() >0 И мВид <> Объект.Владелец Тогда
		Объект.Владелец = мВид;
		ПоказатьПредупреждение(,"Вид документов не может быть изменен, пока заполнен набор правил!");
	Иначе
		мВид = Объект.Владелец;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИсточникГруппыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ГруппыПравил.ТекущиеДанные;
	ТекущиеДанные.ИмяИсточника = ВыбранноеЗначение;
	Если СписокВыбораИсточников.НайтиПоЗначению(ВыбранноеЗначение)<>Неопределено Тогда
		ТекущиеДанные.ПредставлениеИсточника = СписокВыбораИсточников.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	КонецЕсли;
	ИсточникГруппыПриИзменении(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ИсточникГруппыОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ГруппыПравил.ТекущиеДанные;
	ТекущиеДанные.ИмяИсточника = "";
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСтрокиПриИзменении(Элемент)
	НовыйКомментарий = Элементы.НаборПравилОтражения.ТекущиеДанные.Комментарий;
	Идентификатор	 = Элементы.НаборПравилОтражения.ТекущиеДанные.БазовыйИдентификатор;
	Элементы.ДеревоНавигации.ТекущиеДанные.Представление = ?(СокрЛП(НовыйКомментарий)="","<...> (#"+Идентификатор+")",НовыйКомментарий);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПроводокПриИзменении(Элемент)
	Сохранить = Истина;
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозноеЗначениеПриИзменении(Элемент)
	Сохранить = Истина;
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СторноПриИзменении(Элемент)
	Сохранить = Истина;
	Модифицированность=Истина;
КонецПроцедуры

////Процедура НаборПравилОтраженияПредставлениеИсточникаНачалоВыбора
////
&НаКлиенте
Процедура ПредставлениеИсточникаНачалоВыбора(Элемент, ДанныеВыбора,СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	СписокВыбораИсточников.Очистить();
	Если ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
		ДополнитьТабличнымиЧастямиДокумента(СписокВыбораИсточников);
	Иначе
		ДополнитьДвижениямиДокумента(СписокВыбораИсточников);
	КонецЕсли;
	ДанныеВыбора = СписокВыбораИсточников;
	//Результат = Список.ВыбратьЭлемент("Выберите нужный источник");
	//Если Результат <> Неопределено Тогда
	//	ТекущиеДанные.ИмяИсточника				= Результат.Значение;
	//	ТекущиеДанные.ПредставлениеИсточника 	= Результат.Представление;
	//КонецЕсли;
КонецПроцедуры //НаборПравилОтраженияПредставлениеИсточникаНачалоВыбора

////Процедура НаборПравилОтраженияПредставлениеИсточникаОчистка
////
&НаКлиенте
Процедура НаборПравилОтраженияПредставлениеИсточникаОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ТекущиеДанные.ИмяИсточника = "";
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
		Измерение = ИзмерениеЭлемент.Значение;
		Если ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
			ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") ИЛИ
			ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			ЗаписьРегистраСведений[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
			ЗаписьРегистраСведений[Измерение+"Источник"]		= Неопределено;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
		Показатель = ПоказательЭлемент.Значение;
		Если ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
			ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") ИЛИ
			ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			ЗаписьРегистраСведений[Показатель+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
			ЗаписьРегистраСведений[Показатель+"Источник"]		= Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //НаборПравилОтраженияПредставлениеИсточникаОчистка

//Процедура ПредставлениеИсточникаПриИзменении
//
&НаКлиенте
Процедура ПредставлениеИсточникаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Если мИсточник <> ТекущиеДанные.ИмяИсточника Тогда
		Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
			Измерение = ИзмерениеЭлемент.Значение;
			Если ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
				ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") ИЛИ
				ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
				ЗаписьРегистраСведений[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				ЗаписьРегистраСведений[Измерение+"Источник"]		= Неопределено;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
			Показатель = ПоказательЭлемент.Значение;
			Если ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
				ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") ИЛИ
				ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
				ЗаписьРегистраСведений[Показатель+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				ЗаписьРегистраСведений[Показатель+"Источник"]		= Неопределено;
			КонецЕсли;
		КонецЦикла;
		мИсточник = ТекущиеДанные.ИмяИсточника;
	КонецЕсли;
КонецПроцедуры //ПредставлениеИсточникаПриИзменении

//Процедура СпособПримененияПриИзменении
//
&НаКлиенте
Процедура СпособПримененияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	Если ТекущиеДанные.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда")
		ИЛИ ТекущиеДанные.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон") Тогда
		ТекущиеДанные.Условие = "";
		Элементы.Условие.Доступность = Ложь;
	Иначе
		Элементы.Условие.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры //СпособПримененияПриИзменении

//Процедура НаборПравилОтраженияФинансовыйПоказательТипИсточникаНачалоВыбора
//
&НаКлиенте
Процедура ТипИсточникаНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	мТекущийВидДанныхПоля = ЗаписьРегистраСведений[Элемент.Имя];
	Если ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
		 СтандартнаяОбработка = Ложь;
		 СписокТипов = Новый СписокЗначений;
		 СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"));
		 СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента"));
		 СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"));
		 СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие"));
		 СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования"));
		 ДанныеВыбора = СписокТипов;
	КонецЕсли;
КонецПроцедуры //НаборПравилОтраженияФинансовыйПоказательТипИсточникаНачалоВыбора

//Процедура ВалютаТипИсточника1НачалоВыбора
//
&НаКлиенте
Процедура ВалютаТипИсточникаНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"));
	Если ТекущиеДанные.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения"));
	КонецЕсли;
	ДанныеВыбора = Список;
	//ФормаВыбора = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ПолучитьФормуВыбора(,Элемент);
	//ФормаВыбора.Отбор.Ссылка.ВидСравнения 	= ВидСравнения.ВСписке;
	//ФормаВыбора.Отбор.Ссылка.Значение 		= Список;
	//ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
	//ФормаВыбора.Открыть();
КонецПроцедуры //ВалютаТипИсточника1НачалоВыбора

//Процедура ФинансовыйПоказательИсточникПриИзменении
//
&НаКлиенте
Процедура ФинансовыйПоказательИсточникПриИзменении(Элемент)
	Сохранить = Истина;
	Модифицированность=Истина;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ТекущиеДанные = ЗаписьРегистраСведений;
	НаборПоказателей.Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.ФинансовыйПоказательИсточник) И ТипЗнч(ТекущиеДанные.ФинансовыйПоказательИсточник)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда
		Статья = ТекущиеДанные.ФинансовыйПоказательИсточник;
        ПереченьРазрезовПоСтатье = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(Статья);
		Если Не РеквизитЗначения(Статья,"УчетПоСумме") Тогда
			ТекущиеДанные.СуммаИсточник = "";
			НаборПоказателей.Добавить("Сумма",,Ложь);
		Иначе
			НаборПоказателей.Добавить("Сумма",,Истина);
		КонецЕсли;
		Если Не РеквизитЗначения(Статья,"УчетПоКоличеству") Тогда
			 ТекущиеДанные.КоличествоИсточник = "";
			НаборПоказателей.Добавить("Количество",,Ложь);
		Иначе
			НаборПоказателей.Добавить("Количество",,Истина);
		КонецЕсли;
		Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
			Измерение = ИзмерениеЭлемент.Значение;
			Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(Статья,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Измерение)) Тогда
				ТекущиеДанные[Измерение+"Источник"]="";
			КонецЕсли;
		КонецЦикла;
        УстановитьВидимость();
	Иначе
        ПереченьРазрезовПоСтатье = Неопределено;
		НаборПоказателей.Добавить("Сумма",,Истина);
		НаборПоказателей.Добавить("Количество",,Истина);
        УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры //ФинансовыйПоказательИсточникПриИзменении

//Процедура ВладелецНачалоВыбора
//
&НаКлиенте
Процедура ВладелецНачалоВыбора(Элемент,ДанныеВыбора, СтандартнаяОбработка)
	фин_РаботаСДиалогамиБюджетирование.ОбработатьВыборВидаДокументаДляОтраженияВБюджетировании(Элемент,СтандартнаяОбработка,,Объект.Владелец)
КонецПроцедуры //ВладелецНачалоВыбора

//Процедура ИсточникДанныхГруппыПриИзменении
//
&НаКлиенте
Процедура ИсточникДанныхГруппыПриИзменении(Элемент)
	ТекущаяГруппа = Элементы.ГруппыПравил.ТекущиеДанные;
	Если ТекущаяГруппа.ВидДанных <> мВидДанныхГруппы Тогда
		ТекущаяГруппа.ИмяИсточника = "";
		ТекущаяГруппа.ПредставлениеИсточника = "";
		Если ЗначениеЗаполнено(ТекущаяГруппа.УсловиеВыполненияГруппыШаблонов) И
			ТекущаяГруппа.УсловиеВыполненияГруппыШаблонов.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
			ТекущаяГруппа.УсловиеВыполненияГруппыШаблонов="";
		КонецЕсли;
	КонецЕсли;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Элементы.ИсточникГруппы.ТолькоПросмотр = (ТекущаяГруппа.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента")); 
	СтрокиГруппы = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ТекущаяГруппа.ИдентификаторСтроки));
	Для Каждого СтрокаГруппы Из СтрокиГруппы Цикл
		Элементы.НаборПравилОтражения.ТекущаяСтрока = СтрокаГруппы.ПолучитьИдентификатор();
		СтрокаГруппы.ВидДанных = ТекущаяГруппа.ВидДанных;
		НаборПравилОтраженияВидДанныхПриИзменении(Элементы.ВидДанных);
		Если ТекущаяГруппа.ВидДанных <> мВидДанныхГруппы Тогда
			СтрокаГруппы.ИмяИсточника = "";
			СтрокаГруппы.ПредставлениеИсточника = "";
			Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
				Измерение = ИзмерениеЭлемент.Значение;
				Если ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") И
					 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") И
					 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
					 ЗаписьРегистраСведений[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
					 ЗаписьРегистраСведений[Измерение+"Источник"]		= Неопределено;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Показатель Из НаборПоказателей Цикл
				Если ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") И
					 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") И
					 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
					 ЗаписьРегистраСведений[Показатель+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
					 ЗаписьРегистраСведений[Показатель+"Источник"]		= Неопределено;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(СтрокаГруппы.Условие) И
				СтрокаГруппы.Условие.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
				СтрокаГруппы.Условие="";
			КонецЕсли;
			мВидДанных = ТекущаяГруппа.ВидДанных;
		КонецЕсли;
	КонецЦикла;
	мВидДанныхГруппы = ТекущаяГруппа.ВидДанных;
КонецПроцедуры //ИсточникДанныхГруппыПриИзменении

//Процедура ИсточникГруппыНачалоВыбора
//
&НаКлиенте
Процедура ИсточникГруппыНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбораИсточников.Очистить();
	ТекущаяГруппа = Элементы.ГруппыПравил.ТекущиеДанные;
	Если ТекущаяГруппа.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
		ДополнитьТабличнымиЧастямиДокумента(СписокВыбораИсточников);
	Иначе
		ДополнитьДвижениямиДокумента(СписокВыбораИсточников);
	КонецЕсли;
	ДанныеВыбора = СписокВыбораИсточников;
	//Результат = Список.ВыбратьЭлемент("Выберите нужный источник");
	//Если Результат <> Неопределено Тогда
	//	ТекущаяГруппа.ИмяИсточника				= Результат.Значение;
	//	ТекущаяГруппа.ПредставлениеИсточника 	= Результат.Представление;
	//	ИсточникГруппыПриИзменении(Элемент);
	//КонецЕсли;
КонецПроцедуры //ИсточникГруппыНачалоВыбора

//Процедура УсловиеГруппыНачалоВыбора
//
&НаКлиенте
Процедура УсловиеГруппыНачалоВыбора(Элемент,ДанныеВыбора,СтандартнаяОбработка)
	ТекущаяГруппа = Элементы.ГруппыПравил.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяГруппа.ВидДанных) Тогда
		Предупреждение("Укажите вид данных для группы!");
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СписокВидовДанных = Новый СписокЗначений;
	СписокВидовДанных.Добавить(ТекущаяГруппа.ВидДанных);
	Если ТекущаяГруппа.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
		СписокВидовДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
 		Список = Новый СписокЗначений;
		Список.Добавить("");
		Список.Добавить(ТекущаяГруппа.ИмяИсточника);
		СтруктураОтбора.Вставить("ИмяИсточника",Список);
	Иначе
		СписокВидовДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
 		Список = Новый СписокЗначений;
		Список.Добавить("");
		Список.Добавить(ТекущаяГруппа.ИмяИсточника);
		СтруктураОтбора.Вставить("ИмяИсточника",Список);
	КонецЕсли;
	СтруктураОтбора.Вставить("ВидДанных",СписокВидовДанных);
	СтруктураОтбора.Вставить("Владелец",Объект.Владелец);
	СтруктураПараметров = Новый Структура("ТекущееЗначение,Отбор",ТекущаяГруппа.УсловиеВыполненияГруппыШаблонов,СтруктураОтбора);
	ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоСтрокамДокумента.ФормаВыбора",СтруктураПараметров,Элемент);
КонецПроцедуры //УсловиеГруппыНачалоВыбора

//Процедура ИсточникГруппыПриИзменении
//
&НаКлиенте
Процедура ИсточникГруппыПриИзменении(Элемент)
	ТекущаяГруппа = Элементы.ГруппыПравил.ТекущиеДанные;
	СтрокиГруппы = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ТекущаяГруппа.ИдентификаторСтроки));
	Для Каждого СтрокаГруппы Из СтрокиГруппы Цикл
		Если СтрокаГруппы.ИмяИсточника <> ТекущаяГруппа.ИмяИсточника Тогда
			Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
				Измерение = ИзмерениеЭлемент.Значение;
				//Если СтрокаГруппы[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
				//	СтрокаГруппы[Измерение+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
				//	СтрокаГруппы[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				//	СтрокаГруппы[Измерение+"Источник"]		= Неопределено;
				//КонецЕсли;
			КонецЦикла;
			Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
				Показатель = ПоказательЭлемент.Значение;
				//Если СтрокаГруппы[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ
				//	СтрокаГруппы[Показатель+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
				//	СтрокаГруппы[Показатель+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				//	СтрокаГруппы[Показатель+"Источник"]		= Неопределено;
				//КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтрокаГруппы.ИмяИсточника 							= ТекущаяГруппа.ИмяИсточника;
		СтрокаГруппы.ПредставлениеИсточника 				= ТекущаяГруппа.ПредставлениеИсточника;
	КонецЦикла;
КонецПроцедуры //ИсточникГруппыПриИзменении

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	Сохранить = Истина;
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИсточникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ТекущиеДанные.ИмяИсточника = ВыбранноеЗначение;
	Если СписокВыбораИсточников.НайтиПоЗначению(ВыбранноеЗначение)<>Неопределено Тогда
		ТекущиеДанные.ПредставлениеИсточника = СписокВыбораИсточников.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	КонецЕсли;
КонецПроцедуры

// при изменения вида данных строки
//
&НаКлиенте
Процедура НаборПравилОтраженияВидДанныхПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Если ТекущиеДанные.ВидДанных <> мВидДанных Тогда
		ТекущиеДанные.ИмяИсточника = "";
		ТекущиеДанные.ПредставлениеИсточника = "";
		Для Каждого ИзмерениеЗначение Из МассивИзмерений Цикл
			Измерение = ИзмерениеЗначение.Значение;
			Если ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") И
				 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") И
				 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
				 ЗаписьРегистраСведений[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				 ЗаписьРегистраСведений[Измерение+"Источник"]		= Неопределено;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
			Показатель = ПоказательЭлемент.Значение;
			Если ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") И
				 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") И
				 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
				 ЗаписьРегистраСведений[Показатель+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
				 ЗаписьРегистраСведений[Показатель+"Источник"]		= Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекущиеДанные.Условие) И
			ТекущиеДанные.Условие.ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
			ТекущиеДанные.Условие="";
		КонецЕсли;
		мВидДанных = ТекущиеДанные.ВидДанных;
	КонецЕсли;
	Элементы.ПредставлениеИсточника.ТолькоПросмотр = (ТекущиеДанные.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента")); 
КонецПроцедуры //НаборПравилОтраженияВидДанныхПриИзменении

//Процедура НаборПравилОтраженияУсловиеНачалоВыбора
//
&НаКлиенте
Процедура УсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидДанных) Тогда
		ПоказатьПредупреждение(,"Укажите вид данных для строки!");
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

	СтруктураОтбора = Новый Структура;
	СписокВидовДанных = Новый СписокЗначений;
	СписокВидовДанных.Добавить(ТекущиеДанные.ВидДанных);
	Если ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
		СписокВидовДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
 		Список = Новый СписокЗначений;
		Список.Добавить("");
		Список.Добавить(ТекущиеДанные.ИмяИсточника);
		СтруктураОтбора.Вставить("ИмяИсточника",Список);
	Иначе
		СписокВидовДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
 		Список = Новый СписокЗначений;
		Список.Добавить("");
		Список.Добавить(ТекущиеДанные.ИмяИсточника);
		СтруктураОтбора.Вставить("ИмяИсточника",Список);
	КонецЕсли;
	СтруктураОтбора.Вставить("ВидДанных",СписокВидовДанных);
	СтруктураОтбора.Вставить("Владелец",Объект.Владелец);
	СтруктураПараметров = Новый Структура("ТекущееЗначение,Отбор",ТекущиеДанные.Условие,СтруктураОтбора);
	ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоСтрокамДокумента.ФормаВыбора",СтруктураПараметров,Элемент);
КонецПроцедуры //НаборПравилОтраженияУсловиеНачалоВыбора

//Процедура ТипИсточникаПриИзменении
//
&НаКлиенте
Процедура ТипИсточникаПриИзменении(Элемент)
	Сохранить = Истина;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Модифицированность=Истина;
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	ИмяЭлемента = Элемент.Имя;
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	Разрез 		= Лев(ИмяЭлемента,ДлинаСтроки-СтрДлина("ТипИсточника"));
	//Если ЗначениеЗаполнено(ЗаписьРегистраСведений[Разрез+"Источник"]) Тогда
		Если ЗаписьРегистраСведений[Элемент.Имя] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
			Если ТипЗнч(ЗаписьРегистраСведений[Разрез+"Источник"])<> Тип("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования") Тогда
				ЗаписьРегистраСведений[Разрез+"Источник"] = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка");
			КонецЕсли;
		ИначеЕсли ЗаписьРегистраСведений[Элемент.Имя] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
			Описание = ?(Разрез="Валюта",Новый ОписаниеТипов("Справочникссылка.Валюты"),?(Разрез="ФинансовыйПоказатель",Новый ОписаниеТипов("Справочникссылка.фин_ФинансовыеПоказатели"),?(НаборПоказателей.НайтиПоЗначению(Разрез)=Неопределено,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Разрез),КЭШ_Разрезы).ТипЗначения,Новый ОписаниеТипов("Число"))));
			Если Описание.Типы().Найти(ТипЗнч(ЗаписьРегистраСведений[Разрез+"Источник"])) = Неопределено Тогда
				 ЗаписьРегистраСведений[Разрез+"Источник"] = Описание.ПривестиЗначение(ЗаписьРегистраСведений[Разрез+"Источник"]);
			КонецЕсли;
		ИначеЕсли ЗаписьРегистраСведений[Элемент.Имя] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			Если ТипЗнч(ЗаписьРегистраСведений[Разрез+"Источник"])<> Тип("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования") Тогда
				ЗаписьРегистраСведений[Разрез+"Источник"] = ПредопределенноеЗначение("Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ПустаяСсылка");
			КонецЕсли;
		Иначе
			Если ТипЗнч(ЗаписьРегистраСведений[Разрез+"Источник"])<> Тип("Строка") ИЛИ мТекущийВидДанныхПоля <>ЗаписьРегистраСведений[Элемент.Имя] Тогда
				ЗаписьРегистраСведений[Разрез+"Источник"] = "";
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
	мТекущийВидДанныхПоля = ЗаписьРегистраСведений[Элемент.Имя];
	ОбновитьЭлементы();
КонецПроцедуры //ТипИсточникаПриИзменении

////Процедура НаборПравилОтраженияФинансовыйПоказательИсточникНачалоВыбора
////
&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора,СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НаборПравилОтражения.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	Разрез 		= Лев(ИмяЭлемента,ДлинаСтроки-СтрДлина("Источник"));
	Т_Разрез = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Разрез);
	НадлежащийТип 	= Новый Массив;
	ИмяСправочника 	= Новый Массив;
	УстановитьТипПоля(Разрез,ИмяСправочника,НадлежащийТип);
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ПлановаяНоменклатура = ?(ЗаписьРегистраСведений.ФинансовыйПоказательТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"),РеквизитЗначения(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник,"ИспользуемыйНоменклатурныйПеречень"),Неопределено);
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений[Разрез+"ТипИсточника"]) Тогда
		Если ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
			СписокВыбора = СписокДополнительныхРеквизитов(Объект.Владелец,НадлежащийТип);
			Если СписокВыбора.Количество()=0 Тогда
				ПоказатьПредупреждение(,"Для вида документов не задано дополнительных реквизитов,
				|подходящих для заполнения выбранного реквизита!");
				Возврат;
			КонецЕсли;
			СписокВыбора.СортироватьПоПредставлению();
			Результат = СписокВыбора.ВыбратьЭлемент("Выберите дополнительный реквизит");
			Если Результат <> Неопределено Тогда
				Описание =  Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования");
				Элемент.ОграничениеТипа = Описание;
				ЗаписьРегистраСведений[Разрез+"Источник"]=Результат.Значение;
				ИсточникПриИзменении(Элемент);
			КонецЕсли;
		ИначеЕсли ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
			Если НаборПоказателей.НайтиПоЗначению(Разрез) = Неопределено Тогда
				Если Разрез="Номенклатура" Тогда
					Элемент.ОграничениеТипа = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник);
					ЗаписьРегистраСведений[Разрез+"Источник"]=Элемент.ОграничениеТипа.ПривестиЗначение(ЗаписьРегистраСведений[Разрез+"Источник"]);
					СтандартнаяОбработка = Истина;				
				ИначеЕсли Разрез="Валюта" Тогда
					Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Валюты");
					ЗаписьРегистраСведений[Разрез+"Источник"]=Элемент.ОграничениеТипа.ПривестиЗначение(ЗаписьРегистраСведений[Разрез+"Источник"]);
					СтандартнаяОбработка = Ложь;				
					ОткрытьФорму("Справочник.Валюты.ФормаВыбора",,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно);
				Иначе
					ПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Разрез),КЭШ_Разрезы);
					СтандартнаяОбработка = Истина;				
					Если ПВХ=Неопределено Тогда
						Описание =  Новый ОписаниеТипов(НадлежащийТип);
						Элемент.ОграничениеТипа = Описание;
						ЗаписьРегистраСведений[Разрез+"Источник"]=Описание.ПривестиЗначение(ЗаписьРегистраСведений[Разрез+"Источник"]);
						Если Разрез="Валюта" Тогда
							СтандартнаяОбработка = Ложь;
							ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработчкиОповещенияВыбора",ЭтотОбъект,Новый Структура("Элемент,Разрез",Элемент,Разрез));
							ОткрытьФорму("Справочник.Валюты.ФормаВыбора",Новый Структура("ТекущееЗначение",ЗаписьРегистраСведений[Элемент.Имя]),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
						ИначеЕсли Разрез="ФинансовыйПоказатель" Тогда
							СтандартнаяОбработка = Ложь;				
							ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработчкиОповещенияВыбора",ЭтотОбъект,Новый Структура("Элемент,Разрез",Элемент,Разрез));
							ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаВыбора",Новый Структура("ТекущееЗначение",ЗаписьРегистраСведений[Элемент.Имя]),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
						КонецЕсли;
					Иначе
						Элемент.ОграничениеТипа = ПВХ.ТипЗначения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Истина;				
			КонецЕсли;
		ИначеЕсли ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			СтруктураОтбора = Новый Структура("Владелец",Объект.Владелец);
			Если ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
				СтруктураОтбора.Вставить("ВидДанных",ТекущиеДанные.ВидДанных);
			ИначеЕсли ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
				ВидыДанных = Новый СписокЗначений;
				ВидыДанных.Добавить(ТекущиеДанные.ВидДанных);
				ВидыДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
				СтруктураОтбора.Вставить("ВидДанных",ВидыДанных);
				Список = Новый СписокЗначений;
				Список.Добавить("");
				Список.Добавить(ТекущиеДанные.ИмяИсточника);
				СтруктураОтбора.Вставить("ИмяИсточника",Список);
			Иначе
				ВидыДанных = Новый СписокЗначений;
				ВидыДанных.Добавить(ТекущиеДанные.ВидДанных);
				ВидыДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
				СтруктураОтбора.Вставить("ВидДанных",ВидыДанных);
				Список = Новый СписокЗначений;
				Список.Добавить("");
				Список.Добавить(ТекущиеДанные.ИмяИсточника);
				СтруктураОтбора.Вставить("ИмяИсточника",Список);
			КонецЕсли;
			СтруктураОтбора.Вставить("Разрез",Т_Разрез); 
			ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработчкиОповещенияВыбора",ЭтотОбъект,Новый Структура("Элемент,Разрез,ЭтоСоответствие",Элемент,Разрез,Истина));
			ОткрытьФорму("Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ФормаВыбора",Новый Структура("Отбор",СтруктураОтбора),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
		ИначеЕсли ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") ИЛИ (ТекущиеДанные.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") И ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие")) Тогда
			Описание =  Новый ОписаниеТипов("Строка");
			Элемент.ОграничениеТипа = Описание;
			Если ДокументСуществует(Объект.Владелец) Тогда
				ОбновитьОтображениеДанных();
				ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработчкиОповещенияВыбора",ЭтотОбъект,Новый Структура("Элемент,Разрез,ВыбиратьПуть",Элемент,Разрез,Истина));
				ВыбираемыйТип = ?(ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"),Неопределено,ПолучитьПростойТипРазреза(Т_Разрез,ПлановаяНоменклатура,КЭШ_Разрезы));
				ТолькоДочерние = ЗаписьРегистраСведений[Разрез+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие");
				ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоДокументам.Форма.ФормаВыбораРеквизита",Новый Структура("ТолькоДочерние,ВидДокументов,ВидДанных,ИмяИсточника,ТребуетсяАвтовыборПоСубконто,ТребуемыйТип",ТолькоДочерние,Объект.Владелец,ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"),"",Истина,ВыбираемыйТип),,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
			КонецЕсли;

		ИначеЕсли ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") Тогда
			Если ТекущиеДанные.ИмяИсточника="" Тогда
				ПоказатьПредупреждение(,"Не указано имя табличной части / набора движений!");
				Возврат;
			КонецЕсли;
			Описание =  Новый ОписаниеТипов("Строка");
			Элемент.ОграничениеТипа = Описание;
			Если ДокументСуществует(Объект.Владелец) Тогда
				ОбновитьОтображениеДанных();
				ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработчкиОповещенияВыбора",ЭтотОбъект,Новый Структура("Элемент,Разрез,ВыбиратьПуть,ПоИмениЭлемента",Элемент,Разрез,Истина,Истина));
				ВыбираемыйТип = ?(ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"),Неопределено,ПолучитьПростойТипРазреза(Т_Разрез,ПлановаяНоменклатура,КЭШ_Разрезы));
				ТолькоДочерние = ЗаписьРегистраСведений[Разрез+"ТипИсточника"] <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие");
				ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоДокументам.Форма.ФормаВыбораРеквизита",Новый Структура("ТолькоДочерние,ВидДокументов,ВидДанных,ИмяИсточника,ТребуетсяАвтовыборПоСубконто,ТребуемыйТип",ТолькоДочерние,Объект.Владелец,ТекущиеДанные.ВидДанных,ТекущиеДанные.ИмяИсточника,Истина,ВыбираемыйТип),,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //НаборПравилОтраженияФинансовыйПоказательИсточникНачалоВыбора

&НаКлиенте
Процедура ДеревоНавигацииПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоНавигации.ТекущиеДанные;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Если ТекущиеДанные <>Неопределено И (ЗаписьРегистраСведений <>Неопределено И ЗаписьРегистраСведений.ИдентификаторСтроки=Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор)
		И ТекущиеДанные.ТипСтроки <> "Группа" Тогда
		Возврат;
	КонецЕсли;
	Если Сохранить Тогда
		//СохранитьЗаписьРегистра();
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		мВидДанныхГруппы = Неопределено;
		НастроитьДоступностьПанели(Ложь);
		ОбнулитьЗаписьРегистра();
		ID="";
		Type="";
		Возврат;
	КонецЕсли;
	Если ID=ТекущиеДанные.Идентификатор И Type=ТекущиеДанные.ТипСтроки Тогда
		Возврат;
	КонецЕсли;
	ID=ТекущиеДанные.Идентификатор;
	Type=ТекущиеДанные.ТипСтроки;
	НаборПоказателей.Очистить();
	Если ТекущиеДанные.ТипСтроки = "Группа" Тогда
		НастроитьДоступностьПанели(Ложь);
		ОбнулитьЗаписьРегистра();
		Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ПараметрыГруппы;
		Элементы.ГруппыПравил.ТекущаяСтрока = Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ТекущиеДанные.Идентификатор))[0].ПолучитьИдентификатор();
		Элементы.НаборПравилОтражения.ТекущаяСтрока = Неопределено;
		Если Элементы.ГруппыПравил.ТекущиеДанные = Неопределено Тогда // затычка
			Возврат;
		КонецЕсли;
		мВидДанныхГруппы = Элементы.ГруппыПравил.ТекущиеДанные.ВидДанных;
		
		ОсновнаяГруппа = НРег(ТекущиеДанные.Представление) = НРег("Основная");
		Если НЕ ОсновнаяГруппа Тогда
			мВидДанных = Элементы.ГруппыПравил.ТекущиеДанные.ВидДанных;
		КонецЕсли;
		Элементы.ИсточникДанныхГруппы.Доступность 	= НЕ ОсновнаяГруппа;
		Элементы.ИсточникГруппы.Доступность 		= НЕ ОсновнаяГруппа;
		Элементы.СпособИспользованияГруппы.Доступность	= НЕ ОсновнаяГруппа;
		Элементы.УсловиеГруппы.Доступность 		= НЕ ОсновнаяГруппа;
	 	Элементы.ВидДанных.Доступность 			= ОсновнаяГруппа;
		Элементы.ПредставлениеИсточника.Доступность= ОсновнаяГруппа;
		Элементы.ИсточникГруппы.ТолькоПросмотр = (Элементы.ГруппыПравил.ТекущиеДанные.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента")); 
	Иначе
		НастроитьДоступностьПанели(Истина);
		Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.ПараметрыСтрокиШаблона;
		ИдентификаторСтроки = ТекущиеДанные.Идентификатор;
		СтрокиОтдельныхПравил = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",ИдентификаторСтроки));
		ИдентификаторГруппы = СтрокиОтдельныхПравил[0].ИдентификаторСтроки;
		СтрокиГруппПравил = Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторГруппы));
		Элементы.ГруппыПравил.ТекущаяСтрока = СтрокиГруппПравил[0].ПолучитьИдентификатор();
		ПолучитьЗаписьРегистра(ИдентификаторСтроки);
		//НайденныеСтроки = ДанныеРегистраСведений.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки));
		//Если НайденныеСтроки.Количество()=0 Тогда
		//	ТребуемаяСтрока = ДанныеРегистраСведений.Добавить();
		//	ТребуемаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		//Иначе
		//	ТребуемаяСтрока = НайденныеСтроки[0];
		//КонецЕсли;
		//Элементы.ДанныеРегистраСведений.ТекущаяСтрока = ТребуемаяСтрока.ПолучитьИдентификатор();
		ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
		
		Элементы.НаборПравилОтражения.ТекущаяСтрока = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",ТекущиеДанные.Идентификатор))[0].ПолучитьИдентификатор();
		//Элементы.ГруппыПравил.ТекущаяСтрока = Неопределено;
		
		ТекущиеДанныеПравила = Элементы.НаборПравилОтражения.ТекущиеДанные;
		мВидДанных 	= ТекущиеДанныеПравила.ВидДанных;
		мИсточник 	= ТекущиеДанныеПравила.ИмяИсточника;
		
		Элементы.ПредставлениеИсточника.ТолькоПросмотр = (ТекущиеДанныеПравила.ВидДанных=ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента")); 
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник) И ТипЗнч(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда
			Статья = ЗаписьРегистраСведений.ФинансовыйПоказательИсточник;
			ПереченьРазрезовПоСтатье = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(Статья);
			Элементы.ГруппаКоличество.Доступность 		= КоличественныйУчет(Статья);
			Элементы.ГруппаСумма.Доступность 			= СуммовойУчет(Статья);
			Элементы.ГруппаВалютаОперации.Доступность 	= СуммовойУчет(Статья);
			НаборПоказателей.Добавить("Сумма",,СуммовойУчет(Статья));
			НаборПоказателей.Добавить("Количество",,КоличественныйУчет(Статья));
		Иначе
			ПереченьРазрезовПоСтатье = Неопределено;
			Элементы.ГруппаКоличество.Доступность 		= Истина;
			Элементы.ГруппаСумма.Доступность 			= Истина;
			Элементы.ГруппаВалютаОперации.Доступность 	= Истина;
			НаборПоказателей.Добавить("Сумма",,Истина);
			НаборПоказателей.Добавить("Количество",,Истина);
		КонецЕсли;
		Если ТекущиеДанныеПравила.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда")
			ИЛИ ТекущиеДанныеПравила.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон") Тогда
			Элементы.Условие.Доступность = Ложь;
		Иначе
			Элементы.Условие.Доступность = Истина;
		КонецЕсли;
		ОбновитьЭлементы();
		
		Если ТекущиеДанныеПравила.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда")
			ИЛИ ТекущиеДанныеПравила.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон") Тогда
			Элементы.Условие.Доступность = Ложь;
		Иначе
			Элементы.Условие.Доступность = Истина;
		КонецЕсли;
		ПредставлениеГруппы = Элементы.ГруппыПравил.ТекущиеДанные.Представление;
		
		ОсновнаяГруппа = НРег(ПредставлениеГруппы) = НРег("Основная");
	 	Элементы.ВидДанных.Доступность 			= ОсновнаяГруппа;
		Элементы.ПредставлениеИсточника.Доступность= ОсновнаяГруппа;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	Если Объект.Владелец.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед добавлением правил необходимо указать вид документов!");
		Возврат;
	КонецЕсли;
	ТекстГруппа="";
	ОписаниеОповещенияОбработатьВводНазванияНовойГруппы = Новый ОписаниеОповещения("ОбработатьВводНазванияНовойГруппы",ЭтотОбъект);
	общ_ОбщегоНазначенияКлиент.мПоказатьВводСтроки(ЭтотОбъект,ОписаниеОповещенияОбработатьВводНазванияНовойГруппы,ТекстГруппа,"Укажите наименование группы",150);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПравило(Команда)
	//Если Объект.Ссылка.Пустая() Тогда
	//	Ответ=Вопрос("Перед добавлением правила элемент справочника необходимо записать. Записать?",РежимДиалогаВопрос.ДаНет);
	//	Если Ответ=КодВозвратаДиалога.Да Тогда
	//		Если НЕ ЗаписатьОбъект() Тогда
	//			Возврат;
	//		КонецЕсли;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	Если Объект.Владелец.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед добавлением правила необходимо указать вид документов!");
		Возврат;
	КонецЕсли;
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ТекстПравило="";
	ИдентификаторГруппы="";
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указана группа правил, в которую необходимо добавить правило!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ИдентификаторГруппы = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
		СтрокаГруппы = Элементы.ДеревоНавигации.ТекущиеДанные;
	Иначе
		СтрокаГруппы = Элементы.ДеревоНавигации.ТекущиеДанные.ПолучитьРодителя();
		ИдентификаторГруппы = СтрокаГруппы.Идентификатор;
	КонецЕсли;
	ОписаниеОповещенияОбработатьВводНазванияНовогоПравила = Новый ОписаниеОповещения("ОбработатьВводНазванияНовогоПравила",ЭтотОбъект,Новый Структура("ИдентификаторГруппы,СтрокаГруппы",ИдентификаторГруппы,СтрокаГруппы));
	общ_ОбщегоНазначенияКлиент.мПоказатьВводСтроки(ЭтотОбъект,ОписаниеОповещенияОбработатьВводНазванияНовогоПравила,ТекстПравило,"Укажите наименование правила",250);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Команда)
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указано правило для удаления!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ПоказатьПредупреждение(,"Не указано правило для удаления!");
		Возврат;
	КонецЕсли;
    Идентификатор = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
	СтрокиУдалить = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",Идентификатор));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.НаборПравилОтражения.Удалить(СтрокаУдалить);
	КонецЦикла;
	СтрокиУдалить = ДанныеРегистраСведений.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		ДанныеРегистраСведений.Удалить(СтрокаУдалить);
	КонецЦикла;
	Модифицированность=Истина;
	ЗаполнитьДерево();
	Если Объект.НаборПравилОтражения.Количество()>0 Тогда
		Найден = Ложь;
		Для Каждого Элемент Из ДеревоНавигации.ПолучитьЭлементы() Цикл
			Для Каждого ВложенныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
				Элементы.ДеревоНавигации.ТекущаяСтрока = ВложенныйЭлемент.ПолучитьИдентификатор();
				Найден = Истина;
				Прервать;
			КонецЦикла;
			Если Найден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГруппу(Команда)
	ИдентификаторГруппы="";
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указана группа правил для удаления!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ИдентификаторГруппы = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
		УдалитьИнформациюПоГруппе(ИдентификаторГруппы);
	Иначе
		ПоказатьПредупреждение(,"Не указана группа правил для удаления!");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Переименовать(Команда)
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ТекстГруппа="";
	ИдентификаторГруппы="";
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указана группа правил, которую необходимо переименовать!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ИдентификаторГруппы = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
		СтрокаГруппы = Элементы.ДеревоНавигации.ТекущиеДанные;
		Если СтрокаГруппы.Представление = "Основная" Тогда
			ПоказатьПредупреждение(,"Основную группу правил нельзя переименовать!");
			Возврат;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Не указана группа правил, которую необходимо переименовать!");
		Возврат;
	КонецЕсли;
	ОбработчикОповещенияОбработатьПереименованиеГруппы = Новый ОписаниеОповещения("ОбработатьПереименованиеГруппы",ЭтотОбъект,Новый Структура("ИдентификаторГруппы,СтрокаГруппы",ИдентификаторГруппы,СтрокаГруппы));
	общ_ОбщегоНазначенияКлиент.мПоказатьВводСтроки(ЭтотОбъект,ОбработчикОповещенияОбработатьПереименованиеГруппы,ТекстГруппа,"Укажите название группы правил",250);
КонецПроцедуры

&НаКлиенте
Процедура КопироватьПравило(Команда)
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ТекстПравило="";
	ИдентификаторГруппы="";
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указано копируемое правило!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ПоказатьПредупреждение(,"Не указано копируемое правило!");
		Возврат;
	Иначе
		СтрокаЭлемент = Элементы.ДеревоНавигации.ТекущиеДанные;
		Идентификатор = СтрокаЭлемент.Идентификатор;
		СтрокаГруппы = Элементы.ДеревоНавигации.ТекущиеДанные.ПолучитьРодителя();
		ИдентификаторГруппы = СтрокаГруппы.Идентификатор;
	КонецЕсли;
	КопируемаяСтрокаТЧ = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",Идентификатор))[0];
	НоваяСтрока = Объект.НаборПравилОтражения.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,КопируемаяСтрокаТЧ);
	НоваяСтрока.ИдентификаторСтроки = ИдентификаторГруппы;
	НоваяСтрока.БазовыйИдентификатор = МаксимальныйИдентификатор;
	Пока Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",НоваяСтрока.БазовыйИдентификатор)).Количество() >1 Цикл
		ПрисвоитьИдентификатор(НоваяСтрока.БазовыйИдентификатор);
	КонецЦикла;
	МаксимальныйИдентификатор = НоваяСтрока.БазовыйИдентификатор;
	ТекстПравило = НоваяСтрока.Комментарий+" (копия)";
	//Если ВвестиСтроку(ТекстПравило,"Укажите наименование правила",250) Тогда
	//	НоваяСтрока.Комментарий = ТекстПравило;
	//КонецЕсли;
	СтрокаДерева = СтрокаГруппы.ПолучитьЭлементы().Добавить();
	СтрокаДерева.Представление	= ТекстПравило;
	СтрокаДерева.Идентификатор	= НоваяСтрока.БазовыйИдентификатор;
	СтрокаДерева.ТипСтроки 		= "Правило";
	Элементы.ДеревоНавигации.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	ПолучитьЗаписьРегистра(НоваяСтрока.БазовыйИдентификатор);
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ЗаписьРегистраСведений,ДанныеРегистраСведений.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор))[0]);
	ЗаписьРегистраСведений.ИдентификаторСтроки = НоваяСтрока.БазовыйИдентификатор;
	Модифицированность = Истина;
	Сохранить = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрано правило!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ПоказатьПредупреждение(,"Не выбрано правило!");
		Возврат;
	КонецЕсли;
    Идентификатор = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
	СтрокиПереместить = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",Идентификатор));
	Для Каждого СтрокаПереместить Из СтрокиПереместить Цикл
		Если НЕ Объект.НаборПравилОтражения.Индекс(СтрокаПереместить)=0 Тогда
			Объект.НаборПравилОтражения.Сдвинуть(Объект.НаборПравилОтражения.Индекс(СтрокаПереместить),-1);
		КонецЕсли;
	КонецЦикла;
	Модифицированность=Истина;
	ЗаполнитьДерево();
	Если Объект.НаборПравилОтражения.Количество()>0 Тогда
		Найден = Ложь;
		Для Каждого Элемент Из ДеревоНавигации.ПолучитьЭлементы() Цикл
			Для Каждого ВложенныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
				Если ВложенныйЭлемент.Идентификатор = Идентификатор Тогда
					Элементы.ДеревоНавигации.ТекущаяСтрока = ВложенныйЭлемент.ПолучитьИдентификатор();
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Найден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрано правило!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ПоказатьПредупреждение(,"Не выбрано правило!");
		Возврат;
	КонецЕсли;
    Идентификатор = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
	СтрокиПереместить = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",Идентификатор));
	Для Каждого СтрокаПереместить Из СтрокиПереместить Цикл
		Если НЕ Объект.НаборПравилОтражения.Индекс(СтрокаПереместить)=Объект.НаборПравилОтражения.Количество()-1 Тогда
			Объект.НаборПравилОтражения.Сдвинуть(Объект.НаборПравилОтражения.Индекс(СтрокаПереместить),1);
		КонецЕсли;
	КонецЦикла;
	Модифицированность=Истина;
	ЗаполнитьДерево();
	Если Объект.НаборПравилОтражения.Количество()>0 Тогда
		Найден = Ложь;
		Для Каждого Элемент Из ДеревоНавигации.ПолучитьЭлементы() Цикл
			Для Каждого ВложенныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
				Если ВложенныйЭлемент.Идентификатор = Идентификатор Тогда
					Элементы.ДеревоНавигации.ТекущаяСтрока = ВложенныйЭлемент.ПолучитьИдентификатор();
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Найден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	Если Элементы.ДеревоНавигации.ТекущиеДанные=Неопределено Тогда
		ПоказатьПредупреждение(,"Не указано правило для перемещения!");
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоНавигации.ТекущиеДанные.ТипСтроки = "Группа" Тогда
		ПоказатьПредупреждение(,"Не указано правило для перемещения!");
		Возврат;
	КонецЕсли;
	Идентификатор = Элементы.ДеревоНавигации.ТекущиеДанные.Идентификатор;
	СписокГрупп = Новый СписокЗначений;
	//СписокГрупп.Добавить("Основная");
	Для Каждого СтрокаГруппы Из Объект.ГруппыПравил Цикл
		СписокГрупп.Добавить(СтрокаГруппы.ИдентификаторСтроки,СтрокаГруппы.Представление);
	КонецЦикла;
	РезультатВыбора = СписокГрупп.ВыбратьЭлемент("Выберите группу");
	Если РезультатВыбора<>Неопределено Тогда
		СтрокиПереместить = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",Идентификатор));
		Для Каждого СтрокаПереместить Из СтрокиПереместить Цикл
			СтрокаПереместить.ИдентификаторСтроки = РезультатВыбора.Значение;
		КонецЦикла;
		Модифицированность=Истина;
		ЗаполнитьДерево();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Элементы.НаборПравилОтражения.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрано заполняемое правило!");
		Возврат;
	КонецЕсли;

	Номер = Элементы.НаборПравилОтражения.ТекущиеДанные.НомерСтроки;
	ИдентификаторСтроки = Элементы.ДанныеРегистраСведений.ТекущиеДанные.ИдентификаторСтроки;
	ЗаполнитьШаблон(Номер,ИдентификаторСтроки);
	Элементы.ДанныеРегистраСведений.ТекущаяСтрока = ДанныеРегистраСведений.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки))[0].ПолучитьИдентификатор();
	ОбновитьЭлементы();
    УстановитьВидимость();
КонецПроцедуры //Заполнить


#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДерево()
	Дерево = РеквизитФормыВЗначение("ДеревоНавигации");
	Дерево.Строки.Очистить();
	Для Каждого СтрокаТаблицы Из Объект.ГруппыПравил Цикл
		СтрокаДерева = Дерево.Строки.Добавить();
		СтрокаДерева.Представление	= СтрокаТаблицы.Представление;
		СтрокаДерева.Идентификатор	= СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДерева.ТипСтроки 		= "Группа";
		СтрокиГруппы = Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаТаблицы.ИдентификаторСтроки));
		Для Каждого СтрокаГруппы из СтрокиГруппы Цикл
			СтрокаПравила = СтрокаДерева.Строки.Добавить();
			СтрокаПравила.Представление	= ?(СокрЛП(СтрокаГруппы.Комментарий)="","<...> (#"+СтрокаГруппы.БазовыйИдентификатор+")",СтрокаГруппы.Комментарий);
			СтрокаПравила.Идентификатор	= СтрокаГруппы.БазовыйИдентификатор;
			СтрокаПравила.ТипСтроки 	= "Правило";
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево,"ДеревоНавигации");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	ОриентировочныйПеречень = ?(ПереченьРазрезовПоСтатье=Неопределено,ПолныйПереченьРазрезов,ПереченьРазрезовПоСтатье);
	МассивОбработанных = Новый Массив;
	Для Каждого РазрезЭлемент Из ОриентировочныйПеречень Цикл
		ИмяЭлемента 			= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		ПредставлениеЭлемента 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезЭлемент.Значение);
		Элементы["Надпись"+ИмяЭлемента].Заголовок 	= ПредставлениеЭлемента;
		Элементы["Группа"+ИмяЭлемента].Видимость 	= Истина;
		МассивОбработанных.Добавить(ИмяЭлемента);
	КонецЦикла;
	Для Каждого Измерение Из МассивИзмерений Цикл
		Если МассивОбработанных.Найти(Измерение.Значение)= Неопределено Тогда
			Элементы["Группа"+Измерение.Значение].Видимость 	= Ложь;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Показатель Из НаборПоказателей Цикл
		Элементы["Группа"+Показатель.Значение].Доступность 	= Показатель.Пометка;
	КонецЦикла;
	НадписьБюджетныеДанные = "Бюджетные данные";
	НадписьГруппы = "Правила шаблона";
	НадписьПараметрыГруппы = "Параметры группы/правила";
	НадписьИсточник = "Источник заполнения";
	НадписьТипИсточника = "Тип источника";
	НадписьНастройкиПравила = "Настройки правила отражения";
КонецПроцедуры

//Процедура ЗаполнитьШаблон
//
&НаСервере
Процедура ЗаполнитьШаблон(Номер,ИдентификаторСтроки)
	Модифицированность=Истина;
	ТЗРегистра = РеквизитФормыВЗначение("ДанныеРегистраСведений");
	ЗаписьРегистраСведений = ТЗРегистра.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки))[0];
	ТекущиеДанные = Объект.НаборПравилОтражения.Получить(Номер-1);
	Если ТекущиеДанные = Неопределено Тогда
		Сообщить("Не указана заполняемая строка!");
		Возврат;
	КонецЕсли;
	ОриентировочныйПеречень = ?(ПереченьРазрезовПоСтатье=Неопределено,ПолныйПереченьРазрезов,ПереченьРазрезовПоСтатье);
	Если ТекущиеДанные.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
		Документ = Метаданные.Документы.Найти(ПрограммныйИдентификатор());
		Если Документ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента
			               |ИЗ
			               |	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
			               |ГДЕ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
			Запрос.УстановитьПараметр("ВидДокументов",Объект.Владелец);
			Выборка = Запрос.Выполнить().Выбрать();
			Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
				Измерение = ИзмерениеЭлемент.Значение;
				Если ОриентировочныйПеречень.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение])=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Измерение,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
				Для Каждого Реквизит Из Документ.Реквизиты Цикл
					Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0 Тогда
						 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
						 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
						 Найден = Истина;
						 Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Измерение+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
			Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
				Показатель = ПоказательЭлемент.Значение;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Показатель,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
				Реквизит = Документ.Реквизиты.Найти(Показатель);
				Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
					ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
					Найден = Истина;
					Прервать;
				КонецЕсли;
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0 Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Показатель+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
		Если ТекущиеДанные.ИмяИсточника = "" Тогда
			Сообщить("Не выбрана табличная часть!");
			Возврат;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти(ПрограммныйИдентификатор());
		Если Документ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента
			               |ИЗ
			               |	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
			               |ГДЕ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
			Запрос.УстановитьПараметр("ВидДокументов",Объект.Владелец);
			Выборка = Запрос.Выполнить().Выбрать();
			Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
				Измерение = ИзмерениеЭлемент.Значение;
				Если ОриентировочныйПеречень.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение])=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Измерение,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
				Для Каждого Реквизит Из Документ.ТабличныеЧасти[ТекущиеДанные.ИмяИсточника].Реквизиты Цикл
					Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0 Тогда
						 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
						 ЗаписьРегистраСведений[Измерение+"Источник"] 	= ТекущиеДанные.ИмяИсточника+":"+Реквизит.Имя;
						 Найден = Истина;
						 Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0 Тогда
							 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ТекущиеДанные[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Измерение+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
			Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
				Показатель = ПоказательЭлемент.Значение;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Показатель,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
				Реквизит = Документ.ТабличныеЧасти[ТекущиеДанные.ИмяИсточника].Реквизиты.Найти(Показатель);
				Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
					ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
					ЗаписьРегистраСведений[Показатель+"Источник"] 	= ТекущиеДанные.ИмяИсточника+":"+Реквизит.Имя;
					Найден = Истина;
				КонецЕсли;
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.ТабличныеЧасти[ТекущиеДанные.ИмяИсточника].Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= ТекущиеДанные.ИмяИсточника+":"+Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					Реквизит = Документ.Реквизиты.Найти(Показатель);
					Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
						ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
						ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
						Найден = Истина;
					КонецЕсли;
				КонецЕсли;	
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Показатель+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
		Если ТекущиеДанные.ИмяИсточника = "" Тогда
			Сообщить("Не выбран набор движений!");
			Возврат;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти(ПрограммныйИдентификатор());
		Если Документ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента
			               |ИЗ
			               |	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
			               |ГДЕ
			               |	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
			Запрос.УстановитьПараметр("ВидДокументов",Объект.Владелец);
			Выборка = Запрос.Выполнить().Выбрать();
			ИмяРегистра = Сред(ТекущиеДанные.ИмяИсточника,Найти(ТекущиеДанные.ИмяИсточника,".")+1);
			ОбъектПоиска = Метаданные["Регистры"+?(Найти(ТекущиеДанные.ИмяИсточника,"Сведений.")<>0,"Сведений",?(Найти(ТекущиеДанные.ИмяИсточника,"Накопления.")<>0,"Накопления",?(Найти(ТекущиеДанные.ИмяИсточника,"Бухгалтерии.")<>0,"Бухгалтерии","Расчета")))].Найти(ИмяРегистра);
			Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
				Измерение = ИзмерениеЭлемент.Значение;
				Если ОриентировочныйПеречень.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение])=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Измерение,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
		
				Если ОбъектПоиска <> Неопределено Тогда
					Для Каждого Реквизит Из ОбъектПоиска.Измерения Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
							 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не Найден Тогда
						Для Каждого Реквизит Из ОбъектПоиска.Ресурсы Цикл
							Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
								 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
								 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
								 Найден = Истина;
								 Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если Не Найден Тогда
						Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
							Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
								 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
								 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
								 Найден = Истина;
								 Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
		
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
							 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Измерение+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Измерение+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Измерение+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
			Для Каждого текПоказатель Из НаборПоказателей Цикл
				Показатель = текПоказатель.Значение;
				НадлежащийТип 	= Новый Массив;
				ИмяСправочника 	= Новый Массив;
				фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Показатель,ИмяСправочника,НадлежащийТип);
				Найден = Ложь;
				Если ОбъектПоиска <> Неопределено Тогда
					Реквизит = ОбъектПоиска.Ресурсы.Найти(Показатель);
					Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
						ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
						ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
						Найден = Истина;
					КонецЕсли;
					Если Не Найден Тогда
						Реквизит = ОбъектПоиска.Реквизиты.Найти(Показатель);
						Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
							ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
							ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
							Найден = Истина;
						КонецЕсли;
					КонецЕсли;
					Если Не Найден Тогда
						Для Каждого Реквизит Из ОбъектПоиска.Измерения Цикл
							Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
								ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
								ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
								Найден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не Найден Тогда
							Для Каждого Реквизит Из ОбъектПоиска.Ресурсы Цикл
								Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
									ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
									ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если Не Найден Тогда
							Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
								Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
									ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения;
									ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Не Найден Тогда
					Реквизит = Документ.Реквизиты.Найти(Показатель);
					Если Реквизит <> Неопределено И фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) Тогда
						ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
						ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
						Найден = Истина;
					КонецЕсли;
				КонецЕсли;	
				Если Не Найден Тогда
					Для Каждого Реквизит Из Документ.Реквизиты Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Реквизит.Тип,НадлежащийТип) И Найти(Реквизит.Имя,"Субконто")=0  Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Реквизит.Имя;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
							 ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования;
							 ЗаписьРегистраСведений[Показатель+"Источник"] 	= Выборка.РеквизитДокумента;
							 Найден = Истина;
							 Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					ЗаписьРегистраСведений[Показатель+"ТипИсточника"] = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента;
					ЗаписьРегистраСведений[Показатель+"Источник"] = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник) И ТипЗнч(ЗаписьРегистраСведений.ФинансовыйПоказательИсточник)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда
		Если НЕ ЗаписьРегистраСведений.ФинансовыйПоказательИсточник.УчетПоКоличеству Тогда
			ЗаписьРегистраСведений.КоличествоИсточник = Неопределено;
		КонецЕсли;
		Если НЕ ЗаписьРегистраСведений.ФинансовыйПоказательИсточник.УчетПоСумме Тогда
			ЗаписьРегистраСведений.СуммаИсточник = Неопределено;
			ЗаписьРегистраСведений.ВалютаИсточник = Неопределено;
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТЗРегистра,"ДанныеРегистраСведений");
КонецПроцедуры //ЗаполнитьШаблон

&НаСервере
Процедура ДополнитьТабличнымиЧастямиДокумента(СписокВыбораИсточников)
	ИмяДокумента = ПрограммныйИдентификатор();
	Документ = Метаданные.Документы.Найти(ИмяДокумента);
	Если Документ <> Неопределено Тогда
		Для Каждого ТабличнаяЧасть Из Документ.ТабличныеЧасти Цикл
			СписокВыбораИсточников.Добавить(ТабличнаяЧасть.Имя,ТабличнаяЧасть.Синоним);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьДвижениямиДокумента(СписокВыбораИсточников)
	ИмяДокумента = ПрограммныйИдентификатор();
	Документ = Метаданные.Документы.Найти(ИмяДокумента);
	Если Документ <> Неопределено Тогда
		Для Каждого Движение Из Документ.Движения Цикл
			СписокВыбораИсточников.Добавить(Движение.ПолноеИмя(),Движение.Синоним);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводНазванияНовойГруппы(ТекстГруппа,ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекстГруппа) Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ГруппыПравил.НайтиСтроки(Новый Структура("Представление",ТекстГруппа)).Количество()=0 Тогда
		НоваяСтрока = Объект.ГруппыПравил.Добавить();
		НоваяСтрока.Представление = ТекстГруппа;
		Если НоваяСтрока.ИдентификаторСтроки="" Тогда
			НоваяСтрока.ИдентификаторСтроки = "1";
			Пока Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",НоваяСтрока.ИдентификаторСтроки)).Количество() >1 Цикл
				ПрисвоитьИдентификатор(НоваяСтрока.ИдентификаторСтроки);
			КонецЦикла;
		КонецЕсли;
		СтрокаДерева = ДеревоНавигации.ПолучитьЭлементы().Добавить();
		СтрокаДерева.Представление	= ТекстГруппа;
		СтрокаДерева.Идентификатор	= НоваяСтрока.ИдентификаторСтроки;
		СтрокаДерева.ТипСтроки 		= "Группа";
		Элементы.ДеревоНавигации.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПоказатьПредупреждение(,"Группа с указанным наименованием уже существует!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводНазванияНовогоПравила(ТекстПравило,ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекстПравило) Тогда
		Возврат;
	КонецЕсли;
	Если Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("Комментарий",ТекстПравило)).Количество()=0 Тогда
		ИдентификаторГруппы = ДополнительныеПараметры.ИдентификаторГруппы;
		СтрокаГруппы = ДополнительныеПараметры.СтрокаГруппы;
		НоваяСтрока = Объект.НаборПравилОтражения.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторГруппы;
		НоваяСтрока.Комментарий = ТекстПравило;
		Если НоваяСтрока.БазовыйИдентификатор="" Тогда
			НоваяСтрока.БазовыйИдентификатор = МаксимальныйИдентификатор;
			Пока Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",НоваяСтрока.БазовыйИдентификатор)).Количество() >1 Цикл
				ПрисвоитьИдентификатор(НоваяСтрока.БазовыйИдентификатор);
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока.ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента");
		НоваяСтрока.СпособИспользования = ПредопределенноеЗначение("Перечисление.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда");
		ОсновнаяГруппа = НРег(СтрокаГруппы.Представление) = НРег("Основная");
		Если НЕ ОсновнаяГруппа Тогда
			Если Элементы.ГруппыПравил.ТекущиеДанные=Неопределено Тогда
				СтрокиГруппы = Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторГруппы));
				Элементы.ГруппыПравил.ТекущаяСтрока = СтрокиГруппы[0].ПолучитьИдентификатор();
			КонецЕсли;
			НоваяСтрока.ВидДанных					= Элементы.ГруппыПравил.ТекущиеДанные.ВидДанных;
			НоваяСтрока.ИмяИсточника				= Элементы.ГруппыПравил.ТекущиеДанные.ИмяИсточника;
			НоваяСтрока.ПредставлениеИсточника		= Элементы.ГруппыПравил.ТекущиеДанные.ПредставлениеИсточника;
		КонецЕсли;
		МаксимальныйИдентификатор = НоваяСтрока.БазовыйИдентификатор;
		СтрокаДерева = СтрокаГруппы.ПолучитьЭлементы().Добавить();
		СтрокаДерева.Представление	= ТекстПравило;
		СтрокаДерева.Идентификатор	= НоваяСтрока.БазовыйИдентификатор;
		СтрокаДерева.ТипСтроки 		= "Правило";
		Элементы.ДеревоНавигации.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		//НЗ = ДанныеРегистраСведений.Добавить();
		//НЗ.ИдентификаторСтроки = НоваяСтрока.БазовыйИдентификатор;
		//Элементы.ДанныеРегистраСведений.ТекущаяСтрока = НЗ.ПолучитьИдентификатор();
		ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
		Для Каждого ИзмерениеЭлемент Из МассивИзмерений Цикл
			Измерение = ИзмерениеЭлемент.Значение;
			ЗаписьРегистраСведений[Измерение+"ТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
		КонецЦикла;
		Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
			Показатель = ПоказательЭлемент.Значение;
			ЗаписьРегистраСведений[Показатель+"ТипИсточника"]= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
		КонецЦикла;
		ЗаписьРегистраСведений["ВалютаТипИсточника"]	= ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента");
		ОбновитьЭлементы();
		Сохранить=Истина;
		Модифицированность=Истина;
	Иначе
		ПоказатьПредупреждение(,"Правило с идентичным комментарием уже существует!");
	КонецЕсли;
КонецПроцедуры

// Процедура присвоения идентификатора
//
Процедура ПрисвоитьИдентификатор(Идентификатор) Экспорт
	Цифра = Число(Идентификатор);
	Цифра = Цифра + 1;
	Идентификатор = Строка(Цифра);
КонецПроцедуры //ПрисвоитьИдентификатор

&НаСервере
Процедура ВыполнитьКонтроль()
	мЭтотОбъект = РеквизитФормыВЗначение("Объект");	
	мЭтотОбъект.КонтрольЗаписейПараметров();
КонецПроцедуры

&НаСервере
Процедура УдалитьИнформациюПоГруппе(Идентификатор)
	Для Каждого СтрокаГруппа Из Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор)) Цикл
		Объект.ГруппыПравил.Удалить(СтрокаГруппа);
	КонецЦикла;
	Для Каждого СтрокаПравило Из Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор)) Цикл
		Объект.НаборПравилОтражения.Удалить(СтрокаПравило);
	КонецЦикла;
	Дерево = РеквизитФормыВЗначение("ДеревоНавигации");
	Для Каждого СтрокаПравило Из Дерево.Строки.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор)) Цикл
		Дерево.Строки.Удалить(СтрокаПравило);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево,"ДеревоНавигации");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереименованиеГруппы(ТекстГруппа,ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекстГруппа) Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ГруппыПравил.НайтиСтроки(Новый Структура("Представление",ТекстГруппа)).Количество()=0 Тогда
		ИдентификаторГруппы = ДополнительныеПараметры.ИдентификаторГруппы;
		СтрокаГруппы = ДополнительныеПараметры.СтрокаГруппы;
		СтрокаГруппы.Представление = ТекстГруппа;
		мСтрока = Объект.ГруппыПравил.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторГруппы))[0];
		мСтрока.Представление = ТекстГруппа;
		Сохранить=Истина;
		Модифицированность=Истина;
	Иначе
		ПоказатьПредупреждение(,"Группа с указанным наименованием уже существует!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КоличественныйУчет(ФинансовыйПоказатель)
	Возврат ФинансовыйПоказатель.УчетПоКоличеству;	
КонецФункции

&НаСервере
Функция СуммовойУчет(ФинансовыйПоказатель)
	Возврат ФинансовыйПоказатель.УчетПоСумме;	
КонецФункции

&НаКлиенте
Процедура ОбнулитьЗаписьРегистра()
	ПолучитьЗаписьРегистра("");
	//КлючЗаписи = РегистрыСведений.фин_ПараметрыШаблоновОтраженияФактическихДанных.СоздатьМенеджерЗаписи();
	//КлючЗаписи.ИдентификаторСтроки = "";
	//КлючЗаписи.Шаблон = Объект.Ссылка;
	//КлючЗаписи.Прочитать();
	//Если НЕ КлючЗаписи.Выбран() Тогда
	//	КлючЗаписи.ИдентификаторСтроки = "";
	//	КлючЗаписи.Шаблон = Объект.Ссылка;
	//КонецЕсли;
	//ЗначениеВРеквизитФормы(КлючЗаписи,"ЗаписьРегистраСведений");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаписьРегистра(ИдентификаторСтроки)
	НайденныеСтроки = ДанныеРегистраСведений.НайтиСтроки(Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки));
	Если НайденныеСтроки.Количество()=0 Тогда
		ТребуемаяСтрока = ДанныеРегистраСведений.Добавить();
		ТребуемаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
	Иначе
		ТребуемаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	Элементы.ДанныеРегистраСведений.ТекущаяСтрока = ТребуемаяСтрока.ПолучитьИдентификатор();
	//КлючЗаписи = РегистрыСведений.фин_ПараметрыШаблоновОтраженияФактическихДанных.СоздатьМенеджерЗаписи();
	//КлючЗаписи.ИдентификаторСтроки = ИдентификаторСтроки;
	//КлючЗаписи.Шаблон = Объект.Ссылка;
	//КлючЗаписи.Прочитать();
	//Если НЕ КлючЗаписи.Выбран() Тогда
	//	КлючЗаписи.ИдентификаторСтроки = ИдентификаторСтроки;
	//	КлючЗаписи.Шаблон = Объект.Ссылка;
	//КонецЕсли;
	//ЗначениеВРеквизитФормы(КлючЗаписи,"ЗаписьРегистраСведений");
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаписьРегистра()
	НаборЗаписейРегистра = РегистрыСведений.Удалить_фин_ПараметрыШаблоновОтраженияФактическихДанных.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Шаблон.Значение = Объект.Ссылка;
	НаборЗаписейРегистра.Отбор.Шаблон.Использование = Истина;
	Для Каждого СтрокаДляЗаписи Из ДанныеРегистраСведений Цикл
		Если Объект.НаборПравилОтражения.НайтиСтроки(Новый Структура("БазовыйИдентификатор",СтрокаДляЗаписи.ИдентификаторСтроки)).Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаДляЗаписи);
		НоваяЗапись.Шаблон = Объект.Ссылка;
	КонецЦикла;
	Попытка
		НаборЗаписейРегистра.Записать();
	Исключение
		Сообщить("При сохранении данных шаблона произошли ошибки: "+ОписаниеОшибки(),СтатусСообщения.Важное);
	КонецПопытки;
	Сохранить = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьПанели(Доступность)
	Для Каждого Измерение Из МассивИзмерений Цикл
		Элементы["Группа"+Измерение.Значение].Доступность 	= Доступность;
	КонецЦикла;
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("ФинансовыйПоказатель");
	ДополнительныеПоля.Добавить("Количество");
	ДополнительныеПоля.Добавить("Сумма");
	ДополнительныеПоля.Добавить("ВалютаОперации");
	Для Каждого Измерение Из ДополнительныеПоля Цикл
		Элементы["Группа"+Измерение].Доступность 	= Доступность;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементы()
	БазоваяСтрока = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Для Каждого ПоказательЭлемент Из НаборПоказателей Цикл
		Показатель = ПоказательЭлемент.Значение;
		Элементы[Показатель+"Источник"].РедактированиеТекста= Ложь;
		Если БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") 
			ИЛИ БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") 
			ИЛИ БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("Строка");
		ИначеЕсли БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования");	
		ИначеЕсли БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования");	
		Иначе
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].РедактированиеТекста= Истина;
			КЧ = Новый КвалификаторыЧисла(15,?(Показатель="Сумма",2,3));
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
			Элементы[Показатель+"Источник"].ОграничениеТипа        = ОписаниеТиповЧ;
		КонецЕсли;
	КонецЦикла;
	мОриентировочныйПеречень = ?(ПереченьРазрезовПоСтатье=Неопределено,ПолныйПереченьРазрезов,ПереченьРазрезовПоСтатье);
	пОриентировочныйПеречень = Новый СписокЗначений;
	пОриентировочныйПеречень.ЗагрузитьЗначения(мОриентировочныйПеречень.ВыгрузитьЗначения());
	пОриентировочныйПеречень.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель"));
	пОриентировочныйПеречень.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Валюта"));
	Для Каждого РазрезЭлемент Из пОриентировочныйПеречень Цикл
		Показатель 			= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		Разрез = Показатель;//РазрезЭлемент.Значение;
		Элементы[Показатель+"Источник"].РедактированиеТекста= Ложь;
		Если БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") 
			ИЛИ БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") 
			ИЛИ БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("Строка");
		ИначеЕсли БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования");	
		ИначеЕсли БазоваяСтрока[Показатель+"ТипИсточника"]=ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа     = Новый ОписаниеТипов("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования");	
		Иначе
			Элементы[Показатель+"Источник"].ВыбиратьТип			= Ложь;
			Элементы[Показатель+"Источник"].ОграничениеТипа        = ОпределитьОписаниеТиповДляРазреза(Разрез,НаборПоказателей,КЭШ_Разрезы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ОбновитьЭлементы

&НаСервереБезКонтекста
Функция ОпределитьОписаниеТиповДляРазреза(Разрез,НаборПоказателей,КЭШ_Разрезы)
	Возврат ?(Разрез="Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"),?(Разрез="ФинансовыйПоказатель",Новый ОписаниеТипов("Справочникссылка.фин_ФинансовыеПоказатели"),?(НаборПоказателей.НайтиПоЗначению(Разрез)=Неопределено,фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Разрез),КЭШ_Разрезы).ТипЗначения,Новый ОписаниеТипов("Число"))));	
КонецФункции

&НаКлиенте
Процедура ПроцедураОбработчкиОповещенияВыбора(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
		Если ДополнительныеПараметры.Свойство("ВыбиратьПуть") И ДополнительныеПараметры.ВыбиратьПуть = Истина Тогда
			ОбновитьОтображениеДанных();
			Если Результат <> Неопределено Тогда
				Если ДополнительныеПараметры.Свойство("ПоИмениЭлемента") И ДополнительныеПараметры.ПоИмениЭлемента = Истина Тогда
					ЗаписьРегистраСведений[ДополнительныеПараметры.Элемент.Имя] = Результат.Путь;
				Иначе
					ЗаписьРегистраСведений[ДополнительныеПараметры.Разрез+"Источник"] = Результат.Путь;
				КонецЕсли;
				ИсточникПриИзменении(ДополнительныеПараметры.Элемент);
			КонецЕсли;
		Иначе
			Если ДополнительныеПараметры.Свойство("ПоИмениЭлемента") И ДополнительныеПараметры.ПоИмениЭлемента = Истина Тогда
				Описание =  Новый ОписаниеТипов("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования");
				ДополнительныеПараметры.Элемент.ОграничениеТипа = Описание;
			КонецЕсли;
			ЗаписьРегистраСведений[ДополнительныеПараметры.Разрез+"Источник"]=Результат;
			ИсточникПриИзменении(ДополнительныеПараметры.Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитЗначения(Значение,ИмяРеквизита)
	Возврат Значение[ИмяРеквизита];	
КонецФункции

&НаСервере
Функция СписокДополнительныхРеквизитов(ВидДокументов,НадлежащийТип)
	СписокВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента
	|ИЗ
	|	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
	|ГДЕ
	|	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
	Запрос.УстановитьПараметр("ВидДокументов",ВидДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,НадлежащийТип) Тогда
			СписокВыбора.Добавить(Выборка.РеквизитДокумента);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаСервере
Процедура УстановитьТипПоля(Разрез,ИмяСправочника,НадлежащийТип)
	фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Разрез,ИмяСправочника,НадлежащийТип);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПростойТипРазреза(Т_Разрез,ПлановаяНоменклатура,КЭШ_Разрезы)
	Если Т_Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		Типы = Новый Массив;
		Типы.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		Типы.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений());
		ОТ = Новый ОписаниеТипов(Типы);
		Возврат ОТ;
	КонецЕсли;
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПолучитьПростойТипРазреза(Т_Разрез,ПлановаяНоменклатура,КЭШ_Разрезы);	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументСуществует(ВидДокументов)
	Возврат Метаданные.Документы.Найти(ВидДокументов.ПрограммныйИдентификатор)<>Неопределено;	
КонецФункции

&НаСервере
Функция ПрограммныйИдентификатор()
	Возврат Объект.Владелец.ПрограммныйИдентификатор;	
КонецФункции

&НаКлиенте
Процедура ИсточникОткрытие(Элемент, СтандартнаяОбработка)
	ИмяЭлемента = Элемент.Имя;
	ДлинаСтроки = СтрДлина(ИмяЭлемента);
	Разрез 		= Лев(ИмяЭлемента,ДлинаСтроки-СтрДлина("Источник"));
	ЗаписьРегистраСведений = Элементы.ДанныеРегистраСведений.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений[Разрез+"ТипИсточника"]) Тогда
		Если ЗаписьРегистраСведений[Разрез+"ТипИсточника"] = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") Тогда
			СтандартнаяОбработка = Ложь;
			ОписаниеОповещенияОткрытия = Новый ОписаниеОповещения("ОбработчикОткрытияПоля",ЭтотОбъект,Новый Структура("Разрез,Идентификатор",Разрез,ЗаписьРегистраСведений.ПолучитьИдентификатор()));
			ПараметрыОткрытия = Новый Структура("ИмяПоля",ЗаписьРегистраСведений[Разрез+"Источник"]);
			ОткрытьФорму("Справочник.Удалить_фин_ШаблоныОтраженияФактическихДанныхПоБюджетам.Форма.ФормаОткрытияПоля",ПараметрыОткрытия,ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияОткрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытияПоля(РезультатОткрытия,ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия<>Неопределено Тогда
		ЗаписьРегистраСведений = ДанныеРегистраСведений.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		ЗаписьРегистраСведений[ДополнительныеПараметры.Разрез+"Источник"] = РезультатОткрытия;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Если Клиент Тогда
	КЭШ_Разрезы = Новый Соответствие;
#КонецЕсли
