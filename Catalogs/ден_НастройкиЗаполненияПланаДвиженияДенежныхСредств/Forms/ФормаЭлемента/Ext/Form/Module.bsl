&НаКлиенте
Перем ТекущийИсточникРасчета;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.СправочникПриСозданииНаСервере(ЭтаФорма);

	ПодготовитьФормуНаСервере();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекстОтборПриИзменении(Элемент)
	
	НастройкиОтбора = ПолучитьНастройкиОтбораСпискаДанных();
	
	Если ТипЗнч(НастройкиОтбора) = Тип("Строка") Тогда
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.НастройкиОтбора = НастройкиОтбора;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекстОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = "";
	
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ПлановыеДвиженияДенежныхСредств") Тогда
		ИмяРегистра = "ден_ПланыДвиженияДенежныхСредств";
	ИначеЕсли  Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ФактическиеДвиженияДенежныхСредств") Тогда
		ИмяРегистра = "ден_ДвиженияДенежныхСредств";
	ИначеЕсли  Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений") Тогда
		ИмяРегистра = ?(Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход"),"ден_ЗаявкиНаРасходованиеСредств","ден_ПланируемыеПоступленияДенежныхСредств");
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросаСпискаДанных(ИмяРегистра);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОбъединяемыеДанные

&НаКлиенте
Процедура ОбъединяемыеДанныеПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные <> Неопределено Тогда
		ТекущийИсточникРасчета = Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета;
		Элементы.ТекстОтбор.Доступность = Истина;
	Иначе
		Элементы.ТекстОтбор.Доступность = Ложь;
	КонецЕсли;
	ИмяРегистра = "";
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ПлановыеДвиженияДенежныхСредств") Тогда
		ИмяРегистра = "ден_ПланыДвиженияДенежныхСредств";
	ИначеЕсли  Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ФактическиеДвиженияДенежныхСредств") Тогда
		ИмяРегистра = "ден_ДвиженияДенежныхСредств";
	ИначеЕсли  Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений") Тогда
		ИмяРегистра = ?(Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход"),"ден_ЗаявкиНаРасходованиеСредств","ден_ПланируемыеПоступленияДенежныхСредств");
	Иначе
		ОчиститьТекстОтбора();
		Возврат;
	КонецЕсли;
	
	ПоказатьНастройкиОтбора(ИмяРегистра, Элементы.ОбъединяемыеДанные.ТекущиеДанные.НастройкиОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединяемыеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ОбъединяемыеДанные.ТекущиеДанные.ВидДенежныхСредств) И
		НЕ ЗначениеЗаполнено(Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход) Тогда
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.ВидДенежныхСредств 		= ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Наличные");
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход 				= ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход");
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета		= ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ПлановыеДвиженияДенежныхСредств");
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.СпособОпределенияПериода	= ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПланируемыйПериод");
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.КоэффициентРасчетаСуммы	= 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОбъединяемыеДанныеВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПриходРасход = Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход; 
	Если ПриходРасход = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход") Тогда
		ИмяТипа = "ПеречислениеСсылка.ден_ВидыОперацийПланируемоеПоступлениеДС";
	Иначе
		ИмяТипа = "ПеречислениеСсылка.ден_ВидыОперацийЗаявкиНаРасходование";
	КонецЕсли;	
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ИмяТипа);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОбъединяемыеДанныеПриходРасходПриИзменении(Элемент)
	
	ПриходРасход = Элементы.ОбъединяемыеДанные.ТекущиеДанные.ПриходРасход;
	
	Если ЗначениеЗаполнено(ПриходРасход) Тогда
		Если ПриходРасход = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход") Тогда
			ИмяТипа = "ПеречислениеСсылка.ден_ВидыОперацийПланируемоеПоступлениеДС";
		Иначе	
			ИмяТипа = "ПеречислениеСсылка.ден_ВидыОперацийЗаявкиНаРасходование";
		КонецЕсли;
		ОграничениеТипа = Новый ОписаниеТипов(ИмяТипа);
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.ВидОперации = ОграничениеТипа.ПривестиЗначение(Элементы.ОбъединяемыеДанные.ТекущиеДанные.ВидОперации);
	Иначе
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.ВидОперации = Неопределено;
	КонецЕсли;
	
	ДокументыПланированияРасходовПоступлений = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений");
	
	Если Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета = ДокументыПланированияРасходовПоступлений Тогда
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.НастройкиОтбора = "";
		ОчиститьТекстОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОбъединяемыеДанныеИсточникДанныхРасчетаПриИзменении(Элемент)
	
	Если ТекущийИсточникРасчета <> Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета Тогда
		ТекущийИсточникРасчета = Элементы.ОбъединяемыеДанные.ТекущиеДанные.ИсточникДанныхРасчета;
		Элементы.ОбъединяемыеДанные.ТекущиеДанные.НастройкиОтбора="";
		ОчиститьТекстОтбора();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	НадписьДанные 			= "Данные";
	НадписьОтбор 			= "Отбор";
	НадписьПараметрыРасчета = "Параметры расчета";
	НадписьРазрезыУчета 	= "Разрезы учета";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСпискаДанных(ИмяРегистра)

	СписокДанных.ТекстЗапроса = "ВЫБРАТЬ * ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(,,Период,) КАК " + ИмяРегистра;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтбораСпискаДанных()
	
	Возврат ЗначениеВСтрокуВнутр(СписокДанных.Отбор);
	
КонецФункции

&НаСервере
Процедура ПоказатьНастройкиОтбора(ИмяРегистра, СтрокаНастройки)

	СписокДанных.ТекстЗапроса = "ВЫБРАТЬ * ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(,,Период,) КАК " + ИмяРегистра;
	
	Если ЗначениеЗаполнено(СтрокаНастройки) И ТипЗнч(ЗначениеИзСтрокиВнутр(СтрокаНастройки))=Тип("ОтборКомпоновкиДанных") Тогда
		СкопироватьЭлементы(СписокДанных.Отбор, ЗначениеИзСтрокиВнутр(СтрокаНастройки));
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТекстОтбора()

	СписокДанных.Отбор.Элементы.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ТекущиеОбъединяемыеДанныеСпособОпределенияПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПланируемыйПериод"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПредшествующийПериод"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.Произвольный"));
	ДанныеВыбора = Список;
КонецПроцедуры
