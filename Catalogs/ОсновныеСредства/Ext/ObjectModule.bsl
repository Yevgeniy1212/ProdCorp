#Если Клиент Тогда

// Получает номер документа ввода принятия к учету. Используется в тех случаях, когда производится
// ввод начальных остатков основных средств.
//
// Параметры:
//   РегистраторВвода - ДокументСылка.ВводНачальныхОстатковОС.
//
// Возвращаемое значение:
//   Строка - Номер документа ввода начальных остатков.
//
Функция ПолучитьНомерДокументаВводаОС(РегистраторВвода)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистраторВвода", РегистраторВвода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковОСОС.НомерДокументаПринятияКУчетуРегл КАК НомерДокументаПринятияКУчету
	|ИЗ
	|	Документ.ВводНачальныхОстатковОС.ОС КАК ВводНачальныхОстатковОСОС
	|ГДЕ
	|	ВводНачальныхОстатковОСОС.Ссылка = &РегистраторВвода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерДокументаПринятияКУчету;
	Иначе 
		Возврат "";
	КонецЕсли;	
		
КонецФункции
	
// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ДА-2).
//
// Возвращаемое значение:
//  Табличный документ - печатная форма инвентарной карточки ОС.
//
Функция ПечатьДА2(Знач ДатаСведений, Знач Организация = Неопределено)
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДок = Новый ТабличныйДокумент();	
	Макет = ПолучитьОбщийМакет("ДА2");	
		
	//Последние сведения об ОС
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ДатаСведений"	, ДатаСведений);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("СубконтоОС"		, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК НормаАмортизации,
		|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокСлужбыПолезной,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокСлужбыНормативной,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.Изготовитель КАК СТРОКА(1000)) КАК ИзготовительОС,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.НомерПаспорта КАК СТРОКА(1000)) КАК НомерПаспорта,
		|	ВЫРАЗИТЬ(ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.ЗаводскойНомер КАК СТРОКА(1000)) КАК ЗаводскойНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|				&ДатаСведений,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Организация = &Организация";
	ТекущиеСведенияОС = Запрос.Выполнить().Выбрать();
	ТекущиеСведенияОС.Следующий();
	
	Если ТекущиеСведенияОС = Неопределено тогда
		ТекстСообщения = 
		"На момент печати основное средство не принималось к учету.
		|Нельзя сформировать инвентарную карточку объекта!";		
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);		
		Возврат Неопределено;		
	КонецЕсли;	
	
	// Заполнение сведений об организации, номера документа, даты составления и других полей	
	
	ЛицеваяСторона = Макет.ПолучитьОбласть("ЛицеваяСторона");
	
	СведенияОбОрганизации 							  = ОбщегоНазначения.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЛицеваяСторона.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ЛицеваяСторона.Параметры.ОрганизацияРНН_БИН		  = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ДатаСведений, Ложь, "");
	
	ЛицеваяСторона.Параметры.Подразделение = ТекущиеСведенияОС.Подразделение;
	ЛицеваяСторона.Параметры.МОЛ 		   = ТекущиеСведенияОС.МОЛ;
	
	ЛицеваяСторона.Параметры.ДатаДокумента  = Формат(ДатаСведений, "ДФ=dd.MM.yyyy");
	ЛицеваяСторона.Параметры.НомерДокумента = ТекущиеСведенияОС.ИнвентарныйНомер;
	
	ЛицеваяСторона.Параметры.ИзготовительАктива = Ссылка.Изготовитель;
		
	// Заполнение таблицы, которая расположена сверху и имеет 19 колонок
	
	ЛицеваяСторона.Параметры.НаименованиеАктива		 = ТекущиеСведенияОС.НаименованиеОС;
	ЛицеваяСторона.Параметры.ПервоначальнаяСтоимость = ТекущиеСведенияОС.ПервоначальнаяСтоимость;
	
	ДатаДокРегистратора = "";
	ДокРегистратор      = "";
	
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
	
	ДокументВводаДата 								= ДатаДокРегистратора;
	ДокументВводаНомер								= ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");	
	ЛицеваяСторона.Параметры.ДокументВводаДатаНомер = "№" + ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "") + " от " + Формат(ДокументВводаДата, "ДФ=dd.MM.yyyy");
	
	ЛицеваяСторона.Параметры.ГодВыпуска = Формат(ТекущиеСведенияОС.ГодВыпуска, "ДФ=yyyy");
	ЛицеваяСторона.Параметры.ИнвентарныйНомер = ТекущиеСведенияОС.ИнвентарныйНомер;
	ЛицеваяСторона.Параметры.ЗаводскойНомер = ТекущиеСведенияОС.ЗаводскойНомер;
	ЛицеваяСторона.Параметры.НомерПаспорта = ТекущиеСведенияОС.НомерПаспорта;
	
	ДатаДокРегистратора = "";
	ДокРегистратор      = "";
	
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.Поступило, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
	
	ПараметрыСостоянияПоступилоДата = ДатаДокРегистратора;
	
	ЛицеваяСторона.Параметры.ДокументПриобритенияНаименование = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");
	ЛицеваяСторона.Параметры.ДокументПриобритенияНомер 		  = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");
	ЛицеваяСторона.Параметры.ДокументПриобритенияДата		  = Формат(ДатаДокРегистратора, "ДФ=dd.MM.yyyy");;
	ЛицеваяСторона.Параметры.СрокПолезногоИспользования		  = ТекущиеСведенияОС.СрокСлужбыПолезной;
	
	СуммаНачисленнойАмортизации = "";
	ЛиквидационнаяСтоимость		= "";
	СтоимостьАмортизацияОС = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Организация, Ссылка, ДатаСведений);
	Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
		СуммаНачисленнойАмортизации = СтоимостьАмортизацияОС[0].АмортизацияБУ;
		ЛиквидационнаяСтоимость		= СтоимостьАмортизацияОС[0].ЛиквидационнаяСтоимостьБУ;
	КонецЕсли;
	ЛицеваяСторона.Параметры.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
	ЛицеваяСторона.Параметры.ЛиквидационнаяСтоимость	 = ЛиквидационнаяСтоимость;
	
	ДатаДокРегистратора = "";
	ДокРегистратор      = "";
	
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, Организация, Перечисления.ВидыСостоянийОС.СнятоСУчета, ДатаСведений, ДокРегистратор, ДатаДокРегистратора);
	
	ДокументВыбытия = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");
	ИмяДокументаВыбытия = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор, "");	
	Если ЗначениеЗаполнено(ДокументВыбытия) Тогда	
		Если ИмяДокументаВыбытия = "Передача ОС" Тогда
			ПричинаВыбытия		 = "передача ОС" 	 
		ИначеЕсли ИмяДокументаВыбытия = "Списание ОС" Тогда
			ПричинаВыбытия = "списание ОС";
		КонецЕсли;
		
		ЛицеваяСторона.Параметры.ПричинаВыбытия			  = ПричинаВыбытия;
		ИмяДокументаВыбытияДата 						  = ДатаДокРегистратора;
		ИмяДокументаВыбытияНомер 						  = ?(ЗначениеЗаполнено(ДокРегистратор), ДокРегистратор.Номер, "");	
		ЛицеваяСторона.Параметры.ДокументВыбытияДатаНомер = "№" + ИмяДокументаВыбытияНомер + " от " + Формат(ИмяДокументаВыбытияДата, "ДФ=dd.MM.yyyy");
		
		Если ТипЗнч(ДокументВыбытия) = Тип("ДокументСсылка.ПередачаОС") Тогда
			СтрокаОС = ДокументВыбытия.ОС.Найти(Ссылка, "ОсновноеСредство");
			Если СтрокаОС <> Неопределено Тогда
				ЛицеваяСторона.Параметры.СуммаДоходаУбыткаОтРеализации = СтрокаОС.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
		БалансоваяСтоимость = СтоимостьАмортизацияОС[0].СтоимостьБУ - СтоимостьАмортизацияОС[0].АмортизацияБУ;
	КонецЕсли;
	ЛицеваяСторона.Параметры.БалансоваяСтоимость = БалансоваяСтоимость;
	
	ЛицеваяСторона.Параметры.Валюта = Валюта;
	
	ТабДок.Вывести(ЛицеваяСторона);
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Заполнение таблицы, которая имеет 8 колонок и содержит сведения о ремонте, достройке и т.д. 
	
	СведенияОДостройкеИРемонтеШапка 				 = Макет.ПолучитьОбласть("СведенияОДостройкеИРемонтеШапка");
	СведенияОДостройкеИРемонтеШапка.Параметры.Валюта = Валюта;		
	ТабДок.Вывести(СведенияОДостройкеИРемонтеШапка);
	
	ЗапросМодернизацииРемонты = Новый Запрос();
	
	ЗапросМодернизацииРемонты.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияОС.Регистратор,
		|	СобытияОС.Период КАК Период,
		|	СобытияОС.НомерДокумента,
		|	СобытияОС.СуммаЗатратБУ КАК СуммаЗатрат,
		|	ВЫБОР
		|		КОГДА СобытияОС.Событие.ВидСобытияОС В (&МассивВидовСобытийМодернизации)
		|			ТОГДА ""Модернизация""
		|		КОГДА СобытияОС.Событие.ВидСобытияОС В (&МассивВидовСобытийРемонта)
		|			ТОГДА ""Ремонт""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СодержимоеСтроки
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК СобытияОС
		|ГДЕ
		|	СобытияОС.ОсновноеСредство = &ОсновноеСредство
		|	И СобытияОС.Период МЕЖДУ &ДатаПоступления И &ДатаСведений
		|	И СобытияОС.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";		
	
	ЗапросМодернизацииРемонты.УстановитьПараметр("ОсновноеСредство", Ссылка);
	ЗапросМодернизацииРемонты.УстановитьПараметр("ДатаПоступления" , ПараметрыСостоянияПоступилоДата);
	ЗапросМодернизацииРемонты.УстановитьПараметр("ДатаСведений"	   , ДатаСведений);
	ЗапросМодернизацииРемонты.УстановитьПараметр("Организация"	   , Организация);
	
	МассивВидовСобытийМодернизации = Новый Массив();
	МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	МассивВидовСобытийМодернизации.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	ЗапросМодернизацииРемонты.УстановитьПараметр("МассивВидовСобытийМодернизации", МассивВидовСобытийМодернизации);
	
	МассивВидовСобытийРемонта = Новый Массив();
	МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	МассивВидовСобытийРемонта.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	ЗапросМодернизацииРемонты.УстановитьПараметр("МассивВидовСобытийРемонта", МассивВидовСобытийРемонта);
	
	РезультатМодернизацииРемонты = ЗапросМодернизацииРемонты.Выполнить().Выбрать();
	
	ТабЗначМодернизацииОС = Новый ТаблицаЗначений();
	ТабЗначМодернизацииОС.Колонки.Добавить("ДокМодернизацииДата");
	ТабЗначМодернизацииОС.Колонки.Добавить("ДокМодернизацииНомер");
	ТабЗначМодернизацииОС.Колонки.Добавить("ИнвентарныйНомер");
	ТабЗначМодернизацииОС.Колонки.Добавить("ЗатратыНаМодернизацию");
	
	ТабЗначРемонтыОС = Новый ТаблицаЗначений();
	ТабЗначРемонтыОС.Колонки.Добавить("ДокРемонтаДата");
	ТабЗначРемонтыОС.Колонки.Добавить("ДокРемонтаНомер");
	ТабЗначРемонтыОС.Колонки.Добавить("ЗатратыНаРемонт");
	
	Пока РезультатМодернизацииРемонты.Следующий() Цикл
		
		Если РезультатМодернизацииРемонты.СодержимоеСтроки = "Модернизация" Тогда
			
			СтрокаТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Добавить();
			СтрокаТабЗначМодернизацииОС.ДокМодернизацииДата   = Формат(РезультатМодернизацииРемонты.Период, "ДФ=dd.MM.yyyy");
			СтрокаТабЗначМодернизацииОС.ДокМодернизацииНомер  = РезультатМодернизацииРемонты.НомерДокумента;
			СтрокаТабЗначМодернизацииОС.ИнвентарныйНомер      = ТекущиеСведенияОС.ИнвентарныйНомер;
			СтрокаТабЗначМодернизацииОС.ЗатратыНаМодернизацию = РезультатМодернизацииРемонты.СуммаЗатрат;
			
		ИначеЕсли РезультатМодернизацииРемонты.СодержимоеСтроки = "Ремонт" Тогда
			
			СтрокаТабЗначРемонтыОС = ТабЗначРемонтыОС.Добавить();
			СтрокаТабЗначРемонтыОС.ДокРемонтаДата  = Формат(РезультатМодернизацииРемонты.Период, "ДФ=dd.MM.yyyy");
			СтрокаТабЗначРемонтыОС.ДокРемонтаНомер = РезультатМодернизацииРемонты.НомерДокумента;
			СтрокаТабЗначРемонтыОС.ЗатратыНаРемонт = РезультатМодернизацииРемонты.СуммаЗатрат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МаксимальныйИндексТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Количество() - 1;
	МаксимальныйИндексТабЗначРемонтыОС 		= ТабЗначРемонтыОС.Количество() - 1;	
	МаксимальныйИндекс 						= Макс(МаксимальныйИндексТабЗначМодернизацииОС, МаксимальныйИндексТабЗначРемонтыОС);
	
	Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
		
		СведенияОДостройкеИРемонтеСтрока = Макет.ПолучитьОбласть("СведенияОДостройкеИРемонтеСтрока");		
		
		Если МаксимальныйИндексТабЗначМодернизацииОС >= ИндексСтроки Тогда
			СтрокаТабЗначМодернизацииОС = ТабЗначМодернизацииОС.Получить(ИндексСтроки);
			ЗаполнитьЗначенияСвойств(СведенияОДостройкеИРемонтеСтрока.Параметры, СтрокаТабЗначМодернизацииОС);
		КонецЕсли;
		
		Если МаксимальныйИндексТабЗначРемонтыОС >= ИндексСтроки Тогда
			СтрокаТабЗначРемонтыОС = ТабЗначРемонтыОС.Получить(ИндексСтроки);
			ЗаполнитьЗначенияСвойств(СведенияОДостройкеИРемонтеСтрока.Параметры, СтрокаТабЗначРемонтыОС);
		КонецЕсли;
		
		ТабДок.Вывести(СведенияОДостройкеИРемонтеСтрока);
		
	КонецЦикла;	
	
	// Заполнение таблиц "Сведения о переоценки" и "Сведения о внутренем перемещении"
	
	СведенияОПереоценкиИПеремещенииШапка 				  = Макет.ПолучитьОбласть("СведенияОПереоценкиИПеремещенииШапка");	
	СведенияОПереоценкиИПеремещенииШапка.Параметры.Валюта = Валюта;		
	ТабДок.Вывести(СведенияОПереоценкиИПеремещенииШапка);
	
	ЗапросПеремещенияОС = Новый Запрос();
	
	ЗапросПеремещенияОС.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.Период КАК Период,
		|	ТИПЗНАЧЕНИЯ(МестонахождениеОС.Регистратор) КАК РегистраторТип,
		|	МестонахождениеОС.Регистратор.Номер КАК РегистраторНомер,
		|	МестонахождениеОС.Регистратор.Дата КАК РегистраторДата
		|ИЗ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОС
		|ГДЕ
		|	МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
		|	И МестонахождениеОС.Период > &ДатаПоступления
		|	И МестонахождениеОС.Период <= &ДатаСведений
		|	И МестонахождениеОС.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";	
	
	ЗапросПеремещенияОС.УстановитьПараметр("ОсновноеСредство", Ссылка);
	ЗапросПеремещенияОС.УстановитьПараметр("ДатаПоступления" , ПараметрыСостоянияПоступилоДата);
	ЗапросПеремещенияОС.УстановитьПараметр("ДатаСведений"	 , ДатаСведений);
	ЗапросПеремещенияОС.УстановитьПараметр("Организация"	 , Организация);
	
	ТабЗначПеремещенияОС = Новый ТаблицаЗначений();
	ТабЗначПеремещенияОС.Колонки.Добавить("ПеремещениеДокументДатаНомер");
	ТабЗначПеремещенияОС.Колонки.Добавить("Подразделение");
	ТабЗначПеремещенияОС.Колонки.Добавить("БалансоваяСтоимость");
	
	ВыборкаПеремещенияОС = ЗапросПеремещенияОС.Выполнить().Выбрать();
	
	Пока ВыборкаПеремещенияОС.Следующий() Цикл
		
		СтрокаТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Добавить();
		
		ПеремещениеДокументДатаНомер = "Документ, Дата, Номер";
		ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Документ", ВыборкаПеремещенияОС.РегистраторТип);
		ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Дата",     ВыборкаПеремещенияОС.РегистраторНомер);
		ПеремещениеДокументДатаНомер = СтрЗаменить(ПеремещениеДокументДатаНомер, "Номер",    Формат(ВыборкаПеремещенияОС.РегистраторДата, "ДФ=dd.MM.yyyy"));	
		СтрокаТабЗначПеремещенияОС.ПеремещениеДокументДатаНомер = ПеремещениеДокументДатаНомер;
		
		СтрокаТабЗначПеремещенияОС.Подразделение = ВыборкаПеремещенияОС.Местонахождение;
		
		СтоимостьАмортизацияОС = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Организация, Ссылка, Новый Граница(ВыборкаПеремещенияОС.Период));
		Если СтоимостьАмортизацияОС.Количество() > 0 Тогда
			БалансоваяСтоимость 						   = СтоимостьАмортизацияОС[0].СтоимостьБУ - СтоимостьАмортизацияОС[0].АмортизацияБУ;
			СтрокаТабЗначПеремещенияОС.БалансоваяСтоимость = БалансоваяСтоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросПереоценкиОС = Новый Запрос();
	
	ЗапросПереоценкиОС.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереоценкаВнеоборотныхАктивов.Период КАК Период,
		|	СРЕДНЕЕ(ПереоценкаВнеоборотныхАктивовОС.ПереоцененнаяСтоимостьБУ) КАК ПереоцененнаяСтоимость
		|ИЗ
		|	РегистрНакопления.ПереоценкаВнеоборотныхАктивов КАК ПереоценкаВнеоборотныхАктивов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаВнеоборотныхАктивов.ОС КАК ПереоценкаВнеоборотныхАктивовОС
		|		ПО ПереоценкаВнеоборотныхАктивов.Регистратор = ПереоценкаВнеоборотныхАктивовОС.Ссылка
		|			И ПереоценкаВнеоборотныхАктивов.ВнеоборотныйАктив = ПереоценкаВнеоборотныхАктивовОС.ОсновноеСредство
		|ГДЕ
		|	ПереоценкаВнеоборотныхАктивов.Организация = &Организация
		|	И ПереоценкаВнеоборотныхАктивов.ВнеоборотныйАктив = &ВнеоборотныйАктив
		|	И ПереоценкаВнеоборотныхАктивов.Период МЕЖДУ &ДатаПоступления И &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ПереоценкаВнеоборотныхАктивов.Период";	
	
	ЗапросПереоценкиОС.УстановитьПараметр("Организация"		 , Организация);
	ЗапросПереоценкиОС.УстановитьПараметр("ВнеоборотныйАктив", Ссылка);
	ЗапросПереоценкиОС.УстановитьПараметр("ДатаПоступления"	 , ПараметрыСостоянияПоступилоДата);
	ЗапросПереоценкиОС.УстановитьПараметр("ДатаСведений"	 , ДатаСведений);
	
	ТабЗначПереоценкиОС = Новый ТаблицаЗначений();
	ТабЗначПереоценкиОС.Колонки.Добавить("ПереоценкаДата");
	ТабЗначПереоценкиОС.Колонки.Добавить("СтоимостьСУчетомПереоценки");
	
	ВыборкаПереоценкиОС = ЗапросПереоценкиОС.Выполнить().Выбрать();
	
	Пока ВыборкаПереоценкиОС.Следующий() Цикл
		
		СтрокаТабЗначПереоценкиОС							 = ТабЗначПереоценкиОС.Добавить();
		СтрокаТабЗначПереоценкиОС.ПереоценкаДата 			 = Формат(ВыборкаПереоценкиОС.Период, "ДФ=dd.MM.yyyy"); 
		СтрокаТабЗначПереоценкиОС.СтоимостьСУчетомПереоценки = ВыборкаПереоценкиОС.ПереоцененнаяСтоимость;
		
	КонецЦикла;
	
	МаксимальныйИндексТабЗначПереоценкиОС  = ТабЗначПереоценкиОС.Количество() - 1;
	МаксимальныйИндексТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Количество() - 1;	
	МаксимальныйИндекс 					   = Макс(МаксимальныйИндексТабЗначПереоценкиОС, МаксимальныйИндексТабЗначПеремещенияОС);
	
	Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
		
		СведенияОПереоценкиИПеремещенииСтрока = Макет.ПолучитьОбласть("СведенияОПереоценкиИПеремещенииСтрока");		
		
		Если МаксимальныйИндексТабЗначПереоценкиОС >= ИндексСтроки Тогда
			СтрокаТабЗначПереоценкиОС = ТабЗначПереоценкиОС.Получить(ИндексСтроки);
			ЗаполнитьЗначенияСвойств(СведенияОПереоценкиИПеремещенииСтрока.Параметры, СтрокаТабЗначПереоценкиОС);
		Иначе
			ОбластьСведенияОПереоценкиСтрока = СведенияОПереоценкиИПеремещенииСтрока.Область("СведенияОПереоценкиСтрока");
			ОбластьСведенияОПереоценкиСтрока.Очистить(Истина, Истина, Истина);
		КонецЕсли;
		
		Если МаксимальныйИндексТабЗначПеремещенияОС >= ИндексСтроки Тогда
			СтрокаТабЗначПеремещенияОС = ТабЗначПеремещенияОС.Получить(ИндексСтроки);
			ЗаполнитьЗначенияСвойств(СведенияОПереоценкиИПеремещенииСтрока.Параметры, СтрокаТабЗначПеремещенияОС);
		Иначе
			ОбластьСведенияОПеремещенииСтрока = СведенияОПереоценкиИПеремещенииСтрока.Область("СведенияОПеремещенииСтрока");
			ОбластьСведенияОПеремещенииСтрока.Очистить(Истина, Истина, Истина);		
		КонецЕсли;
		
		ТабДок.Вывести(СведенияОПереоценкиИПеремещенииСтрока);
		
	КонецЦикла;
	
	// Вывод таблицы "Краткая индивидуальная характеристика актива"
	
	КраткаяИндивидуальнаяХарактеристикаАктива = Макет.ПолучитьОбласть("КраткаяИндивидуальнаяХарактеристикаАктива");
	ТабДок.Вывести(КраткаяИндивидуальнаяХарактеристикаАктива);
	
	// Изменение параметров возвращаемого табличного документа
	
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОсновныеСредства_ДА2";	
	ТабДок.АвтоМасштаб		   = Истина;
	ТабДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСверху		   = 0;
	ТабДок.ПолеСнизу		   = 0;
	
	Возврат ТабДок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФормаЭлемента = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Справочник можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 

	Если Не ПроверитьМодифицированностьСправочника(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ФормаЭлемента = Неопределено Тогда
	//	ДатаСведений  = ОбщегоНазначения.ПолучитьРабочуюДату();
	//	ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	//	Организация    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,Справочники.Организации.ПустаяСсылка());
	//Иначе
	//	ДатаСведений  = ФормаЭлемента.ДатаСведений;
	//	Организация   = ФормаЭлемента.Организация;
	//КонецЕсли;
	
	ФормаЭлемента = Ссылка.ПолучитьФорму();
	ДатаСведений  = ФормаЭлемента.ДатаСведений;
	Организация   = ФормаЭлемента.Организация;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ДА2" тогда
		ТабДокумент = ПечатьДА2(ДатаСведений,Организация);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка (Форма ДА-2)");

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати справочника.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДА2","Форма ДА-2");

КонецФункции // ПолучитьСписокПечатныхФорм(

// Проверяет модифицированность справочника перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  ЭлементСправочника - (СправочникОбъект.*) - проверяемый элемент справочника
//
Функция ПроверитьМодифицированностьСправочника(ЭлементСправочника)

	Результат = Ложь;

	Если ЭлементСправочника.Модифицированность() Тогда

		Ответ = Вопрос("Элемент справочника изменен. Для печати его необходимо записать.
		               |Записать?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Элемент справочника изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			ЭлементСправочника.Записать();
			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьСправочника()

#КонецЕсли

