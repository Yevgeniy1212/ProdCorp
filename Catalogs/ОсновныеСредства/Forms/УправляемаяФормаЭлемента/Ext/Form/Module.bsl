////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
&НаКлиенте
Перем мВалютаРегламентированногоУчета Экспорт;
&НаКлиенте
Перем Переменные;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ


// Процедура устанавливает видимость реквизитов  формы
//
&НаСервере
Процедура УстановитьВидимость()
	Если Элементы.ТранспортныйНалог.Видимость Тогда
		//сначала установим видимость для всех элементов формы, как Ложь
		Элементы.МенеджерЗаписиТранспортныйНалогОбъемДвигателя.Видимость                  = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогГрузоподъемность.Видимость                = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогКоличествоПосадочныхМест.Видимость        = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогМощностьВКиловаттах.Видимость             = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогМощностьВЛошадиныхСилах.Видимость         = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогПроизводствоСтранСНГ.Видимость            = Ложь;
		Элементы.МенеджерЗаписиТранспортныйНалогЭксплуатацияВРКдо1апреля1999г.Видимость   = Ложь;
		Если МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогОбъемДвигателя.Видимость                  = Истина;
			Элементы.МенеджерЗаписиТранспортныйНалогПроизводствоСтранСНГ.Видимость            = Истина;
		ИначеЕсли МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ГрузовойАвтомобиль Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогГрузоподъемность.Видимость                = Истина;
			Элементы.МенеджерЗаписиТранспортныйНалогПроизводствоСтранСНГ.Видимость            = Истина;
		ИначеЕсли МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.Автобус Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогКоличествоПосадочныхМест.Видимость        = Истина;		
		ИначеЕсли МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.Мотоцикл 	Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогМощностьВКиловаттах.Видимость             = Истина;
			Элементы.МенеджерЗаписиТранспортныйНалогПроизводствоСтранСНГ.Видимость            = Истина;
		ИначеЕсли МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
			ИЛИ МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав 	
			ИЛИ МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогМощностьВКиловаттах.Видимость             = Истина;
			Если МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат  Тогда
				Элементы.МенеджерЗаписиТранспортныйНалогЭксплуатацияВРКдо1апреля1999г.Видимость   = Истина;
			КонецЕсли;	
		ИначеЕсли МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.Катер Тогда
			Элементы.МенеджерЗаписиТранспортныйНалогМощностьВЛошадиныхСилах.Видимость         = Истина;
		КонецЕсли;
	КонецЕсли;
 	Элементы.ПлановаяХарактеристика.Доступность = ЗначениеЗаполнено(ПлановаяНоменклатура);
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюОрганизацию()
	// Поиск организации, по которой основное средство отражалось в регл. учете
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	| ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	| РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекОрганизация = РезультатЗапроса.Выгрузить()[0].Организация;
		//Элементы.Организация = ТекОрганизация;
		Организация = текОрганизация;
	КонецЕсли;
	Возврат ТекОрганизация;
КонецФункции

// Процедура заполняет доступные только для чтения реквизиты формы 
// 
&НаСервере
Процедура ЗаполнитьОписания(мВалютаРегламентированногоУчета,Переменные)
	// Данные для заполнения закладки Бухгалтерский учет
	Элементы.РеглВалюта.Заголовок  = мВалютаРегламентированногоУчета;
	Элементы.РеглВалюта1.Заголовок = мВалютаРегламентированногоУчета;
	Элементы.РеглВалюта2.Заголовок = мВалютаРегламентированногоУчета;

	Если ЗначениеЗаполнено(Переменные.ТекОрганизация) Тогда
		// Данные для заполнения закладки "Бухгалтерский учет"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      Переменные.ТекОрганизация);
		Запрос.УстановитьПараметр("СубконтоОС",        ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|           ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления) КАК СпособПоступленияБУ,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации) КАК СпособАмортизацииБУ,
		|           ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
		|           ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
		|           ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ,
		|           МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
		|           МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемРаботБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК ПроцентГодовойАмортизацииБУ,
		|           ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэфУскоренияБУ,
		|           ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ,
		|           СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК НаправленияАмортизацииБУ,
		|           СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаСтоимостиБУ,
		|           СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетУчетаАмортизацииБУ,
		|			ЕСТЬNULL(СтоимостьОС_БУ.СуммаОстатокДт, 0) КАК ТекущаяСтоимостьБУ,
		|			ЕСТЬNULL(АмортизацияОС_БУ.СуммаОстатокКт, 0) КАК ТекАмортизацияБУ,
		|           СостоянияОС.Состояние КАК ТекущееСостояниеБУ
		|ИЗ
		|           РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|                       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
		|                                   &ДатаСведений,
		|                                   Организация = &Организация
		|                                   И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|                         ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&ДатаСведений, , &СубконтоОС, Организация = &Организация И Субконто1 = &ОсновноеСредство) КАК СтоимостьОС_БУ
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = СтоимостьОС_БУ.Субконто1 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчетаБУ = СтоимостьОС_БУ.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&ДатаСведений, , &СубконтоОС, Организация = &Организация И Субконто1 = &ОсновноеСредство) КАК АмортизацияОС_БУ
		|		ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = АмортизацияОС_БУ.Субконто1 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ = АмортизацияОС_БУ.Счет
		|                       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|                                              СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|                                              СостоянияОС.Состояние КАК Состояние
		|                                   ИЗ
		|                                              РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		|														&ДатаСведений,
		|														ОсновноеСредство = &ОсновноеСредство) КАК СостоянияОС ) КАК СостоянияОС
		|                         ПО СостоянияОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
			ТекущаяСтоимостьБУ           = ВыборкаЗаписей.ТекущаяСтоимостьБУ;
			ТекАмортизацияБУ             = ВыборкаЗаписей.ТекАмортизацияБУ;
			ИнвентарныйНомер             = ВыборкаЗаписей.ИнвентарныйНомер;
			СпособПоступленияБУ          = ВыборкаЗаписей.СпособПоступленияБУ;
			СпособАмортизацииБУ          = ВыборкаЗаписей.СпособАмортизацииБУ;
			ПервоначальнаяСтоимостьБУ    = ВыборкаЗаписей.ПервоначальнаяСтоимостьБУ;
			ПараметрВыработкиБУ          = ВыборкаЗаписей.ПараметрВыработкиБУ;
			Элементы.ЕдиницаПараметраВыработкиБУ.Заголовок = ВыборкаЗаписей.ЕдиницаПараметраВыработкиБУ;
			МОЛБУ                        = ВыборкаЗаписей.МОЛБУ;
			ПодразделениеБУ              = ВыборкаЗаписей.ПодразделениеБУ;
			СрокИспользованияБУ          = ВыборкаЗаписей.СрокИспользованияБУ;
			ОбъемРаботБУ                 = ВыборкаЗаписей.ОбъемРаботБУ;
			ПроцентГодовойАмортизацииБУ  = ВыборкаЗаписей.ПроцентГодовойАмортизацииБУ;
			КоэфУскоренияБУ              = ВыборкаЗаписей.КоэфУскоренияБУ;
			ГодовойГрафикБУ              = ВыборкаЗаписей.ГодовойГрафикБУ;
			НаправленияАмортизацииБУ     = ВыборкаЗаписей.НаправленияАмортизацииБУ;
			СчетУчетаСтоимостиБУ         = ВыборкаЗаписей.СчетУчетаСтоимостиБУ;
			СчетУчетаАмортизацииБУ       = ВыборкаЗаписей.СчетУчетаАмортизацииБУ;
			СостояниеБУ                  = ВыборкаЗаписей.ТекущееСостояниеБУ;

			//Элементы.ТекущаяСтоимостьБУ.Значение           = ВыборкаЗаписей.ТекущаяСтоимостьБУ;
			//Элементы.ТекАмортизацияБУ.Значение             = ВыборкаЗаписей.ТекАмортизацияБУ;
			//Элементы.ИнвентарныйНомер.Значение             = ВыборкаЗаписей.ИнвентарныйНомер;
			//Элементы.СпособПоступленияБУ.Значение          = ВыборкаЗаписей.СпособПоступленияБУ;
			//Элементы.СпособАмортизацииБУ.Значение          = ВыборкаЗаписей.СпособАмортизацииБУ;
			//Элементы.ПервоначальнаяСтоимостьБУ.Значение    = ВыборкаЗаписей.ПервоначальнаяСтоимостьБУ;
			//Элементы.ПараметрВыработкиБУ.Значение          = ВыборкаЗаписей.ПараметрВыработкиБУ;
			//Элементы.ЕдиницаПараметраВыработкиБУ.Заголовок = ВыборкаЗаписей.ЕдиницаПараметраВыработкиБУ;
			//Элементы.МОЛБУ.Значение                        = ВыборкаЗаписей.МОЛБУ;
			//Элементы.ПодразделениеБУ.Значение              = ВыборкаЗаписей.ПодразделениеБУ;
			//Элементы.СрокИспользованияБУ.Значение          = ВыборкаЗаписей.СрокИспользованияБУ;
			//Элементы.ОбъемРаботБУ.Значение                 = ВыборкаЗаписей.ОбъемРаботБУ;
			//Элементы.ПроцентГодовойАмортизацииБУ.Значение  = ВыборкаЗаписей.ПроцентГодовойАмортизацииБУ;
			//Элементы.КоэфУскоренияБУ.Значение              = ВыборкаЗаписей.КоэфУскоренияБУ;
			//Элементы.ГодовойГрафикБУ.Значение              = ВыборкаЗаписей.ГодовойГрафикБУ;
			//Элементы.НаправленияАмортизацииБУ.Значение     = ВыборкаЗаписей.НаправленияАмортизацииБУ;
			//Элементы.СчетУчетаСтоимостиБУ.Значение         = ВыборкаЗаписей.СчетУчетаСтоимостиБУ;
			//Элементы.СчетУчетаАмортизацииБУ.Значение       = ВыборкаЗаписей.СчетУчетаАмортизацииБУ;
			//Элементы.СостояниеБУ.Значение                  = ВыборкаЗаписей.ТекущееСостояниеБУ;
			
		КонецЕсли;
		
	КонецЕсли; //Если ЗначениеЗаполнено(ТекОрганизация) Тогда
	
	ПоследнееСостояние = УправлениеВнеоборотнымиАктивами.ПолучитьПоследнееСостояниеОС(ДатаСведений,Объект.Ссылка, Переменные.ТекОрганизация);
	СостояниеБУ = ПоследнееСостояние.СостояниеОС;
	
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, Переменные.ТекОрганизация, Перечисления.ВидыСостоянийОС.Поступило ,    ДатаСведений, Переменные.ДокументПоступленияБУ,    ПоступилоБУ);
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, Переменные.ТекОрганизация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, ДатаСведений, Переменные.ДокументПринятияКУчетуБУ, ПринятоКУчетуБУ);
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, Переменные.ТекОрганизация, Перечисления.ВидыСостоянийОС.СнятоСУчета,   ДатаСведений, Переменные.ДокументСнятоСУчетаБУ,    СнятоСУчетаБУ);
	
	ЗаполнитьТекстПроДокументы(Переменные);

КонецПроцедуры // ЗаполнитьПоляУчета()

// Процедура заполняет реквизиты формы, связанные с документами,
// изменяющими состояние объектов ОС
//
&НаСервере
Процедура ЗаполнитьТекстПроДокументы(Переменные) Экспорт
	Если Переменные.ДокументПоступленияБУ<>Неопределено И ЗначениеЗаполнено(Переменные.ДокументПоступленияБУ.Ссылка) Тогда
		//Элементы.ГиперссылкаДокументПоступленияБУ.Заголовок = Строка(Переменные.ДокументПоступленияБУ);
	Иначе
		//Элементы.ГиперссылкаДокументПоступленияБУ.Заголовок = "Ввести документ поступления";
		ПоступилоБУ = 0;
	КонецЕсли;
	Если Переменные.ДокументПринятияКУчетуБУ <> Неопределено И ЗначениеЗаполнено(Переменные.ДокументПринятияКУчетуБУ.Ссылка) Тогда
		//Элементы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = Строка(Переменные.ДокументПринятияКУчетуБУ);
	Иначе
		//Элементы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = "Ввести документ принятия к учету";
		ПринятоКУчетуБУ = 0;
	КонецЕсли;
	Если Переменные.ДокументСнятоСУчетаБУ <> Неопределено И ЗначениеЗаполнено(Переменные.ДокументСнятоСУчетаБУ.Ссылка) Тогда
		//Элементы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = Строка(Переменные.ДокументСнятоСУчетаБУ);
	Иначе
		//Элементы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = "Ввести документ списания";
		СнятоСУчетаБУ = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьСРегистрами()
	// Проверим являлся ли объект когда-нибудь
	// объектом земельного или транспортного налогов
	Запрос = Новый Запрос("ВЫБРАТЬ	                      
	                      |	СУММА(ОбъектыНалогообложения.НачислятьТранспортныйНалог) КАК НачислятьТранспортныйНалог,
	                      |	СУММА(ОбъектыНалогообложения.НачислятьЗемельныйНалог) КАК НачислятьЗемельныйНалог
	                      |ИЗ
	                      |	(ВЫБРАТЬ	                      
	                      |		ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектыТранспортногоНалога.НачислятьНалог), 0) как НачислятьТранспортныйНалог,
	                      |		0 как НачислятьЗемельныйНалог
	                      |	ИЗ
	                      |		РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	                      |	ГДЕ
	                      |		ОбъектыТранспортногоНалога.ОбъектНалогообложения = &ОбъектНалогообложения	                      
	                      |		И ОбъектыТранспортногоНалога.НачислятьНалог = ИСТИНА
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ	                      
	                      |		0,
	                      |		ЕСТЬNULL(КОЛИЧЕСТВО(ОбъектыЗемельногоНалога.НачислятьНалог), 0)
	                      |	ИЗ
	                      |		РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
	                      |	ГДЕ
	                      |		ОбъектыЗемельногоНалога.ОбъектНалогообложения = &ОбъектНалогообложения	
	                      |		И ОбъектыЗемельногоНалога.НачислятьНалог = ИСТИНА) КАК ОбъектыНалогообложения");
						  
	Запрос.УстановитьПараметр("ОбъектНалогообложения", Объект.Ссылка);  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	//Проверяем является ли основное средство, объектом транспортного налога	 	 
	 Если Выборка.НачислятьТранспортныйНалог > 0 Тогда
		 Элементы.ТранспортныйНалог.Видимость = Истина;
		 ПрочитатьПараметрыНалога();
	 КонецЕсли;
	 
	 //Проверяем является ли основное средство, объектом земельного налога	 
	 Если Выборка.НачислятьЗемельныйНалог > 0 Тогда
		 Элементы.ЗемельныйНалог.Видимость = Истина;
		 ПрочитатьПараметрыНалога();
	 КонецЕсли;	 
	 
КонецПроцедуры

// Процедура считывает данные из связанных регистров сведений
//
&НаСервере
Процедура ПрочитатьПараметрыНалога()
	Если Не Объект.Ссылка.Пустая() Тогда
		//регистр ПараметрыРасчетаТранспортногоНалога
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство",Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство,
		               |	ПараметрыРасчетаТранспортногоНалога.Организация,
		               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
		               |	ПараметрыРасчетаТранспортногоНалога.Грузоподъемность,
		               |	ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска,
		               |	ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения,
		               |	ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест,
		               |	ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах,
		               |	ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах,
		               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
		               |	ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя,
		               |	ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ,
		               |	ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г
		               |ИЗ
		               |	РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
		               |ГДЕ
		               |	ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство = &ОсновноеСредство
		               |	И ПараметрыРасчетаТранспортногоНалога.Организация = &Организация";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		МенеджерЗаписиТранспортныйНалог.ВидТранспортногоСредства = Выборка.ВидТранспортногоСредства;
		МенеджерЗаписиТранспортныйНалог.Грузоподъемность = Выборка.Грузоподъемность;
		МенеджерЗаписиТранспортныйНалог.ДатаВыпуска = Выборка.ДатаВыпуска;
		МенеджерЗаписиТранспортныйНалог.ДатаПриобретения = Выборка.ДатаПриобретения;
		МенеджерЗаписиТранспортныйНалог.КоличествоПосадочныхМест = Выборка.КоличествоПосадочныхМест;
		МенеджерЗаписиТранспортныйНалог.МощностьВКиловаттах = Выборка.МощностьВКиловаттах;
		МенеджерЗаписиТранспортныйНалог.МощностьВЛошадиныхСилах = Выборка.МощностьВЛошадиныхСилах;
		МенеджерЗаписиТранспортныйНалог.НомерТранспортногоСредства = Выборка.НомерТранспортногоСредства;
		МенеджерЗаписиТранспортныйНалог.ОбъемДвигателя = Выборка.ОбъемДвигателя;
		МенеджерЗаписиТранспортныйНалог.Организация = Выборка.Организация;
		МенеджерЗаписиТранспортныйНалог.ОсновноеСредство = Выборка.ОсновноеСредство;
		МенеджерЗаписиТранспортныйНалог.ПроизводствоСтранСНГ = Выборка.ПроизводствоСтранСНГ;
		МенеджерЗаписиТранспортныйНалог.ЭксплуатацияВРКдо1апреля1999г = Выборка.ЭксплуатацияВРКдо1апреля1999г;

		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство,
		               |	ПараметрыРасчетаЗемельногоНалога.Организация,
		               |	ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога,
		               |	ПараметрыРасчетаЗемельногоНалога.БаллБонитета,
		               |	ПараметрыРасчетаЗемельногоНалога.ДатаВозникновенияПрава,
		               |	ПараметрыРасчетаЗемельногоНалога.ДатаПрекращенияПрава,
		               |	ПараметрыРасчетаЗемельногоНалога.ЕдиницаИзмерения,
		               |	ПараметрыРасчетаЗемельногоНалога.КадастровыйНомер,
		               |	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель,
		               |	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога,
		               |	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
		               |	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов,
		               |	ПараметрыРасчетаЗемельногоНалога.МестонахождениеУчастка,
		               |	ПараметрыРасчетаЗемельногоНалога.ПлощадьНеОблагаемая,
		               |	ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая,
		               |	ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога
		               |ИЗ
		               |	РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
		               |ГДЕ
		               |	ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство = &ОсновноеСредство
		               |	И ПараметрыРасчетаЗемельногоНалога.Организация = &Организация";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		МенеджерЗаписиЗемельныйНалог.ОсновноеСредство = Выборка.ОсновноеСредство;
		МенеджерЗаписиЗемельныйНалог.Организация = Выборка.Организация;
		МенеджерЗаписиЗемельныйНалог.БазоваяСтавкаНалога = Выборка.БазоваяСтавкаНалога;
		МенеджерЗаписиЗемельныйНалог.БаллБонитета = Выборка.БаллБонитета;
		МенеджерЗаписиЗемельныйНалог.ДатаВозникновенияПрава = Выборка.ДатаВозникновенияПрава;
		МенеджерЗаписиЗемельныйНалог.ДатаПрекращенияПрава = Выборка.ДатаПрекращенияПрава;
		МенеджерЗаписиЗемельныйНалог.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		МенеджерЗаписиЗемельныйНалог.КадастровыйНомер = Выборка.КадастровыйНомер; 
		МенеджерЗаписиЗемельныйНалог.КатегорияЗемель = Выборка.КатегорияЗемель;
		МенеджерЗаписиЗемельныйНалог.КорректировкаБазовойСтавкиНалога = Выборка.КорректировкаБазовойСтавкиНалога;
		МенеджерЗаписиЗемельныйНалог.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ = Выборка.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ;
		МенеджерЗаписиЗемельныйНалог.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов = Выборка.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов;
		МенеджерЗаписиЗемельныйНалог.МестонахождениеУчастка = Выборка.МестонахождениеУчастка;
		МенеджерЗаписиЗемельныйНалог.ПлощадьНеОблагаемая = Выборка.ПлощадьНеОблагаемая;
		МенеджерЗаписиЗемельныйНалог.ПлощадьОблагаемая = Выборка.ПлощадьОблагаемая;
		МенеджерЗаписиЗемельныйНалог.ПроцентИзмененияБазовойСтавкиНалога = Выборка.ПроцентИзмененияБазовойСтавкиНалога;
		//МенеджерЗаписиТранспортныйНалог.
		//МенеджерЗаписиТранспортныйНалог.Организация      = Организация;
		//МенеджерЗаписиТранспортныйНалог.ОсновноеСредство = Объект.Ссылка;
		//
//		МенеджерЗаписиТранспортныйНалог.Прочитать();
		//регистр ПараметрыРасчетаЗемельногоНалога
		//МенеджерЗаписиЗемельныйНалог.Организация       = Организация;
		//МенеджерЗаписиЗемельныйНалог.ОсновноеСредство = Объект.Ссылка;
		////МенеджерЗаписиЗемельныйНалог.Прочитать();
		
		
	КонецЕсли; 
КонецПроцедуры   //ПрочитатьПараметрыНалога()

// Процедура записывает данные в связанные регистры сведений
//
&НаСервере
Процедура ЗаписатьПараметрыНалога()
	//Если пользователь изменял данные в регистре, тогда записываем их в регистре
	Если МенеджерЗаписиТранспортныйНалог.Модифицированность() Тогда
		МенеджерЗаписиТранспортныйНалог.ОсновноеСредство = Объект.Ссылка;
		МенеджерЗаписиТранспортныйНалог.Организация      = Организация;
		Попытка
			МенеджерЗаписиТранспортныйНалог.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Объект.Ссылка) + """ не записан. Не записана информация о параметрах транспортного налога "));
			Отказ = Истина;
			Возврат;				
		КонецПопытки;
	КонецЕсли;
	Если МенеджерЗаписиЗемельныйНалог.Модифицированность() Тогда	
		МенеджерЗаписиЗемельныйНалог.ОсновноеСредство = Объект.Ссылка;
		МенеджерЗаписиЗемельныйНалог.Организация      = Организация;
		Попытка
			МенеджерЗаписиЗемельныйНалог.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Объект.Ссылка) + """ не записан. Не записана информация о параметрах земельного налога "));
			Отказ = Истина;
			Возврат;				
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры   //ЗаписатьПараметрыНалога()

//процедура выводить данные о комплектации состава ОС
//
&НаСервере
Процедура  ВывестиИнформацияОКомплектеОС()
	
	// сначала очистим старые данные
	СоставКомплекта.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставОССрезПоследних.ОсновноеСредство,
	|	СоставОССрезПоследних.Период,
	|	СоставОССрезПоследних.СостояниеВСоставеОС,
	|	СоставОССрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.СоставОС КАК СоставОССрезПоследних
	|ГДЕ
	|	ВСоставеОС = &ОсновноеСредство
	|	И Период <= &ДатаСведений 	
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Не	РезультатЗапроса.Пустой() Тогда
		Элементы.СоставКомплекта.Видимость = Истина;
		Пока Выборка.Следующий() Цикл
			СтрокаОС = СоставКомплекта.Добавить();
			СтрокаОС.Документ            = Выборка.Регистратор;
			СтрокаОС.ОсновноеСредство    = Выборка.ОсновноеСредство;
			СтрокаОС.СостояниеВСоставе = Выборка.СостояниеВСоставеОС;
			СтрокаОС.Период              = Выборка.Период;
			Элементы.НадписьОС.Заголовок = "Состав комплекта основного средства - " + Объект.Наименование;
		КонецЦикла;
	Иначе
		Элементы.СоставКомплекта.Видимость = Ложь;
	КонецЕсли;  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставОССрезПоследних.ВСоставеОС,
	|	СоставОССрезПоследних.СостояниеВСоставеОС
	|ИЗ
	|	РегистрСведений.СоставОС.СрезПоследних(
	|		&ДатаСведений,
	|		ОсновноеСредство = &ОсновноеСредство
	|) КАК СоставОССрезПоследних";
	
	РезультатЗапроса1 = Запрос.Выполнить();
	Выборка = РезультатЗапроса1.Выбрать();
	СостояниеВСоставе = "";
	Если Не	РезультатЗапроса1.Пустой() Тогда
		Выборка.Следующий();
		СостояниеВСоставе = Выборка.СостояниеВСоставеОС;
		Если СостояниеВСоставе = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав Тогда
			ВСоставеОС = Выборка.ВСоставеОС;
			Элементы.НадписьОС.Заголовок  = "Входит в состав комплекта ОС:";
			Элементы.ВСоставеОС.Видимость = Истина;
		Иначе
			Элементы.ВСоставеОС.Видимость = Ложь;
		КонецЕсли;	
	Иначе
		Элементы.ВСоставеОС.Видимость = Ложь;
	КонецЕсли;     
	
	Если  РезультатЗапроса.Пустой() И (РезультатЗапроса1.Пустой() Или СостояниеВСоставе = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава) Тогда
		Элементы.НадписьОС.Заголовок = "Не участвует в комплектации ОС";
	КонецЕсли;                   	
	
КонецПроцедуры //ВывестиИнформацияОКомплектеОС()


// Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Объявление структуры переменных
	Переменные = Новый Структура;
	Переменные.Вставить("ДокументПринятияКУчетуБУ");
	Переменные.Вставить("ДокументПоступленияБУ");
	Переменные.Вставить("ДокументСнятоСУчетаБУ");
	Переменные.Вставить("ТекОрганизация");
    Переменные.Вставить("мДеревоМакетов");
	Переменные.Вставить("мПодменюПечати");
    Переменные.Вставить("мДеревоМакетов");
	Переменные.Вставить("мПодменюПечати");
	Переменные.Вставить("мПечатьПоУмолчанию");
	Переменные.Вставить("мПлановаяНоменклатура");
	Переменные.Вставить("мПлановаяХарактеристика");

	///////////////////////////////////
	Элементы.ТранспортныйНалог.Видимость = Ложь;
	Элементы.ЗемельныйНалог.Видимость = Ложь;
	мВалютаРегламентированногоУчета = ПолучитьВалютуРегламентногоУчета();
	ДатаСведений = ТекущаяДата();
	Переменные.ТекОрганизация= ПолучитьТекущуюОрганизацию();
	//Элементы.Организация = Переменные.ТекОрганизация;
	ЗаполнитьОписания(мВалютаРегламентированногоУчета, Переменные);
	УстановитьСвязьСРегистрами();
	ВывестиИнформацияОКомплектеОС();
	//добавляет действие "Редактировать номер"
	//РаботаСДиалогами.ДобавитьВМенюДействияКнопкуРедактированияКода(Элементы.ДействияФормы.Кнопки.Подменю);
	//РаботаСДиалогами.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, Элементы.ДействияФормы.Кнопки.Подменю, Элементы.Код);
    ПолучитьПлановуюНоменклатуру(Переменные);
	УстановитьВидимость();
КонецПроцедуры // ПриОткрытии()

&НаСервере
Функция ПолучитьВалютуРегламентногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

// Процедура - обработчик события "ПриЗаписи" формы
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаписатьПараметрыНалога();
	Если Переменные.мПлановаяНоменклатура <> ПлановаяНоменклатура ИЛИ Переменные.мПлановаяХарактеристика <> ПлановаяХарактеристика Тогда
		Если НЕ ЗначениеЗаполнено(ПлановаяНоменклатура) Тогда
			НаборЗаписей = РегистрыСведенийузп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуреСоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВнеоборотныйАктив.Установить(Объект.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При отмене соответствия плановой номенклатуре произошла ошибка: "+ОписаниеОшибки(),СтатусСообщения.Важное);
				Отказ = Истина;
			КонецПопытки;
		Иначе
			НаборЗаписей = РегистрыСведенийузп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуреСоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВнеоборотныйАктив.Установить(Объект.Ссылка);
			НаборЗаписей.Прочитать();
			НЗ = НаборЗаписей.Добавить();
			НЗ.ВнеоборотныйАктив = Объект.Ссылка;
			НЗ.ПлановаяНоменклатура = ПлановаяНоменклатура;
			НЗ.ХарактеристикаПлановойНоменклатуры = ПлановаяХарактеристика;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При установке соответствия плановой номенклатуре произошла ошибка: "+ОписаниеОшибки(),СтатусСообщения.Важное);
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РегистрыСведенийузп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуреСоздатьНаборЗаписей() 
	Возврат РегистрыСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре.СоздатьНаборЗаписей();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата сведений".
//
&НаКлиенте
Процедура ДатаСведенийПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ТекущаяДата();
	КонецЕсли;
	Переменные.ТекОрганизация= ПолучитьТекущуюОрганизацию();
	//Элементы.Организация = Переменные.ТекОрганизация;
	ЗаполнитьОписания(мВалютаРегламентированногоУчета,Переменные);
    ВывестиИнформацияОКомплектеОС();
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода " ВидТранспортногоСредства".
//  
&НаКлиенте
Процедура МенеджерЗаписиТранспортныйНалогВидТранспортногоСредстваПриИзменении(Элемент)
	УстановитьВидимость();
	Если ЗначениеЗаполнено(Объект.ДатаВыпуска) И НЕ ЗначениеЗаполнено(МенеджерЗаписиТранспортныйНалог.ДатаВыпуска) Тогда
		МенеджерЗаписиТранспортныйНалог.ДатаВыпуска = Объект.ДатаВыпуска;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПереНачаломДобавления" табличного поля " СоставКомплекта".
//  
&НаКлиенте
Процедура СоставКомплектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры //СоставКомплектаПередНачаломИзменения()

//Процедура - обработчик события "ПереНачаломИзменения" табличного поля " СоставКомплекта".
//
&НаКлиенте
Процедура СоставКомплектаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры  //СоставКомплектаПередНачаломИзменения()

//Процедура - обработчик события "ПереНачаломУдаления" табличного поля " СоставКомплекта".
//
&НаКлиенте
Процедура СоставКомплектаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры  //СоставКомплектаПередУдалением()

//Процедура - обработчик события "Выбор" табличного поля " СоставКомплекта".
//
&НаКлиенте
Процедура СоставКомплектаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя <>  "СостояниеВКомплекте" И Колонка.Имя <>  "Период" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяСтрока[Колонка.Имя].ПолучитьФорму(,ЭтаФорма).Открыть();
	КонецЕсли;
	
КонецПроцедуры  //СоставКомплектаВыбор()

// Процедура - обработчик события "При изменении" поля ввода "Дата выпуска(постройки"
//
&НаКлиенте
Процедура ДатаВыпускаПриИзменении(Элемент)
	Если Элементы.ТранспортныйНалог.Видимость Тогда
		МенеджерЗаписиТранспортныйНалог.ДатаВыпуска = Объект.ДатаВыпуска;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНоменклатураПриИзменении(Элемент)
	Если ПлановаяНоменклатура.Пустая() Тогда
		ПлановаяХарактеристика = ПолучитьСправочникиузп_ПлановыеХарактеристикиНоменклатурыПустаяСсылка();
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Функция ПолучитьСправочникиузп_ПлановыеХарактеристикиНоменклатурыПустаяСсылка()
	Возврат Справочники.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка();
КонецФункции

&НаСервере
Функция ПолучитьПлановуюНоменклатуру(Переменные)
    ПлановаяНоменклатура 	= Справочники.фин_ПлановаяНоменклатура.ПустаяСсылка();
	ПлановаяХарактеристика 	= Справочники.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка();
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Переменные;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие.ПлановаяНоменклатура,
		|	Соответствие.ХарактеристикаПлановойНоменклатуры
		|ИЗ
		|	РегистрСведений.узп_СоответствиеВнеоборотныхАктивовПлановойНоменклатуре КАК Соответствие
		|ГДЕ
		|	Соответствие.ВнеоборотныйАктив = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	    ПлановаяНоменклатура = Выборка.ПлановаяНоменклатура;
		ПлановаяХарактеристика = Выборка.ХарактеристикаПлановойНоменклатуры;
	КонецЕсли;
 	Переменные.мПлановаяНоменклатура 	= ПлановаяНоменклатура;
	Переменные.мПлановаяХарактеристика	= ПлановаяХарактеристика;
	Возврат Переменные;
КонецФункции

&НаКлиенте
Процедура ПлановаяНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.фин_ПлановаяНоменклатура.ФормаВыбора",Новый Структура("Отбор",Новый Структура("ТипПозицииВПланеЗакупок",ПолучитьПеречисленияузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокОсновноеСредство())),Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьПеречисленияузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокОсновноеСредство()
	Возврат Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.ОсновноеСредство
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	оф_ПлощадьЗемельногоУчасткаЗаголовок = "Площадь земельного участка (га, кв.м)";
	оф_КорректировкаСтавкиНалогаЗаголовок = "Корректировка ставки налога";
	оф_ПравоСобственностиЗаголовок = "Право собственности";
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
// 



