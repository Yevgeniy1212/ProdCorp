&НаКлиенте
Перем мВалютаРегламентированногоУчета Экспорт;
&НаСервере
Перем мМакетКодовУсловияПоставки Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Процедура заполняет реквизиты нового элемента справочника
&НаСервере
Процедура ЗаполнитьНовыйЭлемент(глТекущийПользователь) Экспорт
	Если НЕ ЗначениеЗаполнено(Объект.ВедениеВзаиморасчетов) Тогда
		Объект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
			Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			              |	*
			              |ИЗ
			              |	Справочник.Организации КАК Организации" ;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока НЕ ЗначениеЗаполнено(Объект.Организация) И Выборка.Следующий() Цикл
				Если Выборка.Ссылка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				Объект.Организация = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьСписокВыбораВидаДоговора();

	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНовыйЭлемент()

// Функция проверяет дубли в табличной части УчастникиСовместнойДеятельности.
//
&НаСервере
Функция ПроверитьЗаполнениеТаблицыУчастникиСовместнойДеятельности(Отказ)
	СписокУчастников = Новый ТаблицаЗначений;
	СписокУчастников = Объект.УчастникиСовместнойДеятельности.Выгрузить();
	СписокДубликатов = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из СписокУчастников Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УчастникСовместнойДеятельности", СтрокаТЧ.УчастникСовместнойДеятельности);
        НайденнаяСтрока = Объект.УчастникиСовместнойДеятельности.НайтиСтроки(ПараметрыОтбора);
		Если НайденнаяСтрока.Количество() >= 2 Тогда 
			Сообщить("В списке участников совместной деятельности выбран несколько раз контрагент: " + СтрокаТЧ.УчастникСовместнойДеятельности);
			СписокУчастников.Удалить(СтрокаТЧ);
			Отказ = Истина;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;

	Возврат Отказ;
	
КонецФункции // ПроверитьЗаполнениеТаблицыУчастникиСовместнойДеятельности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура заполняет список значений для выбора ЭУ ВидДоговора
&НаСервере
Процедура ЗаполнитьСписокВыбораВидаДоговора()
	СписокПеречисления = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	Иначе
		СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокПеречисления.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает видимость и доступность для элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимость()
	// Управление видимостью элементов формы
    Если Объект.УстановленСрокОплаты Тогда
		Элементы.УстановленСрокОплаты.Заголовок = "Установлен срок оплаты по договору, дней:";
	Иначе
		Элементы.УстановленСрокОплаты.Заголовок = "Установлен срок оплаты по договору";
	КонецЕсли; 
	Элементы.ВзаиморасчетыРеквизиты.ПодчиненныеЭлементы.УчастникиСовместнойДеятельности1.Видимость = Объект.ДоговорСовместнойДеятельности;
	Элементы.СрокОплаты.Видимость = Объект.УстановленСрокОплаты;	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "УсловияПоставки" Тогда
		
		Если ПустаяСтрока(СтрЗаменить(Объект.УсловияПоставки, ".", "")) Тогда
			РасшифровкаУсловияПоставки = "<не указано>";
		Иначе
		
			Если мМакетКодовУсловияПоставки = Неопределено Тогда
				мМакетКодовУсловияПоставки 	= ПолучитьОбщийМакет("ПФ_MXL_УсловияПоставки");
				мОбластьСтрок   = мМакетКодовУсловияПоставки.Области.Найти("Классификатор");
			КонецЕсли;
			
			НаименованиеСтроки = ПолучитьНаименованиеСтрокиКлассификатораПоКоду(мМакетКодовУсловияПоставки, мОбластьСтрок, Объект.УсловияПоставки);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				РасшифровкаУсловияПоставки = "строка с кодом " + СокрЛП(Объект.УсловияПоставки) + " не найдена.";
			Иначе
				РасшифровкаУсловияПоставки = НаименованиеСтроки;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
		
КонецПроцедуры // ОбновитьПредставлениеЭлемента()

// Функция возвращает наименование строки из макета классификатора по ее коду
//
// Параметры:
//	ТабличныйМакет - табличный документ, содеджащий данные классификатора
//	Область - область табличного документа, по строкам которой осуществляется поиск
//	КодСтроки - строковый код 
//	НомерКолонкиКода - число - номер колонки, в которой содержатся коды строк
//	НомерКолонкиНаименования - число - номер колонки, в которой содержатся наименование строк
//
&НаСервере
Функция ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКлассификатора, Область, Знач КодСтроки, НомерКолонкиКода = 1, НомерКолонкиНаименования = 2) Экспорт

	НаименованиеСтроки = "";
	КодСтроки = ВРег(СокрЛП(КодСтроки));

	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		
		Если КодСтроки = ВРег(СокрЛП(МакетКлассификатора.Область(НомерСтроки, НомерКолонкиКода).Текст)) Тогда
			НаименованиеСтроки = МакетКлассификатора.Область(НомерСтроки, НомерКолонкиНаименования).Текст;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Возврат НаименованиеСтроки;

КонецФункции // ПолучитьНаименованиеСтрокиПоКоду()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии".
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь ;
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьНовыйЭлемент(глТекущийПользователь);
	КонецЕсли;
	//ПриОткрытииНаСервере();
	// Проверка ведения однофирменности
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (" + ?(Не Объект.Владелец.Пустая(), Объект.Владелец, "Владелец не задан") + ")";
	УстановитьВидимость();
	мВалютаРегламентированногоУчета = ПолучитьВалютуРегламентированногоУчета();
КонецПроцедуры

&НаСервере
Функция ПолучитьВалютуРегламентированногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();	
КонецФункции

// Процедура - обработчик события "ПриИзмененииДанных".
&НаКлиенте
Процедура ПриИзмененииДанных()
	ЗаполнитьСписокВыбораВидаДоговора();
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи".
&НаКлиенте
Процедура ПриЗаписи(Отказ)
	Если Объект.ДоговорСовместнойДеятельности Тогда
		Отказ = ПроверитьЗаполнениеТаблицыУчастникиСовместнойДеятельности(Отказ);
	КонецЕсли;
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеВыбора.Свойство("КодСтроки") И ЗначениеВыбора.Свойство("Наименование") Тогда
		
		Если ВРег(Источник.ИмяМакета) = ВРег("ПФ_MXL_УсловияПоставки") Тогда
			
			Объект.УсловияПоставки	   = ЗначениеВыбора.КодСтроки;
			РасшифровкаУсловияПоставки = ЗначениеВыбора.Наименование;   			
			
		КонецЕсли;
	КонецЕсли;   	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВидДоговора.
&НаКлиенте
Процедура ВидДоговораНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораВидаДоговора();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы УстановленСрокОплаты.
&НаКлиенте
Процедура УстановленСрокОплатыПриИзменении(Элемент)
	УстановленСрокОплатыПриИзмененииНаСервере();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура УстановленСрокОплатыПриИзмененииНаСервере()
	Если Объект.УстановленСрокОплаты Тогда
		Если (Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		    Объект.СрокОплаты = Константы.СрокОплатыПокупателей.Получить();
		ИначеЕсли (Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
		    Объект.СрокОплаты = Константы.СрокОплатыПоставщикам.Получить();
		КонецЕсли;
	Иначе
		Объект.СрокОплаты = 0;
	КонецЕсли;
КонецПроцедуры // УстановленСрокОплатыПриИзменении

// Процедура - обработчик события "ПриИзменении" элемента формы ДоговорСовместнойДеятельности.
&НаКлиенте
Процедура ДоговорСовместнойДеятельностиПриИзменении(Элемент)
	Если Объект.ДоговорСовместнойДеятельности <> Истина Тогда 
		Ответ = Вопрос("Участники будут очищены", РежимДиалогаВопрос.ДаНет, 180, , "Внимание!", );
	Иначе 
		Ответ = КодВозвратаДиалога.Нет;
	КонецЕсли;
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Объект.УчастникиСовместнойДеятельности.Очистить();
	ИначеЕсли Объект.ДоговорСовместнойДеятельности <> Истина И Ответ = КодВозвратаДиалога.Нет Тогда 
		Объект.ДоговорСовместнойДеятельности = Истина;
		Возврат
	КонецЕсли;
	Если Объект.ДоговорСовместнойДеятельности = Истина Тогда 
		СтрокаТЧ = Объект.УчастникиСовместнойДеятельности.Добавить();
		СтрокаТЧ.УчастникСовместнойДеятельности = Объект.Владелец;
	КонецЕсли;
	Элементы.ВзаиморасчетыРеквизиты.ПодчиненныеЭлементы.УчастникиСовместнойДеятельности1.Видимость = Объект.ДоговорСовместнойДеятельности;

КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбораКода = ПолучитьФорму("ОбщаяФорма.куфиб_ФормаВыбораИзКлассификатора", ЭтаФорма);
	
	ФормаВыбораКода.РежимВыбора = Истина;
	ФормаВыбораКода.ИмяМакета = "ПФ_MXL_УсловияПоставки";
	ФормаВыбораКода.ИмяСекции = "Классификатор";
	ФормаВыбораКода.ПолучатьПолныеДанные = Истина;
	ФормаВыбораКода.ТекущийКодСтроки = ?(НЕ ЗначениеЗаполнено(Элемент.Значение), Неопределено, СокрЛП(Элемент.Значение));
	
	ФормаВыбораКода.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиПриИзменении(Элемент)
	ОбновитьПредставлениеЭлемента("УсловияПоставки");	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораВидаДоговора();
	//Заполнение параметров при создании из формы владельца
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	//оформление
	оф_ВедениеВзаиморасчетовЗаголовок = "Ведение взаиморасчетов";
	оф_ЦеныЗаголовок = "Цены";
	оф_РегистрацияДоговораЗаголовок = "Регистрация договора";
	оф_СрокДействияДоговораЗаголовок = "Срок действия договора";
	оф_НДСВКачествеНалоговогоАгентаЗаголовок = "НДС в качестве налогового агента";
	оф_УсловияОплатыЗаголовок = "Параметры счета-фактуры";
	Если (НЕ Объект.Ссылка.Пустая()) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_УправлениеКарточкойДоговораДокументамиРегистрации") И дог_УправлениеДоговорами.ДоговорЗарегистрирован(Объект.Ссылка) Тогда
		Элементы.ВидДоговора.ТолькоПросмотр=Истина;
		Элементы.Контрагент.ТолькоПросмотр=Истина;
		Элементы.ВедениеВзаиморасчетов.ТолькоПросмотр=Истина;
		Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр=Истина;
		Элементы.ТипЦен.ТолькоПросмотр=Истина;
		Элементы.НомерДоговора.ТолькоПросмотр=Истина;
		Элементы.ДатаДоговора.ТолькоПросмотр=Истина;
		Элементы.ДатаНачалаДействияДоговора.ТолькоПросмотр=Истина;
		Элементы.ДатаОкончанияДействияДоговора.ТолькоПросмотр=Истина;
	КонецЕсли;
	
	ОбновитьПредставлениеЭлемента("УсловияПоставки");
КонецПроцедуры
