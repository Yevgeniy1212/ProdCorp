
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		Элементы["ШаблоныПроводокСубконтоКт"+Строка(Инд)].Видимость = Истина;
		Элементы["ШаблоныПроводокСубконтоДт"+Строка(Инд)].Видимость = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ШаблоныПроводок.ТекущиеДанные.КоэффициентДляСуммы = 1;
		Элементы.ШаблоныПроводок.ТекущиеДанные.КоэффициентДляКоличества = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ НоваяСтрока ИЛИ НЕ ОтменаРедактирования Тогда
		
		Проводка=Элементы.ШаблоныПроводок.ТекущиеДанные;
		
		Если Проводка.СчетДт.Пустая() И Проводка.СчетКт.Пустая() Тогда
			
			Сообщить("Не указаны счета проводки.");
			Отказ=Истина;

		ИначеЕсли (НЕ Проводка.СчетДт.Забалансовый И Проводка.СчетКт.Пустая())
			ИЛИ (НЕ Проводка.СчетКт.Забалансовый И Проводка.СчетДт.Пустая()) Тогда
			
			Сообщить("Балансовый счет не может корреспондировать с пустым счетом.");
			Отказ=Истина;
			
		ИначеЕсли (НЕ (Проводка.СчетДт.Забалансовый ИЛИ Проводка.СчетДт.Пустая()) И Проводка.СчетКт.Забалансовый)
			ИЛИ (НЕ (Проводка.СчетКт.Забалансовый ИЛИ Проводка.СчетКт.Пустая()) И Проводка.СчетДт.Забалансовый) Тогда
			
			Сообщить("Балансовый счет не может корреспондировать с забалансовым.");
			Отказ=Истина;
					
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокСчетДтПриИзменении(Элемент)
	ПриИзмененииСчетаДт();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаДт()
	КоличествоСубконтоДт = 0;
	ТекущиеДанные = Объект.ШаблоныПроводок.НайтиПоИдентификатору(Элементы.ШаблоныПроводок.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		КоличествоСубконтоДт = ТекущиеДанные.СчетДт.ВидыСубконто.Количество();
	КонецЕсли;
	Для Инд = КоличествоСубконтоДт +1 По 5 Цикл
		ТекущиеДанные["СубконтоДт"+Строка(Инд)]=Неопределено;
	КонецЦикла;
	НастроитьДоступностьКолонок();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаКт()
	КоличествоСубконтоКт = 0;
	ТекущиеДанные = Объект.ШаблоныПроводок.НайтиПоИдентификатору(Элементы.ШаблоныПроводок.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКт) Тогда
		КоличествоСубконтоКт = ТекущиеДанные.СчетКт.ВидыСубконто.Количество();
	КонецЕсли;
	Для Инд = КоличествоСубконтоКт +1 По 5 Цикл
		ТекущиеДанные["СубконтоКт"+Строка(Инд)]=Неопределено;
	КонецЦикла;
	НастроитьДоступностьКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокСчетКтПриИзменении(Элемент)
	ПриИзмененииСчетаКт();
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьКолонок()
	КоличествоСубконтоДт = 0;
	ТекущиеДанные = Объект.ШаблоныПроводок.НайтиПоИдентификатору(Элементы.ШаблоныПроводок.ТекущаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		КоличествоСубконтоДт = ТекущиеДанные.СчетДт.ВидыСубконто.Количество();
	КонецЕсли;
	Для Инд = 1 По 5 Цикл
		Элементы["ШаблоныПроводокСубконтоДт"+Строка(Инд)].Доступность = Инд <=КоличествоСубконтоДт;
	КонецЦикла;
	КоличествоСубконтоКт = 0;
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКт) Тогда
		КоличествоСубконтоКт = ТекущиеДанные.СчетКт.ВидыСубконто.Количество();
	КонецЕсли;
	Для Инд = 1 По 5 Цикл
		Элементы["ШаблоныПроводокСубконтоКт"+Строка(Инд)].Доступность = Инд <=КоличествоСубконтоКт;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПроводокПриАктивизацииСтроки(Элемент)
	Если Элементы.ШаблоныПроводок.ТекущиеДанные <> Неопределено Тогда
		НастроитьДоступностьКолонок();
	КонецЕсли;
КонецПроцедуры
