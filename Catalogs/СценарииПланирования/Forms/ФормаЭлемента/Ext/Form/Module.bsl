
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.СправочникПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	Элементы.ДетализацияПланирования.Видимость = НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьТочкиПланированияПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКурсыСценарияПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьЦиклаПриИзменении(Элемент)
	Если ТипЗнч(Объект.ПродолжительностьЦикла)<>Тип("Число") Тогда
		СписокЗапрещенных = ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Объект.Периодичность);
		Если СписокЗапрещенных.НайтиПоЗначению(Объект.ПродолжительностьЦикла)<>Неопределено Тогда
			Объект.ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.ПустаяСсылка");
			ПоказатьПредупреждение(,"Горизонт планирования не может быть меньше шага планирования!");
		КонецЕсли;
		Объект.ИспользоватьТочкиПланирования=Ложь;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	Если мПериодичность <> Объект.Периодичность Тогда
		мПериодичность = Объект.Периодичность;
		Если Объект.ТочкиПланирования.Количество() > 0 Тогда
			Объект.ТочкиПланирования.Очистить();
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Объект.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность") Тогда
		СписокЗапрещенных = ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Объект.Периодичность);
		Если СписокЗапрещенных.НайтиПоЗначению(Объект.Периодичность)<>Неопределено Тогда
			Объект.ПродолжительностьЦикла = ПредопределенноеЗначение("Перечисление.фин_Периодичность.ПустаяСсылка");
			ПоказатьПредупреждение(,"Горизонт бюджетного периода не может быть больше шага планирования!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ТочкиПланирования

&НаКлиенте
Процедура ТочкиПланированияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.ТочкиПланирования.Количество()>1 Тогда
			Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования = СледующийПериодПланирования(ТекущаяДата(),Объект.Периодичность);
		Иначе
			Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования = ДатаНачалаПериода(Объект.ТочкиПланирования[Объект.ТочкиПланирования.Количество()-1].ПериодПланирования,Объект.Периодичность);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТочкиПланированияПериодПланированияПриИзменении(Элемент)
	Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования = ДатаНачалаПериода(Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования,Объект.Периодичность);
КонецПроцедуры

&НаКлиенте
Процедура ТочкиПланированияПериодПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования = ПолучитьОтрегулированныйПериод(Элементы.ТочкиПланирования.ТекущиеДанные.ПериодПланирования,Объект.Периодичность,Направление);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ПравоДоступа("Изменение",Метаданные.Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования"]) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	Бюджет.Ссылка
		             |ИЗ
		             |	Документ.фин_Бюджет КАК Бюджет
		             |ГДЕ
		             |	Бюджет.Сценарий = &Сценарий";
		Запрос.УстановитьПараметр("Сценарий",Объект.Ссылка);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Элементы.ПродолжительностьЦикла.Доступность = Ложь;
			Элементы.Периодичность.Доступность 			= Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сценарий используется в бюджетах, поэтому шаг и горизонт бюджетного периода не могут быть изменены!");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	мПериодичность = Объект.Периодичность;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.Фин_Периодичность"));
	Элементы.Периодичность.ОграничениеТипа			= Новый ОписаниеТипов(МассивТипов);
	МассивТипов.Добавить(Тип("Число"));
	Элементы.ПродолжительностьЦикла.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов,,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный));
	Элементы.ДетализацияПланирования.Видимость = НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	// установка видимости и доступности элементов в зависимости от значений реквизитов
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
//	Элементы.ДекорацияНастроитьКурсыВалютСценария.Видимость = Объект.ИспользоватьКурсыСценария;
	Элементы.ГруппаТочкиПланирования.Видимость 				= Объект.ИспользоватьТочкиПланирования;
	Элементы.ИспользоватьТочкиПланирования.Видимость 		= (ТипЗнч(Объект.ПродолжительностьЦикла)=Тип("Число"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Периодичность)
	Возврат фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(Периодичность);
КонецФункции

&НаКлиенте
Функция ПолучитьОтрегулированныйПериод(Дата,Периодичность,Направление)
	Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Дата,Периодичность);	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Период,Периодичность,?(Направление=1,Истина,Ложь));	
КонецФункции

&НаКлиенте
Функция ДатаНачалаПериода(Дата,Периодичность)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Дата,Периодичность);	
КонецФункции

&НаКлиенте
Функция СледующийПериодПланирования(Дата,Периодичность)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Дата,Периодичность);	
КонецФункции


