&НаКлиенте
Перем СоответствиеКоманд;

&НаКлиенте
Процедура ВыборФункции(Команда)
	Если Найти(Команда.Имя,"Цифра")=0 Тогда
		Элементы.Формула.ВыделенныйТекст = СоответствиеКоманд.Получить(Команда.Имя);
	Иначе
		Элементы.Формула.ВыделенныйТекст = Сред(Команда.Имя,СтрДлина("Цифра")+1);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета");
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_Бюджеты");
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе	
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_РасчетныеПоказатели");
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель");
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ПериодСбораДанных = ПредопределенноеЗначение("Перечисление.ден_СпособыОпределенияПериодов.ПланируемыйПериод");
		Элементы.ВходящиеПоказатели.ТекущиеДанные.Идентификатор = ПолучитьИдентификаторПоказателя();
		Элементы.ВходящиеПоказатели.ТекущиеДанные.Данные = ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма");
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидВлияния = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход");
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПериодаРасчета = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеПериодаРасчета(Элементы.ВходящиеПоказатели.ТекущиеДанные);
	Иначе
		ПроверитьПредставление();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьИдентификаторПоказателя()
	Идентификатор = 1;
	Для Каждого СтрокаТЧ Из Объект.ВходящиеПоказатели Цикл
		Если СтрокаТЧ.Идентификатор = "" Тогда
			Продолжить;
		КонецЕсли;
		Если Число(СтрокаТЧ.Идентификатор)>=Идентификатор Тогда
			Идентификатор = Идентификатор + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Формат(Идентификатор,"ЧГ=");
КонецФункции

&НаКлиенте
Процедура ВходящиеПоказателиВидПоказателяПриИзменении(Элемент)
	Если Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
	ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета");
	ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_Бюджеты");
	Иначе	
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_РасчетныеПоказатели");
	КонецЕсли;
	Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель = ОграничениеТипа.ПривестиЗначение(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель);
	Если НЕ ЗначениеЗаполнено(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель) Тогда
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПоказательПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель) Тогда
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = "";
	Иначе
		Если Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель") Тогда
			ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
		ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета") Тогда
			ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета");
		ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные.ВидПоказателя=ПредопределенноеЗначение("Перечисление.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета") Тогда
			ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_Бюджеты");
		Иначе	
			ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.фин_РасчетныеПоказатели");
		КонецЕсли;
		Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель = ОграничениеТипа.ПривестиЗначение(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель);
		Если НЕ ЗначениеЗаполнено(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель) Тогда
			Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = "";
		Иначе
			Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(ПолеОбъекта(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель,"Наименование"));
			ПроверитьПредставление();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,ПолеОбъекта)
		Возврат ОбъектДанных[ПолеОбъекта];
КонецФункции


&НаКлиенте
Процедура ВходящиеПоказателиПериодСбораДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВходящиеПоказатели.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("ПериодСбораДанных,Периодичность,НачалоПериода,КонецПериода,Лаг");
	ОписаниеВыбораПериода = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораПериода",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ТекущиеДанные);
	ОткрытьФорму("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.Форма.ФормаНастройкиПериода",СтруктураПараметров,Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеВыбораПериода,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыбораПериода(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Модифицированность = Истина;
		ТекущиеДанные = Объект.ВходящиеПоказатели.НайтиПоИдентификатору(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Результат);
		ТекущиеДанные.ПредставлениеПериодаРасчета = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеПериодаРасчета(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВыборПериодов.Добавить(Перечисления.ден_СпособыОпределенияПериодов.ПланируемыйПериод);
	ВыборПериодов.Добавить(Перечисления.ден_СпособыОпределенияПериодов.ПредшествующийПериод);
	СписокДанные.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма);
	СписокДанные.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество);
	НадписьПоказателиФормулы = "Показатели формулы";
	НадписьФормула = "Формула";
	СписокИспользуемых = ИспользуемыеПоказатели(Объект.Формула);
	НастроитьДоступностьРедактированияИдентификаторов();
	ТекстФормулы = Объект.Формула;
	ТекстФормулы = СтрЗаменить(ТекстФормулы,	"Sqrt(",	"КореньКв(");
	ТекстФормулы = СтрЗаменить(ТекстФормулы,	"Pow(",		"Степень(");
	ПредставлениеФормулы.УстановитьТекст(ТекстФормулы);
	Элементы.ФормаНастройкаРазрезов.Пометка = Объект.НастройкаЗаполненияРазрезов.Количество()>0;
	Если Объект.НастройкаЗаполненияРазрезов.Количество()=0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаФормула;
	КонецЕсли;
	Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРазрезы.Видимость = Элементы.ФормаНастройкаРазрезов.Пометка;
	Для Каждого ЭлементСписка Из фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов() Цикл
		СписокРазрезов.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ЭлементСписка.Значение));
	КонецЦикла;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
    Элементы.ВходящиеПоказателиЗначение.Видимость 					= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков") И Объект.УказыватьТестовыеЗначения;
    Элементы.НадписьФормула.Видимость								= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ГруппаФормулаИКлавиши.Видимость 						= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.УказыватьТестовыеЗначения.Видимость 					= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ФормаПроверкаФормулы.Видимость 						= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ВходящиеПоказателиПериодСбораДанных.Видимость 			= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ВходящиеПоказателиПредставлениеПоказателя.Видимость 	= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ВходящиеПоказателиДанные.Видимость 					= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ФормаПроверкаФормулы.Видимость 						= Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.ВходящиеПоказателиВидВлияния.Видимость 				= Объект.Вид = ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
    Элементы.СценарийРасчетаОстатков.Видимость 						= Объект.СпособРасчетаВходящихНачальныхОстатков = ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаВходящихНачальныхОстатков.ПоПлановымОстаткамФиксированногоСценария");
    Элементы.ГруппаВводВходящегоОстаткаПоБюджетнымПериодам.Видимость 				= Объект.Вид = ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков");
	
	Элементы.ГруппаПоказатели.Поведение = ?(Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков"),ПоведениеОбычнойГруппы.Свертываемая,ПоведениеОбычнойГруппы.Обычное);
	Элементы.ГруппаПоказатели.ОтображатьЗаголовок = ?(Объект.Вид <> ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков"),Истина,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя="" Тогда
		Выполнение = Ложь;
	Иначе
		ПараметрыПеретаскивания.Значение = Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	Модифицированность = Истина;
	СписокИспользуемых = ИспользуемыеПоказатели(ПредставлениеФормулы.ПолучитьТекст());
	НастроитьДоступностьРедактированияИдентификаторов();
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПредставлениеПоказателяПриИзменении(Элемент)
	Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя);
	ПроверитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставление()
	Если Объект.ВходящиеПоказатели.НайтиСтроки(Новый Структура("ПредставлениеПоказателя",Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя)).Количество()>1 Тогда
		БазоваяЧасть = Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя;
		Инд = 1;
		Пока Объект.ВходящиеПоказатели.НайтиСтроки(Новый Структура("ПредставлениеПоказателя",Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя+Строка(Инд))).Количество()>0 Цикл
			Инд = Инд + 1;
		КонецЦикла;
		Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя = Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя + Строка(Инд);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура НастроитьДоступностьРедактированияИдентификаторов()
	УсловноеОформление.Элементы.Очистить();
	Для Каждого Используемый Из СписокИспользуемых Цикл
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = Используемый.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВходящиеПоказатели.ПредставлениеПоказателя");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ВходящиеПоказателиПредставлениеПоказателя");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ИспользуемыеПоказатели(Знач ТекстФормулы)
	ТЗ = Объект.ВходящиеПоказатели.Выгрузить();
	ТЗ.Колонки.Добавить("Длина",Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.Длина = СтрДлина(СтрокаТЗ.ПредставлениеПоказателя);
	КонецЦикла;
	ТЗ.Сортировать("Длина УБЫВ");
	СписокПоказателей = Новый СписокЗначений;
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если Найти(ТекстФормулы,СтрокаТЗ.ПредставлениеПоказателя)<>0 Тогда
			СписокПоказателей.Добавить(СтрокаТЗ.ПредставлениеПоказателя);
			ТекстФормулы = СтрЗаменить(ТекстФормулы,СтрокаТЗ.ПредставлениеПоказателя,"/");
		КонецЕсли;
	КонецЦикла;
	Возврат СписокПоказателей;
КонецФункции

&НаКлиенте
Процедура ВходящиеПоказателиПередУдалением(Элемент, Отказ)
	Если СписокИспользуемых.НайтиПоЗначению(Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя)<>Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,"Показатель используется в формуле и не может быть удален!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПередНачаломИзменения(Элемент, Отказ)
	Если Этотобъект.ТекущийЭлемент.ТекущийЭлемент.Имя<>"ВходящиеПоказателиЗначение" И СписокИспользуемых.НайтиПоЗначению(Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя)<>Неопределено Тогда
		ПоказатьПредупреждение(,"Показатель используется в формуле, и его изменение может повлиять на порядок расчета");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Формула = ПредставлениеФормулы.ПолучитьТекст();
	Объект.Формула = СтрЗаменить(Объект.Формула,"КореньКв(",	"Sqrt(");
	Объект.Формула = СтрЗаменить(Объект.Формула,"Степень(",	"Pow(");
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВФормулу(Команда)
	Если Элементы.ВходящиеПоказатели.ВыделенныеСтроки.Количество()>1 Тогда
		ОписаниеОбрабтатьВопросПоместитьПоказатели = Новый ОписаниеОповещения("ОбрабтатьВопросПоместитьПоказатели",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОбрабтатьВопросПоместитьПоказатели,"Поместить в формулу все выделенные показатели?
		|	Да - поместить все
		|	Нет - поместить только первый
		|	Отмена - отменить действие",РежимДиалогаВопрос.ДаНетОтмена,,,"Выбор показателей");
	ИначеЕсли Элементы.ВходящиеПоказатели.ТекущиеДанные<>Неопределено И Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя<>"" Тогда
		Элементы.Формула.ВыделенныйТекст = Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя;
		Модифицированность = Истина;
		СписокИспользуемых = ИспользуемыеПоказатели(ПредставлениеФормулы.ПолучитьТекст());
		НастроитьДоступностьРедактированияИдентификаторов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбрабтатьВопросПоместитьПоказатели(Ответ,ДополнительныеПараметры) Экспорт
		Если Ответ=КодВозвратаДиалога.Нет Тогда
			Элементы.Формула.ВыделенныйТекст = Элементы.ВходящиеПоказатели.ТекущиеДанные.ПредставлениеПоказателя;
			Модифицированность = Истина;
			СписокИспользуемых = ИспользуемыеПоказатели(ПредставлениеФормулы.ПолучитьТекст());
			НастроитьДоступностьРедактированияИдентификаторов();
		ИначеЕсли Ответ=КодВозвратаДиалога.Да Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("+");
			Список.Добавить("-");
			Список.Добавить("*");
			Список.Добавить("/");
			ОписаниеОбработатьВыборОперанда = Новый ОписаниеОповещения("ОбработатьВыборОперанда",ЭтотОбъект);
			Список.ПоказатьВыборЭлемента(ОписаниеОбработатьВыборОперанда,"Выберите операнд между показателями");
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОперанда(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		ТекстОтрезок = "";
		Для Каждого ВыбраннаяСтрока Из Элементы.ВходящиеПоказатели.ВыделенныеСтроки Цикл
			Если Объект.ВходящиеПоказатели.НайтиПоИдентификатору(ВыбраннаяСтрока).ПредставлениеПоказателя<>"" Тогда 
				ТекстОтрезок = ТекстОтрезок + ?(ТекстОтрезок="","",РезультатВыбора.Значение) + Объект.ВходящиеПоказатели.НайтиПоИдентификатору(ВыбраннаяСтрока).ПредставлениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		Элементы.Формула.ВыделенныйТекст = ТекстОтрезок;
		Модифицированность = Истина;
		СписокИспользуемых = ИспользуемыеПоказатели(ПредставлениеФормулы.ПолучитьТекст());
		НастроитьДоступностьРедактированияИдентификаторов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТригонометрическиеФункции(Команда)
	СписокФункций = Новый СписокЗначений;
	СписокФункций.Добавить("Sin()",		"Sin(Угол) - синус от аргумента, заданного в радианах");
	СписокФункций.Добавить("Cos()",		"Cos(Угол) - косинус от аргумента, заданного в радианах");
	СписокФункций.Добавить("Tan()",		"Tan(Угол) - тангенс от аргумента, заданного в радианах");
	СписокФункций.Добавить("ASin()",	"ASin(Число) - вычисление арксинуса в радианах от аргумента в диапазоне -1 ... 1");
	СписокФункций.Добавить("ACos()",	"ACos(Число) - вычисление арккосинуса в радианах от аргумента в диапазоне -1 ... 1");
	СписокФункций.Добавить("ATan()",	"ATan(Число) - вычисление арктангенса в радианах от аргумента в диапазоне -1 ... 1");
	ОписаниеОбработкаВыбораТригонометрическихФункций = Новый ОписаниеОповещения("ОбработкаВыбораТригонометрическихФункций",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОбработкаВыбораТригонометрическихФункций,СписокФункций,Элементы.ТригонометрическиеФункции,СписокФункций[0]);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТригонометрическихФункций(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		Элементы.Формула.ВыделенныйТекст = РезультатВыбора.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаФормулы(Команда)
	Если ПроверитьЗаполнение() Тогда
		ВыполнитьПроверку();
	Иначе
		ПоказатьПредупреждение(,"Перед продолжением заполните все необходимые поля!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверку()
	ТекстФормулы = ПредставлениеФормулы.ПолучитьТекст();
	ТекстФормулы = СтрЗаменить(ТекстФормулы,"КореньКв(",	"Sqrt(");
	ТекстФормулы = СтрЗаменить(ТекстФормулы,"Степень(",		"Pow(");
	Для Каждого СтрокаТЧ Из Объект.ВходящиеПоказатели Цикл
		Если СписокИспользуемых.НайтиПоЗначению(СтрокаТЧ.ПредставлениеПоказателя)=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лишний показатель, не используемый в формуле: "+СтрокаТЧ.ПредставлениеПоказателя);
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗначенийПоказателей = Объект.ВходящиеПоказатели.Выгрузить();
	ТаблицаЗначенийПоказателей.Колонки.Добавить("КодПоказателя");
	Для Каждого СтрокаТЗ Из ТаблицаЗначенийПоказателей Цикл
		СтрокаТЗ.КодПоказателя = СтрокаТЗ.ПредставлениеПоказателя;
		Если НЕ Объект.УказыватьТестовыеЗначения Тогда
			СтрокаТЗ.Значение = 1;
		КонецЕсли;
	КонецЦикла;
	РезультатРасчета =  фин_ПроцедурыМеханизмовБюджетирования.РассчитатьОтрезокФормулы(ТекстФормулы,ТаблицаЗначенийПоказателей,"Проверка формулы: ",ТекущаяДата());
	Если Объект.УказыватьТестовыеЗначения Тогда
		Сообщить("Результат: "+Строка(РезультатРасчета));
	КонецЕсли;
	Сообщить("Готово.");
КонецПроцедуры

&НаКлиенте
Процедура УказыватьТестовыеЗначенияПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиДанныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора= СписокДанные;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаВыбора",Новый Структура("ЗакрыватьПриВыборе,ВыборГруппИЭлементов",Ложь,ИспользованиеГруппИЭлементов.ГруппыИЭлементы),Элементы.ВходящиеПоказатели,,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда
		ОбработатьВыбор(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыбор(ВыбранноеЗначение)
	Если ВыбранноеЗначение.ЭтоГруппа Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ФинансовыеПоказатели.Ссылка
			|ИЗ
			|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
			|ГДЕ
			|	фин_ФинансовыеПоказатели.Ссылка В ИЕРАРХИИ(&Ссылка)
			|	И НЕ фин_ФинансовыеПоказатели.ПометкаУдаления
			|	И НЕ фин_ФинансовыеПоказатели.ЭтоГруппа";

		Запрос.УстановитьПараметр("Ссылка", ВыбранноеЗначение);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НС = Объект.ВходящиеПоказатели.Добавить();
			НС.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель;
			НС.Показатель = ВыборкаДетальныеЗаписи.Ссылка;
			НС.ПериодСбораДанных = Перечисления.ден_СпособыОпределенияПериодов.ПланируемыйПериод;
			НС.Данные = Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма;
			НС.ПредставлениеПоказателя = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(НС.Показатель.Наименование);
			НС.Идентификатор = ПолучитьИдентификаторПоказателя();
			НС.ПредставлениеПериодаРасчета = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеПериодаРасчета(НС);
		КонецЦикла;
	Иначе
		НС = Объект.ВходящиеПоказатели.Добавить();
		НС.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ФинансовыйПоказатель;
		НС.Показатель = ВыбранноеЗначение;
		НС.ПериодСбораДанных = Перечисления.ден_СпособыОпределенияПериодов.ПланируемыйПериод;
		НС.ВидВлияния = Перечисления.ден_ВидыДвиженийПриходРасход.Приход;
		НС.Данные = Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма;
		НС.ПредставлениеПоказателя = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(НС.Показатель.Наименование);
		НС.Идентификатор = ПолучитьИдентификаторПоказателя();
		НС.ПредставлениеПериодаРасчета = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеПериодаРасчета(НС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРазрезов(Команда)
	Элементы.ФормаНастройкаРазрезов.Пометка = НЕ Элементы.ФормаНастройкаРазрезов.Пометка;
	ТребуетсяАналитика = Элементы.ФормаНастройкаРазрезов.Пометка;
	Если НЕ ТребуетсяАналитика Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаФормула;
		Объект.НастройкаЗаполненияРазрезов.Очистить();
	КонецЕсли;
	Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРазрезы.Видимость = Элементы.ФормаНастройкаРазрезов.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияРазрезовРазрезНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияРазрезовРазрезПриИзменении(Элемент)
	НастройкаЗаполненияРазрезовРазрезПриИзмененииНаСервере(Элементы.НастройкаЗаполненияРазрезов.ТекущаяСтрока);	
КонецПроцедуры

&НаСервере
Процедура НастройкаЗаполненияРазрезовРазрезПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущиеДанные = Объект.НастройкаЗаполненияРазрезов.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущиеДанные.Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИзмерениеПоРазрезу(ТекущиеДанные.Разрез);
	ТекущиеДанные.ФиксированноеЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ФиксированноеЗначение);
	//Элементы.НастройкаЗаполненияРазрезовФиксированноеЗначение.ОграничениеТипа = ТекущиеДанные.Разрез.ТипЗначения;
КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	Если Объект.Вид=ПредопределенноеЗначение("Перечисление.фин_ВидыФормулРасчета.ПравилоРасчетаОстатков") Тогда
		Объект.Формула = "";
		ПредставлениеФормулы.УстановитьТекст("");
		СписокИспользуемых = Новый СписокЗначений;
		НастроитьДоступностьРедактированияИдентификаторов();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпособВводаВходящегоОстаткаБюджетногоПериодаПриИзменении(Элемент)
	Если Объект.СпособРасчетаВходящихНачальныхОстатков<>ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаВходящихНачальныхОстатков.ПоПлановымОстаткамФиксированногоСценария") Тогда
		Объект.СценарийРасчетаОстатков = фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();	
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

//&НаКлиенте
//Процедура НастройкаЗаполненияРазрезовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
//	НастройкаЗаполненияРазрезовПриНачалеРедактированияНаСервере(Элементы.НастройкаЗаполненияРазрезов.ТекущаяСтрока);	
//КонецПроцедуры

//&НаСервере
//Процедура НастройкаЗаполненияРазрезовПриНачалеРедактированияНаСервере(ИдентификаторСтроки)
//	ТекущиеДанные = Объект.НастройкаЗаполненияРазрезов.НайтиПоИдентификатору(ИдентификаторСтроки);
//	Элементы.НастройкаЗаполненияРазрезовФиксированноеЗначение.ОграничениеТипа = ТекущиеДанные.Разрез.ТипЗначения;
//КонецПроцедуры

СоответствиеКоманд = Новый Соответствие;
СоответствиеКоманд.Вставить("Выбор",	"?(,,)");
СоответствиеКоманд.Вставить("Макс",		"Макс(,)");
СоответствиеКоманд.Вставить("Мин",		"Мин(,)");
СоответствиеКоманд.Вставить("Окр",		"Окр(,)");
СоответствиеКоманд.Вставить("Цел",		"Цел()");
СоответствиеКоманд.Вставить("Оценить",	"ОценитьПо(,)");
СоответствиеКоманд.Вставить("Log",		"Log()");
СоответствиеКоманд.Вставить("Log10",	"Log10()");
СоответствиеКоманд.Вставить("Корень",	"КореньКв()");
СоответствиеКоманд.Вставить("Минус",	"-");
СоответствиеКоманд.Вставить("Плюс",		"+");
СоответствиеКоманд.Вставить("СкобкаЗакрывающая",	")");
СоответствиеКоманд.Вставить("СкобкаОткрывающая",	"(");
СоответствиеКоманд.Вставить("Степень",	"Степень(,)");
СоответствиеКоманд.Вставить("Умножить",	"*");
СоответствиеКоманд.Вставить("Делить",	"/");
СоответствиеКоманд.Вставить("Exp",		"Exp()");
СоответствиеКоманд.Вставить("Больше",		">");
СоответствиеКоманд.Вставить("Меньше",		"<");
СоответствиеКоманд.Вставить("Равно",		"=");
СоответствиеКоманд.Вставить("БольшеИлиРавно",		"=>");
СоответствиеКоманд.Вставить("МеньшеИлиРавно",		"<=");
СоответствиеКоманд.Вставить("НеРавно",		"<>");
СоответствиеКоманд.Вставить("Точка",		".");
