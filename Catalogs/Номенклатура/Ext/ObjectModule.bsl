// Функция проверяет, существуют ли ссылки на единицу измерения в движениях регистров накопления.
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылки(СуществуютСсылки) Экспорт
    УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;

	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано

	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);
	Запрос.Текст = "";

	ТипНоменклатура = ТипЗнч(Справочники.Номенклатура.ПустаяСсылка());

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл

		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл

			Если РеквизитРегистра.Тип.СодержитТип(ТипНоменклатура) Тогда

				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрНакопления."+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" КАК Номенклатура
				|ГДЕ
				|	"+РеквизитРегистра.Имя+" = &ТекущийВладелец
				|";

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Если Запрос.Текст = "" Тогда
		Возврат Ложь;
	КонецЕсли;

	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда

		СуществуютСсылки = Неопределено;

		//Если Услуга <> Ссылка.Услуга И СуществуютСсылки(СуществуютСсылки)Тогда

		//	ТекстСообщения = "Номенклатура """ + СокрЛП(Ссылка) + """ участвует в товародвижении.
		//					 |Признак услуги не может быть изменен!";
		//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);

		//КонецЕсли;

		Если ПлановаяЕдиницаИзмерения.Пустая() Тогда
			ПлановаяЕдиницаИзмерения = БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры // ПередЗаписью()

