
//&НаКлиенте
//Перем тТипЦенДляПечати;
//&НаКлиенте
//Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет
//&НаКлиенте
//Перем мМакетКодовСтрокКПВЭД;
//&НаКлиенте
//Перем мОбластьСтрокКПВЭД;
//&НаКлиенте
//Перем мМакетКодовСтрокТНВЭД;
//&НаКлиенте
//Перем мОбластьСтрокТНВЭД;
//&НаКлиенте
//Перем мПлановаяНоменклатура;
//&НаКлиенте
//Перем мПлановаяХарактеристика;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Переменные = Новый Структура;
	Переменные.Вставить("тТипЦенДляПечати");
	Переменные.Вставить("мФормироватьНаименованиеПолноеАвтоматически"); // надо ли формировать автоматически НаименованиеПолное, или нет
	Переменные.Вставить("мМакетКодовСтрокКПВЭД");
	Переменные.Вставить("мОбластьСтрокКПВЭД");
	Переменные.Вставить("мМакетКодовСтрокТНВЭД");
	Переменные.Вставить("мОбластьСтрокТНВЭД");
	Переменные.Вставить("мПлановаяНоменклатура");
	Переменные.Вставить("мПлановаяХарактеристика");
	Переменные.Вставить("ЗначениеКопирования",ЗначениеЗаполнено(Параметры.ЗначениеКопирования));
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Переменные);
	Если Объект.Ссылка.Пустая() Тогда
		Если Переменные.ЗначениеКопирования Тогда
			ЗаполнениеНДСАкциз(Пользователи.ТекущийПользователь());
		КонецЕсли;
	КонецЕсли;

	ПолучитьПлановуюНоменклатуру(Переменные);
	//ЗаполнитьСписокВидовНДСПриИмпорте();
	СписокВидовНДС = Новый СписокЗначений();
	СписокВидовНДС.Добавить(Перечисления.ВидыНДС.НДС);
	СписокВидовНДС.Добавить(Перечисления.ВидыНДС.НДСМетодомЗачета);
	СписокВидовНДС.Добавить(Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты);
	Элементы.ВидНДСПриИмпорте.СписокВыбора.ЗагрузитьЗначения(СписокВидовНДС.ВыгрузитьЗначения());
	
	//оформление
	оф_НДСЗаголовок = "НДС";
	оф_АкцизЗаголовок = "Акциз";
	оф_ПланированиеЗаголовок = "Планирование";
	оф_ПрочееЗаголовок = "Прочее";
	
КонецПроцедуры

// Обработчик события ПриОткрытии для Формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	//обновление наименования строки КПВЭД
	ОбновитьПредставлениеЭлемента("КодСтрокиКПВЭД", Переменные);
	ОбновитьПредставлениеЭлемента("КодСтрокиТНВЭД", Переменные);

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Переменные);
	Элементы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ Объект.Услуга;
	Элементы.БазоваяЕдиницаИзмерения.АвтоВыборНезаполненного   = НЕ Объект.Услуга;
	
КонецПроцедуры // ПриОткрытии()

// Процедура устанавливает доступность реквизитов формы.
//
&НаСервере
Процедура УстановитьДоступность()
    Элементы.ВидНДСПриИмпорте.Доступность = НЕ (Объект.Услуга);
	Элементы.ПлановаяХарактеристика.Доступность = ЗначениеЗаполнено(ПлановаяНоменклатура);
КонецПроцедуры // УстановитьДоступность()

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Переменные)
	Если ПустаяСтрока(Объект.НаименованиеПолное) ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		Переменные.мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		Переменные.мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()
	Если Переменные.мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ЗаполнениеНДСАкциз(глТекущийПользователь)
	//НДС
	Объект.БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяЕдиницаПоКлассификатору");
	Объект.СтавкаНДС               = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
	Объект.ВидНДСПриИмпорте		= Перечисления.ВидыНДС.НДС;
	//Акциз
	Объект.ВидПодакцизногоТМЗ     =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойВидПодакцизногоТМЗ");
	Объект.СтавкаАкциза    	   =  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаАкциза");
	Объект.КоэффициентРасчетаОблагаемойБазыАкциза = 1;
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		тТипЦенДляПечати = ЗначениеВыбора;
	КонецЕсли;
	Если ЗначениеВыбора <> Неопределено Тогда  		
		Попытка
			Если Источник.ИмяМакета  = "КодыКПВЭД" Тогда
				Объект.КодКПВЭД = ЗначениеВыбора.КодСтроки;
				РасшифровкаКодСтрокиКПВЭД = ЗначениеВыбора.Наименование; 		
			КонецЕсли; 
			Если Источник.ИмяМакета  = "КодыТНВЭД" Тогда
				Объект.КодТНВЭД = ЗначениеВыбора.КодСтроки;
				РасшифровкаКодСтрокиТНВЭД = ЗначениеВыбора.Наименование; 		
				РасшифровкаКодСтрокиТНВЭДПеречень = ЗначениеВыбора.ВходитВПереченьИзъятия;
			КонецЕсли; 					
		Исключение	
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ С ЕДИНИЦАМИ ИЗМЕРЕНИЯ

// Обработчик события ПриИзменении для наименования.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Переменные);
КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// Формирование списка выбора.
	Список = Новый СписокЗначений();
	Список.Добавить(Объект.Наименование);
	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, Элементы.НаименованиеПолное);
	Если РезультатВыбора <> Неопределено Тогда
		Объект.НаименованиеПолное                          = РезультатВыбора.Значение;
		Переменные.мФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	УслугаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзмененииНаСервере()
	//Обновить();
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КодКПВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("ИмяМакета","КодыКПВЭД");
	ПараметрыФормы.Вставить("ИмяСекции","Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные",Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки",?(НЕ ЗначениеЗаполнено(Элемент.ТекстРедактирования), Неопределено, СокрЛП(Элемент.ТекстРедактирования)));
	ФормаВыбораКода = ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма);

	////ФормаВыбораКода = ПолучитьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ЭтаФорма);
	//ФормаВыбораКода = ПолучитьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора");
	//
	//ФормаВыбораКода.РежимВыбора = Истина;
	//ФормаВыбораКода.ИмяМакета = "КодыКПВЭД";
	//ФормаВыбораКода.ИмяСекции = "Классификатор";
	//ФормаВыбораКода.ПолучатьПолныеДанные = Истина;
	//ФормаВыбораКода.ТекущийКодСтроки = ?(НЕ ЗначениеЗаполнено(Элемент.Значение), Неопределено, СокрЛП(Элемент.Значение));
	//
	//ФормаВыбораКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("ИмяМакета","КодыТНВЭД");
	ПараметрыФормы.Вставить("ИмяСекции","Область00");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные",Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки",?(НЕ ЗначениеЗаполнено(Элемент.ТекстРедактирования), Неопределено, СокрЛП(Элемент.ТекстРедактирования)));
	ФормаВыбораКода = ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВыбораИзКлассификатора", ПараметрыФормы, ЭтаФорма);
	
	////ФормаВыбораКода = ПолучитьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ЭтаФорма);
	//ФормаВыбораКода = ПолучитьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора");
	//
	//ФормаВыбораКода.РежимВыбора = Истина;
	//ФормаВыбораКода.ИмяМакета = "КодыТНВЭД";
	//ФормаВыбораКода.ИмяСекции = "Область00";
	//ФормаВыбораКода.ПолучатьПолныеДанные = Истина;
	//ФормаВыбораКода.ТекущийКодСтроки = ?(НЕ ЗначениеЗаполнено(Элемент.Значение), Неопределено, СокрЛП(Элемент.Значение));
	//
	//ФормаВыбораКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КодКПВЭДПриИзменении(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбновитьПредставлениеЭлемента("КодСтрокиКПВЭД",Переменные);	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	ОбновитьПредставлениеЭлемента("КодСтрокиТНВЭД",Переменные);	
КонецПроцедуры


// Обновляет описание назначений реквизитов 
//
// Параметры
//  ИмяОбновляемогоЭлемента - строка, содержит имя описываемого реквизита или имя закладки
//
&НаСервере
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента,ЗНАЧ Переменные)
	Если ИмяОбновляемогоЭлемента = "КодСтрокиКПВЭД" Тогда
		Если ПустаяСтрока(СтрЗаменить(Объект.КодКПВЭД, ".", "")) Тогда
			РасшифровкаКодСтрокиКПВЭД = "<не указано>";
		Иначе
			Если Переменные.мМакетКодовСтрокКПВЭД = Неопределено Тогда
				Переменные.мМакетКодовСтрокКПВЭД 	= ПолучитьОбщийМакет("КодыКПВЭД");
				Переменные.мОбластьСтрокКПВЭД   = Переменные.мМакетКодовСтрокКПВЭД.Области.Найти("Классификатор");
			КонецЕсли;
			НаименованиеСтроки = ПолучитьНаименованиеСтрокиКлассификатораПоКоду(Переменные.мМакетКодовСтрокКПВЭД, Переменные.мОбластьСтрокКПВЭД, Объект.КодКПВЭД, 3, 4);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				РасшифровкаКодСтрокиКПВЭД = "строка с кодом " + СокрЛП(Объект.КодКПВЭД) + " не найдена.";
			Иначе
				РасшифровкаКодСтрокиКПВЭД = НаименованиеСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ИмяОбновляемогоЭлемента = "КодСтрокиТНВЭД" Тогда
		Если ПустаяСтрока(СтрЗаменить(Объект.КодТНВЭД, ".", "")) Тогда
			РасшифровкаКодСтрокиТНВЭД = "<не указано>";
		Иначе
			Если Переменные.мМакетКодовСтрокТНВЭД = Неопределено Тогда
				Переменные.мМакетКодовСтрокТНВЭД  = ПолучитьОбщийМакет("КодыТНВЭД");
				Переменные.мОбластьСтрокТНВЭД     = Переменные.мМакетКодовСтрокТНВЭД.Области.Найти("Классификатор");
			КонецЕсли;
			НаименованиеСтроки = ПолучитьНаименованиеСтрокиКлассификатораПоКоду(Переменные.мМакетКодовСтрокТНВЭД, Переменные.мОбластьСтрокТНВЭД, Объект.КодТНВЭД, 4, 5);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				РасшифровкаКодСтрокиТНВЭД = "строка с кодом " + СокрЛП(Объект.КодТНВЭД) + " не найдена.";
			Иначе
				РасшифровкаКодСтрокиТНВЭД = НаименованиеСтроки;
			КонецЕсли;
			
			СписокТНВЭДПереченьИзъятий = РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.ЗаполнитьСписокПереченьИзъятий();
			
			//проверим входит ли товар в перечень изъятий
			Если СписокТНВЭДПереченьИзъятий.НайтиПоЗначению(Объект.КодТНВЭД) <>Неопределено Тогда
				РасшифровкаКодСтрокиТНВЭДПеречень = НСтр("ru ='Товар входит в перечень изъятий'");
			Иначе
				РасшифровкаКодСтрокиТНВЭДПеречень= "";
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбновитьПредставлениеЭлемента()

// Функция возвращает наименование строки из макета классификатора по ее коду
//
// Параметры:
//	ТабличныйМакет - табличный документ, содеджащий данные классификатора
//	Область - область табличного документа, по строкам которой осуществляется поиск
//	КодСтроки - строковый код 
//	НомерКолонкиКода - число - номер колонки, в которой содержатся коды строк
//	НомерКолонкиНаименования - число - номер колонки, в которой содержатся наименование строк
//
&НаСервере
Функция ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКлассификатора, Область, Знач КодСтроки, НомерКолонкиКода = 1, НомерКолонкиНаименования = 2) Экспорт

	НаименованиеСтроки = "";
	КодСтроки = ВРег(СокрЛП(КодСтроки));

	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		
		Если КодСтроки = ВРег(СокрЛП(МакетКлассификатора.Область(НомерСтроки, НомерКолонкиКода).Текст)) Тогда
			НаименованиеСтроки = МакетКлассификатора.Область(НомерСтроки, НомерКолонкиНаименования).Текст;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Возврат НаименованиеСтроки;

КонецФункции // ПолучитьНаименованиеСтрокиПоКоду()

&НаКлиенте
Процедура БазоваяЕдиницаИзмеренияПриИзменении(Элемент)
	Если Объект.ПлановаяЕдиницаИзмерения.Пустая() Тогда
		Объект.ПлановаяЕдиницаИзмерения = Объект.БазоваяЕдиницаИзмерения;
	КонецЕсли;
	Элементы.ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = ОбъектБазоваяЕдиницаИзмеренияНаименованиеПолное();
	Элементы.ИнформационнаяНадписьПлановойЕдиницыИзмерения.Заголовок = ОбъектПлановаяЕдиницаИзмеренияНаименованиеПолное();

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНоменклатураПриИзменении(Элемент)
	Если ПлановаяНоменклатура.Пустая() Тогда
		ПлановаяХарактеристика = ПредопределенноеЗначение("Справочник.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	Объект.ПлановаяЕдиницаИзмерения = ПолучитьСвойство(ПлановаяНоменклатура,"ПлановаяЕдиницаИзмерения");
	Объект.ОсновнойПоставщик = ПолучитьСвойство(ПлановаяНоменклатура,"ОсновнойПоставщик");
	УстановитьДоступность();
КонецПроцедуры

&НаСервере
Процедура ПолучитьПлановуюНоменклатуру(Переменные)
    ПлановаяНоменклатура 	= Справочники.фин_ПлановаяНоменклатура.ПустаяСсылка();
	ПлановаяХарактеристика 	= Справочники.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка();
	ДатаСоответствия 		= НачалоГода(ТекущаяДата());
	
	Переменные.мПлановаяНоменклатура 	= ПлановаяНоменклатура;
	Переменные.мПлановаяХарактеристика	= ПлановаяХарактеристика;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие.Период,
		|	Соответствие.ПлановаяНоменклатура,
		|	Соответствие.ХарактеристикаПлановойНоменклатуры
		|ИЗ
		|	РегистрСведений.узп_СоответствиеПлановойИРегламентированнойНоменклатуры.СрезПоследних КАК Соответствие
		|ГДЕ
		|	Соответствие.РегламентированнаяНоменклатура = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
	    ПлановаяНоменклатура = Выборка.ПлановаяНоменклатура;
		ПлановаяХарактеристика = Выборка.ХарактеристикаПлановойНоменклатуры;
		ДатаСоответствия = Выборка.Период;
	КонецЕсли;
 	Переменные.мПлановаяНоменклатура 	= ПлановаяНоменклатура;
	Переменные.мПлановаяХарактеристика	= ПлановаяХарактеристика;
	мПлановаяНоменклатура = ПлановаяНоменклатура;
	мПлановаяХарактеристика = ПлановаяХарактеристика;
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.фин_ПлановаяНоменклатура.ФормаВыбора",
				  Новый Структура("Отбор",Новый Структура("ТипПозицииВПланеЗакупок",?(Объект.Услуга,
				  Получитьузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокУслуга(),
				  Получитьузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокТовар()))),
				  Элемент);
КонецПроцедуры

&НаСервере
Функция Получитьузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокУслуга()
	Возврат Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Услуга;
КонецФункции

&НаСервере
Функция Получитьузп_ТипыПозицийПлановойНоменклатурыВПланеЗакупокТовар()
	Возврат Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.товар;
КонецФункции

// Обработчик события ОбновлениеОтображения формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Элементы.ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = Объект.БазоваяЕдиницаИзмерения.НаименованиеПолное;
	Элементы.ИнформационнаяНадписьПлановойЕдиницыИзмерения.Заголовок = Объект.ПлановаяЕдиницаИзмерения.НаименованиеПолное;
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ОткрытьФорму("РегистрСведений.узп_СоответствиеПлановойИРегламентированнойНоменклатуры.Форма.ФормаИстории",Новый Структура("Номенклатура",Объект.Ссылка),ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не Объект.Услуга Тогда
		Если НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
			ПоказатьПредупреждение(,"Перед записью необходимо определить единицу измерения!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Переменные,ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если мПлановаяНоменклатура <>ПлановаяНоменклатура ИЛИ мПлановаяХарактеристика <> ПлановаяХарактеристика Тогда
		Справочники.Номенклатура.ЗаписьВРегистрСоответствиеНоменклатуры(ТекущийОбъект, ПлановаяНоменклатура, ПлановаяНоменклатура, ДатаСоответствия, Отказ);
		мПлановаяНоменклатура = ПлановаяНоменклатура;
		мПлановаяХарактеристика = ПлановаяХарактеристика;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяЕдиницаИзмеренияПриИзменении(Элемент)
	Элементы.ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = ОбъектБазоваяЕдиницаИзмеренияНаименованиеПолное();
	Элементы.ИнформационнаяНадписьПлановойЕдиницыИзмерения.Заголовок = ОбъектПлановаяЕдиницаИзмеренияНаименованиеПолное();
КонецПроцедуры

&НаСервере
Функция ОбъектБазоваяЕдиницаИзмеренияНаименованиеПолное()
	Возврат Объект.БазоваяЕдиницаИзмерения.НаименованиеПолное;
КонецФункции
&НаСервере
Функция ОбъектПлановаяЕдиницаИзмеренияНаименованиеПолное()
	Возврат Объект.ПлановаяЕдиницаИзмерения.НаименованиеПолное;
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Попытка
		Результат = Значение[Свойство];
	Исключение	
		Результат = Неопределено;
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ПлановаяНоменклатура) И НЕ ЗначениеЗаполнено(ДатаСоответствия) Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле даты действия плановой номенклатуры!'"), , "ДатаСоответствия", "", Отказ);		
	КонецЕсли;
	
КонецПроцедуры
