////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ПолучитьКадровыеДанныеФизлица Экспорт;

// Учет ОППВ
Перем мОрганизацияЯвляетсяВкладчикомОППВ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("Сотрудник", 				Ссылка);
	Запрос.УстановитьПараметр("Руководитель",			Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
    Запрос.УстановитьПараметр("ДатаДокумента",	 		ДатаДоговора);
	Запрос.УстановитьПараметр("ВидАдресаРегистрации", 	Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("ВидТелефонаДомашний", 	Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
 	Запрос.УстановитьПараметр("ВидАдресаОрганизации", 	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Запрос.УстановитьПараметр("ВидТелефонаОрганизации", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Запрос.УстановитьПараметр("ОсновноеМестоРаботы",	Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ТекущаДата",				ОбщегоНазначения.ПолучитьРабочуюДату());

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
		|	ТрудовойДоговор.НомерДоговора КАК НомерДок,
		|	ТрудовойДоговор.ДатаДоговора КАК ДатаДок,
		|	ВЫРАЗИТЬ(ТрудовойДоговор.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолноеНазваниеОрганизации,
		|	ВЫБОР
		|		КОГДА ФИООтветственныхЛиц.Фамилия ЕСТЬ NULL 
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|		ИНАЧЕ ФИООтветственныхЛиц.Фамилия + "" "" + ФИООтветственныхЛиц.Имя + "" "" + ФИООтветственныхЛиц.Отчество
		|	КОНЕЦ КАК ФИОРуководителя,
		|	ВЫБОР
		|		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL 
		|			ТОГДА ТрудовойДоговор.Физлицо.Наименование
		|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК ФИОРаботника,
		|	ТрудовойДоговор.ДатаОкончания КАК ДатаУвольнения,
		|	ТрудовойДоговор.ДатаНачала КАК ДатаПриема,
		|	ТрудовойДоговор.Должность.Наименование КАК Должность,
		|	ТрудовойДоговор.ТарифныйРазряд.Наименование КАК ТарифныйРазряд,
		|	ТрудовойДоговор.ЗанимаемыхСтавок,
		|	ТрудовойДоговор.ИспытательныйСрок,
		|	ВЫБОР
		|		КОГДА Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <= ТрудовойДоговор.ДатаДоговора
		|				И ТрудовойДоговор.ДатаДоговора <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ТрудовойДоговор.Физлицо.ИдентификационныйКодЛичности
		|		КОГДА ТрудовойДоговор.ДатаДоговора = ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <= &ТекущаДата
		|			ТОГДА ТрудовойДоговор.Физлицо.ИдентификационныйКодЛичности
		|		ИНАЧЕ ТрудовойДоговор.Физлицо.РНН
		|	КОНЕЦ КАК ФизЛицоРНН_ИИН,
		|	ВЫБОР
		|		КОГДА Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <= ТрудовойДоговор.ДатаДоговора
		|				И ТрудовойДоговор.ДатаДоговора <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА "" номер ИИН)""
		|		КОГДА ТрудовойДоговор.ДатаДоговора = ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <> ДАТАВРЕМЯ(1, 1, 1)
		|				И Константы.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах <= &ТекущаДата
		|			ТОГДА "" номер ИИН)""
		|		ИНАЧЕ "" номер РНН)""
		|	КОНЕЦ КАК НадписьРНН_ИИН,
		|	ТрудовойДоговор.Физлицо.СИК КАК ФизЛицоСИК,
		|	ТрудовойДоговор.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТрудовойДоговор.ВидЗанятости = &ОсновноеМестоРаботы
		|			ТОГДА ""основное место работы""
		|		ИНАЧЕ ""совместитель""
		|	КОНЕЦ КАК ВидЗанятости,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВидПредставление,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
		|	АдресРегистрации.Представление КАК АдресРегистрации,
		|	ТелефонДомашний.Представление КАК Телефоны,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК АдресОрганизации,
		|	ТелефонОрганизации.Представление КАК ТелефоныОрганизации,
		|	ТрудовойДоговор.Организация.Наименование КАК НазваниеОрганизации,
		|	ТрудовойДоговор.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		|	ТрудовойДоговор.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	ТрудовойДоговор.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	ТрудовойДоговор.ТарифнаяСтавка,
		|	ВЫРАЗИТЬ(ТрудовойДоговор.ВалютаТарифнойСтавки.ПараметрыПрописиНаРусском КАК СТРОКА(1000)) КАК ПараметрыПрописиВалюты,
		|	ВЫБОР
		|		КОГДА Обеды.ЧасыОбеда ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ Обеды.ЧасыОбеда
		|	КОНЕЦ КАК ЧасыОбеда,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ШтатноеРасписание.УсловияТруда.НаименованиеПолное КАК СТРОКА(1000)), """") КАК УсловияТруда,
		|	ПриказОПриеме.Номер КАК НомерПриказаОПриеме,
		|	ПриказОПриеме.Дата КАК ДатаПриказаОПриеме,
		|	ЕСТЬNULL(КоэффициентыОплаты.КоэффициентНочные, 0) КАК КоэффициентНочные,
		|	ЕСТЬNULL(КоэффициентыОплаты.КоэффициентПраздничныеИВыходные, 0) КАК КоэффициентПраздничныеИВыходные,
		|	ЕСТЬNULL(КоэффициентыОплаты.КоэффициентСверхурочные, 0) КАК КоэффициентСверхурочные
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК ТрудовойДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИООтветственныхЛиц
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИООтветственныхЛиц.ФизЛицо
		|		ПО ТрудовойДоговор.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛиц
		|		ПО ТрудовойДоговор.Физлицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ТрудовойДоговор.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресРегистрации
		|		ПО ТрудовойДоговор.Физлицо = АдресРегистрации.Объект
		|			И (АдресРегистрации.Вид = &ВидАдресаРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонДомашний
		|		ПО ТрудовойДоговор.Физлицо = ТелефонДомашний.Объект
		|			И (АдресРегистрации.Вид = &ВидТелефонаДомашний)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ТрудовойДоговор.Организация = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = &ВидАдресаОрганизации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
		|		ПО ТрудовойДоговор.Организация = ТелефонОрганизации.Объект
		|			И (ТелефонОрганизации.Вид = &ВидТелефонаОрганизации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ГрафикиРаботыПериодыСмены.Ссылка КАК Ссылка,
		|			РАЗНОСТЬДАТ(МИНИМУМ(ГрафикиРаботыПериодыСмены.ВремяОкончания), МАКСИМУМ(ГрафикиРаботыПериодыСмены.ВремяНачала), ЧАС) КАК ЧасыОбеда
		|		ИЗ
		|			Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ГрафикиРаботыПериодыСмены.Ссылка) КАК Обеды
		|		ПО ТрудовойДоговор.ГрафикРаботы = Обеды.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК ШтатноеРасписание
		|		ПО ТрудовойДоговор.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		|			И ТрудовойДоговор.Должность = ШтатноеРасписание.Должность
		|			И ТрудовойДоговор.ТарифныйРазряд = ШтатноеРасписание.ТарифныйРазряд
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ПриказОПриеме.Ссылка) КАК Ссылка
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриказОПриеме
		|		ГДЕ
		|			ПриказОПриеме.Сотрудник = &Сотрудник
		|			И (НЕ ПриказОПриеме.Ссылка.ПометкаУдаления)) КАК ПоследнийПриказОПриеме
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию КАК ПриказОПриеме
		|		ПО (ПоследнийПриказОПриеме.Ссылка = ПриказОПриеме.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыОплатыСверхнормативныхРабот.СрезПоследних(&ДатаДокумента, ) КАК КоэффициентыОплаты
		|		ПО ТрудовойДоговор.Организация = КоэффициентыОплаты.Организация,
		|	Константы КАК Константы
		|ГДЕ
		|	ТрудовойДоговор.Ссылка = &Сотрудник";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Формирует текстовую строку, содержащую описание предоставляемых работнику отпуков
//
Функция ПолучитьОписаниеПредоставляемыхОтпусков()

	ОписаниеТекст = "";

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	  ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизЛицо", 				  ФизЛицо);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Должность",				  Должность);
	Запрос.УстановитьПараметр("ДатаАктуальности",		  ДатаДоговора);
	Запрос.УстановитьПараметр("ОтпускЕжегодный",		  Справочники.ВидыТрудовыхОтпусков.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("Прекратить",				  Перечисления.ВидыДействияСНачислением.Прекратить);
	
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		  Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение",	  Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДолжность",		  Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеФизЛицо",		      Справочники.ФизическиеЛица.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска.Наименование КАК ВидОтпуска,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска,
	|	СУММА(ПредоставляемыеОтпуска.РазмерОтпуска) КАК РазмерОтпуска
	|ИЗ
	|	РегистрСведений.ПредоставляемыеОтпускаОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			// предоставляемые в целом в организации
	|			(Организация = &ГоловнаяОрганизация
	|				И ПодразделениеОрганизации = &ПустоеПодразделение
	|				И Должность = &ПустаяДолжность
	|				И ФизЛицо = &ПустоеФизЛицо)
	|
	|			ИЛИ 
	|
	|			// отпуска шт. единицы
	|			(Организация = &ПустаяОрганизация
	|				И ПодразделениеОрганизации = &ПодразделениеОрганизации
	|				И Должность = &Должность
	|				И ФизЛицо = &ПустоеФизЛицо)
	|
	|			ИЛИ 
	|			
	|			// персональные предоставляемые отпуска
	|			(Организация = &ГоловнаяОрганизация
	|				И ПодразделениеОрганизации = &ПустоеПодразделение
	|				И Должность = &ПустаяДолжность
	|				И ФизЛицо = &ФизЛицо)) КАК ПредоставляемыеОтпуска
	|
	|ГДЕ
	|	ПредоставляемыеОтпуска.Действие <> &Прекратить
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска.Наименование
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	// сначала всегда основной ежегодный отпуск, потом все остальные
	|	ВЫБОР
	|		КОГДА ПредоставляемыеОтпуска.ВидТрудовогоОтпуска = &ОтпускЕжегодный
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПредоставляемыеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если ОписаниеТекст <> "" Тогда
			ОписаниеТекст = ОписаниеТекст + ?(НомерСтроки = Выборка.Количество(), " и ", ", ");
		КонецЕсли;
		
		ОписаниеТекст = ОписаниеТекст + НРег(Выборка.ВидОтпуска) + " " + Выборка.РазмерОтпуска + " календарных дней";
	
	КонецЦикла;

	Возврат ОписаниеТекст;

КонецФункции // ПолучитьОписаниеПредоставляемыхОтпусков

// Формирует текстовую строку, содержащую описание предоставляемых работнику доплат и надбавок
// за вредные условия труда
//
Функция ПолучитьОписаниеДоплатЗаВредныеУсловияТруда()

	ОписаниеТекст = "";

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	  ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизЛицо", 				  ФизЛицо);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Должность",				  Должность);
	Запрос.УстановитьПараметр("ТарифныйРазряд",			  ТарифныйРазряд);
	Запрос.УстановитьПараметр("ДатаАктуальности",		  ДатаДоговора);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", 		  Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПустаяВалюта",			  Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сотрудник",				  Ссылка);
	Запрос.УстановитьПараметр("ПустойВидКомпенсации", 	  Справочники.ВидыКомпенсацийЗаВредныеУсловияТруда.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипПоказателяТарифныйРазряд", Перечисления.ТипыПоказателейСхемМотивации.ТарифныйРазряд);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Надбавки.ВидРасчета,
	|	Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПерсональныеНадбавки.Надбавка КАК ВидРасчета
	|	ИЗ
	|		Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК ПерсональныеНадбавки
	|	ГДЕ
	|		ПерсональныеНадбавки.Ссылка = &Сотрудник
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НадбавкиПоШР.ВидНадбавки
	|	ИЗ
	|		РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				ПодразделениеОрганизации = &ПодразделениеОрганизации
	|					И Должность = &Должность
	|					И ТарифныйРазряд = &ТарифныйРазряд) КАК НадбавкиПоШР
	|	ГДЕ
	|		НадбавкиПоШР.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК Надбавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|		ПО Надбавки.ВидРасчета = Показатели1.Ссылка
	|			И (Показатели1.НомерСтроки = 1)
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПерсональныеНадбавки.Надбавка.Наименование КАК ВидНадбавки,
	|	ПерсональныеНадбавки.Надбавка.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ПерсональныеНадбавки.Надбавка.ТребуетВводаТарифногоРазряда
	|				ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|			ТОГДА РазмерТарифныхСтавок.Размер
	|		ИНАЧЕ ПерсональныеНадбавки.Показатель1
	|	КОНЕЦ КАК Размер,
	|	ВЫБОР
	|		КОГДА ПерсональныеНадбавки.Надбавка.ТребуетВводаТарифногоРазряда
	|				ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|			ТОГДА ВЫБОР
	|					КОГДА РазмерТарифныхСтавок.Валюта = &ПустаяВалюта
	|						ТОГДА &ВалютаРеглУчета
	|					ИНАЧЕ РазмерТарифныхСтавок.Валюта
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПерсональныеНадбавки.Валюта1 = &ПустаяВалюта
	|					ТОГДА &ВалютаРеглУчета
	|				ИНАЧЕ ПерсональныеНадбавки.Валюта1
	|			  КОНЕЦ
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.ПерсональныеНадбавки КАК ПерсональныеНадбавки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК Показатели 
	|		ПО ПерсональныеНадбавки.Надбавка = Показатели.ВидРасчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
	|			&ДатаАктуальности,
	|			Должность = &Должность
	|			И ТарифныйРазряд = &ТарифныйРазряд) КАК РазмерТарифныхСтавок
	|		ПО ИСТИНА
	|ГДЕ
	|	ПерсональныеНадбавки.Ссылка = &Сотрудник
	|	И ЕСТЬNULL(ПерсональныеНадбавки.Надбавка.ВидКомпенсацииЗаВредныеУсловияТруда, &ПустойВидКомпенсации) <> &ПустойВидКомпенсации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НадбавкиПоШР.ВидНадбавки.Наименование КАК ВидНадбавки,
	|	НадбавкиПоШР.ВидНадбавки.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА НадбавкиПоШР.ВидНадбавки.ТребуетВводаТарифногоРазряда
	|				ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|			ТОГДА РазмерТарифныхСтавок.Размер
	|		ИНАЧЕ НадбавкиПоШР.Показатель1
	|	КОНЕЦ КАК Размер,
	|	ВЫБОР
	|		КОГДА НадбавкиПоШР.ВидНадбавки.ТребуетВводаТарифногоРазряда
	|				ИЛИ Показатели.Показатель1ТипПоказателя = &ТипПоказателяТарифныйРазряд
	|			ТОГДА ВЫБОР
	|					КОГДА РазмерТарифныхСтавок.Валюта = &ПустаяВалюта
	|						ТОГДА &ВалютаРеглУчета
	|					ИНАЧЕ РазмерТарифныхСтавок.Валюта
	|				  КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НадбавкиПоШР.Валюта1 = &ПустаяВалюта
	|					ТОГДА &ВалютаРеглУчета
	|				ИНАЧЕ НадбавкиПоШР.Валюта1
	|			  КОНЕЦ
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ПодразделениеОрганизации = &ПодразделениеОрганизации
	|			И Должность = &Должность
	|			И ТарифныйРазряд = &ТарифныйРазряд) КАК НадбавкиПоШР
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК Показатели 
	|		ПО НадбавкиПоШР.ВидНадбавки = Показатели.ВидРасчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
	|			&ДатаАктуальности,
	|			Должность = &Должность
	|			И ТарифныйРазряд = &ТарифныйРазряд) КАК РазмерТарифныхСтавок
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	НадбавкиПоШР.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И ЕСТЬNULL(НадбавкиПоШР.ВидНадбавки.ВидКомпенсацииЗаВредныеУсловияТруда, &ПустойВидКомпенсации) <> &ПустойВидКомпенсации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНадбавки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если ОписаниеТекст <> "" Тогда
			ОписаниеТекст = ОписаниеТекст + ?(НомерСтроки = Выборка.Количество(), " и ", ", ");
		КонецЕсли;
		
		Размер = Выборка.Размер;
		Если ЗначениеЗаполнено(Размер) Тогда
			
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
					ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
					ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Тогда
				
				ОписаниеТекст = ОписаниеТекст + НРег(Выборка.ВидНадбавки) + " " + Размер + "%";
			
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
					
				ОписаниеТекст = ОписаниеТекст + НРег(Выборка.ВидНадбавки) + " " + Размер + " МРП";

			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
					
				ОписаниеТекст = ОписаниеТекст + НРег(Выборка.ВидНадбавки) + " " + Размер + " МЗП";
				
			Иначе

				НазваниеВалютыЦелойЧасти = "";
				НазваниеВалютыДробнойЧасти = "";
				ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(Выборка.Валюта, Размер, НазваниеВалютыЦелойЧасти, НазваниеВалютыДробнойЧасти);
				
				ОписаниеТекст = ОписаниеТекст + НРег(Выборка.ВидНадбавки) + " " + Цел(Размер) + " " + НазваниеВалютыЦелойЧасти +
									?(Цел(Размер) <> Размер, " " + Строка((Размер - Цел(Размер))*100) + " " + НазваниеВалютыДробнойЧасти, "");
			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ОписаниеТекст;

КонецФункции // ПолучитьОписаниеДоплатЗаВредныеУсловияТруда

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

// Процедура проверяет соответсвие РНН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  РНН  - значение РНН
//  ПолеВвода  - поле ввода в котором вводится РНН
//  ЮрФИзЛицо - значение перечисления ЮрФИзЛицо
//
Процедура ПроверитьРННОформитьПолеВвода(РНН, ПолеВвода, ВыводитьСообщение = Истина) Экспорт
	
	Если ЗначениеЗаполнено(РНН) И НЕ ОбщегоНазначения.РННСоответствуетТребованиям(РНН, ВыводитьСообщение) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в РНН";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРННОформитьПолеВвода()

// Процедура проверяет соответсвие СИК требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  СИК - СИК
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьСИКОформитьПолеВвода(СИК, ПолеВвода) Экспорт
	
	Если ЗначениеЗаполнено(СИК) И НЕ ОбщегоНазначения.СИКСоответствуетТребованиям(СИК) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в СИК";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСИКОформитьПолеВвода()

// Процедура проверяет соответсвие ИНН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  ИНН  - значение ИНН
//  ПолеВвода  - поле ввода в котором вводится ИНН
//  ЮрФИзЛицо - значение перечисления ЮрФИзЛицо
//
Процедура ПроверитьИИНОформитьПолеВвода(ИИН, ПолеВвода, ВыводитьСообщение = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ИИН) И НЕ ОбщегоНазначения.ИИНБИНСоответствуетТребованиям(ИИН, ВыводитьСообщение) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в ИИН";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРННОформитьПолеВвода()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;                                                                 
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Договор" Тогда

		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовойДоговор_Печать";
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		
		// получаем макет
		Макет = ПолучитьМакет("Макет");

		// выводим данные 
	    Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ПолноеНазваниеОрганизации = СокрЛП(Выборка.ПолноеНазваниеОрганизации);
			Макет.Параметры.УсловияТруда = СокрЛП(Выборка.УсловияТруда);
			Макет.Параметры.УдостоверениеЛичности = "" + Выборка.ДокументВидПредставление + ", серия: " + Выборка.ДокументСерия + ", № " + Выборка.ДокументНомер 
			                        + ", выдан: " + Формат(Выборка.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
			                        + СокрЛП(Выборка.ДокументКемВыдан);
			Макет.Параметры.ДатаПриема = Формат(Выборка.ДатаПриема,"ДФ=дд.ММ.гггг");
			
			Если ЗначениеЗаполнено(Выборка.ТарифнаяСтавка) Тогда
				НазваниеВалютыЦелойЧасти = "";
				НазваниеВалютыДробнойЧасти = "";
				ОбщегоНазначения.ПолучитьНазваниеЦелойИДробнойЧастиВалюты(Выборка.ПараметрыПрописиВалюты, Выборка.ТарифнаяСтавка, НазваниеВалютыЦелойЧасти, НазваниеВалютыДробнойЧасти);
				Макет.Параметры.ТарифнаяСтавка = "" + Цел(Выборка.ТарифнаяСтавка) + " " + НазваниеВалютыЦелойЧасти + 
													?(Выборка.ТарифнаяСтавка <> Цел(Выборка.ТарифнаяСтавка), " " + Строка((Выборка.ТарифнаяСтавка - Цел(Выборка.ТарифнаяСтавка))*100) + " " + НазваниеВалютыДробнойЧасти, "");
													
				ВидТарифнойСтавки = "";
				
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
					ВидТарифнойСтавки = "месяц";
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
					ВидТарифнойСтавки = "день";
				Иначе
					ВидТарифнойСтавки = "час";
				КонецЕсли;
				Макет.Параметры.ВидТарифнойСтавки = ВидТарифнойСтавки;
			Иначе
				Макет.Параметры.ТарифнаяСтавка = "";
			КонецЕсли;													

			Макет.Параметры.ИспытательныйСрокСтрокой = ?(НЕ ЗначениеЗаполнено(Выборка.ИспытательныйСрок),"", "" + Выборка.ИспытательныйСрок + " месяца(ев)" );

			Если ЗначениеЗаполнено(Выборка.КоэффициентНочные)
					ИЛИ ЗначениеЗаполнено(Выборка.КоэффициентПраздничныеИВыходные)
					ИЛИ ЗначениеЗаполнено(Выборка.КоэффициентСверхурочные) Тогда
				Макет.Параметры.КоэффициентыОплаты = "" + Выборка.КоэффициентСверхурочные + "; " +
														Выборка.КоэффициентПраздничныеИВыходные + "; " +
														Выборка.КоэффициентНочные + " соответственно.";
			КонецЕсли;
			
			Если Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Пятидневка Тогда
				Макет.Параметры.ЧасовВДень = Выборка.ДлительностьРабочейНедели / 5;
				Макет.Параметры.ДнейВНеделе = 5;
				Макет.Параметры.ЧислоВыходных = 2;
			ИначеЕсли Выборка.ВидГрафика = Перечисления.ВидыРабочихГрафиков.Шестидневка Тогда
				Макет.Параметры.ЧасовВДень = Выборка.ДлительностьРабочейНедели / 6;
				Макет.Параметры.ДнейВНеделе = 6;
				Макет.Параметры.ЧислоВыходных = 1;
			КонецЕсли;
			
			Макет.Параметры.ПредоставляемыеОтпуска = ПолучитьОписаниеПредоставляемыхОтпусков();
			
			Макет.Параметры.КомпенсацииЗаВредныеУсловияТруда = ПолучитьОписаниеДоплатЗаВредныеУсловияТруда();
			
			Макет.Параметры.НомерДок = Выборка.НомерДок;
			
			Макет.Параметры.ДатаУвольнения = ?(НЕ ЗначениеЗаполнено(Выборка.ДатаУвольнения),""," до "+Формат(Выборка.ДатаУвольнения,"ДФ=дд.ММ.гггг"));
			Если ЗначениеЗаполнено(Выборка.ТарифныйРазряд) Тогда
				Макет.Параметры.Должность = "" + Выборка.Должность + ", " + Выборка.ТарифныйРазряд;
			КонецЕсли;
		КонецЕсли;

		// выводим готовый документ
		ТабДокумент.Вывести(Макет);

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Трудовой договор: " + ЭтотОбъект.Наименование);

КонецПроцедуры // Печать

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция возвращаект сведения о надбавках позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОНадбавкахПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.ВидНадбавки КАК Надбавка,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Показатель6,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта1,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта2,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта3,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта4,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта5,
	|   НадбавкиПоШтатномуРасписаниюСрезПоследних.Валюта6
	|ИЗ
	|   РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			ПодразделениеОрганизации = &Подразделение
	|				И Должность = &Должность) КАК НадбавкиПоШтатномуРасписаниюСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОНадбавкахПозицииШтатногоРасписания()

// Функция формирует уникальный номер трудового договора
// уникальность в пределах года
// 
Функция ПолучитьНомерТрудовогоДоговора() Экспорт
	
	Если Организация.Пустая() Тогда
		Возврат НомерДоговора;
	КонецЕсли;
	
	ВидыДоговоров	= Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
 
	Если ВидыДоговоров.Найти(ВидДоговора) = Неопределено Тогда
		Возврат НомерДоговора;
	КонецЕсли;
	
	ДатаДоговораДляЗапроса = ?(ЗначениеЗаполнено(ДатаДоговора), ДатаДоговора, ОбщегоНазначения.ПолучитьРабочуюДату());
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("парамОрганизация", Организация);
	СтруктураПараметров.Вставить("парамНачалоГода" , НачалоГода(НачалоДня(ДатаДоговораДляЗапроса)));
	СтруктураПараметров.Вставить("парамКонецГода"  , КонецГода(КонецДня(ДатаДоговораДляЗапроса)));
	СтруктураПараметров.Вставить("парамВидДоговора", ВидДоговора);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизаций.НомерДоговора) КАК НомерДок
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &парамОрганизация
	|	И СотрудникиОрганизаций.ВидДоговора = &парамВидДоговора
	|	И СотрудникиОрганизаций.ДатаДоговора МЕЖДУ &парамНачалоГода И &парамКонецГода";
	
	РезультатЗапроса = ПолныеПрава.ВыполнитьЗапросВПривилегированномМодуле(ТекстЗапроса, СтруктураПараметров);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Организация.Префикс + "0000001";
	Иначе
		
		СтрокаРезультата = РезультатЗапроса.Выгрузить()[0];
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.НомерДок) Тогда
			Возврат Организация.Префикс + "0000001";
		Иначе
			Возврат ПроцедурыУправленияПерсоналом.ПолучитьСледующийНомер(СокрП(СтрокаРезультата.НомерДок));
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНомерТрудовогоДоговора()

Процедура ПроверитьНомерТрудовогоДоговора(НачальнаяДатаДокумента) Экспорт
	
	//определяем разность старой и новой даты договора
	РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДатаДоговора);
	
	Если РазностьДат <> 0 Тогда
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНомерТрудовогоДоговора() 

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Договор","Договор");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "Копирование" объекта
Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		Наименование = "";
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Заполнение" объекта
Процедура ОбработкаЗаполнения(Основание)
	
	Если НЕ ЭтоГруппа Тогда 		
		ТипОснования = ТипЗнч(Основание); 		
		Если ТипОснования = Тип("СправочникСсылка.ФизическиеЛица") 
			И НЕ Основание.ЭтоГруппа Тогда
			Физлицо = Основание;
		Иначе
			ФизЛицо = СотрудникиОрганизацийПереопределяемый.ПолучитьФизЛицоИзОснования(Основание);
		КонецЕсли;     		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" объекта
//
//Процедура ПередЗаписью(Отказ)
//	
Процедура ПередЗаписью(Отказ)
	
	Если ПолучитьКадровыеДанныеФизлица Тогда
		Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
			СтруктураКадровыеДанные = ПолучитьТекущиеКадровыеДанныеФизлица(ЭтотОбъект.Физлицо, Отказ);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураКадровыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И Физлицо.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для сотрудника не задано физическое лицо!", Отказ);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И СтруктурнаяЕдиница.Пустая() Тогда
		СтруктурнаяЕдиница = Организация
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И НЕ ЗначениеЗаполнено(ДатаПриемаНаРаботу) И ТекущаяСтруктурнаяЕдиница <> СтруктурнаяЕдиница Тогда
		ТекущаяСтруктурнаяЕдиница = СтруктурнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФУНКЦИИ ОБЪЕКТА

// Определяет имеет ли смысл спрашивать у пользователя обособленное подразделение,
//	гдебудет работать сотрудник
//
// Параметры
//	нет
//
// Возвращаемое значение:
//   булево
//
Функция ПоказыватьОбособленноеПодразделение(ЭтаФорма) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ЭтаФорма.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ЮрФизЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий() // организация должна быть выбрана
		И Выборка.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо // это не должно быть физлицо
		И ЭтаФорма.мСписокОбособленныхПодразделений.Количество() > 1; // у нашей орг есть обособленные подразделения

КонецФункции // ПоказыватьОбособленноеПодразделение()

Процедура ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтотОбъект) Экспорт
	
	ДанныеШР = СведенияОПозицииШтатногоРасписания(ЭтаФорма.ДатаДоговора, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность);
	НадбавкиПоШР = СведенияОНадбавкахПозицииШтатногоРасписания(ЭтаФорма.ДатаДоговора, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность);
	Если ДанныеШР.Количество() > 0 Тогда
		ЭтаФорма.ВалютаТарифнойСтавки = ДанныеШР[0].ВалютаТарифнойСтавки;
		ЭтаФорма.ГрафикРаботы 		  = ДанныеШР[0].ГрафикРаботы;
		ЭтаФорма.ТарифнаяСтавка       = ДанныеШР[0].УстановленнаяТарифнаяСтавка;
	КонецЕсли;
	Если НадбавкиПоШР.Количество() > 0 И ЭтаФорма.ПерсональныеНадбавки.Количество() = 0 Тогда
		Для Каждого НадбавкаПоШР Из НадбавкиПоШР Цикл
			ЗаполнитьЗначенияСвойств(ЭтаФорма.ПерсональныеНадбавки.Добавить(), НадбавкаПоШР);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ФОРМЫ ЭЛЕМЕНТА

// Процедура формирует список обособленных подразделений организации
Процедура СформироватьСписокОбособленныхПодразделений(ЭтаФорма) Экспорт
	
	ЭтаФорма.мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);

КонецПроцедуры // СформироватьСписокОбособленныхПодразделений()

// Процедура очищает не используемые реквизиты перед записью объекта
Процедура ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма) Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	
	Если ВидыДоговоров.Найти(ЭтаФорма.ВидДоговора) = Неопределено Тогда
		
		ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		ЭтаФорма.НомерДоговора ="";
		ЭтаФорма.ДатаДоговора = Дата('00010101');
		ЭтаФорма.ПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ЭтаФорма.Должность		 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		ЭтаФорма.ГрафикРаботы	 = Справочники.ГрафикиРаботы.ПустаяСсылка();
		ЭтаФорма.ЗанимаемыхСтавок = 0;
		ЭтаФорма.ДатаНачала 	  = Дата('00010101');
		ЭтаФорма.ДатаОкончания = Дата('00010101');
		ЭтаФорма.ИспытательныйСрок = 0;
		ЭтаФорма.ТарифнаяСтавка = 0;
		ЭтаФорма.ТарифныйРазряд = Справочники.ТарифныеРазряды.ПустаяСсылка();
		ЭтаФорма.ВалютаТарифнойСтавки = Справочники.Валюты.ПустаяСсылка();
			
	КонецЕсли; 
	
	Если ЭтаФорма.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ЭтаФорма.Организация = Справочники.Организации.ПустаяСсылка();
		ЭтаФорма.СтруктурнаяЕдиница = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает постфикс наименования, который соответствует виду договра
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговора(ВидДоговора, ВидЗанятости)

	НовыйПостфикс = "";
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			НовыйПостфикс ="(вн. совм.)"; 
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			НовыйПостфикс = "(осн.)";
		Иначе
			НовыйПостфикс = "(совм.)";
		КонецЕсли; 
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		НовыйПостфикс = "(дог. подр.)";
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		НовыйПостфикс = "(дог. авт.)";
	КонецЕсли;
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговра()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()

// Процедура управляет отображением кнопок выбора из списка
Процедура ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма) Экспорт
	
	ЭлементыФормы 		= ЭтаФорма.ЭлементыФормы;
	ОрганизацияДляШР 	= ЭтаФорма.СтруктурнаяЕдиница;
	
	ДатаАктуальности = ?(НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаНачала), Неопределено, ЭтаФорма.ДатаНачала);
	
	СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность, ТарифныйРазряд);
	КоличествоЗначений = СписокПодразделений.Количество();
	ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("ПодразделениеОрганизации1");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли; 
	СписокДолжностей = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР,  ЭтаФорма.ПодразделениеОрганизации, ЭтаФорма.Должность, ТарифныйРазряд);
	КоличествоЗначений = СписокДолжностей.Количество();
	ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	ДополнительныйЭУ = ЭлементыФормы.Найти("Должность1");
	Если ДополнительныйЭУ <> Неопределено Тогда
		ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()

Процедура ОбработатьОтображениеПризнакаИсчисленияОППВ(ЭтаФорма) Экспорт
	
	мОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(ЭтаФорма.СтруктурнаяЕдиница, ЭтаФорма.ДатаДоговора);
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если мОрганизацияЯвляетсяВкладчикомОППВ Тогда
		ЭлементыФормы.ИсчислятьОППВ.Видимость = Истина;
	Иначе 
		ЭлементыФормы.ИсчислятьОППВ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования(ЭтаФорма) Экспорт
	
	СсылкаОбъекта  = ЭтаФорма.Ссылка;
	Физлицо = ЭтаФорма.Физлицо;
	Организация = ЭтаФорма.Организация;
	
	//запросом выбираем выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Ссылка", 		  СсылкаОбъекта);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ЭтаФорма.ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.ВидДоговора, ЭтаФорма.ВидЗанятости), ВыборкаИзЗапроса);
			Если НЕ ПустаяСтрока(ПостфиксНаименования) Тогда
				ЭтаФорма.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли НЕ ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.ВидДоговора, ЭтаФорма.ВидЗанятости);
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если НЕ ПустаяСтрока(ПостфиксНаименования) Тогда
					ЭтаФорма.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда
Процедура УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ВидРасчета) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	
	Если ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика Тогда
		
		ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;
		ЭлементыФормы.НадписьТарифнаяСтавка.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");
		ЭлементыФормы.ТарифныйРазряд.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка.Видимость = НЕ ИспользоватьТарифныйРазряд;
		
		ЭлементыФормы.НадписьТарифнаяСтавка1.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");
		ЭлементыФормы.ТарифныйРазряд1.Видимость = ИспользоватьТарифныйРазряд;
		ЭлементыФормы.ТарифнаяСтавка1.Видимость = НЕ ИспользоватьТарифныйРазряд;
		
		Если ИспользоватьТарифныйРазряд Тогда
			ЭлементыФормы.НадписьВалютаТарифнойСтавки.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки.Видимость 		= Ложь;
			
			ЭлементыФормы.НадписьВалютаТарифнойСтавки1.Видимость = Ложь;
			ЭлементыФормы.ВалютаТарифнойСтавки1.Видимость 		= Ложь;
		Иначе
			ПроцедурыУправленияПерсоналом.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭтаФорма.мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[ЭтаФорма.Организация]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()

Процедура ЗаполнитьНаборыПоФизлицу(ЭтаФорма) Экспорт
	
	ЭтаФорма.мНаборЗаписейГражданство.Очистить();
	ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Очистить();
	ЭтаФорма.мНаборЗаписейПенсионноеОбеспечение.Очистить();
	ЭтаФорма.мНаборЗаписейПенсионноеОбеспечениеПриОткрытии.Очистить();
	
	Если ЭтаФорма.Физлицо.Пустая() Тогда
		Возврат;	
	КонецЕсли;	
	
	Параметр = ЭтаФорма.Физлицо;
	
	ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейГражданство);
	Если ЭтаФорма.мНаборЗаписейГражданство.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейГражданство[0]);
	КонецЕсли;
	ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейПенсионноеОбеспечение);
	Если ЭтаФорма.мНаборЗаписейПенсионноеОбеспечение.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейПенсионноеОбеспечениеПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейПенсионноеОбеспечение[0]);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает отображение обособленного подразделения
// и провереят ПодразделениеОрганизации в трудовом договоре
Процедура ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма) Экспорт
	
	ОбособленноеПодразделение 	= ЭтаФорма.СтруктурнаяЕдиница;
	Организация 				= ЭтаФорма.Организация;
	ПодразделениеОрганизации 	= ЭтаФорма.ПодразделениеОрганизации;
	
	Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделение)
		или НЕ Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение) Тогда
		ЭтаФорма.СтруктурнаяЕдиница = Организация;
	КонецЕсли;
	
	Если НЕ ПодразделениеОрганизации.Пустая() 
		И НЕ ПодразделениеОрганизации.Владелец = ОбособленноеПодразделение Тогда
		//выбранное подразделение организации не соответствует организации
		ЭтаФорма.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		#Если Клиент Тогда
		Предупреждение("Выбранное подразделение не соответствует " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации") + "!");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

//Функция проверяет необходимость проверки и установки вида занятости
//
Функция ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма) Экспорт

	НадоПроверятьВидЗанятости = (ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		ИЛИ ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство) И ЗначениеЗаполнено(ЭтаФорма.Организация)
		И ЗначениеЗаполнено(ЭтаФорма.Физлицо);
		
	Возврат НадоПроверятьВидЗанятости;	

КонецФункции // ПроверитьНеобходимостьУстановкиВидаЗанятости()

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина, ЭтаФорма) Экспорт

	НадоПроверятьВидЗанятости = ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма);
	
	Если НадоПроверятьВидЗанятости Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамДатаСреза,
		|				Организация = &парамОрганизация
		|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		ДатаСреза = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.УстановитьПараметр("парамФизлицо",     	   Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза",   	   ДатаСреза);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация",	   Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НеЗадаватьВопрос Тогда
				ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
			Иначе 
				#Если ТолстыйКлиентОбычноеПриложение Тогда
				// спросим у пользователя, заменить вид занятости или нет
				ТекстВопроса = "В " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("организации") + " уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """,
				|поменять вид занятости на ""Внутреннее совместительство""?";
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
					ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
				КонецЕсли;	
				#Иначе
				ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
				#КонецЕсли
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

Процедура ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ТипЭлемента, ЭтаФорма) Экспорт
	
	ОрганизацияДляШР 				= ЭтаФорма.СтруктурнаяЕдиница;
	ПодразделениеОрганизацииДляШР 	= ЭтаФорма.ПодразделениеОрганизации;
	ДолжностьДляШР 					= ЭтаФорма.Должность;
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТипЭлемента, ОрганизацияДляШР, ПодразделениеОрганизацииДляШР, ДолжностьДляШР, ТарифныйРазряд);
	
	Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());
	ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено  И Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
		ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма, ЭтаФорма.ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(ЭтаФорма) Экспорт
	
	Организация = ЭтаФорма.Организация;

	Если НЕ ЗначениеЗаполнено(Организация)  Тогда
		СтруктурнаяЕдиница = ПолучитьОрганизацию();
		ЭтаФорма.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
		ЭтаФорма.Организация = ОбщегоНазначения.ГоловнаяОрганизация(СтруктурнаяЕдиница);
	Иначе //организацию передали в форму
		// проверим является ли она головной, заполним обособленное подразделение
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		Если Организация = ГоловнаяОрганизация Тогда
			// подберем обособленное подразделение
			ОрганизацияПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
			Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
				// не задана организация по умолчанию
				ЭтаФорма.СтруктурнаяЕдиница = Организация;
			ИначеЕсли Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОрганизацияПоУмолчанию) Тогда
				//организация по умолчанию или головная или является обособленным подразделением той организации, что передана в форму
				ЭтаФорма.СтруктурнаяЕдиница = ОрганизацияПоУмолчанию;
			Иначе
				//организация по умолчанию не соответствует организации переданной в форму
				ЭтаФорма.СтруктурнаяЕдиница = Организация;
			КонецЕсли;	
		Иначе // передали обособленное подразделение
			ЭтаФорма.СтруктурнаяЕдиница = Организация;
			ЭтаФорма.Организация = ГоловнаяОрганизация;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

// Функция формирует наименовние элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()

// Функция возвращаект сведения о позиции штатного расписания на выбранную дату
// для измерений Подразделение и Должность
//
Функция СведенияОПозицииШтатногоРасписания(Период, Подразделение, Должность) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности",	Период);
	Запрос.УстановитьПараметр("Подразделение",		Подразделение);
	Запрос.УстановитьПараметр("Должность",			Должность);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.УстановленнаяТарифнаяСтавка КАК УстановленнаяТарифнаяСтавка,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВидТарифнойСтавки,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ГрафикРаботы,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		ПодразделениеОрганизации = &Подразделение
	|			И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СведенияОПозицииШтатногоРасписания()

Процедура ПолучитьСвязанныеДанныеФизлица(Физлицо, НаборЗаписей) Экспорт

	ИмяТаблицы = НаборЗаписей.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарамФизЛицо",   Физлицо);
	Запрос.УстановитьПараметр("парамДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДанные.*
	|ИЗ
	|	РегистрСведений." + ИмяТаблицы + ".СрезПоследних(&парамДатаСреза, ФизЛицо = &ПарамФизЛицо) КАК СвязанныеДанные";
	
	НаборЗаписей.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьТекущиеКадровыеДанныеФизлица(Физлицо, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|	РаботникиСрезПоследних.Должность КАК Должность,
	|	ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаНаРаботу,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ЕСТЬNULL(РаботникиПрием.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(РаботникиУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РаботникиУвольнение.Период, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.Работники.СрезПоследних(, Физлицо = &Физлицо) КАК РаботникиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				Физлицо = &Физлицо
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиПрием
	|		ПО РаботникиСрезПоследних.ФизЛицо = РаботникиПрием.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(
	|				,
	|				Физлицо = &Физлицо
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиУвольнение
	|		ПО РаботникиСрезПоследних.ФизЛицо = РаботникиУвольнение.ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураКадровыеДанные = Новый Структура("ТекущееПодразделениеПредприятия, ТекущаяДолжностьПредприятия, ДатаПриемаНаРаботуВПредприятие, ДатаУвольненияИзПредприятия");
	
	Если Выборка.Следующий() Тогда
		СтруктураКадровыеДанные.ТекущееПодразделениеПредприятия	= Выборка.Подразделение;
		СтруктураКадровыеДанные.ТекущаяДолжностьПредприятия		= Выборка.Должность;
		СтруктураКадровыеДанные.ДатаПриемаНаРаботуВПредприятие	= Выборка.ДатаПриемаНаРаботу;
		СтруктураКадровыеДанные.ДатаУвольненияИзПредприятия		= Выборка.ДатаУвольнения;
	КонецЕсли;
	
	Возврат СтруктураКадровыеДанные;
	
КонецФункции
              	
Процедура СинхронизироватьНаименованияСотрудников(Физлицо, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли; 

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПостфиксНаименования,
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &парамФизлицо";	
	
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Сотрудник Тогда
			// не обрабатываем сотрудника, из которого вызвана синхронизация
			Продолжить;
		КонецЕсли; 
		
		НовоеНаименование = Физлицо.Наименование + ?(ЗначениеЗаполнено(Выборка.ПостфиксНаименования), " " + Выборка.ПостфиксНаименования, "");
		Если Выборка.Наименование <> НовоеНаименование Тогда
			СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка	
				СотрудникОбъект.Заблокировать();
			Исключение
				Продолжить;
			КонецПопытки;
			СотрудникОбъект.Наименование = НовоеНаименование;
			СотрудникОбъект.ОбменДанными = Истина;
			СотрудникОбъект.Записать();
			СотрудникОбъект.Разблокировать();
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

// Функция осуществляет проверку дублей в справочнике ФизическиеЛица
// Проверка происходит по паспортным данным, РНН и ФИО
//
// Возвращаемое значение
//		Список значений с сообщениями
//
Функция ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИИН, ФИО) Экспорт
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ТекстСообщения");
	ТаблицаСообщений.Колонки.Добавить("Физлицо");
	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИИН				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументКодПодразделения)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид",				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",				ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер",				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи",			ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		ЗапросПоДублям.УстановитьПараметр("ДокументКодПодразделения",	ЗаписьПаспортныхДанных.ДокументКодПодразделения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		|ГДЕ
		|	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка
		|	И ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид
		|	И ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия
		|	И ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер
		|	И ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо: %% имеет такие же паспортные данные как и у "+Строка(Ссылка);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИИН) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Физлицо);
		ЗапросПоДублям.УстановитьПараметр("ИИН",	ИИН);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ИдентификационныйКодЛичности = &ИИН";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо: %% имеет такой же ИИН как и у " + Строка(Ссылка);
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиИИН = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИИН И
		 НЕ ЕстьДублиПаспортныхДанных Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Физлицо);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизЛиц.ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		|ГДЕ
		|	ФИОФизЛиц.ФизЛицо <> &Ссылка
		|	И ФИОФизЛиц.Фамилия + ФИОФизЛиц.Имя + ФИОФизЛиц.Отчество = &ФИО";
		
		ВыборкаЗапроса 				= ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ТекстСообщения = "Физлицо с таким ФИО (%%) уже есть в справочнике";
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = ТекстСообщения;
			НоваяСтрока.Физлицо = ВыборкаЗапроса.Физлицо;
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаСообщений;
	
КонецФункции

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// в.р., являющегося надбавкой 
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовНадбавокСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	СсылкаПредопределенный = Новый Массив;
	СсылкаПредопределенный.Добавить(Ложь);
	
	СтруктураПараметров.Вставить("Предопределенный", СсылкаПредопределенный);
	
	СпоcобыРасчета = Новый Массив;
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	СпоcобыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
	
	СтруктураПараметров.Вставить("СпособРасчета", СпоcобыРасчета);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция возвращает структуру с отборами для выбора из ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
// основного начисления сотрудника, регистрирующего отработанное время
// структура параметров отбора может использоваться в процедурах АвтоПодборТекстаВЭлементеУправления
//
// Параметры
//  ВидДоговора  - ВидДоговора
//
// Возвращаемое значение:
//   Структура   - структура, ключ - имя реквизита ПВР, значение - массив со значениями отбора
//
Функция ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора) Экспорт
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	
	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника()

// Функция подбирает из справочника организаций первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – подбор только среди головных организаций
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПодобратьОрганизацию (ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация,
	|	Организации.ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Если ТолькоГоловныеОрганизации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Код";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПодобратьОрганизацию ()

// Функция возвращает организацию, указанную для пользователя по умолчанию
// а если она пустая, то первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – вернуть головную организацию
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПолучитьОрганизацию(ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ТолькоГоловныеОрганизации и НЕ Организация.Пустая() Тогда
		// получим головную организацию
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	Если Организация.Пустая() Тогда
		//ИЛИ НЕ ОбщегоНазначения.ЭтоДоступнаяОрганизация(Организация) Тогда
		//для пользователя не задана организация по умолчанию, подберем первую разрешенную
		Организация = ПодобратьОрганизацию(ТолькоГоловныеОрганизации);
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции // ПолучитьОрганизацию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СПРАВКИ

Функция ПолучитьТекстМакетаВстроеннойСправки(ЭтаФорма) Экспорт
	
	ЦветФонаСправки		= РаботаССообщениями.ВернутьШестнадцатиричноеПредставлениеЦвета(Новый Цвет(255, 255, 255));
	ЦветСсылкиСправки	= РаботаССообщениями.ВернутьШестнадцатиричноеПредставлениеЦвета(Новый Цвет(0, 0, 0));

	ТекстМакетаВстроеннойСправки = "";

	#Если ТолстыйКлиентОбычноеПриложение Тогда 
		
	Если ЭтаФорма.мЭтоНовый Тогда
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаССообщениями.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink=" + ЦветСсылкиСправки+" vLink=" + ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src=" + РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭтаФорма.ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><B>Если сотрудник ранее уже работал " + ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса("в организации") + "...</B><BR>
		|		Необходимо выбрать вариант «Создать нового сотрудника, выбрав его из справочника физических лиц» и далее выбрать физлицо из списка.</DIV>
		|		<DIV><B>Как уточнить наименование сотрудника?</B><BR>
		|		В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.</DIV>
		|		
		|	</FONT></BODY>
		|</HTML>";
		
	Иначе
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаССообщениями.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink=" + ЦветСсылкиСправки + " vLink="+ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src=" + РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭтаФорма.ЭлементыФормы.ВстроеннаяСправка) + ">
		|		<DIV><B>Как создать документ по этому сотруднику?</B><BR>
		|		Кадровые документы и некоторые документы по начислению можно создать, нажав на кнопку ""Ввести документ"".</DIV>
		|		<DIV><B>Как уточнить наименование сотрудника?</B><BR>
		|		В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.</DIV>
		|		<DIV><B>Как сменить фамилию?</B><BR>
		|		Открыть форму по кнопке ""Смена ФИО"". В появившемся диалоговом окне ввести новую фамилию и указать дату, с которой фамилия была изменена.</DIV>
		|		<BR>
		|	</FONT></BODY>
		|</HTML>";

	КонецЕсли;
	
	#КонецЕсли
	
	Возврат ТекстМакетаВстроеннойСправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ПолучитьКадровыеДанныеФизлица = Истина;
