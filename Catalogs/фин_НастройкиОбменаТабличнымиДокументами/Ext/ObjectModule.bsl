#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если ИмеетсяРазрезВКолонке =Ложь Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Колонка");
		МассивНепроверяемыхРеквизитов.Добавить("Ряд");
		МассивНепроверяемыхРеквизитов.Добавить("НачальнаяКолонка");
		МассивНепроверяемыхРеквизитов.Добавить("ПоказателиВКолонках");
	КонецЕсли;
	Если ДляЗагрузкиФактическихИПрогнозныхДанных Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Бюджет");
	КонецЕсли;
	фин_ЗаполнениеДокументов.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	Если СтрокаЗаголовкаФормы<>0 Тогда
		Если СтрокаЗаголовкаФормы>=НачальнаяСтрока Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка заголовка формы должна располагаться выше начальной строки данных",ЭтотОбъект,"СтрокаЗаголовкаФормы","Объект",Отказ);	
		КонецЕсли;
		Если СтрокаЗаголовкаФормы=СтрокаШапкиТаблицы Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка заголовка формы не может совпадать со строкой шапки таблицы данных",ЭтотОбъект,"СтрокаЗаголовкаФормы","Объект",Отказ);	
		КонецЕсли;
		Если ИмеетсяРазрезВКолонке И СтрокаЗаголовкаФормы=Ряд Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка заголовка формы не может совпадать со строкой данных разреза, размещаемого в колонке",ЭтотОбъект,"СтрокаЗаголовкаФормы","Объект",Отказ);	
		КонецЕсли;
	КонецЕсли;
	Если СтрокаШапкиТаблицы<>0 Тогда
		Если СтрокаШапкиТаблицы>=НачальнаяСтрока Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка шапки таблицы должна располагаться выше начальной строки данных",ЭтотОбъект,"СтрокаШапкиТаблицы","Объект",Отказ);	
		КонецЕсли;
		Если ИмеетсяРазрезВКолонке И СтрокаШапкиТаблицы=Ряд Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка шапки таблицы не может совпадать со строкой данных разреза, размещаемого в колонке",ЭтотОбъект,"СтрокаШапкиТаблицы","Объект",Отказ);	
		КонецЕсли;
	КонецЕсли;
	Если ИмеетсяРазрезВКолонке Тогда
		Если Ряд>=НачальнаяСтрока Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка данных разреза, размещаемого в колонке, должна располагаться выше начальной строки данных",ЭтотОбъект,"Ряд","Объект",Отказ);	
		КонецЕсли;
		Копия = ТрансляцияРазрезов.Выгрузить(Новый Структура("Использовать",Истина));
		Копия.Сортировать("Колонка");
		Если копия.Количество()<>0 Тогда
			МаксимальнаяКолонка = Копия[Копия.Количество()-1].Колонка;
			Если МаксимальнаяКолонка>=НачальнаяКолонка Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Начальная колонка данных разреза, размещаемого в колонке, должна располагаться дальше максимальной колонки данных ("+Строка(МаксимальнаяКолонка)+")",ЭтотОбъект,"НачальнаяКолонка","Объект",Отказ);	
			КонецЕсли;
		КонецЕсли;
		Если ТрансляцияРазрезов.Выгрузить(Новый Структура("Использовать,Колонка",Истина,Колонка)).Количество()>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Колонка данных горизонтального разреза не может повторяться в списке основных разрезов",ЭтотОбъект,"Колонка","Объект",Отказ);	
		КонецЕсли;
	КонецЕсли;
	Для Каждого СтрокаРазрез Из ТрансляцияРазрезов Цикл
		Если СтрокаРазрез.Использовать Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаРазрез.Колонка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Колонка данных разреза не указана",ЭтотОбъект,"ТрансляцияРазрезов["+ТрансляцияРазрезов.Индекс(СтрокаРазрез)+"].Колонка","Объект",Отказ);	
			ИначеЕсли ТрансляцияРазрезов.НайтиСтроки(Новый Структура("Использовать,Колонка",Истина,СтрокаРазрез.Колонка)).Количество()>1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Колонка данных разреза не уникальна",ЭтотОбъект,"ТрансляцияРазрезов["+ТрансляцияРазрезов.Индекс(СтрокаРазрез)+"].Колонка","Объект",Отказ);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецЕсли