
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НадписьОграниченияОбластиДействияПоНоменклатуре = "Ограничение области действия по номенклатуре";
	НадписьОграниченияОбластиДействияПоПрочимПолям = "Ограничение области действия по прочим полям";
	НадписьФормируемыеДанные = "Формируемые данные";
	НадписьДополнительныеРасчеты = "Дополнительные расчеты";
	НадписьРазрезыРассчитываемыеПоОбщимПравилам = "Разрезы, рассчитываемые по общим правилам автоматического расчета";
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,"ОбластьДействияЗависимости");
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,"РазрезыРассчитываемыеПоОбщимПравиламПриРасчетеТрудовыхЗатрат",Ложь);
	ВсеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();
	АктивныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	Для Каждого Разрез Из ВсеРазрезы Цикл
		Элементы["ДополнительныеЗатратыНаВыпускГруппа"+Разрез].Видимость = АктивныеРазрезы.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])<>Неопределено;
		
		Если АктивныеРазрезы.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])<>Неопределено Тогда
			СписокВсеРазрезы.Добавить(Разрез);
			Элементы["ДополнительныеЗатратыНаВыпускЗначение"+Разрез].ОграничениеТипа = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]).ТипЗначения;
			Элементы["ДополнительныеЗатратыНаВыпуск"+Разрез].Заголовок = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]);
			Элементы["ОтражениеРезультатовЗначение"+Разрез].ОграничениеТипа = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]).ТипЗначения;
			Элементы["ОтражениеРезультатов"+Разрез].Заголовок = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]);
		КонецЕсли;
		Если Разрез = "Номенклатура" Тогда
			Продолжить;
		КонецЕсли;
		Элементы["ОтражениеРезультатовГруппа"+Разрез].Видимость = АктивныеРазрезы.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])<>Неопределено;
		
	КонецЦикла;
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокВыбораРазрезыУчета);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ИсточникДанных.Видимость = Объект.ИсточникСпецификацийНоменклатуры=ПредопределенноеЗначение("Перечисление.фин_ИсточникиСпецификацийНоменклатуры.ПроизвольныйИсточникРасчета");
	Элементы.СписокНоменклатуры.Видимость = Объект.ОграничениеОбластиПримененияПроизводственнойМоделиПоНоменклатуре = ПредопределенноеЗначение("Перечисление.фин_ОграниченияОбластиПримененияПроизводственнойМоделиПоНоменклатуре.ПоСписку");
	Элементы.ТрудовыеЗатратыФинансовыйПоказатель.Доступность = Объект.РассчитыватьПрямыеТрудовыеЗатраты;
	Элементы.РазрезДляХраненияДолжностей.Видимость = Объект.УчитыватьТрудовыеЗатратыВРазрезеДолжностей;
	Разрезы = РазрезыУчетаТрудовыхЗатрат();
	Элементы.УчитыватьТрудовыеЗатратыВРазрезеПодразделений.Видимость = Разрезы.Свойство("УправленческоеПодразделение");
	Элементы.УчитыватьТрудовыеЗатратыВРазрезеНоменклатуры.Видимость = Разрезы.Свойство("Номенклатура");
	Элементы.УчитыватьТрудовыеЗатратыВРазрезеПроектов.Видимость = Разрезы.Свойство("Проект");
КонецПроцедуры

&НаСервере
Функция РазрезыУчетаТрудовыхЗатрат()
	Разрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(Объект.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат);
	Структура = Новый Структура;
	Для Каждого Разрез Из Разрезы Цикл
		Структура.Вставить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Значение));
	КонецЦикла;
	возврат Структура;
КонецФункции

&НаКлиенте
Процедура ИсточникСпецификацийНоменклатурыПриИзменении(Элемент)
	Если НЕ Объект.ИсточникСпецификацийНоменклатуры=ПредопределенноеЗначение("Перечисление.фин_ИсточникиСпецификацийНоменклатуры.ПроизвольныйИсточникРасчета") Тогда
		Объект.ИсточникДанных = ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка");
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеОбластиПримененияПроизводственнойМоделиПоНоменклатуреПриИзменении(Элемент)
	Если НЕ  Объект.ОграничениеОбластиПримененияПроизводственнойМоделиПоНоменклатуре = ПредопределенноеЗначение("Перечисление.фин_ОграниченияОбластиПримененияПроизводственнойМоделиПоНоменклатуре.ПоСписку") Тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиПриАктивизацииСтроки(Элемент)
	Элементы.СписокОтбора.ТолькоПросмотр = (Элементы.ОбластьДействияЗависимости.ТекущиеДанные=Неопределено) ИЛИ НЕ СписочныйТип(Элементы.ОбластьДействияЗависимости.ТекущиеДанные.ВидОграничения);
	Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.ТолькоПросмотр = НЕ Элементы.СписокОтбора.ТолькоПросмотр;
	Если Элементы.ОбластьДействияЗависимости.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущееИзмерение = Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Измерение;
	СписокОтбора.Очистить();
	Если ЗначениеЗаполнено(ТекущееИзмерение) Тогда
		СтрокиСписка = Объект.СпискиОграничений.НайтиСтроки(Новый Структура("Измерение",ТекущееИзмерение));
		Для Каждого СтрокаСписка Из СтрокиСписка Цикл
			СписокОтбора.Добавить(СтрокаСписка.УсловиеНаЗначение);
		КонецЦикла;
		УстановитьТипСписка(Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Разрез);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипСписка(Разрез)
	СписокОтбора.ТипЗначения = Разрез.ТипЗначения;
	Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.ОграничениеТипа = Разрез.ТипЗначения;
КонецПроцедуры

&НаКлиенте
Функция СписочныйТип(ВариантСравнения)
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыОграниченияОбластиДанных.ВСписке"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыОграниченияОбластиДанных.ВСпискеПоИерерахии"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыОграниченияОбластиДанных.НеВСписке"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыОграниченияОбластиДанных.НеВСпискеПоИерархии"));
	Возврат Массив.Найти(ВариантСравнения)<>Неопределено;
КонецФункции

&НаКлиенте
Процедура ОбластьДействияЗависимостиВидОграниченияПриИзменении(Элемент)
	Элементы.СписокОтбора.ТолькоПросмотр = (Элементы.ОбластьДействияЗависимости.ТекущиеДанные=Неопределено) ИЛИ НЕ СписочныйТип(Элементы.ОбластьДействияЗависимости.ТекущиеДанные.ВидОграничения);
	Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.ТолькоПросмотр = НЕ Элементы.СписокОтбора.ТолькоПросмотр;
	Если СписочныйТип(Элементы.ОбластьДействияЗависимости.ТекущиеДанные.ВидОграничения) Тогда
		Элементы.ОбластьДействияЗависимости.ТекущиеДанные.УсловиеНаЗначение = ПустоеЗначениеТипа(Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Разрез);
	Иначе
		СтрокиУдалить = Объект.СпискиОграничений.НайтиСтроки(Новый Структура("Измерение",Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Измерение));
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.СпискиОграничений.Удалить(СтрокаУдалить);
		КонецЦикла;
		СписокОтбора.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустоеЗначениеТипа(Разрез)
	Возврат ?(ЗначениеЗаполнено(Разрез),Разрез.ТипЗначения.ПривестиЗначение(Неопределено),Неопределено);	
КонецФункции

&НаКлиенте
Процедура ОбластьДействияЗависимостиИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазрезыУчета;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиИзмерениеПриИзменении(Элемент)
	ОбработатьИзменениеРазрезаУчета(Элементы.ОбластьДействияЗависимости.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРазрезаУчета(ТекущаяСтрока)
	ТекущиеДанные = Объект.ОбластьДействияЗависимости.НайтиПоИдентификатору(ТекущаяСтрока);
    Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ТекущиеДанные.Измерение);
	Если ЗначениеЗаполнено(Разрез) Тогда
		ТекущиеДанные.Разрез = Разрез;
		ТекущиеДанные.УсловиеНаЗначение = Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.УсловиеНаЗначение);
		СписокОтбора.ТипЗначения = Разрез.ТипЗначения;
		УстановитьТипСписка(Разрез);
	Иначе
		ТекущиеДанные.УсловиеНаЗначение = Неопределено;
		СписокОтбора.ТипЗначения = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОтбораПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьЗначенияСписка();
КонецПроцедуры

&НаКлиенте
Процедура СписокОтбораПослеУдаления(Элемент)
	ОбновитьЗначенияСписка();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияСписка()
	СтрокиУдалить = Объект.СпискиОграничений.НайтиСтроки(Новый Структура("Измерение",Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Измерение));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.СпискиОграничений.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокОтбора Цикл
		НоваяСтрока = Объект.СпискиОграничений.Добавить();
		НоваяСтрока.УсловиеНаЗначение = ЭлементСписка.Значение;
		НоваяСтрока.Измерение = Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Измерение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыНаВыпускРеквизитВлияющейСтатьиДляРасчетаКоличестваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма"));
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыНаВыпускРеквизитВлияющейСтатьиДляРасчетаСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена"));
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыНаВыпускРазрезНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПараметрыПланированияПроизводства"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПоПроизводимойПозиции"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ПоПравилуАвтоматическогоРасчета"));
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ОбластьДействияЗависимости.ТекущиеДанные.ВидОграничения = ПредопределенноеЗначение("Перечисление.фин_ВариантыОграниченияОбластиДанных.Равно");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеРезультатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ОтражениеРезультатов.ТекущиеДанные;
		ТекущиеДанные.ВидКомплектующей = ПредопределенноеЗначение("Перечисление.фин_ВидыРезультирующейСтроки.ПроизводимоеСырье");
		ТекущиеДанные.ФинансовыйПоказатель = ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение");
		Для Каждого ЭлементРазрез Из СписокВсеРазрезы Цикл
			ТекущиеДанные[ЭлементРазрез.Значение] = ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеЗатратыНаВыпускПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ДополнительныеЗатратыНаВыпуск.ТекущиеДанные;
		ТекущиеДанные.КоэффициентДляРасчетаКоличества = 1;
		ТекущиеДанные.КоэффициентДляРасчетаСуммы = 1;
		ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаКоличества = ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество");
		ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаСуммы = ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма");
		Для Каждого ЭлементРазрез Из СписокВсеРазрезы Цикл
			ТекущиеДанные[ЭлементРазрез.Значение] = ПредопределенноеЗначение("Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиУсловиеНаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущееИзмерение = Элементы.ОбластьДействияЗависимости.ТекущиеДанные.Разрез;
	Если ЗначениеЗаполнено(ТекущееИзмерение) Тогда
		УстановитьТипСписка(ТекущееИзмерение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьПрямыеТрудовыеЗатратыПриИзменении(Элемент)
	Если НЕ Объект.РассчитыватьПрямыеТрудовыеЗатраты Тогда
		Объект.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		Объект.РазрезДляХраненияДолжностей = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка");
		Объект.УчитыватьТрудовыеЗатратыВРазрезеДолжностей 		= Ложь;
		Объект.УчитыватьТрудовыеЗатратыВРазрезеНоменклатуры 	= Ложь;
		Объект.УчитыватьТрудовыеЗатратыВРазрезеПодразделений 	= Ложь;
		Объект.УчитыватьТрудовыеЗатратыВРазрезеПроектов 		= Ложь;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыФинансовыйПоказательПриИзменении(Элемент)
	Разрезы = РазрезыУчетаТрудовыхЗатрат();
	Если НЕ Разрезы.Свойство("УправленческоеПодразделение") Тогда
		Объект.УчитыватьТрудовыеЗатратыВРазрезеПодразделений = Ложь;
	КонецЕсли;
	Если НЕ Разрезы.Свойство("Номенклатура") Тогда
		Объект.УчитыватьТрудовыеЗатратыВРазрезеНоменклатуры = Ложь;
	КонецЕсли;
	Если НЕ Разрезы.Свойство("Проект") Тогда
		Объект.УчитыватьТрудовыеЗатратыВРазрезеПроектов = Ложь;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьТрудовыеЗатратыВРазрезеДолжностейПриИзменении(Элемент)
	Если НЕ Объект.УчитыватьТрудовыеЗатратыВРазрезеДолжностей Тогда
		Объект.РазрезДляХраненияДолжностей = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка");
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РазрезыРассчитываемыеПоОбщимПравиламПриРасчетеТрудовыхЗатратИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазрезыУчета;
КонецПроцедуры
