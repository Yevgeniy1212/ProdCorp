
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если (НЕ Объект.Ссылка.Пустая()) И Объект.Предопределенный Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Предопределенный вариант не может редактироваться!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокРазрезов);
	СписокРазрезов.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель,	"Финансовый показатель");
	СписокРазрезов.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Сумма,					"Сумма");
	СписокРазрезов.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Количество,			"Количество");
	СписокРазрезов.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.ПустаяСсылка(),		"Прочие данные");
	
	Найдено = СписокРазрезов.НайтиПоЗначению(Объект.Разрез);
	Если Найдено = Неопределено Тогда
		РазрезПредставление = ?(ЗначениеЗаполнено(Объект.Разрез),Строка(Объект.Разрез),"Прочие данные");
	Иначе
		РазрезПредставление = Найдено.Представление;
	КонецЕсли;
	
	СписокПоказателей = (Объект.ВариантРасчетаСоответствия=Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРегиструСоответствий
						ИЛИ Объект.ВариантРасчетаСоответствия=Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоФормуле);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если НЕ СписокПоказателей Тогда
		Если Объект.ВходящиеПоказатели.Количество()=0 Тогда
			Объект.ВходящиеПоказатели.Добавить();
			Если Объект.ВариантРасчетаСоответствия=Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту
				ИЛИ Объект.ВариантРасчетаСоответствия=Перечисления.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту Тогда
				Объект.ВходящиеПоказатели[0].ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Справочник;
			КонецЕсли;
		КонецЕсли;
		Элементы.ВходящиеПоказатели.ТекущаяСтрока = Объект.ВходящиеПоказатели[0].ПолучитьИдентификатор();
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Разрез) Тогда
		НадлежащийТип 	= Новый Массив;
		фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Объект.Разрез,,НадлежащийТип);
		Описание 		= Новый ОписаниеТипов(НадлежащийТип);
		Элементы.ЗначениеИначе.ОграничениеТипа 			= Описание;
		Элементы.СоответствияРезультат.ОграничениеТипа	= Описание;
		Элементы.ШкалаРезультат.ОграничениеТипа			= Описание;
	КонецЕсли;
	мВариантРасчетаСоответствия = Объект.ВариантРасчетаСоответствия;
	мРегистр 					= Объект.Регистр;
	мРазрез 					= Объект.Разрез;
	
	НадписьПоказателиРасчета	= "Показатели расчета";
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		СписокРегистров.Добавить(Регистр.Имя,Регистр.Синоним);
	КонецЦикла;
	СписокРегистров.СортироватьПоПредставлению();

КонецПроцедуры

&НаКлиенте
Процедура РазрезНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура РазрезОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Разрез = ВыбранноеЗначение;
	Найдено = СписокРазрезов.НайтиПоЗначению(Объект.Разрез);
	Если Найдено = Неопределено Тогда
		РазрезПредставление = ?(ЗначениеЗаполнено(Объект.Разрез),Строка(Объект.Разрез),"Прочие данные");
	Иначе
		РазрезПредставление = Найдено.Представление;
	КонецЕсли;
	РазрезПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПоказательПриИзменении(Элемент)
	Элемент_Значение = СокрЛП(Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель);
	Позиция = Найти(Элемент_Значение," ");
	Если Позиция <> 0 Тогда
		Элемент_Значение = Сред(Элемент_Значение,1,Позиция-1);
	КонецЕсли;
	Элементы.ВходящиеПоказатели.ТекущиеДанные.Показатель= Элемент_Значение;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиТипПоказателяПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ВходящиеПоказатели.ТекущиеДанные;
	ТекущиеДанные.Справочник = "";
	ТекущиеДанные.СправочникПредставление = "";
	ОбработатьИзменениеТипа();
	УправлениеФормой(ЭтотОбъект);  
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТипа()
	Если Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречню")
		ИЛИ Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту") Тогда
		ОграничениеТипаИсходногоЗначения = ОграничениеТипаИсходногоЗначения();
		Для Каждого СтрокаТЧ Из Объект.Соответствия Цикл
			СтрокаТЧ.Значение = ОграничениеТипаИсходногоЗначения.ПривестиЗначение(СтрокаТЧ.Значение);
		КонецЦикла;
		Свернуть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Свернуть()
	Копия = Объект.Соответствия.Выгрузить();
	Копия.Свернуть("Значение,Результат");
	Объект.Соответствия.Загрузить(Копия);
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВходящиеПоказатели = Объект.ВходящиеПоказатели;
	
	ВариантРасчетаСоответствия = Объект.ВариантРасчетаСоответствия;
	
	Если ВариантРасчетаСоответствия = ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРегиструСоответствий") Тогда
		Элементы.СтраницыНастройкиРасчета.ТекущаяСтраница = Элементы.СтраницыНастройкиРасчета.ПодчиненныеЭлементы.ГруппаРегистр;
	ИначеЕсли ВариантРасчетаСоответствия = ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречню")
		ИЛИ ВариантРасчетаСоответствия = ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту") Тогда
		Элементы.СтраницыНастройкиРасчета.ТекущаяСтраница = Элементы.СтраницыНастройкиРасчета.ПодчиненныеЭлементы.ГруппаСписок;
	ИначеЕсли ВариантРасчетаСоответствия = ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоШкале") Тогда
		Элементы.СтраницыНастройкиРасчета.ТекущаяСтраница = Элементы.СтраницыНастройкиРасчета.ПодчиненныеЭлементы.ГруппаШкала;
	ИначеЕсли ВариантРасчетаСоответствия = ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту") Тогда
		Элементы.СтраницыНастройкиРасчета.Видимость = Ложь;
	Иначе
		Элементы.СтраницыНастройкиРасчета.ТекущаяСтраница = Элементы.СтраницыНастройкиРасчета.ПодчиненныеЭлементы.ГруппаФормула;
	КонецЕсли;
	Элементы.СтраницыПоказатели.ТекущаяСтраница = ?(Форма.СписокПоказателей,Элементы.СтраницыПоказатели.ПодчиненныеЭлементы.ГруппаСписокПоказателей,Элементы.СтраницыПоказатели.ПодчиненныеЭлементы.ГруппаПоказатель);
	Если (НЕ Форма.СписокПоказателей) Тогда
		Элементы.ВходящиеПоказателиСправочникПредставлениеЕдиничный.Видимость = ВходящиеПоказатели.Количество()>0 И НЕ (ВходящиеПоказатели[0].ТипПоказателя<>ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.Перечисление")
						И ВходящиеПоказатели[0].ТипПоказателя<>ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.Справочник")
						И ВходящиеПоказатели[0].ТипПоказателя<>ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовРасчета")
						И ВходящиеПоказатели[0].ТипПоказателя<>ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовХарактеристик")
						И ВходящиеПоказатели[0].ТипПоказателя<>ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланСчетов"));
		Элементы.ФормулаЕдиничный.Видимость = (ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту") ИЛИ ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту"));
	КонецЕсли;
	Элементы.ВходящиеПоказателиТипПоказателяЕдиничный.Видимость = НЕ (ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту") ИЛИ ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиСправочникПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ТипПоказателя 			= Элементы.ВходящиеПоказатели.ТекущиеДанные.ТипПоказателя;
	ВходящиеПоказателиСписокСправочников(ТипПоказателя,СписокДляВыбораСправочников);
	ДанныеВыбора 			= СписокДляВыбораСправочников;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВходящиеПоказателиСписокСправочников(ТипПоказателя,Список)
	Список.Очистить();
	Если ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Справочник Тогда
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Список.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЦикла;
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Перечисление Тогда
		Для Каждого Справочник Из Метаданные.Перечисления Цикл
			Список.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЦикла;
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.ПланСчетов Тогда
		Для Каждого Справочник Из Метаданные.ПланыСчетов Цикл
			Список.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЦикла;
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовРасчета Тогда
		Для Каждого Справочник Из Метаданные.ПланыВидовРасчета Цикл
			Список.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЦикла;
	ИначеЕсли ТипПоказателя = Перечисления.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовХарактеристик Тогда
		Для Каждого Справочник Из Метаданные.ПланыВидовХарактеристик Цикл
			Список.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЦикла;
	КонецЕсли;
	Список.СортироватьПоПредставлению();
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиСправочникПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 					= Ложь;
	ТекущиеДанные							= Элементы.ВходящиеПоказатели.ТекущиеДанные;
	ТекущиеДанные.Справочник 				= ВыбранноеЗначение;
	ТекущиеДанные.СправочникПредставление 	= СписокДляВыбораСправочников.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ОбработатьИзменениеТипа();
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные 				= Элементы.ВходящиеПоказатели.ТекущиеДанные;
	    ТекущиеДанные.ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.Числовой");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормулаЕдиничныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= Элементы.ВходящиеПоказатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Справочник) Тогда
		ДанныеВыбора = ФормулаЕдиничныйНачалоВыбораНаСервере(ТекущиеДанные.Справочник,Объект.Разрез,Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту"));
	Иначе
		ПоказатьПредупреждение(,"Не выбран справочник!");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ФормулаЕдиничныйНачалоВыбораНаСервере(Справочник,Разрез,ВсеРеквизиты=Ложь)
	Список = Новый СписокЗначений;
	Для Каждого Реквизит Из Метаданные.Справочники[Справочник].Реквизиты Цикл
		ОписаниеТипов 	= Реквизит.Тип;
		НадлежащийТип 	= Новый Массив;
		фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Разрез,,НадлежащийТип);
		Если НЕ ЗначениеЗаполнено(Разрез) Тогда
			НадлежащийТип = "Любой";
		КонецЕсли;
		Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(ОписаниеТипов,НадлежащийТип) ИЛИ ВсеРеквизиты Тогда
			Список.Добавить(Реквизит.Имя,Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	Список.СортироватьПоПредставлению();
	Возврат Список;
КонецФункции

&НаКлиенте
Процедура ВариантРасчетаСоответствияПриИзменении(Элемент)
	СписокПоказателей = (Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРегиструСоответствий")
						ИЛИ Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоФормуле"));
	Если НЕ СписокПоказателей Тогда
		Если Объект.ВходящиеПоказатели.Количество()=0 Тогда
			Объект.ВходящиеПоказатели.Добавить();
		ИначеЕсли Объект.ВходящиеПоказатели.Количество()>1 Тогда
			Пока Объект.ВходящиеПоказатели.Количество()>1 Цикл
				Объект.ВходящиеПоказатели.Удалить(Объект.ВходящиеПоказатели[1]);
			КонецЦикла;
		КонецЕсли;
		Если Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту") Тогда
			Объект.ВходящиеПоказатели[0].ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.Справочник");
		КонецЕсли;
		Элементы.ВходящиеПоказатели.ТекущаяСтрока = Объект.ВходящиеПоказатели[0].ПолучитьИдентификатор();
	КонецЕсли;
	Если (мВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоРеквизиту")
		ИЛИ мВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту")
		ИЛИ мВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоФормуле"))
		И мВариантРасчетаСоответствия <> Объект.ВариантРасчетаСоответствия Тогда
		Формула = "";
	КонецЕсли;
	мВариантРасчетаСоответствия = Объект.ВариантРасчетаСоответствия;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрезПриИзменении(Элемент)
	Если мРазрез <> Объект.Разрез Тогда
		мРазрез = Объект.Разрез;
 		РазрезПриИзмененииНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазрезПриИзмененииНаСервере()
   	Объект.ПолеРегистраРезультат 					= "";
	НадлежащийТип 									= Новый Массив;
	фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Объект.Разрез,,НадлежащийТип);
	Описание 										= Новый ОписаниеТипов(НадлежащийТип);
	Для Каждого Строка Из Объект.Соответствия Цикл
		 Строка.Результат 							= Описание.ПривестиЗначение(Строка.Результат);
	КонецЦикла;
	Для Каждого Строка Из Объект.Шкала Цикл
		 Строка.Результат 							= Описание.ПривестиЗначение(Строка.Результат);
	 КонецЦикла;
	 Объект.ЗначениеИначе 							= Описание.ПривестиЗначение(Объект.ЗначениеИначе);
	 Элементы.ЗначениеИначе.ОграничениеТипа			= Описание;
	 Элементы.СоответствияРезультат.ОграничениеТипа	= Описание;
	 Элементы.ШкалаРезультат.ОграничениеТипа		= Описание;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВыбранноеЗначение<>Неопределено Тогда
		Объект.Формула=ВыбранноеЗначение.ТекстФормулы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
	
	СтруктураПараметров=Новый Структура("ВКвадратныхСкобках",Истина);
	СтруктураПараметров.Вставить("АдресПоказателейФормулы", АдресПоказателейДляФормулы());
	СтруктураПараметров.Вставить("ТекстФормулы",			Объект.Формула);
	ОткрытьФорму("ОбщаяФорма.фин_ФормаВводаФормулы",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
		
КонецПроцедуры

&НаСервере
Функция АдресПоказателейДляФормулы()
	Табло = Объект.ВходящиеПоказатели.Выгрузить().СкопироватьКолонки();
	Табло.Колонки.Добавить("Код");
	Табло.Колонки.Добавить("Представление");
	Для Каждого Показатель Из Объект.ВходящиеПоказатели Цикл
		Если Показатель.ТипПоказателя=Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Булево ИЛИ Показатель.ТипПоказателя=Перечисления.фин_ТипыВходящихПоказателейБюджетирования.Числовой Тогда
			НоваяСтрока = Табло.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Показатель);
			НоваяСтрока.Код 			= Показатель.Показатель;
			НоваяСтрока.Представление 	= Показатель.Показатель;
		КонецЕсли;
	КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(Табло,УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СоответствияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Соответствия.ТекущиеДанные.Результат = ПустоеЗначениеРазреза(Объект.Разрез);
		Элементы.СоответствияЗначение.ОграничениеТипа = ОграничениеТипаИсходногоЗначения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОграничениеТипаИсходногоЗначения()
	ПерваяСтрока = Объект.ВходящиеПоказатели[0];
	СтандартнаяОбработка = Ложь;
	ИмяФормыВыбора = "";
	Если (НЕ ЗначениеЗаполнено(ПерваяСтрока.ТипПоказателя))
		ИЛИ НЕ ЗначениеЗаполнено(ПерваяСтрока.Справочник) Тогда
		Возврат Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	Если ПерваяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.Справочник") Тогда
		Если Объект.ВариантРасчетаСоответствия=ПредопределенноеЗначение("Перечисление.фин_ВариантыРасчетаСоответствийДляПервичныхДанныхБюджетирования.ПоПеречнюСоответствийРеквизиту") Тогда
			Возврат ПолучитьТипВложенногоРеквизита("Справочник",ПерваяСтрока.Справочник,Объект.Формула);
		Иначе
			Возврат Новый ОписаниеТипов("СправочникСсылка."+ПерваяСтрока.Справочник);
		КонецЕсли;
	ИначеЕсли ПерваяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланСчетов") Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка."+ПерваяСтрока.Справочник);
	ИначеЕсли ПерваяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовРасчета") Тогда
		Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка."+ПерваяСтрока.Справочник);
	ИначеЕсли ПерваяСтрока.ТипПоказателя = ПредопределенноеЗначение("Перечисление.фин_ТипыВходящихПоказателейБюджетирования.ПланВидовХарактеристик") Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка."+ПерваяСтрока.Справочник);
	Иначе
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка."+ПерваяСтрока.Справочник);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПустоеЗначениеРазреза(Разрез)
	НадлежащийТип 	= Новый Массив;
	фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Разрез,,НадлежащийТип);
	Описание = Новый ОписаниеТипов(НадлежащийТип);
	Если Описание.Типы().Количество()=1 Тогда
		Возврат Описание.ПривестиЗначение(0);
	ИначеЕсли Описание.Типы().Количество()>1 Тогда
		МассивТипов = Описание.Типы();
		Для Инд = Описание.Типы().Количество() По 2 Цикл
			МассивТипов.Удалить(Инд-1);
		КонецЦикла;
		мОписание = Новый ОписаниеТипов(МассивТипов);
		Возврат мОписание.ПривестиЗначение(0);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипВложенногоРеквизита(Группа,ИмяОбъекта,Реквизит)
	Попытка
		Представитель = Новый(Группа+"Объект."+ИмяОбъекта);
		Тип = ТипЗнч(Представитель[Реквизит]);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип);
		Возврат Новый ОписаниеТипов(МассивТипов);	
	Исключение
		Возврат Новый ОписаниеТипов("Неопределено");	
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура СоответствияРезультатОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Соответствия.ТекущиеДанные.Результат = ПустоеЗначениеРазреза(Объект.Разрез);
КонецПроцедуры

&НаКлиенте
Процедура ШкалаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Шкала.ТекущиеДанные.Результат = ПустоеЗначениеРазреза(Объект.Разрез);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШкалаРезультатОчистка(Элемент, СтандартнаяОбработка)
	Элементы.Шкала.ТекущиеДанные.Результат = ПустоеЗначениеРазреза(Объект.Разрез);
КонецПроцедуры

&НаКлиенте
Процедура РегистрПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокРегистров;
КонецПроцедуры

&НаКлиенте
Процедура РегистрПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение<>Неопределено Тогда
		СтандартнаяОбработка 		= Ложь;
		Объект.Регистр 				= ВыбранноеЗначение;
		Объект.РегистрПредставление	= СписокРегистров.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеРегистраРезультатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если Объект.Регистр = "" Тогда
		ПоказатьПредупреждение(,"Не указан регистр!");
		Возврат;
	КонецЕсли;
	ЗаполнитьРесурсыРегистра();
	Если СписокРесурсов.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не обнаружено полей-ресурсов нужного типа!");
		Возврат;
	КонецЕсли;
	ДанныеВыбора = СписокРесурсов;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсыРегистра()
	СписокРесурсов.Очистить();
	НадлежащийТип 	= Новый Массив;
	фин_ПроцедурыМеханизмовБюджетирования.УстановитьНадлежащийТип(Объект.Разрез,,НадлежащийТип);
	Если НЕ ЗначениеЗаполнено(Объект.Разрез) Тогда
		НадлежащийТип = "Любой";
	КонецЕсли;
    РегистрСведений = Метаданные.РегистрыСведений.Найти(Объект.Регистр);
	Для Каждого Ресурс Из РегистрСведений.Ресурсы Цикл
		Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Ресурс.Тип,НадлежащийТип) Тогда
			СписокРесурсов.Добавить(Ресурс.Имя);
		КонецЕсли;
	КонецЦикла;
	СписокРесурсов.СортироватьПоПредставлению();
КонецПроцедуры

&НаКлиенте
Процедура СоединениеСРегистромПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Регистр="" Тогда
		ПоказатьПредупреждение(,"Не указан регистр!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоединениеСРегистромИзмерениеРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ЗаполнитьИзмеренияРегистра();
	ДанныеВыбора = СписокИзмерений;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмеренияРегистра()
	СписокИзмерений.Очистить();
    РегистрСведений = Метаданные.РегистрыСведений.Найти(Объект.Регистр);
	Для Каждого Ресурс Из РегистрСведений.Измерения Цикл
		СписокИзмерений.Добавить(Ресурс.Имя);
	КонецЦикла;
	СписокИзмерений.СортироватьПоПредставлению();
КонецПроцедуры

&НаКлиенте
Процедура СоединениеСРегистромПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ИзмерениеРегистра 		= Элементы.СоединениеСРегистром.ТекущиеДанные.ИзмерениеРегистра;
	ДанныеВыбора 			= СписокВыбораПоказателей(ИзмерениеРегистра);
КонецПроцедуры

&НаСервере
Функция СписокВыбораПоказателей(ИзмерениеРегистра)
    РегистрСведений = Метаданные.РегистрыСведений.Найти(Объект.Регистр);
	СписокПоказателейДляВыбора = Новый СписокЗначений;
	Тип = Неопределено;
	Тип = РегистрСведений.Измерения.Найти(ИзмерениеРегистра);
	Для Каждого Ресурс Из Объект.ВходящиеПоказатели Цикл
		Если Тип <> Неопределено И Ресурс.Справочник <> "" Тогда
			мТип = Тип.Тип;
			Если НЕ мТип.СодержитТип(Тип(СокрЛП(Ресурс.ТипПоказателя)+"Ссылка."+Ресурс.Справочник)) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СписокПоказателейДляВыбора.Добавить(Ресурс.Показатель);
	КонецЦикла;
	СписокПоказателейДляВыбора.СортироватьПоПредставлению();
	Возврат СписокПоказателейДляВыбора;
КонецФункции

&НаКлиенте
Процедура ФормулаЕдиничныйПриИзменении(Элемент)
	ОбработатьИзменениеТипа();
КонецПроцедуры
