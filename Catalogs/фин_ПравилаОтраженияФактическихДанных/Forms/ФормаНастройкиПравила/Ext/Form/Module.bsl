
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ВидДанных") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Параметры,"Поле,ТипИсточника,Источник,ВладелецНастроек,ВидДанных,ИмяИсточника,ЭтоРегистр,ФинансовыйПоказатель");
	КонецЕсли;
	Если Поле = "Сумма" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	ИначеЕсли Поле = "Количество" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3));
	ИначеЕсли Поле = "Валюта" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ИначеЕсли Поле = "УправленческоеПодразделение" Тогда
		Типы = Новый Массив;
		Типы.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		Типы.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений());
		ОписаниеТипаПоля = Новый ОписаниеТипов(Типы);
	ИначеЕсли Поле = "Проект" Тогда
		Типы = Новый Массив;
		Типы.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов());
		Типы.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
		ОписаниеТипаПоля = Новый ОписаниеТипов(Типы);
	ИначеЕсли Поле = "ФинансовыйПоказатель" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели");
	ИначеЕсли Поле = "Контрагент" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли Поле = "Номенклатура" И ЗначениеЗаполнено(ФинансовыйПоказатель) Тогда
		ОписаниеТипаПоля = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель);
	ИначеЕсли Поле = "ВалютаОперации" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ИначеЕсли Поле = "Организация" Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ИначеЕсли Поле = "Сценарий" Тогда //ИЛИ Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий Тогда
		ОписаниеТипаПоля = Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования");
	ИначеЕсли Найти(Поле,"Разрез")<>0 Тогда
		ОписаниеТипаПоля = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Поле)).ТипЗначения;
	Иначе
		ОписаниеТипаПоля = Новый ОписаниеТипов("Число");
	КонецЕсли;
	Если Параметры.Свойство("Обязательный") Тогда
		Обязательный = Параметры.Обязательный;
		Элементы.Обязательный.Видимость=Истина;
	КонецЕсли;
	ОбъектИБ = Справочники.фин_ПравилаОтраженияФактическихДанных.ОбъектИнформационнойБазы(Новый Структура("Владелец",ВладелецНастроек));
	Если ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования"));
	ИначеЕсли ЭтоРегистр Тогда
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования"));
	Иначе
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие"));
		 СписокТиповИсточников.Добавить(ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования"));
	КонецЕсли;
	Если ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") И ЗначениеЗаполнено(Источник) Тогда
		ЗаполнитьДанныеСоответствия(); 
	КонецЕсли;
	ПлановаяНоменклатура = ?(ЗначениеЗаполнено(ФинансовыйПоказатель),РеквизитЗначения(ФинансовыйПоказатель,"ИспользуемыйНоменклатурныйПеречень"),Неопределено);
	УстановитьОграничениеТипа(ЭтотОбъект);
	мТипИсточника = ТипИсточника;
	ОбъектМетаданныхСуществует = Справочники.фин_ПравилаОтраженияФактическихДанных.ОбъектМетаданныхСуществует(ОбъектИБ);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСоответствия()
	ВариантПолученияСоответствий = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПустаяСсылка();
	ЗаполнениеПоказателей.Очистить();
	Если ТипЗнч(Источник)=Тип("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования") Тогда
		ВариантПолученияСоответствий = Источник.ВариантПолученияСоответствийДляПервичныхДанных;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаполнениеПоказателей.Ссылка,
			|	ЗаполнениеПоказателей.НомерСтроки,
			|	ЗаполнениеПоказателей.ВариантДляТрансформации,
			|	ЗаполнениеПоказателей.Значение,
			|	ЗаполнениеПоказателей.ПоказательВарианта,
			|	ЗаполнениеПоказателей.РеквизитЗаполненияПоказателя,
			|	ЗаполнениеПоказателей.Справочник,
			|	ЗаполнениеПоказателей.Трансформация,
			|	ЗаполнениеПоказателей.ФиксированноеЗначение,
			|	ЗаполнениеПоказателей.Числовой,
			|	ЗаполнениеПоказателей.ТипПоказателя,
			|	ЗаполнениеПоказателей.ПредставлениеНастройки
			|ИЗ
			|	Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ЗаполнениеПоказателей КАК ЗаполнениеПоказателей
			|ГДЕ
			|	ЗаполнениеПоказателей.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Источник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ЗаполнениеПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
		КонецЦикла;
	    ВариантМодифицирован = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставВарианта()
	ЗаполнениеПоказателей.Очистить();
	Если ВариантПолученияСоответствий = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПолучениеПодразделенияПоПодразделениюОрганизации Тогда
		НоваяСтрока = ЗаполнениеПоказателей.Добавить();
		НоваяСтрока.ПоказательВарианта 	= "ПодразделениеОрганизации";
		НоваяСтрока = ЗаполнениеПоказателей.Добавить();
		НоваяСтрока.ПоказательВарианта 	= "Организация";
	ИначеЕсли ВариантПолученияСоответствий = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПоНастройкеСоответствийДляИзмеренийБюджетирования Тогда
		НоваяСтрока = ЗаполнениеПоказателей.Добавить();
		НоваяСтрока.ПоказательВарианта 	= "ИсходноеЗначение";
	Иначе
		Для Каждого Показатель Из ВариантПолученияСоответствий.ВходящиеПоказатели Цикл
			НоваяСтрока = ЗаполнениеПоказателей.Добавить();
			НоваяСтрока.ПоказательВарианта 	= Показатель.Показатель;
		КонецЦикла;
	КонецЕсли;
	ВариантМодифицирован = Истина;
КонецПроцедуры //ЗаполнитьСоставВарианта

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипа(Форма)
	Если Форма.ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования");
	ИначеЕсли Форма.ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
		ОписаниеТипов = Форма.ОписаниеТипаПоля;
	ИначеЕсли Форма.ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования");
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	Форма.Элементы.Источник.ОграничениеТипа = ОписаниеТипов;
	Форма.Элементы.Источник.РедактированиеТекста = Форма.ТипИсточника <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") И Форма.ТипИсточника <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") И Форма.ТипИсточника <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие");
	Форма.Элементы.ГруппаНастройкаПолученияСоответствий.Видимость = Форма.ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие");
	Форма.Элементы.Источник.Видимость = НЕ Форма.ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие");

КонецПроцедуры

&НаКлиенте
Процедура ТипИсточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокТиповИсточников;	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсточникаПриИзменении(Элемент)
	Если ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
		Если ТипЗнч(Источник)<> Тип("ПланВидовХарактеристикСсылка.фин_ВидыСубконтоБюджетирования") Тогда
			Источник = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда
		Если ОписаниеТипаПоля.Типы().Найти(ТипЗнч(Источник)) = Неопределено Тогда
			Источник = ОписаниеТипаПоля.ПривестиЗначение(Источник);
		КонецЕсли;
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
		Если ТипЗнч(Источник)<> Тип("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования") Тогда
			Источник = ПредопределенноеЗначение("Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ПустаяСсылка");
		КонецЕсли;
	Иначе
		Если ТипЗнч(Источник)<> Тип("Строка") ИЛИ мТипИсточника <>ТипИсточника Тогда
			Источник = "";
		КонецЕсли;
	КонецЕсли;
	УстановитьОграничениеТипа(ЭтотОбъект);
	мТипИсточника = ТипИсточника;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ТипИсточника) Тогда
		Если ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования") Тогда
			СтандартнаяОбработка = Ложь;
			СписокВыбора = СписокДополнительныхРеквизитов(ОбъектИБ);
			Если СписокВыбора.Количество()=0 Тогда
				ПоказатьПредупреждение(,"Для вида документов не задано дополнительных реквизитов,
				|подходящих для заполнения выбранного реквизита!");
				Возврат;
			КонецЕсли;
			СписокВыбора.СортироватьПоПредставлению();
			ДанныеВыбора = СписокВыбора;
		ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение") Тогда

		ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") Тогда
			СтруктураОтбора = Новый Структура("Владелец",ОбъектИБ);
			Если ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") Тогда
				СтруктураОтбора.Вставить("ВидДанных",ВидДанных);
			ИначеЕсли ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти") Тогда
				ВидыДанных = Новый СписокЗначений;
				ВидыДанных.Добавить(ВидДанных);
				ВидыДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
				СтруктураОтбора.Вставить("ВидДанных",ВидыДанных);
				Список = Новый СписокЗначений;
				Список.Добавить("");
				Список.Добавить(ИмяИсточника);
				СтруктураОтбора.Вставить("ИмяИсточника",Список);
			Иначе
				ВидыДанных = Новый СписокЗначений;
				ВидыДанных.Добавить(ВидДанных);
				Если НЕ ЭтоРегистр Тогда
					ВидыДанных.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"));
				КонецЕсли;
				СтруктураОтбора.Вставить("ВидДанных",ВидыДанных);
				Список = Новый СписокЗначений;
				Список.Добавить("");
				Список.Добавить(ИмяИсточника);
				СтруктураОтбора.Вставить("ИмяИсточника",Список);
			КонецЕсли;
			СтруктураОтбора.Вставить("Разрез",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Поле)); 
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.ФормаВыбора",Новый Структура("Отбор",СтруктураОтбора),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно);
		ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента") ИЛИ (ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента") И ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие")) Тогда
			Описание =  Новый ОписаниеТипов("Строка");
			Элемент.ОграничениеТипа = Описание;
			Если ОбъектМетаданныхСуществует Тогда
				ОбновитьОтображениеДанных();
				ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработкиОповещенияВыбора",ЭтотОбъект,Новый Структура("ВыбиратьПуть",Истина));
				ВыбираемыйТип = ?(ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"),Неопределено,ОписаниеТипаПоля);
				ТолькоДочерние = ТипИсточника <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие");
				ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоДокументам.Форма.ФормаВыбораРеквизита",Новый Структура("ТолькоДочерние,ВидДокументов,ВидДанных,ИмяИсточника,ТребуетсяАвтовыборПоСубконто,ТребуемыйТип",ТолькоДочерние,ОбъектИБ,ПредопределенноеЗначение("Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента"),"",Истина,ВыбираемыйТип),,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
			КонецЕсли;

		ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения") ИЛИ ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") Тогда
			Если ЭтоРегистр=Ложь И ИмяИсточника="" Тогда
				ПоказатьПредупреждение(,"Не указано имя табличной части / набора движений!");
				Возврат;
			КонецЕсли;
			Описание =  Новый ОписаниеТипов("Строка");
			Элемент.ОграничениеТипа = Описание;
			Если ОбъектМетаданныхСуществует Тогда
				ОбновитьОтображениеДанных();
				ОбработчикОповещенияВыбора = Новый ОписаниеОповещения("ПроцедураОбработкиОповещенияВыбора",ЭтотОбъект,Новый Структура("ВыбиратьПуть,ПоИмениЭлемента",Истина,Истина));
				ВыбираемыйТип = ?(ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие"),Неопределено,ОписаниеТипаПоля);
				ТолькоДочерние = ТипИсточника <> ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие");
				ОткрытьФорму("Справочник.усд_УсловияВыполненияОперацийПоДокументам.Форма.ФормаВыбораРеквизита",Новый Структура("ТолькоДочерние,ВидДокументов,ВидДанных,ИмяИсточника,ТребуетсяАвтовыборПоСубконто,ТребуемыйТип",ТолькоДочерние,ОбъектИБ,ВидДанных,ИмяИсточника,Истина,ВыбираемыйТип),,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикОповещенияВыбора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция СписокДополнительныхРеквизитов(ВидДокументов)
	СписокВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыДокументовДляБюджетирования.РеквизитДокумента
	|ИЗ
	|	РегистрСведений.фин_ДополнительныеРеквизитыДокументовДляБюджетирования КАК ДополнительныеРеквизитыДокументовДляБюджетирования
	|ГДЕ
	|	ДополнительныеРеквизитыДокументовДляБюджетирования.ВидДокументов = &ВидДокументов";
	Запрос.УстановитьПараметр("ВидДокументов",ВидДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.РеквизитСодержитТип(Выборка.РеквизитДокумента.ТипЗначения,ОписаниеТипаПоля.Типы()) Тогда
			СписокВыбора.Добавить(Выборка.РеквизитДокумента);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаКлиенте
Процедура ИсточникОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ТипИсточника) Тогда
		Если ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие") И Найти(Источник,"Автовыбор")<>0 Тогда
			СтандартнаяОбработка = Ложь;
			ОписаниеОповещенияОткрытия = Новый ОписаниеОповещения("ОбработчикОткрытияПоля",ЭтотОбъект);
			ПараметрыОткрытия = Новый Структура("ИмяПоля",Источник);
			ОткрытьФорму("Справочник.фин_ПравилаОтраженияФактическихДанных.Форма.ФормаОткрытияПоля",ПараметрыОткрытия,ЭтотОбъект,Новый УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияОткрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытияПоля(РезультатОткрытия,ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия<>Неопределено Тогда
		Источник = РезультатОткрытия;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция РеквизитЗначения(Значение,ИмяРеквизита)
	Возврат Значение[ИмяРеквизита];	
КонецФункции


&НаКлиенте
Процедура ПроцедураОбработкиОповещенияВыбора(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВыбиратьПуть") И ДополнительныеПараметры.ВыбиратьПуть = Истина Тогда
			ОбновитьОтображениеДанных();
			Если Результат <> Неопределено Тогда
				Источник = Результат.Путь;
			КонецЕсли;
		Иначе
			Если ДополнительныеПараметры.Свойство("ПоИмениЭлемента") И ДополнительныеПараметры.ПоИмениЭлемента = Истина Тогда
				Описание =  Новый ОписаниеТипов("СправочникСсылка.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования");
				Элементы.Источник.ОграничениеТипа = Описание;
			КонецЕсли;
			Источник=Результат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Если ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") И ВариантМодифицирован И ЗначениеЗаполнено(ВариантПолученияСоответствий) И ЗаполнениеПоказателей.Количество()>0 Тогда
		СохранитьДанныеСоответствия(); 
	КонецЕсли;
	
	Закрыть(Новый Структура("Источник,ТипИсточника,Обязательный",Источник,ТипИсточника,Обязательный));
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеСоответствия()
	Если ЗначениеЗаполнено(Источник) Тогда
		ОбъектНастроек = Источник.ПолучитьОбъект();
	Иначе
		ОбъектНастроек = Справочники.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.СоздатьЭлемент();
		ОбъектНастроек.Владелец 				= ОбъектИБ;
		ОбъектНастроек.ВидДанных				= ВидДанных;
		ОбъектНастроек.ИмяИсточника 			= ИмяИсточника;
		ОбъектНастроек.ПредставлениеИсточника 	= ИмяИсточника;
		ОбъектНастроек.Наименование				= Строка(ОбъектИБ)+"/"+ВидДанных+"/"+ИмяИсточника+"/"+Поле+"/"+ВариантПолученияСоответствий;
		ОбъектНастроек.УстановитьНовыйКод();
	КонецЕсли;
	ОбъектНастроек.Разрез = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Поле);
	ОбъектНастроек.ВариантПолученияСоответствийДляПервичныхДанных = ВариантПолученияСоответствий;
	ОбъектНастроек.ЗаполнениеПоказателей.Загрузить(ЗаполнениеПоказателей.Выгрузить());
	попытка
		ОбъектНастроек.Записать();
		Источник = ОбъектНастроек.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	Если ВидДанных = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие") И ЗначениеЗаполнено(Источник) Тогда
		ЗаполнитьДанныеСоответствия(); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантПолученияСоответствийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Поле));
	Если Поле <> "Сумма" И Поле <> "Количество" Тогда
		СписокРазрезов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ПустаяСсылка"));
	КонецЕсли;
	СтруктураПараметровВыбора = Новый Структура("Отбор,Разрез",Новый Структура("Разрез",СписокРазрезов),ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+Поле));
	ОткрытьФорму("Справочник.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ФормаВыбора",СтруктураПараметровВыбора,Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПолученияСоответствийПриИзменении(Элемент)
	ЗаполнитьСоставВарианта();
	ВариантМодифицирован=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнениеПоказателейПредставлениеНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаполнениеПоказателей.ТекущиеДанные;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНастройки",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
	СтруктураПараметров = Новый Структура("ОбъектИБ,ВидДанных,ИмяИсточника,Вариант,ВариантДляТрансформации,Значение,ПоказательВарианта,РеквизитЗаполненияПоказателя,Трансформация,ФиксированноеЗначение");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ТекущиеДанные);
	//СтруктураПараметров.Вставить("ОбъектИБ",ВладелецНастроек);
	СтруктураПараметров.Вставить("Вариант",ВариантПолученияСоответствий);
	ОткрытьФорму("Справочник.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.Форма.ФормаНастройкиСвязи",СтруктураПараметров,Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройки(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ТекущиеДанные = ЗаполнениеПоказателей.НайтиПоИдентификатору(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,РезультатВыбора);
		фин_ОбщегоНазначенияКлиентСервер.ЗаполнитьПредставлениеСтрокиНастройкиСоответствий(ТекущиеДанные);
		ВариантМодифицирован = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(ТипИсточника) Тогда
		ТипИсточника = ПредопределенноеЗначение("Перечисление.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение");
		ТипИсточникаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры
