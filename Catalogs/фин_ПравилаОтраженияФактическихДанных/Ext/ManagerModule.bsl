#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ОбъектИнформационнойБазы(Объект) Экспорт
	Если ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_КлассификаторРегистров") ИЛИ ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ВидыДокументов") Тогда
		Возврат Объект.Владелец;
	ИначеЕсли ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") Тогда
		Возврат Объект.Владелец.Владелец;
	ИначеЕсли ТипЗнч(Объект.Владелец)=Тип("СправочникСсылка.фин_ГруппыПравилОтраженияФактическихДанных") Тогда
		Возврат Объект.Владелец.Владелец.Владелец;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Процедура КорректироватьЗаполнениеПравил(Объект,Форма=Неопределено) Экспорт
	ОбъектИБ = Справочники.фин_ПравилаОтраженияФактическихДанных.ОбъектИнформационнойБазы(Объект);
	ЭтоРегистр = ?(Форма=Неопределено,ЭтоРегистр(Объект),Форма.ЭтоРегистр);
	Если Форма=Неопределено Тогда
		ПолныйСписокРазрезов = Новый СписокЗначений;
		Разрезы = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		Для Каждого ЭлементРазрез Из Разрезы Цикл
			НовыйЭлемент = ПолныйСписокРазрезов.Добавить(ЭлементРазрез.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение));
		КонецЦикла;
	Иначе
		ПолныйСписокРазрезов = Форма.ПолныйСписокРазрезов;
	КонецЕсли;
	СтруктураРазрезовУчетаПоказателя = ?(Форма=Неопределено,СтруктураРазрезовУчетаПоказателя(Объект),Форма.СтруктураРазрезовУчетаПоказателя);
	СтруктураПризнаковУчетаПоказателя = ?(Форма=Неопределено,СтруктураПризнаковУчетаПоказателя(Объект),Форма.СтруктураПризнаковУчетаПоказателя);
	Если Форма=Неопределено Тогда
		БазовыеПараметры = Новый СписокЗначений;
		БазовыеПараметры.Добавить("ФинансовыйПоказатель","ФинансовыйПоказатель");
		БазовыеПараметры.Добавить("Сумма","Сумма");
		БазовыеПараметры.Добавить("Количество","Количество");
		БазовыеПараметры.Добавить("Валюта","Валюта");
	Иначе
		БазовыеПараметры = Форма.БазовыеПараметры;
	КонецЕсли;
	МассивСписков = Новый Массив;
	МассивСписков.Добавить(БазовыеПараметры);
	МассивСписков.Добавить(ПолныйСписокРазрезов);
	Для Каждого СписокКОбработке Из МассивСписков Цикл
		Для Каждого ЭлементБазовыйПараметр Из СписокКОбработке Цикл
			ТипИсточника 	= Объект[ЭлементБазовыйПараметр.Представление+"ТипИсточника"];
			Источник 		= Объект[ЭлементБазовыйПараметр.Представление+"Источник"];
			Очищать = Ложь;
			Если НЕ ЗначениеЗаполнено(Источник) И (ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента ИЛИ ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения) Тогда
				Продолжить;
			ИначеЕсли ПолныйСписокРазрезов.НайтиПоЗначению(ЭлементБазовыйПараметр.Значение)<>Неопределено И НЕ СтруктураРазрезовУчетаПоказателя.Свойство(ЭлементБазовыйПараметр.Представление) Тогда
				Очищать = Истина;
			ИначеЕсли БазовыеПараметры.НайтиПоЗначению(ЭлементБазовыйПараметр.Значение)<>Неопределено И СтруктураПризнаковУчетаПоказателя.Свойство(ЭлементБазовыйПараметр.Представление) И СтруктураПризнаковУчетаПоказателя[ЭлементБазовыйПараметр.Представление]=Ложь Тогда
				Очищать = Истина;
			ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ДополнительныеРеквизитыБюджетирования И НЕ ЭтоРегистр Тогда
				Очищать = Истина;
			ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента И ЭтоРегистр Тогда
				Очищать = Истина;
			ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента Тогда
				Попытка
					Если Метаданные.Документы.Найти(ОбъектИБ.ПрограммныйИдентификатор)=Неопределено ИЛИ Метаданные.Документы[ОбъектИБ.ПрограммныйИдентификатор].Реквизиты.Найти(Источник)=Неопределено Тогда
						Очищать = Истина;
					КонецЕсли;
				Исключение
					Очищать = Истина;
				КонецПопытки;
			ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения И Объект.ИмяИсточника="" И НЕ ЭтоРегистр Тогда
				Очищать = Истина;
			//ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения И ЭтоРегистр Тогда
			//	МетаданныеРегистра = Справочники.фин_КлассификаторРегистров.ПолучитьОбъектМетаданныхРегистраПоСсылке(ОбъектИБ);
			//	Если МетаданныеРегистра.Измерения
			ИначеЕсли ТипИсточника = Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.Соответствие И ЗначениеЗаполнено(Источник) И Источник.Владелец<>ОбъектИБ Тогда
				Очищать = Истина;
			КонецЕсли;
			Если Очищать Тогда
				Если Форма<>Неопределено Тогда
					Форма[ЭлементБазовыйПараметр.Представление]="";
				КонецЕсли;
				Объект[ЭлементБазовыйПараметр.Представление+"ТипИсточника"] = ?(ЭтоРегистр,Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения,Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента);
				Объект[ЭлементБазовыйПараметр.Представление+"Источник"] = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЭтоРегистр(Объект) Экспорт
	ОбъектИБ = Справочники.фин_ПравилаОтраженияФактическихДанных.ОбъектИнформационнойБазы(Объект);
	Возврат (ЗначениеЗаполнено(ОбъектИБ) И ТипЗнч(ОбъектИБ)=Тип("СправочникСсылка.фин_КлассификаторРегистров"));
КонецФункции

Функция СтруктураПризнаковУчетаПоказателя(Объект) Экспорт
	Если Объект.ФинансовыйПоказательТипИсточника=Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение Тогда
		СтруктураПризнаковУчетаПоказателя = Новый Структура("Сумма,Количество",Объект.ФинансовыйПоказательИсточник.УчетПоСумме,Объект.ФинансовыйПоказательИсточник.УчетПоКоличеству);
	Иначе
		СтруктураПризнаковУчетаПоказателя = Новый Структура("Сумма,Количество",Истина,Истина);
	КонецЕсли;
	Возврат СтруктураПризнаковУчетаПоказателя;
КонецФункции

Функция СтруктураРазрезовУчетаПоказателя(Объект,Форма=Неопределено) Экспорт
	Если Форма=Неопределено Тогда
		ПолныйСписокРазрезов = Новый СписокЗначений;
		Разрезы = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		Для Каждого ЭлементРазрез Из Разрезы Цикл
			НовыйЭлемент = ПолныйСписокРазрезов.Добавить(ЭлементРазрез.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение));
		КонецЦикла;
	Иначе
		ПолныйСписокРазрезов = Форма.ПолныйСписокРазрезов;
	КонецЕсли;
	Если Объект.ФинансовыйПоказательТипИсточника=Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение Тогда
		СтруктураРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(Объект.ФинансовыйПоказательИсточник);
	Иначе
		СтруктураРазрезов = Новый Структура;
		Для Каждого ЭлементРазрез Из ПолныйСписокРазрезов Цикл
			СтруктураРазрезов.Вставить(ЭлементРазрез.Представление);
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураРазрезов;
КонецФункции

Функция ОбъектМетаданных(ОбъектИБ) Экспорт
	Возврат ?(ЗначениеЗаполнено(ОбъектИБ),?(ТипЗнч(ОбъектИБ)=Тип("СправочникСсылка.фин_КлассификаторРегистров"),Справочники.фин_КлассификаторРегистров.ПолучитьОбъектМетаданныхРегистраПоСсылке(ОбъектИБ),Метаданные.Документы.Найти(ОбъектИБ.ПрограммныйИдентификатор)),Неопределено);
КонецФункции

Функция ОбъектМетаданныхСуществует(ОбъектИБ) Экспорт
	Возврат ОбъектМетаданных(ОбъектИБ)<>Неопределено;
КонецФункции

	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецЕсли