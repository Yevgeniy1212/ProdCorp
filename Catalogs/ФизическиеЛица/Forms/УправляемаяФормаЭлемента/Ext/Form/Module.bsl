&НаКлиенте
Перем мОбработкаТайпингаВидаКИ;
&НаКлиенте
Перем мТекстТайпингаВидаКИ;
&НаКлиенте
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;
&НаКлиенте
Перем мФормаВводаМестаРождения;
&НаКлиенте
Перем мТекущееОсновноеИзображение;
&НаКлиенте
Перем мПустаяКартинка;
&НаКлиенте
Перем мКнопкаРедактироватьКИВДиалоге;
//&НаКлиенте
//Перем мНаборЗаписейДокументаУдостоверяющегоЛичность Экспорт;
&НаКлиенте
Перем мНаборЗаписейГражданство Экспорт;
&НаКлиенте
Перем мНаборЗаписейПенсионноеОбеспечение Экспорт;
&НаКлиенте
Перем мНаборЗаписейВоинскийУчет Экспорт;
&НаКлиенте
Перем мНаборЗаписейСемейноеПоложение Экспорт;
&НаКлиенте
Перем мЕстьОграниченияПравДоступаНаУровнеЗаписей;
&НаКлиенте
Перем мЖирныйШрифт;
&НаКлиенте
Перем Переменные;
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает в поле картинки основное изображение
//
&НаСервере
Процедура ПоказатьОсновноеИзображение(мТекущееОсновноеИзображение,мПустаяКартинка)
	Если мТекущееОсновноеИзображение = Неопределено Тогда
		Элементы.ОсновноеИзображение.Картинка = мПустаяКартинка;
	Иначе
		Элементы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
	КонецЕсли;
КонецПроцедуры // ПоказатьОсновноеИзображение()

// Процедура считывает место рождения физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
&НаСервере
Процедура ПрочитатьМестоРождения()
	МестоРожденияФизЛица = ПредставлениеМестаРождения(Объект.МестоРождения);
	Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
		МестоРожденияФизЛица = "Ввести место рождения";
	КонецЕсли;
КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
&НаСервере
Процедура ПрочитатьФИО()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Фамилия,
					|	Имя,
					|	Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо)";
	ФИОСрез = Запрос.Выполнить().Выбрать();
	Если ФИОСрез.Следующий() Тогда
		Фамилия  = ФИОСрез.Фамилия;
		Имя      = ФИОСрез.Имя;
		Отчество = ФИОСрез.Отчество;
	КонецЕсли;
КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает ФИО физлица при присвоении СИК
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
&НаСервере
Процедура ПрочитатьФИОПриПрисвоенииСИК()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Фамилия,
					|	Имя,
					|	Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизЛицПриПрисвоенииСИК
					|ГДЕ
					|	ФизЛицо = &ФизЛицо";
	ФИОСрез = Запрос.Выполнить().Выбрать();
	Если ФИОСрез.Следующий() Тогда
		ФамилияПриПрисвоенииСИК  = ФИОСрез.Фамилия;
		ИмяПриПрисвоенииСИК      = ФИОСрез.Имя;
		ОтчествоПриПрисвоенииСИК = ФИОСрез.Отчество;
	КонецЕсли;
КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает заметки физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
&НаКлиенте
Процедура ПрочитатьЗаметки()
	Заметки.Отбор.Объект.Значение = Объект.Ссылка;
	Заметки.Отбор.Объект.Использование = Истина;
КонецПроцедуры

// Процедура проверяет соответсвие ИНН требованиям, устанавливает цвет
// текста в поле ввода и подсказку
&НаКлиенте
Процедура ПроверитьИИНОформитьПолеВвода(ВыводитьСообщение = Ложь)
	//	Если ЗначениеЗаполнено(Объект.ИдентификационныйКодЛичности) И НЕ куфиб_ОбщегоНазначения.ИИНБИНСоответствуетТребованиям(Объект.ИдентификационныйКодЛичности, ВыводитьСообщение) Тогда
	//	Элементы.ИдентификационныйКодЛичности.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
	//	Элементы.ИдентификационныйКодЛичности.Подсказка = "Ошибка в ИИН";
	//Иначе
	//	Элементы.ИдентификационныйКодЛичности.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	//	Элементы.ИдентификационныйКодЛичности.Подсказка = "";
	//КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ КОМАНДНЫХ ПАНЕЛЕЙ

///////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	оф_ИндивидуальныеНомераЗаголовок = "Индивидуальные номера";
	оф_ФамилияИмяОтчествоПриПрисвоенииСИКЗаголовок = "Фамилия, Имя, Отчество при присвоении СИК";
	оф_СписокКартСчетаФизЛицаЗаголовок = "Список карт счета физ лица";
	оф_СоставСемьиЗаголовок = "Состав семьи физического лица";
	оф_ЗнаниеЯзыковЗаголовок = "Знание языков физическим лицом";
	оф_ОбразованиеЗаголовок = "Образование физического лица";
	оф_ПрофессииЗаголовок = "Профессии";
	
	Попытка 
		//Объеявление набора переменных объекта
		Переменные = Новый Структура;
		Переменные.Вставить("мЕстьОграниченияПравДоступаНаУровнеЗаписей");
		Переменные.Вставить("мНаборЗаписейДокументаУдостоверяющегоЛичность");
		Переменные.Вставить("мНаборЗаписейГражданство");
		Переменные.Вставить("мНаборЗаписейВоинскийУчет");
		Переменные.Вставить("мНаборЗаписейСемейноеПоложение");
		Переменные.Вставить("мНаборЗаписейПенсионноеОбеспечение");
		Переменные.Вставить("мТекущееОсновноеИзображение");
		Переменные.Вставить("мПустаяКартинка");
		////
		Переменные.мПустаяКартинка = Новый Картинка;
		мОбработкаТайпингаВидаКИ                 = Ложь;
		мТекстТайпингаВидаКИ                     = "";
		мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
		мЖирныйШрифт = Новый Шрифт(,, Истина);		
		Переменные.мЕстьОграниченияПравДоступаНаУровнеЗаписей = Ложь;
		куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(,ФизЛицо = &ФизЛицо)";
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
		СрезПаспортныхДанных						  = Запрос.Выполнить().Выгрузить();
		Если СрезПаспортныхДанных.Количество() > 0 тогда
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.ФизЛицо.Использование = Истина;
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение = СрезПаспортныхДанных[0].Период;
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование = Истина;
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Прочитать();
		Иначе
			Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Добавить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо)";
		Переменные.мНаборЗаписейГражданство 	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
		СрезГражданство		    	= Запрос.Выполнить().Выгрузить();
		Если СрезГражданство.Количество() > 0 тогда
			Переменные.мНаборЗаписейГражданство.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			Переменные.мНаборЗаписейГражданство.Отбор.ФизЛицо.Использование = Истина;
			Переменные.мНаборЗаписейГражданство.Отбор.Период.Значение = СрезГражданство[0].Период;
			Переменные.мНаборЗаписейГражданство.Отбор.Период.Использование = Истина;
			Переменные.мНаборЗаписейГражданство.Прочитать();
		Иначе
			Переменные.мНаборЗаписейГражданство.Добавить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.ВоинскийУчет.СрезПоследних(, ФизЛицо = &ФизЛицо)";
		Переменные.мНаборЗаписейВоинскийУчет 	= РегистрыСведений.ВоинскийУчет.СоздатьНаборЗаписей();
		СрезВоинскийУчет	    	= Запрос.Выполнить().Выгрузить();
		Если СрезВоинскийУчет.Количество() > 0 тогда
			Переменные.мНаборЗаписейВоинскийУчет.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			Переменные.мНаборЗаписейВоинскийУчет.Отбор.ФизЛицо.Использование = Истина;
			Переменные.мНаборЗаписейВоинскийУчет.Отбор.Период.Значение = СрезВоинскийУчет[0].Период;
			Переменные.мНаборЗаписейВоинскийУчет.Отбор.Период.Использование = Истина;
			Переменные.мНаборЗаписейВоинскийУчет.Прочитать();
		Иначе
			Переменные.мНаборЗаписейВоинскийУчет.Добавить();
		КонецЕсли;

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо)";
		Переменные.мНаборЗаписейСемейноеПоложение	= РегистрыСведений.СемейноеПоложениеФизЛиц.СоздатьНаборЗаписей();
		СрезСемейноеПоложение	    	= Запрос.Выполнить().Выгрузить();
		Если СрезСемейноеПоложение.Количество() > 0 Тогда
			Переменные.мНаборЗаписейСемейноеПоложение.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			Переменные.мНаборЗаписейСемейноеПоложение.Отбор.ФизЛицо.Использование = Истина;
			Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Период.Значение = СрезСемейноеПоложение[0].Период;
			Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Период.Использование = Истина;
			Переменные.мНаборЗаписейСемейноеПоложение.Прочитать();
		Иначе
			Переменные.мНаборЗаписейСемейноеПоложение.Добавить();
		КонецЕсли;

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо)";
		Переменные.мНаборЗаписейПенсионноеОбеспечение  = РегистрыСведений.СведенияОПенсионномОбеспеченииФизЛиц.СоздатьНаборЗаписей();
		СрезПенсионноеОбеспечение   	    = Запрос.Выполнить().Выгрузить();
		Если СрезПенсионноеОбеспечение.Количество() > 0 тогда
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.ФизЛицо.Использование = Истина;
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Период.Значение = СрезПенсионноеОбеспечение[0].Период;
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Период.Использование = Истина;
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Прочитать();
		Иначе
			Переменные.мНаборЗаписейПенсионноеОбеспечение.Добавить();
		КонецЕсли;
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Параметры.ЗначениеКопирования);
		КонецЕсли;
		Параметры.Адрес = ПоместитьВоВременноеХранилище(Переменные, ЭтаФорма.УникальныйИдентификатор);
		СписокКартСчетаФЛ = РегистрыСведений.КартСчетаФизЛиц.СоздатьНаборЗаписей();
		СписокКартСчетаФЛ.Отбор.ФизЛицо.Значение = Объект.Ссылка;
		СписокКартСчетаФЛ.Отбор.ФизЛицо.Использование = Истина;
		СписокКартСчетаФЛ.Прочитать();
		СписокКартСчетаФизЛица.Загрузить(СписокКартСчетаФЛ.Выгрузить());
		//СписокКартСчетаФизЛица.Отбор.ФизЛицо.Значение = Объект.Ссылка;
		//СписокКартСчетаФизЛица.Отбор.ФизЛицо.Использование = Истина;
		//СписокКартСчетаФизЛица.Прочитать();
		ОбновитьПредставлениеЭлемента("Гражданство",Переменные);
		ОбновитьПредставлениеЭлемента("СемейноеПоложение",Переменные);
		ОбновитьПредставлениеЭлемента("УдостоверениеЛичности",Переменные);
		ОбновитьПредставлениеЭлемента("ПенсионноеОбеспечение",Переменные);
		ОбновитьПредставлениеЭлемента("ФИО",Переменные);
		ОбновитьПредставлениеЭлемента("ВоинскийУчет",Переменные);
		ОбновитьПредставлениеЭлемента("ОсновноеИзображение",Переменные);
		ОбновитьПредставлениеЭлемента("ИзмененСписокСправочникаХранилищеДопИнформации",Переменные);
		// Место рождения.
		ПрочитатьМестоРождения();
		ПрочитатьФИО();
		ПрочитатьФИОПриПрисвоенииСИК();
		// Выведем картинку на первой странице
		Переменные.мТекущееОсновноеИзображение = Объект.ОсновноеИзображение.Хранилище.Получить();
		ПоказатьОсновноеИзображение(Переменные.мТекущееОсновноеИзображение,Переменные.мПустаяКартинка);
		Переменные.мЕстьОграниченияПравДоступаНаУровнеЗаписей = НастройкаПравДоступа.ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам();		
	Исключение
		// что-то не получилось выбрать - возможны ограничения RLS
		Отказ = Истина;
		//Предупреждение(ОписаниеОшибки());
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры


// Процедура - вызывается при открытии формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если параметры.Адрес<>Неопределено Тогда
	//	Переменные = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	//КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ГруппаДоступаФизическогоЛица = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяГруппаДоступаФизическогоЛица");
	КонецЕсли;
	мКнопкаРедактироватьКИВДиалоге = Элементы.КонтактнаяИнформацияРедактироватьКИВДиалоге;
	//НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	//Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
	//	мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	//КонецЕсли;
	ПрочитатьЗаметки();
	Заголовок = "Личные данные физического лица: " + Объект.Наименование;
	//Элементы.Образование.Колонки.Специальность.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию");
	СписокКнопокФайлов = Новый СписокЗначений;
//	СписокКнопокФайлов.Добавить(Элементы.ФормаФайлы);
//	УниверсальныеМеханизмы.ПолучитьКартинкуКнопкиОткрытияФайлов(Объект.Ссылка, СписокКнопокФайлов);
    Если Объект.Ссылка.Пустая() Тогда
		Элементы.СписокКартСчетаФизЛица.Доступность = ЛОЖЬ;
		Элементы.СписокКартСчетаФизЛицаКоманднаяПанель.Доступность = ЛОЖЬ;
	КонецЕсли;
	ПроверитьИИНОформитьПолеВвода();
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	Если ИсточникВыбора = мФормаВводаМестаРождения тогда
		МестоРождения = РезультатВыбора;
		//Представление места рождения
		МестоРожденияФизЛица = ПроцедурыУправленияПерсоналом.ПредставлениеМестаРождения(МестоРождения);
		Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
			МестоРожденияФизЛица = "Ввести место рождения";
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		Если НЕ Объект.ОсновноеИзображение = РезультатВыбора Тогда
			Объект.ОсновноеИзображение = РезультатВыбора;
		КонецЕсли;
		Переменные.мТекущееОсновноеИзображение = Объект.ОсновноеИзображение.Хранилище.Получить();
		ПоказатьОсновноеИзображение(Переменные.мТекущееОсновноеИзображение,Переменные.мПустаяКартинка);
		СписокКнопокФайлов = Новый СписокЗначений;
//		СписокКнопокФайлов.Добавить(Элементы.ФормаФайлы);
		УниверсальныеМеханизмы.ПолучитьКартинкуКнопкиОткрытияФайлов(Объект.Ссылка, СписокКнопокФайлов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, Знач Переменные);
	Переменные = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
			//Гражданство = РегистрыСведений.ГражданствоФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка)).Страна;
			Гражданство = "" + Переменные.мНаборЗаписейГражданство[0].Страна + ?(Переменные.мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсионное обеспечение" +  
						  ?(Переменные.мНаборЗаписейГражданство[0].НеПодлежитСоциальномуСтрахованию,", не ",", " ) + "подлежит социальному страхованию" +
						  ?(Переменные.мНаборЗаписейГражданство[0].НеЯвляетсяНалоговымРезидентомРК,", не ",", " ) + "является налоговым резидентом РК" +
						  ?(Переменные.мНаборЗаписейГражданство[0].ИностранныйСпециалист,", ",", не " ) + "является иностранным специалистом";
			ГражданствоСтрана = "" + Переменные.мНаборЗаписейГражданство[0].Страна;
			ЭтаФорма.Модифицированность = Истина;
			Если НЕ ЗначениеЗаполнено(ГражданствоСтрана) Тогда
				Гражданство = "Ввести данные о гражданстве";
			КонецЕсли;
		ИначеЕсли ИмяОбновляемогоЭлемента = "СемейноеПоложение" Тогда
			//СемейноеПоложение = РегистрыСведений.СемейноеПоложениеФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка)).СемейноеПоложение;
			СемейноеПоложение = Переменные.мНаборЗаписейСемейноеПоложение[0].СемейноеПоложение;
			Модифицированность = Истина;
			Если НЕ ЗначениеЗаполнено(СемейноеПоложение) Тогда
				СемейноеПоложение = "Ввести данные о семейном положении";
			КонецЕсли;
		ИначеЕсли ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
			//Паспорт = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
			Паспорт = Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
			УдостоверениеЛичности = "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
			                        + ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
			                        + Паспорт.ДокументКемВыдан;
			Модифицированность = Истина;
			Если УдостоверениеЛичности = ", серия: , № , выдан: Не указано года, " Тогда
				УдостоверениеЛичности = "Ввести данные об удостоверении личности";
            Иначе
				УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
			КонецЕсли;
		ИначеЕсли ИмяОбновляемогоЭлемента = "ПенсионноеОбеспечение" Тогда
			//ПенсионноеОбеспечение = РегистрыСведений.СведенияОПенсионномОбеспеченииФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка)).СемейноеПоложение;
			Пенсия = Переменные.мНаборЗаписейПенсионноеОбеспечение[0];
			ПенсионноеОбеспечение = ?(Пенсия.Пенсионер,"Является","Не является") + " пенсионером" +
									"; Пенсионный фонд: " + ?(НЕ ЗначениеЗаполнено(Пенсия.ПенсионныйФонд), "не указан", Пенсия.ПенсионныйФонд);
			ЭтаФорма.Модифицированность = Истина;
		ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
			ПрочитатьФИО();
		ИначеЕсли ИмяОбновляемогоЭлемента = "ФИОПриПрисвоенииСИК" Тогда
			ПрочитатьФИОПриПрисвоенииСИК();
		ИначеЕсли ИмяОбновляемогоЭлемента = "ВоинскийУчет" Тогда
			//СтруктураВоинскийУчет = РегистрыСведений.ВоинскийУчет.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
			СтруктураВоинскийУчет = Переменные.мНаборЗаписейВоинскийУчет[0];
            Если СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности = ПредопределенноеЗначение("Перечисление.ОтношениеКВоинскойОбязанности.НеВоеннообязанный") Тогда
				ВоинскийУчет = СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности	
			Иначе
				ВоинскийУчет = "" + СтруктураВоинскийУчет.ОтношениеКВоинскойОбязанности
								+ ", Группа: "+ СтруктураВоинскийУчет.ГруппаУчета
							    + ", Категория: "+ СтруктураВоинскийУчет.КатегорияУчета
							    +", Звание: " + СтруктураВоинскийУчет.Звание 
								+", Состав: " + СтруктураВоинскийУчет.Состав
							    + ", ВУС: "+ СтруктураВоинскийУчет.ВУС + ", Годность: " 
								+ СтруктураВоинскийУчет.Годность + ", Военкомат: " 
								+ СтруктураВоинскийУчет.Военкомат 
								+ ", " + СтруктураВоинскийУчет.ОтношениеКВоинскомуУчету 
								+ ?(ЗначениеЗаполнено(СтруктураВоинскийУчет.ЗабронированОрганизацией),", Забронирован за организацией " + СтруктураВоинскийУчет.ЗабронированОрганизацией.НаименованиеПолное,"")
								+ ?(СтруктураВоинскийУчет.НаличиеМобпредписания,", имеет мобпредписание","")
								+", № команды: " + СтруктураВоинскийУчет.НомерКомандыПартии;
	
			КонецЕсли;
			Если ВоинскийУчет = "; Звание: , ВУС: , Годность: , Военкомат: , " Тогда
				ВоинскийУчет = "Ввести данные о воинском учете";
			КонецЕсли;
			ЭтаФорма.Модифицированность = Истина;
		ИначеЕсли ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
			// обновляем картинку на первой странице
			Если Переменные.мТекущееОсновноеИзображение <> Объект.ОсновноеИзображение.Хранилище.Получить() Тогда
				Переменные.мТекущееОсновноеИзображение = Объект.ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение(Переменные.мТекущееОсновноеИзображение,Переменные.мПустаяКартинка);
			КонецЕсли;
		ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
//			СписокКнопокФайлов.Добавить(Элементы.ФормаФайлы);
			//СписокКнопокФайлов.Добавить(Элементы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			//куфиб_УниверсальныеМеханизмы.ПолучитьКартинкуКнопкиОткрытияФайлов(Объект.Ссылка, СписокКнопокФайлов);
		ИначеЕсли ИмяОбновляемогоЭлемента = "КартСчет" Тогда
			СписокКартСчетаФизЛица.Отбор.ФизЛицо.Значение = Объект.Ссылка;
			СписокКартСчетаФизЛица.Отбор.ФизЛицо.Использование = Истина;			
			СписокКартСчетаФизЛица.Прочитать();
		КонецЕсли;
КонецПроцедуры

// Процедура - обработчик пришедшего оповещения
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Объект.Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") и Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		Если ИмяОбновляемогоЭлемента = "ФИО" Тогда
			ПрежнееФИО = СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
		КонецЕсли;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента,Переменные);
		Если ИмяОбновляемогоЭлемента = "ФИО" Тогда
			// спросим о необходимости поменять Наименование элемента справочника
			НовоеФИО = СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
			Если ВРег(ПрежнееФИО) <> ВРег(НовоеФИО) Тогда
				Ответ = Вопрос("Изменить наименование элемента справочника на " + НовоеФИО + "?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Наименование = НовоеФИО;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если Элементы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И Элементы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И Элементы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(Элементы.КонтактнаяИнформация);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// Обработчик события "ПередЗаписью" формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Отказ = Истина;
	Возврат;
	Если Переменные.мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ЗначениеЗаполнено(Объект.ГруппаДоступаФизическогоЛица) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Элемент не записан: не задана группа доступа для физического лица на закладке Доступ!");
		Отказ = Истина;
	КонецЕсли;
	//Параметры.Адрес = ПоместитьВоВременноеХранилище(Переменные,ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Переменные = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	об= РеквизитФормыВЗначение("Объект");
	об.ПроверитьДубли(Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0], Элементы.ИдентификационныйКодЛичности.Значение, Элементы.Наименование.Значение);
	ЗначениеВРеквизитФормы(об,"Объект");
	ПроцедурыУправленияПерсоналом.ЗаписатьДанныеФИОВРегистр(Объект.Ссылка, Фамилия, Имя, Отчество);
	
	// запись в регистр паспортных данных
	Если Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Модифицированность() И 
			ЗначениеЗаполнено(Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период) тогда
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Объект.Ссылка;
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование 	= Истина;
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение 		= Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование = Истина;
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение 		= Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;
		Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);
	КонецЕсли;

	// запись в регистр гражданство
	Если Переменные.мНаборЗаписейГражданство.Модифицированность() И ЗначениеЗаполнено(Переменные.мНаборЗаписейГражданство[0].Период) тогда
		Переменные.мНаборЗаписейГражданство[0].Физлицо = Объект.Ссылка;
		Переменные.мНаборЗаписейГражданство.Отбор.Физлицо.Использование 	= Истина;
		Переменные.мНаборЗаписейГражданство.Отбор.Физлицо.Значение 		= Переменные.мНаборЗаписейГражданство[0].Физлицо;
		Переменные.мНаборЗаписейГражданство.Отбор.Период.Использование 	= Истина;
		Переменные.мНаборЗаписейГражданство.Отбор.Период.Значение 			= Переменные.мНаборЗаписейГражданство[0].Период;
		Переменные.мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр воинский учет
	Если Переменные.мНаборЗаписейВоинскийУчет.Модифицированность() И ЗначениеЗаполнено(Переменные.мНаборЗаписейВоинскийУчет[0].Период) тогда
		Переменные.мНаборЗаписейВоинскийУчет[0].Физлицо = Объект.Ссылка;
		Переменные.мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Использование 	= Истина;
		Переменные.мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Значение 		= Переменные.мНаборЗаписейВоинскийУчет[0].Физлицо;
		Переменные.мНаборЗаписейВоинскийУчет.Отбор.Период.Использование 	= Истина;
		Переменные.мНаборЗаписейВоинскийУчет.Отбор.Период.Значение 		= Переменные.мНаборЗаписейВоинскийУчет[0].Период;
		Переменные.мНаборЗаписейВоинскийУчет.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр семейное положение
	Если Переменные.мНаборЗаписейСемейноеПоложение.Модифицированность() И ЗначениеЗаполнено(Переменные.мНаборЗаписейСемейноеПоложение[0].Период) тогда
		Переменные.мНаборЗаписейСемейноеПоложение[0].Физлицо = Объект.Ссылка;
		Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Использование 	= Истина;
		Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение 		= Переменные.мНаборЗаписейСемейноеПоложение[0].Физлицо;
		Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Период.Использование 	= Истина;
		Переменные.мНаборЗаписейСемейноеПоложение.Отбор.Период.Значение 		= Переменные.мНаборЗаписейСемейноеПоложение[0].Период;
		Переменные.мНаборЗаписейСемейноеПоложение.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр пенсионное обеспечение
	Если Переменные.мНаборЗаписейПенсионноеОбеспечение.Модифицированность() И ЗначениеЗаполнено(Переменные.мНаборЗаписейПенсионноеОбеспечение[0].Период) тогда
		Переменные.мНаборЗаписейПенсионноеОбеспечение[0].Физлицо = Объект.Ссылка;
		Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Физлицо.Использование 	= Истина;
		Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Физлицо.Значение 		= Переменные.мНаборЗаписейПенсионноеОбеспечение[0].Физлицо;
		Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Период.Использование 	= Истина;
		Переменные.мНаборЗаписейПенсионноеОбеспечение.Отбор.Период.Значение 		= Переменные.мНаборЗаписейПенсионноеОбеспечение[0].Период;
		Переменные.мНаборЗаписейПенсионноеОбеспечение.Записать(Истина);
	КонецЕсли;
	
	// Запись в регистр контактной информации
	куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка, Отказ);

	// карт-счета	
	Если  СписокКартСчетаФизЛица.Модифицированность() Тогда		
		Попытка
			СписокКартСчетаФизЛица.Записать();
		Исключение
			Сообщить("Не удалось записать информацию о карт-счетах работника: " + Объект.Наименование, СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;	
	КонецЕсли;	
    // Обновление сведений о карт-счетах
	СписокКартСчетаФизЛица.Отбор.ФизЛицо.Значение = Объект.Ссылка;
	СписокКартСчетаФизЛица.Отбор.ФизЛицо.Использование = Истина;			
	СписокКартСчетаФизЛица.Прочитать();
КонецПроцедуры

//Процедура-обработчик события "ПослеЗаписи" формы
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Элементы.СписокКартСчетаФизЛица.Доступность = Истина;
		Элементы.СписокКартСчетаФизЛицаКоманднаяПанель.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры  //ПослеЗаписи

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
&НаКлиенте
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)
	ОсновныеДействияФормыДействиеПечатьНаСервере()	
КонецПроцедуры

&НаСервере
Процедура ОсновныеДействияФормыДействиеПечатьНаСервере()
	//Отказ = Ложь;
	//Если ЭтаФорма.Модифицированность() Тогда
	//	Если Вопрос("Данные физлица еще не записаны! Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
	//		//Отказ = Не ЗаписатьВФорме();
	//		Отказ = Записать();
	//	Иначе
	//		Возврат
	//	КонецЕсли;
	//КонецЕсли;
	//Если Не Отказ Тогда
	//	//Печать()
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыТруд(Кнопка)
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",Объект.Ссылка);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаВводаДанныхТруд",ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНалоги(Кнопка)
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",Объект.Ссылка);
    	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаВводаДанныхНалоги",ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПеречитать(Кнопка)
	Если ЭтаФорма.Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			Перечитать();
			//куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка);
			//Объект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура Перечитать()
	куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка);
	ЭтаФорма.Прочитать();

КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Перед переходом к дополнительным данным о физ. лице необходимо записать элемент. Записать?", РежимДиалогаВопрос.ДаНет);
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Не Отказ Тогда
			ПроцедурыУправленияПерсоналом.ЗаписатьДанныеФИОВРегистр(Объект.Ссылка, Фамилия, Имя, Отчество);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы = КнопкаВызоваДанныхФИОНажатиеНаСервере();
	ФормаРегистра = ОткрытьФорму("РегистрСведений.ФИОФизЛиц.Форма.ФормаЗаписиДополнительная",ПараметрыФормы);
КонецПроцедуры	

&НаСервере
Функция КнопкаВызоваДанныхФИОНажатиеНаСервере()
	//ФормаРегистра = РегистрыСведений.ФИОФизЛиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	Параметрыформы = Новый Структура;
	ПараметрыФормы.Вставить("ФизЛицо",Объект.Ссылка);
	//ФормаРегистра.Физлицо  = Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Период,
	|	ФизЛицо,
	|	Фамилия,
	|	Имя,
	|	Отчество,
	|	НеСклонятьФамилию
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	
	//ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка));

	Если ТаблицаРегистра.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Период",ТаблицаРегистра[0].Период);
		ПараметрыФормы.Вставить("Фамилия",ТаблицаРегистра[0].Фамилия);
		ПараметрыФормы.Вставить("Имя",ТаблицаРегистра[0].Имя);
		ПараметрыФормы.Вставить("Отчество",ТаблицаРегистра[0].Отчество);
		//ФормаРегистра.Период   = ТаблицаРегистра[0].Период;
		//ФормаРегистра.Фамилия  = ТаблицаРегистра[0].Фамилия;
		//ФормаРегистра.Имя      = ТаблицаРегистра[0].Имя;
		//ФормаРегистра.Отчество = ТаблицаРегистра[0].Отчество;
		
	Иначе
		ФИО = Объект.Наименование;
		ПараметрыФормы.Вставить("Период",Макс(НастройкаПравДоступа.ПолучитьПервуюДатуДоступногоПериода(), '19000101'));
		ПараметрыФормы.Вставить("Фамилия",ОбщегоНазначения.ВыделитьСлово(ФИО, 1));
		ПараметрыФормы.Вставить("Имя",ОбщегоНазначения.ВыделитьСлово(ФИО, 2));
		ПараметрыФормы.Вставить("Отчество",ОбщегоНазначения.ВыделитьСлово(ФИО, 3));
		
		//ФормаРегистра.Период   = Макс(НастройкаПравДоступа.ПолучитьПервуюДатуДоступногоПериода(), '19000101');
		//ФормаРегистра.Фамилия  = ОбщегоНазначения.ВыделитьСлово(ФИО, 1);
		//ФормаРегистра.Имя	   = ОбщегоНазначения.ВыделитьСлово(ФИО, 2);
		//ФормаРегистра.Отчество = ОбщегоНазначения.ВыделитьСлово(ФИО, 3);
		//
	КонецЕсли;
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура КнопкаВызоваДанныхФИООтчествоПриПрисвоенииСИКНажатие(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Перед переходом к дополнительным данным о физ. лице необходимо записать элемент. Записать?", РежимДиалогаВопрос.ДаНет);
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = КнопкаВызоваДанныхФИООтчествоПриПрисвоенииСИКНажатиеНаСервере();
	
	ФормаРегистра = ОткрытьФорму("РегистрСведений.ФИОФизЛицПриПрисвоенииСИК.Форма.ФормаЗаписиДополнительная",ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция КнопкаВызоваДанныхФИООтчествоПриПрисвоенииСИКНажатиеНаСервере()
	//ФормаРегистра = РегистрыСведений.ФИОФизЛицПриПрисвоенииСИК.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФизЛицо",Объект.Ссылка);
	//ФормаРегистра.Физлицо  = Ссылка;
	ТаблицаРегистра = РегистрыСведений.ФИОФизЛицПриПрисвоенииСИК.Получить(Новый Структура("ФизЛицо",Объект.Ссылка));
	Если ТаблицаРегистра.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Фамилия",ТаблицаРегистра.Фамилия);
		ПараметрыФормы.Вставить("Имя",ТаблицаРегистра.Имя);
		ПараметрыФормы.Вставить("Отчество",ТаблицаРегистра.Отчество);
		
		//ФормаРегистра.Фамилия  = ТаблицаРегистра.Фамилия;
		//ФормаРегистра.Имя      = ТаблицаРегистра.Имя;
		//ФормаРегистра.Отчество = ТаблицаРегистра.Отчество;
	КонецЕсли;
	Возврат ПараметрыФормы;	
КонецФункции

&НаКлиенте
Процедура МестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МестоРожденияСтрокой",Объект.МестоРождения);
	ПараметрыФормы.Вставить("ЗаголовокФормы", "Место рождения физ. лица: "+Объект.Наименование);
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВводаМестаРождения",ПараметрыФормы, Элемент,"ФизЛицо"+Объект.Код);
	//мФормаВводаМестаРождения = ПолучитьФорму("ОбщаяФорма.общ_ФормаВводаМестаРождения", ЭтаФорма, "ФизЛицо"+Объект.Код);
	//мФормаВводаМестаРождения.МестоРожденияСтрокой = Объект.МестоРождения;
	//мФормаВводаМестаРождения.ЗаголовокФормы       = "Место рождения физ. лица: "+Объект.Наименование;
	//мФормаВводаМестаРождения.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МестоРождения = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура УдостоверениеЛичностиНачалоВыбораНаСервере()
	а=23;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УдостоверениеЛичностиНачалоВыбораНаСервере();
	СтандартнаяОбработка	= Ложь;
	Отказ					= Ложь;
	//Переменные = ПолучитьИзВременногоХранилища(Параметры.Адрес);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНабораЗаписей",Параметры.Адрес);
	//ПараметрыФормы.Вставить("НаборЗаписей", Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаЗаписиВводДокументаУдостоверяющегоЛичность",ПараметрыФормы,Элемент);
	//ФормаВвода	 			= ПолучитьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаЗаписиВводДокументаУдостоверяющегоЛичность", ЭтаФорма);
	//ФормаВвода.НаборЗаписей = Переменные.мНаборЗаписейДокументаУдостоверяющегоЛичность;
	//ФормаВвода.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура КнопкаПроверкиРНННажатие(Элемент)
	Если куфиб_ОбщегоНазначения.РННСоответствуетТребованиям(Объект.РНН) Тогда
		Предупреждение("Введенный РНН корректен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПроверкиСИКНажатие(Элемент)

	Если куфиб_ОбщегоНазначения.СИКСоответствуетТребованиям(Объект.СИК) Тогда
		Предупреждение("Введенный СИК корректен!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПроверкиИИННажатие(Элемент)
	КнопкаПроверкиИИННажатиеНаСервере(Элементы.ИдентификационныйКодЛичности.ТекстРедактирования);
	Если куфиб_ОбщегоНазначения.ИИНБИНСоответствуетТребованиям(Объект.ИдентификационныйКодЛичности, Истина) Тогда
		Предупреждение("Введенный ИИН корректен!");
	КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура КнопкаПроверкиИИННажатиеНаСервере(ТекстРедактирования)
	об = РеквизитФормыВЗначение("Объект");
	об.ПроверитьДубли(Неопределено, ТекстРедактирования, Неопределено);
	ЗначениеВРеквизитФОрмы(об,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ИдентификационныйКодЛичностиПриИзменении(Элемент)
	ПроверитьИИНОформитьПолеВвода(Истина);
КонецПроцедуры

// Процедура открывает основное изображение в отдельном окне.
&НаКлиенте
Процедура ОсновноеИзображениеНажатие(Элемент)
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Вопрос = "Перед вводом основного изображения необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		УниверсальныеМеханизмы.ОткрытьФормуИзображения(ЭтаФорма, Объект.ОсновноеИзображение, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Отказ 					= Ложь;
	ФормаВвода	 			= ПолучитьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПенсионноеОбеспечениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Отказ 					= Ложь;
	ФормаВвода	 			= ПолучитьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаЗаписиПенсионноеОбеспечение", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейПенсионноеОбеспечение;
	ФормаВвода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВоинскийУчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	ФормаВвода	 			= ПолучитьФорму("Справочник.ФизическиеЛица.Форма.УправляемаяФормаЗаписиВоинскийУчет", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейВоинскийУчет;
	ФормаВвода.Открыть();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
&НаКлиенте
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	Элементы.КонтактнаяИнформацияРедактироватьКИВДиалоге.Пометка = Не Элементы.КонтактнаяИнформацияРедактироватьКИВДиалоге.Пометка;
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
//&НаКлиенте
//Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(Элементы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
//	
//КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииТипОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииВидНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	куфиб_УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Элементы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект.Ссылка));
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
&НаКлиенте
Процедура НаборКонтактнойИнформацииВидПриИзменении(Элемент)
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
	КонецЕсли; 
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
КонецПроцедуры


// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, Элементы.НаборКонтактнойИнформацииУстановитьОсновным);
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПередНачаломДобавленияОбработкаДоступностиЭлементовОбщее(Отказ, Элемент, Объект.Ссылка, Копирование, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаписьКИВРегистр(ВыбранноеЗначение);
	ОбновитьКИ();

КонецПроцедуры
&НаСервере
Процедура ОбновитьКИ()
	//КИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	//КИ.Отбор.Объект.Значение = Объект.Ссылка;
	//КИ.Отбор.Объект.Использование = Истина; 
	//КИ.Прочитать();
	//НаборКонтактнойИнформации.Загрузить(КИ.Выгрузить());
	//НаборКонтактнойИнформации.Сортировать("Тип, Вид");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьКИВРегистр(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.НовыйЭлемент Тогда
			СтрокаКИ = НаборКонтактнойИнформации.Добавить();
		Иначе
			Структура = Новый Структура;
			Структура.Вставить("Тип", ВыбранноеЗначение.СтарыйТип);
			Структура.Вставить("Вид", ВыбранноеЗначение.СтарыйВид);
			Структура.Вставить("Представление", ВыбранноеЗначение.СтарыйПредставление);
			МассивКИ = НаборКонтактнойИнформации.НайтиСтроки(Структура);
			Если МассивКИ<>Неопределено Тогда
				СтрокаКИ=МассивКИ.Получить(0);
			Иначе
				Сообщение = новый СообщениеПользователю;
				Сообщение.Текст = "Строка редактирования не обнаружена";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
		СтрокаКИ.Тип = ВыбранноеЗначение.Тип;
		СтрокаКИ.Вид = ВыбранноеЗначение.Вид;
		СтрокаКИ.Объект = ВыбранноеЗначение.Объект;
		СтрокаКИ.Комментарий = ВыбранноеЗначение.Комментарий;
		СтрокаКИ.Представление = ВыбранноеЗначение.Представление;
		СтрокаКИ.Поле1 = ВыбранноеЗначение.Поле1;
		СтрокаКИ.Поле2 = ВыбранноеЗначение.Поле2;
		СтрокаКИ.Поле3 = ВыбранноеЗначение.Поле3;
		СтрокаКИ.Поле4 = ВыбранноеЗначение.Поле4;
		СтрокаКИ.Поле5 = ВыбранноеЗначение.Поле5;
		СтрокаКИ.Поле6 = ВыбранноеЗначение.Поле6;
		СтрокаКИ.Поле7 = ВыбранноеЗначение.Поле7;
		СтрокаКИ.Поле8 = ВыбранноеЗначение.Поле8;
		СтрокаКИ.Поле9 = ВыбранноеЗначение.Поле9;
		СтрокаКИ.Поле10 = ВыбранноеЗначение.Поле10;

		//Запись = регистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		//Запись.Тип = ВыбранноеЗначение.Тип;
		//Запись.Вид = ВыбранноеЗначение.Вид;
		//Запись.Объект = ВыбранноеЗначение.Объект;
		//Запись.Комментарий = ВыбранноеЗначение.Комментарий;
		//Запись.Представление = ВыбранноеЗначение.Представление;
		//Запись.Поле1 = ВыбранноеЗначение.Поле1;
		//Запись.Поле2 = ВыбранноеЗначение.Поле2;
		//Запись.Поле3 = ВыбранноеЗначение.Поле3;
		//Запись.Поле4 = ВыбранноеЗначение.Поле4;
		//Запись.Поле5 = ВыбранноеЗначение.Поле5;
		//Запись.Поле6 = ВыбранноеЗначение.Поле6;
		//Запись.Поле7 = ВыбранноеЗначение.Поле7;
		//Запись.Поле8 = ВыбранноеЗначение.Поле8;
		//Запись.Поле9 = ВыбранноеЗначение.Поле9;
		//Запись.Поле10 = ВыбранноеЗначение.Поле10;
		//Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
&НаКлиенте
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Объект.Ссылка,Элемент, Элементы.КнопкаРедактироватьКИВДиалоге.Пометка, ложь,,Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ 

&НаКлиенте
Процедура ОбразованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элемент.ТекущиеДанные.Специальность = Неопределено Тогда
	    Элемент.ТекущиеДанные.Специальность = ПредопределенноеЗначение("Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПередНачаломДобавления табличного поля СписокКартСчетаФизЛица.
//
&НаКлиенте
Процедура СписокКартСчетаФизЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Если НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	ОТказ = Истина;
	НоваяСтрока = СписокКартСчетаФизЛица.Добавить();
	НоваяСтрока.Период = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура СписокКартСчетаФизЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)	
	Если НоваяСтрока Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Сообщить("Перед редактированием ведений о карт-счетах необходимо записать сведения о сотруднике.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;	
		Элемент.ТекущиеДанные.ФизЛицо = Объект.Ссылка;	
	КонецЕсли; 
КонецПроцедуры // СписокКартСчетаФизЛицаПриНачалеРедактирования


&НаКлиенте
Процедура СписокКартСчетаФизЛицаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
		
	СоответствиеГраницЗапрета = ПараметрыСеансаГраницыЗапретаИзмененияДанныхПолучить();

	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаПериода = СоответствиеГраницЗапрета[ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")];
	Если ГраницаПериода <> Неопределено Тогда
		Если ТекущиеДанные.Период <= ГраницаПериода Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Предупреждение("Редактирование данных этого периода запрещено. Данные не могут быть удалены.");
	КонецЕсли;
	
КонецПроцедуры

&наСервере
Функция ПараметрыСеансаГраницыЗапретаИзмененияДанныхПолучить()
	Возврат ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
КонецФункции

&НаКлиенте
Процедура СписокКартСчетаФизЛицаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СоответствиеГраницЗапрета = ПараметрыСеансаГраницыЗапретаИзмененияДанныхПолучить();

	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаПериода = СоответствиеГраницЗапрета[ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")];
	Если ГраницаПериода <> Неопределено Тогда
		Если ТекущиеДанные.Период <= ГраницаПериода Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Предупреждение("Редактирование данных этого периода запрещено. Данные не могут быть изменены.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокКартСчетаФизЛицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;

	СоответствиеГраницЗапрета = ПараметрыСеансаГраницыЗапретаИзмененияДанныхПолучить();

	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаПериода = СоответствиеГраницЗапрета[ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")];
	Если ГраницаПериода <> Неопределено Тогда
		Если ТекущиеДанные.Период <= ГраницаПериода Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Предупреждение("Редактирование данных этого периода запрещено. Данные не могут быть записаны.");
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления табличного поля Заметки.
//
&НаКлиенте
Процедура ЗаметкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		Ответ = Вопрос("Перед добавлением заметок необходимо записать информацию о физическом лице. Записать?", РежимДиалогаВопрос.ДаНет);
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			//Отказ = Не ЗаписатьВФорме();
			Отказ = Не Записать();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Не Отказ Тогда
			ПроцедурыУправленияПерсоналом.ЗаписатьДанныеФИОВРегистр(Объект.Ссылка, Фамилия, Имя, Отчество);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Заметки.Отбор.Объект.Значение = Объект.Ссылка;
	Заметки.Отбор.Объект.Использование = Истина;
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автор",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	ПараметрыФормы.Вставить("Объект",Объект.Ссылка);
	ПараметрыФормы.Вставить("Дата",ТекущаяДата());
	Если Копирование Тогда
		ОбъектКопирования = Элемент.ТекущиеДанные;
		ПараметрыФормы.Вставить("ВидЗаметки",ОбъектКопирования.ВидЗаметки);
		ПараметрыФормы.Вставить("Содержание",ОбъектКопирования.Содержание);
	КонецЕсли; 

	//Форма = РегистрыСведений.Заметки.ПолучитьФормуРедактированияЗаписи();
	//Форма.Автор  = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	//Форма.Объект = Объект.Ссылка;
	//Форма.Дата   = ТекущаяДата();
	//Если Копирование Тогда
	//	ОбъектКопирования = Элемент.ТекущиеДанные;
	//	Форма.ВидЗаметки = ОбъектКопирования.ВидЗаметки;
	//	Форма.Содержание = ОбъектКопирования.Содержание;
	//КонецЕсли; 
    //Форма.Открыть();
	Форма = ОткрытьФорму("РегистрСведений.Заметки.ФормаЗаписи",параметрыФормы,)
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельКартСчетовИзменитьАктивностьСчета(Кнопка)
	ТекущиеДанные = Элементы.СписокКартСчетаФизЛица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	СоответствиеГраницЗапрета = ПараметрыСеансаГраницыЗапретаИзмененияДанныхПолучить();
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		ТекущиеДанные.АктивностьСчета = НЕ ТекущиеДанные.АктивностьСчета;
		Модифицированность = Истина;
        Возврат;
	КонецЕсли;
	ПериодЗакрыт = Ложь;
	ГраницаПериода = СоответствиеГраницЗапрета[ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")];
	Если ГраницаПериода <> Неопределено Тогда
		Если ТекущиеДанные.Период <= ГраницаПериода Тогда
			ПериодЗакрыт = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПериодЗакрыт Тогда
		Предупреждение("Редактирование данных этого периода запрещено. Данные не могут быть изменены.");
		Возврат;
	КонецЕсли;
	ТекущиеДанные.АктивностьСчета = НЕ ТекущиеДанные.АктивностьСчета;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

//Возвращает строковое представление места рождения
//
&наСервере
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"Населенный пункт: " + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", район:  " + СокрЛП(СтруктураМестоРождения.Район))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", область: "	+	СокрЛП(СтруктураМестоРождения.Область))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", страна: "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Если Лев(Представление, 1) = ","  Тогда
		Представление = Сред(Представление, 2)
	КонецЕсли;

	Возврат Представление;
	
КонецФункции // ПредставлениеМестаРождения()

// Возвращает строковое представление места рождения без описания административных единиц
//
&наСервере
Функция ПредставлениеМестаРожденияКраткое(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт), "", СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
	+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Если Лев(Представление, 1) = ","  Тогда
		Представление = Сред(Представление, 2)
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПредставлениеМестаРожденияКраткое()

//Функция раскладывает строку с данными о месте рождения на элементы структуры
//
&наСервере
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	НаселенныйПункт		= "";
	Район				= "";
	Область				= "";
	Страна				= "";
	МассивМестоРождения	= ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	ЭлементовВМассиве	= МассивМестоРождения.Количество();   
	
	Если ЭлементовВМассиве	>	0	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[0]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	1	тогда
		Район	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	2	тогда
		Область	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	
	Если ЭлементовВМассиве	>	3	тогда
		Страна	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	
	Возврат СтруктураВозврата;
	
КонецФункции // РазложитьМестоРождения()
