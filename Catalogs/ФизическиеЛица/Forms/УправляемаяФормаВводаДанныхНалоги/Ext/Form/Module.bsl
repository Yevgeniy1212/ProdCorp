////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
&НаКлиенте
Перем мДанныеМодифицированы;
&НаКлиенте
Перем мТекущийГод;
&НаКлиенте
Перем мТекущийНалогоплательщик;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	оф_НалоговыеВычетыЗаголовок = "Право на налоговые вычеты";
	оф_ПрименениеВычетовЗаголовок = "Применение вычетов";
	оф_СведенияДляИсчисленияИПНЗаголовок = "Сведения для исчисления ИПН";
	оф_СведенияДляИсчисленияСН = "Сведения для исчисления СН";
	
	//ОтборНалоговыеВычеты = НалоговыеВычеты.Отбор.Физлицо;
	//ОтборНалоговыеВычеты.Значение      = Объект.Ссылка;
	//ОтборНалоговыеВычеты.Использование = Истина;
	//
	//ОтборПрименениеВычетов = ПрименениеВычетов.Отбор.Физлицо;
	//ОтборПрименениеВычетов.Значение      = Объект.Ссылка;
	//ОтборПрименениеВычетов.Использование = Истина;

	Год = Год(ОбщегоНазначения.ПолучитьРабочуюДату());
	мТекущийГод = Год;
	//Год = Год;
	
	// найдем организацию, в которую принят в последний раз 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата(Год, 12, 31));
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.Период
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период <= &ДатаАктуальности 
	|	И РаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо 
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДоговорникиОрганизации.Организация,
	|	ДоговорникиОрганизации.ДатаНачала КАК Период
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизации
	|ГДЕ
	|	ДоговорникиОрганизации.ДатаНачала <= &ДатаАктуальности
	|	И ДоговорникиОрганизации.ФизЛицо = &ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик КАК Организация,
	|	ДАТАВРЕМЯ(2999, 12, 31) КАК Период // налогоплательщика, по которому уже ввели какие-то сведения учитываем в первую очередь
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = &ФизЛицо
	|	И ГОД(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода) = ГОД(&ДатаАктуальности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// если не найден среди работников или предыдущих сведений, то берем первого налогоплательщика по списку
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) КАК Организация,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
	|ИЗ
	|  	Справочник.Организации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И ИсчислениеНалогов.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты)
	|ГДЕ
	|	НЕ (Организации.Наименование ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО 
	|	Период УБЫВ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Налогоплательщик = Выборка.Организация;
		мТекущийНалогоплательщик = Налогоплательщик;
	КонецЕсли;
	
	// сформируем списки доступных налогоплательщиков
	СписокНалогоплательщиков = ПроцедурыНалоговогоУчета.СформироватьСписокНалогоплательщиков(Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Если (СписокНалогоплательщиков.НайтиПоЗначению(Налогоплательщик) = Неопределено 
				Или НЕ ЗначениеЗаполнено(Налогоплательщик))
			И СписокНалогоплательщиков.Количество() > 0 Тогда
		Налогоплательщик = СписокНалогоплательщиков[0].Значение;
		мТекущийНалогоплательщик = Налогоплательщик;
	КонецЕсли;
	//Элементы.Налогоплательщик.СписокВыбора.ЗагрузитьЗначения(СписокНалогоплательщиков.ВыгрузитьЗначения());
	//Элементы.ПрименениеВычетов.ПодчиненныеЭлементы.ПрименениеВычетовНалогоплательщик.СписокВыбора.ЗагрузитьЗначения(СписокНалогоплательщиков.ВыгрузитьЗначения());
	
	ТаблицаСведенийРаботника = СформироватьПредыдущиеДанные().Выгрузить();
	ПустаяТаблицаСведений	 = СформироватьПустуюТаблицуСведений();
	//Элементы.СведенияПредыдущиеИПН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенийРаботника, "ИПН");
	//Элементы.СведенияПредыдущиеСН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенийРаботника, "СН");
	
	УстановитьВидимость();

	// запретим пользователю манипулировать видимостью колонок
	МассивТаблПолей = Новый Массив();
	МассивТаблПолей.Добавить(Элементы.СведенияПредыдущиеИПН);
	МассивТаблПолей.Добавить(Элементы.СведенияПредыдущиеСН);
	
	//Для Каждого ТаблПоле Из МассивТаблПолей Цикл
	//	Для Каждого КолонкаТаблПоля Из ТаблПоле.Колонки Цикл
	//		КолонкаТаблПоля.ИзменятьВидимость = Ложь;
	//	КонецЦикла;
	//КонецЦикла;

	// для прочих вычетов установим отбор только по текущему физлицу
	//ИПНЗаявлениеНаПредоставлениеВычета.Отбор.ФизЛицо.Использование 	= Истина;
	//ИПНЗаявлениеНаПредоставлениеВычета.Отбор.ФизЛицо.ВидСравнения 	= ВидСравнения.Равно;
	//ИПНЗаявлениеНаПредоставлениеВычета.Отбор.ФизЛицо.Значение		= Объект.Ссылка;
	ИПНЗаявлениеНаПредоставлениеВычета.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Объект.Ссылка);
	НалоговыеВычеты.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Объект.Ссылка);
	ПрименениеВычетов.Параметры.УстановитьЗначениеПараметра("ФизЛицо", Объект.Ссылка);
	
КонецПроцедуры


// Функция собирает данные с предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса по регистру СведенияПредыдущегоМестаРаботыФизЛиц.
//
&НаСервере
Функция СформироватьПредыдущиеДанные()
	ЗапросПредыдущиеДанные = Новый Запрос;
	ЗапросПредыдущиеДанные.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
	ЗапросПредыдущиеДанные.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	ЗапросПредыдущиеДанные.УстановитьПараметр("Год", Год);
	НачалоГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
	ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаНачало", НачалоГода);
	ОкончаниеГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "1231");
	ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаОкончание", ОкончаниеГода);
	ЗапросПредыдущиеДанные.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода,
	|	СведенияПредыдущегоМестаРаботы.Доход КАК Доход,
	|	СведенияПредыдущегоМестаРаботы.ДоходНеОблагаемыйИПН КАК ДоходНеОблагаемыйИПН,
	|	СведенияПредыдущегоМестаРаботы.ДоходОблагаемыйСН КАК ДоходОблагаемыйСН,
	|	СведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота КАК ПримененнаяЛьгота,
	|	СведенияПредыдущегоМестаРаботы.ПримененныйВычет КАК ПримененныйВычет,
	|	СведенияПредыдущегоМестаРаботы.ОПВ КАК ОПВ,
	|	СведенияПредыдущегоМестаРаботы.ИПН КАК ИПН,
	|	СведенияПредыдущегоМестаРаботы.СН КАК СН,
	|	СведенияПредыдущегоМестаРаботы.СО КАК СО
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
	|
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботы.ФизЛицо = &ФизЛицо И
	|	СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &МесяцНалоговогоПериодаНачало И &МесяцНалоговогоПериодаОкончание И
	|	СведенияПредыдущегоМестаРаботы.Налогоплательщик = &Налогоплательщик";
	
	Возврат ЗапросПредыдущиеДанные.Выполнить();
	
КонецФункции // СформироватьПредыдущиеДанные()

// Функция формирует таблицу значений для записи сведений с предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//     ТаблицаЗначений – таблица для записи сведений.
//
&НаСервере
Функция СформироватьПустуюТаблицуСведений()

	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("МесяцНалоговогоПериода");
	ТаблицаСведений.Колонки.Добавить("Доход");
	ТаблицаСведений.Колонки.Добавить("ДоходНеОблагаемыйИПН");
	ТаблицаСведений.Колонки.Добавить("ДоходОблагаемыйСН");
	ТаблицаСведений.Колонки.Добавить("ПримененнаяЛьгота");
	ТаблицаСведений.Колонки.Добавить("ПримененныйВычет");
	ТаблицаСведений.Колонки.Добавить("ОПВ");
	ТаблицаСведений.Колонки.Добавить("ИПН");
	ТаблицаСведений.Колонки.Добавить("СН");
	ТаблицаСведений.Колонки.Добавить("СО");
	
	ЗаписываемаяДата = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
	Для Сч = 1 По 12 Цикл
		
	   НоваяСтрока = ТаблицаСведений.Добавить();
	   НоваяСтрока.МесяцНалоговогоПериода = ЗаписываемаяДата;
	   НоваяСтрока.Доход				  = 0;
	   НоваяСтрока.ДоходНеОблагаемыйИПН	  = 0;
	   НоваяСтрока.ДоходОблагаемыйСН	  = 0;
	   НоваяСтрока.ПримененнаяЛьгота	  = 0;
	   НоваяСтрока.ПримененныйВычет		  = 0;
	   НоваяСтрока.ОПВ					  = 0;
	   НоваяСтрока.ИПН					  = 0;
	   НоваяСтрока.СН					  = 0;
	   НоваяСтрока.СО					  = 0;
	   ЗаписываемаяДата = ДобавитьМесяц(ЗаписываемаяДата,1)
	   
	КонецЦикла; 
	
	Возврат ТаблицаСведений
	
КонецФункции // СформироватьПустуюТаблицуСведений()

// Функция записывает сведения физ лица с предыдущего места работы в подготовленную
// таблицу значений. 
//
// Параметры
//  ПустаяТаблица    – ТаблицаЗначений – таблица из 12 строк, по месяцам
//  ТаблицаСведений  – ТаблицаЗначений – таблица сведений с предыдущего места физ лица.
//  ВидНалога		 - Строка - строка вида налога
//
// Возвращаемое значение:
//   ТаблицаЗначений   – готовая таблица, со сведениями с предыдущего места работы.
//
&НаСервере
Функция ДополнитьТаблицуСведений(ПустаяТаблица, ТаблицаСведений, ВидНалога)
	
	Для Каждого СтрокаТЗ Из ТаблицаСведений Цикл 
		
		НайденнаяСтрока = ПустаяТаблица.Найти(СтрокаТЗ.МесяцНалоговогоПериода);
		Если ВидНалога = "ИПН" Тогда
			НайденнаяСтрока.Доход				 = СтрокаТЗ.Доход;
			НайденнаяСтрока.ДоходНеОблагаемыйИПН = СтрокаТЗ.ДоходНеОблагаемыйИПН;
			НайденнаяСтрока.ПримененнаяЛьгота	 = СтрокаТЗ.ПримененнаяЛьгота;
			НайденнаяСтрока.ПримененныйВычет	 = СтрокаТЗ.ПримененныйВычет;
			НайденнаяСтрока.ОПВ					 = СтрокаТЗ.ОПВ;
			НайденнаяСтрока.ИПН					 = СтрокаТЗ.ИПН;
		ИначеЕсли ВидНалога = "СН" Тогда
			НайденнаяСтрока.Доход				 = СтрокаТЗ.Доход;
			НайденнаяСтрока.ОПВ					 = СтрокаТЗ.ОПВ;
			НайденнаяСтрока.ДоходОблагаемыйСН	 = СтрокаТЗ.ДоходОблагаемыйСН;
			НайденнаяСтрока.СН					 = СтрокаТЗ.СН;
			НайденнаяСтрока.СО					 = СтрокаТЗ.СО;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ПустаяТаблица;
	
КонецФункции // ДополнитьТаблицуСведений()

&НаКлиенте
Процедура ЗаписатьВРегистр(Отказ)
	Если НЕ ЗначениеЗаполнено(мТекущийНалогоплательщик) Тогда
		Отказ = Истина;
		Предупреждение("Не указан налогоплательщик, которому предоставлены сведения с предыдущего места работы!");
		Возврат;
	КонецЕсли;
	ЗаписатьВРегистрНаСервере(мТекущийНалогоплательщик);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВРегистрНаСервере(мТекущийНалогоплательщик)
	НаборЗаписей = РегистрыСведений.СведенияПредыдущегоМестаРаботыФизЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизЛицо.Значение			 = Объект.Ссылка;
	НаборЗаписей.Отбор.ФизЛицо.Использование	 = Истина;
	НаборЗаписей.Отбор.Налогоплательщик.Значение 		= мТекущийНалогоплательщик;
	НаборЗаписей.Отбор.Налогоплательщик.Использование 	= Истина;
	НаборЗаписей.Прочитать();
	ГодСведений = Год(СведенияПредыдущиеИПН[0].МесяцНалоговогоПериода);
	ЗаписейВНаборе = НаборЗаписей.Количество();
	Для Сч = 1 По ЗаписейВНаборе Цикл
		Если Год(НаборЗаписей[ЗаписейВНаборе - Сч].МесяцНалоговогоПериода) = ГодСведений Тогда
			НаборЗаписей.Удалить(ЗаписейВНаборе - Сч)
		КонецЕсли;	
	КонецЦикла; 
	ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("МесяцНалоговогоПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаСведений.Колонки.Добавить("Доход", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ДоходНеОблагаемыйИПН", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ДоходОблагаемыйСН", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ПримененнаяЛьгота", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ПримененныйВычет", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ОПВ", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("ИПН", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("СН", ОписаниеТиповЧисло);
	ТаблицаСведений.Колонки.Добавить("СО", ОписаниеТиповЧисло);
	
	Для Каждого СтрокаТЗ Из СведенияПредыдущиеИПН Цикл
		
		НоваяСтрока = ТаблицаСведений.Добавить();
		Для Каждого Колонка Из Элементы.СведенияПредыдущиеИПН.Колонки Цикл
			Если Колонка.Видимость Тогда
				ИмяКолонки = Колонка.Имя;
				НоваяСтрока[ИмяКолонки] = СтрокаТЗ[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из СведенияПредыдущиеСН Цикл
		
		НайденнаяСтрока = ТаблицаСведений.Найти(СтрокаТЗ.МесяцНалоговогоПериода);
		Для Каждого Колонка Из Элементы.СведенияПредыдущиеСН.Колонки Цикл
			Если Колонка.Видимость Тогда
				ИмяКолонки = Колонка.Имя;
				НайденнаяСтрока[ИмяКолонки] = СтрокаТЗ[ИмяКолонки];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаСведений Цикл
		
		БылиДвижения = СтрокаТЗ.Доход + СтрокаТЗ.ДоходНеОблагаемыйИПН + СтрокаТЗ.ДоходОблагаемыйСН + СтрокаТЗ.ПримененнаяЛьгота + 
						СтрокаТЗ.ОПВ + СтрокаТЗ.ИПН + СтрокаТЗ.СН + СтрокаТЗ.СО;
		
		Если БылиДвижения <> 0 Тогда
			НоваяСтрокаРегиста = НаборЗаписей.Добавить();
			НоваяСтрокаРегиста.МесяцНалоговогоПериода = СтрокаТЗ.МесяцНалоговогоПериода;
			НоваяСтрокаРегиста.ФизЛицо				  = Объект.Ссылка;
			НоваяСтрокаРегиста.Налогоплательщик		  = мТекущийНалогоплательщик;
			НоваяСтрокаРегиста.Доход                  = СтрокаТЗ.Доход;
			НоваяСтрокаРегиста.ДоходНеОблагаемыйИПН   = СтрокаТЗ.ДоходНеОблагаемыйИПН;
			НоваяСтрокаРегиста.ДоходОблагаемыйСН  	  = СтрокаТЗ.ДоходОблагаемыйСН;
			НоваяСтрокаРегиста.ПримененнаяЛьгота      = СтрокаТЗ.ПримененнаяЛьгота;
			НоваяСтрокаРегиста.ПримененныйВычет       = СтрокаТЗ.ПримененныйВычет;
			НоваяСтрокаРегиста.ОПВ                    = СтрокаТЗ.ОПВ;
			НоваяСтрокаРегиста.ИПН                    = СтрокаТЗ.ИПН;
			НоваяСтрокаРегиста.СН                     = СтрокаТЗ.СН;
			НоваяСтрокаРегиста.СО                     = СтрокаТЗ.СО;
		КонецЕсли;
			
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Не удалось записать изменения по причине: " + ОписаниеОшибки());
	КонецПопытки;
		
	мДанныеМодифицированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьВТекущейФорме(Отказ)
	Если мДанныеМодифицированы Тогда
		Ответ = Вопрос("Данные были изменены, сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьВРегистр(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает видимость элементов управления на форме в зависимости от года отображения
//
&НаСервере
Процедура УстановитьВидимость()
	// с 2007 года для расчета ИПН не требуются данные с предыдущего места работы
	//ИПНПредыдущегоМестаРаботыВидим = Год < 2007;
	//Колонки = Элементы.СведенияПредыдущиеИПН.Колонки;
	//Колонки.Доход.Видимость				 	= ИПНПредыдущегоМестаРаботыВидим;
	//Колонки.ДоходНеОблагаемыйИПН.Видимость 	= ИПНПредыдущегоМестаРаботыВидим;
	//Колонки.ПримененнаяЛьгота.ТекстШапки 	= ?(ИПНПредыдущегоМестаРаботыВидим, "в т.ч. льгота", "Примененная льгота");
	//Колонки.ПримененныйВычет.Видимость 		= ИПНПредыдущегоМестаРаботыВидим;
	//Колонки.ОПВ.Видимость 					= ИПНПредыдущегоМестаРаботыВидим;
	//Колонки.ИПН.Видимость 					= ИПНПредыдущегоМестаРаботыВидим;
	//Если Год >= 2009 Тогда
	//	// с 2009 года данные с предыдущего места работы для расчета СН не требуются
	//	Элементы.ПанельСоциальныйНалог.Свертка = РежимСверткиЭлементаУправления.Низ;
	//Иначе
	//	// для расчета социального налога данные о доходе и ОПВ с предыдущего места работы требуются
	//	Элементы.ПанельСоциальныйНалог.Свертка = РежимСверткиЭлементаУправления.Нет;
	//	Колонки = Элементы.СведенияПредыдущиеСН.Колонки;
	//	
	//	Колонки.Доход.Видимость					= Год >= 2007;
	//	Колонки.ОПВ.Видимость					= Год >= 2007;
	//КонецЕсли;
КонецПроцедуры // УстановитьВидимость

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаписатьВРегистр(Отказ);
	Оповестить("ОбновитьДанныеОФизлице");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ПроверитьМодифицированностьВТекущейФорме(Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ 

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	Отказ = Ложь;
	ПроверитьМодифицированностьВТекущейФорме(Отказ);
	Если Отказ Тогда
		Год = мТекущийГод;
		Возврат;
	КонецЕсли;
	ТаблицаСведенияРаботника = СформироватьПредыдущиеДанные().Выгрузить();
	ПустаяТаблицаСведений	 = СформироватьПустуюТаблицуСведений();
	СведенияПредыдущиеИПН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенияРаботника, "ИПН");
	СведенияПредыдущиеСН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенияРаботника, "СН");
	мДанныеМодифицированы 	 = Ложь;
	мТекущийГод				 = Год;
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Налогоплательщик"
//
&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	Если Элемент.СписокВыбора.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
		// выбрали организацию, которая не является налогоплательщиком
		Налогоплательщик = мТекущийНалогоплательщик;
		Возврат;
	КонецЕсли;
	Отказ = Ложь;	
	ПроверитьМодифицированностьВТекущейФорме(Отказ);
	Если Отказ Тогда
		Налогоплательщик = мТекущийНалогоплательщик;
		Возврат;
	КонецЕсли;
	ТаблицаСведенияРаботника = СформироватьПредыдущиеДанные().Выгрузить();
	ПустаяТаблицаСведений	 = СформироватьПустуюТаблицуСведений();
	СведенияПредыдущиеИПН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенияРаботника, "ИПН");
	СведенияПредыдущиеСН	 = ДополнитьТаблицуСведений(ПустаяТаблицаСведений, ТаблицаСведенияРаботника, "СН");
	мДанныеМодифицированы 	 = Ложь;
	мТекущийНалогоплательщик = Налогоплательщик;
КонецПроцедуры // НалогоплательщикПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Налогоплательщик"
//
&НаКлиенте
Процедура НалогоплательщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // НалогоплательщикНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПрименениеВычетов



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СведенияПредыдущиеИПН

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ 
//
&НаКлиенте
Процедура СведенияПредыдущиеИПНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		мДанныеМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры // СведенияПредыдущиеИПНПриОкончанииРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СведенияПредыдущиеСН

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
//
&НаКлиенте
Процедура СведенияПредыдущиеСНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		мДанныеМодифицированы = Истина;
	КонецЕсли;
КонецПроцедуры // СведенияПредыдущиеСНПриОкончанииРедактирования()


мДанныеМодифицированы = Ложь;
