////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;

Перем ПрошлыйИзмененныйРодительОбъектаДоступа;

// Отражает наличие регистра "Пройденные учебные курсы сотрудниками организаций"
Перем мПройденныеУчебныеКурсыРаботникамиОрганизаций;

Процедура ПроверитьДубли(ЗаписьПаспортныхДанных, ИИН, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных 	= Ложь;
	ЕстьДублиИИН 				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И
		 (ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи)) ТОГДА
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ПаспортныеДанныеФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц1
		               |		ПО (ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид) И (ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия) И (ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер) И (ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи)
		               |
		               |ГДЕ
		               |	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 					Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид", 				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",	 			ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер", 				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи", 		ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
				РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такие же паспортные данные как и у "+Строка(Ссылка));
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИИН) тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ФизическиеЛица.Ссылка КАК Физлицо
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица1
		               |		ПО (ФизическиеЛица.ИдентификационныйКодЛичности = &ИИН)
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИИН", 	ИИН);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же ИИН как и у "+Строка(Ссылка));
			ЕстьДублиИИН = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИИН И
		 НЕ ЕстьДублиПаспортныхДанных  тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ФИОФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц1
		               |		ПО (ФИОФизЛиц.Фамилия+ФИОФизЛиц.Имя+ФИОФизЛиц.Отчество = &ФИО)
		               |
		               |ГДЕ
		               |	ФИОФизЛиц.ФизЛицо <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО", 	СтрЗаменить(ФИО, " ", ""));
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо с таким ФИО (" + ВыборкаЗапроса.Физлицо +") уже есть в справочнике");
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура выводит на экран печатную форму 
	//
	// Параметры: 
	//  Нет
	//
	// Возвращаемое значение:
	//  Нет.
	//
Процедура Печать(ТабДокумент = Неопределено) Экспорт

	СтруктураДанных = Новый Структура; 
	СтруктураДанныхОрганизации = Новый Структура; 
		
	//Если ТабДокумент = Неопределено Тогда
		Подробно = Истина;
    //Иначе
    //	Подробно = Ложь
    //КонецЕсли;
		
	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ФизЛицо" ,	Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(РабочаяДата));
	Запрос.УстановитьПараметр("Изображение" ,Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение);
	Запрос.УстановитьПараметр("ПустаяСтрока" ,"");
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("Командировка" ,Перечисления.ПричиныОтсутствияНаРаботе.Командировка);
	Запрос.УстановитьПараметр("Болезнь" ,Перечисления.ПричиныОтсутствияНаРаботе.Заболевание);
	Запрос.УстановитьПараметр("Проведен" ,Истина);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Если Подробно Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения,
		|	ФизическиеЛица.МестоРождения,
		|	ФизическиеЛица.РНН,
		|	ФизическиеЛица.Код,
		|	ФизическиеЛица.СИК,
		|	ФизическиеЛица.ИдентификационныйКодЛичности,
		|	ФизическиеЛица.Пол,
		|	ФизическиеЛица.ОсновноеИзображение.Хранилище КАК Данные,
		|	ФизическиеЛица.ОсновноеИзображение.Наименование КАК ОписаниеИзображения,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизЛицо";
		
		Результат = Запрос.Выполнить(); 
		ВыборкаДляПроверок = Результат.Выбрать();
		ВыборкаДляПроверок.Следующий();
		СтруктураДанных.Вставить("ФизическиеЛица", Результат.Выбрать());
		Если ВыборкаДляПроверок.ДокументВид <> Null Тогда
			СтруктураДанных.Вставить("ПаспортныеДанныеФизЛиц", Результат.Выбрать());
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	ВЫБОР КОГДА КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации ТОГДА
		|		КонтактнаяИнформация.Вид.Представление
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(КонтактнаяИнформация.Вид КАК СТРОКА(1000))
		|	КОНЕЦ КАК ВидКИ,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК ПредставлениеКИ
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &ФизЛицо
		|УПОРЯДОЧИТЬ ПО
		|	Тип
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		СтруктураДанных.Вставить("КонтактнаяИнформация", Запрос.Выполнить().Выбрать());
		
		// разделы информации о физлице из табличных частей справочника
		Для Каждого ТЧ Из Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти Цикл
			ИмяРегистра = "ФизическиеЛица_" + СтрЗаменить(ТЧ.Имя,"_","");
			ТекстПолей = "";
			Для каждого Реквизит Из ТЧ.Реквизиты Цикл
				ЕстьПолеПредставление = Ложь;
				// Определим принадлежность к ссылочным типам (т.е. возможность использования поля Представление)
				Для Каждого ЭлементТипа Из Реквизит.Тип.Типы() Цикл
					// Нет у примитивных
					Если ЭлементТипа = Тип("Число")
						ИЛИ ЭлементТипа = Тип("Строка")
						ИЛИ ЭлементТипа = Тип("Дата")
						ИЛИ ЭлементТипа = Тип("Булево") Тогда
						
						ЕстьПолеПредставление = Ложь;
						Прервать;
					Иначе
						
						// Нет у перечисления
						ПустоеЗначениеТипа = Новый(ЭлементТипа);
						
						Если Метаданные.Перечисления.Найти(ПустоеЗначениеТипа.Метаданные().Имя) <> Неопределено Тогда
							ЕстьПолеПредставление = Ложь;
							Прервать;
						Иначе
							ЕстьПолеПредставление = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТекстПолей = ТекстПолей + "," + Символы.ПС + Символы.Таб + ИмяРегистра + "." + Реквизит.Имя + ?(ЕстьПолеПредставление,".Представление","") + " КАК " + Реквизит.Имя
			КонецЦикла;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(ТекстПолей,2) 
			+ ?(ТЧ.Имя = "СоставСемьи",",
			|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение.Представление КАК СемейноеПоложение" , "") + Символы.ПС
			+ "ИЗ" + Символы.ПС + Символы.Таб + "Справочник." + СтрЗаменить(ИмяРегистра,"_",".") + " КАК " + ИмяРегистра 
			+ ?(ТЧ.Имя = "СоставСемьи","
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СемейноеПоложениеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СемейноеПоложениеФизЛицСрезПоследних
			|		ПО "+ ИмяРегистра +".Ссылка = СемейноеПоложениеФизЛицСрезПоследних.ФизЛицо","") + Символы.ПС 
			+ "ГДЕ" + Символы.ПС + Символы.Таб + ИмяРегистра + ".Ссылка = &ФизЛицо";
			
			СтруктураДанных.Вставить(ИмяРегистра, Запрос.Выполнить().Выбрать());
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Значение,
		|	ЗначенияСвойствОбъектов.Свойство
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &ФизЛицо";
		
		СтруктураДанных.Вставить("ДополнительныеДанные", Запрос.Выполнить().Выбрать());
    КонецЕсли;
	Если ПроцедурыУправленияПерсоналом.ДоступнаРольМенеджераПоНабору() Тогда
		
		ФизическиеЛицаПереопределяемый.ПолучитьДанныеПоПодборуКадров(Запрос, СтруктураДанных);
		
	КонецЕсли;

	Если ПроцедурыУправленияПерсоналом.ДоступнаРольКадровикаУпр() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиСрезПоследних.ЗанимаемыхСтавок,
		|	РаботникиСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиСрезПоследних.Подразделение.Представление КАК Подразделение,
		|	ВЫБОР
		|		КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = &Уволен
		|			ТОГДА ""Не работает (уволен)""
		|		ИНАЧЕ ""Работает""
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.Работники.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК РаботникиСрезПоследних";
		
		Запрос.УстановитьПараметр("Уволен",Перечисления.ПричиныИзмененияСостояния.Увольнение);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.Состояние <> Null Тогда
			СтруктураДанных.Вставить("Работники", РезультатЗапроса.Выбрать());
		КонецЕсли;
			
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПриемНаРаботуРаботники.Ссылка КАК Документ,
			|	ПриемНаРаботуРаботники.Ссылка.Представление,
			|	ПриемНаРаботуРаботники.Ссылка.Дата КАК Дата,
			|	ПриемНаРаботуРаботники.ДатаПриема КАК ДатаС,
			|	ПриемНаРаботуРаботники.ДатаУвольнения КАК ДатаПо,
			|	ПриемНаРаботуРаботники.Подразделение КАК Подразделение,
			|	ПриемНаРаботуРаботники.Должность,
			|	ПриемНаРаботуРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуРаботники.ИспытательныйСрок КАК Примечание
			|ИЗ
			|	Документ.ПриемНаРаботу.Работники КАК ПриемНаРаботуРаботники
			|
			|ГДЕ
			|	ПриемНаРаботуРаботники.ФизЛицо = &ФизЛицо И
			|	ПриемНаРаботуРаботники.Ссылка.Проведен = &Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровоеПеремещениеРаботники.Ссылка,
			|	КадровоеПеремещениеРаботники.Ссылка.Представление,
			|	КадровоеПеремещениеРаботники.Ссылка.Дата,
			|	КадровоеПеремещениеРаботники.ДатаНачала,
			|	КадровоеПеремещениеРаботники.ДатаОкончания,
			|	КадровоеПеремещениеРаботники.НовоеПодразделение,
			|	КадровоеПеремещениеРаботники.НоваяДолжность,
			|	КадровоеПеремещениеРаботники.ЗанимаемыхСтавок,
			|	NULL
			|ИЗ
			|	Документ.КадровоеПеремещение.Работники КАК КадровоеПеремещениеРаботники
			|
			|ГДЕ
			|	КадровоеПеремещениеРаботники.ФизЛицо = &ФизЛицо И
			|	КадровоеПеремещениеРаботники.Ссылка.Проведен = &Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеРаботники.Ссылка,
			|	УвольнениеРаботники.Ссылка.Представление,
			|	УвольнениеРаботники.Ссылка.Дата,
			|	УвольнениеРаботники.ДатаУвольнения,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	УвольнениеРаботники.ПричинаУвольнения
			|ИЗ
			|	Документ.Увольнение.Работники КАК УвольнениеРаботники
			|
			|ГДЕ
			|	УвольнениеРаботники.ФизЛицо = &ФизЛицо И
			|	УвольнениеРаботники.Ссылка.Проведен = &Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			СтруктураДанных.Вставить("ПеремещенияВКомпании", Запрос.Выполнить().Выбрать());
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтсутствиеНаРаботеРаботники.ДатаНачала КАК ДатаС,
			|	ОтсутствиеНаРаботеРаботники.ДатаОкончания КАК ДатаПо,
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Дата КАК Дата,
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Представление,
			|	ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия,
			|	ВЫБОР  КОГДА ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &Командировка ТОГДА ""Командировка"" КОГДА ОтсутствиеНаРаботеРаботники.ПричинаОтсутствия = &Болезнь ТОГДА ""Болезнь"" ИНАЧЕ ""Отпуск"" КОНЕЦ КАК ВидОтсутствия
			|ИЗ
			|	Документ.ОтсутствиеНаРаботе.Работники КАК ОтсутствиеНаРаботеРаботники
			|
			|ГДЕ
			|	ОтсутствиеНаРаботеРаботники.ФизЛицо = &ФизЛицо И
			|	ОтсутствиеНаРаботеРаботники.Ссылка.Проведен = &Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидОтсутствия, Дата";
			СтруктураДанных.Вставить("Отклонения", Запрос.Выполнить().Выбрать());
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПройденныеКурсы.Регистратор КАК Документ,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "КурсОбучения", "Мероприятие") + ".Наименование КАК КурсОбучения,
			|	ПройденныеКурсы.Период,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "ДокументОбОбразовании", "Регистратор.Мероприятие.ВидДокументаОбОбразовании") + ".Наименование КАК ВидДокумента,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "НомерДокумента" , "РеквизитыДокумента") + " КАК НомерДокумента,
			|	ПройденныеКурсы.ДатаДокумента,
			|	ВЫРАЗИТЬ(ПройденныеКурсы.Регистратор.Комментарий КАК СТРОКА(1000)) КАК Примечание
			|ИЗ
			|	РегистрСведений." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "ПройденныеУчебныеКурсы", "РезультатыМероприятийОбученияРазвития") + " КАК ПройденныеКурсы
			|
			|ГДЕ
			|	ПройденныеКурсы.ФизЛицо = &ФизЛицо " + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "", "
			|	И ПройденныеКурсы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПройденныеКурсы.Период
			|";
			СтруктураДанных.Вставить("КурсыОбучения", Запрос.Выполнить().Выбрать());
		КонецЕсли; 
		
	КонецЕсли;

	Если РольДоступна("КадровикРегламентированныхДанных") Или 
		//РольДоступна("КадровикРегламентированныхДанныхБезОграниченияПрав") Или
		РольДоступна("ПолныеПрава") Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок,
		|	РаботникиОрганизацииСрезПоследних.Должность.Представление КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.ТарифныйРазряд.Представление КАК ТарифныйРазряд,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	РаботникиОрганизацииСрезПоследних.Организация.Представление КАК Организация,
		|	РаботникиОрганизацииСрезПоследних.Организация КАК ОрганизацияСсылка,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния = &Уволен
		|			ТОГДА ""Не работает (уволен)""
		|		ИНАЧЕ ""Работает""
		|	КОНЕЦ КАК Состояние
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник.ФизЛицо = &ФизЛицо) КАК РаботникиОрганизацииСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация";
		
		Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
 		РезультатПоОрганизациям = Запрос.Выполнить(); 
		
		Если НЕ РезультатПоОрганизациям.Пустой() Тогда
			
			СтруктураДанных.Вставить("Организация", РезультатПоОрганизациям.Выбрать());
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка КАК Документ,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Представление,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец КАК Организация,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец
			|		ИНАЧЕ ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация
			|	КОНЕЦ КАК ГоловнаяОрганизация,
			|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Дата КАК Дата,
			|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаС,
			|	ВЫБОР
			|		КОГДА ПриемНаРаботуВОрганизациюРаботники.ПроизошедшееСобытие
			|			ТОГДА ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения
			|		ИНАЧЕ &ПустаяДата
			|	КОНЕЦ КАК ДатаПо,
			|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Представление КАК Подразделение,
			|	ПриемНаРаботуВОрганизациюРаботники.Должность.Представление КАК Должность,
			|	ПриемНаРаботуВОрганизациюРаботники.ТарифныйРазряд.Представление КАК ТарифныйРазряд,
			|	ПриемНаРаботуВОрганизациюРаботники.ЗанимаемыхСтавок,
			|	ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК Примечание
			|ИЗ
			|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
			|ГДЕ
			|	ПриемНаРаботуВОрганизациюРаботники.ФизЛицо = &ФизЛицо
			|	И ПриемНаРаботуВОрганизациюРаботники.Ссылка.Проведен = &Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец,
			|	ВЫБОР
			|		КОГДА КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец
			|		ИНАЧЕ КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация
			|	КОНЕЦ КАК ГоловнаяОрганизация,
			|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Дата,
			|	КадровоеПеремещениеОрганизацииРаботники.ДатаНачала,
			|	ВЫБОР
			|		КОГДА КадровоеПеремещениеОрганизацииРаботники.ПроизошедшееСобытие
			|			ТОГДА КадровоеПеремещениеОрганизацииРаботники.ДатаОкончания
			|		ИНАЧЕ &ПустаяДата
			|	КОНЕЦ,
			|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.Должность.Представление,
			|	КадровоеПеремещениеОрганизацииРаботники.ТарифныйРазряд.Представление КАК ТарифныйРазряд,
			|	КадровоеПеремещениеОрганизацииРаботники.ЗанимаемыхСтавок,
			|	NULL
			|ИЗ
			|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
			|ГДЕ
			|	КадровоеПеремещениеОрганизацииРаботники.ФизЛицо = &ФизЛицо
			|	И КадровоеПеремещениеОрганизацииРаботники.Ссылка.Проведен = &Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеИзОрганизацииРаботники.Ссылка,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Представление,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Организация,
			|	ВЫБОР
			|		КОГДА УвольнениеИзОрганизацииРаботники.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА УвольнениеИзОрганизацииРаботники.Ссылка.Организация
			|		ИНАЧЕ УвольнениеИзОрганизацииРаботники.Ссылка.Организация.ГоловнаяОрганизация
			|	КОНЕЦ КАК ГоловнаяОрганизация,
			|	УвольнениеИзОрганизацииРаботники.Ссылка.Дата,
			|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	УвольнениеИзОрганизацииРаботники.СтатьяЗаконаОТрудеРК.Наименование
			|ИЗ
			|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
			|ГДЕ
			|	УвольнениеИзОрганизацииРаботники.Физлицо = &ФизЛицо
			|	И УвольнениеИзОрганизацииРаботники.Ссылка.Проведен = &Проведен
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата
			|ИТОГИ ПО
			|	ГоловнаяОрганизация";
			
			СтруктураДанныхОрганизации.Вставить("ПеремещенияВОрганизации", Запрос.Выполнить());

			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПройденныеКурсы.Регистратор КАК Документ,
			|	ПройденныеКурсы.Организация КАК ГоловнаяОрганизация,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "КурсОбучения", "Мероприятие") + ".Наименование КАК КурсОбучения,
			|	ПройденныеКурсы.Период,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "ДокументОбОбразовании", "Регистратор.Мероприятие.ВидДокументаОбОбразовании") + ".Наименование КАК ВидДокумента,
			|	ПройденныеКурсы." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "НомерДокумента" , "РеквизитыДокумента") + " КАК НомерДокумента,
			|	ПройденныеКурсы.ДатаДокумента,
			|	NULL КАК ТарифныйРазряд,
			|	ПРЕДСТАВЛЕНИЕ(ПройденныеКурсы.ЦельПрохожденияКурсаОбучения) КАК Примечание
			|ИЗ
			|	РегистрСведений." + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "ПройденныеУчебныеКурсыРаботникамиОрганизаций", "РезультатыМероприятийОбученияРазвития") + " КАК ПройденныеКурсы
			|
			|ГДЕ
			|	ПройденныеКурсы.ФизЛицо = &ФизЛицо" + ?(мПройденныеУчебныеКурсыРаботникамиОрганизаций, "", "
			|	И ПройденныеКурсы.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПройденныеКурсы.Период
			|ИТОГИ ПО
			|	Организация
			|";
			СтруктураДанныхОрганизации.Вставить("КурсыОбученияВОрганизации", Запрос.Выполнить());
			
		КонецЕсли;
			
	КонецЕсли; 
	      	
	Если Подробно Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Заметки.Дата КАК Дата,
		               |	ВЫРАЗИТЬ(Заметки.Содержание КАК СТРОКА(1000)) КАК Содержание,
		               |	Заметки.ВидЗаметки,
		               |	Заметки.Автор
		               |ИЗ
		               |	РегистрСведений.Заметки КАК Заметки
		               |ГДЕ
		               |	Заметки.Объект = &ФизЛицо
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата";
					   					   
		СтруктураДанных.Вставить("Заметки", Запрос.Выполнить().Выбрать());
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеДополнительнойИнформации.Наименование КАК ОписаниеДанных,
		|	ХранилищеДополнительнойИнформации.Хранилище КАК Данные
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|
		|ГДЕ
		|	((ВЫРАЗИТЬ(ХранилищеДополнительнойИнформации.Объект КАК Справочник.ФизическиеЛица)) = &ФизЛицо) И
		|	ХранилищеДополнительнойИнформации.ВидДанных = &Изображение";
		
		ВыборкаИзображений = Запрос.Выполнить().Выбрать();
    КонецЕсли;
	
	ФизическиеЛицаПереопределяемый.ДополнитьСтруктуруДанных(Запрос, СтруктураДанных, ЭтотОбъект.Ссылка);
    
    ВыводитьНаПечать = Ложь;
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
        ВыводитьНаПечать = Истина;
    КонецЕсли;
    
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФизическиеЛица_ДанныеПоФизлицу";
	Макет = ПолучитьМакет("ДанныеПоФизлицу");
	Если Подробно Тогда
		ВыборкаОсновноеФото = Результат.Выбрать();
		Если ВыборкаОсновноеФото.Следующий() Тогда
			ДанныеДляФото = ВыборкаОсновноеФото.Данные;
			Если ДанныеДляФото <> Null Тогда
				ФотоНаПропуск = ДанныеДляФото.Получить();
				Если ФотоНаПропуск <> Неопределено Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото_Заголовок");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
					ТабДокумент.НачатьГруппуСтрок("", НЕ Подробно);
					ОбластьМакета = Макет.ПолучитьОбласть("ОсновноеФото");
					ОбластьМакета.Рисунки.ФотоНаПропуск.Картинка = ФотоНаПропуск;
					ОбластьМакета.Рисунки.ФотоНаПропуск.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
					ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаОсновноеФото.ОписаниеИзображения;
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СекцияДанных Из СтруктураДанных Цикл

		ИмяСекции = СекцияДанных.Ключ;
				
		Если Не Подробно Тогда
			УсловиеВыводаРаскрытойГруппы = Истина
		Иначе
			УсловиеВыводаРаскрытойГруппы = ИмяСекции = "ФизическиеЛица";
		КонецЕсли;
		Выборка = СекцияДанных.Значение;
		Если ИмяСекции = "Отклонения" Тогда

			Пока Выборка.СледующийПоЗначениюПоля("ВидОтсутствия") Цикл
				ИмяСекции = СокрЛП(Выборка.ВидОтсутствия);
				Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
				Если Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
					ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
					ТабДокумент.Вывести(Отбивка);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
					ТабДокумент.Вывести(ОбластьМакета);
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
					ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
					Пока Выборка.Следующий() Цикл
						ОбластьМакета.Параметры.Заполнить(Выборка);
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЦикла;
					ТабДокумент.Вывести(Отбивка);
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЦикла;
				            			
		ИначеЕсли ИмяСекции = "КонтактнаяИнформация" и НЕ Выборка.Количество() = 0 Тогда

			СекцияЗаголовка = Макет.ПолучитьОбласть("КонтактнаяИнформация_Заголовок");
			ТабДокумент.Вывести(СекцияЗаголовка);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("",Не Подробно);
			Отбивка = Макет.ПолучитьОбласть("Отбивка");
			
			СекцияТипаКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Тип");
			Пока Выборка.СледующийПоЗначениюПоля("Тип") цикл

				ТабДокумент.Вывести(Отбивка);
				СекцияТипаКИ.Параметры.ТипКИ = Строка(Выборка.Тип) + ":";
				ТабДокумент.Вывести(СекцияТипаКИ);

				СекцияКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Данные");
				Пока Выборка.СледующийПоЗначениюПоля("ВидКИ") цикл
					СекцияКИ.Параметры.Заполнить(Выборка);
					ТабДокумент.Вывести(СекцияКИ);
				КонецЦикла;

			КонецЦикла; 

			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();
			
		ИначеЕсли ИмяСекции = "Организация"  Тогда

			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл

				Отбивка = Макет.ПолучитьОбласть("Отбивка");
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Вывести(Отбивка);

				Для Каждого СекцияДанныхОрганизации Из СтруктураДанныхОрганизации Цикл
					ИмяСекцииОрганизации = СекцияДанныхОрганизации.Ключ;

					Если ИмяСекцииОрганизации = "Отклонения" Тогда

						ВыборкаОрганизации = СекцияДанныхОрганизации.Значение;
						Пока ВыборкаОрганизации.СледующийПоЗначениюПоля("ВидОтсутствия") Цикл
							ИмяСекцииОрганизации = СокрЛП(ВыборкаОрганизации.ВидОтсутствия);
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							Если Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
								Пока ВыборкаОрганизации.Следующий() Цикл
									ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
									ТабДокумент.Вывести(ОбластьМакета);
								КонецЦикла;
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.ЗакончитьГруппуСтрок();
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда

                        // Спозиционируемся в выборке "ПеремещенияВОрганизации" или "КурсыОбученияВОрганизации" на нужной организации
						ВыборкаПеремещенийПоВсемОрганизациям = СекцияДанныхОрганизации.Значение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ВыборкаПеремещенийПоВсемОрганизациям.Сбросить();
						СтруктураПоиска = Новый Структура("ГоловнаяОрганизация");
						СтруктураПоиска.ГоловнаяОрганизация = Выборка.ОрганизацияСсылка;
						Если ВыборкаПеремещенийПоВсемОрганизациям.НайтиСледующий(СтруктураПоиска) Тогда

							// Выберем кадровые перемещения/прохождение курсов обучения в рамках организации
							ВыборкаОрганизации = ВыборкаПеремещенийПоВсемОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок");
							Если ОбластьМакета.Области.Количество() = 1 Тогда
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
							Иначе
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
							КонецЕсли;
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
							Пока ВыборкаОрганизации.Следующий() Цикл
								ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
								Если ЗначениеЗаполнено(ВыборкаОрганизации.ТарифныйРазряд) Тогда
									ОбластьМакета.Параметры.Должность = "" + ВыборкаОрганизации.Должность + ", " + ВыборкаОрганизации.ТарифныйРазряд;
								КонецЕсли;
								ТабДокумент.Вывести(ОбластьМакета);
							КонецЦикла;
							ТабДокумент.Вывести(Отбивка);
							ТабДокумент.ЗакончитьГруппуСтрок();
						
						КонецЕсли; 

					КонецЕсли;
					
				КонецЦикла;
				
				ТабДокумент.ЗакончитьГруппуСтрок();

			КонецЦикла;

		ИначеЕсли Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено и Выборка.Следующий() Тогда
						
			Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
			Если ОбластьМакета.Области.Количество() = 1 Тогда
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				Иначе	
					ОбластьМакета.Параметры.Заполнить(Выборка);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			Если ИмяСекции = "ФизическиеЛица" Тогда
				ОбластьМакета.Параметры.МестоРожденияРаботника = ПроцедурыУправленияПерсоналом.ПредставлениеМестаРождения(Выборка.МестоРождения);
				Если НЕ ЗначениеЗаполнено(Выборка.Фамилия) Тогда
					Фамилия = " "; Имя = " "; Отчество = " ";
					ОбщегоНазначения.ФамилияИнициалыФизЛица(ЭтотОбъект, Фамилия, Имя, Отчество);
					ОбластьМакета.Параметры.Фамилия = Фамилия;
					ОбластьМакета.Параметры.Имя = Имя;
					ОбластьМакета.Параметры.Отчество = Отчество;
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();

		Иначе
			
			ФизическиеЛицаПереопределяемый.ВывестиДополнительныеДанные(ТабДокумент, Макет, СекцияДанных);
			
		КонецЕсли;	
	КонецЦикла;

	Если Подробно Тогда	
		Если ВыборкаИзображений.Следующий() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея_Заголовок");
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
			ОбластьМакета = Макет.ПолучитьОбласть("Фотогалерея");
			ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
			Фото = ВыборкаИзображений.Данные.Получить();
			Если Фото <> Неопределено Тогда
				ОбластьМакета.Рисунки.Фото.Картинка = Фото;
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока ВыборкаИзображений.Следующий() Цикл
				ОбластьМакета.Параметры.ОписаниеДанных = ВыборкаИзображений.ОписаниеДанных;
				Фото = ВыборкаИзображений.Данные.Получить();
				ОбластьМакета.Рисунки.Фото.Картинка = ?(Фото <> Неопределено,Фото,Новый Картинка());
				ОбластьМакета.Рисунки.Фото.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии,);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
    КонецЕсли;
    Если ВыводитьНаПечать Тогда
	    УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент,,, "Данные по: " + Наименование);
    КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ПриКопировании" объекта.
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	Если Не ЭтоГруппа Тогда
		ОсновноеИзображение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" объекта.
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрошлыйИзмененныйРодительОбъектаДоступа = ?(Не ЭтоНовый() и Не Ссылка.Родитель = Родитель, Ссылка.Родитель, Неопределено);
	НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель);
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события "ПриЗаписью" объекта.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);

КонецПроцедуры // ПриЗаписи()	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
мПройденныеУчебныеКурсыРаботникамиОрганизаций = ?(Метаданные.РегистрыСведений.Найти("ПройденныеУчебныеКурсыРаботникамиОрганизаций") <> Неопределено, Истина, Ложь);
