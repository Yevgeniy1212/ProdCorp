////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// Хранит текущее значение способы отражения з/п в регл. учете.
&НаКлиенте
Перем мТекущийСпособОтраженияВБухучете;
// Хранит текущее значение даты действия способа отражения з/п в регл. учете.
&НаКлиенте
Перем мТекущаяДатаДействияОтраженияВУчете;
&НаКлиенте
Перем мОбработкаТайпингаВидаКИ;
&НаКлиенте
Перем мТекстТайпингаВидаКИ;
&НаКлиенте
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;
&НаКлиенте
Перем мНаборКонтактнойИнформацииКИОсновная;
&НаКлиенте
Перем мОбъектКИ;
&НаКлиенте
Перем мЖирныйШрифт;

&НаСервере
Функция ПолучитьКодОКЭД(ВидДеятельности)
	Возврат ВидДеятельности.КодОКЭД;
КонецФункции

&НаСервере
Функция ПолучитьПолноеНаименование(ВидДеятельности)
	Возврат ВидДеятельности.ПолноеНаименование;
КонецФункции

&НаСервере
Функция ПолучитьВладельца(Ссылка)
	Возврат Ссылка.Владелец;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Если Параметры.Свойство("Ссылка") Тогда
	ОбъектКопирования =Параметры.Ссылка;
	ЗаполнитьЗначенияСвойств(Объект,ОбъектКопирования,,"Владелец,Код,ПометкаУдаления");
		
Иначе
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Параметры.ЗначениеКопирования);
	Иначе
		НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка));
	КонецЕсли; 
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	оф_РеквизитыПодразделенияЗаголовок = "Реквизиты подразделения";
	оф_НалоговыйКомитетЗаголовок = "Налоговый комитет по месту регистрации подразделения";
	оф_ОтражениеЗарплатыВУчетеЗаголовок = "Отражение зарплаты в учете";
	оф_ОсновнойВидДеятельностиПоОКЭДЗаголовок = "Основной вид деятельности по ОКЭД";
	оф_КодПоОКПОЗаголовок = "Код по ОКПО";
КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПрочитатьОтражениеВУчете();
	Кассы.Параметры.УстановитьЗначениеПараметра("Владелец", ПолучитьВладельца(Объект.Ссылка));
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной",Объект.ОсновнаяКасса);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", ПолучитьВладельца(Объект.Ссылка));
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Объект.ОсновнойБанковскийСчет);
	

	// Контактная информация
	мНаборКонтактнойИнформацииКИОсновная = Элементы.РедактироватьКИВДиалоге;	
//	ОбновитьКИ();
	Если Объект.Ссылка.Пустая() Тогда
		ОсновнойБанковскийСчет	= Неопределено;
		ОсновнаяКасса			= Неопределено;
	КонецЕсли;
	ПоказатьПредставлениеВидаДеятельности();
	ОбновитьОтображениеОсновнойПанели();
	УстановитьДоступностьЭлементовФормы();
	Элементы.РедактироватьКИВДиалоге.Пометка = РедактироватьКИВДиалоге;
КонецПроцедуры

// Процедура получает из регистра сведений текущее отражение в учете.
//
&НаСервере
Процедура ПрочитатьОтражениеВУчете(ДатаСреза = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка.Владелец);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетОсновногоЗаработнкаПодразделения.Период,
	|	УчетОсновногоЗаработнкаПодразделения.СпособОтраженияВБухучете
	|ИЗ
	|	РегистрСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.СрезПоследних(
	|			&ДатаСреза,
	|			ПодразделениеОрганизации = &ПодразделениеОрганизации
	|			И Организация = &Организация) КАК УчетОсновногоЗаработнкаПодразделения";
	СрезПоследних   = Запрос.Выполнить().Выбрать();
	СрезПоследних.Следующий();
	Если СрезПоследних.Количество() = 0 Тогда
		СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
		Если НЕ ЗначениеЗаполнено(ДатаДействияОтраженияВУчете) Тогда
			ДатаДействияОтраженияВУчете = Макс(НастройкаПравДоступа.ПолучитьПервуюДатуДоступногоПериода(Объект.Владелец), '19000101');
		КонецЕсли;
	Иначе
		СпособОтраженияВБухучете = СрезПоследних.СпособОтраженияВБухучете;
		Если НЕ ЗначениеЗаполнено(ДатаДействияОтраженияВУчете) Тогда
			ДатаДействияОтраженияВУчете = СрезПоследних.Период;
		КонецЕсли;
	КонецЕсли;
	// запомним текущие значения способа отражения и даты действия
	мТекущийСпособОтраженияВБухучете 	= СпособОтраженияВБухучете;
	мТекущаяДатаДействияОтраженияВУчете = ДатаДействияОтраженияВУчете;
КонецПроцедуры // ПрочитатьОтражениеВУчете()

// Процедура устанавливает значени текстовых полей для представления вида деятельности организации
//
&НаКлиенте
Процедура ПоказатьПредставлениеВидаДеятельности()
	Если Объект.ОсновнойВидДеятельности.Пустая() Тогда
		ПредставлениеОКЭД = "<укажите вид деятельности>";
		ПредставлениеВидаДеятельности = "<укажите вид деятельности>";
	Иначе
		ПредставлениеОКЭД = ?(НЕ ЗначениеЗаполнено(ПолучитьКодОКЭД(Объект.ОсновнойВидДеятельности)), "<не указан код ОКЭД для вида деятельности>",ПолучитьКодОКЭД(Объект.ОсновнойВидДеятельности));
		ПредставлениеВидаДеятельности = ?(НЕ ЗначениеЗаполнено(ПолучитьПолноеНаименование(Объект.ОсновнойВидДеятельности)), "<не указано полное наименование вида деятельности>",ПолучитьПолноеНаименование(Объект.ОсновнойВидДеятельности));
	КонецЕсли;
	
КонецПроцедуры // ПоказатьПредставлениеВидаДеятельности

// Процедура отображает/скрывает основную панель в зависмости от  
// признака "Является структурным подразделением"
&НаКлиенте
Процедура ОбновитьОтображениеОсновнойПанели()
	Если Объект.ЯвляетсяСтруктурнымПодразделением = Истина Тогда
		//ЭтаФорма.Высота = 549;
		Элементы.ОсновнаяПанель.Видимость = Истина;
	Иначе
		Элементы.ОсновнаяПанель.Видимость = Ложь;
		//ЭтаФорма.Высота = 318;
	КонецЕсли;
КонецПроцедуры

// Процедура управляет доступностью элементов формы в зависимости от 
// флажка реквизита "УказыватьРеквизитыГоловнойОрганизации"
&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	ДоступностьЭлемента = НЕ Объект.УказыватьРеквизитыГоловнойОрганизации;
	Элементы.НаименованиеПолное.Доступность							 = ДоступностьЭлемента;
	Элементы.РНН.Доступность 										 = ДоступностьЭлемента;
	Элементы.ИдентификационныйНомер.Доступность 					 = ДоступностьЭлемента;
	Элементы.КонтактнаяИнформация.Видимость	 						 = ДоступностьЭлемента;
	Элементы.Коды.Видимость 										 = ДоступностьЭлемента;
	Элементы.НалоговыйКомитет.ОтметкаНезаполненного  				 = ДоступностьЭлемента;
	Элементы.НалоговыйКомитет.Доступность 						     = ДоступностьЭлемента;
//	Элементы.КнопкаПроверкиРНН.Доступность 						 	 = ДоступностьЭлемента;
	
КонецПроцедуры //УстановитьДоступностьЭлементовФормы()

&НаКлиенте
Процедура ЯвляетсяСтруктурнымПодразделениемПриИзменении(Элемент)
	ОбновитьОтображениеОсновнойПанели();
КонецПроцедуры

&НаКлиенте
Процедура УказыватьРеквизитыГоловнойОрганизацииПриИзменении(Элемент)
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБИНИИН(Команда)
	Если куфиб_ОбщегоНазначения.БИНИИНСоответствуетТребованиям(Объект.ИдентификационныйНомер) Тогда
		Предупреждение("Введенный БИН/ИИН корректен!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КИОсновная(Команда)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, Элементы.КонтактнаяИнформация, Элементы.НаборКонтактнойИнформацииКИОсновная);	
КонецПроцедуры

&НаКлиенте
Процедура НаборКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, Элементы.НаборКонтактнойИнформацииКИОсновная);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонтактнойИнформацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПередНачаломДобавленияОбработкаДоступностиЭлементовОбщее(Отказ, Элемент, Объект.Ссылка, Копирование, Элементы.РедактироватьКИВДиалоге.Пометка)
КонецПроцедуры

&НаКлиенте
Процедура НаборКонтактнойИнформацииПередНачаломИзменения(Элемент, Отказ)
	куфиб_УправлениеКонтактнойИнформациейКлиент.УстановитьПараметрыОкна(Отказ, Объект.Ссылка,Элемент, Элементы.РедактироватьКИВДиалоге.Пометка, ложь,,Ложь)
КонецПроцедуры

&НаКлиенте
Процедура НаборКонтактнойИнформацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	куфиб_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение)
	НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ЗаписьКИВРегистр(ВыбранноеЗначение,НаборКонтактнойИнформации));
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКИВДиалоге(Команда)
	Элементы.РедактироватьКИВДиалоге.Пометка = Не Элементы.РедактироватьКИВДиалоге.Пометка;
	РедактироватьКИВДиалоге = Элементы.РедактироватьКИВДиалоге.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура НаборКонтактнойИнформацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КонтактнаяИнформацияОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ДатаДействияОтраженияВУчетеПриИзменении(Элемент)
	Элемент = НачалоМесяца(Элемент);
	ПрочитатьОтражениеВУчете(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОтраженияВУчетеНажатие(Элемент)
	ОткрытьИсториюОтражениеВУчете();
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку истории способов отражения з/п в. 
//
&НаКлиенте
Процедура ОткрытьИсториюОтражениеВУчете()
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЭтаФорма.Записать();
			Исключение
				куфиб_ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПодразделениеОрганизации",Объект.Ссылка);
		ПараметрыФормы.Вставить("Организация",ПолучитьВладельца(Объект.Ссылка));
		ПараметрыФормы.Вставить("ОрганизацияДоступность",Ложь);
		ПараметрыФормы.Вставить("ПодразделениеОрганизацииДоступность",Ложь);
		ОткрытьФорму("РегистрСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.ФормаСписка",ПараметрыФормы,ЭтаФорма);
		//ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.ПолучитьФормуСписка();
		//ФормаРегистра.РегистрСведенийСписок.Отбор.ПодразделениеОрганизации.Установить(Ссылка);
		//ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(Ссылка.Владелец);
		//ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
		//ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;
		//ФормаРегистра.ЭлементыФормы.ПодразделениеОрганизации.Доступность = Ложь;
		//ФормаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры //ОткрытьИсториюОтражениеВУчете()

&НаКлиенте
Процедура БСУстановитьОсновным(Команда)
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Элементы.БанковскиеСчета.ТекущиеДанные.Ссылка);
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета()
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Элементы.БанковскиеСчетаБСУстановитьОсновным.Доступность = Ложь;
	Иначе
		Элементы.БанковскиеСчетаБСУстановитьОсновным.Доступность = НЕ (Элементы.БанковскиеСчета.ТекущиеДанные.ссылка = Объект.ОсновнойБанковскийСчет);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КУстановитьОсновным(Команда)
		Если Элементы.Кассы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Элементы.Кассы.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Объект.ОсновнаяКасса = Элементы.Кассы.ТекущиеДанные.Ссылка;
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной", Объект.ОсновнаяКасса);
	ПроверитьДоступностьКнопкиУстановкиОсновнойКассы();
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основной кассы счета.
//
&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновнойКассы()
	Если Элементы.Кассы.ТекущиеДанные = Неопределено Тогда
		Элементы.КассыКУстановитьОсновным.Доступность = Ложь;
	Иначе
		Элементы.КассыКУстановитьОсновным.Доступность = НЕ (Элементы.Кассы.ТекущиеДанные.Ссылка = Объект.ОсновнаяКасса);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КассыПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновнойКассы();
КонецПроцедуры

&НаКлиенте
Процедура КассыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = НЕ куфиб_РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидДеятельностиПриИзменении(Элемент)
	ПоказатьПредставлениеВидаДеятельности();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи, глТекущийПользователь,мТекущийСпособОтраженияВБухучете,мТекущаяДатаДействияОтраженияВУчете);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюКлиентНаСервере(Отказ, ПараметрыЗаписи, глТекущийПользователь,мТекущийСпособОтраженияВБухучете,мТекущаяДатаДействияОтраженияВУчете)
	ЗаписатьСпособОтражения(Отказ,мТекущийСпособОтраженияВБухучете,мТекущаяДатаДействияОтраженияВУчете);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец",Объект.Ссылка);
	Кассы.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);

	куфиб_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка, Отказ);
	ПроверитьОсновнойБанковскийСчет();
КонецПроцедуры

// Процедура записывает данные отражения в учете в информационную базу.
//
&НаСервере
Процедура ЗаписатьСпособОтражения(Отказ,мТекущийСпособОтраженияВБухучете,мТекущаяДатаДействияОтраженияВУчете)
	Если НЕ ЗначениеЗаполнено(мТекущийСпособОтраженияВБухучете) И НЕ ЗначениеЗаполнено(СпособОтраженияВБухучете) Тогда
		Возврат;
	ИначеЕсли СпособОтраженияВБухучете = мТекущийСпособОтраженияВБухучете
				И ДатаДействияОтраженияВУчете = мТекущаяДатаДействияОтраженияВУчете Тогда
		Возврат;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаДействияОтраженияВУчете);
	НаборЗаписей.Отбор.ПодразделениеОрганизации.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Организация.Установить(ПолучитьВладельца(Объект.Ссылка));
	Запись = НаборЗаписей.Добавить();
	Запись.Период		= ДатаДействияОтраженияВУчете;
	Запись.ПодразделениеОрганизации = Объект.Ссылка;
	Запись.Организация	= ПолучитьВладельца(Объект.Ссылка);
	Запись.СпособОтраженияВБухучете = Элементы.СпособОтраженияВБухучете.Значение;
	Попытка
		НаборЗаписей.Записать();
		мТекущийСпособОтраженияВБухучете = СпособОтраженияВБухучете;
		мТекущаяДатаДействияОтраженияВУчете = ДатаДействияОтраженияВУчете;
	Исключение
		куфиб_ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать данные отражения в учете : " + ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьСпособОтражения()

&НаСервере
Процедура ПроверитьОсновнойБанковскийСчет()
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета
	|ГДЕ
	|	Владелец = &Контрагент
	|";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	Если ВыборкаСчетов.Следующий() Тогда
		Объект.ОсновнойБанковскийСчет = ВыборкаСчетов.Ссылка;
		//установим в истину свойство обмена данными "загрузка" чтобы при вызове метода Записать() не проверять все ещё раз 
		//Объект.ОбменДанными.Загрузка = Истина;
		НашОбъект = РеквизитФормыВЗначение("Объект");
		НашОбъект.Записать();
		ЗначениеВРеквизитФормы(НашОбъект,"Объект");
	КонецЕсли;
КонецПРоцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПрочитатьОтражениеВУчете();
	Кассы.Параметры.УстановитьЗначениеПараметра("Владелец", ПолучитьВладельца(Объект.Ссылка));
	Кассы.Параметры.УстановитьЗначениеПараметра("Основной",Объект.ОсновнаяКасса);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", ПолучитьВладельца(Объект.Ссылка));
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("ОсновнойСчет",Объект.ОсновнойБанковскийСчет);
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Параметры.ЗначениеКопирования);
	Иначе
		НаборКонтактнойИнформации.Загрузить(куфиб_УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Объект.Ссылка));
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",ПолучитьВладельца(Объект.Ссылка));
	ОткрытьФорму("Справочник.ПодразделенияОрганизаций.ФормаВыбора",ПараметрыФормы,Элемент);
КонецПроцедуры

