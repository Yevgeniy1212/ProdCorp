////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Формирует записи регистра расчета, подлежащие перерасчету
//
Процедура ЗарегистрироватьПерерасчеты()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |   Основные.Сотрудник,
    |   Основные.ФизЛицо,
    |   Основные.Регистратор КАК Регистратор,
    |   Основные.Организация
    |ИЗ
    |   РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основные
    |       ПО РабочееВремя.Период >= Основные.ПериодДействияНачало
    |           И РабочееВремя.Период <= Основные.ПериодДействияКонец
    |           И РабочееВремя.Сотрудник = Основные.Сотрудник
    |           И РабочееВремя.Организация = Основные.Организация
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
    |       ПО Перерасчеты.ОбъектПерерасчета = Основные.Регистратор
    |           И Перерасчеты.ФизЛицо = Основные.ФизЛицо
    |           И (Перерасчеты.ВидРасчета = &ПустойВидРасчета)
    |ГДЕ
    |   РабочееВремя.Регистратор = &Регистратор
    |   И Перерасчеты.ФизЛицо ЕСТЬ NULL 
    |   И Основные.Регистратор ЕСТЬ НЕ NULL 
    |
    |УПОРЯДОЧИТЬ ПО
    |   Регистратор");
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ПустойВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПроведениеРасчетов.ДописатьПерерасчетыОсновныхНачислений(Выборка);
	
КонецПроцедуры // ЗарегистрироватьПерерасчеты()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
// 

// Процедура - обработчик события "ПередЗаписью" набора записей
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ЗарегистрироватьПерерасчеты();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи" набора записей
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьПерерасчеты();
	
КонецПроцедуры // ПриЗаписи()

