////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//результат запроса по табличным частям
Перем мРезультатЗапросаПоТабличнымЧастям Экспорт;  // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция возвращает представление адреса по виду КИ.
	//
	// Параметры:
	//  ОбъектКИ - объект, для которого необходимо получить адрес.
	//  ВидАдреса - вид адреса, элемент справочника "Виды контактной информации"
	//
	// Возвращаемое значение:
	//  Текст - представление адреса
	//
	Функция ммПолучитьмПредставлениеАдреса()
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Объект", Организация);
		Запрос.УстановитьПараметр("Вид"   , Константы.гз_ВидКонтактнойИнформацииПриемаКонкурсныхЗаявок.Получить());
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 250) КАК Представление 
		|Из
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Вид = &Вид
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат "";
		Иначе
			Возврат РезультатЗапроса.Выгрузить()[0].Представление;
		КонецЕсли;
		
	КонецФункции //ммПолучитьмПредставлениеАдреса()
	
	// Функция формирует табличный документ с печатной формой 
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма заявки
	//
	Функция ПечатьЗаявки()
		
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
			КодОС			= Истина;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкиДляКонкурса.Организация,
		|	ЗаявкиДляКонкурса.Дата,
		|	ЗаявкиДляКонкурса.Номер,
		|	ЗаявкиДляКонкурса.Ответственный,
		|	ЗаявкиДляКонкурса.ДатаНачалаПроведенияКонкурса,
		|	ЗаявкиДляКонкурса.ДатаОкончанияПроведенияКонкурса
		|Из
		|	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок КАК ЗаявкиДляКонкурса
		|ГДЕ
		|	ЗаявкиДляКонкурса.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаявкиДляКонкурса.Номенклатура.Наименование КАК ТоварНаименование,
		|	ЗаявкиДляКонкурса.Сумма КАК Сумма,
		|	ЗаявкиДляКонкурса.Номенклатура.БазоваяЕдиницаИзмерения КАК ед,
		|	ЗаявкиДляКонкурса.Количество,
		|	ЗаявкиДляКонкурса.Номенклатура."+Колонка+" КАК КодАртикул,
		|	ЗаявкиДляКонкурса.НомерСтроки
		|Из
		|	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК ЗаявкиДляКонкурса
		|ГДЕ
		|	ЗаявкиДляКонкурса.Ссылка.Ссылка = &Ссылка";
		РезЗапросаСписка = Запрос.Выполнить();
		ТаблицаПоСписку = РезЗапросаСписка.Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("Заявка");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Проведение закупок", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Периоды");
		ОбластьМакета.Параметры.ДатаНачала 		= Док.ДатаНачалаПроведенияКонкурса;
		ОбластьМакета.Параметры.ДатаОкончания 	= Док.ДатаОкончанияПроведенияКонкурса;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Сумма = 0;	
		НомСтр = 1;
		Для Каждого ВыборкаСтрокТовары Из ТаблицаПоСписку Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;   
			
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			Сумма     = Сумма + ВыборкаСтрокТовары.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итог = Сумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьЗаявки()
	
	// Функция формирует табличный документ с печатной формой 
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма заявки
	//
	Функция ПечатьСостоянияЗаявки()
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкиДляКонкурса.Организация,
		|	ЗаявкиДляКонкурса.Дата,
		|	ЗаявкиДляКонкурса.Номер,
		|	ЗаявкиДляКонкурса.Ответственный,
		|	ЗаявкиДляКонкурса.ДатаНачалаПроведенияКонкурса,
		|	ЗаявкиДляКонкурса.ДатаОкончанияПроведенияКонкурса
		|Из
		|	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок КАК ЗаявкиДляКонкурса
		|ГДЕ
		|	ЗаявкиДляКонкурса.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст ="ВЫБРАТЬ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки КАК МестоПоставки,
		              |	ВЫБОР
		              |		КОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.ОтменаПозиции
		              |			ТОГДА ""Отменена""
		              |		КОГДА ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток, 0) <= 0
		              |				И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка.Проведен
		              |			ТОГДА ""Выполнена""
		              |		КОГДА ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток, 0) > 0
		              |				И ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток, 0) < гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Количество
		              |			ТОГДА ""Выполняется""
		              |		ИНАЧЕ ""Не выполнена""
		              |	КОНЕЦ КАК Состояние,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Количество
		              |ПОМЕСТИТЬ ВТ_Состояния
		              |ИЗ
		              |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(, ДокументЗаявка = &Ссылка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки
		              |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура
		              |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки
		              |ГДЕ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	Номенклатура,
		              |	МестоПоставки
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки КАК МестоПоставки,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК Ед,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Количество КАК Количество,
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Сумма КАК Сумма,
		              |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.КоличествоРасход КАК КоличествоЗакуплено,
		              |	ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.Регистратор, ЗНАЧЕНИЕ(документ.гз_итогиГосударственныхЗакупок.Пустаяссылка)) КАК ДокументИтогов,
		              |	гз_ИтогиГосударственныхЗакупокТовары.Цена КАК ЦенаПобедителя,
		              |	ВТ_Состояния.Состояние КАК Состояние,
		              |	гз_ИтогиГосударственныхЗакупокТовары.Победитель
		              |ИЗ
		              |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
		              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ОстаткиИОбороты(, , Регистратор, , ДокументЗаявка = &Ссылка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты
		              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары
		              |			ПО гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.Регистратор = гз_ИтогиГосударственныхЗакупокТовары.Ссылка
		              |				И гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.Номенклатура = гз_ИтогиГосударственныхЗакупокТовары.Номенклатура
		              |				И гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.МестоПоставки = гз_ИтогиГосударственныхЗакупокТовары.МестоПоставки
		              |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.Номенклатура
		              |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстаткиИОбороты.МестоПоставки
		              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Состояния КАК ВТ_Состояния
		              |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = ВТ_Состояния.Номенклатура
		              |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = ВТ_Состояния.МестоПоставки
		              |ГДЕ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка
		              |ИТОГИ
		              |	МАКСИМУМ(Количество),
		              |	МАКСИМУМ(Сумма),
		              |	СУММА(КоличествоЗакуплено),
		              |	МАКСИМУМ(Состояние)
		              |ПО
		              |	Номенклатура,
		              |	МестоПоставки";
		
		РезЗапросаСписка = Запрос.Выполнить();
		ТаблицаПоСписку = РезЗапросаСписка.Выгрузить();
		
		ВыборкаТовар = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Номенклатура");
		
		Запрос.Текст ="ВЫБРАТЬ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
		              |	СУММА(гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Количество) КАК Количество,
		              |	СУММА(гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Сумма) КАК Сумма
		              |ИЗ
		              |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
		              |ГДЕ
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка
		              |
		              |СГРУППИРОВАТЬ ПО
		              |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура";
		ВыборкаПоТЧ = Запрос.Выполнить().Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("СостояниеЗаявки");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Состояние закупок ", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Периоды");
		ОбластьМакета.Параметры.ДатаНачала 		= Док.ДатаНачалаПроведенияКонкурса;
		ОбластьМакета.Параметры.ДатаОкончания 	= Док.ДатаОкончанияПроведенияКонкурса;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьШапки = Макет.ПолучитьОбласть("ШапкаТаблицы");
		// Вывести табличную часть
		ТабДокумент.Вывести(ОбластьШапки);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТовар");
		ОбластьМакетаТоварМП = Макет.ПолучитьОбласть("СтрокаТоварМП");
		ОбластьДетальныеЗаписи = Макет.ПолучитьОбласть("СтрокаДетальныеЗаписи");
		Сумма = 0;	
		НомСтр = 1;
		Пока ВыборкаТовар.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаТовар);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаТовар.Номенклатура);
			ОбластьМакета.Параметры.Состояние = "";
			ВыборкаПоТЧ.Сбросить();
			СтруктураОтбора = Новый Структура("Номенклатура",ВыборкаТовар.Номенклатура);
			Если ВыборкаПоТЧ.НайтиСледующий(СтруктураОтбора) Тогда 
				ОбластьМакета.Параметры.Количество = ВыборкаПоТЧ.Количество;
				ОбластьМакета.Параметры.Сумма	   = ВыборкаПоТЧ.Сумма;
				Сумма = Сумма + ВыборкаПоТЧ.Сумма;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыборкаТоварМП = ВыборкаТовар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"МестоПоставки");
			
			Пока ВыборкаТоварМП.Следующий() Цикл
				
				ОбластьМакетаТоварМП.Параметры.Заполнить(ВыборкаТоварМП);
				ОбластьМакетаТоварМП.Параметры.ТоварНаименование = СокрЛП(ВыборкаТоварМП.Номенклатура);
				
				ТабДокумент.Вывести(ОбластьМакетаТоварМП);
				
				ВыборкаДетальныеЗаписи = ВыборкаТоварМП.Выбрать();
					
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ОбластьДетальныеЗаписи.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					ОбластьДетальныеЗаписи.Параметры.ТоварНаименование = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура);
					ОбластьДетальныеЗаписи.Параметры.Состояние = "";
					
					ТабДокумент.Вывести(ОбластьДетальныеЗаписи);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итог = Сумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСостоянияЗаявки()
	
	// Функция формирует объявление
	//
	Функция ПечатьОбъявления()
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("Объявление");
        ОбластьПечати = Макет.ПолучитьОбласть("ТекстОбъявления");
		ОбластьПечати.Параметры.НаименованиеОрганизации = Организация.НаименованиеПолное;
		ОбластьПечати.Параметры.Комментарий 			= ОписаниеКонкурса;
		ОбластьПечати.Параметры.СпособЗакупки 			= СпособЗакупки.Наименование;
		ОбластьПечати.Параметры.МестоПоставки 			= МестоПоставки.НаименованиеПолное;
		ОбластьПечати.Параметры.СрокПоставки 			= СрокПоставкиСМоментаЗаключенияДоговора;
		ОбластьПечати.Параметры.ВыделеннаяСумма 		= Товары.Итог("Сумма");
		ОбластьПечати.Параметры.ОписаниеОплаты 			= СпособОплаты;
		ОбластьПечати.Параметры.АдресПриемаЗаявок 		= ммПолучитьмПредставлениеАдреса();
		ОбластьПечати.Параметры.НачалоКонкурса 			= Формат(ДатаНачалаПроведенияКонкурса,		"ДЛФ=DD");
		ОбластьПечати.Параметры.ОкончаниеКонкурса 		= Формат(ДатаОкончанияПроведенияКонкурса,	"ДЛФ=DD");
		ОбластьПечати.Параметры.СрокПодписанияДоговоров = Формат(СрокПодписанияДоговоров,			"ДЛФ=DD");
		ТабДокумент.Вывести(ОбластьПечати);
		Возврат ТабДокумент;
	КонецФункции //ПечатьОбъявления()
	
	// Функция формирует табличный документ с печатной формой НМА-1,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта (накладной) приемки-передачи НМА
	//
	Функция ПечатьРешения() Экспорт
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ОбъявлениеОПроведенииГосударственныхЗакупок";
		Макет       = ПолучитьМакет("Решение");
		ОбластьЗаголовка 		= Макет.ПолучитьОбласть("Заголовок");
		// Выводим заголовок                                       
		ОбластьЗаголовка.Параметры.Дата 			= Формат(Дата, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовка.Параметры.Наименование 	= Организация.НаименованиеПолное;
		ОбластьЗаголовка.Параметры.ОписаниеКонкурса = ОписаниеКонкурса;
		ОбластьЗаголовка.Параметры.ПочтовыйАдрес 	= СокрЛП(ммПолучитьмПредставлениеАдреса());
		ОбластьЗаголовка.Параметры.СпособЗакупки 	= ?(Найти(НРег(СпособЗакупки),"способом")<>0,НРег(СпособЗакупки),
														"способом """+НРег(СпособЗакупки)+"""");
		ОбластьЗаголовка.Параметры.ПричинаПродления	= Лев(ВРег(ПричинаПродления),1)+Сред(НРег(ПричинаПродления),2);
		ОбластьЗаголовка.Параметры.КоличествоДней 	= КоличествоДнейПродления;
		ОбластьЗаголовка.Параметры.Автор 			= Автор;
		ТабДокумент.Вывести(ОбластьЗаголовка);
		Возврат ТабДокумент;
	КонецФункции //ПечатьРешения()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМакета = "Заявка" Тогда
			
			ТабДокумент = ПечатьЗаявки();
			
		ИначеЕсли ИмяМакета = "Решение" Тогда
			
			ТабДокумент = ПечатьРешения();
			
		ИначеЕсли ИмяМакета = "СостояниеЗаявки" Тогда
			
			ТабДокумент = ПечатьСостоянияЗаявки();
			
		ИначеЕсли ИмяМакета = "Объявление" Тогда 
			
			ТабДокумент = ПечатьОбъявления();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
			
		КонецЕсли;
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Объявление о проведении закупок"));
		
	КонецПроцедуры // Печать()
	
	// Функция получения результата запроса по табличной части
	//
	Функция ПолучитьРезультатзапросаПоТЧ(Тип = "ДляЦеновыхПредложений") Экспорт
		Возврат гз_ПроцедурыОперативногоУчетаЗакупок.ПолучитьРезультатЗапросаПоНоменклатурнымПозициямКонкурснойЗаявки(Тип,ЭтотОбъект);	
	КонецФункции //ПолучитьРезультатзапросаПоТЧ()

	
#КонецЕсли

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заявка, СостояниеЗаявки, Объявление, Решение","Состав закупок", "Состояние закупок", "Объявление", "Решение о продлении");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		гз_ОбщегоНазначения.мЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		МестоПоставки = Основание.МестоПоставки;
		Год = Основание.Год;
		СкопироватьТовары(Основание);
		//
		ДокументОснование = Основание.Ссылка;
		
		НовДокОсн = ДокументыОснования.Добавить();
		НовДокОсн.ДокументОснование = Основание.Ссылка;
		Если Основание.Состояние = Перечисления.гз_СостояниеДокумента.Отменена Тогда 
			Сообщить("Документ "+Основание.Ссылка+", на основании которого вводится ""Объявление о проведении государственных закупок"" имеет состояние ""Отменен""",СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПоДокументуОснования()

// Процедура формирует документы ценовых предложений поставщиков
//
Процедура СформироватьЦеновоеПредложение(Контрагент, ДатаПодачи) Экспорт
	
	гз_ПроцедурыОперативногоУчетаЗакупок.СформироватьЦеновоеПредложение(Ссылка,Контрагент,ДатаПодачи,мРезультатЗапросаПоТабличнымЧастям);
	
КонецПроцедуры //СформироватьЦеновоеПредложение()

// Процедура формирует документы ценовых предложений поставщиков
//
Процедура СформироватьПротоколВскрытияЦеновогоПредложения() Экспорт
	
	гз_ПроцедурыОперативногоУчетаЗакупок.СформироватьПротоколВскрытияЦеновогоПредложения(Ссылка);
	
КонецПроцедуры //СформироватьПротоколВскрытияЦеновогоПредложения()

// Процедура выполняет копирование строк в табличную часть документа
//
Процедура СкопироватьТовары(ДокументОснование)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Количество) КАК Количество,
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.МестоПоставки,
	               |	&ПарамСостояния КАК Состояние
	               |ИЗ
	               |	Документ.гз_ЗаказПодразделения.СоставЗаявкиТовары КАК гз_ПланЗакупокПодразделенияСоставЗаявкиТовары
	               |ГДЕ
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.МестоПоставки";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ПарамСостояния", Перечисления.гз_СостоянияЗаказа.Конкурс);
	Товары.Загрузить(запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Характеристика,
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.МестоПоставки
	               |ИЗ
	               |	Документ.гз_ЗаказПодразделения.СоставЗаявкиТовары КАК гз_ПланЗакупокПодразделенияСоставЗаявкиТовары
	               |ГДЕ
	               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка.Ссылка = &Ссылка";
    ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
				   
	// получить цену номенклатуры
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
	
	Результат = ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры);
	
	Для Каждого ТекСтрока Из Товары Цикл 
		НайденнаяСтрока = Результат.Найти(ТекСтрока.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока = Неопределено Тогда
			ТекСтрока.Цена = 0;	
		Иначе 
			ТекСтрока.Цена = НайденнаяСтрока.Цена;
		КонецЕсли;
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",ТекСтрока.Номенклатура);
		СтруктураПоиска.Вставить("МестоПоставки",ТекСтрока.МестоПоставки);
		НайденныеСтрокиХарактеристик = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрокаХарактеристики Из НайденныеСтрокиХарактеристик Цикл 
			Если ПустаяСтрока(ТекСтрока.Характеристика) Тогда 
				ТекСтрока.Характеристика = НайденнаяСтрокаХарактеристики.Характеристика;
			Иначе 
				ТекСтрока.Характеристика = ТекСтрока.Характеристика + "; " + НайденнаяСтрокаХарактеристики.Характеристика;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры //СкопироватьТовары()

// Функция проверяет формирование итогов на основании данного объявления о конкурсной заявке
//
// Возвращаемое значение:
//  Истина, если итоги сформированы, иначе - ложь
//  
Функция ПроверитьФормированиеИтогов() Экспорт
	
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	гз_ИтогиГосударственныхЗакупок.Ссылка
	             |ИЗ
	             |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
	             |ГДЕ
	             |	(гз_ИтогиГосударственныхЗакупок.ДокументОснование = &Ссылка
	             |			И &Ссылка <> ЗНАЧЕНИЕ(Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.ПустаяСсылка))
	             |	И гз_ИтогиГосударственныхЗакупок.Проведен";
	запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 И Не Ссылка.Пустая() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьФормированиеИтогов()

// Функция формирует выборку исполненных заявок
//
// Возвращаемое значение:
//  Выборка исполненных заявок
//  
Функция СформироватьВыборкуИсполненныхЗаявок() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
	               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки КАК МестоПоставки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоРасход, 0) >= ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоПриход, 0)
	               |				И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка.Проведен
	               |				И ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоПриход, 0) > 0
	               |			ТОГДА ""Выполнена""
	               |		КОГДА ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоРасход, 0) > 0
	               |				И ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоРасход, 0) < ЕСТЬNULL(гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.КоличествоПриход, 0)
	               |			ТОГДА ""Выполняется""
	               |		ИНАЧЕ ""Не выполнена""
	               |	КОНЕЦ КАК Состояние
	               |ИЗ
	               |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Обороты(, , , ДокументЗаявка = &Ссылка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты
	               |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.Номенклатура
	               |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = гз_СостояниеКонкурсовПоГосударственнымЗакупкамОбороты.МестоПоставки
	               |ГДЕ
	               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //СформироватьВыборкуИсполненныхЗаявок() 

// Функция формирует выборку не закупленных позиций
//
// Возвращаемое значение:
//  Выборка невыполненных позиций
//  
Функция СформироватьВыборкуНевыполненныхПозиций() Экспорт 
	
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Организация,
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(
	             |			,
	             |			Организация = &Организация
	             |				И ДокументЗаявка = &Ссылка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки";
	запрос.УстановитьПараметр("Организация",Организация);
	запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //СформироватьВыборкуНевыполненныхПозиций()  

// Функция формирует запрос для получения таблицы цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры.
//
// Возвращаемое значение:
//  Таблица значений, содержащая колонки Номенклатура и Цена
//  
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры) Экспорт 
	
	Возврат гз_ПроцедурыОперативногоУчетаЗакупок.мПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры,Организация,Год);
	
КонецФункции //ПолучитьТаблицуЦенНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура подготавливает таблицу заявок
//
Процедура ПодготовитьТаблицуЗаявок(ТаблицаЗаявок,СтруктураШапкиДокумента)
	ТаблицаЗаявок.Колонки.Добавить("Организация");
	ТаблицаЗаявок.Колонки.Добавить("Подразделение");
	ТаблицаЗаявок.Колонки.Добавить("Состояние");
	ТаблицаЗаявок.Колонки.Добавить("Активность");
	ТаблицаЗаявок.Колонки.Добавить("Период");
	ТаблицаЗаявок.ЗаполнитьЗначения(Перечисления.гз_СостоянияЗаказа.Конкурс,"Состояние");
	ТаблицаЗаявок.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаЗаявок.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаЗаявок.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
	Для Каждого СтрокаЗаявка Из ТаблицаЗаявок Цикл
		 СтрокаЗаявка.Подразделение = СтрокаЗаявка.ДокументОснование.ПодразделениеОрганизации;
	 КонецЦикла;
	 ТаблицаЗаявок.Колонки.Найти("ДокументОснование").Имя="Заявка";
КонецПроцедуры //ПодготовитьТаблицуЗаявок()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	СтруктураОбязательныхПолей.Вставить("ДатаНачалаПроведенияКонкурса");
	СтруктураОбязательныхПолей.Вставить("ДатаОкончанияПроведенияКонкурса");
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТабЗаявки, СтруктураШапкиДокумента,Отказ, Заголовок, ТипТЧ) Экспорт
	
	Запрос = Новый Запрос;                      
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.НомерСтроки,
	                  |	ВЫБОР
	                  |		КОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки ЕСТЬ NULL 
	                  |			ТОГДА ЛОЖЬ
	                  |		ИНАЧЕ ИСТИНА
	                  |	КОНЕЦ КАК Конфликт,
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки КАК НомерСтроки1
	                  |ИЗ
	                  |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1
	                  |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.НомерСтроки <> гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.Ссылка
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.Номенклатура
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.МестоПоставки
	                  |ГДЕ
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Конфликт Тогда 
			Сообщить("В строках №" + Выборка.НомерСтроки +" и №"+Выборка.НомерСтроки1+" табличной части ""Товары"" дублируются номенклатура и место поставки!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
    	
	Если ТипТЧ = "Товары" Тогда
		РеквизитыТабЗаявки = "Номенклатура, Количество, Сумма"; //через запятую
		ЗаполнитьРеквизитУслуга(ТабЗаявки);
	КонецЕсли;
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ТипТЧ, Новый Структура(РеквизитыТабЗаявки), Отказ, Заголовок);
КонецПроцедуры // ПроверкаРеквизитовТЧ()

//Процедура заполнения реквизита Услуга
//
Процедура ЗаполнитьРеквизитУслуга(ТЧ)
	ТЧ.Колонки.Добавить("Услуга");
	Для Каждого ТекСтрТЧ Из ТЧ Цикл
		ТекСтрТЧ.Услуга = ТекСтрТЧ.Номенклатура.Услуга;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьРеквизитУслуга()

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,  ТаблицаПоЗаявкеТовары, ТаблицаЗаявок, Отказ, Заголовок)
	Если Не Отказ Тогда
		ДокументЗаявка			= ЭтотОбъект.Ссылка;
		ОрганизацияДляДвижения 	= СтруктураШапкиДокумента.Организация;
		ДатаДляДвижения 		= СтруктураШапкиДокумента.Дата;
		// Движение по регистру по Товарам
		ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка);
		
		Движения.гз_СостоянияТекущихЗаявок.Загрузить(ТаблицаЗаявок);
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений регистров по ТЧ Товары
//
Процедура ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка)
	Если Не Отказ Тогда
		Для Каждого ТекСтр из ТаблицаПоЗаявкеТовары Цикл
			Если ТекСтр.ОтменаПозиции Тогда
				Продолжить;
			КонецЕсли;
			Движение = Движения.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ДобавитьПриход();
			Движение.Количество				 = ТекСтр.Количество;
			Движение.МестоПоставки			 = ?(ТекСтр.МестоПоставки.Пустая(),МестоПоставки,ТекСтр.МестоПоставки);
			Движение.Номенклатура			 = ТекСтр.Номенклатура;
			Движение.Организация			 = ОрганизацияДляДвижения;
			Движение.Период					 = ДатаДляДвижения;
			Движение.ДокументЗаявка			 = ДокументЗаявка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ДвиженияПоРегистрамТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаСоставаЗаявкиТовары 	= Товары.Выгрузить();
	ТаблицаЗаявок 				= ДокументыОснования.Выгрузить();
	ТаблицаЗаявок.Свернуть("ДокументОснование");
	ПодготовитьТаблицуЗаявок(ТаблицаЗаявок,СтруктураШапкиДокумента);
	
	ПроверкаРеквизитовТЧ(ТаблицаСоставаЗаявкиТовары, СтруктураШапкиДокумента,Отказ, Заголовок, "Товары");
	
	// Проверим, не дублируются ли Номенклатура в таб.части
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСоставаЗаявкиТовары, ТаблицаЗаявок, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьФормированиеИтогов() Тогда 
		Сообщить("По данному объявлению о проведении конкурса уже сформированы "+
		"итоги государственных закупок. Документ не может быть изменен."	);
		Отказ = Истина;	
	КонецЕсли;
	
	ВыделеннаяСумма = Товары.Итог("Сумма");
	
КонецПроцедуры //ПередЗаписью()

