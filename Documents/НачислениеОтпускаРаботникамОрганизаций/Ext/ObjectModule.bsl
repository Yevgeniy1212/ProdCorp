////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
Перем мОсновнойГрафикРаботыПредприятия Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ)
	
	Если Начисления.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;	
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	// определим все нерабочие дни, которые попадают на период отпуска,
	// чтобы не считать эти дни как прерывание периода отпуска
	
	ДатаНач = '29991231';
	ДатаКон = '00010101';
	
	Для Каждого Строка ИЗ ТНачислений Цикл
		Если Строка.Сторно Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНач = Мин(ДатаНач, Строка.ДатаНачала);
		ДатаКон = Макс(ДатаКон, Строка.ДатаОкончания);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сменный", Перечисления.ВидыРабочихГрафиков.Сменный);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВремяПоПерсональномуГрафикуРаботы.Дата, ВремяПоОсновномуГрафикуРаботы.Дата) КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаНач,
	|					Сотрудник = &Сотрудник
	|					И Организация = &Организация) КАК РаботникиОрганизации
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВремяПоОсновномуГрафикуРаботы
	|		ПО РаботникиОрганизации.ГрафикРаботы = ВремяПоОсновномуГрафикуРаботы.ГрафикРаботы
	|			И ВремяПоОсновномуГрафикуРаботы.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|			И ВремяПоОсновномуГрафикуРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ПерсональныйГрафик
	|		ПО РаботникиОрганизации.Сотрудник = ПерсональныйГрафик.Сотрудник
	|			И РаботникиОрганизации.Организация = ПерсональныйГрафик.Организация
	|			И РаботникиОрганизации.ГрафикРаботы = ПерсональныйГрафик.ГрафикРаботы
	|			И РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВремяПоПерсональномуГрафикуРаботы
	|		ПО ПерсональныйГрафик.Ссылка = ВремяПоПерсональномуГрафикуРаботы.ГрафикРаботы
	|			И ВремяПоОсновномуГрафикуРаботы.Дата = ВремяПоПерсональномуГрафикуРаботы.Дата
	|			И ВремяПоПерсональномуГрафикуРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|ГДЕ
	|	ЕСТЬNULL(ВремяПоПерсональномуГрафикуРаботы.ОсновноеЗначение, ВремяПоОсновномуГрафикуРаботы.ОсновноеЗначение) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКалендаря
	|";
	
	ТЗКалендаря = Запрос.Выполнить().Выгрузить();
	
	ПредыдущаяДатаОкончания = Дата('00010101');
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи
		Если Строка.Сторно Тогда
			Продолжить;
		КонецЕсли; 
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
		
			// пропустим дни, являющиеся нерабочими
			СтрокаКалендаря = ТЗКалендаря.Найти(ПредыдущаяДатаОкончания + мДлинаСуток, "ДатаКалендаря");
			Если СтрокаКалендаря <> Неопределено Тогда
				Индекс = ТЗКалендаря.Индекс(СтрокаКалендаря);
				Пока Индекс < ТЗКалендаря.Количество() 
						И ТЗКалендаря[Индекс].ДатаКалендаря < Строка.ДатаНачала Цикл
					ПредыдущаяДатаОкончания = ПредыдущаяДатаОкончания + мДлинаСуток;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
			// Изменено (
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток И Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.МатериальнаяПомощьКОтпуску Тогда
			// )
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ);
			КонецЕсли; 
		Иначе 	
			СтрокаНеПервая = Истина;
		КонецЕсли; 
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления) Экспорт 
	
	ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	
	// сформируем записи начислений отпускам
	Если НЕ ВыборкаПоШапкеДокумента.Отпуска.Пустой() Тогда
		ТЗОсновныеНачисления = НаборОсновныеНачисления.Выгрузить();
		ТЗОсновныеНачисления.Очистить();

		ВыборкаОтпуска = ВыборкаПоШапкеДокумента.Отпуска.Выбрать();
		Пока ВыборкаОтпуска.Следующий() Цикл
			Если НЕ ВыборкаОтпуска.Сторно Тогда
				ТекущаяДатаНачала = ВыборкаОтпуска.ДатаНачала;
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаОтпуска.ДатаОкончания);
				Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
					// строка движений
					Движение = ТЗОсновныеНачисления.Добавить();
					
					// Свойства
					Движение.ПериодРегистрации          = ПериодРегистрации;
					Движение.ПериодДействияНачало       = НачалоДня(ТекущаяДатаНачала);
					Движение.ПериодДействияКонец 	    = КонецДня(ТекущаяДатаОкончания);
					Движение.ВидРасчета				    = ВыборкаОтпуска.ВидРасчета;
					
					// Измерения
					Движение.Сотрудник                  = Сотрудник;
					Движение.ФизЛицо                    = ФизЛицо;

					Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// Реквизиты
					Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплатыОтпуска;
					Движение.КоэффициентИндексации		= 1;
					Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
					Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
						
						Движение.ГрафикРаботы  	        = ВыборкаПоШапкеДокумента.ГрафикРаботы;
						
						Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени = Истина  Тогда
							ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
						Иначе
							ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
						КонецЕсли;
					
					Иначе 
						
						Движение.ГрафикРаботы  	        = мОсновнойГрафикРаботыПредприятия;
						
						Если мОсновнойГрафикРаботыПредприятия.СуммированныйУчетРабочегоВремени = Истина  Тогда
							ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
						Иначе
							ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
						КонецЕсли;
					
					КонецЕсли;
					Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
					Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
					Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
					Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
					Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					Движение.СпособОтраженияВБухучете	= ВыборкаОтпуска.СпособОтраженияВБухучете;
					Движение.Авторасчет					= Истина;
					
					ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
					ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаОтпуска.ДатаОкончания);
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ДатаНачалаСобытия >= ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
			// если уже действует правила расчета с учетом коэффициента индексации
			ПроведениеРасчетов.РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, 
																ВыборкаПоШапкеДокумента.Сотрудник, 
																ТЗОсновныеНачисления);
		КонецЕсли;
		
		// перепишем в набор, не затирая уже существующие там записи
		// принудительно установим для всех строк таблицы Активность = Истина
		ТЗОсновныеНачисления.ЗаполнитьЗначения(Истина, "Активность");
		Для Каждого СтрокаТЗ Из ТЗОсновныеНачисления Цикл
			Движение = НаборОсновныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗ);
		КонецЦикла;
		
	КонецЕсли; 
	
	ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация]);
	
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// Возвращает дату начала события
//
Функция ПолучитьДатуНачалаСобытия(Сторно = Ложь) Экспорт

	ДатаНачалаОтпусков = Дата('00010101');
	
	ТаблицаДатНачалаОтпусков = Отпуска.Выгрузить(Новый Структура("Сторно", Сторно));
	ТаблицаДатНачалаОтпусков.Свернуть("ДатаНачала");
	ТаблицаДатНачалаОтпусков.Сортировать("ДатаНачала");
	
	Если ТаблицаДатНачалаОтпусков.Количество() > 0 Тогда
		ДатаНачалаОтпусков = ТаблицаДатНачалаОтпусков[0].ДатаНачала;
	КонецЕсли;
	
	Возврат ?(ДатаНачалаОтпусков = Дата('00010101'), НачалоДня(Дата), ДатаНачалаОтпусков);

КонецФункции // ПолучитьДатуНачалаСобытия()

// Возвращает даты начала и окончания всего периода отпусков
//
Процедура ПолучитьДатыНачалаИОкончанияОтпуска(ДатаНач, ДатаКон) Экспорт

	ДатаНач = '29991231';
	ДатаКон = '00010101';
	
	Для Каждого СтрокаТЧ Из Отпуска Цикл
		ДатаНач = Мин(ДатаНач, СтрокаТЧ.ДатаНачала);
		ДатаКон = Макс(ДатаКон, СтрокаТЧ.ДатаОкончания);
	КонецЦикла;
	
	Если ДатаНач = '29991231' Тогда
		ДатаНач = '00010101';
	КонецЕсли;

КонецПроцедуры // ПолучитьДатыНачалаИОкончанияОтпуска()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИсходныйДокумент, ,"Проведен, Дата, Номер, ПометкаУдаления, ПериодРегистрации, Комментарий, Ответственный, ПерерассчитываемыйДокумент, Автор");
	
	// получим список физлиц для перерасчета
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	НачислениеОтпускаРаботникамОрганизаций.Физлицо,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник,
	|	НачислениеОтпускаРаботникамОрганизаций.КалендарныхДнейЧасовКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.РабочихДнейЧасовКомпенсацииОтпуска,
	|	-НачислениеОтпускаРаботникамОрганизаций.РезультатКомпенсацииОтпуска КАК СторноРезультатКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.СпособОтраженияВБухучете,
	|	НачислениеОтпускаРаботникамОрганизаций.Отпуска,
	|	ЛОЖЬ КАК Сторно
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка = &ПерерассчитываемыйДокумент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		ВыборкаТЧОтпуска = Выборка.Отпуска.Выбрать();
		Пока ВыборкаТЧОтпуска.Следующий() Цикл
			Если НЕ ВыборкаТЧОтпуска.Сторно Тогда
				НоваяСтрока = Отпуска.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТЧОтпуска);
				НоваяСтрока.Сторно = Истина;
			КонецЕсли;
		КонецЦикла;
		ВыборкаТЧОтпуска.Сбросить();
		Пока ВыборкаТЧОтпуска.Следующий() Цикл
			Если НЕ ВыборкаТЧОтпуска.Сторно Тогда
				НоваяСтрока = Отпуска.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТЧОтпуска);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,	
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,	
	|	Начисления.Показатель6,
	|	Начисления.КоэффициентИндексации,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.КалендарныхДней КАК КалендарныхДней,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДополнительныеДанные,
	|	ИСТИНА КАК Сторно,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Ссылка.Проведен";
	
	ИндексСтроки = -1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		// добавим в начало табличной части, чтобы выглядело аналогично сторно-записям
		// в других перерассчитываемых документах
		ИндексСтроки = ИндексСтроки + 1;
		ЗаполнитьЗначенияСвойств(Начисления.Вставить(ИндексСтроки),Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, КомментироватьРасчет = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																	Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(УчетнаяПолитикаПоПерсоналуОрганизации).Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации, , "Расчет");
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда

		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 

	// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	Для Каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно);

		// несовпавшие по именам колонки
		Движение.ПериодРегистрации          	= СтрокаСторно.ПериодРегистрацииСторно;
		Движение.ПериодДействияНачало       	= СтрокаСторно.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец  		  	= СтрокаСторно.ПериодДействияКонецСторно;
		Движение.СторнируемыйДокумент  		  	= СтрокаСторно.Регистратор;
		Движение.Сторно							= Истина;
		Движение.Авторасчет						= Истина;

	КонецЦикла;
	
	// Очистим начисления
	Начисления.Очистить();
	РезультатКомпенсацииОтпуска = 0;
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация,,Истина, Налогоплательщик,, КомментироватьРасчет);
			Если КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 ИЛИ РабочихДнейЧасовКомпенсацииОтпуска <> 0 Тогда
				СреднийЗаработокРассчитан = НаборРасчетСреднего.Выгрузить().НайтиСтроки(Новый Структура("СпособРасчета",ВыборкаПоШапкеДокумента.СпособРасчета)).Количество() <> 0;
			КонецЕсли;
		Иначе
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
		КонецЕсли;
		
		Если КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 ИЛИ РабочихДнейЧасовКомпенсацииОтпуска <> 0 Тогда
			
			Если РассчитываемыеТаблицы.РасчетСреднего И НЕ СреднийЗаработокРассчитан Тогда
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
			Иначе
				ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
			КонецЕсли;
			
			Для Каждого ЗаписьДополнительныеНачисления Из НаборДополнительныеНачисления Цикл
				//Данные исправления пропускаем
				Если ЗаписьДополнительныеНачисления.Сторно И Не ЗаписьДополнительныеНачисления.Авторасчет Тогда
					Продолжить;
				КонецЕсли;
				РезультатКомпенсацииОтпуска = ЗаписьДополнительныеНачисления.Результат;
			КонецЦикла;
					
		КонецЕсли;
		
		// перепишем записи основных начислений в документ
		Для Каждого СтрокаНачислений Из НаборОсновныеНачисления Цикл
			
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			
			// несовпавшие по именам колонки
			НоваяСтрока.ДатаНачала 					= СтрокаНачислений.ПериодДействияНачало;
			НоваяСтрока.ДатаОкончания 				= СтрокаНачислений.ПериодДействияКонец;
			НоваяСтрока.ОтработаноДней 				= ?(СтрокаНачислений.ОтработаноДней <> 0, СтрокаНачислений.ОтработаноДней, СтрокаНачислений.УчитываемыеДни);
			НоваяСтрока.ОтработаноЧасов 			= ?(СтрокаНачислений.ОтработаноЧасов <> 0, СтрокаНачислений.ОтработаноЧасов, СтрокаНачислений.УчитываемыеЧасы);
			
		КонецЦикла; 
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
		Если НаборОсновныеНачисления.Количество() > 0 Тогда
			ИмяПВР = "ОсновныеНачисленияРаботниковОрганизаций"
		Иначе
			ИмяПВР = "ДополнительныеНачисленияРаботниковОрганизаций"
		КонецЕсли;
		УчетнаяПолитика = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
		ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего(ИмяПВР, Ссылка, НаборРасчетСреднего, УчетнаяПолитика);
	КонецЕсли;

	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		// перепишем записи расчета среднего заработка в документ
		РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
	КонецЕсли;
	
	// Добавлено (
	СформироватьДвиженияПоПособиюНаОздоровление(ВыборкаПоШапкеДокумента);
	// )

	Если РежимПерерасчета Тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборОсновныеНачисления.Записать();
		НаборДополнительныеНачисления.Записать();
	Иначе	
		// Удаляем движения для режима интерактивного расчета 
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать();
		
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;	
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры  // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);	
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	ИмеетсяПерерассчитываемыйДокумент = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		// надо перезаполнить регистры расчета, т.к. добавили сторно-строки
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.Очистить();
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки(); // только структуру без данных
	КонецЦикла;
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(УчетнаяПолитикаПоПерсоналуОрганизации).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий(); 
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		Если ИмеетсяПерерассчитываемыйДокумент Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
		КонецЕсли;
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);
		ДобавитьСторноСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);
	КонецЕсли;

	ДобавитьСтрокуДополнительныхНачисленийВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
	
	// свернем таблицы регистров накопления и запишем их в наборы записей
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
		НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
		НаборЗаписей.Записать();
	Конеццикла;
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать();
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать();
	КонецЕсли;
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
	НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
	НаборЗаписейПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
КонецПроцедуры // Перерассчитать()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ДокументОснование = Основание;	
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" 
		ИЛИ ИмяМакета = "РасчетСреднегоЗаработкаПодробно" Тогда
		// определим мин и макс дату отпусков
		ДатаНач = Неопределено;
		ДатаКон = Неопределено;
		ПолучитьДатыНачалаИОкончанияОтпуска(ДатаНач, ДатаКон);
		ПодробнаяФорма = ?(ИмяМакета = "РасчетСреднегоЗаработкаПодробно", Истина, Ложь);
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ПолучитьДатуНачалаСобытия(), 12, "с " + Формат(ДатаНач,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаКон,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска, , , ПодробнаяФорма);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработка","Расчет по среднему заработку");
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаПодробно", "Расчет по среднему заработку (подробная форма)");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(УчетнаяПолитикаПоПерсоналуОрганизации) 

	ДатаНачалаСобытия	= ПолучитьДатуНачалаСобытия();
	
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	Запрос = Новый Запрос;
    МестоРаботыТекст = "";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , 					Ссылка);
	Запрос.УстановитьПараметр("Организация" , 						Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация" , 				ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , 				ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ПериодРегистрации",				    ПериодРегистрации);
	Запрос.УстановитьПараметр("ПустаяДата", 						Дата('00010101'));
	Запрос.УстановитьПараметр("Сотрудник" , 						Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаРасчетаСУчетомИндексации", ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации());
	
	ИмяПВР = "ОсновныеНачисленияОрганизаций";
	Если КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 ИЛИ РабочихДнейЧасовКомпенсацииОтпуска <> 0 Тогда
		ИмяПВР = "ДополнительныеНачисленияОрганизаций";
		Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ?(ПериодРегистрации>=Дата(2018,1,1),
														ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018,
														ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения));
	Иначе	
		Запрос.УстановитьПараметр("ОсновнойВидРасчета" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп);
	КонецЕсли;
	Если ПериодРегистрации >= Дата(2018,1,1) Тогда
		Запрос.УстановитьПараметр("Компенсация", 								ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018);
		Запрос.УстановитьПараметр("СпособНалогообложенияИПНКомпенсацииОтпуска", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяИПН);
		Запрос.УстановитьПараметр("СпособНалогообложенияСНКомпенсацииОтпуска",  ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяСН);
		Запрос.УстановитьПараметр("СпособНалогообложенияОПВКомпенсацииОтпуска", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяОПВ);
		Запрос.УстановитьПараметр("СпособНалогообложенияСОКомпенсацииОтпуска",  ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяСО);
		Запрос.УстановитьПараметр("СпособНалогообложенияОППВКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяОППВ);
		Запрос.УстановитьПараметр("СпособНалогообложенияВОСМСКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяВОСМС);
		Запрос.УстановитьПараметр("СпособНалогообложенияООСМСКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяООСМС);
		Запрос.УстановитьПараметр("СпособНалогообложенияОПВРКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ОблагаетсяОПВР);
		Запрос.УстановитьПараметр("ВидДоходаОтпуска",  							ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018.ВидДохода);
	Иначе 
		Запрос.УстановитьПараметр("Компенсация", 								ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения);
		Запрос.УстановитьПараметр("СпособНалогообложенияИПНКомпенсацииОтпуска", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяИПН);
		Запрос.УстановитьПараметр("СпособНалогообложенияСНКомпенсацииОтпуска",  ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяСН);
		Запрос.УстановитьПараметр("СпособНалогообложенияОПВКомпенсацииОтпуска", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяОПВ);
		Запрос.УстановитьПараметр("СпособНалогообложенияСОКомпенсацииОтпуска",  ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяСО);
		Запрос.УстановитьПараметр("СпособНалогообложенияОППВКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяОППВ);
		Запрос.УстановитьПараметр("СпособНалогообложенияВОСМСКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяВОСМС);
		Запрос.УстановитьПараметр("СпособНалогообложенияООСМСКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяООСМС);
		Запрос.УстановитьПараметр("СпособНалогообложенияОПВРКомпенсацииОтпуска",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ОблагаетсяОПВР);
		Запрос.УстановитьПараметр("ВидДоходаОтпуска",  							ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения.ВидДохода);
	КонецЕсли;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ)
		|			ТОГДА &ПериодРегистрации
		|		ИНАЧЕ &ДатаНачалаСобытия
		|	КОНЕЦ КАК Период
		|ИЗ 
		|	Документ.НачислениеОтпускаРаботникамОрганизаций
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
		|			&ПериодРегистрации,
		|			Организация = &Организация) КАК УчетнаяПолитикаНУ
		|		ПО ИСТИНА
		|	
		|ГДЕ 
		|	Ссылка = &ДокументСсылка";
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ (" + МестоРаботыТекст + ") КАК МестаРабот;";
		МестоРаботыВТ = "МестоРаботыВТ";
	
	КонецЕсли;
	
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;

	ПериодыНачисленийТекст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачислениеОтпуска.Сотрудник,
		|	&ДатаНачалаСобытия КАК ПериодНачисления
		|ПОМЕСТИТЬ ВТ_ПериодыНачислений
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодРегистрации, Организация = &Организация) КАК УчетнаяПолитикаНУ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НачислениеОтпуска.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачислениеОтпуска.Сотрудник,
		|	ПериодНачисления";
		
	Запрос.Текст = ПериодыНачисленийТекст;
	Запрос.Выполнить();
	
	ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
	
	ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, Организация, Запрос);
	

	ТекстЗапроса = МестоРаботыТекст + "
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	               |	НачислениеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	               |	НачислениеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(НачислениеОтпуска.ДатаНачалаОтпуска, НачислениеОтпуска.ДатаОкончанияОтпуска, ДЕНЬ) + 1
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПланГрафикЗаполнен
	               |ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МИНИМУМ(НачислениеОтпуска.ДатаНачала) КАК ДатаНачалаОтпуска,
	               |		МАКСИМУМ(НачислениеОтпуска.ДатаОкончания) КАК ДатаОкончанияОтпуска
	               |	ИЗ
	               |		Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпуска
	               |	ГДЕ
	               |		НачислениеОтпуска.Ссылка = &ДокументСсылка
	               |		И НЕ НачислениеОтпуска.Сторно) КАК НачислениеОтпуска
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	               |		ПО (ГрафикиРаботыФизЛиц.Сотрудник = &Сотрудник)
	               |			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	               |		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НачислениеОтпуска.ДатаНачалаОтпуска И НачислениеОтпуска.ДатаОкончанияОтпуска)
	               |			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	               |			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	               |	НачислениеОтпуска.ДатаНачалаОтпуска,
	               |	НачислениеОтпуска.ДатаОкончанияОтпуска
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ГрафикРаботы,
	               |	ДатаНачалаОтпуска,
	               |	ДатаОкончанияОтпуска
				   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Отпуск.Дата,
	               |	Отпуск.ПериодРегистрации,
	               |	Отпуск.Организация,
	               |	ВЫБОР 
	               |		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	               |			ТОГДА Отпуск.Организация
	               |		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	Отпуск.Организация КАК Организация,
	               |	Отпуск.Ссылка,
	               |	Отпуск.Физлицо,
	               |	Отпуск.Физлицо.Наименование КАК ФизЛицоНаименование,
	               |	Отпуск.Сотрудник,
	               |	&ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	               |	Отпуск.КалендарныхДнейЧасовКомпенсацииОтпуска,
	               |	Отпуск.РабочихДнейЧасовКомпенсацииОтпуска,
	               |	Отпуск.РезультатКомпенсацииОтпуска,
	               |	Отпуск.СторноРезультатКомпенсацииОтпуска,
				   |	&ВидДоходаОтпуска КАК ВидДоходаКомпенсацииОтпуска,
				   |	&СпособНалогообложенияИПНКомпенсацииОтпуска КАК СпособНалогообложенияИПНКомпенсацииОтпуска,
				   |	&СпособНалогообложенияСНКомпенсацииОтпуска КАК СпособНалогообложенияСНКомпенсацииОтпуска,
				   |	&СпособНалогообложенияОПВКомпенсацииОтпуска КАК СпособНалогообложенияОПВКомпенсацииОтпуска,
				   |	&СпособНалогообложенияСОКомпенсацииОтпуска КАК СпособНалогообложенияСОКомпенсацииОтпуска,
				   |	&СпособНалогообложенияОППВКомпенсацииОтпуска КАК СпособНалогообложенияОППВКомпенсацииОтпуска,
   				   |	&СпособНалогообложенияООСМСКомпенсацииОтпуска КАК СпособНалогообложенияООСМСКомпенсацииОтпуска,
				   |	&СпособНалогообложенияВОСМСКомпенсацииОтпуска КАК СпособНалогообложенияВОСМСКомпенсацииОтпуска,
				   |	&СпособНалогообложенияОПВРКомпенсацииОтпуска КАК СпособНалогообложенияОПВРКомпенсацииОтпуска,
				   |	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьОПВ,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьСН,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьСО,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьОППВ,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) 
				   |			ТОГДА ЕСТЬNULL(ПериодыИсчисленияОППВ.ИсчислятьОППВ, ЛОЖЬ)
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ИсчислятьОППВ, 
				   |	ВЫБОР
   				   |		КОГДА (ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	               |				И Отпуск.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
				   |					И Отпуск.Физлицо = Отпуск.Организация.ИндивидуальныйПредприниматель)
				   |			ТОГДА ИСТИНА
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьВОСМС,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
				   |		КОГДА &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьООСМС,
				   |	ВЫБОР
				   |		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
				   |			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
				   |		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И &ВидДоходаОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК УчитыватьОПВР,
				   |	Отпуск.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
				   |	Отпуск.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
				   |	Отпуск.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,				   
				   |    &Компенсация КАК ВидРасчетаКомпенсацииОтпуска,
	               |	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	               |	РаботникиОрганизацииСрезПоследних.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
				   | 	ВЫБОР 
				   |		КОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
				   |				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
				   |				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
				   |			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
				   |		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы 
				   |	КОНЕЦ КАК ГрафикРаботы,
	               |	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	               |	100 КАК ПроцентОплатыОтпуска,
	               |	ЕСТЬNULL(КоэффициентыИндексацииЗаработка.Коэффициент, 1) КАК КоэффициентИндексации,
				   |	ПараметрыВидаРасчета.СпособРасчета КАК СпособРасчета,
				   |	ПересекающиесяСтроки.НомерСтроки,
				   |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
				   |	Отпуск.СпособОтраженияВБухучете,
				   |	Отпуск.Отпуска,
				   |	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
				   |	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
				   |	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
				   |	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	               |				И Отпуск.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	               |			ТОГДА Отпуск.Организация.ИндивидуальныйПредприниматель
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК ИндивидуальныйПредприниматель,
				   |	ВЫБОР
				   |		КОГДА Отпуск.Сотрудник.Организация = &ГоловнаяОрганизация
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
				   |";
				   
	Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда
		ТекстЗапроса = ТекстЗапроса + ",
	               |	ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -(ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка)) КАК ПериодРасчетаСреднегоЗаработкаНачало"
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
	               |	ПараметрыВидаРасчета.ЧислоМесяцев КАК ПериодРасчетаСреднегоЗаработка,
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -(ПараметрыВидаРасчета.ЧислоМесяцев)) КАК ПериодРасчетаСреднегоЗаработкаНачало"
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ",
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), СЕКУНДА, -(1)) КАК ПериодРасчетаСреднегоЗаработкаОкончание";
				   
   	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		           |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ)
				   |			ТОГДА ВЫБОР 
				   |					КОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
				   |						ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
				   |					ИНАЧЕ &Организация
				   |				КОНЕЦ
				   |		ИНАЧЕ ВЫБОР
				   |			КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
				   |				ТОГДА МестоРаботы.СтруктурнаяЕдиница
			       |			ИНАЧЕ &Организация
				   |		КОНЕЦ 
				   |	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
				   |	&Организация КАК СтруктурнаяЕдиница";			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	               |ИЗ
	               |	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	               |
	               |	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПараметрыВидаРасчета
	               |		ПО (ПараметрыВидаРасчета.Ссылка = &ОсновнойВидРасчета)
	               |
	               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |				&ДатаНачалаСобытия, 
	               |				Сотрудник = &Сотрудник 
	               |				И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО ИСТИНА
	               |";
				   
	Если КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 ИЛИ РабочихДнейЧасовКомпенсацииОтпуска <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
	               |	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	               |		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = &Компенсация)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	               |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |				ТЧОтпуска.Ссылка КАК Ссылка,
				   |				МИНИМУМ(ТЧОтпуска.НомерСтроки) КАК НомерСтроки,
				   |				МИНИМУМ(ТЧОтпуска2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
				   |			ИЗ
				   |				Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска
				   |
				   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска2
				   |					ПО (ТЧОтпуска2.Ссылка = &ДокументСсылка)
				   |						И ТЧОтпуска.НомерСтроки <> ТЧОтпуска2.НомерСтроки
				   |						И ТЧОтпуска.ДатаНачала <= ТЧОтпуска2.ДатаНачала
				   |						И (ТЧОтпуска.ДатаОкончания = &ПустаяДата
				   |							ИЛИ ТЧОтпуска.ДатаОкончания >= ТЧОтпуска2.ДатаНачала)
				   |							И ТЧОтпуска.Сторно = ТЧОтпуска2.Сторно
				   |
				   |		ГДЕ
				   |			ТЧОтпуска.Ссылка = &ДокументСсылка
				   |			И НЕ ТЧОтпуска.Сторно
   				   |
				   |		СГРУППИРОВАТЬ ПО
				   |			ТЧОтпуска.Ссылка) КАК ПересекающиесяСтроки
				   |		ПО ПересекающиесяСтроки.Ссылка = Отпуск.Ссылка
				   |
				   |	// учтем возможное повышение заработка в день начала события
				   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
				   |		ПО КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
				   |			И КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
				   |			И КоэффициентыИндексацииЗаработка.Период = &ДатаНачалаСобытия
				   |			И &ДатаНачалаСобытия >= &ДатаНачалаРасчетаСУчетомИндексации
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
				   |				&ПериодРегистрации,
				   |				Организация = &Организация) КАК УчетнаяПолитикаНУ
				   |		ПО ИСТИНА
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&ПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
				   |		ПО УчетНалогообложенияПоВидамДоходов.ВидДохода = &ВидДоходаОтпуска 
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
				   |		ПО Отпуск.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
				   |			И ПериодыИсчисленияОППВ.ПериодНачисления = &ДатаНачалаСобытия
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
				   |		ПО ГрафикиРаботыФизЛиц.Сотрудник = &Сотрудник
				   |			И ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация
				   |			И РаботникиОрганизацииСрезПоследних.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
				   |
				   |	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
				   |		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ТекстЗапроса = ТекстЗапроса + "
				   |	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
				   |		ПО Отпуск.Сотрудник = МестоРаботы.Сотрудник
				   |			И ВЫБОР
				   |				КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ)
				   |					ТОГДА &ПериодРегистрации
				   |				ИНАЧЕ &ДатаНачалаСобытия
				   |			КОНЕЦ = МестоРаботы.Период";
	КонецЕсли;
				   
	ТекстЗапроса = ТекстЗапроса + "
	               |
	               |ГДЕ
	               |	Отпуск.Ссылка = &ДокументСсылка";
				         
    Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
    МестоРаботыТекст = "";
	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			  ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", 					  ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ДокументСсылка", 				  Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", 						  ВыборкаПоШапкеДокумента.Сотрудник);
	Запрос.УстановитьПараметр("ПустаяДата", 					  Дата('00010101'));
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		  ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации", 				  ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", 				  ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", 	  ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("ФизЛицо", 						  ВыборкаПоШапкеДокумента.ФизЛицо);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 		  Справочники.Организации.ПустаяСсылка());

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "&ДатаНачалаСобытия") + " КАК Период";
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ (" + МестоРаботыТекст + ") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Сотрудник КАК Сотрудник,
			|	&ДатаНачалаСобытия КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Ссылка.Сотрудник КАК Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтавкиОСМСТекст + МестоРаботыТекст +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	НачислениеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	НачислениеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(НачислениеОтпуска.ДатаНачалаОтпуска, НачислениеОтпуска.ДатаОкончанияОтпуска, ДЕНЬ) + 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПланГрафикЗаполнен
	|ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(НачислениеОтпуска.ДатаНачала) КАК ДатаНачалаОтпуска,
	|		МАКСИМУМ(НачислениеОтпуска.ДатаОкончания) КАК ДатаОкончанияОтпуска
	|	ИЗ
	|		Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпуска
	|	ГДЕ
	|		НачислениеОтпуска.Ссылка = &ДокументСсылка) КАК НачислениеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО (ГрафикиРаботыФизЛиц.Сотрудник = &Сотрудник)
	|			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НачислениеОтпуска.ДатаНачалаОтпуска И НачислениеОтпуска.ДатаОкончанияОтпуска)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	НачислениеОтпуска.ДатаНачалаОтпуска,
	|	НачислениеОтпуска.ДатаОкончанияОтпуска
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы,
	|	ДатаНачалаОтпуска,
	|	ДатаОкончанияОтпуска
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ВидДохода КАК ВидДохода,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяИПН КАК СпособНалогообложенияИПН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСН КАК СпособНалогообложенияСН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВ КАК СпособНалогообложенияОПВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСО КАК СпособНалогообложенияСО,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОППВ КАК СпособНалогообложенияОППВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяВОСМС КАК СпособНалогообложенияВОСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяООСМС КАК СпособНалогообложенияООСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВР КАК СпособНалогообложенияОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА &ФизЛицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА &ФизЛицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ЕСТЬNULL(ПериодыИсчисленияОППВ.ИсчислятьОППВ, ЛОЖЬ) КАК ИсчислятьОППВ
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",	
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.КоэффициентИндексации,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.КалендарныхДней,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации.Владелец <> &Организация
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ЕСТЬNULL(Отпуска.ДатаНачалаОтпуска, &ПустаяДата) КАК ДатаНачалаОтпуска,
	|	ЕСТЬNULL(Отпуска.ДатаОкончанияОтпуска, &ПустаяДата) КАК ДатаОкончанияОтпуска,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА СтрокиНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ СтрокиНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.СуммаВычетовДоходовОтОбратного,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам и мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА СтрокиНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачала 
	|					И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник 
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|		
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод 
	|			И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник 
	|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО ГрафикиРаботыФизЛиц.Сотрудник = &Сотрудник 
	|			И ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация 
	|			И РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
	|		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&ПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО СтрокиНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Отпуска.Ссылка,
	|				МИНИМУМ(Отпуска.ДатаНачала) КАК ДатаНачалаОтпуска,
	|				МАКСИМУМ(Отпуска.ДатаОкончания) КАК ДатаОкончанияОтпуска 
	|			ИЗ
	|				Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК Отпуска
	|
	|			ГДЕ 
	|				Отпуска.Ссылка = &ДокументСсылка
	|				И НЕ Отпуска.Сторно
	|
	|			СГРУППИРОВАТЬ ПО
	|				Отпуска.Ссылка) КАК Отпуска
	|		ПО Отпуска.Ссылка = СтрокиНачисления.Ссылка";
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО СтрокиНачисления.Ссылка.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА СтрокиНачисления.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "СтрокиНачисления.ДатаНачала") + " = СтавкиОСМС.Период";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "&ДатаНачалаСобытия") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
		|		ПО ПериодыИсчисленияОППВ.ПериодНачисления = &ДатаНачалаСобытия
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|";
                      
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ПоКалендарным", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Запрос.УстановитьПараметр("ОтпускПоКалендарным", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , НачалоМесяца(ПолучитьДатуНачалаСобытия()));

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокаРасчетСреднего.НомерСтроки,
		|	СтрокаРасчетСреднего.ВидРасчета,
		|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	ВЫБОР 
		|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата 
		|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) 
		|		ИНАЧЕ &ПустаяДата 
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
		|	СтрокаРасчетСреднего.НормаПоПятидневке,
		|	СтрокаРасчетСреднего.ОтработаноДней,
		|	СтрокаРасчетСреднего.ОтработаноЧасов,
		|	СтрокаРасчетСреднего.НормаЧасов,
		|	СтрокаРасчетСреднего.КалендарныхДней,
		|	СтрокаРасчетСреднего.ЧислоМесяцев,
		|	СтрокаРасчетСреднего.КоэффициентИндексации,
		|	СтрокаРасчетСреднего.Размер,
		|	СтрокаРасчетСреднего.Результат,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, МЕСЯЦ, -(ПараметрыВидаРасчета.ВидРасчета.ПериодРасчетаСреднегоЗаработка)) КАК ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, СЕКУНДА, -(1)) КАК ПериодРасчетаСреднегоЗаработкаОкончание,
		|	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
		|	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии,
		|	NULL КАК ПериодРасчетаСреднегоЗаработка,
		|	&ПоКалендарным КАК СпособРасчета
		|ИЗ
		|	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднего КАК СтрокаРасчетСреднего
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			ВидыРасчета.ВидРасчета КАК ВидРасчета
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|				НачислениеОтпускаРаботникамОрганизацииНачисления.ВидРасчета КАК ВидРасчета
		|			ИЗ
		|				Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК НачислениеОтпускаРаботникамОрганизацииНачисления
		|			
		|			ГДЕ
		|				НачислениеОтпускаРаботникамОрганизацииНачисления.Ссылка = &ДокументСсылка И
		|				НачислениеОтпускаРаботникамОрганизацииНачисления.ВидРасчета.СпособРасчета = &ПоКалендарным И
		|				(НЕ(НачислениеОтпускаРаботникамОрганизацииНачисления.Сторно))
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				&ОтпускПоКалендарным) КАК ВидыРасчета) КАК ПараметрыВидаРасчета
		|		ПО (ИСТИНА)
		|
		|ГДЕ
		|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаРасчетСреднего.НомерСтроки
		|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации, Заголовок = "", Режим = "") 

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник);
	Если НЕ ЕстьСотрудник Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	УказанаДатаНачалаОтпуска = НЕ ВыборкаПоШапкеДокумента.Отпуска.Пустой();
	
	// ДатаНачалаОтпуска
	Если НЕ УказанаДатаНачалаОтпуска Тогда
		Если ВыборкаПоШапкеДокумента.ДатаНачалаСобытия < ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Тогда
			Если ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииОтпуска = 0 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Должна быть указана дата начала отпуска или количество календарных дней компенсации отпуска!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска = 0 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Должна быть указана дата начала отпуска или количество рабочих дней (часов) компенсации отпуска!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// противоречие другой строке табличной части Отпуска
	Если ВыборкаПоШапкеДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоШапкеДокумента.НомерСтроки) +
									""" табл. части ""Ежегодные оплачиваемые отпуска"": ";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "период отпуска пересекается с периодом строки " + ВыборкаПоШапкеДокумента.КонфликтнаяСтрокаНомер + "!", Отказ, Заголовок);
	КонецЕсли;	
	
	// проверка на увольнение
	Если ВыборкаПоШапкеДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия, "ДЛФ=DD") + " сотрудник " + ВыборкаПоШапкеДокумента.ФизЛицоНаименование + " уже уволен (с " + Формат(ВыборкаПоШапкеДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
	КонецЕсли;
	
	// Отпуска
	ВыборкаПоСтрокамДокумента = ВыборкаПоШапкеДокумента.Отпуска.Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Ежегодные оплачиваемые отпуска"": ";
									
		УказанаДатаНачалаОтпуска = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		// Дата начала отпуска
		Если НЕ УказанаДатаНачалаОтпуска Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
		КонецЕсли;
		
		Если УказанаДатаНачалаОтпуска Тогда
			
			// проверка дат начала и окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания отпуска не должна быть меньше даты начала!", Отказ, Заголовок);
			КонецЕсли;	
			
			// вид расчета
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Режим <> "Расчет" Тогда
		// Компенсация отпуска
		Если ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска <> 0 
			И ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указано количество дней (часов) для начисления компенасации отпуска!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
		
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	ДатаНачалаСобытия = ВыборкаПоСтрокамДокумента.ДатаНачалаОтпуска;
	ДатаОкончанияСобытия = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончанияОтпуска);
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > ДатаОкончанияСобытия
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > ДатаОкончанияСобытия) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ПериодДействияКонец 	    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник                  = ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней 					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов 				= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке 		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
	КонецЕсли;

	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке = ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеДни  = ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.УчитываемыеЧасы = ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли; 
	Движение.КалендарныхДней 	 = ВыборкаПоСтрокамДокумента.КалендарныхДней;
	
	// Реквизиты
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.КоэффициентИндексации		= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.ДополнительныеДанные  	    = ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	
	Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
		Движение.ГрафикРаботы			= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Иначе 
		Движение.ГрафикРаботы			= мОсновнойГрафикРаботыПредприятия;
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени = Истина Тогда
		Движение.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		Движение.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Иначе
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
	
	ДатаНачалаСобытия = ?(ВыборкаПоСтрокамДокумента.Сторно И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СторнируемыйДокумент), ПолучитьДатуНачалаСобытия(Истина), ВыборкаПоШапкеДокумента.ДатаНачалаСобытия);
	
	Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;	
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента,НаборДополнительныеНачисления,УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 
	 ИЛИ ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска <> 0 Тогда
	 
		Движение = НаборДополнительныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации          	= Мин(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),Макс(ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
		Если ВыборкаПоШапкеДокумента.ПериодРегистрации >= Дата(2018,1,1) Тогда
			Движение.ВидРасчета					= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018;
		Иначе 
			Движение.ВидРасчета					= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения;
		КонецЕсли;
				
		// Измерения
		Движение.Сотрудник                 		= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ФизЛицо                   		= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Результат						= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска;
		
		// Реквизиты
		Движение.Показатель1					= ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииОтпуска;
		Движение.Показатель2					= ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска;
		Движение.КоэффициентИндексации			= ВыборкаПоШапкеДокумента.КоэффициентИндексации;
		
		Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
			Движение.ГрафикРаботы				= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Иначе 
			Движение.ГрафикРаботы				= мОсновнойГрафикРаботыПредприятия;
		КонецЕсли;
		
		Движение.ПодразделениеОрганизации		= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособОтраженияВБухучете		= ВыборкаПоШапкеДокумента.СпособОтраженияВБухучете;
		Движение.Авторасчет						= Истина;
		Движение.СторнируемыйДокумент			= ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуДополнительныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСторноСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента,НаборДополнительныеНачисления,УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если (ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииОтпуска <> 0 ИЛИ ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска <> 0)
	   И ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска <> 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации          	= Мин(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),Макс(ВыборкаПоШапкеДокумента.ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
		Если ПериодРегистрации >= Дата(2018,1,1) Тогда
			Движение.ВидРасчета					= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения2018;
		Иначе 
			Движение.ВидРасчета					= ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения;
		КонецЕсли;
		
		Движение.Сторно							= Истина;
		
		// Измерения
		Движение.Сотрудник                 		= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ФизЛицо                   		= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Результат						= ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска;
		
		// Реквизиты
		Движение.Показатель1					= - ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииОтпуска;
		Движение.Показатель2					= - ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииОтпуска;
		Движение.КоэффициентИндексации			= ВыборкаПоШапкеДокумента.КоэффициентИндексации;

		Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
			Движение.ГрафикРаботы				= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Иначе 
			Движение.ГрафикРаботы				= мОсновнойГрафикРаботыПредприятия;
		КонецЕсли;
		
		Движение.ПодразделениеОрганизации		= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособОтраженияВБухучете		= ВыборкаПоШапкеДокумента.СпособОтраженияВБухучете;
		Движение.Авторасчет						= Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = НаборРасчетСреднего.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало        	= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец     		= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    	= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.Сотрудник                    	= ВыборкаПоШапкеДокумента.Сотрудник;	
	Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.ФизЛицо;	
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОтработаноПоПятидневке			= ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке;
	Движение.НормаПоПятидневке				= ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
	Движение.ОтработаноДней					= ВыборкаПоСтрокамДокумента.ОтработаноДней;
	Движение.ОтработаноЧасов				= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	Движение.НормаЧасов						= ВыборкаПоСтрокамДокумента.НормаЧасов;
	Движение.КалендарныхДней				= ВыборкаПоСтрокамДокумента.КалендарныхДней;
	
	// Реквизиты
	Движение.Размер				 			= ВыборкаПоСтрокамДокумента.Размер;
	Движение.КоэффициентИндексации 			= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.ЧислоМесяцев 					= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработка;
	Движение.СпособРасчета					= ВыборкаПоСтрокамДокумента.СпособРасчета;
	Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.ДатаНачалаПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаНачалаПериодаПремии;
	Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаОкончанияПериодаПремии;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоТЧ.Результат = 0 Тогда
		// нулевые суммы не записываем
		Возврат;
	КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) И ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
				
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 

	КонецЕсли;
	

	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) И ВыборкаПоТЧ.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ОПВСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) И ВыборкаПоТЧ.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) И ВыборкаПоТЧ.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ
		И ВыборкаПоТЧ.ИсчислятьОППВ
		И ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) 
		И ВыборкаПоТЧ.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВОСМССведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) И ВыборкаПоТЧ.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) И ВыборкаПоТЧ.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияООСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВР) И ВыборкаПоТЧ.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	// Свойства
	Движение.Период                 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
Процедура ДобавитьСтрокуДополнительныхНачисленийВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска <> 0 Тогда
		
	    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	    КонецЕсли;
	
		////////////////////////////////
		// ИПНСведенияОДоходах
	
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияИПНКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьИПН Тогда
			
			Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияИПНКомпенсацииОтпуска;
			Движение.ВидРасчета				= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Движение.ВидДохода				= ВыборкаПоШапкеДокумента.ВидДоходаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
						
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		

		////////////////////////////////
		// СНСведенияОДоходах
	
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияСНКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьСН Тогда
			
			Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения 	= ВыборкаПоШапкеДокумента.СпособНалогообложенияСНКомпенсацииОтпуска;
			Движение.ВидРасчета		 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;


		////////////////////////////////
		// ОПВСведенияОДоходах

		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияОПВКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьОПВ Тогда
			
			Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияОПВКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		

		////////////////////////////////
		// СОСведенияОДоходах
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияСОКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьСО Тогда
			
			Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияСОКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		

		////////////////////////////////
		// ОППВСведенияОДоходах
		
		Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ
			И ВыборкаПоШапкеДокумента.ИсчислятьОППВ
			И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияОППВКомпенсацииОтпуска) 
			И ВыборкаПоШапкеДокумента.УчитыватьОППВ Тогда
			
			Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияОППВКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		
		////////////////////////////////
		// ООСМССведенияОДоходах
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияООСМСКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьООСМС 
			И ВыборкаПоШапкеДокумента.ПериодРегистрации >= Дата("20170701")
				И НЕ ВыборкаПоШапкеДокумента.ФизЛицо = ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель Тогда

			
			Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияООСМСКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;

		////////////////////////////////
		// ВОСМССведенияОДоходах
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияВОСМСКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьВОСМС
			И (ВыборкаПоШапкеДокумента.ПериодРегистрации >= Дата("20190101")
				ИЛИ (ВыборкаПоШапкеДокумента.ПериодРегистрации >= Дата("20170701")
					И ВыборкаПоШапкеДокумента.ФизЛицо = ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель)) Тогда

			
			Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияВОСМСКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Движение.ВидДохода				= ВыборкаПоШапкеДокумента.ВидДоходаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		
		////////////////////////////////
		// ОПВРСведенияОДоходах
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособНалогообложенияОПВРКомпенсацииОтпуска) И ВыборкаПоШапкеДокумента.УчитыватьОПВР Тогда
			
			Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Измерения
			Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения  = ВыборкаПоШапкеДокумента.СпособНалогообложенияОПВРКомпенсацииОтпуска;
			Движение.ВидРасчета 	 		= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
			
		КонецЕсли;
		
		////////////////////////////////
		// ВзаиморасчетыСРаботникамиОрганизаций
		
		Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
		
		// Свойства
		Движение.Период                 = КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоШапкеДокумента.РезультатКомпенсацииОтпуска + ВыборкаПоШапкеДокумента.СторноРезультатКомпенсацииОтпуска; 
		
		// Реквизиты
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;

	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуДополнительныхНачисленийВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	
	// Проверим непрерывночть следования записей начислений
    ПроверитьНепрерывностьЗаписейНачислений(Отказ);

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(УчетнаяПолитикаПоПерсоналуОрганизации);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, УчетнаяПолитикаПоПерсоналуОрганизации, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;
			
			// получим реквизиты табличной части Начисления
			РезультатЗапросаНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаНачислениям.Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);

				КонецЕсли;

			КонецЦикла;
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);
				ДобавитьСторноСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);
			    ДобавитьСтрокуДополнительныхНачисленийВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
			КонецЕсли;
			
			// получим реквизиты табличной части РасчетСреднего 
			РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
			ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();

			Пока ВыборкаПоРасчетСреднего.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка, УчетнаяПолитикаПоПерсоналуОрганизации);

				КонецЕсли;

			КонецЦикла;

			Если НЕ Отказ Тогда
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				Конеццикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
		
		// Скопируем параметры начисления
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник 	= ДанныеЗаполнения.Сотрудник;
		Физлицо 	= ДанныеЗаполнения.Физлицо;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

Функция ПолучитьОсновнойОкладРаботника(ФизЛицо, ДатаОкончания)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник.ФизЛицо,
	              // |	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Приказ,
	               |	ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Показатель1, 0) КАК Показатель1
	               |ИЗ
	               |	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	               |			&Дата,
	               |			
	               |				 Сотрудник.ФизЛицо = &ФизЛицо) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	               |ГДЕ
	               |	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА";
	Запрос.УстановитьПараметр("Дата", ДатаОкончания);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда  	
		 Размер = Выборка.Показатель1;
	 Иначе
		 Размер = 0;   	
	КонецЕсли;
	Возврат Размер;
	
КонецФункции	

//БИТ
Процедура СформироватьДвиженияПоПособиюНаОздоровление(ВыборкаПоШапкеДокумента)
	
	ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ВыборкаПоОкруглению = ПолучитьПараметрыОкругления(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.МатериальнаяПомощьКОтпуску);
	Если ВыборкаПоОкруглению.Следующий() Тогда 	
		 ПорядокОкругления =  ВыборкаПоОкруглению.ПорядокОкругления;
		 МетодОкругления   =  ВыборкаПоОкруглению.МетодОкругления; 	
	КонецЕсли;	 
	Если НЕ ВыборкаПоШапкеДокумента.Отпуска.Пустой() И КолвоОкладов<>0 Тогда		
		ТЗ = Отпуска.Выгрузить();
		Если ТЗ.Количество()<>0 Тогда
			ТЗ.Сортировать("ДатаОкончания Убыв");
			Строка = ТЗ.Получить(0);
			ДатаОкончания = Строка.ДатаОкончания;
        Иначе			
		    ДатаОкончания = ДатаНачалаСобытия;
		КонецЕсли;
		ОсновнойОклад = ПолучитьОсновнойОкладРаботника(ВыборкаПоШапкеДокумента.ФизЛицо, ДатаОкончания);
		ВыборкаОтпуска = ВыборкаПоШапкеДокумента.Отпуска.Выбрать();
		ПервыйПроход = Истина;
		Пока ВыборкаОтпуска.Следующий() Цикл
			КолвоДнейОтпуска = (ВыборкаОтпуска.ДатаОкончания-ВыборкаОтпуска.ДатаНачала)/86400+1;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.МатериальнаяПомощьКОтпуску);
			ПараметрыОтбора.Вставить("Сторно", Ложь);
			НайденныеСтроки = Начисления.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
				   Начисления.Удалить(СтрокаТЧ);	
				КонецЦикла; 				
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеДляОздоровления;
				НоваяСтрока.ДатаНачала = ВыборкаОтпуска.ДатаНачала;
				НоваяСтрока.ДатаОкончания = ВыборкаОтпуска.ДатаОкончания;				
				НоваяСтрока.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;	
				
				
				Если ПервыйПроход Тогда
					НоваяСтрока.Результат = ОбщегоНазначения.ОкруглитьЧисло(КолвоОкладов * ОсновнойОклад/30*КолвоДнейОтпуска, ПорядокОкругления, МетодОкругления);	
				Иначе
					НоваяСтрока.Результат = 0;
				КонецЕсли;
				ПервыйПроход = Ложь; 
			Иначе	
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.МатериальнаяПомощьКОтпуску;
				НоваяСтрока.ДатаНачала = ВыборкаОтпуска.ДатаНачала;
				
				Если ВыборкаОтпуска.ДатаОкончания > КонецМесяца(ВыборкаОтпуска.ДатаНачала) Тогда
					 НоваяСтрока.ДатаОкончания = КонецМесяца(ВыборкаОтпуска.ДатаНачала);
				Иначе
					 НоваяСтрока.ДатаОкончания = ВыборкаОтпуска.ДатаОкончания;				
				КонецЕсли;
				 
				НоваяСтрока.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
				
				Если ПервыйПроход Тогда
					НоваяСтрока.Результат = ОбщегоНазначения.ОкруглитьЧисло(КолвоОкладов * ОсновнойОклад/30*КолвоДнейОтпуска, ПорядокОкругления, МетодОкругления);	
				Иначе
					НоваяСтрока.Результат = 0;
				КонецЕсли;
				ПервыйПроход = Ложь;  
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьПараметрыОкругления(ВидРасчета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПорядокОкругленияВР.МетодОкругления, ПорядокОкругленияОбщ.МетодОкругления) КАК МетодОкругления,
	               |	ЕСТЬNULL(ПорядокОкругленияВР.ПорядокОкругления, ПорядокОкругленияОбщ.ПорядокОкругления) КАК ПорядокОкругления
	               |ИЗ
	               |	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(&ПериодРегистрации, ВидРасчета = НЕОПРЕДЕЛЕНО) КАК ПорядокОкругленияОбщ
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(&ПериодРегистрации, ВидРасчета = &ВидРасчета) КАК ПорядокОкругленияВР
	               |		ПО (ИСТИНА)";     	
	
	Запрос.УстановитьПараметр("ПериодРегистрации", Дата);
    Запрос.УстановитьПараметр("ВидРасчета",        ВидРасчета);
    Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ()

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мДлинаСуток = 86400; // в секундах
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОсновнойГрафикРаботыПредприятия = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
