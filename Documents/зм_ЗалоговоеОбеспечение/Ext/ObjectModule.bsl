////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

функция ПолучитьДопСчетУчета(Счетучета)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетУчета",СчетУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зм_СоответствиеСчетовУчетаДопСчетамУчета.СчетУчетаДоп
	|ИЗ
	|	РегистрСведений.зм_СоответствиеСчетовУчетаДопСчетамУчета КАК зм_СоответствиеСчетовУчетаДопСчетамУчета
	|ГДЕ
	|	зм_СоответствиеСчетовУчетаДопСчетамУчета.СчетУчета = &СчетУчета
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СчетУчетаДоп;
	Иначе
		Возврат НЕОПРЕДЕЛЕНО;
	КонецЕсли;	
	
КонецФункции

 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,
						|СчетУчета,
						|Контрагент,
						|ДоговорКонтрагента,
						|Гарантия,
						|Сумма,");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

 
// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам( СтруктураШапкиДокумента,Отказ, Заголовок)
		ПроводкиБУ = Движения.Типовой;
	
		ДатаДока = СтруктураШапкиДокумента.Дата;
	
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//
		Если ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Регистрация Тогда
			Проводка.СчетДт 	 = Счетучета;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТипОперации);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 4, Гарантия);			
			Проводка.Содержание = "Регистрация залогового обеспечения";
		ИначеЕсли ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Уменьшение Тогда

			Проводка.СчетКт      = Счетучета;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,ТипОперации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,4,Гарантия);
			Проводка.Содержание = "Уменьшение залогового обеспечения";
		ИначеЕсли ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Увеличение Тогда

			Проводка.СчетДт      = Счетучета;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,ТипОперации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,Гарантия);
			Проводка.Содержание = "Увеличение залогового обеспечения";
		Иначе
			Проводка.СчетКт      = Счетучета;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,ТипОперации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,4,Гарантия);
			Проводка.Содержание = "Закрытие залогового обеспечения";
			
		КонецЕсли;
		
		Проводка.Сумма = Сумма;
		
		СчетУчетаДоп = ПолучитьДопСчетУчета(Счетучета);
		
		Если СчетУчетаДоп  <> Неопределено Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			//
			Если ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Регистрация Тогда
				Проводка.СчетКт 	 = СчетУчетаДоп;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТипОперации);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 4, Гарантия);			
				Проводка.Содержание = "Регистрация залогового обеспечения";
			ИначеЕсли ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Уменьшение Тогда
				
				Проводка.СчетДт      = СчетУчетаДоп;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,Гарантия);
				Проводка.Содержание = "Уменьшение залогового обеспечения";
			ИначеЕсли ВидОперации = Перечисления.зм_ВидыОперацийЗалоговогоОбеспечения.Увеличение Тогда
				
				Проводка.СчетКт      = СчетУчетаДоп;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,4,Гарантия);
				Проводка.Содержание = "Увеличение залогового обеспечения";
			Иначе
				Проводка.СчетДт      = СчетУчетаДоп;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,4,Гарантия);
				Проводка.Содержание = "Закрытие залогового обеспечения";
				
			КонецЕсли;
			
			Проводка.Сумма = Сумма;
		КонецЕсли;
		Движения.Типовой.Записывать = Истина;
		
	КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

			
	// Движения по документу
	Если Не Отказ Тогда

			ДвиженияПоРегистрам( СтруктураШапкиДокумента,Отказ, Заголовок);
	КонецЕсли;
  	
КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
