////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТаблицаТекущегоСостояния;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет аналитику счета табличной части
// значениями по умолчанию
//
Процедура ЗаполнитьАналитикуСчета(ИмяСчета, ИмяАналитикиСчета) Экспорт
	
	Для Счетчик = 1  По  3 Цикл			
		
		Если ЭтотОбъект[ИмяСчета].ВидыСубконто.Количество() >= Счетчик Тогда		
			// Заполняем значения аналитики НМА
			Если ЭтотОбъект[ИмяСчета].ВидыСубконто[Счетчик - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				ЭтотОбъект[ИмяАналитикиСчета + Счетчик]= НематериальныйАктив;
			КонецЕсли;											
		Иначе
			ЭтотОбъект[ИмяАналитикиСчета + Счетчик] = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет счета учета значениями по умолчанию 
//
Процедура ЗаполнитьСчетаУчета(ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ЗаполнятьБУ Тогда  
		СчетДоходовБУ  = ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов;
		СчетРасходовБУ = ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;
		СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	КонецЕсли;
    	
	ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(ЭтотОбъект, СчетДоходовБУ, "СубконтоДоходовБУ", 3);
	ЗаполнитьАналитикуСчета("СчетДоходовБУ", "СубконтоДоходовБУ");
	
	ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(ЭтотОбъект, СчетРасходовБУ, "СубконтоРасходовБУ", 3);	
	ЗаполнитьАналитикуСчета("СчетРасходовБУ", "СубконтоРасходовБУ");
	
	Если ЗаполнятьНУ Тогда
   		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, "СчетДоходовБУ", "СчетДоходовНУ", Дата);	
		ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(ЭтотОбъект, СчетДоходовНУ, "СубконтоДоходовНУ", 3);
		ЗаполнитьАналитикуСчета( "СчетДоходовНУ", "СубконтоДоходовНУ");
		
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, "СчетРасходовБУ", "СчетРасходовНУ", Дата);	
		ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(ЭтотОбъект, СчетРасходовНУ,  "СубконтоРасходовНУ", 3);
		ЗаполнитьАналитикуСчета( "СчетРасходовНУ", "СубконтоРасходовНУ");		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчета

// Производит заполнение и установку реквизитов налогового учета и НДС 
// в строке табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета() Экспорт
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");	
	НДСВидОперацииРеализации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойВидОперацииРеализации");
Конецпроцедуры	

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ДокументОснование = Основание.Ссылка;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		   		
		Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);
				КонецЕсли;
				
			#КонецЕсли

			Возврат;       		
		КонецЕсли;  	
		          		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		Если ЗначениеЗаполнено(Основание.ДоверенностьЛицо) Тогда     
			ДоверенностьЛицо   = Основание.ДоверенностьЛицо;	
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Основание.ДоверенностьНомер) Тогда     
			ДоверенностьНомер  = Основание.ДоверенностьНомер;	
		КонецЕсли; 

		Если ЗначениеЗаполнено(Основание.ДоверенностьДата) Тогда     
			ДоверенностьДата   = Основание.ДоверенностьДата;	
		КонецЕсли; 

		Если ЗначениеЗаполнено(Основание.ДоверенностьВыдана) Тогда     
			ДоверенностьВыдана = Основание.ДоверенностьВыдана;
		КонецЕсли; 
		        		
		СписокНМА = Новый СписокЗначений;
		СтруктурапоСуммам =  Новый Соответствие;
		
		СтруктураОстатков = УчетНДСИАкциза.ПолучитьСписокТоваровПодтвержденныхОтгрузками(Основание, Ложь);
					
		//Проверим отстаток по НМА для ввода на основании
		Для Каждого НМА Из Основание.НМА Цикл
			ОстатокСумма = УчетНДСИАкциза.ПолучитьОстатокИзСФ(НМА, "НМА", СтруктураОстатков,Ложь,Ложь);
			Если ОстатокСумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			СписокНМА.Добавить(НМА.НематериальныйАктив);
			СтруктурапоСуммам.Вставить(НМА.НематериальныйАктив,ОстатокСумма);
		КонецЦикла;
		     		
		Если СписокНМА.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		 		
		Если СписокНМА.Количество() = 1 Тогда			
			НематериальныйАктив =  СписокНМА[0].Значение;			
		Иначе  			
			ВыбранныйНМА =  СписокНМА.ВыбратьЭлемент("Выберите нематериальный актив", СписокНМА[0]);
			
			Если ВыбранныйНМА = Неопределено Тогда
				Возврат;
			КонецЕсли; 
			НематериальныйАктив = ВыбранныйНМА.Значение;	
			
		КонецЕсли;
		
		СтрокаСОснование = Основание.НМА.Найти(НематериальныйАктив, "НематериальныйАктив");
                   				
		Если  Не СтрокаСОснование = Неопределено  Тогда				
			
			Сумма     = СтруктураПоСуммам[НематериальныйАктив];
			СтавкаНДС = СтрокаСОснование.СтавкаНДС;
			СуммаНДС  = УчетНДСИАкциза.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДСИАкциза.ПолучитьСтавкуНДС(СтавкаНДС));
		КонецЕсли;
				
		ЗаполнитьРеквизитыНалоговогоУчета();
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
		ЗаполнитьСчетаУчета(Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));					
	КонецЕсли;
	
КонецПроцедуры


#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой ДА-1,
// 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта (накладной) приемки-передачи НМА
//
Функция ПечатьДА1()
	
		// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", 	 ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Поступил", 	 Перечисления.ВидыСостоянийНМА.Поступил);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ПередачаНМА.Дата,
	               |	ПередачаНМА.Номер,
	               |	ПередачаНМА.Организация,
	               |	ПередачаНМА.СтруктурноеПодразделение,
	               |	ПередачаНМА.Контрагент,
	               |	ПередачаНМА.СчетУчетаРасчетовСКонтрагентом,
	               |	ПередачаНМА.СчетДоходовБУ,
	               |	ПередачаНМА.ДокументОснование,
	               |	ВЫРАЗИТЬ(ПередачаНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК НематериальныйАктивНаименованиеПолное,
	               |	ПередачаНМА.НематериальныйАктив.Код КАК ИнвентарныйНомер,
	               |	ПередачаНМА.НематериальныйАктив КАК НематериальныйАктивНаименование,
	               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	               |	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	               |	СостоянияНМАОрганизацийСрезПоследних.Период КАК ДатаПриобретения,
	               |	СчетаУчетаНМАСрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаНМАСрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	ПередачаНМА.Ответственный,
	               |	ПередачаНМА.УдалитьДоверенность,
	               |	ПередачаНМА.ДоверенностьЛицо,
	               |	ПередачаНМА.ДоверенностьНомер,
	               |	ПередачаНМА.ДоверенностьДата,
	               |	ПередачаНМА.ДоверенностьВыдана,
	               |	ПередачаНМА.СуммаНДС,
	               |	ПередачаНМА.СуммаВключаетНДС,
	               |	ПередачаНМА.СуммаДокумента
	               |ИЗ
	               |	Документ.ПередачаНМА КАК ПередачаНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	               |		ПО ПередачаНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	               |				&ДатаДок,
	               |				Организация = &Организация
	               |					И Состояние = &Поступил) КАК СостоянияНМАОрганизацийСрезПоследних
	               |		ПО ПередачаНМА.НематериальныйАктив = СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНМА.СрезПоследних(&ДатаДок, Организация = &Организация) КАК СчетаУчетаНМАСрезПоследних
	               |		ПО ПередачаНМА.НематериальныйАктив = СчетаУчетаНМАСрезПоследних.НематериальныйАктив
	               |ГДЕ
	               |	ПередачаНМА.Ссылка = &Ссылка";	
				   
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СчетДт", 	 Док.СчетНачисленияАмортизацииБУ);
	Запрос.УстановитьПараметр("Период",      ЭтотОбъект.МоментВремени());  
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(ТиповойОборотыДтКт.СуммаОборот,0) КАК Сумма
	             |ИЗ
	             |	РегистрБухгалтерии.Типовой.ОборотыДтКт(&Период,&Период , , СчетДт = &СчетДт, , , , Организация = &Организация) КАК ТиповойОборотыДтКт";
				 
	РезультатАморт = Запрос.Выполнить();
	
	Если НЕ РезультатАморт.Пустой() Тогда 
		Аморт = РезультатАморт.Выбрать();
		Аморт.Следующий();
		СуммаАмортизации = Аморт.Сумма;
	Иначе 
		СуммаАмортизации = 0;
	КонецЕсли;	
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("ДА1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка             	  	  = Макет.ПолучитьОбласть("Шапка");
	Таблица1		  	 	  = Макет.ПолучитьОбласть("Таблица1");
	СтрокаТаблицы1    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ЗаголовокТаблицы2 	 	  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	СтрокаТаблицы2    	 	  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоСтрокаТаблицы2  	  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
	Приказ			  	 	  = Макет.ПолучитьОбласть("Приказ");
	Подвал            	 	  = Макет.ПолучитьОбласть("Подвал");	
	ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
	ОССдал			     	  = Макет.ПолучитьОбласть("ОССдал|Сдал");
	ПодвалВерх	      	  	  = Макет.ПолучитьОбласть("ПодвалВерх");
	ПодвалНиз	      	  	  = Макет.ПолучитьОбласть("ПодвалНиз");
	ПодвалДата        	  	  = Макет.ПолучитьОбласть("ПодвалДата");
	ОСПринял		  		  = Макет.ПолучитьОбласть("ОССдал|Принял");
	Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаНМА_ДА1";

	////////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-сдатчик
	ПредставлениеОрганизацииСдатчик 				= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
	Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	// Организация-получатель
	СведенияОбОрганизацииПолучателе					   = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Контрагент, Док.Дата);
	ПредставлениеОрганизацииПолучатель				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииПолучатель = ПредставлениеОрганизацииПолучатель;
	Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииПолучателе, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	Шапка.Параметры.НомерДок          	   = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок            	   = Формат(Док.Дата,"ДЛФ=Д");
	Шапка.Параметры.РасшифровкаПодписиСдал = Руководители.Руководитель;
	Шапка.Параметры.ДолжностьСдал          = Руководители.РуководительДолжность;
	
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.Вывести(Таблица1);

	//Заполняем раздел "Основание"
	Если Док.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Док.ДокументОснование) Тогда 
		СтрокаТаблицы1.Параметры.НаимДокОсн  = Док.ДокументОснование.Метаданные().Синоним;
		СтрокаТаблицы1.Параметры.НомерДокОсн = Док.ДокументОснование.Номер;
		СтрокаТаблицы1.Параметры.ДатаДокОсн  = Док.ДокументОснование.Дата;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Док.Ответственный.ФизЛицо) Тогда 
		ДанныеОФизЛице 					   = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный.ФизЛицо, Док.Дата);
		СтрокаТаблицы1.Параметры.СписокМОЛ = ДанныеОФизЛице.Представление;
	Иначе
		СтрокаТаблицы1.Параметры.СписокМОЛ = Док.Ответственный;
	КонецЕсли;
	
	Получатель = "";
	Сдатчик    = "";
	СчетДт     = "";
	СчетКт     = "";
	
	Сдатчик    = ПредставлениеОрганизацииСдатчик; 
	Получатель = ПредставлениеОрганизацииПолучатель;
	СчетДт 	   = Док.СчетУчетаРасчетовСКонтрагентом;
	
	СтрокаТаблицы1.Параметры.НаименованиеОС 	     = ?(ЗначениеЗаполнено(Док.НематериальныйАктивНаименованиеПолное),Док.НематериальныйАктивНаименованиеПолное, Док.НематериальныйАктивНаименование);
    СтрокаТаблицы1.Параметры.ДатаВыпуска 		     = Формат(Док.ДатаПриобретения, "ДЛФ=Д");
	СтрокаТаблицы1.Параметры.ПервоначальнаяСтоимость = Док.ПервоначальнаяСтоимость;

	//Таблица1.Параметры.Сдатчик = Сдатчик;
	//Таблица1.Параметры.Получатель = Получатель;
	
	ТабДокумент.Вывести(СтрокаТаблицы1);
	
	
	// выводим вторую часть таблицы
	ЗаголовокТаблицы2.Параметры.Валюта = ЭтотОбъект.ВалютаДокумента;
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ЗаголовокТаблицы2);

	// Выведем строку таблицы
    СтрокаТаблицы2.Параметры.СчетДт                  = СчетДт;
	СтрокаТаблицы2.Параметры.СчетКт                  = Док.СчетДоходовБУ;
	СтрокаТаблицы2.Параметры.СрокСлужбыПолезной      = Док.СрокПолезногоИспользования;
	СтрокаТаблицы2.Параметры.ИнвентарныйНомер        = Док.ИнвентарныйНомер;
	СтрокаТаблицы2.Параметры.ЗаводскойНомер          = "";  
	СтрокаТаблицы2.Параметры.НомерПаспорта 	         = "";
	СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС = Док.СуммаДокумента;
		
	Если НЕ ЗначениеЗаполнено(Док.СрокПолезногоИспользования) ИЛИ Док.СрокПолезногоИспользования = 0 Тогда
		КоэффициентАмортизацииБУ = 0;	
	Иначе
		КоэффициентАмортизацииБУ = Окр((12/Док.СрокПолезногоИспользования) * 100, 2);	
	КонецЕсли;
	
	СтрокаТаблицы2.Параметры.СуммаАмортизации 	 = СуммаАмортизации;
    СтрокаТаблицы2.Параметры.БалансоваяСтоимость = ?(ЗначениеЗаполнено(Док.ПервоначальнаяСтоимость), Док.ПервоначальнаяСтоимость, 0) - ?(ЗначениеЗаполнено(СуммаАмортизации), СуммаАмортизации, 0);
	
	ИтогоСуммаАмортизации	 = 0;
	ИтогоБалансоваяСтоимость = 0;
	ИтогоСтоимостьРеализацииСНДС = 0;
		
	ТабДокумент.Вывести(СтрокаТаблицы2);
	
	ИтогоСуммаАмортизации								       = ИтогоСуммаАмортизации + СуммаАмортизации;
	ИтогоСтрокаТаблицы2.Параметры.ИтогоСуммаАмортизации	       = ИтогоСуммаАмортизации;
	ИтогоБалансоваяСтоимость							       = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
	ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость     = ИтогоБалансоваяСтоимость;
	ИтогоСтоимостьРеализацииСНДС                               = ИтогоСтоимостьРеализацииСНДС + СтрокаТаблицы2.Параметры.СтоимостьРеализацииСНДС;
	ИтогоСтрокаТаблицы2.Параметры.ИтогоСтоимостьРеализацииСНДС = ИтогоСтоимостьРеализацииСНДС;
		
	ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);
	      	
	Приказ.Параметры.ДокументОснованиеВид 	= "приказа (распоряжения)";
	Приказ.Параметры.ДокументОснованиеДата 	= """_____"""+"________________________ 20_____года";
	Приказ.Параметры.ДокументОснованиеНомер = "__________ ";
	Приказ.Параметры.НаименованиеОбъекта 	= ?(ЗначениеЗаполнено(Док.НематериальныйАктивНаименованиеПолное),Док.НематериальныйАктивНаименованиеПолное, Док.НематериальныйАктивНаименование);
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.Вывести(Подвал);

	//выводим комиссию
	
	//сначала председатель 
	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
	Комиссия.Параметры.Должность                = "";
	Комиссия.Параметры.РасшифровкаПодписи       = "";
	
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	Для Итератор = 1 По 3 Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                                 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
		                                                 "");
		Комиссия.Параметры.Должность          = "";
		Комиссия.Параметры.РасшифровкаПодписи = "";
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаОборотнойСтороны);
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОССдал) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
		
	ОССдал.Параметры.ОбъектОсновныхСредств = "Долгосрочный актив";
	ОССдал.Параметры.Сдал				   = "Сдал";

	Если ЗначениеЗаполнено(Док.Ответственный.ФизЛицо) Тогда 
		ДанныеОФизЛице = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный.ФизЛицо, Док.Дата);
		ОССдал.Параметры.Должность          = ДанныеОФизЛице.Должность;
		ОССдал.Параметры.РасшифровкаПодписи = ДанныеОФизЛице.Представление;
	Иначе
		ОССдал.Параметры.Должность          = "";
		ОССдал.Параметры.РасшифровкаПодписи = Док.Ответственный;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОССдал);
	ОСПринял.Параметры.Принял = "Принял";
	ТабДокумент.Присоединить(ОСПринял);
	
	ТабДокумент.Вывести(ПодвалДата);
		
	//данные по доверенности 		
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,Док);
	ОбщегоНазначения.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ПодвалВерх,,,"ДоверенностьЛицоВыдана", Истина);	
		
	ТабДокумент.Вывести(ПодвалВерх);
	ТабДокумент.Вывести(ПодвалНиз);

	// Выведем подпись бухгалтера
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиСдал = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьПередачаНМА()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ДА1" Тогда
		ТабДокумент = ПечатьДА1();			
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДА1","ДА-1 (Акт премки-передачи)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовСКонтрагентом");
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");	
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");	
	КонецЕсли;	
		
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");		
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьДанныеПоНМА(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("ДатаДокумента", 		 Дата);
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Ссылка", 			 Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначСведения.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ ПервоначальныеСведенияНМА
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК ПервоначСведения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияНМАОрганизацииСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ НМА_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация
	               |				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)) КАК СостоянияНМАОрганизацииСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаУчетаНМА.НематериальныйАктив,
	               |	СчетаУчетаНМА.Организация,
	               |	СчетаУчетаНМА.СчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_СчетаУчетаНМА
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК СчетаУчетаНМА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1 КАК НематериальныйАктив,
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение,
	               |	ТиповойОстатки.СуммаОстаток
	               |ПОМЕСТИТЬ ВТ_СтоимостьНМА
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаДокумента,
	               |			Счет В (ВЫБРАТЬ СчетУчетаБУ ИЗ ВТ_СчетаУчетаНМА),
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В (&НематериальныйАктив)) КАК ТиповойОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПередачаНМА.НематериальныйАктив,
	               |	ПередачаНМА.НематериальныйАктив.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА ПервоначальныеСведенияНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	               |	ВЫБОР
	               |		КОГДА НМА_СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета,
	               |	ВЫБОР
	               |		КОГДА СтоимостьНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДанныеПоБухгалтерскомуУчету
	               |ИЗ
	               |	Документ.ПередачаНМА КАК ПередачаНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	               |		ПО ПередачаНМА.НематериальныйАктив = ПервоначальныеСведенияНМА.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НМА_СнятыеСУчета КАК НМА_СнятыеСУчета
	               |		ПО ПередачаНМА.НематериальныйАктив = НМА_СнятыеСУчета.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьНМА КАК СтоимостьНМА
	               |		ПО ПередачаНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	               |ГДЕ
	               |	ПередачаНМА.Ссылка = &Ссылка";
	               
	ТаблицаПоНМА = Запрос.Выполнить().Выгрузить();               
				   
	Для Каждого СтрокаНМА Из ТаблицаПоНМА Цикл
		
		Если НЕ СтрокаНМА.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нематериальный актив <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> не отражался в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если СтрокаНМА.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нематериальный актив <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> снят с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ СтрокаНМА.ЕстьДанныеПоБухгалтерскомуУчету Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для нематериального актива <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> не обнаружены данные по бухгалтерскому учету по указнному структурному подразделению организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Движения по регистру "ОбъектыНалоговогоУчетаФА"
//
Процедура ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента)
	Если Не СтруктураШапкиДокумента.ПризнакФА Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
	Движение.Период 						= СтруктураШапкиДокумента.Дата;
	Движение.Организация 					= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив 			= СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.ГруппаНУ 						= СтруктураШапкиДокумента.ГруппаНУ;	
	Движение.ПорядокПогашенияСтоимостиНУ	= СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиНУ;	
	Движение.СостояниеФиксированногоАктива 	= Перечисления.ВидыСостоянийФА.Выбыл;
КонецПроцедуры // ДвиженияПоРегиструФАОрганизации()

// Движения по регистру "ФиксированныеАктивыУчитываемыеОтдельно"
//
Процедура ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента)
	
	// фиксируем выбытие только того актива, который выбывает, не включившись в состав группы
	ПризнакОтдельногоУчета = СтруктураШапкиДокумента.ПризнакОтдельногоУчета;
	
	Если Не ПризнакОтдельногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
	
	Движение.Период 			= СтруктураШапкиДокумента.Дата;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.ВидЛьготыФА		= СтруктураШапкиДокумента.ВидЛьготыФА;
	Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;
	
КонецПроцедуры // ДвиженияПоРегиструФАУчитываемыеОтдельно()

// Снимает основное средство с учета по  имущественному налогу
//
Процедура ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента)
	
	Запрос  = Новый Запрос("ВЫБРАТЬ
	|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога	
	|ИЗ
	|	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&Дата, Налогоплательщик = &Налогоплательщик
	|			И ОбъектНалогообложения = &ОбъектНалогообложения) КАК ОбъектыИмущественногоНалогаСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", 					СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Налогоплательщик",		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОбъектНалогообложения",  СтруктураШапкиДокумента.НематериальныйАктив);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.НачислятьНалог Тогда
			// Снимаем с учета по налогу на имущество
			
			Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтруктураШапкиДокумента.НематериальныйАктив;
			Движение.НачислятьНалог = Ложь;					
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаИмущественногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиницаИмущественногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;			
	
КонецПроцедуры	

// Движения по регистру налогового учета
//
Процедура ДвиженияПоРегиструНУ(СтруктураШапкиДокумента,Период, СуммаРеализацииБезНДС)
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТекНМА		   = СтруктураШапкиДокумента.НематериальныйАктив;
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	НомерЖурнала   = "НА";
	ПроводкиНУ = Движения.Налоговый;
	
		
	// Движения по налоговому учету
	ТаблицаСтоимостиНМА = ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА(Организация, ТекНМА, Период);
	
	СчетУчетаФА = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекНМА, ТекОрганизация,ДатаДока, СтруктураШапкиДокумента.ПризнакФА);
	// Движения в НУ фиксированных активов
	Если СтруктураШапкиДокумента.ПризнакФА Тогда
		// При выбытии стоимостный баланс группы уменьшается на сумму реализации		
		Если СуммаРеализацииБезНДС <> 0 Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период = ДатаДока;
			ПроводкаНУ.Организация = ТекОрганизация;
			ПроводкаНУ.Содержание = "Реализация фиксированного актива";
			
			ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",      СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			ПроводкаНУ.СчетКт 	= СчетУчетаФА;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекНМА);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			
			ПроводкаНУ.Сумма 	= СуммаРеализацииБезНДС;
			
			ВидУчетаВПроводке 		= Справочники.ВидыУчетаНУ.НУ;			
			ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводке;
			ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводке;			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;	
				
		Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			// Временные разницы
				// 1. Доходы. 	В БУ возникает доход на сумму реализации. В НУ дохода не возникает. Величина дохода от реализации в БУ
				// 	  будет являться временной разницей по НУ. 	Кт Н750 (ВР) Сумма РеализацииБУ
				// 2. Затраты. В БУ признаются затраты в размере остаточной стоимости актива по БУ, в НУ в этом периоде затраты не возникают.
				//    Величина остаточной стоимости в БУ является времененной разницей. Дт Н880 (ВР) ОстаточнаяСтоимостьБУ
				// 3. Стоимость ФА. В БУ актив выбывает и его стоимость равно 0, в НУ актив продолжает числиться. Возникает временная разница
				///   на сумму ( СуммаРеализацииБУ). 
                	
				// 1. Доходы
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Доход от реализация фиксированного актива в БУ";
				
				ПроводкаНУ.СчетКт = СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СубконтоДоходовНУ3);											
				ПроводкаНУ.Сумма = СуммаРеализацииБезНДС;		
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;			
				
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;									
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Кт"); 
				// 2. Затраты
				СуммаПроводки = СтруктураШапкиДокумента.ОстаточнаяСтоимостьНМА;
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Затраты в сумме остаточной стоимости фиксированного актива в БУ и НУ";
				
				ПроводкаНУ.СчетДт = СчетРасходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоРасходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СубконтоРасходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СубконтоРасходовНУ3);											
				ПроводкаНУ.Сумма = СуммаПроводки;		
				
				ПроводкаНУ.СчетКт = СчетУчетаФА;
                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекНМА);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;							
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;				
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				// 3. Стоимость ФА								
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "ВР: Разница в стоимости актива по БУ и НУ";
				
				ПроводкаНУ.СчетДт = СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ТекНМА);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				ПроводкаНУ.Сумма = СуммаРеализацииБезНДС;		
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.ВР;			
				
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Дт"); 
			КонецЕсли;	
		Иначе
			// не фиксированный актив. Списываем остаточную стоимость и признаем доход от реализации
			
			// Движения в НУ ВА, не подлежащих амортизации		
			// Если возникает налогооблагаемый доход, признаем его в НУ
			// Отражаем балансовую стоимость
			// Отражаем доход от реализации.		
			
			СуммаДоходаНУ = СуммаРеализацииБезНДС - СтруктураШапкиДокумента.ОстаточнаяСтоимостьНМА;
			
			Если СуммаДоходаНУ  > 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "Реализация фиксированного актива";
				
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",          СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				ПроводкаНУ.СчетКт = СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СубконтоДоходовНУ1);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СубконтоДоходовНУ2);							
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СубконтоДоходовНУ3);							
				
				ПроводкаНУ.Сумма = СуммаДоходаНУ;						
				
				ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НУ;			
				
				ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
			Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				// отражаем доход отреализации
				СуммаДоходаПР = Мин(СуммаРеализацииБезНДС, СтруктураШапкиДокумента.ОстаточнаяСтоимостьНМА);
				Если СуммаДоходаПР <> 0 Тогда
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период = ДатаДока;
					ПроводкаНУ.Организация = ТекОрганизация;
					ПроводкаНУ.Содержание = "Часть дохода от реализации ФА, не признаваемая в НУ";
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СчетУчетаРасчетовСКонтрагентом);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",          СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроводкаНУ.СчетКт = СчетДоходовНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СубконтоДоходовНУ1);			
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СубконтоДоходовНУ2);							
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СубконтоДоходовНУ3);												
					
					ПроводкаНУ.Сумма = СуммаДоходаПР;					
					ВидУчетаВПроводке = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;								
					ПроводкаНУ.ВидУчетаДт = ВидУчетаВПроводке;
					ПроводкаНУ.ВидУчетаКт = ВидУчетаВПроводке;			
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				КонецЕсли;	
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период = ДатаДока;
				ПроводкаНУ.Организация = ТекОрганизация;
				ПроводкаНУ.Содержание = "Списание остаточной стоимости ФА";

				ПроводкаНУ.СчетДт       = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетРасходовБУ));
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоРасходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СубконтоРасходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СубконтоРасходовБУ3);
				
				ПроводкаНУ.СчетКт 	= СчетУчетаФА;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекНМА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			    	
				ПроводкаНУ.Сумма 	= СтруктураШапкиДокумента.ОстаточнаяСтоимостьНМА;
			
				ВидУчетаВПроводке 		= Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;			
					
				ПроводкаНУ.ВидУчетаДт 	= ВидУчетаВПроводке;
				ПроводкаНУ.ВидУчетаКт 	= ВидУчетаВПроводке;			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);					
			
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)

	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	НомерЖурнала   = "НА";
	
	СуммаРеализацииБезНДС = 0;
	
	//Фиксация выручки и НДС по БУ (проводки)

	//Возможны корректировки таблиц при расчетах в у.е.
	ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоТоварам",ТаблицаПоТоварам), Отказ,Заголовок,НомерЖурнала, мУчетнаяПолитикаПоБухгалтерскомуУчету);

	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;

	// Движения по регистрам учета НМА и формирование проводок по начислению амортизации и списанию стоимости
	// получим данные о счетах учета и начисления амортизации по НМА

	СписокНМА = ТаблицаПоТоварам.ВыгрузитьКолонку("НематериальныйАктив");

	// *Дополняет полями, нужными для отражения выбытия объекта
	Период = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.НематериальныйАктив,Период);

	ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМАБухРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.НематериальныйАктив,Истина);
	
	ТаблицаАмортизацииБУ.Колонки.НМА.Имя = "ОбъектУчета";
	ТаблицаАмортизацииБУ.Колонки.Бух.Имя = "Сумма";
	ТаблицаАмортизацииБУ.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
	ТаблицаАмортизацииБУ.Колонки.Добавить("СчетАмортизацииНУ");

	ТабЗатрат    = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииБУ, СтруктураШапкиДокумента,"Бух",НомерЖурнала);
	
	СостояниеНМА = Движения.СостоянияНМАОрганизаций;
	ОстаточнаяСтоимостьНМА = 0;
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекНМА = СтрокаТЧ.НематериальныйАктив;

		// Движения по регистру СостояниеНМА
		Движение = СостояниеНМА.Добавить();

		Движение.Период              = Дата;
		Движение.НематериальныйАктив = ТекНМА;
		Движение.Организация         = ТекОрганизация;
		Движение.Состояние           = Перечисления.ВидыСостоянийНМА.Списан;

		СтрокаАмортизации = ТаблицаАмортизацииБУ.Найти(ТекНМА,    "ОбъектУчета");
		СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА_БУ");

		Если СтрокаТТС <> Неопределено Тогда

			СчетУчетаСтоимости   = СтрокаТТС.СчетУчетаБУ;
			СчетУчетаАмортизации = СтрокаТТС.СчетАмортизацииБУ;

			Если СтрокаАмортизации = Неопределено тогда
				АмортизацияЗаМесяц = 0;
			Иначе
				АмортизацияЗаМесяц = СтрокаАмортизации.Сумма;
			КонецЕсли;

			// списание амортизации Д (Счет амортизации) К (счет учета)
			СуммаПроводки = СтрокаТТС.АмортизацияБУ + АмортизацияЗаМесяц;

			Если СуммаПроводки<>0 и не (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = Дата;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Списана амортизация";
				Проводка.Сумма        = СуммаПроводки;

				Проводка.СчетДт       = СчетУчетаАмортизации;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				
				Проводка.СчетКт       = СчетУчетаСтоимости;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
			КонецЕсли;

			// списание остаточной стоимости Д (счета затрат) К (счета учета)
			ОстаточнаяСтоимостьНМА = СтрокаТТС.СтоимостьБУ - СтрокаТТС.АмортизацияБУ - АмортизацияЗаМесяц;
			
			Если ОстаточнаяСтоимостьНМА <> 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = Дата;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Списана ост. стоимость";
				Проводка.Сумма        = ОстаточнаяСтоимостьНМА;

				Проводка.СчетДт       = СтрокаТЧ.СчетРасходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоРасходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СубконтоРасходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТЧ.СубконтоРасходовБУ3);
								
				Проводка.СчетКт      = СчетУчетаСтоимости;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			КонецЕсли;
		КонецЕсли;    
	КонецЦикла;
	СтруктураШапкиДокумента.Вставить("ОстаточнаяСтоимостьНМА", ОстаточнаяСтоимостьНМА);
	//проверка на дублирование состояние НМА
	ТаблицаДвижений = Движения.СостоянияНМАОрганизаций.Выгрузить(); 
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(Ссылка, СтруктураШапкиДокумента.Организация, ТаблицаДвижений, Отказ, Заголовок);
	
	ВыручкаПоБУ = ТаблицаПоТоварам.Скопировать();
	ВыручкаПоБУ.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, СчетУчетаНДСПоРеализации, СтавкаНДС","Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал");
	
	СуммаРеализацииБезНДС = ВыручкаПоБУ.Итог("СуммаБезНДС");
	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаБезНДС;
		Проводка.Содержание   = "Выручка от реализации НМА";
		Проводка.НомерЖурнала = НомерЖурнала;

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаБезНДСВал;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

 		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
        	Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "Выделен НДС";
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;                      				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);		
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.НДС;
				ПроводкаНУ.Содержание  = "Выделен НДС";
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
										
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);		
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);			
					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
					
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		ДвиженияПоРегиструНУ(СтруктураШапкиДокумента, Период, СуммаРеализацииБезНДС);
		
		ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента);
		ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента);		
	КонецЕсли;
	
	// Движения во регистрам подсистемы учета НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ);

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
  
КонецПроцедуры // ДвиженияПоРегистрамРегл()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
	ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("НематериальныйАктив"), "Номенклатура");
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);

	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, "", Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()


//Функция возвращает таблицу значений для формирования движений документа
//
Функция ПодготовитьТаблицуТоваров(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",				 СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК НомерСтроки,
	               |	ПередачаНМА.НематериальныйАктив,
				   |	ПередачаНМА.НематериальныйАктив.Код КАК Код,
	               |	ПередачаНМА.Сумма,
	               |	ПередачаНМА.СтавкаНДС,
	               |	ПередачаНМА.СуммаНДС КАК НДС,
	               |	ПередачаНМА.СчетДоходовБУ,
	               |	ПередачаНМА.СубконтоДоходовБУ1,
	               |	ПередачаНМА.СубконтоДоходовБУ2,
	               |	ПередачаНМА.СубконтоДоходовБУ3,
	               |	ПередачаНМА.СчетРасходовБУ,
	               |	ПередачаНМА.СубконтоРасходовБУ1,
	               |	ПередачаНМА.СубконтоРасходовБУ2,
	               |	ПередачаНМА.СубконтоРасходовБУ3,
	               |	ПередачаНМА.СчетУчетаНДСПоРеализации,
	               |	ПередачаНМА.НДСВидОперацииРеализации
	               |ИЗ
	               |	Документ.ПередачаНМА КАК ПередачаНМА
	               |ГДЕ
	               |	ПередачаНМА.Ссылка = &Ссылка";
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПоТоварам;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	                     	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);	
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	
	// формирование проводок по налоговому учету
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	                      |	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
	                      |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
	                      |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
	                      |	ВЫБОР
	                      |		КОГДА ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
	                      |ИЗ
	                      |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	                      |			&НачалоПериода,
	                      |			Организация = &Организация
	                      |				И ФиксированныйАктив = &НМА) КАК ОбъектыНалоговогоУчетаФА
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	                      |				&НачалоПериода,
	                      |				Организация = &Организация
	                      |					И ФиксированныйАктив = &НМА) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	                      |		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
	                      |			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	                      |			И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)");
	Запрос. УстановитьПараметр("НМА",		 	НематериальныйАктив);
	Запрос. УстановитьПараметр("Организация",	Организация);
	Запрос. УстановитьПараметр("НачалоПериода",	Дата);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтруктураШапкиДокумента.Вставить("ПризнакФА", ЛОЖЬ);
		СтруктураШапкиДокумента.Вставить("ГруппаНУ");		
		СтруктураШапкиДокумента.Вставить("ВидЛьготыФА");
		СтруктураШапкиДокумента.Вставить("ПорядокПогашенияСтоимостиНУ");
		СтруктураШапкиДокумента.Вставить("ПризнакОтдельногоУчета", ЛОЖЬ);		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураШапкиДокумента.Вставить("ПризнакФА", 					ИСТИНА);
		СтруктураШапкиДокумента.Вставить("ГруппаНУ", 					Выборка.ГруппаНУ);
		СтруктураШапкиДокумента.Вставить("ВидЛьготыФА",					Выборка.ВидЛьготыФА);
		СтруктураШапкиДокумента.Вставить("ПризнакОтдельногоУчета",		Выборка.ПризнакОтдельногоУчетаФА);
		СтруктураШапкиДокумента.Вставить("ПорядокПогашенияСтоимостиНУ", Выборка.ПорядокПогашенияСтоимостиНУ);				
	КонецЕсли;	
	
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(СтруктураШапкиДокумента);

	ПроверитьДанныеПоНМА(Отказ, Заголовок);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок); 
		ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРасчетная = Сумма+?(УчитыватьНДС и не СуммаВключаетНДС,СуммаНДС,0);
	
	Если не СуммаДокумента = СуммаРасчетная Тогда
		СуммаДокумента = СуммаРасчетная;
	КонецЕсли;
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);	
КонецПроцедуры

//Процедура-обработчик события "ОбработкаЗаполнения" документа
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();