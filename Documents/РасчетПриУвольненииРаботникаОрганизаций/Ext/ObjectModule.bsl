////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
Перем мОсновнойГрафикРаботыПредприятия Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания)
	
	Для Н = 1 По 2 Цикл
		
		Если Н = 1 Тогда
			// выходное пособие
			ДнейЧасовКОплате = ВыборкаПоШапкеДокумента.ДнейЧасовВыходногоПособия;
			ДнейЧасовКОплате2 = 0;
			Если ПериодРегистрации >= Дата(2018,1,1) Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие2018;
			Иначе
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие;
			КонецЕсли;
						
		ИначеЕсли Н = 2 Тогда
			
			// компенсация отпуска или удержание за неотработанные дни отпуска
			ДнейЧасовКОплате = ВыборкаПоШапкеДокумента.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска;
			ДнейЧасовКОплате2 = ВыборкаПоШапкеДокумента.РабочихДнейЧасовКомпенсацииУдержанияОтпуска;
			
			Если ВыборкаПоШапкеДокумента.ПризнакКомпенсацииОтпуска Тогда
				Если ПериодРегистрации >= Дата(2018,1,1) Тогда
					ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска2018;
				Иначе 
					ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска;
				КонецЕсли;
			Иначе
				ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск;
					
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ДнейЧасовКОплате = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
			
			Движение = НаборУдержания.Добавить();
			КоличествоМесяцевРасчета 				= ВидРасчета.ПериодРасчетаСреднегоЗаработка;
		Иначе
			Движение = НаборДополнительныеНачисления.Добавить();
			
			Движение.ПодразделениеОрганизации		= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КоличествоМесяцевРасчета 				= ВидРасчета.ЧислоМесяцев;
		КонецЕсли; 
		
		Движение.ПериодРегистрации          		= ПериодРегистрации;
		Движение.ВидРасчета				    		= ВидРасчета;
		
		Движение.ФизЛицо                   		 	= ФизЛицо;
		Движение.Сотрудник							= Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		Движение.Показатель1						= ДнейЧасовКОплате;
		Движение.Показатель2						= ДнейЧасовКОплате2;
		Движение.КоэффициентИндексации				= ВыборкаПоШапкеДокумента.КоэффициентИндексации;
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
			Движение.ГрафикРаботы  	       			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Иначе 
			Движение.ГрафикРаботы  	       			= мОсновнойГрафикРаботыПредприятия;
		КонецЕсли;
		Движение.ДатаНачалаСобытия					= ВыборкаПоШапкеДокумента.ДатаУвольнения;
		
		Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаУвольнения), - КоличествоМесяцевРасчета);
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаУвольнения) - 1;
		Движение.ОбособленноеПодразделение			= ВыборкаПоШапкеДокумента.Организация;
		Движение.Авторасчет							= Истина;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// На основе сформированных движений по регистру "ОсновныеНачисленияРаботниковОрганизаций" заполняет ТЧ "Начисления"
//
Процедура ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления)
	
	Для Каждого СтрокаНачислений из НаборДополнительныеНачисления Цикл
		
		НоваяСтрока 			= Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		НоваяСтрока.Показатель1	= СтрокаНачислений.Показатель1;
		НоваяСтрока.Показатель2	= СтрокаНачислений.Показатель2;
	
	КонецЦикла; 
	
КонецПроцедуры // ПереписатьНачисленияВТабличнуюЧастьДокумента()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, КомментироватьРасчет = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[ВыборкаПоШапкеДокумента.Организация];
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																	ВыборкаПоШапкеДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// Очистим ТЧ Начисления
	Начисления.Очистить();
	
	// Создадим наборы записей используемых регистров 
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;

	// Если это документ-исправление, добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент,ВыборкаПоШапкеДокумента, Неопределено, НаборДополнительныеНачисления, НаборУдержания);
	
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания);
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента);
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
	КонецЕсли;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
		Иначе
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
			ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик,, КомментироватьРасчет);
		КонецЕсли;		
		
		// перепишем записи начислений в документ
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления);
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборУдержания);
		
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		НаборДополнительныеНачисления.Записать();
		НаборУдержания.Записать();
		ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации);
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		Если НаборУдержания.Количество() > 0 Тогда
		 	НаборРасчетСреднего.Очистить();
			ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("УдержанияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации);
			ТаблицаЗаписей2 = НаборРасчетСреднего.Выгрузить();
			Для Каждого Строка2 Из ТаблицаЗаписей2 Цикл
				Строка = ТаблицаЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Строка2);
			КонецЦикла;			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		РасчетСреднего.Очистить();
		РасчетСреднегоДляОтпуска.Очистить();
		// перепишем записи расчета среднего заработка в документ
		Для каждого СтрокаНабора Из ТаблицаЗаписей Цикл
			Если СтрокаНабора.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
				СтрокаТЧ = РасчетСреднего.Добавить();
			Иначе	
				СтрокаТЧ = РасчетСреднегоДляОтпуска.Добавить();
			КонецЕсли;		
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНабора);
		КонецЦикла; 
	КонецЕсли;
	
	// Если это документ-перерасчет, то после полного расчета добавим сторно-записи из 
	// перерассчитываемого документа. Сами сторно записи подпадать под расчет не должны, 
	// т.к. могут измениться данные о среднем заработке, а сторно-записи должны содержать 
	// "чистый" результат предыдущего документа
	
	Если РежимПерерасчета тогда
		// Для режима перерасчета запишем движения (набор записей расчета среднего уже записан)
		НаборДополнительныеНачисления.Записать();
		НаборУдержания.Записать();
	Иначе	
		// Удаляем движения для режима интерактивного расчета 
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать();
		
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
	КонецЕсли;	
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры  // Рассчитать

//Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);	
	// Зафиксируем данные табличных частей после расчета
	Записать();

	ИмеетсяПерерассчитываемыйДокумент = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		// надо перезаполнить регистры расчета, т.к. добавили сторно-строки
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.Очистить();
		Движения.УдержанияРаботниковОрганизаций.Очистить();
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);

	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки(); // только структуру без данных
	КонецЦикла;

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];	

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий(); 
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		Если ИмеетсяПерерассчитываемыйДокумент Тогда
			ДобавитьСтрокуНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
		КонецЕсли;
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;
	
	// свернем таблицы регистров накопления и запишим их в наборы записей
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
		НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
		НаборЗаписей.Записать();
	Конеццикла;
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать();
		Движения.УдержанияРаботниковОрганизаций.Записать();
	КонецЕсли;
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
	НаборЗаписейПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
	
	// получим список физлиц для перерасчета
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент",	ПерерассчитываемыйДокумент);
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасчетПриУвольненииРаботникаОрганизаций.Физлицо,
	|	РасчетПриУвольненииРаботникаОрганизаций.Сотрудник,
	|	РасчетПриУвольненииРаботникаОрганизаций.ДатаУвольнения,
	|	РасчетПриУвольненииРаботникаОрганизаций.ДнейЧасовВыходногоПособия,
	|	РасчетПриУвольненииРаботникаОрганизаций.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизаций.РабочихДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизаций.ПризнакКомпенсацииОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизаций.ДокументОснование,
	|	РасчетПриУвольненииРаботникаОрганизаций.СпособОтраженияВБухучете
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &ПерерассчитываемыйДокумент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка)
	КонецЕсли;
	
	// выполним запрос к Начисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.Показатель1 КАК Показатель1,
	|	Начисления.Показатель2 КАК Показатель2,
	|	Начисления.КоэффициентИндексации,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	ИСТИНА КАК Сторно
	|
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИндексСтроки = -1;
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ИндексСтроки = ИндексСтроки + 1;
		ЗаполнитьЗначенияСвойств(Начисления.Вставить(ИндексСтроки),Выборка);
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработкаОтпуск" 
		ИЛИ ИмяМакета = "РасчетСреднегоЗаработкаОтпускПодробно" Тогда
		ПодробнаяФорма = ?(ИмяМакета = "РасчетСреднегоЗаработкаОтпускПодробно", Истина, Ложь);
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, 12, "на " + Формат(ДатаУвольнения ,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска, , , ПодробнаяФорма);
	ИначеЕсли ИмяМакета = "РасчетСреднегоЗаработкаПособие" 
		ИЛИ ИмяМакета = "РасчетСреднегоЗаработкаПособиеПодробно" Тогда
		ПодробнаяФорма = ?(ИмяМакета = "РасчетСреднегоЗаработкаПособиеПодробно", Истина, Ложь);
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, 12, "на " + Формат(ДатаУвольнения ,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку, , , ПодробнаяФорма);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаОтпуск","Расчет по среднему заработку (для компенсации отпуска)");
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаОтпускПодробно","Расчет по среднему заработку (для компенсации отпуска - подробная форма)");
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаПособие","Расчет по среднему заработку (для выходного пособия)");
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаПособиеПодробно","Расчет по среднему заработку (для выходного пособия - подробная форма)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности" , ДатаУвольнения);
	Запрос.УстановитьПараметр("Сотрудник" , Сотрудник);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация" , ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаНачалаРасчетаСУчетомИндексации", ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетПриУвольненииРаботникаОрганизации.Дата,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации,
	|	РасчетПриУвольненииРаботникаОрганизации.Организация,
	|	ВЫБОР 
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация 
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка,
	|	РасчетПриУвольненииРаботникаОрганизации.Физлицо,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник,
	|	РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовВыходногоПособия,
	|	РасчетПриУвольненииРаботникаОрганизации.КалендарныхДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.РабочихДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ДокументОснование,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации,
	|	ЕСТЬNULL(КоэффициентыИндексацииЗаработка.Коэффициент, 1) КАК КоэффициентИндексации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И РасчетПриУвольненииРаботникаОрганизации.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности, 
	|				Сотрудник = &Сотрудник 
	|				И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ИСТИНА
	|
	|	// учтем возможное повышение заработка в день события
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|		ПО КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
	|				И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
	|				И КоэффициентыИндексацииЗаработка.Период = &ДатаАктуальности
	|				И &ДатаАктуальности >= &ДатаНачалаРасчетаСУчетомИндексации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&ПериодРегистрации,
	|				Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
    МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					  Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",					      Сотрудник);
	Запрос.УстановитьПараметр("парамПериодРегистрации",			  ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация",					  ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",		  ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			  ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаУвольнения",					  ВыборкаПоШапкеДокумента.ДатаУвольнения);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", 	  ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	  	  Справочники.Организации.ПустаяСсылка());
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "&ДатаУвольнения") + " КАК Период";
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Сотрудник КАК Сотрудник,
			|	&ДатаУвольнения КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольнении
			|ГДЕ
			|	РасчетПриУвольнении.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+ "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисление.НомерСтроки,
	|	Начисление.ВидРасчета,
	|	ВЫБОР 
	|		КОГДА Начисление.ВидРасчета ССЫЛКА ПланВидовРасчета.УдержанияОрганизаций 
	|			ТОГДА Начисление.ВидРасчета.ПериодРасчетаСреднегоЗаработка 
	|		ИНАЧЕ Начисление.ВидРасчета.ЧислоМесяцев 
	|	КОНЕЦ КАК ЧислоМесяцевРасчета,
	|	Начисление.ВидРасчета.ВидДохода КАК ВидДохода,
	|	Начисление.ВидРасчета.ОблагаетсяИПН КАК СпособНалогообложенияИПН,
	|	Начисление.ВидРасчета.ОблагаетсяСН КАК СпособНалогообложенияСН,
	|	Начисление.ВидРасчета.ОблагаетсяОПВ КАК СпособНалогообложенияОПВ,
	|	Начисление.ВидРасчета.ОблагаетсяСО КАК СпособНалогообложенияСО,
	|	Начисление.ВидРасчета.ОблагаетсяОППВ КАК СпособНалогообложенияОППВ,
	|	Начисление.ВидРасчета.ОблагаетсяВОСМС КАК СпособНалогообложенияВОСМС,
	|	Начисление.ВидРасчета.ОблагаетсяООСМС КАК СпособНалогообложенияООСМС,
	|	Начисление.ВидРасчета.ОблагаетсяОПВР КАК СпособНалогообложенияОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМСПоНалогоплательщику.СтавкаВзносы, ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0)) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				И &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМСПоНалогоплательщику.СтавкаВзносы, ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0)) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМСПоНалогоплательщику.СтавкаВзносы, ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0)) > 0 И ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМСПоНалогоплательщику.СтавкаОтчисления, ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0)) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМСПоНалогоплательщику.СтавкаОтчисления, ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0)) > 0 И ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ПериодыИсчисленияОППВ.ИсчислятьОППВ КАК ИсчислятьОППВ
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",
	|	Начисление.Показатель1,
	|	Начисление.Показатель2,
	|	Начисление.КоэффициентИндексации,
	|	Начисление.Результат,
	|	Начисление.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА Начисление.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА Начисление.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ Начисление.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	Начисление.Авторасчет,
	|	Начисление.Сторно,
	|	ВЫБОР
	|		КОГДА Начисление.Сторно
	|			ТОГДА Начисление.Ссылка.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент";

	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями 
		И ВыборкаПоШапкеДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	&ПодразделениеОрганизации КАК СтруктурнаяЕдиница"; 
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисление
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&парамПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО Начисление.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО ИСТИНА";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО ИСТИНА
	|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахОСМС.СрезПоследних("+ ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "&ДатаУвольнения") +", Налогоплательщик = &Организация) КАК СтавкиОСМСПоНалогоплательщику
	|	ПО ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМСПоНалогоплательщику.ВидДохода";
	
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахОСМС.СрезПоследних("+ ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "&ДатаУвольнения") +", Налогоплательщик = &парамПустаяОрганизация) КАК СтавкиОСМС
	|	ПО ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(Начисление.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода";

	Запрос.Текст = Запрос.Текст + "	
	|
	|ГДЕ
	|	Начисление.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисление.НомерСтроки
	|";
             
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ПоСреднему", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	Запрос.УстановитьПараметр("МесяцевСреднего", ?(ПериодРегистрации>=Дата(2018,1,1),
												ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие2018.ЧислоМесяцев,
												ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие.ЧислоМесяцев));
	Если ВыборкаПоШапкеДокумента.ПризнакКомпенсацииОтпуска Тогда
		Если ПериодРегистрации >= Дата(2018,1,1) Тогда
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска2018;
		Иначе 
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпуска;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МесяцевСреднегоДляОтпуска", ВидРасчета.ЧислоМесяцев);
		
	Иначе
		ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск;
		Запрос.УстановитьПараметр("МесяцевСреднегоДляОтпуска", ВидРасчета.ПериодРасчетаСреднегоЗаработка);
		
	КонецЕсли; 
	Запрос.УстановитьПараметр("ПоСреднемуДляОтпуска", ВидРасчета.СпособРасчета);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , НачалоМесяца(ДатаУвольнения));

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокаРасчетСреднего.НомерСтроки,
		|	СтрокаРасчетСреднего.ВидРасчета,
		|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	ВЫБОР 
		|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата 
		|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) 
		|		ИНАЧЕ &ПустаяДата 
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
		|	СтрокаРасчетСреднего.НормаПоПятидневке,
		|	СтрокаРасчетСреднего.ОтработаноДней,
		|	СтрокаРасчетСреднего.ОтработаноЧасов,
		|	0 КАК НормаЧасов,
		|	0 КАК КалендарныхДней,
		|	СтрокаРасчетСреднего.ЧислоМесяцев,
		|	СтрокаРасчетСреднего.КоэффициентИндексации,
		|	СтрокаРасчетСреднего.Размер,
		|	СтрокаРасчетСреднего.Результат,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, СЕКУНДА, -(1)) КАК ДатаОкончанияРасчетногоПериода,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, МЕСЯЦ, -(&МесяцевСреднего)) КАК ДатаНачалаРасчетногоПериода,
		|	&МесяцевСреднего КАК ЧислоМесяцевРасчета,
		|	&ПоСреднему КАК СпособРасчета,
		|	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
		|	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии
		|ИЗ
		|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК СтрокаРасчетСреднего
		|
		|ГДЕ
		|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокаРасчетСреднегоДляОтпуска.НомерСтроки,
		|	СтрокаРасчетСреднегоДляОтпуска.ВидРасчета,
		|	СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодНачало,
		|	ВЫБОР 
		|		КОГДА СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец <> &ПустаяДата 
		|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец, ДЕНЬ) 
		|		ИНАЧЕ &ПустаяДата 
		|	КОНЕЦ,
		|	СтрокаРасчетСреднегоДляОтпуска.ОтработаноПоПятидневке,
		|	СтрокаРасчетСреднегоДляОтпуска.НормаПоПятидневке,
		|	СтрокаРасчетСреднегоДляОтпуска.ОтработаноДней,
		|	СтрокаРасчетСреднегоДляОтпуска.ОтработаноЧасов,
		|	СтрокаРасчетСреднегоДляОтпуска.НормаЧасов,
		|	СтрокаРасчетСреднегоДляОтпуска.КалендарныхДней,
		|	СтрокаРасчетСреднегоДляОтпуска.ЧислоМесяцев,
		|	СтрокаРасчетСреднегоДляОтпуска.КоэффициентИндексации,
		|	СтрокаРасчетСреднегоДляОтпуска.Размер,
		|	СтрокаРасчетСреднегоДляОтпуска.Результат,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, СЕКУНДА, -(1)),
		|	ДОБАВИТЬКДАТЕ(&ДатаНачалаСобытия, МЕСЯЦ, -(&МесяцевСреднегоДляОтпуска)),
		|	&МесяцевСреднегоДляОтпуска КАК ЧислоМесяцевРасчета,
		|	&ПоСреднемуДляОтпуска КАК СпособРасчета,
		|	СтрокаРасчетСреднегоДляОтпуска.ДатаНачалаПериодаПремии,
		|	СтрокаРасчетСреднегоДляОтпуска.ДатаОкончанияПериодаПремии
		|ИЗ
		|	Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК СтрокаРасчетСреднегоДляОтпуска
		|
		|ГДЕ
		|	СтрокаРасчетСреднегоДляОтпуска.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаУвольнения
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаУвольнения) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата увольнения сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации)
	
 	Если ВыборкаПоСтрокамДокумента.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
		Движение = Движения.УдержанияРаботниковОрганизаций.Добавить();
	Иначе
		Движение = Движения.ДополнительныеНачисленияРаботниковОрганизаций.Добавить();
		
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли; 
	
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно					    = ВыборкаПоСтрокамДокумента.Сторно;

	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;

	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.КоэффициентИндексации		= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
		Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
	Иначе 
		Движение.ГрафикРаботы			= мОсновнойГрафикРаботыПредприятия;
	КонецЕсли;
	
	// период расчета среднего заработка (расчетный период)
	КоличествоМесяцевРасчета 							= ВыборкаПоСтрокамДокумента.ЧислоМесяцевРасчета;
	Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ДобавитьМесяц(НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаУвольнения), - КоличествоМесяцевРасчета);
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаУвольнения) - 1;
	
	Движение.ДатаНачалаСобытия 			= ВыборкаПоШапкеДокумента.ДатаУвольнения;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете 	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет 				= ВыборкаПоСтрокамДокумента.Авторасчет;
	Если ТипЗнч(Движение) <> Тип("РегистрРасчетаЗапись.УдержанияРаботниковОрганизаций") Тогда
		Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуДополнительныхНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = НаборРасчетСреднего.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало        	= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец     		= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    	= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Сотрудник						= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОтработаноПоПятидневке			= ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке;
	Движение.НормаПоПятидневке				= ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
	Движение.ОтработаноДней					= ВыборкаПоСтрокамДокумента.ОтработаноДней;
	Движение.ОтработаноЧасов				= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	Движение.НормаЧасов						= ВыборкаПоСтрокамДокумента.НормаЧасов;
	Движение.КалендарныхДней				= ВыборкаПоСтрокамДокумента.КалендарныхДней;
	
	// Реквизиты
	Движение.Размер		 					= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ЧислоМесяцев 					= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.КоэффициентИндексации			= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
 	Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоСтрокамДокумента.ЧислоМесяцевРасчета;
 	Движение.СпособРасчета					= ВыборкаПоСтрокамДокумента.СпособРасчета;
 	Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ДатаНачалаРасчетногоПериода;
 	Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоСтрокамДокумента.ДатаОкончанияРасчетногоПериода;
 	Движение.ДатаНачалаПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаНачалаПериодаПремии;
 	Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаОкончанияПериодаПремии;
	
КонецПроцедуры 

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоТЧ.Результат = 0 Тогда
		// нулевые суммы не записываем
		Возврат;
	КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) И ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) И ВыборкаПоТЧ.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ОПВСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) И ВыборкаПоТЧ.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) И ВыборкаПоТЧ.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ
		И ВыборкаПоТЧ.ИсчислятьОППВ
		И ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) 
		И ВыборкаПоТЧ.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	 			

	////////////////////////////////
	// ВОСМССведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) И ВыборкаПоТЧ.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) И ВыборкаПоТЧ.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияООСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВР) И ВыборкаПоТЧ.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоШапкеДокумента.ДатаУвольнения;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	// Свойства
	Движение.Период                 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ВыборкаПоТЧ.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
	
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= - ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
	
	Иначе

		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
		
		// Реквизиты
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
	КонецЕсли;
	

	////////////////////////////////
	// ВыплаченныеДоходыРаботникамОрганизацийНУ
	
	Если ВыборкаПоТЧ.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпуск Тогда
	
		Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.мТаблицаДвижений.Добавить();
		
		//Свойства
		Движение.Период 		= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.МесяцНалоговогоПериода	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаУвольнения);
		КонецЕсли;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат;
	
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения" 
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");	
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка, УчетнаяПолитикаПоПерсоналуОрганизации);
			КонецЕсли;
		КонецЦикла;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			// свернем таблицы регистров накопления и запишем их в наборы записей
			Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
				ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
				НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
				НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА

мДлинаСуток 		= 86400; // в секундах
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОсновнойГрафикРаботыПредприятия = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
