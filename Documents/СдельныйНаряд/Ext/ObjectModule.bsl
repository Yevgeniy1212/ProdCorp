// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУпрУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;

Перем мИмяПланаСчетов Экспорт;
Перем мИмяПВХВидыСубконто Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Выработка.Сумма, Исполнители.СуммаКНачислению";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Выработка.СчетУчетаБУ, Выработка.СуммаРегл,  Исполнители.СуммаКНачислениюРегл";
		
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Организация, ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнители(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);

	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением 
	//		реквизита "Сотрудник".
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядИсполнители.Сотрудник,
				   |	СдельныйНарядИсполнители.ФизЛицо,
	               |	СдельныйНарядИсполнители.ДатаНачала,
	               |	СдельныйНарядИсполнители.ДатаОкончания,
	               |	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |ИЗ
	               |	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд.Исполнители КАК ПересекающиесяСтроки
	               |		ПО СдельныйНарядИсполнители.Ссылка = ПересекающиесяСтроки.Ссылка 
	               |			И СдельныйНарядИсполнители.Сотрудник = ПересекающиесяСтроки.Сотрудник 
	               |			И СдельныйНарядИсполнители.ДатаНачала <= ПересекающиесяСтроки.ДатаОкончания 
	               |			И ПересекающиесяСтроки.ДатаНачала <= СдельныйНарядИсполнители.ДатаОкончания
	               |			И СдельныйНарядИсполнители.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
	               |
	               |ГДЕ
	               |	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СдельныйНарядИсполнители.НомерСтроки,
	               |	СдельныйНарядИсполнители.Сотрудник,
				   |	СдельныйНарядИсполнители.ФизЛицо,
				   |	СдельныйНарядИсполнители.ДатаНачала,
	               |	СдельныйНарядИсполнители.ДатаОкончания
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	

КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	 			 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаАктуальности", 				 Дата);
	Запрос.УстановитьПараметр("ВР", 							 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата);
	Запрос.УстановитьПараметр("ВидИспользованияРабочегоВремени", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата.ОбозначениеВТабелеУчетаРабочегоВремени);
	Запрос.УстановитьПараметр("ВидВремени", 					 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени);
	Запрос.УстановитьПараметр("СпособРасчета", 					 Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
	Запрос.УстановитьПараметр("НачальнаяДата", 					 '00010101');
	Запрос.УстановитьПараметр("Прекратить", 					 Перечисления.ВидыДействияСНачислением.Прекратить);

	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением 
	//		реквизитов "Сотрудник".
	// 3. Выборка "РаботникиОрганизацииСрезПоследних": 
	//		Из регистра (срез последних) РаботникиОрганизации выбираются строки, 
	//		соответствующие работникам документа.  
    //
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядИсполнители.Сотрудник,
				   |	СдельныйНарядИсполнители.ФизЛицо,
	               |	СдельныйНарядИсполнители.Сотрудник.Наименование КАК СотрудникНаименование,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	               |	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	               |	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния,
	               |	РаботникиОрганизацииСрезПоследних.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	               |	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
				   |	ЕСТЬNULL(ВЫБОР
				   |				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
				   |						И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
				   |					ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения
				   |				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета
				   |			КОНЕЦ, ЕСТЬNULL(ПрочиеПлановыеНачисления.ВидРасчета, &ВР)) КАК ВидРасчета,
				   |	ЕСТЬNULL(ВЫБОР
				   |				КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
				   |						И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
				   |					ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ОбозначениеВТабелеУчетаРабочегоВремени
				   |				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
				   |			КОНЕЦ, ЕСТЬNULL(ПрочиеПлановыеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени, &ВидИспользованияРабочегоВремени)) КАК ВидИспользованияРабочегоВремени,
				   |	СдельныйНарядИсполнители.ДатаНачала,
				   |	СдельныйНарядИсполнители.ДатаОкончания,
				   |	СдельныйНарядИсполнители.ОтработаноДней,
				   |	СдельныйНарядИсполнители.ОтработаноЧасов,
				   |	ВЫБОР
				   |		КОГДА СдельныйНарядИсполнители.Сотрудник.Организация = &ГоловнаяОрганизация
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	               |ИЗ
	               |	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Исполнители1.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(Исполнители2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |		ИЗ
	               |			Документ.СдельныйНаряд.Исполнители КАК Исполнители1
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СдельныйНаряд.Исполнители КАК Исполнители2
	               |				ПО Исполнители1.Сотрудник = Исполнители2.Сотрудник 
	               |					И Исполнители1.НомерСтроки < Исполнители2.НомерСтроки 
	               |					И Исполнители1.Ссылка = Исполнители2.Ссылка 
	               |					И Исполнители1.ДатаНачала <= Исполнители2.ДатаОкончания
	               |					И Исполнители2.ДатаНачала <= Исполнители1.ДатаОкончания
	               |		
	               |		ГДЕ
	               |			Исполнители1.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Исполнители1.НомерСтроки) КАК ПересекающиесяСтроки
	               |		ПО СдельныйНарядИсполнители.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |						&ДатаАктуальности,
	               |						Организация = &ГоловнаяОрганизация
	               |						И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
	               |											СдельныйНарядИсполнители.Сотрудник
	               |										ИЗ 
	               |											Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	               |										ГДЕ
	               |											СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
	               |		ПО СдельныйНарядИсполнители.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	               |						&ДатаАктуальности,
	               |						Организация = &ГоловнаяОрганизация
	               |						И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	
	               |											СдельныйНарядИсполнители.Сотрудник
	               |										ИЗ
	               |											Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	               |										ГДЕ 
	               |											СдельныйНарядИсполнители.Ссылка = &ДокументСсылка ) 
	               |						И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	               |		ПО СдельныйНарядИсполнители.Сотрудник = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник
	               |				И (ВЫБОР
				   |					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
				   |							И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
				   |						ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.СпособРасчета
				   |					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.СпособРасчета
				   |				КОНЕЦ = &СпособРасчета)
	               |				И (ВЫБОР
				   |					КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
				   |							И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
				   |						ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ДействиеЗавершения
				   |					ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Действие
				   |				КОНЕЦ <> &Прекратить)
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |								ПлановыеНачисления.Сотрудник,
				   |								МАКСИМУМ(ВЫБОР
				   |											КОГДА ПлановыеНачисления.ПериодЗавершения <> &НачальнаяДата
				   |													И ПлановыеНачисления.ПериодЗавершения < &ДатаАктуальности
				   |												ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
				   |											ИНАЧЕ ПлановыеНачисления.ВидРасчета
				   |										 КОНЕЦ) КАК ВидРасчета
				   |							ИЗ
				   |								РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
				   |											&ДатаАктуальности,
				   |											Организация = &ГоловнаяОрганизация
				   |											И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |																СдельныйНарядИсполнители.Сотрудник
	               |															ИЗ
	               |																Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	               |															ГДЕ 
	               |																СдельныйНарядИсполнители.Ссылка = &ДокументСсылка)
	               |											И ВидРасчетаИзмерение <> НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисления
	               |							ГДЕ
	               |								ВЫБОР
				   |									КОГДА ПлановыеНачисления.ПериодЗавершения < &ДатаАктуальности
				   |											И ПлановыеНачисления.ПериодЗавершения <> &НачальнаяДата
				   |										ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.СпособРасчета
				   |									ИНАЧЕ ПлановыеНачисления.ВидРасчета.СпособРасчета
				   |								КОНЕЦ = &СпособРасчета
	               |								И ВЫБОР
				   |									КОГДА ПлановыеНачисления.ПериодЗавершения < &ДатаАктуальности
				   |											И ПлановыеНачисления.ПериодЗавершения <> &НачальнаяДата
				   |										ТОГДА ПлановыеНачисления.ДействиеЗавершения
				   |									ИНАЧЕ ПлановыеНачисления.Действие
				   |								КОНЕЦ <> &Прекратить
				   |
				   |							СГРУППИРОВАТЬ ПО
				   |								ПлановыеНачисления.Сотрудник) КАК ПрочиеПлановыеНачисления
				   |			ПО СдельныйНарядИсполнители.Сотрудник = ПрочиеПлановыеНачисления.Сотрудник
	               |
	               |ГДЕ
	               |	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

Функция СформироватьЗапросПоВыработка(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядВыработка.ТехнологическаяОперация,
	               |	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	               |	СдельныйНарядВыработка.СтатьяЗатрат
				   |ИЗ
	               |	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	               |
	               |ГДЕ
	               |	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов определяем тип 
    //      значения субконто, требуемых счету бух. учета 
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядВыработка.ТехнологическаяОперация,
	               |	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	               |	СдельныйНарядВыработка.СтатьяЗатрат,
	               |	СдельныйНарядВыработка.СуммаРегл КАК СуммаЗаРаботу,
	               |	СдельныйНарядВыработка.СчетЗатрат,
	               |	Истина КАК СоответствуетПлануСчетов,
	               |	СдельныйНарядВыработка.ОбъектСтроительства,
	               |	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	               |	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	               |	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3
	               |ИЗ
	               |	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидСубконтоДт1
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт1.Ссылка И (ВидСубконтоДт1.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидСубконтоДт2
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт2.Ссылка И (ВидСубконтоДт2.НомерСтроки = 2)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидСубконтоДт3
	               |		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт3.Ссылка И (ВидСубконтоДт3.НомерСтроки = 3)				   
	               |
	               |ГДЕ
	               |	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыработкаРегл()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Исполнители" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиИсполнители(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Исполнители"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда // сотрудник указан дважды
		СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;	
	
	// Период работы
	НеУказанПериод = РазвернутыйПериод И (НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания));
	НеУказанПериод = НеУказанПериод ИЛИ (Не РазвернутыйПериод И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала));
	Если НеУказанПериод Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан период работы!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "неверно указан период работы!", Отказ, Заголовок);
	Иначе 
		НМ = НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
		КМ = КонецМесяца(ВыборкаПоШапкеДокумента.Дата);
		Если НМ > ВыборкаПоСтрокамДокумента.ДатаНачала ИЛИ НМ > ВыборкаПоСтрокамДокумента.ДатаОкончания ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КМ Или ВыборкаПоСтрокамДокумента.ДатаОкончания > КМ Тогда 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указанный период работы не соответствует дате документа!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

Процедура ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Исполнители"": ";
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
		КонецЕсли;
	
		ЕстьВидРасчета = Истина;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
			ЕстьВидРасчета = Ложь;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не определен вид расчета со способом " + 
									"""Сдельный заработок"" среди плановых начислений работника!", Отказ, Заголовок);
		КонецЕсли;

		Если ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(Дата, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
		КонецЕсли;

		// Режим однодатного ввода
		Если НЕ ВыборкаПоШапкеДокумента.РазвернутыйПериод Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаНачала <> ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "в режиме ввода данных за каждую дату начало и конец периода должны совпадать!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.УчитыватьОтработанныеЧасы Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) 
					И ЕстьВидРасчета Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не определен вид учета времени для вида расчета '" + 
									ВыборкаПоСтрокамДокумента.ВидРасчета + "' из плановых начислений работника!", Отказ, Заголовок);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.ОтработаноЧасов = 0 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано количество отработанных часов!", Отказ, Заголовок);
			КонецЕсли;
			
			// Режим однодатного ввода
			Если НЕ ВыборкаПоШапкеДокумента.РазвернутыйПериод Тогда
				Если ВыборкаПоСтрокамДокумента.ОтработаноЧасов > 24 Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "в режиме ввода данных за каждую дату число часов не должно превышать 24!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "Выработка" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВыработка(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выполненные работы"": ";
	
	// ТехнологическаяОперация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТехнологическаяОперация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрана технологическая операция!", Отказ, Заголовок);
	КонецЕсли;

	// СтатьяЗатрат
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтатьяЗатрат) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана статья затрат!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

Процедура ПроверитьЗаполнениеСтрокиВыработкаРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выполненные работы"": ";
	
	// счета учета
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УказанСчетЗатрат = Истина;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатрат) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан счет бухгалтерского учета!", Отказ, Заголовок);
			УказанСчетЗатрат = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];	
	ДвиженияРегистровРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, УчетнаяПолитикаПоПерсоналуОрганизации);
	ДвиженияРегистровБУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл, УчетнаяПолитикаПоПерсоналуОрганизации);
	
КонецПроцедуры // ДвиженияРегистров()

Процедура ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВУправленческомУчете Тогда
		
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
	
		Для Каждого СтрокаТЧ Из ВыборкаПоРаботники Цикл 
			 Если СтрокаТЧ.СуммаКНачислению <> 0 Тогда
				 НоваяСтрока = НаборДвижений.Добавить();
				 НоваяСтрока.Период = СтрокаТЧ.ДатаОкончания;
				 НоваяСтрока.Физлицо = СтрокаТЧ.Физлицо;
				 НоваяСтрока.Выработка = СтрокаТЧ.СуммаКНачислению;
			 КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
		
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.Сотрудник = ВыборкаПоРаботники.Сотрудник;
				НоваяСтрока.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				НоваяСтрока.Выработка = ВыборкаПоРаботники.СуммаКНачислению;
				НоваяСтрока.Период = ВыборкаПоРаботники.ДатаОкончания;
			КонецЕсли;

			Если ВыборкаПоШапкеДокумента.УчитыватьОтработанныеЧасы Тогда
				// заносим отработанное время в регистр накопления РабочееВремяРаботниковОрганизаций
				Движение = Движения.РабочееВремяРаботниковОрганизаций.Добавить();
				
				// Свойства
				Движение.Период			= НачалоДня(ВыборкаПоРаботники.ДатаОкончания);
				
				// Измерения
				Движение.Сотрудник 		= ВыборкаПоРаботники.Сотрудник;
				Движение.Организация 	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ВидИспользованияРабочегоВремени = ВыборкаПоРаботники.ВидИспользованияРабочегоВремени;
				
				// Ресурсы - только дни и часы (нормы времени будут взяты из графика)
				Движение.Дней			= ВыборкаПоРаботники.ОтработаноДней;
				Движение.Часов			= ВыборкаПоРаботники.ОтработаноЧасов;
				
				// Реквизиты
				Движение.СводнаяЗапись	= ВыборкаПоШапкеДокумента.РазвернутыйПериод;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровБУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, ТаблицаРабот, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		ВыборкаПоРаботники.Сбросить();
		Работников = ВыборкаПоРаботники.Количество();
		
		Сч = 0;
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
						Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
					
					Строка = Движения.БУОсновныеНачисления.Добавить();
					
					// свойства
					Строка.ПериодРегистрации		= НачалоМесяца(ВыборкаПоШапкеДокумента.Дата);
					Строка.ПериодДействияНачало		= ВыборкаПоРаботники.ДатаНачала;
					Строка.ПериодДействияКонец		= КонецДня(ВыборкаПоРаботники.ДатаОкончания);
					Строка.ВидРасчета				= ВыборкаПоРаботники.ВидРасчета;
					
					// Измерения
					Строка.Сотрудник = ВыборкаПоРаботники.Сотрудник;										
					Строка.ФизЛицо = ВыборкаПоРаботники.ФизЛицо;										
					Строка.Организация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// ресурсы                               
					Строка.Результат = Результат;
					
					// реквизиты
					Строка.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
					
					Строка.СчетДт = СтрокаТЗ.СчетЗатрат;
					Строка.СчетКт = СчетУчетаРасчетовСРаботниками;
					
					// - КУФИБ - начало
					Строка.СчетДтНУ = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СчетДтНУ;
					Строка.СчетКтНУ = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СчетКтНУ;
					Строка.СубконтоДтНУ1 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоДтНУ1;
					Строка.СубконтоДтНУ2 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоДтНУ2;
					Строка.СубконтоДтНУ3 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоДтНУ3;
					Строка.СубконтоКтНУ1 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоКтНУ1;
					Строка.СубконтоКтНУ2 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоКтНУ2;
					Строка.СубконтоКтНУ3 = СтрокаТЗ.ТехнологическаяОперация.СпособОтраженияЗарплатыВБухучете.СубконтоКтНУ3;
					МассивСП = Новый Массив;
					МассивСП.Добавить("Дт");
					МассивСП.Добавить("Кт");
					Для Каждого СП Из МассивСП Цикл
						Для Инд = 1 По 3 Цикл
							Если Строка["Счет"+СП+"НУ"].ВидыСубконто.Количество() < Инд Тогда
								Продолжить;
							КонецЕсли;
							ВидСубконто = Строка["Счет"+СП+"НУ"].ВидыСубконто.Получить(Инд-1).ВидСубконто;
							Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда
							    Строка["Субконто"+СП+"НУ"+Строка(Инд)] = Строка.ФизЛицо;
							ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
								Строка["Субконто"+СП+"НУ"+Строка(Инд)] = СтрокаТЗ.СтатьяЗатрат;
								
							ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
								Строка["Субконто"+СП+"НУ"+Строка(Инд)] = СтрокаТЗ.НоменклатурнаяГруппа;
								
							ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
								Строка["Субконто"+СП+"НУ"+Строка(Инд)] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
								
							ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОбъектыСтроительства 
										Или ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
								Строка["Субконто"+СП+"НУ"+Строка(Инд)] = СтрокаТЗ.ОбъектСтроительства;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
			
					
					
					// - КУФИБ - конец
					
					Строка.СубконтоКт1 = ВыборкаПоРаботники.ФизЛицо;
					
					// субконто
					Для СчСк = 1 По 3 Цикл
						
						ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
						
						Если ВидыСубконтоСк = NULL Тогда
						
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.СтатьяЗатрат;
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.НоменклатурнаяГруппа;
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
							Строка["СубконтоДт" + СчСк] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОбъектыСтроительства 
									Или ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.ОбъектСтроительства;
							
						//ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыДеятельности Тогда
						//	Строка["СубконтоДт" + СчСк] = СтрокаТЗ.ВидДеятельности;
							
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверка заполнения шапки документа
	РеквизитыШапки = "";
	Если ОтражатьВУправленческомУчете Тогда
		ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	КонецЕсли;
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	
	// проверка совпадения сумм по т.ч. 
	Если ОтражатьВУправленческомУчете Тогда
		Если Выработка.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если Выработка.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// получим реквизиты табличной части
	ВыборкаПоРаботники = СформироватьЗапросПоИсполнители(Режим).Выбрать();
	ВыборкаПоРаботникиРегл = Неопределено;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл(СтруктураШапкиДокумента).Выбрать();
	КонецЕсли;
	
	Пока ВыборкаПоРаботники.Следующий() Цикл
		Если ОтражатьВБухгалтерскомУчете Тогда
			ВыборкаПоРаботникиРегл.Следующий();
		КонецЕсли;
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиИсполнители(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, Отказ, Заголовок);
	КонецЦикла;
	
	// проверим общие реквизиты
	ВыборкаПоРаботы = СформироватьЗапросПоВыработка(Режим).Выбрать();
	Пока ВыборкаПоРаботы.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиВыработка(СтруктураШапкиДокумента, ВыборкаПоРаботы, Отказ, Заголовок);
	КонецЦикла;
	
	// проверим реквизиты регл учета
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		РезультатЗапросаПоРаботыРегл = СформироватьЗапросПоВыработкаРегл(Режим);
		ТаблицаРаботРегл = РезультатЗапросаПоРаботыРегл.Выгрузить();
		ВыборкаПоРаботыРегл = РезультатЗапросаПоРаботыРегл.Выбрать();
		Пока ВыборкаПоРаботыРегл.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиВыработкаРегл(СтруктураШапкиДокумента, ВыборкаПоРаботыРегл, Отказ, Заголовок);
		КонецЦикла;
		ВыборкаПоРаботникиРегл.Сбросить();
		
	КонецЕсли;
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		ДвиженияРегистров(СтруктураШапкиДокумента, Исполнители, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Исполнители);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	Если НЕ РазвернутыйПериод Тогда 
		Исполнители.ЗагрузитьКолонку(Исполнители.ВыгрузитьКолонку("ДатаНачала"),"ДатаОкончания");
	КонецЕсли;
	
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
		
КонецПроцедуры

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();

мИмяПланаСчетов 	= "Типовой";
мИмяПВХВидыСубконто = "ВидыСубконтоТиповые";
