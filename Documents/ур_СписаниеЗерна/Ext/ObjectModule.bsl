////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчетБУ;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
    Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	Склад,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|		Количество,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		ЕдиницаИзмерения.Представление   КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ур_СписаниеЗерна КАК ОприходованиеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО ОприходованиеТоваров.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	Макет       = ПолучитьМакет("Накладная");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеЗерна_Накладная";

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Акт списания зерна", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда

			Сообщить("В строке "+ВыборкаСтрокТовары.НомерСтроки + " не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);

			Продолжить;

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                         + ", на сумму " + ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	// заполняем МОЛ
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
	ОбластьМакета.Параметры.Получил = ДанныеМОЛ.Представление;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()

#КонецЕсли

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ)

	Если ЗаполнятьБУ = Истина Тогда

		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Типовой.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ

// Процедура заполняет счет налогового учетав строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ)
	
	Если ЗаполнятьНУ  = Истина Тогда
    	УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, "КорСчетОприходованияБУ","КорСчетОприходованияНУ", Дата);
				
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, "СчетУчетаБУ","СчетУчетаНУ", Дата);
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.КорСчетОприходованияНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНУ 			= ПланыСчетов.Налоговый.ПустаяСсылка();		
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСчетаНУ()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
			
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость","Акт списания зерна");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчетаБУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент                               КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|		КОНЕЦ)                                    КАК КоличествоОприходованное,
	|	Док.Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ДокументОснование			    = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.СчетУчетаБУ,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Цена";
	Выборка = Запрос.Выполнить().Выбрать();

	Склад   = ДокументОснование.Склад;

	СтрокиДобавлены = Ложь;

	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;

		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли; 

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура        = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество          = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                = Выборка.Цена;
		СтрокаТабличнойЧасти.СчетУчетаБУ	     = Выборка.СчетУчетаБУ;
		
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, "СчетУчетаБУ","СчетУчетаНУ" , Дата);
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБУ(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ);
	ЗаполнитьСчетаНУ(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет табличную часть Товары данными документа-основания РеструктуризацияОС
//
Процедура ЗаполнитьТоварыПоРеструктуризацииОС(Основание)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОС.ИсходноеОсновноеСредство,
				   |	РеструктуризацияОС.Дата КАК ДатаОснования
	               |ИЗ
	               |	Документ.РеструктуризацияОС КАК РеструктуризацияОС
	               |ГДЕ
	               |	РеструктуризацияОС.Ссылка = &Основание";
				   
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	ОС = Неопределено;
	ДатаОснования = Неопределено;
	Если ВыборкаОС.Следующий() Тогда
		ОС = ВыборкаОС.ИсходноеОсновноеСредство;
		ДатаОснования = ВыборкаОС.ДатаОснования;
	КонецЕсли;	
	
	Если ОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим счет учета ОС на дату документа основания, и заполним им поле "Корр. счет пориходования"
	Запрос.УстановитьПараметр("Период", 	 ДатаОснования);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОС", 		 ОС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНУ
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |			&Период,
	               |			ОсновноеСредство = &ОС
	               |				И Организация = &Организация) КАК СчетаУчетаОССрезПоследних";
				   
	ВыборкаСчетаОС = Запрос.Выполнить().Выбрать();
	
	СчетаУчетаОСБУ = Неопределено;
	СчетаУчетаОСНУ = Неопределено;
	Если ВыборкаСчетаОС.Следующий() Тогда
		СчетаУчетаОСБУ = ВыборкаСчетаОС.СчетУчетаБУ;
		СчетаУчетаОСНУ = ВыборкаСчетаОС.СчетУчетаНУ;
	КонецЕсли;	
	
	// найдем тек. местонахождение исходного ОС, если ведется аналит. учет ОС
	ВедетсяАналитУчетОсПоПодразделениям  = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(ДатаОснования);
	ВедетсяАналитУчетОсПоМОЛ			 = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(ДатаОснования);
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		ТабТекМестонахождениеОС = УправлениеВнеоборотнымиАктивами.ОпределитьТекущееМестонахождениеДляСпискаОС(ДатаОснования, Организация, ОС);
		
		СтрокаМестонахождениеОС = ТабТекМестонахождениеОС.Найти(ОС,"ОсновноеСредство");
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСТовары.НомерСтроки,
	               |	РеструктуризацияОСТовары.Номенклатура,
	               |	РеструктуризацияОСТовары.Количество,
	               |	РеструктуризацияОСТовары.Сумма,
	               |	РеструктуризацияОСТовары.ЕдиницаИзмерения,
	               |	РеструктуризацияОСТовары.Цена,
	               |	РеструктуризацияОСТовары.СчетУчетаБУ,
	               |	РеструктуризацияОСТовары.СчетУчетаНУ,
	               |	РеструктуризацияОСТовары.Коэффициент
	               |ИЗ
	               |	Документ.РеструктуризацияОС.Товары КАК РеструктуризацияОСТовары
	               |ГДЕ
	               |	РеструктуризацияОСТовары.Ссылка = &Основание";
				   
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТовары.Следующий() Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура        = ВыборкаТовары.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = ВыборкаТовары.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = ВыборкаТовары.Коэффициент;
		
		СтрокаТабличнойЧасти.Количество          = ВыборкаТовары.Количество;
		СтрокаТабличнойЧасти.Цена                = ВыборкаТовары.Цена;
		СтрокаТабличнойЧасти.Сумма				 = ВыборкаТовары.Сумма;
		
		СтрокаТабличнойЧасти.СчетУчетаБУ	     = ВыборкаТовары.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ	     = ВыборкаТовары.СчетУчетаНУ;

		СтрокаТабличнойЧасти.КорСчетОприходованияБУ = СчетаУчетаОСБУ;
		
		СтрокаТабличнойЧасти.КорСчетОприходованияНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетаУчетаОСБУ), , , ТекущаяДата());
		
		Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
			Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства
				Или СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
				
				СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = ОС;
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияНУ.ВидыСубконто Цикл
			Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства
				Или СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы Тогда
				
				СтрокаТабличнойЧасти["КорСубконтоОприходованияНУ" + СтрокаВидСубконто.НомерСтроки] = ОС;
			ИначеЕсли СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыДвиженияСтоимостиФА Тогда
				СтрокаТабличнойЧасти["КорСубконтоОприходованияНУ" + СтрокаВидСубконто.НомерСтроки] = Перечисления.ВидыДвиженияСтоимостиФА.Выбытие;
			КонецЕсли;	
		КонецЦикла;
		
		
		// установим данные по местонахождению
		Если ВедетсяАналитУчетОсПоПодразделениям Тогда
			Если СтрокаМестонахождениеОС <> Неопределено Тогда
				Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = СтрокаМестонахождениеОС.ПодразделениеОрганизации;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
		
		Если ВедетсяАналитУчетОсПоМОЛ Тогда
			Если СтрокаМестонахождениеОС <> Неопределено Тогда
				Для Каждого СтрокаВидСубконто Из СтрокаТабличнойЧасти.КорСчетОприходованияБУ.ВидыСубконто Цикл
					Если СтрокаВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций Тогда
						СтрокаТабличнойЧасти["КорСубконтоОприходованияБУ" + СтрокаВидСубконто.НомерСтроки] = СтрокаМестонахождениеОС.МОЛОрганизации;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры	

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	//Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ДокументОснование = Основание;
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	КурсДокумента      = 1;
	КратностьДокумента = 1;
    
	//ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеструктуризацияОС") Тогда
		ЗаполнитьТоварыПоРеструктуризацииОС(Основание);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	Если СтруктурашапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
		
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	СтруктураОбязательныхПолей = Новый Структура("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("КорСчетОприходованияБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		//СтруктураОбязательныхПолей.Вставить("КорСчетОприходованияНУ");
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно("Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            			   Отказ, Заголовок) 

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	ТабличнаяЧасть      = ЭтотОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;

	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
													
		НетКорреспонденцииНетНУ = Ложь;
		СчетБУ = СтрокаТаблицы["СчетУчетаБУ"];
		Если Не СчетБУ.Пустая() ТОгда
			Если СчетБУ.Забалансовый = 1 Тогда
				НетКорреспонденцииНетНУ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Если НетКорреспонденцииНетНУ Тогда
				Если (КлючЗначение.Ключ = "СчетУчетаНУ") Или (КлючЗначение.Ключ = "КорСчетОприходованияНУ") Или 
					 (КлючЗначение.Ключ = "КорСчетОприходованияБУ") Тогда
					Продолжить; // в оприходовании товаров если выбран забалансовый счет БУ, то не нужен кор.счет и счета НУ, выходим не ругаясь.
				КонецЕсли;
			КонецЕсли; 
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;		

	КонецЦикла;

КонецПроцедуры // ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти()

//Проверяем правильность заполнения реквизитов зерновой расписки
Процедура ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	СтрокаНачалаСообщенияОбОшибке = "";
	Для каждого СтрокаЗР ИЗ ТаблицаПоЗерновымРаспискам Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗР.НомерСтроки) +
		""" Зерновая расписка """;
		
		если Не ЗначениеЗаполнено(СтрокаЗР.ВидРесурса) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита вид ресурса !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.ГодУрожая) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Год урожая !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Культура) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита Вид культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаЗР.Класс) Тогда
			
			СтрокаСообщения = "Не заполнено значение реквизита класс культуры !";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)

	ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	ДвиженияРегистровПодсистемыУчетаРесурсовНедостача(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
		
	// Бухгалтерские проводки
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	СтратегииСписания = Новый Соответствие;

	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Списано зерно";
		Проводка.Сумма        = СтрокаТаблицы.Сумма;

		Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",       СтруктураШапкиДокумента.Склад);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",       СтрокаТаблицы.ЗерноваяРасписка);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		// если нет соответствия стратегии выбранному счету, добавим значение
		//Если СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ) = Неопределено Тогда
		//	СтратегииСписания.Вставить(СтрокаТаблицы.СчетУчетаБУ,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СтрокаТаблицы.СчетУчетаБУ));
		//КонецЕсли;
		//
		//ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ);
		//Если ВедетсяПартионныйУчетДляСчета Тогда 
		//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",       Ссылка);
		//КонецЕсли;

		Проводка.КоличествоКт = СтрокаТаблицы.Количество;

		Проводка.СчетДт = СтрокаТаблицы.КорСчетОприходованияБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконтоОприходованияБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконтоОприходованияБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконтоОприходованияБУ3);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт = мВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.Сумма;
		КонецЕсли;

		// поводки по налоговому учету
		Если не СтрокаТаблицы.СчетУчетаБУ.Забалансовый  Тогда
			Если НЕ СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Номенклатура",	СтрокаТаблицы.Номенклатура,Истина , Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Склады",	СтруктураШапкиДокумента.Склад);
            			
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;

			Проводка.СчетДт = СтрокаТаблицы.КорСчетОприходованияНУ;		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконтоОприходованияНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконтоОприходованияНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконтоОприходованияНУ3);
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			Проводка.Содержание   = "Списано зерно";	
		КонецЕсли;	
	КонецЦикла; // Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
	
КонецПроцедуры // ДвиженияПоРегистрам()


Процедура ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации)
	
	Статус = УправлениеРесурсами.ПолучитьСтатусЗерновойРасписки(СтрокаТаблицы.ЗерноваяРасписка);
	если Статус <> Неопределено Тогда
		//Движения по регистру сведений "Статусы зерновых расписок
		//
		Движение = Движения.ур_СтатусыЗерновыхРасписок.Добавить();
		// Свойства
		Движение.Период           = СтруктураШапкиДокумента.Дата;
		// Измерения
		Движение.ЗерноваяРасписка = СтрокаТаблицы.ЗерноваяРасписка.Ссылка;
		
		// Ресурсы
		Движение.Статус         = Перечисления.ур_СтатусыЗерновойРасписки.Закрыта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам,СтруктураШапкиДокумента)
	
	НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = СтруктураШапкиДокумента.организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
	Иначе 
		КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоЗерновымРаспискам Цикл
		ДвиженияРегистровСведенийПоСтроке(СтрокаТаблицы,СтруктураШапкиДокумента, КонтрагентОрганизации);
		
		 //Движение по оборотному регистру "Движения зерна"
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		
		Движение.Период 				 = СтруктураШапкиДокумента.Дата;
		Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
		Движение.Склад 	  				 = СтруктураШапкиДокумента.Склад;
		Движение.ТипОперации			 = СтруктураШапкиДокумента.ТипОперации;
		Движение.Контрагент 			 = СтруктураШапкиДокумента.Склад;
		//Движение.ДоговорКонтрагента 	 = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Видресурса				 = СтрокаТаблицы.Видресурса;
		Движение.РегламентныйВидОперации = Перечисления.ур_РегламентныеОперацииДвиженияЗерна.Расход;
		Движение.Зерноваярасписка		 = СтрокаТаблицы.Зерноваярасписка;
		Движение.ЗачтенныйВес  			 = СтрокаТаблицы.ЗачтенныйВес;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета ресурсов "ЗерноНаСкладах"
Процедура ДвиженияРегистровПодсистемыУчетаРесурсов(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	
	ДвиженияРегистровСведенийПодсистемыУчетаРесурсов(ТаблицаПоЗерновымРаспискам, СтруктураШапкиДокумента);
	
	НаборДвижений = Движения.ур_ЗерноНаСкладах;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаПоЗерновымРаспискамПолученным = ТаблицаПоЗерновымРаспискам.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗерновымРаспискамПолученным, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипОперации,"ТипОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ур_ЗерноНаСкладах.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровПодсистемыУчетаРесурсовНедостача(СтруктураШапкиДокумента, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок)
	
	Если ДвижениеПоНедостаче = Истина Тогда
		
		// регистр ур_ЗерноПоНедостаче Приход
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Движение = Движения.ур_ЗерноПоНедостаче.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Организация = Организация;
			Движение.Склад = Склад;
			Движение.Культура = ТекСтрокаТовары.ЗерноваяРасписка.ВидКультуры;
			Движение.Класс = ТекСтрокаТовары.ЗерноваяРасписка.КлассностьКультуры;
			Движение.ГодУрожая = ТекСтрокаТовары.ЗерноваяРасписка.ГодУрожая;
			Движение.ЗерноваяРасписка = ТекСтрокаТовары.ЗерноваяРасписка;
			Движение.Видзерна = ТекСтрокаТовары.ЗерноваяРасписка.ВидЗерна;
			Движение.ЗачтенныйВес = ТекСтрокаТовары.Количество;
			Движение.Сумма = ТекСтрокаТовары.Сумма;
			Движение.Цена = ТекСтрокаТовары.Цена;
			Движение.СуммаНедостачи = ТекСтрокаТовары.Сумма;
			Движение.ТипОперации = ТипОперации;
			Движение.ДатаОбразования = Дата;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуоснования(Основание);	
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"        			, "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"       			, "Номенклатура");
	СтруктураПолей.Вставить("ЗерноваяРасписка"       		, "ЗерноваяРасписка");
	СтруктураПолей.Вставить("Количество"         			, "Количество");
	СтруктураПолей.Вставить("Коэффициент"         			, "Коэффициент");
	СтруктураПолей.Вставить("Сумма"              			, "Сумма");
	СтруктураПолей.Вставить("Услуга"             			, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"        			, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        			, "СчетУчетаНУ");
	СтруктураПолей.Вставить("КорСчетОприходованияБУ"		, "КорСчетОприходованияБУ");
	СтруктураПолей.Вставить("КорСубконтоОприходованияБУ1"   , "КорСубконтоОприходованияБУ1");
	СтруктураПолей.Вставить("КорСубконтоОприходованияБУ2"   , "КорСубконтоОприходованияБУ2");
	СтруктураПолей.Вставить("КорСубконтоОприходованияБУ3"   , "КорСубконтоОприходованияБУ3");
	
	СтруктураПолей.Вставить("КорСчетОприходованияНУ"		, "КорСчетОприходованияНУ");
	СтруктураПолей.Вставить("КорСубконтоОприходованияНУ1"   , "КорСубконтоОприходованияНУ1");
	СтруктураПолей.Вставить("КорСубконтоОприходованияНУ2"   , "КорСубконтоОприходованияНУ2");
	СтруктураПолей.Вставить("КорСубконтоОприходованияНУ3"   , "КорСубконтоОприходованияНУ3");
	

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	ТаблицаПоЗерновымРаспискам    = УправлениеРесурсами.ПодготовитьТаблицуЗерновыхРасписок(ЭтотОбъект);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеЗерновыхРасписок(ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда	
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоЗерновымРаспискам, Отказ, Заголовок);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();