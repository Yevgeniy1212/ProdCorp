////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем СоответствиеВидовНалоговСчетам Экспорт;

// Для управления движениями по регистрам накопления и видимостью дополнительных реквизитов ТЧ
Перем мОтражениеДанныхИП Экспорт;
Перем мДополнительныеПараметрыОтражения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура перезаполения документа по данным регламентированного отчета.
//
Процедура Перезаполнение() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтчета = ДокументОснование.ДанныеОтчета.Получить();
	ДанныеОтчета.Свойство("ДополнительныеПараметрыОтражения", мДополнительныеПараметрыОтражения);
	
	мДополнительныеПараметрыОтражения = ?(мДополнительныеПараметрыОтражения = Неопределено, Новый Структура, мДополнительныеПараметрыОтражения);
	
	мДополнительныеПараметрыОтражения.Свойство("ОтражениеДанныхИП", мОтражениеДанныхИП);
		
	// Определяется дополнительными параметрами отчетов, по умолчанию - Ложь
	мОтражениеДанныхИП = ?(мОтражениеДанныхИП = Неопределено, Ложь, мОтражениеДанныхИП);

	// ключ структуры должен полностью соответствовать значениям в колонке "Вид налога"
	// ключ - может принимать значение одного из предопред.элементов справочника "Налоги, сборы и отчисления"
	// значение - соответствующий счет налога
	// макета "Отражене в учете"
	СтруктураВидовНалоговСчетам = Новый Структура;
	СтруктураВидовНалоговСчетам.Вставить("ЗемельныйНалог",ПланыСчетов.Типовой.ЗемельныйНалог);
	СтруктураВидовНалоговСчетам.Вставить("НалогНаИмущество",ПланыСчетов.Типовой.НалогНаИмущество);
	СтруктураВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалог",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураВидовНалоговСчетам.Вставить("ИндивидуальныйПодоходныйНалогИностранныеГраждане",ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
	СтруктураВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимость",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураВидовНалоговСчетам.Вставить("НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	СтруктураВидовНалоговСчетам.Вставить("Акциз",ПланыСчетов.Типовой.Акцизы);
	СтруктураВидовНалоговСчетам.Вставить("НалогНаПрибыль",ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
	СтруктураВидовНалоговСчетам.Вставить("НалогНаТранспорт",ПланыСчетов.Типовой.НалогНаТранспортныеСредства);	
	СтруктураВидовНалоговСчетам.Вставить("ОбязательныеСоциальныеОтчисления",ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	СтруктураВидовНалоговСчетам.Вставить("ОбязательныеПенсионныеВзносы",ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	СтруктураВидовНалоговСчетам.Вставить("СоциальныйНалог",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураВидовНалоговСчетам.Вставить("СоциальныйНалогИнвалиды",ПланыСчетов.Типовой.СоциальныйНалог);
	СтруктураВидовНалоговСчетам.Вставить("СоциальныйНалогИностранныеСпециалисты",ПланыСчетов.Типовой.СоциальныйНалог);

	НазваниеОтчета = ДокументОснование.ИсточникОтчета;
	МакетОтражения = РегламентированнаяОтчетность.ПолучитьМакетРеглОтчета(НазваниеОтчета, "ОтражениевУчете");
	
	мСписокСохранения = ДокументОснование.ДанныеОтчета.Получить();
	СписокФормБезИерархии = Неопределено;
	мСписокСохранения.Свойство("ПоказателиОтчета", СписокФормБезИерархии);
	
	СписокСтруктурныхЕдиниц = Неопределено;
	Если НЕ мСписокСохранения.Свойство("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц) 
		ИЛИ СписокСтруктурныхЕдиниц = Неопределено Тогда
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	КонецЕсли;
	
	Если мОтражениеДанныхИП ИЛИ НазваниеОтчета = "РегламентированныйОтчет701Форма" ИЛИ НазваниеОтчета = "РегламентированныйОтчет70101Форма" ИЛИ НазваниеОтчета = "РегламентированныйОтчет700Форма"
		ИЛИ НазваниеОтчета = "РегламентированныйОтчет910Форма"Тогда
		ТаблицаОтраженияВУчете = РегламентированнаяОтчетность.ПолучитьТаблицуОтраженияВУчете(ДокументОснование.Ссылка, МакетОтражения, СписокФормБезИерархии, СписокСтруктурныхЕдиниц, мДополнительныеПараметрыОтражения);
	Иначе
		ТаблицаОтраженияВУчете = РегламентированнаяОтчетность.ПолучитьТаблицуОтраженияВУчете(ДокументОснование.Ссылка, МакетОтражения, СписокФормБезИерархии, СписокСтруктурныхЕдиниц);
	КонецЕсли;
	
	
	// проверим есть ли данные для отражения
	ОбщаяСуммаОтраженияВУчете = ТаблицаОтраженияВУчете.Итог("Значение");	                                      
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	
	Если мДополнительныеПараметрыОтражения <> Неопределено И (НазваниеОтчета = "РегламентированныйОтчет70101Форма" ИЛИ НазваниеОтчета = "РегламентированныйОтчет700Форма"
		ИЛИ НазваниеОтчета = "РегламентированныйОтчет910Форма") Тогда
		
		ПоказателиОтчета = Неопределено;
		ПараметрыОтчета = Неопределено;
		
		// Для обработки дополнительных данных
		мДополнительныеПараметрыОтражения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
		мДополнительныеПараметрыОтражения.Свойство("ПараметрыОтчета", ПараметрыОтчета);
		
		ПоказателиОтчета = ?(ПоказателиОтчета = Неопределено, Новый Структура, ПоказателиОтчета);
		ПараметрыОтчета = ?(ПараметрыОтчета = Неопределено, Новый Структура, ПараметрыОтчета);
		
		Для Каждого Показатель Из ПоказателиОтчета Цикл
			КолонкиСуммирования = КолонкиСуммирования + ", " + Показатель.Ключ;			
		КонецЦикла;
		
		Для Каждого Параметр Из ПараметрыОтчета Цикл
			КолонкиГруппировок = КолонкиГруппировок + ", " + Параметр.Ключ;
		КонецЦикла;
		
	КонецЕсли;

	Если ОбщаяСуммаОтраженияВУчете <> Неопределено И ОбщаяСуммаОтраженияВУчете <> 0 Тогда
		
		ТаблицаОтраженияВУчете.Свернуть("ВидНалога, ДатаУплаты, КБК, ДатаНачалаОтчета, 
		|ДатаОкончанияОтчета, Организация, СтруктурнаяЕдиница, РННПлательщика, Комментарий" + КолонкиГруппировок,"Значение" + КолонкиСуммирования);
		ТаблицаОтраженияВУчете.Сортировать("ДатаУплаты Возр, КБК Возр");
		
		Организация = ДокументОснование.Организация;
		СуммаДокумента = ОбщаяСуммаОтраженияВУчете;
		
		ПредыдущийВидНалога = Неопределено;
		ПредыдущийКБК = Неопределено;
		ТекущийВидНалога = Справочники.НалогиСборыОтчисления.ПустаяСсылка();
		// получим подразделение для регламентных операций		
		ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(Дата, Ложь, Организация);
		Для Каждого СтрокаДанных Из ТаблицаОтраженияВУчете Цикл
			Если СтрокаДанных.Значение = 0 Тогда
				Продолжить;
			КонецЕсли;
			Состояние("Заполняется строка документа по КБК: " + СтрокаДанных.КБК);	
			НоваяСтрока = ОтражениеВУчете.Добавить();
			НоваяСтрока.Период = СтрокаДанных.ДатаУплаты;
			Если ПредыдущийВидНалога <> СтрокаДанных.ВидНалога ИЛИ ПредыдущийКБК <> СтрокаДанных.КБК Тогда
				ТекущийВидНалога = ПроцедурыНалоговогоУчета.ПолучитьВидНалогаПоКБК(СтрокаДанных.ВидНалога, СтрокаДанных.КБК);
			КонецЕсли;
			НоваяСтрока.ВидНалога = ТекущийВидНалога;
			НоваяСтрока.КодБК = СтрокаДанных.КБК;
						
			Если ТекущийВидНалога = Справочники.НалогиСборыОтчисления.НалогНаПрибыль Тогда
				СчетЗатратБУ = ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу; //7710
			Иначе	
				СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы; //7210
			КонецЕсли;

			НоваяСтрока.СчетЗатратБУ = СчетЗатратБУ;
			
			// Назначение типа			
			Для Индекс = 1 По СчетЗатратБУ.ВидыСубконто.Количество() Цикл
				Если НоваяСтрока["СубконтоЗатратБУ" + Индекс] = Неопределено Тогда
					НоваяСтрока["СубконтоЗатратБУ" + Индекс] = Новый(СчетЗатратБУ.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.Типы()[0]);
				КонецЕсли;
			КонецЦикла;
			
			Если ПредыдущийВидНалога <> СтрокаДанных.ВидНалога ИЛИ ПредыдущийКБК <> СтрокаДанных.КБК Тогда
				ТаблицаДанныхПоНалогу = ПроцедурыНалоговогоУчета.ПолучитьДанныеПоВидуНалога(СтруктураВидовНалоговСчетам, СтрокаДанных.ВидНалога, ТекущийВидНалога);			
			КонецЕсли;
			НоваяСтрока.СубконтоЗатратБУ1 = ТаблицаДанныхПоНалогу[0].СтатьяЗатрат;
			
			Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
				НоваяСтрока.СубконтоЗатратБУ2 = ПодразделениеДляРеглОпераций;
			КонецЕсли;
			
			СчетНалога = ТаблицаДанныхПоНалогу[0].СчетНалога;
			НоваяСтрока.СчетНалогаБУ = СчетНалога;
			                     			
			НоваяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			
			// заполним данные по налоговому учету
			НоваяСтрока.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетЗатратБУ), , , КонецМесяца(НоваяСтрока.Период));
	
			ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 1, НоваяСтрока.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
			ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 2, НоваяСтрока.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
			ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(НоваяСтрока, НоваяСтрока.СчетЗатратБУ, НоваяСтрока.СчетЗатратНУ, 3, НоваяСтрока.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
			
			НоваяСтрока.СчетНалогаНУ = ТаблицаДанныхПоНалогу[0].СчетНалога;
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетНалогаНУ) Тогда
				НоваяСтрока.СчетНалогаНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетНалогаБУ), , , КонецМесяца(НоваяСтрока.Период));
			КонецЕсли;
						
			НоваяСтрока.НалоговыйКомитет = ДокументОснование.НалоговыйКомитет;
			НоваяСтрока.СтруктурнаяЕдиница = СтрокаДанных.СтруктурнаяЕдиница;
		
			НоваяСтрока.Содержание   = СтрокаДанных.Комментарий + " за " 
							+ ПредставлениеПериода(СтрокаДанных.ДатаНачалаОтчета,КонецДня(СтрокаДанных.ДатаОкончанияОтчета),"ФП = истина") 
							+ " (КБК:" + СокрЛП(СтрокаДанных.КБК) + ")";
			НоваяСтрока.Сумма     	 = СтрокаДанных.Значение;
			
			ПредыдущийВидНалога = СтрокаДанных.ВидНалога;
			ПредыдущийКБК = СтрокаДанных.КБК;
			
			Если мДополнительныеПараметрыОтражения <> Неопределено Тогда
				
				Для Каждого Показатель Из ПоказателиОтчета Цикл
					НоваяСтрока[Показатель.Ключ] = СтрокаДанных[Показатель.Ключ];
				КонецЦикла;
				
				Для Каждого Параметр Из ПараметрыОтчета Цикл
					НоваяСтрока[Параметр.Ключ] = СтрокаДанных[Параметр.Ключ];
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет счета БУ и НУ в строке табличной части по умолчанию
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.АдминистративныеРасходы; //7210
		
		// Назначение типа			
		Для Индекс = 1 По СтрокаТЧ.СчетЗатратБУ.ВидыСубконто.Количество() Цикл
			Если СтрокаТЧ["СубконтоЗатратБУ" + Индекс] = Неопределено Тогда
				СтрокаТЧ["СубконтоЗатратБУ" + Индекс] = Новый(СтрокаТЧ.СчетЗатратБУ.ВидыСубконто[Индекс-1].ВидСубконто.ТипЗначения.Типы()[0]);
			КонецЕсли;
		КонецЦикла;
			
		ПолучСчетНалога = СоответствиеВидовНалоговСчетам.Получить(СтрокаТЧ.ВидНалога);
		Если ПолучСчетНалога = Неопределено Тогда
			ПолучСчетНалога = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
		ТаблицаДанныхПоНалогу = ПроцедурыНалоговогоУчета.ПолучитьДанныеПоВидуНалога(Новый Структура("ТекущийВидНалога",ПолучСчетНалога), "ТекущийВидНалога", СтрокаТЧ.ВидНалога);			
		
		СтрокаТЧ.СубконтоЗатратБУ1 = ТаблицаДанныхПоНалогу[0].СтатьяЗатрат; // статья затрат
		
		// получим подразделение для регламентных операций		
		ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(Дата, Ложь, Организация);
		
		Если ЗначениеЗаполнено(ПодразделениеДляРеглОпераций) Тогда
			СтрокаТЧ.СубконтоЗатратБУ2 = ПодразделениеДляРеглОпераций;
		КонецЕсли;
		
		СчетНалога = ТаблицаДанныхПоНалогу[0].СчетНалога;
		СтрокаТЧ.СчетНалогаБУ = СчетНалога;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла;
		СтрокаТЧ.СчетНалогаБУ = ПланыСчетов.Типовой.ПустаяСсылка();			
		
	КонецЕсли;
	
	Если ЗаполнятьНУ = Истина Тогда
				
		СтрокаТЧ.СчетЗатратНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТЧ.СчетЗатратБУ), , , КонецМесяца(СтрокаТЧ.Период));
	
		ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(СтрокаТЧ, СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.СубконтоЗатратБУ1, "СубконтоЗатратНУ");
		ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(СтрокаТЧ, СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.СубконтоЗатратБУ2, "СубконтоЗатратНУ");
		ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(СтрокаТЧ, СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.СубконтоЗатратБУ3, "СубконтоЗатратНУ");
		
	    ОтборПоСчету = Новый Структура("СчетБУ", СтрокаТЧ.СчетНалогаБУ);
		СтрокаТЧ.СчетНалогаНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(ОтборПоСчету, , , КонецМесяца(СтрокаТЧ.Период));			
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла;
		СтрокаТЧ.СчетНалогаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();			
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по таблице "ОтражениеВУчете" документа.
//
Функция СформироватьЗапросПоОтражениюВУчете()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.Период,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.НомерСтроки,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.ВидНалога,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СчетЗатратБУ,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратБУ1,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратБУ2,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратБУ3,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СчетНалогаБУ,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.ВидПлатежаВБюджет,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СчетЗатратНУ,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратНУ1,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратНУ2,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СубконтоЗатратНУ3,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СчетНалогаНУ,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.Сумма,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.Содержание,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.НалоговыйКомитет,
	|	// Данные для ИП
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.ФизЛицо,
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СуммаДохода	
	|ИЗ
	|	Документ.ОтражениеНалоговойОтчетностиВРеглУчете.ОтражениеВУчете КАК ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.Ссылка = &парамРегистратор
	|	И ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.Сумма <> 0
	|	" + ?(мОтражениеДанныхИП, "И ОтражениеНалоговойОтчетностиВРеглУчетеОтражениеВУчете.СуммаДохода <> 0", ""));
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);		

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоОтражениюВУчете()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ВидУчетаНУ) И СтруктурашапкиДокумента.УчитыватьКПН Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено поле ""Вид учета НУ""!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Отражение в учете".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОтражениеВУчете(СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОтражениеВУчете";

	// Укажем, что надо проверить:	
	СтруктураОбязательныхПолей = Новый Структура("Период, ВидНалога, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетЗатратБУ");
	СтруктураОбязательныхПолей.Вставить("СчетНалогаБУ");
    			
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
		СтруктураОбязательныхПолей.Вставить("СчетНалогаНУ");				
	КонецЕсли;	
	
	Если мОтражениеДанныхИП Тогда
		СтруктураОбязательныхПолей.Вставить("ФизЛицо");
	КонецЕсли;
			
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	                                      
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОтражениеВУчете()

// Процедура формирует движение по регистру бухгалтерии.
//
Процедура ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтруктураШапкиДокумента, ВыборкаПоТЧ)	
	// проводка по бухгалтерскому регистру
	Проводка = Движения.Типовой.Добавить();	
	
	// Свойства
	Проводка.Период 	  = ВыборкаПоТЧ.Период;
    
	// Измерения
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;	
	
	// бухучет
	Проводка.СчетДт       = ВыборкаПоТЧ.СчетЗатратБУ;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, ВыборкаПоТЧ.СубконтоЗатратБУ1);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, ВыборкаПоТЧ.СубконтоЗатратБУ2);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, ВыборкаПоТЧ.СубконтоЗатратБУ3);
				
				
	Проводка.СчетКт       = ВыборкаПоТЧ.СчетНалогаБУ;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления, 		ВыборкаПоТЧ.ВидНалога);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды, 	ВыборкаПоТЧ.ВидПлатежаВБюджет);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, 				ВыборкаПоТЧ.НалоговыйКомитет);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, 		ВыборкаПоТЧ.ФизЛицо);
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

	// ресурсы
	Проводка.Сумма = ВыборкаПоТЧ.Сумма;
	
	Если Проводка.СчетДт.Валютный Тогда
		Проводка.ВалютаДт = мВалютаРегламентированногоУчета;
		Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
	КонецЕсли;
	
	Если Проводка.СчетКт.Валютный Тогда
		Проводка.ВалютаКт = мВалютаРегламентированногоУчета;
		Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
	КонецЕсли;
	
	// реквизиты
	Проводка.Содержание  = СокрЛП(ВыборкаПоТЧ.Содержание);	
	
	// Налоговый учет
	// проводка по налоговому регистру
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		
		ПроводкаНУ = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период 	    = ВыборкаПоТЧ.Период;
		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.СчетДт  = ВыборкаПоТЧ.СчетЗатратНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, ВыборкаПоТЧ.СубконтоЗатратНУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, ВыборкаПоТЧ.СубконтоЗатратНУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, ВыборкаПоТЧ.СубконтоЗатратНУ3);
		
		ПроводкаНУ.СчетКт  = ВыборкаПоТЧ.СчетНалогаНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления, 		ВыборкаПоТЧ.ВидНалога);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды, 	ВыборкаПоТЧ.ВидПлатежаВБюджет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, 				ВыборкаПоТЧ.НалоговыйКомитет);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, 		ВыборкаПоТЧ.ФизЛицо);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		ПроводкаНУ.Сумма   = ВыборкаПоТЧ.Сумма;		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
		ПроводкаНУ.Содержание  = СокрЛП(ВыборкаПоТЧ.Содержание);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоОтражениюВУчете()

Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(СтруктураШапкиДокумента, ВыборкаПоТЧ)
	
	НалогиСборыОтчисления = Справочники.НалогиСборыОтчисления;
	ОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	// ИПН
	Если ВыборкаПоТЧ.ВидНалога = НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог Тогда
		
		// ИПН СВЕДЕНИЯ О ДОХОДАХ
		Движение = Движения.ИПНСведенияОДоходах.Добавить();
		
		//Свойства
		Движение.Период = НачалоМесяца(ВыборкаПоТЧ.Период);
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодРегистрации	= ВыборкаПоТЧ.Период;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.СпособНалогообложения	= ОблагаетсяЦеликом;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода;

		// ИПН РАСЧЕТЫ С БЮДЖЕТОМ
		Движение = Движения.ИПНРасчетыСБюджетом.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Налог					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		
		// сразу же регистрируем факт удержания налога
		
		Движение = Движения.ИПНРасчетыСБюджетом.Добавить();

		// Свойства
		Движение.Период							= КонецМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;

		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Налог					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		
	КонецЕсли;

	
	// ОПВ
	Если ВыборкаПоТЧ.ВидНалога = НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы Тогда
		
		// ОПВ СВЕДЕНИЯ О ДОХОДАХ
		Движение = Движения.ОПВСведенияОДоходах.Добавить();
		
		//Свойства
		Движение.Период = НачалоМесяца(ВыборкаПоТЧ.Период);
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодРегистрации	= ВыборкаПоТЧ.Период;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.СпособНалогообложения	= ОблагаетсяЦеликом;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода;
		
		// ОПВ РАСЧЕТЫ С ФОНДАМИ
		
		Движение = Движения.ОПВРасчетыСФондами.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоТЧ.Период);

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидПлатежа				= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
		
		// Ресурсы
		Движение.Взнос					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;

		// ОПВ ПОДЛЕЖИТ ПЕРЕЧИСЛЕНИЮ В ФОНДЫ 
		
		// сразу же, не дожидаясь выплаты, регистрируем факт удержания взноса
		Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();

		// Свойства
		Движение.Период					= КонецМесяца(ВыборкаПоТЧ.Период);

		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.МесяцВыплатыДоходов	= НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Взнос					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		
	КонецЕсли;
	
	// СН	
	Если ВыборкаПоТЧ.ВидНалога = НалогиСборыОтчисления.СоциальныйНалог Тогда
		
		// СН СВЕДЕНИЯ О ДОХОДАХ
		Движение = Движения.СНСведенияОДоходах.Добавить();
	
		//Свойства
		Движение.Период = НачалоМесяца(ВыборкаПоТЧ.Период);
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодРегистрации	= ВыборкаПоТЧ.Период;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.СпособНалогообложения	= ОблагаетсяЦеликом;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода;
		
		// СН ИСЧИСЛЕННЫЙ
		Движение = Движения.СНИсчисленный.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоТЧ.Период);

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница		= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация
		Иначе
			Движение.СтруктурнаяЕдиница		= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода     = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.Организация				= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Налог						= ВыборкаПоТЧ.Сумма;
	
	КонецЕсли;

	// СО
	Если ВыборкаПоТЧ.ВидНалога = НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления Тогда
		
		// СО СВЕДЕНИЯ О ДОХОДАХ
		Движение = Движения.СОСведенияОДоходах.Добавить();
		
		//Свойства
		Движение.Период 			= НачалоМесяца(ВыборкаПоТЧ.Период);
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодРегистрации	= ВыборкаПоТЧ.Период;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.СпособНалогообложения	= ОблагаетсяЦеликом;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода;
		
		// СО РАСЧЕТЫ С ФОНДАМИ
		Движение = Движения.СОРасчетыСФондами.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница		= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация
		Иначе
			Движение.СтруктурнаяЕдиница		= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода     = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		Движение.Организация				= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Отчисление					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
	КонецЕсли;

	// ВОСМС
	Если ВыборкаПоТЧ.ВидНалога = НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование Тогда
		
		// ВОСМС СВЕДЕНИЯ О ДОХОДАХ
		Движение = Движения.ВОСМССведенияОДоходах.Добавить();
		
		//Свойства
		Движение.Период = НачалоМесяца(ВыборкаПоТЧ.Период);
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодРегистрации	= ВыборкаПоТЧ.Период;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.СпособНалогообложения	= ОблагаетсяЦеликом;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода;
		
		// ВОСМС РАСЧЕТЫ С ФОНДАМИ
		
		Движение = Движения.ВОСМСРасчетыСФондами.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоТЧ.Период);

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница	= ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.ВидПлатежа				= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
		
		// Ресурсы
		Движение.Взнос					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;

		// ВОСМС ПОДЛЕЖИТ ПЕРЕЧИСЛЕНИЮ В ФОНДЫ 
		
		// сразу же, не дожидаясь выплаты, регистрируем факт удержания взноса
		Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();

		// Свойства
		Движение.Период					= КонецМесяца(ВыборкаПоТЧ.Период);

		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мОтображатьСтруктурныеПодразделения Тогда
			Движение.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение), СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		Иначе
			Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.МесяцВыплатыДоходов	= НачалоМесяца(ВыборкаПоТЧ.Период);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;

		// Ресурсы
		Движение.Взнос					= ВыборкаПоТЧ.Сумма;
		
		// Реквизиты 
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения" документа.
//                                                                  
Процедура ОбработкаПроведения(Отказ, Режим)

	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДанныеОтчета = ДокументОснование.ДанныеОтчета.Получить();
		ДанныеОтчета.Свойство("ДополнительныеПараметрыОтражения", мДополнительныеПараметрыОтражения);
		
		мДополнительныеПараметрыОтражения = ?(мДополнительныеПараметрыОтражения = Неопределено, Новый Структура, мДополнительныеПараметрыОтражения);
		мДополнительныеПараметрыОтражения.Свойство("ОтражениеДанныхИП", мОтражениеДанныхИП);
		
	КонецЕсли;
	
	// Определяется дополнительными параметрами отчетов, по умолчанию - Ложь
	мОтражениеДанныхИП = ?(мОтражениеДанныхИП = Неопределено, Ложь, мОтражениеДанныхИП);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОтражениеВУчете(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоОтражениюВУчете = СформироватьЗапросПоОтражениюВУчете().Выбрать();
	
	Пока ВыборкаПоОтражениюВУчете.Следующий() Цикл
				
		Если Не Отказ Тогда
			ДобавитьСтрокуВДвиженияПоОтражениюВУчете(СтруктураШапкиДокумента, ВыборкаПоОтражениюВУчете);						
		КонецЕсли;
		
		Если мОтражениеДанныхИП И НЕ Отказ Тогда
			ДобавитьСтрокуВДвиженияПоРегистрамНакопления(СтруктураШапкиДокумента, ВыборкаПоОтражениюВУчете);
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не Отказ Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ЭтотОбъект.ОтражениеВУчете.Итог("Сумма");
	
КонецПроцедуры // ПередЗаписью

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

// ключ структуры должен полностью соответствовать значениям в колонке "Вид налога"
// ключ - может принимать значение одного из предопред.элементов справочника "Налоги, сборы и отчисления"
// значение - соответствующий счет налога
// макета "Отражене в учете"
СоответствиеВидовНалоговСчетам = Новый Соответствие;
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаИмущество,									ПланыСчетов.Типовой.НалогНаИмущество);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог,					ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане,	ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость,						ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты,ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.Акциз,											ПланыСчетов.Типовой.Акцизы);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаПрибыль,									ПланыСчетов.Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.НалогНаТранспорт,									ПланыСчетов.Типовой.НалогНаТранспортныеСредства);	
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления,					ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы,						ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалог,									ПланыСчетов.Типовой.СоциальныйНалог);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалогИнвалиды,							ПланыСчетов.Типовой.СоциальныйНалог);
СоответствиеВидовНалоговСчетам.Вставить(Справочники.НалогиСборыОтчисления.СоциальныйНалогИностранныеСпециалисты,			ПланыСчетов.Типовой.СоциальныйНалог);

