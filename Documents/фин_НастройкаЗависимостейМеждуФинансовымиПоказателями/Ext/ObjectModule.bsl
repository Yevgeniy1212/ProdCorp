#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Функция ПроверкаНеоднозначнойЗависимости
//
Функция ПроверкаНеоднозначнойЗависимости(СтруктураОтбора,СоответствиеСтатей)
		
	ОднозначнаяЗависимость=Истина;
	
	Запрос=Новый Запрос;
	
	ТекстУсловия="ИсхФинансовыйПоказатель=&ТекФинансовыйПоказатель";
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") Тогда
		ТекстУсловия="(Организация=&Организация ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) И "+ТекстУсловия;
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекФинансовыйПоказатель",СоответствиеСтатей.Получить(ФинансовыйПоказательВлияющая));
	
	Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
		Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
		ОбъектСравнения	= Неопределено;
		Если СтруктураОтбора.Свойство(Измерение,ОбъектСравнения) Тогда
			ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ОбъектСравнения,Измерение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ЗависимостиФинансовыхПоказателей.ИсхСценарий КАК ИсхСценарий,
	             |	ЗависимостиФинансовыхПоказателей.ЗависимаяФинансовыйПоказатель КАК ЗависимаяФинансовыйПоказатель,
	             |	ЗависимостиФинансовыхПоказателей.Регистратор.Представление КАК Регистратор,
	             |	НаборыРазрезовПоЗависимостям.Разрез1,
	             |	НаборыРазрезовПоЗависимостям.Разрез2,
	             |	НаборыРазрезовПоЗависимостям.Разрез3,
	             |	НаборыРазрезовПоЗависимостям.Разрез4,
	             |	НаборыРазрезовПоЗависимостям.Разрез5,
	             |	НаборыРазрезовПоЗависимостям.Разрез6,
	             |	НаборыРазрезовПоЗависимостям.Разрез7,
	             |	НаборыРазрезовПоЗависимостям.Разрез8,
	             |	НаборыРазрезовПоЗависимостям.Разрез9,
	             |	НаборыРазрезовПоЗависимостям.Разрез10,
	             |	НаборыРазрезовПоЗависимостям.Проект,
	             |	НаборыРазрезовПоЗависимостям.Контрагент,
	             |	НаборыРазрезовПоЗависимостям.Номенклатура,
	             |	НаборыРазрезовПоЗависимостям.УправленческоеПодразделение,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез1,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез2,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез3,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез4,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез5,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез6,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез7,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез8,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез9,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез10,
	             |	НаборыРазрезовПоЗависимостям.ОтборПроект,
	             |	НаборыРазрезовПоЗависимостям.ОтборКонтрагент,
	             |	НаборыРазрезовПоЗависимостям.ОтборНоменклатура,
	             |	НаборыРазрезовПоЗависимостям.ОтборУправленческоеПодразделение
	             |ИЗ
	             |	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(&ДатаНач,"+ТекстУсловия+") КАК ЗависимостиФинансовыхПоказателей
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборыРазрезовПоЗависимостям
	             |		ПО ЗависимостиФинансовыхПоказателей.ИсходныйНаборРазрезов = НаборыРазрезовПоЗависимостям.Ссылка
	             |ГДЕ
				 |	ЗависимостиФинансовыхПоказателей.Регистратор<>&Ссылка
	             |	И (ЗависимостиФинансовыхПоказателей.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	             |			ИЛИ ЗависимостиФинансовыхПоказателей.ДатаЗавершения > &ДатаНач)";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаНач",Дата);
		
	РезультатЗапроса=Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ОднозначнаяЗависимость;
		
	Иначе
		
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		
		Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
			РеквизитыРавны = Истина;
			Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
				Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
				РазрезЗависимости = Неопределено;
				СтрокиОграничения = ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение]));
				Если СтрокиОграничения.Количество()>0 Тогда
					РазрезЗависимости = СтрокиОграничения[0].УсловиеНаЗначение;
				КонецЕсли;
				Если НЕ ПроверитьРавенствоРеквизитов(ТекущаяЗависимость[Измерение],ТекущаяЗависимость["Отбор"+Измерение],РазрезЗависимости) Тогда
					РеквизитыРавны = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если (НЕ ЗависимостиОборотовПоСтатьям.Найти(ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель,"ЗависимаяФинансовыйПоказатель")=Неопределено)
				И (ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхСценарий,ЗначениеЗаполнено(ТекущаяЗависимость.ИсхСценарий),Сценарий) И РеквизитыРавны) Тогда
				
				ТекстСообщения = "Неоднозначная зависимость для статьи "+ТекущаяЗависимость.ЗависимаяФинансовыйПоказатель+".
				|Уже установлена следующая зависимость, пересекающаяся с текущей:
				|Документ: "+ТекущаяЗависимость.Регистратор;
				Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
					Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
					ТекстСообщения=ТекстСообщения+"
					|"+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение])+":"+?(ТекущаяЗависимость["Отбор"+Измерение],?(ЗначениеЗаполнено(ТекущаяЗависимость[Измерение]),ТекущаяЗависимость[Измерение]," не заполнен(-а)"),"любой(-ая)")
				КонецЦикла;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

				ОднозначнаяЗависимость=Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ОднозначнаяЗависимость;
		
	КонецЕсли;
	
КонецФункции // ПроверкаНеоднозначнойЗависимости()

// Процедура ДобавитьВСтрокуУсловия
// 
Процедура ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Объект,НаименованиеОбъекта)

	ТекстУсловия=ТекстУсловия+"
	|И ((ИсходныйНаборРазрезов.Отбор"+НаименованиеОбъекта+" И ИсходныйНаборРазрезов."+НаименованиеОбъекта+"=&"+НаименованиеОбъекта+") ИЛИ НЕ ИсходныйНаборРазрезов.Отбор"+НаименованиеОбъекта+")";
	Запрос.УстановитьПараметр(НаименованиеОбъекта,Объект);
	
КонецПроцедуры //ДобавитьВСтрокуУсловия

// Функция ПроверитьРавенствоРеквизитов(ИсходныйОбъект,ЗависимыйОбъект)
// 
Функция ПроверитьРавенствоРеквизитов(ИсходныйОбъект,Отбор,ЗависимыйОбъект)
	Равенство=Ложь;
	//Если Не ЗначениеЗаполнено(ИсходныйОбъект)
	//	ИЛИ Не ЗначениеЗаполнено(ЗависимыйОбъект)
	//	ИЛИ ИсходныйОбъект=ЗависимыйОбъект Тогда
	//		Равенство=Истина;
	//КонецЕсли;
	Если ИсходныйОбъект=ЗависимыйОбъект Тогда
		Равенство=Истина;
	ИначеЕсли Отбор Тогда
		Равенство=(НЕ ЗначениеЗаполнено(ЗависимыйОбъект));
	Иначе
		Равенство=(НЕ ЗначениеЗаполнено(ИсходныйОбъект)) ИЛИ (НЕ ЗначениеЗаполнено(ЗависимыйОбъект));
	КонецЕсли;
	Возврат Равенство;
КонецФункции //ПроверитьРавенствоРеквизитов(ИсходныйОбъект,ЗависимыйОбъект)

// Проверяет отсутствие среди статей, рекурсивно зависящих от выбранной, выбранной статьи
//
Функция ПроверкаРекурсивнойЗависимости(ТекФинансовыйПоказатель,СтруктураОтбора)

	ПроверкаПройдена=Истина;
	Запрос=Новый Запрос;
	ТекстУсловия="ИсхФинансовыйПоказатель=&ТекФинансовыйПоказатель";
	Запрос.УстановитьПараметр("ТекФинансовыйПоказатель",ТекФинансовыйПоказатель);
	Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
		Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
		ОбъектСравнения	= Неопределено;
		Если СтруктураОтбора.Свойство(Измерение,ОбъектСравнения) Тогда
			ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ОбъектСравнения,Измерение);
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗависимостиФинансовыхПоказателей.ЗависимаяФинансовыйПоказатель КАК ЗависимаяФинансовыйПоказатель,
	             |	НаборыРазрезовПоЗависимостям.Проект,
	             |	НаборыРазрезовПоЗависимостям.Контрагент,
	             |	НаборыРазрезовПоЗависимостям.Номенклатура,
	             |	НаборыРазрезовПоЗависимостям.УправленческоеПодразделение,
	             |	НаборыРазрезовПоЗависимостям.Разрез1,
	             |	НаборыРазрезовПоЗависимостям.Разрез2,
	             |	НаборыРазрезовПоЗависимостям.Разрез3,
	             |	НаборыРазрезовПоЗависимостям.Разрез4,
	             |	НаборыРазрезовПоЗависимостям.Разрез5,
	             |	НаборыРазрезовПоЗависимостям.Разрез6,
	             |	НаборыРазрезовПоЗависимостям.Разрез7,
	             |	НаборыРазрезовПоЗависимостям.Разрез8,
	             |	НаборыРазрезовПоЗависимостям.Разрез9,
	             |	НаборыРазрезовПоЗависимостям.Разрез10,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез1,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез2,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез3,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез4,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез5,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез6,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез7,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез8,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез9,
	             |	НаборыРазрезовПоЗависимостям.ОтборРазрез10,
	             |	НаборыРазрезовПоЗависимостям.ОтборПроект,
	             |	НаборыРазрезовПоЗависимостям.ОтборКонтрагент,
	             |	НаборыРазрезовПоЗависимостям.ОтборНоменклатура,
	             |	НаборыРазрезовПоЗависимостям.ОтборУправленческоеПодразделение
	             |ИЗ
	             |	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(&ДатаДокумента,"+ТекстУсловия+") КАК ЗависимостиФинансовыхПоказателей
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_НаборыРазрезовПоЗависимостям КАК НаборыРазрезовПоЗависимостям
	             |		ПО ЗависимостиФинансовыхПоказателей.ЗависимыйНаборРазрезов = НаборыРазрезовПоЗависимостям.Ссылка
	             |ГДЕ
	             |	(ЗависимостиФинансовыхПоказателей.ДатаЗавершения > &ДатаДокумента
	             |			ИЛИ ЗависимостиФинансовыхПоказателей.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Статья",ТекФинансовыйПоказатель);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПроверкаПройдена;
	Иначе
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		Для Каждого ТекущаяСтатья Из ТабЗависимыхСтатей Цикл
			РеквизитыРавны = Истина;
			Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
				Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
				РазрезЗависимости = Неопределено;
				СтрокиОграничения = ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[Измерение]));
				Если СтрокиОграничения.Количество()>0 Тогда
					РазрезЗависимости = СтрокиОграничения[0].УсловиеНаЗначение;
				КонецЕсли;
				Если НЕ ПроверитьРавенствоРеквизитов(ТекущаяСтатья[Измерение],ТекущаяСтатья["Отбор"+Измерение],РазрезЗависимости) Тогда
					РеквизитыРавны = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ТекФинансовыйПоказатель = ТекущаяСтатья.ЗависимаяФинансовыйПоказатель Тогда
				Возврат ПроверкаПройдена;
			КонецЕсли;
			Если ТекущаяСтатья.ЗависимаяФинансовыйПоказатель=ФинансовыйПоказательВлияющая И РеквизитыРавны Тогда
				Возврат НЕ ПроверкаПройдена; 
			Иначе
				СтруктураОтбораВложенная = Новый Структура;
				Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
					Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
					Если ТекущаяСтатья["Отбор"+Измерение] Тогда
						СтруктураОтбораВложенная.Вставить(Измерение,ТекущаяСтатья[Измерение]);
					КонецЕсли;
				КонецЦикла;
				ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(ТекущаяСтатья.ЗависимаяФинансовыйПоказатель,СтруктураОтбораВложенная);
				Если Не ПроверкаПройдена Тогда
					Возврат ПроверкаПройдена;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;
	Возврат ПроверкаПройдена;

КонецФункции // ПроверкаРекурсивнойЗависимости()

// Проверяет список зависимостей на образование циклической
// зависимости
//
Функция ПроверкаЦиклическойЗависимости(СоответствиеСтатей)

	ПроверкаПройдена=Истина;

	// Простая проверка. Если влияющая статья никогда не встречается среди зависимых в регистре, то
	// проверка пройдена
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗависимостиФинансовыхПоказателей.ИсхФинансовыйПоказатель
	             |ИЗ
	             |	РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(&ДатаДокумента, ЗависимаяФинансовыйПоказатель = &ВлияющаяСтатья) КАК ЗависимостиФинансовыхПоказателей
	             |ГДЕ
	             |	(ЗависимостиФинансовыхПоказателей.ДатаЗавершения > &ДатаДокумента
	             |			ИЛИ ЗависимостиФинансовыхПоказателей.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";

	Запрос.УстановитьПараметр("ДатаДокумента",  Дата);
	Запрос.УстановитьПараметр("ВлияющаяСтатья", СоответствиеСтатей.Получить(ФинансовыйПоказательВлияющая));
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат ПроверкаПройдена;
	Иначе  // Поиск среди статей, рекурсивно зависящих от статей в строках ТЧ, влияющей статьи.
		Для Каждого Зависимость Из ЗависимостиОборотовПоСтатьям Цикл
            СтруктураОтбора = Новый Структура;
			Для Каждого ЭлементРазрез Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
				Измерение = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
				Если ЗначениеЗаполнено(Зависимость[Измерение]) Тогда
					СтруктураОтбора.Вставить(Измерение,Зависимость[Измерение]);
				КонецЕсли;
			КонецЦикла;
			ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(СоответствиеСтатей.Получить(Зависимость.ЗависимаяФинансовыйПоказатель),СтруктураОтбора);
			Если Не ПроверкаПройдена Тогда
				Возврат ПроверкаПройдена;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ПроверкаПройдена;
КонецФункции // ПроверкаЦиклическойЗависимости() 


//Процедура ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	фин_ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПараметрыПроведения = Документы.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	фин_УправлениеБюджетированием.СформироватьДвиженияПоЗависимостям(Движения,ПараметрыПроведения.Реквизиты[0],ПараметрыПроведения.ТаблицаЗависимостиОборотовПоСтатьям,ПараметрыПроведения.ТаблицаОбластьДействияЗависимости,ПараметрыПроведения.ТаблицаСпискиПараметровОтбора,ПараметрыПроведения.ТаблицаСоставАгрегатов);
КонецПроцедуры //ОбработкаПроведения

// Процедура ПередЗаписью
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
    Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ВестиУчетПоПроектам				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	Если Не ВестиУчетПоПроектам Тогда
		Проект = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект");
		Для Каждого СтрокаТЧ Из ЗависимостиОборотовПоСтатьям Цикл
			 СтрокаТЧ.Проект = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект");
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеЗависимостей = Перечисления.фин_ИспользованиеЗависимостейСтатейОборотов.ПриПланированииИИсполнении И НЕ Сценарий.Пустая() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не может быть записан, так как зависимость, используемая при исполнении, не может быть ограничена определенным сценарием!");
	КонецЕсли;
	
	СписокРазрезовОтбора = Новый СписокЗначений;
	ТаблоРазрезов = ОбластьДействияЗависимости.Выгрузить();
	ТаблоРазрезов.Свернуть("Измерение");
	СписокРазрезовОтбора.ЗагрузитьЗначения(ТаблоРазрезов.ВыгрузитьКолонку("Измерение"));
	Для Каждого РазрезОтбора Из СписокРазрезовОтбора Цикл
		ЗначениеРазреза = РазрезОтбора.Значение;
		ПредставлениеРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(ЗначениеРазреза);
		СтрокиРазреза = ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",ЗначениеРазреза));
		Если ЗначениеЗаполнено(ЗначениеРазреза) Тогда
			Если СтрокиРазреза.Количество() >1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ограничение области действия зависимости по разрезу """+ПредставлениеРазреза+""" задано более одного раза!");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ограничение области действия зависимости без указания разреза не может быть задано!");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаОтбор Из СпискиПараметровОтбора Цикл
		Если ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("Измерение",СтрокаОтбор.Измерение)).Количество()=0 Тогда
			СтрокиУдалить.Добавить(СтрокаОтбор);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СпискиПараметровОтбора.Удалить(СтрокаУдалить);
	КонецЦикла;
	
КонецПроцедуры //ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	СтрокиСписок = ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("ВидОграниченияОбластиДействия",Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений));
	Для Каждого СтрокаСписок Из СтрокиСписок Цикл
		Если СпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение",СтрокаСписок.Измерение)).Количество() =0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для разреза """+СтрокаСписок.Разрез+""" не задано ни одного значения в списке отбора!");
		КонецЕсли;
	КонецЦикла;
	СтрокиСписок = ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("ВидОграниченияОбластиДействия",Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению));
	Если СтрокиСписок.Количество()<>0 И НастройкаРасчета.Пустая() Тогда
		Для Каждого СтрокаСписок Из СтрокиСписок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для разреза """+СтрокаСписок.Разрез+""" задано условие исходя из настройки расчета, однако настройка расчета не указана в документе!");
		КонецЦикла;
	КонецЕсли;
	
	фин_ЗаполнениеДокументов.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СписокНедопустимыхЗависимостей = Новый Массив;
	Если ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей Тогда
		Для Каждого СтрокаАгрегат Из СоставАгрегатов Цикл
			Если СтрокаАгрегат.Агрегат = ФинансовыйПоказательВлияющая Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаАгрегат.ФинансовыйПоказатель.ВидПоказателя<>Перечисления.фин_ВидыФинансовыхПоказателей.Оборотный Тогда
				СписокНедопустимыхЗависимостей.Добавить(СтрокаАгрегат.ФинансовыйПоказатель);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоАгрегатов = Агрегаты.Количество();
		СтрокиАгрегата 		= СоставАгрегатов.Выгрузить();
		СтрокиАгрегата.Свернуть("Группа");
		СтрокиАгрегата.Сортировать("Группа УБЫВ");
		Если СтрокиАгрегата.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
		Для Инд=1 По МаксимальнаяГруппа Цикл
			Если СоставАгрегатов.НайтиСтроки(Новый Структура("Группа",Инд)).Количество() <> КоличествоАгрегатов Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не полностью заполнен состав агрегатов для группы №"+Строка(Инд)+"!", ,,,Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МаксимальнаяГруппа = 1;
		Для Каждого СтрокаЗависимости Из ЗависимостиОборотовПоСтатьям Цикл
			Если ТипЗнч(СтрокаЗависимости.ЗависимаяФинансовыйПоказатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели")
				И СтрокаЗависимости.ЗависимаяФинансовыйПоказатель.ВидПоказателя<>Перечисления.фин_ВидыФинансовыхПоказателей.Оборотный Тогда
				СписокНедопустимыхЗависимостей.Добавить(СтрокаЗависимости.ЗависимаяФинансовыйПоказатель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если СписокНедопустимыхЗависимостей.Количество()>0 Тогда
		ТекстСообщения = "Невозможно провести документ Настройка зависимостей между финансовыми показателями №"+Номер+" от "+Дата+"
		|	нельзя использовать в качестве зависимых финансовые показатели, не являющиеся оборотными:";
		Для Каждого ФП Из СписокНедопустимыхЗависимостей Цикл
			ТекстСообщения = ТекстСообщения+"
			|	- "+ФП;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	Если отказ Тогда
		Возврат;
	КонецЕсли;
	ТаблицаНаборовЗначений 			= Новый ТаблицаЗначений;
	СтруктураОтбораИсходныхЗначений	= Новый Структура;
	фин_УправлениеБюджетированием.ЗаполнитьТаблицуАналитикиНастройкиЗависимостей(ТаблицаНаборовЗначений,СтруктураОтбораИсходныхЗначений,ОбластьДействияЗависимости,СпискиПараметровОтбора);
	Для Инд=1 По МаксимальнаяГруппа Цикл
		СоответствиеСтатей = фин_УправлениеБюджетированием.СоответствиеСтатей(ЭтотОбъект,ЗависимостиОборотовПоСтатьям,СоставАгрегатов,Инд);
		Если Не ПроверкаЦиклическойЗависимости(СоответствиеСтатей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружена циклическая зависимость статей!",,,,Отказ);
		КонецЕсли;
		Для Каждого СтрокаНаборовИзмерений Из ТаблицаНаборовЗначений Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбораИсходныхЗначений,СтрокаНаборовИзмерений);
			Если НЕ ПроверкаНеоднозначнойЗависимости(СтруктураОтбораИсходныхЗначений,СоответствиеСтатей) Тогда
				Отказ=Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ Отказ Тогда
			Для Каждого ТекСтрокаЗависимостиОборотовПоСтатьям Из ЗависимостиОборотовПоСтатьям Цикл
				Если  СоответствиеСтатей.Получить(ФинансовыйПоказательВлияющая) = СоответствиеСтатей.Получить(ТекСтрокаЗависимостиОборотовПоСтатьям.ЗависимаяФинансовыйПоказатель) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружена циклическая зависимость статьи: "+Строка(СоответствиеСтатей.Получить(ФинансовыйПоказательВлияющая)),,,,Отказ);
				КонецЕсли;
				Если Отказ Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;


	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
КонецПроцедуры

#КонецЕсли