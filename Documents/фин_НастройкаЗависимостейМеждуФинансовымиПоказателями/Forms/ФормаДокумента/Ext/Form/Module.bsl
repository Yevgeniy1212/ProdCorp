////////////////////////////////////////////////////////////////////////////////
// ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	ЗаполнитьСпискиПоПризнакуУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей") Тогда
		СтрокиГруппы = Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка")));
		Для Каждого Строка Из СтрокиГруппы Цикл
			Объект.СоставАгрегатов.Удалить(Строка);
		КонецЦикла;
		РеформацияСостава();
		ЗаполнениеАгрегатов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_НастройкаЗависимостейМеждуФинансовымиПоказателями", ПараметрыЗаписи, Объект.Ссылка);	
	ЗаполнитьСпискиПоПризнакуУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыйПоказательВлияющаяПриИзменении(Элемент)
	ФинансовыйПоказательВлияющаяПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРасчетаПриИзменении(Элемент)
	НастройкаРасчетаПриИзмененииНаСервере(СоответствиеРазрезовИзмерениям);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	УстановитьФлагИсполнения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыОбластьДействияЗависимости

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОбластьДействияЗависимости

&НаКлиенте
Процедура ОбластьДействияЗависимостиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение");
	КонецЕсли;
	ТекущийВидОграничения = Элемент.ТекущиеДанные.ВидОграниченияОбластиДействия;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ВидОграниченияОбластиДействия <> ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение") Тогда
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.КнопкаОчистки = Ложь;
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.РедактированиеТекста = Ложь;
	Иначе
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.КнопкаОчистки = Истина;
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.РедактированиеТекста = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиИзмерениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбластьДействияЗависимости.ТекущиеДанные;
	Если ТекущиеДанные.Измерение.Пустая() Тогда
		ТекущиеДанные.Разрез = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка");
		Возврат;
	Иначе 
		ТекущиеДанные.Разрез 			= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ТекущиеДанные.Измерение);
		//ТекущиеДанные.УсловиеНаЗначение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.УсловиеНаЗначение);
		Если ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений") Тогда
			ТекущиеДанные.УсловиеНаЗначение = "";
		Иначе
			ТекущиеДанные.УсловиеНаЗначение = ПолеОбъекта(ТекущиеДанные.Разрез,"ТипЗначения").ПривестиЗначение(ТекущиеДанные.УсловиеНаЗначение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиУсловиеНаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбластьДействияЗависимости.ТекущиеДанные;
	Если ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьСписокЗначений();
	ИначеЕсли ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиУсловиеНаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбластьДействияЗависимости.ТекущиеДанные;
	Если ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьСписокЗначений();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияЗависимостиВидОграниченияОбластиДействияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОбластьДействияЗависимости.ТекущиеДанные;
	Если Объект.НастройкаРасчета.Пустая() И ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению") Тогда
		ПоказатьПредупреждение(,"Данный вид ограничения не может быть выбран, если не указана настройка расчета!");
		ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение");
	КонецЕсли;
	Если ТекущийВидОграничения = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений") Тогда
		НастроитьУсловноеОформлениеФормы();	
	КонецЕсли;
	ТекущийВидОграничения = ТекущиеДанные.ВидОграниченияОбластиДействия;
	Если ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений")
		ИЛИ ТекущиеДанные.ВидОграниченияОбластиДействия = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению") Тогда
		ТекущиеДанные.УсловиеНаЗначение = "";
	Иначе
		ТекущиеДанные.УсловиеНаЗначение = ПолеОбъекта(ТекущиеДанные.Разрез,"ТипЗначения").ПривестиЗначение(ТекущиеДанные.УсловиеНаЗначение);
	КонецЕсли;
	Если ТекущиеДанные.ВидОграниченияОбластиДействия <> ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение") Тогда
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.КнопкаОчистки 			= Ложь;
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.РедактированиеТекста 	= Ложь;
	Иначе
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.КнопкаОчистки 			= Истина;
		Элементы.ОбластьДействияЗависимостиУсловиеНаЗначение.РедактированиеТекста 	= Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыЗависимостиОборотовПоСтатьям

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗависимостиОборотовПоСтатьям


&НаКлиенте
Процедура ЗависимостиОборотовПоСтатьямПослеУдаления(Элемент)
	ЗаполнениеАгрегатов();
КонецПроцедуры

&НаКлиенте
Процедура ЗависимостиОборотовПоСтатьямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ЗависимостиОборотовПоСтатьям.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.ЗависимаяФинансовыйПоказатель = ?(Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей"),ПредопределенноеЗначение("Справочник.фин_АгрегатыФинансовыхПоказателей.ПустаяСсылка"),ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка"));
		Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
			ТекущиеДанные[Пара.Представление]=Привести(Пара.Значение);
			//ТекущиеДанные[Пара.Ключ]=Пара.Значение.ТипЗначения.ПривестиЗначение("");
			//ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗависимостиОборотовПоСтатьямЗависимаяФинансовыйПоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЗависимостиОборотовПоСтатьям.ТекущиеДанные;
	Если ТекущиеДанные.ЗависимаяФинансовыйПоказатель=Объект.ФинансовыйПоказательВлияющая Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружена циклическая зависимость статей!");
		ТекущиеДанные.ЗависимаяФинансовыйПоказатель="";
	КонецЕсли;
    Статья = ТекущиеДанные.ЗависимаяФинансовыйПоказатель;
	ЗависимостиОборотовПоСтатьямЗависимаяФинансовыйПоказательПриИзмененииНаСервере(Статья,ТекущиеДанные.ПолучитьИдентификатор(),СтруктураРазрезов);
КонецПроцедуры

&НаКлиенте
Процедура ЗависимостиОборотовПоСтатьямРеквизитВлияющейСтатьиДляРасчетаСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ЭлементЦена = СписокРеквизитовСуммы.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена"));
	Если ЭлементЦена<>Неопределено Тогда
		СписокРеквизитовСуммы.Удалить(ЭлементЦена);
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ИндивидуальнаяУстановкаЗависимостей") Тогда
		ТекущиеДанные = Элементы.ЗависимостиОборотовПоСтатьям.ТекущиеДанные;
			//Если ТекущиеДанные.ЗависимаяФинансовыйПоказатель.СпособЦенообразования<>ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать") 
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗависимаяФинансовыйПоказатель) И ПолеОбъекта(ТекущиеДанные.ЗависимаяФинансовыйПоказатель,"СпособЦенообразования")<>ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать")
				И Объект.ИспользованиеЗависимостей<>ПредопределенноеЗначение("Перечисление.фин_ИспользованиеЗависимостейСтатейОборотов.ПриПланированииИИсполнении") Тогда
		 	СписокРеквизитовСуммы.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Цена"),"Цена");
		КонецЕсли;
	КонецЕсли;

	ДанныеВыбора 			= СписокРеквизитовСуммы;
КонецПроцедуры
&НаКлиенте
Процедура РеквизитВлияющейСтатьиДляРасчетаКоличестваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокРеквизитов;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйКоэффициентСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокДопКоэффициентов;
КонецПроцедуры

&НаКлиенте
Процедура ЗависимостиОборотовПоСтатьямУправленческоеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЗависимостиОборотовПоСтатьям.ТекущиеДанные;
	ТекущееПоле = Элементы.ЗависимостиОборотовПоСтатьям.ТекущийЭлемент.Имя;
//	Если ТипЗнч(ТекущиеДанные[ТекущееПоле])<>Тип("Неопределено") Тогда
	Если ТекущиеДанные[ТекущееПоле]<>Неопределено И ТипЗнч(ТекущиеДанные[ТекущееПоле])<>Тип("ПеречислениеСсылка.фин_СпособыРасчетаРазрезовПоЗависимостям") Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоИсходнымДанным")); 
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ФиксированноеЗначение"));
	Если НЕ Объект.НастройкаРасчета.Пустая() Тогда
		СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке")); 
	КонецЕсли;
	ОписаниеОбработкаВыбораСпособаЗаполненияРазреза = Новый ОписаниеОповещения("ОбработкаВыбораСпособаЗаполненияРазреза",ЭтотОбъект,Новый Структура("ТекущиеДанные,ТекущееПоле",ТекущиеДанные,ТекущееПоле));
	СписокЗначений.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораСпособаЗаполненияРазреза,"Укажите способ заполнения разреза");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСпособаЗаполненияРазреза(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Если Результат.Значение = ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ФиксированноеЗначение") Тогда
			Если Найти(ДополнительныеПараметры.ТекущееПоле,"Разрез")=0 Тогда
				Если ДополнительныеПараметры.ТекущееПоле="Номенклатура" Тогда
					СписокТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ДополнительныеПараметры.ТекущиеДанные.ЗависимаяФинансовыйПоказатель,?(Объект.Сценарий.Пустая(),Неопределено,Объект.Сценарий)).Типы();
				Иначе
					//СписокТипов = Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты.Найти(Элементы.ЗависимостиОборотовПоСтатьям.ТекущийЭлемент.Имя).Тип.Типы();
					СписокТипов = ПолучитьТипыБюджета();
				КонецЕсли;
			Иначе
				Для Каждого ЭлементСписка Из СоответствиеРазрезовИзмерениям Цикл
					Если ЭлементСписка.Представление = ДополнительныеПараметры.ТекущееПоле Тогда
						СписокТипов = ЭлементСписка.Значение.ТипЗначения.Типы();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(СписокТипов);
			Если СписокВыбора.Количество()>1 Тогда
				ОписаниеОбработкаВыбораТипаЗаполненияРазреза = Новый ОписаниеОповещения("ОбработкаВыбораТипаЗаполненияРазреза",ЭтотОбъект,Новый Структура("ТекущиеДанные,ТекущееПоле",ДополнительныеПараметры.ТекущиеДанные,ДополнительныеПараметры.ТекущееПоле));
				СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораТипаЗаполненияРазреза,"Укажите тип заполнения разреза");
			Иначе
				Описание = Новый ОписаниеТипов(СписокТипов);
				ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ТекущееПоле] = Описание.ПривестиЗначение("");
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ТекущееПоле] = Результат.Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаВыбораТипаЗаполненияРазреза(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Результат.Значение);
		Описание = Новый ОписаниеТипов(МассивТипов);
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ТекущееПоле] = Описание.ПривестиЗначение("");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗависимостиДобавитьИзДокумента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидОперации",Объект.ВидОперации));
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборДокумента",ЭтотОбъект);
	ФормаВыбора = ПолучитьФорму("Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
	ОткрытьФорму("Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОбработчикОповещения);
КонецПроцедуры


&НаКлиенте
Процедура ЗависимостиЗаполнитьПоДокументу(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидОперации",Объект.ВидОперации));
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборДокумента",ЭтотОбъект,"Очищать");
	ОткрытьФорму("Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОбработчикОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовВыбратьСтатью(Команда)
	Если Элементы.ПанельАгрегатов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана строка!");
		Возврат;
	КонецЕсли;
	ТекущаяГруппа = Элементы.ПанельАгрегатов.ТекущиеДанные.Группа;
	Если Элементы.ПанельАгрегатов.ТекущийЭлемент = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана колонка!");
		Возврат;
	КонецЕсли;
	ТекущийАгрегатКолонка = Элементы.ПанельАгрегатов.ТекущийЭлемент.Имя;
	Если ТекущийАгрегатКолонка="Группа" Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 		= Сред(ТекущийАгрегатКолонка,СтрДлина("Агрегат")+1);
	ТекущийАгрегат 		= Объект.Агрегаты.Получить(ТекущийАгрегат-1).Агрегат;
	//ФормаВыбора = Справочники.фин_ФинансовыеПоказатели.ПолучитьФормуВыбора(,Элемент);
	ПараметрыФормы = ПолучитьСписокРеквизитов(ТекущийАгрегат,"фин_АгрегатыФинансовыхПоказателей");
	ОбработчикВыбораСтатьи = Новый ОписаниеОповещения("ОбработчикВыбораСтатьи",ЭтотОбъект,Новый Структура("ТекущийАгрегат,ТекущаяГруппа,ТекущийАгрегатКолонка,Идентификатор",ТекущийАгрегат,ТекущаяГруппа,ТекущийАгрегатКолонка,Элементы.ПанельАгрегатов.ТекущаяСтрока));
	ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаВыбора",ПараметрыФормы,Элементы.ПанельАгрегатов,,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикВыбораСтатьи);
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовЗаполнитьКолонку(Команда)
	Если Элементы.ПанельАгрегатов.ТекущийЭлемент = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана колонка!");
		Возврат;
	КонецЕсли;
	ТекущийАгрегатКолонка = Элементы.ПанельАгрегатов.ТекущийЭлемент.Имя;
	Если ТекущийАгрегатКолонка="Группа" Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 		= Сред(ТекущийАгрегатКолонка,СтрДлина("Агрегат")+1);
	ТекущийАгрегат 		= Объект.Агрегаты.Получить(ТекущийАгрегат-1).Агрегат;
	
	ОписаниеОповещенияЗаполнениеКолонки	= Новый ОписаниеОповещения("ОбработатьВыборДляЗаполненияКолонки",ЭтотОбъект,Новый Структура("ТекущийАгрегат,ТекущийАгрегатКолонка",ТекущийАгрегат,ТекущийАгрегатКолонка));
	ПараметрыФормы 						= ПолучитьСписокРеквизитов(ТекущийАгрегат,"фин_АгрегатыФинансовыхПоказателей");
	ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаВыбора",ПараметрыФормы,Элементы.ПанельАгрегатов,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияЗаполнениеКолонки);
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовДобавитьГруппу(Команда)
	Если Объект.Агрегаты.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не указано агрегатов в документе!");
		Возврат;
	КонецЕсли;
	СоставАгрегатовДобавитьГруппуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовУдалитьГруппу(Команда)
	Если Элементы.ПанельАгрегатов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана строка!");
		Возврат;
	КонецЕсли;
	ТекущаяГруппа = Элементы.ПанельАгрегатов.ТекущиеДанные.Группа;
	СтрокиГруппы = Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Группа",ТекущаяГруппа));
	Для Каждого Строка Из СтрокиГруппы Цикл
		Объект.СоставАгрегатов.Удалить(Строка);
	КонецЦикла;
	РеформацияСостава();
	ЗаполнениеАгрегатов();
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовСтатьяВверх(Команда)
	Если Элементы.ПанельАгрегатов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана строка!");
		Возврат;
	КонецЕсли;
	ТекущаяГруппа = Элементы.ПанельАгрегатов.ТекущиеДанные.Группа;
	Если ТекущаяГруппа=1 Тогда
		ПоказатьПредупреждение(,"Невозможно переместить указанную статью выше! Статья находится в минимальной группе");
		Возврат;
	КонецЕсли;
	Если Элементы.ПанельАгрегатов.ТекущийЭлемент = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана колонка!");
		Возврат;
	КонецЕсли;
	ТекущийАгрегат = Элементы.ПанельАгрегатов.ТекущийЭлемент.Имя;
	Если ТекущийАгрегат="Группа" Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 		= Сред(ТекущийАгрегат,СтрДлина("Агрегат")+1);
	ТекущийАгрегат 		= Объект.Агрегаты.Получить(ТекущийАгрегат-1).Агрегат;
	СтрокаТекущая 		= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа));
	Если СтрокаТекущая.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Невозможно переместить указанную статью выше!");
		Возврат;
	КонецЕсли;
	СтрокаТекущая 		= СтрокаТекущая[0];
	СтрокаПредыдущая 	= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа-1));
	Если СтрокаПредыдущая.Количество() = 0 Тогда
		СтрокаТекущая.Группа = СтрокаТекущая.Группа-1;
	Иначе
		СтрокаПредыдущая = СтрокаПредыдущая[0];
		СтатьяТекущая = СтрокаТекущая.ФинансовыйПоказатель;
		СтрокаТекущая.ФинансовыйПоказатель 	= СтрокаПредыдущая.ФинансовыйПоказатель;
		СтрокаПредыдущая.ФинансовыйПоказатель = СтатьяТекущая;
	КонецЕсли;
	ЗаполнениеАгрегатов();
КонецПроцедуры

&НаКлиенте
Процедура СоставАгрегатовСтатьяВниз(Команда)
	Если Элементы.ПанельАгрегатов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана строка!");
		Возврат;
	КонецЕсли;
	//СтрокиАгрегата = Объект.СоставАгрегатов.Выгрузить();
	//СтрокиАгрегата.Свернуть("Группа");
	//СтрокиАгрегата.Сортировать("Группа УБЫВ");
	//Если СтрокиАгрегата.Количество()=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
	МаксимальнаяГруппа = ПроверитьСоставАгрегатов();
	Если МаксимальнаяГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяГруппа = Элементы.ПанельАгрегатов.ТекущиеДанные.Группа;
	Если ТекущаяГруппа=МаксимальнаяГруппа Тогда
		ПоказатьПредупреждение(,"Невозможно переместить указанную статью ниже! Статья находится в максимальной группе");
		Возврат;
	КонецЕсли;
	Если Элементы.ПанельАгрегатов.ТекущийЭлемент = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана колонка!");
		Возврат;
	КонецЕсли;
	ТекущийАгрегат = Элементы.ПанельАгрегатов.ТекущийЭлемент.Имя;
	Если ТекущийАгрегат="Группа" Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 		= Сред(ТекущийАгрегат,СтрДлина("Агрегат")+1);
	ТекущийАгрегат 		= Объект.Агрегаты.Получить(ТекущийАгрегат-1).Агрегат;
	СтрокаТекущая 		= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа));
	Если СтрокаТекущая.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Невозможно переместить указанную статью ниже!");
		Возврат;
	КонецЕсли;
	СтрокаТекущая 		= СтрокаТекущая[0];
	СтрокаПредыдущая 	= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа+1));
	Если СтрокаПредыдущая.Количество() = 0 Тогда
		СтрокаТекущая.Группа = СтрокаТекущая.Группа+1;
	Иначе
		СтрокаПредыдущая = СтрокаПредыдущая[0];
		СтатьяТекущая = СтрокаТекущая.ФинансовыйПоказатель;
		СтрокаТекущая.ФинансовыйПоказатель 	= СтрокаПредыдущая.ФинансовыйПоказатель;
		СтрокаПредыдущая.ФинансовыйПоказатель = СтатьяТекущая;
	КонецЕсли;
	ЗаполнениеАгрегатов();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	СтруктураРазрезов.ЗагрузитьЗначения(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокДополнительныхРазрезов().ВыгрузитьЗначения());
	
	ТекущаяДатаДокумента = Объект.Дата;
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			Объект.Состояние = фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка."+?(Объект.ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей,"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели"));
			Объект.ФинансовыйПоказательВлияющая = ТипЗначения.ПривестиЗначение(Объект.ФинансовыйПоказательВлияющая);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСписокРазрезов();
	
	ЗаполнитьСпискиПоПризнакуУчета();
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	УстановитьНадписиЗаголовков();
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам") Тогда
		Элементы.Проект.Видимость = Ложь;
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей Тогда
		ОбновитьПанельАгрегатов();
	КонецЕсли;
	НастроитьРазрезыБюджета();
	НастроитьУсловноеОформлениеФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Организация.Видимость 							= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка."+?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей"),"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели"));
	Элементы.ФинансовыйПоказательВлияющая.ОграничениеТипа 	= ТипЗначения;
	Элементы.ЗависимаяФинансовыйПоказатель.ОграничениеТипа 	= ТипЗначения;
	Элементы.СтраницаСоставАгрегатов.Видимость 				= (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей"));
	Элементы.ФинансовыйПоказательВлияющая.Заголовок 		= ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей"),"Агрегат показателей","Финансовый показатель");
	
	УстановитьФлагИсполнения(Форма);
	
 	Элементы.ДополнительныйКоэффициентКоличества.Видимость	= ЗначениеЗаполнено(Объект.НастройкаРасчета);
	Элементы.ДополнительныйКоэффициентСуммы.Видимость		= ЗначениеЗаполнено(Объект.НастройкаРасчета);
	
	// заполнение списков выбора
	
	Форма.СписокРеквизитов.Очистить();
	Форма.СписокРеквизитовСуммы.Очистить();
	Форма.СписокДопКоэффициентов.Очистить();
	Если ЗначениеЗаполнено(Объект.ФинансовыйПоказательВлияющая) Тогда
		Если Объект.ФинансовыйПоказательВлияющая.УчетПоКоличеству Тогда
			Форма.СписокРеквизитов.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество"),"Количество");
			Форма.СписокРеквизитовСуммы.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Количество"),"Количество");
		КонецЕсли;
		Если Объект.ФинансовыйПоказательВлияющая.УчетПоСумме Тогда
			Форма.СписокРеквизитов.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма"),"Сумма");
			Форма.СписокРеквизитовСуммы.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Сумма"),"Сумма");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.НастройкаРасчета) Тогда
			Для Инд = 1 По 3 Цикл
				СтрокиПоказатель = Объект.НастройкаРасчета.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("Показатель","Показатель"+Строка(Инд)));
				Если СтрокиПоказатель.Количество()>0 И СтрокиПоказатель[0].Использование Тогда
					Форма.СписокРеквизитов.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель"+Строка(Инд)),СтрокиПоказатель[0].Представление);
					Форма.СписокРеквизитовСуммы.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель"+Строка(Инд)),СтрокиПоказатель[0].Представление);
					Форма.СписокДопКоэффициентов.Добавить(ПредопределенноеЗначение("Перечисление.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель"+Строка(Инд)),СтрокиПоказатель[0].Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиПоПризнакуУчета()
	Для Каждого СтрокаЗависимость Из Объект.ЗависимостиОборотовПоСтатьям Цикл
		Если СтрокаЗависимость.ЗависимаяФинансовыйПоказатель<>Неопределено Тогда
			Если СтрокаЗависимость.ЗависимаяФинансовыйПоказатель.УчетПоСумме Тогда
				СписокСуммовых.Добавить(СтрокаЗависимость.ЗависимаяФинансовыйПоказатель);
				СтрокаЗависимость.УчетПоСумме = Истина;
			КонецЕсли;
			Если СтрокаЗависимость.ЗависимаяФинансовыйПоказатель.УчетПоКоличеству Тогда
				СписокКоличественных.Добавить(СтрокаЗависимость.ЗависимаяФинансовыйПоказатель);
				СтрокаЗависимость.УчетПоКоличеству = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,Поле)
	Возврат ОбъектДанных[Поле];
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораСпискаЗначенийОтбора(ВыбранноеЗначение, Измерение) Экспорт
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СписокЗначений") Тогда
		СписокСтрок = Объект.СпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение",Измерение));
		Для Каждого Строка Из СписокСтрок Цикл
			Объект.СпискиПараметровОтбора.Удалить(Строка);
		КонецЦикла;
		Для Каждого ЗначениеСписка Из ВыбранноеЗначение Цикл
			Если Объект.СпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение,УсловиеНаЗначение",Измерение,ЗначениеСписка.Значение)).Количество()>0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.СпискиПараметровОтбора.Добавить();
			НоваяСтрока.Измерение 			= Измерение;
			НоваяСтрока.УсловиеНаЗначение 	= ЗначениеСписка.Значение;
		КонецЦикла;	
		НастроитьУсловноеОформлениеФормы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписиЗаголовков()
	оф_АгрегатПоказателей = "Влияющий финансовый показатель / группа показателей";
	оф_Дополнительно = "Дополнительно";
	оф_ОбластьДействияЗависимости = "Область действия зависимости";
	оф_ОграничениеОбластиДействия = "Ограничение области действия";
	оф_ПараметрыРасчета = "Параметры расчета";
	оф_ПереченьФормируемыхЗависимыхОборотов = "Перечень формируемых зависимых оборотов";
КонецПроцедуры


//Процедура ОбновитьПанельАгрегатов
//
&НаСервере
Процедура ОбновитьПанельАгрегатов()
	ПанельАгрегатов.Очистить();
	//очистить элементы условного оформления
	НовыеРеквизиты 	= Новый Массив;
	РеквизитыПанели = ПолучитьРеквизиты("ПанельАгрегатов");
	//Добавляем реквизиты ТЧ ПанельАгрегатов
	Для Каждого СтрокаАгрегаты Из Объект.Агрегаты Цикл
		РеквизитПрисутствует = Ложь;
		Для Каждого РеквизитПанели из РеквизитыПанели Цикл
			Если РеквизитПанели.Имя = "Агрегат"+Строка(Объект.Агрегаты.Индекс(СтрокаАгрегаты)+1) Тогда
				РеквизитПрисутствует = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ РеквизитПрисутствует Тогда
			НовыеРеквизиты.Добавить(Новый РеквизитФормы("Агрегат"+Строка(Объект.Агрегаты.Индекс(СтрокаАгрегаты)+1),Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"),"ПанельАгрегатов",СтрокаАгрегаты.Агрегат.Наименование));
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.ИзменитьРеквизиты(НовыеРеквизиты);
	
	//Добавляем элементы формы
	Для Каждого СтрокаАгрегаты Из Объект.Агрегаты Цикл
		ИмяПоля = "Агрегат"+Строка(Объект.Агрегаты.Индекс(СтрокаАгрегаты)+1);
		НайденныйЭлемент = Элементы.Найти(ИмяПоля);
		Если НайденныйЭлемент = Неопределено Тогда
			Элемент 			= Элементы.Добавить(ИмяПоля,Тип("ПолеФормы"),Элементы["ПанельАгрегатов"]);
			Элемент.Вид 		= ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ПанельАгрегатов."+ИмяПоля;
		КонецЕсли;
	КонецЦикла;
	СтрокиАгрегата = Объект.СоставАгрегатов.Выгрузить();
	СтрокиАгрегата.Свернуть("Группа");
	СтрокиАгрегата.Сортировать("Группа УБЫВ");
	Если СтрокиАгрегата.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
	Для Инд = 1 По МаксимальнаяГруппа Цикл
		СтрокаСостава 			= ПанельАгрегатов.Добавить();
		СтрокаСостава.Группа 	= Инд;
	КонецЦикла;
	Для Каждого СтрокаСостава Из Объект.СоставАгрегатов Цикл
		СтрокиАгрегата 	= Объект.Агрегаты.НайтиСтроки(Новый Структура("Агрегат",СтрокаСостава.Агрегат));
		НомерАгрегата 	= Объект.Агрегаты.Индекс(СтрокиАгрегата[0])+1;
		СтрокиГруппы 	= ПанельАгрегатов.НайтиСтроки(Новый Структура("Группа",СтрокаСостава.Группа));
		СтрокиГруппы[0]["Агрегат"+Строка(НомерАгрегата)] = СтрокаСостава.ФинансовыйПоказатель;
	КонецЦикла;
	НастроитьУсловноеОформлениеФормы();
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ПанельАгрегатов);
КонецПроцедуры //ОбновитьПанельАгрегатов

&НаСервере
Процедура НастроитьУсловноеОформлениеФормы()
	
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,"ОбластьДействияЗависимости");
	
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей Тогда
		//Добавляем элементы формы
		Для Каждого СтрокаАгрегаты Из Объект.Агрегаты Цикл
			ИмяПоля = "Агрегат"+Строка(Объект.Агрегаты.Индекс(СтрокаАгрегаты)+1);
			
			НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"ПанельАгрегатов."+ИмяПоля,ВидСравненияКомпоновкиДанных.НеЗаполнено,,ИмяПоля,Новый Структура("ЦветФона",Новый Цвет(219,112,147)));
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НастройкаРасчета) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИспользуемыеПоказатели.Показатель,
			|	ИспользуемыеПоказатели.Представление
			|ИЗ
			|	Справочник.фин_НастройкиРасчетаЗависимостейБюджетирования.ИспользуемыеПоказатели КАК ИспользуемыеПоказатели
			|ГДЕ
			|	ИспользуемыеПоказатели.Ссылка = &Ссылка
			|	И ИспользуемыеПоказатели.Использование";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.НастройкаРасчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.ДополнительныйКоэффициентСуммы",,Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета[ВыборкаДетальныеЗаписи.Показатель],"ДополнительныйКоэффициентСуммы",Новый Структура("Текст",ВыборкаДетальныеЗаписи.Представление));
			
			НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.ДополнительныйКоэффициентКоличества",,Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета[ВыборкаДетальныеЗаписи.Показатель],"ДополнительныйКоэффициентКоличества",Новый Структура("Текст",ВыборкаДетальныеЗаписи.Представление));
			
			НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаСуммы",,Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета[ВыборкаДетальныеЗаписи.Показатель],"РеквизитВлияющейСтатьиДляРасчетаСуммы",Новый Структура("Текст",ВыборкаДетальныеЗаписи.Представление));
			
			НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.РеквизитВлияющейСтатьиДляРасчетаКоличества",,Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета[ВыборкаДетальныеЗаписи.Показатель],"РеквизитВлияющейСтатьиДляРасчетаКоличества",Новый Структура("Текст",ВыборкаДетальныеЗаписи.Представление));
			
		КонецЦикла;
	
	КонецЕсли;
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("РеквизитВлияющейСтатьиДляРасчетаСуммы");
	ИменаПолей.Добавить("КоэффициентДляРасчетаСуммы");
	ИменаПолей.Добавить("ДополнительныйКоэффициентСуммы");
	НовыйЭлементОформления 	= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.УчетПоСумме",,Ложь,ИменаПолей,Новый Структура("ТолькоПросмотр,ЦветФона",Истина,Новый Цвет(200,200,200)));
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("РеквизитВлияющейСтатьиДляРасчетаКоличества");
	ИменаПолей.Добавить("КоэффициентДляРасчетаКоличества");
	ИменаПолей.Добавить("ДополнительныйКоэффициентКоличества");
	НовыйЭлементОформления 	= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ЗависимостиОборотовПоСтатьям.УчетПоКоличеству",,Ложь,ИменаПолей,Новый Структура("ТолькоПросмотр,ЦветФона",Истина,Новый Цвет(200,200,200)));
	
	Для Каждого СтрокаТЧ Из Объект.ОбластьДействияЗависимости Цикл
		Если СтрокаТЧ.ВидОграниченияОбластиДействия = Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.СписокЗначений Тогда
			СписокЗначенийДляПоказа = Новый СписокЗначений;
			СписокСтрок = Объект.СпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение",СтрокаТЧ.Измерение));
			Для Каждого СтрокаТЗ Из СписокСтрок Цикл
				СписокЗначенийДляПоказа.Добавить(СтрокаТЗ.УсловиеНаЗначение);
			КонецЦикла;
			ПредставлениеСписка 	= общ_ОтчетыВызовСервера.ВыгрузитьСписокВСтроку(СписокЗначенийДляПоказа,15);
			НовыйЭлементОформления 	= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ОбластьДействияЗависимости.Измерение",,СтрокаТЧ.Измерение,"ОбластьДействияЗависимостиУсловиеНаЗначение",Новый Структура("Текст",ПредставлениеСписка));
		КонецЕсли;
	КонецЦикла;
	
	НовыйЭлементОформления 	= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,"Объект.ОбластьДействияЗависимости.ВидОграниченияОбластиДействия",,Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению,"ОбластьДействияЗависимостиУсловиеНаЗначение",Новый Структура("ТолькоПросмотр,ЦветФона,Доступность",Истина,Новый Цвет(200,200,200),Ложь));
	
КонецПроцедуры

//Процедура УстановитьФлагИсполнения
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагИсполнения(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	//Элементы.СигнальнаяПанель.ТекущаяСтраница=?(Состояние=фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден(),Элементы.СигнальнаяПанель.Страницы.Утвержден,Элементы.СигнальнаяПанель.Страницы.НеУтвержден);	
	Если Объект.Состояние=фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден() Тогда
		Элементы.СигналНеУтвержден.Видимость = Ложь;
		Элементы.СигналУтвержден.Видимость = Истина;
	Иначе
		Элементы.СигналНеУтвержден.Видимость = Истина;
		Элементы.СигналУтвержден.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета()
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ЗависимостиОборотовПоСтатьям");
	ОбработанныеРазрезы	= Новый Массив;
	КЭШ_Разрезы 		= Неопределено;
	Для Каждого Разрез Из СтруктураРазрезов Цикл
		//ИмяРазреза = фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Разрез.Значение);
		ИмяРазреза 		= ПолучитьИмяРазреза(Разрез.Значение);
		СоответствиеРазрезовИзмерениям.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы),ИмяРазреза);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза 	= Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
		МассивТипов 	= ЭлементПВХ.ТипЗначения.Типы();
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.фин_СпособыРасчетаРазрезовПоЗависимостям"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы["Разрез"+НомерРазреза].Заголовок 		= ?(СокрЛП(ЭлементПВХ.ПредставлениеДополнительногоРеквизита)="",Строка(ЭлементПВХ),ЭлементПВХ.ПредставлениеДополнительногоРеквизита);
			Элементы["Разрез"+НомерРазреза].ОграничениеТипа = ОписаниеТипа;
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		ИмяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(имяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Элементы[имяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРазреза(Значение)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Значение);
КонецФункции

// заполняет перечень агрегатов документа
//
&НаСервере
Процедура ЗаполнениеАгрегатов()
	Если НЕ Объект.ВидОперации=Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей Тогда
		Возврат;
	КонецЕсли;
	СписокАгрегатов = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ФинансовыйПоказательВлияющая) Тогда
		СписокАгрегатов.Добавить(Объект.ФинансовыйПоказательВлияющая);
	КонецЕсли;
	Для Каждого СтрокаЗависимости Из Объект.ЗависимостиОборотовПоСтатьям Цикл
		Если (ЗначениеЗаполнено(СтрокаЗависимости.ЗависимаяФинансовыйПоказатель)) И СписокАгрегатов.Найти(СтрокаЗависимости.ЗависимаяФинансовыйПоказатель)=Неопределено Тогда
			СписокАгрегатов.Добавить(СтрокаЗависимости.ЗависимаяФинансовыйПоказатель);
		КонецЕсли;
	КонецЦикла;
	Объект.Агрегаты.Очистить();
	Для Каждого Агрегат Из СписокАгрегатов Цикл
		СтатьяАгрегат = Объект.Агрегаты.Добавить();
		СтатьяАгрегат.Агрегат=Агрегат;
	КонецЦикла;
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаАгрегат Из Объект.СоставАгрегатов Цикл
		Если СписокАгрегатов.Найти(СтрокаАгрегат.Агрегат)=Неопределено Тогда
			МассивКУдалению.Вставить(0,Объект.СоставАгрегатов.Индекс(СтрокаАгрегат));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из МассивКУдалению Цикл
		Объект.СоставАгрегатов.Удалить(СтрокаУдалить);
	КонецЦикла;
	КоличествоГрупп = 0;
	Для Каждого Агрегат Из СписокАгрегатов Цикл
       КоличествоГрупп = Макс(КоличествоГрупп,Агрегат.Состав.Количество());
	КонецЦикла;
	Для Каждого Агрегат Из СписокАгрегатов Цикл
		Если Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат",Агрегат)).Количество()=0 Тогда
			Если Агрегат.Состав.Количество()=1 Тогда
				Для Группа=1 По КоличествоГрупп Цикл
					СтрокаСостава 					= Объект.СоставАгрегатов.Добавить();
					СтрокаСостава.Агрегат 			= Агрегат;
					СтрокаСостава.Группа 			= Группа;
					СтрокаСостава.ФинансовыйПоказатель 	= Агрегат.Состав[0].ФинансовыйПоказатель;
					Группа 							= Группа;
				КонецЦикла;
			Иначе
				Группа = 1;
				Для Каждого Статья Из Агрегат.Состав Цикл
					СтрокаСостава = Объект.СоставАгрегатов.Добавить();
					СтрокаСостава.Агрегат 	= Агрегат;
					СтрокаСостава.Группа 	= Группа;
					СтрокаСостава.ФинансовыйПоказатель = Статья.ФинансовыйПоказатель;
					Группа = Группа+1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбновитьПанельАгрегатов();
КонецПроцедуры //ЗаполнениеАгрегатов

&НаСервере
Процедура ФинансовыйПоказательВлияющаяПриИзмененииНаСервере()
	ЗаполнитьСписокРазрезов();
	
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаОбласть Из Объект.ОбластьДействияЗависимости Цикл
		Если НЕ ЗначениеЗаполнено(Объект.ФинансовыйПоказательВлияющая) Тогда
			СтрокиУдалить.Добавить(СтрокаОбласть);
		ИначеЕсли СписокРазрезов.НайтиПоЗначению(СтрокаОбласть.Измерение)=Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаОбласть);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.ОбластьДействияЗависимости.Удалить(СтрокаУдалить);
	КонецЦикла;

	ЗаполнениеАгрегатов();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура НастройкаРасчетаПриИзмененииНаСервере(СоответствиеРазрезовИзмерениям)
	Если Объект.НастройкаРасчета.Пустая() Тогда
		СтрокиНастройка = Объект.ОбластьДействияЗависимости.НайтиСтроки(Новый Структура("ВидОграниченияОбластиДействия",Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ПриНаличииСоответствияПоЗначению));
		Для Каждого СтрокаТЧ Из СтрокиНастройка Цикл
			СтрокаТЧ.ВидОграниченияОбластиДействия = Перечисления.фин_ВидыОграниченийОбластиДействияЗависимости.ФиксированноеЗначение;
		КонецЦикла;
		Для Каждого Разрез Из СоответствиеРазрезовИзмерениям Цикл
			СтрокиНастройка = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура(Разрез.Представление,Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке));
			Для Каждого СтрокаТЧ Из СтрокиНастройка Цикл
				СтрокаТЧ[Разрез.Представление] = Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоИсходнымДанным;
			КонецЦикла;
		КонецЦикла;
		СписокОсновных = Новый Массив;
		СписокОсновных.Добавить("Проект");
		СписокОсновных.Добавить("Контрагент");
		СписокОсновных.Добавить("Номенклатура");
		СписокОсновных.Добавить("УправленческоеПодразделение");
		Для Каждого Разрез Из СписокОсновных Цикл
			СтрокиНастройка = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура(Разрез,Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоНастройке));
			Для Каждого СтрокаТЧ Из СтрокиНастройка Цикл
				СтрокаТЧ[Разрез] = Перечисления.фин_СпособыРасчетаРазрезовПоЗависимостям.ПоИсходнымДанным;
			КонецЦикла;
		КонецЦикла;
		
		// очистка реквизитов расчета
		СоответствиеПоказателей = Новый Массив;
		СоответствиеПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1);
		СоответствиеПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2);
		СоответствиеПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3);
		Для Каждого мПоказатель Из СоответствиеПоказателей Цикл
			 Строки = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура("РеквизитВлияющейСтатьиДляРасчетаКоличества",мПоказатель));
			 Для Каждого Строка Из Строки Цикл
				 Строка.РеквизитВлияющейСтатьиДляРасчетаКоличества = "";
			 КонецЦикла;
			 Строки = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура("РеквизитВлияющейСтатьиДляРасчетаСуммы",мПоказатель));
			 Для Каждого Строка Из Строки Цикл
				 Строка.РеквизитВлияющейСтатьиДляРасчетаСуммы = "";
			 КонецЦикла;
		 КонецЦикла;
	 Иначе
		// очистка реквизитов расчета
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1);
		СписокПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2);
		СписокПоказателей.Добавить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3);
		СоответствиеПоказателей = Новый Соответствие;
		СоответствиеПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель1,"Показатель1");
		СоответствиеПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель2,"Показатель2");
		СоответствиеПоказателей.Вставить(Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.Показатель3,"Показатель3");
		Для Каждого мПоказатель Из СписокПоказателей Цикл
			ПоказательСтроки = Объект.НастройкаРасчета.ИспользуемыеПоказатели.НайтиСтроки(Новый Структура("Показатель",СоответствиеПоказателей.Получить(мПоказатель)));
			Если ПоказательСтроки.Количество()=0 ИЛИ НЕ ПоказательСтроки[0].Использование Тогда
				Строки = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура("РеквизитВлияющейСтатьиДляРасчетаКоличества",мПоказатель));
				Для Каждого Строка Из Строки Цикл
					Строка.РеквизитВлияющейСтатьиДляРасчетаКоличества = "";
				КонецЦикла;
				Строки = Объект.ЗависимостиОборотовПоСтатьям.НайтиСтроки(Новый Структура("РеквизитВлияющейСтатьиДляРасчетаСуммы",мПоказатель));
				Для Каждого Строка Из Строки Цикл
					Строка.РеквизитВлияющейСтатьиДляРасчетаСуммы = "";
				КонецЦикла;
			КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	НастроитьУсловноеОформлениеФормы();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

//Процедура РеформацияСостава
//
&НаСервере
Процедура РеформацияСостава()
	СтрокиАгрегата = Объект.СоставАгрегатов.Выгрузить();
	СтрокиАгрегата.Свернуть("Группа");
	СтрокиАгрегата.Сортировать("Группа УБЫВ");
	Если СтрокиАгрегата.Количество()=0 Тогда
		Возврат;
	Иначе	
		МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
	КонецЕсли;
	ГруппаРазрыва=0;
	Для Инд=1 По МаксимальнаяГруппа Цикл
		Если Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Группа",Инд)).Количество()=0 Тогда
			ГруппаРазрыва = Инд;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ГруппаРазрыва <> 0 Тогда
		Для Инд=ГруппаРазрыва+1 По МаксимальнаяГруппа Цикл
			СтрокиУровня = Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Группа",Инд));
			Для Каждого СтрокаСостава Из СтрокиУровня Цикл
				СтрокаСостава.Группа = СтрокаСостава.Группа-1;
			КонецЦикла;
		КонецЦикла;
		РеформацияСостава();
	КонецЕсли;
КонецПроцедуры //РеформацияСостава

&НаСервере
Процедура ЗависимостиОборотовПоСтатьямЗависимаяФинансовыйПоказательПриИзмененииНаСервере(Статья, Идентификатор,СтруктураРазрезов)
	ТекущиеДанные = Объект.ЗависимостиОборотовПоСтатьям.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ФинансовыеПоказатели.УчетПоКоличеству,
	|	ФинансовыеПоказатели.УчетПоСумме
	|ИЗ
	|	Справочник."+?(Объект.ВидОперации=Перечисления.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей,"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели")+" КАК ФинансовыеПоказатели
	|ГДЕ
	|	ФинансовыеПоказатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Статья);
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Для Каждого Разрез Из СтруктураРазрезов Цикл
			Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(Статья,Разрез.Значение) Тогда
				ТекущиеДанные[фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Значение)]="";
			КонецЕсли;
			Если Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
				ОписаниеТипов 										= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ЗависимаяФинансовыйПоказатель,Объект.Сценарий);
				ТекущиеДанные.Номенклатура 							= ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Результат.УчетПоСумме Тогда
			ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаСуммы		= Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.ПустаяСсылка();
			ТекущиеДанные.КоэффициентДляРасчетаСуммы				= 0;
		Иначе
			СписокСуммовых.Добавить(Статья);
			ТекущиеДанные.УчетПоСумме = Истина;
		КонецЕсли;
		
		Если НЕ Результат.УчетПоКоличеству Тогда
			ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаКоличества= Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.ПустаяСсылка();
			ТекущиеДанные.КоэффициентДляРасчетаКоличества			= 0;
		Иначе
			СписокКоличественных.Добавить(Статья);
			ТекущиеДанные.УчетПоКоличеству = Истина;
		КонецЕсли;
		
	Иначе
		Для Каждого Разрез Из СтруктураРазрезов Цикл
			ТекущиеДанные[фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Значение)]="";
		КонецЦикла;
		ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаСуммы			= Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.ПустаяСсылка();
		ТекущиеДанные.КоэффициентДляРасчетаСуммы					= 0;
		ТекущиеДанные.РеквизитВлияющейСтатьиДляРасчетаКоличества	= Перечисления.фин_РеквизитыДляРасчетаЗависимыхСтатейБюджета.ПустаяСсылка();
		ТекущиеДанные.КоэффициентДляРасчетаКоличества				= 0;
	КонецЕсли;
	
	ЗаполнениеАгрегатов();
КонецПроцедуры

&НаСервере
Функция Привести(Значение)
	Возврат Значение.ТипЗначения.ПривестиЗначение("");
КонецФункции

&НаСервере
Процедура ЗаполнитьИзДокументаНаСервере(Ссылка)
	Документ = Ссылка.ПолучитьОбъект();
	ТЧ = Документ.ЗависимостиОборотовПоСтатьям.Выгрузить();
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		НоваяСтрока = Объект.ЗависимостиОборотовПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
	КонецЦикла;
	ЗаполнитьСпискиПоПризнакуУчета();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗначений()
	ТекущиеДанные = Элементы.ОбластьДействияЗависимости.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Измерение) Тогда
		ПоказатьПредупреждение(,"Не указан разрез бюджетирования!");
		Возврат;
	КонецЕсли;
	СписокЗначенийДляПоказа = Новый СписокЗначений;
	СписокСтрок = Объект.СпискиПараметровОтбора.НайтиСтроки(Новый Структура("Измерение",ТекущиеДанные.Измерение));
	Для Каждого СтрокаТЗ Из СписокСтрок Цикл
		СписокЗначенийДляПоказа.Добавить(СтрокаТЗ.УсловиеНаЗначение);
	КонецЦикла;
	ОписаниеОповещенияВыбораСписка = Новый ОписаниеОповещения("ОбработкаВыбораСпискаЗначенийОтбора",ЭтотОбъект,ТекущиеДанные.Измерение);
	ОткрытьФорму("Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.Форма.ФормаСпискаЗначений",Новый Структура("Разрез,СписокЗначенийДляПоказа",ТекущиеДанные.Разрез,СписокЗначенийДляПоказа),ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияВыбораСписка);
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	// Отобразить в заголовке формы вид операции.
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтотОбъект);

	// контроль счета в операциях
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ИндивидуальнаяУстановкаЗависимостей") Тогда
		Объект.СоставАгрегатов.Очистить();
	КонецЕсли;
	ТипЗначения = Новый ОписаниеТипов("СправочникСсылка."+?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийНастройкаЗависимостей.ГрупповаяУстановкаЗависимостей"),"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели"));
	Объект.ФинансовыйПоказательВлияющая = ТипЗначения.ПривестиЗначение(Объект.ФинансовыйПоказательВлияющая);
	Для Каждого Зависимость Из Объект.ЗависимостиОборотовПоСтатьям Цикл
		Зависимость.ЗависимаяФинансовыйПоказатель = ТипЗначения.ПривестиЗначение(Зависимость.ЗависимаяФинансовыйПоказатель);
	КонецЦикла;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ПолучитьТипыБюджета()
	Возврат Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты.Найти(Элементы.ЗависимостиОборотовПоСтатьям.ТекущийЭлемент.Имя).Тип.Типы()
КонецФункции

&НаСервере
Функция ПроверитьСоставАгрегатов()
	СтрокиАгрегата = Объект.СоставАгрегатов.Выгрузить();
	СтрокиАгрегата.Свернуть("Группа");
	СтрокиАгрегата.Сортировать("Группа УБЫВ");
	Если СтрокиАгрегата.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокиАгрегата[0].Группа;	
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьСписокРеквизитов(ТекущийАгрегат,ТребуемыйОбъект)
	мСписокРеквизитов= Новый Структура;
	Для Каждого Реквизит Из Метаданные.Справочники[ТребуемыйОбъект].Реквизиты Цикл
		мСписокРеквизитов.Вставить(Реквизит.Имя,ТекущийАгрегат[Реквизит.Имя]);
	КонецЦикла;	
	Возврат мСписокРеквизитов
КонецФункции

&НаСервере
Процедура СоставАгрегатовДобавитьГруппуНаСервере()
	
	СтрокиАгрегата = Объект.СоставАгрегатов.Выгрузить();
	СтрокиАгрегата.Свернуть("Группа");
	СтрокиАгрегата.Сортировать("Группа УБЫВ");
	Если СтрокиАгрегата.Количество()=0 Тогда
		МаксимальнаяГруппа = 0;
	Иначе	
		МаксимальнаяГруппа = СтрокиАгрегата[0].Группа;
	КонецЕсли;
	СтрокаСостава 			= Объект.СоставАгрегатов.Добавить();
	СтрокаСостава.Группа 	= МаксимальнаяГруппа+1;
	СтрокаСостава.Агрегат 	= Объект.Агрегаты[0].Агрегат;
	ЗаполнениеАгрегатов();
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДокумента(РезультатВыбора,ДополнительныеПараметры)
	Если РезультатВыбора <> Неопределено Тогда
		Если ДополнительныеПараметры = "Очищать" Тогда
			Объект.ЗависимостиОборотовПоСтатьям.Очистить();
		КонецЕсли;
		ЗаполнитьИзДокументаНаСервере(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДляЗаполненияКолонки(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 			= ДополнительныеПараметры.ТекущийАгрегат;
	ТекущийАгрегатКолонка 	= ДополнительныеПараметры.ТекущийАгрегатКолонка;
	
	СтатьяТекущая 		= РезультатВыбора;
	КоличествоГрупп 	= ПанельАгрегатов.Количество();
	Для ТекущаяГруппа 	= 1 По КоличествоГрупп Цикл
		СтрокаТекущая 	= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа));
		Если СтрокаТекущая.Количество() = 0 Тогда
			СтрокаТекущая			= Объект.СоставАгрегатов.Добавить();
			СтрокаТекущая.Агрегат 	= ТекущийАгрегат;
			СтрокаТекущая.Группа  	= ТекущаяГруппа;
		Иначе	
			СтрокаТекущая 			= СтрокаТекущая[0];
		КонецЕсли;
		СтрокаТекущая.ФинансовыйПоказатель = СтатьяТекущая;
	КонецЦикла;
	Для Каждого СтрокаАгрегат Из ПанельАгрегатов Цикл
		СтрокаАгрегат[ТекущийАгрегатКолонка] = РезультатВыбора;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораСтатьи(СтатьяТекущая,ДополнительныеПараметры) Экспорт
	Если СтатьяТекущая = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийАгрегат 	= ДополнительныеПараметры.ТекущийАгрегат;
	ТекущаяГруппа 	= ДополнительныеПараметры.ТекущаяГруппа;
	СтрокаТекущая 	= Объект.СоставАгрегатов.НайтиСтроки(Новый Структура("Агрегат,Группа",ТекущийАгрегат,ТекущаяГруппа));
	Если СтрокаТекущая.Количество()=0 Тогда
		СтрокаТекущая			= Объект.СоставАгрегатов.Добавить();
		СтрокаТекущая.Агрегат 	= ТекущийАгрегат;
		СтрокаТекущая.Группа  	= ТекущаяГруппа;
	Иначе	
		СтрокаТекущая 			= СтрокаТекущая[0];
	КонецЕсли;
	СтрокаТекущая.ФинансовыйПоказатель = СтатьяТекущая;
	
	СтрокаАгрегатов = ПанельАгрегатов.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
	СтрокаАгрегатов[ДополнительныеПараметры.ТекущийАгрегатКолонка] = СтатьяТекущая;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРазрезов()
	СписокРазрезов.Очистить();
	Для Каждого РазрезУчета Из Объект.ФинансовыйПоказательВлияющая.РазрезыУчета Цикл
		СписокРазрезов.Добавить(РазрезУчета.Измерение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезУчета.Измерение));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ЗависимостиОборотовПоСтатьям.ТекущиеДанные;
	ТекущееПоле = Элементы.ЗависимостиОборотовПоСтатьям.ТекущийЭлемент.Имя;
	ТекущиеДанные[ТекущееПоле] = ПредопределенноеЗначение("Перечисление.фин_СпособыРасчетаРазрезовПоЗависимостям.ПустаяСсылка");
КонецПроцедуры

#КонецОбласти

