Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// переменные для управления отображения структурного подразделения
Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	Если МетаданныеПоДокументам[ТипЗнч(ДокументСсылка)] = Неопределено Тогда
		МетаданныеПоДокументам.Вставить(ТипЗнч(ДокументСсылка),ДокументСсылка.Метаданные());
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипЗнч(ДокументСсылка)];
	
КонецФункции // ПолучитьМетаданныеДокумента()

#Если Клиент Тогда

//  Функция возвращает табличный документ для печати акта сверки
//
Функция ПечатьАктаСверки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДокументовСФ = Новый СписокЗначений;
	СписокДокументовСФ.Добавить("СчетФактураВыданный");	
	СписокДокументовСФ.Добавить("СчетФактураПолученный");
	
	Если ПоДаннымОрганизации.Количество() = 0 и ПоДаннымКонтрагента.Количество() = 0  и ОстатокНаНачало = 0 Тогда
	    Сообщить("Нет данных для печати. Используйте кнопку ""Заполнить.""");
	КонецЕсли;
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение);

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	
	Макет  = ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьСФ           = Макет.ПолучитьОбласть("СФ");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	НазваниеОрганизации = СтруктурнаяЕдиницаОрганизация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина");
	ИмяПредставителяОрганизации = ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	    ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ДанныеПредставителяОрганизации = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, ПредставительОрганизации, ТекущаяДата());
	ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
					+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
					+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, " + ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность) + " " + НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"_______________________") + ", с одной стороны, "
				+ "и " + ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность) + " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ТОгда
		ОбластьЗаголовок.Параметры.ВалютаДокумента = мВалютаРегламентированногоУчета;
	Иначе
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	КонецЕсли;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.ДатаНачала = Формат(ДатаНачала, "ДЛФ=DD");
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Документ;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			
			РегистраторПредставление = "";
			Если не СтрокаОрганизации.Документ = Неопределено Тогда
				
				// -КУФИБ- начало
				СтруктураДокумент = общ_ПривилегированныеПроцедуры.СтруктураДанныхДокументаДляПечати(СтрокаОрганизации.Документ);
				РегистраторПредставление =  СтрокаОрганизации.Документ.Метаданные().Синоним +" " 
																+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураДокумент, глСписокПрефиксовУзлов) + " от " 
																+  Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy");
																
				Если СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтруктураДокумент.НомерВходящегоДокумента)  И ЗначениеЗаполнено(СтруктураДокумент.ДатаВходящегоДокумента) Тогда
					РегистраторПредставление = РегистраторПредставление + ", " + СтруктураДокумент.ВидВходящегоДокумента +
																		" № вх. " + СтруктураДокумент.НомерВходящегоДокумента + " от " + Формат(СтруктураДокумент.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy");  
								
				Иначе 
					НомерДокументаГЗ = ?(СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("НомерДокументаГЗ") <> Неопределено, СтруктураДокумент.НомерДокументаГЗ, "");
					ДатаДокументаГЗ = ?(СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("ДатаДокументаГЗ") <> Неопределено, СтруктураДокумент.ДатаДокументаГЗ, "");
					РегистраторПредставление =  СтрокаОрганизации.Документ.Метаданные().Синоним +" " 
																	+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаОрганизации.Документ, глСписокПрефиксовУзлов) + " от " 
																	+  Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy")
																	+ ?(ЗначениеЗаполнено(НомерДокументаГЗ)," № вх. " + НомерДокументаГЗ 
																	+ ?(ЗначениеЗаполнено(ДатаДокументаГЗ)," от " + Формат(ДатаДокументаГЗ,"ДФ=dd.MM.yyyy"),""),""); 
													
					КонецЕсли;	
				КонецЕсли; 
				
				// -КУФИБ- конец
				
				//РегистраторПредставление =  СтрокаОрганизации.Документ.Метаданные().Синоним +" " 
				//												+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаОрганизации.Документ, глСписокПрефиксовУзлов) + " от " 
				//												+  Формат(СтрокаОрганизации.Документ.Дата, "ДФ=dd.MM.yyyy");
				//												
				//Если СтрокаОрганизации.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
				//	Если ЗначениеЗаполнено(СтрокаОрганизации.Документ.НомерВходящегоДокумента)  И ЗначениеЗаполнено(СтрокаОрганизации.Документ.ДатаВходящегоДокумента) Тогда
				//	РегистраторПредставление = РегистраторПредставление + ", " + СтрокаОрганизации.Документ.ВидВходящегоДокумента +
				//														" № вх. " + СтрокаОрганизации.Документ.НомерВходящегоДокумента + " от " + Формат(СтрокаОрганизации.Документ.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy");  
				//	КонецЕсли;	
				//КонецЕсли; 
													
			КонецЕсли;	
			
			ОбластьОбороты.Параметры.РегистраторПредставление = РегистраторПредставление;

			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.Документ;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			Если СтрокаОрганизации <> Неопределено Тогда 
				СтрокаОрганизации = Неопределено;
			КонецЕсли;	
			
			ОбластьОбороты.Параметры.СуммаОборотДт 				= "";
			ОбластьОбороты.Параметры.СуммаОборотКт 				= "";
			ОбластьОбороты.Параметры.РегистраторПредставление 	= "";
			ОбластьОбороты.Параметры.Регистратор 				= "";
			ОбластьОбороты.Параметры.ДатаДокумента 				= "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизацииКонтр = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизацииКонтр.Документ;
			СуммаОборотДт = СтрокаОрганизацииКонтр.Дебет;
			СуммаОборотКт = СтрокаОрганизацииКонтр.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			
			РегистраторПредставлениеКонтр = "";			
			Если не СтрокаОрганизацииКонтр.Документ = Неопределено Тогда
				
				// -КУФИБ- начало
				СтруктураДокумент = общ_ПривилегированныеПроцедуры.СтруктураДанныхДокументаДляПечати(СтрокаОрганизацииКонтр.Документ);
				РегистраторПредставлениеКонтр = СтрокаОрганизацииКонтр.Документ.Метаданные().Синоним +" " 
																	+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураДокумент, глСписокПрефиксовУзлов) + " от " 
																	+ Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy");
																	
																	
			
				Если СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтруктураДокумент.НомерВходящегоДокумента)  
						И ЗначениеЗаполнено(СтруктураДокумент.ДатаВходящегоДокумента) Тогда
						
						РегистраторПредставлениеКонтр = РегистраторПредставлениеКонтр + ", " + СтруктураДокумент.ВидВходящегоДокумента +
																		" № вх. " + СтруктураДокумент.НомерВходящегоДокумента + " от " + Формат(СтруктураДокумент.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy");  
					КонецЕсли;	
				Иначе
					НомерДокументаГЗ = ?(СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("НомерДокументаГЗ") <> Неопределено, СтруктураДокумент.НомерДокументаГЗ, "");
					ДатаДокументаГЗ = ?(СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("ДатаДокументаГЗ") <> Неопределено, СтруктураДокумент.ДатаДокументаГЗ, "");
					РегистраторПредставлениеКонтр =  СтрокаОрганизацииКонтр.Документ.Метаданные().Синоним +" " 
																	+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаОрганизацииКонтр.Документ, глСписокПрефиксовУзлов) + " от " 
																	+  Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy")
																	+ ?(ЗначениеЗаполнено(НомерДокументаГЗ)," № вх. " + НомерДокументаГЗ 
																	+ ?(ЗначениеЗаполнено(ДатаДокументаГЗ)," от " + Формат(ДатаДокументаГЗ,"ДФ=dd.MM.yyyy"),""),"");
				КонецЕсли;
				
				// -КУФИБ- конец
			//	РегистраторПредставлениеКонтр = СтрокаОрганизацииКонтр.Документ.Метаданные().Синоним +" " 
			//														+ ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаОрганизацииКонтр.Документ, глСписокПрефиксовУзлов) + " от " 
			//														+ Формат(СтрокаОрганизацииКонтр.Документ.Дата, "ДФ=dd.MM.yyyy");
			//														
			//														
			//
			//	Если СтрокаОрганизацииКонтр.Документ.Метаданные().Реквизиты.Найти("ВидВходящегоДокумента") <> Неопределено Тогда
			//		Если ЗначениеЗаполнено(СтрокаОрганизацииКонтр.Документ.НомерВходящегоДокумента)  
			//			И ЗначениеЗаполнено(СтрокаОрганизацииКонтр.Документ.ДатаВходящегоДокумента) Тогда
			//			
			//			РегистраторПредставлениеКонтр = РегистраторПредставлениеКонтр + ", " + СтрокаОрганизацииКонтр.Документ.ВидВходящегоДокумента +
			//															" № вх. " + СтрокаОрганизацииКонтр.Документ.НомерВходящегоДокумента + " от " + Формат(СтрокаОрганизацииКонтр.Документ.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy");  
			//		КонецЕсли;	
			//	КонецЕсли;
														
			КонецЕсли; 			
						
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = РегистраторПредставлениеКонтр;	
			
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизацииКонтр.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			Если СтрокаОрганизацииКонтр <> Неопределено Тогда 
				СтрокаОрганизацииКонтр = Неопределено;
			КонецЕсли;	
				
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр 		   = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр 		   = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр 		   = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
		
		//выведем подчиненные счета-фактуры, если имеются
		Выводить = Ложь;

		Для Каждого СФ Из СписокДокументовСФ Цикл
			ДокументСФ      = Неопределено;
			ДокументСФКонтр = Неопределено;
			
			Если СтрокаОрганизации <> Неопределено Тогда
				// - КУФИБ- начало
				ДокументСФ = общ_ПривилегированныеПроцедуры.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, СФ.Значение);
				// - КУФИБ- конец
				//ДокументСФ = ОбщегоНазначения.НайтиПодчиненныйДокумент(СтрокаОрганизации.Документ, СФ.Значение);
			КонецЕсли;  			
			Если СтрокаОрганизацииКонтр <> Неопределено Тогда
				// - КУФИБ- начало
				ДокументСФКонтр = общ_ПривилегированныеПроцедуры.НайтиПодчиненныйДокумент(СтрокаОрганизацииКонтр.Документ, СФ.Значение);
				// - КУФИБ- конец
				//ДокументСФКонтр = ОбщегоНазначения.НайтиПодчиненныйДокумент(СтрокаОрганизацииКонтр.Документ, СФ.Значение);
			КонецЕсли; 				
			Если ДокументСФ <> Неопределено Тогда
				// -КУФИБ- начало
				СтруктураДокумент = общ_ПривилегированныеПроцедуры.СтруктураДанныхДокументаДляПечати(ДокументСФ);
				Если СФ.Значение = "СчетФактураПолученный" Тогда
					Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
					Если ЗначениеЗаполнено(СтруктураДокумент.НомерВходящегоДокумента) Тогда
						Документ = Документ + " № вх. " + СтруктураДокумент.НомерВходящегоДокумента;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумент.ДатаВходящегоДокумента) Тогда
						Документ = Документ + " от " + Формат(СтруктураДокумент.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				Иначе
//					Документ = ДокументСФ;
					Документ = ДокументСФ.Метаданные().Синоним +" " 
							   + ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураДокумент, глСписокПрефиксовУзлов) + " от " 
							   + Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				// -КУФИБ- конец
//				Если СФ.Значение = "СчетФактураПолученный" Тогда
//					Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
//					Если ЗначениеЗаполнено(ДокументСФ.НомерВходящегоДокумента) Тогда
//						Документ = Документ + " № вх. " + ДокументСФ.НомерВходящегоДокумента;
//					КонецЕсли;
//					Если ЗначениеЗаполнено(ДокументСФ.ДатаВходящегоДокумента) Тогда
//						Документ = Документ + " от " + Формат(ДокументСФ.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
//					КонецЕсли;
//				Иначе
////					Документ = ДокументСФ;
//					Документ = ДокументСФ.Метаданные().Синоним +" " 
//							   + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСФ, глСписокПрефиксовУзлов) + " от " 
//							   + Формат(ДокументСФ.Дата, "ДФ=dd.MM.yyyy");
//				КонецЕсли;
				ОбластьСФ.Параметры.ДокументСФ = Документ;
				ОбластьСФ.Параметры.РасшифровкаСФ = ДокументСф;
				Выводить = Истина;
			КонецЕсли;
			Если ДокументСФКонтр <> Неопределено Тогда
				Выводить = Истина; 				
				// -КУФИБ- начало
				СтруктураДокумент = общ_ПривилегированныеПроцедуры.СтруктураДанныхДокументаДляПечати(ДокументСФКонтр);
				Если СФ.Значение = "СчетФактураПолученный" Тогда
					Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
					Если ЗначениеЗаполнено(СтруктураДокумент.НомерВходящегоДокумента) Тогда
						Документ = Документ + " № вх. " + СтруктураДокумент.НомерВходящегоДокумента;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумент.ДатаВходящегоДокумента) Тогда
						Документ = Документ + " от " + Формат(СтруктураДокумент.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				Иначе
//					Документ = ДокументСФКонтр;
					Документ = ДокументСФКонтр.Метаданные().Синоним +" " 
							   + ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураДокумент, глСписокПрефиксовУзлов) + " от " 
							   + Формат(СтруктураДокумент.Дата, "ДФ=dd.MM.yyyy");
				КонецЕсли;     
				// -КУФИБ- конец
//				Если СФ.Значение = "СчетФактураПолученный" Тогда
//					Документ = Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные().Синоним;
//					Если ЗначениеЗаполнено(ДокументСФКонтр.НомерВходящегоДокумента) Тогда
//						Документ = Документ + " № вх. " + ДокументСФКонтр.НомерВходящегоДокумента;
//					КонецЕсли;
//					Если ЗначениеЗаполнено(ДокументСФКонтр.ДатаВходящегоДокумента) Тогда
//						Документ = Документ + " от " + Формат(ДокументСФКонтр.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
//					КонецЕсли;
//				Иначе
////					Документ = ДокументСФКонтр;
//					Документ = ДокументСФКонтр.Метаданные().Синоним +" " 
//							   + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСФКонтр, глСписокПрефиксовУзлов) + " от " 
//							   + Формат(ДокументСФКонтр.Дата, "ДФ=dd.MM.yyyy");
//				КонецЕсли;     
				ОбластьСФ.Параметры.ДокументСФКонтр = Документ;
				ОбластьСФ.Параметры.РасшифровкаСФКонтр = ДокументСфКонтр;
			КонецЕсли; 
		КонецЦикла;
		
		Если Выводить Тогда
			ТабДок.Вывести(ОбластьСФ);
			ОбластьСФ           = Макет.ПолучитьОбласть("СФ");
		КонецЕсли;   	
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
	Если НЕ СверкаСогласована Тогда
		НачальныйНомер = 1;
		Для Итерация = 1 По 5 Цикл
			ТабДок.Вывести(ОбластьПустаяСтрока);
			НачальныйНомер = НачальныйНомер + 1;
		КонецЦикла;		
	КонецЕсли;  	

	ОбластьОборотыИтог.Параметры.СуммаОборотДт = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.ДатаОкончания = Формат(КонецДня(ДатаОкончания), "ДЛФ=DD");
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ТОгда
		ВалютаРезультата = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаРезультата = ВалютаДокумента;
	КонецЕсли;
	
	Если ПоДаннымОрганизации.Количество() = 0 И ОстатокНаКонец = 0 Тогда
   	    РезультатыСверки = "";
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаРезультата)+" (" + СокрЛП(ОбщегоНазначения.СформироватьСуммуПрописью(ОстатокНаКонец,ВалютаРезультата)) + ") ";
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаРезультата)+ " (" + СокрЛП(ОбщегоНазначения.СформироватьСуммуПрописью(-ОстатокНаКонец,ВалютаРезультата)) + ") ";
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 И ОстатокНаКонецК = 0 Тогда
	   	    РезультатыСверки = "";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаРезультата)+ " (" + СокрЛП(ОбщегоНазначения.СформироватьСуммуПрописью(-ОстатокНаКонецК,ВалютаРезультата)) + ") ";
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаРезультата)+ " (" + СокрЛП(ОбщегоНазначения.СформироватьСуммуПрописью(ОстатокНаКонецК,ВалютаРезультата)) + ") ";
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец+ОстатокНаКонецК <> 0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаРезультата)+ " (" + СокрЛП(ОбщегоНазначения.СформироватьСуммуПрописью(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК),ВалютаРезультата)) + ") ";
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Ссылка.Дата);

	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	//ОбластьПодвал.Параметры.ПредставлениеРНН_БИНОрганизации = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Ссылка.Дата);
	
	СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(Контрагент, Ссылка.Дата);
	
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	//ОбластьПодвал.Параметры.ПредставлениеРНН_БИНКонтрагента = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Ссылка.Дата);
	
	ОбластьПодвал.Параметры.Должность = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Должность),"________________",ДанныеПредставителяОрганизации.Должность);
	ОбластьПодвал.Параметры.ДолжностьК = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента.Должность),"________________",ПредставительКонтрагента.Должность);
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Представление),"_______________________",ДанныеПредставителяОрганизации.Представление)+")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	//ЦС
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(ТекущаяДата()),);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьПодвал.Параметры.ФИОРуководителя = Руководитель;
	ОбластьПодвал.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), "Не предусмотрен", Бухгалтер);
	//ЦС
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.АвтоМасштаб = Истина;
	
	Возврат ТабДок;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	    Сообщить("Реквизит ""Дата окончания"" не заполнен. Печатная форма не сформирована!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "АктСверки" Тогда
		ТабДокумент = ПечатьАктаСверки();
	КонецЕсли;
	
	Если ТабДокумент<>Ложь ТОгда
	    УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	КонецЕсли;
	
КонецПроцедуры // Печать

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
//
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета() Экспорт
	
	Если ДатаОкончания < ДатаНачала Тогда
		Предупреждение("Неверно задан период сверки расчетов.",, "!");
		Возврат;
	КонецЕсли;
	
	КоличествоСчетов = СписокСчетов.Количество();
	ФильтрСписокСчетов = Новый массив();
	Для каждого СтрокаСчета Из СписокСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
			Продолжить;
		Иначе
			ФильтрСписокСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ФильтрСписокСчетов.Количество() = 0 Тогда
		Предупреждение("Неверно задан список счетов,по которым производится сверка .",, "!");
		Возврат;
	КонецЕсли;
	
	ФильтрИсключаемыхСчетов = Новый массив();
	Для каждого СтрокаСчета Из СписокИсключаемыхСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) Тогда
			Продолжить;
		Иначе
			ФильтрИсключаемыхСчетов.Добавить(СтрокаСчета.Счет);
		КонецЕсли; 
	КонецЦикла; 
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания),ДатаОкончания,КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("ДатаПослеОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, КонецДня(ДатаОкончания) + 1));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПолучитьСписокОрганизацийПоТабЧасти());
	Если Не ВключатьДочерние Тогда
		Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Иначе
		ЗапросКонтрагентов = Новый Запрос;
		ЗапросКонтрагентов.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
		|			ИЛИ Контрагенты.Ссылка = &ГоловнойКонтрагент)";
		ЗапросКонтрагентов.УстановитьПараметр("ГоловнойКонтрагент", Контрагент);
		РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить();
		Если Не РезультатЗапросаКонтрагентов.Пустой() Тогда
			СписокКонтрагентов = Новый СписокЗначений;
			ВыборкаЗапросаКонтрагентов = РезультатЗапросаКонтрагентов.Выбрать();
			Пока ВыборкаЗапросаКонтрагентов.Следующий() Цикл
				СписокКонтрагентов.Добавить(ВыборкаЗапросаКонтрагентов.Контрагент);
			КонецЦикла;
			Запрос.УстановитьПараметр("Контрагент", СписокКонтрагентов);
		Иначе
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("ФильтрИсключаемыхСчетов", ФильтрИсключаемыхСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	Запрос.УстановитьПараметр("ТипОперации", ?(НЕ ЗначениеЗаполнено(ТипОперации),Неопределено,ТипОперации));
	
	ТекстУсловия ="";
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Регистратор.Дата КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	0 КАК ОстатокНаНачало,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТиповойОбороты.СуммаОборотДт
	|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТиповойОбороты.СуммаОборотКт
	|		ИНАЧЕ ТиповойОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	0 КАК ОстатокНаКонец,
	|	ТиповойОбороты.КорСчет,
	|	ТиповойОбороты.КорСубконто1,
	|	ТиповойОбороты.КорСубконто2,
	|	ТиповойОбороты.КорСубконто3,
	|	ТиповойОбороты.Валюта,
	|	ТиповойОбороты.ВалютнаяСуммаОборот,
	|	ТиповойОбороты.Счет
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|		&ДатаНачала,
	|		&ДатаОкончания,
	|		Регистратор,
	|		Счет В (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Организация В (&СписокОрганизаций)"+ТекстУсловия;
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) и ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И ВЫБОР
		|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|		            ТОГДА ИСТИНА
		|		        ИНАЧЕ Валюта = &Валюта
		|		    КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|		    И Субконто1 В (&Контрагент)";
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ТипОперации)  Тогда 
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента), КорСчет НЕ В (&ФИльтрИсключаемыхСчетов)
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
		|				ТОГДА (НЕ(ТиповойОбороты.КорСубконто1 В (&Контрагент)
		|									И ТиповойОбороты.КорСубконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ТипОперации)  Тогда 
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)
		|			И Субконто3 В ИЕРАРХИИ(&ТипОперации),КорСчет НЕ В (&ФИльтрИсключаемыхСчетов)
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
		|				ТОГДА (НЕ(ТиповойОбороты.КорСубконто1 В (&Контрагент)
		|									И ТиповойОбороты.КорСубконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)
		|									И ТиповойОбороты.КорСубконто3 В ИЕРАРХИИ(&ТипОперации)))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	ИначеЕсли Не ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ТипОперации)  Тогда 
		Запрос.Текст = Запрос.Текст + "
		|			И Субконто3 В ИЕРАРХИИ(&ТипОперации),КорСчет НЕ В (&ФИльтрИсключаемыхСчетов)
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
		|				ТОГДА (НЕ(ТиповойОбороты.КорСубконто1 В (&Контрагент)
		|									И ТиповойОбороты.КорСубконто3 В ИЕРАРХИИ(&ТипОперации)))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|		,КорСчет НЕ В (&ФИльтрИсключаемыхСчетов)
		|		,
		|		) КАК ТиповойОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТиповойОбороты.КорСчет В (&ФильтрСписокСчетов)
		|				ТОГДА ВЫБОР
		|						КОГДА ТиповойОбороты.КорСубконто1 В (&Контрагент)
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					  КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Остатки"",
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ТиповойОстатки.СуммаОстаток
		|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&ДатаНачала,
		|		Счет В (&ФильтрСписокСчетов),
		|		&АналитикаРасчетов,
		|		Организация В (&СписокОрганизаций)"+ТекстУсловия;
		Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) и ЗначениеЗаполнено(ВалютаДокумента) Тогда
			Запрос.Текст = Запрос.Текст + "
			|		    И ВЫБОР
			|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
			|		            ТОГДА ИСТИНА
			|		        ИНАЧЕ Валюта = &Валюта
			|		    КОНЕЦ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто1 В (&Контрагент)";
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Запрос.Текст = Запрос.Текст + "
			|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипОперации) Тогда
			Запрос.Текст = Запрос.Текст + "
			|		    И Субконто3 В ИЕРАРХИИ(&ТипОперации)";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|		    ) КАК ТиповойОстатки ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Остатки"",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТиповойОстатки.СуммаОстаток
	|		ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|		&ДатаПослеОкончания,
	|		Счет В (&ФильтрСписокСчетов),
	|		&АналитикаРасчетов,
	|		Организация В (&СписокОрганизаций)"+ТекстУсловия;
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) и ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И ВЫБОР
		|		        КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|		            ТОГДА ИСТИНА
		|		        ИНАЧЕ Валюта = &Валюта
		|		    КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|		    И Субконто1 В (&Контрагент)";
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто2 В ИЕРАРХИИ(&ДоговорКонтрагента)";
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипОперации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|		    И Субконто3 В ИЕРАРХИИ(&ТипОперации)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|		    ) КАК ТиповойОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ОстатокНаНачало = 0;
	ОстатокНаКонец  = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дата = "Остатки" Тогда
			ОстатокНаНачало = ОстатокНаНачало+Выборка.ОстатокНаНачало;
			ОстатокНаКонец  = ОстатокНаКонец+Выборка.ОстатокНаКонец;
			Продолжить;
		КонецЕсли; 
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.Документ           = Выборка.Документ;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.Документ);
		
	КонецЦикла;
	
	НаборДвижений.Свернуть("Дата,Документ","Дебет, Кредит");	
	
	НаборДвижений.Сортировать("Дата,Документ");	
	
	ПоДаннымОрганизации.Загрузить(НаборДвижений);
	
КонецПроцедуры

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки", "Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполнение таблицы "По данным контрагента" по данным таблицы "По данным организации"
//
Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры

//Формирует список Значений структурных единиц из списка Организаций, по который сформирован документ
//
Функция ПолучитьСписокОрганизацийПоТабЧасти() Экспорт
	
	мСписокСтруктурныхЕдиниц = Новый СписокЗначений;
	
	Для Каждого СтрокаСпискаОрганизаций Из СписокОрганизаций Цикл
		мСписокСтруктурныхЕдиниц.Добавить(СтрокаСпискаОрганизаций.Организация);
	КонецЦикла;
	
	Возврат мСписокСтруктурныхЕдиниц;
	
КонецФункции

//Заполняет табличную часть документа СписокОрганизаций из списка значений 
//
Процедура ЗаполнитьТабЧастьПоСпискуОрганизаций(мСписокСтруктурныхЕдиниц) Экспорт
	
	СписокОрганизаций.Очистить();
	
	Для Каждого ЭлементСписка Из мСписокСтруктурныхЕдиниц Цикл
		
		НоваяСтрокаСпискаОрганизаций = СписокОрганизаций.Добавить();
		НоваяСтрокаСпискаОрганизаций.Организация = ЭлементСписка.Значение;
		
	КонецЦикла;
	
КонецПроцедуры
  
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Процедура-обработчик соыбтия "ОбработкаПроведения" документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	//проверим заполнение шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

//Процедура-обработчик события "ПередЗаписью" документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение ТЧ СписокОрганизаций
	Если (СписокОрганизаций.Количество() = 0) И (ЗначениеЗаполнено(Организация)) Тогда		
		НоваяСтрокаСпискаОрганизаций = СписокОрганизаций.Добавить();
		НоваяСтрокаСпискаОрганизаций.Организация = Организация;                       		
	КонецЕсли;        
КонецПроцедуры // ПередЗаписью

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета 			  = Константы.ВалютаРегламентированногоУчета.Получить();
МетаданныеПоДокументам 						  = Новый Соответствие();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 		  = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
