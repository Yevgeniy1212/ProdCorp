 ////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
 
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ОтсутствиеНаРаботе") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			// Заполнение табличной части. 
			Для Каждого ТекСтрока Из Основание.Работники Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) И НЕ ТекСтрока.ПроизошедшееСобытие Тогда
					НоваяСтрока              = Работники.Добавить();
					НоваяСтрока.Сотрудник    = ТекСтрока.Сотрудник;
					НоваяСтрока.ФизЛицо      = ТекСтрока.ФизЛицо;
					НоваяСтрока.ДатаВозврата = ТекСтрока.ДатаОкончания + 86400;
					НоваяСтрока.ЗаниматьСтавку = ТекСтрока.ОсвобождатьСтавку;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование = Основание;

КонецПроцедуры // ОбработкаЗаполненияУпр()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений":
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаВозврата
	//		для выполнения движений и проверки "Работает ли работник на дату возврата"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизитов "ФизЛицо" и ДатаВозврата
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "РегистрСведенийРаботники":
	//		Для каждой строки ТЧРаботники ищем движения по регистру РегистрСведенийРаботники на дату возврата	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
	               |	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботники.ФизЛицо,
	               |	ТЧРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	               |	ТЧРаботники.ДатаВозврата,
	               |	ТЧРаботники.ЗаниматьСтавку,
	               |	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	               |	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	               |	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	               |	NULL КАК КонфликтныйДокумент
	               |ИЗ
	               |	Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	               |		ИЗ
	               |			Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	               |				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаВозврата
	               |		
	               |		ГДЕ
	               |			ТЧРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	               |		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	               |		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.ФизЛицо И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |		ИЗ
	               |			Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники2
	               |				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка) И ТЧРаботники.ФизЛицо = ТЧРаботники2.ФизЛицо И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки И ТЧРаботники.ДатаВозврата = ТЧРаботники2.ДатаВозврата
	               |		
	               |		ГДЕ
	               |			ТЧРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	               |		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |
	               |ГДЕ
	               |	ТЧРаботники.Ссылка = &ДокументСсылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	""КонфликтныйДокумент"",
	               |	ТЧРаботники.НомерСтроки,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	СостояниеРаботников.Регистратор
	               |ИЗ
	               |	Документ.ВозвратНаРаботу.Работники КАК ТЧРаботники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК СостояниеРаботников
	               |		ПО СостояниеРаботников.ФизЛицо = ТЧРаботники.ФизЛицо И СостояниеРаботников.Период = ТЧРаботники.ДатаВозврата
	               |
	               |ГДЕ
	               |	ТЧРаботники.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если НЕ ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаВозврата
		ЕстьДатаВозврата = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВозврата);
		Если НЕ ЕстьДатаВозврата Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата возврата на работу!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ЕстьФизЛицо И ЕстьДатаВозврата Тогда
			
			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " еще не принят на работу!";
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
				Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			КонецЕсли; 

			// физлицо указан дважды
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "задана повторяющаяся строка (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	
			
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
// по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботников");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники,  
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботников";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботники.ДатаВозврата;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоРаботники.ФизЛицо;

		// Ресурсы
		Движение.Состояние                  = Перечисления.СостоянияРаботника.Работает;
			
	КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
    ИмяРегистра = "ЗанятыеРабочиеМеста";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

		Если ВыборкаПоРаботники.ЗаниматьСтавку Тогда
			// займем ставки
			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период                 = ВыборкаПоРаботники.ДатаВозврата;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
			

			// Измерения
			Движение.Подразделение	= ВыборкаПоРаботники.ПрежнееПодразделение;
			Движение.Должность              = ВыборкаПоРаботники.ПрежняяДолжность;

			// Ресурсы
			Движение.Количество		= ВыборкаПоРаботники.ПрежняяСтавка; 
		КонецЕсли; 

   КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ И ВыборкаПоРаботники.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);

				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);

КонецПроцедуры
