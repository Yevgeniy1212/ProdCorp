////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бухгалтерского и налогового учетов
// соответственно в случае если документ не отражается в каком-то виде учета,
// делаются невидимыми.
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

// переменные для управления отображения структурного подразделения
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

//// Процедура заполняет структуры именами реквизитов, которые имеют смысл
//// только для определенного вида учета
////

// Процедура заполняет список рексизитов, зависимых от типов учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "СчетУчетаРасчетовСКонтрагентом, НадписьСчетУчетаРасчетовСКонтрагентом,
								|СчетУчетаРасчетовПоАвансам, НадписьСчетУчетаРасчетовПоАвансам,
								|СчетЗатратБУ, Услуги.СчетДоходовБУ, Услуги.СчетСписанияСебестоимостиБУ,
								|Услуги.СубконтоДоходовБУ1, Услуги.СубконтоДоходовБУ2, Услуги.СубконтоДоходовБУ3,
								|СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
          	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента, ПодразделениеОрганизации, СчетУчетаРасчетовСКонтрагентом,СчетЗатратБУ,НоменклатурнаяГруппа";
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, мСтрокаРеквизитыБухУчета);
    	
	РеквизитыШапки = Новый Структура(РеквизитыШапки);
	РеквизитыШапки.ДоговорКонтрагента = "Не заполнено значение реквизита ""Договор""!";
	РеквизитыШапки.ПодразделениеОрганизации =  "Не заполнено значение реквизита ""Подразделение""!";
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		РеквизитыШапки.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		РеквизитыШапки.Вставить("СчетЗатратНУ");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	РеквизитыУсл = "Номенклатура, Количество, Сумма, СуммаПлановая";
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СчетУчетаНДСПоРеализации";					
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";			
		РеквизитыУсл = РеквизитыУсл + ", НДСВидОперацииРеализации";		
	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыУсл), Отказ, Заголовок);

	// Получим необходимые данные для проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");

	ТабУслуги = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей).Выгрузить();
	УправлениеЗапасами.ПроверитьЧтоНетТоваров( ЭтотОбъект, "Услуги", ТабУслуги, Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт

	Если ЗаполнятьБУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			// Счет доходов и его аналитика
			СтрокаТЧ.СчетДоходовБУ  = СчетаУчета.СчетДоходовОтРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");			
			
			#Если Клиент Тогда 

			РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ.СчетДоходовБУ, "СубконтоДоходовБУ", ПодразделениеОрганизации);
			
			#КонецЕсли

		КонецЕсли; 	
		
		СтрокаТЧ.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");			
		
		#Если Клиент Тогда 
        
		РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ.СчетСписанияСебестоимостиБУ, "СубконтоСписанияСебестоимостиБУ", ПодразделениеОрганизации);

		#КонецЕсли
	
		СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПоРеализации;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		Если ИмяТабЧасти<>"Услуги" Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходовБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоДоходовБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка();
			
			Если ИмяТабЧасти<>"Услуги" Тогда
				СтрокаТЧ.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.ПустаяСсылка();
				Для СчетчикЦикла = 1 По 3 Цикл
					СтрокаТЧ["СубконтоСписанияСебестоимостиБУ" + СчетчикЦикла] = Неопределено;
				КонецЦикла; 				
			КонецЕсли;			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //ЗаполнитьСчетаБУ

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда
		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;		
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			
			СтрокаТЧ.СчетДоходовНУ  = СчетаУчета.СчетДоходовОтРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета,  "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");
			
			#Если Клиент Тогда
				
			РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ.СчетДоходовНУ, "СубконтоДоходовНУ", ПодразделениеОрганизации);
			
			#КонецЕсли
	    
		КонецЕсли;	
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
			
			#Если Клиент Тогда
				
			РаботаСДиалогами.ЗаполнитьАналитикуПодразделениеСчетовДоходовЗатрат(СтрокаТЧ, СтрокаТЧ.СчетСписанияСебестоимостиНУ, "СубконтоСписанияСебестоимостиНУ", ПодразделениеОрганизации);
			
			#КонецЕсли
	
		КонецЕсли;			
		
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходовНУ  		= ПланыСчетов.Налоговый.ПустаяСсылка();			
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоДоходовНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоСписанияСебестоимостиНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Процедура заполнения счетов учета в строке табличной части услуги
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();
		
	ЗаполнитьСчетаБУ(СтрокаТЧ, "Услуги", СчетаУчета, ЗаполнятьБУ,  МетаданныеДока);	
	ЗаполнитьСчетаНУ(СтрокаТЧ, "Услуги", СчетаУчета, ЗаполнятьНУ,  МетаданныеДока);
		
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

// Процедура заполнения счетов учета в табличной части услуги
//
Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(ЗаполнятьБУ,ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ,ЗаполнятьНУ)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
Конецпроцедуры	

//Процедура заполняет тч Услуги на основании документа-Основания
//
Процедура СкопироватьУслуги(Основание) Экспорт
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.НомерСтроки,
	|	СчетНаОплатуПокупателюУслуги.Содержание,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Цена,
	|	СчетНаОплатуПокупателюУслуги.Сумма,
	|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого СтрокаТабличнойЧасти из Услуги Цикл
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		УправлениеПроизводством.ЗаполнитьПлановуюСебестоимость(СтрокаТабличнойЧасти, Дата, Организация);
		УправлениеПроизводством.ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти);
	КонецЦикла;	

	ЗаполнитьСчетаУчетаВТабЧастиУслуги(Истина,УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
КонецПроцедуры

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
		
	ДокументОснование = Основание.Ссылка;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// заполним банковский счет отдельно, так как в процедуре ЗаполнитьШапкуДокументаПоОснованию 
		// обрабатывается реквизит "БанковскийСчет", а у нас "БанковскийСчетОрганизации"
		БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
				
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		СкопироватьУслуги(Основание);
		
		ДокументОснование = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;    				
			#КонецЕсли   			
			Возврат;       		
		КонецЕсли;  	
		// Заполним реквизиты шапки по документу основанию.
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Дата 						= Основание.ДатаСовершенияОборотаПоРеализации;
		Грузополучатель             = Основание.Контрагент;	 	
		БанковскийСчетОрганизации   = Основание.СчетОрганизации;
		АдресДоставки			    = Основание.ПунктНазначения;
				
				
		// Флаги включения налогов.
		УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);	
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
										и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
		Для Каждого Услуга ИЗ  Услуги Цикл
			ЗаполнитьРеквизитыНалоговогоУчета(Услуга);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(Услуга, Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		КонецЦикла;			
				
	КонецЕсли;
    	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// Процедура выполняющая движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)

	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Заголовок, Отказ,РежимПроведения);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Заголовок, Отказ, РежимПроведения)

	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаАвансов = Новый ТаблицаЗначений;
	
	ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам,Отказ, Заголовок, РежимПроведения,ТаблицаАвансов);
		
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
	
	ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формирует движения регистров выпуска продукции  иуслуг
//
Процедура ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам)

	ДвиженияВыпускПродукцииУслугБУ = Движения.ВыпускПродукцииУслугБухгалтерскийУчет;
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	ТаблицаДвиженийВыпускБУ.Очистить();

	ПроводкиБУ  = Движения.Типовой;
	
	Если  СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		
		ДвиженияВыпускПродукцииУслугНУ = Движения.ВыпускПродукцииУслугНалоговыйУчет;
		ТаблицаДвиженийВыпускНУ        = ДвиженияВыпускПродукцииУслугНУ.Выгрузить();
		ТаблицаДвиженийВыпускНУ.Очистить();
		
		ПроводкиНУ  = Движения.Налоговый;
	КонецЕсли;
	               	
	Для каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл

		// Отражение в бухгалтерском регистре выпуска продукции.
		НоваяПроводка = ПроводкиБУ.Добавить();

		НоваяПроводка.Период       = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Организация  = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Сумма        = СтрокаУслуги.СуммаПлановая;
		НоваяПроводка.Содержание   = "Затраты от реализации произв. услуг в план.ценах";
		НоваяПроводка.НомерЖурнала = "";

		НоваяПроводка.СчетДт      = СтрокаУслуги.СчетСписанияСебестоимостиБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ3);        
		
		НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетЗатратБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения" , СтруктураШапкиДокумента.ПодразделениеОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Дт");	
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Кт");
		
		// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
		СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
		
		СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
		
		СтрокаДвижения.СчетЗатрат           = СтруктураШапкиДокумента.СчетЗатратБУ;
		СтрокаДвижения.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		СтрокаДвижения.Подразделение 		= СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
		СтрокаДвижения.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
					
		СтрокаДвижения.СчетСписания      = СтрокаУслуги.СчетСписанияСебестоимостиБУ;
		СтрокаДвижения.СубконтоСписания1 = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ1;
		СтрокаДвижения.СубконтоСписания2 = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ2;
		СтрокаДвижения.СубконтоСписания3 = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ3;
		
		СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
		СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			// Отражение в бухгалтерском регистре выпуска продукции.
			НоваяПроводка = ПроводкиНУ.Добавить();
			
			НоваяПроводка.Период       = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Организация  = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Сумма        = СтрокаУслуги.СуммаПлановая;
			НоваяПроводка.Содержание   = "Затраты от реализации произв. услуг в план.ценах";
			НоваяПроводка.НомерЖурнала = "";
			
			НоваяПроводка.СчетДт      = СтрокаУслуги.СчетСписанияСебестоимостиНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ3);        
			
			НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Подразделения" , СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", НоменклатурнаяГруппа);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);	
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Дт");	
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, "Кт");
			
			// Отражения выпуска в регистре накопления ВыпускПродукцииУслуг
			СтрокаДвижения = ТаблицаДвиженийВыпускНУ.Добавить();
			
			СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
			
			СтрокаДвижения.СчетЗатрат           = СтруктураШапкиДокумента.СчетЗатратНУ;
			СтрокаДвижения.Подразделение        = СтруктураШапкиДокумента.ПодразделениеОрганизации;
			СтрокаДвижения.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
			СтрокаДвижения.ВидУчета             = СтруктураШапкиДокумента.ВидУчетаНУ;
			
			СтрокаДвижения.СчетСписания         = СтрокаУслуги.СчетСписанияСебестоимостиНУ;
			СтрокаДвижения.СубконтоСписания1    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ1;
			СтрокаДвижения.СубконтоСписания2    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ2;
			СтрокаДвижения.СубконтоСписания3    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ3;
			
			СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
			СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;
			
			СтрокаДвижения.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
					
		КонецЕсли;		
	КонецЦикла;
	
	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И  СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда 		
		ДвиженияВыпускПродукцииУслугНУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугНУ.мТаблицаДвижений = ТаблицаДвиженийВыпускНУ;
		ДвиженияВыпускПродукцииУслугНУ.ДобавитьДвижение();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок, РежимПроведения,ТаблицаАвансов)

	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;
	НомерЖурнала   = "";

	//Фиксация выручки и НДС по БУ (проводки)
	
	//Возможны корректировки таблиц при расчетах в у.е.
	ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоУслугам",ТаблицаПоУслугам), Отказ,Заголовок,НомерЖурнала, мУчетнаяПолитикаПоБухгалтерскомуУчету);

	ПроводкиБУ  = Движения.Типовой;
	ПроводкиНУ  = Движения.Налоговый;

	ВыручкаПоБУ = ТаблицаПоУслугам.Скопировать();
	ВыручкаПоБУ.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
						 |СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
						 |СтавкаНДС, СчетУчетаНДСПоРеализации, СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3","Сумма,СуммаБезНДС, СуммаБезНДСВал, СуммаВал, НДС, НДСВал");

	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаТаблицы.СуммаБезНДС;
		Проводка.Содержание   = "Выручка от реализации произв. услуг";
		Проводка.НомерЖурнала = НомерЖурнала;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		//	Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаБезНДСВал;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБезНДС;
			Проводка.Содержание = "Выручка от реализации";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",                СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);			
			
			Проводка.СчетКт      = СтрокаТаблицы.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);				
			
			Если Проводка.СчетКт.Количественный тогда
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;
			КонецЕсли;	
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);

		КонецЕсли;
		     			
		//НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда       
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      	= ДатаДока;
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       	= СтрокаТаблицы.НДС;
			Проводка.Содержание  	= "Выделен НДС";
			Проводка.НомерЖурнала 	= НомерЖурнала;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			//НДС по налоговому учету
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      	= ДатаДока;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       	= СтрокаТаблицы.НДС;
				ПроводкаНУ.Содержание  	= "Выделен НДС";
				ПроводкаНУ.НомерЖурнала = НомерЖурнала;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
						
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);		
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

	//сформируем движения для регистра "Реализация ТМЗ"
	ТаблицаВыручкиРеализацияТМЗ = ТаблицаПоУслугам.Скопировать();
	ТаблицаВыручкиРеализацияТМЗ.Свернуть("Номенклатура","Сумма, Количество, НДС");
	Для Каждого СтрокаРеализации ИЗ ТаблицаВыручкиРеализацияТМЗ Цикл
			
		ДвижениеРеализации = Движения.РеализацияТМЗ.Добавить();
			
		ДвижениеРеализации.Период = ДатаДока;
			
		// записываем измерения
		ДвижениеРеализации.Организация 				= СтруктураШапкиДокумента.Организация;
		ДвижениеРеализации.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		ДвижениеРеализации.СчетУчета 				= ПланыСчетов.Типовой.ПустаяСсылка();
		ДвижениеРеализации.Номенклатура 			= СтрокаРеализации.Номенклатура;
		ДвижениеРеализации.Склад 					= Справочники.Склады.ПустаяСсылка();
		ДвижениеРеализации.Партия 					= Неопределено;
		ДвижениеРеализации.ДоговорКонтрагента 		= СтруктураШапкиДокумента.ДоговорКонтрагента;
			
		//записываем ресурсы
		ДвижениеРеализации.Сумма 	  = СтрокаРеализации.Сумма;
		ДвижениеРеализации.НДС 		  = СтрокаРеализации.НДС;
		ДвижениеРеализации.Стоимость  = 0;
		ДвижениеРеализации.Количество = СтрокаРеализации.Количество;
			
	КонецЦикла;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ФормированиеПроводокПоОтражениюВыручкиИНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, Знач ТаблицаДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТаблицаДокумента, "Услуги", Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

#Если Клиент Тогда 
	 
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Номер,
	|	АктОбОказанииПроизводственныхУслуг.Дата,
	|	АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК Основание,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Получатель,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Поставщик,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.СтруктурноеПодразделение,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС,
	|	АктОбОказанииПроизводственныхУслуг.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент
	|";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОбОказанииПроизводственныхУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "", глСписокПрефиксовУзлов, Истина);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

    Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
        ОбластьСтроки.Параметры.Товар 		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар),СокрЛП(СтрокаТабличнойЧасти.Товар),СтрокаТабличнойЧасти.Номенклатура);
		
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если НЕ (СуммаНДС = 0) Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		
	
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Если БанковскийСчетОрганизации.Пустая() Тогда	
		СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
	Иначе
		СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата, ,БанковскийСчетОрганизации);
	КонецЕсли;	
	
	ОбластьМакета.Параметры.Организация              		= СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.ПредставлениеРНН_БИНОрганизации = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Шапка.Дата);
	ОбластьМакета.Параметры.АдресОрганизации         		= СведенияОбОрганизации.ЮридическийАдрес;
	ОбластьМакета.Параметры.РасчетныйСчетОрганизации 		= "" + СведенияОбОрганизации.НомерСчета + " в " + СведенияОбОрганизации.Банк + " ," 
	+ СведенияОбОрганизации.АдресБанка;
	
	ОбластьМакета.Параметры.БИКОрганизации           		= СведенияОбОрганизации.БИК;													 
	Если ЗначениеЗаполнено(Шапка.Ответственный) Тогда 
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный, Шапка.Дата);
		ОбластьМакета.Параметры.ДолжностьОтветственного     = ДанныеМОЛ.Должность;
		ОбластьМакета.Параметры.ФИООтветственного           = ДанныеМОЛ.Представление;
	КонецЕсли;

	СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета.Параметры.Контрагент               		= СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.ПредставлениеРНН_БИНКонтрагента = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Шапка.Дата);
	ОбластьМакета.Параметры.АдресКонтрагента         		= СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.РасчетныйСчетКонтрагента 		= "" + СведенияОПокупателе.НомерСчета + " в " + СведенияОПокупателе.Банк + " ," 
	                                                 		+ СведенияОПокупателе.АдресБанка;
													 
   	ОбластьМакета.Параметры.БИККонтрагента           		= СведенияОПокупателе.БИК;	

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция формирует табличный документ унифицированной формы Р-1
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме Р-1.
//
Функция ПечатьР1()

	ЗапросДок = Новый Запрос;
	ЗапросДок.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДок.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктОбОказанииПроизводственныхУслуг.Номер,
	|	АктОбОказанииПроизводственныхУслуг.Дата,
	|	АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК Основание,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент КАК Заказчик,
	|	АктОбОказанииПроизводственныхУслуг.Организация КАК Исполнитель,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.СтруктурноеПодразделение,
	|	АктОбОказанииПроизводственныхУслуг.СуммаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.ВалютаДокумента,
	|	АктОбОказанииПроизводственныхУслуг.УчитыватьНДС,
	|	АктОбОказанииПроизводственныхУслуг.СуммаВключаетНДС,
	|	АктОбОказанииПроизводственныхУслуг.Ответственный.ФизЛицо КАК Ответственный,
	|	АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	АктОбОказанииПроизводственныхУслуг.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода,
	|	АктОбОказанииПроизводственныхУслуг.ДатаОкончанияОтчетногоПериода КАК ДатаОкончанияОтчетногоПериода,
	|	АктОбОказанииПроизводственныхУслуг.ПереченьДокументации КАК ПереченьДокументации
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент";
	Док = ЗапросДок.Выполнить().Выбрать();
	Док.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(АктОбОказанииПроизводственныхУслугУслуги.НомерСтроки) КАК НомерСтроки,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код КАК УслугаКод,
	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.Количество) КАК Количество,
	|	АктОбОказанииПроизводственныхУслугУслуги.Цена,
	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код,
	|	АктОбОказанииПроизводственныхУслугУслуги.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	ОБЩИЕ";
	
	
	ВыборкаСтрокУслугиИтоги = ЗапросУслуги.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаСтрокУслугиИтоги.Следующий();
	
	ВыборкаСтрокУслуги = ВыборкаСтрокУслугиИтоги.Выбрать();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("Р1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	Запасы 			 = Макет.ПолучитьОбласть("Запасы");
	Подвал			 = Макет.ПолучитьОбласть("Подвал");	
			
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Р1";

	////////////////////////////////////////////////////////////////////////
		
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-исполнитель
	ПредставлениеИсполнителя				 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеИсполнителя = ПредставлениеИсполнителя;
	Шапка.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	// Организация-сдатчик
	СведенияОбОрганизацииЗаказчике 		   = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Заказчик, Док.Дата);
	ПредставлениеЗаказчика				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеЗаказчика = ПредставлениеЗаказчика;
	Шапка.Параметры.КонтрагентРНН_БИН	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	// Номер, Дата
	Шапка.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=Д");
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов); 
	
	// Договор 
	Шапка.Параметры.ДокументОснование = Док.Основание;
	
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	ИтогоКоличество = 0;
	ИтогоСуммаНДС 	= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоСумма 		= 0;
	
	НомерСтроки = 1;
	
	УчитыватьНДС_     = Док.УчитыватьНДС;
	СуммаВключаетНДС_ = Док.СуммаВключаетНДС;

	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		Количество = ВыборкаСтрокУслуги.Количество;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
		
		Если УчитыватьНДС_ И НЕ СуммаВключаетНДС_ Тогда 
			
			СтрокаТаблицы.Параметры.Цена = Окр((ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС) / ВыборкаСтрокУслуги.Количество, 2) ;

			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
		Иначе 
			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;

			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
		КонецЕсли;

		СтрокаТаблицы.Параметры.НомерПП 					 = НомерСтроки;
		СтрокаТаблицы.Параметры.Наименование				 = ?(ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное),ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное,ВыборкаСтрокУслуги.Номенклатура);
		СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаСтрокУслуги.ЕдиницаИзмерения;

		ИтогоКоличество = ИтогоКоличество + Количество;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Итого.Параметры.ИтогоСумма 	    = ИтогоСумма;
	Итого.Параметры.ИтогоКоличество = ИтогоКоличество;
	
    ТабДокумент.Вывести(Итого);
    	
	// Запасы
	Запасы.Параметры.Заполнить(Док);
	ТабДокумент.Вывести(Запасы);
	
	//Подвал
	Если ЗначениеЗаполнено(Док.Ответственный) Тогда 
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный, Док.Дата);
		Подвал.Параметры.ДолжностьОтветственного = ДанныеМОЛ.Должность;
		Подвал.Параметры.ФИООтветственного       = ДанныеМОЛ.Представление;
	КонецЕсли;
	Подвал.Параметры.ДатаПринятия                = Формат(Док.Дата, "ДЛФ=Д");
	
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьР1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если  ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
	ИначеЕсли ИмяМакета = "Р1" Тогда
		ТабДокумент = ПечатьР1();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Акт,Р1", "Акт об оказании услуг", "Р-1 (акт выполненных работ)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры //ПриЗаписи

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	ВедениеУчетаВременныхРазницБалансовымМетодом   =  ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 			ВедениеУчетаВременныхРазницБалансовымМетодом);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"          , "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ПодразделениеОрганизации", "ПодразделениеОрганизации", "ПодразделениеОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
                	
	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        		 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              		 , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          		 , "Количество");
	СтруктураПолей.Вставить("Сумма"               		 , "Сумма");
	СтруктураПолей.Вставить("Цена"                		 , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           		 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 		 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         		 , "НомерСтроки");
	СтруктураПолей.Вставить("СчетДоходовБУ"       		 , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");	
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ3", "СубконтоСписанияСебестоимостиБУ3");
	
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"    		  , "СубконтоДоходовБУ1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"    		  , "СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"    		  , "СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СчетДоходовНУ"       			  , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиНУ"     , "СчетСписанияСебестоимостиНУ");	
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ3", "СубконтоСписанияСебестоимостиНУ3");
	
	СтруктураПолей.Вставить("СубконтоДоходовНУ1"    		  , "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2"    		  , "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3"    		  , "СубконтоДоходовНУ3");
	
	СтруктураПолей.Вставить("СуммаПлановая"      			  , "СуммаПлановая");
	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"        , "СчетУчетаНДСПоРеализации");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации"        , "НДСВидОперацииРеализации");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);

	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	////Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);	
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;		
	
	Если Не Отказ Тогда			
		ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);						
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

//Предопределенная процедура обработки заполнения документа
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;	
КонецПроцедуры

мВалютаРегламентированногоУчета 			  = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 		  = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();