Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ОценкаИспытательногоСрока") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			// Заполнение табличной части								 
			Для Каждого ТекСтрокаКандидаты Из Основание.Работники Цикл
				Если НЕ ТекСтрокаКандидаты.Решение Тогда

					НоваяСтрока                     = Работники.Добавить();
					НоваяСтрока.Сотрудник           = ТекСтрокаКандидаты.Сотрудник;
					НоваяСтрока.ФизЛицо             = ТекСтрокаКандидаты.ФизЛицо;
					НоваяСтрока.ДатаУвольнения      = ТекСтрокаКандидаты.ДатаПринятияРешения;
					НоваяСтрока.ПричинаУвольнения   = Справочники.ОснованияУвольнения.НеПрошелИспытательныйСрок;

				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		НоваяСтрока = Работники.Добавить();
		НоваяСтрока.Сотрудник = Основание;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаУвольнения) Тогда
			НоваяСтрока.ДатаУвольнения = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПричинаУвольнения) Тогда
			НоваяСтрока.ПричинаУвольнения = Справочники.ОснованияУвольнения.ПоСобственномуЖеланию;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснование = Основание;

КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	УвольнениеПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	ТабДокумент = УвольнениеПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,"Увольнение "));

КонецФункции // Печать()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по всем местам работы физлица во всех организациях
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоМестамРаботыРаботника(ВыборкаПоШапкеДокумента,Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("МассивФизЛиц", Работники.ВыгрузитьКолонку("ФизЛицо"));
	
   	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаУвольнения
	//		для выполнения движений и проверки "Работает ли работник на дату увольнения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо".

	// Вторая часть запроса - вид строки запроса "НачисленияРаботников" и "УдержанияРаботников" - выборка открытых начислений и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботники по регистрам ПлановыеНачисленияРаботников и ПлановыеУдержанияРаботников выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения с основного места работы.

	//
	// Третья часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату увольнения ищем движения в регистре "РегистрСведенийРаботники" 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.ФизЛицо,
	|	ТЧРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	ТЧРаботники.ДатаУвольнения,
	|	ТЧРаботники.ПричинаУвольнения,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ПрежнийГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчетаИзмерение,
	|	NULL КАК ВидРасчетаРесурс,
	|	NULL КАК ДокументОснованиеРасчета,
	|	NULL КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	|		ИЗ
	|			Документ.Увольнение.Работники КАК ТЧРаботники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.ФизЛицо И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаУвольнения
	|		
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	|		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.ФизЛицо И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.Увольнение.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка) И ТЧРаботники.ФизЛицо = ТЧРаботники2.ФизЛицо И ТЧРаботники.НомерСтроки > ТЧРаботники2.НомерСтроки
	|		
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокВидовРасчета.ВидСтрокиЗапроса,
	|	ТЧРаботники.НомерСтроки,
	|	ТЧРаботники.ФизЛицо,
	|	ТЧРаботники.ФизЛицо.Наименование,
	|	ТЧРаботники.ДатаУвольнения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчетаИзмерение,
	|	СписокВидовРасчета.ВидРасчетаРесурс,
	|	СписокВидовРасчета.ДокументОснование,
	|	NULL
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			""НачисленияРаботников"" КАК ВидСтрокиЗапроса,
	|			НачисленияРаботников.ФизЛицо КАК ФизЛицо,
	|			НачисленияРаботников.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|			НачисленияРаботников.ВидРасчета КАК ВидРасчетаРесурс,
	|			NULL КАК ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеНачисленияРаботников КАК НачисленияРаботников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					НачисленияРаботников.ФизЛицо КАК Физлицо,
	|					НачисленияРаботников.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|					МАКСИМУМ(НачисленияРаботников.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.Увольнение.Работники КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботников КАК НачисленияРаботников
	|						ПО Док.ФизЛицо = НачисленияРаботников.ФизЛицо И Док.ДатаУвольнения >= НачисленияРаботников.Период И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					НачисленияРаботников.ФизЛицо,
	|					НачисленияРаботников.ВидРасчетаИзмерение) КАК ДатыНачислений
	|				ПО НачисленияРаботников.Период = ДатыНачислений.ДатаИзмененияРеквизитов И НачисленияРаботников.ФизЛицо = ДатыНачислений.Физлицо И НачисленияРаботников.ВидРасчетаИзмерение = ДатыНачислений.ВидРасчетаИзмерение И (НачисленияРаботников.Действует)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""УдержанияРаботников"",
	|			УдержанияРаботников.ФизЛицо,
	|			УдержанияРаботников.ВидРасчета,
	|			NULL,
	|			УдержанияРаботников.ДокументОснование
	|		ИЗ
	|			РегистрСведений.ПлановыеУдержанияРаботников КАК УдержанияРаботников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					УдержанияРаботников.ФизЛицо КАК Физлицо,
	|					УдержанияРаботников.ВидРасчета КАК ВидРасчета,
	|					УдержанияРаботников.ДокументОснование КАК ДокументОснование,
	|					МАКСИМУМ(УдержанияРаботников.Период) КАК ДатаИзмененияРеквизитов
	|				ИЗ
	|					Документ.Увольнение.Работники КАК Док
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботников КАК УдержанияРаботников
	|						ПО Док.ФизЛицо = УдержанияРаботников.ФизЛицо И Док.ДатаУвольнения >= УдержанияРаботников.Период И (Док.Ссылка = &ДокументСсылка)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					УдержанияРаботников.ФизЛицо,
	|					УдержанияРаботников.ВидРасчета,
	|					УдержанияРаботников.ДокументОснование) КАК ДатыУдержаний
	|				ПО УдержанияРаботников.Период = ДатыУдержаний.ДатаИзмененияРеквизитов И УдержанияРаботников.ФизЛицо = ДатыУдержаний.Физлицо И УдержанияРаботников.ВидРасчета = ДатыУдержаний.ВидРасчета И УдержанияРаботников.ДокументОснование = ДатыУдержаний.ДокументОснование И (УдержанияРаботников.Действует)) КАК СписокВидовРасчета
	|		ПО СписокВидовРасчета.ФизЛицо = ТЧРаботники.ФизЛицо
	|
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботники.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор
	|ИЗ
	|	Документ.Увольнение.Работники КАК ТЧРаботники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегистрСведенийРаботники.Период КАК Период,
	|			РегистрСведенийРаботники.ФизЛицо КАК ФизЛицо,
	|			РегистрСведенийРаботники.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрСведений.Работники КАК РегистрСведенийРаботники
	|		
	|		ГДЕ
	|			РегистрСведенийРаботники.ФизЛицо В(&МассивФизЛиц)) КАК КонфликтныеДвижения
	|		ПО КонфликтныеДвижения.ФизЛицо = ТЧРаботники.ФизЛицо И (КонфликтныеДвижения.Период = ДОБАВИТЬКДАТЕ(ТЧРаботники.ДатаУвольнения, ДЕНЬ, 1))
	|
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда

		// ФизЛицо
		ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
		Если Не ЕстьФизЛицо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаУвольнения
		ЕстьДатаУвольнения = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если Не ЕстьДатаУвольнения Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьФизЛицо и ЕстьДатаУвольнения Тогда

			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " еще не принят на работу!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли; 

			// физлицо указан дважды
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	

		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();

	СтруктураПроведенияПоРегистрамСведений.Вставить("Работники");
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботников");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботников");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаМестРаботы, 
	
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналу)
	
	Если ВыборкаМестРаботы.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "Работники";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаМестРаботы.ФизЛицо;
			
			// Ресурсы
			Движение.Подразделение				= ВыборкаМестРаботы.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаМестРаботы.ПрежняяДолжность;
			Движение.ГрафикРаботы				= ВыборкаМестРаботы.ПрежнийГрафикРаботы;
			// не записываем значения для этих ресурсов:
			
			// Реквизиты
			Движение.ПричинаИзмененияСостояния  = Перечисления.ПричиныИзмененияСостояния.Увольнение;
			Движение.ПричинаУвольнения			= ВыборкаМестРаботы.ПричинаУвольнения;
			
		КонецЕсли; 
		
		УчетРасходовНаПерсоналПереопределяемый.ДополнитьДвиженияСведениямиДляУпрУчета(Движения, ВыборкаМестРаботы, ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток, "");
		
		ИмяРегистра = "СостояниеРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период                     = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаМестРаботы.ФизЛицо;

			// Ресурсы
			Движение.Состояние                  = Перечисления.СостоянияРаботника.НеРаботает;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаМестРаботы.ВидСтрокиЗапроса = "НачисленияРаботников" Тогда
		
		ИмяРегистра = "ПлановыеНачисленияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаМестРаботы.ФизЛицо;
			Движение.ВидРасчетаИзмерение        = ВыборкаМестРаботы.ВидРасчетаИзмерение;
			
			// Ресурсы
			Движение.ВидРасчета					= ВыборкаМестРаботы.ВидРасчетаРесурс;
			Движение.Действует					= Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли ВыборкаМестРаботы.ВидСтрокиЗапроса = "УдержанияРаботников" Тогда
		
		ИмяРегистра = "ПлановыеУдержанияРаботников";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                     = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаМестРаботы.ФизЛицо;
			Движение.ВидРасчета                 = ВыборкаМестРаботы.ВидРасчетаИзмерение;
			Движение.ДокументОснование          = ВыборкаМестРаботы.ДокументОснованиеРасчета;
			
			// Ресурсы
			Движение.Действует					= Ложь;
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеРабочиеМеста");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаМестРаботы, 
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")
	
	Если ВыборкаМестРаботы.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "ЗанятыеРабочиеМеста";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период                 = ВыборкаМестРаботы.ДатаУвольнения + мДлинаСуток;
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Подразделение 		   	= ВыборкаМестРаботы.ПрежнееПодразделение;
			Движение.Должность			   	= ВыборкаМестРаботы.ПрежняяДолжность;
			
			// Ресурсы
			Движение.Количество		      	= ВыборкаМестРаботы.ПрежняяСтавка;
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

		// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	УчетнаяПолитикаПоПерсоналу = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу");

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоМестамРаботыРаботника(ВыборкаПоШапкеДокумента, Режим);
    	    ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботники.Следующий() Цикл 
				
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамНакопления);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналу);
				КонецЕсли; 
				
			КонецЦикла;
 		КонецЕсли; 

	КонецЕсли;

	УвольнениеПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);

КонецПроцедуры

мДлинаСуток = 86400;
