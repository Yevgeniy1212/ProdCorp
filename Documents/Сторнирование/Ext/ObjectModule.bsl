////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мСтараяПометкаУдаления;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Процедура выполняет сторнирование движений переданного документа
//
Процедура ВыполнитьСторнированиеДвижений(Основание) 

	// скопируем все движения
	ДвиженияДокументаОснования = Основание.Метаданные().Движения;
	ДвиженияСторно = Метаданные().Движения;
	
	Для Каждого МетаданныеРегистр Из ДвиженияДокументаОснования Цикл
	    // - КУФИБ - начало
		Если НЕ ПравоДоступа("Изменение",МетаданныеРегистр) Тогда
			Продолжить; 
		КонецЕсли;
		// - КУФИБ - конец
	
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
			// регистры сведений не сторнируем
			Продолжить; 
		КонецЕсли;	
		
		Если Не ДвиженияСторно.Содержит(МетаданныеРегистр) Тогда
			// регистр не сторнируется
			Продолжить;
		КонецЕсли;
		
		Попытка
			НаборЗаписей = Движения[МетаданныеРегистр.Имя];
			ЗаполнитьНаборЗаписей(НаборЗаписей, МетаданныеРегистр);
		Исключение
			Сообщить("Ошибка при чтении данных регистра " + МетаданныеРегистр.Имя + ": " + ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьСторнированиеДвижений()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение документа по переданному основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если Не Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = Основание;

	// установим дату создаваемого документа началом текущего дня как она будет при создании нового в форме
	// чтобы сторнировочные движения сразу писать на нужную дату
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
    ВыполнитьСторнированиеДвижений(Основание);
	
КонецПроцедуры // ЗаполнитьПоДокументуОснования()


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются.
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл
		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно()

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются.
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	Если МетаданныеОбъект.Корреспонденция Тогда

		Движение.СчетДт = Строка.СчетДт;
		Движение.СчетКт = Строка.СчетКт;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл

			Если ВыборкаСубконто.Предопределенный Тогда

				Если Строка.СубконтоДт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоДт[ВыборкаСубконто.Ссылка] = Строка.СубконтоДт[ВыборкаСубконто.Ссылка];
				КонецЕсли;
				
				Если Строка.СубконтоКт[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.СубконтоКт[ВыборкаСубконто.Ссылка] = Строка.СубконтоКт[ВыборкаСубконто.Ссылка];
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Движение.Счет   = Строка.Счет;

		ВыборкаСубконто = ПланыВидовХарактеристик[МетаданныеОбъект.ПланСчетов.ВидыСубконто.Имя].Выбрать();
		Пока ВыборкаСубконто.Следующий() Цикл
			Если ВыборкаСубконто.Предопределенный Тогда
				Если Строка.Субконто[ВыборкаСубконто.Ссылка] <> Неопределено Тогда
					Движение.Субконто[ВыборкаСубконто.Ссылка] = Строка.Субконто[ВыборкаСубконто.Ссылка];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// измерения
	Для Каждого МДОбъект из МетаданныеОбъект.Измерения Цикл

		Если МетаданныеОбъект.Корреспонденция Тогда
			Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
				Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
			Иначе
				Движение[МДОбъект.Имя + "Дт"] = Строка[МДОбъект.Имя + "Дт"];
				Движение[МДОбъект.Имя + "Кт"] = Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;
		Иначе
		КонецЕсли;

	КонецЦикла;

	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено И МДОбъект.Балансовый Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// реквизиты
	Для Каждого МДОбъект из МетаданныеОбъект.Реквизиты Цикл

		Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

// Заполняет набор записей по указанному регистру сторнирующими движениями.
//
Процедура ЗаполнитьНаборЗаписей(ЗаполняемыйНаборЗаписей, МетаданныеРегистр) Экспорт

	ЭтоРегистрРасчета     = Ложь;
	ЭтоРегистрБухгалтерии = Ложь;
	ЭтоРегистрНакопления  = Ложь;

	Если ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыРасчета", МетаданныеРегистр) Тогда
		ЭтоРегистрРасчета     = Истина;
		НаборЗаписей          = РегистрыРасчета[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
		Периодичность		  = МетаданныеРегистр.Периодичность;
		ПериодРегистрации	  = Дата;
		
	ИначеЕсли ОбщегоНазначения.ПринадлежностьКлассуМетаданных("РегистрыБухгалтерии", МетаданныеРегистр) Тогда
		ЭтоРегистрБухгалтерии = Истина;
		НаборЗаписей          = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	Иначе
		ЭтоРегистрНакопления  = Истина;
		НаборЗаписей          = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
	КонецЕсли;
	// -куфиб- начало
	ЭтоИсполнениеБюджетов = ЭтоРегистрНакопления И (МетаданныеРегистр.Имя="фин_ОборотыБюджетов" ИЛИ Найти(МетаданныеРегистр.Имя,"фин_ФактическиеОборотыБюджетов")<>0);
	Если ЭтоИсполнениеБюджетов Тогда
		СторнированиеИсполненияБюджетовВПериодеВводаСторно = Ложь;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних.СторнированиеИсполненияБюджетовВПериодеВводаСторно
			|ИЗ
			|	РегистрСведений.фин_УчетнаяПолитикаПоБюджетированию.СрезПоследних(&Дата, ) КАК фин_УчетнаяПолитикаПоБюджетированиюСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СторнированиеИсполненияБюджетовВПериодеВводаСторно = ВыборкаДетальныеЗаписи.СторнированиеИсполненияБюджетовВПериодеВводаСторно;
		КонецЦикла;
	
	Иначе
		СторнированиеИсполненияБюджетовВПериодеВводаСторно = Ложь;
	КонецЕсли;
	// -куфиб- конец
	
	
	ОтражениеПоПериодуРегистрации = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", ДокументОснование.Метаданные()) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамПериодРегистрации", 	Дата);
		Запрос.УстановитьПараметр("парамОрганизация",   ДокументОснование.Организация);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
		|		&парамПериодРегистрации,
		|		Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОтражениеПоПериодуРегистрации = Выборка.ОтражениеПоПериодуРегистрации;
		КонецЕсли;	
	КонецЕсли;

	НаборЗаписей.Отбор.Регистратор.Значение = ДокументОснование;
	НаборЗаписей.Прочитать();

	Для Каждого ДвижениеСторнируемое Из НаборЗаписей Цикл

		// реквизиты
		Если ЭтоРегистрРасчета Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);

			ДвижениеСторно.ПериодРегистрации = Дата;
			ДвижениеСторно.ВидРасчета        = ДвижениеСторнируемое.ВидРасчета;
			ДвижениеСторно.Сторно            = Истина;

			Если МетаданныеРегистр.ПериодДействия Тогда
				ДвижениеСторно.ПериодДействияНачало = ДвижениеСторнируемое.ПериодДействияНачало;
				ДвижениеСторно.ПериодДействияКонец  = ДвижениеСторнируемое.ПериодДействияКонец;
			КонецЕсли;

			Если МетаданныеРегистр.БазовыйПериод Тогда
				ДвижениеСторно.БазовыйПериодНачало = ДвижениеСторнируемое.БазовыйПериодНачало;
				ДвижениеСторно.БазовыйПериодКонец  = ДвижениеСторнируемое.БазовыйПериодКонец;
			КонецЕсли;

		ИначеЕсли ЭтоРегистрБухгалтерии Тогда

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();
			
			ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			ДвижениеСторно.Период = Дата;

		Иначе

			ДвижениеСторно = ЗаполняемыйНаборЗаписей.Добавить();

			ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			// -куфиб- начало
			Если ЭтоИсполнениеБюджетов И СторнированиеИсполненияБюджетовВПериодеВводаСторно Тогда
				ДвижениеСторно.ПериодПланирования = Дата;
			КонецЕсли;
			// -куфиб- конец
			
			Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ДвижениеСторно.ВидДвижения = ДвижениеСторнируемое.ВидДвижения
			КонецЕсли;
			
			Если МетаданныеРегистр.Имя = "ИПНСведенияОДоходах" 
					Или МетаданныеРегистр.Имя = "ОПВСведенияОДоходах"
					Или МетаданныеРегистр.Имя = "СНСведенияОДоходах"
					//++ЗУП
					Или МетаданныеРегистр.Имя = "ВОСМССведенияОДоходах" 
					Или МетаданныеРегистр.Имя = "ООСМССведенияОДоходах" 
					Или МетаданныеРегистр.Имя = "ОППВСведенияОДоходах"
					Или МетаданныеРегистр.Имя = "ОПВРСведенияОДоходах"
					//--ЗУП
					Или МетаданныеРегистр.Имя = "СОСведенияОДоходах" Тогда
				Если ОтражениеПоПериодуРегистрации Тогда
					ДвижениеСторно.Период = НачалоМесяца(Дата);
					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Дата);
				Иначе
					ДвижениеСторно.Период = НачалоМесяца(ДвижениеСторнируемое.Период);
					ДвижениеСторно.ПериодРегистрации = НачалоМесяца(Дата);
				КонецЕсли;
			ИначеЕсли МетаданныеРегистр.Имя = "ВыплаченныеДоходыРаботникамОрганизацийНУ" Тогда
				Если ОтражениеПоПериодуРегистрации Тогда
					ДвижениеСторно.Период = НачалоМесяца(Дата);
					ДвижениеСторно.МесяцНалоговогоПериода = НачалоМесяца(Дата);
				Иначе
					ДвижениеСторно.Период = НачалоМесяца(Дата);
					ДвижениеСторно.МесяцНалоговогоПериода = ДвижениеСторнируемое.МесяцНалоговогоПериода;
				КонецЕсли;
			ИначеЕсли МетаданныеРегистр.Имя = "СведенияСчетовФактурВыданных" ИЛИ МетаданныеРегистр.Имя = "СведенияСчетовФактурПолученных" Тогда				
					ДвижениеСторно.Период = ДвижениеСторнируемое.Период;								
			ИначеЕсли МетаданныеРегистр.Имя = "РабочееВремяРаботниковОрганизаций"   Тогда
				ДвижениеСторно.Период = ДвижениеСторнируемое.Период;
			Иначе
				ДвижениеСторно.Период = Дата;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьНаборЗаписей()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);	
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// прочитаем флаг пометки удаления, сохранный в базе (до изменения)
	мСтараяПометкаУдаления = Ссылка.ПометкаУдаления;
    УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураВыданный");
КонецПроцедуры // ПередЗаписью()


// Процедура - обработчик события "ПриЗаписи" 
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
		
	Если ПометкаУдаления <> мСтараяПометкаУдаления Тогда // поменялся признак пометки удаления у документа

		Если ПометкаУдаления Тогда // пометили на удаление

			// удалим движения документа из регистров
			ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
			
		Иначе // восстановили помеченный на удаление документ - заново заполним сторно-движения
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				
				ВыполнитьСторнированиеДвижений(ДокументОснование);	
			
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
	
КонецПроцедуры // ПриЗаписи()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("С1", "С-1 (Бухгалтерская справка)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой бухгалтерской справки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма бухгалтерской справки.
//
Функция ПечатьБухгалтерскойСправки()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб				= Истина;
	ТабДокумент.ПолеСверху				= 10;
	ТабДокумент.ПолеСлева				= 0;
	ТабДокумент.ПолеСнизу				= 0;
	ТабДокумент.ПолеСправа				= 0;
	ТабДокумент.РазмерКолонтитулаСверху	= 10;
	ТабДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати		= "ПАРАМЕТРЫ_ПЕЧАТИ_Сторнирование_БухгалтерскаяСправка";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сторнирование.Ссылка КАК Ссылка,
	               |	Сторнирование.Номер,
	               |	Сторнирование.Ответственный,
	               |	Сторнирование.Дата
	               |ИЗ
	               |	Документ.Сторнирование КАК Сторнирование
	               |ГДЕ
	               |	Сторнирование.Ссылка = &Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	               |	ТиповойДвиженияССубконто.СчетДт,
	               |	ТиповойДвиженияССубконто.СтруктурноеПодразделениеДт,
	               |	ТиповойДвиженияССубконто.СубконтоДт1,
	               |	ТиповойДвиженияССубконто.СубконтоДт2,
	               |	ТиповойДвиженияССубконто.СубконтоДт3,
	               |	ТиповойДвиженияССубконто.СчетКт,
	               |	ТиповойДвиженияССубконто.СтруктурноеПодразделениеКт,
	               |	ТиповойДвиженияССубконто.СубконтоКт1,
	               |	ТиповойДвиженияССубконто.СубконтоКт2,
	               |	ТиповойДвиженияССубконто.СубконтоКт3,
	               |	ТиповойДвиженияССубконто.Организация,
	               |	ТиповойДвиженияССубконто.ВалютаДт,
	               |	ТиповойДвиженияССубконто.ВалютаКт,
	               |	ТиповойДвиженияССубконто.Сумма,
	               |	ТиповойДвиженияССубконто.КоличествоДт,
	               |	ТиповойДвиженияССубконто.КоличествоКт,
	               |	ТиповойДвиженияССубконто.Содержание,
	               |	ТиповойДвиженияССубконто.Регистратор,
	               |	ВЫБОР
	               |		КОГДА ТиповойДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ТиповойДвиженияССубконто.СубконтоДт1.БазоваяЕдиницаИзмерения
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТиповойДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ТиповойДвиженияССубконто.СубконтоДт2.БазоваяЕдиницаИзмерения
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТиповойДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Номенклатура
	               |							ТОГДА ТиповойДвиженияССубконто.СубконтоДт3.БазоваяЕдиницаИзмерения
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК БазоваяЕдиницаИзмеренияДт,
	               |	ВЫБОР
	               |		КОГДА ТиповойДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ТиповойДвиженияССубконто.СубконтоКт1.БазоваяЕдиницаИзмерения
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТиповойДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ТиповойДвиженияССубконто.СубконтоКт2.БазоваяЕдиницаИзмерения
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ТиповойДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура
	               |							ТОГДА ТиповойДвиженияССубконто.СубконтоКт3.БазоваяЕдиницаИзмерения
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК БазоваяЕдиницаИзмеренияКт
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ТиповойДвиженияССубконто
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Выборка = Запрос.ВыполнитьПакет();
	ВыборкаШапка = Выборка[0].Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Зададим параметры макета по умолчанию
		ТабДокумент.РазмерКолонтитулаСверху = 0;
		ТабДокумент.РазмерКолонтитулаСнизу  = 0;
		ТабДокумент.АвтоМасштаб             = Истина;
		ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
		
		Макет = ПолучитьОбщийМакет("С1");
		// Получаем области макета для вывода в табличный документ.
		ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
		
		// Выведем шапку документа.
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение);
		СведенияОбОрганизации 		  = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаШапка.Дата);
		
		ШапкаДокумента.Параметры.ПредставлениеОрганизации	= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ШапкаДокумента.Параметры.НомерДокумента				= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов);
		ШапкаДокумента.Параметры.ДатаСоставления			= Формат(ВыборкаШапка.Дата, "ДЛФ=D");
		
		ШапкаДокумента.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, ВыборкаШапка.Дата, "ru");
		
		ТабДокумент.Вывести(ШапкаДокумента);
		
		// Выведем заголовок таблицы.
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		СуммаПоДокументу  = 0;
		КоличествоСтрокВОперации = 0;
		
		ВыборкаДвижений = Выборка[1].Выбрать();

		// Выведем строки документа.
		Пока ВыборкаДвижений.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
			
			АналитикаДт = Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоДт3);
			
			АналитикаКт = Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС
			+ Строка(ВыборкаДвижений.СубконтоКт3);
			
			СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
			СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
			
			СуммаПоДокументу = СуммаПоДокументу + ВыборкаДвижений.Сумма;
			КоличествоСтрокВОперации = КоличествоСтрокВОперации + 1;			
			
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;	
			
		ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		
		Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация,ВыборкаШапка.Дата);
		
		ПодвалДокумента.Параметры.РасшифровкаПодписиРуководитель	= Руководители.Руководитель;
		ПодвалДокумента.Параметры.РасшифровкаПодписиГлавБух			= Руководители.ГлавныйБухгалтер;
		
		ПодвалДокумента.Параметры.ВсегоКорреспонденцийПрописью = ?(КоличествоСтрокВОперации <> 0, ОбщегоНазначения.КоличествоПрописью(КоличествоСтрокВОперации), "");;
				
		ПодвалДокумента.Параметры.СуммаПрописью = ?(СуммаПоДокументу <> 0,ОбщегоНазначения.СформироватьСуммуПрописью(СуммаПоДокументу, Константы.ВалютаРегламентированногоУчета.Получить()), "");		
		
		// Выведем подвал
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ПодвалДокумента) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабДокумент.Вывести(ПодвалДокумента);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьБухгалтерскойСправки()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если ИмяМакета = "С1" Тогда

		ТабДокумент = ПечатьБухгалтерскойСправки();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
