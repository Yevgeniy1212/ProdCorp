// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; 
Перем мДокументОснование       Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";

	Макет = ПолучитьМакет("М11");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Номер КАК НомерДокумента,
	|	ТребованиеНакладная.Дата КАК ДатаДокумента,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.СтруктурноеПодразделение,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатратБУ		КАК СчетЗатратБУ,
	|	ТребованиеНакладная.СубконтоЗатратБУ1 	КАК СубконтоЗатратБУ1,
	|	ТребованиеНакладная.СубконтоЗатратБУ2	КАК СубконтоЗатратБУ2,
	|	ТребованиеНакладная.СубконтоЗатратБУ3	КАК СубконтоЗатратБУ3,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|	ПО ТребованиеНакладная.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок                = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Область.Параметры.КодОКПО                  = СтруктурнаяЕдиницаОрганизация.КодПоОКПО;
	Область.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	Область.Параметры.ДатаСоставления          = Формат(Дата, "ДФ=dd.MM.yy");
	Область.Параметры.Склад                    = Шапка.Склад;
	Область.Параметры.КоррСчет                 = Шапка.СчетЗатратБУ.Код;
	
	Для Счетчик = 1 по 3 Цикл			
		ТекСубконто = Шапка["СубконтоЗатратБУ" + Счетчик];
		Если ЗначениеЗаполнено(ТекСубконто) Тогда
			Если  ТипЗнч(ТекСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Область.Параметры.ПредставлениеПодразделения = ТекСубконто;
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;				

	ТабДокумент.Вывести(Область);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "СчетБУ");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");

	Область = Макет.ПолучитьОбласть("Строка");
	
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();

	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ЭтотОБъект);
    КоличествоОтпущено  = 0;
	СуммаБезНДС         = 0;
	
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Сумма = 0;
			 Цена = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 Область.Параметры.Цена  = Цена;
			 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		 КоличествоОтпущено  = КоличествоОтпущено + СтрокаТЧ.Количество;
	     СуммаБезНДС         = СуммаБезНДС + (Цена * СтрокаТЧ.Количество);

		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "Счет");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");

	
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();

	
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Область.Параметры.Заполнить(СтрокаТЧ);
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 Область.Параметры.Цена = 0;
			 Область.Параметры.Сумма = 0;
			 Цена = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 Область.Параметры.Цена  = Цена;
			 Область.Параметры.Сумма = Цена * СтрокаТЧ.Количество;
		 КонецЕсли;
		 КоличествоОтпущено  = КоличествоОтпущено + СтрокаТЧ.Количество;
	     СуммаБезНДС         = СуммаБезНДС + (Цена * СтрокаТЧ.Количество);				
		 ТабДокумент.Вывести(Область);
		
	КонецЦикла;
	
	//выводим итоги
	
	Область = Макет.ПолучитьОбласть("Итоги");
	Область.Параметры.КоличествоОтпущено = КоличествоОтпущено;
	Область.Параметры.СуммаБезНДС        = СуммаБезНДС;
	ТабДокумент.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Подвал");
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		Область.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
		Область.Параметры.ДолжностьМОЛ = ДанныеМОЛ.Должность;
	КонецЕсли;	
	
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьМ11()
	
// Функция формирует печатную форму документа
//
Функция ПечатьТребованиеНакладная()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Организация,
	| 	СтруктурноеПодразделение,
	|	Склад,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|	ПО ТребованиеНакладная.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Код КАК Код,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Имя,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	|	Количество КАК Количество
	|
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
	
	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_ТН";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("ТребованиеНакладная");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Ссылка, "Требование-накладная", глСписокПрефиксовУзлов);
	Область.Параметры.Заполнить(Шапка);
	Область.Параметры.Организация = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ТабДокумент.Вывести(Область);

	Область = Макет.ПолучитьОбласть(ОбластьШапки);
	
	Если ВыводитьКоды Тогда
		Область.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(Область);

	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НомерТекущий = 1;
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть(ОбластьСтроки);
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.НомерТекущий = НомерТекущий;
		Если ВыводитьКоды Тогда
			Область.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
		КонецЕсли; 
		ТабДокумент.Вывести(Область);
        НомерТекущий = НомерТекущий + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Код КАК Код,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Имя,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	|	Количество КАК Количество
	|
	|ИЗ
	|	Документ.ТребованиеНакладная.МатериалыЗаказчика КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";
	
	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть(ОбластьСтроки);
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Если ВыводитьКоды Тогда
			Область.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
		КонецЕсли; 
		Область.Параметры.НомерТекущий = НомерТекущий;
		ТабДокумент.Вывести(Область);
        НомерТекущий = НомерТекущий + 1;

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		Область.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
	КонецЕсли;	
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()

// Функция формирует табличный документ с печатной формой "З-6" (акт на списание запасов).
	//
Функция ПечатьЗ6()
		
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"	   , Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК ДатаДокумента,
	|	ТребованиеНакладная.Организация,
	|   ТребованиеНакладная.СтруктурноеПодразделение,
	|
	|	ТребованиеНакладная.Склад.Представление КАК СкладПредставление,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследних
	|		ПО ТребованиеНакладная.Склад = ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекДокумент";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ЗапросИнвентаризационнаяКомиссия = Новый Запрос;
	ЗапросИнвентаризационнаяКомиссия.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	ЗапросИнвентаризационнаяКомиссия.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизЛицо,
	|	Председатель
	|ИЗ
	|	Документ.ТребованиеНакладная.ИнвентаризационнаяКомиссия КАК ТребованиеНакладнаяИнвентаризационнаяКомиссия
	|ГДЕ
	|	Ссылка = &ТекДокумент";
	
	ТаблицаИнвентаризационнаяКомиссия = ЗапросИнвентаризационнаяКомиссия.Выполнить().Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",                 "Номенклатура");
	СтруктураПолей.Вставить("ТоварНаименование",            "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");

	ТаблицаМатериалов 		   = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект.Ссылка, "Материалы", СтруктураПолей);
	ТаблицаМатериаловЗаказчика = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект.Ссылка, "МатериалыЗаказчика", СтруктураПолей);

	ВыборкаСтрокТовары 			= ТаблицаМатериалов.Выбрать();
	ВыборкаСтрокТоварыЗаказчика = ТаблицаМатериаловЗаказчика.Выбрать();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);

	Макет = ПолучитьОбщийМакет("З6");

	ТабДокумент = Новый ТабличныйДокумент;

	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_З6";

	//Получим области
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия		 = Макет.ПолучитьОбласть("Комиссия");

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.ОтветственноеЛицо, Док.ДатаДокумента);
	
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДокумента, "ru");

	Шапка.Параметры.НомерДокумента	   = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ШАпка.Параметры.ДатаДок			   = Формат(Док.ДатаДокумента, "ДЛФ=DD");  
	Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
	Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
	Шапка.Параметры.Заполнить(Док);

	ТабДокумент.Вывести(Шапка);

	// вывод заголовка таблицы
	ВалютаПечати 					  = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	// вывод строк таблицы
	КоличествоСтрок = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТоварыЗаказчика.Количество();

	// Инициализация итогов в документе

	ИтогоКоличество = 0;
	ИтогоВсегоСНДС 	= 0;

	ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ЭтотОбъект);
	
	НомерПП = 1;

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
		СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
		
		Кратность 		   = 1;
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			ВсегоСНДС = 0;
			Цена 	  = 0;
		Иначе
			Цена	  = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
		КонецЕсли;
		
		Количество = ВыборкаСтрокТовары.Количество;
		
		СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
		СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
		СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
		СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
		
		ИтогоКоличество	= ИтогоКоличество + Количество;
		ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;
		
		НомерПП = НомерПП + 1;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;

	Пока ВыборкаСтрокТоварыЗаказчика.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТоварыЗаказчика.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТоварыЗаказчика);
		СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТоварыЗаказчика.ТоварНаименование); 
		
		Кратность 		   = 1;
		СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТоварыЗаказчика.Номенклатура, "Номенклатура");
		
		Если СтрокаСуммСписания = Неопределено Тогда
			ВсегоСНДС = 0;
			Цена 	  = 0;
		Иначе
			Цена 	  = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			ВсегоСНДС = Цена * ВыборкаСтрокТоварыЗаказчика.Количество;
		КонецЕсли;
		
		Количество = ВыборкаСтрокТоварыЗаказчика.Количество;
		
		СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
		СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
		СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
		СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
		
		ИтогоКоличество	= ИтогоКоличество + Количество;
		ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;
		
		НомерПП = НомерПП + 1;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;

	// вывод итогов
	Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
	Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");

	ТабДокумент.Вывести(Итого);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	//вывод оборотной стороны
	ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ОборотнаяСторона);

	//Печать данных о комисси
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Материально-ответственное лицо:");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии:");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДокумента);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Комиссия);

	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;


	//Выводим список МОЛ
	//		
	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
	Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
	Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;

	ТабДокумент.Вывести(Комиссия);

	Возврат ТабДокумент;
		
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьТребованиеНакладная();
		
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли ИмяМакета = "З6" Тогда 			
			ТабДокумент = ПечатьЗ6();
			                         	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("М11,Накладная,З6","M-11 (Требование-накладная)","Требование-накладная","З-6 (Акт списания запасов)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетБУ = СчетаУчета.СчетУчетаБУ;
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетБУ = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;

	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТЧ.СчетНУ = СчетаУчета.СчетУчетаНУ;
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Процедура заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
									и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		////
		// Заполнение шапки
		Организация                 = Основание.Организация;
		Склад                       = Основание.Склад;
		ДокументОснование			= Основание.Ссылка;
		
		Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Контрагент              = Основание.Контрагент;
			СтрокаТЧ                = МатериалыЗаказчика;
			СтрокаТабЧасть          = "Материалы заказчика";
		Иначе
			СтрокаТЧ                 = Материалы;
			СтрокаТабЧасть          = "Материалы";

		КонецЕсли;
		
		
		Если СтрокаТЧ.Количество() > 0  Тогда
			#Если Клиент Тогда
				ТекстВопроса = "Очистить табличную часть """ + СтрокаТабЧасть + """ перед заполнением?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтрокаТЧ.Очистить();
				КонецЕсли; 
				#КонецЕсли 			
		КонецЕсли;
		
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       	= ТекСтрокаТовары.Количество;
									
			Если Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, НоваяСтрока.Номенклатура);
				НоваяСтрока.Счет        	= СчетаУчета.СчетУчетаДавСырья;
				НоваяСтрока.СчетПередачи    = СчетаУчета.СчетПередачиЗаб;
			Иначе
				ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, );
				УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрока, "СчетБУ", "СчетНУ", Дата);
		
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент      = ТекСтрокаТовары.Коэффициент;				
				НоваяСтрока.КлючСвязи 		   = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Материалы);	
				
			КонецЕсли;
			// - куфиб - начало
			Если НЕ Основание.ВидОперации  = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда			
				НоваяСтрока.ЗаявкаМТС     	= ТекСтрокаТовары.ЗаявкаМТС;
				НоваяСтрока.Подразделение   = ТекСтрокаТовары.Подразделение;
			КонецЕсли;
			// - куфиб - конец
			
		КонецЦикла;
		
		#Если Клиент Тогда
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
															"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
															СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));

	   #КонецЕсли
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		// Заполнение шапки
		Организация                 = Основание.Организация;
		Склад                       = Основание.СкладПолучатель;
		ДокументОснование			= Основание.Ссылка;
		СтрокаТЧ                    = Материалы;
		СтрокаТабЧасть             = "Материалы";
		
		Если СтрокаТЧ.Количество() > 0  Тогда
			#Если Клиент Тогда
				ТекстВопроса = "Очистить табличную часть """ + СтрокаТабЧасть + """ перед заполнением?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтрокаТЧ.Очистить();
				КонецЕсли; 
				#КонецЕсли 			
		КонецЕсли;   		
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       = ТекСтрокаТовары.Количество;
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, УчитыватьКПН И   (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент      = ТекСтрокаТовары.Коэффициент;     			
			НоваяСтрока.КлючСвязи 		  = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Материалы);
			// - куфиб - начало
			НоваяСтрока.ЗаявкаМТС     	= ТекСтрокаТовары.ЗаявкаМТС;
			НоваяСтрока.Подразделение   = ТекСтрокаТовары.Подразделение;
			// - куфиб - конец
					
		КонецЦикла;
		
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, , , Дата);
		#Если Клиент Тогда
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
															"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
															СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));

	   #КонецЕсли
	КонецЕсли;
	
	Если (ТипЗнч(Основание)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Или (ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"))) Тогда
		
		Организация        = Основание.Организация;
		ДокументОснование  = Основание.Ссылка;
		СчетЗатратБУ       = Основание.СчетЗатратБУ;
		СубконтоЗатратБУ1  = Основание.ПодразделениеОрганизации;
		СубконтоЗатратБУ2  = Основание.НоменклатурнаяГруппа; 
		СубконтоЗатратБУ3  = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
						
		Если ТипЗнч(Основание)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Результат = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "АктОбОказанииПроизводственныхУслуг.Услуги");
		Иначе
			Результат = УправлениеПроизводством.РассчитатьРасходСырьяПоСпецификации(Основание.Ссылка, "ОтчетПроизводстваЗаСмену.Продукция", Номенклатура);
		КонецЕсли;
		
		ТаблицаМатериалов = Результат.Выгрузить();
		ТаблицаМатериалов.Свернуть("Номенклатура,ЕдиницаИзмерения","Количество");

		Если Материалы.Количество() > 0  Тогда
			#Если Клиент Тогда
			ТекстВопроса = "Очистить табличную часть "" Материалы "" перед заполнением?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Материалы.Очистить();
				Материалы.Загрузить(ТаблицаМатериалов);
			Иначе
				
				Для Каждого ТекСтрокаМатериалы Из ТаблицаМатериалов Цикл
					НоваяСтрока = Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаМатериалы);
														
				КонецЦикла;    
			КонецЕсли; 
			#КонецЕсли
		Иначе
			Материалы.Загрузить(ТаблицаМатериалов);
		КонецЕсли;

		
		Для Каждого Стр Из Материалы Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Стр, "Материалы", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			Стр.Коэффициент      = 1;
			Стр.КлючСвязи 		  = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Материалы);

		КонецЦикла;
		
		Если УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, , , Дата);
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СчетЗатратНУ) ТОгда
			СубконтоЗатратНУ1 = Основание.ПодразделениеОрганизации;
			СубконтоЗатратНУ2 = Основание.НоменклатурнаяГруппа; 
			СубконтоЗатратНУ3 = Справочники.СтатьиЗатрат.ПустаяСсылка(); 
		КонецЕсли;		

		#Если Клиент Тогда
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
			глЗначениеПеременной("глТекущийПользователь"),
			Организация, 
			Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
			|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
			"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
			СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));
		#КонецЕсли
		
	КонецЕсли;
	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		// Заполнение шапки
		Комментарий 			= Основание.Комментарий;
		ДокументОснование		= Основание.Ссылка;
		Контрагент 				= Основание.Контрагент;
		Организация 			= Основание.Организация;
		Ответственный 			= Основание.Ответственный;
				
		Если МатериалыЗаказчика.Количество() > 0  Тогда
			#Если Клиент Тогда
			ТекстВопроса = "Очистить табличную часть ""Материалы заказчика"" перед заполнением?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
			Если Ответ = КодВозвратаДиалога.Да Тогда
				МатериалыЗаказчика.Очистить();
			КонецЕсли; 
			#КонецЕсли			
		КонецЕсли;

		Для Каждого ТекСтрокаМатериалыЗаказчика Из Основание.МатериалыЗаказчика Цикл
			НоваяСтрока = МатериалыЗаказчика.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаМатериалыЗаказчика.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаМатериалыЗаказчика.Номенклатура;
			НоваяСтрока.Счет 			= ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
			НоваяСтрока.СчетПередачи 	= ТекСтрокаМатериалыЗаказчика.СчетУчета;
		КонецЦикла;
		
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, , , Дата);
		#Если Клиент Тогда
		ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
															"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
															СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));
		#КонецЕсли
	КонецЕсли;
	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		// Заполнение шапки
		УчитыватьКПН     = Истина;
		СтрокаТЧ                    = Материалы;
		СтрокаТабЧасть             = "Материалы";
		
		Если СтрокаТЧ.Количество() > 0  Тогда
			#Если Клиент Тогда
				ТекстВопроса = "Очистить табличную часть """ + СтрокаТабЧасть + """ перед заполнением?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтрокаТЧ.Очистить();
				КонецЕсли; 
				#КонецЕсли 			
		КонецЕсли;   		
		
		Номенклатура = Основание.Владелец;
		
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
									и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);

		Для Каждого ТекСтрокаТовары Из Основание.ИсходныеКомплектующие Цикл
			
			НоваяСтрока = СтрокаТЧ.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Количество       = ТекСтрокаТовары.Количество;
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.Номенклатура.БазоваяЕдиницаИзмерения;
			НоваяСтрока.Коэффициент      = 1;
					
		КонецЦикла;
		
		Если  УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, , , Дата);
			#Если Клиент Тогда
			ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
												глЗначениеПеременной("глТекущийПользователь"),
												Организация, 
												Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
																|СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3",
																"СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3", 
																СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3));

			#КонецЕсли
		КонецЕсли;  	
														
	КонецЕсли;
	       

мДокументОснование = Основание;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3,
								|НадписьСчетЗатрат, НадписьСубконто1, НадписьСубконто2, НадписьСубконто3,
								|Материалы.СчетБУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад," + ?(Материалы.Количество() = 0, ""," СчетЗатратБУ,");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И Материалы.Количество() > 0  Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + "СчетЗатратНУ";
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ВидУчетаНУ";
	КонецЕсли;
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, мСтрокаРеквизитыБухУчета);

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	РеквизитыТабМат = "Номенклатура, Количество, СчетБУ";
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		РеквизитыТабМат = РеквизитыТабМат + ", СчетНУ";
	КонецЕсли;	

	// Здесь услуг быть не должно.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Услуга", "Номенклатура.Услуга");
	ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();

	// Проверим что нет услуг
	Для Каждого Строка Из ТаблицаМатериалов Цикл

		Если ЗначениеЗаполнено(Строка.Услуга) Тогда
			Если Строка.Услуга Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Нельзя использовать услугу! (строка № " + Строка.НомерСтроки + " таблица ""Материалы"")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;	

	КонецЦикла;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабМат, мСтрокаРеквизитыБухУчета, "Материалы");
	
	// Проверка номера ГТД
	Для каждого СтрокаТЧ Из Материалы Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Материалы"": ";
		
	КонецЦикла;

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМат), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Процедура проверяет заполнение табличной части "Материалы заказчика" документа .
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалыЗаказчика(Отказ, Заголовок) Экспорт

	РеквизитыТабМат = "Номенклатура, Количество, Счет, СчетПередачи";
	
	// Здесь услуг быть не должно.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Услуга", "Номенклатура.Услуга");
	ТаблицаМатериаловЗаказчика = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();

	// Проверим что нет услуг
	Для Каждого Строка Из ТаблицаМатериаловЗаказчика Цикл
		
		Если ЗначениеЗаполнено(Строка.Услуга) Тогда
			Если Строка.Услуга Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Нельзя использовать услугу! (строка № " + Строка.НомерСтроки + " таблица ""Материалы заказчика"")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;	

	КонецЦикла;

	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабМат, мСтрокаРеквизитыБухУчета, "МатериалыЗаказчика");
	
	// Проверка номера ГТД
	Для каждого СтрокаТЧ Из МатериалыЗаказчика Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Материалы заказчика"": ";
		
	КонецЦикла;

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", Новый Структура(РеквизитыТабМат), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	
	ТаблицаМатериалов.Колонки.Добавить("СтруктурноеПодразделение");
		
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорПоставщика");
	
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияНУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияНУ3");

	КоэффОплаты      = 1;

	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   										"КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    										"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      				"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,				"Организация");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение,	"СтруктурноеПодразделение");
		
	ТаблицаМатериалов.ЗаполнитьЗначения(Неопределено,                       				"ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатратБУ,    									"КорСчетСписанияБУ");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратБУ1,									"КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратБУ2,     								"КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратБУ3,     								"КорСубконтоСписанияБУ3");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СчетЗатратНУ,  										"КорСчетСписанияНУ");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратНУ1, 									"КорСубконтоСписанияНУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратНУ2, 									"КорСубконтоСписанияНУ2");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратНУ3, 									"КорСубконтоСписанияНУ3");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаМатериалов Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;
    
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

 // Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Организация");
	
	ТаблицаМатериалов.Колонки.Добавить("СтруктурноеПодразделение");
	
	
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаМатериалов.Колонки.Добавить("ОтражениеВНУ");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	КоэффОплаты      = 1;

	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   						 				"КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    						 				"Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,      				"Склад");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 				"Организация");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, 	"СтруктурноеПодразделение");
		
	ТаблицаМатериалов.ЗаполнитьЗначения(Неопределено,                        				"ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(Контрагент,     					 				"КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратБУ2,  				 				"КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.ЗаполнитьЗначения(СубконтоЗатратБУ3,  				 				"КорСубконтоСписанияБУ3");

	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Функция списания материалов с регистра ТоварыНаСкладе
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения)
	

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаМатериалов, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
	
	// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаДавальческихМатериалов, Истина, Ложь, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет заполнение статьи затрат
//
Процедура ПроверитьЗаполнениеСтатьиЗатрат()
	
	Для	Сч=1 По 3 Цикл
		
		ПроверяемыйРеквизит = ЭтотОбъект["СубконтоЗатратБУ" + СокрЛП(Сч)];
		Если ТипЗнч(ПроверяемыйРеквизит) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			
			Если Не ЗначениеЗаполнено(ПроверяемыйРеквизит) Тогда
				Сообщить("Не заполнено субконто бухгалтерского учета ""Статьи затрат"".", СтатусСообщения.Внимание);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание, Номенклатура=Неопределено) Экспорт
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// проверяем заполнение табличных частей
	ПроверитьЗаполнениеТабличнойЧастиМатериалы(СтруктураШапкиДокумента, Отказ, Заголовок);
    ПроверитьЗаполнениеТабличнойЧастиМатериалыЗаказчика(Отказ, Заголовок);
		
	Если МатериалыЗаказчика.Количество() <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Сообщить("На закладке ""Материалы заказчика"" в реквизите ""Контрагент"" не указан поставщик давальческого сырья", СтатусСообщения.ОченьВажное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Материалы.Количество() <> 0 Тогда
		ПроверитьЗаполнениеСтатьиЗатрат();
	КонецЕсли;

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Коэффициент" , "Коэффициент");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" , "СчетНУ");
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаМатериалов = ПодготовитьТаблицуТоваров(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки"      , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"     , "Номенклатура");
	СтруктураПолей.Вставить("Количество"       , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ"      , "Счет");
	СтруктураПолей.Вставить("КорСчетСписанияБУ", "СчетПередачи");

	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаДавальческихМатериалов = ПодготовитьТаблицуМатериалыЗаказчика(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);

	Если НЕ Отказ Тогда
		
		// Формирование движения регистров
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаМатериалов, ТаблицаДавальческихМатериалов, Отказ, Заголовок, РежимПроведения);
		
		// Движения по товарам организаций			
		СтруктураШапкиДокумента.Вставить("ИмяСписка", "Материалы");
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(Неопределено,СтруктураШапкиДокумента, Движения, Отказ);

		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект, "Материалы");
	КонецЕсли;

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();