Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;


Перем мОперация;
Перем мПроводкиБУ;
Перем мПроводкиНУ;


Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мИсчислениеНалоговСтруктурныхЕдиниц;
Перем мВедениеУчетаВременныхРазницБалансовымМетодом Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет ТЧ Задолженность остатками по бухгалтерскому учету
//

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПолучитьСписокСчетов()
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаОтбора.СчетУчета
	|ИЗ
	|  Документ.ПереоценкаВалюты.СчетаОтбора КАК СчетаОтбора
	|Где
	|	СчетаОтбора.ссылка = &ТекДокумент
	|";
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента, ТаблицаДвижений, ВспомогательныйРегистр, СтрокаГруппировки, СтрокаСуммирования, ЗаполнятьСтруктурноеПодразделение = Истина)
	                         
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	Если ТаблицаДвижений.Колонки.Найти("СтруктурноеПодразделение")<> Неопределено И ЗаполнятьСтруктурноеПодразделение Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, "СтруктурноеПодразделение");	
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ПериодРасчета");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
	ВспомогательныйРасчет = ВспомогательныйРегистр.СоздатьНаборЗаписей();
	ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
	ВспомогательныйРасчет.Прочитать();
	ВспомогательныйРасчет.Загрузить(ТаблицаДвижений);
	ВспомогательныйРасчет.Записать();
КонецПроцедуры

// Выполняет переоценку валютных счетов	
//
Процедура ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, СписокСчетовОтбора, Отказ, Заголовок)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("РегламентнаяПереоценка", Истина);
	СтруктураПараметров.Вставить("РегламентныйДокумент",   ЭтотОбъект);
	ТаблицаРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();
	СтруктураПараметров.Вставить("ТаблицаРасчетаПереоценкиВалюты", ТаблицаРасчетаПереоценкиВалюты);	
		
	// Переоценка может 
	// Таблица оборотов за месяц по счетам с оборотным субконто
	ЗапросПоОборотнымСубконто = Новый Запрос("ВЫБРАТЬ
	                                         |	СчетаИВидыСубконто.Ссылка КАК Счет,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты1,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты2,
	                                         |	СчетаИВидыСубконто.ТолькоОбороты3,
	                                         |	ТиповойОбороты.Субконто1,
	                                         |	ТиповойОбороты.Субконто2,
	                                         |	ТиповойОбороты.Субконто3,
	                                         |	ТиповойОбороты.ВалютнаяСуммаОборотДт + ТиповойОбороты.ВалютнаяСуммаОборотКт КАК ВалютнаяСумма,
	                                         |	ТиповойОбороты.Валюта
	                                         |ИЗ
	                                         |	(ВЫБРАТЬ
	                                         |		Типовой.Ссылка КАК Ссылка,
	                                         |		ТиповойВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	                                         |		ТиповойВидыСубконто1.ТолькоОбороты КАК ТолькоОбороты1,
	                                         |		ТиповойВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	                                         |		ТиповойВидыСубконто2.ТолькоОбороты КАК ТолькоОбороты2,
	                                         |		ТиповойВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	                                         |		ТиповойВидыСубконто3.ТолькоОбороты КАК ТолькоОбороты3
	                                         |	ИЗ
	                                         |		ПланСчетов.Типовой КАК Типовой
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто1
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто1.Ссылка
	                                         |				И (ТиповойВидыСубконто1.НомерСтроки = 1)
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто2
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто2.Ссылка
	                                         |				И (ТиповойВидыСубконто2.НомерСтроки = 2)
	                                         |			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто3
	                                         |			ПО Типовой.Ссылка = ТиповойВидыСубконто3.Ссылка
	                                         |				И (ТиповойВидыСубконто3.НомерСтроки = 3)
	                                         |	ГДЕ
	                                         |		(ТиповойВидыСубконто1.ТолькоОбороты = ИСТИНА
	                                         |				ИЛИ ТиповойВидыСубконто2.ТолькоОбороты = ИСТИНА
	                                         |				ИЛИ ТиповойВидыСубконто3.ТолькоОбороты = ИСТИНА)) КАК СчетаИВидыСубконто
	                                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	                                         |				&ДатаНач,
	                                         |				&ДатаКон,
	                                         |				,
	                                         |				Счет.Валютный = ИСТИНА,
	                                         |				,
											 |				Организация = &Организация
											 |					И СтруктурноеПодразделение = &СтруктурноеПодразделение,
											 |				,
											 |				) КАК ТиповойОбороты
	                                         |		ПО СчетаИВидыСубконто.Ссылка = ТиповойОбороты.Счет
	                                         |АВТОУПОРЯДОЧИВАНИЕ");
											 
	ЗапросПоОборотнымСубконто.УстановитьПараметр("ДатаНач", 				мНачГраница);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("ДатаКон", 				мКонГраница);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("Организация", 			СтруктураШапкиДокумента.Организация);
	ЗапросПоОборотнымСубконто.УстановитьПараметр("СтруктурноеПодразделение",СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	ВыборкаПоОборотнымСубконто = ЗапросПоОборотнымСубконто.Выполнить().Выбрать();
	
	ТаблицаОборотныхСубконтоСчета = Новый ТаблицаЗначений;
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Счет");	
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто1");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто2");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Субконто3");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("Сумма");
	ТаблицаОборотныхСубконтоСчета.Колонки.Добавить("СуммаВРегл");
 
	// Основной запрос	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегламентнаяПереоценка", 	Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);
	Запрос.УстановитьПараметр("ДатаКон", 					мКонГраница);
	Запрос.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",	СтруктураШапкиДокумента.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СписокСчетовОтбора",	 СписокСчетовОтбора);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОстатки.Счет КАК Счет,
	               |	ТиповойОстатки.Субконто1,
	               |	ТиповойОстатки.Субконто2,
	               |	ТиповойОстатки.Субконто3,
	               |	ТиповойОстатки.Валюта,
	               |	ТиповойОстатки.СуммаОстаток,
	               |	ТиповойОстатки.ВалютнаяСуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА СчетаИВидСубконто.ТолькоОбороты1
	               |				ИЛИ СчетаИВидСубконто.ТолькоОбороты2
	               |				ИЛИ СчетаИВидСубконто.ТолькоОбороты3
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакОборотныхСубконтоСчета,
	               |	СчетаИВидСубконто.ТолькоОбороты1 КАК ОборотноеСубконто1,
	               |	СчетаИВидСубконто.ТолькоОбороты2 КАК ОборотноеСубконто2,
	               |	СчетаИВидСубконто.ТолькоОбороты3 КАК ОборотноеСубконто3
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |		&ДатаКон,
	               |		Счет В
	               |		    (ВЫБРАТЬ
	               |		        Типовой.Ссылка КАК СчетПереоценки
	               |		    ИЗ
	               |		        ПланСчетов.Типовой КАК Типовой ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценкиБУ
	               |		            ПО
	               |		                СчетаСОсобымПорядкомПереоценкиБУ.Счет = Типовой.Ссылка
	               |		    ГДЕ
	               |		        Типовой.Валютный = ИСТИНА
	               |		        И (СчетаСОсобымПорядкомПереоценкиБУ.Счет ЕСТЬ NULL 
	               |		            ИЛИ СчетаСОсобымПорядкомПереоценкиБУ.СпособПризнанияКурсовойРазницы = &РегламентнаяПереоценка)),
	               |		,
	               |		Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Типовой.Ссылка КАК Ссылка,
	               |			ТиповойВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	               |			ТиповойВидыСубконто1.ТолькоОбороты КАК ТолькоОбороты1,
	               |			ТиповойВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	               |			ТиповойВидыСубконто2.ТолькоОбороты КАК ТолькоОбороты2,
	               |			ТиповойВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	               |			ТиповойВидыСубконто3.ТолькоОбороты КАК ТолькоОбороты3
	               |		ИЗ
	               |			ПланСчетов.Типовой КАК Типовой
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто1
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто1.Ссылка
	               |					И (ТиповойВидыСубконто1.НомерСтроки = 1)
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто2
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто2.Ссылка
	               |					И (ТиповойВидыСубконто2.НомерСтроки = 2)
	               |				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто3
	               |				ПО Типовой.Ссылка = ТиповойВидыСубконто3.Ссылка
	               |					И (ТиповойВидыСубконто3.НомерСтроки = 3)
	               |		ГДЕ
	               |			(ТиповойВидыСубконто1.ТолькоОбороты = ИСТИНА
	               |					ИЛИ ТиповойВидыСубконто2.ТолькоОбороты = ИСТИНА
	               |					ИЛИ ТиповойВидыСубконто3.ТолькоОбороты = ИСТИНА)) КАК СчетаИВидСубконто
	               |		ПО ТиповойОстатки.Счет = СчетаИВидСубконто.Ссылка
	               |Где
	               |     ТиповойОстатки.Счет В (&СписокСчетовОтбора)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Выборка   = Запрос.Выполнить().Выбрать();
        
	Пока Выборка.Следующий() Цикл
		ОбнаруженаОшибка = Ложь;
		СтрокаСообщения = "";
		// переоценка не производится, если существуют остатки, в которых не определена валюта
		Если НЕ ЗначениеЗаполнено(Выборка.Валюта) Тогда
			СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится.";
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		// переоценка сумм в валюте регл учета не производится, если сумма и сумма в валюте отличаются  - это ошибка
		Если Выборка.Валюта = мВалютаРегламентированногоУчета И 
			НЕ Выборка.СуммаОстаток = Выборка.ВалютнаяСуммаОстаток Тогда
			
			СтрокаСообщения = "Обнаружены остатки в валюте регламентированного учета, не совпадающие с суммой счета. Переоценка остатка не производится.";
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		Если ОбнаруженаОшибка Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "   - счет: " + Выборка.Счет.код + " <" + Выборка.Счет.Наименование + ">";
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+ "    - субконто: "; 
			Для НомерСубконто = 1 по 3 Цикл
				СтрокаСообщения = СтрокаСообщения + "<" + СокрЛП(Выборка["Субконто"+НомерСубконто]) + ">";
			КонецЦикла; 
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрокаСообщения, ,  ,ЭтотОбъект,Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ);
			
			Продолжить;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("ВалютаДокумента", Выборка.Валюта);		
		СтруктураСчетаПереоценки =  Новый Структура("Счет, Субконто1, Субконто2, Субконто3, ТенговыйОстаток, ВалютныйОстаток, ", Выборка.Счет, Выборка.Субконто1, Выборка.Субконто2, Выборка.Субконто3, Выборка.СуммаОстаток, Выборка.ВалютнаяСуммаОстаток);
		
		// Таблица оборотных субконто		
		ТаблицаОборотныхСубконтоСчета.Очистить();
		Если Выборка.ПризнакОборотныхСубконтоСчета = ИСТИНА Тогда
			ВыборкаПоОборотнымСубконто.Сбросить();
			СтруктураПоиска = Новый Структура("Счет, Валюта", Выборка.Счет, Выборка.Валюта);
			Для Счетчик = 1 по 3 Цикл
				Если Выборка["ОборотноеСубконто" + Счетчик] = ЛОЖЬ тогда
					СтруктураПоиска.Вставить("Субконто"+ Счетчик, Выборка["Субконто" + Счетчик]);
				КонецЕсли;	
			КонецЦикла;	
			
			Пока ВыборкаПоОборотнымСубконто.НайтиСледующий(СтруктураПоиска) Цикл 
				СтрокаТаблицыОборотныхСубконтоСчета = ТаблицаОборотныхСубконтоСчета.Добавить();
				
				СтрокаТаблицыОборотныхСубконтоСчета.Счет 		= ВыборкаПоОборотнымСубконто.Счет;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто1	= ВыборкаПоОборотнымСубконто.Субконто1;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто2	= ВыборкаПоОборотнымСубконто.Субконто2;	
				СтрокаТаблицыОборотныхСубконтоСчета.Субконто3	= ВыборкаПоОборотнымСубконто.Субконто3;	
				СтрокаТаблицыОборотныхСубконтоСчета.Сумма		= ВыборкаПоОборотнымСубконто.ВалютнаяСумма;	
			КонецЦикла;
			СтруктураСчетаПереоценки.Вставить("ТаблицаОборотногоСубконто", ТаблицаОборотныхСубконтоСчета);	
		Иначе
			СтруктураСчетаПереоценки.Вставить("ТаблицаОборотногоСубконто", Неопределено);	
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетаРегл(СтруктураШапкиДокумента, мПроводкиБУ, мПроводкиНУ,СтруктураСчетаПереоценки, , Ложь, Ложь,,Новый списокЗначений(),Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно, Отказ, СтруктураПараметров);							
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЦикла;
	
	мПроводкиБУ.Записать(Ложь);
	мПроводкиНУ.Записать(Ложь);
	
	ЗаписьВВспомогательныеРегистрыСведений(
		СтруктураШапкиДокумента,
		СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты, 
		РегистрыСведений.РасчетПереоценкиВалютныхСредств,
		"Организация,  ПериодРасчета, Активность, Регистратор, Счет, Валюта, Субконто1, Субконто2, Субконто3, КурсПереоценки",
		"Сумма,СуммаНУ,СуммаПР,СуммаВР, СуммаВВалюте, СуммаВТенге, СуммаВТенгеНУ, СуммаВТенгеПР, СуммаВТенгеВР");

КонецПроцедуры


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Задолженность".
//
// Параметры:
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗадолженность(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагентаДт, ДоговорКонтрагентаКт");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Задолженность",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СписокСчетовОтбора, Отказ, Заголовок)
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, СписокСчетовОтбора, Отказ, Заголовок);
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Заголовок = "";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	
 	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);	
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ВидУчетаНУ",    			   Справочники.ВидыУчетаНУ.ПустаяСсылка());
	
	мНачДата    = НачалоМесяца(Дата);
	мКонДата    = КонецДня(Дата);
	мНачГода    = НачалоГода(Дата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мКонДата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("УчитыватьКПН",    						        ОрганизацияПлательщикНалогаНаПрибыль);	
	СтруктураШапкиДокумента.Вставить("ВидУчетаНУ",   									Справочники.ВидыУчетаНУ.НУ);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ОрганизацияПлательщикНалогаНаПрибыль или ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);

	ВедениеУчетаВременныхРазницБалансовымМетодом   =  ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 			ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	мИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");	    
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мПроводкиБУ = Движения.Типовой;
	мПроводкиНУ = Движения.Налоговый;
	
	ПорядокПодразделенийСообщался 	= Ложь;
	
	ТаблицаНеЗакрытыхПодразделений = Новый ТаблицаЗначений;
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("Подразделение");
	ТаблицаНеЗакрытыхПодразделений.Колонки.Добавить("СчетЗатрат");
	
	СписокСчетовОтбора = ПолучитьСписокСчетов();
	
	Если СписокСчетовОтбора = Неопределено тогда
		Сообщить("Не заданы счета для переоценки !!!");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СписокСчетовОтбора, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();