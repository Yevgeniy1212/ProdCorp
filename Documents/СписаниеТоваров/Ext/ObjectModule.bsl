////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		СтрокаТЧ.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");			
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
			
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьСписаниеТоваров();
		
	ИначеЕсли ИмяМакета = "АктСписания" Тогда

		ТабДокумент = ПечатьАктСписанияТоваров();	
		
	ИначеЕсли ИмяМакета = "З6" Тогда
		
		ТабДокумент = ПечатьЗ6();	
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСписаниеТоваров()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

		
	ОтражатьНДС = УчитыватьНДС и КорректироватьНДС;
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	ЗапросКТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад,
	|	Склад.Представление         КАК ПредставлениеСклада,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный,
	|	ОтветственныеЛица.ФизическоеЛицо   КАК Ответственный,	
	|	ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия 
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = СписаниеТоваров.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо,
	|	Константы
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СписаниеТоваров.Номенклатура,
	                       |	СписаниеТоваров.НомерСтроки КАК НомерСтроки,
	                       |	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                       |	СписаниеТоваров.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	                       |	СписаниеТоваров.Количество КАК Количество,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент*СписаниеТоваров.Количество,0) КАК Сумма,
	                       |	ЕСТЬNULL(КорректировкаНДС.СуммаНДС / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент*СписаниеТоваров.Количество,0) КАК СуммаНДС
	                       |ИЗ
	                       |	(ВЫБРАТЬ
	                       |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	                       |		СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	                       |		МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	                       |		СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                       |		СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                       |		СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатураКод,
	                       |		СписаниеТоваровТовары.Номенклатура.Представление КАК НоменклатураПредставление,
	                       |		СписаниеТоваровТовары.Коэффициент КАК Коэффициент,
	                       |		СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ
	                       |	ИЗ
	                       |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                       |	
	                       |	СГРУППИРОВАТЬ ПО
	                       |		СписаниеТоваровТовары.Номенклатура,
	                       |		СписаниеТоваровТовары.ЕдиницаИзмерения,
	                       |		СписаниеТоваровТовары.Ссылка,
	                       |		СписаниеТоваровТовары.Номенклатура.Код,
	                       |		СписаниеТоваровТовары.Номенклатура.Представление,
	                       |		СписаниеТоваровТовары.Коэффициент,
	                       |		СписаниеТоваровТовары.СчетУчетаБУ) КАК СписаниеТоваров
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                       |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	                       |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	                       |		ИЗ
	                       |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТиповойДвиженияССубконто.СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	                       |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                       |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			КорректировкаНДС.ТМЗ КАК ТМЗ,
	                       |			СУММА(ВЫБОР
	                       |					КОГДА КорректировкаНДС.СуммаНДС < 0
	                       |						ТОГДА -КорректировкаНДС.СуммаНДС
	                       |					ИНАЧЕ КорректировкаНДС.СуммаНДС
	                       |				КОНЕЦ) КАК СуммаНДС
	                       |		ИЗ
	                       |			РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДС
	                       |		ГДЕ
	                       |			КорректировкаНДС.Регистратор = &ТекущийДокумент
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			КорректировкаНДС.ТМЗ) КАК КорректировкаНДС
	                       |		ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
	                       |ГДЕ
	                       |	СписаниеТоваров.Ссылка = &ТекущийДокумент
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	НомерСтроки";
						   
						   
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();	
	ВыборкаСтрокТовары = ЗапросКТоварам.Выполнить().Выбрать();
	
	ТаблицаИнвентаризационнаяКомиссия = Шапка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Списание товаров", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("РевизитыОрганизации");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Организация 			 = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);


	ОбластьНомера 	 = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  	 = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных 	 = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьДанныхНДС = Макет.ПолучитьОбласть("ШапкаТаблицы|ДанныеНДС");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.Колонка = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	Если ОтражатьНДС Тогда		
		ТабДокумент.Присоединить(ОбластьДанныхНДС);
	КонецЕсли;	
	ОбластьКолонкаТовар = Макет.Область("Товар");

	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьДанныхНДС = Макет.ПолучитьОбласть("Строка|ДанныеНДС");
	
	ИтогоСумма = 0;
	ИтогоСуммаНДС = 0;
		
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
				
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);		
		ТабДокумент.Присоединить(ОбластьДанных);		
		Если ОтражатьНДС Тогда		
			ОбластьДанныхНДС.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанныхНДС);
		КонецЕсли;
		ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
		ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера 		= Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  		= Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных 		= Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьДанныхНДС 	= Макет.ПолучитьОбласть("Итого|ДанныеНДС");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьДанных.Параметры.Всего = ОбщегоНазначения.ФорматСумм(ИтогоСумма);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ОтражатьНДС Тогда		
		ОбластьДанныхНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ИтогоСуммаНДС);
		ТабДокумент.Присоединить(ОбластьДанныхНДС);
	КонецЕсли;	

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
											 + ", на сумму " + ОбщегоНазначения.ФорматСумм(ИтогоСумма, Шапка.ВалютаДокумента);
											 

	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
		
	Если ОтражатьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюНДС");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Корректировка НДС в сумме " + ОбщегоНазначения.ФорматСумм(ИтогоСуммаНДС, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;	

	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.Дата);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			ОбластьМакета.Параметры.Должность          = "";
			ОбластьМакета.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;


	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктСписанияТоваров()
	
	Запрос_ = Новый Запрос;
	Запрос_.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконтоТиповые.ТипЗначения КАК ТипЗначенияСубконто
		|ИЗ
		|	ПланВидовХарактеристик.ВидыСубконтоТиповые КАК ВидыСубконтоТиповые";

	Результат = Запрос_.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ПустыеСсылки = Новый Массив;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ТипСубконто Из ВыборкаДетальныеЗаписи.ТипЗначенияСубконто.Типы() Цикл
			Субконто = Новый (ТипСубконто);
			Если ПустыеСсылки.Найти(Субконто) = Неопределено Тогда
				ПустыеСсылки.Добавить(Субконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПустыеСсылки.Добавить(0);
	ПустыеСсылки.Добавить("");
	ПустыеСсылки.Добавить(Дата('00010101'));
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);

	ЗапросКТоварам.УстановитьПараметр("ПустыеСсылки",    ПустыеСсылки);
	ЗапросКТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер Как НомерДокумента,
	|	Дата  Как ДатаДокумента,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	Склад.Представление                 КАК Склад,
	|	СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный,
	|	ОтветственныеЛица.ФизическоеЛицо   КАК Ответственный,
	|	ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия  	
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = СписаниеТоваров.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ
	                       |	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	                       |	СписаниеТоваровТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	                       |	СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
	                       |	СписаниеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                       |	МИНИМУМ(СписаниеТоваровТовары.НомерСтроки) КАК НомерСтроки,
	                       |	СписаниеТоваровТовары.Ссылка КАК Ссылка,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ1 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ1
	                       |	КОНЕЦ КАК СубконтоЗатратБУ1,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ2 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ2
	                       |	КОНЕЦ КАК СубконтоЗатратБУ2,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ3 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ3
	                       |	КОНЕЦ КАК СубконтоЗатратБУ3,
	                       |	СписаниеТоваровТовары.СчетЗатратБУ КАК СчетЗатратБУ,
	                       |	СписаниеТоваровТовары.Коэффициент КАК Коэффициент
	                       |ПОМЕСТИТЬ ВТ_СписаниеТоваров
	                       |ИЗ
	                       |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	                       |ГДЕ
	                       |	СписаниеТоваровТовары.Ссылка = &ТекущийДокумент
	                       |
	                       |СГРУППИРОВАТЬ ПО
	                       |	СписаниеТоваровТовары.Номенклатура,
	                       |	СписаниеТоваровТовары.СчетУчетаБУ,
	                       |	СписаниеТоваровТовары.ЕдиницаИзмерения,
	                       |	СписаниеТоваровТовары.Ссылка,
	                       |	СписаниеТоваровТовары.СчетЗатратБУ,
	                       |	СписаниеТоваровТовары.Коэффициент,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ1 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ1 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ1
	                       |	КОНЕЦ,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ2 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ2 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ2
	                       |	КОНЕЦ,
	                       |	ВЫБОР
	                       |		КОГДА СписаниеТоваровТовары.СубконтоЗатратБУ3 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 ЕСТЬ NULL 
	                       |				ИЛИ СписаниеТоваровТовары.СубконтоЗатратБУ3 В (&ПустыеСсылки)
	                       |			ТОГДА NULL
	                       |		ИНАЧЕ СписаниеТоваровТовары.СубконтоЗатратБУ3
	                       |	КОНЕЦ
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	СписаниеТоваров.Номенклатура,
	                       |	СписаниеТоваров.Количество,
	                       |	СписаниеТоваров.НомерСтроки КАК НомерСтроки,
	                       |	СписаниеТоваров.СчетУчетаБУ КАК Счет,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент * СписаниеТоваров.Количество, 0) КАК Сумма,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * СписаниеТоваров.Коэффициент, 0) КАК Себестоимость,
	                       |	СписаниеТоваров.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	                       |	ДвиженияТиповой.СубконтоДт1.Наименование КАК СубконтоДт1,
	                       |	СписаниеТоваров.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	                       |	ДвиженияТиповой.СубконтоДт2.Наименование КАК СубконтоДт2,
	                       |	СписаниеТоваров.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	                       |	ДвиженияТиповой.СубконтоДт3.Наименование КАК СубконтоДт3,
	                       |	СписаниеТоваров.СчетЗатратБУ КАК СчетСписания,
	                       |	СписаниеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                       |	ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	                       |	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер
	                       |ИЗ
	                       |	ВТ_СписаниеТоваров КАК СписаниеТоваров
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                       |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	                       |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
	                       |			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт1
	                       |			КОНЕЦ КАК СубконтоДт1,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт2
	                       |			КОНЕЦ КАК СубконтоДт2,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт3
	                       |			КОНЕЦ КАК СубконтоДт3
	                       |		ИЗ
	                       |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент, , ) КАК ТиповойДвиженияССубконто
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТиповойДвиженияССубконто.СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1,
	                       |			ТиповойДвиженияССубконто.СчетДт,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт1 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт1
	                       |			КОНЕЦ,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт2 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт2
	                       |			КОНЕЦ,
	                       |			ВЫБОР
	                       |				КОГДА ТиповойДвиженияССубконто.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 ЕСТЬ NULL 
	                       |						ИЛИ ТиповойДвиженияССубконто.СубконтоДт3 В (&ПустыеСсылки)
	                       |					ТОГДА NULL
	                       |				ИНАЧЕ ТиповойДвиженияССубконто.СубконтоДт3
	                       |			КОНЕЦ) КАК ДвиженияТиповой
	                       |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                       |			И СписаниеТоваров.СчетУчетаБУ = ДвиженияТиповой.СчетКт
	                       |			И СписаниеТоваров.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ1 = ДвиженияТиповой.СубконтоДт1
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт1 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ1 ЕСТЬ NULL )
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ2 = ДвиженияТиповой.СубконтоДт2
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт2 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ2 ЕСТЬ NULL )
	                       |			И (СписаниеТоваров.СубконтоЗатратБУ3 = ДвиженияТиповой.СубконтоДт3
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт3 ЕСТЬ NULL 
	                       |					И СписаниеТоваров.СубконтоЗатратБУ3 ЕСТЬ NULL )
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = ЗапросКТоварам.Выполнить().Выбрать();
	ТаблицаИнвентаризационнаяКомиссия = Шапка.ИнвентаризационнаяКомиссия.Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_АктСписания";

	Макет = ПолучитьМакет("АктСписания");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка"); 	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"); 	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	СуммаИтог = 0;
	СуммаИтогНДС = 0;
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		ОбластьСтрока.Параметры.Наименование = СокрЛП(ВыборкаСтрокТовары.Наименование);
		
		ОбластьСтрока.Параметры.Себестоимость = Формат(ВыборкаСтрокТовары.Себестоимость, "ЧДЦ=2");
		ОбластьСтрока.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество, "ЧДЦ=3");
		ОбластьСтрока.Параметры.Сумма = Формат(ВыборкаСтрокТовары.Сумма, "ЧДЦ=2");
		
		ПараметрСубконто = ?(ВыборкаСтрокТовары.СубконтоЗатратБУ1 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ1) + Символы.ПС + 
						   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ2 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ2) + Символы.ПС + 
						   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ3 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ3);
		
		ОбластьСТрока.Параметры.Субконто = СокрЛП(ПараметрСубконто);
		ТабДокумент.Вывести(ОбластьСтрока);
		
		СуммаИтог = СуммаИтог + ВыборкаСтрокТовары.Сумма; 	
		
	КонецЦикла; 		
	ОбластьИтогов = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтогов.Параметры.СуммаИтог = Формат(СуммаИтог, "ЧДЦ=2");	
	
	ТабДокумент.Вывести(ОбластьИтогов);
	// Корректировка НДС
	Если УчитыватьНДС и КорректироватьНДС Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СписаниеТоваров.Номенклатура КАК Номенклатура,
		                      |	-КорректировкаНДС.СуммаКорректировкиОборота КАК Себестоимость,
		                      |	-КорректировкаНДС.СуммаНДС КАК СуммаНДС,
		                      |	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
		                      | ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование
		                      |ИЗ
		                      |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура
		                      |	ИЗ
		                      |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		                      |	ГДЕ
		                      |		СписаниеТоваровТовары.Ссылка = &ТекущийДокумент) КАК СписаниеТоваров
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
		                      |			СУММА(КорректировкаНДСКВозмещению.СуммаКорректировкиОборота) КАК СуммаКорректировкиОборота,
		                      |			СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
		                      |		ИЗ
		                      |			РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
		                      |		ГДЕ
		                      |			КорректировкаНДСКВозмещению.Регистратор = &ТекущийДокумент
		                      |		
		                      |		СГРУППИРОВАТЬ ПО
		                      |			КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
		                      |		ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
		                      |ИТОГИ
		                      |	СУММА(Себестоимость),
		                      |	СУММА(СуммаНДС)
		                      |ПО
		                      |	ОБЩИЕ");
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	    Результат = Запрос.Выполнить();
		Если не Результат.Пустой() Тогда
			ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаИтоги.Следующий();
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокНДС"); 	
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНДС"); 						
			
			ВыборкаДетали = ВыборкаИтоги.Выбрать();			
			Пока ВыборкаДетали.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаДетали);
				ОбластьМакета.Параметры.Наименование = СокрЛП(ВыборкаДетали.Наименование);
				ТабДокумент.Вывести(ОбластьМакета);	
			КонецЦикла;                                        			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогиНДС"); 						
			ОбластьМакета.Параметры.Заполнить(ВыборкаИтоги);
			ТабДокумент.Вывести(ОбластьМакета);	          		
		КонецЕсли;                                        			
	КонецЕсли;	
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.ДатаДокумента);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);

	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			ОбластьМакета.Параметры.Должность          = "";
			ОбластьМакета.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;  	
	
	////установим альбомный формат
	//ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
	
КонецФункции

// Функция формирует табличный документ с печатной формой "З-6" (акт на списание запасов).
//
Функция ПечатьЗ6()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"	   , Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата КАК ДатаДокумента,
	|	СписаниеТоваров.Организация,
	|   СписаниеТоваров.СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад.Представление КАК СкладПредставление,
	|	СписаниеТоваров.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	),
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследних
	|		ПО СписаниеТоваров.Склад = ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекДокумент";
					   
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
    	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	
	Если УчитыватьНДС И КорректироватьНДС Тогда
		ЗапросТовары.Текст = "ВЫБРАТЬ
		                     |	СписаниеТоваров.Номенклатура КАК Номенклатура,
		                     |	ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
							 |	ДвиженияТиповой.Сумма - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0) КАК СуммаСНДС,
		                     |	ВЫБОР
		                     |		КОГДА СписаниеТоваров.Количество <> 0
		                     |			ТОГДА (ДвиженияТиповой.Сумма - ЕСТЬNULL(КорректировкаНДС.СуммаНДС, 0)) / СписаниеТоваров.Количество
		                     |		ИНАЧЕ 0
		                     |	КОНЕЦ КАК Цена,
		                     |	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
		                     |	СписаниеТоваров.Номенклатура.Наименование КАК Наименование,
		                     |	СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
		                     |	СписаниеТоваров.Количество КАК Количество
		                     |ИЗ
		                     |	(ВЫБРАТЬ
		                     |		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		                     |		СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
		                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		                     |		СУММА(СписаниеТоваровТовары.Количество) КАК Количество
		                     |	ИЗ
		                     |		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		                     |	ГДЕ
		                     |		СписаниеТоваровТовары.Ссылка = &ТекДокумент
		                     |	
		                     |	СГРУППИРОВАТЬ ПО
		                     |		СписаниеТоваровТовары.Номенклатура,
		                     |		СписаниеТоваровТовары.Номенклатура.Код,
		                     |		СписаниеТоваровТовары.ЕдиницаИзмерения,
		                     |		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование) КАК СписаниеТоваров
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                     |			КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
		                     |			СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
		                     |		ИЗ
		                     |			РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
		                     |		ГДЕ
		                     |			КорректировкаНДСКВозмещению.Регистратор = &ТекДокумент
		                     |		
		                     |		СГРУППИРОВАТЬ ПО
		                     |			КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
		                     |		ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
		                     |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                     |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		                     |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
		                     |		ИЗ
		                     |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекДокумент, , ) КАК ТиповойДвиженияССубконто
		                     |		
		                     |		СГРУППИРОВАТЬ ПО
		                     |			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
		                     |		ПО СписаниеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
		                     |ИТОГИ
		                     |	СУММА(СуммаСНДС),
		                     |	СУММА(Количество)
		                     |ПО
		                     |	ОБЩИЕ";
		
		ВыборкаИтоги = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
		ВыборкаИтоги.Следующий();
		ВыборкаСтрокТовары = ВыборкаИтоги.Выбрать();
	Иначе
		ЗапросТовары.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеТоваровТовары.Номенклатура,
		|	ПОДСТРОКА(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное,1,1000) КАК ТоварНаименование,	
		|	СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
	 	|	СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	 	|	СУММА(СписаниеТоваровТовары.Количество) КАК Количество
	 	|ИЗ
	 	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	 	|ГДЕ
	 	|	СписаниеТоваровТовары.Ссылка = &ТекДокумент
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	СписаниеТоваровТовары.Номенклатура,
	 	|	СписаниеТоваровТовары.Номенклатура.Код,
	 	|	СписаниеТоваровТовары.ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование
		|";
		
		ВыборкаСтрокТовары = ЗапросТовары.Выполнить().Выбрать();
		
	КонецЕсли;
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);

	Макет = ПолучитьОбщийМакет("З6");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_З6";

	//Получим области
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия		 = Макет.ПолучитьОбласть("Комиссия");
			
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	ДанныеМОЛ 			  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.ОтветственноеЛицо, Док.ДатаДокумента);
	
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДокумента, "ru");
	
	Шапка.Параметры.НомерДокумента	   = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ШАпка.Параметры.ДатаДок			   = Формат(Док.ДатаДокумента, "ДЛФ=DD");
	Шапка.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
	Шапка.Параметры.МОЛ				   = ДанныеМОЛ.Представление;
	Шапка.Параметры.Заполнить(Док);
	
	ТабДокумент.Вывести(Шапка);
	
	// вывод заголовка таблицы
	ВалютаПечати = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// вывод строк таблицы
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// Инициализация итогов в документе
	
	ИтогоКоличество = 0;
	ИтогоВсегоСНДС  = 0;

	Если Не (УчитыватьНДС И КорректироватьНДС) Тогда 
		ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ЭтотОбъект.Ссылка);
	КонецЕсли;

	НомерПП = 1;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
            ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	

		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
        СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
		
		Если УчитыватьНДС И КорректироватьНДС Тогда
			
			СтрокаТаблицы.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
			СтрокаТаблицы.Параметры.Цена	   = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
			СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВыборкаСтрокТовары.СуммаСНДС,"ЧДЦ=2");
			СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
			
		Иначе	
			Кратность = 1;
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				 ВсегоСНДС = 0;
				 Цена 	   = 0;
			 Иначе
				 Цена 	   = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
				 ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
			 КонецЕсли;

			Количество = ВыборкаСтрокТовары.Количество;

			СтрокаТаблицы.Параметры.Количество = Формат(Количество,"ЧДЦ=3");
			СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВсегоСНДС, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.Цена       = Формат(Цена, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.НомерПП    = НомерПП;
			
			ИтогоКоличество	= ИтогоКоличество + Количество;
			ИтогоВсегоСНДС  = ИтогоВсегоСНДС  + ВсегоСНДС;

		КонецЕсли;

		НомерПП = НомерПП + 1;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;
	
	// вывод итогов
	
	Если УчитыватьНДС И КорректироватьНДС Тогда
		Итого.Параметры.ИтогоКоличество = Формат(ВыборкаИтоги.Количество, "ЧДЦ=3");
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ВыборкаИтоги.СуммаСНДС, "ЧДЦ=2");
	Иначе	
		Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
	КонецЕсли;	
		
	ТабДокумент.Вывести(Итого);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	//вывод оборотной стороны
	ОборотнаяСторона.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	//вывод комиссии
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Материально-ответственное лицо");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДокумента);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//Выводим список МОЛ
	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
	Комиссия.Параметры.Должность 				= ДанныеМОЛ.Должность;
	Комиссия.Параметры.РасшифровкаПодписи 		= ДанныеМОЛ.Представление;
	
	ТабДокумент.Вывести(Комиссия);
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);			
Конецпроцедуры	

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура("Ведомость","Списание товаров");
	СтруктураФорм.Вставить("АктСписания", "Акт списания товаров");
	СтруктураФорм.Вставить("З6", "З-6 (Акт списания запасов)");
	Возврат СтруктураФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад КАК Склад,
	|	Док.СчетУчетаБУ КАК СчетУчетаБУ,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокСписание.Номенклатура КАК Номенклатура,
	|			ДокСписание.Ссылка.Склад КАК Склад,
	|			ДокСписание.Количество КАК Количество
	|		ИЗ
	|			Документ.СписаниеТоваров.Товары КАК ДокСписание
	|		ГДЕ
	|			ДокСписание.Ссылка <> &ДокументСсылка
	|			И ДокСписание.Ссылка.Проведен
	|			И ДокСписание.Ссылка.ДокументОснование = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад,
	|	Док.СчетУчетаБУ";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Количество       = КоличествоСписать;
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Товары);	
		
	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Процедура выполняет заполниение табличной части по списанию товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПеремещениюТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент КАК Коэффициент,
	|	Док.Ссылка.СкладПолучатель КАК Склад,
	|	Док.НовыйСчетУчетаБУ КАК СчетУчетаБУ,
	// - куфиб - начало
	|	Док.ЗаявкаМТС КАК ЗаявкаМТС,
	|	Док.Подразделение КАК Подразделение,
	// - куфиб - конец
	|	МАКСИМУМ(Док.Количество) КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Ссылка.СкладПолучатель,
	// - куфиб - начало
	|	Док.ЗаявкаМТС,
	|	Док.Подразделение,
	// - куфиб - конец
	|	Док.НовыйСчетУчетаБУ,
	|	Док.КлючСвязи";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Склад = ДокументОснование.СкладПолучатель;		
	
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КлючСвязи 		  = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Товары);	
		// - куфиб - начало
		СтрокаТабличнойЧасти.ЗаявкаМТС		  = Выборка.ЗаявкаМТС;
		СтрокаТабличнойЧасти.Подразделение    = Выборка.Подразделение;
		// - куфиб - конец
		
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()
   
// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.НДСВидОборота,
	|	ПоступлениеТоваровУслугТовары.НДСВидПоступления,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	// - куфиб - начало
	|	ПоступлениеТоваровУслугТовары.ЗаявкаМТС,
	|	ПоступлениеТоваровУслугТовары.Подразделение,
	// - куфиб - конец
	|	ПоступлениеТоваровУслугТовары.НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &ДокументСсылка";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	СтруктураПоиска = Новый Структура;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтруктураПоиска.Вставить("Номенклатура",     Выборка.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      Выборка.СчетУчетаБУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    Выборка.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",Выборка.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, Выборка, Товары, НомераГТД);
		
	КонецЦикла;
 
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация товаров).
//
Процедура ЗаполнитьТоварыПоАвансовомуОтчету(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Номенклатура,
	|	АвансовыйОтчетТовары.ЕдиницаИзмерения,
	|	АвансовыйОтчетТовары.Коэффициент,
	|	АвансовыйОтчетТовары.Количество,
	|	АвансовыйОтчетТовары.НДСВидОборота,
	|	АвансовыйОтчетТовары.НДСВидПоступления,
	|	АвансовыйОтчетТовары.СчетУчетаБУ,
	|	АвансовыйОтчетТовары.СчетУчетаНУ,
	|	АвансовыйОтчетТовары.СчетУчетаНДС,
	// - куфиб - начало
	|	АвансовыйОтчетТовары.ЗаявкаМТС,
	|	АвансовыйОтчетТовары.Подразделение,
	// - куфиб - конец
	|	АвансовыйОтчетТовары.СтавкаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ДокументСсылка";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	СтруктураПоиска = Новый Структура;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтруктураПоиска.Вставить("Номенклатура",     Выборка.Номенклатура); 
		СтруктураПоиска.Вставить("СчетУчетаБУ",      Выборка.СчетУчетаБУ);
		СтруктураПоиска.Вставить("СчетУчетаНУ",      Выборка.СчетУчетаНУ);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",        Выборка.СтавкаНДС);
		СтруктураПоиска.Вставить("НДСВидОборота",    Выборка.НДСВидОборота);
		СтруктураПоиска.Вставить("НДСВидПоступления",Выборка.НДСВидПоступления);
		
		СтрокаТабличнойЧасти = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, Выборка, Товары, НомераГТД);
		
	КонецЦикла;
    	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()


// Процедура заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета          = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		
		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		        		
		ЗаполнитьТоварыПоПеремещениюТоваров(Основание);
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		
		ЗаполнитьТоварыПоПоступлениюТоваров(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		
		ЗаполнитьТоварыПоАвансовомуОтчету(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.узп_ЗаявкаМТС") Тогда
		
		
		узп_УправлениеЗакупками.ОбработкаЗаполненияПоЗаявкеМТСОбработкаЗаполнения(ЭтотОбъект,Основание,Неопределено);

		
	КонецЕсли;

	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
									и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
									
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", Истина,  УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	
	ДокументОснование = Основание;

КонецПроцедуры // ЗаполнитьПоДокументуОснования()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаВал");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	
	ТаблицаТоваров.Колонки.Добавить("СтруктурноеПодразделение");
	
	
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");

	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");

	КоэффОплаты      = 1;

	ТаблицаТоваров.ЗаполнитьЗначения(0,                         		  				"Сумма");
	ТаблицаТоваров.ЗаполнитьЗначения(0,                         		  				"СуммаВал");
	ТаблицаТоваров.ЗаполнитьЗначения(КоэффОплаты,                         				"КоэффОплаты");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          				"Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       				"Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 				"Организация");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, 	"СтруктурноеПодразделение");
		
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,                        				"ДоговорКонтрагента");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");
	Если СтруктураШапкиДокумента.УчитыватьНДС и СтруктураШапкиДокумента.КорректироватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСБУ");		
		// по НУ
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСНУ");					
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
			СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");		
		КонецЕсли;	

	КонецЕсли;	

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("СчетЗатратБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	КонецЕсли;
	Если СтруктураШапкиДокумента.УчитыватьНДС и СтруктураШапкиДокумента.КорректироватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// построчная проверка заполнения
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		Если СтруктураШапкиДокумента.УчитыватьНДС и СтруктураШапкиДокумента.КорректироватьНДС
			и не УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) = 0 Тогда
			
			Если СтрокаТЧ.НДСВидПоступления.Пустая() Тогда				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид операции поступления!", Отказ, Заголовок);
			КонецЕсли;		
			
			Если СтрокаТЧ.НДСВидОборота.Пустая() Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид оборота!", Отказ, Заголовок);				
			КонецЕсли;		
			
		КонецЕсли;	  
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары
	
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийСписанияТМЗ.ФиксированнымиПартиями Тогда
		Для Каждого СтрокаСписания ИЗ ТаблицаПоТоварам Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура",СтрокаСписания.Номенклатура);
			СтруктураОтбора.Вставить("Партия",СтрокаСписания.Партия);
			СтруктураОтбора.Вставить("КорСчетСписанияБУ",СтрокаСписания.КорСчетСписанияБУ);
			СтруктураОтбора.Вставить("КорСубконтоСписанияБУ1",СтрокаСписания.КорСубконтоСписанияБУ1);
			СтруктураОтбора.Вставить("КорСубконтоСписанияБУ2",СтрокаСписания.КорСубконтоСписанияБУ2);
			СтруктураОтбора.Вставить("КорСубконтоСписанияБУ3",СтрокаСписания.КорСубконтоСписанияБУ3);
			
			ТаблицаСписания = ТаблицаПоТоварам.СКопировать(СтруктураОтбора);
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаСписания, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ,СтрокаСписания.Партия,"Списаны ТМЗ");
		КонецЦикла;
	Иначе
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, ИСТИНА, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
	КонецЕсли;
	
	Движения.Записать();
	
	Если Не Отказ  и 
		СтруктураШапкиДокумента.УчитыватьНДС и СтруктураШапкиДокумента.КорректироватьНДС Тогда			
		
		ТаблицаКорректировки = ПодготовитьТаблицуПоКорректировкеНДС(ТаблицаПоТоварам);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаКорректировки, Отказ, Заголовок);
		ДвиженияПоНДСРегл(ТаблицаКорректировки, СтруктураШапкиДокумента);		
	КонецЕсли;	

	ТаблицаСписанияДляПредставительства = ПодготовитьТаблицуДляПредставительства(ТаблицаПоТоварам);
	
	Если  ТаблицаСписанияДляПредставительства.Количество()>0 Тогда
		
		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение = Организация.ГоловнаяОрганизация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
		Иначе
			КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			КонтрагентПредставительства = НаборЗаписей[0].Контрагент;
		Иначе
			КонтрагентПредставительства = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		ДвиженияРегистровПоПредставительству(ТаблицаСписанияДляПредставительства,КонтрагентОрганизации,КонтрагентПредставительства);
	КонецЕсли;
	//ЦС_РасчетыПоГосРезервам.ОтразитьВозмещенияГРСписание(ЭтотОбъект);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Отражение корректировки в бухгалтерском учете
//
Процедура ДвиженияПоНДСРегл(ТаблицаКорректировки, СтруктураШапкиДокумента)
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Для Каждого СтрокаКорректировки Из ТаблицаКорректировки Цикл		
		ПроводкаБУ = ПроводкиБУ.Добавить();
		ПроводкаБУ.Период      = Дата;
		ПроводкаБУ.Организация = Организация;
		ПроводкаБУ.Сумма       = СтрокаКорректировки.НДС;
		
		ПроводкаБУ.СчетДт      = СчетЗатратНДСБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1,СтруктураШапкиДокумента.СубконтоЗатратНДСБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2,СтруктураШапкиДокумента.СубконтоЗатратНДСБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3,СтруктураШапкиДокумента.СубконтоЗатратНДСБУ3);
				
		ПроводкаБУ.СчетКт      = СтрокаКорректировки.СчетУчетаНДС;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаБУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);


		ПроводкаБУ.Содержание  = "Корректировка суммы НДС (" + СокрЛП(СтрокаКорректировки.Номенклатура.Наименование);		
		// Отражение в налоговом учете
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = Дата;
			ПроводкаНУ.Организация = Организация;
			ПроводкаНУ.Сумма       = СтрокаКорректировки.НДС;
			
			ПроводкаНУ.СчетДт      = СчетЗатратНДСНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ3);
			
			ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаКорректировки.СчетУчетаНДС, Дата);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроводкаНУ.Содержание  = "Корректировка суммы НДС (" + СокрЛП(СтрокаКорректировки.Номенклатура.Наименование)+")";		
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПодготовитьТаблицуПоКорректировкеНДС(ТаблицаПоТоварам)
	ТаблицаКорректировки = Новый ТаблицаЗначений;
	ТаблицаКорректировки.Колонки.Добавить("Номенклатура");
	ТаблицаКорректировки.Колонки.Добавить("СчетУчетаЦенности");	
	ТаблицаКорректировки.Колонки.Добавить("СчетУчетаНДС");	
	ТаблицаКорректировки.Колонки.Добавить("НДСВидПоступления");
	ТаблицаКорректировки.Колонки.Добавить("НДСВидОборота");
	ТаблицаКорректировки.Колонки.Добавить("НДС");
	ТаблицаКорректировки.Колонки.Добавить("СтавкаНДС");
	ТаблицаКорректировки.Колонки.Добавить("СуммаБезНДС");
	
	// по строкам табличной части
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		Себестоимость = Строка.СписанныеПартииБУ.Итог("СуммаСписания");
		СуммаНДС = Себестоимость*УчетНДСИАкциза.ПолучитьСтавкуНДС(Строка.СтавкаНДС)/100;
		Если СуммаНДС = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		СтрокаКорректировки = ТаблицаКорректировки.Добавить();
		СтрокаКорректировки.Номенклатура 		= Строка.Номенклатура;
		СтрокаКорректировки.СчетУчетаЦенности	= Строка.СчетУчетаБУ;
		СтрокаКорректировки.СчетУчетаНДС 		= Строка.СчетУчетаНДС;
		СтрокаКорректировки.НДСВидПоступления 	= Строка.НДСВидПоступления;
		СтрокаКорректировки.НДСВидОборота 		= Строка.НДСВидОборота;
		СтрокаКорректировки.НДС 				= СуммаНДС;
		СтрокаКорректировки.СтавкаНДС 			= Строка.СтавкаНДС;
		СтрокаКорректировки.СуммаБезНДС 		= Себестоимость;		
	КонецЦикла;	
		
	
	
	Возврат ТаблицаКорректировки;
КонецФункции

// Процедура вызывается из тела процедуры ОбработкаПроведения()
// Формирует движения по регистрам подсистемы учета НДС "КорректировкаНДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;	
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	СтруктураШапкиДокумента.Вставить("ДатаВходящегоДокумента", ЭтотОбъект.Дата);
	СтруктураШапкиДокумента.Вставить("НомервходящегоДокумента", ЭтотОбъект.Номер);
	СтруктураШапкиДокумента.Вставить("ВидВходящегоДокумента", "Списание товаров");

	УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаДокумента, "Товары", Движения, Отказ);
			
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);


	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		,1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	,1);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       		, "Номенклатура");
	СтруктураПолей.Вставить("Партия"					, "Партия");
	СтруктураПолей.Вставить("Услуга"             		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         		, "Количество");
	СтруктураПолей.Вставить("Коэффициент"         		, "Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"        		, "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаБУ"        		, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        		, "СчетУчетаНУ");

	СтруктураПолей.Вставить("КорСчетСписанияБУ" 		, "СчетЗатратБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1" 	, "СубконтоЗатратБУ1");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2" 	, "СубконтоЗатратБУ2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3" 	, "СубконтоЗатратБУ3");
	
	СтруктураПолей.Вставить("КорСчетСписанияНУ" 		, "СчетЗатратНУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ1" 	, "СубконтоЗатратНУ1");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ2" 	, "СубконтоЗатратНУ2");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ3" 	, "СубконтоЗатратНУ3");
	
	СтруктураПолей.Вставить("СтавкаНДС"        			, "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"    			, "СчетУчетаНДС");	
	СтруктураПолей.Вставить("НДСВидОборота"        		, "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"        	, "НДСВидПоступления");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		// Движения по товарам организаций							
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(Неопределено,СтруктураШапкиДокумента, Движения, Отказ);
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Функция формирует табличный документ с печатной формой "З-9" (акт на списание запасов).
//
Функция ПечатьЗ9()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеТоваров.Номер,
	|	СписаниеТоваров.Дата КАК ДатаДокумента,
	|	СписаниеТоваров.Организация,
	|   СписаниеТоваров.СтруктурноеПодразделение,
	|	СписаниеТоваров.Склад.Представление КАК СкладПредставление,
	|	СписаниеТоваров.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	),
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследних
	|		ПО СписаниеТоваров.Склад = ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекДокумент";
				   
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);

	Если УчитыватьНДС и КорректироватьНДС Тогда
		ЗапросТовары.Текст = "
		|ВЫБРАТЬ
	  	|	СписаниеТоваров.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(СписаниеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	  	|	(-КорректировкаНДС.СуммаКорректировкиОборота - КорректировкаНДС.СуммаНДС) КАК СуммаСНДС,
		|	ВЫБОР КОГДА СписаниеТоваров.Количество <> 0 ТОГДА
		|   	(-КорректировкаНДС.СуммаКорректировкиОборота)/СписаниеТоваров.Количество
		|   ИНАЧЕ
		|       0
		|	КОНЕЦ КАК Цена,
	  	|	СписаниеТоваров.Номенклатура.Код КАК НоменклатурныйНомер,
	  	|	СписаниеТоваров.Номенклатура.Наименование КАК Наименование,	
		|	СписаниеТоваров.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
		|   СписаниеТоваров.Количество КАК Количество
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписаниеТоваровТовары.Номенклатура,
		|		СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
		|		СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	 	|		СУММА(СписаниеТоваровТовары.Количество) КАК Количество
	 	|	ИЗ
	 	|		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	 	|	ГДЕ
	 	|		СписаниеТоваровТовары.Ссылка = &ТекДокумент
	 	|
	 	|	СГРУППИРОВАТЬ ПО
	 	|		СписаниеТоваровТовары.Номенклатура,
	 	|		СписаниеТоваровТовары.Номенклатура.Код,
	 	|		СписаниеТоваровТовары.ЕдиницаИзмерения) КАК СписаниеТоваров
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|
		|	(ВЫБРАТЬ
	  	|		КорректировкаНДСКВозмещению.ТМЗ КАК ТМЗ,
	  	|		СУММА(КорректировкаНДСКВозмещению.СуммаКорректировкиОборота) КАК СуммаКорректировкиОборота,
	  	|		СУММА(КорректировкаНДСКВозмещению.СуммаНДС) КАК СуммаНДС
	  	|	ИЗ
	  	|		РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДСКВозмещению
	  	|	ГДЕ
	  	|		КорректировкаНДСКВозмещению.Регистратор = &ТекДокумент
	  	|	
	  	|	СГРУППИРОВАТЬ ПО
	  	|		КорректировкаНДСКВозмещению.ТМЗ) КАК КорректировкаНДС
		|	ПО СписаниеТоваров.Номенклатура = КорректировкаНДС.ТМЗ
		|ИТОГИ
		|	СУММА(СуммаСНДС),
		|	СУММА(Количество)
		|ПО
		|	ОБЩИЕ
		|";
		
		ВыборкаИтоги = ЗапросТовары.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
		ВыборкаИтоги.Следующий();
		ВыборкаСтрокТовары = ВыборкаИтоги.Выбрать();
	Иначе
		ЗапросТовары.Текст = 
		"ВЫБРАТЬ
		|	СписаниеТоваровТовары.Номенклатура,
		|	ВЫРАЗИТЬ(СписаниеТоваровТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,	
		|	СписаниеТоваровТовары.Номенклатура.Код КАК НоменклатурныйНомер,
	 	|	СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	 	|	СУММА(СписаниеТоваровТовары.Количество) КАК Количество
	 	|ИЗ
	 	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	 	|ГДЕ
	 	|	СписаниеТоваровТовары.Ссылка = &ТекДокумент
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	СписаниеТоваровТовары.Номенклатура,
	 	|	СписаниеТоваровТовары.Номенклатура.Код,
	 	|	СписаниеТоваровТовары.ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование
		|";
		
		ВыборкаСтрокТовары = ЗапросТовары.Выполнить().Выбрать();
		
	КонецЕсли;
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);

	Макет = ПолучитьОбщийМакет("З9");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_З9";

	//Получим области
	Шапка 				= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 		= Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 				= Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона	= Макет.ПолучитьОбласть("ОборотнаяСторона");
	Комиссия			= Макет.ПолучитьОбласть("Комиссия");
		
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.ОтветственноеЛицо, Док.ДатаДокумента);
	
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО 		 = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН    		 = СведенияОбОрганизации.РНН;
	
	Шапка.Параметры.НомерДокумента		= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ШАпка.Параметры.ДатаДок				= Формат(Док.ДатаДокумента, "ДЛФ=DD");  
	Шапка.Параметры.РасшифровкаПодписи  = Руководители.Руководитель;
	Шапка.Параметры.МОЛ					= ДанныеМОЛ.Представление;
	Шапка.Параметры.Заполнить(Док);
		
	ТабДокумент.Вывести(Шапка);
	
	// вывод заголовка таблицы
	ЗаголовокТаблицы.Параметры.Валюта = мВалютаРегламентированногоУчета;
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// вывод строк таблицы
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// Инициализация итогов в документе
	
	ИтогоКоличество = 0;
	ИтогоВсегоСНДС = 0;

	Если Не (УчитыватьНДС И КорректироватьНДС) Тогда 
		ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ЭтотОбъект);
	КонецЕсли;	
	
	НомерПП = 1;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
            ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	

		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокТовары);
        СтрокаТаблицы.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование); 
		
		Если УчитыватьНДС И КорректироватьНДС Тогда
			
			СтрокаТаблицы.Параметры.Количество = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
			СтрокаТаблицы.Параметры.Цена	   = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
			СтрокаТаблицы.Параметры.СуммаСНДС  = Формат(ВыборкаСтрокТовары.СуммаСНДС,"ЧДЦ=2");
			
		Иначе	
			Кратность = 1;
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				 ВсегоСНДС = 0;
				 Цена = 0;
			 Иначе
				 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
				 ВсегоСНДС = Цена * ВыборкаСтрокТовары.Количество;
			 КонецЕсли;

			Количество 		= ВыборкаСтрокТовары.Количество;

			СтрокаТаблицы.Параметры.Количество 		  = Формат(Количество,"ЧДЦ=3");
			СтрокаТаблицы.Параметры.СуммаСНДС         = Формат(ВсегоСНДС, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.Цена              = Формат(Цена, "ЧДЦ=2");
			СтрокаТаблицы.Параметры.НомерПП           = НомерПП;
			
			ИтогоКоличество	 = ИтогоКоличество + Количество;
			ИтогоВсегоСНДС   = ИтогоВсегоСНДС  + ВсегоСНДС;

		КонецЕсли;
		
		НомерПП = НомерПП + 1;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
        		
	КонецЦикла;
	
	// вывод итогов
	
	Если УчитыватьНДС И КорректироватьНДС Тогда
		Итого.Параметры.ИтогоКоличество = Формат(ВыборкаИтоги.Количество, "ЧДЦ=3");
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ВыборкаИтоги.СуммаСНДС, "ЧДЦ=2");
	Иначе	
		Итого.Параметры.ИтогоКоличество = Формат(ИтогоКоличество, "ЧДЦ=3");
		Итого.Параметры.ИтогоСуммаСНДС  = Формат(ИтогоВсегоСНДС, "ЧДЦ=2");
	КонецЕсли;	
		
	Итого.Параметры.Валюта = мВалютаРегламентированногоУчета;
	
	ТабДокумент.Вывести(Итого);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	//вывод оборотной стороны
	ОборотнаяСторона.Параметры.Валюта = мВалютаРегламентированногоУчета;
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	//вывод комиссии
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Материально-ответственное лицо");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДокумента);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;
	
	//Выводим список МОЛ
	//		
	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
	Комиссия.Параметры.Должность = ДанныеМОЛ.Должность;
	Комиссия.Параметры.РасшифровкаПодписи = ДанныеМОЛ.Представление;
	
	ТабДокумент.Вывести(Комиссия);
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ДвиженияРегистровПоПредставительству(ТаблицаСписанияДляПредставительства,КонтрагентОрганизации,КонтрагентПредставительства)
	
	ПроводкиБУ 					= Движения.Типовой;
	
	Для Каждого СтрокаТЗ ИЗ  ТаблицаСписанияДляПредставительства Цикл
		
		Если  СтрокаТЗ.Представительство <> КонтрагентОрганизации Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Содержание   = "Передана задолжность";
			
			Проводка.СчетДт       = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        КонтрагентОрганизации, Истина, "");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",           СтрокаТЗ.СтатьяОборотов);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);
			
			Проводка.Сумма = СтрокаТЗ.Сумма;
			
			Проводка.СчетКт = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтрокаТЗ.Представительство, Истина, "");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",           СтрокаТЗ.СтатьяОборотов);
			
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация.ГоловнаяОрганизация;
			Проводка.Содержание   = "Передана задолжность";
			
			Проводка.СчетДт       = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтрокаТЗ.Представительство, Истина, "");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",           СтрокаТЗ.СтатьяОборотов);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);
			
			Проводка.Сумма = СтрокаТЗ.Сумма;
			
			Проводка.СчетКт = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",       КонтрагентПредставительства , Истина, "");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",           СтрокаТЗ.СтатьяОборотов);
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДляПредставительства(ТаблицаПоТоварам)
	
	Запрос = Новый запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Счет",ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОбороты.Субконто1 КАК Представительство,
	|	ТиповойОбороты.Субконто2 КАК СтатьяОборотов,
	|	ТиповойОбороты.СуммаОборотДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(, , Регистратор, Счет = &счет, , , , ) КАК ТиповойОбороты
	|ГДЕ
	|	ТиповойОбороты.Регистратор = &ТекДокумент
	|";
	
	ТаблицаПредставительства = Запрос.Выполнить().Выгрузить();
	
	
	Возврат ТаблицаПредставительства;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
