////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ПериодРегистрации;
	Движение.БазовыйПериодНачало        = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.БазовыйПериодКонец		    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно					    = ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Показатель1                = ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2                = ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3                = ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4                = ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5                = ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6                = ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ОбособленноеПодразделение  = ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете   = ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет   				= ВыборкаПоСтрокамДокумента.Авторасчет;

КонецПроцедуры // ДобавитьСтрокуУдержаний()

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
		  													ИсчислениеНалоговСтруктурныхЕдиниц)

	Если ВыборкаПоТЧ.Результат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
			                                                            ИсчислениеНалоговСтруктурныхЕдиниц,
			                                                            Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;
	
	////////////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций		  
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();

	// Свойства
	Движение.Период  	      	= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
	// Измерения
	Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации	= ВыборкаПоТЧ.ПодразделениеОрганизации;		
	КонецЕсли;

	// Ресурсы
	Движение.СуммаВзаиморасчетов	= - ВыборкаПоТЧ.Результат;
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание; 
	

	////////////////////////////////////////////
	// ВыплаченныеДоходыРаботникамОрганизацийНУ		  
	
	Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.мТаблицаДвижений.Добавить();

	// Свойства
	Движение.Период  	      	= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);

	// Измерения
	Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации	= ВыборкаПоТЧ.ПодразделениеОрганизации;		
	КонецЕсли;

	// Ресурсы
	Движение.СуммаДохода			= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет расчет удержаний
Процедура Рассчитать(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	НачатьТранзакцию();
	Отказ = Ложь;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Физлицо = Неопределено Тогда
		МассивИндексыСтрокУдержаний = Неопределено;
	Иначе
		МассивИндексыСтрокУдержаний = Новый Массив();
	КонецЕсли;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	// создадим наборы записей для выполнения движений
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	// сформируем движения удержаний по данным табличной части без записи (запись делается процедурой РассчитатьЗаписиРегистраРасчета)
	ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, ФизЛицо).Выбрать();
	Пока ВыборкаПоУдержаниям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, НаборУдержания);

			Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокУдержаний.Добавить(ВыборкаПоУдержаниям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 

	// рассчитываем записи
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, Удержания, , , МассивИндексыСтрокУдержаний, КомментироватьРасчет);
	
	// Удаляем движения
	НаборУдержания.Очистить();
	НаборУдержания.Записать();
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	

КонецПроцедуры // РассчитатьУдержания()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Физлица = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("Физлица", Физлица);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Физлица = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазовыеУдержания.Физлицо,
	|	-РазовыеУдержания.Результат КАК Результат,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	РазовыеУдержания.НомерСтроки КАК НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И РазовыеУдержания.Ссылка.Проведен
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Физлицо В (&Физлица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазовыеУдержания.Физлицо,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	РазовыеУдержания.НомерСтроки,
	|	РазовыеУдержания.ВидРасчета,
	|	РазовыеУдержания.ДатаНачала,
	|	РазовыеУдержания.ДатаОкончания,
	|	РазовыеУдержания.Показатель1,
	|	РазовыеУдержания.Показатель2,
	|	РазовыеУдержания.Показатель3,
	|	РазовыеУдержания.Показатель4,
	|	РазовыеУдержания.Показатель5,
	|	РазовыеУдержания.Показатель6
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ РазовыеУдержания.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ РазовыеУдержания.Физлицо В (&Физлица))
	|	И РазовыеУдержания.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Удержания.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	
	Если ИмяМакета = "ВедомостьУдержанийФИО" Тогда
		
		ТабДокумент = ПечатьВедомость(Истина);
		
	ИначеЕсли ИмяМакета = "ВедомостьУдержанийТаб" Тогда 
		
		ТабДокумент = ПечатьВедомость(Ложь);
		
	Иначе 
		//так как нет печатных форм у документа, по умолчанию
		//ТабДокумент = Неопределено
		ТабДокумент = Неопределено;
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

// Функция формирует табличный документ с печатной формой накладной,
// 
//
// Возвращаемое значение:
//  Табличный документ - Табличный документ - печатная форма накладной
//
Функция ПечатьВедомость(УпорядочиватьПоФИО)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдержанияДок.Номер,
	               |	УдержанияДок.Дата КАК ДатаДокумента,
	               |	УдержанияДок.Организация,
	               |	УдержанияДок.Ответственный.ФизЛицо
	               |ИЗ
	               |	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций КАК УдержанияДок
	               |ГДЕ
	               |	УдержанияДок.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПоУдержаниям = Новый Запрос();
	ЗапросПоУдержаниям.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросПоУдержаниям.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоУдержаниям.УстановитьПараметр("Дата", Дата);
	ЗапросПоУдержаниям.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ЗапросПоУдержаниям.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ЗапросПоУдержаниям.УстановитьПараметр("Увольнение", 		Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	ЗапросПоУдержаниям.Текст = "ВЫБРАТЬ
	                           |	РазовыеУдержания.Физлицо КАК Физлицо
	                           |ПОМЕСТИТЬ ВТ_ФизЛица
	                           |ИЗ
	                           |	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	                           |ГДЕ
	                           |	РазовыеУдержания.Ссылка = &ТекущийДокумент
							   |	И НЕ РазовыеУдержания.Сторно
	                           |
	                           |ИНДЕКСИРОВАТЬ ПО
	                           |	Физлицо";
	ЗапросПоУдержаниям.Выполнить();	
	
	
	ЗапросПоУдержаниям.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазовыеУдержания.ВидРасчета,
	|	СУММА(РазовыеУдержания.Результат) КАК Сумма,
    |	ВЫБОР 
	|		КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
	|			ТОГДА РазовыеУдержания.Физлицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
	|	КОНЕЦ КАК Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Код КАК Код
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, Физлицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТ_ФизЛица)) КАК ФИОФизЛицСрезПоследних
	|		ПО РазовыеУдержания.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|								РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|								МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|							ИЗ
	|								РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|													&Дата, 
	|													Организация = &ГоловнаяОрганизация 
	|													И (Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
	|												 	И Сотрудник.Физлицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТ_ФизЛица)
	|													И ПричинаИзмененияСостояния <> &Увольнение
	|												) КАК РаботникиОрганизации
	|							СГРУППИРОВАТЬ ПО
	|								РаботникиОрганизации.Сотрудник.ФизЛицо) КАК РаботникиОрганизацииСрезПоследних
	|			ПО РазовыеУдержания.ФизЛицо = РаботникиОрганизацииСрезПоследних.ФизЛицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО РаботникиОрганизацииСрезПоследних.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|				И РаботникиОрганизацииСрезПоследних.Период = РаботникиОрганизации.Период
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация 
	|				И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
	|               И РаботникиОрганизации.ПричинаИзмененияСостояния <> &Увольнение
	|ГДЕ
	|	РазовыеУдержания.Ссылка = &ТекущийДокумент
	|	И НЕ РазовыеУдержания.Сторно
	|
	|СГРУППИРОВАТЬ ПО 
	|	РазовыеУдержания.ФизЛицо,
	|	ВЫБОР 
	|		КОГДА (ФИОФизЛицСрезПоследних.Фамилия) ЕСТЬ NULL  
	|			ТОГДА РазовыеУдержания.Физлицо.Наименование 
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество 
	|	КОНЕЦ,
	|	РаботникиОрганизации.Сотрудник.Код,
	|	РазовыеУдержания.ВидРасчета";
							   
	Если УпорядочиватьПоФИО Тогда 
		ЗапросПоУдержаниям.Текст = ЗапросПоУдержаниям.Текст + "
	                           |УПОРЯДОЧИТЬ ПО
	                           |	Сотрудник";
    Иначе 
 		ЗапросПоУдержаниям.Текст = ЗапросПоУдержаниям.Текст + "
	                           |УПОРЯДОЧИТЬ ПО
	                           |	Код";
	КонецЕсли;							   
	
	ВыборкаСтрок = ЗапросПоУдержаниям.Выполнить().Выгрузить();
	
	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаСтрок.Количество();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РазовыеУдержания_Ведомость";
	Макет       = ПолучитьМакет("ВедомостьУдержаний");
	
	
	ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогПоСтранице	= Макет.ПолучитьОбласть("ИтогПоЛисту");
	ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подписи");
	ОбластьМакетаШапка			= Макет.ПолучитьОбласть("ШапкаТаблицы");
		
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
	ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
	
	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ТекстЗаголовок = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Регистрация разовых удержаний работников ");
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; ИтогоПоВедомости = 0;
	Для Каждого ВыборкаСтрокРаб Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокРаб) + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаб);
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакета.Параметры.НомерСтроки = ВыведеноСтрок;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если НЕ ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = НЕ ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
			ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ВыведеноСтраниц = ВыведеноСтраниц + 1;
			ИтогоНаСтранице = 0;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаСтрокРаб.Сумма;
		ИтогоПоВедомости = ИтогоПоВедомости + ВыборкаСтрокРаб.Сумма;		
				
	КонецЦикла;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента, Шапка.ОтветственныйФизЛицо);
	
	ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ВыборкаСтрок.Итог("Сумма");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Руководитель 		= Руководители.Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер	= Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ВедомостьСоставил	= Руководители.Исполнитель;
	 
	ТабДокумент.Вывести(ОбластьМакета); 

	Возврат ТабДокумент;	
	
КонецФункции // ПечатьНакладная()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ВедомостьУдержанийФИО, ВедомостьУдержанийТаб","Ведомость удержаний (по ФИО работников)", "Ведомость удержаний (по табельным номерам)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
  	Запрос.УстановитьПараметр("Организация", 		Организация);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегистрацияРазовыхУдержанийРаботниковОрганизации.Дата,
	               |	РегистрацияРазовыхУдержанийРаботниковОрганизации.ПериодРегистрации,
	               |	РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация,
	               |	ВЫБОР
	               |		КОГДА РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ТОГДА РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация
	               |		ИНАЧЕ РегистрацияРазовыхУдержанийРаботниковОрганизации.Организация.ГоловнаяОрганизация
	               |	КОНЕЦ КАК ГоловнаяОрганизация,
	               |	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоСтруктурнымЕдиницам,
	               |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.РаспределятьНалогиПоПодразделениямОрганизаций
	               |ИЗ
	               |	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций КАК РегистрацияРазовыхУдержанийРаботниковОрганизации,
	               |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодРегистрации, Организация = &Организация) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	               |ГДЕ
	               |	РегистрацияРазовыхУдержанийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, ФизЛица = Неопределено)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ПустойСпособБУ", Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамФизЛица", ФизЛица);

	ПериодыФизЛицаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо,
	|	&ПериодРегистрации КАК Период
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания
	|ГДЕ
	|	Ссылка = &ДокументСсылка
	|	" + ?(ФизЛица <> Неопределено, "И ФизЛицо В (&парамФизЛица)", "");

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, ВыборкаПоШапкеДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+ "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.ФизЛицо
	|	
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + ПериодыФизЛицаТекст + ") КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ПериодРегистрации,
	|			Организация = &ГоловнаяОрганизация
	|			И Сотрудник.ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТ_СписокФизЛиц КАК СписокФизЛиц)
	|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоследнихДвижений.ФизЛицо,
	|	ДатыПоследнихДвижений.Период,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР 
	|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ) >= 0 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	КОНЕЦ КАК ПричинаИзмененияСостояния
	|		
	|ПОМЕСТИТЬ ВТ_РаботникиОрганизацииАктуальные
	|ИЗ
	|	ВТ_ДатыПоследнихДвижений КАК ДатыПоследнихДвижений
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|			И ДатыПоследнихДвижений.Период = РаботникиОрганизации.Период
	|			И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДвижений.ФизЛицо,
	|	ДатыПоследнихДвижений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатыПоследнихДвижений.ФизЛицо
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ДОБАВИТЬКДАТЕ(МАКСИМУМ(ДоговорникиОрганизации.ДатаОкончания), ДЕНЬ, 1) КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ДоговорникиОрганизации.ДатаОкончания) < &ПериодРегистрации
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|	КОНЕЦ КАК ПричинаИзмененияСостояния
	|	
	|ПОМЕСТИТЬ ВТ_ДоговорникиОрганизацииАктуальные
	|ИЗ
	|	РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК СписокФизЛиц
	|		ПО ДоговорникиОрганизации.Сотрудник.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	ДоговорникиОрганизации.Организация = &Организация
	|	И ДоговорникиОрганизации.ДатаНачала <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорникиОрганизации.Сотрудник.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорникиОрганизации.Сотрудник.ФизЛицо
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ДатаНачала,
	|	ВЫБОР 
	|		КОГДА СтрокиУдержания.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиУдержания.НомерСтроки,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.Физлицо,
	|	СтрокиУдержания.Физлицо.Наименование КАК ФизЛицоНаименование,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.СпособОтраженияВБухучете = &ПустойСпособБУ
	|			ТОГДА СтрокиУдержания.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ СтрокиУдержания.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	СтрокиУдержания.Авторасчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|		ИНАЧЕ ЕСТЬNULL(РаботникиОрганизации.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|	КОНЕЦ КАК ПричинаИзмененияСостояния,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ЕСТЬNULL(ДоговорникиОрганизации.ДатаПоследнегоДвиженияПоРаботнику, РаботникиОрганизации.Период)
	|		ИНАЧЕ ЕСТЬNULL(РаботникиОрганизации.Период, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ПричинаИзмененияСостояния, ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ (ДоговорникиОрганизации.ДатаПоследнегоДвиженияПоРаботнику ЕСТЬ NULL)
	|						ТОГДА ""Договорник""
	|					ИНАЧЕ ВЫБОР 
	|							КОГДА НЕ (РаботникиОрганизации.Период ЕСТЬ NULL)
	|								ТОГДА ""Работник""
	|							ИНАЧЕ ""Неопределено""
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР 
	|			КОГДА НЕ (РаботникиОрганизации.Период ЕСТЬ NULL)
	|				ТОГДА ""Работник""
	|			ИНАЧЕ ""Неопределено""
	|		КОНЕЦ 
	|	КОНЕЦ КАК СтатусФизЛица
	|";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И НЕ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда 
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";			
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Запрос.Текст = Запрос.Текст + ",		
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|				И МестоРаботы.ПодразделениеОрганизации.Владелец = &Организация
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации";	
	Иначе
		Запрос.Текст = Запрос.Текст + ",		
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК СтрокиУдержания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботникиОрганизацииАктуальные КАК РаботникиОрганизации
	|		ПО СтрокиУдержания.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорникиОрганизацииАктуальные КАК ДоговорникиОрганизации
	|		ПО СтрокиУдержания.ФизЛицо = ДоговорникиОрганизации.ФизЛицо
	|";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО СтрокиУдержания.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "	
	|
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|	" + ?(ФизЛица <> Неопределено, "И СтрокиУдержания.ФизЛицо В (&парамФизЛица)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиУдержания.НомерСтроки
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, в которой выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц, в котором выполняются удержания!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
	КонецЕсли;

	// Предупредим пользователя, если начисления делаются уже уволенном работнику
	Если ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику) Тогда
			ДатаНачала = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Если ВыборкаПоСтрокамДокумента.СтатусФизЛица = "Договорник" Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ДатаНачала, "ДЛФ=DD") + " договор с " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже прекратил действие (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Иначе
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ДатаНачала, "ДЛФ=DD") + " работник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			КонецЕсли;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Удержания);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	КраткийСоставВидовРасчетаДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставВидовРасчетаДокумента(Удержания);
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ);

	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// Удержания

			// получим реквизиты табличной части
			ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоУдержаниям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуУдержаний(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Движения.УдержанияРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
			КонецЦикла;

			Если Не Отказ Тогда
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				Конеццикла;
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
