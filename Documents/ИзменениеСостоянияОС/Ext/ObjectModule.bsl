////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверим на виды операций, которые не могут использоваться в данном документе КАТЕГОРИЧЕСКИ!
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету  тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <Принятие к учету> 
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	// сначала проверис все ОС - приняты ли они к учету в данной организации
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если НЕ СтрокаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> не отражалось в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;	
	
	// если хоть один ОС не принимается к учету, то дальше не идем
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		//если снимаем начисление амортизации, то должны проверить ранее устанавливался ли признак начисления
		Если СтруктураШапкиДокумента.ИзменениеНачисленияАмортизации И
			(Не СтрокаОС.НачислятьАмортизацию) И (Не СтрокаОС.НачислятьАмортизациюСтарый) Тогда
			Сообщить("Для основного средства <" + СтрокаОС.ОсновноеСредство + "> код <" + СокрЛП(СтрокаОС.Код) + " ранее не устанавливался признак начисления амортизациии.");
			Отказ = Истина;	
		КонецЕсли;	
		
		// если снимаем с налогов, то должны проверить а являлся ли ОС объектом обложения по тому или иному налогу
		Если СтруктураШапкиДокумента.ИзменениеИмущественногоНалога И 
			(Не СтрокаОС.ОбъектИмущественногоНалога) И (Не СтрокаОС.ОбъектИмущественногоНалогаСтарый) Тогда
			Сообщить("Основное средство <" + СтрокаОС.ОсновноеСредство + "> код <" + СокрЛП(СтрокаОС.Код) + "> не является объектом обложения имущественным налогом в данной организации.");
			Отказ = Истина;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ИзменениеТранспортногоНалога И 
			(Не СтрокаОС.ОбъектТранспортногоНалога) И (Не СтрокаОС.ОбъектТранспортногоНалогаСтарый) Тогда
			Сообщить("Основное средство <" + СтрокаОС.ОсновноеСредство + "> код <" + СокрЛП(СтрокаОС.Код) + "> не является объектом обложения транспортным налогом в данной организации.");
			Отказ = Истина;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ИзменениеЗемельногоНалога И 
			(Не СтрокаОС.ОбъектЗемельногоНалога) И (Не СтрокаОС.ОбъектЗемельногоНалогаСтарый) Тогда
			Сообщить("Основное средство <" + СтрокаОС.ОсновноеСредство + "> код <" + СокрЛП(СтрокаОС.Код) + "> не является объектом обложения земельным налогом в данной организации.");
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	ДатаДока = СтруктураШапкиДокумента.Дата;

	ВидыОперацийОтражающиесяВРегистреСостояний = Новый Соответствие();
	ВидыОперацийОтражающиесяВРегистреСостояний.Вставить(Перечисления.ВидыСобытийОС.ПринятиеКУчету, Перечисления.ВидыСостоянийОС.ПринятоКУчету);
	ВидыОперацийОтражающиесяВРегистреСостояний.Вставить(Перечисления.ВидыСобытийОС.Передача, Перечисления.ВидыСостоянийОС.СнятоСУчета);
	ВидыОперацийОтражающиесяВРегистреСостояний.Вставить(Перечисления.ВидыСобытийОС.Списание, Перечисления.ВидыСостоянийОС.СнятоСУчета);

	//проводки
	ОперацииОСБух            = Движения.СобытияОСОрганизаций;
	
	//начисление амортизации
	НачислениеАмортизацииБух 	= Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	
	Если не ВидыОперацийОтражающиесяВРегистреСостояний.Получить(СтруктураШапкиДокумента.ВидСобытияОС) = Неопределено тогда
		СостоянияОС = Движения.СостоянияОСОрганизаций;
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		Движение = ОперацииОСБух.Добавить();

		Движение.Период          		  = ДатаДока;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация     		  = СтруктураШапкиДокумента.Организация;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		Движение.Событие           		  = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента  		  = СтруктураШапкиДокумента.Номер;

		Если не ВидыОперацийОтражающиесяВРегистреСостояний.Получить(СтруктураШапкиДокумента.ВидСобытияОС) = Неопределено тогда

			Движение = СостоянияОС.Добавить();

			Движение.Период			  		  = ДатаДока;
			Движение.ДатаСостояния  		  = ДатаДока;
			Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация    		  = СтруктураШапкиДокумента.Организация;
			Движение.Состояние      		  = ВидыОперацийОтражающиесяВРегистреСостояний.Получить(СтруктураШапкиДокумента.ВидСобытияОС);
            Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
			
		КонецЕсли;

		// движения по амортизации
		Если СтруктураШапкиДокумента.ИзменениеНачисленияАмортизации Тогда

			Движение = НачислениеАмортизацииБух.Добавить();
			
			Движение.Период             	  = ДатаДока;
			Движение.ОсновноеСредство   	  = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация        	  = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию	  = СтрокаТЧ.НачислятьАмортизацию;
			Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЦикла;

	Если не ВидыОперацийОтражающиесяВРегистреСостояний.Получить(СтруктураШапкиДокумента.ВидСобытияОС) = Неопределено тогда
		УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Дата, СтруктураШапкиДокумента.Организация, СостоянияОС,Отказ,Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ДвиженияПоРегистрам

// Отражение перемещения основного средства 
// в учете по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	Если СтруктураШапкиДокумента.ИзменениеИмущественногоНалога Или
		СтруктураШапкиДокумента.ИзменениеТранспортногоНалога Или
		СтруктураШапкиДокумента.ИзменениеЗемельногоНалога Тогда
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			// движения по налогу на имущество
			Если СтруктураШапкиДокумента.ИзменениеИмущественногоНалога Тогда
				Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
				Движение.Период 				= СтруктураШапкиДокумента.Дата;
				Движение.Организация 			= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
				Движение.НачислятьНалог 		= СтрокаОС.ОбъектИмущественногоНалога;				
					
				Если СтрокаОС.ОбъектИмущественногоНалога Тогда
					// подразделение для определения структурной единицы берем из регистра "МестонахождениеОС"
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.Местонахождение,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
                        СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
						Движение.СтруктурнаяЕдиница = ?(СтрокаОС.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.Местонахождение, СПДокумента);								        						
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;
				Иначе
					// при снятии с налогов данные берем из прежних записей.
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

						Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога;
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;					
				КонецЕсли;	
			КонецЕсли;
			
			// движения по налогу на транспорт
			Если СтруктураШапкиДокумента.ИзменениеТранспортногоНалога Тогда
				
				Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
				Движение.Период 				= СтруктураШапкиДокумента.Дата;
				Движение.Организация 			= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
				
				Движение.НачислятьНалог 		= СтрокаОС.ОбъектТранспортногоНалога;				
					
				Если СтрокаОС.ОбъектТранспортногоНалога Тогда
					// подразделение для определения структурной единицы берем из регистра "МестонахождениеОС"
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.Местонахождение,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

						СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
						Движение.СтруктурнаяЕдиница = ?(СтрокаОС.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.Местонахождение, СПДокумента);								        						
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;
				Иначе
					// при снятии с налогов данные берем из прежних записей.
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

						Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога;
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			// движения по налогу на землю
			Если СтруктураШапкиДокумента.ИзменениеЗемельногоНалога Тогда
				Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
				Движение.Период 				= СтруктураШапкиДокумента.Дата;
				Движение.Организация 			= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
				
				Движение.НачислятьНалог 		= СтрокаОС.ОбъектЗемельногоНалога;				
					
				Если СтрокаОС.ОбъектЗемельногоНалога Тогда
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.Местонахождение,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

						СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
						Движение.СтруктурнаяЕдиница = ?(СтрокаОС.Местонахождение.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.Местонахождение, СПДокумента);								        						
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;
				Иначе
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

						Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога;
					Иначе
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;	 
		
	КонецЕсли;
	
КонецПроцедуры	// ДвиженияПоРегистрамМестныхНалогов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
  		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя изменять состояние по группе основных средств",СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 

		СобытиеОС = УправлениеВнеоборотнымиАктивами.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчету);

		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ)

	Заголовок = "";

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Запрос = Новый Запрос();
	
	// Выборка строк табличной части
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменениеСостоянияОСОС.ОсновноеСредство
	|ИЗ
	|	Документ.ИзменениеСостоянияОС.ОС КАК ИзменениеСостоянияОСОС
	|ГДЕ
	|	ИзменениеСостоянияОСОС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",      	Ссылка);
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();	
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("СписокОС",	 	СписокОС);
	Запрос.УстановитьПараметр("Организация",	 	Организация);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзменениеСостоянияОСОС.НомерСтроки,
	               |	ИзменениеСостоянияОСОС.ОсновноеСредство,
	               |	ИзменениеСостоянияОСОС.ОбъектИмущественногоНалога,
	               |	ИзменениеСостоянияОСОС.ОбъектТранспортногоНалога,
	               |	ИзменениеСостоянияОСОС.ОбъектЗемельногоНалога,
	               |	ИзменениеСостоянияОСОС.НачислятьАмортизацию,
	               |	ЕСТЬNULL(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектИмущественногоНалогаСтарый,
	               |	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога,
	               |	ЕСТЬNULL(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектТранспортногоНалогаСтарый,
	               |	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	               |	ЕСТЬNULL(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектЗемельногоНалогаСтарый,
	               |	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
	               |	ВЫБОР
	               |		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	               |	ЕСТЬNULL(НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюСтарый,
	               |	ИзменениеСостоянияОСОС.ОсновноеСредство.Код КАК Код
	               |ИЗ
	               |	Документ.ИзменениеСостоянияОС.ОС КАК ИзменениеСостоянияОСОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	               |				&ДатаДокумента,
	               |				Организация = &Организация
	               |					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	               |				&ДатаДокумента,
	               |				ОбъектНалогообложения В (&СписокОС)
	               |					И Налогоплательщик = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	               |				&ДатаДокумента,
	               |				ОбъектНалогообложения В (&СписокОС)
	               |					И Налогоплательщик = &Организация) КАК ОбъектыЗемельногоНалогаСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	               |				&ДатаДокумента,
	               |				ОбъектНалогообложения В (&СписокОС)
	               |					И Налогоплательщик = &Организация) КАК ОбъектыТранспортногоНалогаСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |				&ДатаДокумента,
	               |				ОсновноеСредство В (&СписокОС)
	               |					И Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |				&ДатаДокумента,
	               |				ОсновноеСредство В (&СписокОС)
	               |					И Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ПО ИзменениеСостоянияОСОС.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |ГДЕ
	               |	ИзменениеСостоянияОСОС.Ссылка = &Ссылка";
				   
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
    
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Проверим, достаточно ли данных в таблице по ОС
	ПроверитьТаблицуПоОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиОС(Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();