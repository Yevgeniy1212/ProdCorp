Перем мОсновнойГрафикРаботыПредприятия Экспорт;


// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//                       по которым выполняется заполнение документа
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(ПостроительЗапроса = НеОпределено) Экспорт
 
	Резервы.Очистить();
			
	Возврат ВыполнитьАвтозаполнение();
	
КонецФункции // Автозаполнение()

Функция ВыполнитьАвтозаполнение(Физлицо = Неопределено) Экспорт
	НачатьТранзакцию();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код,
		|	СУММА(ВЫБОР
		|			КОГДА ЦС_ОтпускаОрганизацийОборотыПриход.ПериодРегистрации = &НачалоГода
		|				ТОГДА ЕСТЬNULL(ЦС_ОтпускаОрганизацийОборотыПриход.КалендарныхДнейОборот, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаВЭтомГоду,
		|	СУММА(ВЫБОР
		|			КОГДА ЦС_ОтпускаОрганизацийОборотыПриход.ПериодРегистрации < &НачалоГода
		|				ТОГДА ЕСТЬNULL(ЦС_ОтпускаОрганизацийОборотыПриход.КалендарныхДнейОборот, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаВПрошломПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ЦС_ОтпускаОрганизацийОборотыРасход.ПериодРегистрации = &НачалоГода
		|				ТОГДА ЕСТЬNULL(ЦС_ОтпускаОрганизацийОборотыРасход.КалендарныхДнейОборот, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаВЭтомГодуЗачтено,
		|	СУММА(ВЫБОР
		|			КОГДА ЦС_ОтпускаОрганизацийОборотыРасход.ПериодРегистрации < &НачалоГода
		|				ТОГДА ЕСТЬNULL(ЦС_ОтпускаОрганизацийОборотыРасход.КалендарныхДнейОборот, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДнейОтпускаВПрошломПериодеЗачтено,
		|	МАКСИМУМ(30) КАК НормаДнейОтпуска,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	бит_ЗакреплениеПодразделенийЗаСчетамиРасходовСрезПоследних.СчетРасходов
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, ) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЦС_ОтпускаОрганизаций.Обороты(
		|				,
		|				,
		|				Период,
		|				ВидСтроки = &Приход
		|					И ПериодРегистрации <= &КонецПериода) КАК ЦС_ОтпускаОрганизацийОборотыПриход
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ЦС_ОтпускаОрганизацийОборотыПриход.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЦС_ОтпускаОрганизаций.Обороты(
		|				,
		|				,
		|				Период,
		|				ВидСтроки = &Расход
		|					И ПериодРегистрации <= &КонецПериода) КАК ЦС_ОтпускаОрганизацийОборотыРасход
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ЦС_ОтпускаОрганизацийОборотыРасход.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЗакреплениеПодразделенийЗаСчетамиРасходов.СрезПоследних(&КонецПериода, ) КАК бит_ЗакреплениеПодразделенийЗаСчетамиРасходовСрезПоследних
		|		ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = бит_ЗакреплениеПодразделенийЗаСчетамиРасходовСрезПоследних.Подразделение
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &ПричинаУвольнение
		|	И РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	бит_ЗакреплениеПодразделенийЗаСчетамиРасходовСрезПоследних.СчетРасходов
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование";

	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Приход", перечисления.ВидыДвиженийПриходРасход.Приход);
	Запрос.УстановитьПараметр("Расход", перечисления.ВидыДвиженийПриходРасход.Расход);
	Запрос.УстановитьПараметр("ПричинаУвольнение", перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Если Физлицо = Неопределено тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Физлицо = &физлицо"," ");
	КонецЕсли;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отпуск = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп;
	Пока Выборка.Следующий()Цикл
		
		Если Выборка.НормаДнейОтпуска - Выборка.ДнейОтпускаВЭтомГоду<=0 тогда
			
			
				Продолжить;	
			
			
		КонецЕсли;
		
		НС = резервы.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
		НС.ДнейКРезервуВЭтомГоду = НС.НормаДнейОтпуска-НС.ДнейОтпускаВЭтомГоду-НС.ДнейОтпускаВЭтомГодуЗачтено;
		НС.ДнейКРезервуЗаПрошлыйПериод = НС.ДнейОтпускаВПрошломПериоде-НС.ДнейОтпускаВПрошломПериодеЗачтено;
		НС.ВидРасчета = Отпуск;
		
	КонецЦикла;
	
	РассчитатьСреднийЗаработок(Физлицо);
	
	ПроставитьСреднююЗП(Физлицо);
	
		    	
	ЗафиксироватьТранзакцию();
	    	
КонецФункции

Процедура ПроставитьСреднююЗП(Физлицо = Неопределено) Экспорт
	
	Для Каждого СтрокаТЧ из резервы Цикл 
		Если Физлицо<>Неопределено и СтрокаТЧ.Физлицо <> Физлицо тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = новый Структура("ФизЛицо,Приказ",СтрокаТЧ.Физлицо,Строкатч.Приказ);
		Строки = РасчетСреднего.НайтиСтроки(СтруктураПоиска);
		СредЗП = 0;
		Дней = 0;
		Результат = 0;
		
		Для Каждого ЭлтМассива из Строки Цикл
			Дней = Дней + ЭлтМассива.отработанодней;
			Результат = результат + ЭлтМассива.Результат;
		КонецЦикла;
		если дней = 0 тогда
			строкатч.СредняяЗаработнаяПлата = 0 
		иначе
			СтрокаТЧ.СредняяЗаработнаяПлата = Результат / Дней;
		КонецЕсли;	
		строкатч.Результат = строкатч.СредняяЗаработнаяПлата*строкатч.ДнейКРезервуВЭтомГоду + строкатч.СредняяЗаработнаяПлата*строкатч.ДнейКРезервуЗаПрошлыйПериод;
		строкатч.СуммаСоцНалога = (строкатч.Результат-строкатч.Результат*0.1)* 0.095;
		Если строкатч.Результат*0.015<6363.9 Тогда
		строкатч.СуммаОСМС =Окр(строкатч.Результат*0.015, 0) Иначе
		строкатч.СуммаОСМС=6364
		КонецЕсли;
		КонецЦикла;
КонецПроцедуры

Процедура РассчитатьСреднийЗаработок(Физлицо = Неопределено)  Экспорт
	
	УчетнаяПолитика = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
		
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	НаборДополнительныеНачисления = Неопределено;
	Если Физлицо = Неопределено тогда
		РасчетСреднего.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура("ФизЛицо",Физлицо);
		МассивСтрок = РасчетСреднего.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Элт Из МассивСтрок Цикл
			РасчетСреднего.Удалить(Элт);	
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Резервы Цикл
		Если Физлицо<>Неопределено и СтрокаТЧ.Физлицо <> Физлицо тогда
			Продолжить;
		КонецЕсли;
		НаборОсновныеНачисления.Очистить();
		СформироватьДвиженияПоНачислениям(Ссылка, НаборОсновныеНачисления, НаборДополнительныеНачисления,СтрокаТЧ);
		
		НаборОсновныеНачисления.Записать();
		
		НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
		
		ПроведениеРасчетов.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего, УчетнаяПолитика);
		//,СтрокаТЧ.Физлицо,СтрокаТЧ.Приказ);
		Для Каждого строкаНабора из НаборРасчетСреднего Цикл
			НС = РасчетСреднего.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаНабора);
		КонецЦикла;
		
		
	КонецЦикла;
	
	РасчетСреднего.Сортировать("ФизЛицо, Приказ, БазовыйПериодКонец, ВидРасчета, ЧислоМесяцев, ДатаНачалаПериодаПремии");
	
	
	ПоЗаработку = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработку;
	ПоЗаработкуБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБезИндексации;
	ИспользоватьПоЗаработкуБезИндексации = ПоЗаработкуБезИндексации.БазовыеВидыРасчета.Количество() > 0;	
	ПоЗаработкуБЛ = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ПоЗаработкуБЛБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛБезИндексации;
	ИспользоватьПоЗаработкуБЛБезИндексации = ПоЗаработкуБЛБезИндексации.БазовыеВидыРасчета.Количество() > 0;	
	ПоЗаработкуОтпуск = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпуск;
	ПоЗаработкуОтпускБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуОтпускБезИндексации;
	ИспользоватьПоЗаработкуОтпускБезИндексации = ПоЗаработкуОтпускБезИндексации.БазовыеВидыРасчета.Количество() > 0;	
	ПоПремиям = ПланыВидовРасчета.СреднийЗаработок.ПоПремиям;
	ИспользоватьПоПремиям = ПоПремиям.БазовыеВидыРасчета.Количество() > 0;
	ПоПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБезИндексации;
	ИспользоватьПоПремиямБезИндексации = ПоПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;
	ПоФиксПремиямБезИндексации = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБезИндексации;
	ИспользоватьПоФиксПремиямБезИндексации = ПоФиксПремиямБезИндексации.БазовыеВидыРасчета.Количество() > 0;

	                                                            
	// для видов расчета среднего заработка БезИндексации установим коэффициент индексации = 1
	Если ИспользоватьПоЗаработкуБезИндексации
		Или ИспользоватьПоЗаработкуБЛБезИндексации
		Или ИспользоватьПоЗаработкуОтпускБезИндексации
		Или ИспользоватьПоПремиямБезИндексации
		Или ИспользоватьПоФиксПремиямБезИндексации Тогда
		
		Для Каждого СтрокаТЗ Из РасчетСреднего Цикл
			Если СтрокаТЗ.ВидРасчета = ПоЗаработкуБезИндексации
				Или СтрокаТЗ.ВидРасчета = ПоЗаработкуБЛБезИндексации
				Или СтрокаТЗ.ВидРасчета = ПоЗаработкуОтпускБезИндексации
				Или СтрокаТЗ.ВидРасчета = ПоПремиямБезИндексации
				Или СтрокаТЗ.ВидРасчета = ПоФиксПремиямБезИндексации Тогда
				СтрокаТЗ.КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	

	
	//Запишем результат
//	НаборЗаписей.Записать();
	
	
	
	
	НаборРасчетСреднего.Очистить();
	НаборОсновныеНачисления.Очистить();
	
	НаборРасчетСреднего.Записать();
	НаборОсновныеНачисления.Записать();
	
	
	
КонецПроцедуры

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления,ВыборкаОтпуска) Экспорт 
	
	ДатаНачалаСобытия = ПолучитьДатуНачалаСобытия();
	
	// сформируем записи начислений отпускам
	ТЗОсновныеНачисления = НаборОсновныеНачисления.Выгрузить();
	ТЗОсновныеНачисления.Очистить();
	
	ТЗ = резервы.Выгрузить();
	
		ТекущаяДатаНачала = НачалоМесяца(Дата);
		ТекущаяДатаОкончания = КонецМесяца(ТекущаяДатаНачала);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			// строка движений
			
			Движение = ТЗОсновныеНачисления.Добавить();
			
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
			
			
			// Свойства
			Движение.ПериодРегистрации          = Дата;
			Движение.ПериодДействияНачало       = НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец 	    = КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета				    = ВыборкаОтпуска.ВидРасчета;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаОтпуска.ФизЛицо;
			Движение.Сотрудник                  = ВыборкаОтпуска.Сотрудник;

			//Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ПоддержкаВнутреннегоСовместительства Тогда
			//	Движение.Приказ						= ВыборкаОтпуска.Приказ;
			//КонецЕсли;
			Движение.Организация				= ВыборкаПоШапкеДокумента.Организация.головнаяорганизация;
			
			// Реквизиты
			Движение.Показатель1				= 100;
			Движение.КоэффициентИндексации		= 1;
			//	Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			//Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
			//	Движение.ГрафикРаботы  	        = ВыборкаПоШапкеДокумента.ГрафикРаботы;
			//Иначе 
			Движение.ГрафикРаботы  	        = мОсновнойГрафикРаботыПредприятия;
			//КонецЕсли;
			Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= НачалоГода(Дата);
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= КонецДня(КонецГода(Дата));
			Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
			//Движение.СпособОтраженияВБухучете	= ВыборкаОтпуска.СпособОтраженияВБухучете;
			Движение.Авторасчет					= Истина;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), КонецДня(КонецГода(Дата)));
			
		КонецЦикла;

	Для Каждого СтрокаТЧ Из ТЗОсновныеНачисления Цикл
		Если ДатаНачалаСобытия >= ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
			
			// если уже действует правила расчета с учетом коэффициента индексации
			ПроведениеРасчетов.РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(ВыборкаПоШапкеДокумента.организация, 
																					СтрокаТЧ.ФизЛицо, 
																					ТЗОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	
	// перепишем в набор, не затирая уже существующие там записи
	// принудительно установим для всех строк таблицы Активность = Истина
	ТЗОсновныеНачисления.ЗаполнитьЗначения(Истина, "Активность");
	Для Каждого СтрокаТЗ Из ТЗОсновныеНачисления Цикл
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗ);
	КонецЦикла;
	


//ДобавитьСтрокуДополнительныхНачислений(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация]);

КонецПроцедуры // СформироватьДвиженияПоНачислениям()


Функция ПолучитьДатуНачалаСобытия() Экспорт

	возврат НачалоМесяца(Дата);
КонецФункции // ПолучитьДатуНачалаСобытия()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	если ОбменДанными.Загрузка = Истина тогда
		Возврат
	КонецЕсли;
	ПериодРегистрации = НачалоМесяца(Дата);
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ТСчетДт = ПланыСчетов.Типовой.ПрочиеРасходыСоб;
	ТСчетКт = планысчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам;
	НСчетДт = ПланыСчетов.Налоговый.ПрочиеРасходы;
	НСчетКт = планысчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам;
	
	//Статья = справочники.СтатьиЗатрат.НайтиПокоду("ПР0000069"); //+++ Oleg SmartT. 2021-02-26
	Резерв = Справочники.Резервы.НайтиПоКоду("000000001");
	
	Движения.Типовой.Очистить();
	Движения.Типовой.Записывать = Истина;
	Движения.Налоговый.Очистить();
	Движения.Налоговый.Записывать = Истина;
	Движения.ЦС_РезервыОтпусков.Очистить();
	Движения.ЦС_РезервыОтпусков.Записывать = Истина;
	
	
	Для Каждого строкатч Из Резервы цикл
		
		Если строкатч.Результат <> 0 тогда
			
			Проводка 						= движения.типовой.Добавить();
			Проводка.Период 				= Дата;
			Проводка.Организация		 	= Организация;
					
			//Проводка.СчетДт 				= ТСчетДт;
			
			Если строкатч.СчетРасходов = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
				Проводка.СчетДт 				= ТСчетДт;
				НалСчет = ТСчетДт.СчетНУ;
			Иначе
				Проводка.СчетДт 				= строкатч.СчетРасходов;
				НалСчет = строкатч.СчетРасходов.СчетНУ;
			КонецЕсли;

			//+++ Oleg SmartT. 2021-02-11		
			Если строкатч.СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка() Тогда
				Статья = справочники.СтатьиЗатрат.НайтиПокоду("ПР0000069");
			Иначе
				Статья = строкатч.СтатьяЗатрат;
			КонецЕсли;
			//--- Oleg SmartT. 2021-02-11	
			
			Проводка.СчетКт 				= ТСчетКт;
			Проводка.ИсточникФинансирования = Справочники.ИсточникиФинансирования.СобственныеСредства;
			Проводка.Сумма 					= Строкатч.Результат+строкатч.СуммаСоцНалога+строкатч.СуммаСоцОтчислений+строкатч.СуммаОСМС;
			Проводка.Содержание 			= "Создание резерва по отпускам";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,Проводка.СубконтоДт, 1, Статья);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.Субконтокт, 1, Строкатч.Физлицо);
			
			
			Проводка 						= движения.Налоговый.Добавить();
			Проводка.Период 				= Дата;
			Проводка.Организация		 	= Организация;
			
			Проводка.СчетДт 				= НСчетДт;
			Проводка.СчетКт 				= НСчетКт;
			Проводка.ИсточникФинансирования = справочники.ИсточникиФинансирования.СобственныеСредства;
			Проводка.Сумма 					= строкатч.Результат;
			Проводка.Содержание 			= "Создание резерва по отпускам";
			
			Проводка.ВидУчетаДт	= Справочники.ВидыУчетаНУ.НУ;
			Проводка.ВидУчетаКт	= Справочники.ВидыУчетаНУ.НУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,Проводка.СубконтоДт, 1, Статья);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.Субконтокт, 1, Резерв);
			
		КонецЕсли;
		
		Если строкатч.ДнейКРезервуВЭтомГоду <> 0 тогда
			
			Движение = движения.ЦС_РезервыОтпусков.Добавить();		
			Движение.Организация = Организация;
			Движение.Период = дата;
			Движение.ПериодРегистрации = НачалоГода(дата);
			Движение.ВидСтроки = Перечисления.ВидыДвиженийПриходРасход.приход;
			Движение.КалендарныхДней = строкатч.ДнейКРезервуВЭтомГоду;
			Движение.ФизЛицо = строкатч.Физлицо;
			Движение.Приказ = строкатч.Приказ;
			
		КонецЕсли;
		
		//Если строкатч.ДнейКРезервуЗаПрошлыйПериод <> 0 тогда
		//	
		//	Движение = движения.ЦС_ОтпускаОрганизаций.Добавить();		
		//	Движение.Организация = Организация;
		//	Движение.Период = дата;
		//	Движение.ПериодРегистрации = НачалоГода(НачалоГода(дата)-1);
		//	Движение.ВидСтроки = Перечисления.ВидыДвиженийПриходРасход.Расход;
		//	Движение.КалендарныхДней = строкатч.ДнейКРезервуЗаПрошлыйПериод;
		//	Движение.ФизЛицо = строкатч.Физлицо;
		//	Движение.Приказ = строкатч.Приказ;
		//	
		//КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры


мОсновнойГрафикРаботыПредприятия = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
