////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// учетная политика по бух. учету в данном документе не востребована
// так как документ не делает движений по регистру бухгалтерии
// и учет временных разниц не имеет значения
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ДА-1,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта (накладной) приемки-передачи НМА
//
Функция ПечатьДА1()
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПринятиеКУчетуНМА.Дата,
	               |	ПринятиеКУчетуНМА.Номер,
	               |	ПринятиеКУчетуНМА.Организация,
				   |	ПринятиеКУчетуНМА.СтруктурноеПодразделение КАК ПодразделениеОрганизации,
	               |	ПринятиеКУчетуНМА.ДокументОснование,  
				   |	ПринятиеКУчетуНМА.Ответственный
	               |ИЗ
	               |	Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	               |ГДЕ
	               |	ПринятиеКУчетуНМА.Ссылка = &Ссылка";	
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     ЭтотОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	
	Запрос.Текст ="ВЫБРАТЬ
	              |	ПринятиеКУчетуНМАНМА.НомерСтроки,
	              |	ВЫРАЗИТЬ(ПринятиеКУчетуНМАНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК НематериальныйАктивНаименованиеПолное,
				  |	ПринятиеКУчетуНМАНМА.НематериальныйАктив КАК НематериальныйАктивНаименование,
	              |	ПринятиеКУчетуНМАНМА.НематериальныйАктив.Код КАК ИнвентарныйНомер,
	              |	ПринятиеКУчетуНМАНМА.СтоимостьБУ,
	              |	ПринятиеКУчетуНМАНМА.СрокПолезногоИспользованияБУ,
	              |	ПринятиеКУчетуНМАНМА.СчетУчетаБУ
	              |ИЗ
	              |	Документ.ПринятиеКУчетуНМА.НМА КАК ПринятиеКУчетуНМАНМА
	              |ГДЕ
	              |	ПринятиеКУчетуНМАНМА.Ссылка = &Ссылка";
	РезЗапросаНМА = Запрос.Выполнить();
	ТаблицаНМА 	  = РезЗапросаНМА.Выгрузить();
		
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.ПодразделениеОрганизации);
	
	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("ДА1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            		  = Макет.ПолучитьОбласть("Шапка");
	Таблица1		 		  = Макет.ПолучитьОбласть("Таблица1");
	СтрокаТаблицы1			  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ЗаголовокТаблицы2		  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	СтрокаТаблицы2   		  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоСтрокаТаблицы2		  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
	Приказ			 		  = Макет.ПолучитьОбласть("Приказ");
	Подвал           		  = Макет.ПолучитьОбласть("Подвал");	
	ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
	ОССдал			 		  = Макет.ПолучитьОбласть("ОССдал|Сдал");
	ПодвалВерх	     		  = Макет.ПолучитьОбласть("ПодвалВерх");
	ПодвалНиз	     		  = Макет.ПолучитьОбласть("ПодвалНиз");
	ПодвалДатаСдал   		  = Макет.ПолучитьОбласть("ПодвалДата|Сдал");
	ПодвалДатаПринял 		  = Макет.ПолучитьОбласть("ПодвалДата|Принял");
	ОСПринял		 		  = Макет.ПолучитьОбласть("ОССдал|Принял");
	Комиссия         		  = Макет.ПолучитьОбласть("Комиссия");	
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ПустаяСекцияСдал 		  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Сдал");
	ПустаяСекцияПринял		  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Принял");
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуНМА_ДА1";

	////////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	// Организация-сдатчик
	Сдатчик = "";
	СчетКт  = "";
	Если Док.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Док.ДокументОснование) Тогда
		СведенияОбОрганизацииСдатчике					= ОбщегоНазначения.СведенияОЮрФизЛице(Док.ДокументОснование.Контрагент, Док.Дата);
		Сдатчик											= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "ПолноеНаименование,");
		СчетКт 											= Док.ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
		Шапка.Параметры.ПредставлениеОрганизацииСдатчик = Сдатчик;
		Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	КонецЕсли;
	
	// Организация-получатель
	ПредставлениеОрганизацииПолучатель				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииПолучатель = ПредставлениеОрганизацииПолучатель;
	Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	Шапка.Параметры.НомерДок          		 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок           		 = Формат(Док.Дата,"ДЛФ=Д");
	Шапка.Параметры.РасшифровкаПодписиПринял = Руководители.Руководитель;
	Шапка.Параметры.ДолжностьПринял          = Руководители.РуководительДолжность;
	
	ТабДокумент.Вывести(Шапка);

	ТабДокумент.Вывести(Таблица1);
	
	
	//Заполняем раздел "Основание"
	Если Док.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Док.ДокументОснование) Тогда 
		СтрокаТаблицы1.Параметры.НаимДокОсн	 = Док.ДокументОснование.Метаданные().Синоним;
		СтрокаТаблицы1.Параметры.НомерДокОсн = Док.ДокументОснование.Номер;
		СтрокаТаблицы1.Параметры.ДатаДокОсн	 = Док.ДокументОснование.Дата;
	КонецЕсли;	
	
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		
			
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы1) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(Таблица1);
			
		КонецЕсли;
		
				
		СтрокаТаблицы1.Параметры.Заполнить(СтрокаНМА);
		
		СтрокаТаблицы1.Параметры.НаименованиеОС 		 = ?(ЗначениеЗаполнено(СтрокаНМА.НематериальныйАктивНаименованиеПолное),СтрокаНМА.НематериальныйАктивНаименованиеПолное, СтрокаНМА.НематериальныйАктивНаименование);
		СтрокаТаблицы1.Параметры.ПервоначальнаяСтоимость = СтрокаНМА.СтоимостьБУ;
		
        ТабДокумент.Вывести(СтрокаТаблицы1);
	КонецЦикла;
	
		
	
	// выводим вторую часть таблицы
	ЗаголовокТаблицы2.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ЗаголовокТаблицы2);
	
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету 	 	 = '00010101';
    ИтогоБалансоваяСтоимость = 0;
	
	// Выведем строки таблицы
	Для Каждого СтрокаНМА Из ТаблицаНМА Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы2);
		КонецЕсли;
		
		СтрокаТаблицы2.Параметры.Заполнить(СтрокаНМА);
		
		
		СтрокаТаблицы2.Параметры.СчетКт 			 = СчетКт;
		СтрокаТаблицы2.Параметры.СчетДт 			 = СтрокаНМА.СчетУчетаБУ;
        СтрокаТаблицы2.Параметры.БалансоваяСтоимость = СтрокаНМА.СтоимостьБУ;
		СтрокаТаблицы2.Параметры.СрокСлужбыПолезной  = СтрокаНМА.СрокПолезногоИспользованияБУ;

		ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
		ТабДокумент.Вывести(СтрокаТаблицы2);
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);

	//формируем список основных средств через запятую
	СписокНМА = "";
	СписокНаименованийНМА = ТаблицаНМА.Скопировать();
	СписокНаименованийНМА.Свернуть("НематериальныйАктивНаименованиеПолное");
	Для Каждого СтрокаНМА ИЗ СписокНаименованийНМА Цикл
		Если СписокНМА = "" Тогда
			СписокНМА = СтрокаНМА.НематериальныйАктивНаименованиеПолное;
		Иначе
			СписокНМА = СписокНМА + ", " + СтрокаНМА.НематериальныйАктивНаименованиеПолное;
		КонецЕсли;	
	КонецЦикла;	
	
	Приказ.Параметры.ДокументОснованиеВид	= "приказа (распоряжения)";
	Приказ.Параметры.ДокументОснованиеДата	= """_____"""+"________________________ 20_____года";
	Приказ.Параметры.ДокументОснованиеНомер = "__________ ";
	Приказ.Параметры.НаименованиеОбъекта	= СписокНМА;
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.Вывести(Подвал);
	
	//выводим комиссию
	
	//сначала председатель 
	Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
	Комиссия.Параметры.Должность                = "";
	Комиссия.Параметры.РасшифровкаПодписи       = "";
	
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	Для Итератор = 1 По 3 Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                                 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
		                                                 "");
		Комиссия.Параметры.Должность          = "";
		Комиссия.Параметры.РасшифровкаПодписи = "";
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаОборотнойСтороны);
	
	ОССдал.Параметры.ОбъектОсновныхСредств = "Долгосрочный актив";
	ОССдал.Параметры.Сдал				   = "Сдал";
	ТабДокумент.Вывести(ОССдал);
	
	ОСПринял.Параметры.Принял = "Принял";
	
	Если ЗначениеЗаполнено(Док.Ответственный.ФизЛицо) Тогда 
		ДанныеОФизЛице						  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный.ФизЛицо, Док.Дата);
		ОСПринял.Параметры.Должность          = ДанныеОФизЛице.Должность;
		ОСПринял.Параметры.РасшифровкаПодписи = ДанныеОФизЛице.Представление;
	Иначе
		ОСПринял.Параметры.РасшифровкаПодписи = Док.Ответственный;
	КонецЕсли;
	
	ТабДокумент.Присоединить(ОСПринял);
	
	ТабДокумент.Вывести(ПодвалДатаСдал);
	ТабДокумент.Присоединить(ПодвалДатаПринял);
	
	ПодвалВерх.Параметры.Доверенность = "№_____________ от ""____""___________________ 20___ года";
	
	ТабДокумент.Вывести(ПодвалВерх);
	ТабДокумент.Вывести(ПодвалНиз);
	
	// Выведем подпись бухгалтера
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиПринял = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьПринятиеКУчетуНМА()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ДА1" Тогда
		
		ТабДокумент = ПечатьДА1();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету НМА"), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДА1","ДА-1 (Акт премки-передачи)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ  				  = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетНачисленияАмортизацииБУ  = СчетаУчета.СчетНачисленияАмортизацииБУ;
	КонецЕсли;

КонецПроцедуры

// Заполняет счета БУ  в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаНМА(Организация, СтрокаТЧ.НематериальныйАктив, Дата);
	
	Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда 
		Если СтрокаТЧ.НематериальныйАктив.ВидНМА = Перечисления.ВидыНМА.Гудвилл Тогда
			СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.Гудвилл;
		Иначе
			СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы;	
		КонецЕсли;
	КонецЕсли;
	
	Если СчетаУчета.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда 
		Если СтрокаТЧ.НематериальныйАктив.ВидНМА = Перечисления.ВидыНМА.Гудвилл Тогда
			СчетаУчета.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.ОбесценениеГудвилла ;
		Иначе
			СчетаУчета.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов;	
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ)Экспорт 
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		ДокументОснование 		 = Основание.Ссылка;
		Организация 			 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		СпособПоступления 		 = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату; 
		
		Для Каждого ТекСтрокаНМА Из Основание.НМА Цикл
			НоваяСтрока = НМА.Добавить();
			НоваяСтрока.НематериальныйАктив = ТекСтрокаНМА.НематериальныйАктив;
			НоваяСтрока.СчетУчетаБУ		 	= ТекСтрокаНМА.СчетУчетаБУ;
		
			Сумма = Окр((ТекСтрокаНМА.Сумма * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0, 1, Основание.КратностьВзаиморасчетов)),2);
			СуммаНДС = Окр((ТекСтрокаНМА.СуммаНДС * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0, 1, Основание.КратностьВзаиморасчетов)),2);
			
			НоваяСтрока.СтоимостьБУ = Сумма;
			
			Если Основание.НДСВключенВСтоимость И НЕ Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.СтоимостьБУ = Сумма + СуммаНДС;				
			ИначеЕсли НЕ Основание.НДСВключенВСтоимость И Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.СтоимостьБУ = Сумма - СуммаНДС;				;
			КонецЕсли;
 
		КонецЦикла;
	
	КонецЕсли;
              
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТабНМА, СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабНМА = "НематериальныйАктив, СчетУчетаБУ, СчетНачисленияАмортизацииБУ"; //через запятую
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", Новый Структура(РеквизитыТабНМА), Отказ, Заголовок);
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.НМА.Реквизиты;
	
	Для Каждого СтрокаТЧ Из НМА Цикл

		ПроверкаПоСтроке(СтрокаТЧ, Отказ, Заголовок, МетаданныеРеквизиты);

	КонецЦикла;
	
КонецПроцедуры // ПроверкаРеквизитовТЧ()

//Проверка заполнения реквизитов строки табличной части
//
Процедура ПроверкаПоСтроке(СтрокаНМА, Отказ, Заголовок, МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура;

	//Проверка реквизитов для расчета амортизации
	Если СтрокаНМА.НачислятьАмортизациюБУ Тогда
	   
		РеквизитыДляПроверки.Вставить("СтоимостьБУ",                            СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ",          СтатусСообщения.Важное);
		РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииБУ", СтатусСообщения.Важное);
		
		// При производственном способе начисления амортизации не требуется знать информацию о сроке полезного использования,
		// т.к. при данном способе срок полезного использования не участвует в расчете амортизации. 
		Если СтрокаНМА.СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
			РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если СтрокаНМА.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаНМА[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			
			СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			НачалоСообщения = "В строке номер """ + СтрокаНМА.НомерСтроки + """ табличной части ""НМА"": ";
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + СтрокаСообщения, Отказ, Заголовок, КлючЗначение.Значение)

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры  //  ПроверкаПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений по регистру ФиксированныеАктивыУчитываемыеОтдельно
//
Процедура ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТабНМА, СтруктураШапкиДокумента)

	НаборДвижений   = Движения.ФиксированныеАктивыУчитываемыеОтдельно;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаНМА Из ТабНМА Цикл
		Если НЕ СтрокаНМА.ПризнакФиксированногоАктива Тогда
			Продолжить;
		КонецЕсли;	
			
		Если СтрокаНМА.ПорядокПогашенияСтоимостиНУ <> Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизации ТОГДА
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            	= СтруктураШапкиДокумента.Дата;
			НоваяСтрока.Организация 	  	= СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ФиксированныйАктив 	= СтрокаНМА.НематериальныйАктив;
			НоваяСтрока.ВидЛьготыФА			= ?(СтрокаНМА.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме, Перечисления.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации, Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
			НоваяСтрока.Событие        		= Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету;			
		КонецЕсли;
	КонецЦикла;

	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно()

//Процедура формирования движений  по регистру ОбъектыНалоговогоУчетаФА
//
Процедура ДвижениеПоРегиструОбъектыНалоговогоУчетаФА(ТабНМА, СтруктураШапкиДокумента, Отказ)
	НаборДвижений   = Движения.ОбъектыНалоговогоУчетаФА;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		Если НЕ СтрокаНМА.ПризнакФиксированногоАктива Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаНМА.ГруппаНУ) Тогда
			Сообщить("" + СокрЛП(СтрокаНМА.НематериальныйАктив) + """ код <" + СокрЛП(СтрокаНМА.НематериальныйАктив.Код) + "> -  не указана группа налогового учета для фиксированного актива. Документ не может быть проведен", СтатусСообщения.Важное);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;	
			
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      	= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Организация                 	= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ФиксированныйАктив            	= СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.ГруппаНУ            			= СтрокаНМА.ГруппаНУ;
		НоваяСтрока.ПорядокПогашенияСтоимостиНУ		= СтрокаНМА.ПорядокПогашенияСтоимостиНУ;
		НоваяСтрока.СостояниеФиксированногоАктива	= Перечисления.ВидыСостоянийФА.ПринятКУчету;		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру  ОбъектыИмущественногоНалога
//
Процедура ДвиженияПоРегиструИмущественногоНалога(ТабНМА, СтруктураШапкиДокумента)
	ДвиженияОбъектИмущественногоНалога = Движения.ОбъектыИмущественногоНалога;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы( СтруктураШапкиДокумента.СтруктурноеПодразделение,
																		СтруктураШапкиДокумента.Организация,
																		глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																		Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	КонецЕсли;

	Для Каждого СтрокаНМА Из ТабНМА Цикл
		//объект имущественного налога
		Если СтрокаНМА.ОбъектИмущественногоНалога Тогда
			Движение = ДвиженияОбъектИмущественногоНалога.Добавить();
			Движение.Период 			   = СтруктураШапкиДокумента.Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаНМА.НематериальныйАктив;
			Движение.НачислятьНалог	       = Истина;   
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;				
				Движение.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об НМА бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияНМАБух(ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаНМА.СтоимостьБУ;
		НоваяСтрока.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
		НоваяСтрока.НачислятьАмортизацию        = СтрокаНМА.НачислятьАмортизациюБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаНМА.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаНМА.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаНМА.СтоимостьБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Состояния НМА организаций 
//
Процедура ДвижениеПоРегиструСостоянияНМАБух(ТабНМА, СтруктураШапкиДокумента, Отказ, Заголовок)
		
	НаборДвижений   = Движения.СостоянияНМАОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     	 		 = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.НематериальныйАктив  = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние            = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	КонецЦикла;
	
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(Ссылка, СтруктураШапкиДокумента.Организация, ТаблицаДвижений, Отказ, Заголовок);
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Способы отражения расходов по амортизации НМА (бухгалтерский учет)
//
Процедура ДвижениеПоРегиструСпособыОтраженияБух( ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет; 
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаНМА.СпособОтраженияРасходовПоАмортизацииБУ) тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.НематериальныйАктив = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СпособОтраженияРасходовПоАмортизации = СтрокаНМА.СпособОтраженияРасходовПоАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

// Процедура формирования движений по регистру Счета учета НМА 
//
Процедура ДвижениеПоРегиструСчетовУчетаНМАБух( ТабНМА, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаУчетаНМА;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаНМА Из ТабНМА Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.НематериальныйАктив = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.Организация         = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчетаБУ           		= СтрокаНМА.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизацииБУ = СтрокаНМА.СчетНачисленияАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений регистров
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок)
    // движения по регистрам налогового учета ФА
	ДвижениеПоРегиструОбъектыНалоговогоУчетаФА(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ);
	ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТаблицаПоНМА, СтруктураШапкиДокумента);
		
	Если Не Отказ Тогда
		ДвижениеПоРегиструПервоначальныеСведенияНМАБух(ТаблицаПоНМА, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияНМАБух     (ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
		ДвижениеПоРегиструСпособыОтраженияБух (ТаблицаПоНМА, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетовУчетаНМАБух   (ТаблицаПоНМА, СтруктураШапкиДокумента);	
		ДвиженияПоРегиструИмущественногоНалога(ТаблицаПоНМА, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеДвижений()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	    	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаПоНМА = НМА.Выгрузить();
    ПроверкаРеквизитовТЧ(ТаблицаПоНМА, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	// Проверим, не дублируются ли НМА в таб.части
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиНМА(ТаблицаПоНМА ,Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();