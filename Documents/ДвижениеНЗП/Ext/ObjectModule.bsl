// Строки, хранят реквизиты имеющие смысл только для бухгалтерского и
// налогового учетов соответственно в случае если документ не отражается
// в каком-то виде учета, делаются невидимыми.
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

Перем мСписокСоответствийСчетов, мЛокальныйСписокСоответствийСчетов;
Перем мСписокСоответствийСчетовНУ, мЛокальныйСписокСоответствийСчетовНУ;

Перем мПроведениеОперацииИзвне Экспорт; // (Регл)
Перем мУдалениеИзвне Экспорт; // (Регл)
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоЗатратам, Отказ, Заголовок)
	      	
	Если ТаблицаПоЗатратам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Для Каждого Строка Из ТаблицаПоЗатратам Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период         = Дата;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала   = "ПР";
			Проводка.Сумма 			= Строка.Сумма;
			СчетНЗП 				= Неопределено;
			
			НайденнаяСтрока = мСписокСоответствийСчетов.Найти(Строка.СчетЗатратБУ, "СчетЗатратБУ");
			
			Если Не НайденнаяСтрока = Неопределено Тогда
				СчетНЗП = НайденнаяСтрока.СчетНЗПБУ;
			КонецЕсли;	
			
			// Если не найдено соответствие из регистра сведений, пытаемся получить из локального списка соответствий
			Если СчетНЗП = Неопределено Тогда
				СчетНЗП = мЛокальныйСписокСоответствийСчетов[Строка.СчетЗатратБУ];
				
				// Если не найдено соответствие из локального списка соответствий, указываем напрямую
				Если СчетНЗП = Неопределено Тогда
					СчетНЗП = ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство;
				КонецЕсли;		
				
				ТекстСообщения = "Для счета """+ Строка.СчетЗатратБУ+ """ не найдено соответствие в регистре сведений ""Соответствия счетов производства счетам НЗП"". 
				|В качестве счета НЗП будет установлен счет" + СчетНЗП;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);			
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				СчетДебетаПроводки 	= СчетНЗП;
				СчетКредитаПроводки = Строка.СчетЗатратБУ;
				СодержаниеПроводки  = "Отнесение затрат на счета НЗП";
			Иначе
				СчетДебетаПроводки 	= Строка.СчетЗатратБУ;
				СчетКредитаПроводки = СчетНЗП;
				СодержаниеПроводки  = "Возврат НЗП на счета затрат";
			КонецЕсли;
			
			Проводка.Содержание 	= СодержаниеПроводки;
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ;
			Проводка.СчетДт         = СчетДебетаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.СчетКт         = СчетКредитаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
		КонецЦикла;
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		Для Каждого Строка Из ТаблицаПоЗатратам Цикл  			
			
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период         = Дата;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
						Проводка.Сумма 			= Строка.СуммаНУ;
			СчетНЗП 				= Неопределено;
			
			НайденнаяСтрока = мСписокСоответствийСчетовНУ.Найти(Строка.СчетЗатратНУ, "СчетЗатратНУ");
			
			Если Не НайденнаяСтрока = Неопределено Тогда
				СчетНЗП = НайденнаяСтрока.СчетНЗПНУ;
			КонецЕсли;	
			
			// Если не найдено соответствие из регистра сведений, пытаемся получить из локального списка соответствий
			Если СчетНЗП = Неопределено Тогда
				СчетНЗП = мЛокальныйСписокСоответствийСчетовНУ[Строка.СчетЗатратНУ];
				
				// Если не найдено соответствие из локального списка соответствий, указываем напрямую
				Если СчетНЗП = Неопределено Тогда
					СчетНЗП = ПланыСчетов.Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство;
				КонецЕсли;		
				
				ТекстСообщения = "Для счета """+ Строка.СчетЗатратНУ + """ не найдено соответствие в регистре сведений ""Соответствия счетов производства счетам НЗП"". 
				|В качестве счета НЗП будет установлен счет" + СчетНЗП;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);			
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				СчетДебетаПроводки 	= СчетНЗП;
				СчетКредитаПроводки = Строка.СчетЗатратНУ;
				СодержаниеПроводки  = "Отнесение затрат на счета НЗП";
			Иначе
				СчетДебетаПроводки 	= Строка.СчетЗатратНУ;
				СчетКредитаПроводки = СчетНЗП;
				СодержаниеПроводки  = "Возврат НЗП на счета затрат";
			КонецЕсли;
			
			Проводка.Содержание 	= СодержаниеПроводки;
			Проводка.ВидРегламентнойОперации  = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ;
			Проводка.СчетДт         = СчетДебетаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.СчетКт         = СчетКредитаПроводки;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", Строка.НоменклатурнаяГруппа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			Проводка.ВидУчетаДт		= Строка.ВидУчетаНУ;
			Проводка.ВидУчетаКт		= Строка.ВидУчетаНУ;
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Строка.ВидУчетаНУ, Ложь, Ложь);		
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
		КонецЦикла;
	КонецЕсли;
	

КонецПроцедуры // ДвиженияПоРегистрам

// Заполняет список соответствий счетов производственного учета счетам незавершенного производства.
//
Функция ЗаполнитьСоответствиеСчетов(Префикс = "БУ")
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СчетЗатрат" + Префикс + ",
					|	СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СчетНЗП" + Префикс + "
					|ИЗ
					|	РегистрСведений.СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства 
					| КАК СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,"",ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	Если (мПроведениеОперацииИзвне = Неопределено) И (ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП) Тогда
		
		ТекстСообщения = "Документ с видом операции ""Возврат из НЗП"" не может быть проведен самостоятельно.
			  			|Необходимо провести документ-основание с видом операции ""Отнесение на НЗП""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка), СтатусСообщения.Важное);			

	КонецЕсли;
	
	мСписокСоответствийСчетов = ЗаполнитьСоответствиеСчетов();
	мСписокСоответствийСчетовНУ = ЗаполнитьСоответствиеСчетов("НУ");
	
	мЛокальныйСписокСоответствийСчетов = Новый Соответствие();
	мЛокальныйСписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ОсновноеПроизводство, 
									  ПланыСчетов.Типовой.НезавершенноеПроизводство_ОсновноеПроизводство);
	мЛокальныйСписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства, 
									  ПланыСчетов.Типовой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства);
	мЛокальныйСписокСоответствийСчетов.Вставить(ПланыСчетов.Типовой.ВспомогательныеПроизводства, 
									  ПланыСчетов.Типовой.НезавершенноеПроизводство_ВспомогательныеПроизводства);	

	мЛокальныйСписокСоответствийСчетовНУ = Новый Соответствие();
	мЛокальныйСписокСоответствийСчетовНУ.Вставить(ПланыСчетов.Налоговый.ОсновноеПроизводство, 
									  ПланыСчетов.Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство);
	мЛокальныйСписокСоответствийСчетовНУ.Вставить(ПланыСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства, 
									  ПланыСчетов.Налоговый.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства);
	мЛокальныйСписокСоответствийСчетовНУ.Вставить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства, 
									  ПланыСчетов.Налоговый.НезавершенноеПроизводство_ВспомогательныеПроизводства);										  
									  
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" 			, "НомерСтроки");
	СтруктураПолей.Вставить("СчетЗатратБУ"  		, "СчетЗатратБУ");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СтатьяЗатрат" 			, "СтатьяЗатрат");
	СтруктураПолей.Вставить("Сумма" 				, "Сумма");
	СтруктураПолей.Вставить("СчетЗатратНУ"  		, "СчетЗатратНУ");
	СтруктураПолей.Вставить("ВидУчетаНУ"  		    , "ВидУчетаНУ");
	СтруктураПолей.Вставить("СуммаНУ"  		        , "СуммаНУ");
	
	РезультатЗапросаПоЗатратам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);

	ТаблицаЗатрат = РезультатЗапросаПоЗатратам.Выгрузить();
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаЗатрат, Отказ, Заголовок);
		
		// Если вид операции текущего документа - "Отнесение на НЗП", а также существует подчиненный документ
		// "Движение НЗП" с видом операции "Возврат из НЗП", то при проведении текущего документа необходимо 
		// провести и подчиненный документ.
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если (мПроведениеОперацииИзвне = Неопределено) И (ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП) И
				 ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
				 ТекстСообщения = "У текущего документа существует документ переноса из НЗП на счета производственного учета
				 |"""+ ДокументОснование + """. 
				 |Он так же будет проведен.";
				 ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,  , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка) , СтатусСообщения.Важное);			
				 
				 ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
				 ТекущийДокументОснование.мПроведениеОперацииИзвне = Истина;
				 ТекущийДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
				 
			КонецЕсли;		 
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
				Если мУдалениеИзвне = Неопределено Тогда
					Если мПроведениеОперацииИзвне = Неопределено Тогда
						ТекстСообщения = "У текущего документа существует документ-основание """+ ДокументОснование + """. 
						|Отмена проведения текущего документа возможна только посредством отмены проведения документа-основания.";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, "Отмена проведения """ + Ссылка + """", СтатусСообщения.Важное);			
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;		 
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
				
				ТекстСообщения = "У текущего документа существует документ переноса из НЗП """+ ДокументОснование + """. 
				|Он так же будет снят с проведения.";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , "Отмена проведения """ + Ссылка + """", СтатусСообщения.Важное);
				ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
				ТекущийДокументОснование.мПроведениеОперацииИзвне = Истина;
				ТекущийДокументОснование.Записать(РежимЗаписиДокумента.ОтменаПроведения);

			КонецЕсли;		 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПометкаУдаления  <> Ссылка.ПометкаУдаления  Тогда
		Если ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ОтнесениеНаНЗП Тогда
					Если мУдалениеИзвне = Неопределено Тогда
						ТекстСообщения = "У текущего документа существует документ-основание 
						|"""+ ДокументОснование + """." + 
						?(Ссылка.ПометкаУдаления = Ложь, "
						|Удаление текущего документа возможно только посредством удаления документа-основания.", "
						|Снятие пометки на удаление текущего документа возможно только посредством снятия пометки удаления документа-основания.");
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ,?(Ссылка.ПометкаУдаления = Ложь, "Удаление документа ", "Снятие пометки удаления документа ") + Ссылка + """", СтатусСообщения.Важное);			
					КонецЕсли;	
				КонецЕсли;		 
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийДвиженияНЗП.ВозвратИзНЗП Тогда
					ТекстСообщения = "У текущего документа существует документ переноса из НЗП
					|"""+ ДокументОснование + """."+ 
					?(Ссылка.ПометкаУдаления = Ложь, "
					|Он так же будет удален.", "
					|С него также будет снята пометка удаления.");
 					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ?(Ссылка.ПометкаУдаления = Ложь, "Удаление документа ", "Снятие пометки удаления документа ") + Ссылка + """", СтатусСообщения.Важное);
					ТекущийДокументОснование = ДокументОснование.ПолучитьОбъект();
					ТекущийДокументОснование.мУдалениеИзвне = Истина;
					ТекущийДокументОснование.УстановитьПометкуУдаления(?(Ссылка.ПометкаУдаления = Ложь, Истина, Ложь));
				КонецЕсли;		 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();