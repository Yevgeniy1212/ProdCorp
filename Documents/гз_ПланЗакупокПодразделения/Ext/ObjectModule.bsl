////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой ПланЗакупок,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма документа
	//
	Функция ПечатьПланаЗакупок()
			
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Организация,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.ПодразделениеОрганизации,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Дата,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Номер,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Ответственный
		|Из
		|	Документ.гз_ПланЗакупокПодразделения КАК ГодоваяЗаявкаНаПриобретениеТМЗИУслуг
		|ГДЕ
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.НомерСтроки,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Количество,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ПериодПоставки
		               |ИЗ
		               |	Документ.гз_ПланЗакупокПодразделения.СоставЗаявкиТовары КАК гз_ПланЗакупокПодразделенияСоставЗаявкиТовары
		               |ГДЕ
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка = &Ссылка";
		
		РезЗапросаСписка = Запрос.Выполнить().Выбрать();
		
		РезультатЗапросаПоНоменклатуре = Запрос.Выполнить().Выгрузить();
		РезультатЗапросаПоНоменклатуре.Свернуть("Номенклатура");
		МассивНоменклатуры = РезультатЗапросаПоНоменклатуре.ВыгрузитьКолонку("Номенклатура");
		
		ЗапросВидаНоменклатуры = Новый Запрос;
		ЗапросВидаНоменклатуры.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		ЗапросВидаНоменклатуры.Текст =		 "ВЫБРАТЬ
							   |	гз_СвойстваНоменклатуры.Номенклатура
							   |ИЗ
							   |	РегистрСведений.гз_СвойстваНоменклатуры КАК гз_СвойстваНоменклатуры
							   |ГДЕ
							   |	гз_СвойстваНоменклатуры.Номенклатура В(&МассивНоменклатуры)
							   |	И гз_СвойстваНоменклатуры.Работа";
		Результат = ЗапросВидаНоменклатуры.Выполнить().Выгрузить();
			
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("ПланЗакупок");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "План закупок подразделения", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Подразделение = СокрЛП(Док.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Год = Формат(Год,"ДФ=гггг");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);      
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьГруппировки = Макет.ПолучитьОбласть("СтрокаГруппировки");
		Сумма = 0;	
		НомСтр = 1;
		ТабДокумент.НачатьАвтогруппировкуСтрок();
		Пока РезЗапросаСписка.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(РезЗапросаСписка);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(РезЗапросаСписка.Номенклатура.Наименование);
			ОбластьМакета.Параметры.Ед = РезЗапросаСписка.Номенклатура.БазоваяЕдиницаИзмерения;
			
			Если НЕ РезЗапросаСписка.Номенклатура.Пустая() Тогда 
			
				Если Результат.Найти(РезЗапросаСписка.Номенклатура, "Номенклатура")<>Неопределено Тогда 
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Работа			  
				ИначеЕсли РезЗапросаСписка.Номенклатура.Услуга Тогда  
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Услуга			 
				Иначе 
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Товар			 
				КонецЕсли;
				
			КонецЕсли;
						
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = РезЗапросаСписка.Номенклатура.Код;
			КонецЕсли;   
			
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета, 0);
		КонецЦикла;
		
		ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
			
	КонецФункции //ПечатьПланаЗакупок()
	
	// Функция формирует табличный документ с печатной формой КорректировкаПланаЗакупок,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма документа
	//
	Функция ПечатьКорректировки()
		
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Организация,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.ПодразделениеОрганизации,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Дата,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Номер,
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Ответственный
		|Из
		|	Документ.гз_ПланЗакупокПодразделения КАК ГодоваяЗаявкаНаПриобретениеТМЗИУслуг
		|ГДЕ
		|	ГодоваяЗаявкаНаПриобретениеТМЗИУслуг.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.НомерСтроки КАК НомерСтроки,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Количество,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ВидКорректировки,
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ПериодПоставки
		               |ИЗ
		               |	Документ.гз_ПланЗакупокПодразделения.СоставЗаявкиТовары КАК гз_ПланЗакупокПодразделенияСоставЗаявкиТовары
		               |ГДЕ
		               |	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки";
			РезЗапросаСписка = Запрос.Выполнить().Выбрать();
			
			РезультатЗапросаПоНоменклатуре = Запрос.Выполнить().Выгрузить();
			РезультатЗапросаПоНоменклатуре.Свернуть("Номенклатура");
			МассивНоменклатуры = РезультатЗапросаПоНоменклатуре.ВыгрузитьКолонку("Номенклатура");
			
			ЗапросВидаНоменклатуры = Новый Запрос;
			ЗапросВидаНоменклатуры.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
			ЗапросВидаНоменклатуры.Текст =		 "ВЫБРАТЬ
		              		 |	гз_СвойстваНоменклатуры.Номенклатура
		              		 |ИЗ
		              		 |	РегистрСведений.гз_СвойстваНоменклатуры КАК гз_СвойстваНоменклатуры
		              		 |ГДЕ
		              		 |	гз_СвойстваНоменклатуры.Номенклатура В(&МассивНоменклатуры)
		              		 |	И гз_СвойстваНоменклатуры.Работа";
			Результат = ЗапросВидаНоменклатуры.Выполнить().Выгрузить();
			
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("КорректировкаПланаЗакупок");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Корректировка плана закупок подразделения", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Подразделение = СокрЛП(Док.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Год = Формат(Год,"ДФ=гггг");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);      
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьГруппировки = Макет.ПолучитьОбласть("СтрокаГруппировки");
		Сумма = 0;	
		НомСтр = 1;
		ТабДокумент.НачатьАвтогруппировкуСтрок();
		Пока РезЗапросаСписка.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(РезЗапросаСписка);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(РезЗапросаСписка.Номенклатура.Наименование);
			ОбластьМакета.Параметры.Ед = РезЗапросаСписка.Номенклатура.БазоваяЕдиницаИзмерения;
			
			Если НЕ РезЗапросаСписка.Номенклатура.Пустая() Тогда 
			
				Если Результат.Найти(РезЗапросаСписка.Номенклатура, "Номенклатура")<>Неопределено Тогда 
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Работа			  
				ИначеЕсли РезЗапросаСписка.Номенклатура.Услуга Тогда  
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Услуга			 
				Иначе 
					ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Товар			 
				КонецЕсли;
				
			КонецЕсли;
						
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = РезЗапросаСписка.Номенклатура.Код;
			КонецЕсли;   
			
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета, 0);
		КонецЦикла;
		
		ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции //ПечатьКорректировки()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМакета = "ПланЗакупок" Тогда
			
			ТабДокумент = ПечатьПланаЗакупок();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
			
		КонецЕсли;
		
		Если ИмяМакета = "КорректировкаПланаЗакупок" Тогда
			
			ТабДокумент = ПечатьКорректировки();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
			
		КонецЕсли;
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "План закупок подразделения"));
		
	КонецПроцедуры //Печать()
	
#КонецЕсли

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	Если ВидОперации = Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Планирование Тогда 
		СтруктураПечатныхФорм.Вставить("ПланЗакупок","План закупок подразделения");
	ИначеЕсли ВидОперации = Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка Тогда 
		СтруктураПечатныхФорм.Вставить("КорректировкаПланаЗакупок","Корректировка плана закупок");
	КонецЕсли;
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция проверяет, учтен ли план закупок в годовом плане
//
// Возвращаемое значение:
//  Таблица значений - содержит годовой план, где учтен данный план закупок
//  
Функция СформироватьЗапросПоУчтеннымПланамЗакупок() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	гз_ГодовойПланЗаявкиОснования.Заявка,
	                |	гз_ГодовойПланЗаявкиОснования.Ссылка
	                |ИЗ
	                |	Документ.гз_ГодовойПлан.ЗаявкиОснования КАК гз_ГодовойПланЗаявкиОснования
	                |ГДЕ
	                |	гз_ГодовойПланЗаявкиОснования.Заявка = &Ссылка
	                |	И гз_ГодовойПланЗаявкиОснования.Ссылка.Проведен";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //СформироватьЗапросПоУчтеннымПланамЗакупок()

// Функция проверяет, сформирован ли годовой план с видом операции Планирование
//
// Параметры:
//  ВидОперации - вид операции документа годового плана государственных закупок.
//
// Возвращаемое значение:
//  Выборка документов годового плана с заданным видом операции
//  
Функция ПолучитьВыборкуГодовогоПлана(ВидОперации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("ВидПланаЗакупок", ВидПланаЗакупок);
	// проверить, сформирован ли годовой план с видом операции планирование на этот год от этой организации
	Запрос.Текст =  "ВЫБРАТЬ
	                |	гз_ГодовойПлан.Ссылка
	                |ИЗ
	                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
	                |ГДЕ
	                |	гз_ГодовойПлан.Год = &Год
	                |	И гз_ГодовойПлан.Организация = &Организация
	                |	И гз_ГодовойПлан.ВидОперации = &ВидОперации
	                |	И (НЕ гз_ГодовойПлан.ПометкаУдаления)
	                |	И гз_ГодовойПлан.Проведен
	                |	И гз_ГодовойПлан.Ссылка <> &Ссылка
	                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //ПолучитьВыборкуГодовогоПлана()

// Функция проверяет, существуют ли корректировки годового плана с более поздней датой
//
// Возвращаемое значение:
//  Выборка корректировок годового плана с датой позже заданной
//  
Функция ПолучитьВыборкуКорректировокСПозднейДатой() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка);
	Запрос.УстановитьПараметр("ДатаНовойКорректировки", Дата);
	Запрос.УстановитьПараметр("ВидПланаЗакупок", ВидПланаЗакупок);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	гз_ГодовойПлан.Ссылка
	                |ИЗ
	                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
	                |ГДЕ
	                |	гз_ГодовойПлан.Год = &Год
	                |	И гз_ГодовойПлан.Организация = &Организация
	                |	И гз_ГодовойПлан.ВидОперации = &ВидОперации
	                |	И гз_ГодовойПлан.Проведен
	                |	И (НЕ гз_ГодовойПлан.ПометкаУдаления)
	                |	И гз_ГодовойПлан.Дата > &ДатаНовойКорректировки
	                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //ПолучитьВыборкуКорректировокСПозднейДатой()

// Функция проверяет, существуют ли планы закупок подразделений с видом операции корректировка от данного подразделения
// данной организации, не отмененные и не учтенные в годовом плане
// 
// Возвращаемое значение:
//  Выборка не учтенных и не отмененных планов закупок
//  
Функция ПолучитьВыборкуНеучтенныхНеотмененныхПлановЗакупок() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка);
	Запрос.УстановитьПараметр("ДатаНовойКорректировки", Дата);
	Запрос.УстановитьПараметр("Состояние", Перечисления.гз_СостояниеДокумента.Отменена);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =  "ВЫБРАТЬ
					|	гз_ПланЗакупокПодразделения.Ссылка
					|ИЗ
					|	Документ.гз_ПланЗакупокПодразделения КАК гз_ПланЗакупокПодразделения
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ГодовойПлан.ЗаявкиОснования КАК гз_ГодовойПланЗаявкиОснования
					|		ПО (гз_ГодовойПланЗаявкиОснования.Заявка = гз_ПланЗакупокПодразделения.Ссылка
					|				И (НЕ гз_ГодовойПланЗаявкиОснования.Ссылка.ПометкаУдаления))
					|ГДЕ
					|	гз_ПланЗакупокПодразделения.Год = &Год
					|	И гз_ПланЗакупокПодразделения.Организация = &Организация
					|	И гз_ПланЗакупокПодразделения.ПодразделениеОрганизации = &ПодразделениеОрганизации
					|	И гз_ПланЗакупокПодразделения.Состояние <> &Состояние
					|	И гз_ПланЗакупокПодразделения.Проведен
					|	И (НЕ гз_ПланЗакупокПодразделения.ПометкаУдаления)
					|	И гз_ПланЗакупокПодразделения.ВидОперации = &ВидОперации
					|	И гз_ПланЗакупокПодразделения.Ссылка <> &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //ПолучитьВыборкуНеучтенныхНеотмененныхПлановЗакупок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	СтруктураОбязательныхПолей.Вставить("ВидОперации");
	СтруктураОбязательныхПолей.Вставить("ВидПланаЗакупок");
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТабЗаявки, СтруктураШапкиДокумента,Отказ, Заголовок, ТипТЧ) Экспорт
	
	Если ТипТЧ = "Товары" Тогда
		РеквизитыТабЗаявки = "Номенклатура, Количество"; //через запятую
	КонецЕсли;
	
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставЗаявки"+ТипТЧ, Новый Структура(РеквизитыТабЗаявки), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоЗаявкеТовары,  Отказ, Заголовок)
	
	Если Не Отказ Тогда
		
		мГод 					= СтруктураШапкиДокумента.Год;
		ОрганизацияДляДвижения 	= СтруктураШапкиДокумента.Организация;
		ДатаДляДвижения 		= СтруктураШапкиДокумента.Дата;
		Подразделение 			= СтруктураШапкиДокумента.ПодразделениеОрганизации;
		мМестоПоставки 			= СтруктураШапкиДокумента.МестоПоставки;
		мВидПланаЗакупок		= СтруктураШапкиДокумента.ВидПланаЗакупок;
		// Движение по регистру по Товарам
		ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, мГод, мВидПланаЗакупок, ОрганизацияДляДвижения, ДатаДляДвижения, Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений регистров по ТЧ Товары
//
Процедура ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, Год, ВидПланаЗакупок, ОрганизацияДляДвижения, ДатаДляДвижения, Подразделение)
	Если Не Отказ Тогда
		
		МассивНоменклатуры = ТаблицаПоЗаявкеТовары.выгрузитьколонку("Номенклатура");
		Результат = гз_ПроцедурыОперативногоУчетаЗакупок.мПолучитьТаблицуРабот(МассивНоменклатуры);
		
		Для Каждого ТекСтр из ТаблицаПоЗаявкеТовары Цикл
			Движение = Движения.гз_ПланыЗакупок.Добавить();
			Движение.Год					 = Год;
			Движение.ВидПланаЗакупок		 = ВидПланаЗакупок;
			Движение.Количество				 = ТекСтр.Количество;
			Движение.Номенклатура			 = ТекСтр.Номенклатура;
			Движение.Организация			 = ОрганизацияДляДвижения;
			Движение.Период					 = ДатаДляДвижения;
			Движение.Подразделение			 = Подразделение;
			Движение.ПериодПоставки          = ТекСтр.ПериодПоставки;
			Движение.Характеристика          = ТекСтр.Характеристика;
			Движение.МестоПоставки			 = ?(ТекСтр.МестоПоставки.Пустая(),МестоПоставки,ТекСтр.МестоПоставки);
			Движение.Количество 			 = ?(ТекСтр.ВидКорректировки = Перечисления.гз_ВидыКорректировокГодовогоПлана.Удаление,-ТекСтр.Количество,ТекСтр.Количество);
			
			Если Результат.Найти(ТекСтр.Номенклатура, "Номенклатура")<>Неопределено Тогда 
				Движение.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Работа			  
			ИначеЕсли ТекСтр.Номенклатура.Услуга Тогда  
				Движение.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Услуга			 
			Иначе 
				Движение.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Товар			 
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры //ДвиженияПоРегистрамТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Проверка согласованности
	Если Состояние <> Перечисления.гз_СостояниеДокумента.Утверждена Тогда
		Сообщить(Заголовок + " документ можно провести только после утверждения.");
		Отказ = истина;
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	ТаблицаСоставаЗаявкиТовары = СоставЗаявкиТовары.Выгрузить();
	ПроверкаРеквизитовТЧ(ТаблицаСоставаЗаявкиТовары, СтруктураШапкиДокумента,Отказ, Заголовок, "Товары");
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСоставаЗаявкиТовары, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидПланаЗакупок.Пустая() Тогда 
		Сообщить("Не заполнено значение реквизита ""Вид плана закупок""!",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверить, учтена ли годовая заявка в годовом плане
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	гз_ГодовойПланЗаявкиОснования.Ссылка
	             |ИЗ
	             |	Документ.гз_ГодовойПлан.ЗаявкиОснования КАК гз_ГодовойПланЗаявкиОснования
	             |ГДЕ
	             |	гз_ГодовойПланЗаявкиОснования.Заявка = &Ссылка
	             |	И (НЕ гз_ГодовойПланЗаявкиОснования.Заявка = ЗНАЧЕНИЕ(Документ.гз_ПланЗакупокПодразделения.ПустаяСсылка))
	             |	И (НЕ гз_ГодовойПланЗаявкиОснования.Ссылка.ПометкаУдаления)
	             |	И гз_ГодовойПланЗаявкиОснования.Ссылка.Проведен";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Если (НЕ Запрос.Выполнить().Пустой()) И (НЕ ДополнительныеСвойства.Свойство("ВнешняяОбработка")) Тогда
		Отказ = Истина;
		Сообщить("Невозможно записать документ " + ЭтотОбъект + 
		" , так как он уже учтен в годовом плане государственных закупок на " + Формат(Год,"ДФ=гггг") + " год.");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидПланаЗакупок", ВидПланаЗакупок);
	Если ВидОперации = Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Планирование Тогда 
	
		// проверить, сформирован ли годовой план с видом операции планирование на этот год от этой организации
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		Запрос.Текст =  "ВЫБРАТЬ
		                |	гз_ГодовойПлан.Ссылка
		                |ИЗ
		                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
		                |ГДЕ
		                |	гз_ГодовойПлан.Год = &Год
		                |	И гз_ГодовойПлан.Организация = &Организация
		                |	И гз_ГодовойПлан.ВидОперации = &ВидОперации
		                |	И (НЕ гз_ГодовойПлан.ПометкаУдаления)
		                |	И гз_ГодовойПлан.Проведен
		                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
				Сообщить("На " + Формат(Год(Год),"ЧГ=0") + " год уже существует документ " + Выборка.Ссылка+" с видом операции ""Планирование"".");
				Отказ = Истина;
				Возврат;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка Тогда 
		
		// проверить, сформирован ли годовой план с видом операции планирование на этот год от этой организации
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Планирование);
		Запрос.Текст =  "ВЫБРАТЬ
		                |	гз_ГодовойПлан.Ссылка
		                |ИЗ
		                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
		                |ГДЕ
		                |	гз_ГодовойПлан.Год = &Год
		                |	И гз_ГодовойПлан.Организация = &Организация
		                |	И гз_ГодовойПлан.ВидОперации = &ВидОперации
		                |	И (НЕ гз_ГодовойПлан.ПометкаУдаления)
		                |	И гз_ГодовойПлан.Проведен
		                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество()= 0 Тогда 
			Сообщить("На " + Формат(Год(Год),"ЧГ=0") + " год нет годового плана с видом операции планирование.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// проверить, не существуют ли корректировки годового плана  
		// от данной организации с более поздней датой		
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка);
		Запрос.УстановитьПараметр("ДатаНовойКорректировки", Дата);
		Запрос.Текст =  "ВЫБРАТЬ
		                |	гз_ГодовойПлан.Ссылка
		                |ИЗ
		                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
		                |ГДЕ
		                |	гз_ГодовойПлан.Год = &Год
		                |	И гз_ГодовойПлан.Организация = &Организация
		                |	И гз_ГодовойПлан.ВидОперации = &ВидОперации
		                |	И гз_ГодовойПлан.Проведен
		                |	И (НЕ гз_ГодовойПлан.ПометкаУдаления)
		                |	И гз_ГодовойПлан.Дата > &ДатаНовойКорректировки
		                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок";
		Выборка = Запрос.Выполнить().Выбрать();
		
		// проверяем, не выполняется ли запись документа программно
		Если (НЕ ДополнительныеСвойства.Свойство("ВнешняяОбработка")) Тогда 
		
			Если Выборка.Следующий() Тогда 
				Сообщить("Невозможно записать документ " + Ссылка + " с видом операции корректировка, так как дата документа "+
				"раньше даты последней утвержденной корректировки годового плана " + Выборка.Ссылка);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// проверить, не существуют годовые заявки с видом операции корректировка от данного подразделения
		// данной организации, не отмененные и не учтенные в годовом плане
		Запрос.УстановитьПараметр("Состояние", Перечисления.гз_СостояниеДокумента.Отменена);
		
		Запрос.Текст =  "ВЫБРАТЬ
		                |	МАКСИМУМ(гз_ГодовойПлан.Дата) КАК Дата
		                |ПОМЕСТИТЬ ВТ_ПоследняяКорректировка
		                |ИЗ
		                |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
		                |ГДЕ
		                |	гз_ГодовойПлан.Год = &Год
		                |	И гз_ГодовойПлан.Организация = &Организация
		                |	И гз_ГодовойПлан.Состояние <> &Состояние
		                |	И гз_ГодовойПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гз_ВидыОперацийДокументовПланированияЗакупок.Корректировка)
		                |	И гз_ГодовойПлан.ВидПланаЗакупок = &ВидПланаЗакупок
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	гз_ПланЗакупокПодразделения.Ссылка
		                |ИЗ
		                |	ВТ_ПоследняяКорректировка КАК ВТ_ПоследняяКорректировка
		                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ПланЗакупокПодразделения КАК гз_ПланЗакупокПодразделения
		                |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ГодовойПлан.ЗаявкиОснования КАК гз_ГодовойПланЗаявкиОснования
		                |			ПО (гз_ГодовойПланЗаявкиОснования.Заявка = гз_ПланЗакупокПодразделения.Ссылка)
		                |				И ((НЕ гз_ГодовойПланЗаявкиОснования.Ссылка.ПометкаУдаления))
		                |		ПО ВТ_ПоследняяКорректировка.Дата < гз_ПланЗакупокПодразделения.Дата
		                |ГДЕ
		                |	гз_ПланЗакупокПодразделения.Год = &Год
		                |	И гз_ПланЗакупокПодразделения.Организация = &Организация
		                |	И гз_ПланЗакупокПодразделения.ПодразделениеОрганизации = &ПодразделениеОрганизации
		                |	И гз_ПланЗакупокПодразделения.Состояние <> &Состояние
		                |	И гз_ПланЗакупокПодразделения.Проведен
		                |	И (НЕ гз_ПланЗакупокПодразделения.ПометкаУдаления)
		                |	И гз_ПланЗакупокПодразделения.ВидОперации = &ВидОперации
		                |	И гз_ПланЗакупокПодразделения.Ссылка <> &Ссылка
		                |	И гз_ПланЗакупокПодразделения.ВидПланаЗакупок = &ВидПланаЗакупок";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			Сообщить("Подразделением " + ПодразделениеОрганизации + " уже сформирован план закупок "
			+ Выборка.Ссылка + " с видом операции корректировка, не учтенный в годовом плане на " + Формат(Год(Год),"ЧГ=0"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()
