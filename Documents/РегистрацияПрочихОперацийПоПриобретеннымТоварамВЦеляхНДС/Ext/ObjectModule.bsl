Перем мВалютаРегламентированногоУчета Экспорт;
// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранит способ ведения взаиморасчетов
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ЕстьКоэффициент = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаЦенности");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если ЕстьКоэффициент И (СтрокаТаблицы.Коэффициент <> 0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;		
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("Контрагент");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Контрагент");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
Процедура ЗаполнитьРеквизитыДокумента() Экспорт
	
	ДокументОсн = ДокументОснование; 	
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		КурсВзаиморасчетов 		= 1;
		КратностьВзаиморасчетов = 1;		
	КонецЕсли;                                      	
	
КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

// Процедура выполняет заполнение документа по 
// данным документа Списание товаров
//
Процедура ЗаполнитьПоСписаниюТоваров(Основание, ЗаполнятьШапкуДокумента = Истина)
	
	Если ЗаполнятьШапкуДокумента Тогда
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТиповойДвиженияССубконто.СубконтоКт1 как Номенклатура,
	                      |	СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК Количество,
	                      |	СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма
	                      |ИЗ
	                      |	РегистрБухгалтерии.Типовой.ДвиженияССубконто(
	                      |			&ДатаНачала,
	                      |			&ДатаОкончания,
	                      |			Регистратор = &Ссылка
	                      |				И ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)) КАК ТиповойДвиженияССубконто
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТиповойДвиженияССубконто.СубконтоКт1");
	Запрос.УстановитьПараметр("ДатаНачала",		Основание.Дата);
	Запрос.УстановитьПараметр("ДатаОкончания", 	Основание.Дата);
	Запрос.УстановитьПараметр("Ссылка",	 		Основание.Ссылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Количество = НоваяСтрока.Количество * -1;
			НоваяСтрока.Сумма      = НоваяСтрока.Сумма * -1;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "УплаченныйНДС", Истина);    
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете);
			ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);			
		КонецЦикла;		
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьПоСписаниюТоваров

Процедура ЗаполнитьПоДокументамСписанияДС(Основание, ЗаполнятьШапкуДокумента = Истина)
					
	Если ЗаполнятьШапкуДокумента Тогда 
		
		ДокументОснование = Основание.Ссылка;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		//проверим заполнено ли поле "СчетОргганизации" в платежном документе
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Ложь;
			
		ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если мОтображатьСтруктурныеПодразделения Тогда
			СтруктурноеПодразделение = Основание.СтруктурноеПодразделениеОтправитель;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Основание.СчетОрганизации) Тогда
			Контрагент = Основание.СчетОрганизации.Банк.Контрагент;
			ДоговорКонтрагента = Основание.СчетОрганизации.ДоговорКонтрагента;
			
			СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Основание.ВключатьКомиссиюБанка И Основание.СуммаКомиссии <> 0 Тогда 
		
		НоваяСтрока = ЭтотОбъект.Услуги.Добавить();
		НоваяСтрока.Содержание = "Услуги банка";
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Цена       = Основание.СуммаКомиссии;
		НоваяСтрока.СтавкаНДС  = Основание.СчетОрганизации.СтавкаНДС;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);	
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "УплаченныйНДС", Истина);    
		НоваяСтрока.СчетУчетаНДС = Основание.СчетОрганизации.СчетУчетаНДС;
		НоваяСтрока.НДСВидПоступления = Основание.СчетОрганизации.НДСВидПоступления;
		НоваяСтрока.НДСВидОборота     = Основание.СчетОрганизации.НДСВидОборота;				
	КонецЕсли;
	
	Если ЗаполнятьШапкуДокумента Тогда 
	
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	
	КонецЕсли;
		                                                                                	
КонецПроцедуры
// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание, ЗаполнятьШапку = Истина, ИмяТабличнойЧасти = "", ИмяТабЧастиОснования = "") Экспорт          				
		
	СтруктураТЧ = Неопределено;
	Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		СтруктураТЧ = Новый Структура(ИмяТабличнойЧасти, ИмяТабличнойЧасти);
		Если НЕ ПустаяСтрока(ИмяТабЧастиОснования) Тогда
			СтруктураТЧ.Вставить(ИмяТабличнойЧасти, ИмяТабЧастиОснования);
		КонецЕсли;
	КонецЕсли;
	
	//Так как заполнение шапки происходит не по документу, а по данным банковского счета, то
	//общая процедура заполнение нам не нужна
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") ИЛИ 
		 ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		 ЗаполнитьПоДокументамСписанияДС(Основание, ЗаполнятьШапку);
		 Возврат;
	КонецЕсли;
	 
	Если ЗаполнятьШапку Тогда
		
		ДокументОснование = Основание.Ссылка;
	
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
			
		// Документ не имеет смысла без данного признака
		УчитыватьНДС = Истина;	
		// Меняем валюту на валюту рег. учета
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда		
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;	
		
		//из документа основания
		ЗаполнитьРеквизитыДокумента();
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеОС")
			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеТоваров") Тогда			
			
			ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
		КонецЕсли;
	
	КонецЕсли;
	
	// Для списания товаров - по себестоимости
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеТоваров") Тогда					
		ЗаполнитьПоСписаниюТоваров(Основание, ЗаполнятьШапку);
		Возврат;
	КонецЕсли;
	
	// Для поступления доп. расходов
	// сумма расхода должна попасть в табличную часть "Услуги"
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		Если СтруктураТЧ = Неопределено
			ИЛИ (СтруктураТЧ <> Неопределено
			     И СтруктураТЧ.Свойство("Услуги")) Тогда
			
			НоваяСтрока = ЭтотОбъект.Услуги.Добавить();
			НоваяСтрока.Содержание = Основание.Содержание;
			НоваяСтрока.Количество = 1;
			НоваяСтрока.СтавкаНДС  = Основание.СтавкаНДС;  		
			НоваяСтрока.Цена      = Основание.Сумма;		
		
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);	
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "УплаченныйНДС", Истина);    
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете);
			ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);
			
			Если СтруктураТЧ <> Неопределено Тогда
				СтруктураТЧ.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;                                                       
	               
	Если ЗаполнятьШапку Тогда
	
		МетаданныеДокумента = ДокументОснование.ПолучитьОбъект().Метаданные();
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			ИЛИ (ТипЗнч(ДокументОснование)= Тип("ДокументСсылка.СчетФактураПолученный")
				И ДокументОснование.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный) Тогда
			ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации;
			Коэффициент = -1;
		Иначе 		
			ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
			Коэффициент = 1;
		КонецЕсли;
				
		Если (ОбщегоНазначения.ЕстьРеквизитДокумента("ОтложитьПринятиеНДСКЗачету", МетаданныеДокумента) И ДокументОснование.ОтложитьПринятиеНДСКЗачету) 
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда		
			
			СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
			СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Типовой.ПустаяСсылка();
			
		Иначе  	
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда
				СчетУчетаРасчетовСКонтрагентом = ДокументОснование.СчетЗатратНДСБУ;
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
					СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ПрочиеКраткосрочныеАктивы;
				КонецЕсли;
			Иначе
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
					СчетУчетаРасчетовСКонтрагентом = ДокументОснование.СчетУчетаРасчетовСКонтрагентом;	
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетУчетаРасчетовПоАвансам", МетаданныеДокумента) Тогда
					СчетУчетаРасчетовПоАвансам = ДокументОснование.СчетУчетаРасчетовПоАвансам;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
					СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
					
					СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Если СтруктураТЧ = Неопределено Тогда
		
		// заполним табличные части
		// структура табличных частей документа основания для заполнения	
		СтруктураТЧ = Новый Структура;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда			
			СтруктураТЧ.Вставить("Товары", "Товары");
			СтруктураТЧ.Вставить("Услуги", "Прочее");
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеОС") Тогда			
			// ТЧ "Товары" Списания ОС не учитываем
			СтруктураТЧ.Вставить("ОС", "ОС");	
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда			
			СтруктураТЧ.Вставить("Услуги", "Услуги"); 
		Иначе
			
			Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл			
				
				ИмяТабЧастиОснование = ТабЧасть.Имя;
				ИмяТабЧастиОбъекта   = ИмяТабЧастиОснование;		
				
				ТабличнаяЧасть = ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабЧастиОбъекта); 
				
				Если НЕ ТабличнаяЧасть = Неопределено Тогда
					СтруктураТЧ.Вставить(ИмяТабЧастиОбъекта, ИмяТабЧастиОснование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;

	Для Каждого ЗначениеТЧ Из СтруктураТЧ Цикл		
		ИмяТабЧастиОбъекта = ЗначениеТЧ.Ключ;
		ИмяТабЧастиОснование = ЗначениеТЧ.Значение;
		
		Если ИмяТабЧастиОснование = "УчастникиСовместнойДеятельности" И ЗаполнятьШапку Тогда 	
			УчастникиСовместнойДеятельности.Загрузить(ДокументОснование.УчастникиСовместнойДеятельности.Выгрузить());
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из Основание[ИмяТабЧастиОснование] Цикл			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда		
				// для НДС методом зачета не отражаем принятие к учету после оплаты
				// так как при оформлении Заявления движения по НДС к возмещению были сделаны сразу
				Если Строка.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И  НЕ ЗначениеЗаполнено(Строка.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЭтотОбъект[ИмяТабЧастиОбъекта].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			// Для списания ОС - оборотом будет являться остаточная стоимость ОС
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.СписаниеОС") Тогда		
				// меняем знак корректировки, так как сумма подлежит исключению из зачета.
				НоваяСтрока.Сумма = - (Строка.СтоимостьБУ - Строка.АмортизацияБУ - Строка.АмортизацияЗаМесяцБУ);
				// устанавливаем ставку НДС по умолчанию
				НоваяСтрока.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
			КонецЕсли;
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				НоваяСтрока.СтавкаНДС  = Основание.СтавкаНДС;
				Если ИмяТабЧастиОбъекта = "Товары" Тогда
					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект);
				КонецЕсли;	

			КонецЕсли;
			// заполняем данными налоговой базы
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда		
				НоваяСтрока.Сумма = Строка.ОборотПоРеализации;
				Если ИмяТабЧастиОбъекта = "Товары" Тогда
					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект);
				КонецЕсли;	
			КонецЕсли;	
			
			Если  ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации  Тогда
				Если ИмяТабЧастиОбъекта = "Товары" ИЛИ ИмяТабЧастиОбъекта = "Услуги" Тогда					
					НоваяСтрока.Количество = НоваяСтрока.Количество * -1;
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока,ЭтотОбъект,,ИмяТабЧастиОбъекта);
				Иначе  			
					НоваяСтрока.Сумма = НоваяСтрока.Сумма * -1;				
				КонецЕсли;
			КонецЕсли; 			

			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "УплаченныйНДС", Истина);    
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, ИмяТабЧастиОбъекта, ОтражатьВБухгалтерскомУчете);
			ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);			
		КонецЦикла;
	КонецЦикла;     	
	
КонецПроцедуры

// Заполняет счета расчетов по умолчанию, если это нужно
Процедура ЗаполнитьСчетаУчетаРасчетовРегл() Экспорт
	
	ЗаполнятьСчетаРасчетов = Истина;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МетаданныеДокумента = ДокументОснование.ПолучитьОбъект().Метаданные();
		Если (ОбщегоНазначения.ЕстьРеквизитДокумента("ОтложитьПринятиеНДСКЗачету", МетаданныеДокумента) И ДокументОснование.ОтложитьПринятиеНДСКЗачету) 
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда		
			
			СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
			СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Типовой.ПустаяСсылка();

			ЗаполнятьСчетаРасчетов = Ложь;
		КонецЕсли;
	КонецЕсли;     
	
	Если ЗаполнятьСчетаРасчетов Тогда
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетовРегл

// Производит заполнение и установку реквизитов налогового учета и НДС 
// в строке табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		
Конецпроцедуры	

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт

	Если ЗаполнятьБУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли; 		
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли; 		
	
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьСчетаБУ

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Если ИмяТабЧасти = "ОС" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);			
	ИначеЕсли ИмяТабЧасти = "НМА" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаНМА(Организация, СтрокаТЧ.НематериальныйАктив, Дата);			
		СчетаУчета.Вставить("СчетУчетаНДСПоПриобретению", ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	Иначе	
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	КонецЕсли;
	
	Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
		СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	КонецЕсли;	
		
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);	

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура();	
	
	Возврат СтруктураФорм;            
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
    // В случае, если НДС включается в стоимость
	// документ не имеет возможности отразить операцию по БУ.
	// Предполагается, что в этом случае отражение в бухгалтерском учете д/б
	// пройти в исходном первичном документе.
	Если СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = "Признаки отражения в бухгалтерском учете и включения НДС в стоимость не могут быть установлены совместно." + Символы.ПС + "В случае, если НДС включен в стоимость, операция не может быть отражена в бухгалтерском учете с помощью данного документа.";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее Тогда
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСБУ");
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСНУ");				
			КонецЕсли;
						
		КонецЕсли;
	Иначе
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
	КонецЕсли;                   	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()
  
// Проверяет правильность заполнения строк табличной части "Услуги".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");			
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");			
		КонецЕсли;
	КонецЕсли;    		                 
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();

	// Проверить что в табличной части  Услуги нет товаров
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ,Заголовок); 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Иначе 
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	КонецЕсли;

	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");			
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");			
		КонецЕсли;
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ОС".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");			
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");			
		КонецЕсли;
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");			
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда		
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");			
		КонецЕсли;
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаДокумента, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок)
	
	ПризнакКорректировкиЗатрат = СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее;
	ПризнакКорректировки = СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации ИЛИ ПризнакКорректировкиЗатрат;
			   
	// Проводки по товарам
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		// В бухгалтерском учете
		Проводка = ПроводкиБУ.Добавить();				
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		// меняем знак, так как для корректировки применялась "перевернутая корреспонденция"
		Проводка.Сумма       = ?(ПризнакКорректировки, - СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		Проводка.Содержание  = ?(ПризнакКорректировки, "Корректировка ", "") + "НДС: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если ПризнакКорректировки Тогда						
			Если ПризнакКорректировкиЗатрат Тогда
				// Проводка по затратной части
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатратНДСБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ3);
			Иначе	
				// Проводка по взаиморасчетам
				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				Если  СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				КонецЕсли;  
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",				        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           				СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",  	СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;
			
			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Если Проводка.СчетДт.Валютный Тогда
				
				Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				// меняем знак, так как для корректировки применялась "перевернутая корреспонденция"
				Проводка.ВалютнаяСуммаДт 	= - СтрокаТаблицы.НДСВал;
				
			КонецЕсли;		
			
			// Отражение в налоговом учете
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ .Период      = Дата;
				ПроводкаНУ .Организация = Организация;
				ПроводкаНУ .Сумма       = - СтрокаТаблицы.НДС;
		
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				Если ПризнакКорректировкиЗатрат Тогда
					// Проводка по затратной части
					ПроводкаНУ .СчетДт      = СчетЗатратНДСНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ3);
				Иначе	
					// Проводка по взаиморасчетам
					Если  СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
						
					Иначе
						
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",				        СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           				СтруктураШапкиДокумента.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ДокументыРасчетовСКонтрагентами",  	СтруктураШапкиДокумента.Ссылка);
					КонецЕсли;
				КонецЕсли;
				
				ПроводкаНУ .СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			  
				ПроводкаНУ .Содержание  = ?(ПризнакКорректировки, "Корректировка ", "") + "НДС: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);		
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли;
		Иначе				
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			
			// Проводка по взаиморасчетам
			Если  СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			Иначе  			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;
		
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
				
			КонецЕсли;	
			
				// Отражение в налоговом учете
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ .Период      = Дата;
				ПроводкаНУ .Организация = Организация;
				ПроводкаНУ .Сумма       = СтрокаТаблицы.НДС;
		
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
                					
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				// Проводка по взаиморасчетам
				Если  СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке Тогда
					ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);					
				Иначе  					
					ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);					
				КонецЕсли;
				
				ПроводкаНУ .Содержание  = ?(ПризнакКорректировки, "Корректировка ", "") + "НДС: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);		
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли;

		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры // ДвиженияПоРегистрамРегл 

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить движения по спецрегистрам подсистемы учета НДС
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",	ТаблицаПоУслугам);    
	ТаблицыДокумента.Вставить("ТаблицаПоОС",		ТаблицаПоОС);    
	ТаблицыДокумента.Вставить("ТаблицаПоНМА",		ТаблицаПоНМА);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ПроводкиБУ 		= Движения.Типовой;		
		ПроводкиНУ 		= Движения.Налоговый;				
		ДатаДокумента 	= СтруктураШапкиДокумента.Дата;		
		// Проводки по взаиморасчетам не предполагаются при прочей корректировке
		Если НЕ ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее Тогда
			ТаблицаАвансов 	= УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету, "НДС");
		КонецЕсли;
		// Проводки по БУ
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоТоварам, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоОС, 		ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоНМА, 	ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		
		//Учет курсовых разниц
		Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
			ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		КонецЕсли; // Учет курсовых разниц
	КонецЕсли;	 
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если НЕ ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	ПризнакКорректировки = НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              						
			Если ПризнакКорректировки Тогда
				УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, ТабЧасть, "ИдТабЧасти", Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);				
			Иначе	
				УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДСКВозмещению(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);				
			КонецЕсли;		
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);       	
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура-обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;		
	
	//определим сумму документа
	СуммаДокумента  = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
		
  	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");
КонецПроцедуры

//Процедура-обработчик соыбтия "ОбработкаПроведения" документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	НеобходимостьОтраженияВНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	//проверим заполнение шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//проверим заполнение табличной части  Товары                                                                                 	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//проверим заполнение табличной части  Услуги
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок);
	//проверим заполнение табличной части ОС
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	//проверим заполнение табличной части НМА
	ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок);
	    	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", 			"Номенклатура");	
	СтруктураПолей.Вставить("Количество", 				"Количество");
	СтруктураПолей.Вставить("Коэффициент", 				"Коэффициент");
	СтруктураПолей.Вставить("Сумма", 					"Сумма");		
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("УплаченныйНДС",			"УплаченныйНДС");
	
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления",		"НДСВидПоступления");
	             
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", 			"Номенклатура");
	СтруктураПолей.Вставить("Содержание", 				"Содержание");
	СтруктураПолей.Вставить("Услуга", 					"Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество", 				"Количество");
	СтруктураПолей.Вставить("Сумма", 					"Сумма");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС",						"СуммаНДС");
	СтруктураПолей.Вставить("УплаченныйНДС",			"УплаченныйНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления",		"НДСВидПоступления");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "ОсновныеСредства".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",				"ОсновноеСредство");	
	СтруктураПолей.Вставить("Сумма", 					"Сумма");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("УплаченныйНДС",			"УплаченныйНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления",		"НДСВидПоступления");
	

	РезультатЗапросаПоОсновнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "НМА".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",				"НематериальныйАктив");	
	СтруктураПолей.Вставить("Сумма", 					"Сумма");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("УплаченныйНДС",			"УплаченныйНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления",		"НДСВидПоступления");
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	
	// Подготовим таблицы товаров, услуг, ОС для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	ТаблицаПоУслугам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	ТаблицаПоОС 		= ПодготовитьТаблицуТоваров(РезультатЗапросаПоОсновнымСредствам, СтруктураШапкиДокумента);
	
	ТаблицаПоНМА 		= ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, 	СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, 	СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС,			СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, 		СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоУслугам,ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);			
							
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
		Если НЕ Отказ И ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаПрочее Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;									
	КонецЕсли;

	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи
    

мВалютаРегламентированногоУчета 				= Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
//мПоддержкаРаботыСоСтруктурнымиПодразделениями 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();