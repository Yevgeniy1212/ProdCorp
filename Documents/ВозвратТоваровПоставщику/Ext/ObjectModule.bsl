Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()
    ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КодОС = Ложь;
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС			= Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровПоставщику.Номер,
	               |	ВозвратТоваровПоставщику.Дата,
	               |	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК Основание,
	               |	ВозвратТоваровПоставщику.Контрагент,
	               |	ВозвратТоваровПоставщику.Организация,
				   |    ВозвратТоваровПоставщику.СтруктурноеПодразделение,
	               |	ВозвратТоваровПоставщику.СуммаДокумента,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента,
	               |	ВозвратТоваровПоставщику.УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	               |	ВозвратТоваровПоставщику.Склад,
	               |	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	              |	ВозвратТоваровПоставщикуТовары.Номенклатура,
	              |	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	              |	ВозвратТоваровПоставщикуТовары.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	              |	ВозвратТоваровПоставщикуТовары.Количество,
	              |	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	              |	ВозвратТоваровПоставщикуТовары.Цена,
	              |	ВозвратТоваровПоставщикуТовары.Сумма,
	              |	ВозвратТоваровПоставщикуТовары.СуммаНДС,
	              |	0 КАК Метка
	              |ИЗ
	              |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	              |ГДЕ
	              |	ВозвратТоваровПоставщикуТовары.Ссылка = &ТекущийДокумент
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ВозвратТоваровПоставщикуУслуги.НомерСтроки,
	              |	ВозвратТоваровПоставщикуУслуги.Номенклатура,
	              |	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	              |	ВозвратТоваровПоставщикуУслуги.Номенклатура."+ТекстКодАртикул+",
	              |	ВозвратТоваровПоставщикуУслуги.Количество,
	              |	""ед."",
	              |	ВозвратТоваровПоставщикуУслуги.Цена,
	              |	ВозвратТоваровПоставщикуУслуги.Сумма,
	              |	ВозвратТоваровПоставщикуУслуги.СуммаНДС,
	              |	1
	              |ИЗ
	              |	Документ.ВозвратТоваровПоставщику.Услуги КАК ВозвратТоваровПоставщикуУслуги
	              |ГДЕ
	              |	ВозвратТоваровПоставщикуУслуги.Ссылка = &ТекущийДокумент
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ВозвратТоваровПоставщикуОС.НомерСтроки,
	              |	ВозвратТоваровПоставщикуОС.ОсновноеСредство,
	              |	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)),
	              |	"+?(КодОС ,"ВозвратТоваровПоставщикуОС.ОсновноеСредство.Код","""""")+",
	              |	1,   	   // количество всегда 1
	              |	""ед."",
	              |	ВозвратТоваровПоставщикуОС.Сумма,  // цена равна сумме
	              |	ВозвратТоваровПоставщикуОС.Сумма,
	              |	ВозвратТоваровПоставщикуОС.СуммаНДС,
	              |	2
	              |ИЗ
	              |	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
	              |ГДЕ
	              |	ВозвратТоваровПоставщикуОС.Ссылка = &ТекущийДокумент
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Метка,
	              |	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ВыборкаСтрокТовары = ЗапросТовары.Выбрать();
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Возврат поставщику", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеКонтрагента);
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеОрганизации);
	ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;		
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	НомПП    = 0;
	Сумма    = 0;
	СуммаНДС = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		НомПП = НомПП + 1;
		ОбластьМакета.Параметры.НомерСтроки = НомПП;
		
		ОбластьМакета.Параметры.Товар = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар),СокрЛП(ВыборкаСтрокТовары.Товар),ВыборкаСтрокТовары.Номенклатура);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;				
		КонецЕсли;   
		
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;
	
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если НЕ Шапка.СуммаВключаетНДС ТОгда
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
			ТабДокумент.Вывести(ОбластьИтогоСНДС);
		КонецЕсли;
		
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Шапка.МОЛ, Дата);
		ОбластьМакета.Параметры.ОтпустилМОЛ = ДанныеМОЛ.Представление;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьВозвратаПоставщику();
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Возврат поставщику"), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Возврат поставщику");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаДавСырья;

		Иначе
			Если ИмяТабЧасти <> "Услуги" Тогда
				СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			Иначе
				СтрокаТЧ.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");			
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		Иначе
			СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда

		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		Иначе
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ИмяТабЧасти <> "Услуги" Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

		Иначе
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		КонецЕсли;
		
	КонецЕсли; // Если ЗаполнятьНУ  = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	     	
    ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		
		  
КонецПроцедуры	

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Коэффициент,
	|	Количество,
	|	Цена,
	// - КУФИБ - начало
	|	Заказ,
	|	ЗаявкаМТС,
	|	Подразделение,
	// - КУФИБ - конец
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СчетУчетаБУ,
	|	СчетУчетаНУ,
	|	СчетУчетаНДС,
	|	Ссылка.СуммаВключаетНДС,
	|	Ссылка.УчитыватьНДС,
	|	Ссылка.НДСВключенВСтоимость,
	|	НДСВидОборота,
	|	НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ОбщегоНазначения.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ОбщегоНазначения.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
 		// - КУФИБ - начало
		СтрокаТабличнойЧасти.Заказ				= Выборка.Заказ;
		СтрокаТабличнойЧасти.ЗаявкаМТС			= Выборка.ЗаявкаМТС;
		СтрокаТабличнойЧасти.Подразделение		= Выборка.Подразделение;
		// - КУФИБ - конец

		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
		                                  КурсОсн, Курс,КратностьОсн, Кратность);

		СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                  УчитыватьНДС, СуммаВключаетНДС,
		                                  УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
        ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.СчетУчетаБУ   = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ   = Выборка.СчетУчетаНУ;
		СтрокаТабличнойЧасти.СчетУчетаНДС  = Выборка.СчетУчетаНДС;
		СтрокаТабличнойЧасти.НДСВидОборота = Выборка.НДСВидОборота;
		
		СтрокаТабличнойЧасти.НомерГТД      = Выборка.НомерГТД;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьУслугиПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка.ВалютаДокумента,
	|	Номенклатура,
	|	Содержание,
	|	Количество,
	|	Цена,
	// - КУФИБ - начало
	|	Заказ,
	|	ЗаявкаМТС,
	|	Подразделение,
	// - КУФИБ - конец
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СчетЗатратБУ,
	|	СубконтоЗатратБУ1,
	|	СубконтоЗатратБУ2,
	|	СубконтоЗатратБУ3,
	|	СчетЗатратНУ,
	|	СубконтоЗатратНУ1,
	|	СубконтоЗатратНУ2,
	|	СубконтоЗатратНУ3,
	|	СчетУчетаНДС,
	|	Ссылка.СуммаВключаетНДС,
	|	Ссылка.УчитыватьНДС,
	|	Ссылка.НДСВключенВСтоимость,
	|	НДСВидОборота,
	|	НДСВидПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ОбщегоНазначения.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ОбщегоНазначения.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Услуги.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Содержание	 	  = Выборка.Содержание;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;
 		// - КУФИБ - начало
		СтрокаТабличнойЧасти.Заказ				= Выборка.Заказ;
		СтрокаТабличнойЧасти.ЗаявкаМТС			= Выборка.ЗаявкаМТС;
		СтрокаТабличнойЧасти.Подразделение		= Выборка.Подразделение;
		// - КУФИБ - конец

		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
		                                  КурсОсн, Курс,КратностьОсн, Кратность);

		СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                  УчитыватьНДС, СуммаВключаетНДС,
		                                  УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));


		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
        ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.СчетЗатратБУ = Выборка.СчетЗатратБУ;
		СтрокаТабличнойЧасти.СубконтоЗатратБУ1 = Выборка.СубконтоЗатратБУ1;
		СтрокаТабличнойЧасти.СубконтоЗатратБУ2 = Выборка.СубконтоЗатратБУ2;
		СтрокаТабличнойЧасти.СубконтоЗатратБУ3 = Выборка.СубконтоЗатратБУ3;
		СтрокаТабличнойЧасти.СчетЗатратНУ = Выборка.СчетЗатратНУ;
		СтрокаТабличнойЧасти.СубконтоЗатратНУ1 = Выборка.СубконтоЗатратНУ1;
		СтрокаТабличнойЧасти.СубконтоЗатратНУ2 = Выборка.СубконтоЗатратНУ2;
		СтрокаТабличнойЧасти.СубконтоЗатратНУ3 = Выборка.СубконтоЗатратНУ3;
		СтрокаТабличнойЧасти.СчетУчетаНДС = Выборка.СчетУчетаНДС;
		СтрокаТабличнойЧасти.НДСВидОборота = Выборка.НДСВидОборота;
		СтрокаТабличнойЧасти.НДСВидПоступления = Выборка.НДСВидПоступления;

		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОСПоОснованию(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",  ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугОС.Ссылка.ВалютаДокумента,
	|	ПоступлениеТоваровУслугОС.ОсновноеСредство,
	|	ПоступлениеТоваровУслугОС.Сумма,
	// - КУФИБ - начало
	|	ПоступлениеТоваровУслугОС.Заказ,
	|	ПоступлениеТоваровУслугОС.ЗаявкаМТС,
	|	ПоступлениеТоваровУслугОС.Подразделение,
	// - КУФИБ - конец
	|	ПоступлениеТоваровУслугОС.СтавкаНДС,
	|	ПоступлениеТоваровУслугОС.СуммаНДС,
	|	ПоступлениеТоваровУслугОС.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугОС.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугОС.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугОС.НДСВидОборота,
	|	ПоступлениеТоваровУслугОС.НДСВидПоступления,
	|	ПоступлениеТоваровУслугОС.Ссылка.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслугОС.Ссылка.УчитыватьНДС,
	|	ПоступлениеТоваровУслугОС.Ссылка.НДСВключенВСтоимость,
	|	ПоступлениеТоваровУслугОС.ПодразделениеОрганизации,
	|	ПоступлениеТоваровУслугОС.МОЛОрганизации
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ОС КАК ПоступлениеТоваровУслугОС
	|ГДЕ
	|	ПоступлениеТоваровУслугОС.Ссылка = &Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();

	Курс         = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОсн      = ОбщегоНазначения.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Кратность    = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОсн = ОбщегоНазначения.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	
	// видимость местонахождения ОС
	ЗаполнятьПодразделенияОС = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата);
	ЗаполнятьМОЛОС 			 = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата);
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.ОсновноеСредство;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.Сумма			  = Выборка.Сумма;
 		// - КУФИБ - начало
		СтрокаТабличнойЧасти.Заказ				= Выборка.Заказ;
		СтрокаТабличнойЧасти.ЗаявкаМТС			= Выборка.ЗаявкаМТС;
		СтрокаТабличнойЧасти.Подразделение		= Выборка.Подразделение;
		// - КУФИБ - конец
		
		Если ЗаполнятьПодразделенияОС Тогда 
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		
		Если ЗаполнятьМОЛОС Тогда
			СтрокаТабличнойЧасти.МОЛОрганизации = Выборка.МОЛОрганизации;
		КонецЕсли;
		
		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		                                  КурсОсн, Курс,КратностьОсн, Кратность);
										  
		СтрокаТабличнойЧасти.Сумма = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма,
		                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                  Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
		                                  УчитыватьНДС, СуммаВключаетНДС,
		                                  УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

										  
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
        ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.СчетУчетаБУ 		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ		= Выборка.СчетУчетаНУ;
		СтрокаТабличнойЧасти.СчетУчетаНДС		= Выборка.СчетУчетаНДС;
		СтрокаТабличнойЧасти.НДСВидОборота		= Выборка.НДСВидОборота;
						
	КонецЦикла;
	
КонецПроцедуры	// ЗаполнитьОСПоОснованию()

// Процедура выполняет заполнение табличной части ЗаполнитьУчастникиСовместнойДеятельностиПоОснованию по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьУчастникиСовместнойДеятельностиПоОснованию(ДокументОснование) Экспорт
	
	УчастникиСовместнойДеятельности.Загрузить(ДокументОснование.УчастникиСовместнойДеятельности.Выгрузить());
		
КонецПроцедуры // ЗаполнитьУслугиПоОснованию()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ИмяТабЧасти = "ОС" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	

		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	
	Иначе	
		
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
		
	КонецЕсли;	
	
	МетаданныеДок = ЭтотОбъект.Метаданные();
    ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДок);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		
		Склад = Основание.Склад;
		
		ДокументОснование = Основание;
		
		// Заполним вид операции
		ВидыОперацийПоступлениеТоваров       = Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ВидыОперацийВозвратТоваровПоставщику = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВидОперации          = ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
			УчитыватьНДС         = Ложь;
			НДСВключенВСтоимость = Ложь;
			СуммаВключаетНДС     = Ложь;	
		Иначе
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Покупка;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьУслугиПоОснованию(Основание);
			ЗаполнитьОСПоОснованию(Основание);
			ЗаполнитьУчастникиСовместнойДеятельностиПоОснованию(Основание);
			
		КонецЕсли;
		
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратов;
				
		ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ДокументОснование = Основание;
		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;				
			#КонецЕсли
			Возврат;       		
		КонецЕсли;  
		
		Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка;
						
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
		
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
		
		Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
			УчестьСуммуНДС = Истина;
		Иначе
			УчестьСуммуНДС = Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Услуги Цикл
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Услуги", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			Если УчестьСуммуНДС Тогда
				СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);	
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Товары", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			Если УчестьСуммуНДС Тогда
				СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				СтрокаТабличнойЧасти.Цена = Окр(?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество),2);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из ОС Цикл
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);	
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"ОС", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			Если УчестьСуммуНДС Тогда
				СтрокаТабличнойЧасти.Сумма    = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЕсли;
		КонецЦикла;
		          
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоВозвратам   = СчетаУчета.СчетВозвратов;
		
	КонецЕсли;    
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция возвращает таблицу с фиксированными активами по данным таб.части ОС документа.
//
// Параметры:
//  Структура - структура шапки документа.
//
// Возвращемое значение:
//  ТаблицаЗначений - таблица с 
//
Функция ПолучитьТаблицуФА(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СУММА(ВозвратТоваровПоставщикуОС.Сумма) КАК Сумма,
	               |	ВозвратТоваровПоставщикуОС.Ссылка.Организация КАК Организация
	               |ПОМЕСТИТЬ СписокОС
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуОС.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВозвратТоваровПоставщикуОС.ОсновноеСредство,
	               |	ВозвратТоваровПоставщикуОС.Ссылка.Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СписокОС.Сумма,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПризнакФА,
	               |	ВЫБОР
	               |		КОГДА ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПризнакВыделенногоУчетаФА,
	               |	ОбъектыНалоговогоУчетаФАСрезПоследних.ГруппаНУ КАК ГруппаНУ,
	               |	ОбъектыНалоговогоУчетаФАСрезПоследних.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ,  
	               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА КАК ВидЛьготыФА				   
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |				&Дата,
	               |				ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.ОсновныеСредства) В
	               |						(ВЫБРАТЬ
	               |							СписокОС.ОсновноеСредство
	               |						ИЗ
	               |							СписокОС КАК СписокОС)
	               |					И СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	               |		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
	               |			И СписокОС.Организация = ОбъектыНалоговогоУчетаФАСрезПоследних.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	               |				&Дата,
	               |				ФиксированныйАктив В
	               |						(ВЫБРАТЬ
	               |							СписокОС.ОсновноеСредство
	               |						ИЗ
	               |							СписокОС КАК СписокОС)
	               |					И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
	               |		ПО СписокОС.ОсновноеСредство = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	               |			И СписокОС.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
		
	ТаблицаФА = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаФА;
	
КонецФункции

// Функция возвращает результат запроса с текущими данными основных средств табличной части.
//
Функция СформироватьЗапросПоТабличнойЧастиОС()
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
		
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВозвратТоваровПоставщикуОС.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ СписокОС
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуОС.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизации.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ОС_Поступившие
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизации
	               |ГДЕ
	               |	СостоянияОСОрганизации.ДатаСостояния < &ДатаДокумента
	               |	И СостоянияОСОрганизации.Организация = &Организация
	               |	И СостоянияОСОрганизации.ОсновноеСредство В
	               |			(ВЫБРАТЬ
	               |				СписокОС.ОсновноеСредство
	               |			ИЗ
	               |				СписокОС КАК СписокОС)
	               |	И СостоянияОСОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ОС_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	               |ГДЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента
	               |	И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	               |	И СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В
	               |			(ВЫБРАТЬ
	               |				СписокОС.ОсновноеСредство
	               |			ИЗ
	               |				СписокОС КАК СписокОС)
	               |	И СостоянияОСОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизации.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ОС_ПринятыеКУчету
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизации
	               |ГДЕ
	               |	СостоянияОСОрганизации.ДатаСостояния < &ДатаДокумента
	               |	И СостоянияОСОрганизации.Организация = &Организация
	               |	И СостоянияОСОрганизации.ОсновноеСредство В
	               |			(ВЫБРАТЬ
	               |				СписокОС.ОсновноеСредство
	               |			ИЗ
	               |				СписокОС КАК СписокОС)
	               |	И СостоянияОСОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ФиксированныйАктив
	               |ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФАСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |			&ДатаДокумента,
	               |			ФиксированныйАктив В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)
	               |				И Организация = &Организация
	               |				И СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ФиксированныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог,
	               |	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница,
	               |	ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения
	               |ПОМЕСТИТЬ ОбъектыИмущественногоНалогаСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	               |			&ДатаДокумента,
	               |			ОбъектНалогообложения В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)
	               |				И Организация = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектНалогообложения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог,
	               |	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница,
	               |	ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения
	               |ПОМЕСТИТЬ ОбъектыЗемельногоНалогаСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	               |			&ДатаДокумента,
	               |			ОбъектНалогообложения В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)
	               |				И Организация = &Организация) КАК ОбъектыЗемельногоНалогаСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектНалогообложения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог,
	               |	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница,
	               |	ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОбъектНалогообложения
	               |ПОМЕСТИТЬ ОбъектыТранспортногоНалогаСрезПоследних
	               |ИЗ
	               |	РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	               |			&ДатаДокумента,
	               |			ОбъектНалогообложения В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)
	               |				И Организация = &Организация) КАК ОбъектыТранспортногоНалогаСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектНалогообложения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровПоставщикуОС.НомерСтроки,
	               |	ВозвратТоваровПоставщикуОС.ОсновноеСредство КАК Номенклатура,
	               |	ВозвратТоваровПоставщикуОС.Сумма,
	               |	ВозвратТоваровПоставщикуОС.СчетУчетаБУ,
	               |	ВозвратТоваровПоставщикуОС.СуммаНДС КАК НДС,
	               |	ВозвратТоваровПоставщикуОС.НДСВидОборота,
	               |	ВозвратТоваровПоставщикуОС.НДСВидПоступления,
	               |	ВозвратТоваровПоставщикуОС.СтавкаНДС,
	               |	ВозвратТоваровПоставщикуОС.СчетУчетаНУ,
	               |	ВозвратТоваровПоставщикуОС.СчетУчетаНДС,
	               |	ВЫБОР
	               |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета,
	               |	ВЫБОР
	               |		КОГДА ОС_Поступившие.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Поступило,
	               |	ВЫБОР
	               |		КОГДА ОС_ПринятыеКУчету.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПринятоКУчету,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПризнакФА,
	               |	ЕСТЬNULL(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектИмущественногоНалога,
	               |	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога,
	               |	ЕСТЬNULL(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектТранспортногоНалога,
	               |	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	               |	ЕСТЬNULL(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК ОбъектЗемельногоНалога,
	               |	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	               |	ВозвратТоваровПоставщикуОС.ПодразделениеОрганизации,
	               |	ВозвратТоваровПоставщикуОС.МОЛОрганизации
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_Поступившие КАК ОС_Поступившие
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОС_Поступившие.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОС_ПринятыеКУчету КАК ОС_ПринятыеКУчету
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОС_ПринятыеКУчету.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФАСрезПоследних КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыИмущественногоНалогаСрезПоследних КАК ОбъектыИмущественногоНалогаСрезПоследних
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыЗемельногоНалогаСрезПоследних КАК ОбъектыЗемельногоНалогаСрезПоследних
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыТранспортногоНалогаСрезПоследних КАК ОбъектыТранспортногоНалогаСрезПоследних
	               |		ПО ВозвратТоваровПоставщикуОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
	               |ГДЕ
	               |	ВозвратТоваровПоставщикуОС.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента,ЕстьКоэффициент = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ИмяТабЧасти");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("СтруктурноеПодразделение");
	
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияНУ");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ3");
	
	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаТоваров.Колонки.Добавить("СписыватьПоУказаннойСтоимости");
	
	КоэффОплаты      = 1;
	
	ТаблицаТоваров.ЗаполнитьЗначения(КоэффОплаты,      "КоэффОплаты");
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) ТОгда
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "КорСчетСписанияБУ");
	Иначе
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам, "КорСчетСписанияБУ");
	КонецЕсли;
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент		   , "КорСубконтоСписанияБУ1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "КорСубконтоСписанияБУ2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка			   , "КорСубконтоСписанияБУ3");
	
	ТаблицаТоваров.ЗаполнитьЗначения(ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(), "КорСчетСписанияНУ");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент							   , "КорСубконтоСписанияНУ1");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента					   , "КорСубконтоСписанияНУ2");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка								   , "КорСубконтоСписанияНУ3");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение, "СтруктурноеПодразделение");
			
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) 
		 И Не ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДокументОснование,      "ДокументОприходования");
	КонецЕсли; 
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения("Товары",                            "ИмяТабЧасти");

	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                       "ДоговорПоставщика");
	
	ТаблицаТоваров.ЗаполнитьЗначения(Истина, "СписыватьПоУказаннойСтоимости");
	
	Если ЕстьКоэффициент Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
			Если (СтрокаТаблицы.Коэффициент<>0) Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент,
	                                             |КурсВзаиморасчетов, КратностьВзаиморасчетов");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
	
	Если Товары.Количество()>0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если Не ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		// Счет отнесения стоимости будем проверять только в том случае
		// если есть данные в табличных частях Товары или Услуги, а для ОС счет с/сти не нужен
		Если Товары.Количество() <> 0 Или Услуги.Количество() <> 0 Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетОтнесенияСебестоимостиБУ");
			Если СтруктураШапкиДокумента.УчитыватьКПН И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				СтруктураОбязательныхПолей.Вставить("СчетОтнесенияСебестоимостиНУ");
			Конецесли;    						
		КонецЕсли;
		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "Не заполнено значение реквизита ""Счет учета расчетов""!");
	КонецЕсли;
													 
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)
    ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	Если СтруктураШапкиДокумента.УчитыватьНДС  Тогда	
		Если НЕ ОтложитьПринятиеНДСКЗачету Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли; 
		
		Если НЕ  НДСВключенВСтоимость И НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;	
	КонецЕсли;   
		
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.НеобходимостьотраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;
	
    		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма");
    	
	Если СтруктураШапкиДокумента.УчитыватьНДС  Тогда	
		Если НЕ ОтложитьПринятиеНДСКЗачету Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли; 
		
		Если НЕ  НДСВключенВСтоимость И НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;	

	КонецЕсли;   


	СтруктураОбязательныхПолей.Вставить("СчетЗатратБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	КонецЕсли;	

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "ОС".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС  Тогда	
		Если НЕ ОтложитьПринятиеНДСКЗачету Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
		СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли; 
		
		Если НЕ  НДСВключенВСтоимость И НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;	   
	КонецЕсли;   

	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям Тогда
		СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ Тогда
		СтруктураОбязательныхПолей.Вставить("МОЛОрганизации");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, ОС, "ОС", Отказ, Заголовок);
	
	// основные средства еще нужно проверять на то, чтоб они были лиюо принятыми к учету либо поступившими, и не были сняты с учета ранее
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если Не СтрокаОС.ПринятоКУчету Тогда
			Если Не СтрокаОС.Поступило Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.Номенклатура+"> не поступило в указанной организации.",,, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;		
			КонецЕсли;
		КонецЕсли;	
			
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.Номенклатура+"> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
    	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОС()

// Проверяет правильность заполнения табличной части Прочее
// в специфических случаях
Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, ТаблицаДокумента, ИмяТабличнойЧасти, Отказ, Заголовок)
	// Цикл по строкам табличной части.
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
    СтрокаНачалаСообщенияОбОшибке = "";
	
	Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ИмяТабличнойЧасти +""": ";
				
		СтруктураОбязательныхПолей = Новый Структура;
		// проверка реквизитов НДС						
		Если СтруктураШапкиДокумента.УчитыватьНДС И ((СтрокаТаблицы.СтавкаНДС.Ставка <> 0) и (Не СтруктураШапкиДокумента.НДСВключенВСтоимость)) Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;				
		
		// Цикл проверки по списку реквизитов
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];           			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // нужно ругаться
				
				// Проверка и вывод сообщений
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;				
				КонецЕсли;                                  
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;                                  
		КонецЦикла;		
	КонецЦикла;         

КонецПроцедуры	

// Процедура формирует проводки по отражению дохода или расхода от разницы 
// между стоимостью товаров, указанной в табличной части документа и 
// стоимостью, сформированной процедурой партионного учета.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура - выборка из результата запроса по
//                            шапке документа
//  ТаблицаПоТоварам - ТаблицаЗначений - таблица, содержащая данные для 
//                     проведения и проверки табличной части "Товары"
//  Отказ        - Булево - флаг отказа в проведении
//  Заголовок    - Строка - заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Если ТаблицаПоТоварам.Колонки.Найти("РазницаВСтоимостиБУ") = Неопределено Тогда
		ТаблицаПоТоварам.Колонки.Добавить("РазницаВСтоимостиБУ");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		ОбщаяРазницаСтоимостиПоБУ = 0;
		ТаблицаСписанныхПартий = Строка.СписанныеПартииБУ;
		
		Для каждого СтрокаПартий Из ТаблицаСписанныхПартий Цикл
		
			РазницаВСтоимости = СтрокаПартий.СуммаСписанияПартии - СтрокаПартий.СуммаСписания;
			
			Если РазницаВСтоимости = 0 Тогда
			
				продолжить;
			
			КонецЕсли; 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Разница в стоимости товаров";
			Проводка.Сумма       = РазницаВСтоимости;
			
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетОтнесенияСебестоимостиБУ;
						
			Для НомерСубконто=1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
			
				Если Проводка.СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
				ИначеЕсли Проводка.СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.Номенклатура.НоменклатурнаяГруппа);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, СтруктураШапкиДокумента["СубконтоОтнесенияСебестоимостиБУ"+НомерСубконто]);
				КонецЕсли
			
			КонецЦикла; 
			
			Проводка.СчетКт = Строка.СчетУчетаБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", Строка.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Строка.Склад);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаПартий.Партия);			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			
			ОбщаяРазницаСтоимостиПоБУ = ОбщаяРазницаСтоимостиПоБУ + РазницаВСтоимости;
			
		КонецЦикла;  
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом
			И НЕ ОбщаяРазницаСтоимостиПоБУ = 0 Тогда
						
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Разница в стоимости товаров";
			Проводка.Сумма       = ОбщаяРазницаСтоимостиПоБУ;
			
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетОтнесенияСебестоимостиНУ;
						
			Для НомерСубконто=1 По Проводка.СчетДт.ВидыСубконто.Количество() Цикл
			
				Если Проводка.СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", Строка.Номенклатура);
				ИначеЕсли Проводка.СчетДт.ВидыСубконто[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", Строка.Номенклатура.НоменклатурнаяГруппа);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, СтруктураШапкиДокумента["СубконтоОтнесенияСебестоимостиНУ"+НомерСубконто]);
				КонецЕсли
			
			КонецЦикла; 
			
			Проводка.СчетКт = Строка.СчетУчетаНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", Строка.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Строка.Склад);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  ВидУчетаНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРазницамВСтоимостиТоваров()

// Процедура формирования движений по регистру СоставОС 
//
Процедура ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента)
	
	//формируем список ОС, по которым необходимо осущестывить контроль их вхождения в какие-либо комплекты
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос   = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("СостояниеВСоставеОС", Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставОССрезПоследних.ОсновноеСредство,
	               |	СоставОССрезПоследних.ВСоставеОС
	               |ИЗ
	               |	РегистрСведений.СоставОС.СрезПоследних(
	               |		&Дата,
	               |		ОсновноеСредство В (&СписокОС)
	               |			И СостояниеВСоставеОС = &СостояниеВСоставеОС) КАК СоставОССрезПоследних";
	
				   
				   
    НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
			НоваяСтрока.Активность          = Истина;
			НоваяСтрока.ОсновноеСредство    = Выборка.ОсновноеСредство;
			НоваяСтрока.ВСоставеОС          = Выборка.ВСоставеОС;
			НоваяСтрока.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицапоУслугам, ТаблицаПоОС, Отказ, Заголовок);

	// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ, , "Возврат ТМЗ", СтруктураШапкиДокумента.НДСВключенВСтоимость); 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДок    = Дата;
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	
	// Проводки по услугам - только при покупке.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Покупка Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДок;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Возврат услуг";
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			
			Проводка.СчетКт       = СтрокаТаблицы.СчетЗатратБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);
			
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Иначе
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
			КонецЕсли; 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СчетЗатратБУ.Валютный Тогда
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;   
			
						
			// Проводка по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.НДС;
								
				Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетКт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке; 					
					Проводка.Содержание   = "Возврат: Отложенное принятие НДС к зачету"; 
				Иначе                                                  
					Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС; 			
					Проводка.Содержание   = "Возврат суммы НДС";
				КонецЕсли;

				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Иначе
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
				КонецЕсли; 
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",           СтруктураШапкиДокумента.Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
					
				КонецЕсли;
				
			КонецЕсли; // Проводка по НДС
			
			// Налоговый учет
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;					
					
					Проводка.СчетКт      = СтрокаТаблицы.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТаблицы.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтрокаТаблицы.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтрокаТаблицы.СубконтоЗатратНУ3);            			
					
					Проводка.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Проводка.Сумма = СтрокаТаблицы.Сумма;
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  ВидУчетаНУ);
					Проводка.Содержание   = "Прочие затраты";				
				КонецЕсли; 	
				
				//НДС по НУ
				
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период       = ДатаДок;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма        = СтрокаТаблицы.НДС;
					
					Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Возврат: Отложенное принятие НДС к зачету";  
					Иначе                                                  
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата); 			
						ПроводкаНУ.Содержание   = "Возврат суммы НДС";
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
							
	                ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);							
										
				КонецЕсли; // Проводка по НДС 				
				
			КонецЕсли;        			
		КонецЦикла;
		
		ВедетсяАналитУчетОсПоПодразделениям = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям;
		ВедетсяАналитУчетОсПоМОЛ = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ;

		Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаДок;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Возврат основных средств";
			Проводка.Сумма        = СтрокаТаблицы.Сумма;
			
			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Номенклатура);
			
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТаблицы.ПодразделениеОрганизации);
			КонецЕсли;
		
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.МОЛОрганизации);
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Иначе
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
			КонецЕсли; 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
				
			КонецЕсли;
			
			// Проводка по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДок;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СтрокаТаблицы.НДС;
				
				Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетКт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке; 					
					Проводка.Содержание   = "Возврат: Отложенное принятие НДС к зачету"; 
				Иначе                                                  
					Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС; 			
					Проводка.Содержание   = "Возврат суммы НДС";
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Иначе
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
				КонецЕсли; 
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
					
				КонецЕсли;
				
			КонецЕсли; // Проводка по НДС
			
			// Налоговый учет
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДок;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;					
					
					Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтрокаТаблицы.Номенклатура);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
										
					Проводка.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);

					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					Проводка.Сумма = СтрокаТаблицы.Сумма;
										
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
					Проводка.Содержание   = "Возврат основных средств";				
					
				КонецЕсли; 	
				
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период       = ДатаДок;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма        = СтрокаТаблицы.НДС;
					
					Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Возврат: Отложенное принятие НДС к зачету";  
					Иначе                                                  
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата); 			
						ПроводкаНУ.Содержание   = "Возврат суммы НДС";
					КонецЕсли;

					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
							
	                ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);							
										
				КонецЕсли; // Проводка по НДС 			
			КонецЕсли;  
			
			// Формируем движения по регистрам сведений
			
			// Движения по регистру СостоянияОСОрганизаций
			Движение = СостояниеОС.Добавить();
			
			Движение.Период			  		  = ДатаДок;
			Движение.ДатаСостояния  		  = ДатаДок;
			Движение.ОсновноеСредство		  = СтрокаТаблицы.Номенклатура;
			Движение.Организация      		  = СтруктураШапкиДокумента.Организация;
			Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
			Движение.Состояние				  = Перечисления.ВидыСостоянийОС.СнятоСУчета;
			
			// Движения по регистру СобытияОСОрганизаций
			Движение = СобытияОС.Добавить();
			
			Движение.Период          		  = ДатаДок;
			Движение.ОсновноеСредство		  = СтрокаТаблицы.Номенклатура;
			Движение.Организация     		  = СтруктураШапкиДокумента.Организация;
			Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
			Движение.Событие          		  = СтруктураШапкиДокумента.СобытиеОС;
			Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
			Движение.НомерДокумента  		  = СтруктураШапкиДокумента.Номер;
			
			// Если ОС уже был принят к учету, то нужно сформировать движения по регистрам сведений
			
			// Движения по регистру НачислениеАмортизации
			Если СтрокаТаблицы.ПринятоКУчету Тогда
				Движение = НачислениеАмортизацииБУ.Добавить();
				Движение.Период             	  = ДатаДок;
				Движение.ОсновноеСредство   	  = СтрокаТаблицы.Номенклатура;
				Движение.Организация        	  = СтруктураШапкиДокумента.Организация;
				Движение.НачислятьАмортизацию	  = Ложь;
				Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
			КонецЕсли;	
							
			// Формируем движения по регистрам местных налогов
			
			// Снимаем с учета по налогу на имущество
			Если СтрокаТаблицы.ОбъектИмущественногоНалога Тогда
				Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
				Движение.Период 		= ДатаДок;
				Движение.Организация 	= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаТаблицы.Номенклатура;
				Движение.НачислятьНалог = Ложь;			
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаИмущественногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;																			
				КонецЕсли;
				
			КонецЕсли;
			
			// Снимаем с учета по налогу на транспорт
			Если СтрокаТаблицы.ОбъектТранспортногоНалога Тогда
				Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
				Движение.Период 		= ДатаДок;
				Движение.Организация 	= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаТаблицы.Номенклатура;
				Движение.НачислятьНалог = Ложь;				
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаТранспортногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаТранспортногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;																			
				КонецЕсли;
			КонецЕсли;
			
			// Снимаем с учета по земельному налогу
			Если СтрокаТаблицы.ОбъектЗемельногоНалога Тогда
				Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
				Движение.Период 		= ДатаДок;
				Движение.Организация 	= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаТаблицы.Номенклатура;
				Движение.НачислятьНалог = Ложь;				
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаТаблицы.СтруктурнаяЕдиницаЗемельногоНалога,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					Движение.СтруктурнаяЕдиница = СтрокаТаблицы.СтруктурнаяЕдиницаЗемельногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;																			
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		// возврат суммы НДС из табличной части "Товары"
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			Для каждого ТекСтрока Из ТаблицаПоТоварам Цикл
				
				Если ТекСтрока.НДС=0 Тогда
					продолжить;
				КонецЕсли; 
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма = ТекСтрока.НДС;
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда			
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;       		
				Иначе                                                                               			
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;         		
				КонецЕсли; 
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Если Проводка.СчетДт.Валютный ТОгда
					Проводка.ВалютаДт = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = ТекСтрока.НДСВал;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетКт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке; 					
					Проводка.Содержание   = "Возврат: Отложенное принятие НДС к зачету"; 
				Иначе                                                  
					Проводка.СчетКт       = ТекСтрока.СчетУчетаНДС; 			
					Проводка.Содержание   = "Возврат суммы НДС";
				КонецЕсли;

				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					
				ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма = ТекСтрока.НДС;
				                                                                      			
					ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.ДоговорКонтрагента);
										
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Возврат: Отложенное принятие НДС к зачету";  
					Иначе                                                  
						ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(ТекСтрока.СчетУчетаНДС, Дата); 			
						ПроводкаНУ.Содержание   = "Возврат суммы НДС";
					КонецЕсли;

					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата) Тогда
			ТаблицаОстатков = Новый ТаблицаЗначений;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				
				ТаблицаОстатков       = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, МоментВремени(),СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом,СтруктураШапкиДокумента.ВалютаДокумента ,СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента,Неопределено,-1);
				
			Иначе
				
				ТаблицаОстатков       = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, МоментВремени(),СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом,СтруктураШапкиДокумента.ВалютаДокумента ,СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента,СтруктураШапкиДокумента.Сделка,-1);
				
			КонецЕсли;
		КонецЕсли;
		СтруктураПроводок = Новый Структура("СуммаПроводки,ВалСуммаПроводки,НоваяПроводка");
		ТаблицаНовыхПроводок = новый ТаблицаЗначений;
		
		ТаблицаНовыхПроводок.Колонки.Добавить("Период");
		ТаблицаНовыхПроводок.Колонки.Добавить("Организация");
		ТаблицаНовыхПроводок.Колонки.Добавить("СтруктурноеПодразделениеДт");
		ТаблицаНовыхПроводок.Колонки.Добавить("СтруктурноеПодразделениеКт");
		ТаблицаНовыхПроводок.Колонки.Добавить("Содержание");
		ТаблицаНовыхПроводок.Колонки.Добавить("Сумма");
		ТаблицаНовыхПроводок.Колонки.Добавить("СчетДт");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоДт1");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоДт2");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоДт3");
		ТаблицаНовыхПроводок.Колонки.Добавить("СчетКт");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоКт1");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоКт2");
		ТаблицаНовыхПроводок.Колонки.Добавить("СубконтоКт3");
		ТаблицаНовыхПроводок.Колонки.Добавить("ВалютаДт");
		ТаблицаНовыхПроводок.Колонки.Добавить("ВалютнаяСуммаДт");
		
		ЗачтеннаяСумма = 0;
		ЗачтеннаяСуммаВал = 0;
		
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
			Для Каждого Проводка Из ПроводкиБУ Цикл
				ОбщаяСуммаПроводки = Проводка.Сумма;
				СтруктураПроводок.СуммаПроводки = Проводка.Сумма;
				СтруктураПроводок.ВалСуммаПроводки = Проводка.ВалютнаяСуммаДт;
				СтруктураПроводок.НоваяПроводка = Ложь;
				Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
					
					Если СтрокаОстатков.СуммаОстаток=0 Тогда
						продолжить;
					КонецЕсли;
					
					Если СтрокаОстатков.СуммаОстаток>=СтруктураПроводок.СуммаПроводки И НЕ СтруктураПроводок.НоваяПроводка Тогда
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтрокаОстатков.Субконто3);
						
						СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток - СтруктураПроводок.СуммаПроводки;
						СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток - СтруктураПроводок.ВалСуммаПроводки;
						СтруктураПроводок.СуммаПроводки = 0;
						СтруктураПроводок.ВалСуммаПроводки = 0;
						СтруктураПроводок.НоваяПроводка = Ложь;
						
						ЗачтеннаяСумма = ЗачтеннаяСумма+Проводка.Сумма;
						Если проводка.СчетДт.Валютный Тогда
							ЗачтеннаяСуммаВал = ЗачтеннаяСуммаВал + Проводка.ВалютнаяСуммаДт;
						КонецЕсли;
						
						прервать;
						
					ИначеЕсли СтрокаОстатков.СуммаОстаток>=СтруктураПроводок.СуммаПроводки И СтруктураПроводок.НоваяПроводка Тогда
						
						НоваяПроводка = ТаблицаНовыхПроводок.Добавить();
						НоваяПроводка.Период = Проводка.Период;
						НоваяПроводка.Организация = Проводка.Организация;
						НоваяПроводка.Содержание = Проводка.Содержание;
						НоваяПроводка.Сумма = СтруктураПроводок.СуммаПроводки;
						НоваяПроводка.СчетДт = Проводка.СчетДт;
						НоваяПроводка.СубконтоДт1 = СтруктураШапкиДокумента.Контрагент;
						НоваяПроводка.СубконтоДт2 = СтруктураШапкиДокумента.ДоговорКонтрагента;
						НоваяПроводка.СубконтоДт3 = СтрокаОстатков.Субконто3;
						НоваяПроводка.СчетКт = Проводка.СчетКт;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>0 Тогда
							НоваяПроводка.СубконтоКт1 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[0].ВидСубконто];
						КонецЕсли;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>1 Тогда
							НоваяПроводка.СубконтоКт2 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[1].ВидСубконто];
						КонецЕсли;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>2 Тогда
							НоваяПроводка.СубконтоКт3 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[2].ВидСубконто];
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

						СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток - СтруктураПроводок.СуммаПроводки;
						СтруктураПроводок.СуммаПроводки = 0;
						
						Если Проводка.СчетДт.Валютный Тогда
							НоваяПроводка.ВалютаДт = Проводка.ВалютаДт;
							НоваяПроводка.ВалютнаяСуммаДт = СтруктураПроводок.ВалСуммаПроводки;
							СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток - СтруктураПроводок.ВалСуммаПроводки;
							СтруктураПроводок.ВалСуммаПроводки = 0;
						КонецЕсли;
						
						СтруктураПроводок.НоваяПроводка = Ложь;
						прервать;
						
					ИначеЕсли СтрокаОстатков.СуммаОстаток<СтруктураПроводок.СуммаПроводки И НЕ СтруктураПроводок.НоваяПроводка Тогда
						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтрокаОстатков.Субконто3);
						Проводка.Сумма = СтрокаОстатков.СуммаОстаток;
						
						СтруктураПроводок.СуммаПроводки = СтруктураПроводок.СуммаПроводки - СтрокаОстатков.СуммаОстаток;
						ЗачтеннаяСумма = ЗачтеннаяСумма+СтрокаОстатков.СуммаОстаток;
						СтрокаОстатков.СуммаОстаток = 0;
						
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютнаяСуммаДт = СтрокаОстатков.ВалютнаяСуммаОстаток;
							СтруктураПроводок.ВалСуммаПроводки = СтруктураПроводок.ВалСуммаПроводки - СтрокаОстатков.ВалютнаяСуммаОстаток;
							ЗачтеннаяСуммаВал = ЗачтеннаяСуммаВал + СтрокаОстатков.ВалютнаяСуммаОстаток;
							СтрокаОстатков.ВалютнаяСуммаОстаток = 0;
						КонецЕсли;
						
						СтруктураПроводок.НоваяПроводка = Истина;
						
					Иначе
						
						НоваяПроводка = ТаблицаНовыхПроводок.Добавить();
						НоваяПроводка.Период = Проводка.Период;
						НоваяПроводка.Организация = Проводка.Организация;
						НоваяПроводка.Содержание = Проводка.Содержание;
						
						НоваяПроводка.Сумма = СтрокаОстатков.СуммаОстаток;
						
						НоваяПроводка.СчетДт = Проводка.СчетДт;
						НоваяПроводка.СубконтоДт1 = СтруктураШапкиДокумента.Контрагент;
						НоваяПроводка.СубконтоДт2 = СтруктураШапкиДокумента.ДоговорКонтрагента;
						НоваяПроводка.СубконтоДт3 = СтрокаОстатков.Субконто3;
						НоваяПроводка.СчетКт = Проводка.СчетКт;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>0 Тогда
							НоваяПроводка.СубконтоКт1 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[0].ВидСубконто];
						КонецЕсли;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>1 Тогда
							НоваяПроводка.СубконтоКт2 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[1].ВидСубконто];
						КонецЕсли;
						Если Проводка.СчетКт.ВидыСубконто.Количество()>2 Тогда
							НоваяПроводка.СубконтоКт3 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[2].ВидСубконто];
						КонецЕсли;
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
						СтруктураПроводок.СуммаПроводки = СтруктураПроводок.СуммаПроводки - СтрокаОстатков.СуммаОстаток;
						СтрокаОстатков.СуммаОстаток = 0;
						
						Если Проводка.СчетДт.Валютный Тогда
							НоваяПроводка.ВалютаДт = Проводка.ВалютаДт;
							НоваяПроводка.ВалютнаяСуммаДт = СтрокаОстатков.ВалютнаяСуммаОстаток;
							СтруктураПроводок.ВалСуммаПроводки = СтруктураПроводок.ВалСуммаПроводки - СтрокаОстатков.ВалютнаяСуммаОстаток;
							СтрокаОстатков.ВалютнаяСуммаОстаток = 0;
						КонецЕсли;
						
						СтруктураПроводок.НоваяПроводка = Истина;
						
					КонецЕсли;
					
				КонецЦикла; 
				Если (СтруктураПроводок.СуммаПроводки>0) И (СтруктураПроводок.СуммаПроводки <> ОбщаяСуммаПроводки) Тогда
					НоваяПроводка = ТаблицаНовыхПроводок.Добавить();
					НоваяПроводка.Период = Проводка.Период;
					НоваяПроводка.Организация = Проводка.Организация;
					НоваяПроводка.Содержание = Проводка.Содержание;
					
					НоваяПроводка.Сумма = СтруктураПроводок.СуммаПроводки;
					
					НоваяПроводка.СчетДт = Проводка.СчетДт;
					НоваяПроводка.СубконтоДт1 = СтруктураШапкиДокумента.Контрагент;
					НоваяПроводка.СубконтоДт2 = СтруктураШапкиДокумента.ДоговорКонтрагента;
					НоваяПроводка.СубконтоДт3 = Ссылка;
					НоваяПроводка.СчетКт = Проводка.СчетКт;
					Если Проводка.СчетКт.ВидыСубконто.Количество()>0 Тогда
						НоваяПроводка.СубконтоКт1 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[0].ВидСубконто];
					КонецЕсли;
					Если Проводка.СчетКт.ВидыСубконто.Количество()>1 Тогда
						НоваяПроводка.СубконтоКт2 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[1].ВидСубконто];
					КонецЕсли;
					Если Проводка.СчетКт.ВидыСубконто.Количество()>2 Тогда
						НоваяПроводка.СубконтоКт3 = Проводка.СубконтоКт[Проводка.СчетКт.ВидыСубконто[2].ВидСубконто];
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						НоваяПроводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Если Проводка.СчетДт.Валютный Тогда
						НоваяПроводка.ВалютаДт = Проводка.ВалютаДт;
						НоваяПроводка.ВалютнаяСуммаДт = СтруктураПроводок.ВалСуммаПроводки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаНовыхПроводок Цикл
			
			Проводка = проводкиБУ.Добавить();
			Проводка.Период = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание = СтрокаТаблицы.Содержание;
			Проводка.Сумма =  СтрокаТаблицы.Сумма;
			Проводка.СчетДт = СтрокаТаблицы.СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,    СтрокаТаблицы.СубконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,    СтрокаТаблицы.СубконтоДт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,    СтрокаТаблицы.СубконтоДт3);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,    СтрокаТаблицы.СубконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,    СтрокаТаблицы.СубконтоКт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,    СтрокаТаблицы.СубконтоКт3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			ЗачтеннаяСумма = ЗачтеннаяСумма+СтрокаТаблицы.Сумма;
			
			Если Проводка.СчетДт.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСуммаДт;
				ЗачтеннаяСуммаВал = ЗачтеннаяСуммаВал + СтрокаТаблицы.ВалютнаяСуммаДт;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если не ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			// необходимо определится с методикой отражения
			// разниц в стоимости для давальческого сырья
			ДвиженияПоРазницамВСтоимостиТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		КонецЕсли;
		
		ОсталосьПогашать = ТаблицаПоТоварам.Итог("СуммаБезНДС")+ТаблицаПоТоварам.Итог("НДС")+
							ТаблицаПоУслугам.Итог("СуммаБезНДС")+ТаблицаПоУслугам.Итог("НДС")+
							ТаблицаПоОС.Итог("СуммаБезНДС")+ТаблицаПоОС.Итог("НДС")-ЗачтеннаяСумма;
		ОсталосьПогашатьВал = ТаблицаПоТоварам.Итог("СуммаБезНДСВал")+ТаблицаПоТоварам.Итог("НДСВал")+
								ТаблицаПоУслугам.Итог("СуммаБезНДСВал")+ТаблицаПоУслугам.Итог("НДСВал")+
								ТаблицаПоОС.Итог("СуммаБезНДСВал")+ТаблицаПоОС.Итог("НДСВал")-ЗачтеннаяСуммаВал;
								
						
		// зачет неоплаченной части возврата
		Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
			
			Если СтрокаОстатков.СуммаОстаток = 0 Тогда
				продолжить;
			КонецЕсли;
			
			Если ОсталосьПогашать<>0 Тогда
				
				СуммаКПогашению = МИН(СтрокаОстатков.СуммаОстаток,ОсталосьПогашать);
				СтрокаОстатков.СуммаОстаток = СтрокаОстатков.СуммаОстаток-СуммаКПогашению;
				ОсталосьПогашать = ОсталосьПогашать-СуммаКпогашению;
				
				СуммаКПогашениюВал = МИН(СтрокаОстатков.ВалютнаяСуммаОстаток,ОсталосьПогашатьВал);
				СтрокаОстатков.ВалютнаяСуммаОстаток = СтрокаОстатков.ВалютнаяСуммаОстаток-СуммаКПогашениюВал;
				ОсталосьПогашатьВал = ОсталосьПогашатьВал-СуммаКпогашениюВал;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДок;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СуммаКПогашению;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",    СтрокаОстатков.Субконто3);
				
				
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам) Тогда
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
				Иначе
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовПоВозвратам;
					
				КонецЕсли; 
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",    СтруктураШапкиДокумента.Ссылка);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если Проводка.СчетДт.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СуммаКПогашениюВал;
					Проводка.ВалютнаяСуммаКт = СуммаКПогашениюВал;
					
				КонецЕсли;
				
				Проводка.Содержание = "Зачет неоплаченной части";
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Учет курсовых разниц
		Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
			ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		КонецЕсли; // Учет курсовых разниц
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам

// Процедура вызывается из тела процедуры ОбработкаПроведения()
// Формирует движения по регистрам подсистемы учета НДС "КорректировкаНДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	//Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	//Иначе
	//	ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	//КонецЕсли;															
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаДокумента, "Товары", Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);
			
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ОбработкаПроведения()
// Формирует движения по регистру сведений ОбъектыНалоговогоУчетаФА
//
Процедура ДвиженияПоРегиструОбъектыНалоговогоУчетаФА(СтруктураШапкиДокумента, ТаблицаФА)
	
	Для Каждого СтрФА из ТаблицаФА Цикл		
		Если СтрФА.ПризнакФА Тогда											
			// Если объект выбыл полностью и снят с учета
			// Движения по регистру ОбъектыНалоговогоУчетаФА
			Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
			Движение.Период               			= СтруктураШапкиДокумента.Дата;
			Движение.ФиксированныйАктив   			= СтрФА.ОсновноеСредство;
			Движение.ГруппаНУ			  			= СтрФА.ГруппаНУ;
			Движение.ПорядокПогашенияСтоимостиНУ	= СтрФА.ПорядокПогашенияСтоимостиНУ;
			Движение.Организация          			= СтруктураШапкиДокумента.Организация;
			Движение.СостояниеФиксированногоАктива 	= Перечисления.ВидыСостоянийФА.Выбыл;     		
		КонецЕсли;
		
		Если СтрФА.ПризнакВыделенногоУчетаФА Тогда
			Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
			Движение.Период               			= СтруктураШапкиДокумента.Дата;
			Движение.ФиксированныйАктив   			= СтрФА.ОсновноеСредство;
			Движение.ВидЛьготыФА					= СтрФА.ВидЛьготыФА;
			Движение.Организация          			= СтруктураШапкиДокумента.Организация;
			Движение.Событие					 	= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;     		
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетЗатратБУ", "СчетЗатратБУ" );
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	
	СтруктураПолей.Вставить("СубконтоЗатратБУ1",    "СубконтоЗатратБУ1");
	СтруктураПолей.Вставить("СубконтоЗатратБУ2",    "СубконтоЗатратБУ2");
	СтруктураПолей.Вставить("СубконтоЗатратБУ3",    "СубконтоЗатратБУ3");
	
	СтруктураПолей.Вставить("СчетЗатратНУ",   "СчетЗатратНУ" );
	СтруктураПолей.Вставить("СубконтоЗатратНУ1",    "СубконтоЗатратНУ1");
	СтруктураПолей.Вставить("СубконтоЗатратНУ2",    "СубконтоЗатратНУ2");
	СтруктураПолей.Вставить("СубконтоЗатратНУ3",    "СубконтоЗатратНУ3");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда	
		
		ЗаполнитьПоДокументуОснования(Основание);	
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	

	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 					  (УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ)) И (ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 		   ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоПодразделениям", УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата));
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоМОЛ", 			УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата));
	
	ВедениеУчетаВременныхРазницБалансовымМетодом   =  ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 			ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           	 , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота"		 , "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"  , "НДСВидПоступления");
	
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Коэффициент"      	 , "Коэффициент");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНДС"       , "СчетУчетаНДС");
	СтруктураПолей.Вставить("НомерГТД"           , "НомерГТД");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"       , "Номенклатура");
	СтруктураПолей.Вставить("Количество"         , "Количество");
	СтруктураПолей.Вставить("Сумма"              , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота"      , "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"  , "НДСВидПоступления");
	СтруктураПолей.Вставить("Содержание"         , "Содержание");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");  	

	// Дополним полями
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОсновныеСредства".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			  , "ОсновноеСредство");	
	СтруктураПолей.Вставить("Сумма"       			  , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС" 			  , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         			  , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОборота"			  , "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"		  , "НДСВидПоступления");	
	
	СтруктураПолей.Вставить("СчетУчетаБУ"  			  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  			  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНДС" 			  , "СчетУчетаНДС");
	
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации"		  , "МОЛОрганизации");	
	
	// сформируем запрос по таб.части ОС отдельной функцией, а стандартная функция "СформироватьЗапросПоТабличнойЧасти" нам не подходит
	// так как нам нужно еще получить состояния ОС, признаки местных налогов, и другие признаки состояния ОС
	//
	РезультатЗапросаПоОсновнымСредствам = СформироватьЗапросПоТабличнойЧастиОС();
	
	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента,Истина);
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	ТаблицаПоОС		 = ПодготовитьТаблицуТоваров(РезультатЗапросаПоОсновнымСредствам, СтруктураШапкиДокумента);
	
	ТаблицаФА		 = ПолучитьТаблицуФА(СтруктураШапкиДокумента);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	// Провериим заполнение табличных частей
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
    ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.СуммаВключаетНДС);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость,	мВалютаРегламентированногоУчета);
    УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС,      СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость,	мВалютаРегламентированногоУчета);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента,Отказ, Заголовок);

	ТЗ = Новый ТаблицаЗначений;
	
	// Движения по документу
	Если Не Отказ Тогда
		ТаблицаПоТоварамДляНДС   = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоУслугамДляНДС   = ТаблицаПоУслугам.Скопировать();
		ТаблицаПоОСДляНДС 	     = ТаблицаПоОС.Скопировать();
		ТаблицаТоварыОрганизаций = ТаблицаПоТоварам.Скопировать(, "НомерСтроки, Номенклатура, НомерГТД, Количество");
		
		ТаблицаПоТоварам.Свернуть("ДоговорКонтрагента, ДоговорПоставщика,ДокументОприходования,
								  |ИмяТабЧасти,КорСубконтоСписанияБУ1,КорСубконтоСписанияБУ2,КорСубконтоСписанияБУ3,
								  |КорСчетСписанияБУ,КорСубконтоСписанияНУ1,КорСубконтоСписанияНУ2,КорСубконтоСписанияНУ3,
								  |КорСчетСписанияНУ,КоэффОплаты,Номенклатура,Организация,СтруктурноеПодразделение,Регистратор,Склад,
								  |СписыватьПоУказаннойСтоимости,СчетУчетаБУ,СчетУчетаНУ,
								  |СчетУчетаНДС,Услуга,НомерСтроки","Количество,НДС,НДСВал,Сумма,СуммаВал,СуммаБезНДС,СуммаБезНДСВал");
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, Отказ, Заголовок);
		ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ДвиженияПоРегиструОбъектыНалоговогоУчетаФА(СтруктураШапкиДокумента, ТаблицаФА);	
		КонецЕсли;
		
		Если НЕ Отказ И Не ОтложитьПринятиеНДСКЗачету Тогда
			// Выполнить движения по спецрегистрам подсистемы учета НДС
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварамДляНДС, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугамДляНДС, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОСДляНДС, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
		КонецЕсли;
		
		Если НЕ Отказ И ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(ТаблицаТоварыОрганизаций, СтруктураШапкиДокумента, Движения, Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");
	КонецЕсли;	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();