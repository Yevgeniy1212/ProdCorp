////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	//Если ИмяТабЧасти = "ОС" Тогда
	//	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
	//	
	//	Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
	//		СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
	//	КонецЕсли;	

	//	Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
	//		СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
	//	КонецЕсли;	
	//	
	//Иначе	
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	//КонецЕсли;
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
                                      
	КонецЕсли; // Если ЗаполнятьБУ = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаБУ

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
    	СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

	КонецЕсли; // Если ЗаполнятьНУ  = Истина Тогда

КонецПроцедуры // ЗаполнитьСчетаНУ()

// Функция определяет способ начисления амортизации исходного основного средства.
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   Перечисление.СпособыНачисленияАмортизацииОС - найденный способ начисл. амортизации,
//   Неопределено - если спооб не найден
//
Функция ПолучитьСпособНачисленияАмортизацииОС() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОС", ИсходноеОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	               |			&Период,
	               |			ОсновноеСредство = &ОС
	               |				И Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СпособНачисленияАмортизации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
КонецФункции

// Функция определяет стоимост ОС, которую необходимо списать.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура, содержащаая данные шапки
//  ТаблицаПоИсходномуОС - ТаблицаЗначений, сожержащая данные по исходному ОС.
//
// Возвращаемое значение:
//  Число - сумма списания первоначальной стоимости исходного ОС.
//
Функция ОпределитьСписываемуюСтоимостьОСБУ(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС)
	
	ОстСтоимостьБУ = 0;
	Если ТаблицаПоИсходномуОС <> Неопределено Тогда
		СтрокаИсхОС = ?(ТаблицаПоИсходномуОС.Количество() > 0, ТаблицаПоИсходномуОС[0], Неопределено);
		ОстСтоимостьБУ = ?(СтрокаИсхОС = Неопределено, 0, СтрокаИсхОС.СтоимостьБУ - СтрокаИсхОС.АмортизацияБУ - СтрокаИсхОС.АмортизацияЗаМесяцБУ);
	КонецЕсли;	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СписываемаяСтоимостьБУ = СтруктураШапкиДокумента.СтоимостьЧастичногоСписания;
	Иначе
		СписываемаяСтоимостьБУ = ОстСтоимостьБУ;
	КонецЕсли;

	Возврат СписываемаяСтоимостьБУ;
	
КонецФункции	
	
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, ИсходноеОсновноеСредство";

	Если Товары.Количество() > 0 Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", Склад";
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", СтоимостьЧастичногоСписания";
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН  Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ВидУчетаНУ";
	КонецЕсли;
		
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	//ТЧ ОС
	РеквизитыТабОС = "ОсновноеСредство, СчетУчетаБУ, СтоимостьБУ"; //через запятую
	
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям Тогда
		РеквизитыТабОС = РеквизитыТабОС + ", ПодразделениеОрганизации";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ Тогда
		РеквизитыТабОС = РеквизитыТабОС + ", МОЛОрганизации";
	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	//ТЧ Товары
	РеквизитыТабТМЗ = "Номенклатура, Количество, Сумма, СчетУчетаБУ"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", Новый Структура(РеквизитыТабТМЗ), Отказ, Заголовок);
	
	// ТЧ Прочее
	РеквизитыТабПрочее = "Сумма, СчетСписанияБУ"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыТабПрочее), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(ТаблицаПоИсхОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоИсхОС Цикл
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ИсходноеОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ИсходноеОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ((СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ) <> 0) Тогда 
			Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ИсходноеОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаОС.Направление_БУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ИсходноеОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;		
		
		// проверка нужна только для частичного списания, т.к. при полном списании сработает проверка соответствия сумм
		// и в этой проверке нет необходимости
		Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание И СтрокаОС.СтоимостьБУ = 0  Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Стоимость основного средства <"+СтрокаОС.ИсходноеОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> равна 0. Частичное списание не может быть выполнено!",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Процедура, проверяет равенство стоимости исходного ОС и суммы табличных частей.
// Если они не равны, то выводится соответствующее сообщение и происходит отказ от проведения.
//
Процедура ПроверитьСуммыДокумента(СтруктураШапки, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаСтоимостиВА, Отказ, Заголовок)
	
	Если ТаблицаПоИсходномуОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// проверим по БУ
	СтрокаИсхОС = ТаблицаПоИсходномуОС[0];
		
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьИсхОС = СтоимостьЧастичногоСписания;
	Иначе
		СтоимостьИсхОС = СтрокаИсхОС.СтоимостьБУ - СтрокаИсхОС.АмортизацияБУ - СтрокаИсхОС.АмортизацияЗаМесяцБУ;
	КонецЕсли;	
	
	СтоимостьСоставляющих = ТаблицаПоОС.Итог("СтоимостьБУ") + ТаблицаПоТоварам.Итог("Сумма") + ТаблицаПоПрочее.Итог("Сумма");
	
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		ТекстСообщения = "частичного списания";
	Иначе
		ТекстСообщения = "основного средства";
	КонецЕсли;	
	
	Если СтоимостьИсхОС > СтоимостьСоставляющих Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("БУ: Стоимость " + ТекстСообщения + " (" + Строка(СтоимостьИсхОС) + ") превышает сумму составляющих активов (" + Строка(СтоимостьСоставляющих) + ")!",,, СтатусСообщения.Важное);
		
	ИначеЕсли СтоимостьИсхОС < СтоимостьСоставляющих Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("БУ: Сумма составляющих активов (" + Строка(СтоимостьСоставляющих) + ") превышает стоимость " + ТекстСообщения + " (" + Строка(СтоимостьИсхОС) + ")!",,, СтатусСообщения.Важное);
		
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		Если ЛиквидационнаяСтоимостьЧастичногоСписания > СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("БУ: Ликвидационная стоимость " + ТекстСообщения + " (" + Строка(ЛиквидационнаяСтоимостьЧастичногоСписания) + ") превышает ликвидационную стоимость актива (" + Строка(СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ) + ")!",,, СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////////
	// проверим по НУ
	Если Не СтруктураШапки.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтоимостьИсхОСНУ = СтоимостьЧастичногоСписанияНУ;
	Иначе
		СтрокаСтоимостьВА_НУ = ?(ТаблицаСтоимостиВА = Неопределено, Неопределено, ТаблицаСтоимостиВА.Найти(Справочники.ВидыУчетаНУ.НУ, "ВидУчетаНУ"));
		СтоимостьВА_НУ = ?(СтрокаСтоимостьВА_НУ = Неопределено, 0, СтрокаСтоимостьВА_НУ.СтоимостьНУ);
		
		СтоимостьИсхОСНУ = СтоимостьВА_НУ;
	КонецЕсли;	
	
	СтоимостьСоставляющихНУ = ТаблицаПоОС.Итог("СтоимостьНУ") + ТаблицаПоТоварам.Итог("СуммаНУ") + ТаблицаПоПрочее.Итог("СуммаНУ");
	
	Если ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		ТекстСообщения = "частичного списания";
	Иначе
		ТекстСообщения = "основного средства";
	КонецЕсли;	
	
	Если СтоимостьИсхОСНУ > СтоимостьСоставляющихНУ Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("НУ: Стоимость " + ТекстСообщения + " (" + Строка(СтоимостьИсхОСНУ)+  ") превышает сумму составляющих активов (" + Строка(СтоимостьСоставляющихНУ) + ")!",,, СтатусСообщения.Важное);
		
	ИначеЕсли СтоимостьИсхОСНУ < СтоимостьСоставляющихНУ Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("НУ: Сумма составляющих активов (" + Строка(СтоимостьСоставляющихНУ) + ") превышает стоимость " + ТекстСообщения + " (" + Строка(СтоимостьИсхОСНУ) + ")!",,, СтатусСообщения.Важное);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Функция получает сумму амортизации за месяц для исходного ОС
//
Функция ПолучитьТаблицуАмортизацииЗаМесяц() Экспорт
	
	мТаблицаАмортизацииЗаМесяцИсхОС = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, Организация, СтруктурноеПодразделение, ИсходноеОсновноеСредство);
	
	Возврат мТаблицаАмортизацииЗаМесяцИсхОС;
	
КонецФункции	

// Процедура формирует таблицы документа
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее)
	                                                                                                                               
	ТаблицаПоИсходномуОС = ПодготовитьТаблицуПоИсходномуОС(СтруктураШапкиДокумента);
	ТаблицаПоОС 		 = ПодготовитьТаблицуПоОС(СтруктураШапкиДокумента);
	ТаблицаПоПрочее		 = ПодготовитьТаблицуПоПрочее(СтруктураШапкиДокумента);
	ТаблицаПоТоварам	 = ПодготовитьТаблицуПоТоварам(СтруктураШапкиДокумента);
	
КонецПроцедуры	

// Процедура подготавливает  таблицу по табличной части ОС
//
Функция ПодготовитьТаблицуПоОС(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСОС.ОсновноеСредство,
	               |	РеструктуризацияОСОС.СтоимостьБУ,
				   |	РеструктуризацияОСОС.СтоимостьНУ,
	               |	РеструктуризацияОСОС.СчетУчетаБУ,
	               |	РеструктуризацияОСОС.СчетУчетаНУ,
				   |	РеструктуризацияОСОС.ПодразделениеОрганизации,
	               |	РеструктуризацияОСОС.МОЛОрганизации
	               |ИЗ
	               |	Документ.РеструктуризацияОС.ОС КАК РеструктуризацияОСОС
	               |ГДЕ
	               |	РеструктуризацияОСОС.Ссылка = &ТекДокумент";
				   
	Запрос.УстановитьПараметр("ТекДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПодготовитьТаблицуПоОС()

// Процедура подготавливает таблицу по табличной части Прочее
//
Функция ПодготовитьТаблицуПоПрочее(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСПрочее.Сумма,
				   |	РеструктуризацияОСПрочее.СуммаНУ,
	               |	РеструктуризацияОСПрочее.СчетСписанияБУ,
	               |	РеструктуризацияОСПрочее.СчетСписанияНУ,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияБУ1,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияБУ2,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияБУ3,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияНУ1,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияНУ2,
	               |	РеструктуризацияОСПрочее.СубконтоСписанияНУ3
	               |ИЗ
	               |	Документ.РеструктуризацияОС.Прочее КАК РеструктуризацияОСПрочее
	               |ГДЕ
	               |	РеструктуризацияОСПрочее.Ссылка = &ТекДокумент";
				   
	Запрос.УстановитьПараметр("ТекДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПодготовитьТаблицуПоПрочее()

// Процедура подготавливает таблицу с данными о стоимости исходного ОС
//
Функция ПодготовитьТаблицуПоИсходномуОС(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("СнятоСУчета",   Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПринятыйКУчету", Перечисления.ВидыСостоянийФА.ПринятКУчету);
	Запрос.УстановитьПараметр("ИсхОсновноеСредство", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеструктуризацияОС.ИсходноеОсновноеСредство,
	|	РеструктуризацияОС.ИсходноеОсновноеСредство.Код КАК Код,
	|	РеструктуризацияОС.КоэффициентАмортизацииБУ,
	|	РеструктуризацияОС.КоэффициентУскоренияБУ,
	|	РеструктуризацияОС.ОбъемПродукцииРаботБУ,
	|	РеструктуризацияОС.СрокПолезногоИспользованияБУ,
	|	РеструктуризацияОС.ФактОбъемПродукцииРаботБУ,
	|	РеструктуризацияОС.ФактСрокИспользованияБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL ТОГДА ЛОЖЬ	ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФА, 
	|//   РеструктуризацияОС.СнятьСУчетаПоНалогам,
	|	ЕстьNull(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектИмущественногоНалога,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога,
	|	ЕстьNull(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектТранспортногоНалога,
	|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|	ЕстьNull(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектЗемельногоНалога,
	|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	МестонахождениеОС.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК ТекущийМОЛ
	|ИЗ
	|	Документ.РеструктуризацияОС КАК РеструктуризацияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство = &ИсхОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство = &ИсхОсновноеСредство) КАК СчетаУчетаОССрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство  = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство = &ИсхОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство = &ИсхОсновноеСредство И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(&ДатаДокумента, ФиксированныйАктив = &ИсхОсновноеСредство И Организация = &Организация И СостояниеФиксированногоАктива = &ПринятыйКУчету) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения = &ИсхОсновноеСредство И Налогоплательщик = &Организация) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения = &ИсхОсновноеСредство И Налогоплательщик = &Организация) КАК ОбъектыЗемельногоНалогаСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения = &ИсхОсновноеСредство И Налогоплательщик = &Организация) КАК ОбъектыТранспортногоНалогаСрезПоследних
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство = &ИсхОсновноеСредство) КАК МестонахождениеОС
	|		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|ГДЕ
	|	РеструктуризацияОС.Ссылка = &Ссылка";

	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МоментДокумента = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	ТаблицаСтоимости = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ИсходноеОсновноеСредство, МоментДокумента, КонецДня(СтруктураШапкиДокумента.Дата));
	
	ПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивами.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Дата, Организация); 

	ТаблицаАмортизацииБУ = Неопределено;
	Если (ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ПолноеСписание ИЛИ Не ПрименятьПараметрыАмортизацииВТекМесяце) 
		И ТаблицаСтоимости.Количество() > 0 Тогда

		МассивОС_НачислениеАмортизацииБУ = Новый Массив();
		МассивОС_НачислениеАмортизацииБУ.Добавить(ТаблицаСтоимости[0].ОС_БУ);
				
		Если МассивОС_НачислениеАмортизацииБУ.Количество() > 0 Тогда
			ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.СтруктурноеПодразделение, МассивОС_НачислениеАмортизацииБУ);
		КонецЕсли;
		
	КонецЕсли;
	
	// создадим одну общую таблицу с данными
	ОписаниеТиповЧисла = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
	ТаблицаОС.Колонки.Добавить("СтоимостьБУ", 				ОписаниеТиповЧисла);
	ТаблицаОС.Колонки.Добавить("АмортизацияБУ", 			ОписаниеТиповЧисла);
	ТаблицаОС.Колонки.Добавить("АмортизацияЗаМесяцБУ", 		ОписаниеТиповЧисла);
	ТаблицаОС.Колонки.Добавить("ЛиквидационнаяСтоимостьБУ", ОписаниеТиповЧисла); 
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		СтрокаСтоимости   = ?(ТаблицаСтоимости = Неопределено, Неопределено, ТаблицаСтоимости.Найти(СтрокаОС.ИсходноеОсновноеСредство, "ОС_БУ"));
		СтрокаАмортизации = ?(ТаблицаАмортизацииБУ = Неопределено, Неопределено, ТаблицаАмортизацииБУ.Найти(СтрокаОС.ИсходноеОсновноеСредство, "ОС"));
		
		Если СтрокаСтоимости <> Неопределено Тогда
			СтрокаОС.СтоимостьБУ 			   = СтрокаСтоимости.СтоимостьБУ;
			СтрокаОС.АмортизацияБУ			   = СтрокаСтоимости.АмортизацияБУ;
			СтрокаОС.ЛиквидационнаяСтоимостьБУ = СтрокаСтоимости.ЛиквидационнаяСтоимостьБУ;
		КонецЕсли;
		
		Если СтрокаАмортизации <> Неопределено Тогда
			СтрокаОС.АмортизацияЗаМесяцБУ = СтрокаАмортизации.Бух;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОС;
	
КонецФункции // ПодготовитьТаблицуПоИсходномуОС()

// Процедура подготавливает таблицу по табличной части Товары
//
Функция ПодготовитьТаблицуПоТоварам(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСТовары.Номенклатура,
	               |	РеструктуризацияОСТовары.Количество,
	               |	РеструктуризацияОСТовары.Сумма,
				   |	РеструктуризацияОСТовары.СуммаНУ,
	               |	РеструктуризацияОСТовары.ЕдиницаИзмерения,
	               |	РеструктуризацияОСТовары.Цена,
	               |	РеструктуризацияОСТовары.СчетУчетаБУ,
	               |	РеструктуризацияОСТовары.СчетУчетаНУ
	               |ИЗ
	               |	Документ.РеструктуризацияОС.Товары КАК РеструктуризацияОСТовары
	               |ГДЕ
	               |	РеструктуризацияОСТовары.Ссылка = &ТекДокумент";
				   
	Запрос.УстановитьПараметр("ТекДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
    	
КонецФункции	

// Процедура подготавливает таблицу с данными исходного ОС по НУ.
//
Процедура ПодготовитьТаблицыПоНУ(СтруктураШапкиДокумента, ТаблицаФА, ТаблицаСтоимостиВА)
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		Запрос= Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
		               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация,
		               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА
		               |ПОМЕСТИТЬ ФиксированныеАктивыУчитываемыеОтдельно
		               |ИЗ
		               |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
		               |			&Дата,
		               |			ФиксированныйАктив = &ОсновноеСредство
		               |				И Организация = &Организация) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
		               |ГДЕ
		               |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = &ПринятыйКВыделенномуУчету
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеструктуризацияОС.ИсходноеОсновноеСредство КАК ОсновноеСредство,
		               |	РеструктуризацияОС.СнятьСУчетаПоНалогам,
		               |	РеструктуризацияОС.СтоимостьЧастичногоСписанияНУ,
		               |	ВЫБОР
		               |		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ПризнакФА,
		               |	ВЫБОР
		               |		КОГДА ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ПризнакВыделенногоУчетаФА,
		               |	ФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА КАК ВидЛьготыФА,
		               |	ОбъектыНалоговогоУчетаФАСрезПоследних.ГруппаНУ КАК ГруппаНУ,
		               |	ОбъектыНалоговогоУчетаФАСрезПоследних.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ
		               |ИЗ
		               |	Документ.РеструктуризацияОС КАК РеструктуризацияОС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
		               |				&Дата,
		               |				ФиксированныйАктив = &ОсновноеСредство
		               |					И Организация = &Организация
		               |					И СостояниеФиксированногоАктива = &ПринятыйКУчету) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
		               |		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
		               |			И РеструктуризацияОС.Организация = ОбъектыНалоговогоУчетаФАСрезПоследних.Организация
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ФиксированныеАктивыУчитываемыеОтдельно КАК ФиксированныеАктивыУчитываемыеОтдельно
		               |		ПО РеструктуризацияОС.ИсходноеОсновноеСредство = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
		               |			И РеструктуризацияОС.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация
		               |ГДЕ
		               |	РеструктуризацияОС.Ссылка = &Ссылка";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("ПринятыйКУчету", Перечисления.ВидыСостоянийФА.ПринятКУчету);
		Запрос.УстановитьПараметр("ПринятыйКВыделенномуУчету", Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);		
		Запрос.УстановитьПараметр("ОсновноеСредство", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
		ТаблицаФА = Запрос.Выполнить().Выгрузить();
		// ТаблицаСтоимости
		Период = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
		ТаблицаСтоимостиВА = ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ИсходноеОсновноеСредство, Период);
	КонецЕсли;
	
КонецПроцедуры	

// Процедура формирует движения по учетным регистрам при полном списании ОС
//
Процедура ДвиженияПоПолномуСписаниюИсходногоОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоИсходномуОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		
	СтрокаИсхОС = ТаблицаПоИсходномуОС[0];
	
	ТекОС 						= СтрокаИсхОС.ИсходноеОсновноеСредство;
	ТекОрганизация				= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока    			 	= СтруктураШапкиДокумента.Дата;
	
	// Движения по регистру СостоянияОСОрганизаций
	Движение = СостояниеОС.Добавить();
	
	Движение.Период			  		  = ДатаДока;
	Движение.ДатаСостояния  		  = ДатаДока;
	Движение.ОсновноеСредство		  = ТекОС;
	Движение.Организация    		  = ТекОрганизация;
	Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
	Движение.Состояние  			  = Перечисления.ВидыСостоянийОС.СнятоСУчета;
		
	// Движения по регистру СобытияОСОрганизаций
	Движение = СобытияОС.Добавить();
	
	Движение.Период          		  = ДатаДока;
	Движение.ОсновноеСредство		  = ТекОС;
	Движение.Организация      		  = СтруктураШапкиДокумента.Организация;
	Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	Движение.Событие         		  = СтруктураШапкиДокумента.СобытиеОС;
	Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
	Движение.НомерДокумента  		  = СтруктураШапкиДокумента.Номер;

	// Движения по регистру НачислениеАмортизации
	Движение = НачислениеАмортизацииБУ.Добавить();
		
	Движение.Период             	  = ДатаДока;
	Движение.ОсновноеСредство   	  = ТекОС;
	Движение.Организация        	  = ТекОрганизация;
	Движение.НачислятьАмортизацию	  = Ложь;
	Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;

	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Дата, ТекОрганизация, Движения.СостоянияОСОрганизаций,Отказ,Заголовок);
	
	// Движения по регистру СоставОС
	ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента);
	
	// снимаем с местных налогов
	ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС);
	
КонецПроцедуры // ДвиженияПоПолномуСписаниюИсходногоОС()

// Процедура формирует движения по учетным регистрам при частичном списании ОС
//
Процедура ДвиженияПоЧастичномуСписаниюИсходногоОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТаблицаПоИсходномуОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	СобытияОС = Движения.СобытияОСОрганизаций;
	ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	
	СтрокаИсхОС 				= ТаблицаПоИсходномуОС[0];
	ТекОС 						= СтрокаИсхОС.ИсходноеОсновноеСредство;
	ТекОрганизация 				= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока       				= СтруктураШапкиДокумента.Дата;

	// Движения по регистру СобытияОСОрганизаций
	Движение = СобытияОС.Добавить();
	
	Движение.Период            		  = ДатаДока;
	Движение.ОсновноеСредство		  = ТекОС;
	Движение.Организация     		  = ТекОрганизация;
	Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
	Движение.Событие         		  = СтруктураШапкиДокумента.СобытиеОС;
	Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
	Движение.НомерДокумента  		  = СтруктураШапкиДокумента.Номер;


	// Движения по регистру ПараметрыАмортизации
	ОстаточнаяСтоимость = (СтрокаИсхОС.СтоимостьБУ - СтрокаИсхОС.АмортизацияБУ - СтрокаИсхОС.АмортизацияЗаМесяцБУ) - СтоимостьЧастичногоСписания;
		
	Движение = ПараметрыАмортизацииОС.Добавить();
	Движение.Период                                      = ДатаДока;
	Движение.ОсновноеСредство                            = ТекОС;
	Движение.Организация                                 = ТекОрганизация;
	Движение.СтруктурноеПодразделение                    = ТекСтруктурноеПодразделение;
	Движение.СрокПолезногоИспользования                  = СтрокаИсхОС.СрокПолезногоИспользованияБУ;
	Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаИсхОС.СрокПолезногоИспользованияБУ - СтрокаИсхОС.ФактСрокИспользованияБУ;
	Движение.СтоимостьДляВычисленияАмортизации           = ОстаточнаяСтоимость - (СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ - ЛиквидационнаяСтоимостьЧастичногоСписания);
	Движение.ЛиквидационнаяСтоимость					 = СтрокаИсхОС.ЛиквидационнаяСтоимостьБУ - ЛиквидационнаяСтоимостьЧастичногоСписания;
	Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаИсхОС.ОбъемПродукцииРаботБУ - СтрокаИсхОС.ФактОбъемПродукцииРаботБУ;
	Движение.КоэффициентАмортизации                      = СтрокаИсхОС.КоэффициентАмортизацииБУ;
	Движение.КоэффициентУскорения                        = СтрокаИсхОС.КоэффициентУскоренияБУ;
	Движение.ОбъемПродукцииРабот                         = СтрокаИсхОС.ОбъемПродукцииРаботБУ;
	
КонецПроцедуры // ДвиженияПоПолномуСписаниюИсходногоОС()

// Процедура формирует движения по регистру бухгалтерии
//
Процедура ДвиженияПоРегиструБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок)
	
	Если ТаблицаПоИсходномуОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяАналитУчетОсПоПодразделениям = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям;
	ВедетсяАналитУчетОсПоМОЛ = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ;
       	
	ТаблицаТекМестонахождениеИсхОС = Новый ТаблицаЗначений;
	ТаблицаТекМестонахождениеИсхОС.Колонки.Добавить("ОсновноеСредство", 		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаТекМестонахождениеИсхОС.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаТекМестонахождениеИсхОС.Колонки.Добавить("МОЛОрганизации", 			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Для Каждого СтрокаТЧ Из ТаблицаПоИсходномуОС Цикл
		НовСтрока = ТаблицаТекМестонахождениеИсхОС.Добавить();
		НовСтрока.ОсновноеСредство = СтрокаТЧ.ИсходноеОсновноеСредство;
		НовСтрока.ПодразделениеОрганизации = СтрокаТЧ.ТекущееПодразделение;
		НовСтрока.МОЛОрганизации = СтрокаТЧ.ТекущийМОЛ;
	КонецЦикла;
	
	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
    НомерЖурнала   = "ОС";
	
	ПроводкиБУ = Движения.Типовой;
	
	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("СтруктурноеПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива", Новый ОписаниеТипов("Булево"));	
	ТабАмортизации.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("ТекущийМОЛ", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Для Каждого СтрокаОС Из ТаблицаПоИсходномуОС Цикл
		
		Если  СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			НоваяСтрока.СтруктурноеПодразделение	= СтруктурноеПодразделение;
			НоваяСтрока.Сумма                  		= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            		= СтрокаОС.ИсходноеОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 		= СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        		= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ПризнакФиксированногоАктива = СтрокаОС.ПризнакФА;
			НоваяСтрока.ТекущееПодразделение		= СтрокаОС.ТекущееПодразделение;
			НоваяСтрока.ТекущийМОЛ					= СтрокаОС.ТекущийМОЛ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", НомерЖурнала);

	/////////////////////////////////////////////////////////////////////
	// Формирование проводок по списанию накопленной амортизации
	// 
	СтрокаИсхОС = ТаблицаПоИсходномуОС[0];
	ТекОС = СтрокаИсхОС.ИсходноеОсновноеСредство;

	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СуммаПроводки = СтрокаИсхОС.АмортизацияБУ + СтрокаИсхОС.АмортизацияЗаМесяцБУ;
        	
	Иначе
		СуммаПроводки = АмортизацияЧастичногоСписания;
	КонецЕсли;	
		
	Если СуммаПроводки <> 0 Тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Активность   = Истина;
		Проводка.Организация  = ТекОрганизация;
		Проводка.Содержание   = "Списана амортизация";
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Сумма        = СуммаПроводки;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Проводка.СчетДт = СтрокаИсхОС.СчетНачисленияАмортизацииБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
		Проводка.СчетКт = СтрокаИсхОС.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

		УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождениеИсхОС, Истина, Истина);
				
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////
	// Списание остаточной стоимости.
	// Особенность в списании остаточной стоимости в том, что:
	// остаточная стоимость ОС списывается не одной проводкой, она дробится на составляющие - 
	// - ОС, ТМЗ и пр. Часть стоимости, которая приходится на другие ОС и на произвольные счета,
	// списывается здесь. Остальная часть (списание на ТМЗ) формируется в документе ОприходованиеТМЗ.
	
	Для Каждого СтрокаОССоставляющая Из ТаблицаПоОС Цикл
		СуммаПроводки = СтрокаОССоставляющая.СтоимостьБУ;
	  
	    Если СуммаПроводки <> 0 Тогда

	    	Проводка = ПроводкиБУ.Добавить();
	    	
	    	Проводка.Период       = Дата;
	    	Проводка.Организация  = ТекОрганизация;
	    	Проводка.Содержание   = "Списана ост. стоимость";
	    	Проводка.НомерЖурнала = НомерЖурнала;
	    	Проводка.Сумма        = СуммаПроводки;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
	    	Проводка.СчетДт = СтрокаОССоставляющая.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОССоставляющая.ОсновноеСредство);
			УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, СтрокаОССоставляющая.ОсновноеСредство, ТаблицаПоОС, Истина);
			
			Проводка.СчетКт = СтрокаИсхОС.СчетУчетаБУ;
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
            УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождениеИсхОС, , Истина);
			
	    КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаПрочее Из ТаблицаПоПрочее Цикл
		СуммаПроводки = СтрокаПрочее.Сумма;
	  
	    Если СуммаПроводки <> 0 Тогда

	    	Проводка = ПроводкиБУ.Добавить();
	    	
	    	Проводка.Период       = Дата;
	    	Проводка.Организация  = ТекОрганизация;
	    	Проводка.Содержание   = "Списана ост. стоимость";
	    	Проводка.НомерЖурнала = НомерЖурнала;
	    	Проводка.Сумма        = СуммаПроводки;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

	    	Проводка.СчетДт = СтрокаПрочее.СчетСписанияБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПрочее.СубконтоСписанияБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПрочее.СубконтоСписанияБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПрочее.СубконтоСписанияБУ3);
			
	    	Проводка.СчетКт = СтрокаИсхОС.СчетУчетаБУ;
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождениеИсхОС, , Истина);

	    КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

//Процедура закрывает имеющиеся суммы резерва по переоценкам ОС по бух. учету и гасит не закрытые партии переоценок в регистре ПереоценкаВнеоборотныхАктивов
//
Процедура ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ПереоценкаВА   = Движения.ПереоценкаВнеоборотныхАктивов;	
	ПроводкиБУ     = Движения.Типовой;
	
	////////////////////////////////////////////////////////////////////////
	// найдем списываемую стоимость по БУ
	СписываемаяСтоимостьБУ = ОпределитьСписываемуюСтоимостьОСБУ(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС);
	Если СписываемаяСтоимостьБУ = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	////////////////////////////////////////////////////////////////////////
	// найдем коэффициенты для распределения остатков по переоценке 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписываемаяСтоимостьБУ", СписываемаяСтоимостьБУ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСОС.НомерСтроки КАК НомерСтроки,
	               |	РеструктуризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	РеструктуризацияОСОС.СтоимостьБУ / &СписываемаяСтоимостьБУ КАК КоэффициентРаспределения
	               |ИЗ
	               |	Документ.РеструктуризацияОС.ОС КАК РеструктуризацияОСОС
	               |ГДЕ
	               |	РеструктуризацияОСОС.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ТаблицаКоэффициентовОС = Запрос.Выполнить().Выгрузить();

	////////////////////////////////////////////////////////////////////////
	// найдем остатки переоценок по регистру накопления
	ЗапросОстаткиПереоценокВА = Новый Запрос;
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("ИсходноеОсновноеСредство",    ИсходноеОсновноеСредство);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Период",      Новый Граница(КонецДня(ДатаДока), ВидГраницы.Включая));
	
	ЗапросОстаткиПереоценокВА.Текст = "ВЫБРАТЬ
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетРасходовБУ КАК СчетРасходовБУ,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетДоходовБУ		КАК СчетДоходовБУ,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ1	КАК СубконтоДоходовБУ1,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ2	КАК СубконтоДоходовБУ2,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ3	КАК СубконтоДоходовБУ3
	                                  |ИЗ
	                                  |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	                                  |			&Период,
	                                  |			ВнеоборотныйАктив = &ИсходноеОсновноеСредство
	                                  |				И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение)КАК ПереоценкаВнеоборотныхАктивовОстатки";	
	
	ОстаткиПереоценокВА = ЗапросОстаткиПереоценокВА.Выполнить().Выбрать();
	
	//перенос остатков по переоценкам в регистре ПереоценкаВнеоборотныхАктивов
	Пока ОстаткиПереоценокВА.Следующий() Цикл
		
		мЧастичноеСписание = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание);
		
		Если мЧастичноеСписание Тогда
			Коэффициент = (СтруктураШапкиДокумента.СтоимостьЧастичногоСписания + СтруктураШапкиДокумента.АмортизацияЧастичногоСписания) / ТаблицаПоИсходномуОС[0].СтоимостьБУ;
		Иначе
			Коэффициент = 1;
		КонецЕсли;	
			
		//остаток каждой партии распиливаем на составляющие ОС
		РаспределяемаяСуммаПереоцСтоимости = ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток * Коэффициент;
		РаспределяемаяСуммаПереоцАмортиз   = ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток * Коэффициент;
		
		РаспределеноСтоимость = 0;
		РаспределеноАмортизация = 0;
		
		Для Каждого СтрокаКоэффициента Из ТаблицаКоэффициентовОС Цикл
			СуммаПереоценкиСтоимости = Окр(СтрокаКоэффициента.КоэффициентРаспределения * РаспределяемаяСуммаПереоцСтоимости, 1);
			СуммаПереоценкиАмортизации = Окр(СтрокаКоэффициента.КоэффициентРаспределения * РаспределяемаяСуммаПереоцАмортиз, 1);
			
			// если таб.части ТМЗ и Прочее пустые, то для последней строки ОС спишем весь остаток по переоценкам
			Если (Товары.Количество() = 0) И (Прочее.Количество() = 0) И (СтрокаКоэффициента.НомерСтроки = ТаблицаКоэффициентовОС.Количество()) Тогда
				СуммаПереоценкиСтоимости = РаспределяемаяСуммаПереоцСтоимости - РаспределеноСтоимость;
				СуммаПереоценкиАмортизации = РаспределяемаяСуммаПереоцАмортиз - РаспределеноАмортизация;
			КонецЕсли;
			
			Если СуммаПереоценкиСтоимости <> 0 Или СуммаПереоценкиАмортизации <> 0 Тогда
				ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
				ДвижениеПереоценкаВА.Период			   			= ДатаДока;
				ДвижениеПереоценкаВА.Организация 	    		= ТекОрганизация;
				ДвижениеПереоценкаВА.СтруктурноеПодразделение	= СтруктурноеПодразделение;
				
				ДвижениеПереоценкаВА.ВнеоборотныйАктив  = СтрокаКоэффициента.ОсновноеСредство;
				ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
				
				Если СуммаПереоценкиСтоимости > 0 Тогда
					ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход;
					ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СуммаПереоценкиСтоимости;
					ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = СуммаПереоценкиАмортизации;
					
					// сформируем проводки по переносурезерва
					СуммаРезерва = СуммаПереоценкиСтоимости - (- СуммаПереоценкиАмортизации);
					
					Если СуммаРезерва <> 0 Тогда
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Перенос резерва переоценки";
						Проводка.НомерЖурнала = "ОС";
						Проводка.Сумма        = СуммаРезерва;
						
						Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
						
						Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаКоэффициента.ОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				
					КонецЕсли;	
						
				Иначе
					ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход;
					ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - СуммаПереоценкиСтоимости;
					ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - СуммаПереоценкиАмортизации;
					
					// для убытков нужно сформировать проводки по счетам расходов
					
					// проводка по переносу убытка от переоценки стоимости
					Если СуммаПереоценкиСтоимости < 0 Тогда
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Перенос убытка от переоценки стоимости";
						Проводка.НомерЖурнала = "ОС";
						Проводка.Сумма        = -СуммаПереоценкиСтоимости;
						
						Проводка.СчетДт = ОстаткиПереоценокВА.СчетРасходовБУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОстаткиПереоценокВА.СубконтоРасходовБУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОстаткиПереоценокВА.СубконтоРасходовБУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОстаткиПереоценокВА.СубконтоРасходовБУ3);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   СтрокаКоэффициента.ОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаКоэффициента.ОсновноеСредство);
						
						Проводка.СчетКт = ОстаткиПереоценокВА.СчетРасходовБУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОстаткиПереоценокВА.СубконтоРасходовБУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОстаткиПереоценокВА.СубконтоРасходовБУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОстаткиПереоценокВА.СубконтоРасходовБУ3);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				
					КонецЕсли;	
					
					// проводка по переносу дохода от переоценки амортизаци
					Если СуммаПереоценкиАмортизации <> 0 Тогда
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = ТекОрганизация;
						Проводка.Содержание   = "Перенос дохода от переоценки амортизации";
						Проводка.НомерЖурнала = "ОС";
						Проводка.Сумма        = СуммаПереоценкиАмортизации;
						
					    Проводка.СчетДт = ОстаткиПереоценокВА.СчетДоходовБУ;
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОстаткиПереоценокВА.СубконтоДоходовБУ1);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОстаткиПереоценокВА.СубконтоДоходовБУ2);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОстаткиПереоценокВА.СубконтоДоходовБУ3 );
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
					 
					    Проводка.СчетКт = ОстаткиПереоценокВА.СчетДоходовБУ;
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОстаткиПереоценокВА.СубконтоДоходовБУ1);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОстаткиПереоценокВА.СубконтоДоходовБУ2);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОстаткиПереоценокВА.СубконтоДоходовБУ3 );
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтрокаКоэффициента.ОсновноеСредство);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаКоэффициента.ОсновноеСредство);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				
					КонецЕсли;	
						
				КонецЕсли;

			КонецЕсли;	
			
			РаспределеноСтоимость = РаспределеноСтоимость + СуммаПереоценкиСтоимости;
			РаспределеноАмортизация = РаспределеноАмортизация + СуммаПереоценкиАмортизации;
			
		КонецЦикла;				
		
		Если (РаспределяемаяСуммаПереоцСтоимости <> 0) Или (РаспределяемаяСуммаПереоцАмортиз <> 0) Тогда
				
			ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
			ДвижениеПереоценкаВА.Период			    		= ДатаДока;
			ДвижениеПереоценкаВА.Организация 	    		= ТекОрганизация;
			ДвижениеПереоценкаВА.СтруктурноеПодразделение	= СтруктурноеПодразделение;
			
			ДвижениеПереоценкаВА.ВнеоборотныйАктив  = ОстаткиПереоценокВА.ВнеоборотныйАктив;
			ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
			
			Если РаспределяемаяСуммаПереоцСтоимости > 0 Тогда
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 		
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = РаспределяемаяСуммаПереоцСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = РаспределяемаяСуммаПереоцАмортиз;
				
				// сформируем проводки по закрытию резерва
				СуммаРезерва = (РаспределяемаяСуммаПереоцСтоимости - РаспределеноСтоимость) + (РаспределяемаяСуммаПереоцАмортиз - РаспределеноАмортизация);
				
				Если СуммаРезерва <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Закрытие резерва переоценки";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаРезерва;
					
					Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);				
						
				КонецЕсли;
			Иначе
				ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 			
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - РаспределяемаяСуммаПереоцСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - РаспределяемаяСуммаПереоцАмортиз;
			КонецЕсли;

		КонецЕсли;	

	КонецЦикла;//Пока ОстаткиПереоценокВА.Следующий() Цикл
	
КонецПроцедуры //ЗакрытиеПереоценокОС	

// Процедура формирования движений по регистру СоставОС 
//
Процедура ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента)
	
	//формируем список ОС, по которым необходимо осущестывить контроль их вхождения в какие-либо комплекты
	Запрос   = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("ИсходноеОС", СтруктураШапкиДокумента.ИсходноеОсновноеСредство);
	Запрос.УстановитьПараметр("СостояниеВСоставеОС", Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставОССрезПоследних.ОсновноеСредство,
	               |	СоставОССрезПоследних.ВСоставеОС
	               |ИЗ
	               |	РегистрСведений.СоставОС.СрезПоследних(
	               |		&Дата,
	               |		ОсновноеСредство = &ИсходноеОС
	               |			И СостояниеВСоставеОС = &СостояниеВСоставеОС) КАК СоставОССрезПоследних";
	
    НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
			НоваяСтрока.Активность          = Истина;
			НоваяСтрока.ОсновноеСредство    = Выборка.ОсновноеСредство;
			НоваяСтрока.ВСоставеОС          = Выборка.ВСоставеОС;
			НоваяСтрока.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

// Снимает основное средство с учета по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоИсхОС)
	
	Для каждого СтрокаОС из ТаблицаПоИсхОС Цикл
			
		// Снимаем с учета по налогу на имущество
		Если СтрокаОС.ОбъектИмущественногоНалога Тогда
			Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ИсходноеОсновноеСредство;
			Движение.НачислятьНалог = Ложь;		
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога,
																							СтруктураШапкиДокумента.Организация,
																							глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																							Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
				
				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;

		КонецЕсли;
		// Снимаем с учета по налогу на транспорт
		
		Если СтрокаОС.ОбъектТранспортногоНалога Тогда
			Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ИсходноеОсновноеСредство;
			Движение.НачислятьНалог = Ложь;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога,
																							СтруктураШапкиДокумента.Организация,
																							глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																							Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
				
				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// Снимаем с учета по земельному налогу
		Если СтрокаОС.ОбъектЗемельногоНалога Тогда
			Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ИсходноеОсновноеСредство;
			Движение.НачислятьНалог = Ложь;			
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога,
																							СтруктураШапкиДокумента.Организация,
																							глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																							Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
				
				Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;	
	
КонецПроцедуры	

// Процедура вызывается из процедуры ОбработкаПроведения(). Является обобщающей процедурой, из которой
// вызываются процедуры, формирующие движения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаФА, ТаблицаСтоимостиВА, Отказ, Заголовок)
	
	ДвиженияПоПолномуСписаниюИсходногоОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, Отказ, Заголовок);
	ДвиженияПоЧастичномуСписаниюИсходногоОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);
	
	// закрываем остатки переоценок
	ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, Отказ, Заголовок);	
	
	// Проводки	
	ДвиженияПоРегиструБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);
	
	//Движения по НУ
	ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаФА, ТаблицаСтоимостиВА, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);
	

КонецПроцедуры //ДвиженияПоРегистрам()

// Движения по регистру "ФиксированныеАктивыУчитываемыеОтдельно"
//
Процедура ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрФА)
	
	// фиксируем выбытие только того актива, который выбывает, не включившись в состав группы
	ПризнакОтдельногоУчета = СтрФА.ПризнакВыделенногоУчетаФА;
	
	Если Не ПризнакОтдельногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
	
	Движение.Период 			= СтруктураШапкиДокумента.Дата;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив = СтрФА.ОсновноеСредство;
	Движение.ВидЛьготыФА 		= СтрФА.ВидЛьготыФА;
	Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;
	
КонецПроцедуры // ДвиженияПоРегиструФАУчитываемыеОтдельно()

// Выполняет движения по регистрам Налогового учета
//
Процедура ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаФА, ТаблицаСтоимостиВА, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок)	
	
	Если Не СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;
	
	СтрФА = Неопределено;
	Если ТаблицаФА.Количество() > 0 Тогда
		СтрФА = ТаблицаФА[0];
	КонецЕсли;
	
	Если СтрФА = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СуммаАмортизацияЗаМесяцБУ = 0;
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание Тогда
		СтрокаИсхОС 				= ТаблицаПоИсходномуОС[0];
		ТекОС 						= СтрокаИсхОС.ИсходноеОсновноеСредство;
		СуммаАмортизацияЗаМесяцБУ	= СтрокаИсхОС.АмортизацияЗаМесяцБУ;
	КонецЕсли;	

		
	// движения по регистрам сведения ФА, ФА учитываемые отдельно
	//
	Если (СтрФА.СнятьСУчетаПоНалогам) И (Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание) Тогда
		Если СтрФА.ПризнакФА Тогда
			// Если объект выбыл полностью и снят с учета
			// Движения по регистру ОбъектыНалоговогоУчетаФА
			Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ФиксированныйАктив   = СтрФА.ОсновноеСредство;
			Движение.ГруппаНУ			  = СтрФА.ГруппаНУ;				
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.СостояниеФиксированногоАктива = Перечисления.ВидыСостоянийФА.Выбыл;
			Движение.ПорядокПогашенияСтоимостиНУ	= СтрФА.ПорядокПогашенияСтоимостиНУ;
		КонецЕсли;
		
		ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрФА);
		
	КонецЕсли;			

	
	//определим стоимость с видом учета ВР
	СтрокаСтоимостиВР = ?(ТаблицаСтоимостиВА = Неопределено, Неопределено, ТаблицаСтоимостиВА.Найти(Справочники.ВидыУчетаНУ.ВР, "ВидУчетаНУ"));
	СписываемаяСтоимостьВР = ?(СтрокаСтоимостиВР = Неопределено, 0, СтрокаСтоимостиВР.СтоимостьНУ) - СуммаАмортизацияЗаМесяцБУ;
	
	//определим стоимость с видом учета ПР
	СписываемаяСтоимостьПР = 0;
	Для Каждого СтрокаСтоимостиВА Из ТаблицаСтоимостиВА Цикл
		Если (СтрокаСтоимостиВА.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.НУ) И (СтрокаСтоимостиВА.ВидУчетаНУ <> Справочники.ВидыУчетаНУ.ВР) Тогда
			СписываемаяСтоимостьПР = СписываемаяСтоимостьПР + СтрокаСтоимостиВА.СтоимостьНУ;
		КонецЕсли;	
	КонецЦикла;	
	
	// найдем коэффициент списания стоимости, которая рассчитывается как, "списываемая сумма первонач. стоимости" / "первонач. стоимость ОС"
	//
	мЧастичноеСписание = (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеструктуризацияОС.ЧастичноеСписание);
	Если мЧастичноеСписание Тогда
		Коэффициент = (СтруктураШапкиДокумента.СтоимостьЧастичногоСписания + СтруктураШапкиДокумента.АмортизацияЧастичногоСписания) / ТаблицаПоИсходномуОС[0].СтоимостьБУ;
	Иначе
		Коэффициент = 1;
	КонецЕсли;	
		
	СписываемаяСтоимостьВР = СписываемаяСтоимостьВР * Коэффициент;
	СписываемаяСтоимостьПР = СписываемаяСтоимостьПР * Коэффициент;
		
	СписываемаяСтоимостьБУ = ОпределитьСписываемуюСтоимостьОСБУ(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС);
	
	СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрФА.ОсновноеСредство, Организация, Дата, СтрФА.ПризнакФА, СтрФА.ПризнакВыделенногоУчетаФА);
	
	СписаннаяСтоимостьВР = 0;
	СписаннаяСтоимостьПР = 0;
	
	Если СтрФА.ПризнакФА Тогда
		СодержаниеНУ = "Списание фиксированного актива";
	Иначе
		СодержаниеНУ = "Списание внеоборотного актива";
	КонецЕсли;
	
	////////////////////////////////////////// Основные средства ////////////////////////////////////////////
	
	// списание части стоимости по НУ на основные средства
	Для Каждого СтрокаОС ИЗ ТаблицаПоОС Цикл
		СуммаПроводкиНУ = СтрокаОС.СтоимостьНУ;
		
		Если СуммаПроводкиНУ <> 0 Тогда
			//стоимостный баланс уменьшаем на сумму списания в НУ				
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Содержание 	= СодержаниеНУ;
			
			ПроводкаНУ.СчетКт = СчетКт; 
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.Сумма = СуммаПроводкиНУ;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
			
			// в дебете указываем счет учета для нового (составляющего) ОС
			ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
		
		// спишем ВР и ПР в стоимости ФА
		Если СписываемаяСтоимостьВР <> 0 Тогда
			// определим списываемую сумму ВР пропорционально ост. стоимости НУ при полном списании
			// или пропорционально списываемой стоимости НУ при частичном списании
			
			СуммаПроводки = Окр((СтрокаОС.СтоимостьБУ / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьВР, 1);
			
			// для устранения отклонений от округлений, для последней строки спишем весь остаток
			Если (ТаблицаПоТоварам.Количество()= 0) И (ТаблицаПоПрочее.Количество() = 0) Тогда
				Если ТаблицаПоОС.Индекс(СтрокаОС) = ТаблицаПоОС.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
				
				ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
				
			// увеличим списанную стоимость ВР
			СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
		КонецЕсли;
		
		Если СписываемаяСтоимостьПР <> 0 Тогда
			СуммаПроводки = Окр((СтрокаОС.СтоимостьБУ / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьПР, 1);
			
			Если (ТаблицаПоТоварам.Количество()= 0) И (ТаблицаПоПрочее.Количество() = 0) Тогда
				Если ТаблицаПоОС.Индекс(СтрокаОС) = ТаблицаПоОС.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
				
				ПроводкаНУ.СчетДт = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
				
			СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
		КонецЕсли;
	КонецЦикла;	
	
	////////////////////////////////////////// Товары ////////////////////////////////////////////
	
	// списание части стоимости по НУ, приходящейся на долю товаров
	Для Каждого СтрокаТовары ИЗ ТаблицаПоТоварам Цикл
		СуммаПроводкиНУ = СтрокаТовары.СуммаНУ;
		
		Если СуммаПроводкиНУ <> 0 Тогда
			//стоимостный баланс уменьшаем на сумму списания в НУ				
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Содержание 	= СодержаниеНУ;
			
			Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда			
				ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Склад);
				Если ПроводкаНУ.СчетДт.Количественный Тогда
					ПроводкаНУ.КоличествоДт =  СтрокаТовары.Количество;
				КонецЕсли;	
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			КонецЕсли;	
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрФА.ОсновноеСредство, Организация, Дата, СтрФА.ПризнакФА, СтрФА.ПризнакВыделенногоУчетаФА);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.Сумма = СуммаПроводкиНУ;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		КонецЕсли;	
			
		// спишем ВР и ПР в стоимости ФА
		Если СписываемаяСтоимостьВР <> 0 Тогда
			СуммаПроводки = Окр((СтрокаТовары.Сумма / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьВР, 1);
			
			Если ТаблицаПоПрочее.Количество() = 0 Тогда
				Если ТаблицаПоТоварам.Индекс(СтрокаТовары) = ТаблицаПоТоварам.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
				
				ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", Строкатовары.Номенклатура);								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Склад);
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
			
			СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
		КонецЕсли;
		
		Если СписываемаяСтоимостьПР <> 0 Тогда
			СуммаПроводки = Окр((СтрокаТовары.Сумма / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьПР, 1);
			
			Если ТаблицаПоПрочее.Количество() = 0 Тогда
				Если ТаблицаПоТоварам.Индекс(СтрокаТовары) = ТаблицаПоТоварам.Количество()-1 Тогда
					СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
				
				ПроводкаНУ.СчетДт = СтрокаТовары.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаТовары.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады"		, Склад);
								
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
				
			СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
			
		КонецЕсли;
	КонецЦикла;	
	
	////////////////////////////////////////// Прочие счета ////////////////////////////////////////////
	
	Для Каждого СтрокаПрочее ИЗ ТаблицаПоПрочее Цикл
		СуммаПроводкиНУ = СтрокаПрочее.СуммаНУ;
		
		Если СуммаПроводкиНУ <> 0 Тогда
			//стоимостный баланс уменьшаем на сумму списания в НУ				
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Содержание 	= СодержаниеНУ;
			
			ПроводкаНУ.СчетКт = СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
			
			ПроводкаНУ.Сумма = СуммаПроводкиНУ;
			ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
			
			// в дебете указываем счет списания НУ
			ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
			Для Сч = 1 По 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
			КонецЦикла;	
			
			ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
		КонецЕсли;	
			
		// спишем ВР и ПР в стоимости ФА
		Если СписываемаяСтоимостьВР <> 0 Тогда
			СуммаПроводки = Окр((СтрокаПрочее.Сумма / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьВР, 1);
			
			Если ТаблицаПоПрочее.Индекс(СтрокаПрочее) = ТаблицаПоПрочее.Количество()-1 Тогда
				СуммаПроводки = СписываемаяСтоимостьВР - СписаннаяСтоимостьВР;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;
				
				ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
				Для Сч = 1 По 3 Цикл
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
				КонецЦикла;
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
				
			СписаннаяСтоимостьВР = СписаннаяСтоимостьВР + СуммаПроводки;
		КонецЕсли;
		
		Если СписываемаяСтоимостьПР <> 0 Тогда
			СуммаПроводки = Окр((СтрокаПрочее.Сумма / СписываемаяСтоимостьБУ) * СписываемаяСтоимостьПР, 1);
			
			Если ТаблицаПоПрочее.Индекс(СтрокаПрочее) = ТаблицаПоПрочее.Количество()-1 Тогда
				СуммаПроводки = СписываемаяСтоимостьПР - СписаннаяСтоимостьПР;
			КонецЕсли;
			
			Если СуммаПроводки <> 0 Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Погашение разниц";
				
				ПроводкаНУ.СчетКт = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма = СуммаПроводки;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ПР;
				
				ПроводкаНУ.СчетДт = СтрокаПрочее.СчетСписанияНУ;
				Для Сч = 1 По 3 Цикл
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Сч, СтрокаПрочее["СубконтоСписанияНУ"+ Сч]);
				КонецЦикла;
				
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ПР;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;	
				
			СписаннаяСтоимостьПР = СписаннаяСтоимостьПР + СуммаПроводки;
			
		КонецЕсли;

	КонецЦикла;	
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)

	//ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Перем ТаблицаПоОС, ТаблицаПоИсходномуОС, ТаблицаПоТоварам, ТаблицаПоПрочее;
	Перем ТаблицаФА, ТаблицаСтоимостиВА;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);		
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоПодразделениям", УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата));
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоМОЛ", 			УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата));
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим правильность заполнения реквизит ов ТЧ документа
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Сформируем таблицы документа
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее);
	ПодготовитьТаблицыПоНУ(СтруктураШапкиДокумента, ТаблицаФА, ТаблицаСтоимостиВА);
		
	ПроверитьТаблицуПоОС(ТаблицаПоИсходномуОС, Отказ, Заголовок);
	
	ПроверитьСуммыДокумента(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаСтоимостиВА, Отказ, Заголовок);
		
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоИсходномуОС, ТаблицаПоОС, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаФА, ТаблицаСтоимостиВА, Отказ, Заголовок);
						
		Если Не Отказ Тогда
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();