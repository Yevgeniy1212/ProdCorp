

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Производит пересчет двух других сумм остатка строки ТЧ при изменении третьей
//
// Параметры
//  ТипСуммы: строка - наименование изменившегося поля.
//
Процедура РасчетСумм(Объект,ТипСуммы,СтрокаТЧ) Экспорт
	
	ДатаНачала 	= Объект.ДатаНачала;
	Сценарий 	= Объект.Сценарий;
	ВалютаУпр	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	СтруктураКурсыВалютыОперации	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(СтрокаТЧ.Валюта,ДатаНачала,Сценарий);
    КурсВалютыОперации				= СтруктураКурсыВалютыОперации.Курс;
	КратностьВалютыОперации			= СтруктураКурсыВалютыОперации.Кратность;
	
	ВалютаСценария					= Объект.Сценарий.Валюта;
	ВалютаРегл						= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураКурсыВалютыУпрУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаУпр,		Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыРеглУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаРегл,	Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыСценария	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария,Объект.ДатаНачала,Объект.Сценарий);
	КурсВалютыУпрУчета				= СтруктураКурсыВалютыУпрУчета.Курс;
	КратностьВалютыУпрУчета			= СтруктураКурсыВалютыУпрУчета.Кратность;
	КурсВалютыРеглУчета				= СтруктураКурсыВалютыРеглУчета.Курс;
	КратностьВалютыРеглУчета		= СтруктураКурсыВалютыРеглУчета.Кратность;
	КурсВалютыСценария				= СтруктураКурсыВалютыСценария.Курс;
	КратностьВалютыСценария			= СтруктураКурсыВалютыСценария.Кратность;
	
	Если ТипСуммы = "СуммаУпр" Тогда
		Если СтрокаТЧ.Счет.Валютный И НЕ СтрокаТЧ.Валюта.Пустая() Тогда
			СтрокаТЧ.ВалютнаяСумма	= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, ВалютаУпр, СтрокаТЧ.Валюта, КурсВалютыУпрУчета, КурсВалютыОперации, КратностьВалютыУпрУчета, КратностьВалютыОперации);
		КонецЕсли;
		Если НЕ Сценарий.Пустая() Тогда
			СтрокаТЧ.СуммаСценария	= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, ВалютаУпр, ВалютаСценария, КурсВалютыУпрУчета, КурсВалютыСценария, КратностьВалютыУпрУчета, КратностьВалютыСценария);
		КонецЕсли;
	ИначеЕсли ТипСуммы = "ВалютнаяСумма" Тогда
		СтрокаТЧ.СуммаУпр			= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСумма, СтрокаТЧ.Валюта, ВалютаУпр,КурсВалютыОперации ,КурсВалютыУпрУчета, КратностьВалютыОперации,КратностьВалютыУпрУчета);
		Если НЕ Сценарий.Пустая() Тогда						
			СтрокаТЧ.СуммаСценария	= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСумма,СтрокаТЧ.Валюта,ВалютаСценария,КурсВалютыОперации ,КурсВалютыСценария, КратностьВалютыОперации,КратностьВалютыСценария);
		КонецЕсли;
	ИначеЕсли ТипСуммы = "СуммаСценария" Тогда
        Если СтрокаТЧ.Счет.Валютный И НЕ СтрокаТЧ.Валюта.Пустая() Тогда
			СтрокаТЧ.ВалютнаяСумма	= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, СтрокаТЧ.Валюта, КурсВалютыСценария, КурсВалютыОперации, КратностьВалютыСценария, КратностьВалютыОперации);
		КонецЕсли;
		СтрокаТЧ.СуммаУпр			= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, ВалютаУпр, КурсВалютыСценария, КурсВалютыУпрУчета, КратностьВалютыСценария, КратностьВалютыУпрУчета);
	КонецЕсли;
КонецПроцедуры //РасчетСумм

// Заполняет таблицу на основании показателей источников данных, указанных
// в реквизитах счетов
//
// Параметры: нет
//
Процедура ЗаполнитьПоДаннымИсточников(Объект) Экспорт
	
	ВалютаУпр	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	ВалютаСценария					= Объект.Сценарий.Валюта;
	ВалютаРегл						= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтруктураКурсыВалютыУпрУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаУпр,		Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыРеглУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаРегл,	Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыСценария	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария,Объект.ДатаНачала,Объект.Сценарий);
	КурсВалютыУпрУчета				= СтруктураКурсыВалютыУпрУчета.Курс;
	КратностьВалютыУпрУчета			= СтруктураКурсыВалютыУпрУчета.Кратность;
	КурсВалютыРеглУчета				= СтруктураКурсыВалютыРеглУчета.Курс;
	КратностьВалютыРеглУчета		= СтруктураКурсыВалютыРеглУчета.Кратность;
	КурсВалютыСценария				= СтруктураКурсыВалютыСценария.Курс;
	КратностьВалютыСценария			= СтруктураКурсыВалютыСценария.Кратность;
	СтруктураКурсы = Новый Структура("ВалютаУпр,КурсВалютыУпрУчета,КратностьВалютыУпрУчета,ВалютаСценария,КурсВалютыСценария,КратностьВалютыСценария,ВалютаРегл,КурсВалютыРеглУчета,КратностьВалютыРеглУчета",ВалютаУпр,КурсВалютыУпрУчета,КратностьВалютыУпрУчета,ВалютаСценария,КурсВалютыСценария,КратностьВалютыСценария,ВалютаРегл,КурсВалютыРеглУчета,КратностьВалютыРеглУчета);

	// Выберем счета, для которых возможно получить данные (указан источник)
	Запрос=Новый Запрос;
	СтруктураПараметров=Новый Структура;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	Бюджетирование.Ссылка КАК Счет,
	             |	Бюджетирование.Валютный КАК Валютный,
	             |	Бюджетирование.Количественный КАК Количественный,
	             |	БюджетированиеВидыСубконто1.ВидСубконто КАК Субконто1,
	             |	БюджетированиеВидыСубконто2.ВидСубконто КАК Субконто2,
	             |	БюджетированиеВидыСубконто3.ВидСубконто КАК Субконто3,
	             |	БюджетированиеВидыСубконто4.ВидСубконто КАК Субконто4,
	             |	БюджетированиеВидыСубконто5.ВидСубконто КАК Субконто5,
	             |	БюджетированиеВидыСубконто1.ВидСубконто.Наименование КАК НаименованиеСубконто1,
	             |	БюджетированиеВидыСубконто2.ВидСубконто.Наименование КАК НаименованиеСубконто2,
	             |	БюджетированиеВидыСубконто3.ВидСубконто.Наименование КАК НаименованиеСубконто3,
	             |	БюджетированиеВидыСубконто4.ВидСубконто.Наименование КАК НаименованиеСубконто4,
	             |	БюджетированиеВидыСубконто5.ВидСубконто.Наименование КАК НаименованиеСубконто5,
	             |	УчетФакта.ИсточникДанныхДляФакта.ТекстЗапроса КАК ТекстЗапроса,
	             |	УчетФакта.ИсточникДанныхДляФакта.НастройкиПостроителя КАК НастройкиПостроителя,
				 |	УчетФакта.ИсточникДанныхДляФакта.ПроизвольныйЗапрос КАК ПроизвольныйЗапрос,
	             |	УчетФакта.ПоказательИсточникаДанныхДляФактаСум КАК ПоказательИсточникаДанныхДляФактаСум,
				 |	УчетФакта.КоэффициентДляФактаСум КАК КоэффициентДляФактаСум,
	             |	УчетФакта.СпособОпределенияВалютыОборотаФакт КАК СпособОпределенияВалюты,
	             |	УчетФакта.ПоказательИсточникаДанныхДляФактаКол КАК ПоказательИсточникаДанныхДляФактаКол,
				  |	УчетФакта.КоэффициентДляФактаКол КАК КоэффициентДляФактаКол,
	             |	УчетФакта.ИсточникДанныхДляФакта.ИзмеренияИсточника КАК ИзмеренияИсточника,
	             |	УчетФакта.ИсточникДанныхДляФакта.ДатыОтбораДанныхИсточника КАК ДатыОтбораДанныхИсточника,
	             |	Бюджетирование.Представление
	             |ИЗ
	             |	ПланСчетов.фин_Бюджетирование КАК Бюджетирование
				 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПравилаОтложенногоСбораФактическихДанных КАК УчетФакта
				 |		ПО Бюджетирование.Ссылка = УчетФакта.ФинансовыйПоказатель
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто1
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто1.Ссылка И (БюджетированиеВидыСубконто1.НомерСтроки = 1)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто2
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто2.Ссылка И (БюджетированиеВидыСубконто2.НомерСтроки = 2)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто3
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто3.Ссылка И (БюджетированиеВидыСубконто3.НомерСтроки = 3)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто4
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто4.Ссылка И (БюджетированиеВидыСубконто4.НомерСтроки = 4)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто5
	             |		ПО Бюджетирование.Ссылка = БюджетированиеВидыСубконто5.Ссылка И (БюджетированиеВидыСубконто5.НомерСтроки = 5)
	             |
	             |ГДЕ
	             |	НЕ УчетФакта.ИсточникДанныхДляФакта = &ПустойИсточник";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустойИсточник",Новый(Тип("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования")));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();

	Объект.НовыеОстаткиПоСчетамБюджетирования.Очистить();
	КЭШ_Разрезы = Новый Соответствие;	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Попытка
			ПолучитьДанныеПоСчету(Объект,РезультатЗапроса,СтруктураКурсы,КЭШ_Разрезы);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для счета "+РезультатЗапроса.Счет+" указан некорректный источник данных расчета остатков! Ошибка:"+ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоДаннымИсточников

// Формирует строку (строки) таблицы "НовыеОстаткиПоСчетамБюджетирования" по данным источника,
// указанного для счета
//
// Параметры
//  Счет: строка результата запроса - содержит данные, необходимые для 
//  получения фактических данных.
//
Процедура ПолучитьДанныеПоСчету(Объект,Счет,СтруктураКурсы,КЭШ_Разрезы)
	ВалютаРегл						= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ДатаНачала = Объект.ДатаНачала;
	
	ПостроительОтчета=Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст = Счет.ТекстЗапроса;
	
	СохраненнаяНастройка=Счет.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Если Счет.ПроизвольныйЗапрос Тогда
			ПостроительОтчета.ЗаполнитьНастройки();
		КонецЕсли;
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
		
	Граница=Счет.ДатыОтбораДанныхИсточника.Выбрать();
	
	Пока Граница.Следующий() Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			ДатаГраницы=КонецДня(Граница.ДатаНачальнойГраницыОтсчета);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			ДатаГраницы=НачалоДня(ДатаНачала);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			ДатаГраницы=?(Не ЗначениеЗаполнено(ДатаНачала), КонецДня(ТекущаяДата()), КонецДня(ДатаНачала));
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить(Граница.ИмяДатаГраницы, ДатаГраницы);
		
	КонецЦикла;

	ПостроительОтчета.Выполнить();
	ТабИсточника=ПостроительОтчета.Результат.Выгрузить();
	
	Если ТабИсточника.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных по счету "+Счет.Представление);
		Возврат;
	КонецЕсли;
	
	ИзмерениеИсточника=Счет.ИзмеренияИсточника.Выбрать();
	СоставИзмерений=Новый Структура;
	
	// Эта структура необходимо, что бы при изменении имен колонок таблицы, при попытке установить две колонки
	// с одинаковыми именами все не попало, в дальнейшем, будем обращаться к значениям строк через эту структуру
	СоответствиеКолонок = Новый Структура();
	
	ИндексКолонки = 0;
	Пока ИзмерениеИсточника.Следующий() Цикл
		
		ИзмерениеБюджетирования = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ИзмерениеИсточника.ИзмерениеБюджетирования);
		ТабИсточника.Колонки[ИзмерениеИсточника.ИмяПоляИсточника].Имя = "_" + Строка(ИндексКолонки);
		СоответствиеКолонок.Вставить(ИзмерениеБюджетирования, ("_" + Строка(ИндексКолонки)));
		СоставИзмерений.Вставить(ИзмерениеБюджетирования,ИзмерениеИсточника.ИзмерениеБюджетирования);
		
		ИндексКолонки = ИндексКолонки + 1;
		
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") И
		   	ИзмерениеИсточника.ИзмерениеБюджетирования=Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ИзмерениеИсточника.ПутьКДанным);
				ЭлементОтбора.ВидСравнения 		= ВидСравнения.Равно;
				ЭлементОтбора.Значение 			= Объект.Организация;
				ЭлементОтбора.Использование 	= Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь переименуем оставшиеся колонки, что бы все соответствия имен у нас были в одной структуре
	Для каждого КолонкаТаблицы Из ТабИсточника.Колонки Цикл
	
		Если Сред(КолонкаТаблицы.Имя, 1, 1) = "_" Тогда
			Продолжить;;
		КонецЕсли; 
		
		СоответствиеКолонок.Вставить(КолонкаТаблицы.Имя, ("_" + Строка(ИндексКолонки)));
		КолонкаТаблицы.Имя = "_" + Строка(ИндексКолонки);
		
		ИндексКолонки = ИндексКолонки + 1;
		
	КонецЦикла; 
	
	ИмяИзмерения="";
	
	СоответствиеИзмеренийИРазрезовУчета = Новый Соответствие;
	Для Каждого ЭлементСписка Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
		СоответствиеИзмеренийИРазрезовУчета.Вставить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ЭлементСписка.Значение,КЭШ_Разрезы),ЭлементСписка.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаИсточник Из ТабИсточника Цикл
	
		СтрокаСчет=Объект.НовыеОстаткиПоСчетамБюджетирования.Добавить();
		СтрокаСчет.Счет=Счет.Счет;
		
		Если НЕ Счет.ПоказательИсточникаДанныхДляФактаСум="" Тогда
			
			Если НЕ СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаСум]]=NULL Тогда
				
				СуммаИсточник = СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаСум]]*Счет.КоэффициентДляФактаСум;
				
			Иначе
				
				СуммаИсточник=0;
				
			КонецЕсли;
			
		Иначе
			
			СуммаИсточник=0;
			
		КонецЕсли;
		
		Если НЕ Счет.ПоказательИсточникаДанныхДляФактаКол="" Тогда
			
			Если НЕ СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаКол]]=NULL Тогда
				
				КоличествоИсточник = СтрокаИсточник[СоответствиеКолонок[Счет.ПоказательИсточникаДанныхДляФактаКол]]*Счет.КоэффициентДляФактаКол;
				
			Иначе
				
				КоличествоИсточник=0;
				
			КонецЕсли;
			
		Иначе
			
			КоличествоИсточник=0;
			
		КонецЕсли;
		
		// Определяем значения субконто
		
		Если НЕ Счет.НаименованиеСубконто1 = NULL И СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто1)<>Неопределено Тогда // Проверяем, есть ли такое
			ИмяИзмерения = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто1));
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				Если ЗначениеЗаполнено(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) И СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]] <> Счет.Субконто1.ТипЗначения.ПривестиЗначение(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение "+Строка(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]])+" не удалось записатьв субконто "+Счет.Субконто1+" счета "+Счет.Счет);
				Иначе
					СтрокаСчет.Субконто1 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
				КонецЕсли;
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто2 = NULL И СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто2)<>Неопределено Тогда
			ИмяИзмерения = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто2));
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				Если ЗначениеЗаполнено(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) И СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]] <> Счет.Субконто2.ТипЗначения.ПривестиЗначение(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение "+Строка(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]])+" не удалось записатьв субконто "+Счет.Субконто2+" счета "+Счет.Счет);
				Иначе
					СтрокаСчет.Субконто2 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
				КонецЕсли;
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто3 = NULL И СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто3)<>Неопределено Тогда
			ИмяИзмерения = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто3));
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				Если ЗначениеЗаполнено(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) И СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]] <> Счет.Субконто3.ТипЗначения.ПривестиЗначение(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение "+Строка(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]])+" не удалось записатьв субконто "+Счет.Субконто2+" счета "+Счет.Счет);
				Иначе
					СтрокаСчет.Субконто3 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
				КонецЕсли;
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто4 = NULL И СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто4)<>Неопределено Тогда
			ИмяИзмерения = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто4));
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				Если ЗначениеЗаполнено(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) И СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]] <> Счет.Субконто4.ТипЗначения.ПривестиЗначение(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение "+Строка(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]])+" не удалось записатьв субконто "+Счет.Субконто4+" счета "+Счет.Счет);
				Иначе
					СтрокаСчет.Субконто4 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
				КонецЕсли;
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		Если НЕ Счет.НаименованиеСубконто5 = NULL И СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто5)<>Неопределено Тогда
			ИмяИзмерения = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СоответствиеИзмеренийИРазрезовУчета.Получить(Счет.Субконто5));
			Если СоставИзмерений.Свойство(ИмяИзмерения) Тогда // Проверяем, было ли такое измерение в источнике
				Если ЗначениеЗаполнено(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) И СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]] <> Счет.Субконто5.ТипЗначения.ПривестиЗначение(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Значение "+Строка(СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]])+" не удалось записатьв субконто "+Счет.Субконто5+" счета "+Счет.Счет);
				Иначе
					СтрокаСчет.Субконто5 = СтрокаИсточник[СоответствиеКолонок[ИмяИзмерения]];
				КонецЕсли;
			КонецЕсли;
			ИмяИзмерения="";
		КонецЕсли;
		
		// Определяем валюту, в которой получены остатки по источнику
		Если Счет.СпособОпределенияВалюты=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ВалютаУправленческогоУчета Тогда
			ВалютаОстатка=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
			СтрокаСчет.СуммаУпр=СуммаИсточник;
		ИначеЕсли Счет.СпособОпределенияВалюты=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ВалютаРегламентированногоУчета Тогда
			ВалютаОстатка=ВалютаРегл;
			СтрокаСчет.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаИсточник, ВалютаОстатка, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"), СтруктураКурсы.КурсВалютыРеглУчета, СтруктураКурсы.КурсВалютыУпрУчета, 
									СтруктураКурсы.КратностьВалютыРеглУчета, СтруктураКурсы.КратностьВалютыУпрУчета);
			
		ИначеЕсли Счет.СпособОпределенияВалюты=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ВалютаИсточникаДанных Тогда
			Если СоставИзмерений.Свойство("Валюта") Тогда
				ВалютаОстатка=СтрокаИсточник[СоответствиеКолонок["Валюта"]];
			Иначе // По умолчанию
				ВалютаОстатка=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
				СтрокаСчет.СуммаУпр=СуммаИсточник;
			КонецЕсли;
		КонецЕсли;

		
		Если Счет.Валютный Тогда
			СтрокаСчет.Валюта=ВалютаОстатка;
			СтрокаСчет.ВалютнаяСумма=СуммаИсточник;
			РасчетСумм(Объект,"ВалютнаяСумма",СтрокаСчет);
		Иначе
			РасчетСумм(Объект,"СуммаУпр",СтрокаСчет);
		КонецЕсли;
		
		Если Счет.Количественный И НЕ Счет.ПоказательИсточникаДанныхДляФактаКол="" Тогда
			СтрокаСчет.Количество=КоличествоИсточник;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры //ПолучитьДанныеПоСчету

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПереопределяемыеДанные = Новый Массив;
	ПереопределяемыеДанные.Добавить("НовыеОстаткиПоСчетамБюджетирования");
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить("БюджетированиепоОрганизациям",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиепоОрганизациям"));
	ДополнительныеПараметрыЗапроса.Вставить("Организация",	ДокументСсылка.Организация);
	ДополнительныеПараметрыЗапроса.Вставить("Сценарий",		ДокументСсылка.Сценарий);
	ДополнительныеПараметрыЗапроса.Вставить("Ссылка",		ДокументСсылка);
	ДополнительныеПараметрыЗапроса.Вставить("ДатаНачала",	ДокументСсылка.ДатаНачала);
	ДополнительныеПараметрыЗапроса.Вставить("Пассивный",	ВидСчета.Пассивный);
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,ПереопределяемыеДанные,ДополнительныеПараметрыЗапроса);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаНовыеОстаткиПоСчетамБюджетирования(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если (НЕ Реквизиты["ЕстьНовыеОстаткиПоСчетамБюджетирования"]) И Реквизиты.ВыборочнаяКорректировка Тогда
		ПараметрыПроведения.Вставить("ТаблицаНовыеОстаткиПоСчетамБюджетирования", Неопределено);
	Иначе
		Если НЕ Реквизиты.ВыборочнаяКорректировка Тогда
			
			ТекстЗапроса="ВЫБРАТЬ
			             |	ТаблицаСравнения.Счет КАК Счет,
			             |	ТаблицаСравнения.Счет.Вид КАК ВидСчета,
			             |	ТаблицаСравнения.Счет.Забалансовый КАК Забалансовый,
			             |	ТаблицаСравнения.Субконто1,
			             |	ТаблицаСравнения.Субконто2,
			             |	ТаблицаСравнения.Субконто3,
			             |	ТаблицаСравнения.Валюта,
			             |	СУММА(ТаблицаСравнения.КоличествоНовыйОстаток) - СУММА(ТаблицаСравнения.КоличествоТекущийОстаток) КАК КорректировкаКоличество,
			             |	СУММА(ТаблицаСравнения.СуммаУпрНовыйОстаток) - СУММА(ТаблицаСравнения.СуммаУпрТекущийОстаток) КАК КорректировкаСуммаУпр,
			             |	СУММА(ТаблицаСравнения.ВалютнаяСуммаНовыйОстаток) - СУММА(ТаблицаСравнения.ВалютнаяСуммаТекущийОстаток) КАК КорректировкаВалютнаяСумма,
			             |	СУММА(ТаблицаСравнения.СуммаСценарияНовыйОстаток) - СУММА(ТаблицаСравнения.СуммаСценарияТекущийОстаток) КАК КорректировкаСуммаСценария
			             |ИЗ
			             |	(ВЫБРАТЬ
			             |		БюджетированиеОстатки.Счет КАК Счет,
			             |		БюджетированиеОстатки.Субконто1 КАК Субконто1,
			             |		БюджетированиеОстатки.Субконто2 КАК Субконто2,
			             |		БюджетированиеОстатки.Субконто3 КАК Субконто3,
			             |		БюджетированиеОстатки.Валюта КАК Валюта,
			             |		ВЫБОР
			             |			КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |				ТОГДА БюджетированиеОстатки.КоличествоОстаток * -1
			             |			ИНАЧЕ БюджетированиеОстатки.КоличествоОстаток
			             |		КОНЕЦ КАК КоличествоТекущийОстаток,
			             |		ВЫБОР
			             |			КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |				ТОГДА БюджетированиеОстатки.СуммаУпрОстаток * -1
			             |			ИНАЧЕ БюджетированиеОстатки.СуммаУпрОстаток
			             |		КОНЕЦ КАК СуммаУпрТекущийОстаток,
			             |		ВЫБОР
			             |			КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |				ТОГДА БюджетированиеОстатки.ВалютнаяСуммаОстаток * -1
			             |			ИНАЧЕ БюджетированиеОстатки.ВалютнаяСуммаОстаток
			             |		КОНЕЦ КАК ВалютнаяСуммаТекущийОстаток,
			             |		ВЫБОР
			             |			КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |				ТОГДА БюджетированиеОстатки.СуммаСценарияОстаток * -1
			             |			ИНАЧЕ БюджетированиеОстатки.СуммаСценарияОстаток
			             |		КОНЕЦ КАК СуммаСценарияТекущийОстаток,
			             |		0 КАК КоличествоНовыйОстаток,
			             |		0 КАК СуммаУпрНовыйОстаток,
			             |		0 КАК ВалютнаяСуммаНовыйОстаток,
			             |		0 КАК СуммаСценарияНовыйОстаток
			             |	ИЗ
			             |		РегистрБухгалтерии.фин_Бюджетирование.Остатки(
			             |				&ДатаНачала,
			             |				,
			             |				,
			             |				ВЫБОР
			             |						КОГДА &БюджетированиепоОрганизациям
			             |							ТОГДА Организация = &Организация
			             |						ИНАЧЕ ИСТИНА
			             |					КОНЕЦ
			             |					И Сценарий = &Сценарий) КАК БюджетированиеОстатки
			             |	
			             |	ОБЪЕДИНИТЬ ВСЕ
			             |	
			             |	ВЫБРАТЬ
			             |		ДокументКорректировка.Счет,
			             |		ДокументКорректировка.Субконто1,
			             |		ДокументКорректировка.Субконто2,
			             |		ДокументКорректировка.Субконто3,
			             |		ДокументКорректировка.Валюта,
			             |		0,
			             |		0,
			             |		0,
			             |		0,
			             |		ДокументКорректировка.Количество,
			             |		ДокументКорректировка.СуммаУпр,
			             |		ДокументКорректировка.ВалютнаяСумма,
			             |		ДокументКорректировка.СуммаСценария
			             |	ИЗ
			             |		Документ.фин_КорректировкаОстатковПоПрогнознымБалансам.НовыеОстаткиПоСчетамБюджетирования КАК ДокументКорректировка
			             |	ГДЕ
			             |		ДокументКорректировка.Ссылка = &Ссылка) КАК ТаблицаСравнения
			             |
			             |СГРУППИРОВАТЬ ПО
			             |	ТаблицаСравнения.Счет,
			             |	ТаблицаСравнения.Субконто1,
			             |	ТаблицаСравнения.Субконто2,
			             |	ТаблицаСравнения.Субконто3,
			             |	ТаблицаСравнения.Валюта,
			             |	ТаблицаСравнения.Счет.Вид,
			             |	ТаблицаСравнения.Счет.Забалансовый";
			
		Иначе
			
			ТекстЗапроса="ВЫБРАТЬ
			             |	ТаблицаДокумента.Счет КАК Счет,
			             |	ТаблицаДокумента.Счет.Вид КАК ВидСчета,
			             |	ТаблицаДокумента.Счет.Забалансовый КАК Забалансовый,
			             |	ТаблицаДокумента.Субконто1 КАК Субконто1,
			             |	ТаблицаДокумента.Субконто2 КАК Субконто2,
			             |	ТаблицаДокумента.Субконто3 КАК Субконто3,
			             |	ТаблицаДокумента.Валюта КАК Валюта,
			             |	ТаблицаДокумента.КолСубконто КАК КолСубконто,
			             |	ВЫБОР
			             |		КОГДА ТекущиеОстатки.КоличествоТекущийОстаток ЕСТЬ NULL 
			             |			ТОГДА ТаблицаДокумента.Количество
			             |		ИНАЧЕ ТаблицаДокумента.Количество - ТекущиеОстатки.КоличествоТекущийОстаток
			             |	КОНЕЦ КАК КорректировкаКоличество,
			             |	ВЫБОР
			             |		КОГДА ТекущиеОстатки.СуммаУпрТекущийОстаток ЕСТЬ NULL 
			             |			ТОГДА ТаблицаДокумента.СуммаУпр
			             |		ИНАЧЕ ТаблицаДокумента.СуммаУпр - ТекущиеОстатки.СуммаУпрТекущийОстаток
			             |	КОНЕЦ КАК КорректировкаСуммаУпр,
			             |	ВЫБОР
			             |		КОГДА ТекущиеОстатки.ВалютнаяСуммаТекущийОстаток ЕСТЬ NULL 
			             |			ТОГДА ТаблицаДокумента.ВалютнаяСумма
			             |		ИНАЧЕ ТаблицаДокумента.ВалютнаяСумма - ТекущиеОстатки.ВалютнаяСуммаТекущийОстаток
			             |	КОНЕЦ КАК КорректировкаВалютнаяСумма,
			             |	ВЫБОР
			             |		КОГДА ТекущиеОстатки.СуммаСценарияТекущийОстаток ЕСТЬ NULL 
			             |			ТОГДА ТаблицаДокумента.СуммаСценария
			             |		ИНАЧЕ ТаблицаДокумента.СуммаСценария - ТекущиеОстатки.СуммаСценарияТекущийОстаток
			             |	КОНЕЦ КАК КорректировкаСуммаСценария
			             |ИЗ
			             |	(ВЫБРАТЬ
			             |		ТабКорректировок.Счет КАК Счет,
			             |		ТабКорректировок.Субконто1 КАК Субконто1,
			             |		ТабКорректировок.Субконто2 КАК Субконто2,
			             |		ТабКорректировок.Субконто3 КАК Субконто3,
			             |		КоличествоСубконто.КолСубконто КАК КолСубконто,
			             |		ТабКорректировок.Валюта КАК Валюта,
			             |		ТабКорректировок.Количество КАК Количество,
			             |		ТабКорректировок.СуммаУпр КАК СуммаУпр,
			             |		ТабКорректировок.ВалютнаяСумма КАК ВалютнаяСумма,
			             |		ТабКорректировок.СуммаСценария КАК СуммаСценария
			             |	ИЗ
			             |		Документ.фин_КорректировкаОстатковПоПрогнознымБалансам.НовыеОстаткиПоСчетамБюджетирования КАК ТабКорректировок
			             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			             |				БюджетированиеВидыСубконто.Ссылка КАК Счет,
			             |				КОЛИЧЕСТВО(БюджетированиеВидыСубконто.ВидСубконто) КАК КолСубконто
			             |			ИЗ
			             |				ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто
			             |			
			             |			СГРУППИРОВАТЬ ПО
			             |				БюджетированиеВидыСубконто.Ссылка) КАК КоличествоСубконто
			             |			ПО ТабКорректировок.Счет = КоличествоСубконто.Счет
			             |	ГДЕ
			             |		ТабКорректировок.Ссылка = &Ссылка) КАК ТаблицаДокумента
			             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			             |			БюджетированиеОстатки.Счет КАК Счет,
			             |			БюджетированиеОстатки.Субконто1 КАК Субконто1,
			             |			БюджетированиеОстатки.Субконто2 КАК Субконто2,
			             |			БюджетированиеОстатки.Субконто3 КАК Субконто3,
			             |			БюджетированиеОстатки.Валюта КАК Валюта,
			             |			ВЫБОР
			             |				КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |					ТОГДА БюджетированиеОстатки.КоличествоОстаток * -1
			             |				ИНАЧЕ БюджетированиеОстатки.КоличествоОстаток
			             |			КОНЕЦ КАК КоличествоТекущийОстаток,
			             |			ВЫБОР
			             |				КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |					ТОГДА БюджетированиеОстатки.СуммаУпрОстаток * -1
			             |				ИНАЧЕ БюджетированиеОстатки.СуммаУпрОстаток
			             |			КОНЕЦ КАК СуммаУпрТекущийОстаток,
			             |			ВЫБОР
			             |				КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |					ТОГДА БюджетированиеОстатки.ВалютнаяСуммаОстаток * -1
			             |				ИНАЧЕ БюджетированиеОстатки.ВалютнаяСуммаОстаток
			             |			КОНЕЦ КАК ВалютнаяСуммаТекущийОстаток,
			             |			ВЫБОР
			             |				КОГДА БюджетированиеОстатки.Счет.Вид = &Пассивный
			             |					ТОГДА БюджетированиеОстатки.СуммаСценарияОстаток * -1
			             |				ИНАЧЕ БюджетированиеОстатки.СуммаСценарияОстаток
			             |			КОНЕЦ КАК СуммаСценарияТекущийОстаток
			             |		ИЗ
			             |			РегистрБухгалтерии.фин_Бюджетирование.Остатки(
			             |					&ДатаНачала,
			             |					,
			             |					,
			             |					ВЫБОР
			             |							КОГДА &БюджетированиепоОрганизациям
			             |								ТОГДА Организация = &Организация
			             |							ИНАЧЕ ИСТИНА
			             |						КОНЕЦ
			             |						И Сценарий = &Сценарий) КАК БюджетированиеОстатки) КАК ТекущиеОстатки
			             |		ПО ТаблицаДокумента.Счет = ТекущиеОстатки.Счет
			             |			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
			             |				ИЛИ ТаблицаДокумента.Субконто1 = ТекущиеОстатки.Субконто1)
			             |			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
			             |				ИЛИ ТаблицаДокумента.КолСубконто = 1
			             |				ИЛИ ТаблицаДокумента.КолСубконто > 1
			             |					И ТаблицаДокумента.Субконто2 = ТекущиеОстатки.Субконто2)
			             |			И (ТаблицаДокумента.КолСубконто ЕСТЬ NULL 
			             |				ИЛИ ТаблицаДокумента.КолСубконто <= 2
			             |				ИЛИ ТаблицаДокумента.КолСубконто > 2
			             |					И ТаблицаДокумента.Субконто3 = ТекущиеОстатки.Субконто3)
			             |			И (НЕ ТаблицаДокумента.Счет.Валютный
			             |				ИЛИ ТаблицаДокумента.Валюта = ТекущиеОстатки.Валюта)";
			
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаНовыеОстаткиПоСчетамБюджетирования",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.


////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли