
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_КорректировкаОстатковПоПрогнознымБалансам", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ДатаНачалаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ИнициализацияКурсов();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НовыеОстаткиПоСчетамБюджетирования

&НаКлиенте
Процедура НовыеОстаткиПоСчетамБюджетированияСчетПриИзменении(Элемент)
	ТекущиеДанные = Элементы.НовыеОстаткиПоСчетамБюджетирования.ТекущиеДанные;
	Счет = ТекущиеДанные.Счет;
	ПараметрыСубконтоСчета = ПолучитьПараметрыСубконтоСчета(Счет);
	ВидыСубконто = ПараметрыСубконтоСчета[0];
	МаксКоличествоСубконто = ПараметрыСубконтоСчета[1];
	ТипыЗначенияВидыСубконто = ПараметрыСубконтоСчета[2];
	НаименованияВидыСубконто = ПараметрыСубконтоСчета[3];
	ДетализацияПланирования = ПараметрыСубконтоСчета[4];
	СчетВалютный = ПараметрыСубконтоСчета[5];
	СчетКоличественный = ПараметрыСубконтоСчета[6];
	Для К=1 По 3 Цикл
		ТекущиеДанные["Субконто"+К]=Неопределено;
	КонецЦикла;
	Для К = 0 По ВидыСубконто.Количество() - 1 Цикл
		ТипСубконто = ТипыЗначенияВидыСубконто[К];
		Префикс=К+1;
		Если НаименованияВидыСубконто[К]="Номенклатура" Тогда // Выбираем по сценарию
			Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ДетализацияПланирования=фин_ОбщегоНазначенияКлиентПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
				ТекущиеДанные["Субконто"+Префикс]=Новый(фин_ОбщегоНазначенияКлиентПовтИсп.ТипНоменклатурныеГруппыСсылка());
			Иначе
				ТекущиеДанные["Субконто"+Префикс]=Новый(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли
		Иначе
			ЭлементТЧ=	ТекущиеДанные["Субконто"+Префикс];
			ТекущиеДанные["Субконто"+Префикс] = ТипСубконто.ПривестиЗначение(ЭлементТЧ);
		КонецЕсли;
		Элементы["НовыеОстаткиПоСчетамБюджетированияСубконто"+Префикс].Доступность = Истина;
	КонецЦикла;
	МаксСубконто = МаксКоличествоСубконто - 1;
	Для К = ВидыСубконто.Количество() По МаксСубконто Цикл
		Префикс=К+1;
		ЭлементТЧ=	ТекущиеДанные["Субконто"+Префикс];
		ЭлементТЧ= Неопределено;
		Элементы["НовыеОстаткиПоСчетамБюджетированияСубконто"+Префикс].Доступность = Ложь;
	КонецЦикла;
	Если СчетВалютный Тогда
		Элементы.НовыеОстаткиПоСчетамБюджетированияВалюта.Доступность = Истина;
		Элементы.НовыеОстаткиПоСчетамБюджетированияВалютнаяСумма.Доступность = Истина;
	Иначе
		ТекущиеДанные.Валюта=Неопределено;
		ТекущиеДанные.ВалютнаяСумма=0;
		Элементы.НовыеОстаткиПоСчетамБюджетированияВалюта.Доступность = Ложь;
		Элементы.НовыеОстаткиПоСчетамБюджетированияВалютнаяСумма.Доступность = Ложь;
	КонецЕсли;
	Если СчетКоличественный Тогда
		Элементы.НовыеОстаткиПоСчетамБюджетированияКоличество.Доступность = Истина;
	Иначе
		ТекущиеДанные.Количество=0;
		Элементы.НовыеОстаткиПоСчетамБюджетированияКоличество.Доступность=Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеОстаткиПоСчетамБюджетированияВалютаПриИзменении(Элемент)
	НовыеОстаткиПоСчетамБюджетированияВалютаПриИзмененииНаСервере(Элементы.НовыеОстаткиПоСчетамБюджетирования.ТекущаяСтрока)
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Заполнить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПоказатьПредупреждение(,"Не указана дата корректировки остатков");
		Возврат;
	КонецЕсли;
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Объект.НовыеОстаткиПоСчетамБюджетирования.Очистить();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Объект.ДатаНачала=ТекущаяДата();
			Если БюджетированиеПоОрганизациям Тогда
				Объект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
			Объект.Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");

		КонецЕсли;
		Объект.Состояние = фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		
	КонецЕсли;
	
	СтруктураСоответствия=Новый Структура;
	СтруктураСоответствия.Вставить("ЦФО","ЦФО");
	СтруктураСоответствия.Вставить("Проекты","Проект");
	СтруктураСоответствия.Вставить("Контрагенты","Контрагент");
	СтруктураСоответствия.Вставить("Номенклатура","Номенклатура");
	СтруктураСоответствия.Вставить("СтатьиОборотов","ФинансовыйПоказатель");

	мВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	БалансКорректировки();
	ИнициализацияКурсов();
	
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

// Рассчитывает баланс по устанавливаемым суммам
//
// Параметры: нет.
//
&НаСервере
Процедура БалансКорректировки()
	БалансКорректировкиУпр=0;
	БалансКорректировкиСценарий=0;
	Для Каждого Строка Из Объект.НовыеОстаткиПоСчетамБюджетирования Цикл
		Если Строка.Счет.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Счет.Вид=ВидСчета.Пассивный Тогда
			БалансКорректировкиУпр=БалансКорректировкиУпр-Строка.СуммаУпр;
			Если НЕ Объект.Сценарий.Пустая() Тогда
				БалансКорректировкиСценарий=БалансКорректировкиСценарий-Строка.СуммаСценария;
			КонецЕсли;
		Иначе
			БалансКорректировкиУпр=БалансКорректировкиУпр+Строка.СуммаУпр;
			Если НЕ Объект.Сценарий.Пустая() Тогда
				БалансКорректировкиСценарий=БалансКорректировкиСценарий+Строка.СуммаСценария;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Элементы.НадписьБалансУпр.Заголовок="Баланс (сумма упр.): "+Формат(БалансКорректировкиУпр,"ЧЦ=15; ЧДЦ=2");
	Если НЕ Объект.Сценарий.Пустая() Тогда
		Элементы.НадписьБалансСценарий.Заголовок="Баланс (сумма сценария): "+Формат(БалансКорректировкиСценарий,"ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
				
КонецПроцедуры //БалансКорректировки

// Инициализация курсов валют для пересчета
//
// Параметры: нет
//
&НаСервере
Процедура ИнициализацияКурсов()
	ВалютаУпр						= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаСценария					= Объект.Сценарий.Валюта;
	ВалютаРегл						= мВалютаРегламентированногоУчета;
	СтруктураКурсыВалютыУпрУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаУпр,		Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыРеглУчета	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаРегл,	Объект.ДатаНачала,Объект.Сценарий);
	СтруктураКурсыВалютыСценария	= фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария,Объект.ДатаНачала,Объект.Сценарий);
	КурсВалютыУпрУчета				= СтруктураКурсыВалютыУпрУчета.Курс;
	КратностьВалютыУпрУчета			= СтруктураКурсыВалютыУпрУчета.Кратность;
	КурсВалютыРеглУчета				= СтруктураКурсыВалютыРеглУчета.Курс;
	КратностьВалютыРеглУчета		= СтруктураКурсыВалютыРеглУчета.Кратность;
	КурсВалютыСценария				= СтруктураКурсыВалютыСценария.Курс;
	КратностьВалютыСценария			= СтруктураКурсыВалютыСценария.Кратность;
КонецПроцедуры //ИнициализацияКурсов

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	Объект.ДатаНачала=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаНачала,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
	ИнициализацияКурсов();
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСубконтоСчета(Счет)
	ПараметрыСубконто = Новый Массив;
	ВидыСубконто = Новый Массив;
	ТипыЗначенияВидыСубконто = Новый Массив;
	НаименованияВидыСубконто = Новый Массив;
	Для каждого ВидСубконто из Счет.ВидыСубконто Цикл
		ВидыСубконто.Добавить(ВидСубконто.ВидСубконто);
		ТипыЗначенияВидыСубконто.Добавить(ВидСубконто.ВидСубконто.ТипЗначения);
		НаименованияВидыСубконто.Добавить(ВидСубконто.ВидСубконто.Наименование);
	КонецЦикла;
	
	//ПараметрыСубконто.Добавить(Счет.ВидыСубконто);
	ПараметрыСубконто.Добавить(ВидыСубконто);
	ПараметрыСубконто.Добавить(Счет.Метаданные().МаксКоличествоСубконто);
	ПараметрыСубконто.Добавить(ТипыЗначенияВидыСубконто);
	ПараметрыСубконто.Добавить(НаименованияВидыСубконто);
	ПараметрыСубконто.Добавить(Объект.Сценарий.ДетализацияПланирования);
	ПараметрыСубконто.Добавить(Счет.Валютный);
	ПараметрыСубконто.Добавить(Счет.Количественный);
	Возврат  ПараметрыСубконто;
КонецФункции

&НаСервере
Процедура НовыеОстаткиПоСчетамБюджетированияВалютаПриИзмененииНаСервере(ТекущаяСтрока)
	ТекущиеДанные = Объект.НовыеОстаткиПоСчетамБюджетирования.НайтиПоИдентификатору(ТекущаяСтрока);
	Если Не ТекущиеДанные = Неопределено Тогда
		Документы.фин_КорректировкаОстатковПоПрогнознымБалансам.РасчетСумм(Объект,"ВалютнаяСумма",ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	Документы.фин_КорректировкаОстатковПоПрогнознымБалансам.ЗаполнитьПоДаннымИсточников(Объект);
	БалансКорректировки();
КонецПроцедуры

