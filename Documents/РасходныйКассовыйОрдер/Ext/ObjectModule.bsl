// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем мОтображатьСтруктурныеПодразделенияВЗарплате Экспорт;

Перем ТаблицаПлатежейУпр Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 

	КодыСчетов = Новый Структура("Дебет,Кредит");

	// Определяем код счета кредита
	КассаВВалюте = Ложь;
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;

	КодыСчетов.Кредит = СчетКасса.Код;

	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		СтрокаДебет = "";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено И
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка"	 , Ссылка);
		Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);
		
		ВыборкаСумм = Запрос.Выполнить().Выбрать();
		Если ВыборкаСумм.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
				СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСумм.ДепонированнаяСумма) Тогда
				СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате.Код;
			КонецЕсли;
		КонецЕсли;

		СтрокаДебет = Сред(СтрокаДебет,2);
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		СтрокаДебет = "";
		
		Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено И
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &парамПлатВедомость И
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = &парамФизЛицо
			|";
			
			Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);
			Запрос.УстановитьПараметр("парамФизЛицо"	  , Контрагент);
			Запрос.УстановитьПараметр("Выплачено"		  , Перечисления.ВыплаченностьЗарплаты.Выплачено);
			
			ВыборкаСумм = Запрос.Выполнить().Выбрать();
			Если ВыборкаСумм.Следующий() Тогда
				Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
					СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаСумм.ДепонированнаяСумма) Тогда
					СтрокаДебет = СтрокаДебет + ", " + ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате.Код;
				КонецЕсли;
			КонецЕсли;

			СтрокаДебет = Сред(СтрокаДебет,2);
			
		Иначе
			
			СтрокаДебет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		СтрокаДебет = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам.Код;


	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентомБУ.Код;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда

		СтрокаДебет = СчетУчетаРасчетовСКонтрагентомБУ.Код;

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		ТабСчет = РасшифровкаПлатежа.Выгрузить();

		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентомБУ,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");

		СтрокаДебет = "";

		Для Каждого Строка Из ТабСчет Цикл

			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентомБУ.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код;
			КонецЕсли;

			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаДебет = СтрокаДебет+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;

		КонецЦикла;

		СтрокаДебет = Сред(СтрокаДебет,2);

	КонецЕсли;

	КодыСчетов.Дебет = СтрокаДебет;

	Возврат КодыСчетов;

КонецФункции // ОпределитьКодыСчетСубсчет()


// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	  , ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза"		  , Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Касса);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				  |	РасходныйКассовыйОрдер.Номер,
				  |	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
				  |	РасходныйКассовыйОрдер.Организация,
				  | РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
				  | РасходныйКассовыйОрдер.СтруктурноеПодразделениеПолучатель КАК СтруктурноеПодразделениеПолучатель,
				  |	РасходныйКассовыйОрдер.Организация КАК ЮрФизЛицо,
				  |	РасходныйКассовыйОрдер.Организация КАК Руководители,
				  |	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
				  |	РасходныйКассовыйОрдер.Контрагент,
				  |	РасходныйКассовыйОрдер.Контрагент.Представление КАК ФИОПолучателя,
				  |	РасходныйКассовыйОрдер.ВалютаДокумента КАК Валюта,
				  |	РасходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
				  |	РасходныйКассовыйОрдер.ПлатежнаяВедомость КАК ПлатежнаяВедомость,
				  |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Выдать КАК СТРОКА(1000)) КАК Выдать,
				  |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Приложение КАК СТРОКА(1000)) КАК Приложение,
				  |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.ПоДокументу КАК СТРОКА(1000)) КАК ПоДокументу,
				  |	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Основание КАК СТРОКА(1000)) КАК Основание,
				  |	ВЫБОР
				  |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
				  |			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
				  |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				  |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				  |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				  |				ИНАЧЕ """"
				  |			КОНЕЦ + ВЫБОР
				  |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				  |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				  |				ИНАЧЕ """"
				  |			КОНЕЦ
				  |	КОНЕЦ КАК Кассир
				  |ИЗ
				  |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
				  |		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = РасходныйКассовыйОрдер.Касса)
				  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
				  |		ПО (ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо)
				  |ГДЕ
				  |	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
				  
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
				  
	ТабДокумент   					= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         					= ПолучитьМакет("КО2");
	ОбластьМакета					= Макет.ПолучитьОбласть("Шапка");
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	СведенияОбОрганизации     = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	ПечатьСуммыПрописью       = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПечатьСуммыПрописьюВДокументах");
    	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.СуммаПрописью     		 = ?(ПечатьСуммыПрописью, ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта), "");
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");	
	ОбластьМакета.Параметры.ДатаДокумента     		 = Формат(Шапка.ДатаДокумента, "ДФ = 'дд.ММ.гггг'")+" года";
	ОбластьМакета.Параметры.НомерДокумента    		 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.ДебетСубСчет  		   = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.КодАналитическогоУчета = КодыСчетСубсчет.Кредит;

	Руководители		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(Шапка.ДатаДокумента),);
	Руководитель 		  = Руководители.Руководитель;
	РуководительДолжность = Руководители.РуководительДолжность;
	Бухгалтер   		  = Руководители.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), "Не предусмотрен", Бухгалтер);
	ОбластьМакета.Параметры.ФИОКассира            = Шапка.Кассир;

	ОбластьМакета.Параметры.Основание             = СокрЛП(Шапка.Основание);
	
	ТекстВыдать      = СокрЛП(Шапка.Выдать);
	ТекстВыдатьФИО   = "";
	ТекстПоДокументу = СокрЛП(Шапка.ПоДокументу);

	Если ТекстВыдать = "" Тогда

		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			ОрганизацияПолучатель = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделениеПолучатель);
			ТекстВыдать 		  = ?(ЗначениеЗаполнено(ОрганизацияПолучатель), ОрганизацияПолучатель.Наименование, ОрганизацияПолучатель.НаименованиеПолное);
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ТекстВыдать = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				
				ДанныеОФизЛице = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Контрагент, Дата);
				
				// Проверим что вернулось, если там Null значит берем наименование 
				Если ДанныеОФизЛице.Фамилия = Null Тогда 
					ТекстВыдатьФИО = Контрагент.Наименование;
				Иначе 
					СтруктураФИО = Новый Структура;
					СтруктураФИО.Вставить("Фамилия" , ДанныеОФизЛице.Фамилия); 
					СтруктураФИО.Вставить("Имя"	    , ДанныеОФизЛице.Имя);
					СтруктураФИО.Вставить("Отчество", ДанныеОФизЛице.Отчество);	
					ТекстВыдать    = ОбщегоНазначения.ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, ДанныеОФизЛице.НеСклонятьФамилию, Контрагент.Пол);
					ТекстВыдатьФИО = ДанныеОФизЛице.Фамилия + " " + ДанныеОФизЛице.Имя + " " + ДанныеОФизЛице.Отчество;
				КонецЕсли;
			КонецЕсли;    
		КонецЕсли;    
	КонецЕсли;
	
	Если ТекстВыдатьФИО = "" И ЗначениеЗаполнено(Контрагент)
		И ((ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо)
		ИЛИ ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		
		ДокФизЛица 	= ?(ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, Контрагент.ФизЛицо, Контрагент);
		
		Если ЗначениеЗаполнено(ДокФизЛица) Тогда 
			
			ДанныеОФизЛице = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, ДокФизЛица, Дата);
			
			// Проверим что вернулось, если там Null значит берем наименование 
			Если ДанныеОФизЛице.Фамилия = Null Тогда 
				ТекстВыдатьФИО = ДокФизЛица.Наименование;
			Иначе 
				ТекстВыдатьФИО = ДанныеОФизЛице.Фамилия + " " + ДанныеОФизЛице.Имя + " " + ДанныеОФизЛице.Отчество;
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЕсли;

	Если ТекстПоДокументу = "" И ЗначениеЗаполнено(Контрагент) И ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда	

		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);

		Если ЗначениеЗаполнено(ДокФизЛица) Тогда

			ТекстПоДокументу = Строка(ДокФизЛица.Вид) + " серия " + ДокФизЛица.Серия + ", номер " + ДокФизЛица.Номер + ", выданый " +
							   Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " + ДокФизЛица.Выдан;

		КонецЕсли;

	КонецЕсли;

	ОбластьМакета.Параметры.Получатель    							  = ТекстВыдать;
	ОбластьМакета.Параметры.ФИОПолучателя 							  = ТекстВыдатьФИО;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РКО"  Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРКО();
	КонецЕсли;  	
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РКО","Расходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета учета БУ и НУ в документе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если Не Касса.Пустая() Тогда
		СчетУчетаКассы = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(Касса, СчетКасса.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассы) Тогда
			СчетКасса = СчетУчетаКассы;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

// Подставляет в реквизиты документа реквизиты указанного физлица
// 
Процедура ПодставитьРеквизитыФизЛица(ФизЛицо) Экспорт

	ДанныеОФизЛице = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, ФизЛицо, Дата);
	СтруктураФИО = Новый Структура;
	СтруктураФИО.Вставить("Фамилия",ДанныеОФизЛице.Фамилия); 
	СтруктураФИО.Вставить("Имя",ДанныеОФизЛице.Имя);
	СтруктураФИО.Вставить("Отчество",ДанныеОФизЛице.Отчество);	
	
	Выдать = ОбщегоНазначения.ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, ДанныеОФизЛице.НеСклонятьФамилию, ФИзЛицо.Пол);
	
	#Если Клиент Тогда
	ПоДокументу = ОбщегоНазначения.ПолучитьПаспортныеДанныеСтрокой(ФизЛицо);
	#КонецЕсли
	
КонецПроцедуры // ПодставитьРеквизитыФизЛица

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура производит заполнение документа по данным платежной ведомости
//
Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание)

	ВидОперации        = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	Организация        = Основание.Организация;

	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;


	// Определим сумму выплаченной заработной платы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
	Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма+ЗарплатаКВыплатеЗарплата.ДепонированнаяСумма) КАК Сумма,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
	|	МАКСИМУМ(ЗарплатаКВыплатеЗарплата.ФизЛицо) КАК ФизЛицо
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка И
	|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = &ВыплаченностьЗарплаты И
	|	ЗарплатаКВыплатеЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = Основание;
			СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.Сумма;

			СуммаДокумента = РезультатЗапроса.Сумма;

			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				ПодставитьРеквизитыФизЛица(РезультатЗапроса.ФизЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	ОтражатьВБухгалтерскомУчете = Истина;		
	ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
КонецПроцедуры // ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл

// Процедура производит заполнение документа по данным документа "ИЛПеречислениеПолучателям"
//
Процедура ЗаполнитьПоИЛПеречислениеПолучателям(Основание)

	ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам;
	СуммаДокумента = 0;
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;
	
	// Определим сумму, выплачиваемую по исполнительным листам
	Запрос=Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсполнительныеЛисты.Ссылка.Организация) КАК Организация,
	|	МАКСИМУМ(ИсполнительныеЛисты.ДокументОснование) КАК ДокументОснование,
	|	МАКСИМУМ(ИсполнительныеЛисты.Получатель) КАК Получатель,
	|	СУММА(ИсполнительныеЛисты.СуммаВзаиморасчетов) КАК Сумма,
	|	КОЛИЧЕСТВО(ИсполнительныеЛисты.НомерСтроки) КАК КоличествоСтрок
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИсполнительныеЛисты
	|ГДЕ
	|	ИсполнительныеЛисты.Ссылка = &Ссылка И
	|	ИсполнительныеЛисты.Ссылка.СпособПеречисления = &ЧерезКассу
	|";

	Запрос.УстановитьПараметр("Ссылка",Основание);
	Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу);

	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
			СтрокаДокумент					= ВыплатаПоИсполнительнымЛистам.Добавить();
			СтрокаДокумент.Документ			= Основание;	
			СтрокаДокумент.СуммаКВыплате 	= РезультатЗапроса.Сумма;
			СуммаДокумента 					= РезультатЗапроса.Сумма;
			Организация					  	= РезультатЗапроса.Организация;
			
			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				Выдать 		= РезультатЗапроса.Получатель.НаименованиеПолное;
				ЭтотОбъект.Основание 	= РезультатЗапроса.ДокументОснование.ВидИсполнительногоДокумента + " " + РезультатЗапроса.ДокументОснование.РеквизитыИсполнительногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
КонецПроцедуры // ЗаполнитьПоИЛПеречислениеПолучателям

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКО()

	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      		= СтруктураКурсаОснования.Курс;
		КратностьОснования 		= СтруктураКурсаОснования.Кратность;

		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;

			Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентомБУ;			

			СтрокаПлатеж.Проект        						= СтрокаОснование.Проект;
			СтрокаПлатеж.Подразделение    					= СтрокаОснование.Подразделение;			
		КонецЦикла;

		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли

		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			    И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
													ДокументОснование.ВалютаДокумента, 
													СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
													КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
													СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													ВалютаДокумента,
													СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
													СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе

		ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКО()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;

	ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		
	ЗаполнитьСчетаУчетаРегл();
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
	 ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
	 ИЛИ ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеИзПереработки"  Тогда
	 
	 	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидДокументаОснования = "ПоступлениеТоваровУслуг" И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
	         ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению;
		Иначе
			 ВидОперации  = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 

		Контрагент   		  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			Если НЕ(ПараметрыДокументаОснования.Сумма = 0 И ПараметрыДокументаОснования.СуммаНДС = 0)  Тогда
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
				Если НЕ ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.СуммаНДС;
				КонецЕсли; 
			КонецЕсли;				
		КонецЕсли;
				
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 

		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;        			
		КонецЕсли;
				
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента 	= РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж 	= РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "РасчетНалоговПриПоступленииАктивовУслуг" Тогда
	
		ВидОперации  			= Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
		Контрагент   			= ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 		= ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		КурсДокумента           = 1;
		КратностьДокумента      = 1;
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		ТаблицаПлатежей.Добавить();
		
		СуммаИПН 	= ?(ДокументОснование.УчитыватьИПН	, ДокументОснование.ИсчисленныйИПН.Итог("Налог"), 0);
		СуммаВОСМС 	= ?(ДокументОснование.УчитыватьВОСМС, ДокументОснование.ИсчисленныеВОСМС.Итог("Взнос"), 0);
	    СуммаОПВ 	= ?(ДокументОснование.УчитыватьОПВ, ДокументОснование.ИсчисленныйОПВ.Итог("Взнос"), 0); 
	
		ТаблицаПлатежей[0].СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента - СуммаИПН - СуммаВОСМС - СуммаОПВ;
		ТаблицаПлатежей[0].СуммаВзаиморасчетов = ТаблицаПлатежей[0].СуммаПлатежа;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(1,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(1,"КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;        			
				
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
		// Переназначение документа основания
		ДокументОснование 		= ПараметрыДокументаОснования.ДокументОснование;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда

		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплате") Тогда

		ЗаполнитьПоЗарплатеКВыплатеУпр(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда

		ЗаполнитьПоИЛПеречислениеПолучателям(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКО();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ден_ЗаявкаНаРасходованиеСредств") Тогда

		Если НЕ Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Сообщить("Заявка оформлена на расходование безналичных денежных средств.");
			Возврат;
		КонецЕсли;

		ден_ПроцедурыКазначейства.РКО_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(ЭтотОбъект,Основание,мВалютаРегламентированногоУчета);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ден_ОбъявлениеНаВзносНаличными") Тогда

		ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		ОбъявлениеНаВзносНаличными 			= Основание.Ссылка;
		СтатьяДвиженияДенежныхСредств 		= Основание.СтатьяДвиженияДенежныхСредствПолучатель;

		Если РасшифровкаПлатежа.Количество()=0 Тогда
			РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств	= Основание.СтатьяДвиженияДенежныхСредствОтправитель;
		РасшифровкаПлатежа[0].Подразделение 				= Основание.ЦФО;
		СчетОрганизации 									= Основание.СчетОрганизации;
		СуммаДокумента										= Основание.СуммаДокумента;
		
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный = глЗначениеПеременной("глТекущийПользователь");

	Если Выдать = "" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);

			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Если ПоДокументу = "" И ЗначениеЗаполнено(Контрагент) 
	   И (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
	   		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами) Тогда
		
	   	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
	   		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент.ФизЛицо, Дата);
	   	Иначе
			ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);
		КонецЕсли;

		Если ЗначениеЗаполнено(ДокФизЛица) Тогда

			ПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
			              ДокФизЛица.Серия       + ", номер " +
			              ДокФизЛица.Номер       + ", выданый " +
			              Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			              ДокФизЛица.Выдан;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументуОснования

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура - формирует движения документа по операциям, связанным с выплатой з/п
//
Процедура ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТекстЗапросаПоВзаиморасчетам = "";
	СтруктураПараметровЗапроса = Новый Структура();
		
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	
	// Проведение по регистру Типовой
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
		|ИТОГИ
		|	МАКСИМУМ(СтатьяДвиженияДенежныхСредств),
		|	СУММА(Сумма),
		|	СУММА(ДепонированнаяСумма)
		|ПО
		|	Ведомость";
		
		ТекстЗапросаПоВзаиморасчетам = "
		|ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,		
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате, 
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
		|
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
		|	КОНЕЦ ,
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате
		|";
		
		СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
		
	Иначе // ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		
		Запрос.УстановитьПараметр("парамСтатьяДДС", СтатьяДвиженияДенежныхСредств);
		
	
	    Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
		
			Запрос.УстановитьПараметр("парамФизЛицо", Контрагент);
			Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);
		
			Запрос.Текст =" 
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		    |	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		    |	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
			|	&парамСтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
		    |ИЗ
		    |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		    |		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		    |			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		    |			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		    |ГДЕ
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = &парамФизЛицо
		    |	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &парамПлатВедомость
		    |	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		    |	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
		    |	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
		    |ИТОГИ
			|	МАКСИМУМ(СтатьяДвиженияДенежныхСредств),
		    |	СУММА(Сумма),
		    |	СУММА(ДепонированнаяСумма)
		    |ПО
		    |	Ведомость";
		
			ТекстЗапросаПоВзаиморасчетам = "
			|ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
			|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
			|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,		
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате, 
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
			|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
			|
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
			|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
			|
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = &парамФизЛицо
			|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = &парамПлатВедомость
			|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
			|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
			|	КОНЕЦ ,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате
			|";
			
			СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
			СтруктураПараметровЗапроса.Вставить("парамФизЛицо", Контрагент);
			СтруктураПараметровЗапроса.Вставить("парамПлатВедомость", ПлатежнаяВедомость);
			
		Иначе
		
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходныйКассовыйОрдер.Контрагент КАК ФизЛицо,
		    |	NULL КАК Ведомость,
		    |	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		    |	0 КАК ДепонированнаяСумма,
		    |	РасходныйКассовыйОрдер.Организация КАК Организация,
		    |	ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) КАК ВыплаченностьЗарплаты,
		    |	NULL КАК Номер,
			|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		    |	NULL КАК Дата
		    |ИЗ
		    |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		    |ГДЕ
		    |	РасходныйКассовыйОрдер.Ссылка = &Ссылка
		    |ИТОГИ
			|	МАКСИМУМ(СтатьяДвиженияДенежныхСредств),
		    |	СУММА(Сумма),
		    |	СУММА(ДепонированнаяСумма)
		    |ПО
		    |	Организация";
		
			ТекстЗапросаПоВзаиморасчетам = "
			|ВЫБРАТЬ
			|	РасходныйКассовыйОрдер.Контрагент КАК ФизЛицо,
			|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
			|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, МЕСЯЦ) КАК ПериодНачисленияДепонированнойЗарплаты,
			|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца) КАК СпособРасчетаСуммКВыплате,
			|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
			|	0 КАК ДепонированнаяСумма
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|ГДЕ
			|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
			|";
			
			СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
			
		КонецЕсли;			
	КонецЕсли;

	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока Результат.Следующий() Цикл
        		
		Если НЕ ВедетсяУчетПоСотрудникам Тогда
			// отображаем в БУ и НУ сгруппированные данные по ведомостям
			// Формируем проводки по выплате зарплаты
			Если Результат.Сумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Сумма       = Результат.Сумма;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;				
				
				Проводка.Содержание  = "Выплата з/п" + ?(Результат.Ведомость <> NULL, " по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'"), "");
				Проводка.СчетКт      = СчетКасса;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Касса);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= Результат.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
			// Формируем проводки по выплате депонированной зарплаты
			Если Результат.ДепонированнаяСумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Сумма       = Результат.ДепонированнаяСумма;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;				
				
				Проводка.Содержание  = "Выплата деп.з/п" + ?(Результат.Ведомость <> NULL, " по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'"), "");
				Проводка.СчетКт      = СчетКасса;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Касса);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= Результат.ДепонированнаяСумма;
				КонецЕсли;
				
			КонецЕсли; 
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				СуммаКПроводке = Результат.ДепонированнаяСумма + Результат.Сумма;
				Если СуммаКПроводке <> 0 Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить(); 					
					// Свойства
					ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;					
					// Измерения
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
					
					// Корреспондеция счетов и аналитика
					ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетКассаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.Касса);								
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);

					// Ресурсы
					ПроводкаНУ.Сумма			= СуммаКПроводке; 					
					// Реквизиты
					ПроводкаНУ.Содержание		= "Выплата з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");  
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
			КонецЕсли; 		
		КонецЕсли;
		
		РезультатПоФизЛицам = Результат.Выбрать();
		
		Пока РезультатПоФизЛицам.Следующий() Цикл
			
			Если РезультатПоФизЛицам.Сумма <> 0 ИЛИ РезультатПоФизЛицам.ДепонированнаяСумма <> 0 Тогда
			
				// Отмечаем факт выплаты по ведомости
				Если РезультатПоФизЛицам.Ведомость <> NULL Тогда
					Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
					// Измерения
					Движение.Ведомость 	= РезультатПоФизЛицам.Ведомость;
					Движение.Физлицо 	= РезультатПоФизЛицам.ФизЛицо;
				КонецЕсли;
			
			КонецЕсли;
		
		    Если ВедетсяУчетПоСотрудникам Тогда
		
				// Формируем проводки по выплате зарплаты
				Если РезультатПоФизЛицам.Сумма <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Сумма       = РезультатПоФизЛицам.Сумма;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);
					
					Проводка.Содержание  = "Выплата з/п" + ?(РезультатПоФизЛицам.Ведомость <> NULL, " по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'"), "");
					Проводка.СчетКт      = СчетКасса;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Касса);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РезультатПоФизЛицам.СтатьяДвиженияДенежныхСредств);
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт 			= ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт 	= РезультатПоФизЛицам.Сумма;
					КонецЕсли;
					
				КонецЕсли;
			
				// Формируем проводки по выплате депонированной зарплаты
				Если РезультатПоФизЛицам.ДепонированнаяСумма <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = Организация;
					Проводка.Сумма       = РезультатПоФизЛицам.ДепонированнаяСумма;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);
					
					Проводка.Содержание  = "Выплата деп.з/п" + ?(РезультатПоФизЛицам.Ведомость <> NULL, " по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'"), "");
					Проводка.СчетКт      = СчетКасса;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", Касса);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РезультатПоФизЛицам.СтатьяДвиженияДенежныхСредств);

					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт 			= ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт 	= РезультатПоФизЛицам.ДепонированнаяСумма;
					КонецЕсли; 					
				КонецЕсли;
				
				//Отражение в налоговом учете
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					СуммаКПроводке = РезультатПоФизЛицам.ДепонированнаяСумма + РезультатПоФизЛицам.Сумма;
					Если СуммаКПроводке <> 0 Тогда
						
						ПроводкаНУ = Движения.Налоговый.Добавить(); 					
						
						ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;					
						
						ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
						
						//заполнения счет Дт(НУ)
						ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);					
						
						ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетКассаНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.Касса);								
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", РезультатПоФизЛицам.СтатьяДвиженияДенежныхСредств);
						
						ПроводкаНУ.Сумма			= СуммаКПроводке; 					
						
						ПроводкаНУ.Содержание		= "Выплата з/п по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'"); 
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);						
						
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);						
					КонецЕсли;
				КонецЕсли;  		
				
			КонецЕсли;		
			
		КонецЦикла;
	КонецЦикла;

	// движения по выплате заработной платы по регистрам накопления
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ЭтотОбъект, 
													ТекстЗапросаПоВзаиморасчетам, 
													СтруктураПараметровЗапроса, 
													Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	
КонецПроцедуры // ДвиженияПоЗарплатеРегл

// Процедура - формирует движения документа по операциям, связанным с выплатой по исполнительным листам
//
Процедура ДвиженияПоВыплатеПоИЛ(СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",СтруктураШапкиДокумента.Дата);
	
	// Проведение по регистру Типовой
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ КАК ФИОРаботника,
	|	ИЛПеречислениеПолучателям.Получатель КАК Получатель,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК Сумма,
	|	ИЛПеречислениеполучателям.ДокументОснование.Номер КАК НомерИЛ,
	|	ИЛПеречислениеполучателям.ДокументОснование.Дата КАК ДатаИЛ,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаПоИсполнительнымЛистам КАК РКО
	|		ПО ИЛПеречислениеПолучателям.Ссылка = РКО.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
	|		ПО ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	РКО.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеполучателям.ДокументОснование.Номер,
	|	ИЛПеречислениеполучателям.ДокументОснование.Дата,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации
	|";

	Результат = Запрос.Выполнить().Выбрать();

	Пока Результат.Следующий() Цикл

		Если Результат.Сумма <> 0 Тогда
			
			// Формируем проводки по выплате сумм по ИЛ
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = Результат.Сумма;
				
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Результат.Получатель);
				
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетКасса;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.Касса);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Результат.Сумма;
			КонецЕсли;
			
			Проводка.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				// Формируем проводки по НУ перечислению по ИЛ
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = Результат.Сумма;
				
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам, Дата, ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Результат.Получатель);
				
				ПроводкаНУ.СчетКт      = СтруктураШапкиДокумента.СчетКассаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.Касса);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
								
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				
				ПроводкаНУ.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);
				
			КонецЕсли;

		КонецЕсли;		
		
	КонецЦикла;

	ТекстЗапросаПоВзаиморасчетам = 
	"ВЫБРАТЬ
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаСборов
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаПоИсполнительнымЛистам КАК РКО
	|		ПО ИЛПеречислениеПолучателям.Ссылка = РКО.Документ
	|
	|ГДЕ
	|	РКО.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации
	|";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
	
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));

КонецПроцедуры // ДвиженияПоВыплатеПоИЛ

// Процедура - формирует движения документа по операциям, связанным с расчетами по разовым выплатам 
//
Процедура ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами(Отказ, Заголовок, СтруктураШапкиДокумента)
	МестоРаботыТекст="";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка", 		Ссылка);
	Запрос.УстановитьПараметр("парамДата", 			СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамОрганизация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("парамКонтрагент", 	СтруктураШапкиДокумента.Контрагент);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		// вдруг закупают что-то у собственных сотрудников и хотят отражать через взаиморасчеты
		// получим подразделение на начало месяца
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ
		|	Контрагент.ФизЛицо КАК ФизЛицо,
		|	Дата КАК Период
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер
		|ГДЕ
		|	Ссылка = &парамСсылка
		|";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Организация КАК Организация,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Контрагент.ФизЛицо КАК ФизЛицо,
	|	РасходныйКассовыйОрдер.Контрагент.РНН КАК РННКонтрагента,
	|	РасходныйКассовыйОрдер.Контрагент.ФизЛицо.РНН КАК РННФизЛица,
	|	РасходныйКассовыйОрдер.Контрагент.ИдентификационныйКодЛичности КАК БИНКонтрагента,
	|	РасходныйКассовыйОрдер.Контрагент.ФизЛицо.ИдентификационныйКодЛичности КАК ИИНФизЛица,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовОстаток,0) КАК СуммаВзаиморасчетовОстаток,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(Взаиморасчеты.ПериодВзаиморасчетов, &парамДата), МЕСЯЦ) КАК ПериодВзаиморасчетов";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (Взаиморасчеты.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА Взаиморасчеты.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	Взаиморасчеты.Налогоплательщик
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|									&парамДата,
	|									Организация = &парамОрганизация
	|									И Контрагент = &парамКонтрагент) КАК Взаиморасчеты
	|		ПО ИСТИНА";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ИСТИНА" ;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаиморасчеты.ПериодВзаиморасчетов
	|ИТОГИ 
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ФизЛицо),
	|	МАКСИМУМ(РННКонтрагента),
	|	МАКСИМУМ(РННФизЛица),
	|	МАКСИМУМ(БИНКонтрагента),
	|	МАКСИМУМ(ИИНФизЛица),
	|	МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы)
	|ПО ОБЩИЕ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ФизЛицо							= Неопределено;
	СтруктурнаяЕдиницаПоМестуРаботы = Неопределено;
	ВалютаРег       				= мВалютаРегламентированногоУчета;
	ДанныеОВалюте  					= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	
	СуммаКРаспределению = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);	
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
													
	Пока Выборка.Следующий() И СуммаКРаспределению <> 0 Цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			// проверим заполнение
			
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата < ДатаПрекращенияВыводаРНН;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ФизЛицо) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для контрагента не указано соответствующее ему физлицо.",Отказ,Заголовок);
			ИначеЕсли ВыводитьРНН И Выборка.РННКонтрагента <> Выборка.РННФизлица Тогда
				ОбщегоНазначения.СообщитьОбОшибке("РНН контрагента и физлица, связанного с контрагентом, не совпадают.", Отказ, Заголовок, СтатусСообщения.Важное);
			ИначеЕсли НЕ ВыводитьРНН И Выборка.БИНКонтрагента <> Выборка.ИИНФизЛица Тогда
				ОбщегоНазначения.СообщитьОбОшибке("ИИН/БИН контрагента и физлица, связанного с контрагентом, не совпадают.", Отказ, Заголовок, СтатусСообщения.Важное);
			КонецЕсли;
			
			ФизЛицо = Выборка.ФизЛицо;
			СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
			
		ИначеЕсли НЕ Отказ Тогда
		
			СуммаКВыплате = Мин(Выборка.СуммаВзаиморасчетовОстаток, СуммаКРаспределению);
			СуммаКРаспределению = СуммаКРаспределению - СуммаКВыплате;
			Если СуммаКВыплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////
			// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
			//
			
			Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
			// Свойства
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Движение.Контрагент 	= СтруктураШапкиДокумента.Контрагент;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Если Выборка.Налогоплательщик = NULL Тогда
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
					Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																						СтруктураШапкиДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				Иначе
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
					Налогоплательщик 	= Выборка.Налогоплательщик;
				КонецЕсли;
				Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов 	= Выборка.ПериодВзаиморасчетов;
			Движение.Организация 			= СтруктураШапкиДокумента.Организация;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
			//////////////////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Движение.ФизЛицо		= СтруктураШапкиДокумента.Контрагент;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.Организация			= СтруктураШапкиДокумента.Организация;
			Движение.МесяцНалоговогоПериода = Выборка.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаДохода	= СуммаКВыплате;
			
		КонецЕсли;
	КонецЦикла;
	
	// если что-то осталось, то создаем запись на сумму остатка
	Если СуммаКРаспределению <> 0 Тогда

		СуммаКВыплате = СуммаКРаспределению;
		
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																				СтруктураШапкиДокумента.Организация,
																				ИсчислениеНалоговСтруктурныхЕдиниц,
																				Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////
		// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
		//
			
		Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
		// Свойства
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период			= СтруктураШапкиДокумента.Дата;
			
		// Измерения
		Движение.Контрагент 	= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодВзаиморасчетов 	= НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Организация 			= СтруктураШапкиДокумента.Организация;		
			
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
		//////////////////////////////////////////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
		Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
		// Свойства
		Движение.Период			= СтруктураШапкиДокумента.Дата;
			
		// Измерения
		Движение.ФизЛицо		= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
			
		// Ресурсы
		Движение.СуммаДохода	= СуммаКВыплате;
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами

// Процедура - формирования движений по регистрам документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
 	ДвиженияПоРегистрамУпр(Отказ,Заголовок,СтруктураШапкиДокумента);
	
	Если Оплачено И ОтражатьВУправленческомУчете Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ
			 ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			ДвиженияПоЗарплатеУпр();
		КонецЕсли;		
	КонецЕсли;
	
	Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтраженоВОперУчете)) Тогда
		Возврат;
	КонецЕсли;
	

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;

	КассаВВалюте = Ложь;
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте 	= Истина;
		РасчетыВВалюте 	= Истина;
	КонецЕсли;

	СчетКт = СтруктураШапкиДокумента.СчетКасса;

	СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.Касса, Истина).СчетУчетаНУ;	
	
	СтруктураШапкиДокумента.Вставить("СчетКассаНУ",СчетКтНУ );

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
			ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами(Отказ, Заголовок, СтруктураШапкиДокумента);
		КонецЕсли;
	
		СтруктураШапкиДокумента.Вставить("КоррСчет", 					СчетКт);
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ", 					СчетКтНУ);
		СтруктураШапкиДокумента.Вставить("ОбъектУчетаДенежныхСредств", 	СтруктураШапкиДокумента.Касса);
		СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", ?(ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению, Истина, Ложь));
		
		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,"Расчеты по кредитам и займам",""))=Ложь тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда
		
		ДвиженияПоВыплатеПоИЛ(СтруктураШапкиДокумента);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		// формируем корреспонденции по табличной части Выдача в подотчет
		Для Каждого Строка Из ВыдачаВПодотчет Цикл
			Если  Строка.СуммаПлатежа = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Проводка = ПроводкиБУ.Добавить();		
			Проводка.Период      	= Дата;
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 	= "Выдача средств подотчетнику";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыЗадолженностиПодотчетныхЛиц", Строка.ВидЗадолженностиПодотчетногоЛица);					
			
			Проводка.СчетКт = СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДенежныеСредства",СтруктураШапкиДокумента.Касса);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",Строка.СтатьяДвиженияДенежныхСредств);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;					
			КонецЕсли;         				
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = Строка.СуммаПлатежа;					
			КонецЕсли;         				
			
			ВалютаРег       = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
															КурсДокумента, ДанныеОВалюте.Курс, 
															КратностьДокумента, ДанныеОВалюте.Кратность);			
															
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();		
				ПроводкаНУ.Период      	= Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание 	= "Выдача средств подотчетнику";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаРасчетовСКонтрагентомБУ, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыЗадолженностиПодотчетныхЛиц", Строка.ВидЗадолженностиПодотчетногоЛица);					
				
				ПроводкаНУ.СчетКт = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ДенежныеСредства",СтруктураШапкиДокумента.Касса);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"СтатьиДвиженияДенежныхСредств",Строка.СтатьяДвиженияДенежныхСредств);
				
				ВалютаРег       = мВалютаРегламентированногоУчета;
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				ПроводкаНУ.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
									КурсДокумента, ДанныеОВалюте.Курс, 
									КратностьДокумента, ДанныеОВалюте.Кратность);		
			КонецЕсли;
			
		КонецЦикла; 		
		
	Иначе
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
	
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			Проводка.Содержание = ?(ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств,"Инкассация денежных средств","Прочие расходы");
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДтБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДтБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДтБУ3);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомБУ;
			Проводка.СубконтоДт.ДенежныеСредства              = СтруктураШапкиДокумента.СчетОрганизации;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДенежныеСредства",СтруктураШапкиДокумента.Касса);
		
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда 
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);										
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);										
			КонецЕсли;
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);

		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);									
		КонецЕсли;                                                                                                                                				
		
		// установка валюты для валютных корреспонденций
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
				
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
				
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
				
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);

														
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = Дата;
			ПроводкаНУ.Организация = Организация;				
									
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				ПроводкаНУ.СчетДт     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
				ПроводкаНУ.Содержание = "Взнос наличными в банк";
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ДенежныеСредства",СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"СтатьиДвиженияДенежныхСредств",СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				
			Иначе
				ПроводкаНУ.СчетДт     = СчетУчетаРасчетовСКонтрагентомНУ;
				ПроводкаНУ.Содержание = ?(ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств,"Инкассация денежных средств","Прочие расходы");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,СубконтоДтНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СубконтоДтНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
			КонецЕсли;
			            			
			Если  Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 				
				И ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда				
				ПроводкаНУ.СчетКт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();						
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				
				Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
					
				Иначе
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				КонецЕсли;
				
			Иначе
				ПроводкаНУ.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.Касса);	
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда   
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				КонецЕсли;  				
				
					
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);

			КонецЕсли;  
			
			Если КассаВВалюте Тогда
				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
									СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
									КурсДокумента, ДанныеОВалюте.Курс, 
									КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли; // Если КассаВВалюте Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			
			
			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ)
				И Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк  Тогда
				 
				 //если выбран счет затрат или доходов, то сделаем еще одну проводку
				 //погашение начисленной выше задолженности
				 ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				 
				 ПроводкаНУ_Погашение.СчетКт     = СчетКтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 1, СтруктураШапкиДокумента.Касса);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				 
				 ПроводкаНУ_Погашение.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 				 
				 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
				 
				 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);
              КонецЕсли;  

		КонецЕсли;
														
	КонецЕсли;
	// проводки по НУ для вида операции "Прочее"
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрам

// Процедура - проверка заполненности реквизитов, обязательных для заполнения
//
Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 	

	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Касса",			"Не указана касса.");	
	СтруктураОбязательныхПолей.Вставить("СчетКасса",		"Не указан счет кассы.");
	СтруктураОбязательныхПолей.Вставить("СуммаДокумента",	"Не указана сумма документа.");	
	
	Если СчетКасса.Валютный Тогда
		СтруктураОбязательныхПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	 
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет расчетов.");
		// проводки по НУ для вида операции "Прочее"
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет налогового учета.");			
		КонецЕсли;    

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ",	"Не указан счет учета.");
		СтруктураОбязательныхПолей.Вставить("СчетОрганизации",					"Не указан банковский счет организации");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет.");
			
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет налогового учета.");			
		КонецЕсли;    
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент",						"Не указан подотчетник.");		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ",	"Не указан счет расчетов с подотчетным лицом.");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
			И НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
		СтруктураОбязательныхПолей.Вставить("Контрагент","Не указан сотрудник.");
	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураПолей = Новый Структура("ВидЗадолженностиПодотчетногоЛица");
		СтруктураПолей.Вставить("СтатьяДвиженияДенежныхСредств");
		СтруктураПолей.Вставить("СуммаПлатежа");

		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыдачаВПодотчет", СтруктураПолей, Отказ, Заголовок);
		
		// Проверка соответствия итога по табличной части сумме документа
		Если НЕ ВыдачаВПодотчет.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			Сообщить("Не совпадает сумма документа и суммы по видам задолженности подотчетного лица");
			Отказ = Истина;			
		КонецЕсли;				
	КонецЕсли;
	

	//Проверяем заполнение табличной части 
	Если (ЕстьРасчетыСКонтрагентами) ИЛИ (ЕстьРасчетыПоКредитам) Тогда

		СтруктураПолей = Новый Структура();

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ");
		СтруктураПолей.Вставить("ДоговорКонтрагента");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЕстьрасчетыПоКредитам Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;		
                	
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
		                                                           Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);

		КонецЦикла;

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		Если ОтражатьВБухгалтерскомУчете Тогда

			Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выплата заработной платы может осуществляться только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок)
			КонецЕсли;

			// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
			Запрос.УстановитьПараметр("Выплачено", Перечисления.ВыплаченностьЗарплаты.Выплачено);		
			Запрос.УстановитьПараметр("Ссылка",      Ссылка);
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
			|	ВЫБОР 
			|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
			|			ТОГДА ""есть строки с невыплаченной зарплатой""
			|		ИНАЧЕ
			|			""""
			|	КОНЕЦ КАК ОписаниеКонфликта,
			|	ВЫБОР  
			|		КОГДА НЕ(РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL)
			|				И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &Выплачено
			|			ТОГДА РанееВыплаченныеСуммы.Регистратор
			|		ИНАЧЕ
			|			NULL
			|	КОНЕЦ КАК КонфликтныйДокумент
			|			
			|	
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
			|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка       = &Ссылка";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				Если ЗначениеЗаполнено(РезультатЗапроса.ОписаниеКонфликта) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": " + РезультатЗапроса.ОписаниеКонфликта,Отказ,Заголовок);
				КонецЕсли;
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": ведомость уже включена в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			//Проверка на соответствие суммы по ведомостям сумме документа
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ВЫБОР КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = &Выплачено ТОГДА ЗарплатаКВыплате.Сумма+ЗарплатаКВыплате.ДепонированнаяСумма ИНАЧЕ 0 КОНЕЦ) КАК СуммаВыплачено,
			|	СУММА(ВЫБОР КОГДА ЗарплатаКВыплате.ВыплаченностьЗарплаты = &НеВыплачено ТОГДА ЗарплатаКВыплате.Сумма+ЗарплатаКВыплате.ДепонированнаяСумма ИНАЧЕ 0 КОНЕЦ) КАК СуммаНеВыплачено
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Выплачено",	Перечисления.ВыплаченностьЗарплаты.Выплачено);
			Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено = СуммаДокумента) Тогда
				Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
				Отказ = Истина;			
			КонецЕсли;         
			
		Иначе
		
			//Проверка на соответствие суммы по ведомостям сумме документа
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ЗарплатаКВыплате.Сумма) КАК СуммаВыплачено
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплате
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Результат = Запрос.Выполнить().Выбрать();
			
			Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено = СуммаДокумента) Тогда
				Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выплата заработной платы может осуществляться только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок)
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
	
			// Проверка на то, чтобы сведения в РКО соответствовали сведениям в указанной ПлатежнойВедомости.
			ТекстЗапрос = 	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма) КАК Сумма,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.СпособВыплаты,
			|	РанееВыплаченныеСуммы.Регистратор
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамФизлицо
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &парамВыплачено
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
			|	РанееВыплаченныеСуммы.Регистратор";
			
			Запрос = Новый Запрос(ТекстЗапрос);
			Запрос.УстановитьПараметр("парамФизлицо",		Контрагент); 
			Запрос.УстановитьПараметр("парамПлатВедомость", ПлатежнаяВедомость);	
			Запрос.УстановитьПараметр("парамПустойРКО", 	Документы.РасходныйКассовыйОрдер.ПустаяСсылка());	
			Запрос.УстановитьПараметр("парамВыплачено", 	Перечисления.ВыплаченностьЗарплаты.Выплачено);	
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В указанной платежной ведомости нет указанного сотрудника.",Отказ,Заголовок);
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Если Выборка.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость оформлена на ""Перечисление в банк"".",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Организация <> Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному сотруднику оформлена на другую организацию.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Регистратор <> Null Тогда
					ОбщегоНазначения.СообщитьОбОшибке("По этому сотруднику указанной платежной ведомости уже есть расходный кассовый ордер или сумма задепонирована.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Организация <> Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному сотруднику оформлена на другую организацию.",Отказ,Заголовок);
				КонецЕсли;
				Если Выборка.Сумма <> СуммаДокумента Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость по указанному сотруднику содержит другой размер выплаты.",Отказ,Заголовок);
				КонецЕсли;					
			КонецЕсли;
		КонецЕсли;    			
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам Тогда

		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выплата по исполнительным листам может осуществляться только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок)
		КонецЕсли;
	
		// проверим сумму по ведомостям
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ИЛПеречисление.СуммаПлатежа) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречисление
		|
		|ГДЕ
		|	ИЛПеречисление.Ссылка В (ВЫБРАТЬ 
		|									РКО.Документ
		|								ИЗ
		|									Документ.РасходныйКассовыйОрдер.ВыплатаПоИсполнительнымЛистам КАК РКО
		|								ГДЕ
		|									РКО.Ссылка = &ДокументСсылка) 
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаПоВедомостям = Выборка.СуммаПлатежа;
		Иначе
			СуммаПоВедомостям = 0;
		КонецЕсли;
		
		Если СуммаПоВедомостям <> СтруктураШапкиДокумента.СуммаДокумента Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма по спискам на выплату по исполнительным листам с суммой расходного кассового ордера!", Отказ, Заголовок)
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеДокумента

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
		// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
		ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
		ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
		СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль  ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	КонецЕсли;
	
	 //так как для всех операций, кроме одной используется только одно поле дя выбора структурного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеОтправитель);

	КурсДокумента        = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента   = СтруктураШапкиДокумента.КратностьДокумента;

	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПолучитьТаблицуПлатежейРКОУпр();
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям И РасшифровкаПлатежа.Количество()>0 И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДокументПланированияПлатежа) Тогда
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].ДокументПланированияПлатежа,"ДокументПланированияПлатежа");
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].Проект,"Проект");
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].Подразделение,"Подразделение");
	КонецЕсли;
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;

	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		Для Каждого СтрокаОплаты Из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если НЕ Отказ И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры // ОбработкаУдаленияПроведения


//Процедура-обработчик события "ПередЗаписью" документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И Не ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение документа по данным платежной ведомости упр. учета
//
Процедура ЗаполнитьПоЗарплатеКВыплатеУпр(Основание)

	ВидОперации        = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	ВалютаДокумента    = Константы.ВалютаУправленческогоУчета.Получить();
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если Касса.ВалютаДенежныхСредств <> ВалютаДокумента Тогда
		Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	// Определим сумму выплаченной заработной платы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
	|	МАКСИМУМ(ЗарплатаКВыплатеЗарплата.ФизЛицо) КАК ФизЛицо
	|ИЗ
	|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
			СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = Основание;
			СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.Сумма;

			СуммаДокумента = РезультатЗапроса.Сумма;

			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				ПодставитьРеквизитыФизЛица(РезультатЗапроса.ФизЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	ОтражатьВУправленческомУчете = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет");
	ОтражатьВБухгалтерскомУчете = Ложь;	
	ОтражатьВНалоговомУчете = Ложь;
	
КонецПроцедуры // ЗаполнитьПоЗарплатеКВыплатеУпр()

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейРКОУпр() Экспорт
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Запрос=Новый Запрос;
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	&ПустойДоговор КАК ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО КАК Сделка,
		|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
		|	ВыплатаЗаработнойПлатыДок.Подразделение КАК Подразделение,
		|	ВыплатаЗаработнойПлатыДок.СуммаКВыплате КАК СуммаПлатежа,
		|	ВыплатаЗаработнойПлатыДок.СуммаКВыплате КАК СуммаВзаиморасчетов,
		|	ВыплатаЗаработнойПлатыДок.СуммаКВыплате КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВыплатаЗаработнойПлатыДок.Ссылка.ВалютаДокумента = &ВалютаУпрУчета
		|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаКВыплате
		|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыУпрУчета.Курс = 0
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВыплатаЗаработнойПлатыДок.СуммаКВыплате * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВыплатаЗаработнойПлатыДок.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаКВыплате
		|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыУпрУчета.Курс = 0
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВыплатаЗаработнойПлатыДок.СуммаКВыплате * КурсыДокумента.Курс / КурсыДокумента.Кратность
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВыплатаЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
		|	ЕСТЬNULL(ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь, ЛОЖЬ) КАК ВключатьВПлатежныйКалендарь,
		|	ВыплатаЗаработнойПлатыДок.Проект КАК Проект,
		|	ЕСТЬNULL(КурсыДокумента.Курс, 0) КАК КурсДокумента,
		|	ЕСТЬNULL(КурсыДокумента.Кратность, 0) КАК КратностьДокумента,
		|	ЕСТЬNULL(КурсыУпрУчета.Курс, 0) КАК КурсУпрУчета,
		|	ЕСТЬNULL(КурсыУпрУчета.Кратность, 0) КАК КратностьУпрУчета
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлатыДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаДокумента",Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета",мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Запрос=Новый Запрос;
		
		Запрос.Текст="ВЫБРАТЬ
		             |	&ПустойДоговор КАК ДоговорКонтрагента,
		             |	НЕОПРЕДЕЛЕНО КАК Сделка,
		             |	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
		             |	ВыдачаВПодотчет.Подразделение КАК Подразделение,
		             |	ВыдачаВПодотчет.СуммаПлатежа КАК СуммаПлатежа,
		             |	ВыдачаВПодотчет.СуммаПлатежа КАК СуммаВзаиморасчетов,
		             |	ВыдачаВПодотчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		             |	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
		             |	РасшифровкаПлатежаДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
		             |	ВыдачаВПодотчет.Проект КАК Проект,
		             |	ВЫБОР КОГДА РасшифровкаПлатежаДок.СуммаПлатежаПлан>ВыдачаВПодотчет.СуммаПлатежа ТОГДА ВыдачаВПодотчет.СуммаПлатежа ИНАЧЕ РасшифровкаПлатежаДок.СуммаПлатежаПлан КОНЕЦ  КАК СуммаПлатежаПлан,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
		             |				ТОГДА ВыдачаВПодотчет.СуммаПлатежа
		             |			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		             |					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
		             |				ТОГДА 0
		             |			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
		             |					И КурсыДокумента.Курс <> 0
		             |					И КурсыУпрУчета.Курс <> 0
		             |				ТОГДА ВыдачаВПодотчет.СуммаПлатежа * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		             |			ИНАЧЕ 0
		             |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
		             |	ВЫРАЗИТЬ(ВЫБОР
		             |			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
		             |				ТОГДА ВыдачаВПодотчет.СуммаПлатежа
		             |			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		             |					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
		             |				ТОГДА 0
		             |			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
		             |					И КурсыДокумента.Курс <> 0
		             |				ТОГДА ВыдачаВПодотчет.СуммаПлатежа * КурсыДокумента.Курс / КурсыДокумента.Кратность
		             |			ИНАЧЕ 0
		             |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		             |	ВЫБОР
		             |		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
		             |			ТОГДА 0
		             |		ИНАЧЕ КурсыДокумента.Курс
		             |	КОНЕЦ КАК КурсДокумента,
		             |	ВЫБОР
		             |		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
		             |			ТОГДА 0
		             |		ИНАЧЕ КурсыДокумента.Кратность
		             |	КОНЕЦ КАК КратностьДокумента,
		             |	ВЫБОР
		             |		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		             |			ТОГДА 0
		             |		ИНАЧЕ КурсыУпрУчета.Курс
		             |	КОНЕЦ КАК КурсУпрУчета,
		             |	ВЫБОР
		             |		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
		             |			ТОГДА 0
		             |		ИНАЧЕ КурсыУпрУчета.Кратность
		             |	КОНЕЦ КАК КратностьУпрУчета
		             |ИЗ
		             |	Документ.РасходныйКассовыйОрдер.ВыдачаВПодотчет КАК ВыдачаВПодотчет
		             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |			РасшифровкаПлатежаВложенная.Ссылка КАК Ссылка,
		             |			РасшифровкаПлатежаВложенная.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
		             |			СУММА(РасшифровкаПлатежаВложенная.СуммаПлатежаПлан) КАК СуммаПлатежаПлан
		             |		ИЗ
		             |			Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаВложенная
		             |		ГДЕ
		             |			РасшифровкаПлатежаВложенная.Ссылка = &Ссылка
		             |		
		             |		СГРУППИРОВАТЬ ПО
		             |			РасшифровкаПлатежаВложенная.Ссылка,
		             |			РасшифровкаПлатежаВложенная.ДокументПланированияПлатежа) КАК РасшифровкаПлатежаДок
		             |		ПО ВыдачаВПодотчет.Ссылка = РасшифровкаПлатежаДок.Ссылка
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		             |		ПО (ИСТИНА)
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
		             |		ПО (ИСТИНА)
		             |ГДЕ
		             |	ВыдачаВПодотчет.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());		
		Запрос.УстановитьПараметр("ДатаДокумента",Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("Ссылка",Ссылка);

			
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
	
	Иначе
	
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "РасходныйКассовыйОрдер");
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику ИЛИ
				ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств ИЛИ
				ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам ИЛИ
				ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
			ТаблицаПлатежейУпр.ЗаполнитьЗначения(СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуПлатежей()


////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура - формирует движения документа по операциям, связанным с выплатой з/п
//
Процедура ДвиженияПоЗарплатеУпр()

	// По регистру управленческих расчетов с работниками
	Если ОтражатьВУправленческомУчете И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет") Тогда

		// По регистру ВзаиморасчетыСРаботниками
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст="ВЫБРАТЬ
		|	ЗарплатаКВыплатеЗарплата.Физлицо КАК ФизЛицо,
		|	ЗарплатаКВыплатеЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();

			Строка.Период      = Дата;
			Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
			Строка.Физлицо     = Результат.ФизЛицо;
			Строка.СуммаУпр    = Результат.Сумма;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоЗарплатеУпр()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ ОбъявлениеНаВзносНаличными.Пустая()) И ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ПоОбъявлениюНаВзнос = Истина;
	Иначе
		ПоОбъявлениюНаВзнос = Ложь;
	КонецЕсли;

	ДвиженияПоСтатьям = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,ВестиПоДокументамРасчетовСКонтрагентом,Сделка, СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	

	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
		
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийСписание   = Движения.ден_ДенежныеСредстваКСписанию;
		ТаблицаДвиженийСписание = НаборДвиженийСписание.Выгрузить();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				глЗначениеПеременной("ВалютаУправленческогоУчета"), 
				СтрокаКурсыВалют.КурсДокумента,
				СтрокаКурсыВалют.КурсУпрУчета, 
				СтрокаКурсыВалют.КратностьДокумента,
				СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = Касса;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		СтрокаДвиженийОстатки.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
		
		НаборДвиженийОстатки.мПериод              = Дата;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ден_ДенежныеСредства.ВыполнитьРасход();
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзнос Тогда
			
			ТаблицаДвиженийОстатки.Очистить();
			
			СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
			СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийОстатки.Организация 		  = Организация;
			СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
			СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
			СтрокаДвиженийОстатки.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
			
			НаборДвиженийОстатки.мПериод              = Дата;
			НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
			Движения.ден_ДенежныеСредства.ВыполнитьПриход();
			
			Если ОтраженоВОперУчете Тогда
				//По регистру "Денежные средства к получению"
				НаборДвижений   = Движения.ден_ДенежныеСредстваКПолучению;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвижений.Организация 		   = Организация;
				СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвижений.ДокументПолучения    = Ссылка;
				СтрокаДвижений.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
				СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;

				СтрокаДвижений.Сумма               = СуммаДокумента;
				СтрокаДвижений.СуммаУпр            = СуммаУпр;
				
				НаборДвижений.мПериод              = Дата;
				НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
				
				Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
			КонецЕсли;
		КонецЕсли;
		
		Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
			Если НЕ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				
				// По регистру "Денежные средства к списанию"
				Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
					
					СтрокаДвиженийСписание = ТаблицаДвиженийСписание.Добавить();
					СтрокаДвиженийСписание.БанковскийСчетКасса = Касса;
					СтрокаДвиженийСписание.Организация 		   = Организация;
					СтрокаДвиженийСписание.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
					СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
					СтрокаДвиженийСписание.СуммаУпр            = СтрокаДвижение.СуммаУпр;
					СтрокаДвиженийСписание.ДокументСписания    = ?(ПоОбъявлениюНаВзнос,ОбъявлениеНаВзносНаличными,Ссылка);
					СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
					СтрокаДвиженийСписание.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
					
				КонецЦикла;
				
			Иначе // Проверяем, отмечались ли в регистре "ДенежныеСредстваКСписанию" ведомости из табличной части
				
				ЕстьВедомости=Ложь;
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	ДенежныеСредстваКСписаниюОстатки.ДокументСписания КАК Ведомость,
				|	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток КАК Остаток,
				|	ДенежныеСредстваКСписаниюОстатки.СуммаУпрОстаток КАК ОстатокУпр,
				|	ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса,
				|	ДенежныеСредстваКСписаниюОстатки.СтатьяДвиженияДенежныхСредств
				|ИЗ
				|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки(, ВидДенежныхСредств=&Наличные) КАК ДенежныеСредстваКСписаниюОстатки
				|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ДенежныеСредстваКСписаниюОстатки.ДокументСписания
				|
				|ГДЕ
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка",Ссылка);
				Запрос.УстановитьПараметр("Наличные",Перечисления.ден_ВидыДенежныхСредств.Наличные);
				
				ТаблицаВедомости=ТаблицаДвиженийСписание.Скопировать();
				
				Результат=Запрос.Выполнить().Выбрать();
				
				Пока Результат.Следующий() Цикл
					
					СтрокаДвижений = ТаблицаВедомости.Добавить();
					СтрокаДвижений.БанковскийСчетКасса  = Результат.БанковскийСчетКасса;
					СтрокаДвижений.Организация 			= Организация;
					СтрокаДвижений.ВидДенежныхСредств   = Перечисления.ден_ВидыДенежныхСредств.Наличные;
					СтрокаДвижений.Сумма                = Результат.Остаток;
					СтрокаДвижений.СуммаУпр             = Результат.ОстатокУпр;
					СтрокаДвижений.ДокументСписания     = Результат.Ведомость;
					СтрокаДвижений.СтатьяДвиженияДенежныхСредств=Результат.СтатьяДвиженияДенежныхСредств;
					СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
					
				КонецЦикла;
				
				Если НЕ ТаблицаВедомости.Количество()=ВыплатаЗаработнойПлаты.Количество() Тогда
					
					Для Каждого Ведомость ИЗ ВыплатаЗаработнойПлаты Цикл
						
						Если ТаблицаВедомости.Найти(Ведомость.Ведомость,"ДокументСписания")=Неопределено Тогда
							
							СтрокаДвижений = ТаблицаДвиженийСписание.Добавить();
							СтрокаДвижений.БанковскийСчетКасса  = Касса;
							СтрокаДвижений.Организация 			= Организация;
							СтрокаДвижений.ВидДенежныхСредств   = Перечисления.ден_ВидыДенежныхСредств.Наличные;
							СтрокаДвижений.Сумма                = Ведомость.СуммаКВыплате;
							СтрокаДвижений.СуммаУпр             = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Ведомость.СуммаКВыплате, ВалютаДокумента,
																		глЗначениеПеременной("ВалютаУправленческогоУчета"), 
																		СтрокаКурсыВалют.КурсДокумента,
																		СтрокаКурсыВалют.КурсУпрУчета, 
																		СтрокаКурсыВалют.КратностьДокумента,
																		СтрокаКурсыВалют.КратностьУпрУчета);
							СтрокаДвижений.ДокументСписания     = Ведомость.Ведомость;
							СтрокаДвижений.СтатьяДвиженияДенежныхСредств=Ведомость.СтатьяДвиженияДенежныхСредств;
							СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВедомости,ТаблицаДвиженийСписание);
				Иначе
					ТаблицаДвиженийСписание=ТаблицаВедомости;
				КонецЕсли;
				
			КонецЕсли;
			
			НаборДвиженийСписание.мПериод              = Дата;
			НаборДвиженийСписание.мТаблицаДвижений     = ТаблицаДвиженийСписание;
			Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьРасход();
		КонецЕсли;	
	КонецЕсли;

	Если ОтраженоВОперУчете И Не ПоОбъявлениюНаВзнос Тогда
		
		Если НЕ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			// По регистру "Денежные средства к списанию"
			НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКСписанию;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = Касса;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументСписания    = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийДС.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = Дата;
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			// По регистру "Денежные средства к списанию"
			НаборДвижений = Движения.ден_ДенежныеСредстваКСписанию;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ЕстьВедомости=Ложь;
			
			Запрос=Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость КАК Ведомость,
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СуммаКВыплате КАК Сумма,
			|	ДенежныеСредстваКСписаниюОстатки.ДокументСписания,
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки КАК ДенежныеСредстваКСписаниюОстатки
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ДенежныеСредстваКСписаниюОстатки.ДокументСписания
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
			
			Пока Результат.Следующий() Цикл
				
				Если Результат.ДокументСписания= NULL Тогда
					
					ЕстьВедомости=Истина;
					
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.БанковскийСчетКасса  = Касса;
					СтрокаДвижений.Организация 			= Организация;
					СтрокаДвижений.ВидДенежныхСредств   = Перечисления.ден_ВидыДенежныхСредств.Наличные;
					СтрокаДвижений.Сумма                = Результат.Сумма;
					СтрокаДвижений.СуммаУпр             = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Результат.Сумма, ВалютаДокумента,
																	Константы.ВалютаУправленческогоУчета.Получить(), 
																	СтрокаКурсыВалют.КурсДокумента,
																	СтрокаКурсыВалют.КурсУпрУчета, 
																	СтрокаКурсыВалют.КратностьДокумента,
																	СтрокаКурсыВалют.КратностьУпрУчета);
					СтрокаДвижений.ДокументСписания     = Результат.Ведомость;
					СтрокаДвижений.СтатьяДвиженияДенежныхСредств=Результат.СтатьяДвиженияДенежныхСредств;
					СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьВедомости Тогда
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
						
			//По регистру "Денежные средства к получению"
			НаборДвижений   = Движения.ден_ДенежныеСредстваКПолучению;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвижений.Организация 		   = Организация;
			СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвижений.ДокументПолучения    = Ссылка;
			СтрокаДвижений.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
 			СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;

			СтрокаДвижений.Сумма               = СуммаДокумента;
			СтрокаДвижений.СуммаУпр            = ДвиженияПоСтатьям[0].СуммаУпр;
			
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
			
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
		КонецЕсли;
		
		ЕстьРезерв=Ложь;
		ЕстьРазмещение=Ложь;
				
		// По регистру "Денежные средства в резерве"
		НаборДвиженийРезерв   = Движения.ден_ДенежныеСредстваВРезерве;
		ТаблицаДвиженийРезерв = НаборДвиженийРезерв.Выгрузить();
		ТаблицаДвиженийРезерв.Очистить();
		
		// По регистру "Размещение заявок на расходование средств"
		НаборДвиженийРазмещение  = Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаДвиженийРазмещение = НаборДвиженийРазмещение.Выгрузить();
		ТаблицаДвиженийРазмещение.Очистить();
		
		// По регистру "Заявки на расходование средств"
		НаборДвиженийЗаявки   = Движения.ден_ЗаявкиНаРасходованиеСредств;
		ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
		ТаблицаДвиженийЗаявки.Очистить();
		
		// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
		Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДокументЗаявка",СтрокаЗаявка.ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("БанковскийСчетКасса",Касса);
				Запрос.Текст = "ВЫБРАТЬ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ден_ДенежныеСредстваВРезерве.Остатки(, ДокументРезервирования = &ДокументЗаявка И БанковскийСчетКасса=&БанковскийСчетКасса) КАК ДенежныеСредстваВРезервеОстатки";
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL)  И (НЕ Результат.СуммаОстаток=0) Тогда
					
					СтрокаДвижений = ТаблицаДвиженийРезерв.Добавить();
					СтрокаДвижений.БанковскийСчетКасса = Касса;
					СтрокаДвижений.Организация 		   = Организация;
					СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
					СтрокаДвижений.Сумма               = ?(Результат.СуммаОстаток <СтрокаЗаявка.СуммаПлатежаПлан,Результат.СуммаОстаток,СтрокаЗаявка.СуммаПлатежаПлан);
					СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
					
					ЕстьРезерв=Истина;
					
				КонецЕсли;
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
				|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
				// Ранжируем планиуемые поступления для закрытия. Первыми закрывается размещение по планируемым поступлениям,
				// у которых совпадает счет, затем форма оплаты, затем организация.
				|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса=&Касса
				|		Тогда 4
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты=&ФормаОплаты
				|		Тогда 2
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация=&Организация
				|		Тогда 1
				|	Иначе 0
				|	Конец) КАК Релевантность,
				|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования=&ДокументРезервирования) КАК РазмещениеЗаявок
				|ГДЕ НЕ((РазмещениеЗаявок.СуммаОстаток) ЕСТЬ NULL )";
				
				Запрос.УстановитьПараметр("Касса",Касса);
				Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ден_ВидыДенежныхСредств.Наличные);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования",СтрокаЗаявка.ДокументПланированияПлатежа);
				
				ТабРазмещение=Запрос.Выполнить().Выгрузить();
				
				ТабРазмещение.Сортировать("Релевантность Убыв,ДатаПоступления Возр");
				
				СуммаКСписанию=СтрокаЗаявка.СуммаПлатежаПлан;
				
				Для Каждого Строка Из ТабРазмещение Цикл
					
					ЕстьРазмещение=Истина;
					
					СтрокаДвижение=ТаблицаДвиженийРазмещение.Добавить();
					СтрокаДвижение.ДокументПланирования=Строка.ДокументПланирования;
					СтрокаДвижение.ДокументРезервирования=СтрокаЗаявка.ДокументПланированияПлатежа;
					
					Если Строка.СуммаОстаток>=СуммаКСписанию Тогда
						
						СтрокаДвижение.Сумма=СуммаКСписанию;
						Прервать;
						
					Иначе
						
						СтрокаДвижение.Сумма=Строка.СуммаОстаток;
						СуммаКСписанию=СуммаКСписанию-Строка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезерв тогда
			
			НаборДвиженийРезерв.мПериод          = Дата;
			НаборДвиженийРезерв.мТаблицаДвижений = ТаблицаДвиженийРезерв;
			Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРазмещение Тогда
			
			НаборДвиженийРазмещение.мПериод          = Дата;
			НаборДвиженийРазмещение.мТаблицаДвижений = ТаблицаДвиженийРазмещение;
			Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
			
			ЕстьЗаявка=Ложь;
			ЕстьРасчеты=Ложь;
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр						= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма							= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ЗаявкаНаРасходование			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект							= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Организация					= Организация;
				СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
				СтрокаДвиженийЗаявки.СтруктурноеПодразделение  		= СтруктурноеПодразделениеОтправитель;
				СтрокаДвиженийЗаявки.ЦФО							= СтрокаПлатеж.Подразделение; 
				Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					СтрокаДвиженийЗаявки.Сделка = ?(Не ЗначениеЗаполнено(СтрокаПлатеж.Сделка),
																			Ссылка,
																			СтрокаПлатеж.Сделка);
				КонецЕсли;
				
				ЕстьЗаявка = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДвиженийЗаявки.Количество()>0 Тогда
			
			НаборДвиженийЗаявки.мПериод          = Дата;
			НаборДвиженийЗаявки.мТаблицаДвижений = ТаблицаДвиженийЗаявки;
			Движения.ден_ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено И ОтраженоВОперУчете Тогда  // Разнесено по оперативным взаиморасчетам
		// и принято кассиром: проводим по фактическим взаиморасчетам

		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
		
		
		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";			
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,Дата,"ДенежныеСредстваСписание",Ссылка);			

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Наличные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(Касса,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеОтправитель,"СтруктурноеПодразделение");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзнос Тогда
			
			// По регистру "Движения денежных средств"
			НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,Дата,"ДенежныеСредства");
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И (ОтражатьВУправленческомУчете И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет")) Тогда
		Сообщить(Заголовок+"
			|Не выбрано правило проведения по оперативному учету (""Отразить в опер. учете"",""Оплачено"")");
		Отказ = Истина;
	КонецЕсли;
	
	Если (ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами) 
		И НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");
		
		Отказ=Истина;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы");
			Отказ=Истина;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		
		Если Не ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			ЕстьРазрешение=УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезЗаявки();
			
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			Касса,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
			
			Отказ=Отказ И НЕ ЕстьРазрешение;
			
		КонецЕсли;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Касса,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"),СтруктурноеПодразделениеОтправитель);
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+Касса.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено Тогда
		СтруктураПолей=Новый Структура;
		СтруктураПолей.Вставить("Касса");
		СтруктураПолей.Вставить("СуммаДокумента");
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
		КонецЕсли;

		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			СтруктураПолей = Новый Структура("Организация,Касса,
			|Контрагент, Ответственный");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			СтруктураПолей = Новый Структура("Организация,Касса,Контрагент,
			|Ответственный");
		Иначе
			СтруктураПолей = Новый Структура("Организация,Касса,Ответственный");
		КонецЕсли;

		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если Не ОтражатьВБухгалтерскомУчете Тогда 
			
			Если ВыплатаЗаработнойПлаты.Количество()=0 Тогда
				Сообщить("Не указаны ведомости на выплату заработной платы.");
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК СуммаВыплачено
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеЗарплата.Ссылка
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
				Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
				Отказ=Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
мОтображатьСтруктурныеПодразделенияВЗарплате = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате();
