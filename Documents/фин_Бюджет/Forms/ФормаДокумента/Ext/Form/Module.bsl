&НаКлиенте
Перем ДополнительныеПараметрыПодбора;
&НаКлиенте
Перем ЭтоРежимПодбора;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийформы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	УстановитьЗаголовокФормыДокумента();
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьСтрокиДерева();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	// ++ USRomanov@1cbit.ru 08.01.2021
	//ПроизвестиРасчетыПоФормулам(,,,ТекущийОбъект);
	// -- USRomanov@1cbit.ru 08.01.2021
	Если (НЕ ФормаПодлежитЗакрытию) И (РучнаяНастройкаИтоговПоГруппам ИЛИ (ЗначениеЗаполнено(РежимРасчетаИтогов) И РежимРасчетаИтогов<>ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать"))) Тогда
		РассчитатьИтогиБюджета();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_Бюджет", ПараметрыЗаписи, Объект.Ссылка);	
	ФормаПодлежитЗакрытию = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьЗаголовокФормыДокумента();
	Если (НЕ ФормаПодлежитЗакрытию) И ТекущийОбъект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов И (СписокФормульных.Количество()>0 ИЛИ СписокЗависимых.Количество()>0) Тогда
		ОбновитьПолеБюджета();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЗапоминатьДействий=0 Тогда
		Возврат;
	КонецЕсли;
	Если КЭШ_ВозвратДействий_Адрес="" И КЭШ_ОтменаДействий_Адрес="" И КЭШ_РезультатыРасчета_Адрес="" И КЭШ_РасчетыПоМоделям_Адрес="" Тогда
		Возврат;
	КонецЕсли;
	ПередЗакрытиемНаСервере();
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.ФормируемыйБюджет,Объект.ПериодПланирования,ГоризонтПланирования,Объект.Сценарий,Ложь),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
//	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
	//	// Изменение времени не влияет на поведение документа.
	//	ТекущаяДатаДокумента = Объект.Дата;
	//	Возврат;
	//КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	Если Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормируемыйБюджетПриИзменении(Элемент)
	Если мБюджет = Объект.ФормируемыйБюджет Тогда
		ВосстановитьСтатьиБюджетаВСтроках();
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(мБюджет) Тогда
		ОбработчикОповещенияВопросОбОчисткеБюджета = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбОчисткеБюджета",ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещенияВопросОбОчисткеБюджета,"При изменении бюджета документ будет очищен. Продолжить?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе	
		ПриИзмененииПараметровФормированияНаСервере(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Если мСценарий = Объект.Сценарий Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(мСценарий) Тогда
		ОбработчикОповещенияВопросОбОчисткеБюджета = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбОчисткеСценария",ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещенияВопросОбОчисткеБюджета,"При изменении сценария документ будет очищен. Продолжить?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе	
		ПриИзмененииПараметровФормированияНаСервере(,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФиксацияКолонокБюджетаПриИзменении(Элемент)
	НастроитьФиксациюКолонокБюджета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВариантРедактированияБюджетаПриИзменении(Элемент)
	НастроитьВариантРедактированияБюджета();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРедактированияПриИзменении(Элемент)
	НастройкаРедактированияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АвтоВысотаЯчейкиСтатьиПриИзменении(Элемент)
	НастроитьАвтоВысотуЯчейкиСтатьи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АвтоВысотаЯчеекАналитикиПриИзменении(Элемент)
	НастроитьАвтоВысотуЯчеекАналитики(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если мОрганизация = Объект.Организация Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	Если мСостояние <> Объект.Состояние Тогда
		Если Объект.Состояние = фин_ОбщегоНазначенияКлиентПовтИсп.СостояниеОбъектаУтвержден() И Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") Тогда
			Если Объект.ОборотыПоСтатьям.Количество() <> Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура("Состояние",фин_ОбщегоНазначенияКлиентПовтИсп.СостояниеОбъектаУтвержден())).Количество() Тогда
				ОбработчикСогласияНаУтверждение = Новый ОписаниеОповещения("ОбработатьСогласиеНаАвтоматическоеУтверждениеСтатей",ЭтотОбъект);
				ПоказатьВопрос(ОбработчикСогласияНаУтверждение,"Имеются отдельные неутвержденные статьи. Утвердить их автоматически?", РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
		мСостояние = Объект.Состояние;
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") Тогда
		ВалютаДокументаПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;
	Если (НЕ Объект.ВалютаДокумента = СтараяВалютаДокумента) И Объект.ЕдинаяВалюта Тогда
		ОбработчикСогласияНаПересчетСуммыОпераций = Новый ОписаниеОповещения("ОбработчикОтветаПоПересчетуСуммДокумента",ЭтотОбъект);
		ПоказатьВопрос(ОбработчикСогласияНаПересчетСуммыОпераций,"Изменилась валюта документа. Пересчитать суммы операций?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВалютаДокументаПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ПроверитьНаличиеБюджетов();
	мОрганизация = Объект.Организация;
	УстановитьПараметрыВалютныхРасчетов();
	Если НЕ Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		ОбновитьПолеБюджета();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	ЗапомнитьСостояние();
КонецПроцедуры

&НаКлиенте
Процедура ЕдинаяВалютаПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") ИЛИ НЕ Объект.ЕдинаяВалюта Тогда
		ЕдинаяВалютаПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;
	Если Объект.ЕдинаяВалюта Тогда
		ОбработчикСогласияНаПересчетСуммыОпераций = Новый ОписаниеОповещения("ОбработчикОтветаПоПересчетуСуммДокумента",ЭтотОбъект);
		ПоказатьВопрос(ОбработчикСогласияНаПересчетСуммыОпераций,"Изменилась валюта документа. Пересчитать суммы операций?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьМероприятияПоДостижениюБюджетныхПоказателейПриИзменении(Элемент)
	Если НЕ Объект.ПланироватьМероприятияПоДостижениюБюджетныхПоказателей Тогда
		Объект.ПланируемыеМероприятия.Очистить();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗадаватьКурсыВалютВДокументеПриИзменении(Элемент)
	ЗадаватьКурсыВалютВДокументеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УровеньДетализацииБюджетаПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.УровеньДетализацииБюджета) Тогда
		Объект.Проект						= фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеПроект();
		Объект.УправленческоеПодразделение	= фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеУправленческоеПодразделение();
	ИначеЕсли Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		Объект.Проект						= фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеПроект();
	Иначе
		Объект.УправленческоеПодразделение	= фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеУправленческоеПодразделение();
	КонецЕсли;
	УровеньДетализацииБюджетаПриИзмененииНаСервере();
	Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка")
		ИЛИ Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") Тогда
		УстановитьПараметрыВалютныхРасчетов();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ФормаВыбора",НастройкиВыбораПодразделений(Объект.ФормируемыйБюджет),Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеПриИзменении(Элемент)
	Если мУправленческоеПодразделение = Объект.УправленческоеПодразделение Тогда
	    Возврат;
	КонецЕсли;
	УправленческоеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Если мПроект = Объект.Проект Тогда
	    Возврат;
	КонецЕсли;
	ПроектПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОборотыПоСтатьям

#Область ОбработчикиСобытийТаблицыОборотыПоСтатьям

&НаКлиенте
Процедура ОборотыПоСтатьямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.Состояние						= Объект.Состояние;
		ТекущиеДанные.ПериодПланирования			= Объект.ПериодПланирования;
		ТекущиеДанные.УправленческоеПодразделение	= Объект.УправленческоеПодразделение;
		ТекущиеДанные.Проект						= Объект.Проект;
	КонецЕсли;
	СтараяВалютаОперации = ТекущиеДанные.ВалютаОперации;
	Если УчетПоНоменклатуре Тогда
		ОписаниеТипов = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ФинансовыйПоказатель,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре,ЭтотОбъект);
		Элементы.ОборотыПоСтатьямНоменклатура.ОграничениеТипа = ОписаниеТипов;
	Иначе
	    ТекущиеДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ОборотыПоСтатьям;
	ПриОкончанииРедактированияСтроки(ТекущиеДанные);
	Если НЕ ТолькоТабличныеЧасти Тогда
		Состояние("Необходимо обновить поле бюджета после внесения изменений в табличные части");	
	КонецЕсли;
    Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямПослеУдаления(Элемент)
	ОборотыПоСтатьямПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОборотыПоСтатьямПослеУдаленияНаСервере()
	ОбновитьПолеБюджета();
	ЗапомнитьСостояние();
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямПериодПланированияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	ТекущиеДанные.ПериодПланирования = ПривестиПериодПланированияКДатеСценарияНаСервере(ТекущиеДанные.ПериодПланирования,Объект.Сценарий)
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокПериодовДляВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямСтатьяБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",Новый Структура("Отбор,ВСпискеПоИерархии",Новый Структура("Владелец",Объект.ФормируемыйБюджет),СписокСтатей),Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямСтатьяБюджетаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	ФинансовыйПоказатель = ПолеОбъекта(ТекущаяСтрока.СтатьяБюджета,"ФинансовыйПоказатель");
	Если ТекущаяСтрока.ФинансовыйПоказатель <> ФинансовыйПоказатель Тогда
		ТекущаяСтрока.ФинансовыйПоказатель = ФинансовыйПоказатель;
		ОборотыПоСтатьямФинансовыйПоказательПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямФинансовыйПоказательПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ФинансовыйПоказатель) Тогда
		Возврат;
	КонецЕсли;
	
	ФинансовыйПоказатель = ПолеОбъекта(ТекущаяСтрока.СтатьяБюджета,"ФинансовыйПоказатель");
	Если ТекущаяСтрока.ФинансовыйПоказатель <> ФинансовыйПоказатель Тогда
		ТекущаяСтрока.СтатьяБюджета = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтатьяБюджетаПоПоказателю(ФинансовыйПоказатель,ЭтотОбъект);
	КонецЕсли;
	
	ПриИзмененииФинансовогоПоказателяНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямПроектПриИзменении(Элемент)
	
	ТекущаяСтрока 			= Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	ФинансовыйПоказатель	= ТекущаяСтрока.ФинансовыйПоказатель;
	СпособЦенообразования	= ПолеОбъекта(ФинансовыйПоказатель,"СпособЦенообразования");
	
	Если СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов") И ИмеетсяРазрезРасчетаЦены(ФинансовыйПоказатель,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект"),Объект.ФормируемыйБюджет) Тогда
		ПересчитатьЦенуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямКонтрагентПриИзменении(Элемент)
	ТекущаяСтрока 			= Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	ФинансовыйПоказатель	= ТекущаяСтрока.ФинансовыйПоказатель;
	СпособЦенообразования	= ПолеОбъекта(ФинансовыйПоказатель,"СпособЦенообразования");
	
	Если (СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов") И ИмеетсяРазрезРасчетаЦены(ФинансовыйПоказатель,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент"),Объект.ФормируемыйБюджет))
		ИЛИ СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков") Тогда
		ПересчитатьЦенуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока 			= Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	ФинансовыйПоказатель	= ТекущаяСтрока.ФинансовыйПоказатель;
	СпособЦенообразования	= ПолеОбъекта(ФинансовыйПоказатель,"СпособЦенообразования");
	
	Если СпособЦенообразования = ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов") И ИмеетсяРазрезРасчетаЦены(ФинансовыйПоказатель,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура"),Объект.ФормируемыйБюджет) Тогда
		ПересчитатьЦенуНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	Если ТекущаяСтрока.Цена=0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Сумма=ТекущаяСтрока.Количество*ТекущаяСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	Если ТекущаяСтрока.Количество=0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Сумма=ТекущаяСтрока.Количество*ТекущаяСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	
	Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) И (НЕ ТекущаяСтрока.Количество=0) Тогда
		ТекущаяСтрока.Цена=Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямВалютаОперацииПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОборотыПоСтатьям.ТекущиеДанные;
	Если НЕ ТекущаяСтрока.ВалютаОперации = СтараяВалютаОперации Тогда
		ОбработчикСогласияНаПересчетСуммыСтроки = Новый ОписаниеОповещения("ОбработчикОтветаПоПересчетуСуммСтроки",ЭтотОбъект,ТекущаяСтрока.ПолучитьИдентификатор());
		ПоказатьВопрос(ОбработчикСогласияНаПересчетСуммыСтроки,"Изменилась валюта операции. Пересчитать сумму?", 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
	СтараяВалютаОперации = ТекущаяСтрока.ВалютаОперации;
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасчетыПоМоделям

#Область ОбработчикиСобытийТаблицыРасчетыПоМоделям

&НаКлиенте
Процедура РасчетыПоМоделямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РасчетыПоМоделям;
	ПриОкончанииРедактированияСтроки(ТекущиеДанные);
    Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоМоделямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.РасчетыПоМоделям.ТекущиеДанные;
	ТекущиеДанные.Авторасчет = Ложь;
	Если НоваяСтрока Тогда
		ТекущиеДанные.ПериодПланирования			= Объект.ПериодПланирования;
		ТекущиеДанные.УправленческоеПодразделение	= Объект.УправленческоеПодразделение;
		ТекущиеДанные.Проект						= Объект.Проект;
	КонецЕсли;
	СтараяВалютаОперации 	= ТекущиеДанные.ВалютаОперации;
	ОписаниеТипов 			= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ФинансовыйПоказатель,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре,ЭтотОбъект);
	Элементы.РасчетыПоМоделямНоменклатура.ОграничениеТипа = ОписаниеТипов;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоМоделямПослеУдаления(Элемент)
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоМоделямПериодПланированияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасчетыПоМоделям.ТекущиеДанные;
	ТекущиеДанные.ПериодПланирования = ПривестиПериодПланированияКДатеСценарияНаСервере(ТекущиеДанные.ПериодПланирования,Объект.Сценарий)
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыДеревоСтрокБюджета

&НаКлиенте
Процедура ДеревоСтрокБюджетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	СтараяВалютаБюджетнойСтроки = ТекущиеДанные.ВалютаОперации;
	Если (ТабличныйВариант ИЛИ (ТабличныйВариантТолькоДляАналитики И ТекущиеДанные.ВидГруппировки = "ТаблицаАналитики") ИЛИ ТекущиеДанные.ВидГруппировки = "Номенклатура" ИЛИ Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя="Номенклатура") И ТекущиеДанные.УчетПоРазрезуНоменклатура Тогда
		Элементы.ДеревоСтрокБюджетаНоменклатура.ОграничениеТипа = ТекущиеДанные.ОписаниеТиповВыбораНоменклатуры;
	КонецЕсли;
КонецПроцедуры

// Процедура ДеревоБюджетаИзмерениеНачалоВыбора
// 
&НаКлиенте
Процедура ДеревоБюджетаИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные 				= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
		РедактируемаяГруппировка 	= СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
		Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСтатьеПоРазрезу(ТекущиеДанные.ФинансовыйПоказатель,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+РедактируемаяГруппировка),ЭтотОбъект) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	Иначе
		РедактируемаяГруппировка 	= ТекущиеДанные.ВидГруппировки;
	КонецЕсли;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();	
	Если (РедактируемаяГруппировка = "УправленческоеПодразделение" ИЛИ Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя="ДеревоСтрокБюджетаУправленческоеПодразделение") И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И ПолеОбъекта(Объект.ФормируемыйБюджет,"ВключаяПодчиненныеПодразделения")=Истина Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ФормаВыбора",Новый Структура("НастройкиОтбораВБюджет",Новый Структура("ВидСравнения,Список",ВидСравненияКомпоновкиДанных.ВИерархии,Объект.УправленческоеПодразделение)),Элемент);
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаИзмерениеНачалоВыбора

// Процедура ДеревоБюджетаИзмерениеПриИзменении
// 
&НаКлиенте
Процедура ДеревоБюджетаИзмерениеПриИзменении(Элемент)
	РасчетМоделейАктуален = Ложь;
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	//ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	Если ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
		ТекущаяГруппировка = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
	Иначе
		Если ТекущиеДанные.ВидГруппировки <> ИзменяемоеИзмерение Тогда
			Возврат;
		КонецЕсли;
		ТекущаяГруппировка = ТекущиеДанные.ВидГруппировки;
	КонецЕсли;
	Если УжеИмеетсяСтрокаСТакимЗначениемРазреза(ТекущиеДанные.ПолучитьРодителя(),ТекущаяГруппировка,ТекущиеДанные[ТекущаяГруппировка]) >1 Тогда
		ПоказатьПредупреждение(,"В указанной группе уже имеются строки с указанным значением аналитики!");
		ТекущиеДанные[ТекущаяГруппировка] = СтруктураПоискаИзменяемых[ТекущаяГруппировка];
		Возврат;	
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
		Если ОборотыПриКорректировке.НайтиСтроки(Новый Структура(СтруктураПоискаИзменяемых)).Количество() >0 Тогда
			ПоказатьПредупреждение(,"Нельзя изменить аналитику строки, полученной из учетных данных!
			|Возможно только приравнять суммы оборотов к нулю!");
			ТекущиеДанные[ТекущаяГруппировка] = СтруктураПоискаИзменяемых[ТекущаяГруппировка];
			Возврат;	
		КонецЕсли;
	КонецЕсли;
		
//	ЗатронутыеСтатьиБюджета	= Новый СписокЗначений;
	ЦенообразующееИзмерение	= ИмеетсяРазрезРасчетаЦеныСтатьи(Объект.ФормируемыйБюджет,СтруктураПоискаИзменяемых.СтатьяБюджета,ИзменяемоеИзмерение);
	ИзменятьЦену 			= ((ИзменяемоеИзмерение = "Номенклатура" И ТипЗнч(ТекущиеДанные[ТекущаяГруппировка])<>фин_ОбщегоНазначенияКлиентПовтИсп.ТипНоменклатурныеГруппыСсылка()) ИЛИ (ИзменяемоеИзмерение <> "Номенклатура" И ЦенообразующееИзмерение));
	Если НЕ РежимМедленногоСоединения Тогда
		СтрокиКОбновлению 		= Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура(СтруктураПоискаИзменяемых));//УстановитьЗначениеИзмеренияВИзменяемыхСтроках(ИзменяемоеИзмерение,ТекущиеДанные[ТекущаяГруппировка]);//
		Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
			СтрокаОбновить[ИзменяемоеИзмерение] = ТекущиеДанные[ТекущаяГруппировка];
		КонецЦикла;
	Иначе
		ТребуетсяПередачаДанных = Истина;
	КонецЕсли;
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	Если СтруктураПоказателей.Цена = Истина И ИзменятьЦену Тогда
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
		Если НЕ РежимМедленногоСоединения Тогда
			ОбновитьЦеныПриИзмененииРазрезаВДереве(?(ТекущиеДанные.ПолучитьЭлементы().Количество()=0,Неопределено,ЗатронутыеСтатьиБюджета),ТекущиеДанные);
		Иначе
			ТребуетсяПередачаДанных=Истина;
		КонецЕсли;	
		Если ПродолжительностьЦикла>1 И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
			Для Инд = 1 По ПродолжительностьЦикла Цикл
				УстановленнаяЦена = ТекущиеДанные["Цена"+Строка(Инд)];
				// расчет в дереве
				УстановитьЦенуВСтроках(ТекущиеДанные,"Цена"+Строка(Инд),УстановленнаяЦена);
			КонецЦикла;
		Иначе 
			УстановленнаяЦена = ТекущиеДанные["Цена"];
			// расчет в дереве
			УстановитьЦенуВСтроках(ТекущиеДанные,"Цена",УстановленнаяЦена);
		КонецЕсли;
		//фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(ТекущиеДанные,ДеревоСтрокБюджета,Объект,ЭтотОбъект);
		//Если НЕ ТабличныйВариант Тогда
		//	СтрокаГруппы = ТекущиеДанные;
		//	Пока СтрокаГруппы.ПолучитьРодителя() <> Неопределено Цикл
		//		СтрокаГруппы = СтрокаГруппы.ПолучитьРодителя();
		//	КонецЦикла;
		//	фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммыПоГруппам(СтрокаГруппы.ПолучитьИдентификатор(),ДеревоСтрокБюджета,Объект,ЭтотОбъект);
		//КонецЕсли;
		ТекущаяСтрока = ТекущиеДанные;
		Если НЕ ТабличныйВариант Тогда
			Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
				ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		РасчетИтоговВДеревеПриВыполненииИзменений(ТекущаяСтрока,Новый СписокЗначений,,ТекущиеДанные <> ТекущаяСтрока ИЛИ ТабличныйВариант);
		
	КонецЕсли;
	//ЗатронутыеСтатьиБюджета.Добавить();
	//ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	ФинансовыйПоказатель = ПолеОбъекта(СтруктураПоискаИзменяемых.СтатьяБюджета,"ФинансовыйПоказатель");
	Если ИмеетсяРазрезРасчетаФормул(ИзменяемоеИзмерение) И ИнтерактивныйРасчетФормул И НЕ РежимМедленногоСоединения Тогда
		ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,,ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	//Если ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
	//	ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	//КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаИзмерениеПриИзменении

&НаКлиенте
Процедура ОбновитьЦеныПриИзмененииРазрезаВДереве(ЗатронутыеСтатьиБюджета = Неопределено,СтрокаДерева = Неопределено)
	СтрокиКОбновлению 		= Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура(СтруктураПоискаИзменяемых));
	Если СтрокиКОбновлению.Количество()>0 Тогда
		 ОбновитьЦеныПриИзмененииРазрезаВДеревеНаСервере(ЗатронутыеСтатьиБюджета);
		 // перенесем цены обратно в дерево
		 Если СтрокаДерева<>Неопределено Тогда
			 Для Каждого СтрокаКОбновлению Из СтрокиКОбновлению Цикл
				 Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2 Тогда
					 СтрокаДерева.Цена = СтрокаКОбновлению.Цена;
				 Иначе
					 НомерПериода = СоответствиеПериодов.Получить(СтрокаКОбновлению.ПериодПланирования);
					 Если НомерПериода <>Неопределено Тогда
						СтрокаДерева["Цена"+Строка(НомерПериода)] = СтрокаКОбновлению.Цена; 
					 КонецЕсли;
				 КонецЕсли;
			 КонецЦикла;
		 КонецЕсли;
	 ИначеЕсли СтрокаДерева<>Неопределено Тогда
		 СтрокиКОбновлению = ПолучитьНаборЦенПоПериодам(Новый Структура(СтруктураПоискаИзменяемых),СтрокаДерева.ПолучитьИдентификатор());
		Для Каждого СтрокаКОбновлению Из СтрокиКОбновлению Цикл
			Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2 Тогда
				СтрокаДерева.Цена = СтрокаКОбновлению.Цена;
			Иначе
				НомерПериода = СоответствиеПериодов.Получить(СтрокаКОбновлению.ПериодПланирования);
				Если НомерПериода <>Неопределено Тогда
					СтрокаДерева["Цена"+Строка(НомерПериода)] = СтрокаКОбновлению.Цена; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНаборЦенПоПериодам(СтруктураПоиска,ИдентификаторСтрокиДерева)
	СтрокаДерева = ДеревоСтрокБюджета.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	МассивПериодов = Новый Массив;
	Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2 Тогда
		МассивПериодов.Добавить(Объект.ПериодПланирования);
	Иначе
		Для Каждого ЭлементПериод Из СоответствиеПериодов Цикл
			МассивПериодов.Добавить(ЭлементПериод.Ключ);
		КонецЦикла;
	КонецЕсли;
	МассивРезультат = Новый Массив;
	Для Каждого ПериодДат Из МассивПериодов Цикл
		СтруктураРасчета = Новый Структура("ПериодПланирования,Количество,Цена,ФинансовыйПоказатель,Номенклатура,Проект,УправленческоеПодразделение,ВалютаОперации",ПериодДат,0,0,СтруктураПоиска.СтатьяБюджета.ФинансовыйПоказатель,Неопределено,Объект.Проект,Объект.УправленческоеПодразделение,Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураРасчета,СтрокаДерева);
		ЗаполнитьЗначенияСвойств(СтруктураРасчета,СтруктураПоиска);
		фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтруктураРасчета,Объект.Сценарий,ВестиУчетПоПроектам,ПериодДат,,,КЭШ_ЦеныНоменклатуры);
		МассивРезультат.Добавить(Новый Структура("ПериодПланирования,Цена",ПериодДат,СтруктураРасчета.Цена));
	КонецЦикла;
	Возврат МассивРезультат;
КонецФункции

&НаСервере
Процедура ОбновитьЦеныПриИзмененииРазрезаВДеревеНаСервере(ЗатронутыеСтатьиБюджета = Неопределено)
	СтрокиКОбновлению 		= Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура(СтруктураПоискаИзменяемых));
	Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
		ПересчитатьЦенуНаСервере(СтрокаОбновить.ПолучитьИдентификатор());
		Если ЗатронутыеСтатьиБюджета<>Неопределено И ЗатронутыеСтатьиБюджета.НайтиПоЗначению(СтрокаОбновить.СтатьяБюджета)=Неопределено Тогда
			ЗатронутыеСтатьиБюджета.Добавить(СтрокаОбновить.СтатьяБюджета);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура ДеревоБюджетаИзмерениеОчистка
// 
&НаКлиенте
Процедура ДеревоБюджетаИзмерениеОчистка(Элемент, СтандартнаяОбработка)
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	ФинансовыйПоказатель = ПолеОбъекта(СтруктураПоискаИзменяемых.СтатьяБюджета,"ФинансовыйПоказатель");
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТабличныйВариант Тогда
		ТекущаяГруппировка = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
	Иначе
		Если ТекущиеДанные.ВидГруппировки <> ИзменяемоеИзмерение Тогда
			Возврат;
		КонецЕсли;
		ТекущаяГруппировка = ТекущиеДанные.ВидГруппировки;
	КонецЕсли;
	РасчетМоделейАктуален = Ложь;
	Если НЕ РежимМедленногоСоединения Тогда
		СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоискаИзменяемых);
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			Если ОборотыПриКорректировке.НайтиСтроки(СтруктураПоискаИзменяемых).Количество() >0 Тогда
				ПоказатьПредупреждение(,"Нельзя изменить аналитику строки, полученной из учетных данных!
				|Возможно только приравнять суммы оборотов к нулю!");
			Иначе
				ТекущиеДанные[ТекущаяГруппировка] = ПустоеЗначениеРазреза(ТекущаяГруппировка,ФинансовыйПоказатель);
				Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
					СтрокаОбновить[ИзменяемоеИзмерение] = ТекущиеДанные[ТекущаяГруппировка];
					//Если ИзменяемоеИзмерение = "Номенклатура" И ТипЗнч(ТекущиеДанные[ТекущиеДанные.ВидГруппировки])<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
					//	ПересчитатьЦенуНаСервере(СтрокаОбновить.ПолучитьИдентификатор());
					//КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТекущиеДанные[ТекущаяГруппировка] = ПустоеЗначениеРазреза(ТекущаяГруппировка,ФинансовыйПоказатель);
			Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
				СтрокаОбновить[ИзменяемоеИзмерение] = ТекущиеДанные[ТекущаяГруппировка];
			КонецЦикла;
		КонецЕсли;
		ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
		Если ИнтерактивныйРасчетФормул И (НЕ РежимМедленногоСоединения) И ИмеетсяРазрезРасчетаФормул(ТекущаяГруппировка) И ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,,ЗатронутыеСтатьиБюджета) Тогда
			Если ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
				ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
			КонецЕсли;
		КонецЕсли;
	Иначе
	    ТребуетсяПередачаДанных = Истина;
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаИзмерениеОчистка

&НаКлиенте
Функция ИмеетсяРазрезРасчетаФормул(ИмяРазреза)
	Возврат РазрезыРасчетаФормул.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ИмяРазреза))<>Неопределено;	
КонецФункции

// Процедура ДеревоБюджетаИтогПриИзменении
// 
&НаКлиенте
Процедура ДеревоБюджетаИтогПриИзменении(Элемент,РассчитыватьИтогиПриЗавершении = Истина,ВыбраннаяКолонка = Неопределено,ОбрабатываемаяСтрокаДерева = Неопределено) Экспорт
	РасчетМоделейАктуален 	= Ложь;
	КолонкаПериода 			= СтрЗаменить(?(ВыбраннаяКолонка=Неопределено,Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,ВыбраннаяКолонка),"ДеревоСтрокБюджета","");
	Если ОбрабатываемаяСтрокаДерева = Неопределено Тогда
		ТекущаяСтрока 			= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		СтрокаРедактируемая		= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Иначе
		ТекущаяСтрока 			= ОбрабатываемаяСтрокаДерева;
		СтрокаРедактируемая		= ОбрабатываемаяСтрокаДерева;
	КонецЕсли;
	СтруктураПоиска 	= Новый Структура;
	ЭтоКорректировка 	= Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка");
	ПериодПланирования 	= Объект.ПериодПланирования;
	Сценарий 			= Объект.Сценарий;
	ДопПараметры		= Новый Структура;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаОперации) Тогда
		ДопПараметры.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
		Если ЭтоКорректировка ИЛИ НЕ Объект.ЕдинаяВалюта Тогда
			СтруктураПоиска.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
		КонецЕсли;
	КонецЕсли;
	ОбразецЦены 		= ТекущаяСтрока;
	Если НЕ (ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики) Тогда
		СтруктураПоиска.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
		Если ТекущаяСтрока.ВидГруппировки <>"СтатьяБюджета" И ТекущаяСтрока.ВидГруппировки <>"Номенклатура" Тогда
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
			Пока Родитель <>Неопределено Цикл
				Если Родитель.ВидГруппировки ="СтатьяБюджета" ИЛИ Родитель.ВидГруппировки ="Номенклатура" Тогда
					ОбразецЦены = Родитель;
					Прервать;
				КонецЕсли;
				Родитель = Родитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПоказателей.Цена Тогда
		Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла <=1 Тогда
			Если ЗначениеЗаполнено(ОбразецЦены.Цена) Тогда
				ДопПараметры.Вставить("Цена",ОбразецЦены.Цена);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ОбразецЦены["Цена"+Сред(КолонкаПериода,16)]) Тогда
				ДопПараметры.Вставить("Цена",ОбразецЦены["Цена"+Сред(КолонкаПериода,16)]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Состояние) Тогда
		ДопПараметры.Вставить("Состояние",ТекущаяСтрока.Состояние);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ПричинаКорректировки) И ЭтоКорректировка Тогда
		ДопПараметры.Вставить("ПричинаКорректировки",ТекущаяСтрока.ПричинаКорректировки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ПричинаОтклонения) Тогда
		ДопПараметры.Вставить("ПричинаОтклонения",ТекущаяСтрока.ПричинаОтклонения);
	КонецЕсли;
	Если ТекущаяСтрока.ВидГруппировки = "СтатьяБюджета" Тогда
		СтруктураПоиска.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
		фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(ТекущаяСтрока.ПолучитьИдентификатор(),ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	КонецЕсли;
	Если ТабличныйВариант Тогда
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
			Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
				ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоиска.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
		КонецЦикла;
	Иначе
		Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
			Если НЕ ТабличныйВариантТолькоДляАналитики Тогда
				СтруктураПоиска.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаОперации) Тогда
				ДопПараметры.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
				Если ЭтоКорректировка Тогда
					СтруктураПоиска.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.Состояние) И НЕ (ДопПараметры.Свойство("Состояние") И ЗначениеЗаполнено(ДопПараметры.Состояние)) Тогда
				ДопПараметры.Вставить("Состояние",ТекущаяСтрока.Состояние);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.ПричинаКорректировки) И ЭтоКорректировка  И НЕ (ДопПараметры.Свойство("ПричинаКорректировки") И ЗначениеЗаполнено(ДопПараметры.ПричинаКорректировки)) Тогда
				ДопПараметры.Вставить("ПричинаКорректировки",ТекущаяСтрока.ПричинаКорректировки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.ПричинаОтклонения) И НЕ (ДопПараметры.Свойство("ПричинаОтклонения") И ЗначениеЗаполнено(ДопПараметры.ПричинаОтклонения)) Тогда
				ДопПараметры.Вставить("ПричинаОтклонения",ТекущаяСтрока.ПричинаОтклонения);
			КонецЕсли;
		КонецЦикла;
		Если ТабличныйВариантТолькоДляАналитики Тогда
			Если СтрокаРедактируемая.ВидГруппировки = "СтатьяБюджета" Тогда
				СтруктураПоиска.Вставить("СтатьяБюджета",СтрокаРедактируемая["СтатьяБюджета"]);	
			Иначе
				СтруктураПоиска.Вставить("СтатьяБюджета",СтрокаРедактируемая.ПолучитьРодителя()["СтатьяБюджета"]);	
				СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(СтрокаРедактируемая.ФинансовыйПоказатель,ЭтотОбъект);
				Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
					Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
						ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураПоиска.Вставить(Разрез.Ключ,СтрокаРедактируемая[Разрез.Ключ]);	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПересчитанаСумма 	= Ложь;
	КолонкаЦена			= "";
	Если Найти(КолонкаПериода,"ИтогоКоличество") <> 0 Тогда
		мпЦена 		= Неопределено;
		КолонкаЦена	= "Цена"+?(ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2,"",Сред(КолонкаПериода,16)); 
		Если ДопПараметры.Свойство("Цена",мпЦена) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаРедактируемая.ФинансовыйПоказатель,ЭтотОбъект) Тогда
			 ИмяКолонкиСумма 	= "ИтогоСумма"+Сред(КолонкаПериода,16);
			 ПересчитанаСумма 	= Истина;
			 СтрокаРедактируемая[ИмяКолонкиСумма] = СтрокаРедактируемая[КолонкаПериода]*мпЦена;
		КонецЕсли;
	КонецЕсли;
	//отразить изменение в табличной части оборотов бюджета
	Если ПродолжительностьЦикла >1 Тогда
		Если Найти(КолонкаПериода,"ИтогоСумма") <> 0 Тогда
			мпПериод = ОбратноеСоответствиеПериодов.Получить(Число(Сред(КолонкаПериода,11)));
		ИначеЕсли Найти(КолонкаПериода,"ИтогоКоличество") <> 0 Тогда
			мпПериод = ОбратноеСоответствиеПериодов.Получить(Число(Сред(КолонкаПериода,16)));
		Иначе
			мпПериод = ОбратноеСоответствиеПериодов.Получить(Число(Сред(КолонкаПериода,5)));
		КонецЕсли;
		СтруктураПоиска.Вставить("ПериодПланирования",мпПериод);
		ДопПараметры.Вставить("ПериодПланирования",мпПериод);
	Иначе
		ДопПараметры.Вставить("ПериодПланирования",ПериодПланирования);
	КонецЕсли;
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	Если НЕ РежимМедленногоСоединения Тогда
		Если ЭтоКорректировка Тогда
			ТекущаяСтрока.Корректировки = 1;
			СтрокиКОбновлению = ОборотыПриКорректировке.НайтиСтроки(СтруктураПоиска);
		Иначе
			СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКОбновлению.Количество() = 0 Тогда
				ОбъектОбновления = Объект.ОборотыПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(ОбъектОбновления,СтруктураПоиска);
				Если Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И (НЕ ПолеОбъекта(Объект.ФормируемыйБюджет,"ВключаяПодчиненныеПодразделения")) Тогда
					ОбъектОбновления.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
				ИначеЕсли Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
					ОбъектОбновления.Проект = Объект.Проект;
				КонецЕсли;
				ОбъектОбновления.ФинансовыйПоказатель = ПолеОбъекта(СтруктураПоиска["СтатьяБюджета"],"ФинансовыйПоказатель");
				ЗаполнитьЗначенияСвойств(ОбъектОбновления,ДопПараметры,,?(СтруктураПоиска.Свойство("ВалютаОперации"),"ВалютаОперации",""));
				Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) Тогда
					Если СтрокаРедактируемая.ВидГруппировки = "Номенклатура" Тогда
						ПересчитатьЦенуНаСервере(ОбъектОбновления.ПолучитьИдентификатор());
						Если ОбъектОбновления.Цена =0 И ДопПараметры.Свойство("Цена") Тогда
							ОбъектОбновления.Цена = ДопПараметры.Цена;
						КонецЕсли;
					КонецЕсли;
					Если КолонкаЦена<>"" Тогда
						СтрокаРедактируемая[КолонкаЦена]=ОбъектОбновления.Цена;
					КонецЕсли;
				КонецЕсли;
				ПриДобавленииВОбороты(ОбъектОбновления);
			Иначе
				ОбъектОбновления = СтрокиКОбновлению[0];		
				Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) Тогда
					Если ДопПараметры.Свойство("Цена") И КолонкаЦена<>"" Тогда
						ОбъектОбновления.Цена=ДопПараметры.Цена;
						СтрокаРедактируемая[КолонкаЦена]=ОбъектОбновления.Цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоКорректировка Тогда
			СтрокиКОтражениюРазницы = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКОтражениюРазницы.Количество() = 0 Тогда
				ОбъектОтраженияРазницы = Объект.ОборотыПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(ОбъектОтраженияРазницы,СтруктураПоиска);
				Если Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И (НЕ ПолеОбъекта(Объект.ФормируемыйБюджет,"ВключаяПодчиненныеПодразделения")) Тогда
					ОбъектОтраженияРазницы.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
				ИначеЕсли Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
					ОбъектОтраженияРазницы.Проект = Объект.Проект;
				КонецЕсли;
				ОбъектОтраженияРазницы.ФинансовыйПоказатель = ФинансовыйПоказательСтатьи(СтруктураПоиска["СтатьяБюджета"]);
				ЗаполнитьЗначенияСвойств(ОбъектОтраженияРазницы,ДопПараметры);
				ПриДобавленииВОбороты(ОбъектОтраженияРазницы);
			Иначе
				ОбъектОтраженияРазницы = СтрокиКОтражениюРазницы[0];		
			КонецЕсли;
			Если СтрокиКОбновлению.Количество() = 0 Тогда
				ОбъектОбновления = Новый Структура("Сумма,Количество",0,0);
			Иначе
				ОбъектОбновления = СтрокиКОбновлению[0];		
			КонецЕсли;
			Если Найти(КолонкаПериода,"ИтогоСумма") <> 0 Тогда
				ОбъектОтраженияРазницы.Сумма		= СтрокаРедактируемая[КолонкаПериода]-ОбъектОбновления.Сумма;	
			ИначеЕсли Найти(КолонкаПериода,"ИтогоКоличество") <> 0 Тогда
				ОбъектОтраженияРазницы.Количество	= СтрокаРедактируемая[КолонкаПериода]-ОбъектОбновления.Количество;		
				Если ПересчитанаСумма Тогда
					ОбъектОтраженияРазницы.Сумма		= СтрокаРедактируемая["ИтогоСумма"+Сред(КолонкаПериода,16)]-ОбъектОбновления.Сумма;	
				КонецЕсли;
			Иначе
				ОбъектОтраженияРазницы.Цена = СтрокаРедактируемая[КолонкаПериода];
			КонецЕсли;
		Иначе
			Если Найти(КолонкаПериода,"ИтогоСумма") <> 0 Тогда
				ОбъектОбновления.Сумма		= СтрокаРедактируемая[КолонкаПериода];	
			Иначе
				ОбъектОбновления.Количество	= СтрокаРедактируемая[КолонкаПериода];		
				Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) Тогда
					Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2 Тогда
						ОбъектОбновления.Сумма		= СтрокаРедактируемая["ИтогоСумма"+Сред(КолонкаПериода,16)];	
					Иначе
						Если ОбъектОбновления.Цена<>0 И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ОбъектОбновления.ФинансовыйПоказатель,ЭтотОбъект) Тогда
							ОбъектОбновления.Сумма		= ОбъектОбновления.Количество*ОбъектОбновления.Цена;
						КонецЕсли;
						СтрокаРедактируемая["ИтогоСумма"+Сред(КолонкаПериода,16)] = ОбъектОбновления.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТребуетсяПередачаДанных=Истина;
	КонецЕсли;
	// итоги в дереве
	Если РассчитыватьИтогиПриЗавершении = Истина Тогда
		РасчетИтоговВДеревеПриВыполненииИзменений(ТекущаяСтрока,Новый СписокЗначений,ДопПараметры.ПериодПланирования,СтрокаРедактируемая <> ТекущаяСтрока ИЛИ ТабличныйВариант);
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаИтогПриИзменении

&НаКлиенте
Процедура РасчетИтоговВДеревеПриВыполненииИзменений(ТекущаяСтрока,ЗатронутыеСтатьиБюджета=Неопределено,ПериодПланирования=Неопределено,ПересчетДляТекущейСтроки = Ложь)
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ПересчетДляТекущейСтроки И НЕ (ТабличныйВариант И ТипЗнч(ТекущаяСтрока)=Тип("ДанныеФормыДерево")) Тогда
			фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(ТекущаяСтрока,ДеревоСтрокБюджета,Объект,ЭтотОбъект);
		КонецЕсли;
		Если НЕ ТабличныйВариант Тогда
			СтрокаГруппы = ТекущаяСтрока;
			Пока СтрокаГруппы.ПолучитьРодителя() <> Неопределено Цикл
				СтрокаГруппы = СтрокаГруппы.ПолучитьРодителя();
			КонецЦикла;
			фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммыПоГруппам(СтрокаГруппы.ПолучитьИдентификатор(),ДеревоСтрокБюджета,Объект,ЭтотОбъект);
			РассчитыватьИтоги = Ложь;
		КонецЕсли;
	КонецЕсли;
//	ДеревоБюджетаПриАктивизацииСтроки(Элемент);
	РасчетПроизведен = ИнтерактивныйРасчетФормул  И (НЕ РежимМедленногоСоединения) И ПроизвестиРасчетыПоФормулам(?(ТекущаяСтрока.ВидГруппировки="",Неопределено,ТекущаяСтрока.ФинансовыйПоказатель),ПериодПланирования,ЗатронутыеСтатьиБюджета);
	Если РасчетПроизведен=Истина Тогда
		Если ЗатронутыеСтатьиБюджета = Неопределено Тогда
			ОбновитьПолеБюджета();
		ИначеЕсли ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
			ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
		КонецЕсли;
	Иначе
		РассчитыватьИтоги = Истина;
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

// Процедура ДеревоБюджетаЦенаПриИзменении
// 
&НаКлиенте
Процедура ДеревоБюджетаЦенаПриИзменении(Элемент,ВыбраннаяКолонка=Неопределено)
	ИзмененныйПериодПланирования = Неопределено;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	СтруктураПоиска 	= Новый Структура(СтруктураПоискаИзменяемых);
	ТекущаяСтрока 		= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	РедактируемаяСтрока = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если НЕ ТабличныйВариант Тогда
		ИзменяемоеИзмерение = ТекущаяСтрока.ВидГруппировки;
	КонецЕсли;
	КолонкаДерева = СтрЗаменить(?(ВыбраннаяКолонка=Неопределено,Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,ВыбраннаяКолонка),"ДеревоСтрокБюджета","");
	Если КолонкаДерева<>"Цена" Тогда
		СтруктураПоиска.Вставить("ПериодПланирования",ОбратноеСоответствиеПериодов.Получить(Число(Сред(КолонкаДерева,5))));
		ИзмененныйПериодПланирования = СтруктураПоиска.ПериодПланирования;
	КонецЕсли;
	СписокСтатей = Новый СписокЗначений;
	УстановленнаяЦена = РедактируемаяСтрока[КолонкаДерева];
	
	// расчет в дереве
	УстановитьЦенуВСтроках(РедактируемаяСтрока,КолонкаДерева,УстановленнаяЦена);
	// итоги в дереве
	//Если РассчитыватьИтогиПриЗавершении = Истина Тогда
	Если НЕ ТабличныйВариант Тогда
		Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	РасчетИтоговВДеревеПриВыполненииИзменений(ТекущаяСтрока,Новый СписокЗначений,,РедактируемаяСтрока <> ТекущаяСтрока ИЛИ ТабличныйВариант);
	//КонецЕсли;
	//Если РедактируемаяСтрока <> ТекущаяСтрока ИЛИ ТабличныйВариант Тогда
	//	фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(ТекущаяСтрока,ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	//КонецЕсли;
	//Если НЕ ТабличныйВариант Тогда
	//	СтрокаГруппы = ТекущаяСтрока;
	//	Пока СтрокаГруппы.ПолучитьРодителя() <> Неопределено Цикл
	//		СтрокаГруппы = СтрокаГруппы.ПолучитьРодителя();
	//	КонецЦикла;
	//	фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммыПоГруппам(СтрокаГруппы.ПолучитьИдентификатор(),ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	//КонецЕсли;
	
	// запись в данные документа
	
	Если НЕ РежимМедленногоСоединения Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			ТекущаяСтрока.Корректировки = 1;
			Если ОборотыПриКорректировке.НайтиСтроки(СтруктураПоиска).Количество() <>0 Тогда
				ТекущиеКорректировки = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);			
				Если ТекущиеКорректировки.Количество() > 0  Тогда
					//доделать Ответ = Вопрос("При изменении цены предыдущие корректировки по группе операций будут утеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
					//Если Ответ = КодВозвратаДиалога.Нет Тогда
					//	ОбновитьПолеБюджета();
					//	Возврат;
					//КонецЕсли;
					Для Каждого СтрокаКорректировок Из ТекущиеКорректировки Цикл
						Объект.ОборотыПоСтатьям.Удалить(СтрокаКорректировок);
					КонецЦикла;
				КонецЕсли;
				СтрокиКСторнированию = ОборотыПриКорректировке.НайтиСтроки(СтруктураПоиска);			
				СтрокиКОбновлению = Новый Массив;
				Для Каждого СтрокаСторно Из СтрокиКСторнированию Цикл
					Если УстановленнаяЦена <>0 И СтрокаСторно.Количество <>0 И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаСторно.ФинансовыйПоказатель,ЭтотОбъект) Тогда
						НоваяСтрокаСторно = Объект.ОборотыПоСтатьям.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаСторно,СтрокаСторно);
						НоваяСтрокаСторно.Сумма 			= НоваяСтрокаСторно.Количество*УстановленнаяЦена - НоваяСтрокаСторно.Сумма;
						НоваяСтрокаСторно.Количество 		= 0;
						НоваяСтрокаСторно.Цена 				= УстановленнаяЦена;
						ПриДобавленииВОбороты(НоваяСтрокаСторно);
						Если СписокСтатей.НайтиПоЗначению(НоваяСтрокаСторно.СтатьяБюджета)=Неопределено Тогда
							СписокСтатей.Добавить(НоваяСтрокаСторно.СтатьяБюджета);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
		Иначе
			СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
			СтрокаОбновить.Цена = УстановленнаяЦена;
			Если УстановленнаяЦена <>0 И СтрокаОбновить.Количество <>0 И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаОбновить.ФинансовыйПоказатель,ЭтотОбъект) Тогда
				СтрокаОбновить.Сумма = СтрокаОбновить.Количество*УстановленнаяЦена;
				Если СписокСтатей.НайтиПоЗначению(СтрокаОбновить.СтатьяБюджета)=Неопределено Тогда
					СписокСтатей.Добавить(СтрокаОбновить.СтатьяБюджета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТребуетсяПередачаДанных=Истина;
	КонецЕсли;

	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;

	РасчетПроизведен = ИнтерактивныйРасчетФормул И (НЕ РежимМедленногоСоединения) И ПроизвестиРасчетыПоФормулам(ФинансовыйПоказательСтатьи(СтруктураПоиска.СтатьяБюджета),ИзмененныйПериодПланирования,ЗатронутыеСтатьиБюджета);
	Если РасчетПроизведен=Истина И ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
		ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаЦенаПриИзменении

&НаКлиенте
Процедура УстановитьЦенуВСтроках(РедактируемаяСтрока,КолонкаДерева,УстановленнаяЦена)
	Если УстановленнаяЦена = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
		РедактируемаяСтрока.Корректировки 		= 1;
	КонецЕсли;
	Если БазовыйНаборКолонок>1 Тогда
		Для Инд = 1 По БазовыйНаборКолонок Цикл
			Если НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
				Если Число(Сред(КолонкаДерева,5))<>Инд Тогда
					Продолжить;
				КонецЕсли;
				РедактируемаяСтрока["Цена"+Строка(Инд)] = УстановленнаяЦена;
			КонецЕсли;
			РедактируемаяСтрока["ИтогоСумма"+Строка(Инд)] = РедактируемаяСтрока["ИтогоКоличество"+Строка(Инд)] * УстановленнаяЦена;
		КонецЦикла;
		Если ЕдинаяЦенаВБюджетномПериоде Тогда
			РедактируемаяСтрока.Цена 		= УстановленнаяЦена;
		КонецЕсли;
	Иначе
		РедактируемаяСтрока.ИтогоСумма 	= РедактируемаяСтрока.ИтогоКоличество * УстановленнаяЦена;
		РедактируемаяСтрока.Цена 		= УстановленнаяЦена;
	КонецЕсли;
	Для Каждого СтрокаПодчиненная Из РедактируемаяСтрока.ПолучитьЭлементы() Цикл
		УстановитьЦенуВСтроках(СтрокаПодчиненная,КолонкаДерева,УстановленнаяЦена);
	КонецЦикла;
КонецПроцедуры

// Процедура ДеревоБюджетаСостояниеПриИзменении
// 
&НаКлиенте
Процедура ДеревоБюджетаСостояниеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	//Если НЕ ТабличныйВариант Тогда
	//	Если ТекущаяСтрока.ВидГруппировки="" Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	ИмяКолонки = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
	Если (НЕ ТабличныйВариант) И ТекущаяСтрока.ВидГруппировки="" Тогда
		Если НЕ РежимМедленногоСоединения Тогда
			СтатьиГруппы = СтатьиГруппы(ТекущаяСтрока.СтатьяБюджета);
			Для Каждого СтатьяГруппы Из СтатьиГруппы Цикл
				СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура("СтатьяБюджета",СтатьяГруппы));
				Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
					СтрокаОбновить[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
				КонецЦикла;
			КонецЦикла;
		Иначе
			ТребуетсяПередачаДанных = Истина;
		КонецЕсли;
	Иначе
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
		СтруктураПоиска = Новый Структура(СтруктураПоискаИзменяемых);
		Если НЕ РежимМедленногоСоединения Тогда
			СтрокиКОбновлению = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
				СтрокаОбновить[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
			КонецЦикла;
		Иначе
			ТребуетсяПередачаДанных = Истина;
		КонецЕсли;
	КонецЕсли;
	УстановитьЗначениеВПодчиненныхСтроках(ТекущаяСтрока,ИмяКолонки,ТекущаяСтрока[ИмяКолонки]);
	Если ИмяКолонки="Состояние" И УчетнаяПолитикаБюджетирование.УчитыватьНепринятыеСтрокиБюджетов И ТекущаяСтрока.Состояние=фин_ОбщегоНазначенияКлиентПовтИсп.СостояниеОбъектаУтвержден() И ЗначениеЗаполнено(ТекущаяСтрока.ПричинаОтклонения) Тогда
		ТекущаяСтрока.ПричинаОтклонения = ПредопределенноеЗначение("Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка");
		Элементы.ДеревоСтрокБюджета.ТекущийЭлемент = Элементы.ДеревоСтрокБюджетаПричинаОтклонения;
		ДеревоБюджетаСостояниеПриИзменении(Элементы.ДеревоСтрокБюджетаПричинаОтклонения);
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ПослеРедактированияСостояния();
	КонецЕсли;
КонецПроцедуры //ДеревоБюджетаСостояниеПриИзменении

&НаКлиенте
Процедура УстановитьЗначениеВПодчиненныхСтроках(ТекущаяСтрока,ИмяКолонки,Значение)
	Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		ПодчиненнаяСтрока[ИмяКолонки] = Значение;
		УстановитьЗначениеВПодчиненныхСтроках(ПодчиненнаяСтрока,ИмяКолонки,Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияСостояния(ОбновлятьПолеБюджета = Ложь)
	Если ОбновлятьПолеБюджета = Истина Тогда
		ОбновитьПолеБюджета();
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаВалютаОперацииПриИзменении(Элемент)
	РасчетМоделейАктуален = Ложь;
	ТекущаяСтрока 	= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	//ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	Если ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
		ТекущаяГруппировка = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
	Иначе
		ТекущаяГруппировка = ТекущаяСтрока.ВидГруппировки;
	КонецЕсли;
	Если УжеИмеетсяСтрокаСТакимЗначениемРазреза(ТекущаяСтрока.ПолучитьРодителя(),ТекущаяГруппировка,ТекущаяСтрока[ТекущаяГруппировка]) >1 Тогда
		ПоказатьПредупреждение(,"В указанной группе уже имеются строки с указанным значением аналитики и указанной валютой!");
		ТекущаяСтрока.ВалютаОперации = СтараяВалютаБюджетнойСтроки;
		Возврат;	
	КонецЕсли;
	
	ПересчетСумм	=	Ложь;
	Если (НЕ ТекущаяСтрока.ВалютаОперации = СтараяВалютаБюджетнойСтроки) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
		Если НЕ ЗначениеЗаполнено(СтараяВалютаБюджетнойСтроки) Тогда
			ОбработчикСогласияНаПересчетСуммыВДереве(КодВозвратаДиалога.Нет,ТекущаяСтрока.ПолучитьИдентификатор());
		Иначе
			ОписаниеОповещенияИзменениеВалютыВДереве = Новый ОписаниеОповещения("ОбработчикСогласияНаПересчетСуммыВДереве",ЭтотОбъект,ТекущаяСтрока.ПолучитьИдентификатор());
			ПоказатьВопрос(ОписаниеОповещенияИзменениеВалютыВДереве,"Изменилась валюта статьи. Пересчитать суммы операций?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийТаблицыПланируемыеМероприятия

&НаКлиенте
Процедура ПланируемыеМероприятияОтветственныйПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПланируемыеМероприятия.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		ТекущиеДанные.Пользователь = ПланируемыеМероприятияПолучитьПользователя(ТекущиеДанные.Исполнитель);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ КурсыВалютДокумента

#Область ОбработчикиСобытийТаблицыКурсыВалютДокумента

&НаКлиенте
Процедура КурсыВалютДокументаПериодПланированияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КурсыВалютДокумента.ТекущиеДанные;
	ТекущиеДанные.ПериодПланирования = ПривестиПериодПланированияКДатеСценарияНаСервере(ТекущиеДанные.ПериодПланирования,Объект.Сценарий)
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.КурсыВалютДокумента.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.ПериодПланирования	= Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КЭШКурсов.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютДокументаПослеУдаления(Элемент)
	КЭШКурсов.Очистить();
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ПоказыватьТабличныеЧасти(Команда)
	Элементы.ФормаПоказыватьТабличныеЧасти.Пометка 	= НЕ Элементы.ФормаПоказыватьТабличныеЧасти.Пометка;
	Показывать 										= Элементы.ФормаПоказыватьТабличныеЧасти.Пометка;
	Элементы.ГруппаОборотыПоСтатьям.Видимость 		= Показывать;
	Элементы.ГруппаЗависимыеОбороты.Видимость 		= Показывать;
	Элементы.ГруппаРасчетыПоМоделям.Видимость 		= Показывать;
	Элементы.ГруппаИсходныеДанные.Видимость 		= Показывать;
	Элементы.ГруппаЗаявкиНаФормирование.Видимость 	= Показывать И Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Бюджет");
КонецПроцедуры

&НаКлиенте
Процедура ИнтерактивныйРасчетФормул(Команда)
	Элементы.ФормаИнтерактивныйРасчетФормул.Пометка = НЕ Элементы.ФормаИнтерактивныйРасчетФормул.Пометка;
	ИнтерактивныйРасчетФормул 						= Элементы.ФормаИнтерактивныйРасчетФормул.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьДействие(Команда)
	ОтменитьДействиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьДействие(Команда)
	ВернутьДействиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПереоцениваемыхДокументов(Команда)
	Список = СписокПереоцениваемыхДокументовНаСервере();
	ОткрытьФорму("Документ.фин_Бюджет.ФормаСписка",Новый Структура("Отбор",Новый Структура("Ссылка",Список)),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура РежимМедленногоСоединения(Команда)
	РежимМедленногоСоединенияНаСервере();
	//РежимМедленногоСоединения = НЕ РежимМедленногоСоединения;
	//Элементы.ФормаРежимМедленногоСоединения.Пометка = РежимМедленногоСоединения;
	//Если НЕ РежимМедленногоСоединения Тогда
	//	ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	//КонецЕсли;
	//Элементы.ФормаИнтерактивныйРасчетФормул.Видимость = НЕ РежимМедленногоСоединения;
	//Элементы.ДеревоСтрокБюджетаПоместитьДанныеВДокумент.Видимость = РежимМедленногоСоединения;
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьДокумент(Команда)
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	Если ПровестиИЗакрытьНаСервере() Тогда
		Если ЭтоНовый Тогда
			ОповеститьОЗаписиНового(Объект.Ссылка);
		Иначе
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗависимости(Команда)
	РассчитатьЗависимостиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУровеньАналитики(Команда)
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТабличныйВариантТолькоДляАналитики Тогда
		Если ТекущиеДанные.ВидГруппировки = "" ИЛИ ТекущиеДанные.ВидГруппировки = "ТаблицаАналитики" ИЛИ (ТекущиеДанные.ВидГруппировки = "СтатьяБюджета" И СтруктураРазрезовБюджета.Количество()=0) Тогда
			ПоказатьПредупреждение(,"Для данного уровня аналитики не предусмотрена детализация!");
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.ВидГруппировки = "СтатьяБюджета" И ТекущиеДанные.ПолучитьЭлементы().Количество()>0 Тогда
			ПоказатьПредупреждение(,"Расшифровка по аналитике уже добавлена!");
			Возврат;
		КонецЕсли;
		ИзменяемоеИзмерение = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
	Иначе
		Если ТекущиеДанные.ВидГруппировки = "" ИЛИ ТекущиеДанные.ВидГруппировки = "ВалютаОперации" ИЛИ (ТекущиеДанные.ВидГруппировки <> "СтатьяБюджета" И СтруктураРазрезовБюджета.Количество()-1=СтруктураРазрезовБюджета.Индекс(СтруктураРазрезовБюджета.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ТекущиеДанные.ВидГруппировки)))) Тогда
			ПоказатьПредупреждение(,"Для данного уровня аналитики не предусмотрена детализация!");
			Возврат;
		КонецЕсли;
		ИзменяемоеИзмерение 		= ТекущиеДанные.ВидГруппировки;
	КонецЕсли;
	// СтруктураНастроекЗаполненияАналитики	
	СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура;
	мСтруктураПоискаИзменяемых 	= Новый Структура;
	Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") Тогда
		ПоказатьПредупреждение(,"Рассчитываемые показатели не редактируются вручную!");
		Возврат;
	КонецЕсли;
	Если ТабличныйВариантТолькоДляАналитики Тогда
		ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая");
		НоваяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные,,"СтатьяБюджета,КодСтрокиБюджета");
		НоваяСтрока.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
		НоваяСтрока.ВидГруппировки = "ТаблицаАналитики";
		Возврат; // дальнейших действий не требуется
	КонецЕсли;
	мСтруктураПоискаИзменяемых.Вставить(ТекущиеДанные.ВидГруппировки+"Отбор",Истина);
	мСтруктураПоискаИзменяемых.Вставить(ТекущиеДанные.ВидГруппировки+"Значение",ТекущиеДанные[ТекущиеДанные.ВидГруппировки]);
	ТекущаяСтрока = ТекущиеДанные;
	Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" И ТекущаяСтрока.ВидГруппировки <> "" И ТекущаяСтрока<>Неопределено Цикл
		ТекущаяСтрока 			= ТекущаяСтрока.ПолучитьРодителя();
		Если ТекущаяСтрока.ВидГруппировки <> "" Тогда
			мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки+"Отбор",Истина);
			мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки+"Значение",ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
		КонецЕсли;
	КонецЦикла;
	мСтруктураНастроекЗаполненияАналитики = Новый Структура(СтруктураНастроекЗаполненияАналитики);
	мСтруктураНастроекЗаполненияАналитики.Вставить("Условие",		мСтруктураПоискаИзменяемых);
	СтруктураНастроекЗаполненияАналитики = Новый ФиксированнаяСтруктура(мСтруктураНастроекЗаполненияАналитики);
	СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура(мСтруктураПоискаИзменяемых);
	СО = Неопределено;
	СтруктураПоискаИзменяемых.Свойство("СтатьяБюджетаЗначение",	СО);
	ОписаниеОповещенияНастройкаАналитики = Новый ОписаниеОповещения("ОбработчикОповещенияНастройкиАналитики",ЭтотОбъект,Новый Структура("СтатьяБюджета,ИдентификаторСтроки",СО,ТекущиеДанные.ПолучитьИдентификатор()));
	НастройкиФормы = Новый Структура("Настройки,СтруктураРазрезовБюджета,Статья",СтруктураНастроекЗаполненияАналитики,СтруктураРазрезовБюджета,СО);
	НастройкиФормы.Вставить("ДокументСсылка",					Объект.Ссылка);
	НастройкиФормы.Вставить("Сценарий",							Объект.Сценарий);
	НастройкиФормы.Вставить("УправленческоеПодразделение",		Объект.УправленческоеПодразделение);
	НастройкиФормы.Вставить("УровеньДетализацииБюджета",		Объект.УровеньДетализацииБюджета);
	НастройкиФормы.Вставить("ФормируемыйБюджет",				Объект.ФормируемыйБюджет);
	НастройкиФормы.Вставить("Организация",						Объект.Организация);
	НастройкиФормы.Вставить("ПериодПланирования",				Объект.ПериодПланирования);
	ОткрытьФорму("Документ.фин_Бюджет.Форма.НастройкаАналитики",НастройкиФормы,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияНастройкаАналитики,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	Модифицированность = Истина;
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если РасшифровкаПоля.ВидПоля = "Измерение" Тогда
				Отбор.Вставить(РасшифровкаПоля.Поле,РасшифровкаПоля.Значение);
			КонецЕсли;
			Если Отбор.Свойство("СтатьяБюджета") Тогда
				ВидСтроки = ОпределитьВидСтрокиБюджетаКлиент(Отбор.СтатьяБюджета);
				Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранная статья бюджета """+Отбор.СтатьяБюджета+""" не явлется первичной ("+НРег(ВидСтроки)+")! Редактирование не предусмотрено");
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ФинансовыйПоказатель 	= ?(Отбор.Свойство("СтатьяБюджета"),ФинансовыйПоказательСтатьи(Отбор.СтатьяБюджета),Неопределено);
			ПериодПланирования 		= ?(Отбор.Свойство("ПериодПланирования"),Отбор.ПериодПланирования,Неопределено);
			СтрокиДокумента = Объект.ОборотыПоСтатьям.НайтиСтроки(Отбор);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				Объект.ОборотыПоСтатьям.Удалить(СтрокаДокумента);
			КонецЦикла;
			РасчетПроизведен = ИнтерактивныйРасчетФормул  И (НЕ РежимМедленногоСоединения) И ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,ПериодПланирования);
			НастройкаРедактированияПриИзмененииНаСервере();
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные =Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ТабличныйВариант Тогда
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
			Если РодительСтроки <> Неопределено Тогда
				Если РодительСтроки.ПолучитьЭлементы().Количество() <=1 Тогда
					ПоказатьПредупреждение(,"Невозможно удалить единственную строку уровня аналитики!
					|Воспользуйтесь командой ""Удалить уровень аналитики""");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РодительСтроки = ДеревоСтрокБюджета;
		КонецЕсли;
		СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура;
		мСтруктураПоискаИзменяемых 	= Новый Структура;
		Если НЕ ТабличныйВариант Тогда
			Если ТекущиеДанные.ВидГруппировки="" Тогда
				ПоказатьПредупреждение(,"Нельзя удалить данную строку!");
				Возврат;
			КонецЕсли;
			Если ТекущиеДанные.ВидГруппировки="СтатьяБюджета" Тогда
				ПоказатьПредупреждение(,"Нельзя удалить данную строку!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") Тогда
			ПоказатьПредупреждение(,"Рассчитываемые строки не редактируются вручную!");
			Возврат;
		КонецЕсли;
		ИзменяемоеИзмерение 		= ТекущиеДанные.ВидГруппировки;
		Если НЕ (ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики) Тогда
			мСтруктураПоискаИзменяемых.Вставить(ТекущиеДанные.ВидГруппировки,ТекущиеДанные[ТекущиеДанные.ВидГруппировки]);
			ТекущаяСтрока = ТекущиеДанные;
			Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" И ТекущаяСтрока<>Неопределено Цикл
				ТекущаяСтрока 			= ТекущаяСтрока.ПолучитьРодителя();
				мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
			КонецЦикла;
			СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура(мСтруктураПоискаИзменяемых);
		Иначе
			ПолучитьСтруктуруПоискаИзменяемыхСтрок();
			мСтруктураПоискаИзменяемых = Новый Структура(СтруктураПоискаИзменяемых);
		КонецЕсли;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			Если ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоискаИзменяемых).Количество() >0 Тогда
				ПоказатьПредупреждение(,"Нельзя удалить строку, полученную из учетных данных!
				|Возможно только приравнять суммы оборотов к нулю!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если НЕ РежимМедленногоСоединения Тогда
			СтрокиКУдалению = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоискаИзменяемых);
			Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
				Объект.ОборотыПоСтатьям.Удалить(СтрокаУдалить);
			КонецЦикла;
		Иначе
			ТребуетсяПередачаДанных = Истина;
		КонецЕсли;
		СтрокиРодителя 		= РодительСтроки.ПолучитьЭлементы();
		ИндексУдаляемого 	= СтрокиРодителя.Индекс(ТекущиеДанные);
		Если СтрокиРодителя.Количество()=1 Тогда
			// не активизируем никаких строк
		ИначеЕсли ИндексУдаляемого + 1 = СтрокиРодителя.Количество() Тогда
			Элементы.ДеревоСтрокБюджета.ТекущаяСтрока = СтрокиРодителя.Получить(ИндексУдаляемого-1).ПолучитьИдентификатор();
		ИначеЕсли ИндексУдаляемого = 0 Тогда
			Элементы.ДеревоСтрокБюджета.ТекущаяСтрока = СтрокиРодителя.Получить(1).ПолучитьИдентификатор();
		Иначе
			Элементы.ДеревоСтрокБюджета.ТекущаяСтрока = СтрокиРодителя.Получить(ИндексУдаляемого+1).ПолучитьИдентификатор();
		КонецЕсли;
		РодительСтроки.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		РасчетМоделейАктуален = Ложь;
		// итоги в дереве
		ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
		РасчетИтоговВДеревеПриВыполненииИзменений(РодительСтроки,ЗатронутыеСтатьиБюджета,,Истина);
	КонецЕсли;
	Если ЗапоминатьДействий > 0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУровеньАналитики(Команда)
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	Если РодительСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтоПоследнийРазрез = Истина;
	Если ТекущиеДанные.ВидГруппировки <> "ТаблицаАналитики" И НЕ ТабличныйВариантТолькоДляАналитики Тогда
		Для Каждого ЭлементСтрок Из РодительСтроки.ПолучитьЭлементы() Цикл
			Если ЭлементСтрок.ПолучитьЭлементы().Количество()>0 Тогда
				ЭтоПоследнийРазрез = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоискаИзменяемых = Новый ФиксированнаяСтруктура;
	мСтруктураПоискаИзменяемых = Новый Структура;
	Если ТекущиеДанные.ВидГруппировки="ВалютаОперации" ИЛИ ТекущиеДанные.ВидГруппировки="" ИЛИ ТекущиеДанные.ВидГруппировки="СтатьяБюджета" ИЛИ (ТекущиеДанные.ВидГруппировки="УправленческоеПодразделение" И ЗначениеЗаполнено(Объект.УправленческоеПодразделение))
		ИЛИ (ТекущиеДанные.ВидГруппировки="Проект" И ЗначениеЗаполнено(Объект.Проект)) Тогда
		ПоказатьПредупреждение(,"Нельзя удалить выбранный уровень аналитики!");
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") Тогда
		ПоказатьПредупреждение(,"Рассчитываемые показатели не могут быть удалены!");
		Возврат;
	КонецЕсли;
	ИзменяемоеИзмерение = ТекущиеДанные.ВидГруппировки;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	Если ТабличныйВариантТолькоДляАналитики Тогда
		мСтруктураПоискаИзменяемых = Новый Структура("СтатьяБюджета",РодительСтроки.СтатьяБюджета);
	Иначе
		мСтруктураПоискаИзменяемых = Новый Структура(СтруктураПоискаИзменяемых);
		Если мСтруктураПоискаИзменяемых.Свойство(ТекущиеДанные.ВидГруппировки) Тогда
			 мСтруктураПоискаИзменяемых.Удалить(ТекущиеДанные.ВидГруппировки);
		 КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
		Если ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоискаИзменяемых).Количество() >0 Тогда
			ПоказатьПредупреждение(,"Нельзя удалить строки, полученные из учетных данных!
			|Возможно только приравнять суммы оборотов к нулю!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТекущаяСтрока 	= РодительСтроки;
	Если (НЕ РежимМедленногоСоединения) ИЛИ НЕ ЭтоПоследнийРазрез Тогда
		СтрокиКУдалению = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоискаИзменяемых);
		КоличествоСтрок = СтрокиКУдалению.Количество();
		Если ЭтоПоследнийРазрез Тогда
			Для Инд =1 По КоличествоСтрок-1 Цикл
				Объект.ОборотыПоСтатьям.Удалить(СтрокиКУдалению[Инд]);   
			КонецЦикла;
		Иначе
			Для Инд =0 По КоличествоСтрок-1 Цикл
				ПустоеЗначениеТипа = ТипЗначенияДляВвода(ИзменяемоеИзмерение,ПолеОбъекта(СтруктураПоискаИзменяемых.СтатьяБюджета,"ФинансовыйПоказатель")).ПривестиЗначение(Неопределено);
				СтрокиКУдалению[Инд][ИзменяемоеИзмерение]  = ПустоеЗначениеТипа;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ТребуетсяПередачаДанных = Истина;
	КонецЕсли;
	//Если СтрокиКУдалению.Количество() =0 Тогда
	//	Возврат;
	//КонецЕсли;
	Элементы.ДеревоСтрокБюджета.ТекущаяСтрока = РодительСтроки.ПолучитьИдентификатор();
	Если (НЕ РежимМедленногоСоединения) ИЛИ НЕ ЭтоПоследнийРазрез Тогда
		РодительСтроки.ПолучитьЭлементы().Очистить();
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Если ЭтоПоследнийРазрез Тогда
				СтрокаЭталон			 	= СтрокиКУдалению[0];
				Если ПродолжительностьЦикла >1 Тогда
					СтрокаЭталон.Сумма 				= ?(СтруктураПоказателей.Сумма,ТекущаяСтрока.ИтогоСумма1,0);
					СтрокаЭталон.Количество 		= ?(СтруктураПоказателей.Количество,ТекущаяСтрока.ИтогоКоличество1,0);
					СтрокаЭталон.ПериодПланирования = ОбратноеСоответствиеПериодов.Получить(1);
				Иначе
					СтрокаЭталон.Сумма 				= ?(СтруктураПоказателей.Сумма,ТекущаяСтрока.ИтогоСумма,0);
					СтрокаЭталон.Количество 		= ?(СтруктураПоказателей.Количество,ТекущаяСтрока.ИтогоКоличество,0);
					СтрокаЭталон.ПериодПланирования = Объект.ПериодПланирования;
				КонецЕсли;
				Если ТабличныйВариантТолькоДляАналитики Тогда
					Для Каждого ИзмерениеБюджета Из СтруктураРазрезовБюджета Цикл
						СтрокаЭталон[ИзмерениеБюджета.Представление] 	= ПустоеЗначениеРазреза(ИзмерениеБюджета.Представление,СтрокаЭталон.ФинансовыйПоказатель);
					КонецЦикла;
				Иначе
					СтрокаЭталон[ИзменяемоеИзмерение] 	= ПустоеЗначениеРазреза(ИзменяемоеИзмерение,СтрокаЭталон.ФинансовыйПоказатель);
				КонецЕсли;
				ПриДобавленииВОбороты(СтрокаЭталон);
				Если НЕ ЗначениеЗаполнено(СтрокаЭталон.Номенклатура) Тогда
					СтрокаЭталон.Цена 				= 0;
				//	СтрокаЭталон.Количество			= 0;
				КонецЕсли;
				Для Каждого НП Из ОбратноеСоответствиеПериодов Цикл
					Если НП.Ключ <> 1 Тогда
						Если ТекущаяСтрока["ИтогоСумма"+Строка(НП.Ключ)]=0 И ТекущаяСтрока["ИтогоКоличество"+Строка(НП.Ключ)]=0 Тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЭталон,,"Сумма,Количество");
						СтрокаЭталон.Сумма 				= ?(СтруктураПоказателей.Сумма,ТекущаяСтрока["ИтогоСумма"+Строка(НП.Ключ)],0);
						Если ЗначениеЗаполнено(СтрокаЭталон.Номенклатура) Тогда
							СтрокаЭталон.Количество 	= ?(СтруктураПоказателей.Количество,ТекущаяСтрока["ИтогоКоличество"+Строка(НП.Ключ)],0);
						КонецЕсли;
						СтрокаЭталон.ПериодПланирования = НП.Значение;
						ПриДобавленииВОбороты(НоваяСтрока);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЗаполнитьЭлементыДерева(РодительСтроки.ПолучитьИдентификатор(),ИзменяемоеИзмерение);
				СвернутьОбороты();
			КонецЕсли;
		КонецЕсли;
	Иначе
		РодительСтроки.ПолучитьЭлементы().Очистить();
	   	ТребуетсяПередачаДанных = Истина;
	КонецЕсли;
	Если РодительСтроки.ПолучитьЭлементы().Количество() = 0 Тогда
		РодительСтроки.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
	КонецЕсли;
	РасчетМоделейАктуален = Ложь;
	// итоги в дереве
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	РасчетИтоговВДеревеПриВыполненииИзменений(РодительСтроки,ЗатронутыеСтатьиБюджета,,Истина);
	Если ЗапоминатьДействий > 0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеСтатей(Команда)
	Значение = ПредопределенноеЗначение("Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.ПустаяСсылка");
	ОписаниеОповещенияВыбораСостояния = Новый ОписаниеОповещения("ОбработчикВыбораСостояния",ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещенияВыбораСостояния,Значение,"Введите состояние, устанавливаемое для всех статей",Тип("ПеречислениеСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьюБюджета(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если НЕ Отбор.Свойство("СтатьяБюджета") Тогда
				Возврат;
			КонецЕсли;
			СтатьяБюджета = Отбор.СтатьяБюджета;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтатьяБюджета = ТекущиеДанные.СтатьяБюджета;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатьяБюджета) Тогда
		ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаОбъекта",Новый Структура("Ключ",СтатьяБюджета),,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФинансовыйПоказатель(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если НЕ (Отбор.Свойство("СтатьяБюджета") ИЛИ Отбор.Свойство("ФинансовыйПоказатель")) Тогда
				Возврат;
			КонецЕсли;
			Если Отбор.Свойство("ФинансовыйПоказатель") Тогда
				СтатьяБюджета = Отбор.ФинансовыйПоказатель;
			Иначе
				СтатьяБюджета = ПолеОбъекта(Отбор.СтатьяБюджета,"ФинансовыйПоказатель");
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтатьяБюджета = ТекущиеДанные.ФинансовыйПоказатель;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатьяБюджета) Тогда
		ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаОбъекта",Новый Структура("Ключ",СтатьяБюджета),,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеБюджета1(Команда)
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
    Иначе
		ОбновитьПолеБюджетаНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьБюджет(Команда)
	РассчитатьБюджетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоМоделям(Команда)
	//Если Объект.Проведен Тогда
	//	ОписаниеОповещенияВопросОтменыПроведенияПередРасчетомМоделей = Новый ОписаниеОповещения("ОбработчикОповещенияВопросОтменыПроведенияПередРасчетомМоделей",ЭтотОбъект);
	//	ПоказатьВопрос(ОписаниеОповещенияВопросОтменыПроведенияПередРасчетомМоделей,"Перед расчетом необходимо отменить проведение. Отменить проведение?", РежимДиалогаВопрос.ДаНет);
	//ИначеЕсли Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента = Новый ОписаниеОповещения("ОбработчикОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента,"Перед расчетом необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		РасчетПоМоделямКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФормулыБюджета(Команда)
	РассчитатьФормулыБюджетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФормулыБюджетаСРасшифровкой(Команда)
	РассчитатьФормулыБюджетаНаСервере(Истина);
	ОткрытьФорму("Документ.фин_Бюджет.Форма.ФормаРасшифровкиРасчетов",Новый Структура("АдресДанных,Сценарий",АдресДанныхОтладки,Объект.Сценарий),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыбраннуюФормулуБюджетаСРасшифровкой(Команда)
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле") Тогда
			ПоказатьПредупреждение(,"Выбранная строка не рассчитывается по формуле");
			Возврат;
		КонецЕсли;
		РассчитатьФормулыБюджетаНаСервере(Истина,ТекущиеДанные.ФинансовыйПоказатель);
		ОткрытьФорму("Документ.фин_Бюджет.Форма.ФормаРасшифровкиРасчетов",Новый Структура("АдресДанных,Сценарий",АдресДанныхОтладки,Объект.Сценарий),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВнешниеДанныеБюджета(Команда)
	ОбновитьВнешниеДанныеБюджетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныИзИсточников(Команда)
	ОбновитьЦеныИзИсточниковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(Команда)
	ОписаниеОповещенияВопросаОчиститьБюджет = Новый ОписаниеОповещения("ОбработчикВопросаОчиститьБюджет",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияВопросаОчиститьБюджет,"Все введенные пользователем данные текущего документа будут очищены. Продолжить?",РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуВДерево();
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗначениюКолонки(Команда)
	ДобавитьСтрокуВДерево(,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗначениюКолонкиСКопированием(Команда)
	ДобавитьСтрокуВДерево(Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСтроки(Команда)
	ОчиститьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДляВсехБюджетовВсехПользователей(Команда)
	СохранитьНастройкуНаСервере(,,ВариантРедактированияБюджета,ФиксацияКолонокБюджета,АвтоВысотаЯчеекАналитики,АвтоВысотаЯчейкиСтатьи,НастройкаРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДляВсехБюджетовТекущегоПользователя(Команда)
	СохранитьНастройкуНаСервере(Истина,,ВариантРедактированияБюджета,ФиксацияКолонокБюджета,АвтоВысотаЯчеекАналитики,АвтоВысотаЯчейкиСтатьи,НастройкаРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДляВыбранногоБюджетаВсехПользователей(Команда)
	СохранитьНастройкуНаСервере(,Объект.ФормируемыйБюджет,ВариантРедактированияБюджета,ФиксацияКолонокБюджета,АвтоВысотаЯчеекАналитики,АвтоВысотаЯчейкиСтатьи,НастройкаРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДляВыбранногоБюджетаТекущегоПользователя(Команда)
	СохранитьНастройкуНаСервере(Истина,Объект.ФормируемыйБюджет,ВариантРедактированияБюджета,ФиксацияКолонокБюджета,АвтоВысотаЯчеекАналитики,АвтоВысотаЯчейкиСтатьи,НастройкаРедактирования);
КонецПроцедуры


&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	ДобавитьСтрокуВДерево(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоМоделямДоТочкиОстанова(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед расчетом необходимо записать документ");
	Иначе
		ОписаниеОповещенияВыборПараметровОтладки = Новый ОписаниеОповещения("ОбработчикОповещенияВыборПараметровОтладки",ЭтотОбъект,"До");
		ПараметрыФормы = Новый Структура("ЦиклЗаголовок,ПриоритетЗаголовок","Расчетный цикл, до которого производится расчет моделей максимального приоритета","Приоритет моделей, до которого производится расчет");
		ОткрытьФорму("Документ.фин_Бюджет.Форма.ВводПараметровОтладкиМоделей",ПараметрыФормы,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияВыборПараметровОтладки,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешниеОбороты(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если НЕ Отбор.Свойство("СтатьяБюджета") Тогда
				Возврат;
			КонецЕсли;
			Если Отбор.Свойство("ФинансовыйПоказатель") Тогда
				ФинансовыйПоказатель = Отбор.ФинансовыйПоказатель;
			Иначе
				ФинансовыйПоказатель = ПолеОбъекта(Отбор.СтатьяБюджета,"ФинансовыйПоказатель");
			КонецЕсли;
			ТекущиеДанные = Новый Структура("ФинансовыйПоказатель,ВидСтроки",ФинансовыйПоказатель,ОпределитьВидСтрокиБюджетаКлиент(Отбор.СтатьяБюджета));
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Отбор = Неопределено;
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Бюджет") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Наследуемая") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости") Тогда
			ПоказатьПредупреждение(,"Указанная строка не содержит внешних оборотов!");
			Возврат;
		КонецЕсли;
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	КонецЕсли;
	ТабличныйДокумент = ВнешниеОборотыНаСервере(ТекущиеДанные.ФинансовыйПоказатель,ТекущиеДанные.ВидСтроки,Отбор);
	Если ТабличныйДокумент<>Неопределено Тогда 
		ТабличныйДокумент.Показать("Расшифровка внешних оборотов");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЛимитовПоСтроке(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если НЕ Отбор.Свойство("СтатьяБюджета") Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		ПроверитьЛимитыНаСервереДляСКД(ОпределитьВидСтрокиБюджетаКлиент(Отбор.СтатьяБюджета),Отбор);
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
		ПроверитьЛимитыНаСервере(ТекущиеДанные.ВидСтроки,ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаявкуНаРасходДенежныхСредств(Команда)
	Если Элементы.ДеревоСтрокБюджета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Найти(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ИтогоСумма")=0 Тогда
		ПоказатьПредупреждение(,"Должна быть выбрана ячейка с суммой!");
		Возврат;
	КонецЕсли;
	
	ПериодПланирования = ?(ПродолжительностьЦикла<2 ИЛИ Прав(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,1)="а",Объект.ПериодПланирования,ОбратноеСоответствиеПериодов.Получить(Число(СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджетаИтогоСумма",""))));
	ТекущиеДанныеДерева = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	СуммаЗаявки 					= ТекущиеДанныеДерева[СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","")];
	СтруктураЗаявки = Новый Структура;
	СтрокаРасшифровка = Новый Структура;
	СтрокаРасшифровка.Вставить("СуммаПлатежа",СуммаЗаявки);
	СтрокаРасшифровка.Вставить("СуммаВзаиморасчетов",СуммаЗаявки);
	СтруктураЗаявки.Вставить("СуммаДокумента",СуммаЗаявки);
	СтруктураЗаявки.Вставить("ВалютаДокумента",?(Объект.ЕдинаяВалюта,Объект.ВалютаДокумента,ТекущиеДанныеДерева.ВалютаОперации));
	Курс = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,СтруктураЗаявки.ВалютаДокумента,ПериодПланирования);
	СтрокаРасшифровка.Вставить("КурсВзаиморасчетов",Курс.Курс);
	СтрокаРасшифровка.Вставить("КратностьВзаиморасчетов",Курс.Кратность);
	ФинансовыйПоказательЗаявки 		= Неопределено;
	Разрезы = Новый Соответствие;
	СтрокаДляОбработки = ТекущиеДанныеДерева;
	МассивБюджетныеПараметры = Новый Соответствие;
	Если НЕ (ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики) Тогда
		Пока СтрокаДляОбработки.ВидГруппировки <> "СтатьяБюджета" И СтрокаДляОбработки.ВидГруппировки<>"" Цикл
			ВидГруппировки = СтрокаДляОбработки.ВидГруппировки;
			ДоступноЗаполнениеИзДокумента = Ложь;
			Если ВидГруппировки = "Проект" Тогда
				СтрокаРасшифровка.Вставить("Проект",СтрокаДляОбработки["Проект"]);
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки = "УправленческоеПодразделение" Тогда
				СтрокаРасшифровка.Вставить("ЦФО", СтрокаДляОбработки["УправленческоеПодразделение"]);
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки = "Контрагент" Тогда
				СтруктураЗаявки.Вставить("Контрагент", СтрокаДляОбработки["Контрагент"]);
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки <> "ТаблицаАналитики" Тогда
				Если ТипЗнч(СтрокаДляОбработки[ВидГруппировки])=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					СтрокаРасшифровка.Вставить("ДоговорКонтрагента", СтрокаДляОбработки[ВидГруппировки]);
				ИначеЕсли ТипЗнч(СтрокаДляОбработки[ВидГруппировки])=Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
					СтрокаРасшифровка.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаДляОбработки[ВидГруппировки]);
					ДоступноЗаполнениеИзДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
			МассивБюджетныеПараметры.Вставить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+СтрокаДляОбработки.ВидГруппировки),?(ДоступноЗаполнениеИзДокумента,ПредопределенноеЗначение("Перечисление.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента"),СтрокаДляОбработки[ВидГруппировки]));
			СтрокаДляОбработки = СтрокаДляОбработки.ПолучитьРодителя();
		КонецЦикла;
		Если Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
			СтрокаРасшифровка.Вставить("Проект",Объект.Проект);
			МассивБюджетныеПараметры.Вставить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект"),ПредопределенноеЗначение("Перечисление.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента"));
		ИначеЕсли Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения Тогда
			СтрокаРасшифровка.Вставить("ЦФО", Объект.УправленческоеПодразделение);
			МассивБюджетныеПараметры.Вставить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение"),ПредопределенноеЗначение("Перечисление.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента"));
		КонецЕсли;
	ИначеЕсли ТабличныйВариант ИЛИ ТекущиеДанныеДерева.ВидГруппировки = "ТаблицаАналитики" Тогда
		СтрокаДляОбработки = ТекущиеДанныеДерева;
		Для Каждого РазрезБюджета Из СтруктураРазрезовБюджета Цикл
		//Пока СтрокаДляОбработки.ВидГруппировки <> "СтатьяБюджета" И СтрокаДляОбработки.ВидГруппировки<>"" Цикл
			ВидГруппировки = РазрезБюджета.Представление;
			ДоступноЗаполнениеИзДокумента = Ложь;
			Если ВидГруппировки = "Проект" Тогда
				СтрокаРасшифровка.Вставить("Проект",?(Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"),Объект.Проект,СтрокаДляОбработки["Проект"]));
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки = "УправленческоеПодразделение" Тогда
				СтрокаРасшифровка.Вставить("ЦФО", ?(Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения,Объект.УправленческоеПодразделение,СтрокаДляОбработки["УправленческоеПодразделение"]));
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки = "Контрагент" Тогда
				СтруктураЗаявки.Вставить("Контрагент", СтрокаДляОбработки["Контрагент"]);
				ДоступноЗаполнениеИзДокумента = Истина;
			ИначеЕсли ВидГруппировки <> "ТаблицаАналитики" Тогда
				Если ТипЗнч(СтрокаДляОбработки[ВидГруппировки])=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					СтрокаРасшифровка.Вставить("ДоговорКонтрагента", СтрокаДляОбработки[ВидГруппировки]);
				ИначеЕсли ТипЗнч(СтрокаДляОбработки[ВидГруппировки])=Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
					СтрокаРасшифровка.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаДляОбработки[ВидГруппировки]);
					ДоступноЗаполнениеИзДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
			МассивБюджетныеПараметры.Вставить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ВидГруппировки),?(ДоступноЗаполнениеИзДокумента,ПредопределенноеЗначение("Перечисление.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента"),СтрокаДляОбработки[ВидГруппировки]));
			//СтрокаДляОбработки = СтрокаДляОбработки.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	СтруктураЗаявки.Вставить("КурсДокумента",Курс.Курс);
	СтруктураЗаявки.Вставить("КратностьДокумента",Курс.Кратность);
	//Если СтрокаДляОбработки<>Неопределено И СтрокаДляОбработки.ВидГруппировки = "СтатьяБюджета" Тогда
		СтруктураЗаявки.Вставить("ФинансовыйПоказатель",ТекущиеДанныеДерева.ФинансовыйПоказатель);
		СтруктураЗаявки.Вставить("Сценарий",Объект.Сценарий);
		//Если НЕ Объект.ЕдинаяВалюта Тогда
		//	СтруктураЗаявки.Вставить("ВалютаДокумента",СтрокаДляОбработки.ВалютаОперации);
		//КонецЕсли;
	//Иначе
	//	МассивБюджетныеПараметры.Очистить();
	//КонецЕсли;
	СтруктураЗаявки.Вставить("Организация", Объект.Организация);
	СтруктураЗаявки.Вставить("МассивБюджетныеПараметры", МассивБюджетныеПараметры);
	СтруктураЗаявки.Вставить("СтрокаРасшифровка", СтрокаРасшифровка);
	ОткрытьФорму("Документ.ден_ЗаявкаНаРасходованиеСредств.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",СтруктураЗаявки),,Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтрокиСДублирующейсяАналитикой(Команда)
	СвернутьОбороты();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	УстановитьГруппировкуДерева(Команда);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПериодам(Команда)
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
		ПоказатьПредупреждение(,"Указанная строка не редактируется вручную!");
		Возврат;
	КонецЕсли;
	ОписаниеПараметрыРаспределения = Новый ОписаниеОповещения("ОбработчикОповещенияВыборПараметровРаспределения",ЭтотОбъект,ТекущиеДанные);
	ОткрытьФорму("Документ.фин_Бюджет.Форма.ФормаРаспределения",Новый Структура("КоличествоПериодов,СтруктураПоказателей,СоответствиеПериодов,ТочностьКоличественныхПоказателей",СоответствиеПериодов.Количество(),СтруктураПоказателей,СоответствиеПериодов,ТочностьКоличественныхПоказателей),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеПараметрыРаспределения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоМоделямПослеТочкиОстанова(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"Перед расчетом необходимо записать документ");
	Иначе
		ОписаниеОповещенияВыборПараметровОтладки = Новый ОписаниеОповещения("ОбработчикОповещенияВыборПараметровОтладки",ЭтотОбъект,"После");
		ПараметрыФормы = Новый Структура("ЦиклЗаголовок,ПриоритетЗаголовок","Расчетный цикл, начиная с котрого которого производится расчет моделей начального приоритета","Приоритет моделей, начиная с которого производится расчет");
		ОткрытьФорму("Документ.фин_Бюджет.Форма.ВводПараметровОтладкиМоделей",ПараметрыФормы,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияВыборПараметровОтладки,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоМоделямОтладка(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента = Новый ОписаниеОповещения("ОбработчикОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента",ЭтотОбъект,Истина);
		ПоказатьВопрос(ОписаниеОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента,"Перед расчетом необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		РасчетПоМоделямКлиент(,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗависимые(Команда)
	Объект.ЗависимыеОбороты.Очистить();
	ОбновитьПолеБюджета();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасчетыПоМоделям(Команда)
	Объект.РасчетыПоМоделям.Очистить();
	ОбновитьПолеБюджета();
КонецПроцедуры

&НаКлиенте
Процедура Заметки(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			ТекущаяСтрока = РасшифровкаПоля.Отбор;
			Если НЕ ТекущаяСтрока.Свойство("СтатьяБюджета") Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные =Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.ВидГруппировки="" Тогда
			ПоказатьПредупреждение(,"Нельзя комментировать данную строку!");
			Возврат;
		КонецЕсли;
		ТекущаяСтрока = ТекущиеДанные;
		Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
			ТекущаяСтрока 			= ТекущаяСтрока.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.усд_РеестрЗаметок.Форма.ЗаметкиПоОбъекту",Новый Структура("НазваниеОбъект,НазваниеДополнительно,Объект,Дополнительно","Бюджет","Статья",Объект.Ссылка,ТекущаяСтрока.СтатьяБюджета));
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьМоделиИЗависимостиВРежимеОтладки(Команда)
	Элементы.ДеревоСтрокБюджетаРассчитыватьМоделиИЗависимостиВРежимеОтладки.Пометка = НЕ Элементы.ДеревоСтрокБюджетаРассчитыватьМоделиИЗависимостиВРежимеОтладки.Пометка;
	РассчитыватьМоделиИЗависимостиВРежимеОтладки = Элементы.ДеревоСтрокБюджетаРассчитыватьМоделиИЗависимостиВРежимеОтладки.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКурсыВалют(Команда)
	ОбновитьКурсДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьДанныеВДокумент(Команда)
	ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьКорректировкуПоСтроке(Команда)
	ОчиститьКорректировкуСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВТабличныйДокумент(Команда)
	ЗаголовокФайла = Строка(Объект.ВидОперации)+": "+Строка(Объект.ФормируемыйБюджет)+ " за период "+НадписьПериодПланирования+" по сценарию "+Объект.Сценарий+?(Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения")," по подразделению "+Объект.УправленческоеПодразделение,?(Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения")," по проекту "+Объект.Проект,""));
	ПараметрыФормы = Новый Структура("Бюджет,ЗаголовокФайла,АдресДанных",Объект.ФормируемыйБюджет,ЗаголовокФайла,АдресДанныхТЧ());
	ОткрытьФорму("Обработка.фин_ОбменТабличнымиДокументами.Форма",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзТабличногоДокумента(Команда)
	ПараметрыФормы = Новый Структура("Бюджет,Версия,Загрузка,АдресДанных",Объект.ФормируемыйБюджет,Версия,Истина,АдресДанных());
	ОписаниеОповещенияЗагрузкиТабличногоДокумента = Новый ОписаниеОповещения("ОбработкаОповещенияЗагрузкиТабличногоДокумента",ЭтотОбъект);
	ОткрытьФорму("Обработка.фин_ОбменТабличнымиДокументами.Форма",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияЗагрузкиТабличногоДокумента);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#Область ПроцедурыУправленияФормой

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	БазовыйНаборКолонок =0;
	РасчетМоделейАктуален = Истина;
	ЗапоминатьДействий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_КоличествоЗапоминаемыхДействийДляОтмены");
	ПолныйСписокРазрезов 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");

	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
				Объект.Сценарий 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
			КонецЕсли;
			Объект.Состояние 	= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
			Если БюджетированиеПоОрганизациям И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
			Объект.ЕдинаяВалюта	= Истина;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
				Объект.ПериодПланирования 	= ТекущаяДата();
				Объект.ВалютаДокумента		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
					Объект.ВалютаДокумента	= Объект.Сценарий.Валюта;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования) Тогда
					Объект.ПериодПланирования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
				КонецЕсли;
			КонецЕсли;
			Если Параметры.Свойство("АдресНастроекЗаполнения") Тогда
				ДанныеХранилища = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекЗаполнения);
				ЗаполнитьЗначенияСвойств(Объект,ДанныеХранилища.Шапка);
				Объект.ОборотыПоСтатьям.Загрузить(ДанныеХранилища.ОборотыПоСтатьям);
				Если ДанныеХранилища.Свойство("ЗаявкиНаФормирование") Тогда
					Объект.ЗаявкиНаФормирование.Загрузить(ДанныеХранилища.ЗаявкиНаФормирование);
				КонецЕсли;
			КонецЕсли;
			ОбновитьКурсДокумента();
			
			Если ЗначениеЗаполнено(Объект.ФормируемыйБюджет) И ЗначениеЗаполнено(Объект.Сценарий) Тогда
				Если НЕ Параметры.АвтоСоздание Тогда
					ЗаполнитьСтатьиБюджета();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаУправленческогоУчета 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
  	ВалютаСводаБаланса 		= Документы.фин_Бюджет.ВалютаСводаБаланса(Объект);
	ЗагрузитьНастройкиРедактирования();
	ТабличныйВариант 					= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.Табличный;
	ТабличныйВариантТолькоДляАналитики	= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ТаблицыСАналитикойВИерархииСтатей;
	ТолькоТабличныеЧасти				= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.РедактироватьВТабличныхЧастях;
	РедактированиеВСКД					= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ПользовательскийВариант;
	
	ОбновитьСопутствующиеДанныеСценария();
	
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ОборотыПоСтатьям);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ЗависимыеОбороты);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.РасчетыПоМоделям);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ЗаявкиНаФормирование);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.КурсыВалютДокумента);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ПланируемыеМероприятия);
	
	ОбновитьДанныеУчетнойПолитики();
	ОбновитьСопутствующиеДанныеБюджета();
	ОбновитьСписокЧисловыхПолей();
	
	СтараяВалютаДокумента 		= Объект.ВалютаДокумента;
	
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОбновитьКЭШЦен();
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
		Документы.фин_Бюджет.ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей);
		СписокБюджетов = фин_ПривилегированныеПроцедуры.ИмеютсяБюджетыПоЗаявке(Объект.Ссылка);
		Если СписокБюджетов<>"" Тогда
			ТолькоПросмотр = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не может быть отредактирован так как используется в бюджетах:"+СписокБюджетов);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
			             |	Бюджет.Ссылка
			             |ИЗ
			             |	Документ.фин_Бюджет КАК Бюджет
			             |ГДЕ
			             |	Бюджет.Дата >= &Дата
			             |	И Бюджет.Проведен
			             |	И Бюджет.ФормируемыйБюджет = &ФормируемыйБюджет
			             |	И Бюджет.Сценарий = &Сценарий"+?(БюджетированиеПоОрганизациям,"
						 |	И Бюджет.Организация = &Организация","")+?(Объект.УправленческоеПодразделение.Пустая(),"","
			             |	И Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение")+?(Объект.Проект.Пустая(),"","
			             |	И Бюджет.Проект = &Проект")+"
			             |	И Бюджет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Заявка)
			             |	И Бюджет.ПериодПланирования >= &НачалоПланирования
			             |	И Бюджет.ПериодПланирования <= &КонецПланирования
			             |	И Бюджет.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Организация",		Объект.Организация);
			Запрос.УстановитьПараметр("Ссылка",				Объект.ФормируемыйБюджет);
			Запрос.УстановитьПараметр("НачалоПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),-ПродолжительностьЦикла+1)));
			Запрос.УстановитьПараметр("КонецПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),ПродолжительностьЦикла-1)));
			Запрос.УстановитьПараметр("Ссылка",				Объект.Ссылка);
			Запрос.УстановитьПараметр("ФормируемыйБюджет",	Объект.ФормируемыйБюджет);
			Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
			Запрос.УстановитьПараметр("УправленческоеПодразделение",				Объект.УправленческоеПодразделение);
			Запрос.УстановитьПараметр("Проект",				Объект.Проект);
			Запрос.УстановитьПараметр("Дата",				?(Объект.Дата='00010101',ТекущаяДата(),Объект.Дата));
			РезультатЗапроса=Запрос.Выполнить(); 
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТолькоПросмотр = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не может быть отредактирован, так как имеются более поздние корректировки/планирования!");
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Ссылка);
				КонецЦикла;
			КонецЕсли;
	КонецЕсли;
		
	мБюджет 	= Объект.ФормируемыйБюджет;
	мСценарий 	= Объект.Сценарий;
	мПериод 	= Объект.ПериодПланирования;
	мУправленческоеПодразделение        = Объект.УправленческоеПодразделение;
	мПроект		= Объект.Проект;
	мСостояние  = Объект.Состояние;
	мОрганизация= Объект.Организация;
	
	Если Объект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		Если Объект.Ссылка.Пустая() Тогда
			ПроизвестиРасчетыПоФормулам(,,,,Истина);
		КонецЕсли;
	КонецЕсли;
	
	// формируем колонки дерева
	
	ШиринаКолонкиСумма = 8;
	ШиринаКолонкиКоличество = 6;
	ШиринаКолонкиЦена = 6;
	ШиринаКолонкиРазреза = 15;
	
	Если РедактированиеВСКД И Объект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ЗаполнитьСоответствиеПериодов();
	    НастройкаРедактированияПриИзмененииНаСервере();
	ИначеЕсли (НЕ ТолькоТабличныеЧасти) И Объект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		СозданиеСтруктурыДерева();
		ОбновитьПолеБюджета();
	КонецЕсли;
//	УстановитьНастройкуКолонок();
	//ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий,Истина);
	
	//Для Каждого Колонка Из ЭлементыФормы.ДеревоБюджета.Колонки Цикл
	//	Если Колонка.ЭлементУправления <> Неопределено Тогда
	//		Колонка.ЭлементУправления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 5);
	//		Колонка.ЭлементУправления.ЦветРамки = Новый Цвет(255,200,200);
	//	КонецЕсли;
	//КонецЦикла;
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	мПериод = Объект.ПериодПланирования;
	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
    мФормат = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьФормат(Объект.Сценарий);
	Элементы.ЗависимыеОборотыПериодПланирования.Формат = мФормат;
	Элементы.ЗависимыеОборотыПериодПланирования.ФорматРедактирования = мФормат;
	Элементы.ОборотыПоСтатьямПериодПланирования.Формат = мФормат;
	Элементы.ОборотыПоСтатьямПериодПланирования.ФорматРедактирования = мФормат;
	Элементы.РасчетыПоМоделямПериодПланирования.Формат = мФормат;
	Элементы.РасчетыПоМоделямПериодПланирования.ФорматРедактирования = мФормат;
	Элементы.КурсыВалютДокументаПериодПланирования.Формат = мФормат;
	Элементы.КурсыВалютДокументаПериодПланирования.ФорматРедактирования = мФормат;
	НастроитьУсловноеОформление();
	
	Элементы.ДеревоСтрокБюджетаКонтекстноеМенюВвестиЗаявкуНаРасходДенежныхСредств.Видимость = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой") = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана;
	
	Если Объект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		// настройка внешнего вида дерева
		НастроитьФиксациюКолонокБюджета(ЭтотОбъект);
		НастроитьАвтоВысотуЯчейкиСтатьи(ЭтотОбъект);
		НастроитьАвтоВысотуЯчеекАналитики(ЭтотОбъект);
	КонецЕсли;
	
	//ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого ЭлементРазрез Из ПолныйСписокРазрезов Цикл
		ИмяРазреза 				= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
		ЭлементРазрез.Представление = ИмяРазреза;
		Команда 				= Команды.Добавить(ИмяРазреза);
		Команда.Действие 		= "УстановитьГруппировкуДерева";
		Команда.Картинка 		= БиблиотекаКартинок.ТабличныйДокументОтображатьГруппировки;
		Команда.Отображение		= ОтображениеКнопки.КартинкаИТекст;
		Команда.Заголовок 		= ЭлементРазрез.Представление;
		
		НовыйЭлемент 			= Элементы.Добавить("Развернуть"+ИмяРазреза,Тип("КнопкаФормы"),Элементы.ДеревоСтрокБюджетаГруппаКнопкиГруппировкиПоАналитике); 
		НовыйЭлемент.Вид 		= ВидКнопкиФормы.ОбычнаяКнопка;
		НовыйЭлемент.ИмяКоманды = ИмяРазреза;
		НовыйЭлемент.Заголовок 	= ЭлементРазрез.Представление;
		//НовыйЭлемент.Имя		= "Развернуть"+ИмяРазреза;
	КонецЦикла;
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	УправлениеФормой(ЭтотОбъект);
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Проверка ведения однофирменности
	Элементы.Организация.Видимость = Форма.БюджетированиеПоОрганизациям;
	
	Если Объект.УровеньДетализацииБюджета.Пустая() Тогда
		Элементы.Проект.Видимость 						= Ложь;
		Элементы.УправленческоеПодразделение.Видимость	= Ложь;
	ИначеЕсли Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		Элементы.Проект.Видимость 						= Ложь;
		Элементы.УправленческоеПодразделение.Видимость	= Истина;
	Иначе
		Элементы.Проект.Видимость 						= Истина;
		Элементы.УправленческоеПодразделение.Видимость	= Ложь;
	КонецЕсли;
	
	Элементы.ГруппаКурсыВалют.Видимость = Объект.ЗадаватьКурсыВалютВДокументе;
	Элементы.ГруппаМероприятия.Видимость= Объект.ПланироватьМероприятияПоДостижениюБюджетныхПоказателей;
	Элементы.ПланироватьМероприятияПоДостижениюБюджетныхПоказателей.Видимость 	= Объект.ВидОперации<>ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Заявка");
	
	Элементы.ДеревоСтрокБюджетаПричинаКорректировки.Видимость 	= (Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") И Форма.УчетнаяПолитикаБюджетирование.УчитыватьПричиныКорректировок);
	Элементы.ДеревоСтрокБюджетаКонтекстноеМенюОтменитьКорректировкуПоСтроке.Видимость 	= Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка");
	Элементы.ОборотыПоСтатьямПричинаКорректировки.Видимость 	= Элементы.ДеревоСтрокБюджетаПричинаКорректировки.Видимость;
	Элементы.ЗависимыеОборотыПричинаКорректировки.Видимость		= Элементы.ДеревоСтрокБюджетаПричинаКорректировки.Видимость;
	
	Элементы.ДеревоСтрокБюджетаВалютаОперации.Видимость			= НЕ Объект.ЕдинаяВалюта;
	
	Элементы.ДеревоСтрокБюджетаПричинаОтклонения.Видимость 		= Форма.УчетнаяПолитикаБюджетирование.УчитыватьНепринятыеСтрокиБюджетов;
	Элементы.ОборотыПоСтатьямПричинаОтклонения.Видимость 		= Форма.УчетнаяПолитикаБюджетирование.УчитыватьНепринятыеСтрокиБюджетов;
	Элементы.ЗависимыеОборотыПричинаОтклонения.Видимость 		= Форма.УчетнаяПолитикаБюджетирование.УчитыватьНепринятыеСтрокиБюджетов;
	
	Элементы.ОборотыПоСтатьямВалютаОперации.Видимость			=(НЕ Объект.ЕдинаяВалюта);
	Элементы.ЗависимыеОборотыВалютаОперации.Видимость			=(НЕ Объект.ЕдинаяВалюта);
	Элементы.ОборотыПоСтатьямПериодПланирования.Видимость		=(ТипЗнч(Форма.ПродолжительностьЦикла)=Тип("Число") И НЕ Форма.ПродолжительностьЦикла<=1);
	Элементы.ОборотыПоСтатьямУправленческоеПодразделение.ТолькоПросмотр			=(НЕ Объект.УправленческоеПодразделение.Пустая());
	Элементы.ОборотыПоСтатьямПроект.ТолькоПросмотр				=(НЕ Объект.Проект.Пустая());
//	Элементы.ДеревоСтрокБюджетаВалютаОперации.ТолькоПросмотр 		= Объект.ЕдинаяВалюта;
//	Элементы.ДеревоСтрокБюджетаОтступ2.Видимость 				= НЕ ОтсутствиеАналитики;

	Для Каждого ЭлементРазрез Из Форма.ПолныйСписокРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
		Элементы["Развернуть"+ИмяРазреза].Видимость = Форма.СтруктураРазрезовБюджета.НайтиПоЗначению(ЭлементРазрез.Значение)<>Неопределено;
	КонецЦикла;
	
	Если Не Форма.ВестиУчетПоПроектам Тогда
		Элементы.Проект.Видимость 							= Ложь;
		Элементы.РасчетыПоМоделямПроект.Видимость 			= Ложь;
		Элементы.ОборотыПоСтатьямПроект.Видимость 			= Ложь;
		Элементы.ЗависимыеОборотыПроект.Видимость 			= Ложь;
		Если Элементы.УровеньДетализацииБюджета.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))<>Неопределено Тогда
			Элементы.УровеньДетализацииБюджета.СписокВыбора.Удалить(Элементы.УровеньДетализацииБюджета.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта")));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоСтрокБюджетаИтогоСумма.ТолькоПросмотр 		= Форма.БазовыйНаборКолонок>1;
	Элементы.ДеревоСтрокБюджетаИтогоСумма.Видимость 			= Форма.СтруктураПоказателей.Сумма;
	Элементы.ДеревоСтрокБюджетаИтогоКоличество.ТолькоПросмотр 	= Форма.БазовыйНаборКолонок>1;
	Элементы.ДеревоСтрокБюджетаИтогоКоличество.Видимость 		= Форма.СтруктураПоказателей.Количество;
	
	Элементы.ДеревоСтрокБюджетаСтатьяБюджета.ТолькоПросмотр		= Форма.ВариантРедактированияБюджета <> ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.Табличный");
	
	Для Каждого Пара Из Форма.СтруктураПоказателей Цикл
		Если Пара.Ключ = "Цена" Тогда
			Прервать;
		КонецЕсли;
		Элементы["РасчетыПоМоделям"+Пара.Ключ].Видимость 	= Пара.Значение;
		Элементы["ОборотыПоСтатьям"+Пара.Ключ].Видимость	= Пара.Значение;
		//Если Пара.Ключ = "Номенклатура" Тогда
		//	ЭлементыФормы.ОборотыПоСтатьям.Колонки["Цена"].Видимость 				= Пара.Значение;
		//	ЭлементыФормы.ОборотыПоСтатьям.Колонки["Цена"].ИзменятьВидимость 		= Пара.Значение;
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Цена"].Видимость 					= Пара.Значение;
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Цена"].ИзменятьВидимость 			= Пара.Значение;
		//	ЭлементыФормы.ОборотыПоСтатьям.Колонки["ЕдиницаИзмерения"].Видимость 			= Пара.Значение;
		//	ЭлементыФормы.ОборотыПоСтатьям.Колонки["ЕдиницаИзмерения"].ИзменятьВидимость 	= Пара.Значение;
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["ЕдиницаИзмерения"].Видимость 				= Пара.Значение;
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["ЕдиницаИзмерения"].ИзменятьВидимость 		= Пара.Значение;
		//КонецЕсли;
		//Если Пара.Ключ = "Количество" ИЛИ Пара.Ключ = "Сумма" Тогда
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Итого"+Пара.Ключ].Видимость 		= Пара.Значение;
		//	ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Итого"+Пара.Ключ].ИзменятьВидимость= Пара.Значение;
		//	Если Пара.Ключ = "Количество" Тогда
		//		Если НЕ СтруктураПоказателей.Сумма Тогда
		//			ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Итого"+Пара.Ключ].Положение 	= ПоложениеКолонки.НаСледующейСтроке;
		//		Иначе
		//			ЭлементыФормы.ДеревоСтрокБюджета.Колонки["Итого"+Пара.Ключ].Положение 	= ПоложениеКолонки.ВТойЖеКолонке;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	Элементы.ДеревоСтрокБюджетаКодСтрокиБюджета.Видимость 	= ПолеОбъекта(Объект.ФормируемыйБюджет,"ИспользоватьКодыСтрокБюджета");
	Элементы.ДеревоСтрокБюджетаЦена.Видимость				= ?((Форма.ПродолжительностьЦикла<=1 ИЛИ Форма.ЕдинаяЦенаВБюджетномПериоде) И Форма.СтруктураПоказателей.Сумма И Форма.СтруктураПоказателей.Количество,Истина,Ложь);
	Элементы.ДеревоСтрокБюджета.Подвал 						= Форма.РежимРасчетаИтогов <> ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать");
	
	Элементы.ФормаОтменитьДействие.Видимость 	= Форма.ЗапоминатьДействий>0 И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ФормаВернутьДействие.Видимость 	= Форма.ЗапоминатьДействий>0 И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	
	ИерархическийВид = Форма.ВариантРедактированияБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.Иерархический") ИЛИ Форма.ВариантРедактированияБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.ТаблицыСАналитикойВИерархииСтатей");
	Элементы.ДеревоСтрокБюджетаДобавитьУровеньАналитики.Видимость 	= ИерархическийВид;
	Элементы.ДеревоСтрокБюджетаУдалитьУровеньАналитики.Видимость 	= ИерархическийВид;
	Элементы.ДеревоСтрокБюджетаДобавитьУровеньАналитики1.Видимость 	= ИерархическийВид;
	Элементы.ДеревоСтрокБюджетаУдалитьУровеньАналитики1.Видимость 	= ИерархическийВид;
	Элементы.ДеревоСтрокБюджетаГруппаУровеньГруппировок.Видимость 	= ИерархическийВид;
	Элементы.ДеревоСтрокБюджетаГруппаКнопкиГруппировкиПоАналитике.Видимость 	= Форма.ВариантРедактированияБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.Иерархический");
	
	Элементы.ГруппаБюджет.Видимость = (НЕ (Форма.ТолькоТабличныеЧасти ИЛИ Форма.РедактированиеВСКД)) И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ГруппаБюджетСКД.Видимость = Форма.РедактированиеВСКД И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ФормаПоказыватьТабличныеЧасти.Видимость 	= (НЕ Форма.ТолькоТабличныеЧасти) И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ФормаИнтерактивныйРасчетФормул.Видимость 	= (НЕ Форма.РежимМедленногоСоединения) И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ФормаСписокПереоцениваемыхДокументов.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.ГруппаИсходныеДанные.Видимость 			= Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") И (Форма.ТолькоТабличныеЧасти ИЛИ Элементы.ФормаПоказыватьТабличныеЧасти.Пометка);
	Элементы.ФормаРежимМедленногоСоединения.Видимость 	= Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов") И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка");
	Элементы.ДеревоСтрокБюджетаПоместитьДанныеВДокумент.Видимость 	= Форма.РежимМедленногоСоединения;
	Элементы.ГруппаОформление.Видимость 				= Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.ПереоценкаКурсов");
	Элементы.НастройкаРедактирования.Видимость			= Форма.ВариантРедактированияБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант");
	Элементы.СохранитьДляВсехБюджетовТекущегоПользователя.Видимость			= Форма.ВариантРедактированияБюджета <> ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант");
	Элементы.СохранитьДляВсехБюджетовВсехПользователей.Видимость			= Форма.ВариантРедактированияБюджета <> ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант");
//	ЭлементыФормы.ДеревоСтрокБюджета.ФиксацияСлева = 1 + ?(ФормируемыйБюджет.ИспользоватьКодыСтрокБюджета,1,0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	

КонецПроцедуры 

&НаСервере
Процедура НастроитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	// настройка отображения дерева строк бюджета
	
	ЦветРедактируемых = Новый Цвет(184, 255, 153);
	
	Элементы.ДеревоСтрокБюджетаСостояние.ЦветФона 				= ЦветРедактируемых;
	Элементы.ДеревоСтрокБюджетаПричинаКорректировки.ЦветФона 	= ЦветРедактируемых;
	Элементы.ДеревоСтрокБюджетаПричинаОтклонения.ЦветФона 		= ЦветРедактируемых;
	
	// колонки показателей
	
	Если БазовыйНаборКолонок > 1 Тогда
		Для Каждого Пара Из СтруктураПоказателей Цикл
			
			Если Пара.Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			//Если Пара.Ключ = "Цена" И ЕдинаяЦенаВБюджетномПериоде Тогда
			//	Прервать;
			//КонецЕсли;
			
			// для неактивных строк
				
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
	
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
			
			Если Пара.Ключ = "Сумма" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
			ИначеЕсли Пара.Ключ = "Количество" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
			ИначеЕсли Пара.Ключ = "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
				
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
				
				Если НЕ ТабличныйВариант Тогда
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемент.ПравоеЗначение 	= ?(ТабличныйВариантТолькоДляАналитики,"ТаблицаАналитики","Номенклатура");
					
					Если НЕ ТабличныйВариантТолькоДляАналитики Тогда
						ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
						ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
						ОтборЭлемент.ПравоеЗначение 	= "ВалютаОперации";
					КонецЕсли;
					
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Пара.Ключ = "Цена" И ЕдинаяЦенаВБюджетномПериоде Тогда
				ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
				ПолеОформления.Использование	= Истина;
				ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаЦена");
			Иначе
				Для Инд = 1 По БазовыйНаборКолонок Цикл
					ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
					ПолеОформления.Использование	= Истина;
					ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+?(Пара.Ключ = "Цена","","Итого")+Пара.Ключ+Строка(Инд));
				КонецЦикла;
			КонецЕсли;
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
			
			// для активных строк
			
			НовыйЭлементОформления 		= УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование = Истина;
	
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			Если Пара.Ключ <> "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
			Иначе
				
				СписокИсключений = Новый СписокЗначений;
				СписокИсключений.Добавить(Перечисления.фин_ВидыСтрокБюджета.Итоговая);
				СписокИсключений.Добавить(Перечисления.фин_ВидыСтрокБюджета.Первичная);
				
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
				ОтборЭлемент.ПравоеЗначение 	= СписокИсключений;
			КонецЕсли;
				
			Если Пара.Ключ = "Сумма" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
			ИначеЕсли Пара.Ключ = "Количество" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
			ИначеЕсли Пара.Ключ = "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
				
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
				
				Если НЕ ТабличныйВариант Тогда
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= ?(ТабличныйВариантТолькоДляАналитики,"ТаблицаАналитики","Номенклатура");
					
					ВложеннаяГруппаОтборов2 = ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов2.Использование 	= Истина;
					ВложеннаяГруппаОтборов2.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Ложь;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
					
					ВложеннаяГруппаОтборов3 = ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов3.Использование 	= Истина;
					ВложеннаяГруппаОтборов3.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "ВалютаОперации";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Истина;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Пара.Ключ = "Цена" И ЕдинаяЦенаВБюджетномПериоде Тогда
				ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
				ПолеОформления.Использование	= Истина;
				ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаЦена");
			Иначе
				Для Инд = 1 По БазовыйНаборКолонок Цикл
					ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
					ПолеОформления.Использование	= Истина;
					ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+?(Пара.Ключ = "Цена","","Итого")+Пара.Ключ+Строка(Инд));
				КонецЦикла;
			КонецЕсли;
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);		  
			  
				
		КонецЦикла;
	Иначе
		Для Каждого Пара Из СтруктураПоказателей Цикл
			
			Если Пара.Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			//Если Пара.Ключ = "Цена" И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
			//	Прервать;
			//КонецЕсли;
			
			// для неактивных строк
				
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
	
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
			
			Если Пара.Ключ = "Сумма" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
			ИначеЕсли Пара.Ключ = "Количество" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
			ИначеЕсли Пара.Ключ = "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
				
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Ложь;
				
				Если НЕ ТабличныйВариант Тогда
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемент.ПравоеЗначение 	= ?(ТабличныйВариантТолькоДляАналитики,"ТаблицаАналитики","Номенклатура");
					
					Если НЕ ТабличныйВариантТолькоДляАналитики Тогда
						ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
						ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
						ОтборЭлемент.ПравоеЗначение 	= "ВалютаОперации";
					КонецЕсли;
					
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+?(Пара.Ключ = "Цена","","Итого")+Пара.Ключ);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
			
			// для активных строк
			
			НовыйЭлементОформления 		= УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование = Истина;
	
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			Если Пара.Ключ <> "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
			КонецЕсли;
			
			Если Пара.Ключ = "Сумма" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
			ИначеЕсли Пара.Ключ = "Количество" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
			ИначеЕсли Пара.Ключ = "Цена" Тогда
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
				
				ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоКоличеству");
				ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемент.ПравоеЗначение 	= Истина;
				
				Если НЕ ТабличныйВариант Тогда
					ВложеннаяГруппаОтборов = ГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов.Использование 	= Истина;
					ВложеннаяГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= ?(ТабличныйВариантТолькоДляАналитики,"ТаблицаАналитики","Номенклатура");
					
					ВложеннаяГруппаОтборов2 = ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов2.Использование 	= Истина;
					ВложеннаяГруппаОтборов2.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Ложь;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
					
					ВложеннаяГруппаОтборов3 = ВложеннаяГруппаОтборов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ВложеннаяГруппаОтборов3.Использование 	= Истина;
					ВложеннаяГруппаОтборов3.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= "ВалютаОперации";
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоРазрезуНоменклатура");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Истина;
					
					ОтборЭлемент 					= ВложеннаяГруппаОтборов3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
					ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
				КонецЕсли;
				
			КонецЕсли;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+?(Пара.Ключ = "Цена","","Итого")+Пара.Ключ);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);		  
			  
				
		КонецЦикла;
	КонецЕсли;
	
	// валюта операции
	
	Если ВариантРедактированияБюджета = Перечисления.фин_ВариантыРедактированияБюджета.Иерархический Тогда

	
		// валюта операций - для прочих строк
			
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование = Истина;
		
		ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование 	= Истина;
		ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		//ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
		//ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
		//ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
		
		ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Ложь;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаВалютаОперации");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
		
		// валюта операций - для статей бюджета
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		
		ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование 	= Истина;
		ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		//ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
		//ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		//ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
		//
		//ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
		//ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		//ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
		
		ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Истина;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаВалютаОперации");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
		
	ИначеЕсли ТабличныйВариантТолькоДляАналитики Тогда
		
		// валюта операций - для статей
			
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование = Истина;
		
		ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование 	= Истина;
		ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= "СтатьяБюджета";
		
		ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Ложь;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаВалютаОперации");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
		
		// валюта операций - для прочих строк
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		
		ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.Использование 	= Истина;
		ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= "ТаблицаАналитики";
		
		ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.Первичная;
		
		ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.УчетПоСумме");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение 	= Истина;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаВалютаОперации");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
		
	Иначе
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаВалютаОперации");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
		
	КонецЕсли;
	
	// доступность разрезов
	
	Если ВариантРедактированияБюджета = Перечисления.фин_ВариантыРедактированияБюджета.Иерархический Тогда
	
		Для Каждого ЭлементРазрез Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = ЭлементРазрез.Представление;
			// для неактивных строк
				
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
			ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемент.ПравоеЗначение 	= ИмяРазреза;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
			
			// для активных строк
			
			НовыйЭлементОформления 		= УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование = Истина;
			
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемент.ПравоеЗначение 	= ИмяРазреза;
			
			СписокВидовСтрок = Новый СписокЗначений;
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Первичная);
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Итоговая);
			
			ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокВидовСтрок;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);		  
			  
		КонецЦикла;
	
	ИначеЕсли ВариантРедактированияБюджета = Перечисления.фин_ВариантыРедактированияБюджета.ТаблицыСАналитикойВИерархииСтатей Тогда
	
		Для Каждого ЭлементРазрез Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = ЭлементРазрез.Представление;
			
			СписокСтрокСПоддержкойРазреза = СписокСтрокСПоддержкойРазреза(ИмяРазреза,Объект.ФормируемыйБюджет,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФормульных);
			
			// для неактивных строк
				
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
			
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемент.ПравоеЗначение 	= "ТаблицаАналитики";
			
			ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ФинансовыйПоказатель");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокСтрокСПоддержкойРазреза;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
			
			// для активных строк
			
			НовыйЭлементОформления 		= УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование = Истина;
			
			ГруппаОтборов = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборов.Использование 	= Истина;
			ГруппаОтборов.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидГруппировки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемент.ПравоеЗначение 	= "ТаблицаАналитики";
			
			ОтборЭлемент 					= ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ФинансовыйПоказатель");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокСтрокСПоддержкойРазреза;
			
			СписокВидовСтрок = Новый СписокЗначений;
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Первичная);
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Итоговая);
			
			ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокВидовСтрок;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);		  
			  
		КонецЦикла;
	
	Иначе
	
		Для Каждого ЭлементРазрез Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = ЭлементРазрез.Представление;
			
			СписокСтрокСПоддержкойРазреза = СписокСтрокСПоддержкойРазреза(ИмяРазреза,Объект.ФормируемыйБюджет,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФормульных);
			
			// для неактивных строк
				
			НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование=Истина;
			
			ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ФинансовыйПоказатель");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокСтрокСПоддержкойРазреза;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			//НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);
			
			// для активных строк
			
			НовыйЭлементОформления 		= УсловноеОформление.Элементы.Добавить();
			НовыйЭлементОформления.Использование = Истина;
			
			ОтборЭлемент 					= НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ФинансовыйПоказатель");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокСтрокСПоддержкойРазреза;
			
			СписокВидовСтрок = Новый СписокЗначений;
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Первичная);
			СписокВидовСтрок.Добавить(Перечисления.фин_ВидыСтрокБюджета.Итоговая);
			
			ОтборЭлемент = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
			ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборЭлемент.ПравоеЗначение 	= СписокВидовСтрок;
			
			ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Использование	= Истина;
			ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета"+ИмяРазреза);
			
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Ложь);
			НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",ЦветРедактируемых);		  
			  
		КонецЦикла;
	
	КонецЕсли;
	
	// зависимые статьи
		
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,230,250));
	
	// наследуемые статьи
		
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Перечисления.фин_ВидыСтрокБюджета.Наследуемая;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(255,228,225));
	
	// рассчитываемые по модели
		
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(155,218,220));
	
	// рассчитываемые по формуле
		
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(232,209,230));
	
	// рассчитываемые по остаткам
		
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоОстаткам;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(232,209,230));
	
	
	// настройка отображения периодов
	СписокДоступныхПериодов = СписокПериодов();
	Для Каждого ДоступныйПериод Из СписокДоступныхПериодов Цикл
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОборотыПоСтатьям.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ОборотыПоСтатьямПериодПланирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗависимыеОбороты.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ЗависимыеОборотыПериодПланирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыПоМоделям.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("РасчетыПоМоделямПериодПланирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КурсыВалютДокумента.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("КурсыВалютДокументаПериодПланирования");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
	
	КонецЦикла;
	
	// оформление групп статей
	
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.ИерархияБюджета;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование	= Истина;
	ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",Новый Шрифт(,9,Истина));
	
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.ВидСтроки");
	ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение 	= Перечисления.фин_ВидыСтрокБюджета.ИерархияБюджета;
	
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование	= Истина;
	ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаСтатьяБюджета");
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",Новый Шрифт(,10,Истина));
	
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.Корректировки");
		ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
		ОтборЭлемент.ПравоеЗначение 	= 0;
		
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование	= Истина;
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета");
		
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(244,164,96));
	
	КонецЕсли;
	
	// ++ USRomanov@1cbit.ru 05.01.2021
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;
	
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджета.КодСтрокиБюджета");
	ОтборЭлемент.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение 	= "140";
	
	Для Сч = 1 По 12 Цикл 
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоСтрокБюджетаИтогоСумма" + Сч);
		ПолеОформления.Использование	= Истина;
	КонецЦикла;
	
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	// ++ USRomanov@1cbit.ru 05.01.2021
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПЛАНОВЫМ ПЕРИОДОМ

#Область ПроцедурыРаботыСПлановымПериодом
                                                                
&НаСервере
Функция СписокПериодов()
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СписокПериодовВШаге(Объект.ПериодПланирования,Объект.Сценарий);
КонецФункции

&НаСервере
Процедура ПриИзмененииПериода(ПроверкаНаличияВыполнена=Ложь,ПроизводитьПерезаполнениеДанных=Истина)
	ПерезаполнениеДанныхПроизведено = Ложь;
	Если мПериод<>Объект.ПериодПланирования Тогда
		ПериодПланирования = Объект.ПериодПланирования;
		Версия = фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Объект.ФормируемыйБюджет,ПериодПланирования);
		Если мВерсия<>Версия Тогда
			//Если (Вопрос("При изменении версии бюджета документ будет очищен. Продолжить?", 
			//	РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да)<> КодВозвратаДиалога.Да) Тогда
			//	Версия=мВерсия;
			//	ПериодПланирования = мПериод;
			//	Возврат;
			//КонецЕсли;
			мВерсия = Версия;
			Если ПроизводитьПерезаполнениеДанных И НЕ ТолькоТабличныеЧасти Тогда
				ПерезаполнитьБюджет();
			КонецЕсли;
			ЗаполнитьСписокСтатейДляВыбора();
		КонецЕсли;
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("ОборотыПоСтатьям");
		Для Каждого ТЧ Из МассивТЧ Цикл
			фин_ПроцедурыМеханизмовБюджетирования.ПереносПериодовПланированияВТабличнойЧасти(Объект[ТЧ],Объект.Сценарий,ПериодПланирования,мПериод,ГоризонтПланирования);
		КонецЦикла;
		ОбновитьКурсДокумента();

		мПериод = Объект.ПериодПланирования;
		НастроитьУсловноеОформление();
		ПроверитьНаличиеБюджетов();
		ПроверкаНаличияВыполнена = Истина;
		Если ПроизводитьПерезаполнениеДанных=Истина Тогда
			Если ПерезаполнениеДанныхПроизведено <> Истина Тогда
				ОбновитьДанныеВнешнейСтруктуры();
			КонецЕсли;
			Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
				Объект.ОборотыПоСтатьям.Очистить();
			КонецЕсли;
			Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
				ЗаполнитьСоответствиеПериодов(Истина);
				ПроизвестиРасчетыПоФормулам(,,,,Истина);
				ОбновитьПолеБюджета();        
			КонецЕсли;
			ЗапомнитьСостояние();
		КонецЕсли;
		УстановитьЗаголовокФормыДокумента();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыРаботыСОтменойИВозвратомДействий

&НаСервере
Процедура ОтменитьДействиеНаСервере()
	Если НЕ ЗначениеЗаполнено(КЭШ_ОтменаДействий_Адрес) Тогда
		Возврат;
	КонецЕсли;
	КЭШ_ОтменаДействий = ПолучитьИзВременногоХранилища(КЭШ_ОтменаДействий_Адрес);
	Если КЭШ_ВозвратДействий_Адрес = "" Тогда
		КЭШ_ВозвратДействий = Новый Массив;
	Иначе
		КЭШ_ВозвратДействий = ПолучитьИзВременногоХранилища(КЭШ_ВозвратДействий_Адрес);
	КонецЕсли;
	Если КЭШ_ОтменаДействий.Количество()>1 Тогда
		КЭШ_ВозвратДействий.Вставить(0,КЭШ_ОтменаДействий[0]);
		КЭШ_ОтменаДействий.Удалить(0);
		ОтпечатокВерсии = КЭШ_ОтменаДействий[0];
		РазвернутьОтпечатокВерсии(ОтпечатокВерсии);
		Элементы.ФормаОтменитьДействие.Доступность 	= КЭШ_ОтменаДействий.Количество()>1;
		Элементы.ФормаВернутьДействие.Доступность 	= КЭШ_ВозвратДействий.Количество()>0;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(КЭШ_ОтменаДействий,КЭШ_ОтменаДействий_Адрес);
	Если КЭШ_ВозвратДействий_Адрес = "" Тогда
		КЭШ_ВозвратДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ВозвратДействий,Новый УникальныйИдентификатор());
	Иначе
		КЭШ_ВозвратДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ВозвратДействий,КЭШ_ВозвратДействий_Адрес);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьОтпечатокВерсии(ОтпечатокВерсии)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОтпечатокВерсии.ДинамическиеРеквизиты);
	ЗаполнитьЗначенияСвойств(Объект,ОтпечатокВерсии.Реквизиты);
	Документы.фин_Бюджет.ОпределитьПорядокРасчетаИтогов(Объект,ЭтотОбъект);
	Если Объект.ВидОперации <>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Для Каждого Таблица Из ОтпечатокВерсии.ТабличныеЧасти Цикл
			Объект[Таблица.Ключ].Загрузить(Таблица.Значение);
		КонецЦикла;
	 	Для Каждого Таблица Из ОтпечатокВерсии.ДинамическиеТабличныеЧасти Цикл
			ЭтотОбъект[Таблица.Ключ].Загрузить(Таблица.Значение);
		КонецЦикла;
		ОбновитьПолеБюджета();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВернутьДействиеНаСервере()
	Если НЕ ЗначениеЗаполнено(КЭШ_ВозвратДействий_Адрес) Тогда
		Возврат;
	КонецЕсли;
	КЭШ_ВозвратДействий = ПолучитьИзВременногоХранилища(КЭШ_ВозвратДействий_Адрес);
	Если КЭШ_ОтменаДействий_Адрес = "" Тогда
		КЭШ_ОтменаДействий = Новый Массив;
	Иначе
		КЭШ_ОтменаДействий = ПолучитьИзВременногоХранилища(КЭШ_ОтменаДействий_Адрес);
	КонецЕсли;
	Если КЭШ_ВозвратДействий.Количество()>0 Тогда
		КЭШ_ОтменаДействий.Вставить(0,КЭШ_ВозвратДействий[0]);
		КЭШ_ВозвратДействий.Удалить(0);
		ОтпечатокВерсии = КЭШ_ОтменаДействий[0];
		РазвернутьОтпечатокВерсии(ОтпечатокВерсии);
		Элементы.ФормаОтменитьДействие.Доступность = КЭШ_ОтменаДействий.Количество()>1;
		Элементы.формаВернутьДействие.Доступность 	= КЭШ_ВозвратДействий.Количество()>0;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(КЭШ_ВозвратДействий,КЭШ_ВозвратДействий_Адрес);
	Если КЭШ_ОтменаДействий_Адрес = "" Тогда
		КЭШ_ОтменаДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ОтменаДействий,Новый УникальныйИдентификатор());
	Иначе
		КЭШ_ОтменаДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ОтменаДействий,КЭШ_ОтменаДействий_Адрес);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьСостояние()
	Если ЗапоминатьДействий>0 Тогда
		СтруктураРеквизитов = Новый Структура;
		Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя,Объект[Реквизит.Имя]);
		КонецЦикла;
		СтруктураТабличныхЧастей = Новый Структура;
		Для Каждого ТабличнаяЧасть Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти Цикл
			СтруктураТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя,Объект[ТабличнаяЧасть.Имя].Выгрузить());
		КонецЦикла;
		ДинамическиеРеквизиты = Новый Структура("СтараяВалютаДокумента,мТекущаяДатаДокумента,СтараяВалютаОперации,мБюджет,мПериод,мСценарий,мУправленческоеПодразделение,мПроект,мСостояние,мОрганизация,БазовыйНаборКолонок,ОтсутствиеАналитики,ВалютаСводаБаланса,СтруктураРазрезовБюджета,мВерсия,СписокФормульных,ОбратноеСоответствиеПериодов,РасчетМоделейАктуален,РучнаяНастройка,СоответствиеПериодов,СтараяВалютаБюджетнойСтроки");
		ЗаполнитьЗначенияСвойств(ДинамическиеРеквизиты,ЭтотОбъект);
		ДинамическиеТабличныеЧастиСписок = Новый Структура("ТаблицаФормулыРасчетаСтатей,ТаблицаСоставФормулРасчетаСтатей,ТаблицаНастройкиШкал,ТаблицаРассчитанныеПоказателиФормул");
		ДинамическиеТабличныеЧасти = Новый Структура;
		Для Каждого КлючИЗначение Из ДинамическиеТабличныеЧастиСписок Цикл
			ДинамическиеТабличныеЧасти.Вставить(КлючИЗначение.Ключ,ЭтотОбъект[КлючИЗначение.Ключ].Выгрузить());
		КонецЦикла;
		ОтпечатокВерсии = Новый Структура("Реквизиты,ТабличныеЧасти,ДинамическиеРеквизиты,ДинамическиеТабличныеЧасти",СтруктураРеквизитов,СтруктураТабличныхЧастей,ДинамическиеРеквизиты,ДинамическиеТабличныеЧасти);
		Если КЭШ_ОтменаДействий_Адрес<>"" Тогда
			Попытка
				КЭШ_ОтменаДействий = ПолучитьИзВременногоХранилища(КЭШ_ОтменаДействий_Адрес);
			Исключение
				КЭШ_ОтменаДействий = Новый Массив;
			КонецПопытки;
		Иначе
			КЭШ_ОтменаДействий = Новый Массив;
		КонецЕсли;
		Если КЭШ_ОтменаДействий = Неопределено Тогда
			КЭШ_ОтменаДействий = Новый Массив;
		КонецЕсли;
		КЭШ_ОтменаДействий.Вставить(0,ОтпечатокВерсии);
		Пока ЗапоминатьДействий+1<КЭШ_ОтменаДействий.Количество() Цикл
			КЭШ_ОтменаДействий.Удалить(КЭШ_ОтменаДействий.Количество()-1);
		КонецЦикла;
		
		Если КЭШ_ОтменаДействий_Адрес = "" Тогда
			КЭШ_ОтменаДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ОтменаДействий,Новый УникальныйИдентификатор());
		Иначе
			КЭШ_ОтменаДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ОтменаДействий,КЭШ_ОтменаДействий_Адрес);
		КонецЕсли;
		Если КЭШ_ВозвратДействий_Адрес<>"" Тогда
			Попытка
				КЭШ_ВозвратДействий = ПолучитьИзВременногоХранилища(КЭШ_ВозвратДействий_Адрес);
			Исключение
				КЭШ_ВозвратДействий = Новый Массив;
			КонецПопытки;
		Иначе
			КЭШ_ВозвратДействий = Новый Массив;
		КонецЕсли;
		Если КЭШ_ВозвратДействий = Неопределено Тогда
			КЭШ_ВозвратДействий = Новый Массив;
		КонецЕсли;
		КЭШ_ВозвратДействий.Очистить();
		Если КЭШ_ВозвратДействий_Адрес = "" Тогда
			КЭШ_ВозвратДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ВозвратДействий,Новый УникальныйИдентификатор());
		Иначе
			КЭШ_ВозвратДействий_Адрес = ПоместитьВоВременноеХранилище(КЭШ_ВозвратДействий,КЭШ_ВозвратДействий_Адрес);
		КонецЕсли;
		// доработать
		//ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОтменитьДействие.Доступность = КЭШ_ОтменаДействий.Количество()>1;
		//ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ВернутьДействие.Доступность = КЭШ_ВозвратДействий.Количество()>0;
		//ЭлементыФормы.ДействияФормы.Кнопки.ОтменитьДействие.Доступность = КЭШ_ОтменаДействий.Количество()>1;
		//ЭлементыФормы.ДействияФормы.Кнопки.ВернутьДействие.Доступность = КЭШ_ВозвратДействий.Количество()>0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	Если КЭШ_ВозвратДействий_Адрес<>"" Тогда
		УдалитьИзВременногоХранилища(КЭШ_ВозвратДействий_Адрес);	
	КонецЕсли;
	Если КЭШ_ОтменаДействий_Адрес<>"" Тогда
		УдалитьИзВременногоХранилища(КЭШ_ОтменаДействий_Адрес);	
	КонецЕсли;
	Если КЭШ_РезультатыРасчета_Адрес<>"" Тогда
		УдалитьИзВременногоХранилища(КЭШ_РезультатыРасчета_Адрес);	
	КонецЕсли;
	Если КЭШ_РасчетыПоМоделям_Адрес<>"" Тогда
		УдалитьИзВременногоХранилища(КЭШ_РасчетыПоМоделям_Адрес);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВспомогательные

Функция РазрезНайден(СтруктураРазрезов,Разрез) Экспорт
	Возврат СтруктураРазрезов.НайтиПоЗначению(Разрез)<>Неопределено;
КонецФункции

&НаСервере
Функция ОбновитьСтруктуруПоказателей() Экспорт
	мСтруктураПоказателей 			= Новый Структура("Сумма,Количество,Цена",Ложь,Ложь,Ложь);
	Для Каждого Пара Из мСтруктураПоказателей Цикл
		мСтруктураПоказателей[Пара.Ключ] = ?(Пара.Ключ="Сумма",Объект.ФормируемыйБюджет.УчетПоСумме,?(Пара.Ключ="Количество",Объект.ФормируемыйБюджет.УчетПоКоличеству,Объект.ФормируемыйБюджет.УчетПоСумме И Объект.ФормируемыйБюджет.УчетПоКоличеству));//фин_РаботаСДополнительнымиРазрезамиБюджетирования.НаличиеРазрезаБюджета(Объект.ФормируемыйБюджет,Пара.Ключ);
	КонецЦикла;
	СтруктураПоказателей = Новый ФиксированнаяСтруктура(мСтруктураПоказателей);
КонецФункции //ОбновитьСтруктуруПоказателей

//Процедура ОбновитьДанныеВнешнейСтруктуры
//
&НаСервере
Процедура ОбновитьДанныеВнешнейСтруктуры(ТолькоВнешние=Ложь)
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Возврат;
	КонецЕсли;
	Если ТолькоВнешние=Ложь Тогда
		ВнешниеОборотыБюджета.Очистить();
		Если ЗначениеЗаполнено(Объект.ФормируемыйБюджет) Тогда
			Документы.фин_Бюджет.ЗаполнитьСписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СписокРассчитываемыхВПредшествующихБюджетах);
			Документы.фин_Бюджет.ЗаполнитьСписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокНаследуемых);
			Документы.фин_Бюджет.ЗаполнитьСписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СписокЗависимых);
			Документы.фин_Бюджет.ЗаполнитьТаблицуНаследуемыхОборотов(Объект,ЭтотОбъект);
			Документы.фин_Бюджет.ЗаполнитьТаблицуВнешнихЗависимыхОборотов(Объект,ЭтотОбъект);
			Документы.фин_Бюджет.ОбновитьРасчетныеСписки(Объект,ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Документы.фин_Бюджет.ЗаполнитьТаблицуОборотовПриКорректировке(Объект,ЭтотОбъект);
	КонецЕсли;
	Документы.фин_Бюджет.ЗаполнитьТаблицуВнешнихРассчитанныхОборотов(Объект,ЭтотОбъект);
КонецПроцедуры //ОбновитьДанныеВнешнейСтруктуры

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета(ПереченьРазрезов,СписокТЧ)
	ОбработанныеРазрезы=Новый Массив;
	КЭШ_Разрезы = Неопределено;
	Для Каждого Разрез Из ПереченьРазрезов Цикл
		ИмяРазреза = фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Разрез.Значение);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
		ЭтотОбъект["ТипРазреза"+НомерРазреза]=ЭлементПВХ;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ+"Разрез"+НомерРазреза].Видимость = Истина;
		КонецЦикла;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ+"Разрез"+НомерРазреза].Заголовок = ?(СокрЛП(ЭлементПВХ.ПредставлениеДополнительногоРеквизита)="",Строка(ЭлементПВХ),ЭлементПВХ.ПредставлениеДополнительногоРеквизита);
			Элементы[ТЧ+"Разрез"+НомерРазреза].ОграничениеТипа =  ЭлементПВХ.ТипЗначения;
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		ИмяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(имяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Элементы[ТЧ+имяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// доработать
	
	// настройка контекстного меню
	//МассивКнопкиУдалить = Новый Массив;
	//Для Каждого Кнопка Из ЭлементыФормы.КонтекстноеМенюПоляБюджета.Кнопки.УровеньГруппировок.Кнопки Цикл
	//	Если Кнопка.Имя<>"РазвернутьВсе" Тогда
	//		МассивКнопкиУдалить.Добавить(Кнопка);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого УдаляемаяКнопка Из МассивКнопкиУдалить Цикл
	//	ЭлементыФормы.КонтекстноеМенюПоляБюджета.Кнопки.УровеньГруппировок.Кнопки.Удалить(УдаляемаяКнопка);
	//КонецЦикла;
	//Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
	//	ИмяРазреза 				= фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Разрез.Значение);
	//	ПредставлениеРазреза 	= фин_РаботаСДиалогамиБюджетирование.ПредставлениеРазреза(Разрез.Значение);
	//	Кнопка = ЭлементыФормы.КонтекстноеМенюПоляБюджета.Кнопки.УровеньГруппировок.Кнопки.Добавить(ИмяРазреза,ТипКнопкиКоманднойПанели.Действие,ПредставлениеРазреза,Новый Действие("УстановитьГруппировкуДерева"));
	//	Кнопка.Картинка = БиблиотекаКартинок.ТабличныйДокументОтображатьГруппировки;
	//КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровФормированияНаСервере(ИзмененБюджет = Ложь,ИзмененСценарий = Ложь)
	мБюджет 	= Объект.ФормируемыйБюджет;
	мСценарий 	= Объект.Сценарий;
	ОбновленыРасчетныеДанные = Ложь;
	Если ИзмененБюджет = Истина Тогда
	 	ОбновитьСопутствующиеДанныеБюджета();
		Если Объект.ФормируемыйБюджет.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда
			Объект.УправленческоеПодразделение 	= Объект.ФормируемыйБюджет.ПодразделениеПоУмолчанию;
			Объект.УровеньДетализацииБюджета 	= Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения;
		ИначеЕсли Объект.ФормируемыйБюджет.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам") Тогда
			Объект.Проект 						= Объект.ФормируемыйБюджет.ПроектПоУмолчанию;
			Объект.УровеньДетализацииБюджета 	= Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта;
		КонецЕсли;
		Если Объект.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
			ЗагрузитьНастройкиРедактирования();
			Если НЕ (ТолькоТабличныеЧасти ИЛИ РедактированиеВСКД) Тогда
				СозданиеСтруктурыДерева();
				НастроитьФиксациюКолонокБюджета(ЭтотОбъект);
				НастроитьАвтоВысотуЯчеекАналитики(ЭтотОбъект);
				НастроитьАвтоВысотуЯчейкиСтатьи(ЭтотОбъект);
			Иначе
				ЗаполнитьСоответствиеПериодов();
			КонецЕсли;
		КонецЕсли;
		ТабличныйВариант 					= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.Табличный;
		ТабличныйВариантТолькоДляАналитики	= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ТаблицыСАналитикойВИерархииСтатей;
	КонецЕсли;
	Если ИзмененСценарий = Истина Тогда
		ПереформироватьСтруктуру = ПродолжительностьЦикла<>фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
		ОбновитьСопутствующиеДанныеСценария();
		Объект.ПериодПланирования		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Объект.ПериодПланирования,Объект.Сценарий);
		ПроверкаНаличияВыполнена = Ложь;
		Если НЕ (ТолькоТабличныеЧасти ИЛИ РедактированиеВСКД) Тогда
			Если Объект.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
				Если ПереформироватьСтруктуру Тогда
					СозданиеСтруктурыДерева();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнитьСоответствиеПериодов();
		КонецЕсли;
		ПриИзмененииПериода(ПроверкаНаличияВыполнена,Ложь);
		фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
		Если Объект.ВалютаДокумента.Пустая() Тогда
			Объект.ВалютаДокумента = Объект.Сценарий.Валюта;
		КонецЕсли;
		ОбновитьКурсДокумента();
	КонецЕсли;
	Если ИзмененБюджет=Истина ИЛИ ИзмененСценарий=Истина Тогда
		УстановитьПараметрыВалютныхРасчетов();
		НастроитьУсловноеОформление();
		ОбновитьСписокЧисловыхПолей();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	Если НЕ ПроверкаНаличияВыполнена Тогда
		ПроверитьНаличиеБюджетов();
	КонецЕсли;
	Если (НЕ ТолькоТабличныеЧасти) И Объект.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ПерезаполнитьБюджет();
	КонецЕсли;
	ЗапомнитьСостояние();
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДереваБюджета

// Процедура ОбновитьПолеБюджета
// 
&НаСервере
Процедура ОбновитьПолеБюджета()
	
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;
	
	УровеньДетализацииБюджета = Объект.УровеньДетализацииБюджета;
	ФормируемыйБюджет = Объект.ФормируемыйБюджет;
	
	// получим данные
	ТаблицаОсновныхОборотов = Неопределено;
	ПодготовитьДанныеДляДереваФормы(ТаблицаОсновныхОборотов);
	
	ДеревоБюджета = ДанныеФормыВЗначение(ДеревоСтрокБюджета,Тип("ДеревоЗначений"));
	ДеревоБюджета.Строки.Очистить();
	
	СтрокиРазворота = Новый Массив;
	ЗаполнитьДеревоДанными(ДеревоБюджета,ТаблицаОсновныхОборотов,СтрокиРазворота);

	//просчет сумм по периодам
	Если НЕ ТабличныйВариант Тогда
		Для Каждого СтрокаРазворота Из СтрокиРазворота Цикл
			фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(СтрокаРазворота,ДеревоБюджета,Объект,ЭтотОбъект);
		КонецЦикла;
		Для Каждого СтрокаДерева Из ДеревоБюджета.Строки Цикл
			фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммыПоГруппам(СтрокаДерева,ДеревоБюджета,Объект,ЭтотОбъект);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаРазворота Из ДеревоБюджета.Строки Цикл
			фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(СтрокаРазворота,ДеревоБюджета,Объект,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	// расстановка кодов строк
	Для Каждого СтрокаДерева Из ДеревоБюджета.Строки Цикл
		УстановитьКодСтроки(СтрокаДерева,ФормируемыйБюджет.ИспользоватьКодыСтрокБюджета,Истина,Истина);
	КонецЦикла;
	// сортируем
	ТекстСортировки = "";
	Если ДеревоБюджета.Колонки.Найти(ФормируемыйБюджет.СпособСортировкиСтатей) <>Неопределено Тогда
		ТекстСортировки = ФормируемыйБюджет.СпособСортировкиСтатей;
	КонецЕсли;
	Для Каждого РазрезБюджета Из ФормируемыйБюджет.РазрезыУчета Цикл
		Если РазрезБюджета.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
			Продолжить;
		КонецЕсли;
		Если РазрезБюджета.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
			Продолжить;
		КонецЕсли;
		ТекстСортировки = ТекстСортировки + ?(ТекстСортировки="","",",")+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезБюджета.Измерение);
	КонецЦикла;
	Если ТекстСортировки<>"" Тогда
		ДеревоБюджета.Строки.Сортировать(ТекстСортировки,Истина);
	КонецЕсли;
		
	ЗначениеВДанныеФормы(ДеревоБюджета,ДеревоСтрокБюджета);
	
	Если РучнаяНастройкаИтоговПоГруппам ИЛИ (ЗначениеЗаполнено(РежимРасчетаИтогов) И РежимРасчетаИтогов<>ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать")) Тогда
		РассчитатьИтогиБюджета();
	КонецЕсли;
КонецПроцедуры //ОбновитьПолеБюджета

// Процедура ОбновитьПолеБюджета
// 
&НаСервере
Процедура ОбновитьПолеБюджетаПоВыбранным(СписокСтатей)
	
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ДеревоСтрокБюджета.ПолучитьЭлементы() Цикл
		ОбработатьСтрокиДереваДляОбновления(ЭлементДерева,СписокСтатей);	
	КонецЦикла;

	Если РучнаяНастройкаИтоговПоГруппам ИЛИ (ЗначениеЗаполнено(РежимРасчетаИтогов) И РежимРасчетаИтогов<>ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать")) Тогда
		РассчитатьИтогиБюджета();
	КонецЕсли;
КонецПроцедуры //ОбновитьПолеБюджета

&НаСервере
Процедура ОбработатьСтрокиДереваДляОбновления(ЭлементДерева,СписокСтатей)
	Если ЭлементДерева.ВидГруппировки = "" Тогда
		Для Каждого ЭлементДереваПодчиненный Из ЭлементДерева.ПолучитьЭлементы() Цикл
			ОбработатьСтрокиДереваДляОбновления(ЭлементДереваПодчиненный,СписокСтатей);	
		КонецЦикла;
	ИначеЕсли ЭлементДерева.ВидГруппировки = "СтатьяБюджета" И СписокСтатей.НайтиПоЗначению(ЭлементДерева.СтатьяБюджета)<>Неопределено Тогда
		Для Каждого Колонка Из СписокЧисловыхПолей Цикл
			ЭлементДерева[Колонка.Значение]=0;	
		КонецЦикла;
		Если НЕ ТабличныйВариант Тогда
			ЭлементДерева.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		ЗаполнитьЭлементыДерева(ЭлементДерева.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

//Процедура УстановитьКодСтроки
//
Процедура УстановитьКодСтроки(СтрокаДерева,УстановитьКодСтроки = Истина,УстановитьКод = Истина, УстановитьНаименование = Истина)
	Если УстановитьКодСтроки Тогда
		СтрокаДерева.КодСтрокиБюджета = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтрокиБюджета(СтрокаДерева.СтатьяБюджета,ЭтотОбъект);	
	КонецЕсли;
	Если УстановитьКод Тогда
		СтрокаДерева.Код = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтатьи(СтрокаДерева.СтатьяБюджета,ЭтотОбъект);	
	КонецЕсли;
	Если УстановитьНаименование Тогда
		СтрокаДерева.Наименование = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.НаименованиеСтатьи(СтрокаДерева.СтатьяБюджета,ЭтотОбъект);	
	КонецЕсли;
	Для Каждого СтрокаПодчиненная Из СтрокаДерева.Строки Цикл
		УстановитьКодСтроки(СтрокаПодчиненная,УстановитьКодСтроки,УстановитьКод,УстановитьНаименование);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиБюджета()
	//ДеревоБюджета = ДанныеФормыВЗначение(ДеревоСтрокБюджета,Тип("ДеревоЗначений"));
	ФормируемыйБюджет = Объект.ФормируемыйБюджет;
	Если (РучнаяНастройкаИтоговПоГруппам ИЛИ РежимРасчетаИтогов=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле) И ТаблицаФормулыРасчетаИтогов.Количество()>0 Тогда
		ТаблицаРезультат = фин_Защита.ПроизвестиРасчетИтоговСтрокБюджетаПоФормуле(ЭтотОбъект,ПродолжительностьЦикла,ТаблицаФормулыРасчетаИтогов,ТаблицаСоставФормулРасчетаИтогов,ТочностьКоличественныхПоказателей);
		СписокРесурсов = Новый Массив;
		Если СтруктураПоказателей.Сумма Тогда
			СписокРесурсов.Добавить("Сумма");
		КонецЕсли;
		Если СтруктураПоказателей.Количество Тогда
			СписокРесурсов.Добавить("Количество");
		КонецЕсли;
		Если РучнаяНастройкаИтоговПоГруппам Тогда
			Для Каждого СтрокаПодчиненная Из ДеревоСтрокБюджета.ПолучитьЭлементы() Цикл
				УстановитьИтогВСтрокуДерева(СтрокаПодчиненная,ТаблицаРезультат,СписокРесурсов);
			КонецЦикла;
		КонецЕсли;
		Если РежимРасчетаИтогов=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле Тогда
			Для Каждого СтрокаРезультат Из ТаблицаРезультат.НайтиСтроки(Новый Структура("СтатьяБюджета",Справочники.фин_СтатьиБюджета.ПустаяСсылка())) Цикл
				Для Каждого Ресурс Из СписокРесурсов Цикл
					Если СтрокаРезультат.ПериодПланирования=0 Тогда
						Элементы["ДеревоСтрокБюджетаИтого"+Ресурс].ТекстПодвала = СтрокаРезультат[Ресурс];
					Иначе
						Элементы["ДеревоСтрокБюджетаИтого"+Ресурс+?(БазовыйНаборКолонок=1,"",Строка(СтрокаРезультат.ПериодПланирования))].ТекстПодвала = СтрокаРезультат[Ресурс];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если РежимРасчетаИтогов=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать ИЛИ РежимРасчетаИтогов=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПустаяСсылка() Тогда
		Возврат;
	ИначеЕсли РежимРасчетаИтогов=Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции Тогда
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ТаблицаРезультат.Колонки.Добавить("РезультатРасчетаИтога",Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("КоличествоЗначений",Новый ОписаниеТипов("Число"));
		ТаблицаРезультат.Колонки.Добавить("ПериодПланирования");
		СтруктураИтога = Новый Структура("ПериодПланирования");
		СтруктураСвертки = "СтатьяБюджета,ПериодПланирования";
		ТаблицаВнешнегоНабораДанных = Новый ТаблицаЗначений;
		ТаблицаВнешнегоНабораДанных.Колонки.Добавить("СтатьяБюджета");
		ТаблицаВнешнегоНабораДанных.Колонки.Добавить("ПериодПланирования");
		Имя = "ПериодПланирования";
		ПоляСуммирования = "";
		СписокРесурсов = Новый Массив;
		Если ФормируемыйБюджет.УчетПоСумме Тогда
			Имя = "Сумма";
            ПоляСуммирования = ПоляСуммирования+?(ПоляСуммирования="","",",")+Имя;
			ТаблицаРезультат.Колонки.Добавить(Имя,Новый ОписаниеТипов("Число"));
			СписокРесурсов.Добавить(Имя);
			ТаблицаВнешнегоНабораДанных.Колонки.Добавить("Сумма");
		КонецЕсли;
		Если ФормируемыйБюджет.УчетПоКоличеству Тогда
			Имя = "Количество";
            ПоляСуммирования = ПоляСуммирования+?(ПоляСуммирования="","",",")+Имя;
			ТаблицаРезультат.Колонки.Добавить(Имя,Новый ОписаниеТипов("Число"));
			СписокРесурсов.Добавить(Имя);
			ТаблицаВнешнегоНабораДанных.Колонки.Добавить("Количество");
		КонецЕсли;
		ЗаполнитьТаблицуДанныхДляИтогов(ТаблицаВнешнегоНабораДанных,ДеревоСтрокБюджета.ПолучитьЭлементы(),СписокРесурсов);
		КопияТаблицы = ТаблицаВнешнегоНабораДанных.Скопировать();
		КопияТаблицы.Свернуть(СтруктураСвертки,ПоляСуммирования); 
		НеГраничнаяИтоговаяФункция = ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.Минимум И ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.Максимум;
		СписокИсключений = Новый СписокЗначений;
		СписокИсключений.ЗагрузитьЗначения(фин_ОбщегоНазначенияВызовСервераПовтИсп.ИсключаемыеИзИтогов(Объект.ФормируемыйБюджет));
		Для Каждого СтрокаТаблицы Из КопияТаблицы Цикл
			Если СписокИсключений.НайтиПоЗначению(СтрокаТаблицы.СтатьяБюджета)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Новая = Ложь;
			Если СтруктураИтога.Количество()=0 Тогда
				Если ТаблицаРезультат.Количество()=0 Тогда
					Новая = Истина;
				КонецЕсли;
				ЗаполняемаяСтрока = ?(ТаблицаРезультат.Количество()=0,ТаблицаРезультат.Добавить(),ТаблицаРезультат[0]);
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураИтога,СтрокаТаблицы);
				НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтруктураИтога);
				Если НайденныеСтроки.Количество()=0 Тогда
					Новая = Истина;
					ЗаполняемаяСтрока = ТаблицаРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока,СтруктураИтога);
				Иначе
					ЗаполняемаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			ЗаполняемаяСтрока.КоличествоЗначений = ЗаполняемаяСтрока.КоличествоЗначений + 1;
			Для Каждого Ресурс Из СписокРесурсов Цикл
				Если Новая ИЛИ НеГраничнаяИтоговаяФункция Тогда
					ЗаполняемаяСтрока[Ресурс] = ЗаполняемаяСтрока[Ресурс] + СтрокаТаблицы[Ресурс];
				ИначеЕсли ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Минимум Тогда
					ЗаполняемаяСтрока[Ресурс] = Мин(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
				Иначе
					ЗаполняемаяСтрока[Ресурс] = Макс(ЗаполняемаяСтрока[Ресурс],СтрокаТаблицы[Ресурс]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.Сумма И ИтоговаяФункция<>Перечисления.фин_ИтоговыеФункции.ПустаяСсылка() Тогда
			Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
				Если ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Количество Тогда
					Для Каждого Ресурс Из СписокРесурсов Цикл
						СтрокаРезультат[Ресурс] = СтрокаРезультат["КоличествоЗначений"];
					КонецЦикла;
				ИначеЕсли ИтоговаяФункция=Перечисления.фин_ИтоговыеФункции.Среднее Тогда
					Для Каждого Ресурс Из СписокРесурсов Цикл
						СтрокаРезультат[Ресурс] = СтрокаРезультат[Ресурс]/СтрокаРезультат["КоличествоЗначений"];
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			Для Каждого Ресурс Из СписокРесурсов Цикл
				Если СтрокаРезультат.ПериодПланирования=0 Тогда
					Элементы["ДеревоСтрокБюджетаИтого"+Ресурс].ТекстПодвала = СтрокаРезультат[Ресурс];
				Иначе
					Элементы["ДеревоСтрокБюджетаИтого"+Ресурс+?(БазовыйНаборКолонок=1,"",Строка(СтрокаРезультат.ПериодПланирования))].ТекстПодвала = СтрокаРезультат[Ресурс];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//Если РучнаяНастройкаИтоговПоГруппам Тогда
	//	ЗначениеВДанныеФормы(ДеревоБюджета,ДеревоСтрокБюджета);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УстановитьИтогВСтрокуДерева(СтрокаДерева,ТаблицаРезультат,СписокРесурсов)
	Если СтрокаДерева.ВидГруппировки<>"" И СтрокаДерева.ВидГруппировки<>"СтатьяБюджета" Тогда
		Возврат Ложь;
	КонецЕсли;
	СтатьяБюджета 	= СтрокаДерева.СтатьяБюджета;
	СтрокиРезультат	= ТаблицаРезультат.НайтиСтроки(Новый Структура("СтатьяБюджета",СтатьяБюджета));
	Если СтрокиРезультат.Количество()<>0 Тогда
		Для Каждого Ресурс Из СписокРесурсов Цикл
			Для Каждого СтрокаРезультат Из СтрокиРезультат Цикл
				Если СтрокаРезультат.ПериодПланирования=0 Тогда
					СтрокаДерева["Итого"+Ресурс] = СтрокаРезультат[Ресурс];
				Иначе
					СтрокаДерева["Итого"+Ресурс+?(БазовыйНаборКолонок=1,"",Строка(СтрокаРезультат.ПериодПланирования))] = СтрокаРезультат[Ресурс];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если СтрокаДерева.ВидГруппировки="" Тогда
		Для Каждого СтрокаПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
			УстановитьИтогВСтрокуДерева(СтрокаПодчиненная,ТаблицаРезультат,СписокРесурсов);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрокиРезультат.Количество()<>0;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанныхДляИтогов(ТаблицаДляИтогов,НаборСтрок,СписокРесурсов)
	Для Каждого СтрокаДерева Из НаборСтрок Цикл
		Если СтрокаДерева.ВидГруппировки = "" Тогда
			ЗаполнитьТаблицуДанныхДляИтогов(ТаблицаДляИтогов,СтрокаДерева.ПолучитьЭлементы(),СписокРесурсов);
		ИначеЕсли СтрокаДерева.ВидГруппировки = "СтатьяБюджета" Тогда
			Для Инд = 1 По БазовыйНаборКолонок Цикл
				ТекстИндекс = ?(БазовыйНаборКолонок=1,"",Строка(Инд));
				Если СтрокаДерева.ВалютаОперации<> ВалютаСводаБаланса Тогда
					КурсСтроки 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,СтрокаДерева.ВалютаОперации,ОбратноеСоответствиеПериодов.Получить(Инд));
					КурсБаланса = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаСводаБаланса,ОбратноеСоответствиеПериодов.Получить(Инд));
				КонецЕсли;
				НС = ТаблицаДляИтогов.Добавить();
				НС.СтатьяБюджета = СтрокаДерева.СтатьяБюджета;
				НС.ПериодПланирования = Инд;
				Для Каждого Ресурс Из СписокРесурсов Цикл
					ЗначениеРесурса = СтрокаДерева["Итого"+Ресурс+ТекстИндекс];
					Если Ресурс="Сумма" И СтрокаДерева.ВалютаОперации<> ВалютаСводаБаланса Тогда
						ЗначениеРесурса = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ЗначениеРесурса,СтрокаДерева.ВалютаОперации,ВалютаСводаБаланса,КурсСтроки.Курс,КурсБаланса.Курс,КурсСтроки.Кратность,КурсБаланса.Кратность);
					КонецЕсли;
					НС[Ресурс] = ЗначениеРесурса;
				КонецЦикла;
			КонецЦикла;
			Если БазовыйНаборКолонок>1 Тогда
				Если СтрокаДерева.ВалютаОперации<> ВалютаСводаБаланса Тогда
					КурсСтроки 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,СтрокаДерева.ВалютаОперации,Объект.ПериодПланирования);
					КурсБаланса = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаСводаБаланса,Объект.ПериодПланирования);
				КонецЕсли;
				НС = ТаблицаДляИтогов.Добавить();
				НС.СтатьяБюджета = СтрокаДерева.СтатьяБюджета;
				НС.ПериодПланирования = 0;
				Для Каждого Ресурс Из СписокРесурсов Цикл
					ЗначениеРесурса = СтрокаДерева["Итого"+Ресурс];
					Если Ресурс="Сумма" И СтрокаДерева.ВалютаОперации<> ВалютаСводаБаланса Тогда
						ЗначениеРесурса = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ЗначениеРесурса,СтрокаДерева.ВалютаОперации,ВалютаСводаБаланса,КурсСтроки.Курс,КурсБаланса.Курс,КурсСтроки.Кратность,КурсБаланса.Кратность);
					КонецЕсли;
					НС[Ресурс] = ЗначениеРесурса;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// производит первоначальную подготовку исходных данных для
// дерева бюджета
&НаСервере
Процедура ПодготовитьДанныеДляДереваФормы(ТаблицаОсновныхОборотов)
	//Объект_ОборотыПоСтатьям = Объект.ОборотыПоСтатьям.Выгрузить();
	// создадим шаблон таблицы данных
	ТаблицаОсновныхОборотов = Объект.ОборотыПоСтатьям.Выгрузить();
	ТаблицаОсновныхОборотов.Колонки.Добавить("ВидСтроки",Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВидыСтрокБюджета"));
	ТаблицаОсновныхОборотов.Колонки.Добавить("Корректировки",Новый ОписаниеТипов("Число"));
	ТаблицаОсновныхОборотов.Колонки.Удалить("ДополнительныеРазрезы");
	Если НЕ РазрезНайден(СтруктураРазрезовБюджета,Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение) Тогда
		Если ТаблицаОсновныхОборотов.Колонки.Найти("Подразделение")<>Неопределено Тогда
			ТаблицаОсновныхОборотов.Колонки.Удалить("Подразделение");
		Иначе
			ТаблицаОсновныхОборотов.Колонки.Удалить("УправленческоеПодразделение");
		КонецЕсли;
	КонецЕсли;
	Если НЕ РазрезНайден(СтруктураРазрезовБюджета,Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект) Тогда
		ТаблицаОсновныхОборотов.Колонки.Удалить("Проект");
	КонецЕсли;
	// формируем итоговую таблицу
	// 1 - обработаем основные обороты
	ТаблицаОсновныхОборотов.ЗаполнитьЗначения(Перечисления.фин_ВидыСтрокБюджета.Первичная,"ВидСтроки");
	ТаблицаОсновныхОборотов.ЗаполнитьЗначения(1,"Корректировки");
	//ПромежуточнаяТаблицаОсновныхОборотов 	= Объект_ОборотыПоСтатьям;
	Для Каждого ЭлементСпискаФормульных Из СписокФормульных Цикл
		Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(ЭлементСпискаФормульных.Значение,ЭтотОбъект) Тогда
			СтрокиСтатьи = ТаблицаОсновныхОборотов.НайтиСтроки(Новый Структура("СтатьяБюджета",ЭлементСпискаФормульных.Значение));
			Для Каждого СтрокаОборотов Из СтрокиСтатьи Цикл
				СтрокаОборотов.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	// 2 - перенесем локально сформированные зависимости
	ТаблицаЗависимыхОборотов 	= Объект.ЗависимыеОбороты.Выгрузить();
	Для Каждого СтрокаТЗО Из ТаблицаЗависимыхОборотов Цикл
		Если НЕ СтрокаТЗО.СтатьяБюджета.Пустая() Тогда
			Если СписокСтатей<>Неопределено Тогда
				Если СписокСтатей.НайтиПоЗначению(СтрокаТЗО.СтатьяБюджета)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтр = ТаблицаОсновныхОборотов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТЗО.ДополнительныеРазрезы);
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТЗО);
			НовСтр.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости;
		КонецЕсли;
	КонецЦикла;
	// 3 - перенесем наследуемые обороты
	Для Каждого СтрокаТЗО Из ВнешниеОборотыБюджета Цикл
	//Для Каждого СтрокаТЗО Из НаследуемыеОбороты Цикл
		Если НЕ СтрокаТЗО.СтатьяБюджета.Пустая() Тогда
			Если СписокСтатей<>Неопределено Тогда
				Если СписокСтатей.НайтиПоЗначению(СтрокаТЗО.СтатьяБюджета)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтр = ТаблицаОсновныхОборотов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТЗО);
			//Если СписокРассчитываемыхВПредшествующихБюджетах.НайтиПоЗначению(НовСтр.СтатьяБюджета)<>Неопределено Тогда
			//	НовСтр.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая;
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 4 - перенесем расчетные статьи
	ТаблицаРассчитанных = Объект.РасчетыПоМоделям.Выгрузить();
	ТаблицаРассчитанных.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"));
	ТаблицаРассчитанных.ЗаполнитьЗначения(Объект.Состояние,"Состояние");
	Для Каждого СтрокаТЗО Из ТаблицаРассчитанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЗО.СтатьяБюджета) Тогда
			Если СписокСтатей<>Неопределено Тогда
				Если СписокСтатей.НайтиПоЗначению(СтрокаТЗО.СтатьяБюджета)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовСтр = ТаблицаОсновныхОборотов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТЗО);
			НовСтр.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели;
		КонецЕсли;
	КонецЦикла;

	// 5 - заполним суммы корректировки
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Для Каждого СтрокаТЗО Из ОборотыПриКорректировке Цикл
			Если НЕ СтрокаТЗО.СтатьяБюджета.Пустая() Тогда
				Если СписокСтатей<>Неопределено Тогда
					Если СписокСтатей.НайтиПоЗначению(СтрокаТЗО.СтатьяБюджета)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НовСтр = ТаблицаОсновныхОборотов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,СтрокаТЗО);
				НовСтр.ВидСтроки 		= ОпределитьВидСтрокиБюджета(НовСтр.СтатьяБюджета);
				Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(НовСтр.ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(НовСтр.ФинансовыйПоказатель,ЭтотОбъект) Тогда
					НовСтр.Цена = ?(НовСтр.Количество=0,0,НовСтр.Сумма / НовСтр.Количество);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// сформируем структуру корректировок для подсвечивания в дереве
		
	КонецЕсли;
КонецПроцедуры //ПодготовитьДанныеДляДереваФормы

// вводит в дерево очередную партию
//
&НаСервере
Процедура ДобавитьДанныеВДерево(Выборка,Группировка=Неопределено,СтрокаДерева,ФинансовыйПоказатель,СтрокаСтатьи,МассивПоказатели)
	УровеньДетализацииБюджета 	= Объект.УровеньДетализацииБюджета;
	ФормируемыйБюджет 			= Объект.ФормируемыйБюджет;
	Сценарий 					= Объект.Сценарий;
	Если ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.Иерархический Тогда
		Если Группировка = Неопределено Тогда
			СтрокаНоменклатура = Неопределено;
			Если СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура)<>Неопределено Тогда
				Если СтрокаДерева.ВидГруппировки = "Номенклатура" Тогда
					СтрокаНоменклатура = Неопределено;
				Иначе
					Родитель = СтрокаДерева.Родитель;
					Пока Родитель<>Неопределено Цикл
						Если Родитель.ВидГруппировки = "Номенклатура" Тогда
							СтрокаНоменклатура = Родитель;
							Прервать;
						КонецЕсли;
						Родитель = Родитель.Родитель;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Корректировки = 0;
			Если ПродолжительностьЦикла >1 Тогда
				ВыборкаДетали = Выборка.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					Корректировки = Корректировки + ВыборкаДетали.Корректировки;
					// разбиваем данные по периодам
					//НомерПериода = СоответствиеПериодов.Получить(ВыборкаДетали.ПериодПланирования);
					//Если НомерПериода <>Неопределено Тогда
					Для НомерПериода = 1 По ПродолжительностьЦикла Цикл
						Если СтруктураПоказателей.Сумма Тогда
							СтрокаДерева["ИтогоСумма"+Строка(НомерПериода)] 	= ВыборкаДетали["ИтогоСумма"+Строка(НомерПериода)];
						КонецЕсли;
						Если СтруктураПоказателей.Количество Тогда
							СтрокаДерева["ИтогоКоличество"+Строка(НомерПериода)] = ВыборкаДетали["ИтогоКоличество"+Строка(НомерПериода)];
						КонецЕсли;
						Если СтруктураПоказателей.Цена Тогда
							Если НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
								ЦенаДляПодстановки = ПолучитьЦенуДляПодстановки(ВыборкаДетали["Цена"+Строка(НомерПериода)],СтрокаДерева);
								СтрокаДерева["Цена"+Строка(НомерПериода)] = ЦенаДляПодстановки;
								Если СтрокаНоменклатура <>Неопределено Тогда
									СтрокаНоменклатура["Цена"+Строка(НомерПериода)] = ЦенаДляПодстановки;
								КонецЕсли;
							ИначеЕсли НомерПериода = 1 Тогда
								ЦенаДляПодстановки = ПолучитьЦенуДляПодстановки(ВыборкаДетали.Цена,СтрокаДерева);
								СтрокаДерева["Цена"] = ЦенаДляПодстановки;
								Если СтрокаНоменклатура <>Неопределено Тогда
									СтрокаНоменклатура["Цена"] = ЦенаДляПодстановки;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					//КонецЕсли;
				КонецЦикла;
			Иначе
				ВыборкаДетали = Выборка.Выбрать();
				Если ВыборкаДетали.Следующий() Тогда
					Корректировки = Корректировки + ВыборкаДетали.Корректировки;
					// разбиваем данные по периодам
						Если СтруктураПоказателей.Сумма Тогда
							СтрокаДерева["ИтогоСумма"] 	= ВыборкаДетали.ИтогоСумма;
						КонецЕсли;
						Если СтруктураПоказателей.Количество Тогда
							СтрокаДерева["ИтогоКоличество"] = ВыборкаДетали.ИтогоКоличество;
						КонецЕсли;
						Если СтруктураПоказателей.Цена И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
							ЦенаДляПодстановки = ПолучитьЦенуДляПодстановки(ВыборкаДетали.Цена,СтрокаДерева);
							СтрокаДерева["Цена"] = ЦенаДляПодстановки;
							Если СтрокаНоменклатура <>Неопределено Тогда
								СтрокаНоменклатура["Цена"] = ЦенаДляПодстановки;
							КонецЕсли;
						КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтрокаДерева.Корректировки = Корректировки;
		Иначе
			ВыборкаВложенная = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,Группировка);
			Пока ВыборкаВложенная.Следующий() Цикл
				СоздатьСтроку = Истина;
				Если Группировка = "Проект" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
					СоздатьСтроку = Ложь;
				ИначеЕсли Группировка = "УправленческоеПодразделение" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
					СоздатьСтроку = Ложь;
				ИначеЕсли Группировка = "ВалютаОперации" И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ФинансовыйПоказатель,ЭтотОбъект) Тогда
					СоздатьСтроку = Ложь;
				ИначеЕсли (((НЕ ЗначениеЗаполнено(ВыборкаВложенная[Группировка]) ИЛИ Группировка = "ВалютаОперации") И ВыборкаВложенная.Количество()<2) ИЛИ ((НЕ ЗначениеЗаполнено(ВыборкаВложенная[Группировка]) ИЛИ Группировка = "ВалютаОперации") И (ВыборкаВложенная.Сумма=0 И ВыборкаВложенная.Количество=0) И ВыборкаВложенная.Количество()<2)) Тогда // И НЕ (ВыборкаВложенная.Выбрать().Количество()>=СтруктураРазрезовБюджета.Количество() - СтруктураРазрезовБюджета.Индекс(СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Группировка])) -1) Тогда
					СоздатьСтроку = Ложь;
				ИначеЕсли Группировка <> "ВалютаОперации" И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Группировка],ЭтотОбъект) Тогда
					СоздатьСтроку = Ложь;
				КонецЕсли;
				Если СоздатьСтроку Тогда
					СтрокаРазрез = СтрокаДерева.Строки.Добавить();
					СтрокаРазрез[Группировка]		= ВыборкаВложенная[Группировка];
					СтрокаРазрез.ИтогоСумма			= ВыборкаВложенная.Сумма;
					СтрокаРазрез.ИтогоКоличество	= ВыборкаВложенная.Количество;
					СтрокаРазрез.Цена				= ВыборкаВложенная.Цена;
					СтрокаРазрез.ФинансовыйПоказатель		= ФинансовыйПоказатель;
					СтрокаРазрез.ВидГруппировки		= Группировка;
					СтрокаРазрез.ВидСтроки 			= СтрокаСтатьи.ВидСтроки;
					СтрокаРазрез.Состояние 			= ?(ЗначениеЗаполнено(ВыборкаВложенная.Состояние),ВыборкаВложенная.Состояние,фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден());
					СтрокаРазрез.ПричинаКорректировки = ВыборкаВложенная.ПричинаКорректировки;
					СтрокаРазрез.ПричинаОтклонения 	= ВыборкаВложенная.ПричинаОтклонения;
					Если СписокФормульных.НайтиПоЗначению(СтрокаСтатьи.СтатьяБюджета)<>Неопределено И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда
						СтрокаРазрез.ВидСтроки 			= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
					КонецЕсли;
					Если Группировка = "Номенклатура" И ТипЗнч(ВыборкаВложенная[Группировка])=Тип("СправочникСсылка.Номенклатура") Тогда
						СтрокаРазрез.ЕдиницаИзмерения		= ВыборкаВложенная[Группировка][фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()];
					КонецЕсли;
					СтрокаРазрез.УчетПоКоличеству	 		= СтрокаСтатьи.УчетПоКоличеству;
					СтрокаРазрез.УчетПоСумме        		= СтрокаСтатьи.УчетПоСумме;
					СтрокаРазрез.УчетПоРазрезуНоменклатура	= СтрокаСтатьи.УчетПоРазрезуНоменклатура;
					СтрокаРазрез.ОписаниеТиповВыбораНоменклатуры = СтрокаСтатьи.ОписаниеТиповВыбораНоменклатуры;
					Если СтрокаРазрез.УчетПоСумме Тогда
						Если Объект.ЕдинаяВалюта ИЛИ ВыборкаВложенная.ВалютаОперацииКоличество>1 Тогда
							СтрокаРазрез.ВалютаОперации     = СтрокаСтатьи.ВалютаОперации;
						Иначе
							СтрокаРазрез.ВалютаОперации     = ВыборкаВложенная.ВалютаОперацииСтроки;
						КонецЕсли;
					КонецЕсли;
					СтрокаРазрез.Корректировки = ВыборкаВложенная.Корректировки;
				Иначе
					СтрокаРазрез = СтрокаДерева;
					Если Группировка = "ВалютаОперации" Тогда
						СтрокаРазрез[Группировка]		= ВыборкаВложенная[Группировка];
					КонецЕсли;
				КонецЕсли;
				Если Группировка = "ВалютаОперации" Тогда
					СледующийРазрез = Неопределено;
				Иначе
					ТекущийРазрез = СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Группировка]);
					Если СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)=СтруктураРазрезовБюджета.Количество()-1 Тогда
						СледующийРазрез = ?(Объект.ЕдинаяВалюта,Неопределено,"ВалютаОперации");
					Иначе
						СледующийРазрез = СтруктураРазрезовБюджета.Получить(СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)+1).Представление;
						Пока СледующийРазрез <>Неопределено И ((СледующийРазрез = "УправленческоеПодразделение" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ФормируемыйБюджет.ВключаяПодчиненныеПодразделения) ИЛИ
							(СледующийРазрез = "Проект" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта)) Цикл
							ТекущийРазрез = СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[СледующийРазрез]);
							Если СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)=СтруктураРазрезовБюджета.Количество()-1 Тогда
								СледующийРазрез = Неопределено;
							Иначе
								СледующийРазрез = СтруктураРазрезовБюджета.Получить(СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)+1).Представление;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ДобавитьДанныеВДерево(ВыборкаВложенная,СледующийРазрез,СтрокаРазрез,ФинансовыйПоказатель,СтрокаСтатьи,МассивПоказатели);
			КонецЦикла;
		КонецЕсли;
		Если СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Первичная И СтрокаДерева.Строки.Количество()>0 Тогда
			СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Итоговая;
		КонецЕсли;
	Иначе
		НаборЭлементов 		= СтрокаДерева.Строки;
		ВыборкаВложенная 	= Выборка.Выбрать();
		ПроверитьНаПустую 	= Ложь;
		Если ТабличныйВариантТолькоДляАналитики Тогда
			Если ВыборкаВложенная.Количество()=1 Тогда
				ПроверитьНаПустую = Истина;
			КонецЕсли;
		КонецЕсли;
		СписокОбрабатываемыхРазрезов = Новый СписокЗначений;
		Для Каждого РазрезБюджета Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = РазрезБюджета.Представление;
			Если ИмяРазреза = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяРазреза = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
				Продолжить;
			КонецЕсли;
			СписокОбрабатываемыхРазрезов.Добавить(ИмяРазреза,ИмяРазреза);
		КонецЦикла;
		Пока ВыборкаВложенная.Следующий() Цикл
			Если ПроверитьНаПустую Тогда
				Пустая = Истина;
				Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
					Если Разрез.Представление = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
						Продолжить;
					КонецЕсли;
					Если Разрез.Представление = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(ВыборкаВложенная[Разрез.Представление]) Тогда
						Пустая = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если НЕ Объект.ЕдинаяВалюта И ЗначениеЗаполнено(ВыборкаВложенная.ВалютаОперации) Тогда
					Пустая = Ложь;
				КонецЕсли;
				Если Пустая Тогда
					ЧисловыеПоля = "";
					Для Каждого Показатель Из МассивПоказатели Цикл
						ЧисловыеПоля = ЧисловыеПоля + ?(ЧисловыеПоля="","",",") + Показатель;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(СтрокаДерева,ВыборкаВложенная,ЧисловыеПоля);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = НаборЭлементов.Добавить();
			Если ТабличныйВариант Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСтатьи);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаВложенная,,"ВидСтроки");
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаСтатьи,,"СтатьяБюджета,КодСтрокиБюджета");
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаВложенная,,"СтатьяБюджета,ВидСтроки");
				Если СтрокаСтатьи.ВидСтроки 	= Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
					СтрокаСтатьи.ВидСтроки 		= Перечисления.фин_ВидыСтрокБюджета.Итоговая;
				КонецЕсли;
				Если СтрокаСтатьи.ВидСтроки 	= Перечисления.фин_ВидыСтрокБюджета.Итоговая Тогда
					НоваяСтрока.ВидСтроки 		= Перечисления.фин_ВидыСтрокБюджета.Первичная;
					НоваяСтрока.ВидГруппировки 	= "ТаблицаАналитики";
				КонецЕсли;
			КонецЕсли;
			Если ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
				СтрокаЗаполнения = "";
				Для Каждого РазрезБюджета Из СписокОбрабатываемыхРазрезов Цикл
					ИмяРазреза = РазрезБюджета.Представление;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока[ИмяРазреза]) Тогда
						СтрокаЗаполнения = СтрокаЗаполнения + ?(СтрокаЗаполнения="","",",")+ИмяРазреза;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаЗаполнения<>"" Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПустыхЗначений,СтрокаЗаполнения);
					Если Найти(СтрокаЗаполнения,"Номенклатура")<>0 Тогда
						НоваяСтрока["Номенклатура"] = ПустоеЗначениеРазреза("Номенклатура",НоваяСтрока.ФинансовыйПоказатель);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Корректировки = ВыборкаВложенная.Корректировки;
		КонецЦикла;
		Если ТабличныйВариант Тогда
			СтрокаДерева.Строки.Удалить(СтрокаСтатьи);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ДобавитьДанныеВДерево

&НаСервере
Функция ПолучитьЦенуДляПодстановки(ЦенаИзЗапроса,СтрокаДерева,Детали = Истина)
	Если Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Если Объект.ОборотыПоСтатьям.Количество()=0 Тогда
			Возврат ЦенаИзЗапроса;
		КонецЕсли;
		ТекущаяСтрока = СтрокаДерева;
		мСтруктураПоискаИзменяемых = Новый Структура;
		ТекущаяСтрока = СтрокаДерева;
		Если ТабличныйВариант Тогда
			мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока["СтатьяБюджета"]);
			СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
			Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
				мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
			КонецЦикла;
		ИначеЕсли ТабличныйВариантТолькоДляАналитики Тогда
			Если ТекущаяСтрока.ВидГруппировки = "СтатьяБюджета" Тогда
				мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока["СтатьяБюджета"]);	
				ИзменяемоеИзмерение = "СтатьяБюджета";
			Иначе
				мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока.Родитель["СтатьяБюджета"]);	
				СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
				Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
					мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
				КонецЦикла;
			КонецЕсли;
		Иначе
			мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
			Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
				ТекущаяСтрока = ТекущаяСтрока.Родитель;
				мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
			КонецЦикла;
		КонецЕсли;
		СтрокиДерева = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоискаИзменяемых);
		Если СтрокиДерева.Количество()>0 Тогда
			Возврат СтрокиДерева[0].Цена;	
		КонецЕсли;
		Возврат ЦенаИзЗапроса;
	Иначе
		Возврат ЦенаИзЗапроса;
	КонецЕсли;
КонецФункции

// заполняет дерево формы данными
//
&НаСервере
Процедура ЗаполнитьДеревоДанными(ДеревоБюджета,ТаблицаОсновныхОборотов,СтрокиРазворота,РежимДополнения=Ложь)
	
	ТекстИзмерения = "";
	ТекстИзмеренияРезультирующие = "";
	ТекстИтоги = "";
	
	УровеньДетализацииБюджета 	= Объект.УровеньДетализацииБюджета;
	ФормируемыйБюджет 			= Объект.ФормируемыйБюджет;
	ВидОперации 				= Объект.ВидОперации;
	Проект 						= Объект.Проект;
	Состояние 					= Объект.Состояние;
	УправленческоеПодразделение = Объект.УправленческоеПодразделение;
	ПериодПланирования 			= Объект.ПериодПланирования;
	Сценарий 					= Объект.Сценарий;
	ВалютаДокумента 			= Объект.ВалютаДокумента;
	//КурсДокумента 				= Объект.КурсДокумента;
	//КратностьДокумента 			= Объект.КратностьДокумента;
	
	Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
		Если Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение И УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
			Продолжить;
		ИначеЕсли Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект И УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
			Продолжить;
		КонецЕсли;
		ИмяРазреза = Разрез.Представление;
		ТекстИзмерения=ТекстИзмерения+"
		|	 ТаблицаОсновныхОборотов."+ИмяРазреза+",";
		ТекстИзмеренияРезультирующие=ТекстИзмеренияРезультирующие+"
		|	 ВТ_ИсходныеОбороты."+ИмяРазреза+",";
		ТекстИтоги=ТекстИтоги+",
		|	 "+ИмяРазреза;
		
	КонецЦикла;
	Если НЕ Объект.ЕдинаяВалюта Тогда
		ИмяРазреза = "ВалютаОперации";
		ТекстИзмерения=ТекстИзмерения+"
		|	 ТаблицаОсновныхОборотов."+ИмяРазреза+",";
		ТекстИзмеренияРезультирующие=ТекстИзмеренияРезультирующие+"
		|	 ВТ_ИсходныеОбороты."+ИмяРазреза+",";
		ТекстИтоги=ТекстИтоги+",
		|	 "+ИмяРазреза;
		
	КонецЕсли;
	
	Если НЕ РежимДополнения Тогда
		
		СписокВключенныхСтатейБюджета = ТаблицаОсновныхОборотов.ВыгрузитьКолонку("СтатьяБюджета");
		Версии = Новый СписокЗначений;
		Версии.Добавить(Версия);
		Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
		Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтатьиБюджета.Ссылка,
			|	СтатьиБюджета.ФинансовыйПоказатель
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
			|ГДЕ
			|	СтатьиБюджета.Владелец = &Бюджет
			|	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
			|	И НЕ СтатьиБюджета.Ссылка В (&Статьи)
			|	И СтатьиБюджета.Версия В(&Версия)
			|	И СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
			|	И СтатьиБюджета.ПометкаУдаления = ЛОЖЬ";

		Запрос.УстановитьПараметр("Бюджет", ФормируемыйБюджет);
		Запрос.УстановитьПараметр("Версия", Версии);
		Запрос.УстановитьПараметр("Статьи", СписокВключенныхСтатейБюджета);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НС = ТаблицаОсновныхОборотов.Добавить();
			НС.ВалютаОперации = ВалютаДокумента;
			НС.ПериодПланирования = ПериодПланирования;
			НС.Состояние = Состояние;
			НС.СтатьяБюджета = ВыборкаДетальныеЗаписи.Ссылка;
			НС.ФинансовыйПоказатель = ВыборкаДетальныеЗаписи.ФинансовыйПоказатель;
			Если Найти(ТекстИзмерения,"УправленческоеПодразделение")<>0 Тогда
				НС.УправленческоеПодразделение=УправленческоеПодразделение;	
			КонецЕсли; 
			Если Найти(ТекстИзмерения,"Проект")<>0 Тогда
				НС.Проект=Проект;	
			КонецЕсли;
			НС.ВидСтроки = ОпределитьВидСтрокиБюджета(НС.СтатьяБюджета);
		КонецЦикла;
	КонецЕсли;
	
	МассивПоказатели = Новый Массив;
	Если СтруктураПоказателей.Цена Тогда
		МассивПоказатели.Добавить("Цена");
	КонецЕсли;
	Если СтруктураПоказателей.Сумма Тогда
		МассивПоказатели.Добавить("ИтогоСумма");
	КонецЕсли;
	Если СтруктураПоказателей.Количество Тогда
		МассивПоказатели.Добавить("ИтогоКоличество");
	КонецЕсли;
	
	ТекстПоказатели = ",
//	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Корректировки) КАК Корректировки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Цена) КАК Цена,
	|	СУММА(ВТ_ИсходныеОбороты.Сумма) КАК Сумма,
	|	СУММА(ВТ_ИсходныеОбороты.Количество) КАК Количество,
	|	СУММА(ВТ_ИсходныеОбороты.Сумма) КАК ИтогоСумма,
	|	СУММА(ВТ_ИсходныеОбороты.Количество) КАК ИтогоКоличество";
	Запрос = Новый Запрос;
	Если ПродолжительностьЦикла>1 Тогда
		МассивПоказатели = Новый Массив;
		//Если СтруктураПоказателей.Сумма Тогда
		//	МассивПоказатели.Добавить("ИтогоСумма");
		//КонецЕсли;
		//Если СтруктураПоказателей.Количество Тогда
		//	МассивПоказатели.Добавить("ИтогоКоличество");
		//КонецЕсли;
		Если ЕдинаяЦенаВБюджетномПериоде И СтруктураПоказателей.Цена Тогда
			МассивПоказатели.Добавить("Цена");
		КонецЕсли;
		ТекстПоказатели = ",
		|	МАКСИМУМ(ВТ_ИсходныеОбороты.Цена) КАК Цена,
		|	СУММА(ВТ_ИсходныеОбороты.Сумма) КАК Сумма,
		|	СУММА(ВТ_ИсходныеОбороты.Количество) КАК Количество";
		Для Инд = 1 По ПродолжительностьЦикла Цикл
			 Запрос.УстановитьПараметр("Период"+Формат(Инд,"ЧГ="),ОбратноеСоответствиеПериодов.Получить(Инд));
			 Если СтруктураПоказателей.Сумма Тогда
			 	МассивПоказатели.Добавить("ИтогоСумма"+Формат(Инд,"ЧГ="));
			 КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				 МассивПоказатели.Добавить("ИтогоКоличество"+Формат(Инд,"ЧГ="));
			 КонецЕсли;
			 ТекстПоказатели = ТекстПоказатели + ",
			 |	СУММА(ВЫБОР КОГДА ВТ_ИсходныеОбороты.ПериодПланирования=&Период"+Формат(Инд,"ЧГ=")+" ТОГДА ВТ_ИсходныеОбороты.Сумма ИНАЧЕ 0 КОНЕЦ) КАК ИтогоСумма"+Формат(Инд,"ЧГ=")+",
			 |	СУММА(ВЫБОР КОГДА ВТ_ИсходныеОбороты.ПериодПланирования=&Период"+Формат(Инд,"ЧГ=")+" ТОГДА ВТ_ИсходныеОбороты.Количество ИНАЧЕ 0 КОНЕЦ) КАК ИтогоКоличество"+Формат(Инд,"ЧГ=");
			Если НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
				Если СтруктураПоказателей.Цена Тогда
					МассивПоказатели.Добавить("Цена"+Формат(Инд,"ЧГ="));
				КонецЕсли;
			 	ТекстПоказатели = ТекстПоказатели + ",
			 	|	МАКСИМУМ(ВЫБОР КОГДА ВТ_ИсходныеОбороты.ПериодПланирования=&Период"+Формат(Инд,"ЧГ=")+" ТОГДА ВТ_ИсходныеОбороты.Цена ИНАЧЕ 0 КОНЕЦ) КАК Цена"+Формат(Инд,"ЧГ=");
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОсновныхОборотов.ВалютаОперации,
	|	ТаблицаОсновныхОборотов.ВидСтроки,
	|	ТаблицаОсновныхОборотов.Корректировки,
	|	ТаблицаОсновныхОборотов.Количество,
	|	ТаблицаОсновныхОборотов.Контрагент,
	|	ТаблицаОсновныхОборотов.ПериодПланирования,
	|	ТаблицаОсновныхОборотов.Состояние,
	|	ТаблицаОсновныхОборотов.ПричинаКорректировки,
	|	ТаблицаОсновныхОборотов.ПричинаОтклонения,
	|	ТаблицаОсновныхОборотов.СтатьяБюджета,
	|	ТаблицаОсновныхОборотов.ФинансовыйПоказатель,"+ТекстИзмерения+"
	|	ТаблицаОсновныхОборотов.Сумма,
	|	ТаблицаОсновныхОборотов.Цена
	|ПОМЕСТИТЬ ВТ_ИсходныеОбороты
	|ИЗ
	|	&ТаблицаОборотов КАК ТаблицаОсновныхОборотов
	|
	|ГДЕ
	|   ТаблицаОсновныхОборотов.ПериодПланирования >= &НачалоПериода
	|	И ТаблицаОсновныхОборотов.ПериодПланирования <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ВалютаОперации) КАК ВалютаОперации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИсходныеОбороты.ВалютаОперации) КАК ВалютаОперацииКоличество,
	|	СУММА(ВТ_ИсходныеОбороты.Сумма) КАК Сумма,
	|	ВТ_ИсходныеОбороты.ВидСтроки КАК ВидСтроки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Корректировки) КАК Корректировки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ФинансовыйПоказатель) КАК ФинансовыйПоказатель,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Состояние) КАК Состояние,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ПричинаКорректировки) КАК ПричинаКорректировки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ПричинаОтклонения) КАК ПричинаОтклонения,
	|	ВТ_ИсходныеОбороты.СтатьяБюджета
	|ИЗ
	|	ВТ_ИсходныеОбороты КАК ВТ_ИсходныеОбороты
	|
//	|ГДЕ ВТ_ИсходныеОбороты.Сумма >=0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеОбороты.ВидСтроки,
	|	ВТ_ИсходныеОбороты.СтатьяБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ВТ_ИсходныеОбороты.СтатьяБюджета.Родитель = ЗНАЧЕНИЕ(Справочник.фин_СтатьиБюджета.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПустойРодитель,
	|	ВТ_ИсходныеОбороты.СтатьяБюджета.Родитель КАК СтатьяБюджетаРодитель, 	
	|	ВТ_ИсходныеОбороты.СтатьяБюджета КАК СтатьяБюджета,"+ТекстИзмеренияРезультирующие+"
	|	ВТ_ИсходныеОбороты.СтатьяБюджета.ЭтоГруппа КАК СтатьяБюджетаЭтоГруппа,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИсходныеОбороты.ВалютаОперации) КАК ВалютаОперацииКоличество,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ВалютаОперации) КАК ВалютаОперацииСтроки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Корректировки) КАК Корректировки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.Состояние) КАК Состояние,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ПричинаКорректировки) КАК ПричинаКорректировки,
	|	МАКСИМУМ(ВТ_ИсходныеОбороты.ПричинаОтклонения) КАК ПричинаОтклонения,
	|	ВТ_ИсходныеОбороты.ВидСтроки КАК ВидСтроки"+ТекстПоказатели+"
	|ИЗ
	|	ВТ_ИсходныеОбороты КАК ВТ_ИсходныеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеОбороты.ВидСтроки,"+ТекстИзмеренияРезультирующие+"
	|	ВТ_ИсходныеОбороты.СтатьяБюджета
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ИсходныеОбороты.СтатьяБюджета."+?(СокрЛП(ФормируемыйБюджет.СпособСортировкиСтатей)="","Наименование",ФормируемыйБюджет.СпособСортировкиСтатей)+"
	|ИТОГИ МАКСИМУМ (ПустойРодитель), МАКСИМУМ(СтатьяБюджетаРодитель), МАКСИМУМ(СтатьяБюджетаЭтоГруппа),СУММА(ВалютаОперацииКоличество),МАКСИМУМ(ВалютаОперацииСтроки),МАКСИМУМ(Корректировки),МАКСИМУМ(Состояние),МАКСИМУМ(ПричинаКорректировки),МАКСИМУМ(ПричинаОтклонения) ПО
	|	ВидСтроки,
	|	СтатьяБюджета"+?(ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.Иерархический,ТекстИтоги,"");
	Запрос.УстановитьПараметр("ТаблицаОборотов",ТаблицаОсновныхОборотов);
	Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,?( ТипЗнч(ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),ПродолжительностьЦикла,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий))));
	Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	Результат = Запрос.ВыполнитьПакет();
	БазовыеПараметры 	= Результат[1].Выгрузить(); 
	БазовыеПараметры.Индексы.Добавить("СтатьяБюджета,ВидСтроки");
	ИтогиПоМоделям 		= Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидСтроки");
	ТаблицаРодителей 	= Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Родитель");
	ТаблицаРодителей.Колонки.Добавить("Строка");
	ВыводЦены 			= Новый Соответствие;
	
	СписокОбрабатываемыхРазрезов = Новый СписокЗначений;
	Для Каждого РазрезБюджета Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза = РазрезБюджета.Представление;
		Если ИмяРазреза = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				Продолжить;
			КонецЕсли;
		Если ИмяРазреза = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
			Продолжить;
		КонецЕсли;
		СписокОбрабатываемыхРазрезов.Добавить(ИмяРазреза,ИмяРазреза);
	КонецЦикла;
	//Пока ИтогиПоЗависимым.Следующий() Цикл
	//	ИтогиПоМоделям = ИтогиПоЗависимым.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ВидСтроки");
		Пока ИтогиПоМоделям.Следующий() Цикл
			Итоги = ИтогиПоМоделям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СтатьяБюджета");
			Пока Итоги.Следующий() Цикл
				Если ТабличныйВариант И Итоги.СтатьяБюджетаЭтоГруппа = Истина Тогда
					Продолжить;
				КонецЕсли;
				ФинансовыйПоказатель = Справочники.фин_ФинансовыеПоказатели.ПустаяСсылка();
				Если (НЕ Итоги.ПустойРодитель) И НЕ ТабличныйВариант Тогда
					СтруктураПоискаРодителя = Новый Структура("Родитель");
					СтруктураПоискаРодителя.Родитель = Итоги.СтатьяБюджетаРодитель;
					НайденныеСтроки = ТаблицаРодителей.НайтиСтроки(СтруктураПоискаРодителя);
					Если НайденныеСтроки.Количество()=0 Тогда
						МассивРодителей= Новый Массив;
						МассивРодителей.Добавить(Итоги.СтатьяБюджетаРодитель);
						РодительСтатьи = Итоги.СтатьяБюджетаРодитель;
						Пока фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ЕстьРодитель(РодительСтатьи,ЭтотОбъект) Цикл
							МассивРодителей.Вставить(0,фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.РодительСтатьиБюджета(РодительСтатьи,ЭтотОбъект));
							РодительСтатьи = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.РодительСтатьиБюджета(РодительСтатьи,ЭтотОбъект);
						КонецЦикла;
						Для Каждого ЭлРодитель Из МассивРодителей Цикл
							СтруктураПоискаРодителя = Новый Структура("Родитель");
							СтруктураПоискаРодителя.Родитель = ЭлРодитель;
							НайденныеСтроки = ТаблицаРодителей.НайтиСтроки(СтруктураПоискаРодителя);
							Если НайденныеСтроки.Количество()=0 Тогда
								ОбъектДобавления = ДеревоБюджета.Строки;
								Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ЕстьРодитель(ЭлРодитель,ЭтотОбъект) Тогда
									СтруктураПоискаРодителя = Новый Структура("Родитель");
									СтруктураПоискаРодителя.Родитель = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.РодительСтатьиБюджета(ЭлРодитель,ЭтотОбъект);
									НайденныеСтроки = ТаблицаРодителей.НайтиСтроки(СтруктураПоискаРодителя);
									ОбъектДобавления = НайденныеСтроки[0].Строка.Строки;
								КонецЕсли;
								Если РежимДополнения Тогда
									НайденыСтроки = ДеревоБюджета.Строки.НайтиСтроки(Новый Структура("СтатьяБюджета",ЭлРодитель),Истина);
									Если НайденыСтроки.Количество()=0 Тогда
										ТекСтрока=ОбъектДобавления.Добавить();
										ТекСтрока.СтатьяБюджета = ЭлРодитель;
										ТекСтрока.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.ИерархияБюджета;
									Иначе
										ТекСтрока = НайденыСтроки[0];
									КонецЕсли;
								Иначе
									ТекСтрока=ОбъектДобавления.Добавить();
									ТекСтрока.СтатьяБюджета = ЭлРодитель;
									ТекСтрока.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.ИерархияБюджета;
								КонецЕсли;
								НовСтр = ТаблицаРодителей.Добавить();
								НовСтр.Родитель = ЭлРодитель;
								НовСтр.Строка 	= ТекСтрока;
							Иначе
								ТекСтрока = НайденныеСтроки[0].Строка;
							КонецЕсли;
						КонецЦикла;
						Если РежимДополнения Тогда
							НайденыСтроки = ТекСтрока.Строки.НайтиСтроки(Новый Структура("СтатьяБюджета",Итоги.СтатьяБюджета),Истина);
							Если НайденыСтроки.Количество()=0 Тогда
								СтрокаСтатьи = ТекСтрока.Строки.Добавить();
							Иначе
								СтрокаСтатьи = НайденыСтроки[0];
							КонецЕсли;
						Иначе
							СтрокаСтатьи = ТекСтрока.Строки.Добавить();
						КонецЕсли;
					Иначе
						Если РежимДополнения Тогда
							НайденыСтроки = НайденныеСтроки[0].Строка.Строки.НайтиСтроки(Новый Структура("СтатьяБюджета",Итоги.СтатьяБюджета),Истина);
							Если НайденыСтроки.Количество()=0 Тогда
								СтрокаСтатьи = НайденныеСтроки[0].Строка.Строки.Добавить();
							Иначе
								СтрокаСтатьи = НайденыСтроки[0];
							КонецЕсли;
						Иначе
							СтрокаСтатьи = НайденныеСтроки[0].Строка.Строки.Добавить();
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если РежимДополнения Тогда
						НайденыСтроки = ДеревоБюджета.Строки.НайтиСтроки(Новый Структура("СтатьяБюджета",Итоги.СтатьяБюджета),Истина);
						Если НайденыСтроки.Количество()=0 Тогда
							СтрокаСтатьи = ДеревоБюджета.Строки.Добавить();
							СтрокаСтатьи.ВидСтроки 			= ИтогиПоМоделям.ВидСтроки;
							Если СписокФормульных.НайтиПоЗначению(СтрокаСтатьи.СтатьяБюджета)<>Неопределено И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда
								СтрокаСтатьи.ВидСтроки 		= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
							КонецЕсли;
						Иначе
							СтрокаСтатьи = НайденыСтроки[0];
						КонецЕсли;
					Иначе
						СтрокаСтатьи = ДеревоБюджета.Строки.Добавить();
						СтрокаСтатьи.ВидСтроки 			= ИтогиПоМоделям.ВидСтроки;
						Если СписокФормульных.НайтиПоЗначению(СтрокаСтатьи.СтатьяБюджета)<>Неопределено И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда
							СтрокаСтатьи.ВидСтроки 		= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтрокиРазворота.Добавить(СтрокаСтатьи);
				СтрокаСтатьи.СтатьяБюджета 		= Итоги.СтатьяБюджета;
				Если Итоги.СтатьяБюджетаЭтоГруппа = Истина Тогда
					НовСтр = ТаблицаРодителей.Добавить();
					НовСтр.Родитель = СтрокаСтатьи.СтатьяБюджета;
					НовСтр.Строка 	= СтрокаСтатьи;
					Продолжить;
				КонецЕсли;
				СтрокаСтатьи.ИтогоСумма			= Итоги.Сумма;
				СтрокаСтатьи.ИтогоКоличество	= Итоги.Количество;
				Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
					СтруктураПоиска = Новый Структура("СтатьяБюджета,ВидСтроки");
					СтруктураПоиска.СтатьяБюджета 	= Итоги.СтатьяБюджета;
					СтруктураПоиска.ВидСтроки		= ИтогиПоМоделям.ВидСтроки;
					СоответствующиеРеквизиты 		= БазовыеПараметры.НайтиСтроки(СтруктураПоиска);
					Если СоответствующиеРеквизиты.Количество() =0 Тогда
						СтруктураПоиска = Новый Структура("СтатьяБюджета,ВидСтроки");
						СтруктураПоиска.СтатьяБюджета 	= Итоги.СтатьяБюджета;
						СтруктураПоиска.ВидСтроки 		= ИтогиПоМоделям.ВидСтроки;
						СоответствующиеРеквизиты 		= БазовыеПараметры.НайтиСтроки(СтруктураПоиска);
					ИначеЕсли СоответствующиеРеквизиты[0].Сумма=0 Тогда 
 						НовыеСоответствующиеРеквизиты 	= БазовыеПараметры.НайтиСтроки(СтруктураПоиска);
						Если НовыеСоответствующиеРеквизиты.Количество() >0 Тогда
							СоответствующиеРеквизиты = НовыеСоответствующиеРеквизиты;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураПоиска = Новый Структура("СтатьяБюджета,ВидСтроки");
					СтруктураПоиска.СтатьяБюджета 	= Итоги.СтатьяБюджета;
					СтруктураПоиска.ВидСтроки 		= ИтогиПоМоделям.ВидСтроки;
					СоответствующиеРеквизиты 		= БазовыеПараметры.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
				Если СоответствующиеРеквизиты.Количество() >0 Тогда
					Если Объект.ЕдинаяВалюта ИЛИ СоответствующиеРеквизиты[0].ВалютаОперацииКоличество=1 Тогда
						СтрокаСтатьи.ВалютаОперации = СоответствующиеРеквизиты[0].ВалютаОперации;
					Иначе
						СтрокаСтатьи.ВалютаОперации = ВалютаСводаБаланса;
					КонецЕсли;
					СтрокаСтатьи.ВидСтроки 			= СоответствующиеРеквизиты[0].ВидСтроки;
					СтрокаСтатьи.ФинансовыйПоказатель 	= СоответствующиеРеквизиты[0].ФинансовыйПоказатель;
					Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РассчитываемаяСтатья(СтрокаСтатьи.СтатьяБюджета,Объект.ФормируемыйБюджет) И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда//СписокФормульных.НайтиПоЗначению(СтрокаСтатьи.СтатьяБюджета)<>Неопределено И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда
						СтрокаСтатьи.ВидСтроки 		= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
					КонецЕсли;
				КонецЕсли;
				ФинансовыйПоказатель = СтрокаСтатьи.ФинансовыйПоказатель;
				ВыводитьЦену = ВыводЦены.Получить(ФинансовыйПоказатель);
				Если ВыводитьЦену = Неопределено Тогда
					ВыводитьЦену = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ВыводитьЦенуПоПоказателю(ФинансовыйПоказатель,ЭтотОбъект);//ФинансовыйПоказатель.УчетПоКоличеству И ФинансовыйПоказатель.УчетПоСумме И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура,ЭтотОбъект);
					ВыводЦены.Вставить(ФинансовыйПоказатель,ВыводитьЦену);
				КонецЕсли;
				Если ВыводитьЦену=Истина Тогда
					//СтрокаСтатьи.Цена = ?(Итоги.Количество=0,0,Итоги.Сумма/Итоги.Количество);
					СтрокаСтатьи.Цена = Итоги.Цена;
				КонецЕсли;
				СтрокаСтатьи.Состояние 			= ?(ЗначениеЗаполнено(Итоги.Состояние),Итоги.Состояние,фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден());
				СтрокаСтатьи.Корректировки 		= Итоги.Корректировки;
				СтрокаСтатьи.ПричинаКорректировки = Итоги.ПричинаКорректировки;
				СтрокаСтатьи.ПричинаОтклонения 	= Итоги.ПричинаОтклонения;
				СтрокаСтатьи.ВидСтроки	 		= ИтогиПоМоделям.ВидСтроки;
				Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РассчитываемаяСтатья(СтрокаСтатьи.СтатьяБюджета,Объект.ФормируемыйБюджет) И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда//СписокФормульных.НайтиПоЗначению(СтрокаСтатьи.СтатьяБюджета)<>Неопределено И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтрокаСтатьи.СтатьяБюджета,ЭтотОбъект) Тогда
					СтрокаСтатьи.ВидСтроки	 	= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
				КонецЕсли;
				СтрокаСтатьи.ВидГруппировки="СтатьяБюджета";
				СтрокаСтатьи.УчетПоКоличеству	 = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ФинансовыйПоказатель,ЭтотОбъект);
				СтрокаСтатьи.УчетПоСумме         = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ФинансовыйПоказатель,ЭтотОбъект);
				СтрокаСтатьи.УчетПоРазрезуНоменклатура =СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура)<>Неопределено И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ФинансовыйПоказатель,ЭтотОбъект).Свойство("Номенклатура");
				Если УчетПоНоменклатуре И СтрокаСтатьи.УчетПоРазрезуНоменклатура Тогда
					СтрокаСтатьи.ОписаниеТиповВыбораНоменклатуры = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,Сценарий,ВестиУчетПоПлановойНоменклатуре,ЭтотОбъект);
				КонецЕсли;
				Если ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
					СтрокаЗаполнения = "";
					Для Каждого РазрезБюджета Из СписокОбрабатываемыхРазрезов Цикл
						ИмяРазреза = РазрезБюджета.Представление;
						Если НЕ ЗначениеЗаполнено(СтрокаСтатьи[ИмяРазреза]) Тогда
							СтрокаЗаполнения = СтрокаЗаполнения + ?(СтрокаЗаполнения="","",",")+ИмяРазреза;
						КонецЕсли;
					КонецЦикла;
					Если СтрокаЗаполнения<>"" Тогда
						ЗаполнитьЗначенияСвойств(СтрокаСтатьи,СтруктураПустыхЗначений,СтрокаЗаполнения);
						Если Найти(СтрокаЗаполнения,"Номенклатура")<>0 Тогда
							СтрокаСтатьи["Номенклатура"] = ПустоеЗначениеРазреза("Номенклатура",СтрокаСтатьи.ФинансовыйПоказатель);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СледующийРазрез = ?(СтруктураРазрезовБюджета.Количество()=0,Неопределено,СтруктураРазрезовБюджета.Получить(0).Представление);
				Пока СледующийРазрез <>Неопределено И ((СледующийРазрез = "УправленческоеПодразделение" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ФормируемыйБюджет.ВключаяПодчиненныеПодразделения) ИЛИ
					(СледующийРазрез = "Проект" И УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта)) Цикл
					ТекущийРазрез = СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[СледующийРазрез]);
					Если СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)=СтруктураРазрезовБюджета.Количество()-1 Тогда
						СледующийРазрез = Неопределено;
					Иначе
						СледующийРазрез = СтруктураРазрезовБюджета.Получить(СтруктураРазрезовБюджета.Индекс(ТекущийРазрез)+1).Представление;
					КонецЕсли;
				КонецЦикла;
				ДобавитьДанныеВДерево(Итоги,СледующийРазрез,?(НЕ ТабличныйВариант,СтрокаСтатьи,ДеревоБюджета),ФинансовыйПоказатель,СтрокаСтатьи,МассивПоказатели);
			КонецЦикла;
		КонецЦикла;
	//КонецЦикла;
КонецПроцедуры //ЗаполнитьДеревоДанными

&НаСервере
Функция ОпределитьВидСтрокиБюджета(СтатьяБюджета)
	ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Первичная;
	Если СписокЗависимых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
		ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости;
	КонецЕсли;
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтатьяБюджета,ЭтотОбъект) Тогда
		Если СписокФормульных.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
			ВидСтроки 			= Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле;
		КонецЕсли;
		Если СписокРассчитываемых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
			ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели;
			Если СписокРассчитываемыхВПредшествующихБюджетах.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
				ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СписокНаследуемых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
		ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая;
	КонецЕсли;
	Возврат ВидСтроки;
КонецФункции

&НаКлиенте
Функция ОпределитьВидСтрокиБюджетаКлиент(СтатьяБюджета)
	ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
	Если СписокЗависимых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
		ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости");
	КонецЕсли;
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(СтатьяБюджета,ЭтотОбъект) Тогда
		Если СписокФормульных.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
			ВидСтроки 			= ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоФормуле");
		КонецЕсли;
		Если СписокРассчитываемых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
			ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели");
			Если СписокРассчитываемыхВПредшествующихБюджетах.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
				ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Наследуемая");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СписокНаследуемых.НайтиПоЗначению(СтатьяБюджета)<>Неопределено Тогда
		ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Наследуемая");
	КонецЕсли;
	Возврат ВидСтроки;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатьиБюджета()
	Документы.фин_Бюджет.ЗаполнитьСтатьиБюджета(Объект,ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьБюджет(ОбновлятьТолькоВнешниеДанные=Ложь)
	Объект.ОборотыПоСтатьям.Очистить();
	Объект.ЗависимыеОбороты.Очистить();
	Объект.РасчетыПоМоделям.Очистить();
	мБюджет = Объект.ФормируемыйБюджет;
	Если Объект.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
	//	ОбновитьДанныеВнешнейСтруктуры(Истина);
		ОбновитьДанныеВнешнейСтруктуры(ОбновлятьТолькоВнешниеДанные);
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ЗаполнитьСтатьиБюджета();
			Для Каждого СтрокаТЧ Из Объект.ОборотыПоСтатьям Цикл
				ПриИзмененииФинансовогоПоказателя(СтрокаТЧ);
				СтрокаТЧ.Состояние=Перечисления[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Подготовлен;
			КонецЦикла;
		КонецЕсли;
		ПроизвестиРасчетыПоФормулам(,,,,Истина);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	Если Объект.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Если РедактированиеВСКД Тогда
			НастройкаРедактированияПриИзмененииНаСервере();
		Иначе
			ОбновитьПолеБюджета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСоСтруктуройДерева

// формирует структуру дерева формы
//
&НаСервере
Процедура СозданиеСтруктурыДерева()
	
	Сценарий_Периодичность 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	
	РеквизитыДерева = ЭтотОбъект.ПолучитьРеквизиты("ДеревоСтрокБюджета");
	РеквизитыДереваСтрокой = Новый Массив;
	Для Каждого Реквизит Из РеквизитыДерева Цикл
		РеквизитыДереваСтрокой.Добавить(Реквизит.Имя);
	КонецЦикла;
	// для начала - очистим существующие
	МассивРеквизитовКУдалению = Новый Массив;
	Если БазовыйНаборКолонок >1 Тогда
		// удалим колонки показателей по периодам
		Для Инд=1 По БазовыйНаборКолонок Цикл
			ИмяКолонки = "Итого"+Строка(Инд);
			Если РеквизитыДереваСтрокой.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета."+ИмяКолонки);
		//		Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджета"+ИмяКолонки));
			КонецЕсли;
			ИмяКолонки = "ИтогоСумма"+Строка(Инд);
			Если РеквизитыДереваСтрокой.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета."+ИмяКолонки);
		//		Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджета"+ИмяКолонки));
			КонецЕсли;
			ИмяКолонки = "ИтогоКоличество"+Строка(Инд);
			Если РеквизитыДереваСтрокой.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета."+ИмяКолонки);
		//		Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджета"+ИмяКолонки));
			КонецЕсли;
			ИмяКолонки = "Цена"+Строка(Инд);
			Если РеквизитыДереваСтрокой.Найти(ИмяКолонки) <> Неопределено Тогда
				МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета."+ИмяКолонки);
		//		Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджета"+ИмяКолонки));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// удалим колонки измерений
	МассивУдалить = Новый Массив;
	МассивУдалитьВФорме = Новый Массив;
	Для Каждого Колонка Из РеквизитыДереваСтрокой Цикл
		Если фин_УправлениеБюджетированием.ЭтоРазрез(Колонка) Тогда
		//	Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджета"+Колонка));
			МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета."+Колонка);//РеквизитыДерева[РеквизитыДереваСтрокой.Найти(Колонка)]);
			Если Колонка="Номенклатура" Тогда
			//	Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджетаНоменклатураЕдиницаИзмерения"));
			//	Элементы.Удалить(Элементы.Найти("ДеревоСтрокБюджетаНоменклатураИЕдиницаИзмерения"));
				МассивРеквизитовКУдалению.Добавить("ДеревоСтрокБюджета.ЕдиницаИзмерения");//РеквизитыДерева[РеквизитыДереваСтрокой.Найти(Колонка)]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыКУдалению 	= Элементы.ДеревоСтрокБюджетаГруппаАналитика.ПодчиненныеЭлементы;
	КоличествоЭлементов = ЭлементыКУдалению.Количество();
	
	Для Инд = 0 По КоличествоЭлементов-1 Цикл
		Элементы.Удалить(ЭлементыКУдалению.Получить(КоличествоЭлементов-1-Инд));
	КонецЦикла;
	
	ЭлементыКУдалению 	= Элементы.ДеревоСтрокБюджетаГруппаИтогиРазвернутые.ПодчиненныеЭлементы;
	КоличествоЭлементов = ЭлементыКУдалению.Количество();
	
	Для Инд = 0 По КоличествоЭлементов-1 Цикл
		Элементы.Удалить(ЭлементыКУдалению.Получить(КоличествоЭлементов-1-Инд));
	КонецЦикла;
	
	ИзменитьРеквизиты(,МассивРеквизитовКУдалению);
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	КЭШ_Разрезы = Неопределено;
	
	// создание реквизитов дерева
	
	// колонки измерений
	Если СтруктураРазрезовБюджета.Количество()>0 Тогда
		Первый = Истина;
		ОтнимамемыеИзмерения = 0;
		Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
			Если Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение И Объект.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
				ОтнимамемыеИзмерения = ОтнимамемыеИзмерения+1;
				Продолжить;
			ИначеЕсли Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект И Объект.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				ОтнимамемыеИзмерения = ОтнимамемыеИзмерения+1;
				Продолжить;
			КонецЕсли;
			ИмяРазреза 			= Разрез.Представление;
			ЭлементРазреза 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
			ЗаголовокРазреза 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез.Значение);
			ТипЗначенияРазреза 	= ЭлементРазреза.ТипЗначения;
			Если Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
				МассивТипов = Новый Массив;
				Если Объект.Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
					МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
				Иначе
					Если ВестиУчетПоПлановойНоменклатуре Тогда
						МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
					КонецЕсли;
					МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
				КонецЕсли;
				ОписаниеТипов 		= Новый ОписаниеТипов(МассивТипов);
				ТипЗначенияРазреза 	= Новый ОписаниеТипов(МассивТипов);
			
				НовыйРеквизит = Новый РеквизитФормы("ЕдиницаИзмерения",Метаданные.Справочники.Номенклатура.Реквизиты[фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()].Тип,"ДеревоСтрокБюджета","Единица измерения");
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяРазреза,ТипЗначенияРазреза,"ДеревоСтрокБюджета",ЗаголовокРазреза);
			МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			
			Первый = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// колонки показателей
	БазовыйНаборКолонок = ПродолжительностьЦикла;
	ШагКолонок = 4;	
	Если НЕ СтруктураПоказателей.Количество Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если НЕ СтруктураПоказателей.Сумма Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если (НЕ СтруктураПоказателей.Цена) ИЛИ ЕдинаяЦенаВБюджетномПериоде Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если ПродолжительностьЦикла >1 Тогда
		Для Инд=1 По ПродолжительностьЦикла Цикл
			Если СтруктураПоказателей.Сумма Тогда
				НовыйРеквизит = Новый РеквизитФормы("ИтогоСумма"+Строка(Инд),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)),"ДеревоСтрокБюджета","Сумма");
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				НовыйРеквизит = Новый РеквизитФормы("ИтогоКоличество"+Строка(Инд),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15- (5-ТочностьКоличественныхПоказателей),ТочностьКоличественныхПоказателей)),"ДеревоСтрокБюджета","Количество");
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЕсли;
			Если СтруктураПоказателей.Цена И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
				НовыйРеквизит = Новый РеквизитФормы("Цена"+Строка(Инд),Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)),"ДеревоСтрокБюджета","Цена");
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//настройка точности количественных показателей
	Если СтруктураПоказателей.Количество Тогда
		Элементы.ДеревоСтрокБюджетаИтогоКоличество.ОграничениеТипа = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15- (5-ТочностьКоличественныхПоказателей),ТочностьКоличественныхПоказателей));
		Элементы.ДеревоСтрокБюджетаИтогоКоличество.ФорматРедактирования = "ЧЦ="+Строка(15- (5-ТочностьКоличественныхПоказателей))+"; ЧДЦ="+Строка(ТочностьКоличественныхПоказателей);
		Элементы.ДеревоСтрокБюджетаИтогоКоличество.Формат = "ЧЦ="+Строка(15- (5-ТочностьКоличественныхПоказателей))+"; ЧДЦ="+Строка(ТочностьКоличественныхПоказателей);
		Элементы.ОборотыПоСтатьямКоличество.ФорматРедактирования = "ЧЦ="+Строка(15- (5-ТочностьКоличественныхПоказателей))+"; ЧДЦ="+Строка(ТочностьКоличественныхПоказателей);
		Элементы.ЗависимыеОборотыКоличество.ФорматРедактирования = "ЧЦ="+Строка(15- (5-ТочностьКоличественныхПоказателей))+"; ЧДЦ="+Строка(ТочностьКоличественныхПоказателей);
		Элементы.РасчетыПоМоделямКоличество.ФорматРедактирования = "ЧЦ="+Строка(15- (5-ТочностьКоличественныхПоказателей))+"; ЧДЦ="+Строка(ТочностьКоличественныхПоказателей);
	КонецЕсли;
	
	
	ЗаполнитьСоответствиеПериодов();
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// добавление элементов на форму
	
	ДействиеПриИзменении 	= "ДеревоБюджетаИзмерениеПриИзменении";       
	ДействиеНачалоВыбора 	= "ДеревоБюджетаИзмерениеНачалоВыбора";
	ДействиеОчистка 		= "ДеревоБюджетаИзмерениеОчистка";
	Если СтруктураРазрезовБюджета.Количество()>0 Тогда
		Первый = Истина;
		ОтнимамемыеИзмерения = 0;
		Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
			Если Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение И Объект.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
				ОтнимамемыеИзмерения = ОтнимамемыеИзмерения+1;
				Продолжить;
			ИначеЕсли Разрез.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект И Объект.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				ОтнимамемыеИзмерения = ОтнимамемыеИзмерения+1;
				Продолжить;
			КонецЕсли;
			ИмяРазреза 			= Разрез.Представление;
			ЭлементРазреза 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
			ЗаголовокРазреза 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез.Значение);
			
			Если ИмяРазреза<>"Номенклатура" ИЛИ Объект.Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
				
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджета"+ИмяРазреза,Тип("ПолеФормы"),Элементы.ДеревоСтрокБюджетаГруппаАналитика);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета."+ИмяРазреза;
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.КнопкаОткрытия = Истина;
				//НовыйЭлемент.КнопкаОчистки = Истина;
				НовыйЭлемент.Заголовок = ЗаголовокРазреза;
			
				НовыйЭлемент.Ширина = ШиринаКолонкиРазреза;
				
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзменении);
				НовыйЭлемент.УстановитьДействие("НачалоВыбора",	ДействиеНачалоВыбора);
				НовыйЭлемент.УстановитьДействие("Очистка",		ДействиеОчистка);
				
				//Колонка2.ЭлементУправления.ОграничениеТипа = ТипЗначенияРазреза;
			Иначе
				
			
				НовыйЭлементГруппа = Элементы.Добавить("ДеревоСтрокБюджетаНоменклатураИЕдиницаИзмерения",Тип("ГруппаФормы"),Элементы.ДеревоСтрокБюджетаГруппаАналитика);
				НовыйЭлементГруппа.Вид 				= ВидГруппыФормы.ГруппаКолонок;
				НовыйЭлементГруппа.Группировка 		= ГруппировкаКолонок.ВЯчейке;
				НовыйЭлементГруппа.ОтображатьВШапке = Ложь;
				
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджета"+ИмяРазреза,Тип("ПолеФормы"),НовыйЭлементГруппа);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета."+ИмяРазреза;
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.КнопкаОткрытия = Истина;
			//	НовыйЭлемент.КнопкаОчистки = Истина;
				НовыйЭлемент.Заголовок = ЗаголовокРазреза;
			
				НовыйЭлемент.Ширина = ШиринаКолонкиРазреза;
				
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзменении);
				НовыйЭлемент.УстановитьДействие("НачалоВыбора",	ДействиеНачалоВыбора);
				НовыйЭлемент.УстановитьДействие("Очистка",		ДействиеОчистка);
				
				
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджетаНоменклатураЕдиницаИзмерения",Тип("ПолеФормы"),НовыйЭлементГруппа);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета.ЕдиницаИзмерения";
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.ТолькоПросмотр = Истина;
				НовыйЭлемент.Заголовок = "Ед. изм.";
			
				НовыйЭлемент.Ширина = 8;
				
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзменении);
				НовыйЭлемент.УстановитьДействие("НачалоВыбора",	ДействиеНачалоВыбора);
				НовыйЭлемент.УстановитьДействие("Очистка",		ДействиеОчистка);
				
			КонецЕсли;
			
			Первый = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ДействиеПриИзмененииИтога 	= "ДеревоБюджетаИтогПриИзменении";       
	ДействиеПриИзмененииЦены 	= "ДеревоБюджетаЦенаПриИзменении";
	
	
	ШагКолонок = 4;	
	Если НЕ СтруктураПоказателей.Количество Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если НЕ СтруктураПоказателей.Сумма Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если (НЕ СтруктураПоказателей.Цена) ИЛИ ЕдинаяЦенаВБюджетномПериоде Тогда
		ШагКолонок = ШагКолонок-1;
	КонецЕсли;
	Если ПродолжительностьЦикла >1 Тогда
		Для Инд=1 По ПродолжительностьЦикла Цикл
			НовПериод 				= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Сценарий_Периодичность,Инд-1);	
			ПредставлениеПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(НовПериод,Строка(Сценарий_Периодичность),?(ТипЗнч(Объект.Сценарий.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),Объект.Сценарий.ПродолжительностьЦикла,Неопределено));
			
			НовыйЭлементГруппа = Элементы.Добавить("ДеревоСтрокБюджетаИтого"+Строка(Инд),Тип("ГруппаФормы"),Элементы.ДеревоСтрокБюджетаГруппаИтогиРазвернутые);
			НовыйЭлементГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
			НовыйЭлементГруппа.Заголовок = ПредставлениеПериода;
			НовыйЭлементГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
			НовыйЭлементГруппа.ОтображатьВШапке = Истина;
			НовыйЭлементГруппа.ГоризонтальноеПоложениеВШапке=ГоризонтальноеПоложениеЭлемента.Центр;
			
			Если СтруктураПоказателей.Сумма Тогда
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджетаИтогоСумма"+Строка(Инд),Тип("ПолеФормы"),НовыйЭлементГруппа);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета."+"ИтогоСумма"+Строка(Инд);
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.Заголовок = "Сумма";
				НовыйЭлемент.Ширина = ШиринаКолонкиСумма;
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзмененииИтога);
			КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджетаИтогоКоличество"+Строка(Инд),Тип("ПолеФормы"),НовыйЭлементГруппа);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета."+"ИтогоКоличество"+Строка(Инд);
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.Заголовок = "Кол-во";
				НовыйЭлемент.Ширина = ШиринаКолонкиКоличество;
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзмененииИтога);
			КонецЕсли;
			Если СтруктураПоказателей.Цена И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
				НовыйЭлемент = Элементы.Добавить("ДеревоСтрокБюджетаЦена"+Строка(Инд),Тип("ПолеФормы"),НовыйЭлементГруппа);
				НовыйЭлемент.ПутьКДанным = "ДеревоСтрокБюджета."+"Цена"+Строка(Инд);
				НовыйЭлемент.Вид=ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.Заголовок = "Цена";
				НовыйЭлемент.Ширина = ШиринаКолонкиЦена;
				НовыйЭлемент.УстановитьДействие("ПриИзменении",	ДействиеПриИзмененииЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоСтрокБюджета);
	
КонецПроцедуры //СозданиеСтруктурыДерева

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьФиксациюКолонокБюджета(Форма)
	Элементы 				= Форма.Элементы;
	ФиксацияКолонокБюджета 	= Форма.ФиксацияКолонокБюджета;
	
	Элементы.ДеревоСтрокБюджетаКодСтрокиБюджета.ФиксацияВТаблице	= ФиксацияВТаблице.Нет;
	Элементы.ДеревоСтрокБюджетаСтатьяБюджета.ФиксацияВТаблице		= ФиксацияВТаблице.Нет;
	Элементы.ДеревоСтрокБюджетаВалютаОперации.ФиксацияВТаблице		= ФиксацияВТаблице.Нет;
	Элементы.ДеревоСтрокБюджетаГруппаАналитика.ФиксацияВТаблице		= ФиксацияВТаблице.Нет;
	Элементы.ДеревоСтрокБюджетаГруппаИтого.ФиксацияВТаблице			= ФиксацияВТаблице.Нет;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДеревоСтрокБюджетаГруппаАналитика.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.ФиксацияВТаблице	= ФиксацияВТаблице.Нет;
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДеревоСтрокБюджетаГруппаИтого.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.ФиксацияВТаблице	= ФиксацияВТаблице.Нет;
	КонецЦикла;
	Если ФиксацияКолонокБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыФиксацииКолонокБюджета.НеФиксировать") Тогда
		Возврат;
	КонецЕсли;
	Элементы.ДеревоСтрокБюджетаКодСтрокиБюджета.ФиксацияВТаблице	= ФиксацияВТаблице.Лево;
	Элементы.ДеревоСтрокБюджетаСтатьяБюджета.ФиксацияВТаблице		= ФиксацияВТаблице.Лево;
	Если ФиксацияКолонокБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыФиксацииКолонокБюджета.Статьи") Тогда
		Возврат;
	КонецЕсли;
	Элементы.ДеревоСтрокБюджетаГруппаАналитика.ФиксацияВТаблице		= ФиксацияВТаблице.Лево;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДеревоСтрокБюджетаГруппаАналитика.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.ФиксацияВТаблице	= ФиксацияВТаблице.Лево;
	КонецЦикла;
	Если ФиксацияКолонокБюджета = ПредопределенноеЗначение("Перечисление.фин_ВариантыФиксацииКолонокБюджета.СтатьиИАналитика") Тогда
		Возврат;
	КонецЕсли;
	Элементы.ДеревоСтрокБюджетаВалютаОперации.ФиксацияВТаблице		= ФиксацияВТаблице.Лево;
	Элементы.ДеревоСтрокБюджетаГруппаИтого.ФиксацияВТаблице			= ФиксацияВТаблице.Лево;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДеревоСтрокБюджетаГруппаИтого.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.ФиксацияВТаблице	= ФиксацияВТаблице.Лево;
	КонецЦикла;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьАвтоВысотуЯчейкиСтатьи(Форма)
	Элементы 							= Форма.Элементы;
	Элементы.ДеревоСтрокБюджетаСтатьяБюджета.АвтоВысотаЯчейки = Форма.АвтоВысотаЯчейкиСтатьи;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьАвтоВысотуЯчеекАналитики(Форма)
	Элементы = Форма.Элементы;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ДеревоСтрокБюджетаГруппаАналитика.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент)=Тип("ГруппаФормы") Тогда
			Для Каждого мПодчиненныйЭлемент Из ПодчиненныйЭлемент.ПодчиненныеЭлементы Цикл
				мПодчиненныйЭлемент.АвтоВысотаЯчейки = Форма.АвтоВысотаЯчеекАналитики;
			КонецЦикла;
		Иначе
			ПодчиненныйЭлемент.АвтоВысотаЯчейки = Форма.АвтоВысотаЯчеекАналитики;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева()
	//разворачивание дерева
	Для Каждого СтрокаДерева Из ДеревоСтрокБюджета.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтрокБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВариантРедактированияБюджета()
	ТабличныйВариант 					= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.Табличный;
	ТабличныйВариантТолькоДляАналитики	= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ТаблицыСАналитикойВИерархииСтатей;
	Если (ТолькоТабличныеЧасти ИЛИ РедактированиеВСКД) И НЕ ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.РедактироватьВТабличныхЧастях И НЕ ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ПользовательскийВариант Тогда
		СозданиеСтруктурыДерева();
		НастроитьФиксациюКолонокБюджета(ЭтотОбъект);
		НастроитьАвтоВысотуЯчеекАналитики(ЭтотОбъект);
		НастроитьАвтоВысотуЯчейкиСтатьи(ЭтотОбъект);
	КонецЕсли;

	ТолькоТабличныеЧасти				= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.РедактироватьВТабличныхЧастях;
	РедактированиеВСКД					= ВариантРедактированияБюджета=Перечисления.фин_ВариантыРедактированияБюджета.ПользовательскийВариант;
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
	ИначеЕсли НЕ ТолькоТабличныеЧасти Тогда
		ОбновитьПолеБюджета();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	НастроитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиРедактирования()
	ФиксацияКолонокБюджета 				= Перечисления.фин_ВариантыФиксацииКолонокБюджета.СтатьиИАналитика;
	ВариантРедактированияБюджета 		= Перечисления.фин_ВариантыРедактированияБюджета.Иерархический;
	АвтоВысотаЯчеекАналитики			= Ложь;
	АвтоВысотаЯчейкиСтатьи				= Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкиРедактированияБюджетов.Пользователь,
		|	фин_НастройкиРедактированияБюджетов.Бюджет,
		|	фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета,
		|	фин_НастройкиРедактированияБюджетов.ФиксацияКолонокБюджета,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчейкиСтатьи,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчеекАналитики,
		|	фин_НастройкиРедактированияБюджетов.НастройкаРедактирования
		|ИЗ
		|	РегистрСведений.фин_НастройкиРедактированияБюджетов КАК фин_НастройкиРедактированияБюджетов
		|ГДЕ
		|	фин_НастройкиРедактированияБюджетов.Пользователь = &Пользователь
		|	И фин_НастройкиРедактированияБюджетов.Бюджет = &Бюджет
		|	И ВЫБОР КОГДА фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант) 
		|		ТОГДА фин_НастройкиРедактированияБюджетов.НастройкаРедактирования.Бюджет = &Бюджет
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_НастройкиРедактированияБюджетов.Пользователь,
		|	фин_НастройкиРедактированияБюджетов.Бюджет,
		|	фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета,
		|	фин_НастройкиРедактированияБюджетов.ФиксацияКолонокБюджета,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчейкиСтатьи,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчеекАналитики,
		|	фин_НастройкиРедактированияБюджетов.НастройкаРедактирования
		|ИЗ
		|	РегистрСведений.фин_НастройкиРедактированияБюджетов КАК фин_НастройкиРедактированияБюджетов
		|ГДЕ
		|	фин_НастройкиРедактированияБюджетов.Пользователь = &Пользователь
		|	И фин_НастройкиРедактированияБюджетов.Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка)
		|	И ВЫБОР КОГДА фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант) 
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_НастройкиРедактированияБюджетов.Пользователь,
		|	фин_НастройкиРедактированияБюджетов.Бюджет,
		|	фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета,
		|	фин_НастройкиРедактированияБюджетов.ФиксацияКолонокБюджета,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчейкиСтатьи,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчеекАналитики,
		|	фин_НастройкиРедактированияБюджетов.НастройкаРедактирования
		|ИЗ
		|	РегистрСведений.фин_НастройкиРедактированияБюджетов КАК фин_НастройкиРедактированияБюджетов
		|ГДЕ
		|	фин_НастройкиРедактированияБюджетов.Бюджет = &Бюджет
		|	И фин_НастройкиРедактированияБюджетов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВЫБОР КОГДА фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант) 
		|		ТОГДА фин_НастройкиРедактированияБюджетов.НастройкаРедактирования.Бюджет = &Бюджет
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_НастройкиРедактированияБюджетов.Пользователь,
		|	фин_НастройкиРедактированияБюджетов.Бюджет,
		|	фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета,
		|	фин_НастройкиРедактированияБюджетов.ФиксацияКолонокБюджета,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчейкиСтатьи,
		|	фин_НастройкиРедактированияБюджетов.АвтоВысотаЯчеекАналитики,
		|	фин_НастройкиРедактированияБюджетов.НастройкаРедактирования
		|ИЗ
		|	РегистрСведений.фин_НастройкиРедактированияБюджетов КАК фин_НастройкиРедактированияБюджетов
		|ГДЕ
		|	фин_НастройкиРедактированияБюджетов.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И фин_НастройкиРедактированияБюджетов.Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка)
		|	И ВЫБОР КОГДА фин_НастройкиРедактированияБюджетов.ВариантРедактированияБюджета = ЗНАЧЕНИЕ(Перечисление.фин_ВариантыРедактированияБюджета.ПользовательскийВариант) 
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Бюджет", 		Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Пользователь", 	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФиксацияКолонокБюджета 				= ВыборкаДетальныеЗаписи.ФиксацияКолонокБюджета;
		ВариантРедактированияБюджета 		= ВыборкаДетальныеЗаписи.ВариантРедактированияБюджета;
		АвтоВысотаЯчеекАналитики			= ВыборкаДетальныеЗаписи.АвтоВысотаЯчеекАналитики;
		АвтоВысотаЯчейкиСтатьи				= ВыборкаДетальныеЗаписи.АвтоВысотаЯчейкиСтатьи;
		НастройкаРедактирования				= ВыборкаДетальныеЗаписи.НастройкаРедактирования;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкуНаСервере(Пользователь=Неопределено,Бюджет=Неопределено,ВариантРедактированияБюджета,ФиксацияКолонокБюджета,АвтоВысотаЯчеекАналитики=Ложь,АвтоВысотаЯчейкиСтатьи=Ложь,НастройкаРедактирования)
	Если Пользователь=Неопределено И НЕ (РольДоступна("ПолныеПрава")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет прав на создание общих настроек");
		Возврат;	
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.фин_НастройкиРедактированияБюджетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(?(Пользователь=Неопределено,Справочники.Пользователи.ПустаяСсылка(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь")));
	НаборЗаписей.Отбор.Бюджет.Установить(?(Бюджет=Неопределено,Справочники.фин_Бюджеты.ПустаяСсылка(),Бюджет));
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь 					= ?(Пользователь=Неопределено,Справочники.Пользователи.ПустаяСсылка(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	НоваяЗапись.Бюджет 							= ?(Бюджет=Неопределено,Справочники.фин_Бюджеты.ПустаяСсылка(),Бюджет);
	НоваяЗапись.ВариантРедактированияБюджета	= ВариантРедактированияБюджета;
	НоваяЗапись.ФиксацияКолонокБюджета 			= ФиксацияКолонокБюджета;
	НоваяЗапись.АвтоВысотаЯчейкиСтатьи 			= АвтоВысотаЯчейкиСтатьи;
	НоваяЗапись.АвтоВысотаЯчеекАналитики 		= АвтоВысотаЯчеекАналитики;
	Если ВариантРедактированияБюджета = Перечисления.фин_ВариантыРедактированияБюджета.ПользовательскийВариант Тогда
		НоваяЗапись.НастройкаРедактирования 	= НастройкаРедактирования;
	КонецЕсли;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСДополнительнымиДанными

&НаСервере
Процедура ОбновитьДанныеУчетнойПолитики()

	УчетнаяПолитикаБюджетирование = Новый ФиксированнаяСтруктура(фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДанныеУчетнойПолитики(Объект.ПериодПланирования));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеПериодов(СПереименованиемКолонок = Ложь)
	Сценарий_Периодичность 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	мСоответствиеПериодов 			= Новый Соответствие;
	мОбратноеСоответствиеПериодов 	= Новый Соответствие;
	СписокПериодовДляВыбора.Очистить();
	Если ПродолжительностьЦикла >1 Тогда
		Для Инд=1 По ПродолжительностьЦикла Цикл
			НовПериод 				= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Сценарий_Периодичность,Инд-1);	
			ПредставлениеПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(НовПериод,Строка(Сценарий_Периодичность),?(ТипЗнч(Объект.Сценарий.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.фин_Периодичность"),Объект.Сценарий.ПродолжительностьЦикла,Неопределено));
			мСоответствиеПериодов.Вставить(НовПериод,Инд);
			мОбратноеСоответствиеПериодов.Вставить(Инд,НовПериод);
			СписокПериодовДляВыбора.Добавить(НовПериод,ПредставлениеПериода);
			Если СПереименованиемКолонок=Истина И НЕ (РедактированиеВСКД ИЛИ ТолькоТабличныеЧасти) Тогда
				Элементы["ДеревоСтрокБюджетаИтого"+Строка(Инд)].Заголовок = ПредставлениеПериода;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокПериодовДляВыбора.Добавить(Объект.ПериодПланирования,НадписьПериодПланирования);
	КонецЕсли;
	
	ОбратноеСоответствиеПериодов 				= Новый ФиксированноеСоответствие(мОбратноеСоответствиеПериодов);
	СоответствиеПериодов 						= Новый ФиксированноеСоответствие(мСоответствиеПериодов);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСопутствующиеДанныеБюджета()
	Версия 						= фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Объект.ФормируемыйБюджет,Объект.ПериодПланирования);
    мВерсия 					= Версия;
 	Документы.фин_Бюджет.ОпределитьПорядокРасчетаИтогов(Объект,ЭтотОбъект);
	ТочностьКоличественныхПоказателей = Объект.ФормируемыйБюджет.ТочностьКоличественныхПоказателей;
	ОбновитьСтруктуруПоказателей();
	мСтруктураПустыхЗначений = Новый Структура;
	СтруктураРазрезовБюджета 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовБюджета(Объект.ФормируемыйБюджет);
	ИменаРазрезов.Очистить();
	Для Каждого ЭлементРазрез Из СтруктураРазрезовБюджета Цикл
		ЭлементРазрез.Представление = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрез.Значение);
		мСтруктураПустыхЗначений.Вставить(ЭлементРазрез.Представление,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза(ЭлементРазрез.Представление));
		ИменаРазрезов.Добавить(ЭлементРазрез.Представление);
	КонецЦикла;
	СтруктураПустыхЗначений = Новый ФиксированнаяСтруктура(мСтруктураПустыхЗначений);
	УчетПоНоменклатуре = СтруктураРазрезовБюджета.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура)<>Неопределено;
	//УстановитьГруппировкуДерева
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Элемент Из Элементы.ДеревоСтрокБюджетаГруппаУровеньГруппировок.ПодчиненныеЭлементы Цикл
		Если Элемент.Имя <> "РазвернутьВсе" Тогда
			УдаляемыеРеквизиты.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	
	ОтсутствиеАналитики  		= (СтруктураРазрезовБюджета.Количество()=0);
	ВключаяПодчиненныеПодразделения = Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения;
	// настройка работы с дополнительными разрезами
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ОборотыПоСтатьям");
	НастроитьРазрезыБюджета(СтруктураРазрезовБюджета,СписокТЧ);
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ЗависимыеОбороты");
	СписокТЧ.Добавить("РасчетыПоМоделям");
	НастроитьРазрезыБюджета(ПолныйСписокРазрезов,СписокТЧ);
	
	// кэширование
	фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыУчетаЦенПоказателейБюджета(Объект.ФормируемыйБюджет);
	фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_РазрезыФинансовыхПоказателейБюджета(Объект.ФормируемыйБюджет);
	фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_СтруктурыРазрезовФинансовыхПоказателейБюджета(Объект.ФормируемыйБюджет);
	фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеФПБюджета(Объект.ФормируемыйБюджет);
	фин_ОбщегоНазначенияВызовСервераПовтИсп.КЭШ_ДанныеСтатейБюджета(Объект.ФормируемыйБюджет);
	
//	ЗапомнитьСостояние();
	ЗаполнитьСписокСтатейДляВыбора();
//	фин_РаботаСДаннымиЭкземпляраБюджетаСервер.ИнициализироватьКЭШДанныхСтатей(ЭтотОбъект);
//	фин_РаботаСДаннымиЭкземпляраБюджетаСервер.ИнициализироватьКЭШДанныхФП(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСопутствующиеДанныеСценария()
	ЕдинаяЦенаВБюджетномПериоде = Объект.Сценарий.ЕдинаяЦенаВБюджетномПериоде;
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	ПоНоменклатурнымГруппам		= Объект.Сценарий.ДетализацияПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЧисловыхПолей()
	СписокЧисловыхПолей.Очистить();
	Для Инд = 1 По ПродолжительностьЦикла Цикл
		Если СтруктураПоказателей.Количество = Истина Тогда
			СписокЧисловыхПолей.Добавить("ИтогоКоличество"+?(ПродолжительностьЦикла<2,"",Формат(Инд,"ЧГ=")));
		КонецЕсли;
		Если СтруктураПоказателей.Сумма = Истина Тогда
			СписокЧисловыхПолей.Добавить("ИтогоСумма"+?(ПродолжительностьЦикла<2,"",Формат(Инд,"ЧГ=")));
		КонецЕсли;
		Если СтруктураПоказателей.Цена = Истина Тогда
			Если ЕдинаяЦенаВБюджетномПериоде И Инд>1 Тогда
				Продолжить;
			КонецЕсли;
			СписокЧисловыхПолей.Добавить("Цена"+?(ПродолжительностьЦикла<2 ИЛИ ЕдинаяЦенаВБюджетномПериоде,"",Формат(Инд,"ЧГ=")));
		КонецЕсли;
	КонецЦикла;
	Если ПродолжительностьЦикла>1 Тогда
		Если СтруктураПоказателей.Количество = Истина Тогда
			СписокЧисловыхПолей.Добавить("ИтогоКоличество");
		КонецЕсли;
		Если СтруктураПоказателей.Сумма = Истина Тогда
			СписокЧисловыхПолей.Добавить("ИтогоСумма");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,Поле)
	Возврат ОбъектДанных[Поле];	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСКурсамиВалют

// Получает курс и кратность документа на основании реквизитов шапки
//
&НаСервере
Процедура ОбновитьКурсДокумента()
	
	Если Объект.ЗадаватьКурсыВалютВДокументе = Ложь Тогда
		Объект.КурсыВалютДокумента.Очистить();
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов	= РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"];
		ОтборПоВалюте	= Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",Объект.ВалютаДокумента);
		ОтборПоВалюте.Вставить("Сценарий",Объект.Сценарий);		
	Иначе
		РегистрКурсов	= РегистрыСведений.КурсыВалют;
		ОтборПоВалюте	= Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	фин_Бюджет.Ссылка,
			|	фин_Бюджет.Дата КАК Дата
			|ПОМЕСТИТЬ ВТ_Документы
			|ИЗ
			|	Документ.фин_Бюджет КАК фин_Бюджет
			|ГДЕ
			|	фин_Бюджет.Проведен
			|	И фин_Бюджет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Заявка)
			|	И фин_Бюджет.Организация = &Организация
			|	И фин_Бюджет.ПериодПланирования = &ПериодПланирования
			|	И фин_Бюджет.ФормируемыйБюджет = &ФормируемыйБюджет
			|	И фин_Бюджет.Сценарий = &Сценарий
			|	И фин_Бюджет.УровеньДетализацииБюджета = &УровеньДетализацииБюджета
			|	И фин_Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение
			|	И фин_Бюджет.Проект = &Проект
			|	И фин_Бюджет.Дата <= &Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	фин_БюджетКурсыВалютДокумента.ПериодПланирования,
			|	фин_БюджетКурсыВалютДокумента.Валюта,
			|	фин_БюджетКурсыВалютДокумента.Курс,
			|	фин_БюджетКурсыВалютДокумента.Кратность
			|ИЗ
			|	ВТ_Документы КАК ВТ_Документы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.фин_Бюджет.КурсыВалютДокумента КАК фин_БюджетКурсыВалютДокумента
			|		ПО ВТ_Документы.Ссылка = фин_БюджетКурсыВалютДокумента.Ссылка";
		
		Запрос.УстановитьПараметр("Дата", 							?(Объект.Дата='00010101',ТекущаяДата(),Объект.Дата));
		Запрос.УстановитьПараметр("Организация", 					Объект.Организация);
		Запрос.УстановитьПараметр("ПериодПланирования",				Объект.ПериодПланирования);
		Запрос.УстановитьПараметр("Проект", 						Объект.Проект);
		Запрос.УстановитьПараметр("Сценарий", 						Объект.Сценарий);
		Запрос.УстановитьПараметр("УправленческоеПодразделение", 	Объект.УправленческоеПодразделение);
		Запрос.УстановитьПараметр("УровеньДетализацииБюджета", 		Объект.УровеньДетализацииБюджета);
		Запрос.УстановитьПараметр("ФормируемыйБюджет", 				Объект.ФормируемыйБюджет);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Объект.КурсыВалютДокумента.Загрузить(РезультатЗапроса.Выгрузить());
	
	Иначе
		СписокВалют = Новый СписокЗначений;
		ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
		Если Объект.ЕдинаяВалюта И Объект.ВалютаДокумента<>ВалютаРегламентированногоУчета Тогда
			СписокВалют.Добавить(Объект.ВалютаДокумента);
		КонецЕсли;
		Если СписокВалют.НайтиПоЗначению(ВалютаСводаБаланса) = Неопределено И ВалютаСводаБаланса<>ВалютаРегламентированногоУчета Тогда
			СписокВалют.Добавить(ВалютаСводаБаланса);
		КонецЕсли;
		ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		Если СписокВалют.НайтиПоЗначению(ВалютаУправленческогоУчета) = Неопределено И ВалютаУправленческогоУчета<>ВалютаРегламентированногоУчета Тогда
			СписокВалют.Добавить(ВалютаУправленческогоУчета);
		КонецЕсли;
		ВалютаСценария = Объект.Сценарий.Валюта;
		Если СписокВалют.НайтиПоЗначению(ВалютаСценария) = Неопределено И ВалютаСценария<>ВалютаРегламентированногоУчета Тогда
			СписокВалют.Добавить(ВалютаСценария);
		КонецЕсли;
		МассивПериодов = Новый Массив;
		МассивПериодов.Добавить(Объект.ПериодПланирования);
		Если ПродолжительностьЦикла>1 Тогда
			Для Инд = 2 По ПродолжительностьЦикла Цикл
				ПериодПланированияОчередной = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,Инд-1);
				МассивПериодов.Добавить(ПериодПланированияОчередной);
			КонецЦикла;
		КонецЕсли;
		СтрокиТЧ = Объект.ОборотыПоСтатьям.Выгрузить();
		СтрокиТЧ.Свернуть("ВалютаОперации");
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Если СписокВалют.НайтиПоЗначению(СтрокаТЧ.ВалютаОперации) = Неопределено И СтрокаТЧ.ВалютаОперации<>ВалютаРегламентированногоУчета Тогда
				СписокВалют.Добавить(СтрокаТЧ.ВалютаОперации);
			КонецЕсли;
		КонецЦикла;
		СтрокиТЧ = Объект.ЗависимыеОбороты.Выгрузить();
		СтрокиТЧ.Свернуть("ВалютаОперации,ПериодПланирования");
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Если СписокВалют.НайтиПоЗначению(СтрокаТЧ.ВалютаОперации) = Неопределено И СтрокаТЧ.ВалютаОперации<>ВалютаРегламентированногоУчета Тогда
				СписокВалют.Добавить(СтрокаТЧ.ВалютаОперации);
			КонецЕсли;
			Если МассивПериодов.Найти(СтрокаТЧ.ПериодПланирования) = Неопределено Тогда
				МассивПериодов.Добавить(СтрокаТЧ.ПериодПланирования);
			КонецЕсли;
		КонецЦикла;
		СтрокиТЧ = Объект.РасчетыПоМоделям.Выгрузить();
		СтрокиТЧ.Свернуть("ВалютаОперации,ПериодПланирования");
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Если СписокВалют.НайтиПоЗначению(СтрокаТЧ.ВалютаОперации) = Неопределено И СтрокаТЧ.ВалютаОперации<>ВалютаРегламентированногоУчета Тогда
				СписокВалют.Добавить(СтрокаТЧ.ВалютаОперации);
			КонецЕсли;
			Если МассивПериодов.Найти(СтрокаТЧ.ПериодПланирования) = Неопределено Тогда
				МассивПериодов.Добавить(СтрокаТЧ.ПериодПланирования);
			КонецЕсли;
		КонецЦикла;
		Если Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
			СтрокиТЧ = ОборотыПриКорректировке.Выгрузить(); 
			СтрокиТЧ.Свернуть("ВалютаОперации");
			Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
				Если СписокВалют.НайтиПоЗначению(СтрокаТЧ.ВалютаОперации) = Неопределено Тогда
					СписокВалют.Добавить(СтрокаТЧ.ВалютаОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Объект.КурсыВалютДокумента.Очистить();
		Для Каждого ЭлементВалюта Из СписокВалют Цикл
			Для Каждого ПериодДокумента Из МассивПериодов Цикл
				ОтборПоВалюте.Вставить("Валюта",ЭлементВалюта.Значение);
				СтруктураКурсов=РегистрКурсов.ПолучитьПоследнее(ПериодДокумента,ОтборПоВалюте);
				НоваяСтрока = Объект.КурсыВалютДокумента.Добавить();
				НоваяСтрока.ПериодПланирования 	= ПериодДокумента;
				НоваяСтрока.Валюта 				= ЭлементВалюта.Значение;
				НоваяСтрока.Курс				= СтруктураКурсов.Курс;
				НоваяСтрока.Кратность			= СтруктураКурсов.Кратность;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	КЭШКурсов.Очистить();
	
КонецПроцедуры //ОбновитьКурсДокумента

//Обновляет курс и сумму выбранной операции при изменении валюты
//
//&НаСервере
Процедура ОбновитьКурсИСуммуОперации(СтараяВалюта,СтрокаКОбработке,РасчетЦены=Истина) Экспорт
	ТекущаяСтрока = ?(ТипЗнч(СтрокаКОбработке)=Тип("Число"),Объект.ОборотыПоСтатьям.НайтиПоИдентификатору(СтрокаКОбработке),СтрокаКОбработке);
	
	КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтараяВалюта,				ТекущаяСтрока.ПериодПланирования);
	КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, ТекущаяСтрока.ВалютаОперации,ТекущаяСтрока.ПериодПланирования);
	
	СтарыйКурс			= КурсСтаройВалюты.Курс;
	СтараяКратность 	= КурсСтаройВалюты.Кратность;
	
	ТекущаяСтрока.Сумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Сумма,
											СтараяВалюта,ТекущаяСтрока.ВалютаОперации,
											СтарыйКурс,КурсНовойВалюты.Курс,
											СтараяКратность,КурсНовойВалюты.Кратность);
	ФинансовыйПоказатель = ТекущаяСтрока.ФинансовыйПоказатель;
	СпособЦенообразования = ПолеОбъекта(ФинансовыйПоказатель,"СпособЦенообразования");
	Если РасчетЦены И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ФинансовыйПоказатель,ЭтотОбъект) И СпособЦенообразования<>ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать") И (НЕ ТекущаяСтрока.Количество=0) Тогда
		ТекущаяСтрока.Цена=Окр(ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,2);
	КонецЕсли;
КонецПроцедуры //ОбновитьКурсИСуммуОперации

//Обновляет курс и сумму выбранной операции при изменении валюты
//
//&НаСервере
&НаКлиенте
Процедура ОбновитьКурсИСуммуОперацииВСтрокеДереваИВПодчиненных(СтараяВалюта,СтрокаКОбработке) Экспорт
	
	Если ПродолжительностьЦикла <= 1 Тогда
		КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтараяВалюта,					Объект.ПериодПланирования);
		КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтрокаКОбработке.ВалютаОперации,	Объект.ПериодПланирования);
		
		СтарыйКурс			= КурсСтаройВалюты.Курс;
		СтараяКратность 	= КурсСтаройВалюты.Кратность;
		
		СтрокаКОбработке.ИтогоСумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаКОбработке.ИтогоСумма,СтараяВалюта,СтрокаКОбработке.ВалютаОперации,СтарыйКурс,КурсНовойВалюты.Курс,СтараяКратность,КурсНовойВалюты.Кратность);
	Иначе
		СтрокаКОбработке.ИтогоСумма = 0;
		Для Инд = 1 По ПродолжительностьЦикла Цикл
			КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтараяВалюта,					ОбратноеСоответствиеПериодов.Получить(Инд));
			КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтрокаКОбработке.ВалютаОперации,	ОбратноеСоответствиеПериодов.Получить(Инд));
			
			СтарыйКурс			= КурсСтаройВалюты.Курс;
			СтараяКратность 	= КурсСтаройВалюты.Кратность;
			
			СтрокаКОбработке["ИтогоСумма"+Строка(Инд)] = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаКОбработке["ИтогоСумма"+Строка(Инд)],СтараяВалюта,СтрокаКОбработке.ВалютаОперации,СтарыйКурс,КурсНовойВалюты.Курс,СтараяКратность,КурсНовойВалюты.Кратность);
			СтрокаКОбработке.ИтогоСумма =СтрокаКОбработке.ИтогоСумма + СтрокаКОбработке["ИтогоСумма"+Строка(Инд)];
		КонецЦикла;
	КонецЕсли;
	ФинансовыйПоказатель = СтрокаКОбработке.ФинансовыйПоказатель;
	Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ФинансовыйПоказатель,ЭтотОбъект) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ФинансовыйПоказатель,ЭтотОбъект) Тогда
		Если ЕдинаяЦенаВБюджетномПериоде ИЛИ ПродолжительностьЦикла<2 Тогда
			Если СтрокаКОбработке.Цена <> 0 Тогда
				СтрокаКОбработке.Цена = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаКОбработке.Цена,СтараяВалюта,СтрокаКОбработке.ВалютаОперации,СтарыйКурс,КурсНовойВалюты.Курс,СтараяКратность,КурсНовойВалюты.Кратность);
			КонецЕсли;
		Иначе
			Для Инд = 1 По ПродолжительностьЦикла Цикл
				Если СтрокаКОбработке["Цена"+Строка(Инд)] <> 0 Тогда
					СтрокаКОбработке["Цена"+Строка(Инд)] = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаКОбработке["Цена"+Строка(Инд)],СтараяВалюта,СтрокаКОбработке.ВалютаОперации,СтарыйКурс,КурсНовойВалюты.Курс,СтараяКратность,КурсНовойВалюты.Кратность);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаКОбработке.ПолучитьЭлементы() Цикл
		ОбновитьКурсИСуммуОперацииВСтрокеДереваИВПодчиненных(СтараяВалюта,ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры //ОбновитьКурсИСуммуОперации

&НаСервере
Процедура ПересчитатьСуммыНаСервере(ПересчетСумм)
	ОбновитьКурсДокумента();
	ВалютаДокумента 		= Объект.ВалютаДокумента;
  	ВалютаСводаБаланса 		= Документы.фин_Бюджет.ВалютаСводаБаланса(Объект);
	Для Каждого СтрокаТЧ ИЗ Объект.ОборотыПоСтатьям Цикл
		Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаТЧ.ФинансовыйПоказатель,ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли;
		// Надо предложить пересчитать сумму.
		СтараяВалютаОперации = СтрокаТЧ.ВалютаОперации;
		СтрокаТЧ.ВалютаОперации = ВалютаДокумента;
		Если ПересчетСумм Тогда
			ОбновитьКурсИСуммуОперации(СтараяВалютаОперации,СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ ИЗ Объект.ЗависимыеОбороты Цикл
		Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаТЧ.ФинансовыйПоказатель,ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли;
		// Надо предложить пересчитать сумму.
		СтараяВалютаОперации = СтрокаТЧ.ВалютаОперации;
		СтрокаТЧ.ВалютаОперации = ВалютаДокумента;
		Если ПересчетСумм Тогда
			ОбновитьКурсИСуммуОперации(СтараяВалютаОперации,СтрокаТЧ,Ложь);
		КонецЕсли;
	КонецЦикла;
	Если ПересчетСумм Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		ПроизвестиРасчетыПоФормулам();
	КонецЕсли;
	ОбновитьПолеБюджета();
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыОбработкиСобытийРеквизитовШапки

&НаСервере
Процедура ЕдинаяВалютаПриИзмененииНаСервере()
  	ВалютаСводаБаланса 		= Документы.фин_Бюджет.ВалютаСводаБаланса(Объект);
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		Объект.ЗаявкиНаФормирование.Очистить();
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
		Объект.ПланироватьМероприятияПоДостижениюБюджетныхПоказателей = Ложь;
		Объект.ПланируемыеМероприятия.Очистить();
	КонецЕсли;
	Документы.фин_Бюджет.ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей);
	Если ((НЕ ТолькоТабличныеЧасти) И СписокФильтрСтатей.Количество()<>0) ИЛИ Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		ПерезаполнитьБюджет();
	КонецЕсли;
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		ОбновитьПолеБюджета();
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов ИЛИ Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		РежимМедленногоСоединения = Ложь;
		Элементы.ФормаРежимМедленногоСоединения.Пометка=Ложь;
		УстановитьПараметрыВалютныхРасчетов()
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	УстановитьЗаголовокФормыДокумента();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	ОбновитьДанныеВнешнейСтруктуры(Истина);
	ОбновитьПолеБюджета();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОбОчисткеБюджета(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииПараметровФормированияНаСервере(Истина);
	Иначе
		Объект.ФормируемыйБюджет = мБюджет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОбОчисткеСценария(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииПараметровФормированияНаСервере(,Истина);
	Иначе
		Объект.Сценарий = мСценарий;
	КонецЕсли;
КонецПроцедуры

// Процедура ПриИзмененииСтатьиОборотов
// 
&НаСервере
Процедура ПриИзмененииФинансовогоПоказателя(ТекущаяСтрока)
	КЭШ_Разрезы = Неопределено;
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого РазрезЭлемент Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = РазрезЭлемент.Представление;
			Если СтруктураРазрезовПоказателя.Свойство(ИмяРазреза) Тогда
				УстановитьЗначениеРеквизитаПоУмолчанию(ТекущаяСтрока,ИмяРазреза,ТекущаяСтрока.ФинансовыйПоказатель,РазрезЭлемент.Значение);
			Иначе 
				ТекущаяСтрока[ИмяРазреза] 	= ПустоеЗначениеРазреза(ИмяРазреза,ТекущаяСтрока.ФинансовыйПоказатель);
			КонецЕсли;
		КонецЦикла;
		Если ТекущаяСтрока.Сумма = 0 и ЗначениеЗаполнено(ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта) И НЕ Объект.ЕдинаяВалюта Тогда
			ТекущаяСтрока.ВалютаОперации	= ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта;
		КонецЕсли;
		СтараяВалютаОперации				= ТекущаяСтрока.ВалютаОперации;
		
		Если ТекущаяСтрока.ФинансовыйПоказатель.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(ТекущаяСтрока,Объект.Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,ТекущаяСтрока.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
	КонецЕсли;	
		
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
		ТекущаяСтрока.Сумма				= 0;
		ТекущаяСтрока.ВалютаОперации	= "";
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВалютаОперации) Тогда
		СтараяВалютаОперации			= ТекущаяСтрока.ВалютаОперации;
		Если НЕ Объект.ЕдинаяВалюта Тогда
			ТекущаяСтрока.ВалютаОперации= ?(ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта.Пустая(),Объект.ВалютаДокумента,ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта);
		Иначе
			ТекущаяСтрока.ВалютаОперации= Объект.ВалютаДокумента;
		КонецЕсли;
		СтараяВалютаОперации 			= Объект.ВалютаДокумента;
	КонецЕсли;
	
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
		ТекущаяСтрока.Количество		= 0;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииСтатьиОборотов

&НаКлиенте
Процедура ОбработатьСогласиеНаАвтоматическоеУтверждениеСтатей(Результат,ДополнительныеПараметры) Экспорт
	Если Результат=КодВозвратаДиалога.Да Тогда
		 Для Каждого СтрокаОборот Из Объект.ОборотыПоСтатьям Цикл
			 СтрокаОборот.Состояние = Объект.Состояние;
		 КонецЦикла;
		 Для Каждого СтрокаОборот Из Объект.ЗависимыеОбороты Цикл
			 СтрокаОборот.Состояние = Объект.Состояние;
		 КонецЦикла;
		 ОбновитьПолеБюджета();
	 КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОтветаПоПересчетуСуммДокумента(Ответ,ДополнительныеПараметры) Экспорт
	ПересчетСумм = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчетСумм=Истина;
	КонецЕсли;
	ПересчитатьСуммыНаСервере(ПересчетСумм);
	СтараяВалютаДокумента	= Объект.ВалютаДокумента;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере()
	СтараяВалютаДокумента	= Объект.ВалютаДокумента;
  	ВалютаСводаБаланса 		= Документы.фин_Бюджет.ВалютаСводаБаланса(Объект);
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьПолеБюджета();
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастройкиВыбораПодразделений(ФормируемыйБюджет)
	СписокОтбора = Новый СписокЗначений;
	Если ФормируемыйБюджет.ДляСпискаПодразделений Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_СписокБюджетовПоПодразделениям.УправленческоеПодразделение
			|ИЗ
			|	РегистрСведений.фин_СписокБюджетовПоПодразделениям КАК фин_СписокБюджетовПоПодразделениям
			|ГДЕ
			|	фин_СписокБюджетовПоПодразделениям.Бюджет = &Бюджет";

		Запрос.УстановитьПараметр("Бюджет", ФормируемыйБюджет);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокОтбора.Добавить(ВыборкаДетальныеЗаписи.УправленческоеПодразделение);
		КонецЦикла;

	Иначе
		СписокОтбора.Добавить(ФормируемыйБюджет.ПодразделениеПоУмолчанию);
	КонецЕсли;
	Возврат ?(ФормируемыйБюджет.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,Новый Структура("НастройкиОтбораВБюджет,ОтображатьСписком",Новый Структура("Список,ВидСравнения",СписокОтбора,?(ФормируемыйБюджет.ДляСпискаПодразделений ИЛИ НЕ ФормируемыйБюджет.ВключаяПодчиненныеПодразделения,ВидСравненияКомпоновкиДанных.ВСписке,ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии)),ФормируемыйБюджет.ДляСпискаПодразделений),Неопределено);
КонецФункции

&НаСервере
Процедура УправленческоеПодразделениеПриИзмененииНаСервере()
	
	ПроверитьНаличиеБюджетов();
	Если НЕ Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Документы.фин_Бюджет.ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей);
		Если (НЕ ТолькоТабличныеЧасти) И СписокФильтрСтатей.Количество()<>0 Тогда
			ПерезаполнитьБюджет();
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка ИЛИ Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Объект.ОборотыПоСтатьям.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
		Объект.РасчетыПоМоделям.Очистить();
	Иначе
		Если НЕ Объект.УправленческоеПодразделение.Пустая() Тогда
			Для Каждого СтрокаОборотов Из Объект.ОборотыПоСтатьям Цикл
				СтрокаОборотов.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
			КонецЦикла;
			СтрокаСвертки = "";
			Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
				Если Реквизит.Имя <> "Сумма" И Реквизит.Имя <> "Количество" Тогда
					 СтрокаСвертки = СтрокаСвертки + ?(СокрЛП(СтрокаСвертки)="","",",") + Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;
			Обороты = Объект.ОборотыПоСтатьям.Выгрузить();
			Обороты.Свернуть(СтрокаСвертки,"Количество,Сумма");
			Объект.ОборотыПоСтатьям.Загрузить(Обороты);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		ОбновитьПолеБюджета();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	мУправленческоеПодразделение = Объект.УправленческоеПодразделение;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	ПроверитьНаличиеБюджетов();
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка ИЛИ Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		Объект.ОборотыПоСтатьям.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
		Объект.РасчетыПоМоделям.Очистить();
	Иначе
		Если НЕ Объект.Проект.Пустая() Тогда
			Для Каждого СтрокаОборотов Из Объект.ОборотыПоСтатьям Цикл
				СтрокаОборотов.Проект = Объект.Проект;
			КонецЦикла;
			СтрокаСвертки = "";
			Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
				Если Реквизит.Имя <> "Сумма" И Реквизит.Имя <> "Количество" Тогда
					 СтрокаСвертки = СтрокаСвертки + ?(СокрЛП(СтрокаСвертки)="","",",") + Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;
			ТЧ = Объект.ОборотыПоСтатьям.Выгрузить();
			ТЧ.Свернуть(СтрокаСвертки,"Количество,Сумма");
			Объект.ОборотыПоСтатьям.Загрузить(ТЧ);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ОбновитьДанныеВнешнейСтруктуры();
		ОбновитьПолеБюджета();
	Иначе
		УстановитьПараметрыВалютныхРасчетов();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	мПроект = Объект.Проект;
	ЗапомнитьСостояние();
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныеПроцедурыОбработкиТабличныхЧастей

&НаКлиенте
Процедура ПриОкончанииРедактированияСтроки(ТекущиеДанные)
	ТекущиеДанные = Элементы.ОборотыПоСтатьям;
	СтруктураДанныхСтроки = Новый Структура("ФинансовыйПоказатель,ВалютаОперации,Количество,Сумма,Цена,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки,ТекущиеДанные);
	Если ОчиститьНеиспользуемыеДанные(СтруктураДанныхСтроки,Объект.ФормируемыйБюджет,ПоНоменклатурнымГруппам,ПолныйСписокРазрезов,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре) Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтруктураДанныхСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФинансовогоПоказателяНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока  = Объект.ОборотыПоСтатьям.НайтиПоИдентификатору(ИдентификаторСтроки);
	КЭШ_Разрезы 	= Неопределено;
	Сценарий 		= Объект.Сценарий;
	ЕдинаяВалюта 	= Объект.ЕдинаяВалюта;
	ВалютаДокумента = Объект.ВалютаДокумента;
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого РазрезЭлемент Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = РазрезЭлемент.Представление;
			Если СтруктураРазрезовПоказателя.Свойство(ИмяРазреза) Тогда
				УстановитьЗначениеРеквизитаПоУмолчанию(ТекущаяСтрока,ИмяРазреза,ТекущаяСтрока.ФинансовыйПоказатель,РазрезЭлемент.Значение);
			Иначе 
				ТекущаяСтрока[ИмяРазреза] = ПустоеЗначениеРазреза(ИмяРазреза,ТекущаяСтрока.ФинансовыйПоказатель);
			КонецЕсли;
		КонецЦикла;
		Если ТекущаяСтрока.Сумма=0 И НЕ Объект.ЕдинаяВалюта И ЗначениеЗаполнено(ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта) Тогда
			ТекущаяСтрока.ВалютаОперации = ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта;
		КонецЕсли;
		СтараяВалютаОперации = ТекущаяСтрока.ВалютаОперации;
		Если ТекущаяСтрока.ФинансовыйПоказатель.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(ТекущаяСтрока,Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,ТекущаяСтрока.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
	КонецЕсли;	
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
		ТекущаяСтрока.Сумма=0;
		ТекущаяСтрока.ВалютаОперации="";
	ИначеЕсли ТекущаяСтрока.ВалютаОперации.Пустая() Тогда
		СтараяВалютаОперации=ТекущаяСтрока.ВалютаОперации;
		Если НЕ ЕдинаяВалюта Тогда
			ТекущаяСтрока.ВалютаОперации=?(ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта.Пустая(),ВалютаДокумента,ТекущаяСтрока.ФинансовыйПоказатель.ОсновнаяВалюта);
		Иначе
			ТекущаяСтрока.ВалютаОперации=ВалютаДокумента;
		КонецЕсли;
		СтараяВалютаОперации=ВалютаДокумента;
	КонецЕсли;
	Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
		ТекущаяСтрока.Количество=0;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ПроцедурыРасчетаИЗаполнения

&НаСервере
Процедура УстановитьПараметрыВалютныхРасчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СформированныеБюджеты.ЗадаватьКурсыВалютВДокументе,
		|	фин_СформированныеБюджеты.УровеньДетализацииБюджета,
		|	фин_СформированныеБюджеты.ЕдинаяВалюта,
		|	фин_СформированныеБюджеты.ВалютаДокумента
		|ИЗ
		|	РегистрСведений.фин_СформированныеБюджеты КАК фин_СформированныеБюджеты
		|ГДЕ
		|	фин_СформированныеБюджеты.Бюджет = &Бюджет
		|	И фин_СформированныеБюджеты.Сценарий = &Сценарий
		|	И фин_СформированныеБюджеты.ПериодПланирования = &ПериодПланирования
		|	И фин_СформированныеБюджеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Бюджет)
		|	И фин_СформированныеБюджеты.Организация = &Организация
		|	И фин_СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение
		|	И фин_СформированныеБюджеты.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Бюджет", 			Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("ПериодПланирования", Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("Проект", 			Объект.Проект);
	Запрос.УстановитьПараметр("Сценарий", 			Объект.Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", Объект.УправленческоеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Объект.ЗадаватьКурсыВалютВДокументе = ВыборкаДетальныеЗаписи.ЗадаватьКурсыВалютВДокументе;
		//Объект.УровеньДетализацииБюджета 	= ВыборкаДетальныеЗаписи.УровеньДетализацииБюджета;
		Объект.ЕдинаяВалюта 				= ВыборкаДетальныеЗаписи.ЕдинаяВалюта;
		Объект.ВалютаДокумента 				= ВыборкаДетальныеЗаписи.ВалютаДокумента;
		СтараяВалютаДокумента	= Объект.ВалютаДокумента;
	  	ВалютаСводаБаланса 		= Документы.фин_Бюджет.ВалютаСводаБаланса(Объект);
		ОбновитьКурсДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтатьиБюджетаВСтроках()
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("ОборотыПоСтатьям");
	МассивТЧ.Добавить("ЗависимыеОбороты");
	МассивТЧ.Добавить("РасчетыПоМоделям");
	Для Каждого ТабличнаяЧасть Из МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТабличнаяЧасть] Цикл
			СтрокаТЧ.СтатьяБюджета = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтатьяБюджетаПоПоказателю(СтрокаТЧ.ФинансовыйПоказатель,ЭтотОбъект);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура ПроверитьНаличиеБюджетов
// 
&НаСервере
Процедура ПроверитьНаличиеБюджетов()
	РасчетМоделейАктуален = Ложь;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СформированныеБюджеты.Регистратор
		               |ИЗ
		               |	РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
		               |ГДЕ
		               |	СформированныеБюджеты.Регистратор <> &Регистратор
		               |	И СформированныеБюджеты.Бюджет = &Бюджет
		               |	И СформированныеБюджеты.Сценарий = &Сценарий
		               |	И СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение
		               |	И СформированныеБюджеты.Проект = &Проект
		               |	И СформированныеБюджеты.ВидОперации = &ВидОперации
		               |	И СформированныеБюджеты.ПериодПланирования >= &НачалоПериода
		               |	И СформированныеБюджеты.ПериодПланирования < &КонецПериода
		               |	И ВЫБОР
		               |			КОГДА &ПоОрганизациям
		               |				ТОГДА СформированныеБюджеты.Организация = &Организация
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ";
		Запрос.УстановитьПараметр("ПоОрганизациям",	БюджетированиеПоОрганизациям);
		Запрос.УстановитьПараметр("Организация",	Объект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),-ПродолжительностьЦикла+1)));
		Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),ПродолжительностьЦикла-1)));
		Запрос.УстановитьПараметр("Регистратор",		Объект.Ссылка);
		Запрос.УстановитьПараметр("Бюджет",				Объект.ФормируемыйБюджет);
		Запрос.УстановитьПараметр("Проект",				Объект.Проект);
		Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
		Запрос.УстановитьПараметр("УправленческоеПодразделение", Объект.УправленческоеПодразделение);
		Запрос.УстановитьПараметр("ВидОперации",		Объект.ВидОперации);
		Запрос.УстановитьПараметр("ПериодПланирования",	Объект.ПериодПланирования);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уже сформирован бюджет с указанными параметрами");
		КонецЕсли;
	    Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("	- "+Выборка.Регистратор);
		КонецЦикла;
		// проверка регламента
		Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрешитьФормированиеБюджетовВнеПорядкаРегламента") Тогда
			Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Дата",			Объект.ПериодПланирования);
				Запрос.УстановитьПараметр("Бюджет",			Объект.ФормируемыйБюджет);
				Запрос.УстановитьПараметр("Проект",			Объект.Проект);
				Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
				Запрос.УстановитьПараметр("УправленческоеПодразделение",			Объект.УправленческоеПодразделение);
				Запрос.УстановитьПараметр("ДатаНачала",		?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),-ПродолжительностьЦикла+1)));
				Запрос.УстановитьПараметр("ДатаОкончания",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),ПродолжительностьЦикла-1)));
				Запрос.УстановитьПараметр("ПоОрганизациям",	БюджетированиеПоОрганизациям);
				Запрос.УстановитьПараметр("Организация",	Объект.Организация);
				Запрос.УстановитьПараметр("Регламент",		Документы.фин_Бюджет.БюджетныйРегламент(Объект));
				Запрос.Текст = "ВЫБРАТЬ
				               |	РегламентФормированияБюджетовСрезПоследних.Ранг
				               |ПОМЕСТИТЬ ВТ_Регламент
							   |ИЗ
				               |	РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(,Бюджет = &Бюджет И Регламент=&Регламент) КАК РегламентФормированияБюджетовСрезПоследних
							   |;
							   |ВЫБРАТЬ
				               |	РегламентФормированияБюджетовСрезПоследних.Бюджет
				               |ИЗ
				               |	РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(,Регламент=&Регламент) КАК РегламентФормированияБюджетовСрезПоследних
							   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Регламент ПО РегламентФормированияБюджетовСрезПоследних.Ранг < ВТ_Регламент.Ранг
							   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				               |			СформированныеБюджеты.Бюджет КАК Бюджет
				               |		ИЗ
				               |			РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
				               |		ГДЕ
				               |			СформированныеБюджеты.Сценарий = &Сценарий"+?(Объект.ФормируемыйБюджет.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения ИЛИ Объект.УправленческоеПодразделение.Пустая(),"","
				               |			И ВЫБОР КОГДА СформированныеБюджеты.Бюджет.УровеньДетализацииБюджета=ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения) ТОГДА ИСТИНА ИНАЧЕ СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение КОНЕЦ")+?(Объект.ФормируемыйБюджет.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта ИЛИ Объект.Проект.Пустая(),"","
				               |			И ВЫБОР КОГДА СформированныеБюджеты.Бюджет.УровеньДетализацииБюджета=ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта) ТОГДА ИСТИНА ИНАЧЕ СформированныеБюджеты.Проект = &Проект КОНЕЦ")+"
				               |			И СформированныеБюджеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Бюджет)
				               |			И ВЫБОР
				               |				КОГДА &ПоОрганизациям
				               |					ТОГДА СформированныеБюджеты.Организация = &Организация
				               |				ИНАЧЕ ИСТИНА
				               |			  КОНЕЦ				               
							   |			И СформированныеБюджеты.ПериодПланирования >= &ДатаНачала
				               |			И СформированныеБюджеты.ПериодПланирования < &ДатаОкончания) КАК ВложенныйЗапрос
				               |		ПО РегламентФормированияБюджетовСрезПоследних.Бюджет = ВложенныйЗапрос.Бюджет
				               |ГДЕ
				               |	ВложенныйЗапрос.Бюджет ЕСТЬ NULL";
				Регламент=Запрос.Выполнить().Выгрузить();
				Если Регламент.Количество() > 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не сформированы предыдущие бюджеты по регламенту:");
					Для Каждого СтрокаТЧ Из Регламент Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+СтрокаТЧ.Бюджет);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Если Объект.ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	Бюджет.Ссылка
		|ИЗ
		|	Документ.фин_Бюджет КАК Бюджет
		|ГДЕ
		|	Бюджет.Дата >= &Дата
		|	И Бюджет.Проведен
		|	И Бюджет.ФормируемыйБюджет = &ФормируемыйБюджет
		|	И Бюджет.Сценарий = &Сценарий"+?(Объект.УправленческоеПодразделение.Пустая(),"","
		|	И Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение")+?(Объект.Проект.Пустая(),"","
		|	И Бюджет.Проект = &Проект")+"
		|	И Бюджет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Заявка)
		|	И Бюджет.ПериодПланирования >= &НачалоПланирования
		|	И Бюджет.ПериодПланирования <= &КонецПланирования
		|	И Бюджет.Ссылка <> &Ссылка
		|	И ВЫБОР
		|			КОГДА &ПоОрганизациям
		|				ТОГДА Бюджет.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("ПоОрганизациям",		БюджетированиеПоОрганизациям);
		Запрос.УстановитьПараметр("Организация",		Объект.Организация);
		Запрос.УстановитьПараметр("Ссылка",				Объект.ФормируемыйБюджет);
		Запрос.УстановитьПараметр("НачалоПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),-ПродолжительностьЦикла+1)));
		Запрос.УстановитьПараметр("КонецПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),ПродолжительностьЦикла-1)));
		Запрос.УстановитьПараметр("Ссылка",				Объект.Ссылка);
		Запрос.УстановитьПараметр("ФормируемыйБюджет",	Объект.ФормируемыйБюджет);
		Запрос.УстановитьПараметр("Сценарий",			Объект.Сценарий);
		Запрос.УстановитьПараметр("Проект",				Объект.Проект);
		Запрос.УстановитьПараметр("УправленческоеПодразделение",				Объект.УправленческоеПодразделение);
		Запрос.УстановитьПараметр("Дата",				?(Объект.Дата='00010101',ТекущаяДата(),Объект.Дата));
		РезультатЗапроса=Запрос.Выполнить(); 
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не будет записан, так как имеются более поздние корректировки/планирования!");
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПроверитьНаличиеБюджетов

// Устанавливает значение реквизита указанным для выбранного элемента справочника
// "СтатьиОборотов" значением по умолчанию.
//
// Параметры
//  Объект  – реквизит документа, для которого устанавливается значение.
//  Значение - значение по умолчанию
//
&НаСервере
Процедура УстановитьЗначениеРеквизитаПоУмолчанию(СтрокаТЧ,ИмяРазреза,Статья,Измерение)
	Значение = Неопределено;
	СтрокиОбъект = Статья.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",Измерение));
	Если СтрокиОбъект.Количество()>0 Тогда
		Значение = СтрокиОбъект[0].ОсновноеЗначение;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРазреза]) Тогда
		Если ТипЗнч(СтрокаТЧ[ИмяРазреза])=ТипЗнч(Значение) ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура")
			ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура")
			ИЛИ ТипЗнч(Значение) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
			СтрокаТЧ[ИмяРазреза] = Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //УстановитьЗначениеРеквизитаПоУмолчанию

&НаСервере
Функция ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель=Неопределено,ПериодИзмененный=Неопределено,ЗатронутыеСтатьиБюджета=Неопределено,ОбъектРасчета = Неопределено,ПервоначальноеЗаполнение=Ложь,АдресДанныхРезультатовОтладки = Неопределено)
	ТекущийСписокФормульных = Новый СписокЗначений;
	Для Каждого Элемент Из СписокФормульных Цикл
		Если ПервоначальноеЗаполнение=Ложь И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения(Элемент.Значение,ЭтотОбъект) Тогда
			Продолжить;
		КонецЕсли;
		ТекущийСписокФормульных.Добавить(Элемент.Значение);
	КонецЦикла;
	Если ТекущийСписокФормульных.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	РезультатРасчета = фин_ЗащитаПривилегированныеПроцедуры.ПроизвестиРасчетыПоФормуламБюджета(?(ОбъектРасчета = Неопределено,Объект,ОбъектРасчета),Версия,ПродолжительностьЦикла,ТаблицаФормулыРасчетаСтатей,
				ТаблицаСоставФормулРасчетаСтатей,ТаблицаРассчитанныеПоказателиФормул,
				ТекущийСписокФормульных,КЭШ_СтатьиПоказателей,СписокФильтрСтатей,ФинансовыйПоказатель,
				ПериодИзмененный,ЗатронутыеСтатьиБюджета,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры,ОборотыПриКорректировке,ТочностьКоличественныхПоказателей,АдресДанныхРезультатовОтладки);
	Если РезультатРасчета = Истина Тогда
		СвернутьОбороты(ОбъектРасчета);
	КонецЕсли;
	Возврат РезультатРасчета;
КонецФункции

&НаСервереБезКонтекста
Функция ИмеетсяРазрезРасчетаЦены(ФинансовыйПоказатель,Разрез,Бюджет)
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ЦенообразующийРазрезПоказателя(Бюджет,ФинансовыйПоказатель,Разрез);	
КонецФункции

&НаСервереБезКонтекста
Функция ИмеетсяРазрезРасчетаЦеныСтатьи(Статья,ИмяРазреза,Бюджет)
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ЦенообразующийРазрезСтатьи(Бюджет,Статья,ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ИмяРазреза));	
КонецФункции

&НаСервере
Процедура ПересчитатьЦенуНаСервере(Идентификатор)
	ТекущаяСтрока = Объект.ОборотыПоСтатьям.НайтиПоИдентификатору(Идентификатор);
	фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(ТекущаяСтрока,Объект.Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,ТекущаяСтрока.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииВОбороты(СтрокаОборотов)
	ОписаниеТиповНоменклатуры 	= ТипЗначенияДляВвода("Номенклатура",СтрокаОборотов.ФинансовыйПоказатель);
	СтрокаОборотов.Номенклатура = ОписаниеТиповНоменклатуры.ПривестиЗначение(СтрокаОборотов.Номенклатура);
	
	Для Инд = 1 По 10 Цикл
		ИмяРазреза = "Разрез"+Строка(Инд);
		Если СтруктураРазрезовБюджета.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ИмяРазреза))=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеТиповРазреза 		= ТипЗначенияДляВвода(ИмяРазреза);
		СтрокаОборотов[ИмяРазреза] 	= ОписаниеТиповРазреза.ПривестиЗначение(СтрокаОборотов[ИмяРазреза]);
	КонецЦикла;
КонецПроцедуры

// обновляет значения разрезов поля
//
&НаСервере
Процедура ПриЗаписиВОбороты()
	КЭШ_Разрезы = Неопределено;
	СтрокиОбновить = Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура("Номенклатура",Неопределено));	
	Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
		Если УчетПоНоменклатуре Тогда
			ОписаниеТиповНоменклатуры 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(СтрокаТЧ.ФинансовыйПоказатель,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре,ЭтотОбъект);
			СтрокаТЧ.Номенклатура 		= ОписаниеТиповНоменклатуры.ПривестиЗначение(СтрокаТЧ.Номенклатура);
		Иначе
			СтрокаТЧ.Номенклатура 		= ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза = Разрез.Представление;
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		ЭлементПВХ 					= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
		СтрокиОбновить 				= Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура(ИмяРазреза,Неопределено));	
		ОписаниеТиповРазреза 		= ЭлементПВХ.ТипЗначения;
		Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
			СтрокаТЧ[ИмяРазреза] 	= ОписаниеТиповРазреза.ПривестиЗначение(СтрокаТЧ[ИмяРазреза]);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ПриЗаписиВОбороты

//Функция ПолучитьСтруктуруПоискаИзменяемыхСтрок
//
&НаКлиенте
Процедура ПолучитьСтруктуруПоискаИзменяемыхСтрок()
	мСтруктураПоискаИзменяемых = Новый Структура;
	ТекущаяСтрока = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТабличныйВариант Тогда
		мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока["СтатьяБюджета"]);
		Если НЕ Объект.ЕдинаяВалюта Тогда
			мСтруктураПоискаИзменяемых.Вставить("ВалютаОперации",ТекущаяСтрока["ВалютаОперации"]);
		КонецЕсли;
		ИзменяемоеИзмерение = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
			Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
				ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
				Продолжить;
			КонецЕсли;
			мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
		КонецЦикла;
	ИначеЕсли ТабличныйВариантТолькоДляАналитики Тогда
		Если ТекущаяСтрока.ВидГруппировки = "СтатьяБюджета" Тогда
			мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока["СтатьяБюджета"]);	
			ИзменяемоеИзмерение = "СтатьяБюджета";
		Иначе
			мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",ТекущаяСтрока.ПолучитьРодителя()["СтатьяБюджета"]);	
			Если НЕ Объект.ЕдинаяВалюта Тогда
				мСтруктураПоискаИзменяемых.Вставить("ВалютаОперации",ТекущаяСтрока["ВалютаОперации"]);
			КонецЕсли;
			ИзменяемоеИзмерение = СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
			СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущаяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
			Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
				Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
					ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
					Продолжить;
				КонецЕсли;
				мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ВидГруппировки <> "" Тогда
		мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
		Если (НЕ Объект.ЕдинаяВалюта) И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.МультивалютнаяСтрока(ТекущаяСтрока) Тогда
			мСтруктураПоискаИзменяемых.Вставить("ВалютаОперации",ТекущаяСтрока["ВалютаОперации"]);
		КонецЕсли;
		ИзменяемоеИзмерение = ТекущаяСтрока.ВидГруппировки;
		Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
 			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
			мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
		КонецЦикла;
	КонецЕсли;
	СтруктураПоискаИзменяемых = Новый ФиксированнаяСтруктура(мСтруктураПоискаИзменяемых);
КонецПроцедуры //ПолучитьСтруктуруПоискаИзменяемыхСтрок

&НаКлиенте
Функция ПривестиПериодПланированияКДатеСценарияНаСервере(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,Сценарий)
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСтатейДляВыбора()
	Запрос = Новый Запрос;
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	               |	СтатьиБюджета.ФинансовыйПоказатель
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |ГДЕ
	               |	НЕ СтатьиБюджета.ЭтоГруппа
	               |	И СтатьиБюджета.Владелец = &Бюджет
	               |	И СтатьиБюджета.Версия В(&Версии)
	               |	И (СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
	               |			ИЛИ НЕ СтатьиБюджета.Ссылка В (&СписокРассчитываемых))
	               |	И НЕ СтатьиБюджета.Ссылка В (&СписокЗависимых)
	               |	И НЕ СтатьиБюджета.Ссылка В (&СписокНаследуемых)";
	Запрос.УстановитьПараметр("Бюджет",				Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("СписокРассчитываемых",СписокРассчитываемых);
	Запрос.УстановитьПараметр("СписокНаследуемых",	СписокНаследуемых);
	Запрос.УстановитьПараметр("СписокЗависимых",	СписокЗависимых);
	СписокСтатей.Очистить();
	СписокСтатей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяБюджета"));
КонецПроцедуры

// Инициирует процесс заполнения ТЧ "ЗависимыеОбороты"
//
&НаСервере
Процедура РассчитатьЗависимыеОбороты()
	Документы.фин_Бюджет.РассчитатьЗависимыеОбороты(Объект,БюджетированиеПоОрганизациям,ВестиУчетПоПроектам,РассчитыватьМоделиИЗависимостиВРежимеОтладки);
КонецПроцедуры //РассчитатьЗависимыеОбороты

&НаСервере
Процедура РассчитатьЗависимостиНаСервере()
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	РассчитатьЗависимыеОбороты();
	РасчетМоделейАктуален = Ложь;
	ПроизвестиРасчетыПоФормулам();
	
	ОбновитьПолеБюджета();
	ЗапомнитьСостояние();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОчиститьНеиспользуемыеДанные(ТекущиеДанные,Бюджет,ПоНоменклатурнымГруппам,ПолныйСписокРазрезов,Сценарий,УчетПоПлановойНоменклатуре)
	ЕстьИзменения = Ложь;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.УчетПоСумме(ТекущиеДанные.ФинансовыйПоказатель,Бюджет) Тогда
		ТекущиеДанные.Сумма 		= 0;
		ТекущиеДанные.Цена 			= 0;
		ТекущиеДанные.ВалютаОперации = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		ЕстьИзменения = Истина;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.УчетПоКоличеству(ТекущиеДанные.ФинансовыйПоказатель,Бюджет) Тогда
		ТекущиеДанные.Количество 	= 0;
		ТекущиеДанные.Цена 			= 0;
		ЕстьИзменения = Истина;
	КонецЕсли;
	СписокРазрезовПоказателя 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(ТекущиеДанные.ФинансовыйПоказатель,Бюджет);
	Для Каждого ЭлементРазрез Из ПолныйСписокРазрезов Цикл
		ИмяРазреза = ЭлементРазрез.Представление;
		Если СписокРазрезовПоказателя.Свойство(ИмяРазреза) = Неопределено Тогда
			ТекущиеДанные[ИмяРазреза] = ПустоеЗначениеРазрезаКлиентСервер(ИмяРазреза,ТекущиеДанные.ФинансовыйПоказатель,Новый Структура("ПоНоменклатурнымГруппам",ПоНоменклатурнымГруппам),Сценарий,УчетПоПлановойНоменклатуре);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПустоеЗначениеРазрезаКлиент(ИмяРазреза,ФинансовыйПоказатель)
	Возврат ?(ИмяРазреза <> "Номенклатура",СтруктураПустыхЗначений[ИмяРазреза],ПустоеЗначениеРазрезаКлиентСервер(ИмяРазреза,ФинансовыйПоказатель,Новый Структура("ПоНоменклатурнымГруппам",ПоНоменклатурнымГруппам),Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре));
	//Если ИмяРазреза = "УправленческоеПодразделение" Тогда
	//	Возврат фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеУправленческоеПодразделение();
	//ИначеЕсли ИмяРазреза = "Проект" Тогда
	//	Возврат фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеПроект();
	//ИначеЕсли ИмяРазреза = "Контрагент" Тогда
	//	Возврат ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	//ИначеЕсли ИмяРазреза = "ВалютаОперации" Тогда
	//	Возврат ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	//ИначеЕсли ИмяРазреза = "Номенклатура" Тогда
	//	Возврат фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре,ЭтотОбъект).ПривестиЗначение(Неопределено);
	//Иначе
	//	Возврат ПолеОбъекта(ЭтотОбъект["Тип"+СтрЗаменить(ИмяРазреза,"Разрез","Разреза")],"ТипЗначения").ПривестиЗначение(Неопределено);
	//КонецЕсли;
КонецФункции

&НаСервере
Функция ПустоеЗначениеРазреза(ИмяРазреза,ФинансовыйПоказатель)
//	Возврат ?(ИмяРазреза <> "Номенклатура",СтруктураПустыхЗначений.Получить(ИмяРазреза),ПустоеЗначениеРазрезаКлиентСервер(ИмяРазреза,ФинансовыйПоказатель,Новый Структура("ПоНоменклатурнымГруппам",ПоНоменклатурнымГруппам)));
	Если ИмяРазреза <> "Номенклатура" Тогда
		Возврат СтруктураПустыхЗначений[ИмяРазреза];
	Иначе
		Возврат ПустоеЗначениеРазрезаКлиентСервер(ИмяРазреза,ФинансовыйПоказатель,Новый Структура("ПоНоменклатурнымГруппам",ПоНоменклатурнымГруппам),Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустоеЗначениеРазрезаКлиентСервер(ИмяРазреза,ФинансовыйПоказатель,ПараметрыВыполнения,Сценарий,УчетПоПлановойНоменклатуре)
	Если ИмяРазреза = "Номенклатура" Тогда
		Возврат фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,Сценарий,УчетПоПлановойНоменклатуре,ПараметрыВыполнения).ПривестиЗначение(Неопределено);
	Иначе
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза(ИмяРазреза);
	КонецЕсли;
КонецФункции

&НаСервере
Функция РасчетПоМоделямНаСервере(РежимОтладки = Неопределено,ПромежуточныеРезультаты=Ложь)
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	ПромежуточныеРезультатыРасчета = ?(ПромежуточныеРезультаты=Истина ИЛИ РежимОтладки <> Неопределено,Новый Структура,Неопределено);
	
	Если РежимОтладки = Неопределено Тогда
		РассчитанныеМодели 		= Документы.фин_Бюджет.ПроизвестиРасчетПоМоделям(Объект,Версия,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФильтрСтатей,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры,ПромежуточныеРезультатыРасчета,,,,РассчитыватьМоделиИЗависимостиВРежимеОтладки);
	Иначе
		РассчитанныеМодели 		= Документы.фин_Бюджет.ПроизвестиРасчетПоМоделям(Объект,Версия,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФильтрСтатей,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры,ПромежуточныеРезультатыРасчета,РежимОтладки.Режим,РежимОтладки.Приоритет,РежимОтладки.Цикл,Истина);
	КонецЕсли;
	Если ПромежуточныеРезультаты=Истина ИЛИ РежимОтладки <> Неопределено И ПромежуточныеРезультатыРасчета<>Неопределено Тогда
		Если ПромежуточныеРезультатыРасчета.Количество()=0 Тогда
			Если КЭШ_РезультатыРасчета_Адрес<>"" Тогда
				УдалитьИзВременногоХранилища(КЭШ_РезультатыРасчета_Адрес);
			КонецЕсли;
			КЭШ_РезультатыРасчета_Адрес = "";
		Иначе
			КЭШ_РезультатыРасчета_Адрес = ПоместитьВоВременноеХранилище(ПромежуточныеРезультатыРасчета,?(КЭШ_РезультатыРасчета_Адрес="",Новый УникальныйИдентификатор,КЭШ_РезультатыРасчета_Адрес));
		КонецЕсли;
	КонецЕсли;
	РасчетМоделейАктуален 	= Истина;
	Если РассчитанныеМодели <> Неопределено И РассчитанныеМодели.Количество() >0 Тогда 
		КЭШ_РасчетыПоМоделям_Адрес = ПоместитьВоВременноеХранилище(РассчитанныеМодели,Новый УникальныйИдентификатор);
	Иначе
		Возврат ?(РассчитанныеМодели = Неопределено,0,1);
	КонецЕсли;
	ПроизвестиРасчетыПоФормулам();
	ОбновитьПолеБюджета();
	ЗапомнитьСостояние();
	Возврат 2;
КонецФункции

&НаКлиенте
Процедура РасчетПоМоделямКлиент(РежимОтладки = Неопределено,ПромежуточныеРезультаты=Ложь)
	Если НЕ ПроверитьЗаполнение() Тогда
		ПоказатьПредупреждение(,"Расчет моделей не выполнен! Проверьте данные!");
		Возврат;
	КонецЕсли;
	Результат = РасчетПоМоделямНаСервере(РежимОтладки,ПромежуточныеРезультаты);
	Если Результат = 0 Тогда
		ПоказатьПредупреждение(,"Расчет моделей не выполнен! Проверьте данные!");
	ИначеЕсли Результат = 1 Тогда
		ПоказатьПредупреждение(,"Применимых моделей не обнаружено!");
	Иначе
		ОткрытьФорму("Документ.фин_Бюджет.Форма.СписокМоделей",Новый Структура("Адрес",КЭШ_РасчетыПоМоделям_Адрес),ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	Если (ПромежуточныеРезультаты=Истина ИЛИ РежимОтладки<>Неопределено) И КЭШ_РезультатыРасчета_Адрес<>"" Тогда
		ОткрытьФорму("Документ.фин_Бюджет.Форма.ФормаПромежуточныхРезультатов",Новый Структура("Адрес",КЭШ_РезультатыРасчета_Адрес),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьФормулыБюджетаНаСервере(РежимОтладки=Ложь,ФинансовыйПоказатель=Неопределено)
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	Если РежимОтладки Тогда
		АдресДанныхОтладки = ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор);
	КонецЕсли;
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,,ЗатронутыеСтатьиБюджета,,,?(РежимОтладки,АдресДанныхОтладки,Неопределено));
	Если ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
		ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	ЗапомнитьСостояние();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВнешниеДанныеБюджетаНаСервере()
	ОбновитьДанныеВнешнейСтруктуры();
	ОбновитьКЭШЦен();
	Если ИнтерактивныйРасчетФормул И НЕ РежимМедленногоСоединения Тогда
		ПроизвестиРасчетыПоФормулам();
	КонецЕсли;
	ОбновитьПолеБюджета();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныИзИсточниковНаСервере()
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	ОбновитьКЭШЦен();
	Сценарий 			= Объект.Сценарий;
	ПериодПланирования 	= объект.ПериодПланирования;
	Для Каждого СтрокаОборотов Из Объект.ОборотыПоСтатьям Цикл
		Если (СтрокаОборотов.ФинансовыйПоказатель.СпособЦенообразования=Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
			ИЛИ (СтрокаОборотов.ФинансовыйПоказатель.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов И СтрокаОборотов.ФинансовыйПоказатель.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать) Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтрокаОборотов,Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,ПериодПланирования,СтрокаОборотов.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	Если ИнтерактивныйРасчетФормул И НЕ РежимМедленногоСоединения Тогда
		ПроизвестиРасчетыПоФормулам();
	КонецЕсли;
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
	Иначе
		ОбновитьПолеБюджета();
	КонецЕсли;
	ЗапомнитьСостояние();
КонецПроцедуры

&НаСервере
Процедура ОбновитьКЭШЦен()
	КЭШ_ЦеныНоменклатуры.Очистить();
	// доделать		Документы.фин_Бюджет.ЗаполнитьКЭШ_Цен(Объект,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура РассчитатьБюджетНаСервере()
	
	Если РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	РассчитыватьМодели = Истина;

	Если СписокРассчитываемых.Количество() > 0 Тогда
		//Если НЕ ПроверитьЗаполнение() Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет моделей не выполнен! Проверьте корректность заполнения документа!");
		//	РассчитыватьМодели 		= Ложь;
		//	РасчетМоделейАктуален 	= Истина;
		//КонецЕсли;
	КонецЕсли;
	
	Документы.фин_Бюджет.РассчитатьБюджет(Объект,ЭтотОбъект,РассчитыватьМодели,РасчетМоделейАктуален,РассчитыватьМоделиИЗависимостиВРежимеОтладки);
	
	Если РучнаяНастройкаИтоговПоГруппам ИЛИ (ЗначениеЗаполнено(РежимРасчетаИтогов) И РежимРасчетаИтогов<>ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать")) Тогда
		РассчитатьИтогиБюджета();
	КонецЕсли;
	Если РедактированиеВСКД Тогда
		НастройкаРедактированияПриИзмененииНаСервере();
	Иначе
		ОбновитьПолеБюджета();
	КонецЕсли;
	ЗапомнитьСостояние();
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	ПерезаполнитьБюджет();
	ЗапомнитьСостояние();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВопросаОчиститьБюджет(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОчиститьДанныеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыТЧ_ОборотыПоСтатьям()
	Массив = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		Массив.Добавить(Реквизит.Имя);
	КонецЦикла;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВопросЗаписиНовогоИлиМодифицированногоДокумента(Ответ,ТребуетсяОтладка) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
		Исключение
			ПоказатьПредупреждение(,"Не удалось записать документ!
			| "+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Если ТребуетсяОтладка = Неопределено Тогда
			РасчетПоМоделямКлиент();
		ИначеЕсли ТребуетсяОтладка = Истина Тогда
			РасчетПоМоделямКлиент(,Истина);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросОтменыПроведенияПередРасчетомМоделей(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения));
		Исключение
			ПоказатьПредупреждение(,"Не удалось записать документ!
			| "+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		РасчетПоМоделямКлиент();
	Иначе
		Возврат;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура СвернутьОбороты(ОбъектРасчета = Неопределено)
	мОбъект = ?(ОбъектРасчета = Неопределено,Объект,ОбъектРасчета);
	Документы.фин_Бюджет.СвернутьОбороты(мОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыборПараметровОтладки(ВыбранноеЗначение,ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение<>Неопределено Тогда
		ВыбранноеЗначение.Вставить("Режим",ДополнительныеПараметры);
		РасчетПоМоделямКлиент(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиДанныхДереваБюджета


&НаСервере
Процедура ОбновитьПолеБюджетаНаСервере()
	ПроизвестиРасчетыПоФормулам();
	ОбновитьПолеБюджета();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОтветаПоПересчетуСуммСтроки(Ответ,ДополнительныеПараметры) Экспорт
	ТекущаяСтрока = Объект.ОборотыПоСтатьям.НайтиПоИдентификатору(ДополнительныеПараметры);
	ПересчетСумм = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчетСумм=Истина;
	КонецЕсли;
	// Надо предложить пересчитать сумму.
	Если ПересчетСумм Тогда
		ОбработчикОтветаПоПересчетуСуммСтрокиНаСервере(СтараяВалютаОперации,ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработчикОтветаПоПересчетуСуммСтрокиНаСервере(СтараяВалютаОперации,Идентификатор) Экспорт
	ТекущаяСтрока = Объект.ОборотыПоСтатьям.НайтиПоИдентификатору(Идентификатор);
	ОбновитьКурсИСуммуОперации(СтараяВалютаОперации,ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияНаПересчетСуммыВДереве(Результат,ДополнительныеПараметры) Экспорт
	ТекущаяСтрока 	= ДеревоСтрокБюджета.НайтиПоИдентификатору(ДополнительныеПараметры);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчетСумм=Истина;
	Иначе
		ПересчетСумм=Ложь;
	КонецЕсли;
	УстановитьЗначениеВПодчиненныхСтроках(ТекущаяСтрока,"ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
	Если ПересчетСумм Тогда
		ОбновитьКурсИСуммуОперацииВСтрокеДереваИВПодчиненных(СтараяВалютаБюджетнойСтроки,ТекущаяСтрока);
	КонецЕсли;
	
	
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	Если НЕ РежимМедленногоСоединения Тогда

		мСтруктураПоиска = Новый Структура(СтруктураПоискаИзменяемых);
		мСтруктураПоиска.Вставить("ВалютаОперации",СтараяВалютаБюджетнойСтроки);
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			Если ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоиска).Количество() <>0 Тогда
				ТекущиеКорректировки = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоиска);			
				Если ТекущиеКорректировки.Количество() > 0  Тогда
					//Ответ = Вопрос("При изменении валюты статьи предыдущие корректировки по статье будут утеряны. Продолжить?", РежимДиалогаВопрос.ДаНет);
					//Если Ответ = КодВозвратаДиалога.Нет Тогда
					//	ТекущаяСтрока.ВалютаОперации = СтараяВалютаБюджетнойСтроки;
					//	Возврат;
					//КонецЕсли;
					Для Каждого СтрокаКорректировок Из ТекущиеКорректировки Цикл
						Объект.ОборотыПоСтатьям.Удалить(СтрокаКорректировок);
					КонецЦикла;
				КонецЕсли;
				СтрокиКСторнированию = ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоиска);			
				СтрокиКОбновлению = Новый Массив;
				Для Каждого СтрокаСторно Из СтрокиКСторнированию Цикл
					НоваяСтрокаСторно 					= Объект.ОборотыПоСтатьям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСторно,СтрокаСторно);
					НоваяСтрокаСторно.Сумма 			= - НоваяСтрокаСторно.Сумма;
					НоваяСтрокаСторно.Количество 		= - НоваяСтрокаСторно.Количество;
					ПриДобавленииВОбороты(НоваяСтрокаСторно);
					НоваяСтрокаСторно 					= Объект.ОборотыПоСтатьям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСторно,СтрокаСторно);
					НоваяСтрокаСторно.ВалютаОперации	= ТекущаяСтрока.ВалютаОперации;
					СтрокиКОбновлению.Добавить(НоваяСтрокаСторно);
					ПриДобавленииВОбороты(НоваяСтрокаСторно);
				КонецЦикла;
			Иначе
				//СтруктураПоиска 	= Новый Структура("СтатьяБюджета,ВалютаОперации",ТекущаяСтрока.СтатьяБюджета,СтараяВалютаБюджетнойСтроки);
				ОбъектПоиска 		= Объект.ОборотыПоСтатьям;
				СтрокиКОбновлению 	= ОбъектПоиска.НайтиСтроки(мСтруктураПоиска);
			КонецЕсли;
		Иначе
			//СтруктураПоиска 	= Новый Структура;
			//СтруктураПоиска.Вставить("ФинансовыйПоказатель",ТекущаяСтрока.ФинансовыйПоказатель);
			//Если НЕ Объект.ЕдинаяВалюта Тогда
			//	СтруктураПоиска.Вставить("ВалютаОперации",СтараяВалютаБюджетнойСтроки);
			//КонецЕсли;
			ОбъектПоиска 		= Объект.ОборотыПоСтатьям;
			СтрокиКОбновлению 	= ОбъектПоиска.НайтиСтроки(мСтруктураПоиска);
		КонецЕсли;
		Для Каждого СтрокаОбновить ИЗ СтрокиКОбновлению Цикл
			СтрокаОбновить.ВалютаОперации = ТекущаяСтрока.ВалютаОперации;
			Если ПересчетСумм Тогда
				ОбновитьКурсИСуммуОперации(СтараяВалютаБюджетнойСтроки,СтрокаОбновить.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			СвернутьОбороты();
		КонецЕсли;
	Иначе
		ТребуетсяПередачаДанных = Истина;
	КонецЕсли;
	РасчетИтоговВДеревеПриВыполненииИзменений(ТекущаяСтрока,Новый СписокЗначений);
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
	СтараяВалютаБюджетнойСтроки = ТекущаяСтрока.ВалютаОперации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеСтатейНаСервере(Значение)
	Для Каждого СтрокаОборот Из Объект.ОборотыПоСтатьям Цикл
		СтрокаОборот.Состояние = Значение;
	КонецЦикла;
	Для Каждого СтрокаОборот Из Объект.ЗависимыеОбороты Цикл
		СтрокаОборот.Состояние = Значение;
	КонецЦикла;
	ОбновитьПолеБюджета();
	Объект.Состояние = Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораСостояния(Значение,ДополнительныеПараметры) Экспорт
	Если Значение<>Неопределено Тогда
		УстановитьСостояниеСтатейНаСервере(Значение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВДерево(Копирование = Ложь,Подбор = Ложь)
	Модифицированность = Истина;
	Если РедактированиеВСКД Тогда
		ТекущиеДанные = Неопределено;
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Если РасшифровкаПоля.ВидПоля<>"Измерение" Тогда
				Возврат;
			КонецЕсли;
			Отбор = РасшифровкаПоля.Отбор;
			Если РасшифровкаПоля.ВидПоля = "Измерение" Тогда
				Отбор.Вставить(РасшифровкаПоля.Поле,РасшифровкаПоля.Значение);
			КонецЕсли;
			Если Отбор.Свойство("СтатьяБюджета") Тогда
				ВидСтроки = ОпределитьВидСтрокиБюджетаКлиент(Отбор.СтатьяБюджета);
				Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранная статья бюджета """+Отбор.СтатьяБюджета+""" не явлется первичной ("+НРег(ВидСтроки)+")! Редактирование не предусмотрено");
					Возврат;
				КонецЕсли;
			ИначеЕсли Копирование = Ложь И Подбор = Ложь И РасшифровкаПоля.ВидПоля="Ресурс" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определена статья бюджета!");
				Возврат;
			КонецЕсли;
			ФинансовыйПоказатель 	= ?(Отбор.Свойство("СтатьяБюджета"),ФинансовыйПоказательСтатьи(Отбор.СтатьяБюджета),Неопределено);
//			ПериодПланирования 		= ?(Отбор.Свойство("ПериодПланирования"),Отбор.ПериодПланирования,Неопределено);
		Иначе
			Возврат;
		КонецЕсли;
		ТекущиеДанные = Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель);
		Фильтр = РасшифровкаПоля.Отбор;
		ВыбираемаяГруппировка 		= РасшифровкаПоля.Поле;
		ЭтоФинансовыйПоказатель 	= ВыбираемаяГруппировка = "СтатьяБюджета" ИЛИ ВыбираемаяГруппировка = "КодСтрокиБюджета";
		ЭтоВалюта 					= ВыбираемаяГруппировка = "ВалютаОперации";
		ЭтоПериод 					= ВыбираемаяГруппировка = "ПериодПланирования";
		ЭтоПодразделениеИзИерархии 	= ВыбираемаяГруппировка = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И ВключаяПодчиненныеПодразделения;
		Если ВыбираемаяГруппировка="СтатьяБюджета" И Подбор Тогда
			ПоказатьПредупреждение(,"Добавление статей бюджета через подбор невозможно!");
			Возврат;
		КонецЕсли;
		Если ВыбираемаяГруппировка = "ВалютаОперации" Тогда
			//ВыбираемаяГруппировка = "Валюта";
		ИначеЕсли ВыбираемаяГруппировка<>"СтатьяБюджета" И Найти(ВыбираемаяГруппировка,"Разрез")=0 И ВыбираемаяГруппировка<>"Номенклатура" И ВыбираемаяГруппировка<>"Контрагент" И ВыбираемаяГруппировка<>"Проект" И ВыбираемаяГруппировка<>"УправленческоеПодразделение" И ВыбираемаяГруппировка<>"ПериодПланирования" Тогда
			Возврат;
		КонецЕсли;
		Если ЭтоФинансовыйПоказатель Тогда
			СписокСтатей = ПолучитьСписокВозможныхКДобавлениюСтатей();
		ИначеЕсли НЕ (ЭтоВалюта ИЛИ ЭтоПериод) Тогда
			Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ВыбираемаяГруппировка);
			Если СтруктураРазрезовБюджета.НайтиПоЗначению(Измерение)=Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если ФинансовыйПоказатель<>Неопределено И НЕ ИмеетсяРазрезФинансовогоПоказателя(ФинансовыйПоказатель,Измерение) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Фильтр = Неопределено;
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено  Тогда
			ПоказатьПредупреждение(,"Невозможно добавить строку указанного уровня!");
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная")
				И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") Тогда
			ПоказатьПредупреждение(,"Рассчитываемые статьи не редактируются вручную!");
			Возврат;
		КонецЕсли;
		Если Копирование И ТекущиеДанные.ВидГруппировки="" Тогда
			ПоказатьПредупреждение(,"Невозможно скопировать группу статей!");
			Возврат;
		КонецЕсли;
		Если (НЕ ТабличныйВариант) И ТекущиеДанные.ВидГруппировки="СтатьяБюджета" И Подбор Тогда
			ПоказатьПредупреждение(,"Добавление статей бюджета через подбор невозможно!");
			Возврат;
		КонецЕсли;
		Если (НЕ ТабличныйВариант) И (ТекущиеДанные.ВидГруппировки="СтатьяБюджета" ИЛИ ТекущиеДанные.ВидГруппировки="") Тогда
			СписокСтатей = ПолучитьСписокВозможныхКДобавлениюСтатей();
			Если СписокСтатей.Количество()=0 Тогда
				ПоказатьПредупреждение(,"Нет зависимых или отсутствующих статей к добавлению!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		СтрокаРодитель 	= ТекущиеДанные.ПолучитьРодителя();
		Если СтрокаРодитель 				= Неопределено Тогда
			СтрокаРодитель = ДеревоСтрокБюджета;
		КонецЕсли;
		Если ВариантРедактированияБюджета 	= ПредопределенноеЗначение("Перечисление.фин_ВариантыРедактированияБюджета.Иерархический") Тогда
			// нельзя добавить строку с подразделением или проектом, если они общие для всего документа
			Если (ТекущиеДанные.ВидГруппировки="УправленческоеПодразделение" 
					И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) ИЛИ
				(ТекущиеДанные.ВидГруппировки="Проект" И ЗначениеЗаполнено(Объект.Проект)) Тогда
					ПоказатьПредупреждение(,"Невозможно добавить строку указанного уровня!");
				Возврат;
			КонецЕсли;
			ЭтоФинансовыйПоказатель 	= ТекущиеДанные.ВидГруппировки = "СтатьяБюджета" ИЛИ ТекущиеДанные.ВидГруппировки="";
			ЭтоПодразделениеИзИерархии 	= ТекущиеДанные.ВидГруппировки = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И ВключаяПодчиненныеПодразделения;
			ВыбираемаяГруппировка 		= ТекущиеДанные.ВидГруппировки;
			ТекущийЭлементДерева 		= СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
			ЭтоВалюта 					= ТекущийЭлементДерева = "ВалютаОперации";
			ЭтоПериод 					= ТекущийЭлементДерева = "ПериодПланирования";
			Если ЭтоВалюта Тогда
				ЭтоФинансовыйПоказатель = Ложь;
				ВыбираемаяГруппировка = "ВалютаОперации";
			КонецЕсли;
		ИначеЕсли ТабличныйВариантТолькоДляАналитики Тогда
			ЭтоФинансовыйПоказатель 	= ТекущиеДанные.ВидГруппировки = "СтатьяБюджета" ИЛИ ТекущиеДанные.ВидГруппировки="";
			Если ЭтоФинансовыйПоказатель Тогда
				ЭтоПодразделениеИзИерархии 	= Ложь;
				ВыбираемаяГруппировка 		= "СтатьяБюджета";
				ЭтоВалюта					= Ложь;
			ЭтоПериод 						= Ложь;
			Иначе
				ТекущийЭлементДерева 		= СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
				ЭтоПодразделениеИзИерархии 	= ТекущийЭлементДерева = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И ВключаяПодчиненныеПодразделения;
				ЭтоВалюта 					= ТекущийЭлементДерева = "ВалютаОперации";
				ЭтоПериод 					= ТекущийЭлементДерева = "ПериодПланирования";
				ВыбираемаяГруппировка 		= ТекущийЭлементДерева;
				Если НЕ ЭтоВалюта Тогда
					Если ВыбираемаяГруппировка<>"СтатьяБюджета" И Найти(ВыбираемаяГруппировка,"Разрез")=0 И ВыбираемаяГруппировка<>"Номенклатура" И ВыбираемаяГруппировка<>"Контрагент" И ВыбираемаяГруппировка<>"Проект" И ВыбираемаяГруппировка<>"УправленческоеПодразделение" Тогда
						Возврат;
					КонецЕсли;
					Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ВыбираемаяГруппировка);
					Если СтруктураРазрезовБюджета.НайтиПоЗначению(Измерение)=Неопределено Тогда
						Возврат;
					КонецЕсли;
					Если НЕ ИмеетсяРазрезФинансовогоПоказателя(ТекущиеДанные.ФинансовыйПоказатель,Измерение) Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТабличныйВариант Тогда
			ТекущийЭлементДерева 		= СтрЗаменить(Элементы.ДеревоСтрокБюджета.ТекущийЭлемент.Имя,"ДеревоСтрокБюджета","");
			ЭтоФинансовыйПоказатель 	= ТекущийЭлементДерева = "СтатьяБюджета" ИЛИ ТекущийЭлементДерева = "КодСтрокиБюджета";
			ЭтоВалюта 					= ТекущийЭлементДерева = "ВалютаОперации";
			ЭтоПериод 					= ТекущийЭлементДерева = "ПериодПланирования";
			ЭтоПодразделениеИзИерархии 	= ТекущийЭлементДерева = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И ВключаяПодчиненныеПодразделения;
			ВыбираемаяГруппировка 		= ТекущийЭлементДерева;
			Если ВыбираемаяГруппировка="СтатьяБюджета" И Подбор Тогда
				ПоказатьПредупреждение(,"Добавление статей бюджета через подбор невозможно!");
				Возврат;
			КонецЕсли;
			Если ВыбираемаяГруппировка = "ВалютаОперации" Тогда
				//ВыбираемаяГруппировка = "Валюта";
			ИначеЕсли ВыбираемаяГруппировка<>"СтатьяБюджета" И Найти(ВыбираемаяГруппировка,"Разрез")=0 И ВыбираемаяГруппировка<>"Номенклатура" И ВыбираемаяГруппировка<>"Контрагент" И ВыбираемаяГруппировка<>"Проект" И ВыбираемаяГруппировка<>"УправленческоеПодразделение" Тогда
				Возврат;
			КонецЕсли;
			Если ЭтоФинансовыйПоказатель Тогда
		        СписокСтатей = ПолучитьСписокВозможныхКДобавлениюСтатей();
			ИначеЕсли НЕ ЭтоВалюта Тогда
				Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ВыбираемаяГруппировка);
				Если СтруктураРазрезовБюджета.НайтиПоЗначению(Измерение)=Неопределено Тогда
					Возврат;
				КонецЕсли;
				Если НЕ ИмеетсяРазрезФинансовогоПоказателя(ТекущиеДанные.ФинансовыйПоказатель,Измерение) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ДополнительныеПараметрыПодбора 		= Новый Структура("ТекущиеДанные,Копирование,ВыбираемаяГруппировка,Подбор,Фильтр",ТекущиеДанные,Копирование,ВыбираемаяГруппировка,Подбор,Фильтр);
	ОповещениеВыбораЗначенияДобавления 	= Новый ОписаниеОповещения("ОбработчикОповещенияВыбораЗначенияАналитикиДляДобавления",ЭтотОбъект,ДополнительныеПараметрыПодбора);
	ЭтоРежимПодбора						= Подбор;
	Если ЭтоФинансовыйПоказатель Тогда
		ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",Новый Структура("Отбор,ВСпискеПоИерархии",Новый Структура("Владелец",Объект.ФормируемыйБюджет),СписокСтатей),ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОповещениеВыбораЗначенияДобавления,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ЭтоПодразделениеИзИерархии Тогда
		СтруктураПараметров = Новый Структура("НастройкиОтбораВБюджет",Новый Структура("ВидСравнения,Список",ВидСравненияКомпоновкиДанных.ВИерархии,Объект.УправленческоеПодразделение));
		Если Подбор Тогда
			СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",Ложь);
		КонецЕсли;
		ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ФормаВыбора",СтруктураПараметров,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,ОповещениеВыбораЗначенияДобавления,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ЭтоПериод Тогда
		ПоказатьВыборИзСписка(ОповещениеВыбораЗначенияДобавления,СписокПериодовДляВыбора,Элементы.ДеревоСтрокБюджета.ТекущийЭлемент);
	ИначеЕсли НЕ Подбор Тогда
		общ_ОбщегоНазначенияКлиент.мПоказатьВводЗначения(ЭтотОбъект,ОповещениеВыбораЗначенияДобавления,Неопределено,"Введите значение аналитического измерения строки",ТипЗначенияДляВвода(ВыбираемаяГруппировка,ТекущиеДанные.ФинансовыйПоказатель));
	Иначе
		Если ВыбираемаяГруппировка = "ВалютаОперации" Тогда
			СписокТипов = Новый СписокЗначений;
			СписокТипов.Добавить("Справочник.Валюты","Валюты");
		Иначе
			СписокТипов = ПолучитьСписокТиповДляВыбораСправочника(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ВыбираемаяГруппировка),Объект.Сценарий,ТекущиеДанные.ФинансовыйПоказатель);
		КонецЕсли;
		Если СписокТипов.Количество()=1 Тогда
			ВыбранныйЭлемент = СписокТипов[0];
			ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,ИмяТаблицы",Ложь,ВыбранныйЭлемент.Значение);
			ИмяФормыДляОткрытия = ИмяФормыВыбора(ВыбранныйЭлемент.Значение);
			ОткрытьФорму(ИмяФормыДляОткрытия,ПараметрыФормы,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		Иначе
			ОписаниеОповещенияВыбораСправочника = Новый ОписаниеОповещения("ОбработчикВыбораСправочника",ЭтотОбъект);
			ПоказатьВыборИзСписка(ОписаниеОповещенияВыбораСправочника,СписокТипов,Элементы.ДеревоСтрокБюджета.ТекущийЭлемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыВыбора(ИмяТипа)
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяФормыВыбораСправочника(ИмяТипа);
КонецФункции

&НаКлиенте
Процедура ОбработчикВыбораСправочника(ВыбранноеЗначение,ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение<>Неопределено Тогда
		ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе,ИмяТаблицы",Ложь,ВыбранноеЗначение.Значение);
		ИмяФормыДляОткрытия = ИмяФормыВыбора(ВыбранноеЗначение.Значение);
		ОткрытьФорму(ИмяФормыДляОткрытия,ПараметрыФормы,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокТиповДляВыбораСправочника(Измерение,Сценарий,ФинансовыйПоказатель)
	СписокТипов = Новый СписокЗначений;
	РазрезАналитики 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Измерение);
	Для Каждого ТипЗначения Из РазрезАналитики.ТипЗначения.Типы() Цикл
		ИмяТаблицы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьТаблицуПоТипу(ТипЗначения);
		Если РазрезАналитики = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура Тогда
			Если ИмяТаблицы = "Справочник.НоменклатурныеГруппы" Тогда
				Если Сценарий.ДетализацияПланирования<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
				Продолжить;
			ИначеЕсли ИмяТаблицы = "Справочник.Номенклатура" Тогда
				Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре") И ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИмяТаблицы = "Справочник.фин_ПлановаяНоменклатура" Тогда
				Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре")) ИЛИ ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СписокТипов.Добавить(ИмяТаблицы,Строка(ТипЗначения));
	КонецЦикла;
	Возврат СписокТипов;
КонецФункции

&НаКлиенте
Функция ТипЗначенияДляВвода(ВидГруппировки,ФинансовыйПоказатель=Неопределено)
	Если ВидГруппировки = "УправленческоеПодразделение"	Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповУправленческоеПодразделение();	
	ИначеЕсли ВидГруппировки = "Проект" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов());	
	ИначеЕсли ВидГруппировки = "Контрагент" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Контрагенты");	
	ИначеЕсли ВидГруппировки = "ВалютаОперации" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Валюты");	
	ИначеЕсли ВидГруппировки = "Номенклатура" Тогда
		Если ПолеОбъекта(Объект.Сценарий,"ДетализацияПланирования") = фин_ОбщегоНазначенияКлиентПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
		ИначеЕсли НЕ ВестиУчетПоПлановойНоменклатуре Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		Иначе
			НоменклатурныйПеречень = ПолеОбъекта(ФинансовыйПоказатель,"ИспользуемыйНоменклатурныйПеречень");
			Если НоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура") Тогда
				Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ПлановаяНоменклатура");
			ИначеЕсли НоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
				Возврат Новый ОписаниеТипов(МассивТипов);
			Иначе
				Возврат Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ВидГруппировки,"Разрез")<>0 Тогда
		Возврат ПолеОбъекта(ЭтотОбъект["Тип"+СтрЗаменить(ВидГруппировки,"Разрез","Разреза")],"ТипЗначения");	
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВыбораЗначенияАналитикиДляДобавления(Знач ВыбранноеЗначение,ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение<>Неопределено Тогда
		Если ТипЗнч(ВыбранноеЗначение)=Тип("ЭлементСпискаЗначений") Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.Значение;
		КонецЕсли;
		ТекущиеДанные 	= ДополнительныеПараметры.ТекущиеДанные;
		ЭтоКопирование	= ДополнительныеПараметры.Копирование;
		Подбор			= ДополнительныеПараметры.Подбор;
		ВыбираемаяГруппировка = ДополнительныеПараметры.ВыбираемаяГруппировка;
		Если РедактированиеВСКД Тогда
			Фильтр = ДополнительныеПараметры.Фильтр;
			Если ЭтоКопирование Тогда
				ИмеющиесяСтроки = Объект.ОборотыПоСтатьям.НайтиСтроки(Фильтр);
				Для Каждого ИмеющаясяСтрока Из ИмеющиесяСтроки Цикл
					НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ИмеющаясяСтрока);
					НоваяСтрока[ВыбираемаяГруппировка] = ВыбранноеЗначение;
				КонецЦикла;
			Иначе
				НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Фильтр);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Состояние) Тогда
					НоваяСтрока.Состояние = Объект.Состояние;
				КонецЕсли;
				НоваяСтрока[ВыбираемаяГруппировка] = ВыбранноеЗначение;
				Если ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджета) Тогда
					НоваяСтрока.ФинансовыйПоказатель = ФинансовыйПоказательСтатьи(НоваяСтрока.СтатьяБюджета);
				КонецЕсли;
				ПриДобавленииВОбороты(НоваяСтрока);
				Если ВыбираемаяГруппировка<>"ПериодПланирования" И НЕ Фильтр.Свойство("ПериодПланирования") Тогда
					НоваяСтрока.ПериодПланирования = Объект.ПериодПланирования;
				КонецЕсли;
				Если ВыбираемаяГруппировка<>"Проект" И (НЕ Фильтр.Свойство("Проект")) И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
					НоваяСтрока.Проект = Объект.Проект;
				КонецЕсли;
				Если ВыбираемаяГруппировка<>"УправленческоеПодразделение" И (НЕ Фильтр.Свойство("УправленческоеПодразделение")) И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения")  Тогда
					НоваяСтрока.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
				КонецЕсли;
				Если ВыбираемаяГруппировка<>"ВалютаОперации" И НЕ Фильтр.Свойство("ВалютаОперации") Тогда
					НоваяСтрока.ВалютаОперации = Объект.ВалютаДокумента;
				КонецЕсли;
				СтрокиКОбработке = Новый Массив;
				СтрокиКОбработке.Добавить(НоваяСтрока);
				Если ВыбираемаяГруппировка<>"ПериодПланирования" И НЕ Фильтр.Свойство("ПериодПланирования") Тогда
					НоваяСтрока.ПериодПланирования = СписокПериодовДляВыбора[0].Значение;
					Для Инд = 2 По СписокПериодовДляВыбора.Количество() Цикл
						СтрокаПериод = Объект.ОборотыПоСтатьям.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПериод,НоваяСтрока);
						СтрокаПериод.ПериодПланирования = СписокПериодовДляВыбора[Инд-1].Значение;
						СтрокиКОбработке.Добавить(СтрокаПериод);
					КонецЦикла;
				КонецЕсли;
				Если ВыбираемаяГруппировка<>"СтатьяБюджета" И НЕ Фильтр.Свойство("СтатьяБюджета") Тогда
					ИмеющиесяСтатьи = ИмеющиесяСтатьиПоФильтру(Фильтр);
					ПерваяСтатья = Истина;
					Для Каждого ИмеющаясяСтатья Из ИмеющиесяСтатьи Цикл
						Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
							Если ПерваяСтатья Тогда
								СтрокаКОбработке.СтатьяБюджета 			= ИмеющаясяСтатья;
								СтрокаКОбработке.ФинансовыйПоказатель 	= ФинансовыйПоказательСтатьи(ИмеющаясяСтатья);
							Иначе
								СтрокаАналитика = Объект.ОборотыПоСтатьям.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаАналитика,СтрокаКОбработке);
								СтрокаАналитика.СтатьяБюджета 			= ИмеющаясяСтатья;
								СтрокаАналитика.ФинансовыйПоказатель 	= ФинансовыйПоказательСтатьи(ИмеющаясяСтатья);
							КонецЕсли;
						КонецЦикла;
						ПерваяСтатья = Ложь;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ВыбораЗначенияАналитикиДляДобавленияВСКДНаСервере();
		Иначе
			Табличный = ТабличныйВариант;
			СменаВалют = Ложь;
			Если Табличный Тогда
				СтрокаРодитель 	= ДеревоСтрокБюджета;
				ПолучитьСтруктуруПоискаИзменяемыхСтрок();
			Иначе
				СтрокаРодитель 	= ТекущиеДанные.ПолучитьРодителя();
			КонецЕсли;
			Если (НЕ Табличный) И ВыбираемаяГруппировка = "ВалютаОперации" И ТекущиеДанные.ПолучитьЭлементы().Количество()=0 И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.МультивалютнаяСтрока(ТекущиеДанные) И ВыбранноеЗначение<>ТекущиеДанные.ВалютаОперации Тогда
				// разрешаем добавление
			ИначеЕсли УжеИмеетсяСтрокаСТакимЗначениемРазреза(СтрокаРодитель,ВыбираемаяГруппировка,ВыбранноеЗначение)>0 Тогда
				ПоказатьПредупреждение(,"В "+?(Табличный,"бюджете","указанной группе")+" уже имеются строки с указанным значением аналитики!");
				Возврат;	
			КонецЕсли;
			Если СтрокаРодитель = Неопределено Тогда
				СтрокаРодитель = ДеревоСтрокБюджета;
			КонецЕсли;
			Если Табличный ИЛИ ТабличныйВариантТолькоДляАналитики Тогда
				НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Вставить(СтрокаРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные)+1);
			Иначе
				Если ВыбираемаяГруппировка = "ВалютаОперации" И ТекущиеДанные.ПолучитьЭлементы().Количество()=0 И НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.МультивалютнаяСтрока(ТекущиеДанные) И ТекущиеДанные.ПолучитьЭлементы().Количество()=0 Тогда
					ЗаменяющаяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЗаменяющаяСтрока,ТекущиеДанные);
					ЗаменяющаяСтрока.ВидГруппировки = "ВалютаОперации";
					ЗаменяющаяСтрока.СтатьяБюджета = ПредопределенноеЗначение("Справочник.фин_СтатьиБюджета.ПустаяСсылка");
					Если ТекущиеДанные.ВидГруппировки<>"СтатьяБюджета" Тогда
						ЗаменяющаяСтрока[ТекущиеДанные.ВидГруппировки] = ПустоеЗначениеРазреза(ТекущиеДанные.ВидГруппировки,ТекущиеДанные.ФинансовыйПоказатель);
					КонецЕсли;
					СтрокаРодитель = ТекущиеДанные;
					СтрокаРодитель.ВалютаОперации = ВалютаСводаБаланса;
					СменаВалют = Истина;
					СтрокаРодитель.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая");
					ТекущиеДанные = ЗаменяющаяСтрока;
				КонецЕсли;
				НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущиеДанные);
			//очистим суммы
			Если НЕ ЭтоКопирование Тогда
				Для Каждого Колонка Из СписокЧисловыхПолей Цикл
					НоваяСтрока[Колонка.Значение]=0;	
				КонецЦикла;
				Если НоваяСтрока.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") Тогда
					НоваяСтрока.ВидСтроки =  ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
				КонецЕсли;
			КонецЕсли;
			//введем значение измерения аналитики
			Если НоваяСтрока.ВидГруппировки = "" Тогда
				НоваяСтрока.ВидГруппировки = "СтатьяБюджета";
			КонецЕсли;
			Если ВыбираемаяГруппировка = "СтатьяБюджета" Тогда
				НоваяСтрока.СтатьяБюджета 			= ВыбранноеЗначение;
				ПоказательСтатьи 					= ФинансовыйПоказательСтатьи(ВыбранноеЗначение);
				НоваяСтрока.ФинансовыйПоказатель 	= ПоказательСтатьи;
				НоваяСтрока.КодСтрокиБюджета 		= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтрокиБюджета(НоваяСтрока.СтатьяБюджета,ЭтотОбъект);
				НоваяСтрока.Код 					= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтатьи(НоваяСтрока.СтатьяБюджета,ЭтотОбъект);
				НоваяСтрока.Наименование 			= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.НаименованиеСтатьи(НоваяСтрока.СтатьяБюджета,ЭтотОбъект);
			Иначе
				НоваяСтрока[ВыбираемаяГруппировка] = ВыбранноеЗначение;
			КонецЕсли;
			Элементы.ДеревоСтрокБюджета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить(ВыбираемаяГруппировка,НоваяСтрока[ВыбираемаяГруппировка]);
			ДопПараметры	= Новый Структура;
			Если ЗначениеЗаполнено(НоваяСтрока.ВалютаОперации) И НЕ ВыбираемаяГруппировка = "ВалютаОперации" Тогда
				ДопПараметры.Вставить("ВалютаОперации",НоваяСтрока.ВалютаОперации);
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.Цена) Тогда
				ДопПараметры.Вставить("Цена",НоваяСтрока.Цена);
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.Состояние) Тогда
				ДопПараметры.Вставить("Состояние",НоваяСтрока.Состояние);
			КонецЕсли;
			Если Табличный Тогда
				ТекущаяСтрока = НоваяСтрока;
				СтруктураПоиска.Вставить("СтатьяБюджета",ТекущаяСтрока["СтатьяБюджета"]);
				Если НЕ Объект.ЕдинаяВалюта Тогда
					СтруктураПоиска.Вставить("ВалютаОперации",ТекущаяСтрока["ВалютаОперации"]);
				КонецЕсли;
				СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(НоваяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
				Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
					Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
						ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураПоиска.Вставить(Разрез.Ключ,ТекущаяСтрока[Разрез.Ключ]);	
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаОперации) И НЕ ВыбираемаяГруппировка = "ВалютаОперации" Тогда
					ДопПараметры.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Цена) И НЕ ДопПараметры.Свойство("Цена") Тогда
					ДопПараметры.Вставить("Цена",ТекущаяСтрока.Цена);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Состояние) Тогда
					ДопПараметры.Вставить("Состояние",ТекущаяСтрока.Состояние);
				КонецЕсли;
			Иначе
				ТекущаяСтрока = НоваяСтрока;
				Если ВыбираемаяГруппировка = "ВалютаОперации" И НЕ ТабличныйВариантТолькоДляАналитики Тогда
					СтруктураПоиска.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
				КонецЕсли;
				Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" И ТекущаяСтрока<>Неопределено Цикл
					ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
					Если НЕ ТабличныйВариантТолькоДляАналитики Тогда
						СтруктураПоиска.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаОперации) И НЕ ВыбираемаяГруппировка = "ВалютаОперации" Тогда
						ДопПараметры.Вставить("ВалютаОперации",ТекущаяСтрока.ВалютаОперации);
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекущаяСтрока.Цена) И НЕ ДопПараметры.Свойство("Цена") Тогда
						ДопПараметры.Вставить("Цена",ТекущаяСтрока.Цена);
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекущаяСтрока.Состояние) Тогда
						ДопПараметры.Вставить("Состояние",ТекущаяСтрока.Состояние);
					КонецЕсли;
				КонецЦикла;
				Если ТабличныйВариантТолькоДляАналитики Тогда
					Если НЕ Объект.ЕдинаяВалюта Тогда
						СтруктураПоиска.Вставить("ВалютаОперации",ТекущиеДанные["ВалютаОперации"]);
					КонецЕсли;
					Если ВыбираемаяГруппировка = "СтатьяБюджета" Тогда
						СтруктураПоиска.Вставить("СтатьяБюджета",НоваяСтрока["СтатьяБюджета"]);	
					Иначе
						СтруктураПоиска.Вставить("СтатьяБюджета",НоваяСтрока.ПолучитьРодителя()["СтатьяБюджета"]);	
						СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(НоваяСтрока.ФинансовыйПоказатель,ЭтотОбъект);
						Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
							Если (Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта"))
								ИЛИ (Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения) Тогда
								Продолжить;
							КонецЕсли;
							СтруктураПоиска.Вставить(Разрез.Ключ,НоваяСтрока[Разрез.Ключ]);	
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоКопирование = Ложь Тогда
				Если НЕ РежимМедленногоСоединения Тогда
					Если ПродолжительностьЦикла >1 Тогда
						Для Каждого НП Из ОбратноеСоответствиеПериодов Цикл
							СтрокаОборотов = Объект.ОборотыПоСтатьям.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаОборотов,СтруктураПоиска);
							ЗаполнитьЗначенияСвойств(СтрокаОборотов,ДопПараметры);
							СтрокаОборотов.ПериодПланирования 	= НП.Значение;
							СтрокаОборотов.ФинансовыйПоказатель = ФинансовыйПоказательСтатьи(СтрокаОборотов.СтатьяБюджета);
							ПриДобавленииВОбороты(СтрокаОборотов);
						КонецЦикла;
					Иначе
						СтрокаОборотов = Объект.ОборотыПоСтатьям.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОборотов,СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаОборотов,ДопПараметры);
						СтрокаОборотов.ПериодПланирования 	= Объект.ПериодПланирования;
						СтрокаОборотов.ФинансовыйПоказатель = ФинансовыйПоказательСтатьи(СтрокаОборотов.СтатьяБюджета);
						ПриДобавленииВОбороты(СтрокаОборотов);
					КонецЕсли;
				Иначе
					ТребуетсяПередачаДанных = Истина;
				КонецЕсли;
				Если СменаВалют Тогда
					Если ТабличныйВариант Тогда
						РасчетИтоговВДеревеПриВыполненииИзменений(НоваяСтрока,,,Истина);
					Иначе
						РасчетИтоговВДеревеПриВыполненииИзменений(НоваяСтрока.ПолучитьРодителя(),,,Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Вставить(ВыбираемаяГруппировка,ТекущиеДанные[ВыбираемаяГруппировка]);
				Если НЕ РежимМедленногоСоединения Тогда
					КопируемыеОбороты = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
					Если КопируемыеОбороты.Количество()>0 Тогда
						Для Каждого СтрокаКопируемая Из КопируемыеОбороты Цикл
							НоваяСтрокаОборотов = Объект.ОборотыПоСтатьям.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОборотов,СтрокаКопируемая);
							Если ВыбираемаяГруппировка = "СтатьяБюджета" Тогда
								НоваяСтрокаОборотов.СтатьяБюджета 			= ВыбранноеЗначение;
								НоваяСтрокаОборотов.ФинансовыйПоказатель 	= ПоказательСтатьи;
							Иначе
								НоваяСтрокаОборотов[ВыбираемаяГруппировка] = ВыбранноеЗначение;
							КонецЕсли;
						КонецЦикла;
						ПеренестиПодчиненныеЭлементыДерева(ТекущиеДанные,НоваяСтрока);
					КонецЕсли;
				Иначе
					ТребуетсяПередачаДанных = Истина;
				КонецЕсли;
				// итоги в дереве
				ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
				//ЗатронутыеСтатьиБюджета.Добавить(НоваяСтрокаОборотов.СтатьяБюджета);
				Если ТабличныйВариант Тогда
					РасчетИтоговВДеревеПриВыполненииИзменений(НоваяСтрока,ЗатронутыеСтатьиБюджета,,Истина);
				Иначе
					РасчетИтоговВДеревеПриВыполненииИзменений(НоваяСтрока.ПолучитьРодителя(),ЗатронутыеСтатьиБюджета,,Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыбираемаяГруппировка = "СтатьяБюджета" Тогда
			Если НЕ Табличный Тогда
				ОбновитьПолеБюджета();
			КонецЕсли;
		ИначеЕсли СтруктураПоказателей.Цена = Истина Тогда
			ПолучитьСтруктуруПоискаИзменяемыхСтрок();
			Если НЕ РежимМедленногоСоединения Тогда
				Если НЕ ЭтоКопирование Тогда
					ЦенообразующееИзмерение	= ИмеетсяРазрезРасчетаЦеныСтатьи(Объект.ФормируемыйБюджет,СтруктураПоискаИзменяемых.СтатьяБюджета,ВыбираемаяГруппировка);
					ИзменятьЦену 			= ((ВыбираемаяГруппировка = "Номенклатура" И ТипЗнч(ТекущиеДанные[ВыбираемаяГруппировка])<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка()) ИЛИ (ВыбираемаяГруппировка <> "Номенклатура" И ЦенообразующееИзмерение));
					Если ИзменятьЦену Тогда
						ОбновитьЦеныПриИзмененииРазрезаВДереве(,НоваяСтрока);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТребуетсяПередачаДанных = Истина;
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
		РасчетМоделейАктуален = Ложь;
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыбораЗначенияАналитикиДляДобавленияВСКДНаСервере()
	Документы.фин_Бюджет.СвернутьОбороты(Объект);
	НастройкаРедактированияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ИмеющиесяСтатьиПоФильтру(Фильтр)
	Строки = Объект.ОборотыПоСтатьям.Выгрузить(Фильтр);
	Строки.Свернуть("СтатьяБюджета");
	Возврат Строки.ВыгрузитьКолонку("СтатьяБюджета");
КонецФункции

&НаКлиенте
Процедура ПеренестиПодчиненныеЭлементыДерева(СтрокаОбразец,СтрокаЗаполняемая)
	ЭлементыКПополнению = СтрокаЗаполняемая.ПолучитьЭлементы();
	Для Каждого ЭлементДанных Из СтрокаОбразец.ПолучитьЭлементы() Цикл
		НоваяСтрока = ЭлементыКПополнению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементДанных);
		ПеренестиПодчиненныеЭлементыДерева(ЭлементДанных,НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УжеИмеетсяСтрокаСТакимЗначениемРазреза(СтрокаРодитель,ВидГруппировки,Значение)
	Если СтрокаРодитель = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	СтрокиРодителя 	= СтрокаРодитель.ПолучитьЭлементы();
	Количество 		= 0;
	Для Каждого СтрокаПодчиненная Из СтрокиРодителя Цикл
		Если СтрокаПодчиненная[ВидГруппировки]=Значение Тогда
			Если ТабличныйВариант ИЛИ (ТабличныйВариантТолькоДляАналитики И ВидГруппировки<>"СтатьяБюджета") Тогда 
				Подходит = Истина;
				Для Каждого ЭлементСтруктуры Из СтруктураПоискаИзменяемых Цикл
					Если ТабличныйВариантТолькоДляАналитики И ЭлементСтруктуры.Ключ="СтатьяБюджета" Тогда
						Продолжить;
					КонецЕсли;
					Если ЭлементСтруктуры.Ключ <> ВидГруппировки Тогда
						Если СтрокаПодчиненная[ЭлементСтруктуры.Ключ]<>ЭлементСтруктуры.Значение Тогда
							Подходит = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если НЕ Подходит Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ВидГруппировки = "ВалютаОперации" Тогда
				
			ИначеЕсли (НЕ (ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики)) И НЕ Объект.ЕдинаяВалюта Тогда
				Если СтрокаПодчиненная.ВалютаОперации <> СтруктураПоискаИзменяемых.ВалютаОперации Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Количество;
КонецФункции

&НаСервере
Функция ПолучитьСписокВозможныхКДобавлениюСтатей()
	СписокСтатейИспользованных = Новый СписокЗначений;
	СписокСтатейИспользованных.ЗагрузитьЗначения(Объект.ОборотыПоСтатьям.Выгрузить().ВыгрузитьКолонку("ФинансовыйПоказатель"));
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		ВторойСписокСтатейИспользованных = Новый СписокЗначений;
		ВторойСписокСтатейИспользованных.ЗагрузитьЗначения(ОборотыПриКорректировке.Выгрузить().ВыгрузитьКолонку("ФинансовыйПоказатель"));
		Для Каждого Элемент Из ВторойСписокСтатейИспользованных Цикл
			СписокСтатейИспользованных.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос = Новый Запрос;
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Если ТабличныйВариант Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета
		               |ИЗ
		               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		               |ГДЕ
		               |	НЕ СтатьиБюджета.ЭтоГруппа
		               |	И НЕ СтатьиБюджета.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
		               |	И ВЫБОР
		               |			КОГДА &Фильтровать
		               |				ТОГДА СтатьиБюджета.Ссылка В (&Фильтр)
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |	И СтатьиБюджета.Владелец = &Бюджет
		               |	И СтатьиБюджета.Версия В(&Версии)
		               |	И (СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
		               |			ИЛИ НЕ СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый)
		               |				И НЕ СтатьиБюджета.Ссылка В (&СписокРассчитываемых))
		               |	И НЕ СтатьиБюджета.Ссылка В (&СписокЗависимых)
		               |	И НЕ СтатьиБюджета.Ссылка В (&СписокНаследуемых)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета
		               |ИЗ
		               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		               |ГДЕ
		               |	НЕ СтатьиБюджета.ЭтоГруппа
		               |	И НЕ СтатьиБюджета.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
		               |	И ВЫБОР
		               |			КОГДА &Фильтровать
		               |				ТОГДА СтатьиБюджета.Ссылка В (&Фильтр)
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |	И НЕ СтатьиБюджета.ФинансовыйПоказатель В (&СписокИспользованных)
		               |	И СтатьиБюджета.Владелец = &Бюджет
		               |	И СтатьиБюджета.Версия В(&Версии)
		               |	И (СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
		               |			ИЛИ (СтатьиБюджета.Ссылка В (&СписокЗависимых)
		               |				ИЛИ СтатьиБюджета.Ссылка В (&СписокРассчитываемых)
		               |				ИЛИ НЕ СтатьиБюджета.Ссылка В (&СписокЗависимых)
		               |					И НЕ СтатьиБюджета.Ссылка В (&СписокИспользованных)))
		               |	И НЕ СтатьиБюджета.Ссылка В (&СписокНаследуемых)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("СписокИспользованных",	СписокСтатейИспользованных);
	Запрос.УстановитьПараметр("СписокНаследуемых",		СписокНаследуемых);
	Запрос.УстановитьПараметр("СписокЗависимых",		СписокЗависимых);
	Запрос.УстановитьПараметр("Бюджет",					Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",					Объект.Проект);
	Запрос.УстановитьПараметр("Дата",					Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("СписокРассчитываемых",	СписокРассчитываемых);
	Запрос.УстановитьПараметр("Сценарий",				Объект.Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",Объект.УправленческоеПодразделение);
	РезультатЗапроса = Запрос.Выполнить();
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтатьяБюджета"));
	Возврат СписокСтатей;
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементыДерева(СтрокаДереваИдентификатор,Уровень=Неопределено)
	//ОбновитьПолеБюджета();
	
	СтрокаДерева 			= ДеревоСтрокБюджета.НайтиПоИдентификатору(СтрокаДереваИдентификатор);
	ОбрабатываемыеРазрезы	= Новый СписокЗначений;
	
	Если ТабличныйВариант Тогда
		мСтруктураПоискаИзменяемых = Новый Структура;
		мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",СтрокаДерева["СтатьяБюджета"]);	
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(СтрокаДерева.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
			Если Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				Продолжить;
			КонецЕсли;
			Если Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
				Продолжить;
			КонецЕсли;
			мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,СтрокаДерева[Разрез.Ключ]);	
		КонецЦикла;
	ИначеЕсли ТабличныйВариантТолькоДляАналитики Тогда
		мСтруктураПоискаИзменяемых = Новый Структура;
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(СтрокаДерева.ФинансовыйПоказатель,ЭтотОбъект);
		Если СтрокаДерева.ВидГруппировки ="СтатьяБюджета" Тогда
			мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",СтрокаДерева["СтатьяБюджета"]);	
		Иначе
			мСтруктураПоискаИзменяемых.Вставить("СтатьяБюджета",СтрокаДерева.ПолучитьРодителя()["СтатьяБюджета"]);	
			Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
				Если Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
					Продолжить;
				КонецЕсли;
				Если Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
					Продолжить;
				КонецЕсли;
				мСтруктураПоискаИзменяемых.Вставить(Разрез.Ключ,СтрокаДерева[Разрез.Ключ]);	
			КонецЦикла;
		КонецЕсли;
		Для Каждого Разрез Из СтруктураРазрезовПоказателя Цикл
			Если Разрез.Ключ = "Проект" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
				Продолжить;
			КонецЕсли;
			Если Разрез.Ключ = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
				Продолжить;
			КонецЕсли;
			ИмяРазреза = Разрез.Ключ;
			ОбрабатываемыеРазрезы.Добавить(ИмяРазреза);
		КонецЦикла;
	Иначе
		мСтруктураПоискаИзменяемых = Новый Структура;
		ТекущаяСтрока 	= СтрокаДерева;
		мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
		ИзменяемоеИзмерение = ТекущаяСтрока.ВидГруппировки;
		Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
			мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
		КонецЦикла;
		МожноДобавлять 			= Ложь;
		СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(СтрокаДерева.ФинансовыйПоказатель,ЭтотОбъект);
		Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
			ИмяРазреза = Разрез.Представление;
			Если (МожноДобавлять ИЛИ Уровень = "СтатьяБюджета" ИЛИ Уровень = Неопределено) И СтруктураРазрезовПоказателя.Свойство(ИмяРазреза) Тогда
				ОбрабатываемыеРазрезы.Добавить(ИмяРазреза);
			КонецЕсли;
			Если ИмяРазреза = Уровень Тогда
				МожноДобавлять = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	ДочерниеСтроки 			= Объект.ОборотыПоСтатьям.Выгрузить(мСтруктураПоискаИзменяемых);
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		ДочерниеСтрокиКорректировка	= ОборотыПриКорректировке.Выгрузить(мСтруктураПоискаИзменяемых);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ДочерниеСтрокиКорректировка,ДочерниеСтроки);
	КонецЕсли;
	
	СтрокиРазворота = Новый Массив;
	Если ТабличныйВариантТолькоДляАналитики Тогда
		ОбработатьДанныеВсехРазрезов(ДочерниеСтроки,ОбрабатываемыеРазрезы,СтрокаДерева);
	ИначеЕсли ОбрабатываемыеРазрезы.Количество()>0 Тогда
		ОбработатьДанныеРазреза(ДочерниеСтроки,ОбрабатываемыеРазрезы[0].Значение,ОбрабатываемыеРазрезы,СтрокаДерева,Новый Структура(СтруктураПоискаИзменяемых));
	ИначеЕсли ДочерниеСтроки.Количество()>0 Тогда
		Если СтруктураПоказателей.Сумма Тогда
			СтрокаДерева.ИтогоСумма = 0;
			Если ПродолжительностьЦикла > 1 Тогда
				Для Инд = 1 По ПродолжительностьЦикла Цикл
					СтрокаДерева["ИтогоСумма"+Строка(Инд)] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураПоказателей.Количество Тогда
			СтрокаДерева.ИтогоКоличество = 0;
			Если ПродолжительностьЦикла > 1 Тогда
				Для Инд = 1 По ПродолжительностьЦикла Цикл
					СтрокаДерева["ИтогоКоличество"+Строка(Инд)] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Для Каждого ДочерняяСтрока Из ДочерниеСтроки Цикл
			НомерПериода = СоответствиеПериодов.Получить(ДочерняяСтрока.ПериодПланирования);
			Если СтруктураПоказателей.Сумма Тогда
				СтрокаДерева.ИтогоСумма = СтрокаДерева.ИтогоСумма + ДочерняяСтрока.Сумма;
				Если ПродолжительностьЦикла > 1 Тогда
					СтрокаДерева["ИтогоСумма"+Строка(НомерПериода)] = СтрокаДерева["ИтогоСумма"+Строка(НомерПериода)] + ДочерняяСтрока.Сумма;
				КонецЕсли;
			КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				СтрокаДерева.ИтогоКоличество = СтрокаДерева.ИтогоКоличество + ДочерняяСтрока.Количество;
				Если ПродолжительностьЦикла > 1 Тогда
					СтрокаДерева["ИтогоКоличество"+Строка(НомерПериода)] = СтрокаДерева["ИтогоКоличество"+Строка(НомерПериода)] + ДочерняяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//просчет сумм по периодам
	Для Каждого СтрокаРазворота Из СтрокаДерева.ПолучитьЭлементы() Цикл
		фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(СтрокаРазворота,ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	КонецЦикла;
	
	фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммы(СтрокаДерева,ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	Если НЕ ТабличныйВариант Тогда
		СтрокаГруппы = СтрокаДерева;
		Пока СтрокаГруппы.ПолучитьРодителя() <> Неопределено Цикл
			СтрокаГруппы = СтрокаГруппы.ПолучитьРодителя();
		КонецЦикла;
		фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СобратьСуммыПоГруппам(СтрокаГруппы.ПолучитьИдентификатор(),ДеревоСтрокБюджета,Объект,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеВсехРазрезов(ДочерниеСтроки,ОбрабатываемыеРазрезы,СтрокаДерева)
	СтрокаСвертки = "";
	Для Каждого Разрез Из ОбрабатываемыеРазрезы Цикл
		СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",") + Разрез;
	КонецЦикла;
	Если СтрокаСвертки<>"" Тогда
		СтруктураПоиска = Новый Структура(СтрокаСвертки);
		ТЗ = ДочерниеСтроки.Скопировать();
		ТЗ.Свернуть(СтрокаСвертки);
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТЗ);
			ДобавлятьСтроку = ТЗ.Количество()>1;
			Если НЕ ДобавлятьСтроку Тогда
				Для Каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
					Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
						ДобавлятьСтроку = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ДобавлятьСтроку И СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
				СтрокаДерева.ВидСтроки 				= Перечисления.фин_ВидыСтрокБюджета.Итоговая;
			КонецЕсли;
			
			Если ДобавлятьСтроку Тогда
				СтрокаРазрез = СтрокаДерева.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРазрез,СтрокаТЗ);
				СтрокаРазрез.ФинансовыйПоказатель	= СтрокаДерева.ФинансовыйПоказатель;
				СтрокаРазрез.ВидГруппировки			= "ТаблицаАналитики";
				Если СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Итоговая Тогда
					СтрокаРазрез.ВидСтроки 				= Перечисления.фин_ВидыСтрокБюджета.Первичная;
				Иначе
					СтрокаРазрез.ВидСтроки 				= СтрокаДерева.ВидСтроки;
				КонецЕсли;
				СтрокаРазрез.Состояние 				= СтрокаДерева.Состояние;
				Если Группировка = "Номенклатура" И ТипЗнч(СтрокаТЗ[Группировка])=Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаРазрез.ЕдиницаИзмерения				= СтрокаТЗ[Группировка][фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()];
				КонецЕсли;
				СтрокаРазрез.УчетПоКоличеству	 				= СтрокаДерева.УчетПоКоличеству;
				СтрокаРазрез.УчетПоСумме        				= СтрокаДерева.УчетПоСумме;
				СтрокаРазрез.УчетПоРазрезуНоменклатура			= СтрокаДерева.УчетПоРазрезуНоменклатура;
				СтрокаРазрез.ОписаниеТиповВыбораНоменклатуры 	= СтрокаДерева.ОписаниеТиповВыбораНоменклатуры;
				Если СтрокаРазрез.УчетПоСумме Тогда
					СтрокаРазрез.ВалютаОперации    				= СтрокаДерева.ВалютаОперации;
				КонецЕсли;
			Иначе
				СтрокаРазрез = СтрокаДерева;
			КонецЕсли;
			
			СтрокиДетали = ДочерниеСтроки.Скопировать(СтруктураПоиска);
			Для Каждого СтрокаДетали Из СтрокиДетали Цикл
				ИмяПоляКоличество 				= "ИтогоКоличество"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
				ИмяПоляСумма 					= "ИтогоСумма"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
				Если СтруктураПоказателей.Сумма Тогда
					СтрокаРазрез[ИмяПоляСумма] 		= СтрокаРазрез[ИмяПоляСумма] + СтрокаДетали.Сумма;
				КонецЕсли;
				Если СтруктураПоказателей.Количество Тогда
					СтрокаРазрез[ИмяПоляКоличество]	= СтрокаРазрез[ИмяПоляКоличество] + СтрокаДетали.Количество;
				КонецЕсли;
				Если СтруктураПоказателей.Цена Тогда
					Если ЕдинаяЦенаВБюджетномПериоде ИЛИ СоответствиеПериодов.Количество()=1 Тогда
						СтрокаРазрез.Цена				= СтрокаДетали.Цена;
					Иначе
						СтрокаРазрез["Цена"+СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования)]	= СтрокаДетали.Цена;
					КонецЕсли;
				КонецЕсли;
				Если ДобавлятьСтроку Тогда
					СтрокаРазрез.ПричинаКорректировки 	= СтрокаДетали.ПричинаКорректировки;
					СтрокаРазрез.ПричинаОтклонения 		= СтрокаДетали.ПричинаОтклонения;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		СтрокиДетали = ДочерниеСтроки;
		Для Каждого СтрокаДетали Из СтрокиДетали Цикл
			ИмяПоляКоличество 					= "ИтогоКоличество"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
			ИмяПоляСумма 						= "ИтогоСумма"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
			Если СтруктураПоказателей.Сумма Тогда
				СтрокаДерева[ИмяПоляСумма] 		= СтрокаДерева[ИмяПоляСумма] + СтрокаДетали.Сумма;
			КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				СтрокаДерева[ИмяПоляКоличество]	= СтрокаДерева[ИмяПоляКоличество] + СтрокаДетали.Количество;
			КонецЕсли;
			Если СтруктураПоказателей.Цена Тогда
				Если ЕдинаяЦенаВБюджетномПериоде ИЛИ СоответствиеПериодов.Количество()=1 Тогда
					СтрокаДерева.Цена			= СтрокаДетали.Цена;
				Иначе
					СтрокаДерева["Цена"+СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования)]	= СтрокаДетали.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеРазреза(ДочерниеСтроки,Группировка,ОбрабатываемыеРазрезы,СтрокаДерева,СтруктураПоиска)
	ТЗ = ДочерниеСтроки.Скопировать();
	ТЗ.Свернуть(Группировка);
	ЭтоПоследнийРазрез 	= ОбрабатываемыеРазрезы.Индекс(ОбрабатываемыеРазрезы.НайтиПоЗначению(Группировка)) = ОбрабатываемыеРазрезы.Количество()-1;
	СледующийРазрез 	= ?(ЭтоПоследнийРазрез,Неопределено,ОбрабатываемыеРазрезы[ОбрабатываемыеРазрезы.Индекс(ОбрабатываемыеРазрезы.НайтиПоЗначению(Группировка))+1].Значение);
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		ЗначениеРазреза 					= СтрокаТЗ[Группировка];
		ДобавлятьСтроку = (ЗначениеЗаполнено(ЗначениеРазреза) ИЛИ ТЗ.Количество()>1) И НЕ ((Группировка="Проект" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта")) ИЛИ (Группировка="УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ВключаяПодчиненныеПодразделения));
		Если ДобавлятьСтроку И СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
			СтрокаДерева.ВидСтроки 				= Перечисления.фин_ВидыСтрокБюджета.Итоговая;
		КонецЕсли;
		
		Если ДобавлятьСтроку Тогда
			СтрокаРазрез = СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаРазрез[Группировка]			= СтрокаТЗ[Группировка];
			СтрокаРазрез.ФинансовыйПоказатель	= СтрокаДерева.ФинансовыйПоказатель;
			СтрокаРазрез.ВидГруппировки			= Группировка;
			Если СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Итоговая Тогда
				СтрокаРазрез.ВидСтроки 				= Перечисления.фин_ВидыСтрокБюджета.Первичная;
			Иначе
				СтрокаРазрез.ВидСтроки 				= СтрокаДерева.ВидСтроки;
			КонецЕсли;
			СтрокаРазрез.Состояние 				= СтрокаДерева.Состояние;
			Если Группировка = "Номенклатура" И ТипЗнч(СтрокаТЗ[Группировка])=Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаРазрез.ЕдиницаИзмерения				= СтрокаТЗ[Группировка][фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()];
			КонецЕсли;
			СтрокаРазрез.УчетПоКоличеству	 				= СтрокаДерева.УчетПоКоличеству;
			СтрокаРазрез.УчетПоСумме        				= СтрокаДерева.УчетПоСумме;
			СтрокаРазрез.УчетПоРазрезуНоменклатура			= СтрокаДерева.УчетПоРазрезуНоменклатура;
			СтрокаРазрез.ОписаниеТиповВыбораНоменклатуры 	= СтрокаДерева.ОписаниеТиповВыбораНоменклатуры;
			Если СтрокаРазрез.УчетПоСумме Тогда
				СтрокаРазрез.ВалютаОперации    				= СтрокаДерева.ВалютаОперации;
			КонецЕсли;
		Иначе
			СтрокаРазрез =  СтрокаДерева;
		КонецЕсли;
		
		Если ЭтоПоследнийРазрез Тогда
			СтрокиДетали = ДочерниеСтроки.Скопировать(Новый Структура(Группировка,ЗначениеРазреза));
			Для Каждого СтрокаДетали Из СтрокиДетали Цикл
				ИмяПоляКоличество 				= "ИтогоКоличество"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
				ИмяПоляСумма 					= "ИтогоСумма"+ ?(ПродолжительностьЦикла<2,"",СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования));
				Если СтруктураПоказателей.Сумма Тогда
					СтрокаРазрез[ИмяПоляСумма] 		= СтрокаРазрез[ИмяПоляСумма] + СтрокаДетали.Сумма;
				КонецЕсли;
				Если СтруктураПоказателей.Количество Тогда
					СтрокаРазрез[ИмяПоляКоличество]	= СтрокаРазрез[ИмяПоляКоличество] + СтрокаДетали.Количество;
				КонецЕсли;
				Если СтруктураПоказателей.Цена Тогда
					Если ЕдинаяЦенаВБюджетномПериоде ИЛИ СоответствиеПериодов.Количество()=1 Тогда
						СтрокаРазрез.Цена				= СтрокаДетали.Цена;
					Иначе
						СтрокаРазрез["Цена"+СоответствиеПериодов.Получить(СтрокаДетали.ПериодПланирования)]	= СтрокаДетали.Цена;
					КонецЕсли;
				КонецЕсли;
				Если ДобавлятьСтроку Тогда
					СтрокаРазрез.ПричинаКорректировки 	= СтрокаДетали.ПричинаКорректировки;
					СтрокаРазрез.ПричинаОтклонения 		= СтрокаДетали.ПричинаОтклонения;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтруктураПоиска.Вставить(Группировка,ЗначениеРазреза);
			ОбработатьДанныеРазреза(ДочерниеСтроки.Скопировать(Новый Структура(Группировка,ЗначениеРазреза)),СледующийРазрез,ОбрабатываемыеРазрезы,СтрокаРазрез,СтруктураПоиска)
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияНастройкиАналитики(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		НастроитьАналитикуНаСервере(Результат,ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьАналитикуНаСервере(Результат,ДополнительныеПараметры)
	ФинансовыйПоказатель 	= ДополнительныеПараметры.СтатьяБюджета.ФинансовыйПоказатель;
	ТекущиеДанные 			= ДеревоСтрокБюджета.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	ТЗ 						= Объект.ОборотыПоСтатьям.Выгрузить().СкопироватьКолонки();
	ТЗ.Колонки.Добавить("ЗамещаемаяСтрока");
	Индекс = -1;
	СтруктураНастроекЗаполненияАналитики 	= Результат;
	СтруктураУсловие 						= ПолучитьУсловие(СтруктураНастроекЗаполненияАналитики);
	СтруктураПоискаПоУсловию 				= Новый Структура;
	Для Каждого Элемент Из СтруктураУсловие Цикл
		СтруктураПоискаПоУсловию.Вставить(Элемент.Представление,Элемент.Значение);
	КонецЦикла;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") И ОборотыПриКорректировке.НайтиСтроки(СтруктураПоискаПоУсловию).Количество() <>0 Тогда
		СтрокиУдалить = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоискаПоУсловию);
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.ОборотыПоСтатьям.Удалить(СтрокаУдалить);
		КонецЦикла;
		СтрокиКРаспределению = ОборотыПриКорректировке.НайтиСтроки(СтруктураПоискаПоУсловию);
		Для Каждого СтрокаКорректировки Из СтрокиКРаспределению Цикл
			НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКорректировки);
			НоваяСтрока.Сумма 				= - НоваяСтрока.Сумма;
			НоваяСтрока.Количество 			= - НоваяСтрока.Количество;
			НоваяСтрока 					= Объект.ОборотыПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКорректировки);
			НастроитьАналитикуСтроки(НоваяСтрока,Объект.ОборотыПоСтатьям.Индекс(НоваяСтрока),ТЗ);
		КонецЦикла;
		ПриЗаписиВОбороты();
	Иначе
		Если ЗначениеЗаполнено(ФинансовыйПоказатель) И Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ФинансовыйПоказатель)).Количество()=0 И СтруктураНастроекЗаполненияАналитики.Свойство("Условие") И СтруктураНастроекЗаполненияАналитики.Условие.Свойство("СтатьяБюджетаЗначение") Тогда
			МП = Новый Массив;
			Если БазовыйНаборКолонок = 1 Тогда
				МП.Добавить(Объект.ПериодПланирования);
			Иначе
				Для Каждого ЭС Из СоответствиеПериодов Цикл
					МП.Добавить(ЭС.Ключ);
				КонецЦикла;
			КонецЕсли;
			Для Каждого ПериодДобавить Из МП Цикл
				НС = Объект.ОборотыПоСтатьям.Добавить();
				НС.ПериодПланирования 				= ПериодДобавить;
				НС.Состояние						= Объект.Состояние;
				Если Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения ИЛИ СтруктураПоискаПоУсловию.Свойство("УправленческоеПодразделение") Тогда
					Если СтруктураПоискаПоУсловию.Свойство("УправленческоеПодразделение") Тогда
						НС.УправленческоеПодразделение	= СтруктураПоискаПоУсловию.УправленческоеПодразделение;
					Иначе
						НС.УправленческоеПодразделение	= Объект.УправленческоеПодразделение;
					КонецЕсли;
				КонецЕсли;
				Если Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта ИЛИ СтруктураПоискаПоУсловию.Свойство("Проект") Тогда
					Если СтруктураПоискаПоУсловию.Свойство("Проект") Тогда
						НС.Проект	= СтруктураПоискаПоУсловию.Проект;
					Иначе
						НС.Проект	= Объект.Проект;
					КонецЕсли;
				КонецЕсли;
				НС.ФинансовыйПоказатель 			= ФинансовыйПоказатель;
				НС.СтатьяБюджета 					= СтруктураНастроекЗаполненияАналитики.Условие.СтатьяБюджетаЗначение;
				НС.ВалютаОперации					= ТекущиеДанные.ВалютаОперации;
			КонецЦикла;
			ПриЗаписиВОбороты();
		КонецЕсли;
		// - сворачивание строк в табличной части
		СтрокаСвертки = "";
		Для Каждого РеквизитТЧ Из РеквизитыТЧ_ОборотыПоСтатьям() Цикл
			Если РеквизитТЧ = "Количество" ИЛИ РеквизитТЧ = "Сумма" ИЛИ РеквизитТЧ = "Цена" Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьВСтрокуСвертки = Истина;
			Если СтруктураНастроекЗаполненияАналитики.Свойство(РеквизитТЧ) Тогда
				ЭлементНастроек = СтруктураНастроекЗаполненияАналитики[РеквизитТЧ];
				Если ЭлементНастроек.Свойство("СпособЗаполнения") Тогда
					Если ЭлементНастроек["СпособЗаполнения"] <> ПредопределенноеЗначение("Перечисление.фин_СпособыНастройкиАналитикиСтрокБюджета.НеИзменять") Тогда
						ДобавитьВСтрокуСвертки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ДобавитьВСтрокуСвертки Тогда
				СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",")+РеквизитТЧ;
			КонецЕсли;
		КонецЦикла;
		ВременнаяТЗ = Объект.ОборотыПоСтатьям.Выгрузить().СкопироватьКолонки();
		МассивУдалить = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.ОборотыПоСтатьям Цикл
			Если НЕ УдовлетворяетУсловию(СтрокаТЧ,СтруктураУсловие) Тогда
				Продолжить;
			КонецЕсли;
			НС = ВременнаяТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ);
			МассивУдалить.Добавить(СтрокаТЧ);
		КонецЦикла;
		Для Каждого СтрокаУдалить Из МассивУдалить Цикл
			Объект.ОборотыПоСтатьям.Удалить(СтрокаУдалить);
		КонецЦикла;
		ВременнаяТЗ.Свернуть(СтрокаСвертки,"Количество,Сумма");
		Для Каждого СтрокаДобавить Из ВременнаяТЗ Цикл
			НС = Объект.ОборотыПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаДобавить);
		КонецЦикла;
		// - заполнение
		Для Каждого СтрокаТЧ Из Объект.ОборотыПоСтатьям Цикл
			Если НЕ УдовлетворяетУсловию(СтрокаТЧ,СтруктураУсловие) Тогда
				Продолжить;
			КонецЕсли;
			НастроитьАналитикуСтроки(СтрокаТЧ,Объект.ОборотыПоСтатьям.Индекс(СтрокаТЧ),ТЗ);
		КонецЦикла;
	КонецЕсли;
	
	ТЗ.Сортировать("ЗамещаемаяСтрока Убыв");
	ПоследнийНомер=-1;
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.ЗамещаемаяСтрока <> ПоследнийНомер Тогда
			ПоследнийНомер=СтрокаТЗ.ЗамещаемаяСтрока;
			Объект.ОборотыПоСтатьям.Удалить(ПоследнийНомер);
		КонецЕсли;
		НоваяСтрока= Объект.ОборотыПоСтатьям.Вставить(ПоследнийНомер);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
	КонецЦикла;
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Документы.фин_Бюджет.СвернутьОбороты(Объект);
	КонецЕсли;
	
	мСтруктураПоискаИзменяемых = Новый Структура;
	ТекущаяСтрока = ТекущиеДанные;
	мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);
	ИзменяемоеИзмерение = ТекущаяСтрока.ВидГруппировки;
	Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" Цикл
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
	КонецЦикла;
	СтруктураПоискаИзменяемых = Новый ФиксированнаяСтруктура(мСтруктураПоискаИзменяемых);
	
	ТекущиеДанные.ПолучитьЭлементы().Очистить();
	ЗаполнитьЭлементыДерева(ТекущиеДанные.ПолучитьИдентификатор(),ТекущиеДанные.ВидГруппировки);
	
	//Если Индекс >-1 Тогда
	//	ЭлементыФормы.ОборотыПоСтатьям.ТекущаяСтрока=ОборотыПоСтатьям[индекс]; 
	//КонецЕсли;
	РасчетМоделейАктуален = Ложь;
	Если ИнтерактивныйРасчетФормул И НЕ РежимМедленногоСоединения Тогда
		ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
		ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,,ЗатронутыеСтатьиБюджета);
		Если  ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
			ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапоминатьДействий > 0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

// Извлекает список с условием из структуры настроек
//
&НаСервере
Функция ПолучитьУсловие(СтруктураНастроек)
	СписокУсловий = Новый СписокЗначений();
	Условие = Неопределено;
	Если СтруктураНастроек.Свойство("Условие",Условие) Тогда
		МассивОтборов=Новый Массив;
		МассивОтборов.Добавить("УправленческоеПодразделение");
		МассивОтборов.Добавить("Проект");
		МассивОтборов.Добавить("Контрагент");
		МассивОтборов.Добавить("ФинансовыйПоказатель");
		МассивОтборов.Добавить("СтатьяБюджета");
		МассивОтборов.Добавить("Номенклатура");
		МассивОтборов.Добавить("ПериодПланирования");
		МассивОтборов.Добавить("Разрез1");
		МассивОтборов.Добавить("Разрез2");
		МассивОтборов.Добавить("Разрез3");
		МассивОтборов.Добавить("Разрез4");
		МассивОтборов.Добавить("Разрез5");
		МассивОтборов.Добавить("Разрез6");
		МассивОтборов.Добавить("Разрез7");
		МассивОтборов.Добавить("Разрез8");
		МассивОтборов.Добавить("Разрез9");
		МассивОтборов.Добавить("Разрез10");
		Для Каждого ИмяОтбора Из МассивОтборов Цикл
			Отбор = Ложь;
			Если Условие.Свойство(ИмяОтбора+"Отбор",Отбор) Тогда
				Значение = Неопределено;
				Если Условие.Свойство(ИмяОтбора+"Значение",Значение) Тогда
					Если Отбор Тогда
						СписокУсловий.Добавить(Значение,ИмяОтбора);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокУсловий;
КонецФункции //ПолучитьУсловие

// Проверяет строку на соответствие условию
//
&НаСервере
Функция УдовлетворяетУсловию(СтрокаТЧ,СтруктураУсловие)
	Удовлетворяет = Истина;
	Для Каждого СтрокаУсловие Из СтруктураУсловие Цикл
		Если СтрокаТЧ[СтрокаУсловие.Представление] <> СтрокаУсловие.Значение Тогда
			Удовлетворяет = Ложь;
		КонецЕсли;
	КонецЦИкла;
	Возврат Удовлетворяет;
КонецФункции //УдовлетворяетУсловию

// применяет аналитику к строке 
//
&НаСервере
Процедура НастроитьАналитикуСтроки(СтрокаТЧ,Индекс,ТаблицаРезультатИтоговый)
	ТаблицаРезультат 	= ТаблицаРезультатИтоговый.СкопироватьКолонки();
	Настройки 			= СтруктураНастроекЗаполненияАналитики;
	Значение			= Неопределено;
	Способ				= Неопределено;
	НастройкиРазрез		= Неопределено;
	СтрокаНов 			= ТаблицаРезультат.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНов,СтрокаТЧ);
	СтрокаНов.ЗамещаемаяСтрока=Индекс;
	
	Для Каждого РазрезЭлемент Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза = РазрезЭлемент.Представление;
		Если Настройки.Свойство(ИмяРазреза,НастройкиРазрез) Тогда
			Если НастройкиРазрез.Свойство("СпособЗаполнения",Способ) Тогда
				Если НастройкиРазрез.Свойство("Значение",Значение) Тогда
					Если Значение.Количество()>0 Тогда
						Если Способ=Перечисления.фин_СпособыНастройкиАналитикиСтрокБюджета.УстановитьЗначение Тогда
							ТаблицаРезультат.ЗаполнитьЗначения(Значение[0],ИмяРазреза);
							Если ИмяРазреза = "Номенклатура" Тогда
								Для Каждого мСтрокаРезультат Из ТаблицаРезультат Цикл
									Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ТипЗнч(мСтрокаРезультат.Номенклатура)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
										Продолжить;
									КонецЕсли;
									фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(мСтрокаРезультат,Объект.Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,мСтрокаРезультат.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
								КонецЦикла;
							КонецЕсли;
						ИначеЕсли Способ=Перечисления.фин_СпособыНастройкиАналитикиСтрокБюджета.РаспределитьСтрокуПоСпискуПозиций Тогда
							СоответствиеДолей = Неопределено;
							НастройкиРазрез.Свойство("СоответствиеДолей",СоответствиеДолей);
							РаспределитьТаблицу(ТаблицаРезультат,ИмяРазреза,Значение,Истина,СоответствиеДолей);
						ИначеЕсли Способ=Перечисления.фин_СпособыНастройкиАналитикиСтрокБюджета.ТиражироватьСтрокуПоСпискуПозиций Тогда
							СоответствиеДолей = Неопределено;
							НастройкиРазрез.Свойство("СоответствиеДолей",СоответствиеДолей);
							РаспределитьТаблицу(ТаблицаРезультат,ИмяРазреза,Значение,Ложь,СоответствиеДолей);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
		НоваяСтрока = ТаблицаРезультатИтоговый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
	КонецЦикла;
КонецПроцедуры //НастроитьАналитикуСтроки


// распределяет таблицу по значениям колонки
//
Процедура РаспределитьТаблицу(Таблица,Колонка,МассивЗначений,ДелениеСумм,СоответствиеДолей=Неопределено)
	Если МассивЗначений.Количество() <2 Тогда
		Таблица.ЗаполнитьЗначения(МассивЗначений[0],Колонка);
		Если Колонка = "Номенклатура" Тогда
			Для Каждого мСтрокаРезультат Из Таблица Цикл
				Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ТипЗнч(мСтрокаРезультат.Номенклатура) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
					Продолжить;
				КонецЕсли;
				фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(мСтрокаРезультат,Объект.Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,мСтрокаРезультат.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ТРез = Таблица.СкопироватьКолонки();
	ТРез.Очистить();
	Для Каждого СтрокаИсходная Из Таблица Цикл
		ОбщаяСумма 		= 0;
		ОбщееКоличество 	= 0;
		Для Каждого ЗначениеПодстановки Из МассивЗначений Цикл
			СтрокаРез = ТРез.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРез,СтрокаИсходная);
			СтрокаРез[Колонка]= ЗначениеПодстановки;
			Если ДелениеСумм Тогда
				ДоляЗначения=1/МассивЗначений.Количество();
				Если СоответствиеДолей <> Неопределено Тогда
					СуммаДолей = 0;
					Для Каждого СтрокаСоответствия Из СоответствиеДолей Цикл
						СуммаДолей = СуммаДолей + СтрокаСоответствия.Значение;
					КонецЦикла;
					НайденноеСоответствие = СоответствиеДолей.Получить(ЗначениеПодстановки);
					Если НайденноеСоответствие <> Неопределено Тогда
						ДоляЗначения=?(СуммаДолей=0,0,НайденноеСоответствие/СуммаДолей);
					КонецЕсли;
				КонецЕсли;
				СтрокаРез.Сумма = СтрокаРез.Сумма*ДоляЗначения;
				ОбщаяСумма				= ОбщаяСумма+СтрокаРез.Сумма;
				СтрокаРез.Количество 	= СтрокаРез.Количество*ДоляЗначения;
				ОбщееКоличество			= ОбщееКоличество+СтрокаРез.Количество;
			Иначе
				НайденноеСоответствие 	= СоответствиеДолей.Получить(ЗначениеПодстановки);
				Если НайденноеСоответствие <> Неопределено Тогда
					ДоляЗначения			= НайденноеСоответствие;
					СтрокаРез.Сумма 		= СтрокаРез.Сумма * ДоляЗначения;
					СтрокаРез.Количество 	= СтрокаРез.Количество * ДоляЗначения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДелениеСумм Тогда
			СтрокаРез.Сумма 		= СтрокаРез.Сумма+(СтрокаИсходная.Сумма-ОбщаяСумма);
			СтрокаРез.Количество 	= СтрокаРез.Количество+(СтрокаИсходная.Количество-ОбщееКоличество);
		КонецЕсли;
	КонецЦикла;
	Если Колонка = "Номенклатура" Тогда
		Для Каждого мСтрокаРезультат Из ТРез Цикл
			Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ТипЗнч(мСтрокаРезультат.Номенклатура)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
				Продолжить;
			КонецЕсли;
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(мСтрокаРезультат,Объект.Сценарий,ВестиУчетПоПроектам,?(ЕдинаяЦенаВБюджетномПериоде,Объект.ПериодПланирования,мСтрокаРезультат.ПериодПланирования),,,КЭШ_ЦеныНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	Таблица = ТРез;
Конецпроцедуры //РаспределитьТаблицу

&НаКлиенте
Процедура ДеревоСтрокБюджетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДобавитьСтрокуВДерево(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьСтроку(Элемент);
КонецПроцедуры

// устанавливает текущую группировку дерева
//
&НаКлиенте
Процедура УстановитьГруппировкуДерева(Кнопка)
	УстановкиГруппировки = Кнопка.Имя;
	ГруппировкаСтрокДерева(УстановкиГруппировки);
КонецПроцедуры //УстановитьГруппировкуДерева

//Процедура ГруппировкаСтрокДерева()
//
&НаКлиенте
Процедура ГруппировкаСтрокДерева(Установка)
	//разворачивание дерева
	Для Каждого СтрокаДерева Из ДеревоСтрокБюджета.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтрокБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
	Если Установка = "РазвернутьВсе" Тогда
		Возврат;
	КонецЕсли;
	УстановитьГруппировкуВПодчиненных(ДеревоСтрокБюджета.ПолучитьЭлементы(),СтрЗаменить(Установка,"Развернуть",""));
КонецПроцедуры //ГруппировкаСтрокДерева

&НаКлиенте
Процедура УстановитьГруппировкуВПодчиненных(ЭлементыДерева,ГруппировкаСтрок)
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ВидГруппировки = ГруппировкаСтрок Тогда
			Элементы.ДеревоСтрокБюджета.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		Иначе
			УстановитьГруппировкуВПодчиненных(СтрокаДерева.ПолучитьЭлементы(),ГруппировкаСтрок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыборПараметровРаспределения(РезультатВыбора,ТекущиеДанные) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
		Для Инд = 1 По РезультатВыбора.Значения.Количество() Цикл
			ИмяПоля = "Итого"+РезультатВыбора.Поле+?(СоответствиеПериодов.Количество()=1,"",Строка(Инд));
			ТекущиеДанные[ИмяПоля] 						= РезультатВыбора.Значения[Инд-1];
			//Элементы.ДеревоСтрокБюджета.ТекущийЭлемент	= Элементы["ДеревоСтрокБюджета"+ИмяПоля];
			ДеревоБюджетаИтогПриИзменении(Неопределено,Ложь,ИмяПоля);
			Если РезультатВыбора.Поле = "Количество" И СтруктураПоказателей.Сумма=Истина Тогда
				ЦенаДляЯчейки = ТекущиеДанные["Цена"+?(СоответствиеПериодов.Количество()=1 ИЛИ ЕдинаяЦенаВБюджетномПериоде,"",Строка(Инд))];
				Если ЦенаДляЯчейки<>0 Тогда
					ТекущиеДанные[СтрЗаменить(ИмяПоля,"Количество","Сумма")] = ТекущиеДанные[ИмяПоля] * ЦенаДляЯчейки;
				//	Элементы.ДеревоСтрокБюджета.ТекущийЭлемент	= Элементы["ДеревоСтрокБюджета"+СтрЗаменить(ИмяПоля,"Количество","Сумма")];
					ДеревоБюджетаИтогПриИзменении(Неопределено,Ложь,СтрЗаменить(ИмяПоля,"Количество","Сумма"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
		//ЗатронутыеСтатьиБюджета.Добавить(ТекущиеДанные.ФинансовыйПоказатель);
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанные.ВидГруппировки="СтатьяБюджета" Тогда
			РасчетИтоговВДеревеПриВыполненииИзменений(ТекущиеДанные,ЗатронутыеСтатьиБюджета,,Истина);
		ИначеЕсли РодительСтроки<>Неопределено Тогда
			РасчетИтоговВДеревеПриВыполненииИзменений(РодительСтроки,ЗатронутыеСтатьиБюджета,,Истина);
		ИначеЕсли ТабличныйВариант Тогда
			РасчетИтоговВДеревеПриВыполненииИзменений(ТекущиеДанные,ЗатронутыеСтатьиБюджета,,Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаСтатьяБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	ТекущиеДанные 				= Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	СтандартнаяОбработка = Ложь;
	СписокСтатей = ПолучитьСписокВозможныхКДобавлениюСтатей();
	ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",Новый Структура("Отбор,ВСпискеПоИерархии",Новый Структура("Владелец",Объект.ФормируемыйБюджет),СписокСтатей),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаСтатьяБюджетаПриИзменении(Элемент)
	РасчетМоделейАктуален = Ложь;
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяБюджета) Тогда
		ПоказатьПредупреждение(,"Поле статьи бюджета должно быть обязательно заполнено!");
		ТекущиеДанные.СтатьяБюджета = СтруктураПоискаИзменяемых.СтатьяБюджета;
	КонецЕсли;
	
	Если УжеИмеетсяСтрокаСТакимЗначениемРазреза(ТекущиеДанные.ПолучитьРодителя(),"СтатьяБюджета",ТекущиеДанные.СтатьяБюджета) >1 Тогда
		ПоказатьПредупреждение(,"В "+?(ТабличныйВариант,"бюджете","указанной группе")+" уже имеются строки с указанным значением аналитики!");
		ТекущиеДанные[ТекущиеДанные.ВидГруппировки] = СтруктураПоискаИзменяемых[ТекущиеДанные.ВидГруппировки];
		Возврат;	
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
		Если ОборотыПриКорректировке.НайтиСтроки(СтруктураПоискаИзменяемых).Количество() >0 Тогда
			ПоказатьПредупреждение(,"Нельзя изменить аналитику строки, полученной из учетных данных!
			|Возможно только приравнять суммы оборотов к нулю!");
			ТекущиеДанные.СтатьяБюджета = СтруктураПоискаИзменяемых.СтатьяБюджета;
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	СтатьяБюджета = ТекущиеДанные.СтатьяБюджета;	
	
	ТекущиеДанные.КодСтрокиБюджета 		= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтрокиБюджета(СтатьяБюджета,ЭтотОбъект);
	ТекущиеДанные.Код 					= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.КодСтатьи(СтатьяБюджета,ЭтотОбъект);
	ТекущиеДанные.Наименование 			= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.НаименованиеСтатьи(СтатьяБюджета,ЭтотОбъект);
	ФинансовыйПоказатель 	= ПолеОбъекта(СтатьяБюджета,"ФинансовыйПоказатель");
	ТекущиеДанные.ФинансовыйПоказатель 	= ФинансовыйПоказатель;
	
	РазрезыОчистить = Новый СписокЗначений;
	СтрокаЗаполненияОчищаемых = "";
	СтруктураРазрезовПоказателя = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтруктураРазрезовФинансовогоПоказателя(ТекущиеДанные.ФинансовыйПоказатель,ЭтотОбъект);
	Для Каждого ЭлементРазрез Из СтруктураРазрезовБюджета Цикл
		Если НЕ СтруктураРазрезовПоказателя.Свойство(ЭлементРазрез.Представление) Тогда
			РазрезыОчистить.Добавить(ЭлементРазрез.Ключ);
			СтрокаЗаполненияОчищаемых = СтрокаЗаполненияОчищаемых + ?(СтрокаЗаполненияОчищаемых="","",",")+ЭлементРазрез.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаЗаполненияОчищаемых<>"" Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтруктураПустыхЗначений,СтрокаЗаполненияОчищаемых);
	КонецЕсли;
	Если РазрезыОчистить.НайтиПоЗначению("Номенклатура")<>Неопределено Тогда
		ТекущиеДанные["Номенклатура"] = ПустоеЗначениеРазрезаКлиент("Номенклатура",ТекущиеДанные.ФинансовыйПоказатель);
	КонецЕсли;
	//Для Каждого РазрезОчистить Из РазрезыОчистить Цикл
	//	ТекущиеДанные[РазрезОчистить.Ключ] = ПустоеЗначениеРазрезаКлиент(РазрезОчистить.Ключ,ТекущиеДанные.ФинансовыйПоказатель);
	//КонецЦикла;
	
	СтрокиКОбновлению 		= Объект.ОборотыПоСтатьям.НайтиСтроки(Новый Структура(СтруктураПоискаИзменяемых));
	Для Каждого СтрокаОбновить Из СтрокиКОбновлению Цикл
		СтрокаОбновить.СтатьяБюджета 		= ТекущиеДанные.СтатьяБюджета;
		СтрокаОбновить.ФинансовыйПоказатель 	= ТекущиеДанные.ФинансовыйПоказатель;
		Для Каждого РазрезОчистить Из РазрезыОчистить Цикл
			СтрокаОбновить[РазрезОчистить.Представление] = ТипЗначенияДляВвода(РазрезОчистить.Представление,ТекущиеДанные.ФинансовыйПоказатель).ПривестиЗначение(Неопределено);
		КонецЦикла;
	КонецЦикла;
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	СпособЦенообразования = ПолеОбъекта(ТекущиеДанные.ФинансовыйПоказатель,"СпособЦенообразования");
	Если СтруктураПоказателей.Цена = Истина И ЗначениеЗаполнено(СпособЦенообразования) И СпособЦенообразования<>ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать") Тогда
		ОбновитьЦеныПриИзмененииРазрезаВДереве(ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	//ЗатронутыеСтатьиБюджета.Добавить();
	//ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	Если ИнтерактивныйРасчетФормул И НЕ РежимМедленногоСоединения Тогда
		ПроизвестиРасчетыПоФормулам(ПолеОбъекта(СтруктураПоискаИзменяемых.СтатьяБюджета,"ФинансовыйПоказатель"),,ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	Если ЗатронутыеСтатьиБюджета.Количество()>0 Тогда
		ОбновитьПолеБюджетаПоВыбранным(ЗатронутыеСтатьиБюджета);
	КонецЕсли;
	Если ЗапоминатьДействий>0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаСтатьяБюджетаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьПредупреждение(,"Поле статьи бюджета должно быть обязательно заполнено!");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ЭтоРежимПодбора=Истина Тогда
		ОбработчикОповещенияВыбораЗначенияАналитикиДляДобавления(ВыбранноеЗначение,ДополнительныеПараметрыПодбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтроку()
	Модифицированность = Истина;
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если РасшифровкаПоля.ВидПоля = "Измерение" Тогда
				Отбор.Вставить(РасшифровкаПоля.Поле,РасшифровкаПоля.Значение);
			КонецЕсли;
			Если Отбор.Свойство("СтатьяБюджета") Тогда
				ВидСтроки = ОпределитьВидСтрокиБюджетаКлиент(Отбор.СтатьяБюджета);
				Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранная статья бюджета """+Отбор.СтатьяБюджета+""" не явлется первичной ("+НРег(ВидСтроки)+")! Редактирование не предусмотрено");
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ФинансовыйПоказатель 	= ?(Отбор.Свойство("СтатьяБюджета"),ФинансовыйПоказательСтатьи(Отбор.СтатьяБюджета),Неопределено);
			ПериодПланирования 		= ?(Отбор.Свойство("ПериодПланирования"),Отбор.ПериодПланирования,Неопределено);
			СтрокиДокумента = Объект.ОборотыПоСтатьям.НайтиСтроки(Отбор);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				СтрокаДокумента.Сумма = 0;
				СтрокаДокумента.Количество = 0;
			КонецЦикла;
			РасчетПроизведен = ИнтерактивныйРасчетФормул  И (НЕ РежимМедленногоСоединения) И ПроизвестиРасчетыПоФормулам(ФинансовыйПоказатель,ПериодПланирования);
			НастройкаРедактированияПриИзмененииНаСервере();
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
		Если ТекущиеДанные =Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ТабличныйВариант Тогда
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		Иначе
			РодительСтроки = ДеревоСтрокБюджета;
		КонецЕсли;
		СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура;
		мСтруктураПоискаИзменяемых 	= Новый Структура;
		Если НЕ ТабличныйВариант Тогда
			Если ТекущиеДанные.ВидГруппировки = "" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.ИерархияБюджета") Тогда
			ПоказатьПредупреждение(,"Рассчитываемые строки не редактируются вручную!");
			Возврат;
		КонецЕсли;
		//Если НЕ ТабличныйВариант Тогда
		//	мСтруктураПоискаИзменяемых.Вставить(ТекущиеДанные.ВидГруппировки,ТекущиеДанные[ТекущиеДанные.ВидГруппировки]);
		//	ТекущаяСтрока = ТекущиеДанные;
		//	Пока ТекущаяСтрока.ВидГруппировки <> "СтатьяБюджета" И ТекущаяСтрока<>Неопределено Цикл
		//		ТекущаяСтрока 			= ТекущаяСтрока.ПолучитьРодителя();
		//		мСтруктураПоискаИзменяемых.Вставить(ТекущаяСтрока.ВидГруппировки,ТекущаяСтрока[ТекущаяСтрока.ВидГруппировки]);	
		//	КонецЦикла;
		//	СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура(мСтруктураПоискаИзменяемых);
		//Иначе
			ПолучитьСтруктуруПоискаИзменяемыхСтрок();
			мСтруктураПоискаИзменяемых = Новый Структура(СтруктураПоискаИзменяемых);
		//КонецЕсли;
		ТолькоОчисткаПоказателей = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка") Тогда
			Если ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоискаИзменяемых).Количество() >0 Тогда
				ТолькоОчисткаПоказателей = Истина;
			КонецЕсли;
			ТекущиеДанные.Корректировки = 1;
			УстановитьЗначениеВПодчиненныхСтроках(ТекущиеДанные,"Корректировки",1);
		КонецЕсли;
		Если НЕ РежимМедленногоСоединения Тогда
			СтрокиКУдалению = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоискаИзменяемых);
			Первая = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка");
			Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
				Если Первая Тогда
					СтрокаУдалить.Сумма 		= 0;
					СтрокаУдалить.Количество 	= 0;
					СтрокаУдалить.Цена	 		= 0;
					Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
						Если НЕ мСтруктураПоискаИзменяемых.Свойство(Разрез.Представление) Тогда
							СтрокаУдалить[Разрез.Представление] = ПустоеЗначениеРазреза(Разрез.Представление,СтрокаУдалить.ФинансовыйПоказатель);
						КонецЕсли;
					КонецЦикла;
					Если Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
						СтрокаУдалить.Проект = Объект.Проект;
					КонецЕсли;
					Если Объект.УровеньДетализацииБюджета = ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
						СтрокаУдалить.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
					КонецЕсли;
					Если НЕ Объект.ЕдинаяВалюта Тогда
						СтрокаУдалить.ВалютаОперации = ТекущиеДанные.ВалютаОперации;
					КонецЕсли;
					Первая = Ложь;
				Иначе
					Объект.ОборотыПоСтатьям.Удалить(СтрокаУдалить);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТребуетсяПередачаДанных = Истина;
		КонецЕсли;
		Для Каждого Поле Из СписокЧисловыхПолей Цикл
			ТекущиеДанные[Поле.Значение] = 0;
			Если ТолькоОчисткаПоказателей Тогда
				Если ПродолжительностьЦикла>1 И (Поле.Значение = "ИтогоСумма" ИЛИ Поле.Значение = "ИтогоКоличество") Тогда
					Продолжить;
				КонецЕсли;
				ДеревоБюджетаИтогПриИзменении(Неопределено,Ложь,Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ТолькоОчисткаПоказателей Тогда
			ОчиститьПоказателиВПодчиненныхСтроках(ТекущиеДанные);
		Иначе
			ТекущиеДанные.ПолучитьЭлементы().Очистить();
			Если Объект.УровеньДетализацииБюджета<>ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.ПустаяСсылка") Тогда
				ЗаполнитьЭлементыДерева(ТекущиеДанные.ПолучитьИдентификатор(),ТекущиеДанные.ВидГруппировки);
			КонецЕсли;
			Если (ТекущиеДанные.ВидГруппировки <> "СтатьяБюджета" ИЛИ ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая")) И НЕ ТабличныйВариант Тогда//(ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики) Тогда
				ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
			КонецЕсли;
		КонецЕсли;
		РасчетМоделейАктуален = Ложь;
		// итоги в дереве
		ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
		РасчетИтоговВДеревеПриВыполненииИзменений(РодительСтроки,ЗатронутыеСтатьиБюджета,,Истина);
	КонецЕсли;
	Если ЗапоминатьДействий > 0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорректировкуСтроки()
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.ДеревоСтрокБюджета.ТекущиеДанные;
	Если ТекущиеДанные =Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ТабличныйВариант Тогда
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	Иначе
		РодительСтроки = ДеревоСтрокБюджета;
	КонецЕсли;
	СтруктураПоискаИзменяемых 	= Новый ФиксированнаяСтруктура;
	мСтруктураПоискаИзменяемых 	= Новый Структура;
	Если НЕ ТабличныйВариант Тогда
		Если ТекущиеДанные.ВидГруппировки = "" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая") И ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.ИерархияБюджета") Тогда
		ПоказатьПредупреждение(,"Рассчитываемые строки не редактируются вручную!");
		Возврат;
	КонецЕсли;
	ПолучитьСтруктуруПоискаИзменяемыхСтрок();
	мСтруктураПоискаИзменяемых = Новый Структура(СтруктураПоискаИзменяемых);
	ТекущиеДанные.Корректировки = 0;
	УстановитьЗначениеВПодчиненныхСтроках(ТекущиеДанные,"Корректировки",0);
	СтрокиКУдалению = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоискаИзменяемых);
	Первая = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.фин_ВидыОперацийБюджет.Корректировка");
	Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
		Объект.ОборотыПоСтатьям.Удалить(СтрокаУдалить);
	КонецЦикла;
	Для Каждого Поле Из СписокЧисловыхПолей Цикл
		ТекущиеДанные[Поле.Значение] = 0;
		//Если ТолькоОчисткаПоказателей Тогда
		//	Если ПродолжительностьЦикла>1 И (Поле.Значение = "ИтогоСумма" ИЛИ Поле.Значение = "ИтогоКоличество") Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	ДеревоБюджетаИтогПриИзменении(Неопределено,Ложь,Поле.Значение);
		//КонецЕсли;
	КонецЦикла;

	ТекущиеДанные.ПолучитьЭлементы().Очистить();
	Если Объект.УровеньДетализацииБюджета<>ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.ПустаяСсылка") Тогда
		ЗаполнитьЭлементыДерева(ТекущиеДанные.ПолучитьИдентификатор(),ТекущиеДанные.ВидГруппировки);
	КонецЕсли;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()=0 Тогда
		СтрокиПоиска = ОборотыПриКорректировке.НайтиСтроки(мСтруктураПоискаИзменяемых);
		Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
			НомерКолонки = ?(ПродолжительностьЦикла=1,"",Строка(ОбратноеСоответствиеПериодов.Получить(СтрокаПоиска.ПериодПланирования)));
			Если СтруктураПоказателей.Сумма Тогда
				ТекущиеДанные["ИтогоСумма"+НомерКолонки]=ТекущиеДанные["ИтогоСумма"+НомерКолонки]+СтрокаПоиска.Сумма;
			КонецЕсли;
			Если СтруктураПоказателей.Количество Тогда
				ТекущиеДанные["ИтогоКоличество"+НомерКолонки]=ТекущиеДанные["ИтогоКоличество"+НомерКолонки]+СтрокаПоиска.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если (ТекущиеДанные.ВидГруппировки <> "СтатьяБюджета" ИЛИ ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Итоговая")) И НЕ ТабличныйВариант Тогда//(ТабличныйВариант ИЛИ ТабличныйВариантТолькоДляАналитики) Тогда
		ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
	КонецЕсли;
	РасчетМоделейАктуален = Ложь;
	// итоги в дереве
	ЗатронутыеСтатьиБюджета = Новый СписокЗначений;
	РасчетИтоговВДеревеПриВыполненииИзменений(РодительСтроки,ЗатронутыеСтатьиБюджета,,Истина);
	Если ЗапоминатьДействий > 0 Тогда
		ЗапомнитьСостояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоказателиВПодчиненныхСтроках(СтрокаДерева)
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Для Каждого Поле Из СписокЧисловыхПолей Цикл
			ПодчиненнаяСтрока[Поле.Значение] = 0;
			Если ПродолжительностьЦикла>1 И (Поле.Значение = "ИтогоСумма" ИЛИ Поле.Значение = "ИтогоКоличество") Тогда
				Продолжить;
			КонецЕсли;
			ДеревоБюджетаИтогПриИзменении(Неопределено,Ложь,Поле.Значение,ПодчиненнаяСтрока);
		КонецЦикла;
		ОчиститьПоказателиВПодчиненныхСтроках(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтрокБюджетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры


#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаСервере
Процедура УровеньДетализацииБюджетаПриИзмененииНаСервере()
	Если НЕ (ТолькоТабличныеЧасти ИЛИ РедактированиеВСКД) Тогда
		СозданиеСтруктурыДерева();
	Иначе
		ЗаполнитьСоответствиеПериодов();
    КонецЕсли;
	Если НЕ ТолькоТабличныеЧасти Тогда
		ОбновитьПолеБюджета();
	КонецЕсли;
	НастроитьФиксациюКолонокБюджета(ЭтотОбъект);
	НастроитьАвтоВысотуЯчеекАналитики(ЭтотОбъект);
	НастроитьАвтоВысотуЯчейкиСтатьи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция ФинансовыйПоказательСтатьи(СтатьяБюджета)
	ИзКЭШа = КЭШ_СтатьиПоказателей.НайтиСтроки(Новый Структура("Статья",СтатьяБюджета));
	Если ИзКЭШа.Количество()>0 Тогда
		ПоказательСтатьи = ИзКЭШа[0].Показатель;
	Иначе
		ПоказательСтатьи = ПолеОбъекта(СтатьяБюджета,"ФинансовыйПоказатель");
	КонецЕсли;
	Возврат ПоказательСтатьи;
КонецФункции

&НаСервере
Функция ВнешниеОборотыНаСервере(ФинансовыйПоказатель,ВидСтроки,Отбор=Неопределено)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Документы.фин_Бюджет.ПолучитьМакет("Обороты");
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	// вывод шапки таблицы
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|База"); 
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Для Каждого РазрезЭлемент Из СтруктураРазрезовБюджета Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Разрез"); 
		ОбластьМакета.Параметры.Заголовок = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезЭлемент.Значение);
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы|Показатели"); 
	ТабличныйДокумент.Присоединить(ОбластьМакета);
	СтруктураПоиска = Новый Структура;
	Для Каждого Пара Из ?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор) Цикл
		СтруктураПоиска.Вставить(Пара.Ключ,Пара.Значение);
	КонецЦикла;
	СтруктураПоиска.Вставить("ФинансовыйПоказатель",ФинансовыйПоказатель);
	Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Если ОборотыПриКорректировке.НайтиСтроки(СтруктураПоиска).Количество() >0 Тогда
			Зависимые = ПолучитьТаблицуНаследуемых(СтруктураПоиска);
			Для Каждого СтрокаЗависимых Из Зависимые Цикл
				СтрокаМакета = Макет.ПолучитьОбласть("Строка");
				СтрокаМакета.Параметры.Заполнить(СтрокаЗависимых);
				ТабличныйДокумент.Вывести(СтрокаМакета);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости") Тогда
		мСтруктура = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПоиска));
		мСтруктура.Вставить("ВидСтроки",Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости);
		//Если ВнешниеЗависимыеОбороты.НайтиСтроки(СтруктураПоиска).Количество() >0 Тогда
		Если ВнешниеОборотыБюджета.НайтиСтроки(СтруктураПоиска).Количество() >0 Тогда
			Зависимые = ПолучитьТаблицуНаследуемых(СтруктураПоиска,СписокЗависимых,Истина);
			Для Каждого СтрокаЗависимых Из Зависимые Цикл
				ВывестиСтрокуВМакет(СтрокаЗависимых,Макет,ТабличныйДокумент);
			КонецЦикла;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка не содержит внешних оборотов!");
			Возврат Неопределено;
		КонецЕсли;
		СтруктураПоиска.Удалить("Сценарий");
		СтрокиЗависимых = Объект.ЗависимыеОбороты.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаЗависимых Из СтрокиЗависимых Цикл
			ВывестиСтрокуВМакет(СтрокаЗависимых,Макет,ТабличныйДокумент);
		КонецЦикла;
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Наследуемая") Тогда
		Зависимые = ПолучитьТаблицуНаследуемых(СтруктураПоиска,?(СписокРассчитываемыхВПредшествующихБюджетах.НайтиПоЗначению(фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.СтатьяБюджетаПоПоказателю(ФинансовыйПоказатель,ЭтотОбъект))<>Неопределено,СписокРассчитываемыхВПредшествующихБюджетах,СписокНаследуемых));
		Для Каждого СтрокаЗависимых Из Зависимые Цикл
			ВывестиСтрокуВМакет(СтрокаЗависимых,Макет,ТабличныйДокумент);
		КонецЦикла;
	КонецЕсли;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	Возврат ТабличныйДокумент;
КонецФункции

//выводит строку в макет
//
Процедура ВывестиСтрокуВМакет(СтрокаДанных,Макет,ТабличныйДокумент)
	ОбластьМакета = Макет.ПолучитьОбласть("Строка|База"); 
	ОбластьМакета.Параметры.Заполнить(СтрокаДанных);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	Для Каждого РазрезЭлемент Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза = РазрезЭлемент.Представление;
		ОбластьМакета 						= Макет.ПолучитьОбласть("Строка|Разрез"); 
		ОбластьМакета.Параметры.Значение 	= СтрокаДанных[ИмяРазреза];
		ТабличныйДокумент.Присоединить(ОбластьМакета);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("Строка|Показатели"); 
	ОбластьМакета.Параметры.Заполнить(СтрокаДанных);
	ТабличныйДокумент.Присоединить(ОбластьМакета);
КонецПроцедуры

//возвращает таблицу наследуемых оборотов
//
Функция ПолучитьТаблицуНаследуемых(СтруктураПоиска,СписокДляОтбора=Неопределено,Зависимые=Ложь)
	Запрос = Новый Запрос;
	Фильтр = "Сценарий = &Сценарий";
	ЭтоКорректировка = Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка;
	Для Каждого Пара Из СтруктураПоиска Цикл
		Запрос.УстановитьПараметр(Пара.Ключ,Пара.Значение);
		Если Пара.Ключ ="СтатьяБюджета" Тогда
			Запрос.УстановитьПараметр("ФинансовыйПоказатель",Пара.Значение.ФинансовыйПоказатель);
			Фильтр=Фильтр+" И ФинансовыйПоказатель=&ФинансовыйПоказатель";
		ИначеЕсли Пара.Ключ ="ВалютаОперации" Тогда
			Фильтр=Фильтр+" И Валюта=&"+Пара.Ключ;
		ИначеЕсли Пара.Ключ <> "ПериодПланирования" И Пара.Ключ <>"Сценарий" Тогда
			Фильтр=Фильтр+" И "+?(Найти(Пара.Ключ,"Разрез")=0,"","ДополнительныеРазрезы.")+Пара.Ключ+"=&"+Пара.Ключ;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ Объект.УправленческоеПодразделение.Пустая()) И (ЭтоКорректировка ИЛИ НЕ СтруктураПоиска.Свойство("УправленческоеПодразделение"))  Тогда
		Если Объект.ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
			Фильтр = Фильтр+" И УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение)";
		Иначе
			Фильтр = Фильтр+" И УправленческоеПодразделение = &УправленческоеПодразделение";
		КонецЕсли;
		Запрос.УстановитьПараметр("УправленческоеПодразделение",Объект.УправленческоеПодразделение);
	КонецЕсли;
	Если (НЕ Объект.Проект.Пустая())  И (ЭтоКорректировка ИЛИ НЕ СтруктураПоиска.Свойство("Проект"))  Тогда
		Фильтр = Фильтр+" И Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",			Объект.Проект);
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		Фильтр = Фильтр+" И Организация = &Организация";
	КонецЕсли;
	Если Зависимые ИЛИ ЭтоКорректировка Тогда
		Фильтр = Фильтр+" И ДокументПланирования<>&Регистратор";
		Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	КонецЕсли;
	Запрос.Текст="ВЫБРАТЬ
		             |	ОборотыБюджетовОбороты.ДокументПланирования КАК Источник,
		             |	ОборотыБюджетовОбороты.Проект,
		             |	ОборотыБюджетовОбороты.УправленческоеПодразделение,
		             |	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		             |	ОборотыБюджетовОбороты.Контрагент,
		             |	ОборотыБюджетовОбороты.Номенклатура,
		             |	ОборотыБюджетовОбороты.Валюта,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез1 КАК Разрез1,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез2 КАК Разрез2,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез3 КАК Разрез3,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез4 КАК Разрез4,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез5 КАК Разрез5,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез6 КАК Разрез6,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез7 КАК Разрез7,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез8 КАК Разрез8,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез9 КАК Разрез9,
		             |	ОборотыБюджетовОбороты.ДополнительныеРазрезы.Разрез10 КАК Разрез10,
		             |	ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
		             |	ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК Сумма,
		             |	НАЧАЛОПЕРИОДА(ОборотыБюджетовОбороты.ПериодПланирования,"+?(Объект.Сценарий.Пустая(),"МЕСЯЦ",Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)))+") КАК Период,
		             |	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
		             |ПОМЕСТИТЬ ВТ_Обороты
		             |ИЗ
		             |	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, ,ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И "+Фильтр+") КАК ОборотыБюджетовОбороты
					 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
					 |		ПО СтатьиБюджета.ФинансовыйПоказатель = ОборотыБюджетовОбороты.ФинансовыйПоказатель
					 |			И СтатьиБюджета.Владелец = &Бюджет"+?(ЭтоКорректировка,"
					 |			И НЕ СтатьиБюджета.ЭтоГруппа","
					 |			И СтатьиБюджета.Ссылка В (&СписокДляОтбора)")+"
	             	 |;
		             |
		             |////////////////////////////////////////////////////////////////////////////////
		             |ВЫБРАТЬ
		             |	ВТ_Обороты.Источник,
		             |	ВТ_Обороты.Проект,
		             |	ВТ_Обороты.УправленческоеПодразделение,
		             |	ВТ_Обороты.ФинансовыйПоказатель,
		             |	ВТ_Обороты.Контрагент,
		             |	ВТ_Обороты.Номенклатура,
		             |	ВТ_Обороты.Разрез1,
		             |	ВТ_Обороты.Разрез2,
		             |	ВТ_Обороты.Разрез3,
		             |	ВТ_Обороты.Разрез4,
		             |	ВТ_Обороты.Разрез5,
		             |	ВТ_Обороты.Разрез6,
		             |	ВТ_Обороты.Разрез7,
		             |	ВТ_Обороты.Разрез8,
		             |	ВТ_Обороты.Разрез9,
		             |	ВТ_Обороты.Разрез10,
		             |	ВТ_Обороты.Валюта КАК ВалютаОперации,
		             |	ВТ_Обороты.Количество,
		             |	ВТ_Обороты.Сумма,
		             |	ВТ_Обороты.Период,
		             |	ВТ_Обороты.ПериодПланирования КАК ПериодПланирования
		             |ИЗ
		             |	ВТ_Обороты КАК ВТ_Обороты";		   
		Запрос.УстановитьПараметр("СписокДляОтбора",СписокДляОтбора);
		Запрос.УстановитьПараметр("Дата",			?(Объект.Дата='00010101',ТекущаяДата(),Объект.Дата));
		Запрос.УстановитьПараметр("Организация",	Объект.Организация);
		Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
		Запрос.УстановитьПараметр("Бюджет",			Объект.ФормируемыйБюджет);
		Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)));
		Запрос.УстановитьПараметр("КонецПериода",	?(Объект.Сценарий.ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),Объект.Сценарий.ПродолжительностьЦикла-1)));
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаНаследуемыхОборотов 	= РезультатЗапроса.Выгрузить();	
		Возврат ТаблицаНаследуемыхОборотов;
КонецФункции //ПолучитьТаблицуНаследуемыхОборотов

&НаСервере
Процедура ПроверитьЛимитыНаСервереДляСКД(ВидСтроки,Отбор)
	ТаблицаЛимиты = Новый ТаблицаЗначений;
	ТаблицаЛимиты.Колонки.Добавить("Вид",	Новый ОписаниеТипов("Строка"));
	ТаблицаЛимиты.Колонки.Добавить("Сумма",	Новый ОписаниеТипов("Число"));
	ТаблицаЛимиты.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	ТаблицаЛимиты.Колонки.Добавить("Лимит",Новый ОписаниеТипов("Число"));
	ТаблицаЛимиты.Колонки.Добавить("ВыбранныйЛимит",Новый ОписаниеТипов("Число"));
	ЛимитПолучен = Истина;
	ДанныеДокументаСтруктура = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(РеквизитФормыВЗначение("Объект"),Истина);
	СтрокиДокумента = Объект.ОборотыПоСтатьям.НайтиСтроки(Отбор);
	Для Каждого СтрокаОборотовДляКонтроля Из СтрокиДокумента Цикл
		Если ПродолжительностьЦикла=1 Тогда
			мСтруктура = Новый Структура(Новый ФиксированнаяСтруктура(Отбор));
			мСтруктура.Вставить("Период",			Объект.ПериодПланирования);
			мСтруктура.Вставить("Сценарий",			Объект.Сценарий);
			мСтруктура.Вставить("ВалютаОперации",	СтрокаОборотовДляКонтроля.ВалютаОперации);
			фин_УправлениеЗависимостямиСтатейБюджетов.ВывестиЛимиты(мСтруктура,ВидСтроки=Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),ДанныеДокументаСтруктура,Новый Структура(Новый ФиксированнаяСтруктура(Отбор)),ТаблицаЛимиты,СтруктураРазрезовБюджета);
		Иначе
			Для Каждого мпПериод Из СоответствиеПериодов Цикл
				мСтруктура = Новый Структура(Новый ФиксированнаяСтруктура(Отбор));
				мСтруктура.Вставить("Период",			мпПериод.Ключ);
				мСтруктура.Вставить("Сценарий",			Объект.Сценарий);
				мСтруктура.Вставить("ВалютаОперации",	СтрокаОборотовДляКонтроля.ВалютаОперации);
				фин_УправлениеЗависимостямиСтатейБюджетов.ВывестиЛимиты(мСтруктура,ВидСтроки=Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),ДанныеДокументаСтруктура,Новый Структура(Новый ФиксированнаяСтруктура(Отбор)),ТаблицаЛимиты,СтруктураРазрезовБюджета);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ТаблицаЛимиты.Сортировать("Период");
	
	Если ТаблицаЛимиты.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лимитов по строке не задано!");
	Иначе
		Для Каждого СтрокаЛимит Из ТаблицаЛимиты Цикл
			Если ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая Тогда
				ТекущаяСуммаДляВыводаВЛимитах = 0;
			ИначеЕсли СтрокаЛимит.Период = СтрокаОборотовДляКонтроля.ПериодПланирования Тогда
				ТекущаяСуммаДляВыводаВЛимитах = СтрокаОборотовДляКонтроля.Сумма;
			КонецЕсли;	
			Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
				ТекущаяСуммаДляВыводаВЛимитах = 0;
				мСтруктураПоиска = Новый Структура;
				Для Каждого Элемент Из Отбор Цикл
					Если Элемент.Ключ="Сценарий" Тогда
						Продолжить;
					КонецЕсли;
					мСтруктураПоиска.Вставить(Элемент.Ключ,Элемент.Значение);
				КонецЦикла;
				Строки = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоиска);
				Для Каждого Строка Из Строки Цикл
					 ТекущаяСуммаДляВыводаВЛимитах = ТекущаяСуммаДляВыводаВЛимитах+фин_УправлениеЗависимостямиСтатейБюджетов.ПересчитатьИзКурсаОперации(Строка.Сумма,Строка.ПериодПланирования,Строка.ВалютаОперации,СтрокаОборотовДляКонтроля.ВалютаОперации,Объект);
				КонецЦикла;    
			КонецЕсли;
			Превышение = (СтрокаЛимит.ВыбранныйЛимит + ТекущаяСуммаДляВыводаВЛимитах)-СтрокаЛимит.Лимит;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Период: "+ фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СтрокаЛимит.Период,Объект.Сценарий)+"; Лимит: "+СтрокаЛимит.Лимит+"; Использовано ранее: "+СтрокаЛимит.ВыбранныйЛимит+"; С учетом текущей суммы: "+Строка(СтрокаЛимит.ВыбранныйЛимит + ТекущаяСуммаДляВыводаВЛимитах)+"; Превышение: "+?(Превышение>0,Превышение,"-"));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьЛимитыНаСервере(ВидСтроки,Идентификатор=Неопределено,Отбор=Неопределено)
	СтрокаОборотовДляКонтроля = ДеревоСтрокБюджета.НайтиПоИдентификатору(Идентификатор);
	ТаблицаЛимиты = Новый ТаблицаЗначений;
	ТаблицаЛимиты.Колонки.Добавить("Вид",	Новый ОписаниеТипов("Строка"));
	ТаблицаЛимиты.Колонки.Добавить("Сумма",	Новый ОписаниеТипов("Число"));
	ТаблицаЛимиты.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	ТаблицаЛимиты.Колонки.Добавить("Лимит",Новый ОписаниеТипов("Число"));
	ТаблицаЛимиты.Колонки.Добавить("ВыбранныйЛимит",Новый ОписаниеТипов("Число"));
	ЛимитПолучен = Истина;
	ДанныеДокументаСтруктура = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(РеквизитФормыВЗначение("Объект"),Истина);
	Если ПродолжительностьЦикла=1 Тогда
		мСтруктура = Новый Структура(СтруктураПоискаИзменяемых);
		мСтруктура.Вставить("Период",			Объект.ПериодПланирования);
		мСтруктура.Вставить("Сценарий",			Объект.Сценарий);
		мСтруктура.Вставить("ВалютаОперации",	СтрокаОборотовДляКонтроля.ВалютаОперации);
		фин_УправлениеЗависимостямиСтатейБюджетов.ВывестиЛимиты(мСтруктура,ВидСтроки=Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),ДанныеДокументаСтруктура,Новый Структура(СтруктураПоискаИзменяемых),ТаблицаЛимиты,СтруктураРазрезовБюджета);
	Иначе
		Для Каждого мпПериод Из СоответствиеПериодов Цикл
			мСтруктура = Новый Структура(СтруктураПоискаИзменяемых);
			мСтруктура.Вставить("Период",			мпПериод.Ключ);
			мСтруктура.Вставить("Сценарий",			Объект.Сценарий);
			мСтруктура.Вставить("ВалютаОперации",	СтрокаОборотовДляКонтроля.ВалютаОперации);
			фин_УправлениеЗависимостямиСтатейБюджетов.ВывестиЛимиты(мСтруктура,ВидСтроки=Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),ДанныеДокументаСтруктура,Новый Структура(СтруктураПоискаИзменяемых),ТаблицаЛимиты,СтруктураРазрезовБюджета);
		КонецЦикла;
	КонецЕсли;
	ТаблицаЛимиты.Сортировать("Период");
	
	Если ТаблицаЛимиты.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лимитов по строке не задано!");
	Иначе
		Для Каждого СтрокаЛимит Из ТаблицаЛимиты Цикл
			Если ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая Тогда
				ТекущаяСуммаДляВыводаВЛимитах = 0;
			Иначе
				ТекущаяСуммаДляВыводаВЛимитах = ?(СоответствиеПериодов.Количество()=1,СтрокаОборотовДляКонтроля.ИтогоСумма,СтрокаОборотовДляКонтроля["ИтогоСумма"+СоответствиеПериодов.Получить(СтрокаЛимит.Период)]);
			КонецЕсли;	
			Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
				ТекущаяСуммаДляВыводаВЛимитах = 0;
				мСтруктураПоиска = Новый Структура;
				Для Каждого Элемент Из СтруктураПоискаИзменяемых Цикл
					Если Элемент.Ключ="Сценарий" Тогда
						Продолжить;
					КонецЕсли;
					мСтруктураПоиска.Вставить(Элемент.Ключ,Элемент.Значение);
				КонецЦикла;
				Строки = Объект.ОборотыПоСтатьям.НайтиСтроки(мСтруктураПоиска);
				Для Каждого Строка Из Строки Цикл
					 ТекущаяСуммаДляВыводаВЛимитах = ТекущаяСуммаДляВыводаВЛимитах+фин_УправлениеЗависимостямиСтатейБюджетов.ПересчитатьИзКурсаОперации(Строка.Сумма,Строка.ПериодПланирования,Строка.ВалютаОперации,СтрокаОборотовДляКонтроля.ВалютаОперации,Объект);
				КонецЦикла;    
			КонецЕсли;
			Превышение = (СтрокаЛимит.ВыбранныйЛимит + ТекущаяСуммаДляВыводаВЛимитах)-СтрокаЛимит.Лимит;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Период: "+ фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СтрокаЛимит.Период,Объект.Сценарий)+"; Лимит: "+СтрокаЛимит.Лимит+"; Использовано ранее: "+СтрокаЛимит.ВыбранныйЛимит+"; С учетом текущей суммы: "+Строка(СтрокаЛимит.ВыбранныйЛимит + ТекущаяСуммаДляВыводаВЛимитах)+"; Превышение: "+?(Превышение>0,Превышение,"-"));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ИмеетсяРазрезФинансовогоПоказателя(ФинансовыйПоказатель,Измерение)
	Возврат фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,ЭтотОбъект);
КонецФункции

&НаСервере
Процедура ЗадаватьКурсыВалютВДокументеПриИзмененииНаСервере()
	ОбновитьКурсДокумента();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция СписокПереоцениваемыхДокументовНаСервере()
	СписокДокументовДляПереоценки = Новый СписокЗначений;
	СписокДокументовДляПереоценки.ЗагрузитьЗначения(Документы.фин_Бюджет.ПереоцениваемыеДокументы(Объект));
	Возврат СписокДокументовДляПереоценки;
КонецФункции

&НаСервереБезКонтекста
Функция ПланируемыеМероприятияПолучитьПользователя(Ответственный)
	ТаблицаИсполнители = фин_ПроцедурыКалендарногоПланирования.ТаблицаИсполнителей(Ответственный);
	Если ТаблицаИсполнители.Количество()>0 Тогда
		Возврат ТаблицаИсполнители[0].Пользователь;
	Иначе
		Возврат Ответственный;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СтатьиГруппы(ГруппаСтатей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|ГДЕ
		|	фин_СтатьиБюджета.Ссылка В ИЕРАРХИИ(&ГруппаСтатей)";
	
	Запрос.УстановитьПараметр("ГруппаСтатей", ГруппаСтатей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
&НаСервере
Процедура УстановитьЗаголовокФормыДокумента() Экспорт

	АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Заголовок = Строка(Объект.ВидОперации) + ": "+Объект.ФормируемыйБюджет + "/ "+Объект.Сценарий+" / "+НадписьПериодПланирования+" ";
		
	Если Объект.Ссылка.Пустая() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если Объект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		Иначе
			Заголовок = Заголовок + "Не проведен";
		КонецЕсли;
		//Если фин_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументСсылка.Метаданные()) Тогда
		//	Если ДокументСсылка.РучнаяКорректировка Тогда
		//		Заголовок = Заголовок + ": (Ручная корректировка)";
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаСервереБезКонтекста
Функция СписокСтрокСПоддержкойРазреза(ИмяРазреза,Бюджет,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФормульных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
		|	РазрезыУчета.Ссылка КАК ФинансовыйПоказатель
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК РазрезыУчета
		|		ПО фин_СтатьиБюджета.ФинансовыйПоказатель = РазрезыУчета.Ссылка
		|ГДЕ
		|	фин_СтатьиБюджета.Владелец = &Бюджет
		|	И НЕ фин_СтатьиБюджета.Ссылка В (&СписокНаследуемых)
		|	И НЕ фин_СтатьиБюджета.Ссылка В (&СписокЗависимых)
		|	И ВЫБОР
		|			КОГДА фин_СтатьиБюджета.ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ фин_СтатьиБюджета.Ссылка В (&СписокФормульных)
		|					И НЕ фин_СтатьиБюджета.Ссылка В (&СписокРассчитываемых)
		|		КОНЕЦ
		|	И РазрезыУчета.Измерение = &Измерение";
	
	Запрос.УстановитьПараметр("СписокРассчитываемых", 	СписокРассчитываемых);
	Запрос.УстановитьПараметр("СписокНаследуемых", 		СписокНаследуемых);
	Запрос.УстановитьПараметр("СписокЗависимых", 		СписокЗависимых);
	Запрос.УстановитьПараметр("СписокФормульных", 		СписокФормульных);
	Запрос.УстановитьПараметр("Бюджет", 				Бюджет);
	Запрос.УстановитьПараметр("Измерение", 				Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]);
	
	РезультатЗапроса = Запрос.Выполнить();
	Список = Новый СписокЗначений;
	
	Список.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФинансовыйПоказатель"));	
	Возврат Список;
КонецФункции

&НаСервере
Функция ПровестиИЗакрытьНаСервере()
	Если ПроверитьЗаполнение() Тогда
		ФормаПодлежитЗакрытию = Истина;
		Попытка
			Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
		Исключение
			ФормаПодлежитЗакрытию = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПоместитьДанныеДереваВТабличнуюЧастьНаСервере()
	Если НЕ ТребуетсяПередачаДанных Тогда
		Возврат;
	КонецЕсли;
	Объект.ОборотыПоСтатьям.Очистить(); //Дерево = ДанныеФормыВЗначение(ДеревоСтрокБюджета,Тип("ДеревоЗначений"));
	Если ТабличныйВариант Тогда
		СтрокиДерева = ДеревоСтрокБюджета.ПолучитьЭлементы();//Дерево.Строки;//
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.ВидСтроки <> Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
				Продолжить;
			КонецЕсли;
			ПеренестиСтрокуДереваВТабличнуюЧасть(СтрокаДерева);
		КонецЦикла;
	Иначе//Если ТабличныйВариантТолькоДляАналитики Тогда
		СтрокиДерева = ДеревоСтрокБюджета.ПолучитьЭлементы();//Дерево.Строки;//
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.ВидСтроки <> Перечисления.фин_ВидыСтрокБюджета.Итоговая И СтрокаДерева.ВидСтроки <> Перечисления.фин_ВидыСтрокБюджета.ИерархияБюджета И СтрокаДерева.ВидСтроки <> Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
				Продолжить;
			КонецЕсли;
			ОбработатьСтрокиДереваДляПомещенияВТабличнуюЧасть(СтрокаДерева,Новый Структура);
		КонецЦикла;
	КонецЕсли;
	ТребуетсяПередачаДанных = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиДереваДляПомещенияВТабличнуюЧасть(СтрокаДерева,СтруктураЗаполнения)
	СтруктураЗаполненияТекущегоУровня = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураЗаполнения));
	Если НЕ (СтрокаДерева.ВидГруппировки = "ТаблицаАналитики" ИЛИ СтрокаДерева.ВидГруппировки = "") Тогда
		Если СтрокаДерева.ВидГруппировки = "СтатьяБюджета" Тогда
			СтруктураЗаполненияТекущегоУровня.Вставить("СтатьяБюджета",СтрокаДерева.СтатьяБюджета);
			СтруктураЗаполненияТекущегоУровня.Вставить("ФинансовыйПоказатель",СтрокаДерева.ФинансовыйПоказатель);
		Иначе
			СтруктураЗаполненияТекущегоУровня.Вставить(СтрокаДерева.ВидГруппировки,СтрокаДерева[СтрокаДерева.ВидГруппировки]);
		КонецЕсли;
	КонецЕсли;
	Если СтрокаДерева.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Первичная Тогда
		ПеренестиСтрокуДереваВТабличнуюЧасть(СтрокаДерева,СтруктураЗаполненияТекущегоУровня);
	Иначе
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ОбработатьСтрокиДереваДляПомещенияВТабличнуюЧасть(ПодчиненнаяСтрока,СтруктураЗаполненияТекущегоУровня);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтрокуДереваВТабличнуюЧасть(СтрокаДерева,СтруктураЗаполненияТекущегоУровня=Неопределено)
	Для Инд = 1 По ПродолжительностьЦикла Цикл
		Префикс = ?(ПродолжительностьЦикла=1,"",Строка(Инд));
		НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДерева);
		Если СтруктураЗаполненияТекущегоУровня<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаполненияТекущегоУровня);
		КонецЕсли;
		НоваяСтрока.ПериодПланирования = ?(ПродолжительностьЦикла=1,Объект.ПериодПланирования,ОбратноеСоответствиеПериодов.Получить(Инд));
		Если СтруктураПоказателей.Сумма Тогда
			НоваяСтрока.Сумма  = СтрокаДерева["ИтогоСумма"+Префикс];
		КонецЕсли;
		Если СтруктураПоказателей.Количество Тогда
			НоваяСтрока.Количество  = СтрокаДерева["ИтогоКоличество"+Префикс];
		КонецЕсли;
		Если СтруктураПоказателей.Цена Тогда
			Если ПродолжительностьЦикла>1 И НЕ ЕдинаяЦенаВБюджетномПериоде Тогда
				НоваяСтрока.Цена  = СтрокаДерева["Цена"+Префикс];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РежимМедленногоСоединенияНаСервере()
	РежимМедленногоСоединения = НЕ РежимМедленногоСоединения;
	Элементы.ФормаРежимМедленногоСоединения.Пометка = РежимМедленногоСоединения;
	Если НЕ РежимМедленногоСоединения Тогда
		ПоместитьДанныеДереваВТабличнуюЧастьНаСервере();
	КонецЕсли;
	Элементы.ФормаИнтерактивныйРасчетФормул.Видимость = НЕ РежимМедленногоСоединения;
	Элементы.ДеревоСтрокБюджетаПоместитьДанныеВДокумент.Видимость = РежимМедленногоСоединения;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеНаходитсяВИерархии(Подразделение,Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+" КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка В ИЕРАРХИИ(&Родитель)
		|	И Подразделения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Ссылка", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Модифицированность=Истина;
		Объект.ПериодПланирования = РезультатВыбора.НачалоПериода;
		фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
		ПриИзмененииПериода();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция АдресДанныхТЧ()
	ТаблицаЗначений = Объект.ОборотыПоСтатьям.Выгрузить();
	ТаблицаЗначений.Колонки.Цена.Имя 	= "ВалютнаяЦена";
	ТаблицаЗначений.Колонки.Сумма.Имя 	= "ВалютнаяСумма";
	ТаблицаЗначений.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ЦенаУпр",Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если СтрокаТаблицы.ВалютнаяСумма=0 ИЛИ СтрокаТаблицы.ВалютаОперации = ВалютаУправленческогоУчета Тогда
			СтрокаТаблицы.СуммаУпр = СтрокаТаблицы.ВалютнаяСумма;
		Иначе
	
			КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтрокаТаблицы.ВалютаОперации,	СтрокаТаблицы.ПериодПланирования);
			КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, ВалютаУправленческогоУчета,		СтрокаТаблицы.ПериодПланирования);
			
			СтарыйКурс			= КурсСтаройВалюты.Курс;
			СтараяКратность 	= КурсСтаройВалюты.Кратность;
			
			СтрокаТаблицы.СуммаУпр = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ВалютнаяСумма,
													СтрокаТаблицы.ВалютаОперации,ВалютаУправленческогоУчета,
													СтарыйКурс,КурсНовойВалюты.Курс,
													СтараяКратность,КурсНовойВалюты.Кратность);
		КонецЕсли;
		Если СтрокаТаблицы.ЦенаУпр=0 ИЛИ СтрокаТаблицы.ВалютаОперации = ВалютаУправленческогоУчета Тогда
			СтрокаТаблицы.ЦенаУпр = СтрокаТаблицы.ВалютнаяЦена;
		Иначе
	
			КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, СтрокаТаблицы.ВалютаОперации,	СтрокаТаблицы.ПериодПланирования);
			КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, ВалютаУправленческогоУчета,		СтрокаТаблицы.ПериодПланирования);
			
			СтарыйКурс			= КурсСтаройВалюты.Курс;
			СтараяКратность 	= КурсСтаройВалюты.Кратность;
			
			СтрокаТаблицы.ЦенаУпр = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ВалютнаяЦена,
													СтрокаТаблицы.ВалютаОперации,ВалютаУправленческогоУчета,
													СтарыйКурс,КурсНовойВалюты.Курс,
													СтараяКратность,КурсНовойВалюты.Кратность);
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗначений.Колонки.ВалютаОперации.Имя 	= "Валюта";
	АдресТЧ = ПоместитьВоВременноеХранилище(ТаблицаЗначений,УникальныйИдентификатор);
	Возврат АдресТЧ;
КонецФункции

&НаСервере
Функция АдресДанных()
	АдресТЧ = ПоместитьВоВременноеХранилище("",УникальныйИдентификатор);
	Возврат АдресТЧ;
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияЗагрузкиТабличногоДокумента(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(Результат.Адрес);
		Если Результат.Добавлять = Ложь Тогда
			Объект.ОборотыПоСтатьям.Очистить();
		КонецЕсли;
		ЗагружаемыеДанные.Колонки.Валюта.Имя 		= "ВалютаОперации";
		ЗагружаемыеДанные.Колонки.ВалютнаяЦена.Имя 	= "Цена";
		ЗагружаемыеДанные.Колонки.ВалютнаяСумма.Имя = "Сумма";
		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			Если СписокПериодовДляВыбора.НайтиПоЗначению(СтрокаТаблицы.ПериодПланирования)=Неопределено Тогда
				СтрокаТаблицы.ПериодПланирования = Объект.ПериодПланирования;
			КонецЕсли;
			СтрокаТаблицы.ФинансовыйПоказатель = СтрокаТаблицы.СтатьяБюджета.ФинансовыйПоказатель;
			Если фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(СтрокаТаблицы.ФинансовыйПоказатель,ЭтотОбъект) Тогда
				Если СтрокаТаблицы.Сумма=0 И СтрокаТаблицы.СуммаУпр<>0 Тогда
			
					КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, ВалютаУправленческогоУчета,	СтрокаТаблицы.ПериодПланирования);
					КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, Объект.ВалютаДокумента,		СтрокаТаблицы.ПериодПланирования);
					
					СтарыйКурс			= КурсСтаройВалюты.Курс;
					СтараяКратность 	= КурсСтаройВалюты.Кратность;
					
					СтрокаТаблицы.Сумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУпр,
															ВалютаУправленческогоУчета,Объект.ВалютаДокумента,
															СтарыйКурс,КурсНовойВалюты.Курс,
															СтараяКратность,КурсНовойВалюты.Кратность);
				КонецЕсли;
				Если СтрокаТаблицы.Цена=0 И СтрокаТаблицы.ЦенаУпр<>0 Тогда
			
					КурсСтаройВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, ВалютаУправленческогоУчета,	СтрокаТаблицы.ПериодПланирования);
					КурсНовойВалюты 	= фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект, Объект.ВалютаДокумента,		СтрокаТаблицы.ПериодПланирования);
					
					СтарыйКурс			= КурсСтаройВалюты.Курс;
					СтараяКратность 	= КурсСтаройВалюты.Кратность;
					
					СтрокаТаблицы.Цена = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ЦенаУпр,
															ВалютаУправленческогоУчета,Объект.ВалютаДокумента,
															СтарыйКурс,КурсНовойВалюты.Курс,
															СтараяКратность,КурсНовойВалюты.Кратность);
				КонецЕсли;
			Иначе
				СтрокаТаблицы.Сумма=0;
				СтрокаТаблицы.Цена=0;
			КонецЕсли;
			Если НЕ фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоКоличеству(СтрокаТаблицы.ФинансовыйПоказатель,ЭтотОбъект) Тогда
				СтрокаТаблицы.Количество=0;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
			Если ЗначениеЗаполнено(СтрокаДанных.СтатьяБюджета) И СтрокаДанных.СтатьяБюджета.Владелец = Объект.ФормируемыйБюджет И (СтрокаДанных.Сумма<>0 ИЛИ СтрокаДанных.Количество<>0) Тогда
				НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
				Если СписокПериодовДляВыбора.НайтиПоЗначению(НоваяСтрока.ПериодПланирования)=Неопределено Тогда
					НоваяСтрока.ПериодПланирования = Объект.ПериодПланирования;
				КонецЕсли;
				Если Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
					НоваяСтрока.Проект = Объект.Проект;
				ИначеЕсли Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда
					Если ВключаяПодчиненныеПодразделения Тогда
						Если НЕ ПодразделениеНаходитсяВИерархии(НоваяСтрока.УправленческореПодразделение,Объект.УправленческоеПодразделение) Тогда
							НоваяСтрока.УправленческореПодразделение = Объект.УправленческоеПодразделение;
						КонецЕсли;
					Иначе
						НоваяСтрока.УправленческореПодразделение = Объект.УправленческоеПодразделение;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВалютаОперации) И фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.УчетПоСумме(НоваяСтрока.ФинансовыйПоказатель,ЭтотОбъект) Тогда
					НоваяСтрока.ВалютаОперации = Объект.ВалютаДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПриЗаписиВОбороты();
		Модифицированность=Истина;
		Если НЕ ТолькоТабличныеЧасти Тогда
			ОбновитьПолеБюджета();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыОбработкиТабличныхЧастей

&НаСервере
Функция ИсполнениеПоЯчейкеБюджетаНаСервере(Отбор=Неопределено)
	СтруктураПараметровФормы = Новый Структура();
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Поле");
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
	ТаблицаОтбора.Колонки.Добавить("Значение");
	
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "Сценарий";
	НС.Значение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
	НС.ВидСравнения = "Равно";
	
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "ПериодПланирования";
	НС.Значение = ?(ПродолжительностьЦикла=1,Объект.ПериодПланирования,?(?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор).Свойство("ПериодПланирования"),?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор).ПериодПланирования,Объект.ПериодПланирования));
	НС.ВидСравнения = "БольшеИлиРавно";
	
	НС = ТаблицаОтбора.Добавить();
	НС.Поле = "ПериодПланирования";
	НС.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(?(ПродолжительностьЦикла=1,Объект.ПериодПланирования,?(?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор).Свойство("ПериодПланирования"),?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор).ПериодПланирования,Объект.ПериодПланирования)),Объект.Сценарий);
	НС.ВидСравнения = "МеньшеИлиРавно";

	Для Каждого ЭлементСтруктуры Из ?(Отбор=Неопределено,СтруктураПоискаИзменяемых,Отбор) Цикл
		Если ЭлементСтруктуры.Ключ = "ПериодПланирования" ИЛИ ЭлементСтруктуры.Ключ = "ВалютаОперации" Тогда
			Продолжить;
		КонецЕсли;
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = ЭлементСтруктуры.Ключ;
		НС.Значение = ЭлементСтруктуры.Значение;
		НС.ВидСравнения = "Равно";
	КонецЦикла;
	
	Если Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = "Проект";
		НС.Значение = Объект.Проект;
		НС.ВидСравнения = "Равно";
	ИначеЕсли Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения И НЕ ВключаяПодчиненныеПодразделения Тогда
		НС = ТаблицаОтбора.Добавить();
		НС.Поле = "УправленческоеПодразделение";
		НС.Значение = Объект.УправленческоеПодразделение;
		НС.ВидСравнения = "Равно";
	КонецЕсли;
	
	СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_ОборотыБюджетов");
	
	СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
	СтруктураПараметровФормы.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
	СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",КонецДня(ТекущаяДата()));
	СтруктураПараметровФормы.Вставить("ГраницаАктуальности",КонецДня(ТекущаяДата()));
	

	СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(ТаблицаОтбора));
	СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
	Возврат Новый Структура("Действие,Параметр","Отчет.фин_РасшифровкаОборотовПоБюджету.Форма.ФормаОтчета",СтруктураПараметровФормы);
КонецФункции

&НаКлиенте
Процедура ИсполнениеПоЯчейкеБюджета(Команда)
	Если РедактированиеВСКД Тогда
		Если Элементы.БюджетСКД.ТекущаяОбласть=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Отбор = РасшифровкаПоля.Отбор;
			Если РасшифровкаПоля.ВидПоля = "Измерение" Тогда
				Отбор.Вставить(РасшифровкаПоля.Поле,РасшифровкаПоля.Значение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ПолучитьСтруктуруПоискаИзменяемыхСтрок();
		Отбор = Неопределено;
	КонецЕсли;
	РезультатОбработки = ИсполнениеПоЯчейкеБюджетаНаСервере(Отбор);
	ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийПоляСКД


&НаКлиенте
Процедура БюджетСКДВыбор(Элемент, Область, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть)=Тип("РисунокТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	ДанныеПоля = РасшифровкаПоляСКД(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
	СтандартнаяОбработка = ДанныеПоля.СтандартнаяОбработка;
	Если СтандартнаяОбработка Тогда
		Если ДанныеПоля.ВидПоля = "Ресурс" И Элементы.БюджетСКД.ТекущаяОбласть.ЦветФона<>WebЦвета.СветлоЖелтый Тогда
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Итоговое значение поля не редактируется!");
		ИначеЕсли ДанныеПоля.Отбор.Свойство("СтатьяБюджета")=Ложь И ДанныеПоля.ВидПоля = "Ресурс"  Тогда
			СтандартнаяОбработка = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определена статья для внесения изменений!");
		ИначеЕсли ДанныеПоля.Отбор.Свойство("СтатьяБюджета") Тогда
			ВидСтроки = ОпределитьВидСтрокиБюджетаКлиент(ДанныеПоля.Отбор.СтатьяБюджета);
			Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
				СтандартнаяОбработка = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранная статья бюджета """+ДанныеПоля.Отбор.СтатьяБюджета+""" не явлется первичной ("+НРег(ВидСтроки)+")! Редактирование не предусмотрено");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если СтандартнаяОбработка Тогда
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть)=Тип("РисунокТабличногоДокумента") Тогда
			Возврат;
		КонецЕсли;
		Если СписокФорматированныхЯчеек.НайтиПоЗначению(Элементы.БюджетСКД.ТекущаяОбласть.Имя)<>Неопределено Тогда
			//СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если НЕ Элементы.БюджетСКД.ТекущаяОбласть.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Возврат;
		КонецЕсли;
		//Если Найти(Элементы.БюджетСКД.ТекущаяОбласть.Имя,":")<>0 Тогда
		//	Возврат;
		//КонецЕсли;
		Если ТипЗнч(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
			РасшифровкаПоля = ДанныеПоля;
			Если РасшифровкаПоля.ВидПоля = "Ресурс" Тогда
				Попытка
					ЗначениеОбласти = ?(ЗначениеЗаполнено(Элементы.БюджетСКД.ТекущаяОбласть.Текст),Число(СтрЗаменить(СтрЗаменить(Элементы.БюджетСКД.ТекущаяОбласть.Текст,",","."),Символ(160),"")),0);
				Исключение
					ЗначениеОбласти = 0;
				КонецПопытки;
				Элементы.БюджетСКД.ТекущаяОбласть.СодержитЗначение 	= Истина;
				Элементы.БюджетСКД.ТекущаяОбласть.ТипЗначения 		= РасшифровкаПоля.ТипПоля;
				Элементы.БюджетСКД.ТекущаяОбласть.Значение 			= ЗначениеОбласти;
			ИначеЕсли РасшифровкаПоля.ВидПоля = "Измерение" Тогда
				ЗначениеОбласти = РасшифровкаПоля.Значение;
				Элементы.БюджетСКД.ТекущаяОбласть.СодержитЗначение 	= Истина;
				Элементы.БюджетСКД.ТекущаяОбласть.ТипЗначения 		= РасшифровкаПоля.ТипПоля;
				Элементы.БюджетСКД.ТекущаяОбласть.Значение 			= ЗначениеОбласти;
				Если РасшифровкаПоля.Поле = "ПериодПланирования" Тогда
					Если СписокПериодовДляВыбора.НайтиПоЗначению(ЗначениеОбласти) <> Неопределено Тогда
						Элементы.БюджетСКД.ТекущаяОбласть.Формат = "ДФ='''"+СписокПериодовДляВыбора.НайтиПоЗначению(ЗначениеОбласти)+"'''";
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
			СписокФорматированныхЯчеек.Добавить(Элементы.БюджетСКД.ТекущаяОбласть.Имя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетСКДПриИзмененииСодержимогоОбласти(Элемент, Область)
	Попытка
		МассивОбластейДокумента = Новый Массив;
		Если ТипЗнч(РасшифровкаВыбраннойЯчейки) = Тип("ФиксированныйМассив") Тогда
			Для Каждого ЭлементРасшифровки Из РасшифровкаВыбраннойЯчейки Цикл
				ОбластьДокумента = БюджетСКД.Область(ЭлементРасшифровки.Имя);
				МассивОбластейДокумента.Добавить(ОбластьДокумента);
				ОбластьДокумента.Расшифровка=ЭлементРасшифровки.Расшифровка;
			КонецЦикла;
		Иначе	
			Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка=РасшифровкаВыбраннойЯчейки;
			МассивОбластейДокумента.Добавить(Элементы.БюджетСКД.ТекущаяОбласть);
		КонецЕсли;
		ОбновитьПоле = Ложь;
		РедактированиеОднойЯчейки = МассивОбластейДокумента.Количество()=1;
		Для Каждого ОбластьЯчеек Из МассивОбластейДокумента Цикл
			ДанныеПоля = РасшифровкаПоляСКД(ОбластьЯчеек.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
			Если ДанныеПоля.Поле = Неопределено Тогда
				Возврат;
			ИначеЕсли ДанныеПоля.Поле = "ПериодПланирования" Тогда
				Если СписокПериодовДляВыбора.НайтиПоЗначению(ОбластьЯчеек.Значение) = Неопределено Тогда
					ОбластьЯчеек.Значение = ДанныеПоля.Значение;
					Если РедактированиеОднойЯчейки Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указан недопустимый период планирования! Возвращено исходное значение");
					КонецЕсли;
					Продолжить;
				Иначе
					ОбластьЯчеек.Формат = "ДФ='''"+СписокПериодовДляВыбора.НайтиПоЗначению(ОбластьЯчеек.Значение)+"'''";
				КонецЕсли;
			ИначеЕсли ДанныеПоля.Поле = "Проект" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
				Если ОбластьЯчеек.Значение<>Объект.Проект Тогда
					ОбластьЯчеек.Значение = ДанныеПоля.Значение;
					Если РедактированиеОднойЯчейки Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указан недопустимый проект! Возвращено исходное значение");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеПоля.Поле = "УправленческоеПодразделение" И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
				Если ВключаяПодчиненныеПодразделения Тогда
					Если ОбластьЯчеек.Значение<>Объект.УправленческоеПодразделение И НЕ ПодразделениеНаходитсяВИерархии(ОбластьЯчеек.Значение,Объект.УправленческоеПодразделение) Тогда
						ОбластьЯчеек.Значение = ДанныеПоля.Значение;
						Если РедактированиеОднойЯчейки Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указано недопустимое подразделение! Возвращено исходное значение");
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				Иначе
					Если ОбластьЯчеек.Значение<>Объект.УправленческоеПодразделение Тогда
						ОбластьЯчеек.Значение = ДанныеПоля.Значение;
						Если РедактированиеОднойЯчейки Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указано недопустимое подразделение! Возвращено исходное значение");
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ОбластьЯчеек.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				Продолжить;
			КонецЕсли;
			Если ДанныеПоля.ВидПоля = "Ресурс" И ОбластьЯчеек.СодержитЗначение = Ложь Тогда
					Попытка
						ЗначениеОбласти = ?(ЗначениеЗаполнено(ОбластьЯчеек.Текст),Число(СтрЗаменить(СтрЗаменить(ОбластьЯчеек.Текст,",","."),Символ(160),"")),0);
					Исключение
						ЗначениеОбласти = 0;
					КонецПопытки;
					ОбластьЯчеек.СодержитЗначение 	= Истина;
					ОбластьЯчеек.ТипЗначения 		= ДанныеПоля.ТипПоля;
					ОбластьЯчеек.Значение 			= ЗначениеОбласти;
			КонецЕсли;
			ВернутьПредыдущееЗначение = Ложь;
			Если ДанныеПоля.Отбор.Свойство("СтатьяБюджета")=Ложь И ДанныеПоля.ВидПоля = "Ресурс" Тогда
				ВернутьПредыдущееЗначение = Истина;
				Если РедактированиеОднойЯчейки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определена статья для внесения изменений! Возвращено исходное значение");
				КонецЕсли;
			ИначеЕсли ДанныеПоля.Отбор.Свойство("СтатьяБюджета") Тогда
				ВидСтроки = ОпределитьВидСтрокиБюджетаКлиент(ДанныеПоля.Отбор.СтатьяБюджета);
				Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
					ВернутьПредыдущееЗначение = Истина;
					Если РедактированиеОднойЯчейки Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Редактируемая статья бюджета не явлется первичной ("+НРег(ВидСтроки)+")! Возвращено исходное значение");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ДанныеПоля.ВидПоля="Ресурс" И ПродолжительностьЦикла>1 И ДанныеПоля.Отбор.Свойство("ПериодПланирования")=Ложь Тогда
				ВернутьПредыдущееЗначение = Истина;
				Если РедактированиеОднойЯчейки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не определен период планирования для внесения изменений! Возвращено исходное значение");
				КонецЕсли;
			КонецЕсли;

			СтрокиИзменений = СписокИзмененийВЯчейкахОтчета.НайтиСтроки(Новый Структура("Ячейка",ОбластьЯчеек.Имя));
			Если СтрокиИзменений.Количество() =0 Тогда
				ПредыдущееЗначение 		= ДанныеПоля.Значение;
				Если ВернутьПредыдущееЗначение Тогда
					ОбластьЯчеек.Значение = ПредыдущееЗначение;
				Иначе
					НоваяСтрока 			= СписокИзмененийВЯчейкахОтчета.Добавить();
					НоваяСтрока.Ячейка 		= ОбластьЯчеек.Имя;
					НоваяСтрока.Значение	= ОбластьЯчеек.Значение;
					НоваяСтрока.Поле		= ДанныеПоля.Поле;
					Если НЕ РежимМедленногоСоединения Тогда
						ПрименитьИзменениеЧерезСКД(ДанныеПоля,ПредыдущееЗначение,ОбластьЯчеек.Значение,ОбновитьПоле);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПредыдущееЗначение 		= СтрокиИзменений[0].Значение;
				Если ВернутьПредыдущееЗначение Тогда
					ОбластьЯчеек.Значение = ПредыдущееЗначение;
				Иначе
					СтрокиИзменений[0].Значение	= ОбластьЯчеек.Значение;
					Если НЕ РежимМедленногоСоединения Тогда
						ПрименитьИзменениеЧерезСКД(ДанныеПоля,ПредыдущееЗначение,ОбластьЯчеек.Значение,ОбновитьПоле);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ОбновитьПоле Тогда
			Адрес = Элементы.БюджетСКД.ТекущаяОбласть.Имя;
			НастройкаРедактированияПриИзмененииНаСервере();
			Попытка
				Элементы.БюджетСКД.ТекущаяОбласть = БюджетСКД.Область(Адрес);
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неизвестное действие пользователя вызвало ошибку:
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура БюджетСКДПриАктивизацииОбласти(Элемент)
	ИмяОбласти = Элементы.БюджетСКД.ТекущаяОбласть.Имя;
	Элементы.ДекорацияИмя.Заголовок = ИмяОбласти;
	Элементы.ДекорацияРасшифровка.Заголовок = Строка(Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка);
	
	Если Найти(ИмяОбласти,":")=0 Тогда
		РасшифровкаВыбраннойЯчейки = Элементы.БюджетСКД.ТекущаяОбласть.Расшифровка;
	Иначе
		МассивРасшифровок = Новый Массив;
		НачальнаяЯчейка	= Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);
		КонечнаяЯчейка 	= Сред(ИмяОбласти,Найти(ИмяОбласти,":")+1);
		РядНачальный = ?(Найти(НачальнаяЯчейка,"R")=0,0,Число(Сред(НачальнаяЯчейка,2,Найти(НачальнаяЯчейка,"C")-2)));
		РядКонечный  = ?(Найти(КонечнаяЯчейка,"R")=0,0,Число(Сред(КонечнаяЯчейка,2,Найти(КонечнаяЯчейка,"C")-2)));
		КолонкаНачальная = ?(Найти(НачальнаяЯчейка,"C")=0,0,Число(Сред(НачальнаяЯчейка,Найти(НачальнаяЯчейка,"C")+1)));
		КолонкаКонечная  = ?(Найти(КонечнаяЯчейка,"C")=0,0,Число(Сред(КонечнаяЯчейка,Найти(КонечнаяЯчейка,"C")+1)));
		Для Ряд = Мин(РядНачальный,РядКонечный) По Макс(РядНачальный,РядКонечный) Цикл
			Для Колонка = Мин(КолонкаНачальная,КолонкаКонечная) По Макс(КолонкаНачальная,КолонкаКонечная) Цикл
				ИмяЯчейки = "R"+Формат(Ряд,"ЧН=0; ЧГ=")+"C"+Формат(Колонка,"ЧН=0; ЧГ=");
				Ячейка = БюджетСКД.Область(ИмяЯчейки);
				МассивРасшифровок.Добавить(Новый Структура("Имя,Расшифровка",ИмяЯчейки,Ячейка.Расшифровка));
			КонецЦикла;
		КонецЦикла;
		РасшифровкаВыбраннойЯчейки = Новый ФиксированныйМассив(МассивРасшифровок);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыРаботыССКД

&НаКлиенте
Процедура ПрименитьИзменениеЧерезСКД(ДанныеПоля,ПредыдущееЗначение,Знач НовоеЗначение,ОбновитьПоле)
	СтруктураПоиска = ДанныеПоля.Отбор;
	Если ДанныеПоля.ВидПоля = "Измерение" Тогда
		СтруктураПоиска.Вставить(ДанныеПоля.Поле,ПредыдущееЗначение);
	КонецЕсли;
	СтрокиДокумента = Объект.ОборотыПоСтатьям.НайтиСтроки(СтруктураПоиска);
	Если СтрокиДокумента.Количество()=0 Тогда
		НоваяСтрока = Объект.ОборотыПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		ПриДобавленииВОбороты(НоваяСтрока);
		НоваяСтрока.ФинансовыйПоказатель = ФинансовыйПоказательСтатьи(НоваяСтрока.СтатьяБюджета);
		Если Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
			НоваяСтрока.Проект = Объект.Проект;
		ИначеЕсли Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") И НЕ ЗначениеЗаполнено(НоваяСтрока.УправленческоеПодразделение) Тогда
			НоваяСтрока.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
		КонецЕсли;
		Если НЕ СтруктураПоиска.Свойство("ВалютаОперации") Тогда
			НоваяСтрока.ВалютаОперации = Объект.ВалютаДокумента;
		КонецЕсли;
		СтрокиДокумента = Новый Массив;
		СтрокиДокумента.Добавить(НоваяСтрока);
	КонецЕсли;
	Первая = Истина;
	Если ДанныеПоля.Поле="СуммаСценария" ИЛИ ДанныеПоля.Поле="ЦенаСценария" Тогда
		ВалютаСценария = ПолеОбъекта(Объект.Сценарий,"Валюта");
	КонецЕсли;
	Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
		Если ДанныеПоля.Поле="СуммаУпр" Тогда
			Если Первая Тогда
				Если СтрокаДокумента.ВалютаОперации = ВалютаУправленческогоУчета Тогда
					СтрокаДокумента.Сумма = НовоеЗначение;
				Иначе
					КурсУпр = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаУправленческогоУчета,СтрокаДокумента.ПериодПланирования);
					СтрокаДокумента.Сумма = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПересчитатьВВалюту(НовоеЗначение,ВалютаУправленческогоУчета,СтрокаДокумента.ПериодПланирования,КурсУпр.Курс,КурсУпр.Кратность,СтрокаДокумента.ВалютаОперации,Объект.Сценарий,КЭШКурсов);
				КонецЕсли;
			Иначе
				СтрокаДокумента.Сумма = 0;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="СуммаСценария" Тогда
			Если Первая Тогда
				Если СтрокаДокумента.ВалютаОперации = ВалютаСценария Тогда
					СтрокаДокумента.Сумма = НовоеЗначение;
				Иначе
					КурсУпр = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаСценария,СтрокаДокумента.ПериодПланирования);
					СтрокаДокумента.Сумма = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПересчитатьВВалюту(НовоеЗначение,ВалютаСценария,СтрокаДокумента.ПериодПланирования,КурсУпр.Курс,КурсУпр.Кратность,СтрокаДокумента.ВалютаОперации,Объект.Сценарий,КЭШКурсов);
				КонецЕсли;
			Иначе
				СтрокаДокумента.Сумма = 0;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="ВалютнаяСумма" Тогда
			Если Первая Тогда
				Если СтрокаДокумента.ВалютаОперации = Объект.ВалютаДокумента ИЛИ СтруктураПоиска.Свойство("ВалютаОперации") Тогда
					СтрокаДокумента.Сумма = НовоеЗначение;
				Иначе
					КурсУпр = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,Объект.ВалютаДокумента,СтрокаДокумента.ПериодПланирования);
					СтрокаДокумента.Сумма = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПересчитатьВВалюту(НовоеЗначение,Объект.ВалютаДокумента,СтрокаДокумента.ПериодПланирования,КурсУпр.Курс,КурсУпр.Кратность,СтрокаДокумента.ВалютаОперации,Объект.Сценарий,КЭШКурсов);
				КонецЕсли;
			Иначе
				СтрокаДокумента.Сумма = 0;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="Количество" Тогда
			Если Первая Тогда
				СтрокаДокумента.Количество = НовоеЗначение;
				Если СтруктураПоказателей.Сумма И СтруктураПоказателей.Цена Тогда
					
				КонецЕсли;
			Иначе
				СтрокаДокумента.Количество = 0;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="ВалютнаяЦена" Тогда
			СтрокаДокумента.Цена = НовоеЗначение;
			Если СтрокаДокумента.Цена<>0 Тогда
				СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="ЦенаУпр" Тогда
			Если СтрокаДокумента.ВалютаОперации = ВалютаУправленческогоУчета Тогда
				СтрокаДокумента.Цена = НовоеЗначение;
			Иначе
				КурсУпр = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаУправленческогоУчета,СтрокаДокумента.ПериодПланирования);
				СтрокаДокумента.Цена = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПересчитатьВВалюту(НовоеЗначение,ВалютаУправленческогоУчета,СтрокаДокумента.ПериодПланирования,КурсУпр.Курс,КурсУпр.Кратность,СтрокаДокумента.ВалютаОперации,Объект.Сценарий,КЭШКурсов);
			КонецЕсли;
			Если СтрокаДокумента.Цена<>0 Тогда
				СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
			КонецЕсли;
		ИначеЕсли ДанныеПоля.Поле="ЦенаСценария" Тогда
			Если СтрокаДокумента.ВалютаОперации = ВалютаСценария Тогда
				СтрокаДокумента.Цена = НовоеЗначение;
			Иначе
				КурсУпр = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПолучитьКурсВалютыИзКЭШа(ЭтотОбъект,ВалютаСценария,СтрокаДокумента.ПериодПланирования);
				СтрокаДокумента.Цена = фин_РаботаСДаннымиЭкземпляраБюджетаКлиентСервер.ПересчитатьВВалюту(НовоеЗначение,ВалютаСценария,СтрокаДокумента.ПериодПланирования,КурсУпр.Курс,КурсУпр.Кратность,СтрокаДокумента.ВалютаОперации,Объект.Сценарий,КЭШКурсов);
			КонецЕсли;
			Если СтрокаДокумента.Цена<>0 Тогда
				СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
			КонецЕсли;
		Иначе
			СтрокаДокумента[ДанныеПоля.Поле] = НовоеЗначение;
		КонецЕсли;
		Первая = Ложь;
	КонецЦикла;
	Если ДанныеПоля.ВидПоля = "Измерение" Тогда
		ОбновитьПоле = Истина
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция РасшифровкаПоляСКД(Расшифровка,Адрес,ТочностьКоличественныхПоказателей,Сценарий,ВестиУчетПоПлановойНоменклатуре)
	Если ТипЗнч(Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка,Адрес,ТочностьКоличественныхПоказателей,Сценарий,ВестиУчетПоПлановойНоменклатуре);
		Если РезультатОбработки = Неопределено Тогда
			Возврат Новый Структура("ВидПоля,Поле,Значение,Отбор,СтандартнаяОбработка",,,,Новый Структура,Ложь);
		Иначе
			Возврат РезультатОбработки;
		КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("ВидПоля,Поле,Значение,Отбор,СтандартнаяОбработка",,,,Новый Структура,Ложь);
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьРасшифровку(Расшифровка,Адрес,ТочностьКоличественныхПоказателей,Сценарий,ВестиУчетПоПлановойНоменклатуре)
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(Адрес);
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			ТаблицаОтбора = Новый Структура;
			

			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки,Сценарий,ВестиУчетПоПлановойНоменклатуре);
			СтандартнаяОбработка = Истина;
			Если Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления.Найти(Данные[0].Поле)<>Неопределено Тогда
				ТипПоля = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(Перечисления.фин_ФактическиеПоказателиБюджетирования[Данные[0].Поле]);
			Иначе
				СтандартнаяОбработка = Ложь;
				ТипПоля = Новый ОписаниеТипов("Неопределено");
			КонецЕсли;
			
			Возврат Новый Структура("ВидПоля,Поле,Значение,ТипПоля,СтандартнаяОбработка,Отбор","Измерение",Данные[0].Поле,Данные[0].Значение,ТипПоля,СтандартнаяОбработка,ТаблицаОтбора);
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
//			Ресурс = Данные[0].Поле;
			ТаблицаОтбора = Новый Структура;
			
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки,Сценарий,ВестиУчетПоПлановойНоменклатуре);
			
			Если Найти(Данные[0].Поле,"Сумма")<>0 Тогда
				ТипПоля = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2))				
			ИначеЕсли Найти(Данные[0].Поле,"Количество")<>0 Тогда
				ТипПоля = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15- (5-ТочностьКоличественныхПоказателей),ТочностьКоличественныхПоказателей))				
			Иначе
				ТипПоля = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2))				
			КонецЕсли;

			Возврат Новый Структура("ВидПоля,Поле,Значение,ТипПоля,СтандартнаяОбработка,Отбор","Ресурс",Данные[0].Поле,Данные[0].Значение,ТипПоля,Истина,ТаблицаОтбора);
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки,Сценарий,ВестиУчетПоПлановойНоменклатуре)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле = "ЕдиницаИзмерения" ИЛИ Найти(ПолеРодителя.Поле,".")<>0 ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитыТабличнойЧастиБюджета().Найти(НРег(ПолеРодителя.Поле))=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ПолеРодителя.Иерархия Тогда
					Продолжить;
				КонецЕсли;
				Попытка
					ТаблицаОтбора.Вставить(ПолеРодителя.Поле,?(ЗначениеЗаполнено(ПолеРодителя.Значение),ПолеРодителя.Значение,ПустоеЗначениеРазрезаКлиентСервер(ПолеРодителя.Поле,Неопределено,Новый Структура("ПоНоменклатурнымГруппам",Ложь),Сценарий,ВестиУчетПоПлановойНоменклатуре)));
				Исключение
					ТаблицаОтбора.Вставить(ПолеРодителя.Поле,ПолеРодителя.Значение);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки,Сценарий,ВестиУчетПоПлановойНоменклатуре);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастройкаРедактированияПриИзмененииНаСервере()
	БюджетСКД.Очистить();
	Если ЗначениеЗаполнено(НастройкаРедактирования) Тогда
		Если НастройкаРедактирования.Бюджет<>Объект.ФормируемыйБюджет Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанная пользовательская настройка редактирования создана для другого бюджета, поле бюджета не сформировано");
			Возврат;
		КонецЕсли;
		СписокФорматированныхЯчеек.Очистить();
		 Отчет = Отчеты.фин_ПечатьБюджета.Создать();
		 Отчет.ВидФормы 	= "Редактор";
		 Отчет.Документ 	= Объект.Ссылка;
		 Отчет.Организация 	= Объект.Организация;
		 Отчет.Сценарий 	= Объект.Сценарий;
		 Отчет.НачалоПериодаПланирования = Объект.ПериодПланирования;
		 Отчет.ДокументОбъектДляРедактирования = Объект;
		 МетаданныеОтчета 	= Отчет.Метаданные();
		 Для Каждого Реквизит Из МетаданныеОтчета.Реквизиты  Цикл
			 Если Реквизит.Имя = "ВидФормы" ИЛИ Реквизит.Имя = "Документ" ИЛИ Реквизит.Имя = "Организация" ИЛИ Реквизит.Имя = "Сценарий" ИЛИ Реквизит.Имя = "НачалоПериодаПланирования" Тогда
				 Продолжить;
			 КонецЕсли;
			 Отчет[Реквизит.Имя] = Справочники.фин_НастройкиОтчетовПоБюджетам.ЗначениеРеквизитаОтчетаИзТекущейНастройки(Реквизит.Имя,НастройкаРедактирования);
		 КонецЦикла;
		 Для Каждого ТЧ Из МетаданныеОтчета.ТабличныеЧасти Цикл
			 Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ТабличныеЧастиСправочникаНастроекОтчетов().Найти(НРег(ТЧ.Имя))<>Неопределено Тогда
				 Для Каждого СтрокаТЧ Из НастройкаРедактирования[ТЧ.Имя] Цикл
					 НС = Отчет[ТЧ.Имя].Добавить();
					 ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ);
				 КонецЦикла;
			 КонецЕсли;
		 КонецЦикла;
		 ОтборОтчета = НастройкаРедактирования.Отбор.Выгрузить();
		 ОтборОтчета.Колонки["Значение"].Имя = "ЗначениеСсылка";
		 ОтборОтчета.Колонки.Добавить("Значение");
		 Для Каждого СтрокаОтбор Из ОтборОтчета Цикл
			  СтрокаОтбор.Значение = ?(ЗначениеЗаполнено(СтрокаОтбор.ЗначениеСписок),ЗначениеИзСтрокиВнутр(СтрокаОтбор.ЗначениеСписок),СтрокаОтбор.ЗначениеСсылка);
		  КонецЦикла;
		Попытка
			Отчет.Скомпоновать(БюджетСКД,ОтборОтчета.Скопировать(Новый Структура("Использование",Истина)));
			ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Отчет.ДанныеРасшифровки,УникальныйИдентификатор);
			
			//тест
			Для Ряд = 1 По БюджетСКД.ВысотаТаблицы Цикл
				Для Колонка = 1 По БюджетСКД.ШиринаТаблицы Цикл
					ОбластьЯчеек = БюджетСКД.Область("R"+Формат(Ряд,"ЧН=0; ЧГ=")+"C"+Формат(Колонка,"ЧН=0; ЧГ="));
					ОбластьЯчеек.Защита 	= Истина;
					Если ТипЗнч(ОбластьЯчеек)=Тип("РисунокТабличногоДокумента") Тогда
						Продолжить;
					КонецЕсли;
					ДанныеПоля = РасшифровкаПоляСКД(ОбластьЯчеек.Расшифровка,ДанныеРасшифровки,ТочностьКоличественныхПоказателей,Объект.Сценарий,ВестиУчетПоПлановойНоменклатуре);
					СтандартнаяОбработка = ДанныеПоля.СтандартнаяОбработка;
					Если СтандартнаяОбработка Тогда
						Если ДанныеПоля.ВидПоля = "Ресурс" И ОбластьЯчеек.ЦветФона<>WebЦвета.СветлоЖелтый Тогда
							СтандартнаяОбработка = Ложь;
						ИначеЕсли ДанныеПоля.Отбор.Свойство("СтатьяБюджета")=Ложь И ДанныеПоля.ВидПоля = "Ресурс"  Тогда
							СтандартнаяОбработка = Ложь;
						ИначеЕсли ДанныеПоля.Отбор.Свойство("СтатьяБюджета") Тогда
							ВидСтроки = ОпределитьВидСтрокиБюджета(ДанныеПоля.Отбор.СтатьяБюджета);
							Если ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная") Тогда
								СтандартнаяОбработка = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если СтандартнаяОбработка Тогда
						Если ТипЗнч(ОбластьЯчеек)=Тип("РисунокТабличногоДокумента") Тогда
							Продолжить;
						КонецЕсли;
						Если СписокФорматированныхЯчеек.НайтиПоЗначению(ОбластьЯчеек.Имя)<>Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Если НЕ ОбластьЯчеек.ТипОбласти=ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
							Продолжить;
						КонецЕсли;
						//Если Найти(Элементы.БюджетСКД.ТекущаяОбласть.Имя,":")<>0 Тогда
						//	Возврат;
						//КонецЕсли;
						Если ТипЗнч(ОбластьЯчеек.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
							РасшифровкаПоля = ДанныеПоля;
							Если РасшифровкаПоля.ВидПоля = "Ресурс" Тогда
								Попытка
									ЗначениеОбласти = ?(ЗначениеЗаполнено(ОбластьЯчеек.Текст),Число(СтрЗаменить(СтрЗаменить(ОбластьЯчеек.Текст,",","."),Символ(160),"")),0);
								Исключение
									ЗначениеОбласти = 0;
								КонецПопытки;
								ОбластьЯчеек.Защита 	= Ложь;
								ОбластьЯчеек.СодержитЗначение 	= Истина;
								ОбластьЯчеек.ТипЗначения 		= РасшифровкаПоля.ТипПоля;
								ОбластьЯчеек.Значение 			= ЗначениеОбласти;
								Попытка
									ОбластьЯчеек.УстановитьЭлементУправления(Тип("ПолеВвода"));
								Исключение
									ОбластьЯчеек.УстановитьЭлементУправления(Тип("ПолеВводаФормы"));
								КонецПопытки;
							ИначеЕсли РасшифровкаПоля.ВидПоля = "Измерение" Тогда
								ЗначениеОбласти = РасшифровкаПоля.Значение;
								ОбластьЯчеек.Защита 	= Ложь;
								ОбластьЯчеек.СодержитЗначение 	= Истина;
								ОбластьЯчеек.ТипЗначения 		= РасшифровкаПоля.ТипПоля;
								ОбластьЯчеек.Значение 			= ЗначениеОбласти;
								Если РасшифровкаПоля.Поле = "ПериодПланирования" Тогда
									Если СписокПериодовДляВыбора.НайтиПоЗначению(ЗначениеОбласти) <> Неопределено Тогда
										ОбластьЯчеек.Формат = "ДФ='''"+СписокПериодовДляВыбора.НайтиПоЗначению(ЗначениеОбласти)+"'''";
									КонецЕсли;
								КонецЕсли;		
								Попытка
									ОбластьЯчеек.УстановитьЭлементУправления(Тип("ПолеВвода"));
								Исключение
									ОбластьЯчеек.УстановитьЭлементУправления(Тип("ПолеВводаФормы"));
								КонецПопытки;
							КонецЕсли;
							СписокФорматированныхЯчеек.Добавить(ОбластьЯчеек.Имя);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//тест
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле бюджета не сформировано:
			|	"+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
