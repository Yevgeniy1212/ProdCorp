#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ ПО ТЕКУЩЕМУ БЮДЖЕТУ

// Инициирует процесс заполнения ТЧ "ЗависимыеОбороты"
//
Процедура РассчитатьЗависимыеОбороты(БюджетированиеПоОрганизациям,ВестиУчетПоПроектам)
	ТаблицаЗависимыеОбороты = ЗависимыеОбороты.Выгрузить();
	ТаблицаОборотыПоСтатьям = ОборотыПоСтатьям.Выгрузить();
	фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(ФормируемыйБюджет,ТаблицаОборотыПоСтатьям,ТаблицаЗависимыеОбороты,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланирования,ВестиУчетПоПроектам);
	ЗависимыеОбороты.Загрузить(ТаблицаЗависимыеОбороты);
	Документы.фин_Бюджет.СвернутьЗависимости(ЭтотОбъект);
КонецПроцедуры //РассчитатьЗависимыеОбороты


//Процедура ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Попытка
		Заголовок = Строка(Ссылка)+" ("+Строка(ВидОперации)+")";
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Если Найти(ОписаниеОшибки,"У пользователя недостаточно прав на исполнение операции над базой данных")<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя недостаточно прав на исполнение операции над базой данных",,,,Отказ);
			Возврат;
		Иначе
			ВызватьИсключение ОписаниеОшибки; 
		КонецЕсли;
	КонецПопытки;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	фин_ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.фин_Бюджет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ТаблицаДанныхДокумента = фин_УправлениеБюджетированием.ПодготовитьТаблицуДанныхДокументаБюджет(ПараметрыПроведения.ТаблицаДанныхДокумента,ПараметрыПроведения.Реквизиты[0]);
	
	// по регистру "Обороты бюджетов"
	фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ТаблицаДанныхДокумента, Движения, Отказ,,"фин_УправлениеБюджетированием","ЗарегистрироватьДвиженияПоРегиструОборотыБюджетов");	
	
	// по регистру "фин_МониторингКорректировок"
	фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ТаблицаДанныхДокумента, Движения, Отказ,,"фин_УправлениеБюджетированием","ЗарегистрироватьДвиженияПоРегиструКорректировок",,"(Реквизиты.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Корректировка ИЛИ Реквизиты.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов) И Реквизиты.УчитыватьПричиныКорректировок=Истина");	
	
	фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПланируемыеМероприятия, Движения, Отказ,"ПланируемыеМероприятия",,,"фин_КалендарныеПланыБюджетныхКампаний","Реквизиты.ПланироватьМероприятияПоДостижениюБюджетныхПоказателей=ИСТИНА");	
	
	Если ПараметрыПроведения.Реквизиты[0].ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		фин_УправлениеБюджетированием.ЗарегистрироватьДвиженияПоСформированнымБюджетам(ПараметрыПроведения.Реквизиты, Движения,Отказ);
		
		// по регистру "фин_КонтролируемыеФинансовыеПоказатели"
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ТаблицаДанныхДокумента, Движения, Отказ,,"фин_УправлениеБюджетированием","ЗарегистрироватьДвиженияПоРегиструКонтролируемыхОборотов");	
		
		// по регистру "фин_КонтролируемыеФинансовыеПоказатели" для автоматически регистрируеымх лимтов
		фин_УправлениеБюджетированием.ЗарегистрироватьДвиженияПоАвтоматическиРегистрируемымЛимитам(ПараметрыПроведения.Реквизиты,ТаблицаДанныхДокумента,ПараметрыПроведения.ТаблицаНастройкиРегулярногоКонтроляПоказателей,ПараметрыПроведения.ТаблицаУстановкаОграниченийПоБюджетам, Движения, Отказ);	
		
		// по регистру "фин_МониторингНепринятияСтрокБюджетов"
		//Если ПараметрыПроведения.Реквизиты[0].УчитыватьНепринятыеСтрокиБюджетов Тогда
			фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ТаблицаДанныхДокумента, Движения, Отказ,,"фин_УправлениеБюджетированием","ЗарегистрироватьДвиженияПоРегиструОтклонений",,"Реквизиты.УчитыватьНепринятыеСтрокиБюджетов=Истина");	
		//КонецЕсли;
		
		// По регистру бухгалтерии "Бюджетирование"
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлануСчетовБюджетирования") Тогда
			фин_ПроцедурыУчетаПоУправленческомуПлануСчетовСервер.ЗарегистрироватьДвиженияПоРегиструБухгалтерииБюджетирование(ЭтотОбъект,ПараметрыПроведения.Реквизиты, Движения,Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура ПередЗаписью
// 
Процедура ПередЗаписью(Отказ,РежимЗаписи,РежимПроведения)
	Если ОбменДанными.Загрузка ИЛИ ПометкаУдаления ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Сценарий.Пустая() Тогда
		ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,Сценарий);
	КонецЕсли;
	
	КЭШ_ПризнакиУчета = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОборотыПоСтатьям.НомерСтроки,
		|	ОборотыПоСтатьям.СтатьяБюджета,
		|	ОборотыПоСтатьям.Номенклатура,
		|	ОборотыПоСтатьям.Проект,
		|	ОборотыПоСтатьям.УправленческоеПодразделение,
		|	ОборотыПоСтатьям.ПериодПланирования,
		|	ОборотыПоСтатьям.ВалютаОперации,
		|	ОборотыПоСтатьям.ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Строки
		|ИЗ
		|	&ОборотыПоСтатьям КАК ОборотыПоСтатьям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Строки.НомерСтроки,
		|	фин_СтатьиБюджета.ФинансовыйПоказатель,
		|	ВЫБОР
		|		КОГДА ВТ_Строки.ПериодПланирования = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА &ПериодПланирования
		|		ИНАЧЕ ВТ_Строки.ПериодПланирования
		|	КОНЕЦ КАК ПериодПланирования,
		|	ВЫБОР
		|		КОГДА фин_ФинансовыеПоказатели.УчетПоСумме
		|				И ВТ_Строки.ВалютаОперации = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА &ВалютаДокумента
		|		ИНАЧЕ ВТ_Строки.ВалютаОперации
		|	КОНЕЦ КАК ВалютаОперации,
		|	ВЫБОР
		|		КОГДА &УровеньДетализацииБюджета = ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения)
		|				И ВЫБОР
		|					КОГДА &ВключаяПодчиненныеПодразделения
		|						ТОГДА ВТ_Строки.УправленческоеПодразделение = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|					ИНАЧЕ ВТ_Строки.УправленческоеПодразделение <> &УправленческоеПодразделение
		|				КОНЕЦ
		|			ТОГДА &УправленческоеПодразделение
		|		ИНАЧЕ ВТ_Строки.УправленческоеПодразделение
		|	КОНЕЦ КАК УправленческоеПодразделение,
		|	ВЫБОР
		|		КОГДА &УровеньДетализацииБюджета = ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта)
		|				И ВТ_Строки.Проект <> &Проект
		|			ТОГДА &Проект
		|		ИНАЧЕ ВТ_Строки.Проект
		|	КОНЕЦ КАК Проект
		|ИЗ
		|	ВТ_Строки КАК ВТ_Строки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ПО ВТ_Строки.СтатьяБюджета = фин_СтатьиБюджета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО ВТ_Строки.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	(ВТ_Строки.ФинансовыйПоказатель <> фин_СтатьиБюджета.ФинансовыйПоказатель
		|			ИЛИ фин_ФинансовыеПоказатели.УчетПоСумме
		|				И ВТ_Строки.ВалютаОперации = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ИЛИ ВТ_Строки.ПериодПланирования = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ИЛИ ВТ_Строки.Номенклатура = &ЗначениеНеопределено
		|			ИЛИ &УровеньДетализацииБюджета = ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта)
		|				И ВТ_Строки.Проект <> &Проект
		|			ИЛИ &УровеньДетализацииБюджета = ЗНАЧЕНИЕ(Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения)
		|				И ВЫБОР
		|					КОГДА &ВключаяПодчиненныеПодразделения
		|						ТОГДА ВТ_Строки.УправленческоеПодразделение = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|					ИНАЧЕ ВТ_Строки.УправленческоеПодразделение <> &УправленческоеПодразделение
		|				КОНЕЦ)";
	Запрос.УстановитьПараметр("ОборотыПоСтатьям",ОборотыПоСтатьям);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ПериодПланирования",ПериодПланирования);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Проект",Проект);
	Запрос.УстановитьПараметр("УровеньДетализацииБюджета",УровеньДетализацииБюджета);
	Запрос.УстановитьПараметр("ВключаяПодчиненныеПодразделения",ФормируемыйБюджет.ВключаяПодчиненныеПодразделения);
	Запрос.УстановитьПараметр("ЗначениеНеопределено",Неопределено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЧ = ОборотыПоСтатьям[ВыборкаДетальныеЗаписи.НомерСтроки-1];
		Если СтрокаТЧ.Номенклатура=Неопределено Тогда
			СтрокаТЧ.Номенклатура=?(Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы(),Справочники.НоменклатурныеГруппы.ПустаяСсылка(),Справочники[?(ВестиУчетПоПлановойНоменклатуре И СтрокаТЧ.ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура,"фин_Плановая","")+"Номенклатура"].ПустаяСсылка());
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,ВыборкаДетальныеЗаписи,,"НомерСтроки");
	КонецЦикла;
	
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжительностьЦикла 			= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий,ПериодПланирования);
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	
	Если НЕ РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда 
		Если ВидОперации <> Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	Бюджет.Ссылка
			|ИЗ
			|	Документ.фин_Бюджет КАК Бюджет
			|ГДЕ
			|	Бюджет.Дата >= &Дата
			|	И Бюджет.Проведен
			|	И Бюджет.ФормируемыйБюджет = &ФормируемыйБюджет
			|	И Бюджет.Сценарий = &Сценарий"+?(УправленческоеПодразделение.Пустая(),"","
			|	И Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение")+?(Проект.Пустая(),"","
			|	И Бюджет.Проект = &Проект")+"
			|	И Бюджет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Заявка)
			|	И Бюджет.ПериодПланирования >= &НачалоПланирования
			|	И Бюджет.ПериодПланирования <= &КонецПланирования
			|	И Бюджет.Ссылка <> &Ссылка
			|	И ВЫБОР	КОГДА &БюджетированиеПоОрганизациям ТОГДА Бюджет.Организация = &Организация ИНАЧЕ ИСТИНА КОНЕЦ";
			Запрос.УстановитьПараметр("Ссылка",				ФормируемыйБюджет);
			Запрос.УстановитьПараметр("НачалоПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),-ПродолжительностьЦикла+1)));
			Запрос.УстановитьПараметр("КонецПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
			Запрос.УстановитьПараметр("Ссылка",				Ссылка);
			Запрос.УстановитьПараметр("ФормируемыйБюджет",	ФормируемыйБюджет);
			Запрос.УстановитьПараметр("Сценарий",			Сценарий);
			Запрос.УстановитьПараметр("Проект",				Проект);
			Запрос.УстановитьПараметр("УправленческоеПодразделение",				УправленческоеПодразделение);
			Запрос.УстановитьПараметр("Дата",				?(Дата='00010101',ТекущаяДата(),Дата));
			Запрос.УстановитьПараметр("Организация",		Организация);
			Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",БюджетированиеПоОрганизациям);
			РезультатЗапроса=Запрос.Выполнить(); 
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+Ссылка+" не записан, так как имеются более поздние корректировки/планирования!");
				//Отказ = Истина;
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Ссылка);
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ТребуетсяРасчетЗависимостей(ФормируемыйБюджет,Сценарий) Тогда
			РассчитатьЗависимыеОбороты(БюджетированиеПоОрганизациям,ВестиУчетПоПроектам);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БюджетЗаявкиНаФормирование.Ссылка
			|ИЗ
			|	Документ.фин_Бюджет.ЗаявкиНаФормирование КАК БюджетЗаявкиНаФормирование
			|ГДЕ
			|	БюджетЗаявкиНаФормирование.Заявка = &Ссылка
			|	И (НЕ БюджетЗаявкиНаФормирование.Ссылка.ПометкаУдаления)";
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТолькоПросмотр = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не может быть отредактирован так как используется в бюджетах:");
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Ссылка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Версия 							= фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(ФормируемыйБюджет,ПериодПланирования);
	СписокФильтрСтатей 				= Новый СписокЗначений;	
	СписокНаследуемыхСО 			= Документы.фин_Бюджет.СписокНаследуемыхСтатей(ЭтотОбъект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,Истина);
	
	Если СписокНаследуемыхСО.Количество()>0 Тогда
		МассивКУдалению 				= Новый Массив;
		Для Каждого СтрокаОборотов Из ОборотыПоСтатьям Цикл
			Если СписокНаследуемыхСО.НайтиПоЗначению(СтрокаОборотов.ФинансовыйПоказатель) <> Неопределено Тогда
				МассивКУдалению.Вставить(0,ОборотыПоСтатьям.Индекс(СтрокаОборотов));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка документа № "+Строка(СтрокаОборотов.НомерСтроки)+" по статье бюджета "+СтрокаОборотов.СтатьяБюджета+" удалена по правилам регламента!");
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из МассивКУдалению Цикл
			ОборотыПоСтатьям.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если (НЕ ЕдинаяВалюта) ИЛИ НЕ ФормируемыйБюджет.УчетПоСумме Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаДокумента");
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	КонецЕсли;
	Если ФормируемыйБюджет.УчетПоСумме Тогда
		Документы.фин_Бюджет.ПроверкаКурсовПоДате(ЭтотОбъект,Отказ);
	КонецЕсли;
		
	фин_ЗаполнениеДокументов.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	// проверка включения в регламент
	
	Регламент = Неопределено;
	РасширенныйРежимРегламента = Ложь;
	Ранг = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.Регламент,
	               |	фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних.РасширенныйРежим
	               |ПОМЕСТИТЬ ВТ_Регламент
	               |ИЗ
	               |	РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СрезПоследних(&ПериодПланирования, ) КАК фин_ПрименяемыеРегламентыФормированияБюджетовСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	фин_РегламентФормированияБюджетов.Бюджет,
	               |	ВТ_Регламент.Регламент,
	               |	ВТ_Регламент.РасширенныйРежим,
	               |	фин_РегламентФормированияБюджетов.Ранг
	               |ИЗ
	               |	ВТ_Регламент КАК ВТ_Регламент
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
	               |		ПО ВТ_Регламент.Регламент = фин_РегламентФормированияБюджетов.Регламент
	               |ГДЕ
	               |	фин_РегламентФормированияБюджетов.Бюджет = &Бюджет";
	Запрос.УстановитьПараметр("ПериодПланирования",	ПериодПланирования);
	Запрос.УстановитьПараметр("Бюджет",				ФормируемыйБюджет);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрешитьФормированиеБюджетовВнеПорядкаРегламента") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан, так как бюджет "+ФормируемыйБюджет+" не включен в регламент!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Регламент = Выборка.Регламент;
		Ранг = Выборка.Ранг;
		РасширенныйРежимРегламента = Выборка.РасширенныйРежим;
	КонецЕсли;
	
	УчетнаяПолитикаБюджетирование = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДанныеУчетнойПолитики(ПериодПланирования);
	
	Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		ПродолжительностьЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий,ПериодПланирования);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СформированныеБюджеты.Регистратор,
		               |	ПРЕДСТАВЛЕНИЕ(СформированныеБюджеты.Регистратор) КАК РегистраторПредставление
		               |ИЗ
		               |	РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
		               |ГДЕ
		               |	СформированныеБюджеты.Регистратор <> &Ссылка
		               |	И СформированныеБюджеты.Бюджет = &ФормируемыйБюджет
		               |	И СформированныеБюджеты.Сценарий = &Сценарий
		               |	И СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение
		               |	И СформированныеБюджеты.ВидОперации = &ВидОперации
		               |	И СформированныеБюджеты.ПериодПланирования >= &НачалоПериода
		               |	И СформированныеБюджеты.ПериодПланирования < &КонецПериода";
		Если БюджетированиеПоОрганизациям Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СформированныеБюджеты.Организация = &Организация";
		КонецЕсли;
		Если УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И СформированныеБюджеты.Проект = &Проект";
		КонецЕсли;
		Если УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда
			Если ФормируемыйБюджет.ВключаяПодчиненныеПодразделения Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И (СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение
				|		ИЛИ СформированныеБюджеты.УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение))";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И СформированныеБюджеты.УправленческоеПодразделение = &УправленческоеПодразделение";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("ПоОрганизациям",				БюджетированиеПоОрганизациям);
		Запрос.УстановитьПараметр("НачалоПериода",				?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),-ПродолжительностьЦикла+1)));
		Запрос.УстановитьПараметр("КонецПериода",				?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
		Запрос.УстановитьПараметр("Ссылка",						Ссылка);
		Запрос.УстановитьПараметр("ФормируемыйБюджет",			ФормируемыйБюджет);
		Запрос.УстановитьПараметр("Сценарий",					Сценарий);
		Запрос.УстановитьПараметр("УправленческоеПодразделение",УправленческоеПодразделение);
		Запрос.УстановитьПараметр("Проект",						Проект);
		Запрос.УстановитьПараметр("ВидОперации",				ВидОперации);
		Запрос.УстановитьПараметр("Организация",				Организация);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = "Уже сформирован бюджет с указанными параметрами:";
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = ТекстСообщения+ "
				|	- "+Выборка.РегистраторПредставление;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если НЕ РасширенныйРежимРегламента Тогда
			Если Не фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрешитьФормированиеБюджетовВнеПорядкаРегламента") Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Регламент",		Регламент);
				Запрос.УстановитьПараметр("Ранг",			Ранг);
				Запрос.УстановитьПараметр("ПоОрганизациям",	БюджетированиеПоОрганизациям);
				Запрос.УстановитьПараметр("Организация",	Организация);
				Запрос.УстановитьПараметр("Дата",			ПериодПланирования);
				Запрос.УстановитьПараметр("Бюджет",			ФормируемыйБюджет);
				Запрос.УстановитьПараметр("Проект",			Проект);
				Запрос.УстановитьПараметр("Сценарий",		Сценарий);
				Запрос.УстановитьПараметр("УправленческоеПодразделение",			УправленческоеПодразделение);
				Запрос.УстановитьПараметр("ДатаНачала",		?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),-ПродолжительностьЦикла+1)));
				Запрос.УстановитьПараметр("ДатаОкончания",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
				Запрос.Текст = "ВЫБРАТЬ
				               |	РегламентФормированияБюджетовСрезПоследних.Бюджет,
				               |	ПРЕДСТАВЛЕНИЕ(РегламентФормированияБюджетовСрезПоследних.Бюджет) КАК БюджетПредставление
				               |ИЗ
				               |	РегистрСведений.фин_РегламентФормированияБюджетов КАК РегламентФормированияБюджетовСрезПоследних
				               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				               |			СформированныеБюджеты.Бюджет КАК Бюджет
				               |		ИЗ
				               |			РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
				               |		ГДЕ
				               |			СформированныеБюджеты.Сценарий = &Сценарий
				               |			И ВЫБОР
				               |					КОГДА &ПоОрганизациям
				               |						ТОГДА СформированныеБюджеты.Организация = &Организация
				               |					ИНАЧЕ ИСТИНА
				               |				КОНЕЦ
				               |			И СформированныеБюджеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Бюджет)
				               |			И СформированныеБюджеты.ПериодПланирования >= &ДатаНачала
				               |			И СформированныеБюджеты.ПериодПланирования < &ДатаОкончания) КАК ВложенныйЗапрос
				               |		ПО РегламентФормированияБюджетовСрезПоследних.Бюджет = ВложенныйЗапрос.Бюджет
				               |ГДЕ
				               |	РегламентФормированияБюджетовСрезПоследних.Регламент = &Регламент
				               |	И РегламентФормированияБюджетовСрезПоследних.Ранг < &Ранг
				               |	И ВложенныйЗапрос.Бюджет ЕСТЬ NULL ";
				Регламент=Запрос.Выполнить().Выгрузить();
				Если Регламент.Количество() > 0 Тогда
					ТекстСообщения = "Не сформированы предыдущие бюджеты по регламенту:";
					Для Каждого СтрокаТЧ Из Регламент Цикл
						ТекстСообщения = ТекстСообщения+"
						|	- "+СтрокаТЧ.БюджетПредставление;
					КонецЦикла;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
			КонецЕсли;	
		Иначе
	
			Если Не (фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрешитьФормированиеБюджетовВнеПорядкаРегламента") И НЕ ЗначениеЗаполнено(Регламент)) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_ВзаимосвязиБюджетовПоРегламенту.Предшественник
				|ИЗ
				|	РегистрСведений.фин_ВзаимосвязиБюджетовПоРегламенту КАК фин_ВзаимосвязиБюджетовПоРегламенту
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СформированныеБюджеты.Бюджет КАК Бюджет
				|		ИЗ
				|			РегистрСведений.фин_СформированныеБюджеты КАК СформированныеБюджеты
				|		ГДЕ
				|			СформированныеБюджеты.Сценарий = &Сценарий
				|			И ВЫБОР
				|					КОГДА &ПоОрганизациям
				|						ТОГДА СформированныеБюджеты.Организация = &Организация
				|					ИНАЧЕ ИСТИНА
				|				КОНЕЦ
				|			И СформированныеБюджеты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Бюджет)
				|			И СформированныеБюджеты.ПериодПланирования >= &ДатаНачала
				|			И СформированныеБюджеты.ПериодПланирования < &ДатаОкончания) КАК ВложенныйЗапрос
				|		ПО фин_ВзаимосвязиБюджетовПоРегламенту.Предшественник = ВложенныйЗапрос.Бюджет
				|ГДЕ
				|	фин_ВзаимосвязиБюджетовПоРегламенту.Регламент = &Регламент
				|	И фин_ВзаимосвязиБюджетовПоРегламенту.Бюджет = &Бюджет
				|	И фин_ВзаимосвязиБюджетовПоРегламенту.Обязательный
				|	И ВложенныйЗапрос.Бюджет ЕСТЬ NULL ";
				
				Запрос.УстановитьПараметр("Сценарий", Сценарий);
				Запрос.УстановитьПараметр("Бюджет", ФормируемыйБюджет);
				Запрос.УстановитьПараметр("Регламент", Регламент);
				Запрос.УстановитьПараметр("ПоОрганизациям",	БюджетированиеПоОрганизациям);
				Запрос.УстановитьПараметр("Организация",	Организация);
				Запрос.УстановитьПараметр("ДатаНачала",		?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),-ПродолжительностьЦикла+1)));
				Запрос.УстановитьПараметр("ДатаОкончания",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Регламент=РезультатЗапроса.Выгрузить();
				Если Регламент.Количество() > 0 Тогда
					ТекстСообщения = "Не сформированы предыдущие бюджеты по регламенту:";
					Для Каждого СтрокаТЧ Из Регламент Цикл
						ТекстСообщения = ТекстСообщения+"
						|	- "+СтрокаТЧ.Предшественник;
					КонецЦикла;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетнаяПолитикаБюджетирование.БюджетыСНеУтвержденнымиСтроками=Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.ЗапретитьПроведениеДокумента Тогда
			Если ОборотыПоСтатьям.НайтиСтроки(Новый Структура("Состояние",фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден())).Количество()<>ОборотыПоСтатьям.Количество() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Бюджет не проведен: имеются неутвержденные строки бюджета!",,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Отказ) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользуетсяФиксацияПлановПоСценарию(Сценарий) Тогда
		Документы.фин_Бюджет.ПроверкаИзмененияЗафиксированногоПлана(ЭтотОбъект,Отказ);	
	КонецЕсли;
	
	// проверка редактирования зависимых оборотов 
	Версия 				= фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(ФормируемыйБюджет,ПериодПланирования);
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	СписокФильтрСтатей 	= Новый СписокЗначений;	
	СписокРассчитываемых 			= Документы.фин_Бюджет.СписокРассчитываемыхПоМодели(ЭтотОбъект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
	МассивРедактируемыхЗависимых	= Новый Массив;
	СписокЗависимыхСО 				= Документы.фин_Бюджет.СписокЗависимыхСтатей(ЭтотОбъект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,Истина);
	Если СписокЗависимыхСО.Количество()>0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОборотыПоСтатьям.ФинансовыйПоказатель
			|ПОМЕСТИТЬ ВТ_ФП
			|ИЗ
			|	&ОборотыПоСтатьям КАК ОборотыПоСтатьям
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ФП.ФинансовыйПоказатель,
			|	ПРЕДСТАВЛЕНИЕ(ВТ_ФП.ФинансовыйПоказатель)
			|ИЗ
			|	ВТ_ФП КАК ВТ_ФП
			|ГДЕ
			|	ВТ_ФП.ФинансовыйПоказатель В(&СписокЗависимыхСО)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ФП.ФинансовыйПоказатель";
		
		Запрос.УстановитьПараметр("ОборотыПоСтатьям", ОборотыПоСтатьям.Выгрузить());
		Запрос.УстановитьПараметр("СписокЗависимыхСО", СписокЗависимыхСО);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документом вручную редактируются следующие зависимые статьи оборотов:");
		КонецЕсли;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВыборкаДетальныеЗаписи.ФинансовыйПоказательПредставление);
		КонецЦикла;
	КонецЕсли;
	
	//проверка наличия курсов валют
	Если ЗадаватьКурсыВалютВДокументе Тогда
		МинимальныйПериод 	= ПериодПланирования;
		ТаблицаПериоды 		= ЗависимыеОбороты.Выгрузить(,"ПериодПланирования");
		ТаблицаПериоды.Сортировать("ПериодПланирования ВОЗР");
		Если ТаблицаПериоды.Количество()>0 Тогда
			МинимальныйПериод = Мин(МинимальныйПериод,ТаблицаПериоды[0].ПериодПланирования);
		КонецЕсли;
		ТаблицаПериоды 		= РасчетыПоМоделям.Выгрузить(,"ПериодПланирования");
		ТаблицаПериоды.Сортировать("ПериодПланирования ВОЗР");
		Если ТаблицаПериоды.Количество()>0 Тогда
			МинимальныйПериод = Мин(МинимальныйПериод,ТаблицаПериоды[0].ПериодПланирования);
		КонецЕсли;
		МассивПроверяемыхВалют = Новый Массив;
		ВалютаРегл 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
		ВалютаУпр 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		ВалютаСценария 	= Сценарий.Валюта;
		Если ВалютаУпр<>ВалютаРегл Тогда
			МассивПроверяемыхВалют.Добавить(ВалютаУпр);
		КонецЕсли;
		Если ВалютаСценария<>ВалютаРегл И ВалютаСценария<>ВалютаУпр Тогда
			МассивПроверяемыхВалют.Добавить(ВалютаСценария);
		КонецЕсли;
		Если ЕдинаяВалюта И МассивПроверяемыхВалют.Найти(ВалютаДокумента)=Неопределено И ЕдинаяВалюта<>ВалютаРегл Тогда
			МассивПроверяемыхВалют.Добавить(ВалютаДокумента);
		КонецЕсли;
		Для Каждого Валюта Из МассивПроверяемыхВалют Цикл
			Если Валюта=ВалютаРегл Тогда
				Продолжить;
			КонецЕсли;
			Если КурсыВалютДокумента.НайтиСтроки(Новый Структура("Валюта,ПериодПланирования",Валюта,МинимальныйПериод)).Количество()=0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В курсах валют документа должен быть указан курс валюты """+Валюта+""" начиная с периода "+фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(МинимальныйПериод,Сценарий),,,,Отказ);	
			КонецЕсли;
		КонецЦикла;
		
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОборотыПоСтатьям.ВалютаОперации,
			|	ОборотыПоСтатьям.ПериодПланирования
			|ПОМЕСТИТЬ ВТ_Обороты
			|ИЗ
			|	&ОборотыПоСтатьям КАК ОборотыПоСтатьям
			|ГДЕ
			|	ОборотыПоСтатьям.ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|	И НЕ ОборотыПоСтатьям.ВалютаОперации В (&Валюты)
			|	И ОборотыПоСтатьям.Сумма <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗависимыеОбороты.ВалютаОперации,
			|	ЗависимыеОбороты.ПериодПланирования
			|ПОМЕСТИТЬ ВТ_ЗависимыеОбороты
			|ИЗ
			|	&ЗависимыеОбороты КАК ЗависимыеОбороты
			|ГДЕ
			|	ЗависимыеОбороты.ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|	И НЕ ЗависимыеОбороты.ВалютаОперации В (&Валюты)
			|	И ЗависимыеОбороты.Сумма <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыПоМоделям.ВалютаОперации,
			|	РасчетыПоМоделям.ПериодПланирования
			|ПОМЕСТИТЬ ВТ_РасчетыПоМоделям
			|ИЗ
			|	&РасчетыПоМоделям КАК РасчетыПоМоделям
			|ГДЕ
			|	РасчетыПоМоделям.ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|	И НЕ РасчетыПоМоделям.ВалютаОперации В (&Валюты)
			|	И РасчетыПоМоделям.Сумма <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Обороты.ВалютаОперации,
			|	ВТ_Обороты.ПериодПланирования
			|ПОМЕСТИТЬ ВТ_ВсеЗаписи
			|ИЗ
			|	ВТ_Обороты КАК ВТ_Обороты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_ЗависимыеОбороты.ВалютаОперации,
			|	ВТ_ЗависимыеОбороты.ПериодПланирования
			|ИЗ
			|	ВТ_ЗависимыеОбороты КАК ВТ_ЗависимыеОбороты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_РасчетыПоМоделям.ВалютаОперации,
			|	ВТ_РасчетыПоМоделям.ПериодПланирования
			|ИЗ
			|	ВТ_РасчетыПоМоделям КАК ВТ_РасчетыПоМоделям
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВсеЗаписи.ВалютаОперации,
			|	МИНИМУМ(ВТ_ВсеЗаписи.ПериодПланирования) КАК ПериодПланирования
			|ИЗ
			|	ВТ_ВсеЗаписи КАК ВТ_ВсеЗаписи
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ВсеЗаписи.ВалютаОперации";
		
		Запрос.УстановитьПараметр("Валюты", 			МассивПроверяемыхВалют);
		Запрос.УстановитьПараметр("ОборотыПоСтатьям", 	ОборотыПоСтатьям);
		Запрос.УстановитьПараметр("ЗависимыеОбороты", 	ЗависимыеОбороты);
		Запрос.УстановитьПараметр("РасчетыПоМоделям", 	РасчетыПоМоделям);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ВалютаОперации=ВалютаРегл Тогда
				Продолжить;
			КонецЕсли;
			Если КурсыВалютДокумента.НайтиСтроки(Новый Структура("Валюта,ПериодПланирования",ВыборкаДетальныеЗаписи.ВалютаОперации,ВыборкаДетальныеЗаписи.ПериодПланирования)).Количество()=0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В курсах валют документа должен быть указан курс валюты """+ВыборкаДетальныеЗаписи.ВалютаОперации+""" начиная с периода "+фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(ВыборкаДетальныеЗаписи.ПериодПланирования,Сценарий),,,,Отказ);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

// Процедура ОбработкаУдаленияПроведения
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Документы.фин_Бюджет.ПроверкаИзмененияЗафиксированногоПлана(ЭтотОбъект,Отказ,Истина);	
	
КонецПроцедуры //ОбработкаУдаленияПроведения

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) ИЛИ ТипДанныхЗаполнения = Тип("ДокументСсылка.фин_Бюджет") Тогда
		Документы.фин_Бюджет.ЗаполнитьПоДокументуОснованию(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения = Тип("Структура") Тогда
		Попытка
			Документы.фин_Бюджет.ЗаполнитьПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При заполнении бюджета на основании произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		Возврат;
	КонецЕсли;
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
КонецПроцедуры

#КонецЕсли

