#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция БюджетныйРегламент(Объект) Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.БюджетныйРегламентПериода(Объект.ПериодПланирования);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
//	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.фин_Бюджет") Тогда
	    Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка;
		Объект.Дата = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(Объект,ДокументОснование,"ВалютаДокумента,ЕдинаяВалюта,Организация,ПериодПланирования,Проект,Сценарий,УправленческоеПодразделение,УровеньДетализацииБюджета,ФормируемыйБюджет,ЗадаватьКурсыВалютВДокументе");
		Если Объект.ЗадаватьКурсыВалютВДокументе Тогда
			Объект.КурсыВалютДокумента.Загрузить(ДокументОснование.КурсыВалютДокумента.Выгрузить());
		КонецЕсли;
		Объект.Состояние = фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();

	КонецЕсли;
	
КонецПроцедуры   

Процедура ЗаполнитьПоОснованию(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
		Объект.Состояние 	= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		
		Если ДокументОснование.Свойство("РасчетСценария") Тогда
			
		    Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет;
			Объект.Дата = ТекущаяДата();
			ЗаполнитьЗначенияСвойств(Объект,ДокументОснование.Бюджет,"ВалютаДокумента,ЕдинаяВалюта,Организация,ПериодПланирования,Проект,Сценарий,УправленческоеПодразделение,УровеньДетализацииБюджета,ФормируемыйБюджет,ЗадаватьКурсыВалютВДокументе");
			Если Объект.ЗадаватьКурсыВалютВДокументе Тогда
				Объект.КурсыВалютДокумента.Загрузить(ДокументОснование.Бюджет.КурсыВалютДокумента.Выгрузить());
			КонецЕсли;
			СценарийИсходный = Объект.Сценарий;
			Объект.Сценарий = ДокументОснование.Сценарий;
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СценарийИсходный) <> фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий) Тогда
				Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,Объект.Сценарий);
			КонецЕсли;
			фин_ПроцедурыСценарногоПланирования.РассчитатьДокументПоПравиламСценарногоПланирования(Объект,СценарийИсходный,ДокументОснование.Сценарий,ДокументОснование.Бюджет);
		ИначеЕсли ДокументОснование.Свойство("ЭтоКорректировка") Тогда
			
		    Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка;
			Объект.Дата = ТекущаяДата();
			ЗаполнитьЗначенияСвойств(Объект,ДокументОснование.Документ,"ВалютаДокумента,ЕдинаяВалюта,Организация,ПериодПланирования,Проект,Сценарий,УправленческоеПодразделение,УровеньДетализацииБюджета,ФормируемыйБюджет,ЗадаватьКурсыВалютВДокументе");
			Если Объект.ЗадаватьКурсыВалютВДокументе Тогда
				Объект.КурсыВалютДокумента.Загрузить(ДокументОснование.Документ.КурсыВалютДокумента.Выгрузить());
			КонецЕсли;
			фин_УправлениеБюджетированием.РассчитатьДокументАктуализации(Объект,ДокументОснование.АктуализируемыйПериод,ДокументОснование.Свойство("УчетПрогноза"));
			РассчитатьБюджет(Объект);
		Иначе
	
			ЗаполнитьЗначенияСвойств(Объект,ДокументОснование);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры   


// Проверяет курсы валют, используемых при проведении
//
Процедура ПроверкаКурсовПоДате(Объект,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	БюджетЗависимыеОбороты.ПериодПланирования КАК ПериодПланирования,
	             |	БюджетЗависимыеОбороты.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	БюджетЗависимыеОбороты.ВалютаОперации
	             |ПОМЕСТИТЬ ВТ_ЗависимыеОбороты
	             |ИЗ
	             |	&ЗависимыеОбороты КАК БюджетЗависимыеОбороты
	             |ГДЕ
	             |	БюджетЗависимыеОбороты.ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	БюджетОборотыПоСтатьям.ПериодПланирования КАК ПериодПланирования,
	             |	БюджетОборотыПоСтатьям.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	БюджетОборотыПоСтатьям.ВалютаОперации
	             |ПОМЕСТИТЬ ВТ_ОборотыПоСтатьям
	             |ИЗ
	             |	&ОборотыПоСтатьям КАК БюджетОборотыПоСтатьям
	             |ГДЕ
	             |	БюджетОборотыПоСтатьям.ВалютаОперации <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_ЗависимыеОбороты.ПериодПланирования,
	             |	ВТ_ЗависимыеОбороты.ФинансовыйПоказатель,
	             |	ВТ_ЗависимыеОбороты.ВалютаОперации
	             |ПОМЕСТИТЬ ВТ_Таблица
	             |ИЗ
	             |	ВТ_ЗависимыеОбороты КАК ВТ_ЗависимыеОбороты
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
	             |		ПО ВТ_ЗависимыеОбороты.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
	             |ГДЕ
	             |	фин_ФинансовыеПоказатели.УчетПоСумме
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ВТ_ОборотыПоСтатьям.ПериодПланирования,
	             |	ВТ_ОборотыПоСтатьям.ФинансовыйПоказатель,
	             |	ВТ_ОборотыПоСтатьям.ВалютаОперации
	             |ИЗ
	             |	ВТ_ОборотыПоСтатьям КАК ВТ_ОборотыПоСтатьям
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
	             |		ПО ВТ_ОборотыПоСтатьям.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
	             |ГДЕ
	             |	фин_ФинансовыеПоказатели.УчетПоСумме
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ВТ_Таблица.ПериодПланирования,
	             |	ВТ_Таблица.ВалютаОперации
	             |ПОМЕСТИТЬ ВТ_Периоды
	             |ИЗ
	             |	ВТ_Таблица КАК ВТ_Таблица
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ВТ_Таблица.ПериодПланирования,
	             |	ВТ_Таблица.ВалютаОперации
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МИНИМУМ(ВложенныйЗапрос.ПериодПланирования) КАК ДатаКурса,
	             |	&Сценарий КАК Сценарий,
	             |	&ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	             |	&ВалютаСценария КАК ВалютаСценария,
	             |	ВложенныйЗапрос.Валюта КАК Валюта
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВТ_Периоды.ПериодПланирования КАК ПериодПланирования,
	             |		ВТ_Периоды.ВалютаОперации КАК Валюта
	             |	ИЗ
	             |		ВТ_Периоды КАК ВТ_Периоды
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		&ПериодПланирования,
	             |		&ВалютаДокумента) КАК ВложенныйЗапрос
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ВложенныйЗапрос.Валюта";
	
	Запрос.УстановитьПараметр("Сценарий",					Объект.Сценарий);
	Запрос.УстановитьПараметр("ИспользоватьКурсыСценария",	Объект.Сценарий.ИспользоватьКурсыСценария);
	Запрос.УстановитьПараметр("ВалютаСценария",				Объект.Сценарий.Валюта);
	Запрос.УстановитьПараметр("ВалютаДокумента",			Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ПериодПланирования",			Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("ЗависимыеОбороты",			Объект.ЗависимыеОбороты);
	Запрос.УстановитьПараметр("ОборотыПоСтатьям",			Объект.ОборотыПоСтатьям);
	
	ТаблицаВалют=Запрос.Выполнить().Выгрузить();				
	фин_УправлениеБюджетированием.ПроверкаКурсовВалютСценария(ТаблицаВалют,Отказ,Строка(Объект.Ссылка));
	
КонецПроцедуры //ПроверкаКурсовПоДате


// Процедура ОбработкаУдаленияПроведения
// 
Процедура ПроверкаИзмененияЗафиксированногоПлана(Объект,Отказ,РежимОтменыПроведения=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	&Сценарий,
	             |	ДанныеТЧ.ПериодПланирования,
	             |	ДанныеТЧ.УправленческоеПодразделение,
	             |	ДанныеТЧ.Проект,
	             |	ДанныеТЧ.ФинансовыйПоказатель
	             |ПОМЕСТИТЬ ВТ_ОборотыПоСтатьям
	             |ИЗ
	             |	"+?(РежимОтменыПроведения,"Документ.фин_Бюджет.ОборотыПоСтатьям","&ОборотыПоСтатьям")+" КАК ДанныеТЧ
				 |"+?(РежимОтменыПроведения,"ГДЕ ДанныеТЧ.Ссылка = &Ссылка","")+" 
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	&Сценарий,
	             |	ДанныеТЧ.ПериодПланирования,
	             |	ДанныеТЧ.УправленческоеПодразделение,
	             |	ДанныеТЧ.Проект,
	             |	ДанныеТЧ.ФинансовыйПоказатель
	             |ПОМЕСТИТЬ ВТ_ЗависимыеОбороты
	             |ИЗ
	             |	"+?(РежимОтменыПроведения,"Документ.фин_Бюджет.ЗависимыеОбороты","&ЗависимыеОбороты")+" КАК ДанныеТЧ
				 |"+?(РежимОтменыПроведения,"ГДЕ ДанныеТЧ.Ссылка = &Ссылка","")+" 
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	&Сценарий,
	             |	ДанныеТЧ.ПериодПланирования,
	             |	ДанныеТЧ.УправленческоеПодразделение,
	             |	ДанныеТЧ.Проект,
	             |	ДанныеТЧ.ФинансовыйПоказатель
	             |ПОМЕСТИТЬ ВТ_РасчетыПоМоделям
	             |ИЗ
	             |	"+?(РежимОтменыПроведения,"Документ.фин_Бюджет.РасчетыПоМоделям","&РасчетыПоМоделям")+" КАК ДанныеТЧ
				 |"+?(РежимОтменыПроведения,"ГДЕ ДанныеТЧ.Ссылка = &Ссылка","")+" 
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВТ_ОборотыПоСтатьям.Сценарий,
	             |	ВТ_ОборотыПоСтатьям.ПериодПланирования КАК Период,
	             |	ВТ_ОборотыПоСтатьям.УправленческоеПодразделение,
	             |	ВТ_ОборотыПоСтатьям.Проект,
	             |	ВТ_ОборотыПоСтатьям.ФинансовыйПоказатель
	             |ПОМЕСТИТЬ ВТ_ОборотыПолные
	             |ИЗ
	             |	ВТ_ОборотыПоСтатьям КАК ВТ_ОборотыПоСтатьям
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВТ_ЗависимыеОбороты.Сценарий,
	             |	ВТ_ЗависимыеОбороты.ПериодПланирования,
	             |	ВТ_ЗависимыеОбороты.УправленческоеПодразделение,
	             |	ВТ_ЗависимыеОбороты.Проект,
	             |	ВТ_ЗависимыеОбороты.ФинансовыйПоказатель
	             |ИЗ
	             |	ВТ_ЗависимыеОбороты КАК ВТ_ЗависимыеОбороты
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВТ_РасчетыПоМоделям.Сценарий,
	             |	ВТ_РасчетыПоМоделям.ПериодПланирования,
	             |	ВТ_РасчетыПоМоделям.УправленческоеПодразделение,
	             |	ВТ_РасчетыПоМоделям.Проект,
	             |	ВТ_РасчетыПоМоделям.ФинансовыйПоказатель
	             |ИЗ
	             |	ВТ_РасчетыПоМоделям КАК ВТ_РасчетыПоМоделям
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	БюджетнаяОперация.Период КАК Период,
	             |	БюджетнаяОперация.Сценарий КАК Сценарий,
	             |	БюджетнаяОперация.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |	БюджетнаяОперация.Проект КАК Проект,
	             |	БюджетнаяОперация.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	ГраницыПланирования.ГраницаФиксации КАК ГраницаФиксации
	             |ИЗ
	             |	ВТ_ОборотыПолные КАК БюджетнаяОперация
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ГраницыПериодов.Сценарий КАК Сценарий,
	             |			ГраницыПериодов.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |			ГраницыПериодов.Проект КАК Проект,
	             |			МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	             |		ИЗ
	             |			РегистрСведений.фин_ГраницыПериодовБюджетирования КАК ГраницыПериодов
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ГраницыПериодов.Сценарий,
	             |			ГраницыПериодов.УправленческоеПодразделение,
	             |			ГраницыПериодов.Проект) КАК ГраницыПланирования
	             |		ПО (ГраницыПланирования.Сценарий = БюджетнаяОперация.Сценарий)
	             |			И (БюджетнаяОперация.УправленческоеПодразделение = ГраницыПланирования.УправленческоеПодразделение
	             |				ИЛИ ГраницыПланирования.УправленческоеПодразделение = &ПустойУправленческоеПодразделение)
	             |			И (БюджетнаяОперация.Проект = ГраницыПланирования.Проект
	             |				ИЛИ ГраницыПланирования.Проект = &ПустойПроект)";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПустойУправленческоеПодразделение",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений()));
	Запрос.УстановитьПараметр("ПустойПроект",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов()));
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	Если НЕ РежимОтменыПроведения Тогда
		Запрос.УстановитьПараметр("ОборотыПоСтатьям",Объект.ОборотыПоСтатьям);
		Запрос.УстановитьПараметр("ЗависимыеОбороты",Объект.ЗависимыеОбороты);
		Запрос.УстановитьПараметр("РасчетыПоМоделям",Объект.РасчетыПоМоделям);
	КонецЕсли;
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если (НЕ РезультатЗапроса.ГраницаФиксации=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксации) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Объект.Сценарий+"
			|Финансовый показатель: "+РезультатЗапроса.ФинансовыйПоказатель+"
			|Подразделение (упр.): "+РезультатЗапроса.УправленческоеПодразделение+"
			|Проект: "+РезультатЗапроса.Проект+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксации,,,,Отказ);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ОбработкаУдаленияПроведения

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	СтруктураДанныхДокумента = Новый Структура("Ссылка,Сценарий,Организация,ВалютаДокумента,СценарийВалюта,ПериодПланирования,ВидОперации,ФормируемыйБюджет,Дата,Проект,УправленческоеПодразделение");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджет.ПериодПланирования,
		|	фин_Бюджет.Организация,
		|	фин_Бюджет.ВалютаДокумента,
		|	фин_Бюджет.Сценарий,
		|	фин_Бюджет.Сценарий.Валюта,
		|	фин_Бюджет.ВидОперации,
		|	фин_Бюджет.Дата,
		|	фин_Бюджет.ФормируемыйБюджет,
		|	фин_Бюджет.УправленческоеПодразделение,
		|	фин_Бюджет.Ссылка,
		|	фин_Бюджет.Проект
		|ИЗ
		|	Документ.фин_Бюджет КАК фин_Бюджет
		|ГДЕ
		|	фин_Бюджет.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхДокумента,ВыборкаДетальныеЗаписи);
	КонецЕсли;

	
	ДополнительныеЗапросы = Новый Массив;
	ДополнительныеЗапросы.Добавить("ТаблицаДанныхДокумента");
	ДополнительныеЗапросы.Добавить("АвтоматическиеЛимиты");
	
	ДополнительныеПараметрыЗапросов = Новый Структура;
	ДополнительныеПараметрыЗапросов.Вставить("ТолькоУтвержденные",	Ложь);
	ДополнительныеПараметрыЗапросов.Вставить("Сценарий",			СтруктураДанныхДокумента.Сценарий);
	ДополнительныеПараметрыЗапросов.Вставить("Организация",			СтруктураДанныхДокумента.Организация);
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаДокумента",		СтруктураДанныхДокумента.ВалютаДокумента);
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаСценария",		СтруктураДанныхДокумента.СценарийВалюта);
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаУпрУчета",		фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	ДополнительныеПараметрыЗапросов.Вставить("Ссылка",				ДокументСсылка);
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаРеглУчета",		фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
	ДополнительныеПараметрыЗапросов.Вставить("ИспользованиеКонтролируемогоЗначения", 	Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
	ДополнительныеПараметрыЗапросов.Вставить("ПериодПланирования", 						СтруктураДанныхДокумента.ПериодПланирования);
	ДополнительныеПараметрыЗапросов.Вставить("ГоризонтПланирования",					фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(СтруктураДанныхДокумента.ПериодПланирования,СтруктураДанныхДокумента.Сценарий));
	
	Если СтруктураДанныхДокумента.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ДополнительныеПараметрыЗапросов.Вставить("ПереоцениваемыеДокументы",ПереоцениваемыеДокументы(СтруктураДанныхДокумента));
		ДополнительныеПараметрыЗапросов.Вставить("Дата",			СтруктураДанныхДокумента.Дата);
		//ДополнительныеПараметрыЗапросов.Вставить("ФормируемыйБюджет",СтруктураДанныхДокумента.ФормируемыйБюджет);
		//ДополнительныеПараметрыЗапросов.Вставить("СписокНаследуемыхСтатей",СписокНаследуемыхСтатей(СтруктураДанныхДокумента));
		//Версии = Новый Массив;
		//Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
		//Версии.Добавить(фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(СтруктураДанныхДокумента.ФормируемыйБюджет,СтруктураДанныхДокумента.ПериодПланирования));
		//ДополнительныеПараметрыЗапросов.Вставить("Версии",Версии);
	КонецЕсли;
	
	ПереопределяемыеТаблицы = Новый Массив;
	ПереопределяемыеТаблицы.Добавить("ПланируемыеМероприятия");
	
	ДополнительныеДанныеИУчетныеПолитики = Новый Структура("фин_УчетнаяПолитикаПоБюджетированию",СтруктураДанныхДокумента.ПериодПланирования);
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,ДополнительныеДанныеИУчетныеПолитики,,,ПереопределяемыеТаблицы,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	Возврат ПараметрыПроведения;

КонецФункции


Функция ТекстЗапросаПланируемыеМероприятия(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["ЕстьПланируемыеМероприятия"] Тогда
		ПараметрыПроведения.Вставить("ТаблицаПланируемыеМероприятия", Неопределено);
	Иначе
	ТекстЗапроса="ВЫБРАТЬ
	             |	Исполнители.Ссылка,
	             |	Исполнители.НомерСтроки,
	             |	Исполнители.Пользователь,
	             |	ЗНАЧЕНИЕ(Перечисление.фин_ВидыЗадачПоБюджетам.МероприятияПоДостижениюБюджетныхПоказателей) КАК ВидЗадачи,
	             |	ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка) КАК УровеньДетализации,
	             |	Исполнители.Ссылка.Организация,
	             |	Исполнители.Исполнитель КАК Исполнитель,
	             |	Исполнители.Мероприятие КАК Бюджет,
	             |	Исполнители.Ссылка КАК КалендарныйПлан,
	             |	Исполнители.ДатаНачала,
	             |	Исполнители.ДатаЗавершения,
	             |	Исполнители.Ссылка.Сценарий КАК СценарийПланирования
	             |ИЗ
	             |	Документ.фин_Бюджет.ПланируемыеМероприятия КАК Исполнители
	             |ГДЕ
	             |	Исполнители.Ссылка = &Ссылка";

		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаПланируемыеМероприятия",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

Функция ТекстЗапросаТаблицаДанныхДокумента(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если Реквизиты.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		ТекстЗапроса = ТекстЗапросаДляПолученияДанныхПереоценкиДокумента(Реквизиты) + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ВТ1",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ2",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ3",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ4",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ5",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ6",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ7",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ8",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ9",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ10",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ11",  НомераТаблиц.Количество());
		Если Реквизиты.ЗадаватьКурсыВалютВДокументе Тогда
			НомераТаблиц.Вставить("ВТ12",  НомераТаблиц.Количество());
		КонецЕсли;
		НомераТаблиц.Вставить("ТаблицаДанныхДокумента",  НомераТаблиц.Количество());
	ИначеЕсли НЕ (Реквизиты["ЕстьОборотыПоСтатьям"] ИЛИ Реквизиты["ЕстьЗависимыеОбороты"] ИЛИ Реквизиты["ЕстьРасчетыПоМоделям"]) Тогда
		ПараметрыПроведения.Вставить("ТаблицаДанныхДокумента", Неопределено);
	Иначе                                                                               		
		ТекстЗапроса = ТекстЗапросаДляПолученияДанныхДокумента(Реквизиты) + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ВТ1",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ2",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ3",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ4",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ5",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ6",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ7",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ8",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ9",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ10",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ11",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ12",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ13",  НомераТаблиц.Количество());
		Если Реквизиты.ЗадаватьКурсыВалютВДокументе Тогда
			НомераТаблиц.Вставить("ВТ14",  НомераТаблиц.Количество());
		КонецЕсли;
		НомераТаблиц.Вставить("ТаблицаДанныхДокумента",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

Функция ТекстЗапросаДляПолученияДанныхДокумента(Реквизиты,ТолькоОтклонения=Ложь)
	ВыбратьКорректировки 		= Реквизиты.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Корректировка И Реквизиты.УчитыватьПричиныКорректировок И НЕ ТолькоОтклонения;
	ИспользоватьКурсыСценария 	= Реквизиты.Сценарий.ИспользоватьКурсыСценария;
	ИспользоватьКурсыДокумента 	= Реквизиты.ЗадаватьКурсыВалютВДокументе;
	РегистрКурсовВалют 			= ?(ИспользоватьКурсыСценария,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям","КурсыВалют");
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДанныеТабличнойЧасти.ПериодПланирования КАК Период,
	               |	ДанныеТабличнойЧасти.Состояние КАК Состояние,
	               |	ДанныеТабличнойЧасти.ФинансовыйПоказатель,
	               |	ДанныеТабличнойЧасти.ДополнительныеРазрезы,
	               |	ДанныеТабличнойЧасти.УправленческоеПодразделение,
	               |	ДанныеТабличнойЧасти.Проект,
	               |	ДанныеТабличнойЧасти.Контрагент,
	               |	ДанныеТабличнойЧасти.Номенклатура,
	               |	ДанныеТабличнойЧасти.ВалютаОперации,
	               |	ДанныеТабличнойЧасти.Количество,
	               |	ДанныеТабличнойЧасти.Сумма,
	               |	ДанныеТабличнойЧасти.ПричинаОтклонения,
	               |	ДанныеТабличнойЧасти.ПричинаКорректировки
	               |ПОМЕСТИТЬ ВТ_ОборотыПоСтатьям
	               |ИЗ
	               |	Документ.фин_Бюджет.ОборотыПоСтатьям КАК ДанныеТабличнойЧасти
	               |ГДЕ ДанныеТабличнойЧасти.Ссылка = &Ссылка И
	               |	ВЫБОР
	               |			КОГДА &ТолькоУтвержденные
	               |				ТОГДА ДанныеТабличнойЧасти.Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |; //2
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеТабличнойЧасти.ПериодПланирования КАК Период,
	               |	ДанныеТабличнойЧасти.Состояние КАК Состояние,
	               |	ДанныеТабличнойЧасти.ФинансовыйПоказатель,
	               |	ДанныеТабличнойЧасти.ДополнительныеРазрезы,
	               |	ДанныеТабличнойЧасти.УправленческоеПодразделение,
	               |	ДанныеТабличнойЧасти.Проект,
	               |	ДанныеТабличнойЧасти.Контрагент,
	               |	ДанныеТабличнойЧасти.Номенклатура,
	               |	ДанныеТабличнойЧасти.ВалютаОперации,
	               |	ДанныеТабличнойЧасти.Количество,
	               |	ДанныеТабличнойЧасти.Сумма,
	               |	ДанныеТабличнойЧасти.ПричинаОтклонения,
	               |	ДанныеТабличнойЧасти.ПричинаКорректировки
	               |ПОМЕСТИТЬ ВТ_ЗависимыеОбороты
	               |ИЗ
	               |	Документ.фин_Бюджет.ЗависимыеОбороты КАК ДанныеТабличнойЧасти
	               |ГДЕ ДанныеТабличнойЧасти.Ссылка = &Ссылка И
	               |	ВЫБОР
	               |			КОГДА &ТолькоУтвержденные
	               |				ТОГДА ДанныеТабличнойЧасти.Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |; //3
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеТабличнойЧасти.ПериодПланирования КАК Период,
				   |	ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден) КАК Состояние,
	               |	ДанныеТабличнойЧасти.ФинансовыйПоказатель,
	               |	ДанныеТабличнойЧасти.ДополнительныеРазрезы,
	               |	ДанныеТабличнойЧасти.УправленческоеПодразделение,
	               |	ДанныеТабличнойЧасти.Проект,
	               |	ДанныеТабличнойЧасти.Контрагент,
	               |	ДанныеТабличнойЧасти.Номенклатура,
	               |	ДанныеТабличнойЧасти.ВалютаОперации,
	               |	ДанныеТабличнойЧасти.Количество,
	               |	ДанныеТабличнойЧасти.Сумма
	               |ПОМЕСТИТЬ ВТ_РасчетыПоМоделям
	               |ИЗ
	               |	Документ.фин_Бюджет.РасчетыПоМоделям КАК ДанныеТабличнойЧасти
	               |ГДЕ ДанныеТабличнойЧасти.Ссылка = &Ссылка 
	               |;  //4
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Сценарий КАК Сценарий,
	               |	БюджетнаяОперацияОбороты.Период КАК Период,
	               |	БюджетнаяОперацияОбороты.Состояние КАК Состояние,
	               |	БюджетнаяОперацияОбороты.ФинансовыйПоказатель,
	               |	БюджетнаяОперацияОбороты.ДополнительныеРазрезы,
	               |	БюджетнаяОперацияОбороты.УправленческоеПодразделение,
	               |	БюджетнаяОперацияОбороты.Проект,
	               |	БюджетнаяОперацияОбороты.Контрагент,
	               |	БюджетнаяОперацияОбороты.Номенклатура,
	               |	БюджетнаяОперацияОбороты.ВалютаОперации КАК ВалютаДокумента,
	               |	БюджетнаяОперацияОбороты.Количество,
	               |	БюджетнаяОперацияОбороты.Сумма,
	               |	БюджетнаяОперацияОбороты.ПричинаОтклонения,
	               |	ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.РучнаяКорректировка) КАК СпособКорректировки,
	               |	БюджетнаяОперацияОбороты.ПричинаКорректировки
	               |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	               |ИЗ
	               |	ВТ_ОборотыПоСтатьям КАК БюджетнаяОперацияОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&Сценарий,
	               |	БюджетнаяОперацияЗависимыеОбороты.Период,
	               |	БюджетнаяОперацияЗависимыеОбороты.Состояние КАК Состояние,
	               |	БюджетнаяОперацияЗависимыеОбороты.ФинансовыйПоказатель,
	               |	БюджетнаяОперацияЗависимыеОбороты.ДополнительныеРазрезы,
	               |	БюджетнаяОперацияЗависимыеОбороты.УправленческоеПодразделение,
	               |	БюджетнаяОперацияЗависимыеОбороты.Проект,
	               |	БюджетнаяОперацияЗависимыеОбороты.Контрагент,
	               |	БюджетнаяОперацияЗависимыеОбороты.Номенклатура,
	               |	БюджетнаяОперацияЗависимыеОбороты.ВалютаОперации,
	               |	БюджетнаяОперацияЗависимыеОбороты.Количество,
	               |	БюджетнаяОперацияЗависимыеОбороты.Сумма,
	               |	БюджетнаяОперацияЗависимыеОбороты.ПричинаОтклонения,
	               |	ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.ПоЗависимости),
	               |	БюджетнаяОперацияЗависимыеОбороты.ПричинаКорректировки
	               |ИЗ
	               |	ВТ_ЗависимыеОбороты КАК БюджетнаяОперацияЗависимыеОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&Сценарий,
	               |	БюджетнаяОперацияРасчеты.Период,
	               |	БюджетнаяОперацияРасчеты.Состояние КАК Состояние,
	               |	БюджетнаяОперацияРасчеты.ФинансовыйПоказатель,
	               |	БюджетнаяОперацияРасчеты.ДополнительныеРазрезы,
	               |	БюджетнаяОперацияРасчеты.УправленческоеПодразделение,
	               |	БюджетнаяОперацияРасчеты.Проект,
	               |	БюджетнаяОперацияРасчеты.Контрагент,
	               |	БюджетнаяОперацияРасчеты.Номенклатура,
	               |	БюджетнаяОперацияРасчеты.ВалютаОперации,
	               |	БюджетнаяОперацияРасчеты.Количество,
	               |	БюджетнаяОперацияРасчеты.Сумма,
	               |	NULL,
	               |	ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.ПоРасчетнойМодели),
	               |	NULL
	               |ИЗ
	               |	ВТ_РасчетыПоМоделям КАК БюджетнаяОперацияРасчеты
	               |;  //5
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ОборотыПоСтатьям.Период,
	               |	ВТ_ОборотыПоСтатьям.ВалютаОперации
	               |ПОМЕСТИТЬ ВТ_ВалютыИПериодыТабличныхЧастей
	               |ИЗ
	               |	ВТ_ОборотыПоСтатьям КАК ВТ_ОборотыПоСтатьям
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ЗависимыеОбороты.Период,
	               |	ВТ_ЗависимыеОбороты.ВалютаОперации
	               |ИЗ
	               |	ВТ_ЗависимыеОбороты КАК ВТ_ЗависимыеОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_РасчетыПоМоделям.Период,
	               |	ВТ_РасчетыПоМоделям.ВалютаОперации
	               |ИЗ
	               |	ВТ_РасчетыПоМоделям КАК ВТ_РасчетыПоМоделям
	               |;  //6
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.Период,
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.ВалютаОперации
	               |ПОМЕСТИТЬ ВТ_ВалютыИПериодыДокумента
	               |ИЗ
	               |	ВТ_ВалютыИПериодыТабличныхЧастей КАК ВТ_ВалютыИПериодыТабличныхЧастей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.Период,
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.ВалютаОперации
	               |; //7
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВалютыИПериодыДокумента.Период
	               |ПОМЕСТИТЬ ВТ_ПериодыДокумента
	               |ИЗ
	               |	ВТ_ВалютыИПериодыДокумента КАК ВТ_ВалютыИПериодыДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВалютыИПериодыДокумента.Период";
			// получим данные по курсам
			ТекстЗапроса = ТекстЗапроса + "
			|;  //8
			|";
			
			Если ИспользоватьКурсыДокумента Тогда
				ТекстЗапроса = ТекстЗапроса + "
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеТабличнойЧасти.ПериодПланирования КАК Период,
	               |	ДанныеТабличнойЧасти.Валюта КАК Валюта,
	               |	ДанныеТабличнойЧасти.Курс,
	               |	ДанныеТабличнойЧасти.Кратность
	               |ПОМЕСТИТЬ ВТ_КурсыДокумента
	               |ИЗ
	               |	Документ.фин_Бюджет.КурсыВалютДокумента КАК ДанныеТабличнойЧасти
	               |ГДЕ ДанныеТабличнойЧасти.Ссылка = &Ссылка  И ДанныеТабличнойЧасти.Валюта<>&ВалютаРеглУчета
				   |ОБЪЕДИНИТЬ ВСЕ
				   |ВЫБРАТЬ 
				   |Документ.ПериодПланирования,
				   |&ВалютаРеглУчета,
				   |1,
				   |1
				   |ИЗ
				   |Документ.фин_Бюджет КАК Документ
				   |ГДЕ Документ.Ссылка = &Ссылка
				   |;
				//  Курсы валюты сценария планирования	
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаСценария)
				|СГРУППИРОВАТЬ ПО Обороты.Период
				|; //9
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыВалютСценария
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаСценария
				|; //10
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата,
				|	КурсыВнутр.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыИПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И КурсыВнутр.Валюта = Обороты.ВалютаОперации
				|СГРУППИРОВАТЬ ПО Обороты.Период, КурсыВнутр.Валюта
				|; //11
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность,
				|	КурсыВалют.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_КурсыОперации
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
				|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта
				|; //12
				|ВЫБРАТЬ
				|	МАКСИМУМ(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаУпрУчета)
				|	СГРУППИРОВАТЬ ПО Обороты.Период
				|
				|; // 13
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыУпрУчета
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				//  Курсы валюты сценария планирования	
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаСценария)";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|СГРУППИРОВАТЬ ПО Обороты.Период
				|; //9
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыВалютСценария
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаСценария";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
				// Курсы документа 
				ТекстЗапроса=ТекстЗапроса+"
				|; //10
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата,
				|	КурсыВнутр.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыИПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И КурсыВнутр.Валюта = Обороты.ВалютаОперации";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|СГРУППИРОВАТЬ ПО Обороты.Период, КурсыВнутр.Валюта
				|; //11
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность,
				|	КурсыВалют.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_КурсыОперации
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
				|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	ГДЕ КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
				// Курсы валюты управленческого учета
				ТекстЗапроса=ТекстЗапроса+"
				|; //12
				|ВЫБРАТЬ
				|	МАКСИМУМ(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаУпрУчета)";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|	СГРУППИРОВАТЬ ПО Обороты.Период
				|
				|; // 13
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыУпрУчета
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|; // 14
			|";
						   
			ТекстЗапроса=ТекстЗапроса + "ВЫБРАТЬ
			|	БюджетнаяОперация.Период КАК ПериодПланирования,
			|	БюджетнаяОперация.Состояние КАК Состояние,
			|	БюджетнаяОперация.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
			|	БюджетнаяОперация.Сценарий КАК Сценарий,
			|	БюджетнаяОперация.ВалютаДокумента КАК Валюта,
			|	БюджетнаяОперация.УправленческоеПодразделение КАК УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект КАК Проект,
			|	БюджетнаяОперация.Контрагент КАК Контрагент,
			|	БюджетнаяОперация.Номенклатура КАК Номенклатура,
			|	БюджетнаяОперация.ФинансовыйПоказатель КАК ФинансовыйПоказатель"+?(ВыбратьКорректировки,",
			|   БюджетнаяОперация.ПричинаКорректировки КАК ПричинаКорректировки","")+",
			|   БюджетнаяОперация.ПричинаОтклонения КАК ПричинаОтклонения, 
			|	БюджетнаяОперация.СпособКорректировки КАК СпособКорректировки,
			|	СУММА(БюджетнаяОперация.Сумма) КАК ВалютнаяСумма,
			|	СУММА(БюджетнаяОперация.Количество) КАК Количество,
			|	СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаСценария ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА БюджетнаяОперация.Сумма
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыСценария.Кратность 
			|			/ (КурсыСценария.Курс * КурсыОперации.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаСценария,
			|	СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаУпрУчета ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА БюджетнаяОперация.Сумма
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаУпр
			|ИЗ  ВТ_ДанныеДокумента  КАК БюджетнаяОперация
			//  Курсы валюты сценария планирования	
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалютСценария КАК КурсыСценария
			|		ПО КурсыСценария.Дата = БюджетнаяОперация.Период
			// Курсы документа 
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыОперации КАК КурсыОперации
			|		ПО КурсыОперации.Дата = БюджетнаяОперация.Период И
			|   		КурсыОперации.Валюта = БюджетнаяОперация.ВалютаДокумента
			// Курсы валюты управленческого учета
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыУпрУчета КАК КурсыУпрУчета
			|		ПО КурсыУпрУчета.Дата = БюджетнаяОперация.Период
			// группировки
			|СГРУППИРОВАТЬ ПО
			|	БюджетнаяОперация.Период,
			|	БюджетнаяОперация.Состояние,
			|	БюджетнаяОперация.Сценарий,
			|	БюджетнаяОперация.ДополнительныеРазрезы,
			|	БюджетнаяОперация.ВалютаДокумента,
			|	БюджетнаяОперация.ПричинаОтклонения, 
			|	БюджетнаяОперация.СпособКорректировки"+?(ВыбратьКорректировки,",
			|	БюджетнаяОперация.ПричинаКорректировки","")+",
			|	БюджетнаяОперация.УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект,
			|	БюджетнаяОперация.Контрагент,
			|	БюджетнаяОперация.Номенклатура,
			|	БюджетнаяОперация.ФинансовыйПоказатель
			|
			|ИМЕЮЩИЕ СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаУпрУчета ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА БюджетнаяОперация.Сумма
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)))<>0
			|ИЛИ СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаСценария ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА БюджетнаяОперация.Сумма
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыСценария.Кратность 
			|			/ (КурсыСценария.Курс * КурсыОперации.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)))<>0 
			|ИЛИ СУММА(БюджетнаяОперация.Количество)<>0
			|ИЛИ СУММА(БюджетнаяОперация.Сумма)<>0
			|УПОРЯДОЧИТЬ ПО ПериодПланирования,ФинансовыйПоказатель";
	 Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДляПолученияДанныхПереоценкиДокумента(Реквизиты,ТолькоОтклонения=Ложь)
	ВыбратьКорректировки 		= Реквизиты.УчитыватьПричиныКорректировок;
	ИспользоватьКурсыСценария 	= Реквизиты.Сценарий.ИспользоватьКурсыСценария;
	ИспользоватьКурсыДокумента 	= Реквизиты.ЗадаватьКурсыВалютВДокументе;
	РегистрКурсовВалют 			= ?(ИспользоватьКурсыСценария,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям","КурсыВалют");
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
	               |	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	               |	фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	               |	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
	               |	фин_ОборотыБюджетовОбороты.Проект,
	               |	фин_ОборотыБюджетовОбороты.Контрагент,
	               |	фин_ОборотыБюджетовОбороты.Номенклатура,
	               |	фин_ОборотыБюджетовОбороты.Валюта КАК ВалютаОперации,
	               |	фин_ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	               |	фин_ОборотыБюджетовОбороты.СуммаУпрОборот КАК СуммаУпр,
	               |	фин_ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК Сумма,
	               |	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот КАК СуммаСценария,
	               |	ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден) КАК Состояние,
	               |	ЗНАЧЕНИЕ(Справочник.фин_ОснованияКорректировокБюджетов.ПереоценкаКурсовВалют) КАК ПричинаКорректировки,
	               |	ЗНАЧЕНИЕ(Справочник.фин_ПричиныНепринятияСтрокБюджетов.ПустаяСсылка) КАК ПричинаОтклонения
	               |ПОМЕСТИТЬ ВТ_ОборотыПоСтатьям
	               |ИЗ
	               |	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, , ДокументПланирования В (&ПереоцениваемыеДокументы)) КАК фин_ОборотыБюджетовОбороты
	               |;  //2
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Сценарий КАК Сценарий,
	               |	БюджетнаяОперацияОбороты.Период КАК Период,
	               |	БюджетнаяОперацияОбороты.Состояние КАК Состояние,
	               |	БюджетнаяОперацияОбороты.ФинансовыйПоказатель,
	               |	БюджетнаяОперацияОбороты.ДополнительныеРазрезы,
	               |	БюджетнаяОперацияОбороты.УправленческоеПодразделение,
	               |	БюджетнаяОперацияОбороты.Проект,
	               |	БюджетнаяОперацияОбороты.Контрагент,
	               |	БюджетнаяОперацияОбороты.Номенклатура,
	               |	БюджетнаяОперацияОбороты.ВалютаОперации КАК ВалютаДокумента,
	               |	БюджетнаяОперацияОбороты.Количество,
	               |	БюджетнаяОперацияОбороты.Сумма,
	               |	БюджетнаяОперацияОбороты.СуммаУпр,
	               |	БюджетнаяОперацияОбороты.СуммаСценария,
	               |	БюджетнаяОперацияОбороты.ПричинаОтклонения,
	               |	ЗНАЧЕНИЕ(Перечисление.фин_СпособыВводаКорректировок.РучнаяКорректировка) КАК СпособКорректировки,
	               |	БюджетнаяОперацияОбороты.ПричинаКорректировки
	               |ПОМЕСТИТЬ ВТ_ДанныеДокумента
	               |ИЗ
	               |	ВТ_ОборотыПоСтатьям КАК БюджетнаяОперацияОбороты
	               |;  //3
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ОборотыПоСтатьям.Период,
	               |	ВТ_ОборотыПоСтатьям.ВалютаОперации
	               |ПОМЕСТИТЬ ВТ_ВалютыИПериодыТабличныхЧастей
	               |ИЗ
	               |	ВТ_ОборотыПоСтатьям КАК ВТ_ОборотыПоСтатьям
	               |;  //4
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.Период,
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.ВалютаОперации
	               |ПОМЕСТИТЬ ВТ_ВалютыИПериодыДокумента
	               |ИЗ
	               |	ВТ_ВалютыИПериодыТабличныхЧастей КАК ВТ_ВалютыИПериодыТабличныхЧастей
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.Период,
	               |	ВТ_ВалютыИПериодыТабличныхЧастей.ВалютаОперации
	               |; //7  - уменьшилось на 2 по сравнению с базовым
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВалютыИПериодыДокумента.Период
	               |ПОМЕСТИТЬ ВТ_ПериодыДокумента
	               |ИЗ
	               |	ВТ_ВалютыИПериодыДокумента КАК ВТ_ВалютыИПериодыДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ВалютыИПериодыДокумента.Период";
			// получим данные по курсам
			ТекстЗапроса = ТекстЗапроса + "
			|;  //8
			|";
			
			Если ИспользоватьКурсыДокумента Тогда
				ТекстЗапроса = ТекстЗапроса + "
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеТабличнойЧасти.ПериодПланирования КАК Период,
	               |	ДанныеТабличнойЧасти.Валюта КАК Валюта,
	               |	ДанныеТабличнойЧасти.Курс,
	               |	ДанныеТабличнойЧасти.Кратность
	               |ПОМЕСТИТЬ ВТ_КурсыДокумента
	               |ИЗ
	               |	Документ.фин_Бюджет.КурсыВалютДокумента КАК ДанныеТабличнойЧасти
	               |ГДЕ ДанныеТабличнойЧасти.Ссылка = &Ссылка
				   |;
				//  Курсы валюты сценария планирования	
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаСценария)
				|СГРУППИРОВАТЬ ПО Обороты.Период
				|; //9
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыВалютСценария
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаСценария
				|; //10
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата,
				|	КурсыВнутр.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыИПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И КурсыВнутр.Валюта = Обороты.ВалютаОперации
				|СГРУППИРОВАТЬ ПО Обороты.Период, КурсыВнутр.Валюта
				|; //11
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность,
				|	КурсыВалют.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_КурсыОперации
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
				|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|	ВТ_ПериодыДокумента.Период,
				|	1,
				|	1,
				|	&ВалютаРеглУчета
				|ИЗ ВТ_ПериодыДокумента
				|; //12
				|ВЫБРАТЬ
				|	МАКСИМУМ(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр
				|ИЗ ВТ_КурсыДокумента КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаУпрУчета)
				|	СГРУППИРОВАТЬ ПО Обороты.Период
				|
				|; // 13
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыУпрУчета
				|ИЗ ВТ_КурсыДокумента КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				//  Курсы валюты сценария планирования	
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаСценария)";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|СГРУППИРОВАТЬ ПО Обороты.Период
				|; //9
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыВалютСценария
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборота КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаСценария";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
				// Курсы документа 
				ТекстЗапроса=ТекстЗапроса+"
				|; //10
				|
				|ВЫБРАТЬ
				|	Максимум(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата,
				|	КурсыВнутр.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыИПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И КурсыВнутр.Валюта = Обороты.ВалютаОперации";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|СГРУППИРОВАТЬ ПО Обороты.Период, КурсыВнутр.Валюта
				|; //11
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность,
				|	КурсыВалют.Валюта КАК Валюта
				|ПОМЕСТИТЬ ВТ_КурсыОперации
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаОперации КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период И 
				|      КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	ГДЕ КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
				// Курсы валюты управленческого учета
				ТекстЗапроса=ТекстЗапроса+"
				|; //12
				|ВЫБРАТЬ
				|	МАКСИМУМ(КурсыВнутр.Период) КАК Период,
				|	Обороты.Период КАК Дата
				|ПОМЕСТИТЬ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВнутр
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДокумента КАК Обороты
				|		ПО Обороты.Период >= КурсыВнутр.Период
				|			И (КурсыВнутр.Валюта = &ВалютаУпрУчета)";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|			И (КурсыВнутр.Сценарий=&Сценарий)";
				КонецЕсли;
				ТекстЗапроса=ТекстЗапроса+"
				|	СГРУППИРОВАТЬ ПО Обороты.Период
				|
				|; // 13
				|ВЫБРАТЬ 
				|	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата, 
				|	КурсыВалют.Курс КАК Курс, 
				|	КурсыВалют.Кратность КАК Кратность
				|ПОМЕСТИТЬ ВТ_КурсыУпрУчета
				|ИЗ РегистрСведений."+РегистрКурсовВалют+" КАК КурсыВалют
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодПоследнейЗаписиКурсаНаДатуОборотаУпр КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
				|		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
				|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
				Если ИспользоватьКурсыСценария Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|	И КурсыВалют.Сценарий=&Сценарий";
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|; // 14
			|";
						   
			ТекстЗапроса=ТекстЗапроса + "ВЫБРАТЬ
			|	БюджетнаяОперация.Период КАК ПериодПланирования,
			|	БюджетнаяОперация.Состояние КАК Состояние,
			|	БюджетнаяОперация.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
			|	БюджетнаяОперация.Сценарий КАК Сценарий,
			|	БюджетнаяОперация.ВалютаДокумента КАК Валюта,
			|	БюджетнаяОперация.УправленческоеПодразделение КАК УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект КАК Проект,
			|	БюджетнаяОперация.Контрагент КАК Контрагент,
			|	БюджетнаяОперация.Номенклатура КАК Номенклатура,
			|	БюджетнаяОперация.ФинансовыйПоказатель КАК ФинансовыйПоказатель"+?(ВыбратьКорректировки,",
			|   БюджетнаяОперация.ПричинаКорректировки КАК ПричинаКорректировки","")+",
			|   БюджетнаяОперация.ПричинаОтклонения КАК ПричинаОтклонения, 
			|	БюджетнаяОперация.СпособКорректировки КАК СпособКорректировки,
			|	СУММА(0) КАК ВалютнаяСумма,
			|	СУММА(0) КАК Количество,
			|	СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаСценария ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА 0
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыСценария.Кратность 
			|			/ (КурсыСценария.Курс * КурсыОперации.Кратность) - БюджетнаяОперация.СуммаСценария
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаСценария,
			|	СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаУпрУчета ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА 0
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность)  - БюджетнаяОперация.СуммаУпр
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2))) КАК СуммаУпр
			|ИЗ  ВТ_ДанныеДокумента  КАК БюджетнаяОперация
			//  Курсы валюты сценария планирования	
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалютСценария КАК КурсыСценария
			|		ПО КурсыСценария.Дата = БюджетнаяОперация.Период
			// Курсы документа 
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыОперации КАК КурсыОперации
			|		ПО КурсыОперации.Дата = БюджетнаяОперация.Период И
			|   		КурсыОперации.Валюта = БюджетнаяОперация.ВалютаДокумента
			// Курсы валюты управленческого учета
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыУпрУчета КАК КурсыУпрУчета
			|		ПО КурсыУпрУчета.Дата = БюджетнаяОперация.Период
			// группировки
			|СГРУППИРОВАТЬ ПО
			|	БюджетнаяОперация.Период,
			|	БюджетнаяОперация.Состояние,
			|	БюджетнаяОперация.Сценарий,
			|	БюджетнаяОперация.ДополнительныеРазрезы,
			|	БюджетнаяОперация.ВалютаДокумента,
			|	БюджетнаяОперация.ПричинаОтклонения, 
			|	БюджетнаяОперация.СпособКорректировки"+?(ВыбратьКорректировки,",
			|	БюджетнаяОперация.ПричинаКорректировки","")+",
			|	БюджетнаяОперация.УправленческоеПодразделение,
			|	БюджетнаяОперация.Проект,
			|	БюджетнаяОперация.Контрагент,
			|	БюджетнаяОперация.Номенклатура,
			|	БюджетнаяОперация.ФинансовыйПоказатель
			|
			|ИМЕЮЩИЕ СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаУпрУчета ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА 0
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаУпрУчета И КурсыОперации.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыОперации.Кратность) - БюджетнаяОперация.СуммаУпр
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)))<>0
			|ИЛИ СУММА(ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА БюджетнаяОперация.ВалютаДокумента=&ВалютаСценария ИЛИ БюджетнаяОперация.ФинансовыйПоказатель.ОтносительныйПоказатель ТОГДА 0
			|		КОГДА БюджетнаяОперация.ВалютаДокумента<>&ВалютаСценария И КурсыОперации.Курс <>0 И КурсыСценария.Курс <>0 ТОГДА
			|			БюджетнаяОперация.Сумма*КурсыОперации.Курс * КурсыСценария.Кратность 
			|			/ (КурсыСценария.Курс * КурсыОперации.Кратность)  - БюджетнаяОперация.СуммаСценария 
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)))<>0 
			|УПОРЯДОЧИТЬ ПО ПериодПланирования,ФинансовыйПоказатель";
	 Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаАвтоматическиеЛимиты(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если НЕ (Реквизиты["ЕстьОборотыПоСтатьям"] ИЛИ Реквизиты["ЕстьЗависимыеОбороты"] ИЛИ Реквизиты["ЕстьРасчетыПоМоделям"]) Тогда
		ПараметрыПроведения.Вставить("ТаблицаНастройкиРегулярногоКонтроляПоказателей", Неопределено);
		ПараметрыПроведения.Вставить("ТаблицаУстановкаОграниченийПоБюджетам", Неопределено);
	Иначе
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("ОборотыПоСтатьям");
		МассивТЧ.Добавить("ЗависимыеОбороты");
		МассивТЧ.Добавить("РасчетыПоМоделям");
		Первая = Истина;
		Для Каждого ИмяТЧ Из МассивТЧ Цикл
			Если Реквизиты["Есть"+ИмяТЧ] Тогда
				Если НЕ Первая Тогда
					ТекстЗапроса = 	ТекстЗапроса +	"
					|
		               		|ОБЪЕДИНИТЬ ВСЕ
					|
					|";
					
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               		|	Таблица"+ИмяТЧ+".ФинансовыйПоказатель"+?(Первая,"
		               		|ПОМЕСТИТЬ ВТ_Показатели","")+"
		               		|ИЗ
		               		|	Таблица"+ИмяТЧ+" КАК Таблица"+ИмяТЧ;
				Первая = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса= ТекстЗапроса+"
							|;
		               		|
		               		|////////////////////////////////////////////////////////////////////////////////
		               		|ВЫБРАТЬ
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.ФинансовыйПоказатель,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.ВидКонтроля,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.ВидОтклоненияКонтролируемыхЗначений,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Контрагент,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Номенклатура,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Отклонение,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Проект,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез1,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез10,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез2,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез3,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез4,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез5,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез6,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез7,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез8,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.Разрез9,
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.УправленческоеПодразделение
		               		|ИЗ
		               		|	РегистрСведений.фин_НастройкиРегулярногоКонтроляПоказателей.СрезПоследних(
		               		|			&ПериодПланирования,
		               		|			ФинансовыйПоказатель В
		               		|					(ВЫБРАТЬ
		               		|						ВТ_Показатели.ФинансовыйПоказатель
		               		|					ИЗ
		               		|						ВТ_Показатели КАК ВТ_Показатели)
		               		|				И ИспользованиеКонтролируемыхЗначений = &ИспользованиеКонтролируемогоЗначения
		               		|				И Сценарий = &Сценарий) КАК фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних
		               		|ГДЕ
		               		|	фин_НастройкиРегулярногоКонтроляПоказателейСрезПоследних.ПрименятьКонтроль
		               		|;
		               		|
		               		|////////////////////////////////////////////////////////////////////////////////
		               		|ВЫБРАТЬ
		               		|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
		               		|	фин_УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения,
		               		|	фин_УстановкаОграниченийПоБюджетам.УправленческоеПодразделение,
		               		|	фин_УстановкаОграниченийПоБюджетам.Проект,
		               		|	фин_УстановкаОграниченийПоБюджетам.Контрагент,
		               		|	фин_УстановкаОграниченийПоБюджетам.Номенклатура,
		               		|	фин_УстановкаОграниченийПоБюджетам.ПериодПланирования,
		               		|	фин_УстановкаОграниченийПоБюджетам.ДополнительныеРазрезы
		               		|ИЗ
		               		|	РегистрСведений.фин_УстановкаОграниченийПоБюджетам КАК фин_УстановкаОграниченийПоБюджетам
		               		|ГДЕ
		               		|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель В
		               		|			(ВЫБРАТЬ
		               		|				ВТ_Показатели.ФинансовыйПоказатель
		               		|			ИЗ
		               		|				ВТ_Показатели КАК ВТ_Показатели)
		               		|	И фин_УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения
		               		|	И фин_УстановкаОграниченийПоБюджетам.КонтролирующийСценарий = &Сценарий
		               		|	И фин_УстановкаОграниченийПоБюджетам.Организация = &Организация
		               		|	И фин_УстановкаОграниченийПоБюджетам.ПериодПланирования >= &ПериодПланирования
		               		|	И фин_УстановкаОграниченийПоБюджетам.ПериодПланирования <= &ГоризонтПланирования
		               		|
		               		|СГРУППИРОВАТЬ ПО
		               		|	фин_УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения,
		               		|	фин_УстановкаОграниченийПоБюджетам.ФинансовыйПоказатель,
		               		|	фин_УстановкаОграниченийПоБюджетам.УправленческоеПодразделение,
		               		|	фин_УстановкаОграниченийПоБюджетам.Контрагент,
		               		|	фин_УстановкаОграниченийПоБюджетам.ДополнительныеРазрезы,
		               		|	фин_УстановкаОграниченийПоБюджетам.Номенклатура,
		               		|	фин_УстановкаОграниченийПоБюджетам.Проект,
		               		|	фин_УстановкаОграниченийПоБюджетам.ПериодПланирования";

		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ВТ_Показатели",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаНастройкиРегулярногоКонтроляПоказателей",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаУстановкаОграниченийПоБюджетам",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция ПереоцениваемыеДокументы(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджет.Ссылка,
		|	фин_Бюджет.Дата КАК Дата
		|ИЗ
		|	Документ.фин_Бюджет КАК фин_Бюджет
		|ГДЕ
		|	фин_Бюджет.Проведен
		|	И фин_Бюджет.Дата < &Дата
		|	И фин_Бюджет.Ссылка <> &Ссылка
		|	И фин_Бюджет.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.Заявка)
		|	И фин_Бюджет.Организация = &Организация
		|	И фин_Бюджет.ПериодПланирования = &ПериодПланирования
		|	И фин_Бюджет.ФормируемыйБюджет = &ФормируемыйБюджет
		|	И фин_Бюджет.Сценарий = &Сценарий
		|	И фин_Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение
		|	И фин_Бюджет.Проект = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("Дата", 							Объект.Дата);
	Запрос.УстановитьПараметр("Организация", 					Объект.Организация);
	Запрос.УстановитьПараметр("ПериодПланирования", 			Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("Проект", 						Объект.Проект);
	Запрос.УстановитьПараметр("Ссылка", 						Объект.Ссылка);
	Запрос.УстановитьПараметр("Сценарий", 						Объект.Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", 	Объект.УправленческоеПодразделение);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", 				Объект.ФормируемыйБюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаполнитьКЭШ_Цен(Объект,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетОборотыПоСтатьям.ФинансовыйПоказатель,
		|	БюджетОборотыПоСтатьям.УправленческоеПодразделение,
		|	БюджетОборотыПоСтатьям.Проект,
		|	БюджетОборотыПоСтатьям.Контрагент,
		|	БюджетОборотыПоСтатьям.ПериодПланирования,
		|	БюджетОборотыПоСтатьям.Номенклатура,
		|	ФинансовыеПоказатели.ИсточникДанныхДляЦены,
		|	БюджетОборотыПоСтатьям.ВалютаОперации,
		|	ФинансовыеПоказатели.СпособЦенообразования,
		|	ФинансовыеПоказатели.ИспользуемыйТипЦен
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	Документ.фин_Бюджет.ОборотыПоСтатьям КАК БюджетОборотыПоСтатьям
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО БюджетОборотыПоСтатьям.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	БюджетОборотыПоСтатьям.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
		|				ТОГДА БюджетОборотыПоСтатьям.ФинансовыйПоказатель.ИсточникДанныхДляЦены <> ЗНАЧЕНИЕ(Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка)
		|						И БюджетОборотыПоСтатьям.ФинансовыйПоказатель.ПоказательИсточникаДанныхДляЦены <> """"
		|			ИНАЧЕ ФинансовыеПоказатели.СпособЦенообразования <> ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать)
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетОборотыПоСтатьям.ФинансовыйПоказатель,
		|	БюджетОборотыПоСтатьям.УправленческоеПодразделение,
		|	БюджетОборотыПоСтатьям.Проект,
		|	БюджетОборотыПоСтатьям.Контрагент,
		|	БюджетОборотыПоСтатьям.ПериодПланирования,
		|	БюджетОборотыПоСтатьям.Номенклатура,
		|	ФинансовыеПоказатели.ИсточникДанныхДляЦены,
		|	БюджетОборотыПоСтатьям.ВалютаОперации,
		|	ФинансовыеПоказатели.СпособЦенообразования,
		|	ФинансовыеПоказатели.ИспользуемыйТипЦен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БюджетОборотыПоСтатьям.ФинансовыйПоказатель,
		|	БюджетОборотыПоСтатьям.УправленческоеПодразделение,
		|	БюджетОборотыПоСтатьям.Проект,
		|	БюджетОборотыПоСтатьям.Контрагент,
		|	БюджетОборотыПоСтатьям.ПериодПланирования,
		|	БюджетОборотыПоСтатьям.Номенклатура,
		|	ФинансовыеПоказатели.ИсточникДанныхДляЦены,
		|	БюджетОборотыПоСтатьям.ВалютаОперации,
		|	ФинансовыеПоказатели.СпособЦенообразования,
		|	ФинансовыеПоказатели.ИспользуемыйТипЦен
		|ИЗ
		|	Документ.фин_Бюджет.РасчетыПоМоделям КАК БюджетОборотыПоСтатьям
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО БюджетОборотыПоСтатьям.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	БюджетОборотыПоСтатьям.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
		|				ТОГДА БюджетОборотыПоСтатьям.ФинансовыйПоказатель.ИсточникДанныхДляЦены <> ЗНАЧЕНИЕ(Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка)
		|						И БюджетОборотыПоСтатьям.ФинансовыйПоказатель.ПоказательИсточникаДанныхДляЦены <> """"
		|			ИНАЧЕ ФинансовыеПоказатели.СпособЦенообразования <> ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать)
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетОборотыПоСтатьям.ФинансовыйПоказатель,
		|	БюджетОборотыПоСтатьям.УправленческоеПодразделение,
		|	БюджетОборотыПоСтатьям.Проект,
		|	БюджетОборотыПоСтатьям.Контрагент,
		|	БюджетОборотыПоСтатьям.ПериодПланирования,
		|	БюджетОборотыПоСтатьям.Номенклатура,
		|	ФинансовыеПоказатели.ИсточникДанныхДляЦены,
		|	БюджетОборотыПоСтатьям.ВалютаОперации,
		|	ФинансовыеПоказатели.СпособЦенообразования,
		|	ФинансовыеПоказатели.ИспользуемыйТипЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Показатели.ФинансовыйПоказатель,
		|	ВЫБОР
		|		КОГДА ИзмеренияПодразделения.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|		ИНАЧЕ ВТ_Показатели.УправленческоеПодразделение
		|	КОНЕЦ КАК УправленческоеПодразделение,
		|	ВЫБОР
		|		КОГДА ИзмеренияПроект.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
		|		ИНАЧЕ ВТ_Показатели.Проект
		|	КОНЕЦ КАК Проект,
		|	ВЫБОР
		|		КОГДА ВТ_Показатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
		|			ТОГДА ВЫБОР
		|					КОГДА ИзмеренияКонтрагент.НомерСтроки ЕСТЬ NULL 
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|					ИНАЧЕ ВТ_Показатели.Контрагент
		|				КОНЕЦ
		|		КОГДА ВТ_Показатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков)
		|			ТОГДА ВТ_Показатели.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Контрагент,
		|	ВТ_Показатели.ПериодПланирования,
		|	ВТ_Показатели.Номенклатура,
		|	ВТ_Показатели.ВалютаОперации,
		|	ВТ_Показатели.ИсточникДанныхДляЦены,
		|	ВТ_Показатели.СпособЦенообразования,
		|	ВТ_Показатели.ИспользуемыйТипЦен
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИзмеренияПроект
		|		ПО ВТ_Показатели.ИсточникДанныхДляЦены = ИзмеренияПроект.Ссылка
		|			И (ИзмеренияПроект.ИзмерениеБюджетирования = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИзмеренияКонтрагент
		|		ПО ВТ_Показатели.ИсточникДанныхДляЦены = ИзмеренияКонтрагент.Ссылка
		|			И (ИзмеренияКонтрагент.ИзмерениеБюджетирования = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИзмеренияПодразделения
		|		ПО ВТ_Показатели.ИсточникДанныхДляЦены = ИзмеренияПодразделения.Ссылка
		|			И (ИзмеренияПодразделения.ИзмерениеБюджетирования = ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Показатели.ФинансовыйПоказатель,
		|	ВТ_Показатели.ПериодПланирования,
		|	ВТ_Показатели.Номенклатура,
		|	ВТ_Показатели.ВалютаОперации,
		|	ВТ_Показатели.ИсточникДанныхДляЦены,
		|	ВТ_Показатели.СпособЦенообразования,
		|	ВТ_Показатели.ИспользуемыйТипЦен,
		|	ВЫБОР
		|		КОГДА ИзмеренияПодразделения.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|		ИНАЧЕ ВТ_Показатели.УправленческоеПодразделение
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИзмеренияПроект.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
		|		ИНАЧЕ ВТ_Показатели.Проект
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_Показатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
		|			ТОГДА ВЫБОР
		|					КОГДА ИзмеренияКонтрагент.НомерСтроки ЕСТЬ NULL 
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|					ИНАЧЕ ВТ_Показатели.Контрагент
		|				КОНЕЦ
		|		КОГДА ВТ_Показатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков)
		|			ТОГДА ВТ_Показатели.Контрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    ТаблицаПолная = Запрос.Выполнить().Выгрузить();
	ГруппыРасчетаЦен = ТаблицаПолная.Скопировать();
	ГруппыРасчетаЦен.Свернуть("ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,ПериодПланирования,ВалютаОперации,ИсточникДанныхДляЦены,СпособЦенообразования,ИспользуемыйТипЦен");
	Для Каждого СтрокаРасчет Из ГруппыРасчетаЦен Цикл
		СписокНоменклатуры = Новый СписокЗначений;
		СтруктураПоискН = Новый Структура("ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,ПериодПланирования,ВалютаОперации,СпособЦенообразования,ИспользуемыйТипЦен");
		ЗаполнитьЗначенияСвойств(СтруктураПоискН,СтрокаРасчет);
		СтрокиН = ТаблицаПолная.НайтиСтроки(СтруктураПоискН);
		Для Каждого СтрокаН Из СтрокиН Цикл
			СписокНоменклатуры.Добавить(СтрокаН.Номенклатура);
		КонецЦикла;
		фин_ПроцедурыУправленияПлановымЦенообразованием.ЗаполнитьКЭШ_ЦенНоменклатуры(СтрокаРасчет,СписокНоменклатуры,Объект.Сценарий,ВестиУчетПоПроектам,СтрокаРасчет.ПериодПланирования,КЭШ_ЦеныНоменклатуры);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей) Экспорт
	СписокФильтрСтатей.Очистить();
	Если Объект.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Заявка И Объект.УровеньДетализацииБюджета = Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям.СтатьяБюджета
			|ИЗ
			|	РегистрСведений.фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям КАК фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям
			|ГДЕ
			|	фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям.Бюджет = &Бюджет
			|	И фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям.УправленческоеПодразделение = &УправленческоеПодразделение
			|	И НЕ фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям.СтатьяБюджета.ПометкаУдаления";

		Запрос.УстановитьПараметр("Бюджет", Объект.ФормируемыйБюджет);
		Запрос.УстановитьПараметр("УправленческоеПодразделение", Объект.УправленческоеПодразделение);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокФильтрСтатей.Добавить(ВыборкаДетальныеЗаписи.СтатьяБюджета);
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

// СписокРассчитываемыхПоМодели
//
Функция СписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СтатьиОборотов=Ложь, СписокРассчитываемыхВПредшествующихБюджетах = Неопределено) Экспорт
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	Организация 			= Объект.Организация;
	Дата 					= Объект.Дата;
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Если ФормируемыйБюджет.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если ВалютаДокумента.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если Сценарий.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если ПериодПланирования = '00010101' Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьРасчетныеМоделиБюджетирования") Тогда
		Список  = Новый СписокЗначений;
		ДобавитьРассчитываемыеПоПроизводственнойМодели(Объект,Версия,Список,СтатьиОборотов);
		ДобавитьРассчитываемыеПоМоделямРаспределения(Объект,Версия,Список,СтатьиОборотов);
		Возврат Список;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатьиОборотовИзПрочихБюджетов.ФинансовыйПоказатель
	               |ПОМЕСТИТЬ ВТ_СтатьиВысшегоПорядка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РегламентСрез.Бюджет КАК Бюджет
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			РегламентСрез.Ранг КАК Ранг
	               |		ИЗ
	               |			РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(, Бюджет = &Бюджет И &Регламент = &Регламент) КАК РегламентСрез) КАК ВложенныйЗапрос
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(,&Регламент = &Регламент) КАК РегламентСрез
	               |			ПО ВложенныйЗапрос.Ранг > РегламентСрез.Ранг) КАК БолееПриоритетныеБюджеты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	               |			СтатьиБюджета.Владелец КАК Бюджет
	               |		ИЗ
	               |			Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |		ГДЕ
	               |			СтатьиБюджета.Владелец <> &Бюджет) КАК СтатьиОборотовИзПрочихБюджетов
	               |		ПО БолееПриоритетныеБюджеты.Бюджет = СтатьиОборотовИзПрочихБюджетов.Бюджет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	               |	СтатьиБюджета.ФинансовыйПоказатель
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиВысшегоПорядка КАК ВТ_СтатьиВысшегоПорядка
	               |		ПО СтатьиБюджета.ФинансовыйПоказатель = ВТ_СтатьиВысшегоПорядка.ФинансовыйПоказатель
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель КАК ФинансовыйПоказатель
	               |		ИЗ
	               |			РегистрСведений.фин_РегламентныеРасчетыПоМоделям КАК РегламентныеРасчетыПоМоделям
	               |		ГДЕ
	               |			ВЫБОР
	               |					КОГДА &БюджетированиеПоОрганизациям
	               |						ТОГДА РегламентныеРасчетыПоМоделям.Организация = &Организация
	               |								ИЛИ РегламентныеРасчетыПоМоделям.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |			И РегламентныеРасчетыПоМоделям.Сценарий = &Сценарий
	               |			И РегламентныеРасчетыПоМоделям.НачалоИспользования <= &КонецПланирования
	               |			И РегламентныеРасчетыПоМоделям.КонецИспользования >= &НачалоПланирования) КАК ВложенныйЗапрос
	               |		ПО СтатьиБюджета.ФинансовыйПоказатель = ВложенныйЗапрос.ФинансовыйПоказатель
	               |ГДЕ
	               |	(НЕ СтатьиБюджета.ЭтоГруппа)
	               |	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	               |	И СтатьиБюджета.Владелец = &Бюджет
	               |	И СтатьиБюджета.Версия В (&Версии)
	               |	И ВТ_СтатьиВысшегоПорядка.ФинансовыйПоказатель ЕСТЬ NULL ";
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",	БюджетированиеПоОрганизациям);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Регламент",			БюджетныйРегламент(Объект));
	Запрос.УстановитьПараметр("Бюджет",				ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Сценарий",			Сценарий);
	Запрос.УстановитьПараметр("НачалоПланирования",	ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	Запрос.УстановитьПараметр("Дата",				Дата);
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(?(СтатьиОборотов,"ФинансовыйПоказатель","СтатьяБюджета")));
	ДобавитьРассчитываемыеПоПроизводственнойМодели(Объект,Версия,СписокСтатей,СтатьиОборотов,СписокРассчитываемыхВПредшествующихБюджетах);
	ДобавитьРассчитываемыеПоМоделямРаспределения(Объект,Версия,СписокСтатей,СтатьиОборотов);
	Возврат СписокСтатей;
КонецФункции //СписокРассчитываемыхПоМодели() Экспорт

Процедура ЗаполнитьСписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокДляЗаполнения,СписокРассчитываемыхВПредшествующихБюджетах=Неопределено) Экспорт
	Если СписокРассчитываемыхВПредшествующихБюджетах<>Неопределено Тогда
		СписокРассчитываемыхВПредшествующихБюджетах.Очистить();
	КонецЕсли;
	СписокДляЗаполнения.Очистить();
	НужныйСписок = СписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,,СписокРассчитываемыхВПредшествующихБюджетах);
	СписокДляЗаполнения.ЗагрузитьЗначения(НужныйСписок.ВыгрузитьЗначения());
КонецПроцедуры

// СписокНаследуемыхСтатей
//
Функция СписокНаследуемыхСтатей(Объект,Версия=Неопределено,СписокФильтрСтатей=Неопределено,БюджетированиеПоОрганизациям=Неопределено,ФинансовыеПоказатели=Ложь) Экспорт
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	Организация 			= Объект.Организация;
	Дата 					= Объект.Дата;
	ПродолжительностьЦикла 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Проект 					= Объект.Проект;
	УправленческоеПодразделение	= Объект.УправленческоеПодразделение;
	
	Если Версия = Неопределено Тогда
		Версия 	= фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(ФормируемыйБюджет,ПериодПланирования);
	КонецЕсли;
	Если СписокФильтрСтатей = Неопределено Тогда
		СписокФильтрСтатей 							= Новый СписокЗначений;
	    ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей);
	КонецЕсли;
	Если БюджетированиеПоОрганизациям = Неопределено Тогда
		БюджетированиеПоОрганизациям 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	КонецЕсли;

	
	Если ФормируемыйБюджет.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если Сценарий.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если ПериодПланирования = '00010101' Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиОборотовИзПрочихБюджетов.ФинансовыйПоказатель
	               |ПОМЕСТИТЬ ВТ_СтатьиВысшегоПорядка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РегламентСрез.Бюджет КАК Бюджет
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			РегламентФормированияБюджетовСрезПоследних.Ранг КАК Ранг
	               |		ИЗ
	               |			РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(&ПериодПланирования, Бюджет = &Бюджет И &Регламент = &Регламент) КАК РегламентФормированияБюджетовСрезПоследних) КАК ВложенныйЗапрос
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов.СрезПоследних(&ПериодПланирования,&Регламент = &Регламент) КАК РегламентСрез
	               |			ПО ВложенныйЗапрос.Ранг > РегламентСрез.Ранг) КАК БолееПриоритетныеБюджеты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	               |			СтатьиБюджета.Владелец КАК Бюджет
	               |		ИЗ
	               |			Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |		ГДЕ
	               |			СтатьиБюджета.Владелец <> &Бюджет) КАК СтатьиОборотовИзПрочихБюджетов
	               |		ПО БолееПриоритетныеБюджеты.Бюджет = СтатьиОборотовИзПрочихБюджетов.Бюджет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	               |	ВТ_СтатьиВысшегоПорядка.ФинансовыйПоказатель
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиВысшегоПорядка КАК ВТ_СтатьиВысшегоПорядка
	               |		ПО СтатьиБюджета.ФинансовыйПоказатель = ВТ_СтатьиВысшегоПорядка.ФинансовыйПоказатель
	               |ГДЕ
	               |	(НЕ СтатьиБюджета.ЭтоГруппа)
	               |	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	               |	И СтатьиБюджета.Версия В (&Версии)
	               |	И СтатьиБюджета.Владелец = &Бюджет";
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Регламент",			БюджетныйРегламент(Объект));
	Запрос.УстановитьПараметр("Сценарий",			Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",				УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Бюджет",				ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",				Проект);
	Запрос.УстановитьПараметр("ПериодПланирования",	ПериодПланирования);
	Запрос.УстановитьПараметр("Дата",				Дата);
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(?(ФинансовыеПоказатели,"ФинансовыйПоказатель","СтатьяБюджета")));
	Возврат СписокСтатей;
КонецФункции //СписокНаследуемыхСтатей() Экспорт

Процедура ЗаполнитьСписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокДляЗаполнения) Экспорт
	СписокДляЗаполнения.Очистить();
	НужныйСписок = СписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
	СписокДляЗаполнения.ЗагрузитьЗначения(НужныйСписок.ВыгрузитьЗначения());
КонецПроцедуры

// СписокЗависимыхСтатей
//
Функция СписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СтатьиОборотов=Ложь) Экспорт
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	Организация 			= Объект.Организация;
	Дата 					= Объект.Дата;
	ПродолжительностьЦикла 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Проект 					= Объект.Проект;
	УправленческоеПодразделение	= Объект.УправленческоеПодразделение;

	
	Если ФормируемыйБюджет.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если ВалютаДокумента.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если Сценарий.Пустая() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если ПериодПланирования = '00010101' Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	               |	СтатьиБюджета.ФинансовыйПоказатель
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_ЗависимостиФинансовыхПоказателей.СрезПоследних(
	               |				&Дата,
	               |				ВЫБОР
	               |						КОГДА &БюджетированиеПоОрганизациям
	               |							ТОГДА Организация = &Организация
	               |									ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ
	               |					И ВЫБОР
	               |						КОГДА &УправленческоеПодразделение = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ИсходныйНаборРазрезов.УправленческоеПодразделение = &УправленческоеПодразделение
	               |								ИЛИ ИсходныйНаборРазрезов.ОтборУправленческоеПодразделение = ЛОЖЬ
	               |					КОНЕЦ
	               |					И ВЫБОР
	               |						КОГДА &Проект = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ИсходныйНаборРазрезов.Проект = &Проект
	               |								ИЛИ ИсходныйНаборРазрезов.ОтборПроект = ЛОЖЬ
	               |					КОНЕЦ
	               |					И (ИсхСценарий = &Сценарий
	               |						ИЛИ ИсхСценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка))) КАК Зависимости
	               |		ПО СтатьиБюджета.ФинансовыйПоказатель = Зависимости.ЗависимаяФинансовыйПоказатель
	               |ГДЕ
	               |	(НЕ СтатьиБюджета.ЭтоГруппа)
	               |	И (НЕ СтатьиБюджета.ПометкаУдаления)
	               |	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	               |	И СтатьиБюджета.Версия В (&Версии)
	               |	И СтатьиБюджета.Владелец = &Бюджет
//	               |	И (НЕ СтатьиБюджета.Ссылка В (&СписокРассчитываемых))
	               |	И НЕ Зависимости.ЗависимаяФинансовыйПоказатель ЕСТЬ NULL 
	               |	И (Зависимости.ДатаЗавершения > &Дата
	               |			ИЛИ Зависимости.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Сценарий",			Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",				УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Бюджет",				ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",				Проект);
	Запрос.УстановитьПараметр("Дата",				ПериодПланирования);
	Запрос.УстановитьПараметр("СписокРассчитываемых",СписокРассчитываемых);
	Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",БюджетированиеПоОрганизациям);
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(?(СтатьиОборотов,"ФинансовыйПоказатель","СтатьяБюджета")));
	Возврат СписокСтатей;
КонецФункции //СписокЗависимыхСтатей()

Процедура ЗаполнитьСписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СписокДляЗаполнения) Экспорт
	СписокДляЗаполнения.Очистить();
	НужныйСписок = СписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых);
	СписокДляЗаполнения.ЗагрузитьЗначения(НужныйСписок.ВыгрузитьЗначения());
КонецПроцедуры

Процедура ДобавитьРассчитываемыеПоПроизводственнойМодели(Объект,Версия,СписокСтатей,СтатьиОборотов=Ложь,СписокРассчитываемыхВПредшествующихБюджетах=Неопределено)
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьПроизводственныеМодели") Тогда
		Возврат;
	КонецЕсли;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;

	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_РасчетПроизводственныхМоделейСрезПоследних.Модель,
		|	фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции КАК ИсходныйПоказатель
		|ПОМЕСТИТЬ ВТ_Модели
		|ИЗ
		|	РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних(
		|			&ПериодПланирования,
		|			Сценарий = &Сценарий
		|				ИЛИ Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)) КАК фин_РасчетПроизводственныхМоделейСрезПоследних
		|ГДЕ
		|	фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_ПроизводственныеМоделиОтражениеРезультатов.ЗначениеФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	ВТ_Модели.ИсходныйПоказатель КАК ИсходныйПоказатель
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	ВТ_Модели КАК ВТ_Модели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ОтражениеРезультатов КАК фин_ПроизводственныеМоделиОтражениеРезультатов
		|		ПО ВТ_Модели.Модель = фин_ПроизводственныеМоделиОтражениеРезультатов.Ссылка
		|ГДЕ
		|	фин_ПроизводственныеМоделиОтражениеРезультатов.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Перечисление.фин_ИсточникиЗаполненияПолейПроизводственнойМодели.ФиксированноеЗначение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.ФинансовыйПоказатель,
		|	ВТ_Модели.ИсходныйПоказатель КАК ИсходныйПоказатель
		|ИЗ
		|	ВТ_Модели КАК ВТ_Модели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели.ДополнительныеЗатратыНаВыпуск КАК фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск
		|		ПО ВТ_Модели.Модель = фин_ПроизводственныеМоделиДополнительныеЗатратыНаВыпуск.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ПроизводственныеМодели.ФинансовыйПоказательДляОтраженияТрудовыхЗатрат,
		|	ВТ_Модели.ИсходныйПоказатель КАК ИсходныйПоказатель
		|ИЗ
		|	ВТ_Модели КАК ВТ_Модели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПроизводственныеМодели КАК фин_ПроизводственныеМодели
		|		ПО ВТ_Модели.Модель = фин_ПроизводственныеМодели.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ПараметрыПланированияПроизводстваСрезПоследних.ФинансовыйПоказатель,
		|	NULL
		|ИЗ
		|	РегистрСведений.фин_ПараметрыПланированияПроизводства.СрезПоследних(&ПериодПланирования, ) КАК фин_ПараметрыПланированияПроизводстваСрезПоследних
		|ГДЕ
		|	фин_ПараметрыПланированияПроизводстваСрезПоследних.ФинансовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Показатели.ФинансовыйПоказатель,
		|	ВЫБОР КОГДА ВТ_Показатели.ИсходныйПоказатель ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ВЫБОР КОГДА ВложенныйЗапросДляИсходногоПоказателя.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КОНЕЦ КАК РассчитываетсяВоВнешнихБюджетах,
		|	ВложенныйЗапрос.Ссылка КАК СтатьяБюджета
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			фин_СтатьиБюджета.Ссылка КАК Ссылка,
		|			фин_СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель
		|		ИЗ
		|			Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ГДЕ
		|			фин_СтатьиБюджета.Владелец = &ФормируемыйБюджет
		|			И фин_СтатьиБюджета.Версия В(&Версии)) КАК ВложенныйЗапрос
		|		ПО ВТ_Показатели.ФинансовыйПоказатель = ВложенныйЗапрос.ФинансовыйПоказатель
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			фин_СтатьиБюджета.Ссылка КАК Ссылка,
		|			фин_СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель
		|		ИЗ
		|			Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ГДЕ
		|			фин_СтатьиБюджета.Владелец = &ФормируемыйБюджет
		|			И фин_СтатьиБюджета.Версия В(&Версии)) КАК ВложенныйЗапросДляИсходногоПоказателя
		|		ПО ВТ_Показатели.ИсходныйПоказатель = ВложенныйЗапросДляИсходногоПоказателя.ФинансовыйПоказатель
		|ГДЕ
		|	ВТ_Показатели.ФинансовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)";

	Запрос.УстановитьПараметр("ПериодПланирования", ПериодПланирования);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
 	Запрос.УстановитьПараметр("Версии", Версии);
  	Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокСтатей.Добавить(?(СтатьиОборотов,ВыборкаДетальныеЗаписи.ФинансовыйПоказатель,ВыборкаДетальныеЗаписи.СтатьяБюджета));
		Если ВыборкаДетальныеЗаписи.РассчитываетсяВоВнешнихБюджетах И СписокРассчитываемыхВПредшествующихБюджетах<>Неопределено Тогда
			СписокРассчитываемыхВПредшествующихБюджетах.Добавить(?(СтатьиОборотов,ВыборкаДетальныеЗаписи.ФинансовыйПоказатель,ВыборкаДетальныеЗаписи.СтатьяБюджета));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьРассчитываемыеПоМоделямРаспределения(Объект,Версия,СписокСтатей,СтатьиОборотов=Ложь)
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьМоделиРаспределения") Тогда
		Возврат;
	КонецЕсли;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;

	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_РасчетМоделейРаспределения.Модель
		|ПОМЕСТИТЬ ВТ_Модели
		|ИЗ
		|	РегистрСведений.фин_РасчетМоделейРаспределения.СрезПоследних(
		|			&ПериодПланирования,
		|			Сценарий = &Сценарий
		|				ИЛИ Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)) КАК фин_РасчетМоделейРаспределения
		|ГДЕ
		|	фин_РасчетМоделейРаспределения.ПрименятьМодель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МоделиРаспределенияБюджетныхДанных.ФинансовыйПоказатель КАК ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	ВТ_Модели КАК ВТ_Модели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_МоделиРаспределенияБюджетныхДанных.ОтражениеРезультатов КАК МоделиРаспределенияБюджетныхДанных
		|		ПО ВТ_Модели.Модель = МоделиРаспределенияБюджетныхДанных.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Показатели.ФинансовыйПоказатель,
		|	ВложенныйЗапрос.Ссылка КАК СтатьяБюджета
		|ИЗ
		|	ВТ_Показатели КАК ВТ_Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			фин_СтатьиБюджета.Ссылка КАК Ссылка,
		|			фин_СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель
		|		ИЗ
		|			Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ГДЕ
		|			фин_СтатьиБюджета.Владелец = &ФормируемыйБюджет
		|			И фин_СтатьиБюджета.Версия В(&Версии)) КАК ВложенныйЗапрос
		|		ПО ВТ_Показатели.ФинансовыйПоказатель = ВложенныйЗапрос.ФинансовыйПоказатель
		|ГДЕ
		|	ВТ_Показатели.ФинансовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)";

	Запрос.УстановитьПараметр("ПериодПланирования", ПериодПланирования);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
 	Запрос.УстановитьПараметр("Версии", Версии);
  	Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокСтатей.Добавить(?(СтатьиОборотов,ВыборкаДетальныеЗаписи.ФинансовыйПоказатель,ВыборкаДетальныеЗаписи.статьяБюджета));
	КонецЦикла;

КонецПроцедуры

Функция ВалютаСводаБаланса(Объект) Экспорт
	Если Объект.ЕдинаяВалюта Тогда
		Возврат Объект.ВалютаДокумента;
	Иначе
		Возврат Объект.Сценарий.Валюта;
	КонецЕсли;
КонецФункции
	
	
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНИМИ ПОКАЗАТЕЛЯМИ БЮДЖЕТА

//возвращает таблицу наследуемых оборотов
//
Процедура ЗаполнитьТаблицуНаследуемыхОборотов(Объект,Форма) Экспорт
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Организация 			= Объект.Организация;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	ЕдинаяВалюта 			= Объект.ЕдинаяВалюта;
	Дата 					= Объект.Дата;
	Проект 					= Объект.Проект;
	УправленческоеПодразделение 			= Объект.УправленческоеПодразделение;
	Состояние 				= Объект.Состояние;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	
	ПродолжительностьЦикла 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Версия 					= Форма.Версия;
	ВестиУчетПоПроектам 	= Форма.ВестиУчетПоПроектам;
	СписокФильтрСтатей 		= Форма.СписокФильтрСтатей;
	КЭШ_ЦеныНоменклатуры 	= Форма.КЭШ_ЦеныНоменклатуры;
	БюджетированиеПоОрганизациям = Форма.БюджетированиеПоОрганизациям;
	СписокНаследуемых 		= Форма.СписокНаследуемых;
	СписокЗависимых 		= Форма.СписокЗависимых;
	СписокРассчитываемых 	= Форма.СписокРассчитываемых;
	Если СписокНаследуемых.Количество()=0 Тогда
		//Форма.НаследуемыеОбороты.Очистить();
	    Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	СтрокаПериодичность=?(Сценарий.Пустая() ИЛИ (НЕ ЗначениеЗаполнено(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий))),"МЕСЯЦ",Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	РегистрКурсов = "КурсыВалют";
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям";
	КонецЕсли;
	ИсходнаяВалюта 	= Сценарий.Валюта;
	ПолеСуммы 		= "СуммаСценария";
	РезультирующаяВалюта = ВалютаСводаБаланса(Объект);
	Если РезультирующаяВалюта = мВалютаУправленческогоУчета Тогда
		ИсходнаяВалюта 	= мВалютаУправленческогоУчета;
		ПолеСуммы 		= "СуммаУпр";
	КонецЕсли;
	Запрос = Новый Запрос;
    Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Состояние",Состояние);
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("ВИерархииПодразделения",ФормируемыйБюджет.ВключаяПодчиненныеПодразделения);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_СписокСтатей
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	(НЕ СтатьиБюджета.ЭтоГруппа)
	|	И СтатьиБюджета.Владелец = &Бюджет
	|	И (НЕ СтатьиБюджета.Ссылка В (&СписокЗависимых)) 
	|	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И СтатьиБюджета.Версия В (&Версии)
	|	И (СтатьиБюджета.Ссылка В (&СписокНаследуемых))
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	СтатьиБюджета.СтатьяБюджета КАК СтатьяБюджета,
	|	&ВалютаСценария КАК Валюта,
	|	СУММА(ОборотыБюджетовОбороты.КоличествоОборот) КАК Количество,
	|	СУММА(ОборотыБюджетовОбороты."+ПолеСуммы+"Оборот) КАК Сумма,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_ОборотыПромежуточные
	|ИЗ
	|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, ,ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И ФинансовыйПоказатель В (ВЫБРАТЬ ВТ_СписокСтатей.ФинансовыйПоказатель ИЗ ВТ_СписокСтатей) И Сценарий = &Сценарий И 
	|		ВЫБОР	
	|			КОГДА &БюджетированиеПоОрганизациям
	|				ТОГДА Организация = &Организация 
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ И
	|		ВЫБОР 
	|			КОГДА &УправленческоеПодразделение=ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			КОГДА &ВИерархииПодразделения
	|				ТОГДА УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение)
	|			ИНАЧЕ УправленческоеПодразделение=&УправленческоеПодразделение
	|		КОНЕЦ И 
	|		ВЫБОР 
	|			КОГДА &Проект=ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Проект=&Проект
	|		КОНЕЦ) КАК ОборотыБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокСтатей КАК СтатьиБюджета
	|		ПО ОборотыБюджетовОбороты.ФинансовыйПоказатель = СтатьиБюджета.ФинансовыйПоказатель
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	СтатьиБюджета.СтатьяБюджета,
	|	ОборотыБюджетовОбороты.ПериодПланирования,
	|	ОборотыБюджетовОбороты.ПериодПланирования,
	|	ОборотыБюджетовОбороты.ПериодПланирования
	|ИНДЕКСИРОВАТЬ ПО
	|	ДополнительныеРазрезы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	Наборы.Разрез1,
	|	Наборы.Разрез2,
	|	Наборы.Разрез3,
	|	Наборы.Разрез4,
	|	Наборы.Разрез5,
	|	Наборы.Разрез6,
	|	Наборы.Разрез7,
	|	Наборы.Разрез8,
	|	Наборы.Разрез9,
	|	Наборы.Разрез10,
	|	ОборотыБюджетовОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Валюта КАК Валюта,
	|	СУММА(ОборотыБюджетовОбороты.Количество) КАК Количество,
	|	СУММА(ОборотыБюджетовОбороты.Сумма) КАК Сумма,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	ВТ_ОборотыПромежуточные КАК ОборотыБюджетовОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Наборы
	|		ПО ОборотыБюджетовОбороты.ДополнительныеРазрезы = Наборы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	Наборы.Разрез1,
	|	Наборы.Разрез2,
	|	Наборы.Разрез3,
	|	Наборы.Разрез4,
	|	Наборы.Разрез5,
	|	Наборы.Разрез6,
	|	Наборы.Разрез7,
	|	Наборы.Разрез8,
	|	Наборы.Разрез9,
	|	Наборы.Разрез10,
	|	ОборотыБюджетовОбороты.СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодПланирования,	
	|	Валюта,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВложенныйЗапрос.Валюта КАК Валюта,
	|				ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|				МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ВТ_КурсыПоПериодам
	|			ИЗ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Обороты.Валюта КАК Валюта,
	|					ВТ_Обороты.ПериодПланирования КАК ПериодПланирования
	|				ИЗ
	|					ВТ_Обороты КАК ВТ_Обороты) КАК ВложенныйЗапрос
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|					ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|						И ВложенныйЗапрос.ПериодПланирования >= КурсыВалют.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВложенныйЗапрос.Валюта,
	|				ВложенныйЗапрос.ПериодПланирования
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВложенныйЗапрос.Валюта КАК Валюта,
	|			ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|			КурсыВалют.Курс КАК Курс,
	|			КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_Курсы
	|		ИЗ
	|			ВТ_КурсыпоПериодам КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|				ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|					И ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
	|ИНДЕКСИРОВАТЬ ПО
	|  ПериодПланирования,
	|  Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Курс КАК КурсОперации,
	|	ВложенныйЗапрос.Кратность КАК КратностьОперации,
	|	ВТ_Обороты.Сценарий,
	|	ВТ_Обороты.Проект,
	|	ВТ_Обороты.УправленческоеПодразделение,      
	|	ВТ_Обороты.ФинансовыйПоказатель,
	|	ВТ_Обороты.ФинансовыйПоказатель.СпособЦенообразования КАК СпособЦенообразования,
	|	ВТ_Обороты.Контрагент,
	|	ВТ_Обороты.Номенклатура,
	|	ВТ_Обороты.Разрез1,
	|	ВТ_Обороты.Разрез2,
	|	ВТ_Обороты.Разрез3,
	|	ВТ_Обороты.Разрез4,
	|	ВТ_Обороты.Разрез5,
	|	ВТ_Обороты.Разрез6,
	|	ВТ_Обороты.Разрез7,
	|	ВТ_Обороты.Разрез8,
	|	ВТ_Обороты.Разрез9,
	|	ВТ_Обороты.Разрез10,
	|	ВТ_Обороты.Валюта КАК ВалютаОперации,
	|	ВТ_Обороты.Количество,
	|	ВТ_Обороты.Сумма,
	|	ВТ_Обороты.ПериодПланирования КАК ПериодПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Наследуемая) КАК ВидСтроки,
	|	0 КАК Цена,
	|	&Состояние КАК Состояние,
	|	ВТ_Обороты.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курсы КАК ВложенныйЗапрос
	|		ПО ВТ_Обороты.ПериодПланирования = ВложенныйЗапрос.ПериодПланирования
	|			И ВТ_Обороты.Валюта = ВложенныйЗапрос.Валюта";		   
	Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",	БюджетированиеПоОрганизациям);
	Запрос.УстановитьПараметр("СписокНаследуемых",	СписокНаследуемых);
	Запрос.УстановитьПараметр("СписокЗависимых",	СписокЗависимых);
	Запрос.УстановитьПараметр("СписокРассчитываемых",СписокРассчитываемых);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВалютаСценария",	ИсходнаяВалюта);
	Запрос.УстановитьПараметр("Дата",			?(Дата='00010101',ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("Проект",			Проект);
	Запрос.УстановитьПараметр("Бюджет",			ФормируемыйБюджет);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",			УправленческоеПодразделение);
	Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаНаследуемыхОборотов 	= РезультатЗапроса.Выгрузить();	
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"];
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
		ОтборПоВалюте.Вставить("Сценарий",	Сценарий);		
	Иначе
		РегистрКурсов=РегистрыСведений.КурсыВалют;
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
	КонецЕсли;
	СтруктураХраненияКурсов = Новый Соответствие;
	Для Каждого СтрокаОборотов Из ТаблицаНаследуемыхОборотов Цикл
		
		Если СтрокаОборотов.СпособЦенообразования <> Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтрокаОборотов,Сценарий,ВестиУчетПоПроектам,СтрокаОборотов.ПериодПланирования,Истина,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
		
		Если ИсходнаяВалюта <> РезультирующаяВалюта Тогда
			СтруктураКурсов = СтруктураХраненияКурсов.Получить(СтрокаОборотов.ПериодПланирования);
			Если СтруктураКурсов = Неопределено Тогда
				СтруктураКурсов		= РегистрКурсов.ПолучитьПоследнее(СтрокаОборотов.ПериодПланирования,ОтборПоВалюте);
				СтруктураХраненияКурсов.Вставить(СтрокаОборотов.ПериодПланирования,СтруктураКурсов);
			КонецЕсли;
			тКурсОперации		= СтруктураКурсов.Курс;
			тКратностьОперации	= СтруктураКурсов.Кратность;
			СтрокаОборотов.Сумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОборотов.Сумма,
				Сценарий.Валюта,РезультирующаяВалюта,
				СтрокаОборотов.КурсОперации,тКурсОперации,
				СтрокаОборотов.КратностьОперации,тКратностьОперации);
				СтрокаОборотов.ВалютаОперации = РезультирующаяВалюта;
		КонецЕсли;
	КонецЦикла;
	//Форма.НаследуемыеОбороты.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаНаследуемыхОборотов Цикл
		НоваяСтрока = Форма.ВнешниеОборотыБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		НоваяСтрока.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.Наследуемая;
	КонецЦикла;
КонецПроцедуры //ПолучитьТаблицуНаследуемыхОборотов

//возвращает таблицу внешних зависимых оборотов
//
Процедура ЗаполнитьТаблицуВнешнихЗависимыхОборотов(Объект,Форма) Экспорт
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Организация 		= Объект.Организация;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	ЕдинаяВалюта 			= Объект.ЕдинаяВалюта;
	Дата 			= Объект.Дата;
	Проект 			= Объект.Проект;
	УправленческоеПодразделение 			= Объект.УправленческоеПодразделение;
	Состояние 			= Объект.Состояние;
	ВалютаДокумента 			= Объект.ВалютаДокумента;
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Версия = Форма.Версия;
	ВестиУчетПоПроектам = Форма.ВестиУчетПоПроектам;
	СписокФильтрСтатей = Форма.СписокФильтрСтатей;
	КЭШ_ЦеныНоменклатуры = Форма.КЭШ_ЦеныНоменклатуры;
	БюджетированиеПоОрганизациям = Форма.БюджетированиеПоОрганизациям;
	СписокНаследуемых = Форма.СписокНаследуемых;
	СписокЗависимых = Форма.СписокЗависимых;
	Если СписокЗависимых.Количество()=0 Тогда
		//Форма.ВнешниеЗависимыеОбороты.Очистить();
		Возврат;
	КонецЕсли;
	СписокРассчитываемых = Форма.СписокРассчитываемых;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	РегистрКурсов = "КурсыВалют";
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям";
	КонецЕсли;
	ИсходнаяВалюта 	= Сценарий.Валюта;
	ПолеСуммы 		= "СуммаСценария";
	РезультирующаяВалюта = ВалютаСводаБаланса(Объект);
	Если РезультирующаяВалюта = мВалютаУправленческогоУчета Тогда
		ИсходнаяВалюта 	= мВалютаУправленческогоУчета;
		ПолеСуммы 		= "СуммаУпр";
	КонецЕсли;
	Запрос.УстановитьПараметр("Состояние",Состояние);
    Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("ВИерархииПодразделения",ФормируемыйБюджет.ВключаяПодчиненныеПодразделения);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_СписокСтатей
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	(НЕ СтатьиБюджета.ЭтоГруппа)
	|	И СтатьиБюджета.Владелец = &Бюджет
	|	И СтатьиБюджета.Версия В (&Версии)
	|	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И СтатьиБюджета.Ссылка В (&СписокЗависимых)
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	&ВалютаСценария КАК Валюта,
	|	ВТ_СписокСтатей.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	|	ОборотыБюджетовОбороты."+ПолеСуммы+"Оборот КАК Сумма,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_ОборотыПромежуточные
	|ИЗ
	|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, ,ДокументПланирования<>&Регистратор И ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И  ФинансовыйПоказатель В (ВЫБРАТЬ ВТ_СписокСтатей.ФинансовыйПоказатель ИЗ ВТ_СписокСтатей) И Сценарий = &Сценарий"+?(БюджетированиеПоОрганизациям," И Организация = &Организация ","")+?(УправленческоеПодразделение.Пустая(),""," И ВЫБОР КОГДА &ВИерархииПодразделения ТОГДА УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение) ИНАЧЕ УправленческоеПодразделение=&УправленческоеПодразделение КОНЕЦ")+?(Проект.Пустая(),""," И Проект = &Проект")+") КАК ОборотыБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокСтатей КАК ВТ_СписокСтатей
	|		ПО ОборотыБюджетовОбороты.ФинансовыйПоказатель = ВТ_СписокСтатей.ФинансовыйПоказатель
	|ИНДЕКСИРОВАТЬ ПО
	|   ДополнительныеРазрезы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	Наборы.Разрез1,
	|	Наборы.Разрез2,
	|	Наборы.Разрез3,
	|	Наборы.Разрез4,
	|	Наборы.Разрез5,
	|	Наборы.Разрез6,
	|	Наборы.Разрез7,
	|	Наборы.Разрез8,
	|	Наборы.Разрез9,
	|	Наборы.Разрез10,
	|	ОборотыБюджетовОбороты.Валюта КАК Валюта,
	|	ОборотыБюджетовОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Количество КАК Количество,
	|	ОборотыБюджетовОбороты.Сумма КАК Сумма,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	ВТ_ОборотыПромежуточные КАК ОборотыБюджетовОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Наборы
	|		ПО ОборотыБюджетовОбороты.ДополнительныеРазрезы = Наборы.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|   ПериодПланирования,
	|   Валюта,
	|   ОборотыБюджетовОбороты.ФинансовыйПоказатель
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВложенныйЗапрос.Валюта КАК Валюта,
	|				ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|				МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ВТ_КурсыПоПериодам
	|			ИЗ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Обороты.Валюта КАК Валюта,
	|					ВТ_Обороты.ПериодПланирования КАК ПериодПланирования
	|				ИЗ
	|					ВТ_Обороты КАК ВТ_Обороты) КАК ВложенныйЗапрос
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|					ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|						И ВложенныйЗапрос.ПериодПланирования >= КурсыВалют.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВложенныйЗапрос.Валюта,
	|				ВложенныйЗапрос.ПериодПланирования
	|ИНДЕКСИРОВАТЬ ПО
	|   Валюта,
	|   ПериодКурса
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВложенныйЗапрос.Валюта КАК Валюта,
	|			ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|			КурсыВалют.Курс КАК Курс,
	|			КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_Курсы
	|		ИЗ
	|			ВТ_КурсыПоПериодам КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|				ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|					И ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
	|ИНДЕКСИРОВАТЬ ПО
	|   ПериодПланирования,
	|   Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Курс КАК КурсОперации,
	|	ВложенныйЗапрос.Кратность КАК КратностьОперации,
	|	ВТ_Обороты.Сценарий,
	|	ВТ_Обороты.Проект,                           
	|	ВТ_Обороты.УправленческоеПодразделение,
	|	ВТ_Обороты.ФинансовыйПоказатель,
	|	ВТ_Обороты.ФинансовыйПоказатель.СпособЦенообразования КАК СпособЦенообразования,
	|	ВТ_Обороты.Контрагент,
	|	ВТ_Обороты.Номенклатура,
	|	ВТ_Обороты.Разрез1,
	|	ВТ_Обороты.Разрез2,
	|	ВТ_Обороты.Разрез3,
	|	ВТ_Обороты.Разрез4,
	|	ВТ_Обороты.Разрез5,
	|	ВТ_Обороты.Разрез6,
	|	ВТ_Обороты.Разрез7,
	|	ВТ_Обороты.Разрез8,
	|	ВТ_Обороты.Разрез9,
	|	ВТ_Обороты.Разрез10,
	|	ВТ_Обороты.Валюта КАК ВалютаОперации,
	|	ВТ_Обороты.Количество,
	|	ВТ_Обороты.Сумма,
	|	ВТ_Обороты.Период,
	|	ВТ_Обороты.Период КАК ПериодПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости) КАК ВидСтроки,
	|	0 КАК Цена,
	|	&Состояние КАК Состояние,
	|	ВТ_Обороты.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курсы КАК ВложенныйЗапрос
	|		ПО ВТ_Обороты.ПериодПланирования = ВложенныйЗапрос.ПериодПланирования
	|			И ВТ_Обороты.Валюта = ВложенныйЗапрос.Валюта";		   
	Запрос.УстановитьПараметр("СписокЗависимых",СписокЗависимых);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВалютаСценария",	ИсходнаяВалюта);
	Запрос.УстановитьПараметр("Дата",			?(Дата='00010101',ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("Бюджет",			ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",			Проект);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",			УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаНаследуемыхОборотов 	= РезультатЗапроса.Выгрузить();	
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"];
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
		ОтборПоВалюте.Вставить("Сценарий",	Сценарий);		
	Иначе
		РегистрКурсов=РегистрыСведений.КурсыВалют;
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
	КонецЕсли;
	СтруктураХраненияКурсов = Новый Соответствие;
	
	Для Каждого СтрокаОборотов Из ТаблицаНаследуемыхОборотов Цикл
		
		Если СтрокаОборотов.СпособЦенообразования <> Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтрокаОборотов,Сценарий,ВестиУчетПоПроектам,СтрокаОборотов.ПериодПланирования,Истина,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
		
		Если ИсходнаяВалюта <> РезультирующаяВалюта Тогда
			СтруктураКурсов = СтруктураХраненияКурсов.Получить(СтрокаОборотов.ПериодПланирования);
			Если СтруктураКурсов = Неопределено Тогда
				СтруктураКурсов		= РегистрКурсов.ПолучитьПоследнее(СтрокаОборотов.ПериодПланирования,ОтборПоВалюте);
				СтруктураХраненияКурсов.Вставить(СтрокаОборотов.ПериодПланирования,СтруктураКурсов);
			КонецЕсли;
			тКурсОперации		= СтруктураКурсов.Курс;
			тКратностьОперации	= СтруктураКурсов.Кратность;
			СтрокаОборотов.Сумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОборотов.Сумма,
				ИсходнаяВалюта,РезультирующаяВалюта,
				СтрокаОборотов.КурсОперации,тКурсОперации,
				СтрокаОборотов.КратностьОперации,тКратностьОперации);
				СтрокаОборотов.ВалютаОперации = РезультирующаяВалюта;
		КонецЕсли;
	КонецЦикла;
	//Форма.ВнешниеЗависимыеОбороты.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаНаследуемыхОборотов Цикл
		НоваяСтрока = Форма.ВнешниеОборотыБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		НоваяСтрока.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоЗависимости;
	КонецЦикла;
КонецПроцедуры //ПолучитьТаблицуВнешнихЗависимыхОборотов

//возвращает таблицу внешних оборотов для корректировки
//
Функция ЗаполнитьТаблицуОборотовПриКорректировке(Объект,Форма) Экспорт
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Организация 			= Объект.Организация;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	ЕдинаяВалюта 			= Объект.ЕдинаяВалюта;
	Дата 					= Объект.Дата;
	Проект 					= Объект.Проект;
	УправленческоеПодразделение = Объект.УправленческоеПодразделение;
	Состояние 				= Объект.Состояние;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Версия 						= Форма.Версия;
	ВестиУчетПоПроектам 		= Форма.ВестиУчетПоПроектам;
	СписокФильтрСтатей 			= Форма.СписокФильтрСтатей;
	КЭШ_ЦеныНоменклатуры 		= ?(ТипЗнч(Форма)=Тип("УправляемаяФорма"),Форма.КЭШ_ЦеныНоменклатуры,Неопределено);
	БюджетированиеПоОрганизациям= Форма.БюджетированиеПоОрганизациям;
	СписокНаследуемых 			= Форма.СписокНаследуемых;
	СписокЗависимых 			= Форма.СписокЗависимых;
	СписокРассчитываемых 		= Форма.СписокРассчитываемых;
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
    Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Состояние",Состояние);
	Запрос.УстановитьПараметр("ВИерархииПодразделения",ФормируемыйБюджет.ВключаяПодчиненныеПодразделения);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_СписокСтатей
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	(НЕ СтатьиБюджета.ЭтоГруппа)
	|	И СтатьиБюджета.Владелец = &Бюджет
	|	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И СтатьиБюджета.Версия В (&Версии)
	|	И ((СтатьиБюджета.Ссылка В (&СписокЗависимых))
	|		ИЛИ (СтатьиБюджета.Ссылка В (&СписокНаследуемых)))
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйПоказатель
	|	;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыеПоказатели.Ссылка КАК ФинансовыйПоказатель,
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета
	|ПОМЕСТИТЬ ВТ_НужныеСтатьи
	|ИЗ
	|	Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокСтатей КАК ВТ_СписокСтатей
	|		ПО ФинансовыеПоказатели.Ссылка = ВТ_СписокСтатей.ФинансовыйПоказатель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|		ПО ФинансовыеПоказатели.Ссылка = СтатьиБюджета.ФинансовыйПоказатель
	|ГДЕ
	|	ВТ_СписокСтатей.ФинансовыйПоказатель ЕСТЬ NULL 
	|	И НЕ ФинансовыеПоказатели.Ссылка В (&СписокРассчитываемых)
	|	И СтатьиБюджета.Владелец = &Бюджет
	|	И СтатьиБюджета.Версия В (&Версии)
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	|	ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК Сумма,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования,
	|	СтатьиБюджета.СтатьяБюджета КАК СтатьяБюджета
	|ПОМЕСТИТЬ ВТ_ОборотыПредварительные
	|ИЗ
	|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, ,ДокументПланирования<>&Регистратор И ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И  (ФинансовыйПоказатель В
	|															(ВЫБРАТЬ
	|																	ВТ_НужныеСтатьи.ФинансовыйПоказатель
	|															ИЗ ВТ_НужныеСтатьи)) И Сценарий = &Сценарий"+?(БюджетированиеПоОрганизациям," И Организация = &Организация ","")+?(УправленческоеПодразделение.Пустая(),""," И ВЫБОР КОГДА &ВИерархииПодразделения ТОГДА УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение) ИНАЧЕ УправленческоеПодразделение=&УправленческоеПодразделение КОНЕЦ")+?(Проект.Пустая(),""," И Проект = &Проект")+") КАК ОборотыБюджетовОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НужныеСтатьи КАК СтатьиБюджета
	|		ПО ОборотыБюджетовОбороты.ФинансовыйПоказатель = СтатьиБюджета.ФинансовыйПоказатель
	|ИНДЕКСИРОВАТЬ ПО
	|	ДополнительныеРазрезы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	Наборы.Разрез1,
	|	Наборы.Разрез2,
	|	Наборы.Разрез3,
	|	Наборы.Разрез4,
	|	Наборы.Разрез5,
	|	Наборы.Разрез6,
	|	Наборы.Разрез7,
	|	Наборы.Разрез8,
	|	Наборы.Разрез9,
	|	Наборы.Разрез10,
	|	ОборотыБюджетовОбороты.СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Валюта,
	|	ОборотыБюджетовОбороты.Количество КАК Количество,
	|	ОборотыБюджетовОбороты.Сумма КАК Сумма,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	ВТ_ОборотыПредварительные КАК ОборотыБюджетовОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Наборы
	|		ПО ОборотыБюджетовОбороты.ДополнительныеРазрезы = Наборы.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодПланирования,
	|	Валюта,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ВТ_ПериодыКурсов
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Обороты.Валюта КАК Валюта,
	|	ВТ_Обороты.ПериодПланирования КАК ПериодПланирования
	|	ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|				И ВложенныйЗапрос.ПериодПланирования >= КурсыВалют.Период
	|			
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Валюта,
	|	ВложенныйЗапрос.ПериодПланирования
	|ИНДЕКСИРОВАТЬ ПО
	|   Валюта,
	|   ПериодКурса
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВложенныйЗапрос.Валюта КАК Валюта,
	|			ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|			КурсыВалют.Курс КАК Курс,
	|			КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_Курсы
	|		ИЗ
	|			ВТ_ПериодыКурсов КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|				ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|					И ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
	|ИНДЕКСИРОВАТЬ ПО
	|   ПериодПланирования,
	|   Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Курс КАК КурсОперации,
	|	ВложенныйЗапрос.Кратность КАК КратностьОперации,
	|	ВТ_Обороты.Сценарий,
	|	ВТ_Обороты.Проект,
	|	ВТ_Обороты.УправленческоеПодразделение,
	|	ВТ_Обороты.ФинансовыйПоказатель,
	|	ВТ_Обороты.ФинансовыйПоказатель.СпособЦенообразования КАК СпособЦенообразования,
	|	ВТ_Обороты.Контрагент,
	|	ВТ_Обороты.Номенклатура,
	|	ВТ_Обороты.Разрез1,
	|	ВТ_Обороты.Разрез2,
	|	ВТ_Обороты.Разрез3,
	|	ВТ_Обороты.Разрез4,
	|	ВТ_Обороты.Разрез5,
	|	ВТ_Обороты.Разрез6,
	|	ВТ_Обороты.Разрез7,
	|	ВТ_Обороты.Разрез8,
	|	ВТ_Обороты.Разрез9,
	|	ВТ_Обороты.Разрез10,
	|	ВТ_Обороты.Валюта КАК ВалютаОперации,
	|	ВТ_Обороты.Количество,
	|	ВТ_Обороты.Сумма,
	|	ВТ_Обороты.Период,
	|	ВТ_Обороты.Период КАК ПериодПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Наследуемая) КАК ВидСтроки,
	|	0 КАК Цена,
	|	&Состояние КАК Состояние,
	|	ВТ_Обороты.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курсы КАК ВложенныйЗапрос
	|		ПО ВТ_Обороты.ПериодПланирования = ВложенныйЗапрос.ПериодПланирования
	|			И ВТ_Обороты.Валюта = ВложенныйЗапрос.Валюта";		   
	Запрос.УстановитьПараметр("СписокЗависимых",СписокЗависимых);
	Запрос.УстановитьПараметр("СписокНаследуемых",СписокНаследуемых);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Дата",			?(Дата='00010101',ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("Бюджет",			ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",			Проект);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",			УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	СписокСтатейОборотов = Новый СписокЗначений;
	//Если СписокРассчитываемых = Неопределено Тогда
	//	СписокРассчитываемых = СписокРассчитываемыхПоМодели();
	//КонецЕсли;
	Для Каждого Элемент из СписокРассчитываемых Цикл
		СписокСтатейОборотов.Добавить(Элемент.Значение.ФинансовыйПоказатель);
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокРассчитываемых",СписокСтатейОборотов);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаНаследуемыхОборотов 	= РезультатЗапроса.Выгрузить();
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.УстановитьКорректныеЗначенияРазрезовВСтроках(ТаблицаНаследуемыхОборотов);
	Для Каждого СтрокаОборотов Из ТаблицаНаследуемыхОборотов Цикл
		Если СтрокаОборотов.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтрокаОборотов,Сценарий,ВестиУчетПоПроектам,СтрокаОборотов.ПериодПланирования,Истина,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ОборотыПриКорректировке.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаНаследуемыхОборотов Цикл
		НоваяСтрока = Форма.ОборотыПриКорректировке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	КонецЦикла;
КонецФункции //ПолучитьТаблицуОборотовПриКорректировке

//возвращает таблицу внешних рассчитанных оборотов для корректировки
//
Процедура ЗаполнитьТаблицуВнешнихРассчитанныхОборотов(Объект,Форма) Экспорт
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Организация 			= Объект.Организация;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	ЕдинаяВалюта 			= Объект.ЕдинаяВалюта;
	Дата 					= Объект.Дата;
	Проект 					= Объект.Проект;
	УправленческоеПодразделение = Объект.УправленческоеПодразделение;
	Состояние 				= Объект.Состояние;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Версия = Форма.Версия;
	ВестиУчетПоПроектам = Форма.ВестиУчетПоПроектам;
	СписокФильтрСтатей = Форма.СписокФильтрСтатей;
	КЭШ_ЦеныНоменклатуры = Форма.КЭШ_ЦеныНоменклатуры;
	БюджетированиеПоОрганизациям = Форма.БюджетированиеПоОрганизациям;
	СписокНаследуемых = Форма.СписокНаследуемых;
	СписокЗависимых = Форма.СписокЗависимых;
	СписокРассчитываемых = Форма.СписокРассчитываемых;
	СписокРассчитываемыхВПредшествующихБюджетах = Форма.СписокРассчитываемыхВПредшествующихБюджетах;
	Если СписокЗависимых.Количество() =0 И СписокНаследуемых.Количество()=0 И СписокРассчитываемыхВПредшествующихБюджетах.Количество()=0 Тогда
		//Форма.ВнешниеРассчитанныеОбороты.Очистить();
		Возврат;
	КонецЕсли;

	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
    Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	РегистрКурсов = "КурсыВалют";
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям";
	КонецЕсли;
	ИсходнаяВалюта 	= Сценарий.Валюта;
	ПолеСуммы 		= "СуммаСценария";
	РезультирующаяВалюта = ВалютаСводаБаланса(Объект);
	Если РезультирующаяВалюта = мВалютаУправленческогоУчета Тогда
		ИсходнаяВалюта 	= мВалютаУправленческогоУчета;
		ПолеСуммы 		= "СуммаУпр";
	КонецЕсли;
	Запрос.УстановитьПараметр("Состояние",Состояние);
	Запрос.УстановитьПараметр("Фильтр",				СписокФильтрСтатей);
	Запрос.УстановитьПараметр("Фильтровать",		СписокФильтрСтатей.Количество()>0);
	Запрос.УстановитьПараметр("ВИерархииПодразделения",ФормируемыйБюджет.ВключаяПодчиненныеПодразделения);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	СтатьиБюджета.ФинансовыйПоказатель
	|ПОМЕСТИТЬ ВТ_СписокСтатей
	|ИЗ
	|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	(НЕ СтатьиБюджета.ЭтоГруппа)
	|	И СтатьиБюджета.Владелец = &Бюджет
	|	И ВЫБОР КОГДА &Фильтровать ТОГДА СтатьиБюджета.Ссылка В (&Фильтр) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И СтатьиБюджета.Версия В (&Версии)
	|	И ((СтатьиБюджета.Ссылка В (&СписокЗависимых))
	|		ИЛИ (СтатьиБюджета.Ссылка В (&СписокНаследуемых)))
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	ОборотыБюджетовОбороты.ДополнительныеРазрезы,
	|	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	&ВалютаСценария КАК Валюта,
	|	ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
	|	ОборотыБюджетовОбороты."+ПолеСуммы+"Оборот КАК Сумма,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_ОборотыПромежуточные
	|ИЗ
	|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Дата, ,ДокументПланирования<>&Регистратор И ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И  (ФинансовыйПоказатель В (&СписокРассчитываемых)) И Сценарий = &Сценарий"+?(БюджетированиеПоОрганизациям," И Организация = &Организация","")+?(УправленческоеПодразделение.Пустая(),""," И ВЫБОР КОГДА &ВИерархииПодразделения ТОГДА УправленческоеПодразделение В ИЕРАРХИИ (&УправленческоеПодразделение) ИНАЧЕ УправленческоеПодразделение=&УправленческоеПодразделение КОНЕЦ")+?(Проект.Пустая(),""," И Проект=&Проект")+") КАК ОборотыБюджетовОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокСтатей КАК ВТ_СписокСтатей
	|		ПО ОборотыБюджетовОбороты.ФинансовыйПоказатель = ВТ_СписокСтатей.ФинансовыйПоказатель
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	|		ПО ОборотыБюджетовОбороты.ФинансовыйПоказатель = СтатьиБюджета.ФинансовыйПоказатель
	|ГДЕ
	|	ВТ_СписокСтатей.СтатьяБюджета ЕСТЬ NULL
	|	И СтатьиБюджета.Владелец = &Бюджет
	|ИНДЕКСИРОВАТЬ ПО
	|	ДополнительныеРазрезы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Сценарий,
	|	ОборотыБюджетовОбороты.Проект,
	|	ОборотыБюджетовОбороты.УправленческоеПодразделение,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
	|	ОборотыБюджетовОбороты.Контрагент,
	|	ОборотыБюджетовОбороты.Номенклатура,
	|	Наборы.Разрез1,
	|	Наборы.Разрез2,
	|	Наборы.Разрез3,
	|	Наборы.Разрез4,
	|	Наборы.Разрез5,
	|	Наборы.Разрез6,
	|	Наборы.Разрез7,
	|	Наборы.Разрез8,
	|	Наборы.Разрез9,
	|	Наборы.Разрез10,
	|	ОборотыБюджетовОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотыБюджетовОбороты.Валюта КАК Валюта,
	|	ОборотыБюджетовОбороты.Количество КАК Количество,
	|	ОборотыБюджетовОбороты.Сумма КАК Сумма,
	|	ОборотыБюджетовОбороты.Период КАК Период,
	|	ОборотыБюджетовОбороты.ПериодПланирования КАК ПериодПланирования
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	ВТ_ОборотыПромежуточные КАК ОборотыБюджетовОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК Наборы
	|		ПО ОборотыБюджетовОбороты.ДополнительныеРазрезы = Наборы.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодПланирования,
	|	Валюта,
	|	ОборотыБюджетовОбороты.ФинансовыйПоказатель
	|;
	| ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВложенныйЗапрос.Валюта КАК Валюта,
	|				ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|				МАКСИМУМ(КурсыВалют.Период) КАК ПериодКурса
	|ПОМЕСТИТЬ ВТ_КурсыПоПериодам
	|			ИЗ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_Обороты.Валюта КАК Валюта,
	|					ВТ_Обороты.ПериодПланирования КАК ПериодПланирования
	|				ИЗ
	|					ВТ_Обороты КАК ВТ_Обороты) КАК ВложенныйЗапрос
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|					ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|						И ВложенныйЗапрос.ПериодПланирования >= КурсыВалют.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВложенныйЗапрос.Валюта,
	|				ВложенныйЗапрос.ПериодПланирования
	|ИНДЕКСИРОВАТЬ ПО
	|    Валюта,
	|    ПериодКурса
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВложенныйЗапрос.Валюта КАК Валюта,
	|			ВложенныйЗапрос.ПериодПланирования КАК ПериодПланирования,
	|			КурсыВалют.Курс КАК Курс,
	|			КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_Курсы
	|		ИЗ
	|			ВТ_КурсыПоПериодам КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрКурсов+" КАК КурсыВалют
	|				ПО ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|					И ВложенныйЗапрос.ПериодКурса = КурсыВалют.Период
	|ИНДЕКСИРОВАТЬ ПО
	|    ПериодПланирования,
	|    Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Курс КАК КурсОперации,
	|	ВложенныйЗапрос.Кратность КАК КратностьОперации,
	|	ВТ_Обороты.Сценарий,
	|	ВТ_Обороты.Проект,
	|	ВТ_Обороты.УправленческоеПодразделение,
	|	ВТ_Обороты.ФинансовыйПоказатель,
	|	ВТ_Обороты.ФинансовыйПоказатель.СпособЦенообразования КАК СпособЦенообразования,
	|	ВТ_Обороты.Контрагент,
	|	ВТ_Обороты.Номенклатура,
	|	ВТ_Обороты.Разрез1,
	|	ВТ_Обороты.Разрез2,
	|	ВТ_Обороты.Разрез3,
	|	ВТ_Обороты.Разрез4,
	|	ВТ_Обороты.Разрез5,
	|	ВТ_Обороты.Разрез6,
	|	ВТ_Обороты.Разрез7,
	|	ВТ_Обороты.Разрез8,
	|	ВТ_Обороты.Разрез9,
	|	ВТ_Обороты.Разрез10,
	|	ВТ_Обороты.Валюта КАК ВалютаОперации,
	|	ВТ_Обороты.Количество,
	|	ВТ_Обороты.Сумма,
	|	ВТ_Обороты.Период,
	|	ВТ_Обороты.Период КАК ПериодПланирования,
	|	ВЫБОР КОГДА ВТ_Обороты.СтатьяБюджета В (&СписокРассчитываемыхВПредшествующихБюджетах) ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.Наследуемая) ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели) КОНЕЦ КАК ВидСтроки,
	|	0 КАК Цена,
	|	&Состояние КАК Состояние,
	|	ВТ_Обороты.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	ВТ_Обороты КАК ВТ_Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курсы КАК ВложенныйЗапрос
	|		ПО ВТ_Обороты.ПериодПланирования = ВложенныйЗапрос.ПериодПланирования
	|			И ВТ_Обороты.Валюта = ВложенныйЗапрос.Валюта";		   
	Запрос.УстановитьПараметр("СписокЗависимых",СписокЗависимых);
	Запрос.УстановитьПараметр("СписокНаследуемых",СписокНаследуемых);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Дата",			?(Дата='00010101',ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("Бюджет",			ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",			Проект);
	Запрос.УстановитьПараметр("ВалютаСценария",	ИсходнаяВалюта);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",			УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Регистратор",	Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода",	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)));
	Запрос.УстановитьПараметр("КонецПериода",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
	СписокСтатейОборотов = Новый СписокЗначений;
	Для Каждого Элемент из СписокРассчитываемых Цикл
		СписокСтатейОборотов.Добавить(Элемент.Значение.ФинансовыйПоказатель);
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокРассчитываемых",СписокСтатейОборотов);
	Запрос.УстановитьПараметр("СписокРассчитываемыхВПредшествующихБюджетах",СписокРассчитываемыхВПредшествующихБюджетах);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаНаследуемыхОборотов 	= РезультатЗапроса.Выгрузить();	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов=РегистрыСведений[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям"];
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
		ОтборПоВалюте.Вставить("Сценарий",	Сценарий);		
	Иначе
		РегистрКурсов=РегистрыСведений.КурсыВалют;
		ОтборПоВалюте=Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",	РезультирующаяВалюта);
	КонецЕсли;
	СтруктураХраненияКурсов = Новый Соответствие;
	Для Каждого СтрокаОборотов Из ТаблицаНаследуемыхОборотов Цикл
		
		Если СтрокаОборотов.СпособЦенообразования<>Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать Тогда
			фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(СтрокаОборотов,Сценарий,ВестиУчетПоПроектам,СтрокаОборотов.ПериодПланирования,Истина,,КЭШ_ЦеныНоменклатуры);
		КонецЕсли;
		
		Если ИсходнаяВалюта <> РезультирующаяВалюта Тогда
			СтруктураКурсов = СтруктураХраненияКурсов.Получить(СтрокаОборотов.ПериодПланирования);
			Если СтруктураКурсов = Неопределено Тогда
				СтруктураКурсов		= РегистрКурсов.ПолучитьПоследнее(СтрокаОборотов.ПериодПланирования,ОтборПоВалюте);
				СтруктураХраненияКурсов.Вставить(СтрокаОборотов.ПериодПланирования,СтруктураКурсов);
			КонецЕсли;
			тКурсОперации		= СтруктураКурсов.Курс;
			тКратностьОперации	= СтруктураКурсов.Кратность;
			СтрокаОборотов.Сумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОборотов.Сумма,
				ИсходнаяВалюта,РезультирующаяВалюта,
				СтрокаОборотов.КурсОперации,тКурсОперации,
				СтрокаОборотов.КратностьОперации,тКратностьОперации);
			СтрокаОборотов.ВалютаОперации = РезультирующаяВалюта;
		КонецЕсли;
	КонецЦикла;
	
	//Форма.ВнешниеРассчитанныеОбороты.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаНаследуемыхОборотов Цикл
		НоваяСтрока = Форма.ВнешниеОборотыБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		//НоваяСтрока.ВидСтроки = Перечисления.фин_ВидыСтрокБюджета.РассчитываемаяПоМодели;
	КонецЦикла;
КонецПроцедуры //ПолучитьТаблицуВнешнихРассчитанныхОборотов

Процедура ОбновитьРасчетныеСписки(Объект,Форма) Экспорт
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Организация 			= Объект.Организация;
	ФормируемыйБюджет 		= Объект.ФормируемыйБюджет;
	Сценарий 				= Объект.Сценарий;
	ПериодПланирования 		= Объект.ПериодПланирования;
	ЕдинаяВалюта 			= Объект.ЕдинаяВалюта;
	Дата 					= Объект.Дата;
	Проект 					= Объект.Проект;
	УправленческоеПодразделение = Объект.УправленческоеПодразделение;
	Состояние 				= Объект.Состояние;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	//КурсДокумента 			= Объект.КурсДокумента;
	//КратностьДокумента 		= Объект.КратностьДокумента;
	
	Если НЕ (ЗначениеЗаполнено(ФормируемыйБюджет) И ЗначениеЗаполнено(Сценарий) И ЗначениеЗаполнено(ПериодПланирования)) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	
	Версия 										= Форма.Версия;
	ВестиУчетПоПроектам 						= Форма.ВестиУчетПоПроектам;
	СписокФильтрСтатей 							= Форма.СписокФильтрСтатей;
	БюджетированиеПоОрганизациям 				= Форма.БюджетированиеПоОрганизациям;
	СписокНаследуемых 							= Форма.СписокНаследуемых;
	СписокЗависимых 							= Форма.СписокЗависимых;
	СписокРассчитываемых 						= Форма.СписокРассчитываемых;
	СписокФормульных 							= Форма.СписокФормульных;
	КЭШ_СтатьиПоказателей 						= Форма.КЭШ_СтатьиПоказателей;
	ТаблицаРассчитанныеПоказателиФормул 		= Форма.ТаблицаРассчитанныеПоказателиФормул;
	ТаблицаНастройкиШкал 						= Форма.ТаблицаНастройкиШкал;
	ТаблицаСоставФормулРасчетаСтатей 	= Форма.ТаблицаСоставФормулРасчетаСтатей;
	ТаблицаФормулыРасчетаСтатей 			= Форма.ТаблицаФормулыРасчетаСтатей;
	
		
	ТаблицаФормулыРасчетаСтатей.Очистить();
	ТаблицаСоставФормулРасчетаСтатей.Очистить();
	ТаблицаНастройкиШкал.Очистить();
	ТаблицаРассчитанныеПоказателиФормул.Очистить();
	
	СписокФормульных.Очистить();
	Форма.РазрезыРасчетаФормул.Очистить();

	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользуютсяРасчетыСтатейБюджетаПоФормулам(ФормируемыйБюджет) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПрочихРассчитываемых = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из СписокРассчитываемых Цикл
		СписокПрочихРассчитываемых.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
 	Для Каждого ЭлементСписка Из СписокЗависимых Цикл
		СписокПрочихРассчитываемых.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	Для Каждого ЭлементСписка Из СписокНаследуемых Цикл
		СписокПрочихРассчитываемых.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
   Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий);
	
	фин_ЗащитаПривилегированныеПроцедуры.ОбновитьРасчетныеСпискиВФормеВОтчете(ФормируемыйБюджет,Версии,ПериодПланирования,СписокФормульных,ТаблицаФормулыРасчетаСтатей,ТаблицаСоставФормулРасчетаСтатей,
						ТаблицаРассчитанныеПоказателиФормул,"","",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),ГоризонтПланирования,Объект.Дата,Объект.Организация,,,Перечисления.фин_ВидыДанныхОтчета.Плановые,Объект.Дата,Истина,Объект,СписокФильтрСтатей,СписокПрочихРассчитываемых,Форма.РазрезыРасчетаФормул);
КонецПроцедуры

Процедура ОпределитьПорядокРасчетаИтогов(Объект,Форма) Экспорт
	ФормируемыйБюджет 			= Объект.ФормируемыйБюджет;
	Если ЗначениеЗаполнено(ФормируемыйБюджет) Тогда
		РежимРасчетаИтогов 		= ФормируемыйБюджет.РежимыРасчетаИтоговойСтрокиБюджета;
		Форма.РежимРасчетаИтогов= РежимРасчетаИтогов;
		Если НЕ ЗначениеЗаполнено(РежимРасчетаИтогов) Тогда
			РежимРасчетаИтогов 	= Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать;
		КонецЕсли;
		ИтоговаяФункция 		= ФормируемыйБюджет.ИтоговаяФункция;
		Форма.ИтоговаяФункция 	= ИтоговаяФункция;
		ФормулаИтогов 			= ФормируемыйБюджет.Формула;
		ФормулаИтоговКоличество	= ФормируемыйБюджет.ФормулаКоличество;
		Форма.ФормулаИтогов 	= ФормулаИтогов;
		Версия 					= Форма.Версия;
		РучнаяНастройкаИтоговПоГруппам = ФормируемыйБюджет.РучнаяНастройкаИтоговПоГруппам;
		Форма.РучнаяНастройкаИтоговПоГруппам = РучнаяНастройкаИтоговПоГруппам;
		Форма.ТаблицаФормулыРасчетаИтогов.Очистить();
		Форма.ТаблицаСоставФормулРасчетаИтогов.Очистить();
	    Версии = Новый СписокЗначений;
		Версии.Добавить(Версия);
		Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
		Если РучнаяНастройкаИтоговПоГруппам Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
				|	фин_СтатьиБюджета.Формула,
				|	фин_СтатьиБюджета.Формула.Формула КАК ТекстФормулы,
				|	""Сумма"" КАК Поле,
				|	фин_СтатьиБюджета.ЧастотаВыполненияРасчетовПоФормулам,
				|	фин_СтатьиБюджета.ПериодичностьВыполненияРасчетов,
				|	фин_СтатьиБюджета.Формула.Вид КАК Вид
				|ИЗ
				|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
				|ГДЕ
				|	фин_СтатьиБюджета.Владелец = &ФормируемыйБюджет
				|	И фин_СтатьиБюджета.ЭтоГруппа
				|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
				|	И фин_СтатьиБюджета.Формула <> ЗНАЧЕНИЕ(Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	фин_СтатьиБюджета.Ссылка,
				|	фин_СтатьиБюджета.ФормулаКоличество,
				|	фин_СтатьиБюджета.ФормулаКоличество.Формула,
				|	""Количество"",
				|	фин_СтатьиБюджета.ЧастотаВыполненияРасчетовПоФормулам,
				|	фин_СтатьиБюджета.ПериодичностьВыполненияРасчетов,
				|	фин_СтатьиБюджета.ФормулаКоличество.Вид
				|ИЗ
				|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
				|ГДЕ
				|	фин_СтатьиБюджета.Владелец = &ФормируемыйБюджет
				|	И фин_СтатьиБюджета.ЭтоГруппа
				|	И НЕ фин_СтатьиБюджета.ПометкаУдаления
				|	И фин_СтатьиБюджета.Формула <> ЗНАЧЕНИЕ(Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка)";

			Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);

			Результат = Запрос.Выполнить();
			ВыборкаФормулы  = Результат.Выбрать();
			Пока ВыборкаФормулы.Следующий() Цикл
				НоваяСтрока = Форма.ТаблицаФормулыРасчетаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаФормулы);
			КонецЦикла;
		КонецЕсли;
		
		Если РежимРасчетаИтогов = Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле Тогда
			Если ФормируемыйБюджет.УчетПоСумме И ЗначениеЗаполнено(ФормулаИтогов) Тогда
				НоваяСтрока = Форма.ТаблицаФормулыРасчетаИтогов.Добавить();
				НоваяСтрока.Формула 		= ФормулаИтогов;
				НоваяСтрока.ТекстФормулы 	= ФормулаИтогов.Формула;
				НоваяСтрока.Поле 			= "Сумма";
			КонецЕсли;
			Если ФормируемыйБюджет.УчетПоСумме И ЗначениеЗаполнено(ФормулаИтоговКоличество) Тогда
				НоваяСтрока = Форма.ТаблицаФормулыРасчетаИтогов.Добавить();
				НоваяСтрока.Формула 		= ФормулаИтоговКоличество;
				НоваяСтрока.ТекстФормулы 	= ФормулаИтоговКоличество.Формула;
				НоваяСтрока.Поле 			= "Количество";
			КонецЕсли;
		КонецЕсли;
		
		
		Если Форма.ТаблицаФормулыРасчетаИтогов.Количество()>0 Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВходящиеПоказатели.Ссылка КАК Формула,
				|	ВходящиеПоказатели.НомерСтроки,
				|	ВходящиеПоказатели.ВидПоказателя,
				|	ВходящиеПоказатели.Показатель,
				|	ВходящиеПоказатели.ПериодСбораДанных,
				|	ВходящиеПоказатели.ПредставлениеПоказателя КАК ПредставлениеПоказателя,
				|	ВходящиеПоказатели.Идентификатор,
				|	ВходящиеПоказатели.Данные,
				|	ВходящиеПоказатели.ВидВлияния,
				|	ВходящиеПоказатели.Периодичность,
				|	ВходящиеПоказатели.НачалоПериода,
				|	ВходящиеПоказатели.КонецПериода,
				|	ВходящиеПоказатели.Лаг
				|ИЗ
				|	Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК ВходящиеПоказатели
				|ГДЕ
				|	ВходящиеПоказатели.Ссылка В(&ФормулыРасчетаИтогов)";

			Запрос.УстановитьПараметр("ФормулыРасчетаИтогов", Форма.ТаблицаФормулыРасчетаИтогов.Выгрузить().ВыгрузитьКолонку("Формула"));

			ТаблицаСоставФормулРасчетаИтогов = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаТЧ Из ТаблицаСоставФормулРасчетаИтогов Цикл
				НоваяСтрока = Форма.ТаблицаСоставФормулРасчетаИтогов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
			КонецЦикла;
			
			фин_ЗащитаПривилегированныеПроцедуры.ЗаменитьГруппыСтатейВФормулах(Форма.ТаблицаФормулыРасчетаИтогов,Форма.ТаблицаСоставФормулРасчетаИтогов,ФормируемыйБюджет,Версии);

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРазрезыУчетаЦен(Бюджет) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБюджета.Ссылка,
		|	СтатьиБюджета.ФинансовыйПоказатель КАК ФинансовыйПоказатель
		|ПОМЕСТИТЬ ВТ_Статьи
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
//		|	И СтатьиБюджета.Версия В(&Версия)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФинансовыйПоказатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка,
		|	ВТ_Статьи.ФинансовыйПоказатель,
		|	ФинансовыеПоказатели.ИсточникДанныхДляЦены КАК ИсточникДанныхДляЦены,
		|	ФинансовыеПоказатели.СпособЦенообразования
		|ПОМЕСТИТЬ Источники
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО ВТ_Статьи.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИсточникДанныхДляЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источники.Ссылка КАК СтатьяБюджета,
		|	ВЫБОР
		|		КОГДА Источники.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.поЦенампоставщиков)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент)
		|		ИНАЧЕ ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.ИзмерениеБюджетирования
		|	КОНЕЦ КАК Измерение,
		|	Источники.ФинансовыйПоказатель
		|ИЗ
		|	Источники КАК Источники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника
		|		ПО Источники.ИсточникДанныхДляЦены = ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Источники.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.ИзмерениеБюджетирования ЕСТЬ NULL 
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура),
		|	ВТ_Статьи.ФинансовыйПоказатель
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО ВТ_Статьи.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	(ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоБухгалтерскимЦенамНоменклатуры)
		|			ИЛИ ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоПрогнознымЦенамНоменклатуры)
		|			ИЛИ ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Статьи.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент),
		|	ВТ_Статьи.ФинансовыйПоказатель
		|ИЗ
		|	ВТ_Статьи КАК ВТ_Статьи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО ВТ_Статьи.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	ФинансовыеПоказатели.СпособЦенообразования = ЗНАЧЕНИЕ(Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатьяБюджета,
		|	Измерение";
	//Версии = Новый СписокЗначений;
	//Версии.Добавить(Форма.Версия);
	//Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	//Запрос.УстановитьПараметр("Версия", Версии);
	Запрос.УстановитьПараметр("Владелец", Бюджет);

	Результат = Запрос.Выполнить();
    РазрезыУчетаЦен = Результат.Выгрузить();
	Возврат РазрезыУчетаЦен;
	//Форма.РазрезыУчетаЦен.Очистить();
	//Для Каждого СтрокаТЧ Из РазрезыУчетаЦен Цикл
	//	НоваяСтрока = Форма.РазрезыУчетаЦен.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
	//КонецЦикла;
КонецФункции

// ЗаполнитьСтатьиБюджета
//
Процедура ЗаполнитьСтатьиБюджета(Объект,Форма) Экспорт
	
	Возврат; // доделать
	
	ФормируемыйБюджет 	= Объект.ФормируемыйБюджет;
	ВалютаДокумента 	= Объект.ВалютаДокумента;
	Сценарий 			= Объект.Сценарий;
	ПериодПланирования 	= Объект.ПериодПланирования;
	//ФормируемыйБюджет = Объект.ФормируемыйБюджет;
	Если ФормируемыйБюджет.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед заполнением статей бюджета необходимо заполнить реквизит ""Формируемый бюджет""!");
		Возврат;
	КонецЕсли;
	Если ВалютаДокумента.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед заполнением статей бюджета необходимо заполнить реквизит ""Валюта документа""!");
		Возврат;
	КонецЕсли;
	Если Сценарий.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед заполнением статей бюджета необходимо заполнить реквизит ""Сценарий""!");
		Возврат;
	КонецЕсли;
	Если ПериодПланирования = '00010101' Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед заполнением статей бюджета необходимо заполнить реквизит ""Период планирования""!");
		Возврат;
	КонецЕсли;
	
	СписокРассчитываемых 	= СписокРассчитываемыхПоМодели(Объект,Форма.Версия,Форма.СписокФильтрСтатей,Форма.БюджетированиеПоОрганизациям);
	СписокНаследуемых 		= СписокНаследуемыхСтатей(Объект,Форма.Версия,Форма.СписокФильтрСтатей,Форма.БюджетированиеПоОрганизациям);
	СписокЗависимых 		= СписокЗависимыхСтатей(Объект,Форма.Версия,Форма.СписокФильтрСтатей,Форма.БюджетированиеПоОрганизациям,Форма.СписокРассчитываемых);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	               |	СтатьиБюджета.ФинансовыйПоказатель
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |ГДЕ
	               |	НЕ СтатьиБюджета.ЭтоГруппа
	               |	И НЕ СтатьиБюджета.ПометкаУдаления
	               |	И СтатьиБюджета.Владелец = &Бюджет
	               |	И СтатьиБюджета.Версия В(&Версии)
	               |	И НЕ СтатьиБюджета.ФинансовыйПоказатель = ЗНАЧЕНИЕ(Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка)
	               |	И НЕ СтатьиБюджета.Ссылка В (&СписокРассчитываемых)
	               |	И НЕ СтатьиБюджета.Ссылка В (&СписокЗависимых)
	               |	И НЕ СтатьиБюджета.Ссылка В (&СписокНаследуемых)";
	Версии = Новый СписокЗначений;
	Версии.Добавить(Форма.Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Версии",				Версии);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Сценарий",			Сценарий);
	Запрос.УстановитьПараметр("УправленческоеПодразделение",				Объект.УправленческоеПодразделение);
	Запрос.УстановитьПараметр("Бюджет",				ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Проект",				Объект.Проект);
	Запрос.УстановитьПараметр("ПериодПланирования",	ПериодПланирования);
	Запрос.УстановитьПараметр("Дата",				Объект.Дата);
	Запрос.УстановитьПараметр("СписокРассчитываемых",Форма.СписокРассчитываемых);
	Запрос.УстановитьПараметр("СписокНаследуемых",	Форма.СписокНаследуемых);
	Запрос.УстановитьПараметр("СписокЗависимых",	Форма.СписокЗависимых);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСтатьиБюджета = РезультатЗапроса.Выбрать();
	Объект.ОборотыПоСтатьям.Очистить();
	Объект.ЗависимыеОбороты.Очистить();
	Объект.РасчетыПоМоделям.Очистить();
	Шагов=1;
	Если Не Сценарий.Пустая() Тогда
		Если Форма.ПродолжительностьЦикла >1 Тогда
			Шагов = Форма.ПродолжительностьЦикла;
		КонецЕсли;
	КонецЕсли;
	СписокПодразделений = Новый Массив;
	Если Объект.УровеньДетализацииБюджета=Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда
		Если ФормируемыйБюджет.ВключаяПодчиненныеПодразделения И ЗначениеЗаполнено(Объект.УправленческоеПодразделение) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Подразделения.Ссылка
				|ИЗ
				|	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+" КАК Подразделения
				|ГДЕ
				|	НЕ Подразделения.ПометкаУдаления
				|	И Подразделения.Ссылка В ИЕРАРХИИ(&Ссылка)
				|	И Подразделения.Ссылка <> &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", Объект.УправленческоеПодразделение);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокПодразделений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;

		Иначе
			СписокПодразделений.Добавить(Объект.УправленческоеПодразделение);
		КонецЕсли;
	Иначе
		СписокПодразделений.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение"));
	КонецЕсли;
	ПериодичностьСценария = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Пока ВыборкаСтатьиБюджета.Следующий() Цикл
		Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
			Если Форма.ОборотыПриКорректировке.НайтиСтроки(Новый Структура("СтатьяБюджета",ВыборкаСтатьиБюджета.СтатьяБюджета)).Количество() >0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Для Каждого ПодразделениеЗаполнения Из СписокПодразделений Цикл
			Для Инд=1 По Шагов Цикл
				Если Форма.СписокФильтрСтатей.Количество()<>0 И Форма.СписокФильтрСтатей.НайтиПоЗначению(ВыборкаСтатьиБюджета.СтатьяБюджета)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТЧ = Объект.ОборотыПоСтатьям.Добавить();
				СтрокаТЧ.СтатьяБюджета  	= ВыборкаСтатьиБюджета.СтатьяБюджета;
				СтрокаТЧ.ФинансовыйПоказатель 	= ВыборкаСтатьиБюджета.ФинансовыйПоказатель;
				СтрокаТЧ.УправленческоеПодразделение 			= ПодразделениеЗаполнения;
				Если Не Объект.Проект.Пустая() Тогда
					СтрокаТЧ.Проект 		= Объект.Проект;
				КонецЕсли;
				Если Инд=1 Тогда
					СтрокаТЧ.ПериодПланирования = ПериодПланирования;
				Иначе
					СтрокаТЧ.ПериодПланирования = ПериодПланирования;
					Для Инд2=2 По Инд Цикл
						Если ПериодичностьСценария=Перечисления.фин_Периодичность.Год Тогда
							СтрокаТЧ.ПериодПланирования = ДобавитьМесяц(СтрокаТЧ.ПериодПланирования,12);
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.Декада Тогда
							СтрокаТЧ.ПериодПланирования = СтрокаТЧ.ПериодПланирования + 10*24*60*60;
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.День Тогда
							СтрокаТЧ.ПериодПланирования = СтрокаТЧ.ПериодПланирования + 24*60*60;
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.Квартал Тогда
							СтрокаТЧ.ПериодПланирования = ДобавитьМесяц(СтрокаТЧ.ПериодПланирования,3);
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.Месяц Тогда
							СтрокаТЧ.ПериодПланирования = ДобавитьМесяц(СтрокаТЧ.ПериодПланирования,1);
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.Неделя Тогда
							СтрокаТЧ.ПериодПланирования = СтрокаТЧ.ПериодПланирования + 7*24*60*60;
						ИначеЕсли ПериодичностьСценария=Перечисления.фин_Периодичность.Полугодие Тогда
							СтрокаТЧ.ПериодПланирования = ДобавитьМесяц(СтрокаТЧ.ПериодПланирования,6);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьСтатьиБюджета

////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ ПО БЮДЖЕТУ

Процедура РассчитатьБюджет(Объект,Форма = Неопределено,РассчитыватьМодели = Истина,РасчетМоделейАктуален=Ложь,ВРежимеОтладки = Ложь) Экспорт
	Если Форма = Неопределено Тогда
		ВестиУчетПоПроектам 						= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
		БюджетированиеПоОрганизациям 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
		КЭШ_ЦеныНоменклатуры 						= Неопределено;
		УчетнаяПолитикаБюджетирование 				= фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДанныеУчетнойПолитики(Объект.ПериодПланирования);
		ПродолжительностьЦикла 						= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
		Версия 										= фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Объект.ФормируемыйБюджет,Объект.ПериодПланирования);
		СписокФильтрСтатей 							= Новый СписокЗначений;
	    ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей);
		СписокРассчитываемых						= СписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
		СписокЗависимых 							= СписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых);
		СписокНаследуемых							= СписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
		ТочностьКоличественныхПоказателей			= Объект.ФормируемыйБюджет.ТочностьКоличественныхПоказателей;
		
		КЭШ_СтатьиПоказателей = Новый ТаблицаЗначений;
		КЭШ_СтатьиПоказателей.Колонки.Добавить("Показатель", 	Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"));
		КЭШ_СтатьиПоказателей.Колонки.Добавить("Статья", 		Новый ОписаниеТипов("СправочникСсылка.фин_СтатьиБюджета"));
		
		КЭШ_РазрезыУчетаОстатков = Новый Соответствие;
		
		СтруктураРасчет = Новый Структура("Версия,ВестиУчетПоПроектам,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СписокЗависимых,КЭШ_СтатьиПоказателей,РазрезыРасчетаФормул",Версия,ВестиУчетПоПроектам,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых,СписокЗависимых,КЭШ_СтатьиПоказателей,Новый СписокЗначений);
		СтруктураРасчет.Вставить("СписокНаследуемых",СписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям));
		СписокФормульных = Новый СписокЗначений;
		СтруктураРасчет.Вставить("СписокФормульных",СписокФормульных);
		
		ТаблицаФормулыРасчетаСтатей 			= фин_УправлениеБюджетированием.Новый_ТаблицаФормулыРасчетаСтатей();
		
		СтруктураРасчет.Вставить("ТаблицаФормулыРасчетаСтатей",ТаблицаФормулыРасчетаСтатей);

		ТаблицаСоставФормулРасчетаСтатей 	= фин_УправлениеБюджетированием.Новый_ТаблицаСоставФормулРасчетаСтатей();
		
		СтруктураРасчет.Вставить("ТаблицаСоставФормулРасчетаСтатей",ТаблицаСоставФормулРасчетаСтатей);

		ТаблицаРассчитанныеПоказателиФормул 	= фин_УправлениеБюджетированием.Новый_ТаблицаРассчитанныеПоказателиФормул();
		
		СтруктураРасчет.Вставить("ТаблицаРассчитанныеПоказателиФормул",ТаблицаРассчитанныеПоказателиФормул);
		
		ТаблицаНастройкиШкал 					= Новый ТаблицаЗначений;
	 	ТаблицаНастройкиШкал.Колонки.Добавить("Шкала",Новый ОписаниеТипов("СправочникСсылка.фин_ШкалыОценкиДляФинансовыхРасчетов"));
		ТаблицаНастройкиШкал.Колонки.Добавить("От",Новый ОписаниеТипов("Число"));
		ТаблицаНастройкиШкал.Колонки.Добавить("До",Новый ОписаниеТипов("Число"));
		ТаблицаНастройкиШкал.Колонки.Добавить("Значение",Новый ОписаниеТипов("Число"));
		
		СтруктураРасчет.Вставить("ТаблицаНастройкиШкал",ТаблицаНастройкиШкал);
		
		ОбновитьРасчетныеСписки(Объект,СтруктураРасчет);
		
		Если Объект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
			СтруктураРасчет.Вставить("ОборотыПриКорректировке",Документы.фин_Бюджет.СоздатьДокумент().ОборотыПоСтатьям.ВыгрузитьКолонки());
			ЗаполнитьТаблицуОборотовПриКорректировке(Объект,СтруктураРасчет);
			ОборотыПриКорректировке					= СтруктураРасчет.ОборотыПриКорректировке;
		Иначе
			ОборотыПриКорректировке					= Новый ТаблицаЗначений;
		КонецЕсли;
		
	Иначе
		ВестиУчетПоПроектам 						= Форма.ВестиУчетПоПроектам;
		БюджетированиеПоОрганизациям 				= Форма.БюджетированиеПоОрганизациям;
		КЭШ_ЦеныНоменклатуры 						= Форма.КЭШ_ЦеныНоменклатуры;
		СписокФильтрСтатей 							= Форма.СписокФильтрСтатей;
		Версия 										= Форма.Версия;
		УчетнаяПолитикаБюджетирование 				= Форма.УчетнаяПолитикаБюджетирование;
		ПродолжительностьЦикла 						= Форма.ПродолжительностьЦикла;
		СписокЗависимых 							= Форма.СписокЗависимых;
		СписокРассчитываемых 						= Форма.СписокРассчитываемых;
		СписокНаследуемых							= Форма.СписокНаследуемых;
		ТочностьКоличественныхПоказателей			= Форма.ТочностьКоличественныхПоказателей;
		
		СписокФормульных 							= Форма.СписокФормульных;
		КЭШ_СтатьиПоказателей 						= Форма.КЭШ_СтатьиПоказателей;
		КЭШ_РазрезыУчетаОстатков 					= Форма.КЭШ_РазрезыУчетаОстатков;
		ТаблицаСоставФормулРасчетаСтатей 	= Форма.ТаблицаСоставФормулРасчетаСтатей;
		ТаблицаФормулыРасчетаСтатей 			= Форма.ТаблицаФормулыРасчетаСтатей;
		ТаблицаРассчитанныеПоказателиФормул			= Форма.ТаблицаРассчитанныеПоказателиФормул;
		ОборотыПриКорректировке						= Форма.ОборотыПриКорректировке;
	КонецЕсли;
	Если ВестиУчетПоПроектам = Неопределено Тогда
		ВестиУчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	КонецЕсли;
	Если БюджетированиеПоОрганизациям = Неопределено Тогда
		БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ТребуетсяРасчетЗависимостей(Объект.ФормируемыйБюджет,Объект.Сценарий) Тогда
		РассчитатьЗависимыеОбороты(Объект,БюджетированиеПоОрганизациям,ВестиУчетПоПроектам);
	КонецЕсли;
	//Если СписокРассчитываемых.Количество() > 0 Тогда
		Если РассчитыватьМодели Тогда
			Результат = ПроизвестиРасчетПоМоделям(Объект,Версия,СписокРассчитываемых,СписокНаследуемых,СписокЗависимых,СписокФильтрСтатей,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры);
			Если Результат = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет моделей не выполнен! Проверьте данные!");
				РасчетМоделейАктуален = Ложь;
			Иначе
				РасчетМоделейАктуален = Истина;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет моделей не выполнен! Проверьте корректность заполнения документа!");
			РасчетМоделейАктуален = Истина;
		КонецЕсли;
	//КонецЕсли;
	Если СписокФормульных.Количество()>0 Тогда
		фин_ЗащитаПривилегированныеПроцедуры.ПроизвестиРасчетыПоФормуламБюджета(Объект,Версия,ПродолжительностьЦикла,ТаблицаФормулыРасчетаСтатей,
				ТаблицаСоставФормулРасчетаСтатей,ТаблицаРассчитанныеПоказателиФормул,
				СписокФормульных,КЭШ_СтатьиПоказателей,СписокФильтрСтатей,,
				,,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры,ОборотыПриКорректировке,ТочностьКоличественныхПоказателей);
		СвернутьОбороты(Объект);
	КонецЕсли;
КонецПроцедуры

Процедура РассчитатьЗависимыеОбороты(Объект,БюджетированиеПоОрганизациям=Неопределено,ВестиУчетПоПроектам=Неопределено,ВРежимеОтладки = Ложь) Экспорт
	Если ВестиУчетПоПроектам = Неопределено Тогда
		ВестиУчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	КонецЕсли;
	Если БюджетированиеПоОрганизациям = Неопределено Тогда
		БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	КонецЕсли;
	ТаблицаЗависимыеОбороты = Объект.ЗависимыеОбороты.Выгрузить();
	ТаблицаОборотыПоСтатьям = Объект.ОборотыПоСтатьям.Выгрузить();
	фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(Объект.ФормируемыйБюджет,ТаблицаОборотыПоСтатьям,ТаблицаЗависимыеОбороты,Объект.Сценарий,Объект.Организация,БюджетированиеПоОрганизациям,Объект.ПериодПланирования,ВестиУчетПоПроектам);
	Объект.ЗависимыеОбороты.Загрузить(ТаблицаЗависимыеОбороты);
	Если ВРежимеОтладки = Ложь Тогда
		СвернутьЗависимости(Объект);
	КонецЕсли;
КонецПроцедуры //РассчитатьЗависимыеОбороты

Функция СформироватьСтруктуруДанныхШапки(Объект) Экспорт
	СтруктураДанныхШапки=Новый Структура;
	
	СтруктураДанныхШапки.Вставить("СценарийПериодичность",		фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
	СтруктураДанныхШапки.Вставить("СценарийВалюта",				Объект.Сценарий.Валюта);
	СтруктураДанныхШапки.Вставить("РегистрКурсовВалют",			?(Объект.Сценарий.ИспользоватьКурсыСценария,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям","КурсыВалют"));
	СтруктураДанныхШапки.Вставить("ИспользоватьКурсыСценария",	Объект.Сценарий.ИспользоватьКурсыСценария);
	СтруктураДанныхШапки.Вставить("Сценарий",					Объект.Сценарий);
	СтруктураДанныхШапки.Вставить("ВидОперации",				Объект.ВидОперации);
	СтруктураДанныхШапки.Вставить("ФормируемыйБюджет",			Объект.ФормируемыйБюджет);
	СтруктураДанныхШапки.Вставить("ПериодПланирования",			Объект.ПериодПланирования);
	СтруктураДанныхШапки.Вставить("УправленческоеПодразделение",Объект.УправленческоеПодразделение);
	СтруктураДанныхШапки.Вставить("Организация",				Объект.Организация);
	СтруктураДанныхШапки.Вставить("Проект",						Объект.Проект);
	СтруктураДанныхШапки.Вставить("ВалютаДокумента",			Объект.ВалютаДокумента);
	СтруктураДанныхШапки.Вставить("ЗадаватьКурсыВалютВДокументе",Объект.ЗадаватьКурсыВалютВДокументе);
	Возврат СтруктураДанныхШапки;
КонецФункции

// Возвращает таблицу значений для использования в движениях
// регистров
//
Функция СформироватьЗапросПоДаннымДокумента(Объект,СтруктураДанныхШапки,УчетнаяПолитикаБюджетирование) Экспорт
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("ТолькоУтвержденные",	УчетнаяПолитикаБюджетирование.БюджетыСНеУтвержденнымиСтроками = Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.НеОтражатьНеУтвержденныеСтрокиВУчете);
	Запрос.УстановитьПараметр("Сценарий",			СтруктураДанныхШапки.Сценарий);
	Запрос.УстановитьПараметр("ВалютаДокумента",	СтруктураДанныхШапки.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаСценария",		СтруктураДанныхШапки.СценарийВалюта);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",		фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("Ссылка",				Объект.Ссылка);
	Запрос.УстановитьПараметр("Сценарий",			СтруктураДанныхШапки.Сценарий);
	//передача табличных частей
	Запрос.УстановитьПараметр("ЗависимыеОбороты",	Объект.ЗависимыеОбороты.Выгрузить());
	Запрос.УстановитьПараметр("ОборотыПоСтатьям",	Объект.ОборотыПоСтатьям.Выгрузить());
	Запрос.УстановитьПараметр("РасчетыПоМоделям",	Объект.РасчетыПоМоделям.Выгрузить());

	ТекстЗапроса = ТекстЗапросаДляПолученияДанныхДокумента(СтруктураДанныхШапки);
	Для Каждого ТЧ Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.фин_Бюджет."+ТЧ.Имя,"&"+ТЧ.Имя);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДанныеТабличнойЧасти.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос.Текст	= ТекстЗапроса;
	
	ТабОборотовДокумента	= Запрос.Выполнить().Выгрузить();
	ТабОборотовДокумента 	= фин_УправлениеБюджетированием.ПодготовитьТаблицуДанныхДокументаБюджет(ТабОборотовДокумента,Объект);
	
	Возврат ТабОборотовДокумента;
	
КонецФункции // СформироватьЗапросПоДаннымДокумента()

Процедура СвернутьРасчетыПоМоделям(Объект) Экспорт
	СтрокаСвертки = "";
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ЗависимыеОбороты.Реквизиты Цикл
		Если Реквизит.Имя<>"Сумма" И Реквизит.Имя<>"Количество" И Реквизит.Имя<>"ВлияющаяОперация" И Реквизит.Имя<>"ВложеннаяЗависимость" И Реквизит.Имя<>"КомментарийРасчета" И Реквизит.Имя<>"ПриоритетМодели" И Реквизит.Имя<>"РасчетныйЦикл" И Реквизит.Имя<>"ПроизводственнаяМодель" И Реквизит.Имя<>"ВидСтрокиПроизводственнойМодели" Тогда
			СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",") + Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	ЗависимыеОбороты = Объект.ЗависимыеОбороты.Выгрузить();	
	ЗависимыеОбороты.Свернуть(СтрокаСвертки,"Количество,Сумма");
	Объект.ЗависимыеОбороты.Загрузить(ЗависимыеОбороты);
КонецПроцедуры

Процедура СвернутьЗависимости(Объект) Экспорт
	СтрокаСвертки = "";
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ЗависимыеОбороты.Реквизиты Цикл
		Если Реквизит.Имя<>"Сумма" И Реквизит.Имя<>"Количество" И Реквизит.Имя<>"ВлияющаяОперация" И Реквизит.Имя<>"ВложеннаяЗависимость" И Реквизит.Имя<>"ИдентификаторСтроки" И Реквизит.Имя<>"КоэффициентДляРасчетаКоличества" И Реквизит.Имя<>"КоэффициентДляРасчетаСуммы" И Реквизит.Имя<>"РеквизитОперацииДляРасчетаКоличества" И Реквизит.Имя<>"РеквизитОперацииДляРасчетаСуммы" Тогда
			СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",") + Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	ЗависимыеОбороты = Объект.ЗависимыеОбороты.Выгрузить();	
	ЗависимыеОбороты.Свернуть(СтрокаСвертки,"Количество,Сумма");
	Объект.ЗависимыеОбороты.Загрузить(ЗависимыеОбороты);
КонецПроцедуры

Процедура СвернутьОбороты(Объект) Экспорт
	СтрокаСвертки = "";
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		Если Реквизит.Имя<>"Сумма" И Реквизит.Имя<>"Количество" Тогда
			СтрокаСвертки = СтрокаСвертки + ?(СтрокаСвертки="","",",") + Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	ОборотыПоСтатьям = Объект.ОборотыПоСтатьям.Выгрузить();	
	ОборотыПоСтатьям.Свернуть(СтрокаСвертки,"Количество,Сумма");
	Объект.ОборотыПоСтатьям.Загрузить(ОборотыПоСтатьям);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ МОДЕЛЕЙ

//функция выполняет регламентные расчеты по моделям
//и возвращает структуру рассчитанных моделей
Функция ПроизвестиРасчетПоМоделям(Объект,Версия=Неопределено,СписокРассчитываемых=Неопределено,СписокНаследуемых=Неопределено,СписокЗависимых=Неопределено,СписокФильтрСтатей=Неопределено,УчетнаяПолитикаБюджетирование=Неопределено,БюджетированиеПоОрганизациям=Неопределено,ВестиУчетПоПроектам=Неопределено,КЭШ_ЦеныНоменклатуры=Неопределено,СтруктураРезультат=Неопределено,РежимОстанова=Неопределено,ПриоритетОстанова = 0,ЦиклОстанова = 0,ВРежимеОтладки = Ложь) Экспорт
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	ПолныйСписокРазрезов 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	РасчетыПоМоделям 	= Объект.РасчетыПоМоделям;
	Ссылка 				= Объект.Ссылка;
	Сценарий 			= Объект.Сценарий;
	ПериодПланирования 	= Объект.ПериодПланирования;
	Организация 		= Объект.Организация;
	ФормируемыйБюджет   = Объект.ФормируемыйБюджет;
	ВидОперации   		= Объект.ВидОперации;
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Если СписокРассчитываемых = Неопределено И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьРасчетныеМоделиБюджетирования") Тогда
		СписокРассчитываемых = СписокРассчитываемыхПоМодели(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
	КонецЕсли;
	Если СписокНаследуемых = Неопределено Тогда
		СписокНаследуемых	= СписокНаследуемыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям);
	КонецЕсли;
	Если СписокЗависимых = Неопределено Тогда
		СписокЗависимых 							= СписокЗависимыхСтатей(Объект,Версия,СписокФильтрСтатей,БюджетированиеПоОрганизациям,СписокРассчитываемых);
	КонецЕсли;
	
	Если ВестиУчетПоПроектам = Неопределено Тогда
		ВестиУчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	КонецЕсли;
	Если БюджетированиеПоОрганизациям = Неопределено Тогда
		БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	КонецЕсли;
	Если УчетнаяПолитикаБюджетирование = Неопределено Тогда
		УчетнаяПолитикаБюджетирование = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДанныеУчетнойПолитики(Объект.ПериодПланирования);
	КонецЕсли;
	Если Версия = Неопределено Тогда
		Версия = фин_ПроцедурыМеханизмовБюджетирования.ВерсияБюджета(Объект.ФормируемыйБюджет,Объект.ПериодПланирования);
	КонецЕсли;
	Версии = Новый СписокЗначений;
	Версии.Добавить(Версия);
	Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
	Если СписокФильтрСтатей = Неопределено Тогда
		СписокФильтрСтатей = Новый СписокЗначений;
	   ЗаполнитьСписокФильтрСтатей(Объект,СписокФильтрСтатей)
	КонецЕсли;
	ТребуетсяРасчет = ТребуетсяРасчетМоделей(ФормируемыйБюджет,Версии,Сценарий,ПериодПланирования,Организация);
	Если (СписокРассчитываемых = Неопределено ИЛИ СписокРассчитываемых.Количество()=0) И ТребуетсяРасчет.ПроизводственныеМодели=Ложь И  ТребуетсяРасчет.МоделиРаспределения=Ложь И  ТребуетсяРасчет.МоделиРасчета=Ложь Тогда
		РасчетыПоМоделям.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаВыполненныхРасчетов = Новый ТаблицаЗначений;
	ТаблицаВыполненныхРасчетов.Колонки.Добавить("Модель");
	ТаблицаВыполненныхРасчетов.Колонки.Добавить("Расчет");
	ТаблицаВыполненныхРасчетов.Колонки.Добавить("Период");
	ТаблицаВыполненныхРасчетов.Колонки.Добавить("Дата");
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьРасчетныеМоделиБюджетирования") И ТребуетсяРасчет.МоделиРасчета=Истина Тогда
		Если Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен! Для расчета по моделям документ должен быть записан!");
			Возврат Неопределено;
		КонецЕсли;
		НаборДвиженийОбороты = РегистрыНакопления.фин_ОборотыБюджетов.СоздатьНаборЗаписей();
		НаборДвиженийОбороты.Отбор.Регистратор.Установить(Объект.Ссылка);
		Если РежимОстанова<>"После" Тогда
			РасчетыПоМоделям.Очистить();
		Иначе
			СтрокиУдалить = Новый Массив;
			Для Каждого Строка Из РасчетыПоМоделям Цикл
				Если Строка.ПриоритетМодели > ПриоритетОстанова И ПриоритетОстанова <>0 Тогда
					СтрокиУдалить.Добавить(Строка);
				ИначеЕсли Строка.ПриоритетМодели = ПриоритетОстанова И ПриоритетОстанова <>0 И Строка.РасчетныйЦикл <>0 И Строка.РасчетныйЦикл > ЦиклОстанова И ЦиклОстанова <>0 Тогда
					СтрокиУдалить.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				РасчетыПоМоделям.Удалить(СтрокаУдалить);
			КонецЦикла;
		КонецЕсли;
//!!!!	Записать(РежимЗаписиДокумента.Запись);
		НачатьТранзакцию();
		Отказ = Ложь;
		ДвиженияПоРегистрамВЦеляхРасчета(Объект,НаборДвиженийОбороты,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,Отказ);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен! "+ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		Если РежимОстанова<>"После" Тогда
			ПереченьБюджетныхОпераций = ?(ТипЗнч(РасчетыПоМоделям)=тип("ДанныеФормыКоллекция"),РасчетыПоМоделям.Выгрузить().СкопироватьКолонки(),РасчетыПоМоделям.ВыгрузитьКолонки());
		Иначе
			ПереченьБюджетныхОпераций = РасчетыПоМоделям.Выгрузить();
		КонецЕсли;
		СписокСтатейОборотов = Новый СписокЗначений;
		Для Каждого Элемент из СписокРассчитываемых Цикл
			СписокСтатейОборотов.Добавить(Элемент.Значение.ФинансовыйПоказатель);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		               |	РегламентныеРасчетыПоМоделям.Расчет КАК Расчет,
		               |	РегламентныеРасчетыПоМоделям.ПриоритетРасчетаМодели КАК ПриоритетРасчетаМодели,
		               |	РегламентныеРасчетыПоМоделям.ЦиклическийРасчет,
		               |	РегламентныеРасчетыПоМоделям.ВложенностьЦикла,
		               |	РегламентныеРасчетыПоМоделям.РекурсивнаяМодель
		               |ИЗ
		               |	РегистрСведений.фин_РегламентныеРасчетыПоМоделям КАК РегламентныеРасчетыПоМоделям
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА &БюджетированиеПоОрганизациям
		               |				ТОГДА РегламентныеРасчетыПоМоделям.Организация = &Организация
		               |						ИЛИ РегламентныеРасчетыПоМоделям.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |	И РегламентныеРасчетыПоМоделям.Сценарий = &Сценарий
		               |	И РегламентныеРасчетыПоМоделям.НачалоИспользования <= &КонецПланирования
		               |	И РегламентныеРасчетыПоМоделям.КонецИспользования >= &НачалоПланирования
		               |	И РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель В(&СписокРассчитываемых)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПриоритетРасчетаМодели
		               |ИТОГИ ПО
		               |	Расчет";
		Запрос.УстановитьПараметр("БюджетированиеПоОрганизациям",		БюджетированиеПоОрганизациям);
		Запрос.УстановитьПараметр("Организация",		Организация);
		Запрос.УстановитьПараметр("Сценарий",			Сценарий);
		Запрос.УстановитьПараметр("НачалоПланирования",	ПериодПланирования);
		Запрос.УстановитьПараметр("КонецПланирования",	?(ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),ПродолжительностьЦикла-1)));
		Запрос.УстановитьПараметр("СписокРассчитываемых",СписокСтатейОборотов);
		ВыборкаПоРасчетам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Расчет");
		ВыполнитьРасчетныйЦикл(Объект,УчетнаяПолитикаБюджетирование,НаборДвиженийОбороты,ВыборкаПоРасчетам,БюджетированиеПоОрганизациям,ПродолжительностьЦикла,ПереченьБюджетныхОпераций,ТаблицаВыполненныхРасчетов,Отказ,СтруктураРезультат,РежимОстанова,ПриоритетОстанова,ЦиклОстанова);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен!");
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
		//Если ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка  Тогда
		//	ПереченьНовыхБюджетныхОпераций  =  ПереченьБюджетныхОпераций.СкопироватьКолонки();
		//	ТаблицаНовыхРасчетов			=  ТаблицаВыполненныхРасчетов.СкопироватьКолонки();
		//	ВыборкаПоРасчетам.Сбросить();
		//	НаборДвиженийОбороты.Очистить();
		//	НаборДвиженийОбороты.Записать();
		//	ВыполнитьРасчетныйЦикл(Объект,УчетнаяПолитикаБюджетирование,НаборДвиженийОбороты,ВыборкаПоРасчетам,БюджетированиеПоОрганизациям,ПродолжительностьЦикла,ПереченьНовыхБюджетныхОпераций,ТаблицаНовыхРасчетов,Отказ);
		//	Если Отказ Тогда
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен!");
		//		ОтменитьТранзакцию();
		//		Возврат Неопределено;
		//	КонецЕсли;
		//	мМассивИзмерений 	= Новый Массив;
		//	мМассивИзмерений.Добавить("ПериодПланирования");
		//	мМассивИзмерений.Добавить("ФинансовыйПоказатель");
		//	мМассивИзмерений.Добавить("СтатьяБюджета");
		//	мМассивИзмерений.Добавить("ВалютаОперации");
		//	Для Каждого ИзмерениеБюджетов Из фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокИменРазрезов()Цикл
		//		мМассивИзмерений.Добавить(ИзмерениеБюджетов);
		//	КонецЦикла;
		//	мМассивРесурсов		= Новый Массив;
		//	мМассивРесурсов.Добавить("Сумма");
		//	мМассивРесурсов.Добавить("Количество");
		//	ТаблицаДополнения = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДополнениеКТаблице(ПереченьНовыхБюджетныхОпераций,ПереченьБюджетныхОпераций,мМассивИзмерений,мМассивРесурсов);
		//	РасчетыПоМоделям.Очистить();
		//	РасчетыПоМоделям.Загрузить(ТаблицаДополнения);
		//Иначе	
			РасчетыПоМоделям.Очистить();
			РасчетыПоМоделям.Загрузить(ПереченьБюджетныхОпераций);
		//КонецЕсли;
		СписокСтатей = РасчетыПоМоделям.Выгрузить();
		СписокСтатей.Свернуть("ФинансовыйПоказатель");
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СтатьиБюджета.ФинансовыйПоказатель,
		|	СтатьиБюджета.Ссылка КАК СтатьяБюджета
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И СтатьиБюджета.Версия В(&Версии)
		|	И СтатьиБюджета.ФинансовыйПоказатель В(&Статьи)";
		Запрос.УстановитьПараметр("Версии",				Версии);
		Запрос.УстановитьПараметр("Статьи",СписокСтатей);
		Запрос.УстановитьПараметр("Бюджет",ФормируемыйБюджет);
		СоответствиеСтатей = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСтатей.Вставить(Выборка.ФинансовыйПоказатель,Выборка.СтатьяБюджета);
		КонецЦикла;
		Для Каждого СтрокаЗависимыйОборот Из РасчетыПоМоделям Цикл
			СтрокаЗависимыйОборот.Авторасчет = Истина;
			СтатьяБюджета = СоответствиеСтатей.Получить(СтрокаЗависимыйОборот.ФинансовыйПоказатель);
			Если СтатьяБюджета <> Неопределено Тогда
				СтрокаЗависимыйОборот.СтатьяБюджета = СтатьяБюджета; 
			КонецЕсли;
		КонецЦикла;
		//ЗафиксироватьТранзакцию();
		ТаблицаВыполненныхРасчетов.Свернуть("Модель,Расчет,Период,Дата");
		ТаблицаВыполненныхРасчетов.Сортировать("Модель,Расчет,Дата");
	Иначе
		РасчетыПоМоделям.Очистить();
	КонецЕсли;
	// расчет производственных моделей
	Если ТребуетсяРасчет.ПроизводственныеМодели=Истина ИЛИ ТребуетсяРасчет.МоделиРаспределения=Истина Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СтатьиБюджета.ФинансовыйПоказатель,
		|	СтатьиБюджета.Ссылка КАК СтатьяБюджета
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Бюджет
		|	И СтатьиБюджета.Версия В(&Версии)";
		Версии = Новый СписокЗначений;
		Версии.Добавить(Версия);
		Версии.Добавить(Справочники.фин_ВерсииБюджетов.ПустаяСсылка());
		Запрос.УстановитьПараметр("Версии",	Версии);
		Запрос.УстановитьПараметр("Бюджет",	ФормируемыйБюджет);
		СоответствиеСтатей = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСтатей.Вставить(Выборка.ФинансовыйПоказатель,Выборка.СтатьяБюджета);
		КонецЦикла;
	//!!!		Записать(РежимЗаписиДокумента.Запись);
		ТаблицаРасчеты = РасчетыПоМоделям.Выгрузить();
		Если ТребуетсяРасчет.ПроизводственныеМодели=Истина Тогда
			ОбработатьПустуюАналитикуСтрок(РасчетыПоМоделям,ПолныйСписокРазрезов,Сценарий.ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
		    фин_ЗащитаПривилегированныеПроцедуры.РассчитатьПроизводственныеМодели(Объект,ТаблицаРасчеты,ТаблицаВыполненныхРасчетов,Неопределено,Ссылка,Сценарий,ПериодПланирования,БюджетированиеПоОрганизациям,Организация,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры);
			// расчет моделей распределения
			Для Каждого СтрокаРасчет Из ТаблицаРасчеты Цикл
				СтрокаРасчет.СтатьяБюджета = СоответствиеСтатей.Получить(СтрокаРасчет.ФинансовыйПоказатель);
			КонецЦикла;
			РасчетыПоМоделям.Загрузить(ТаблицаРасчеты);
		КонецЕсли;
	//!!!	Записать(РежимЗаписиДокумента.Запись);
		Если ТребуетсяРасчет.МоделиРаспределения=Истина Тогда
			ОбработатьПустуюАналитикуСтрок(РасчетыПоМоделям,ПолныйСписокРазрезов,Сценарий.ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
		    фин_ЗащитаПривилегированныеПроцедуры.РассчитатьМоделиРаспределения(Объект,ТаблицаРасчеты,ТаблицаВыполненныхРасчетов,Ссылка,Сценарий,ПериодПланирования,БюджетированиеПоОрганизациям,Организация,ВестиУчетПоПроектам,КЭШ_ЦеныНоменклатуры);
			Для Каждого СтрокаРасчет Из ТаблицаРасчеты Цикл
				СтрокаРасчет.СтатьяБюджета = СоответствиеСтатей.Получить(СтрокаРасчет.ФинансовыйПоказатель);
			КонецЦикла;
			РасчетыПоМоделям.Загрузить(ТаблицаРасчеты);
		КонецЕсли;
	КонецЕсли;
	
	Если (ТребуетсяРасчет.МоделиРасчета=Истина ИЛИ ТребуетсяРасчет.ПроизводственныеМодели=Истина ИЛИ ТребуетсяРасчет.МоделиРаспределения=Истина) И ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка  Тогда
		ОбработатьПустуюАналитикуСтрок(РасчетыПоМоделям,ПолныйСписокРазрезов,Сценарий.ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
		ПереченьНовыхБюджетныхОпераций  		=  РасчетыПоМоделям.Выгрузить();
		ПереченьСуществующихБюджетныхОпераций 	= фин_РаботаСДаннымиЭкземпляраБюджетаСервер.ПолучитьТаблицуРасчетовПоМоделямДоКорректировки(Объект,Версия,СписокФильтрСтатей,ПродолжительностьЦикла,СписокРассчитываемых,СписокЗависимых,СписокНаследуемых,ВестиУчетПоПроектам,БюджетированиеПоОрганизациям,КЭШ_ЦеныНоменклатуры);
		ОбработатьПустуюАналитикуСтрок(ПереченьСуществующихБюджетныхОпераций,ПолныйСписокРазрезов,Сценарий.ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
		мМассивИзмерений 	= Новый Массив;
		мМассивИзмерений.Добавить("ПериодПланирования");
		мМассивИзмерений.Добавить("ФинансовыйПоказатель");
		мМассивИзмерений.Добавить("СтатьяБюджета");
		мМассивИзмерений.Добавить("ВалютаОперации");
		Для Каждого ИзмерениеБюджетов Из фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокИменРазрезов()Цикл
			мМассивИзмерений.Добавить(ИзмерениеБюджетов.Значение);
		КонецЦикла;
		мМассивРесурсов		= Новый Массив;
		мМассивРесурсов.Добавить("Сумма");
		мМассивРесурсов.Добавить("Количество");
		ТаблицаДополнения = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьДополнениеКТаблице(ПереченьСуществующихБюджетныхОпераций,ПереченьНовыхБюджетныхОпераций,мМассивИзмерений,мМассивРесурсов);
		РасчетыПоМоделям.Очистить();
		РасчетыПоМоделям.Загрузить(ТаблицаДополнения);
		
		// Добавляем зависимые обороты
		ТаблицаДополнения.Колонки.Добавить("ИдентификаторСтроки");
		ТекущийИдентификатор = 0;
		Для Каждого СтрокаОперация Из РасчетыПоМоделям Цикл
			ТекущийИдентификатор 				= ТекущийИдентификатор+1;
			СтрокаОперация.ИдентификаторСтроки 	= ТекущийИдентификатор;
		КонецЦикла;
		КопияТаблицы	= РасчетыПоМоделям.Выгрузить().СкопироватьКолонки();
		
		ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
		БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
		
		ПереченьНовыхБюджетныхОпераций  		=  РасчетыПоМоделям.Выгрузить();
		фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ПереченьНовыхБюджетныхОпераций,КопияТаблицы,Сценарий,Организация,БюджетированиеПоОрганизациям,Объект.ПериодПланирования,ВестиУчетПоПроектам,,Истина,"ИдентификаторСтроки",ТекущийИдентификатор);
		
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(КопияТаблицы,РасчетыПоМоделям);
		
		// поместим результат в документ
		Для Каждого СтрокаРасчет Из РасчетыПоМоделям Цикл
			СтрокаРасчет.Авторасчет=Истина;
			СтрокаРасчет.СтатьяБюджета = СоответствиеСтатей.Получить(СтрокаРасчет.ФинансовыйПоказатель);
		КонецЦикла;
	КонецЕсли;	
	Если ВРежимеОтладки = Ложь Тогда
		СвернутьРасчетыПоМоделям(Объект);
	КонецЕсли;
	ТаблицаВыполненныхРасчетов.Свернуть("Модель,Расчет,Период,Дата");
	ТаблицаВыполненныхРасчетов.Сортировать("Модель,Расчет,Дата");
	Возврат ТаблицаВыполненныхРасчетов;
КонецФункции //ПроизвестиРасчетПоМоделям

Процедура ОбработатьПустуюАналитикуСтрок(ТабличнаяЧасть,ПолныйСписокРазрезов,ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре)
	Для Каждого СтрокаОборотов Из ТабличнаяЧасть Цикл
		ОписаниеТиповНоменклатуры 	= ТипЗначенияДляВвода("Номенклатура",СтрокаОборотов.ФинансовыйПоказатель,ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
		СтрокаОборотов.Номенклатура = ОписаниеТиповНоменклатуры.ПривестиЗначение(СтрокаОборотов.Номенклатура);
		
		Для Инд = 1 По 10 Цикл
			ИмяРазреза = "Разрез"+Строка(Инд);
			Если (ТипЗнч(ТабличнаяЧасть)=Тип("ТаблицаЗначений") И ТабличнаяЧасть.Колонки.Найти(ИмяРазреза)=Неопределено) ИЛИ ПолныйСписокРазрезов.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ИмяРазреза))=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеТиповРазреза 		= ТипЗначенияДляВвода(ИмяРазреза,,ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре);
			СтрокаОборотов[ИмяРазреза] 	= ОписаниеТиповРазреза.ПривестиЗначение(СтрокаОборотов[ИмяРазреза]);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ТипЗначенияДляВвода(ВидГруппировки,ФинансовыйПоказатель=Неопределено,ДетализацияПланирования,ВестиУчетПоПлановойНоменклатуре)
	Если ВидГруппировки = "УправленческоеПодразделение"	Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповУправленческоеПодразделение();	
	ИначеЕсли ВидГруппировки = "Проект" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов());	
	ИначеЕсли ВидГруппировки = "Контрагент" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Контрагенты");	
	ИначеЕсли ВидГруппировки = "ВалютаОперации" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.Валюты");	
	ИначеЕсли ВидГруппировки = "Номенклатура" Тогда
		Если ДетализацияПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
		ИначеЕсли НЕ ВестиУчетПоПлановойНоменклатуре Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		Иначе
			НоменклатурныйПеречень = ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень;
			Если НоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура") Тогда
				Возврат Новый ОписаниеТипов("СправочникСсылка.фин_ПлановаяНоменклатура");
			ИначеЕсли НоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
				Возврат Новый ОписаниеТипов(МассивТипов);
			Иначе
				Возврат Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ВидГруппировки,"Разрез")<>0 Тогда
		Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(Перечисления.фин_ФактическиеПоказателиБюджетирования[ВидГруппировки]);	
	КонецЕсли;
КонецФункции

Функция ТребуетсяРасчетМоделей(Бюджет,Версии,Сценарий,ПериодПланирования,Организация)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация",		Организация);
	Запрос.Параметры.Вставить("ПериодПланирования",	ПериодПланирования);
	Запрос.Параметры.Вставить("Сценарий",			Сценарий);
	Запрос.Параметры.Вставить("Бюджет",				Бюджет);
	Запрос.Параметры.Вставить("Версии",				Версии);
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции,
			|	фин_РасчетПроизводственныхМоделейСрезПоследних.Модель
			|ИЗ
			|	РегистрСведений.фин_РасчетПроизводственныхМоделей.СрезПоследних(
			|			&ПериодПланирования,
			|			Сценарий = &Сценарий
			|				ИЛИ Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)) КАК фин_РасчетПроизводственныхМоделейСрезПоследних
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|		ПО (фин_СтатьиБюджета.Версия В (&Версии))
			|			И (фин_СтатьиБюджета.Владелец = &Бюджет)
			|			И (фин_РасчетПроизводственныхМоделейСрезПоследних.ПоказательПланированияПроизводстваПродукции = фин_СтатьиБюджета.ФинансовыйПоказатель)
			|ГДЕ
			|	фин_РасчетПроизводственныхМоделейСрезПоследних.ПрименятьМодель
			|
			|;
			|ВЫБРАТЬ
			|	фин_РасчетМоделейРаспределения.РаспределяемыйПоказатель,
			|	фин_РасчетМоделейРаспределения.Модель КАК Модель,
			|	ОтражениеРезультатов.ФинансовыйПоказатель,
			|	ОтражениеРезультатов.УправленческоеПодразделение,
			|	ОтражениеРезультатов.Проект,
			|	ОтражениеРезультатов.Контрагент,
			|	ОтражениеРезультатов.Номенклатура,
			|	ОтражениеРезультатов.Разрез1,
			|	ОтражениеРезультатов.Разрез2,
			|	ОтражениеРезультатов.Разрез3,
			|	ОтражениеРезультатов.Разрез4,
			|	ОтражениеРезультатов.Разрез5,
			|	ОтражениеРезультатов.Разрез6,
			|	ОтражениеРезультатов.Разрез7,
			|	ОтражениеРезультатов.Разрез8,
			|	ОтражениеРезультатов.Разрез9,
			|	ОтражениеРезультатов.Разрез10
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_МоделиРаспределенияБюджетныхДанных.ОтражениеРезультатов КАК ОтражениеРезультатов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_РасчетМоделейРаспределения.СрезПоследних(
			|					&ПериодПланирования,
			|					Сценарий = &Сценарий
			|						ИЛИ Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)) КАК фин_РасчетМоделейРаспределения
			|			ПО (фин_РасчетМоделейРаспределения.Модель = ОтражениеРезультатов.Ссылка)
			|		ПО (фин_СтатьиБюджета.Версия В (&Версии))
			|			И (фин_СтатьиБюджета.Владелец = &Бюджет)
			|			И (ОтражениеРезультатов.ФинансовыйПоказатель = фин_СтатьиБюджета.ФинансовыйПоказатель)
			|ГДЕ
			|	фин_РасчетМоделейРаспределения.ПрименятьМодель
			|;
			|ВЫБРАТЬ
			|	фин_РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель
			|ИЗ
			|	РегистрСведений.фин_РегламентныеРасчетыПоМоделям.СрезПоследних(
			|			,
			|			(Организация = &Организация
			|				ИЛИ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) И (Сценарий = &Сценарий
			|				ИЛИ Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)) И НачалоИспользования<=&ПериодПланирования  И КонецИспользования>=&ПериодПланирования) КАК фин_РегламентныеРасчетыПоМоделям
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
			|		ПО (фин_СтатьиБюджета.Версия В (&Версии))
			|			И (фин_СтатьиБюджета.Владелец = &Бюджет)
			|			И (фин_РегламентныеРасчетыПоМоделям.ФинансовыйПоказатель = фин_СтатьиБюджета.ФинансовыйПоказатель)
			|
			|";
	Результат = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("ПроизводственныеМодели,МоделиРаспределения,МоделиРасчета",НЕ Результат[0].Пустой(),НЕ Результат[1].Пустой(),НЕ Результат[2].Пустой());
	
КонецФункции

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамВЦеляхРасчета(Объект,НаборДвиженийОбороты,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,Отказ)
	
	СтруктураДанныхШапки = СформироватьСтруктуруДанныхШапки(Объект);
	
	Организация	= Объект.Организация;
	Сценарий 	= Объект.Сценарий;
	
	ТабОборотовДокумента = СформироватьЗапросПоДаннымДокумента(Объект,СтруктураДанныхШапки,УчетнаяПолитикаБюджетирование);

	// По регистру "ОборотыБюджетов"
	Если БюджетированиеПоОрганизациям Тогда
		Если ТабОборотовДокумента.Колонки.Найти("Организация")=Неопределено Тогда
			ТабОборотовДокумента.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КонецЕсли;
		ТабОборотовДокумента.ЗаполнитьЗначения(Организация,"Организация");
	КонецЕсли;
	
	НаборДвиженийОбороты.Загрузить(ТабОборотовДокумента);
	НаборДвиженийОбороты.Записать();
КонецПроцедуры //ДвиженияПоРегистрамВЦеляхРасчета

// производит расчет
//
Процедура ВыполнитьРасчетныйЦикл(Объект,УчетнаяПолитикаБюджетирование,НаборДвиженийОбороты,ВыборкаПоРасчетам,БюджетированиеПоОрганизациям,ПродолжительностьЦикла,ПереченьБюджетныхОпераций,ТаблицаВыполненныхРасчетов,Отказ,СтруктураОтладка=Неопределено,РежимОстанова=Неопределено,ПриоритетОстанова=0,ЦиклОстанова=0)
	ПериодПланирования 	= Объект.ПериодПланирования;
	Ссылка 				= Объект.Ссылка;
	РасчетыПоМоделям 	= Объект.РасчетыПоМоделям;
	Организация 		= Объект.Организация;
	Сценарий 			= Объект.Сценарий;
	
	НомерРасчета = 1;
	Пока ВыборкаПоРасчетам.Следующий() Цикл
		Если РежимОстанова="До" Тогда
			Если ВыборкаПоРасчетам.Расчет.ПриоритетРасчетаМодели > ПриоритетОстанова И ПриоритетОстанова<>0 Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли РежимОстанова="После" Тогда
			Если ВыборкаПоРасчетам.Расчет.ПриоритетРасчетаМодели < ПриоритетОстанова И ПриоритетОстанова<>0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// подгружаем результаты в табличную часть
		РасчетыПоМоделям.Очистить();
		РасчетыПоМоделям.Загрузить(ПереченьБюджетныхОпераций);
		// отправляем результат в движения
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Фиксация промежуточных результатов расчета...");
//!!!			Записать(РежимЗаписиДокумента.Запись);
		ДвиженияПоРегистрамВЦеляхРасчета(Объект,НаборДвиженийОбороты,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,Отказ);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// рассчитываем
		Расчет = ВыборкаПоРасчетам.Расчет;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет модели :"+ВыборкаПоРасчетам.Расчет.НаименованиеМодели);
		СписокСтатейКРасчету = Новый СписокЗначений;
		Выборка = ВыборкаПоРасчетам.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСтатейКРасчету.Добавить(Выборка.ФинансовыйПоказатель);
		КонецЦикла;
		ОбъектРасчета = Обработки.фин_РасчетПоМоделиБюджетирования.Создать();
		ОбъектРасчета.ТаблицаВыполненныхРасчетов 	= ТаблицаВыполненныхРасчетов;
		ОбъектРасчета.ПериодПланированияДокумента 	= ПериодПланирования;
		ОбъектРасчета.ДокументРасчета 				= Ссылка;
		ЗаполнитьЗначенияСвойств(ОбъектРасчета,Расчет);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(Расчет.Показатели,						ОбъектРасчета.Показатели);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(Расчет.ДополнительныеИсточникиДанных,	ОбъектРасчета.ДополнительныеИсточникиДанных);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(Расчет.ОборотыПоСтатьямБюджетов,			ОбъектРасчета.ОборотыПоСтатьямБюджетов);
		
		НачалоРасчетов 		= Расчет.НачалоИспользования;
		КонецРасчетов  		= Расчет.КонецИспользования;
		ПервыйЦикл 			= Истина;
		ВыполнятьРасчет		= Истина;
		КоличествоЦиклов	= 0;
		КоличествоСуществовавшихСтрок 	= ПереченьБюджетныхОпераций.Количество();
		ТаблицаНовыхСтрокРасчета 		= ПереченьБюджетныхОпераций.СкопироватьКолонки();
		СтруктураМодели = ?(СтруктураОтладка=Неопределено,Неопределено,Новый Структура);
		Пока ВыполнятьРасчет Цикл
			Если Расчет.ЦиклическийРасчет Тогда
				КоличествоЦиклов = КоличествоЦиклов + 1;
				Если РежимОстанова<>Неопределено И Расчет.ПриоритетРасчетаМодели = ПриоритетОстанова Тогда
					Если РежимОстанова="До" Тогда
						Если ЦиклОстанова <>0 И КоличествоЦиклов > ЦиклОстанова Тогда
							Прервать;
						КонецЕсли;
					ИначеЕсли РежимОстанова="После" Тогда
						Если ЦиклОстанова <>0 И КоличествоЦиклов < ЦиклОстанова Тогда
							Продолжить;
						ИначеЕсли ЦиклОстанова >1 И КоличествоЦиклов = ЦиклОстанова Тогда
							КоличествоСуществовавшихСтрок = ПереченьБюджетныхОпераций.Количество() - ПереченьБюджетныхОпераций.НайтиСтроки(Новый Структура("ПриоритетМодели,РасчетныйЦикл",ПриоритетОстанова,ЦиклОстанова-1)).Количество();
						КонецЕсли;
					КонецЕсли;
					Если ЦиклОстанова > 1 Тогда
						ПервыйЦикл = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ((НЕ ПервыйЦикл) И КоличествоСуществовавшихСтрок = ПереченьБюджетныхОпераций.Количество()) ИЛИ (Расчет.ВложенностьЦикла<>0 И Расчет.ВложенностьЦикла<КоличествоЦиклов) Тогда
					Прервать;
				ИначеЕсли НЕ ПервыйЦикл Тогда
					ТаблицаНовыхСтрокРасчета.Очистить();
					Для Инд = КоличествоСуществовавшихСтрок По ПереченьБюджетныхОпераций.Количество()-1 Цикл
						НоваяСтрокаДополнительная = ТаблицаНовыхСтрокРасчета.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительная,ПереченьБюджетныхОпераций[Инд]);
					КонецЦикла;
					Для Инд = 0 По КоличествоСуществовавшихСтрок-1 Цикл
						Если ПереченьБюджетныхОпераций[Инд].ФинансовыйПоказатель.ДляПромежуточныхРасчетов Тогда
							НоваяСтрокаДополнительная = ТаблицаНовыхСтрокРасчета.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительная,ПереченьБюджетныхОпераций[Инд]);
						КонецЕсли;
					КонецЦикла;
					// подгружаем результаты в табличную часть
					РасчетыПоМоделям.Очистить();
					РасчетыПоМоделям.Загрузить(ТаблицаНовыхСтрокРасчета);
					// отправляем результат в движения
//!!!				Записать(РежимЗаписиДокумента.Запись);
					ДвиженияПоРегистрамВЦеляхРасчета(Объект,НаборДвиженийОбороты,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,Отказ);
					Если Отказ Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен! "+ОписаниеОшибки());
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				КоличествоСуществовавшихСтрок = ПереченьБюджетныхОпераций.Количество();
			Иначе
				ВыполнятьРасчет = Ложь;	
			КонецЕсли;
			Если Расчет.ЦиклическийРасчет Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется расчетный цикл № "+Строка(КоличествоЦиклов));
				СтруктураРасчета = Новый Структура("Наименование","Цикл №"+Строка(КоличествоЦиклов));
				СтруктураРасчета.Вставить("Движения",Новый Структура("ДвиженияОбороты",НаборДвиженийОбороты.Выгрузить()));
			Иначе
				СтруктураРасчета = СтруктураМодели;
			КонецЕсли;
			Если Расчет.РасчетДляКаждогоПериода И ПродолжительностьЦикла >1 Тогда
				Для Инд=1 По ПродолжительностьЦикла Цикл
					Периодичность=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
					Если Периодичность = Перечисления.фин_Периодичность.Год Тогда
						ФорматПериод = "ДФ = ""гггг """"г.""""""";
					ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Квартал Тогда
						ФорматПериод = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
					ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Месяц Тогда
						ФорматПериод = "ДФ = ""ММММ гггг """"г.""""""";
					ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
						ФорматПериод = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
					КонецЕсли;
					НовПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ПериодПланирования,Периодичность,Инд-1);	
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется расчет периода "+фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(НовПериод,Сценарий));
					Если НовПериод >= НачалоРасчетов  И (НовПериод <=КонецРасчетов ИЛИ НовПериод='00010101') Тогда
						ОбъектРасчета.ДатаРасчета = НовПериод;
						ОбъектРасчета.ГраницаПериодаРасчета = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НовПериод,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
						ОбъектРасчета.РасчетыПоМоделям = РасчетыПоМоделям;
						ОбъектРасчета.СценарийКонтекстаРасчета = Сценарий;
						ОбъектРасчета.РассчитываемыеСтатьи = СписокСтатейКРасчету;
						Если Расчет.РекурсивнаяМодель Тогда
							// подгружаем результаты в табличную часть
							РасчетыПоМоделям.Очистить();
							РасчетыПоМоделям.Загрузить(ПереченьБюджетныхОпераций);
							// отправляем результат в движения
//!!!						Записать(РежимЗаписиДокумента.Запись);
							ДвиженияПоРегистрамВЦеляхРасчета(Объект,НаборДвиженийОбороты,УчетнаяПолитикаБюджетирование,БюджетированиеПоОрганизациям,Отказ);
							Если Отказ Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет не выполнен!");
								Возврат;
							КонецЕсли;
						КонецЕсли;
						Попытка
							Если СтруктураРасчета <>Неопределено Тогда
								СтруктураТаблицы = Новый Структура;
							Иначе
								СтруктураТаблицы = Неопределено;
							КонецЕсли;
							ОбъектРасчета.ВыполнитьРасчет(СтруктураТаблицы);
							Если СтруктураТаблицы <>Неопределено Тогда
								СтруктураДанные =  Новый Структура("Наименование,Данные",Строка(НовПериод),СтруктураТаблицы);
								Если Расчет.РекурсивнаяМодель Тогда
									СтруктураДанные.Вставить("Движения",Новый Структура("ДвиженияОбороты",НаборДвиженийОбороты.Выгрузить()));
								КонецЕсли;
							СтруктураРасчета.Вставить("Период"+Строка(Инд),СтруктураДанные);
							КонецЕсли;
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При выполнении расчета по модели """+ВыборкаПоРасчетам.Расчет+""" возникла ошибка: "+ОписаниеОшибки());
							Отказ = Истина;
							Возврат;
						КонецПопытки;
						Для Каждого СтрокаРасчет из РасчетыПоМоделям Цикл
							НоваяСтрока = ПереченьБюджетныхОпераций.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРасчет);
							НоваяСтрока.РасчетныйЦикл = КоличествоЦиклов;
							НоваяСтрока.ПриоритетМодели = Расчет.ПриоритетРасчетаМодели;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ПериодПланирования < НачалоРасчетов Тогда
					ОбъектРасчета.ДатаРасчета = НачалоРасчетов;
				Иначе
					ОбъектРасчета.ДатаРасчета = ПериодПланирования;
				КонецЕсли;
				ОбъектРасчета.ГраницаПериодаРасчета = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий);
				Если ОбъектРасчета.ГраницаПериодаРасчета > КонецРасчетов Тогда
					ОбъектРасчета.ГраницаПериодаРасчета = КонецРасчетов;
				КонецЕсли;
				ОбъектРасчета.Организация 				= Организация;
				ОбъектРасчета.РасчетыПоМоделям 			= РасчетыПоМоделям;
				ОбъектРасчета.СценарийКонтекстаРасчета 	= Сценарий;
				ОбъектРасчета.РассчитываемыеСтатьи 		= СписокСтатейКРасчету;
				Попытка
					Если СтруктураРасчета <>Неопределено Тогда
						СтруктураТаблицы = Новый Структура;
					Иначе
						СтруктураТаблицы = Неопределено;
					КонецЕсли;
					ОбъектРасчета.ВыполнитьРасчет(СтруктураТаблицы);
					Если СтруктураТаблицы <>Неопределено Тогда
						СтруктураРасчета.Вставить("Данные",СтруктураТаблицы);
					КонецЕсли;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При выполнении расчета по модели """+ВыборкаПоРасчетам.Расчет.НаименованиеМодели+""" возникла ошибка: "+ОписаниеОшибки());
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				Для Каждого СтрокаРасчет из РасчетыПоМоделям Цикл
					НоваяСтрока = ПереченьБюджетныхОпераций.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРасчет);
					НоваяСтрока.РасчетныйЦикл 	= КоличествоЦиклов;
					НоваяСтрока.ПриоритетМодели = Расчет.ПриоритетРасчетаМодели;
				КонецЦикла;
			КонецЕсли;
			Если СтруктураОтладка<>Неопределено Тогда
				Если Расчет.ЦиклическийРасчет Тогда
					СтруктураМодели.Вставить("Расчет"+Строка(КоличествоЦиклов),Новый Структура("Наименование,Данные","Цикл №"+Строка(КоличествоЦиклов),СтруктураРасчета));
				Иначе
					СтруктураМодели = СтруктураРасчета;
				КонецЕсли;
			КонецЕсли;
			ПервыйЦикл = Ложь;
		КонецЦикла;
		Если СтруктураОтладка<>Неопределено Тогда
			СтруктураОтладка.Вставить("Расчет"+Строка(НомерРасчета),Новый Структура("Наименование,Данные",ВыборкаПоРасчетам.Расчет.НаименованиеМодели,СтруктураМодели));
			НомерРасчета = НомерРасчета +1;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Закончен расчет модели :"+ВыборкаПоРасчетам.Расчет.НаименованиеМодели);
	КонецЦикла;
КонецПроцедуры //ВыполнитьРасчетныйЦикл


#КонецЕсли
