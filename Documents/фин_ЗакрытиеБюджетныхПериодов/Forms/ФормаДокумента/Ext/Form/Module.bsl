
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_ЗакрытиеБюджетныхПериодов", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГраницаФиксацииПриИзменении(Элемент)
	ГраницаФиксацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГраницаФиксацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ГраницаФиксацииРегулированиеНаСервере(Направление, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеПриИзменении(Элемент)
	ПроверкаДатыФиксации();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроверкаДатыФиксации();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			
			Объект.ГраницаФиксации = ТекущаяДата();
			
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
				Объект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ОсновнойСценарий 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
			Объект.Сценарий = ОсновнойСценарий;
		КонецЕсли;
		
	КонецЕсли;
	
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	ПредставлениеПериода 			= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(Объект.ГраницаФиксации,Объект.Сценарий);
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	оф_ФиксируемыеДанные = "Фиксируемые данные";
	оф_ФильтрПоИзмерениямДанных = "Фильтр по измерениям данных";
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Организация.Видимость	= Форма.БюджетированиеПоОрганизациям;
	Элементы.Проект.Видимость 		= Форма.ВестиУчетПоПроектам;
	
КонецПроцедуры

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	Объект.ГраницаФиксации	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Объект.ГраницаФиксации,Объект.Сценарий);
	ПроверкаДатыФиксации();
КонецПроцедуры

// Выполняет проверку на соответствие установленной даты фиксации
// максимальной дате фиксации бюджетов по выбранной комбинации измерений.
// В случае, когда дата фиксации меньше установленной, она становится равной
// дате начала следующего периода.
// Параметры: нет
//
&НаСервере
Процедура ПроверкаДатыФиксации()
	Если Объект.Сценарий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Запрос=Новый Запрос;
	ТекстЗапроса="
	|ВЫБРАТЬ
	|	МАКСИМУМ(ГраницыПериодовБюджетирования.ГраницаФиксации) КАК ТекущаяГраницаФиксации
	|ИЗ
	|	РегистрСведений.фин_ГраницыПериодовБюджетирования КАК ГраницыПериодовБюджетирования
	|
	|ГДЕ
	|	(ГраницыПериодовБюджетирования.Сценарий = &Сценарий) И
	|	(ГраницыПериодовБюджетирования.УправленческоеПодразделение = &УправленческоеПодразделение ИЛИ ГраницыПериодовБюджетирования.УправленческоеПодразделение = &ПустойЦФО) И
	|	(ГраницыПериодовБюджетирования.Проект = &Проект ИЛИ ГраницыПериодовБюджетирования.Проект = &ПустойПроект)"+?(БюджетированиеПоОрганизациям,"
	|	И (ГраницыПериодовБюджетирования.Организация = &Организация)","");
	Запрос.Текст=ТекстЗапроса;
    Запрос.УстановитьПараметр("Организация",Объект.Организация);
   	Запрос.УстановитьПараметр("УправленческоеПодразделение",Объект.УправленческоеПодразделение);
    Запрос.УстановитьПараметр("ПустойЦФО",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений()));
	Запрос.УстановитьПараметр("Проект",Объект.Проект);
    Запрос.УстановитьПараметр("ПустойПроект",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов()));	
	Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() И (НЕ Результат.ТекущаяГраницаФиксации=NULL) И Результат.ТекущаяГраницаФиксации> Объект.ГраницаФиксации Тогда
		 Объект.ГраницаФиксации=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Результат.ТекущаяГраницаФиксации,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий),1);
	КонецЕсли;
		
КонецПроцедуры //ПроверкаДатыФиксации

&НаСервере
Процедура ГраницаФиксацииПриИзмененииНаСервере()
	Объект.ГраницаФиксации=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ГраницаФиксации,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));	
	ПроверкаДатыФиксации();
	ПредставлениеПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(Объект.ГраницаФиксации,Объект.Сценарий);

КонецПроцедуры

&НаСервере
Процедура ГраницаФиксацииРегулированиеНаСервере(Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Объект.ГраницаФиксации = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ГраницаФиксации,Объект.Сценарий,?(Направление >0,Истина,Ложь));
	ПроверкаДатыФиксации();
	ПредставлениеПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеПериодаСтрокой(Объект.ГраницаФиксации,Объект.Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;
КонецПроцедуры
