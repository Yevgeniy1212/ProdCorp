////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОтображатьСтруктурныеПодразделения Экспорт; 
 
//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
//

#Если Клиент Тогда

// Функция вызывает форму печати табличного документа с печатной формой
// инвентаризационной описи основных средств.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьИНВ1() Экспорт
	
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Лицо(а), ответственное(ые) за сохранность основных средств:");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("СекретарьКомиссии", "Секретарь комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	ЗаголовокРазделаКомиссии.Вставить("Проверяющий",          "Указанные в настоящей описи данные и расчеты проверил");
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|   ИнвентаризацияОС.СтруктурноеПодразделение,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации     КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид   КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель,
	|		Секретарь КАК Секретарь
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияНМА КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	// запрос для заполнениятабличной части
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("Дата",        Док.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.НМА КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.НМА.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредствоНаименованиеПолное,
	|	"""" КАК ДатаВыпуска,
	|	"""" КАК ЗаводскойНомер,
	|	ИнвентаризацияОСОС.НМА.Код КАК ИнвентарныйНомер,
	|	"""" КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое
	|ИЗ
	|	Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							ИнвентаризацияОСОС.НМА
	|						ИЗ
	|							Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|						ГДЕ
	|							ИнвентаризацияОСОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ИнвентаризацияОСОС.НМА = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							ИнвентаризацияОСОС.НМА
	|						ИЗ
	|							Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|						ГДЕ
	|							ИнвентаризацияОСОС.Ссылка = &Ссылка)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|		ПО ИнвентаризацияОСОС.НМА = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетаУчета = ТаблицаОС.Скопировать();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	Макет = ПолучитьМакет("ИНВ1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ПодписьМОЛ       = Макет.ПолучитьОбласть("ПодписьМОЛ");
	Приказ           = Макет.ПолучитьОбласть("Приказ");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогиПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");	
	Итоги   		 = Макет.ПолучитьОбласть("Итоги");
	Комиссия         = Макет.ПолучитьОбласть("Комиссия");	
	Подвал           = Макет.ПолучитьОбласть("Подвал");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ1";

	//////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН    = СведенияОбОрганизации.РНН;
	Шапка.Параметры.Подразделение     = Док.ПодразделениеПредставление;
	
	Шапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок  = Формат(Док.Дата, "ДФ=dd.MM.yyyy") ;
	
	ТабДокумент.Вывести(Шапка);
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("НМА", СписокОС);
	//Запрос.УстановитьПараметр("Организация",      Док.Организация);
	//Запрос.УстановитьПараметр("Дата",             Док.Дата);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ  РАЗЛИЧНЫЕ
	//|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	//|ИЗ
	//|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
	//
	//// Выведем подписи МОЛов
	//ВыводитьПодпись = Истина;
	//ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.Дата);
	//Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
	//	
	//	
	//	ПодписьМОЛ.Параметры.МОЛ = ?(ВыводитьПодпись, "Материально-ответственное(ые) лицо(а):", "");
		ВыводитьПодпись = Ложь;
	//				
	//	ПодписьМОЛ.Параметры.Должность          = СтрокаМОЛ.Должность;
	//	ПодписьМОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
	//	
		ТабДокумент.Вывести(ПодписьМОЛ);
		
	//КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х подписей)
	//Если ДанныеМОЛ.Количество() < 3 Тогда
		
		Для Итератор = 1 По 3 Цикл
			ПодписьМОЛ.Параметры.МОЛ = ?(ВыводитьПодпись, "Материально-ответственное(ые) лицо(а):", "");
			ПодписьМОЛ.Параметры.Должность          = "";
			ПодписьМОЛ.Параметры.РасшифровкаПодписи = "";
			ТабДокумент.Вывести(ПодписьМОЛ);
		КонецЦикла;
	
	//КонецЕсли;
	
	// выведем  данные приказа об инвентаризации
	Приказ.Параметры.Заполнить(Док);
	Приказ.Параметры.ДокументОснованиеДата       = Формат(Док.ДокументОснованиеДата,"ДЛФ=DD");
 	Приказ.Параметры.ДатаНачалаИнвентаризации    = Формат(Док.ДатаНачалаИнвентаризации,"ДЛФ=DD");
	Приказ.Параметры.ДатаОкончанияИнвентаризации = Формат(Док.ДатаОкончанияИнвентаризации,"ДЛФ=DD");
	Приказ.Параметры.ДатаДок=Формат(Док.Дата,"ДЛФ=DD");
	
	БалансовыеСчета = "";
	ТаблицаСчетаУчета.Свернуть("СчетУчетаБУ");
	
	Для Каждого СтрокаСчет Из ТаблицаСчетаУчета Цикл
		Если БалансовыеСчета = "" Тогда
			БалансовыеСчета = Строка(СтрокаСчет.СчетУчетаБУ);
		Иначе
			БалансовыеСчета = БалансовыеСчета + ", " + Строка(СтрокаСчет.СчетУчетаБУ);
		КонецЕсли;	
	КонецЦикла;
	Приказ.Параметры.БалансовыеСчета = ?(ЗначениеЗаполнено(БалансовыеСчета), БалансовыеСчета, "_______________");
	
	ТабДокумент.Вывести(Приказ);
	
	// Выведем заголовок таблицы	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ЗаголовокТаблицы) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;	
	ТабДокумент.Вывести(ЗаголовокТаблицы);	
		
	
	ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
	
	НаличиеФактическоеПоСтранице     = 0;
	СтоимостьФактическаяПоСтранице   = 0;
	НаличиеПоДаннымУчетаПоСтранице   = 0;
	СтоимостьПоДаннымУчетаПоСтранице = 0;
	
	
	// Выведем строки таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаТаблицы   = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		// Присвоим имена с номерами строк областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое" + СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая" + СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета" + СтрокаОС.НомерСтроки;
		//СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета" + СтрокаОС.НомерСтроки;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ИтогиПоСтранице);
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
			//ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
			
			// Выведем заголовок итогов по странице
			ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
			
			ТабДокумент.Вывести(ИтогиПоСтранице);
			
			// Добавим значения итогов по странице в таблицу итогов.
			// Они потребуются при включении видимости значений ячеек.
			НоваяСтрока = ТаблицаИтогов.Добавить();
			НоваяСтрока.ПорядковыйНомерИтогов       = ПорядковыйНомерИтогов;
			НоваяСтрока.ИтогНаличиеФактическое      = НаличиеФактическоеПоСтранице;
			НоваяСтрока.ИтогСтоимостьФактическая    = СтоимостьФактическаяПоСтранице;
			НоваяСтрока.ИтогНаличиеПоДаннымУчета    = НаличиеПоДаннымУчетаПоСтранице;
			НоваяСтрока.ИтогСтоимостьПоДаннымУчета  = СтоимостьПоДаннымУчетаПоСтранице;
			
			ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
			НаличиеФактическоеПоСтранице     = 0;
			СтоимостьФактическаяПоСтранице   = 0;
			НаличиеПоДаннымУчетаПоСтранице   = 0;
			СтоимостьПоДаннымУчетаПоСтранице = 0;
			
		КонецЕсли;
		
		НаличиеФактическое   = 0;
		НаличиеПоДаннымУчета = 0;
		
		СтрокаТаблицы.Параметры.НомерСтроки 					   = СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное = СтрокаОС.ОсновноеСредство.НаименованиеПолное;
		//СтрокаТаблицы.Параметры.ГодВыпуска						   = """";
		//СтрокаТаблицы.Параметры.ЗаводскойНомер					   = "";
		//СтрокаТаблицы.Параметры.НомерПаспорта					   = "";
		СтрокаТаблицы.Параметры.БалансовыйСчет 					   = СтрокаОС.СчетУчетаБУ;
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПриобретения  = '00010101';
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.Поступило, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);
		
		Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);	
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения;
		
		НужнаяСтрока = ТаблицаОС.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		//Если НужнаяСтрока = Неопределено Тогда
		//	СтрокаТаблицы.Параметры.ИнвентарныйНомер = "";
		//Иначе
		//	СтрокаТаблицы.Параметры.ИнвентарныйНомер = НужнаяСтрока.ИнвентарныйНомер;
		//КонецЕсли;
		
		Если СтрокаОС.НаличиеФактическое  Тогда
			НаличиеФактическое=1;
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.НаличиеФактическое	 = НаличиеФактическое;
		СтрокаТаблицы.Параметры.СтоимостьФактическая = СтрокаОС.СтоимостьФактическая;
		
		Если  СтрокаОС.НаличиеПоДаннымУчета  Тогда
			НаличиеПоДаннымУчета=1;
		КонецЕсли;
		СтрокаТаблицы.Параметры.НаличиеПоДаннымУчета   = НаличиеПоДаннымУчета;
		СтрокаТаблицы.Параметры.СтоимостьПоДаннымУчета = СтрокаОС.СтоимостьПоДаннымУчета;
		
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
		НаличиеФактическоеПоСтранице     = НаличиеФактическоеПоСтранице   + НаличиеФактическое;
		СтоимостьФактическаяПоСтранице   = СтоимостьФактическаяПоСтранице + СтрокаОС.СтоимостьФактическая;
		НаличиеПоДаннымУчетаПоСтранице   = НаличиеПоДаннымУчетаПоСтранице + НаличиеПоДаннымУчета;
		СтоимостьПоДаннымУчетаПоСтранице = СтоимостьПоДаннымУчетаПоСтранице + СтрокаОС.СтоимостьПоДаннымУчета;
		
	КонецЦикла;		
	
	ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	
	// Присвоим имена с порядковыми номерами итогов областям таблицы.
	// Номера потребуются для включения/отключения видимости значений в ячейках.
	ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
	ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
	ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
	//ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
	
	// Выведем заголовок итогов по странице
	ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
	
	ТабДокумент.Вывести(ИтогиПоСтранице);
	
	// Добавим значения итогов по странице в таблицу итогов.
	// Они потребуются при включении видимости значений ячеек.
	НоваяСтрока = ТаблицаИтогов.Добавить();
	НоваяСтрока.ПорядковыйНомерИтогов      = ПорядковыйНомерИтогов;
	НоваяСтрока.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
	НоваяСтрока.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
	НоваяСтрока.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
	НоваяСтрока.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
	
	ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
	
	// Выведем разрыв страницы
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Итоги = Макет.ПолучитьОбласть("Итоги");	
	
	// Присвоим имена с порядковыми номерами итогов областям таблицы.
	// Номера потребуются для включения/отключения видимости значений в ячейках.
	
	// Выведем итоговые строки
	Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(ТаблицаОС.Количество(),, ",,,м,,,,,0");
	Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(ТаблицаОС.Итог("НаличиеФактическое"),,",,,м,,,,,0");
	
	Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначения.СформироватьСуммуПрописью(ТаблицаОС.Итог("СтоимостьФактическая"), Константы.ВалютаРегламентированногоУчета.Получить());
	Итоги.Параметры.Валюта = Валюта;
	
	ТабДокумент.Вывести(Итоги);
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подпись секретаря инвентаризационной комиссии
	СекретарьКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Секретарь");
	
	Если НЕ (СекретарьКомиссии = Неопределено) Тогда
		
		ДанныеСекретаря = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, СекретарьКомиссии.ФизЛицо, Док.Дата);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.СекретарьКомиссии;
		Комиссия.Параметры.Должность                = ДанныеСекретаря.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеСекретаря.Представление;
		ТабДокумент.Вывести(Комиссия);
	КонецЕсли;
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если (НЕ Строка.Председатель) И (НЕ Строка.Секретарь) Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ1()
Функция ПечатьИНВ8() Экспорт
	
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ",                  "Лицо(а), ответственное(ые) за сохранность основных средств:");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("СекретарьКомиссии", "Секретарь комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	ЗаголовокРазделаКомиссии.Вставить("Проверяющий",          "Указанные в настоящей описи данные и расчеты проверил");
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);  
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|   ИнвентаризацияОС.СтруктурноеПодразделение,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации     КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид   КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ИнвентаризацияОС.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель,
	|		Секретарь КАК Секретарь
	|	) КАК ИнвентаризационнаяКомиссия
	|ИЗ
	|	Документ.ИнвентаризацияНМА КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();   
	
	// запрос для заполнениятабличной части
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.выгрузить();     
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("Дата",        Док.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.НМА КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.НМА.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредствоНаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО КАК ДатаВыпуска,
	|	НЕОПРЕДЕЛЕНО КАК ЗаводскойНомер,
	|	НЕОПРЕДЕЛЕНО КАК ИнвентарныйНомер,
	|	НЕОПРЕДЕЛЕНО КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчетаБУ,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И нематериальныйактив В
	|						(ВЫБРАТЬ
	|							ИнвентаризацияОСОС.НМА
	|						ИЗ
	|							Документ.Инвентаризациянма.нма КАК ИнвентаризацияОСОС
	|						ГДЕ
	|							ИнвентаризацияОСОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ИнвентаризацияОСОС.НМА = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И нематериальныйактив В
	|						(ВЫБРАТЬ
	|							ИнвентаризацияОСОС.НМА
	|						ИЗ
	|							Документ.Инвентаризациянма.нма КАК ИнвентаризацияОСОС
	|						ГДЕ
	|							ИнвентаризацияОСОС.Ссылка = &Ссылка)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|		ПО ИнвентаризацияОСОС.НМА = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетаУчета = ТаблицаОС.Скопировать();
	
	СтруктурнаяЕдиницаОрганизация =Док.Организация;
	
	Макет = ПолучитьМакет("ИНВ8");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ПодписьМОЛ       = Макет.ПолучитьОбласть("ПодписьМОЛ");
	Приказ           = Макет.ПолучитьОбласть("Приказ");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогиПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");	
	Итоги   		 = Макет.ПолучитьОбласть("Итоги");
	Комиссия         = Макет.ПолучитьОбласть("Комиссия");	
	Подвал           = Макет.ПолучитьОбласть("Подвал");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");	
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ8";

	//////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,");
	Шапка.Параметры.Подразделение     		 = Док.ПодразделениеПредставление;
	
	Шапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок  = Формат(Док.Дата, "ДФ=dd.MM.yyyy") ;
	
	ТабДокумент.Вывести(Шапка);
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("Организация",      Док.Организация);
	Запрос.УстановитьПараметр("Дата",             Док.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ  РАЗЛИЧНЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
	
	// Выведем подписи МОЛов
	ВыводитьПодпись = Истина;
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.Дата);
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		
		
		ПодписьМОЛ.Параметры.МОЛ = ?(ВыводитьПодпись, "Материально-ответственное(ые) лицо(а):", "");
		ВыводитьПодпись = Ложь;
					
		ПодписьМОЛ.Параметры.Должность          = СтрокаМОЛ.Должность;
		ПодписьМОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(ПодписьМОЛ);
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х подписей)
	Если ДанныеМОЛ.Количество() < 3 Тогда
		
		Для Итератор = (ДанныеМОЛ.Количество() + 1) По 3 Цикл
			ПодписьМОЛ.Параметры.МОЛ = ?(ВыводитьПодпись, "Материально-ответственное(ые) лицо(а):", "");
			ПодписьМОЛ.Параметры.Должность          = "";
			ПодписьМОЛ.Параметры.РасшифровкаПодписи = "";
			ТабДокумент.Вывести(ПодписьМОЛ);
		КонецЦикла;
	
	КонецЕсли;
	
	// выведем  данные приказа об инвентаризации
	Приказ.Параметры.Заполнить(Док);
	Приказ.Параметры.ДокументОснованиеДата       = Формат(Док.ДокументОснованиеДата,"ДФ=""дд ММММ гггг 'года'""");
 	Приказ.Параметры.ДатаНачалаИнвентаризации    = Формат(Док.ДатаНачалаИнвентаризации,"ДФ=""дд ММММ гггг 'года.'""");
	Приказ.Параметры.ДатаОкончанияИнвентаризации = Формат(Док.ДатаОкончанияИнвентаризации,"ДФ=""дд ММММ гггг 'года.'""");
	Приказ.Параметры.ДатаДок=Формат(Док.Дата,"ДФ=""дд ММММ гггг 'года.'""");
	
	БалансовыеСчета = "";
	ТаблицаСчетаУчета.Свернуть("СчетУчетаБУ");
	
	Для Каждого СтрокаСчет Из ТаблицаСчетаУчета Цикл
		Если БалансовыеСчета = "" Тогда
			БалансовыеСчета = СтрокаСчет.СчетУчетаБУ;
		Иначе
			БалансовыеСчета = ""+ БалансовыеСчета + ", " + СтрокаСчет.СчетУчетаБУ;
		КонецЕсли;	
	КонецЦикла;
	Приказ.Параметры.БалансовыеСчета = ?(ЗначениеЗаполнено(БалансовыеСчета), БалансовыеСчета, "_______________");
	
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	// Выведем заголовок таблицы	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ЗаголовокТаблицы) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;	
	ТабДокумент.Вывести(ЗаголовокТаблицы);	

	ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
	
	НаличиеФактическоеПоСтранице     = 0;
	СтоимостьФактическаяПоСтранице   = 0;
	НаличиеПоДаннымУчетаПоСтранице   = 0;
	СтоимостьПоДаннымУчетаПоСтранице = 0;
	
	
	// Выведем строки таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаТаблицы   = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		// Присвоим имена с номерами строк областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое" + СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая" + СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета" + СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета" + СтрокаОС.НомерСтроки;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ИтогиПоСтранице);
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
			ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
			
			// Выведем заголовок итогов по странице
			ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
			ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
			
			ТабДокумент.Вывести(ИтогиПоСтранице);
			
			// Добавим значения итогов по странице в таблицу итогов.
			// Они потребуются при включении видимости значений ячеек.
			НоваяСтрока = ТаблицаИтогов.Добавить();
			НоваяСтрока.ПорядковыйНомерИтогов       = ПорядковыйНомерИтогов;
			НоваяСтрока.ИтогНаличиеФактическое      = НаличиеФактическоеПоСтранице;
			НоваяСтрока.ИтогСтоимостьФактическая    = СтоимостьФактическаяПоСтранице;
			НоваяСтрока.ИтогНаличиеПоДаннымУчета    = НаличиеПоДаннымУчетаПоСтранице;
			НоваяСтрока.ИтогСтоимостьПоДаннымУчета  = СтоимостьПоДаннымУчетаПоСтранице;
			
			ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
			НаличиеФактическоеПоСтранице     = 0;
			СтоимостьФактическаяПоСтранице   = 0;
			НаличиеПоДаннымУчетаПоСтранице   = 0;
			СтоимостьПоДаннымУчетаПоСтранице = 0;
			
		КонецЕсли;
		
		НаличиеФактическое   = 0;
		НаличиеПоДаннымУчета = 0;
		
		СтрокаТаблицы.Параметры.НомерСтроки 					   = СтрокаОС.НомерСтроки;
		СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное = СтрокаОС.ОсновноеСредство.НаименованиеПолное;
		СтрокаТаблицы.Параметры.ГодВыпуска						   = "";//СтрокаОС.ОсновноеСредство.ДатаВыпуска;
		СтрокаТаблицы.Параметры.ЗаводскойНомер					   = "";//СокрЛП(СтрокаОС.ЗаводскойНомер);
		СтрокаТаблицы.Параметры.НомерПаспорта					   = "";//СтрокаОС.ОсновноеСредство.НомерПаспорта;
         СтрокаТаблицы.Параметры.ИнвентарныйНомер =                СтрокаОС.основноесредство.Код;
		СтрокаТаблицы.Параметры.БалансовыйСчет 					   = СтрокаОС.СчетУчетаБУ;
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПриобретения  = '00010101';
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.Поступило, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);
		
		Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);	
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.ДатаПриобретения = строкаос.период;
		
		НужнаяСтрока = ТаблицаОС.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		Если НужнаяСтрока = Неопределено Тогда
		//	СтрокаТаблицы.Параметры.ИнвентарныйНомер = "";
		Иначе
			//СтрокаТаблицы.Параметры.ИнвентарныйНомер = НужнаяСтрока.ИнвентарныйНомер;
		КонецЕсли;
		
		Если СтрокаОС.НаличиеФактическое  Тогда
			НаличиеФактическое=1;
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.НаличиеФактическое	 = НаличиеФактическое;
		СтрокаТаблицы.Параметры.СтоимостьФактическая = СтрокаОС.СтоимостьФактическая;
		
		Если  СтрокаОС.НаличиеПоДаннымУчета  Тогда
			НаличиеПоДаннымУчета=1;
		КонецЕсли;
		СтрокаТаблицы.Параметры.НаличиеПоДаннымУчета   = НаличиеПоДаннымУчета;
		СтрокаТаблицы.Параметры.СтоимостьПоДаннымУчета = СтрокаОС.СтоимостьПоДаннымУчета;
		
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
		НаличиеФактическоеПоСтранице     = НаличиеФактическоеПоСтранице   + НаличиеФактическое;
		СтоимостьФактическаяПоСтранице   = СтоимостьФактическаяПоСтранице + СтрокаОС.СтоимостьФактическая;
		НаличиеПоДаннымУчетаПоСтранице   = НаличиеПоДаннымУчетаПоСтранице + НаличиеПоДаннымУчета;
		СтоимостьПоДаннымУчетаПоСтранице = СтоимостьПоДаннымУчетаПоСтранице + СтрокаОС.СтоимостьПоДаннымУчета;
		
	КонецЦикла;		
	
	ИтогиПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	
	// Присвоим имена с порядковыми номерами итогов областям таблицы.
	// Номера потребуются для включения/отключения видимости значений в ячейках.
	ИтогиПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
	ИтогиПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
	ИтогиПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
	ИтогиПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
	
	// Выведем заголовок итогов по странице
	ИтогиПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
	ИтогиПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
	
	ТабДокумент.Вывести(ИтогиПоСтранице);
	
	// Добавим значения итогов по странице в таблицу итогов.
	// Они потребуются при включении видимости значений ячеек.
	НоваяСтрока = ТаблицаИтогов.Добавить();
	НоваяСтрока.ПорядковыйНомерИтогов      = ПорядковыйНомерИтогов;
	НоваяСтрока.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
	НоваяСтрока.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
	НоваяСтрока.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
	НоваяСтрока.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
	
	ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
	
	Итоги = Макет.ПолучитьОбласть("Итоги");	
	
	// Присвоим имена с порядковыми номерами итогов областям таблицы.
	// Номера потребуются для включения/отключения видимости значений в ячейках.
	
	// Выведем итоговые строки
	Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(ТаблицаОС.Количество(),, ",,,м,,,,,0");
	Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(ТаблицаОС.Итог("НаличиеФактическое"),,",,,м,,,,,0");
	
	Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначения.СформироватьСуммуПрописью(ТаблицаОС.Итог("СтоимостьФактическая"), Константы.ВалютаРегламентированногоУчета.Получить());
	Итоги.Параметры.Валюта = Валюта;
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Итоги) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабДокумент.Вывести(Итоги);

	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подпись секретаря инвентаризационной комиссии
	СекретарьКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Секретарь");
	
	Если НЕ (СекретарьКомиссии = Неопределено) Тогда
		
		ДанныеСекретаря = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, СекретарьКомиссии.ФизЛицо, Док.Дата);
			
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.СекретарьКомиссии;
		Комиссия.Параметры.Должность                = ДанныеСекретаря.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеСекретаря.Представление;
		ТабДокумент.Вывести(Комиссия);
	КонецЕсли;
		
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если (НЕ Строка.Председатель) И (НЕ Строка.Секретарь)  Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.Дата);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   "");
		Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
		Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(Комиссия);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТабДокумент.Вывести(Подвал);
	
	Возврат ТабДокумент;

КонецФункции // Печать()
// Функция формирует табличный документ с печатной формой сличительной ведомости
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма сличительной ведомости.
//
Функция ПечатьИНВ12() Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|   ИнвентаризацияОС.СтруктурноеПодразделение,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации     КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид   КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ИЗ
	|	Документ.ИнвентаризацияНМА КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка = &Ссылка";
	
    Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      Ссылка);
	Запрос.УстановитьПараметр("Организация", Док.Организация);
	Запрос.УстановитьПараметр("Дата",        Док.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.НМА КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ИнвентаризацияОСОС.НМА.НаименованиеПолное КАК СТРОКА(1000)) КАК ОсновноеСредствоНаименованиеПолное,
	|	"""" КАК ДатаВыпуска,
	|	"""" КАК ЗаводскойНомер,
	|	ИнвентаризацияОСОС.НМА.Код КАК ИнвентарныйНомер,
	|	"""" КАК НомерПаспорта,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое
	|ИЗ
	|	Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		&Дата,
	|		Организация = &Организация
	|		    И НематериальныйАктив В
	|		        (ВЫБРАТЬ
	|		            ИнвентаризацияОСОС.НМА
	|		        ИЗ
	|		            Документ.ИнвентаризацияНМА.НМА КАК ИнвентаризацияОСОС
	|		        ГДЕ
	|		            ИнвентаризацияОСОС.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ИнвентаризацияОСОС.НМА = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Нематериальныйактив
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаОС = Запрос.Выполнить().Выгрузить();     
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	Макет = ПолучитьМакет("ИНВ12");
	
	// Получаем области макета для вывода в табличный документ
	Шапка                     = Макет.ПолучитьОбласть("Шапка");
	СекцияМОЛ                 = Макет.ПолучитьОбласть("СекцияМОЛ");
	СтрокаНадТаблицей         = Макет.ПолучитьОбласть("СтрокаНадТаблицей");
	ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ШапкаПодписейМОЛ          = Макет.ПолучитьОбласть("ШапкаПодписейМОЛ");
	Подпись                   = Макет.ПолучитьОбласть("ПодписьМОЛ");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ12";

	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН           = СведенияОбОрганизации.РНН;
	Шапка.Параметры.ДокументОснованиеДата    = Формат(Док.ДокументОснованиеДата,"ДЛФ=DD");
	
	Шапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок  = Формат(Док.Дата, "ДФ=dd.MM.yyyy") ;
	
	ТабДокумент.Вывести(Шапка);
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	//Запрос.УстановитьПараметр("Организация",      Организация);
	//Запрос.УстановитьПараметр("Дата",             Дата);
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ   РАЗЛИЧНЫЕ
	//|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	//|ИЗ
	//|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
	//
	//// Выведем подписи МОЛов
	//ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Организация, СписокМОЛ, Дата);
	//ВыводитьЗаголовокМОЛ = Истина;
	//
	//// Сначала выведем МОЛов из выборки
	//Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
	//	
	//	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СекцияМОЛ) Тогда
	//		// Выведем разрыв страницы
	//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	КонецЕсли;
	//	
	//	СекцияМОЛ.Параметры.Должность 		   = СтрокаМОЛ.Должность;
	//	СекцияМОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
	//	
	//	СекцияМОЛ.Параметры.ЗаголовокМОЛ = ?(ВыводитьЗаголовокМОЛ, "находящихся на ответственном хранении:", "" );
		ВыводитьЗаголовокМОЛ = Ложь;
		
	//	ТабДокумент.Вывести(СекцияМОЛ);
	//	
	//КонецЦикла;
	
	// Проверим, помещаются ли строка над таблицей, заголовок и первая строка.
	ШапкаТаблицы = Новый Массив;
	ШапкаТаблицы.Добавить(СтрокаНадТаблицей);
	ШапкаТаблицы.Добавить(ЗаголовокТаблицы);
	ШапкаТаблицы.Добавить(СтрокаТаблицы);
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ШапкаТаблицы) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	СтрокаНадТаблицей.Параметры.ДатаНачалаИнвентаризации    = Формат(Док.ДатаНачалаИнвентаризации,"ДЛФ=DD");
	СтрокаНадТаблицей.Параметры.ДатаОкончанияИнвентаризации = Формат(Док.ДатаОкончанияИнвентаризации,"ДЛФ=DD");
	
	// Выведем строку над таблицей
	ТабДокумент.Вывести(СтрокаНадТаблицей);
	
	// Выведем заголовок таблицы
	ЗаголовокТаблицы.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Создадим переменные для накопления итогов по каждой странице
	ИтогИзлишекКоличество   = 0;
	ИтогИзлишекСтоимость    = 0;
	ИтогНедостачаКоличество = 0;
	ИтогНедостачаСтоимость  = 0;
	
	// Выведем строки таблицы
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		Если (ТаблицаОС.Индекс(СтрокаОС) + 1) = ТаблицаОС.Количество() Тогда // если последняя строка, должна
			СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера);             // помещаться и подпись гл.бухгалтера
		КонецЕсли;
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы
			ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
			ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
			ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
			ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
			
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			// Обнулим переменные для накопления итогов по каждой странице
			ИтогИзлишекКоличество   = 0;
			ИтогИзлишекСтоимость    = 0;
			ИтогНедостачаКоличество = 0;
			ИтогНедостачаСтоимость  = 0;
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		РазницаПоНаличию   = СтрокаОС.НаличиеФактическое - СтрокаОС.НаличиеПоДаннымУчета;
		РазницаПоСтоимости = СтрокаОС.СтоимостьФактическая - СтрокаОС.СтоимостьПоДаннымУчета;

		Если (РазницаПоНаличию = 0) И (РазницаПоСтоимости = 0) Тогда
			Продолжить;	
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
		СтрокаТаблицы.Параметры.ГодВыпуска	= СтрокаОС.ОсновноеСредство.ДатаВыпуска;
		
		ДокументПринятияКУчетуБУ = Неопределено;
		ДатаПриобретения  = '00010101';
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.Поступило, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);
		
		Если НЕ ЗначениеЗаполнено(ДатаПриобретения) Тогда
			УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПриобретения);	
		КонецЕсли;	
		
		СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения;
		
		ИзлишекКоличество   = ?(РазницаПоНаличию > 0,   РазницаПоНаличию, 0);
		ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
		НедостачаКоличество = ?(РазницаПоНаличию < 0,  -РазницаПоНаличию, 0);
		НедостачаСтоимость  = ?(РазницаПоСтоимости < 0,-РазницаПоСтоимости, 0);
		
		ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
		ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость  + ИзлишекСтоимость;
		ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
		ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость  + НедостачаСтоимость;
		
		СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
		СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
		СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
		СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
		
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Выведем подвал таблицы
	ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
	ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
	ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
	ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
	
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подпись бухгалтера
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);
	
	// Проверим, помещаются ли шапка подписей и одна подпись
	Подписи = Новый Массив;
	Подписи.Добавить(ШапкаПодписейМОЛ);
	Подписи.Добавить(Подпись);
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Подписи) Тогда
			
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЕсли;
	
	// Выведем шапку подписей МОЛ
	ТабДокумент.Вывести(ШапкаПодписейМОЛ);
	
	// Выведем подписи МОЛов
	ЗаголовокРазделаПодписей = "Материально-ответственное(-ые) лицо(-а):";
	ВыводитьЗаголовок = Истина;
	//
	//// Сначала выведем МОЛов из выборки
	//Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
	//	
	//	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Подпись) Тогда
	//		
	//		// Выведем разрыв страницы
	//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//		ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
	//	
	//	КонецЕсли;
	//	
	//	Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
	//												   ЗаголовокРазделаПодписей,
	//												   "");
	//	Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
	//	Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
	//	
	//	ТабДокумент.Вывести(Подпись);
	//	
	//	ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
	//	
	//КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 2-х
	//Если ДанныеМОЛ.Количество() < 2 Тогда
	//	
	//	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Подпись) Тогда
	//		
	//		// Выведем разрыв страницы
	//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//		ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
	//	
	//	КонецЕсли;
	//	
		Для Итератор = 1 По 2 Цикл
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей,
														   "");
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	//КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьИНВ11()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ИНВ1" тогда
		ТабДокумент = ПечатьИНВ1();
	ИначеЕсли ИмяМакета = "ИНВ8" тогда
		ТабДокумент = ПечатьИНВ8();
	ИначеЕсли ИмяМакета = "ИНВ12" тогда
		ТабДокумент = ПечатьИНВ12();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИНВ1,ИНВ8,ИНВ12","ИНВ-1 (инвентаризационная опись)","ИНВ-8","ИНВ-12 (сличительная ведомость)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();