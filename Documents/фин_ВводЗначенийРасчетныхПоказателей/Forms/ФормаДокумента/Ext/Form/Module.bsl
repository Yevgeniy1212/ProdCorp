&НаСервере
Перем КЭШ_Разрезы;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДополнительныеСценарии);
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);

	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_ВводЗначенийРасчетныхПоказателей", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйПоказательПриИзменении(Элемент)
	РасчетныйПоказательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Если мСценарий=Объект.Сценарий Тогда
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если НЕ мСценарий.Пустая() Тогда
		ОписаниеОбработкаИзмененияСценария = Новый ОписаниеОповещения("ОбработкаИзмененияСценария",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОбработкаИзмененияСценария,"При изменении сценария документ будет очищен. Продолжить?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	СценарийПриИзмененииНаКлиенте();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСценария(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ<> КодВозвратаДиалога.Да Тогда
		Объект.Сценарий=мСценарий;
	Иначе
		СценарийПриИзмененииНаКлиенте();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.ПериодПланирования,ГоризонтПланирования,Объект.Сценарий,Ложь),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗначенияПоказателей


&НаКлиенте
Процедура ЗначенияПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ЗначенияПоказателейПриНачалеРедактированияНаСервере(НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПоказателейНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка=Ложь;
	ПараметрыФормы = Новый Структура;
	Если ПолучитьДетализациюПланирования(Объект.Сценарий)=фин_ОбщегоНазначенияКлиентПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
		Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
			//ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
			ПараметрыФормы.Вставить("Ключ", Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура);
		КонецЕсли;
		ОткрытьФорму("Справочник.НоменклатурныеГруппы.ФормаВыбора",ПараметрыФормы,Элемент);		
	Иначе
		Если ВестиУчетПоПлановойНоменклатуре Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить("Номенклатура","Номенклатура");
			СписокЗначений.Добавить("фин_ПлановаяНоменклатура","Плановая номенклатура");
			ОписаниеОбработкаВыбораСправочника = Новый ОписаниеОповещения("ОбработкаВыбораСправочника",ЭтотОбъект,Новый Структура("ПараметрыФормы,Элемент",ПараметрыФормы,Элемент));
			СписокЗначений.ПоказатьВыборЭлемента(ОписаниеОбработкаВыбораСправочника,"Выберите справочник");
			Возврат;
		Иначе
			ИмяСправочника = "Номенклатура";
		КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура) И ТипЗнч(Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура)=Тип("СправочникСсылка."+ИмяСправочника) Тогда
			ПараметрыФормы.Вставить("Ключ", Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура);
		КонецЕсли;
		ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСправочника(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <>Неопределено Тогда
		ИмяСправочника = Результат.Значение;
	Иначе
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура) И ТипЗнч(Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура)=Тип("СправочникСсылка."+ИмяСправочника) Тогда
		ДополнительныеПараметры.ПараметрыФормы.Вставить("Ключ", Элементы.ЗначенияПоказателей.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ДополнительныеПараметры.ПараметрыФормы,ДополнительныеПараметры.Элемент);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели

		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			Объект.ПериодПланирования=ТекущаяДата();
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования) Тогда
				Объект.ПериодПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
			КонецЕсли;
		КонецЕсли;
		
		Объект.Состояние 		= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		Объект.Автор		 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
		Объект.Ответственный 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
		ОсновнойСценарий 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
		Объект.Сценарий 		= ОсновнойСценарий;
		
	КонецЕсли;
	
	ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	
	// Установка кнопок заполнение ТЧ
	//УстановитьКнопкиПодменюЗаполненияТЧ();
	СпособВыводаПериода();
	мСценарий 		= Объект.Сценарий;
	мПериод 		= Объект.ПериодПланирования;
	мСостояние  	= Объект.Состояние;
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий,Истина);
	// обработка доступности формы на основании данных согласования документов
	КЭШ_Разрезы = Новый Соответствие;
	ЗаполнитьРазрезыБюджета(КЭШ_Разрезы);
	
	// настройка работы с дополнительными разрезами
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ЗначенияПоказателей");
	НастроитьРазрезыБюджета(СтруктураРазрезовБюджета,СписокТЧ);
	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Для Каждого Колонка Из Элементы.ЗначенияПоказателей.ПодчиненныеЭлементы Цикл
		Если Колонка.Имя<>"ЗначенияПоказателейЗначение" Тогда
			Колонка.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Пара Из Форма.СтруктураРазрезовБюджета Цикл
		Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Пара.Значение);
		Элементы.ЗначенияПоказателей.ПодчиненныеЭлементы["ЗначенияПоказателей"+Имя].Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
//

// Управляет реквизитом установки периода планирования
//
&НаСервере
Процедура СпособВыводаПериода()
	//Периодичность=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	//Если Объект.Сценарий.Пустая() ИЛИ (Периодичность=Перечисления.фин_Периодичность.День И ТипЗнч(Объект.Сценарий.ПродолжительностьЦикла)=Тип("Число")) Тогда
	//	// Элементы управления произвольным периодом
	//	Элементы.ПериодПланирования.Видимость = Истина;
	//	// Элементы управления периодом
	//	Элементы.Период.Видимость = Ложь;
	//	Элементы.ПлюсПериод.Видимость = Ложь;
	//	Элементы.МинусПериод.Видимость = Ложь;
	//	Элементы.ВыборПериода.Видимость=Ложь;
	//Иначе // периоды Месяц, Квартал, Год
	//	// Элементы управления датой
	//	Элементы.ПериодПланирования.Видимость = Ложь;
	//	// Элементы управления периодом
	//	Элементы.Период.Видимость = Истина;
	//	Элементы.ПлюсПериод.Видимость = Истина;
	//	Элементы.МинусПериод.Видимость = Истина;
	//	Элементы.ВыборПериода.Видимость=Истина;
	//		фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);

	//КонецЕсли;
	
КонецПроцедуры //СпособВыводаПериода

&НаСервере
Процедура ЗаполнитьРазрезыБюджета(КЭШ_Разрезы)
	СтруктураРазрезовБюджета.Очистить();
	СоответствиеРазрезовИзмерениям.Очистить();
	Для Каждого Разрез Из Объект.РасчетныйПоказатель.РазрезыУчета Цикл
		Если Разрез.Использование Тогда
			СтруктураРазрезовБюджета.Добавить(Разрез.Измерение);
			СоответствиеРазрезовИзмерениям.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Измерение,КЭШ_Разрезы),фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Измерение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРазреза(Значение)
	фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Значение);
КонецФункции

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета(ПереченьРазрезов,СписокТЧ)
	ОбработанныеРазрезы=Новый Массив;
	Для Каждого Разрез Из ПереченьРазрезов Цикл
		ИмяРазреза = ПолучитьИмяРазреза(разрез.Значение);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
		ЭтотОбъект["ТипРазреза"+НомерРазреза]=ЭлементПВХ;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ].ПодчиненныеЭлементы["Разрез"+НомерРазреза].Видимость = Истина;
			//Элементы[ТЧ].ПодчиненныеЭлементы["Разрез"+НомерРазреза].ИзменятьВидимость = Истина;
		КонецЦикла;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ].ПодчиненныеЭлементы["Разрез"+НомерРазреза].ТекстШапки = ?(СокрЛП(ЭлементПВХ.ПредставлениеДополнительногоРеквизита)="",Строка(ЭлементПВХ),ЭлементПВХ.ПредставлениеДополнительногоРеквизита);
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		ИмяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(имяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Элементы[ТЧ].ПодчиненныеЭлементы["ЗначенияПоказателей"+имяЭлемента].Видимость = Ложь;
				//Элементы[ТЧ].ПодчиненныеЭлементы["ЗначенияПоказателей"+имяЭлемента].ИзменятьВидимость = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РасчетныйПоказательПриИзмененииНаСервере()
	ЗаполнитьРазрезыБюджета(КЭШ_Разрезы);
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ЗначенияПоказателей");
	НастроитьРазрезыБюджета(СтруктураРазрезовБюджета,СписокТЧ);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииНаКлиенте()
	ПродолжительностьЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Объект.ПериодПланирования		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Объект.ПериодПланирования,Объект.Сценарий);
	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
	мСценарий = Объект.Сценарий;
	ДетализацияПланированияНоменклатурныеГруппы = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланирования(Объект.Сценарий)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы();
	Для Каждого СтрокаТЧ Из Объект.ЗначенияПоказателей Цикл
		Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ДетализацияПланированияНоменклатурныеГруппы 
			И НЕ ТипЗнч(СтрокаТЧ.Номенклатура)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипНоменклатурныеГруппыСсылка() Тогда
			СтрокаТЧ.Номенклатура=Новый(фин_ОбщегоНазначенияКлиентПовтИсп.ТипНоменклатурныеГруппыСсылка());
		ИначеЕсли НЕ (ТипЗнч(СтрокаТЧ.Номенклатура)=Тип("СправочникСсылка.Номенклатура")
				ИЛИ ТипЗнч(СтрокаТЧ.Номенклатура)=Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
			СтрокаТЧ.Номенклатура=Новый(Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗначенияПоказателейПриНачалеРедактированияНаСервере(НоваяСтрока, Копирование)
	ТекущиеДанные = Объект.ЗначенияПоказателей.НайтиПоИдентификатору(Элементы.ЗначенияПоказателей.ТекущаяСтрока);
	Если НоваяСтрока И НЕ Копирование Тогда
		Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
			ТекущиеДанные[Пара.Представление]=ПривестиЗначениеПары(Пара.Значение,"");
		КонецЦикла;
	Иначе
		Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
			ТекущиеДанные[Пара.Представление]=ПривестиЗначениеПары(Пара.Значение,ТекущиеДанные[Пара.Представление]);
		КонецЦикла;
	КонецЕсли;
	///////////////////////////	
	МассивТипов = Новый Массив;
	Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И Объект.Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
		МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
	Иначе
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре") Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Элементы.ЗначенияПоказателей.ПодчиненныеЭлементы.ЗначенияПоказателейНоменклатура.ОграничениеТипа = ОписаниеТипов;
	
КонецПроцедуры

&НаСервере
Функция ПривестиЗначениеПары(Пара,Значение)
	Возврат Пара.ТипЗначения.ПривестиЗначение(Значение);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДетализациюПланирования(Значение)
	Возврат Значение.ДетализацияПланирования;
КонецФункции



&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Модифицированность=Истина;
		Объект.ПериодПланирования = РезультатВыбора.НачалоПериода;
		фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,ГоризонтПланирования,Объект.ПериодПланирования,Объект.Сценарий);
	КонецЕсли;
КонецПроцедуры
