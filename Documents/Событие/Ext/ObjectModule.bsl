
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		Предупреждение("Перед печатью необходимо провести документ");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипСобытия       = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ВидСобытия       = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
	Основание        = Основание;
	СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
	Ответственный    = глЗначениеПеременной("глТекущийПользователь");
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		КонтактноеЛицо = Основание.КонтактноеЛицо;
		ВидСобытия     = Основание.ВидСобытия;
		ТипСобытия     = Основание.ТипСобытия;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		Запрос = Новый Запрос;
		
		Если Основание.СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|	ПРАВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты
			|		ИЗ
			|			Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|		ГДЕ
			|			ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент
			|		) КАК Адреса
			|	ПО
			|		ВЫРАЗИТЬ(Адреса.АдресЭлектроннойПочты КАК СТРОКА(200)) = ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200))
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", Основание);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", Основание.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли; 
		
		КонецЕсли; 

		КонтактноеЛицо = ВыбОбъект;

		Основание       = Основание;
		ОписаниеСобытия = Основание.Тема;
		Если Основание.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Основание.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(Основание.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = Основание.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
   	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаПо", ОкончаниеСобытия - 1);
	Запрос.УстановитьПараметр("Свободно", Перечисления.Занятость.Свободно);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеВстречи.НачалоСобытия,
		|	ПланируемыеВстречи.Помещение,
		|	ПланируемыеВстречи.ОкончаниеСобытия,
		|	ВЫБОР КОГДА ПланируемаяЗанятостьПомещений.Занятость <> &Свободно ИЛИ ПланируемаяЗанятостьПомещений.Период >= ПланируемыеВстречи.НачалоСобытия ТОГДА ""Нельзя"" ИНАЧЕ ""Можно"" КОНЕЦ КАК ПроверяемоеЗначение,
		|	ПланируемыеВстречи.Ссылка
		|ИЗ
		|	Документ.Событие КАК ПланируемыеВстречи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемаяЗанятостьПомещений.СрезПоследних(&ДатаПо, Помещение = &Помещение) КАК ПланируемаяЗанятостьПомещений
		|		ПО ПланируемыеВстречи.Помещение = ПланируемаяЗанятостьПомещений.Помещение
		|
		|ГДЕ
		|   ПланируемыеВстречи.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части "СписокРаботников" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса к табличной части документа.
//
Функция СформироватьЗапросПоСписокРаботников(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоСобытия);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеСобытия);
	Запрос.УстановитьПараметр("Свободно", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);
		
		// Описание текста запроса:
		// 1. Выборка "ПерваяТаблица": 
		//		Выбираются строки т.ч. СписокРаботников документа
		// 2. Выборка "СобытийныйПланЗанятостиФизлицСрезПоследних": 
		//		Из таблицы среза последних регистра выбираем планируемое состояние для проверки
		//      В качестве условия на измерение задается список физлиц, упомянутых в документе.
		// 3. Выборка "ВтораяТаблица": 
		//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
		//      для одного работника
		//
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
		               |	ПерваяТаблица.Ссылка,
		               |	ПерваяТаблица.Работник,
		               |	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока,
		               |	ВЫБОР КОГДА СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние <> &Свободно И НЕ((СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние) ЕСТЬ NULL ) ИЛИ СобытийныйПланЗанятостиФизлицСрезПоследних.Период >= &ДатаНачала ТОГДА ""Нельзя"" ИНАЧЕ ""Можно"" КОНЕЦ КАК ПроверяемоеЗначение
		               |ИЗ
		               |	Документ.Событие.РаботникиОрганизации КАК ПерваяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытийныйПланЗанятостиФизлиц.СрезПоследних(&ДатаОкончания, ФизЛицо в (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланируемыеВстречиСписокРаботников.Работник ИЗ Документ.Событие.РаботникиОрганизации КАК ПланируемыеВстречиСписокРаботников ГДЕ ПланируемыеВстречиСписокРаботников.Ссылка = &ДокументСсылка)) КАК СобытийныйПланЗанятостиФизлицСрезПоследних
		               |		ПО ПерваяТаблица.Работник = СобытийныйПланЗанятостиФизлицСрезПоследних.ФизЛицо
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.РаботникиОрганизации КАК ВтораяТаблица
		               |		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки И ПерваяТаблица.Работник = ВтораяТаблица.Работник
		               |
		               |ГДЕ
		               |	ПерваяТаблица.Ссылка = &ДокументСсылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПерваяТаблица.НомерСтроки,
		               |	СобытийныйПланЗанятостиФизлицСрезПоследних.Период,
		               |	ПерваяТаблица.Ссылка,
		               |	ПерваяТаблица.Работник,
		               |	СобытийныйПланЗанятостиФизлицСрезПоследних.Состояние";
					   
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоСписокРаботников()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	
	// Помещение
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Помещение) И ВыборкаПоШапкеДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Помещение на указанный период времени ранее уже зарезервировано!", Отказ, Заголовок);
	КонецЕсли;

	// ПродолжительностьЧасов
	Если ВыборкаПоШапкеДокумента.НачалоСобытия = ВыборкаПоШапкеДокумента.ОкончаниеСобытия ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НачалоСобытия) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не задана продолжительность встречи!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.НачалоСобытия > ВыборкаПоШапкеДокумента.ОкончаниеСобытия Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Начало встречи не может быть позже её окончания!", Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "СписокРаботников" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Список работников"": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Работник) Тогда
		Сообщить(СтрокаНачалаСообщенияОбОшибке + "не выбран работник!");
	КонецЕсли;
	
	// Занятость работника
	Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		Сообщить(СтрокаНачалаСообщенияОбОшибке + " работник в указанный период времени уже занят!");
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = " найдена повторяющаяся строка №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока;
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиСписокРаботников()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СборДанныхДляПланированияЗанятостиФизлиц");
	Если НЕ Помещение.Пустая() Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("ПланируемаяЗанятостьПомещений");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоСписокРаботников             - выборка из результата запроса по строкам документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = НачалоСобытия;

		// Измерения
		Движение.Физлицо                    = ВыборкаПоСписокРаботников.Работник;
		Движение.Документ                   = Ссылка;
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		
		// Реквизиты
		Движение.ДатаОкончания              = ОкончаниеСобытия;
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ОкончаниеСобытия;

		// Измерения
		Движение.Физлицо                    = ВыборкаПоСписокРаботников.Работник;
		Движение.Документ                   = Ссылка;
		
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
		

		
	КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоСписокРаботников

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "ПланируемаяЗанятостьПомещений";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.НачалоСобытия;
	
		// Измерения
		Движение.Помещение                  = ВыборкаПоШапкеДокумента.Помещение;

		// Ресурсы
		Движение.Занятость					= Перечисления.Занятость.Занято;
		// Реквизиты
		Движение.ДатаОкончания              = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;

		// Измерения
		Движение.Помещение                  = ВыборкаПоШапкеДокумента.Помещение;
		// Ресурсы
		Движение.Занятость					= Перечисления.Занятость.Свободно;  
		// Реквизиты

		
	КонецЕсли;
	
	
	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СборДанныхДляПланированияЗанятостиФизлиц";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) И ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда

		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = НачалоСобытия;
	
		// Измерения
		Движение.Физлицо                    = Ответственный.ФизЛицо;
		Движение.Документ                   = Ссылка;
		
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Встреча;
		
		// Реквизиты
		Движение.ДатаОкончания              = ОкончаниеСобытия;

		
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ОкончаниеСобытия;

		// Измерения
		Движение.Физлицо                    = Ответственный.ФизЛицо;
		Движение.Документ                   = Ссылка;
			
		// Ресурсы
		Движение.Состояние                  = Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли;

	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоШапке

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ОбменДанными.Загрузка Тогда
		
        Если НапомнитьОСобытии Тогда
            Если НЕ ЗначениеЗаполнено(ВремяНапоминания) Тогда
                ВремяНапоминания = НачалоСобытия - ИнтервалНапоминания;
            КонецЕсли; 
		Иначе
			ВремяНапоминания = '00010101';
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров сведений по которым надо проводить документ для управления персоналом
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Формируем движения для нужд управления персоналом, занятость помещений и физ.лиц
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		
		Если  НЕ Ответственный.Пустая() И НЕ Ответственный.ФизЛицо.Пустая() И РаботникиОрганизации.Найти(Ответственный.ФизЛицо, "Работник") <> Неопределено Тогда
		
			СтрокаСообщенияОбОшибке = "Найдена строка с физ.лицом, которое выбрано в качестве физ.лица у пользователя, являющегося ответственным за данное событие.";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаСообщенияОбОшибке, Отказ, Заголовок);
			Возврат;
		
		КонецЕсли; 
		
		// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
		// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
		// то проводить по нему не надо.
		ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);
		
		Если НЕ Помещение.Пустая() Тогда
		
			РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

			ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			
			//Надо проверить реквизиты шапки
			ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		КонецЕсли; 
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда 

			Если НЕ Помещение.Пустая() Тогда
				ДобавитьСтрокуВДвиженияПоШапке(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			КонецЕсли;

			// получим реквизиты табличной части
			РезультатЗапросаПоСписокРаботников = СформироватьЗапросПоСписокРаботников(Режим);
		
			ВыборкаПоСписокРаботников = РезультатЗапросаПоСписокРаботников.Выбрать();

			Пока ВыборкаПоСписокРаботников.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, Отказ);

				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоСписокРаботников(ВыборкаПоШапкеДокумента, ВыборкаПоСписокРаботников, СтруктураПроведенияПоРегистрамСведений);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

