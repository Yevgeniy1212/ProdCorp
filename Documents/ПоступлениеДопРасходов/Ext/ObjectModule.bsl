////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчетБУ;
Перем ПартионныйУчетНУ;


// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()
	
	КодОС           = Ложь;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
		ТекстКодАртикулОС = "";		
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		КодОС           = Истина;
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
		ТекстКодАртикулОС = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапкиРаспределения  = "ШапкаРаспределенияСКодом";
		ОбластьСтрокиРаспределения = "СтрокаРаспределенияСКодом";
	Иначе
		ОбластьШапкиРаспределения  = "ШапкаРаспределения";
		ОбластьСтрокиРаспределения = "СтрокаРаспределения";
	КонецЕсли;

	Запрос = Новый Запрос;
	ЗапросРаспределения = Новый Запрос;
	ЗапросРаспределенияПоСумме = Новый Запрос;
	ЗапросРаспределения.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросРаспределенияПоСумме.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Содержание,
	|	МАКСИМУМ(ПоступлениеДопРасходов.СуммаДокумента) КАК СуммаДокумента,
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	ПоступлениеДопРасходов.УчитыватьНДС,
	|	ПоступлениеДопРасходов.СуммаВключаетНДС,
	|	ЕСТЬNULL(МАКСИМУМ(ПоступлениеДопРасходов.СуммаНДС), 0) КАК СуммаНДС,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ПоступлениеДопРасходов.СтруктурноеПодразделение
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Сумма), 0) КАК ТоварыСумма,
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаНДС), 0) КАК ТоварыСуммаНДС
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|	ГДЕ
	|		ПоступлениеДопРасходовТовары.Ссылка = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.Сумма), 0),
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.СуммаНДС), 0)
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.ОС КАК ПоступлениеДопРасходовОС
	|	ГДЕ
	|		ПоступлениеДопРасходовОС.Ссылка = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.Сумма), 0),
	|		ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.СуммаНДС), 0)
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.НМА КАК ПоступлениеДопРасходовНМА
	|	ГДЕ
	|		ПоступлениеДопРасходовНМА.Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходов.СуммаВключаетНДС,
	|	ПоступлениеДопРасходов.УчитыватьНДС,
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	ПоступлениеДопРасходов.Содержание,
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.Дата,
	|	ПоступлениеДопРасходов.Номер,
	|	ПоступлениеДопРасходов.СтруктурноеПодразделение";
	
	ЗапросРаспределения.Текст = "ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеДопРасходовТовары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Количество), 0) КАК Количество,
	|	ПоступлениеДопРасходовТовары.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.Сумма), 0) КАК ДопСумма,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаНДС), 0) КАК ДопСуммаНДС,
	|	ПоступлениеДопРасходовТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	|	0 КАК Метка,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаРаспределения), 0) КАК СуммаРаспределения,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовТовары.СуммаРаспределенияНДС), 0) КАК СуммаРаспределенияНДС
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовТовары.Номенклатура,
	|	ПоступлениеДопРасходовТовары.Номенклатура." + ТекстКодАртикул + ",
	|	ПоступлениеДопРасходовТовары.НомерСтроки,
	|	ПоступлениеДопРасходовТовары.СчетУчетаБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовОС.ОсновноеСредство,
	|	" + ?(КодОС,"ПоступлениеДопРасходовОС.ОсновноеСредство.Код", """""") + ",  
	|	СУММА(0),
	|	ПоступлениеДопРасходовОС.НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовОС.СуммаНДС), 0),
	|	ПоступлениеДопРасходовОС.СчетУчетаБУ,
	|	1,
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовОС.СуммаРаспределения), 0),
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовОС.СуммаРаспределенияНДС), 0)
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.ОС КАК ПоступлениеДопРасходовОС
	|ГДЕ
	|	ПоступлениеДопРасходовОС.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовОС.ОсновноеСредство,
	|	" + ?(КодОС,"ПоступлениеДопРасходовОС.ОсновноеСредство.Код", """""") + ",  
	|	ПоступлениеДопРасходовОС.НомерСтроки,
	|	ПоступлениеДопРасходовОС.СчетУчетаБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовНМА.НематериальныйАктив,
	|	" + ?(КодОС,"ПоступлениеДопРасходовНМА.НематериальныйАктив.Код", """""") + ",  
	|	СУММА(0),
	|	ПоступлениеДопРасходовНМА.НомерСтроки,
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ПоступлениеДопРасходовНМА.СуммаНДС), 0),
	|	ПоступлениеДопРасходовНМА.СчетУчетаБУ,
	|	1,
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовНМА.СуммаРаспределения), 0),
	|	ЕСТЬNULL(Сумма(ПоступлениеДопРасходовНМА.СуммаРаспределенияНДС), 0)
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.НМА КАК ПоступлениеДопРасходовНМА
	|ГДЕ
	|	ПоступлениеДопРасходовНМА.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходовНМА.НематериальныйАктив,
	|	" + ?(КодОС,"ПоступлениеДопРасходовНМА.НематериальныйАктив.Код", """""") + ",  
	|	ПоступлениеДопРасходовНМА.НомерСтроки,
	|	ПоступлениеДопРасходовНМА.СчетУчетаБУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки";
	
		  	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТаблицаРаспределения = ЗапросРаспределения.Выполнить().Выбрать();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	//
	Макет       = ПолучитьМакет("Накладная");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Доп. расходы", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Если Не Шапка.СуммаВключаетНДС Тогда
		СуммаВсего = Шапка.СуммаДокумента - Шапка.СуммаНДС - Шапка.ТоварыСуммаНДС;
	Иначе
		СуммаВсего = Шапка.СуммаДокумента;
	КонецЕсли;                       

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
	ОбластьМакета.Параметры.Цена        = СуммаВсего;
	ОбластьМакета.Параметры.Количество  = 1;
	ОбластьМакета.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаВсего);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС + Шапка.ТоварыСуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1 + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиРаспределения);
	
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		ТекстВалюты = "(" + ВалютаДокумента.Наименование + ")";
	Иначе
		ТекстВалюты = "";
	КонецЕсли;
	
	ОбластьМакета.Параметры.Валюта = ТекстВалюты;	
	ТабДокумент.Вывести(ОбластьМакета);
	ДопСуммаВсего = 0;
	СуммаРаспределенияВсего = 0;
	СуммаВсего = 0;
	ДопСумма   = 0;
	НомерПоПорядку     = 0;       
	СуммаРаспределения = 0;
	//в случае если валюта документ ане равна валюте регламентированного учета
	СуммаВсегоРегл = 0;
	СуммаРаспределенияВсегоРегл = 0;
	ДопСуммаВсегоРегл = 0;
	СуммаРаспределенияРегл = 0;
	ДопСуммаРегл = 0;
	
	Пока ТаблицаРаспределения.Следующий() Цикл
				
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокиРаспределения);		
		ОбластьМакета.Параметры.Заполнить(ТаблицаРаспределения);
		ОбластьМакета.Параметры.Товар = ТаблицаРаспределения.Номенклатура.НаименованиеПолное;
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ТаблицаРаспределения.КодАртикул;
		КонецЕсли;  
		
        Если УчитыватьНДС и СуммаВключаетНДС ТОгда
			ДопСумма 		   = ТаблицаРаспределения.ДопСумма - ТаблицаРаспределения.ДопСуммаНДС;
			СуммаРаспределения = ТаблицаРаспределения.СуммаРаспределения - ТаблицаРаспределения.СуммаРаспределенияНДС;
		Иначе
			ДопСумма           = ТаблицаРаспределения.ДопСумма;
			СуммаРаспределения = ТаблицаРаспределения.СуммаРаспределения;
		КонецЕсли;      		
		
		ОбластьМакета.Параметры.СуммаРаспределения  = СуммаРаспределения - ДопСумма;
		ОбластьМакета.Параметры.ДопСумма 			= ДопСумма;
		ОбластьМакета.Параметры.Сумма 			    = СуммаРаспределения;
		ОбластьМакета.Параметры.НомерСтроки = НомерПоПорядку + 1;
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакетаРегл  = Макет.ПолучитьОбласть("СтрокаРаспределенияРегл");
			ОбластьМакетаРегл.Параметры.ВалютаРегл = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   	= ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);	
			СуммаРаспределенияРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаРаспределения, ВалютаДокумента, мВалютаРегламентированногоУчета,
													КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;
													СуммаРаспределенияРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаРаспределения, ВалютаДокумента, мВалютаРегламентированногоУчета,
													КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;

													
			ДопСуммаРегл =  ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ДопСумма, ВалютаДокумента, мВалютаРегламентированногоУчета,
													КурсВзаиморасчетов,      ДанныеОВалюте.Курс, 
													КратностьВзаиморасчетов, ДанныеОВалюте.Кратность) ;	
													
		   ОбластьМакетаРегл.Параметры.СуммаРаспределенияРегл = СуммаРаспределенияРегл - ДопСуммаРегл;	
		   ОбластьМакетаРегл.Параметры.суммаРегл    = СуммаРаспределенияРегл;	
		   ОбластьМакетаРегл.Параметры.ДопСуммаРегл = ДопСуммаРегл;	
		   
		   ДопСуммаВсегоРегл = ДопСуммаВсегоРегл + ДопСуммаРегл;
		   СуммаВсегоРегл = СуммаВсегоРегл + СуммаРаспределенияРегл;
		   СуммаРаспределенияВсегоРегл = СуммаВсегоРегл - ДопСуммаВсегоРегл;	
		   ТабДокумент.Вывести(ОбластьМакетаРегл);
	   КонецЕсли; 	   
		
		ДопСуммаВсего = ДопСуммаВсего + ДопСумма;
		СуммаВсего = СуммаВсего + СуммаРаспределения;
		СуммаРаспределенияВсего = СуммаВсего - ДопСуммаВсего;	
		НомерПоПорядку = НомерПоПорядку + 1;
		ДопСумма   = 0;
		СуммаРаспределения = 0;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаспределения");
	ОбластьМакета.Параметры.Валюта = ТекстВалюты;	
	ОбластьМакета.Параметры.ДопСуммаВсего           = ДопСуммаВсего;
	ОбластьМакета.Параметры.СуммаВсего              = СуммаВсего;
	ОбластьМакета.Параметры.СуммаРаспределенияВсего = СуммаРаспределенияВсего;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаспределенияРегл");
		ОбластьМакета.Параметры.ВалютаРегл                  = мВалютаРегламентированногоУчета;
		ОбластьМакета.Параметры.ДопСуммаВсегоРегл           = ДопСуммаВсегоРегл;
		ОбластьМакета.Параметры.СуммаВсегоРегл              = СуммаВсегоРегл;
		ОбластьМакета.Параметры.СуммаРаспределенияВсегоРегл = СуммаРаспределенияВсегоРегл;
		ТабДокумент.Вывести(ОбластьМакета);  
	КонецЕсли;
	

	Возврат ТабДокумент;

КонецФункции // Печать

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();	
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "услуга сторонней организации"), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		
	
Конецпроцедуры	

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти,  СчетаУчета, ЗаполнятьБУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда
		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная","Доп. расходы");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Если ИмяТабЧасти = "ОС" ТОгда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;	

		Если СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаНДСПоПриобретению  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;	
	ИначеЕсли ИмяТабЧасти = "НМА" Тогда	
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаНМА(Организация, СтрокаТЧ.НематериальныйАктив, Дата);
		
		Если СчетаУчета.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СчетаУчета.СчетУчетаБУ  = ПланыСчетов.Типовой.НематериальныеАктивы;
		КонецЕсли;	

		СчетаУчета.Вставить("СчетУчетаНДСПоПриобретению",ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
		
	Иначе
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	КонецЕсли;

	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ);
	
	Если ИмяТабЧасти = "НМА" Тогда
		// для НМА по умолчанию ставим счет учета НУ в лоб, так как в регистре "Счета учета НМА" он не хранится.
		Если ЗаполнятьНУ  = Истина Тогда
			СчетУчетаНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетаУчета.СчетУчетаБУ), , , Дата);
			Если ЗначениеЗаполнено(СчетУчетаНУ) Тогда
				СтрокаТЧ.СчетУчетаНУ = СчетУчетаНУ;
			Иначе	
				СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
			КонецЕсли;	
        ИначеЕсли ЗаполнятьНУ = Ложь Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
        КонецЕсли;
	Иначе	
		ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);	
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в указанной табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.Коэффициент,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетУчетаНДС,
	|	Док.НДСВидОборота,
	|	Док.НДСВидПоступления	
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	

	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	ВидимостьСчетовНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументПартии   = ДокументОснование;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,ВалютаДокумента,
		                                                                   ОбщегоНазначения.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  		= ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 		= Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 		= Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 	= Выборка.НДСВидПоступления;				
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

Процедура ЗаполнитьТоварыПоАвансовомуОтчету(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="ВЫБРАТЬ
	              |	АвансовыйОтчетТовары.Номенклатура,
	              |	АвансовыйОтчетТовары.Ссылка,
	              |	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	              |	АвансовыйОтчетТовары.Сумма,
	              |	АвансовыйОтчетТовары.СуммаНДС,
	              |	АвансовыйОтчетТовары.Ссылка.УчитыватьНДС,
	              |	АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС,
	              |	АвансовыйОтчетТовары.Количество,
	              |	АвансовыйОтчетТовары.Коэффициент,
	              |	АвансовыйОтчетТовары.СчетУчетаБУ,
	              |	АвансовыйОтчетТовары.СчетУчетаНУ,
	              |	АвансовыйОтчетТовары.СчетУчетаНДС,
	              |	АвансовыйОтчетТовары.НДСВидОборота,
	              |	АвансовыйОтчетТовары.НДСВидПоступления
	              |ИЗ
	              |	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	              |ГДЕ
	              |	АвансовыйОтчетТовары.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	ВидимостьСчетовНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументПартии   = ДокументОснование;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,ВалютаДокумента,
		                                                                   ОбщегоНазначения.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  		= ?(ВидимостьСчетовНУ, Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 		= Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 		= Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 	= Выборка.НДСВидПоступления;				
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоАвансовомуОтчету()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьОСПоПоступлениюТоваров(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="ВЫБРАТЬ
	              |	Док.ОсновноеСредство,
	              |	Док.Ссылка,
	              |	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	              |	Док.Сумма,
	              |	Док.СуммаНДС,
	              |	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	              |	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	              |	Док.СчетУчетаБУ,
	              |	Док.СчетУчетаНУ,
	              |	Док.СчетУчетаНДС,
	              |	Док.НДСВидОборота,
	              |	Док.НДСВидПоступления,
	              |	Док.ПодразделениеОрганизации,
	              |	Док.МОЛОрганизации
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг.ОС КАК Док
	              |ГДЕ
	              |	Док.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	ВидимостьСчетовНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ОС.Добавить();

		
		СтрокаТабличнойЧасти.ОсновноеСредство = Выборка.ОсновноеСредство;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,ВалютаДокумента,
		                                                                   ОбщегоНазначения.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  			  = Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  			  = ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 			  = Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 			  = Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 		  = Выборка.НДСВидПоступления;				
		СтрокаТабличнойЧасти.ДокументПартии 		  = ДокументОснование;				
		СтрокаТабличнойЧасти.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;				
		СтрокаТабличнойЧасти.МОЛОрганизации 		  = Выборка.МОЛОрганизации;				
	КонецЦикла;

КонецПроцедуры // ЗаполнитьОСПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по поступлению НМА.
// Заполним табличные части по документу основанию (Поступление НМА);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьНМАПоПоступлениюНМА(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.НематериальныйАктив,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента КАК ВалютаОснования,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетУчетаНДС,
	|	Док.НДСВидОборота,
	|	Док.НДСВидПоступления	
	|ИЗ
	|	Документ.ПоступлениеНМА.НМА КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	ВидимостьСчетовНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = НМА.Добавить();

		
		СтрокаТабличнойЧасти.НематериальныйАктив = Выборка.НематериальныйАктив;
		СтрокаТабличнойЧасти.СуммаТовара      = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0),
		                                                                   Выборка.ВалютаОснования ,ВалютаДокумента,
		                                                                   ОбщегоНазначения.КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                                                   ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.СчетУчетаБУ  		= Выборка.СчетУчетаБУ;
		СтрокаТабличнойЧасти.СчетУчетаНУ  		= ?(ВидимостьСчетовНУ,Выборка.СчетУчетаНУ, ПланыСчетов.Налоговый.ПустаяСсылка());
		СтрокаТабличнойЧасти.СчетУчетаНДС 		= Выборка.СчетУчетаНДС;		
		СтрокаТабличнойЧасти.НДСВидОборота 		= Выборка.НДСВидОборота;		
		СтрокаТабличнойЧасти.НДСВидПоступления 	= Выборка.НДСВидПоступления;				
		СтрокаТабличнойЧасти.ДокументПартии 	= ДокументОснование;				
	КонецЦикла;

	
КонецПроцедуры	

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ДокументОснование = Основание.Ссылка;
	ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ЗаполнитьТоварыПоПоступлениюТоваров(Основание);
		ЗаполнитьОСПоПоступлениюТоваров(Основание);	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Авансовыйотчет") Тогда
		ЗаполнитьТоварыПоАвансовомуОтчету(Основание);
	ИначеЕсли ТипЗнч(Основание)	= Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
		ЗаполнитьНМАПоПоступлениюНМА(Основание);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;				
			#КонецЕсли
			Возврат;       		
		КонецЕсли;  
				
		Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
		
		Если НЕ ПлательщикНДС И Основание.УчитыватьНДС И НЕ Основание.СуммаВключаетНДС Тогда
			УчестьСуммуНДС = Истина;
		Иначе
			УчестьСуммуНДС = Ложь;
		КонецЕсли;
		
		СтруктураОстатков = УчетНДСИАкциза.ПолучитьСписокТоваровПодтвержденныхОтгрузками(Основание, Ложь);
		
		//свернем по ставке НДС, нам интересует общая сумма остатка
		ТЗУслуг = Основание.Услуги.Выгрузить();
		ТЗУслуг.Свернуть("Цена,СтавкаНДС", "Сумма,Количество,СуммаНДС");
		ОбщаяСумма = 0;
		//Проверим отстаток по услугам для ввода на основании
		Для Каждого Услуга Из ТЗУслуг Цикл
			ОстатокСумма = УчетНДСИАкциза.ПолучитьОстатокИзСФ(Услуга, "Услуги", СтруктураОстатков, Ложь, Ложь, Истина, ТЗУслуг);
			
			Если УчестьСуммуНДС Тогда
				ОстатокСумма.Сумма = ?(ОстатокСумма.Сумма = 0, ОстатокСумма.Сумма, ОстатокСумма.Сумма + Услуга.СуммаНДС);
			КонецЕсли;
			
			ОбщаяСумма = ОбщаяСумма + ОстатокСумма.Сумма; 		
		КонецЦикла;
		
		Если ОбщаяСумма = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Сумма  = ОбщаяСумма;
		
		//если у нас остаток в счет-фактуре по нескольким ставкам НДС, тогда ставку НДС мы просто не заполняем
		Если ТЗУслуг.Количество()= 1 Тогда
			СтавкаНДС = ТЗУслуг[0].СтавкаНДС;
			СуммаНДС  = УчетНДСИАкциза.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДСИАкциза.ПолучитьСтавкуНДС(СтавкаНДС));
		КонецЕсли;
			
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
КонецПроцедуры
    	
// Процедура выполняет распределение сумм документа и записывает 
// результаты распределения в реквизиты табличных частей СуммаРаспределения и СуммаРаспределенияНДС
// 
Процедура ВыполнитьРаспределение() Экспорт

	// расчет затрат по каждой позиции номенклатуры
	ТаблицаПоТоварам = Товары.Выгрузить();
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоОС 	 = ОС.Выгрузить();
	ТаблицаПоОС.Колонки.Добавить("Количество");
	ТаблицаПоОС.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ТаблицаПоНМА 	 = НМА.Выгрузить();
	ТаблицаПоНМА.Колонки.Добавить("Количество");
	ТаблицаПоНМА.ЗаполнитьЗначения(1, "Количество");	
	// Обнуление ранее рассчитанных сумм
	Для Каждого СтрокаТабличнойЧасти из НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = 0;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = 0;
	КонецЦикла;	
	
	ПодготовитьТаблицуРегл(ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, ЭтотОбъект);
	
	Для Каждого СтрокаТабличнойЧасти из Товары Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти из ОС Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
		
	Для Каждого СтрокаТабличнойЧасти из НМА Цикл
		СтрокаТабличнойЧасти.СуммаРаспределения = СтрокаТабличнойЧасти.СуммаРаспределения+СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРаспределенияНДС = СтрокаТабличнойЧасти.СуммаРаспределенияНДС+СтрокаТабличнойЧасти.СуммаНДС;
	КонецЦикла;	
	
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) + Сумма+ ?(УчитыватьНДС и не СуммаВключаетНДС,СуммаНДС,0);	

КонецПроцедуры // ВыполнитьРаспределение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выполняет заполнение таблицы товаров по результатам запроса
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  РезультатЗапросаПоТоварам - результат запроса к табличной части "Товары"
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выполняет заполнение таблицы ОС по результатам запроса
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  РезультатЗапросаПоОС - результат запроса к табличной части "ОС"
//
Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента)

	ТаблицаОС = РезультатЗапросаПоОС.Выгрузить();
	
	ТаблицаОС.Колонки.Добавить("Количество");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОС Цикл
		СтрокаТаблицы.Количество = 1;
	КонецЦикла;

	//ПодготовитьТаблицуТоваровОСРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаОС;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выполняет заполнение таблицы ОС по результатам запроса
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  РезультатЗапросаПоОС - результат запроса к табличной части "ОС"
//
Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента)

	ТаблицаНМА = РезультатЗапросаПоНМА.Выгрузить();
	
	ТаблицаНМА.Колонки.Добавить("Количество");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНМА Цикл
		СтрокаТаблицы.Количество = 1;
	КонецЦикла;

	Возврат ТаблицаНМА;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выполняет подготовку таблиц для проведения
//
// Параметры: 
//  ТаблицаТоваров - таблица значений, содержащая результаты запроса к табличной части "Товары"
//  ТаблицаОС - таблица значений, содержащая результаты запроса к табличной части "ОС"
//
Процедура ПодготовитьТаблицуРегл(ТаблицаТоваров, ТаблицаОС, ТаблицаНМА, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.Сумма = 0 тогда

		Возврат; //Дополнительное распределение не требуется

	КонецЕсли;

	СуммаКРаспределению = СтруктураШапкиДокумента.Сумма;
	НДСКРаспределению   = СтруктураШапкиДокумента.СуммаНДС;
	КолонкаБазиса       = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество",
	                      ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме,      "СуммаТовара",""));

	Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
		//Не выбран способ распределения
		Возврат;

	ИначеЕсли (ТаблицаТоваров.Итог(КолонкаБазиса) + ТаблицаОС.Итог(КолонкаБазиса) + ТаблицаНМА.Итог(КолонкаБазиса)) = 0 тогда 
		//Базис распределения - пустая колонка!
		Возврат;

	КонецЕсли;

	БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
	
	Для Каждого Строка ИЗ ТаблицаОС Цикл
		БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТаблицаНМА Цикл
		БазисРаспределения.Добавить(Строка[КолонкаБазиса]);
	КонецЦикла;
	
	ИтогРаспределения  = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);

	Если НЕ (НДСКРаспределению = 0) тогда
		ИтогРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
	КонецЕсли;

	Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл

		Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
			Если НомерСтрокиТаблицы >= ТаблицаТоваров.Количество() Тогда
				Если НомерСтрокиТаблицы >= (ТаблицаТоваров.Количество() + ТаблицаОС.Количество()) Тогда
					НМА[НомерСтрокиТаблицы-(ТаблицаТоваров.Количество() + ТаблицаОС.Количество())].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
				Иначе	
					ОС[НомерСтрокиТаблицы-ТаблицаТоваров.Количество()].СуммаРаспределения = ИтогРаспределения[НомерСтрокиТаблицы];
				КонецЕсли;	
			Иначе
				Товары[НомерСтрокиТаблицы].СуммаРаспределения  = ИтогРаспределения[НомерСтрокиТаблицы];
			КонецЕсли;
		КонецЕсли;

		Если Не(НДСКРаспределению = 0) тогда

			Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
				Если НомерСтрокиТаблицы >= ТаблицаТоваров.Количество() Тогда
					Если НомерСтрокиТаблицы >= (ТаблицаТоваров.Количество() + ТаблицаОС.Количество()) Тогда
						НМА[НомерСтрокиТаблицы-(ТаблицаТоваров.Количество() + ТаблицаОС.Количество())].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					Иначе	
						ОС[НомерСтрокиТаблицы-ТаблицаТоваров.Количество()].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					КонецЕсли;	
				Иначе
					Товары[НомерСтрокиТаблицы].СуммаРаспределенияНДС  = ИтогРаспределенияНДС[НомерСтрокиТаблицы];
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	
	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
		|ВалютаДокумента");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
		|ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
		|КурсВзаиморасчетов,КратностьВзаиморасчетов");
	КонецЕсли;
	
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		КонецЕсли;
	Иначе
		СтруктураОбязательныхПолей.Вставить("СчетБУ");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетНУ");			
		КонецЕсли;
		Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
			СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
		КонецЕсли;

	КонецЕсли; 
	
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество,СчетУчетаБУ");
	
	СтруктураОбязательныхПолей.Вставить("ДокументПартии");

	Если СтруктураШапкиДокумента.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаТовара");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		
		Если СтруктураШапкиДокумента.УчитыватьНДС  И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда	
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли;    		
		// проверка реквизитов НДС						
		Если (СтруктураШапкиДокумента.СтавкаНДС.Ставка <> 0) И (Не СтруктураШапкиДокумента.НДСВключенВСтоимость
			  И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету) Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;
	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект,"Товары", ТаблицаПоТоварам, Отказ, Заголовок); // Здесь услуг быть не должно.		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаТовара");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Если СтруктураШапкиДокумента.УчитыватьНДС И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда		
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли; 
		// проверка реквизитов НДС						
		Если (СтруктураШапкиДокумента.СтавкаНДС.Ставка <> 0) И (Не СтруктураШапкиДокумента.НДСВключенВСтоимость 
			И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету) Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
	КонецЕсли;
	
    Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;		
	      	
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям Тогда
		СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ Тогда
		СтруктураОбязательныхПолей.Вставить("МОЛОрганизации");
	КонецЕсли;
              	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "НМА".
//
// Параметры:
// Параметры: 
//  ТаблицаПоНМА        - таблица значений, содержащая данные для проведения и проверки ТЧ НМА
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаТовара");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		
		Если СтруктураШапкиДокумента.УчитыватьНДС И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда		
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли;  
		
		// проверка реквизитов НДС						
		Если (СтруктураШапкиДокумента.СтавкаНДС.Ставка <> 0) и (Не СтруктураШапкиДокумента.НДСВключенВСтоимость)
			И НЕ СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		КонецЕсли;	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
	КонецЕсли;	
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет, чтобы все суммы к распределению были учтены в реквизитах СуммаРаспределения и СуммаРаспределенияНДС
// 
Процедура ПроверитьСоответствиеСуммРаспределения(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок)

	// суммы, которые ввел пользователь - в целом по документу и по отдельным позициям
	СуммаКРаспределению = СтруктураШапкиДокумента.Сумма 
							+ ТаблицаПоТоварам.Итог("СуммаДопРасходов") 
							+ ТаблицаПоОС.Итог("СуммаДопРасходов")
							+ ТаблицаПоНМА.Итог("СуммаДопРасходов");
							
	СуммаНДСКРаспределению = СтруктураШапкиДокумента.СуммаНДС
							+ ТаблицаПоТоварам.Итог("СуммаНДСДопРасходов") 
							+ ТаблицаПоОС.Итог("СуммаНДСДопРасходов")
							+ ТаблицаПоНМА.Итог("СуммаНДСДопРасходов");
							
	// суммы, которые храняться в реквизитах СуммаРаспределения и СуммаРаспределенияНДС							
	РаспределеннаяСумма = ТаблицаПоТоварам.Итог("Сумма")
							+ ТаблицаПоОС.Итог("Сумма")
							+ ТаблицаПоНМА.Итог("Сумма");
							
	РаспределеннаяСуммаНДС = ТаблицаПоТоварам.Итог("НДС")
								+ ТаблицаПоОС.Итог("НДС")
								+ ТаблицаПоНМА.Итог("НДС");
								
	Если СуммаКРаспределению <> РаспределеннаяСумма Тогда
		ТекстСообщения = "Не совпадает общая сумма расходов к распределению по документу с итогом распределения.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если СуммаНДСКРаспределению <> РаспределеннаяСуммаНДС Тогда
		ТекстСообщения = "Не совпадает общая сумма НДС к распределению по документу с итогом распределения.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеСуммРаспределения()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ,Заголовок,РежимПроведения)

	// Общие таблицы вызываемых процедур
	ТаблицаАвансов = Новый ТаблицаЗначений;

	ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаАвансов, Отказ,Заголовок,РежимПроведения);
	
	Если Не СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда 
		// Выполнить движения по спецрегистрам подсистемы учета НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, "Товары", ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, "ОС", ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоНМА, "НМА", ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ИдТабЧасти, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
	ТаблицаДокумента.ЗаполнитьЗначения(СтавкаНДС, "СтавкаНДС");
	
	МассивКорректировкаНДСКВозмещению  = ТаблицаДокумента.НайтиСтроки(Новый Структура("КорректировкаНДС", Истина));
	ТаблицаКорректировкаНДСКВозмещению = ТаблицаДокумента.Скопировать(МассивКорректировкаНДСКВозмещению);
	
	МассивНДСКВозмещению  = ТаблицаДокумента.НайтиСтроки(Новый Структура("КорректировкаНДС", Ложь));
	ТаблицаНДСКВозмещению = ТаблицаДокумента.Скопировать(МассивНДСКВозмещению);
				
	Если ТаблицаНДСКВозмещению.Количество() <>  0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаНДСКВозмещению, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);
	КонецЕсли;
	
	Если ТаблицаКорректировкаНДСКВозмещению.Количество() <>  0 Тогда 
		УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаКорректировкаНДСКВозмещению, ИдТабЧасти, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);
	КонецЕсли;  	
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерии(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаАвансов, Отказ,Заголовок,РежимПроведения)

	СтруктураТаблицДокументаДляАванса = Новый Структура();
	СтруктураТаблицДокументаДляАванса.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	СтруктураТаблицДокументаДляАванса.Вставить("ТаблицаПоОС",ТаблицаПоОС);
	СтруктураТаблицДокументаДляАванса.Вставить("ТаблицаПоНМА",ТаблицаПоНМА);

	ТаблицаАвансов 	= УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета, СтруктураТаблицДокументаДляАванса, Отказ,Заголовок,"НА", мУчетнаяПолитикаПоБухгалтерскомуУчету);
	ДатаДока    	= Дата;
	ПроводкиБУ	    = Движения.Типовой;
	ПроводкиНУ		= Движения.Налоговый;
	
	ИтогоКоличество  = ТаблицаПоТоварам.Итог("Количество");
	ИтогоСуммаТовара = ТаблицаПоТоварам.Итог("СуммаТовара");

	СтратегииСписания = Новый Соответствие;

	// Проводки по дополнительным расходам
	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл

		СуммаВПроводку = СтрокаТЧ.Сумма;

		Если Не СуммаВПроводку = 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Доп. расходы при поступлении товаров";

			Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТЧ.Склад);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			// если нет соответствия стратегии выбранному счету, добавим значение
			Если СтратегииСписания.Получить(Проводка.СчетДт) = Неопределено Тогда
				СтратегииСписания.Вставить(Проводка.СчетДт,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(Проводка.СчетДт));
			КонецЕсли;
		
			ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(Проводка.СчетДт);
			Если ВедетсяПартионныйУчетДляСчета Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", СтрокаТЧ.ДокументОприходования);
			КонецЕсли;
			
			Проводка.Сумма = СуммаВПроводку;

			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

				Проводка.Сумма = Проводка.Сумма + СтрокаТЧ.НДС;

				Если НЕ (СтрокаТЧ.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;

			Иначе
				
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
					
					Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
					КонецЕсли;

				КонецЕсли;
                				
				// Проводки по НДС
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
					И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда

					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = Дата;
					
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					
					Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
						Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНДС;
						Проводка.Содержание   = "Выделен НДС";
					КонецЕсли;  
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
						Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						
						Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
						КонецЕсли;
					Иначе
						Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
						
						Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
						КонецЕсли; 
					КонецЕсли; 				

					Проводка.Сумма       = СтрокаТЧ.НДС;  				

				КонецЕсли; // Проводки по НДС

			КонецЕсли; // Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
        Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Доп. расходы при поступлении товаров";
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТЧ.Склад);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);
				Иначе
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
				КонецЕсли;
				
				Проводка.Сумма       = СтрокаТЧ.Сумма;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);										

				
				// Проводки по НДС
				Если Не СтрокаТЧ.СчетУчетаБУ.Забалансовый И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
					И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период      = Дата;
					
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					
					Если  СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТЧ.СчетУчетаНДС, Дата);					
						ПроводкаНУ.Содержание   = "Выделен НДС";
					КонецЕсли; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
						ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);						
						
					Иначе
						ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);									
					КонецЕсли; 					
					
					ПроводкаНУ.Сумма       = СтрокаТЧ.НДС;
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли; //СтрокаТЧ.СчетУчетаБУ.Забалансовый И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость ..
				
			КонецЕсли; // Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			
		КонецЕсли; // Если Не СуммаВПроводку = 0 Тогда
		
	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
	
	ВедетсяАналитУчетОсПоПодразделениям = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоПодразделениям;
	ВедетсяАналитУчетОсПоМОЛ = СтруктураШапкиДокумента.ВедетсяАналитУчетОсПоМОЛ;
	
	// Проводки по дополнительным расходам
	Для каждого СтрокаТЧ из ТаблицаПоОС Цикл

		СуммаВПроводку = СтрокаТЧ.Сумма;

		Если Не СуммаВПроводку = 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Доп. расходы при поступлении ОС";

			Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства", СтрокаТЧ.Номенклатура);
			
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
			КонецЕсли;
          			
			Проводка.Сумма = СуммаВПроводку;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;

			Иначе
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
				Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;
				
			КонецЕсли;


			// Проводки по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
				И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
					Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНДС;
					Проводка.Содержание   = "Выделен НДС";
				КонецЕсли;
					
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
					
					Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
					КонецЕсли;
					
				КонецЕсли;
				
				
				Проводка.Сумма       = СтрокаТЧ.НДС;

			КонецЕсли; // Проводки по НДС

			
        Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Доп. расходы при поступлении ОС";
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВнеоборотныеАктивы", СтрокаТЧ.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);
				Иначе
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
				КонецЕсли;
				
				Проводка.Сумма       = СтрокаТЧ.Сумма;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);										
					
				
				//Проовдки по НДС
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
					И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период      = Дата;
					
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					
					Если  СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТЧ.СчетУчетаНДС, Дата);					
						ПроводкаНУ.Содержание   = "Выделен НДС";
					КонецЕсли; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
						ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);						
						
					Иначе
						ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);									
					КонецЕсли; 					
					
					ПроводкаНУ.Сумма       = СтрокаТЧ.НДС;
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли; //НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость ..

			КонецЕсли; // Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

		КонецЕсли; // Если Не СуммаВПроводку = 0 Тогда

	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
	
	//*********************
	
	// Проводки по дополнительным расходам
	Для каждого СтрокаТЧ из ТаблицаПоНМА Цикл

		СуммаВПроводку = СтрокаТЧ.Сумма;

		Если Не СуммаВПроводку = 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Доп. расходы при поступлении НМА";

			Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НематериальныеАктивы", СтрокаТЧ.Номенклатура);
			
			Проводка.Сумма = СуммаВПроводку;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;
			Иначе
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
				
				Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;

			КонецЕсли;
			
			
			// Проводки по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
				И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = Дата;

				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				Если СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
					Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
					Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					Проводка.СчетДт       = СтрокаТЧ.СчетУчетаНДС;
					Проводка.Содержание   = "Выделен НДС";
				КонецЕсли;  
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
					
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
					КонецЕсли;
				Иначе
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоБУ3);
					
					Если СтруктураШапкиДокумента.СчетБУ.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
					КонецЕсли;    					
				КонецЕсли;
				
				
				Проводка.Сумма       = СтрокаТЧ.НДС;
				
			КонецЕсли; // Проводки по НДС
			
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				
				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Доп. расходы при поступлении НМА";
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВнеоборотныеАктивы", СтрокаТЧ.Номенклатура);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
					Проводка.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",                СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);
				Иначе
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
				КонецЕсли;

				Проводка.Сумма       = СтрокаТЧ.Сумма;
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);														
				
				Если  НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
					И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					
					ПроводкаНУ.Период      = Дата;
					
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					Если  СтруктураШапкиДокумента.ОтложитьПринятиеНДСКЗачету Тогда
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
						ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
					Иначе
						ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТЧ.СчетУчетаНДС, Дата);					
						ПроводкаНУ.Содержание   = "Выделен НДС";
					КонецЕсли; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления",		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды",	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
						ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);						
						
					Иначе
						ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоНУ3);									
					КонецЕсли; 					
					
					ПроводкаНУ.Сумма       = СтрокаТЧ.НДС;
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли; // НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость ..
             
			КонецЕсли; // Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

		КонецЕсли; // Если Не СуммаВПроводку = 0 Тогда

	КонецЦикла; // Для каждого СтрокаТЧ из ТаблицаПоНМА Цикл

	
	//*********************

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	    	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект) + Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС,СуммаНДС,0);	
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	

	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураПолученный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоПодразделениям", УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата));
	СтруктураШапкиДокумента.Вставить("ВедетсяАналитУчетОсПоМОЛ", 			УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата));
	
	// Получим значения учетной политики
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Если шапка не заполнена корректна то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 	"Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 	"Количество");
	СтруктураПолей.Вставить("СуммаДопРасходов", "Сумма");
	СтруктураПолей.Вставить("СуммаНДСДопРасходов", "СуммаНДС");
	СтруктураПолей.Вставить("Сумма"       , 	"СуммаРаспределения");
	СтруктураПолей.Вставить("НДС"         , 	"СуммаРаспределенияНДС");	
	СтруктураПолей.Вставить("НДСВидОборота", 	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления","НДСВидПоступления");
	СтруктураПолей.Вставить("КорректировкаНДС", "НДСВидПоступления.ПризнакКорректировки");

	СтруктураПолей.Вставить("Услуга"               , 		"Номенклатура.Услуга");
	СтруктураПолей.Вставить("СуммаТовара"          , 		"СуммаТовара");
	СтруктураПолей.Вставить("ДокументОприходования", 		"ДокументПартии");	
	СтруктураПолей.Вставить("ВидДоговораПартии" ,    		"ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации", 	"ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("СчетУчетаБУ" ,          		"СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" ,          		"СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый",		"СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС",          		"СчетУчетаНДС");

	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Склад" ,                		"ВЫБОР КОГДА Док.ДокументПартии ССЫЛКА Документ.ПеремещениеТоваров Тогда Док.ДокументПартии.СкладПолучатель ИНАЧЕ Док.ДокументПартии.Склад КОНЕЦ");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"	 		  , "ОсновноеСредство");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("МОЛОрганизации"	  	  , "МОЛОрганизации");
	СтруктураПолей.Вставить("СуммаДопРасходов"		  , "Сумма");
	СтруктураПолей.Вставить("СуммаНДСДопРасходов"	  , "СуммаНДС");
	СтруктураПолей.Вставить("Сумма"       			  , "СуммаРаспределения");
	СтруктураПолей.Вставить("НДС"         			  , "СуммаРаспределенияНДС");	
	СтруктураПолей.Вставить("НДСВидОборота"			  ,	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"		  , "НДСВидПоступления");
	СтруктураПолей.Вставить("КорректировкаНДС", "НДСВидПоступления.ПризнакКорректировки");

	СтруктураПолей.Вставить("СуммаТовара" , "СуммаТовара");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = ПодготовитьТаблицуОС(РезультатЗапросаПоОС, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 	"НематериальныйАктив");
	СтруктураПолей.Вставить("СуммаДопРасходов", "Сумма");
	СтруктураПолей.Вставить("СуммаНДСДопРасходов", "СуммаНДС");
	СтруктураПолей.Вставить("Сумма"       , 	"СуммаРаспределения");
	СтруктураПолей.Вставить("НДС"         , 	"СуммаРаспределенияНДС");	
	СтруктураПолей.Вставить("НДСВидОборота", 	"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления","НДСВидПоступления");
	СтруктураПолей.Вставить("КорректировкаНДС", "НДСВидПоступления.ПризнакКорректировки");

	СтруктураПолей.Вставить("СуммаТовара"          , 		"СуммаТовара");
	СтруктураПолей.Вставить("СчетУчетаБУ" ,          		"СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" ,          		"СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНДС",          		"СчетУчетаНДС");

	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	ТаблицаПоНМА          = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНМА(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьСоответствиеСуммРаспределения(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, Отказ, Заголовок);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	////Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС     , СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
    УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА     , СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ,Заголовок,РежимПроведения);
		
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураПолученный");
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
    	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураПолученный");
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();