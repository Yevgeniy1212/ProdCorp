////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// На основе данных строки выборки добавляет в набор записей регистра сторно запись 
//
// Параметры: 
//  Строка				- спозиционированная на определеной строке выборка 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСторно(Движения, Строка, МассивИндексыСтрокНачисления = Неопределено)

	// новая запись движений
	Движение = Движения.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	// прочие реквизиты
	Движение.ПериодРегистрации          	= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало       	= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец  		  	= Строка.ПериодДействияКонецСторно;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	// новая строка табличной части сторно начисления
	СтрокаТабличнойЧасти = Начисления.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка);
	
	// прочие реквизиты
	СтрокаТабличнойЧасти.ДатаНачала       				= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания    				= Строка.ПериодДействияКонецСторно;
	СтрокаТабличнойЧасти.Сторно 						= Истина; 
	СтрокаТабличнойЧасти.Авторасчет						= Истина; 
	
	Если МассивИндексыСтрокНачисления <> Неопределено Тогда
		МассивИндексыСтрокНачисления.Добавить(СтрокаТабличнойЧасти.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуСторно()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
Процедура Рассчитать(Сотрудник = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	//Перед вызов процедуры документ должнен быть записан

	Отказ = Ложь;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
	КонецЕсли;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// Удалим из начислений сторно записи
	Н = Начисления.Количество()-1;
	Пока Н >= 0 Цикл
		Строка = Начисления[Н];
		Если Сотрудник <> Неопределено Тогда
			Если Строка.Сотрудник <> Сотрудник Тогда
				Н = Н - 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Строка.Сторно И Строка.Авторасчет Тогда // сторно-записи по перерассчитываемому документу не удаляем
			Начисления.Удалить(Строка);
		КонецЕсли; 
		Н = Н - 1;
	КонецЦикла; 
	
	// записываем документ
	Записать();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																	Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;

	// Если почасовое отклонение, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.РабочееВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	// запишем данные о начислениях в регистр
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, , Сотрудник).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, );
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);

			Если НЕ (Сотрудник = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	НаборЗаписейРабочееВремя.Записать();
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, СтрокаСторно, МассивИндексыСтрокНачисления);
	КонецЦикла;
	
	// рассчитаем запись начислений 
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик, МассивИндексыСтрокНачисления, КомментироватьРасчет);
	
	// скопируем результаты расчета в документ
	ИндексСтрокиНачислений = 0;
	Для Каждого СтрокаДвижений Из НаборОсновныеНачисления Цикл
		Если МассивИндексыСтрокНачисления <> Неопределено Тогда
			СтрокаТабличнойЧасти = Начисления[МассивИндексыСтрокНачисления[ИндексСтрокиНачислений]];		
		Иначе
			СтрокаТабличнойЧасти = Начисления[ИндексСтрокиНачислений];
		КонецЕсли;
		СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
		СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
		СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
		СтрокаТабличнойЧасти.НормаДнейПоПятидневке = СтрокаДвижений.НормаДнейПоПятидневке;
		СтрокаТабличнойЧасти.ОтработаноДней = ?(СтрокаДвижений.ОтработаноДней <> 0, СтрокаДвижений.ОтработаноДней, СтрокаДвижений.УчитываемыеДни);
		СтрокаТабличнойЧасти.ОтработаноЧасов = ?(СтрокаДвижений.ОтработаноЧасов <> 0, СтрокаДвижений.ОтработаноЧасов, СтрокаДвижений.УчитываемыеЧасы);
		СтрокаТабличнойЧасти.ОтработаноДнейПоПятидневке = СтрокаДвижений.ОтработаноДнейПоПятидневке;
		СтрокаТабличнойЧасти.ДополнительныеДанные = СтрокаДвижений.ДополнительныеДанные;
		ИндексСтрокиНачислений = ИндексСтрокиНачислений + 1;
	КонецЦикла;	

	// Удаляем движения после расчета
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры  // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Сотрудники = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	Если НЕ ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// перерасчет выполняется в транзакции
	НачатьТранзакцию();
	
	// получим список перерассчитываемых физлиц
	Если Сотрудники = НеОпределено Тогда
		
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//		ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в таблице перерасчета основных начислений
		//
		СотрудникиДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник КАК Сотрудник,
		|	Перерасчет.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|
		|ГДЕ
		|	Перерасчет.ОбъектПерерасчета = &парамСсылка";
		
		
		Запрос = Новый Запрос(СотрудникиДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамСсылка", Ссылка);
		СотрудникиСписок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		
		СотрудникиСписок = Сотрудники;

	КонецЕсли;	
	
    // если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																	ВыборкаПоШапкеДокумента.Организация,
																	ИсчислениеНалоговСтруктурныхЕдиниц,
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[ВыборкаПоШапкеДокумента.Организация];

	// прочитать движения
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();

	// перерассчитываем записи начислений
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, СотрудникиСписок, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, Начисления, , Налогоплательщик);
	
	// запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// записываем документ
	Записать();
	

	////////////////////////////////////////////////////////////////////////
	// регистры накопления
	
	// сначала удалим сведения о взаиморасчетах с перерассчитанными работниками
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
	
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.Выгрузить(); // структура колонок + данные
		НаборЗаписей.мТаблицаДвижений.Индексы.Добавить("ФизЛицо");
		
		Для Каждого ЭлементСписка Из СотрудникиСписок Цикл
		    СтруктураПоиска.ФизЛицо = ЭлементСписка.ФизЛицо;
			
		    НайденныеСтроки = НаборЗаписей.мТаблицаДвижений.НайтиСтроки(СтруктураПоиска);
		    
		    Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		    	НаборЗаписей.мТаблицаДвижений.Удалить(НайденнаяСтрока);
		    КонецЦикла;
		    
		КонецЦикла;
	
	КонецЦикла;
	
	// теперь сформируем новые движения по регистрам накопления для перерассчитанных работников
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, Истина, СотрудникиСписок).Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;

	// запишем движения регистров накопления в базу
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
	    ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
	    НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	    НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
	    НаборЗаписей.Записать();
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	Если Сотрудники <> НеОпределено Тогда
		НаборЗаписей.Прочитать();
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаПерерасчета из НаборЗаписей Цикл
			Если Сотрудники.НайтиПоЗначению(СтрокаПерерасчета.Сотрудник) <> НеОпределено Тогда
				СтрокиКУдалению.Добавить(СтрокаПерерасчета);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			НаборЗаписей.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей.Записать();
	
	// перерасчет выполняется в транзакции
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
	"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);

	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
	
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.НевыходыВОрганизациях.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					Документ.НевыходыВОрганизациях.Начисления КАК Начисления
		|				ГДЕ
		|					Начисления.Ссылка В (&Исправления)
		|					И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|					И Начисления.Сторно))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники",        Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);

	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.Результат КАК Результат,
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасовПоПятидневке,
	|	-Начисления.НормаЧасов КАК НормаЧасовПоПятидневке,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ДополнительныеДанные,
	|	Начисления.СпособОтраженияВБухучете
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ОплачиватьЧасов,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	0,
	|	0,
	|	NULL,
	|	Начисления.НомерСтроки,
	|	Начисления.ДополнительныеДанные,
	|	Начисления.СпособОтраженияВБухучете
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение табличной части
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ДатаНачала,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала) = &ПустаяДата
		|			ТОГДА &ПустаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = &Простой
		|			ТОГДА ЕСТЬNULL(ПВРПростой.ВидРасчета, &ВидРасчетаПрогул)
		|		КОГДА ТЧРаботникиОрганизации.ПричинаОтсутствия = &Прогулы
		|			ТОГДА &ВидРасчетаПрогул
		|		ИНАЧЕ &ВидРасчетаНевыход
		|	КОНЕЦ КАК ВидРасчета,
		|	ИСТИНА КАК Авторасчет
		|ИЗ
		|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(Работники.Период) КАК Период
		|		ИЗ
		|			Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|					И (Работники.Организация = &ГоловнаяОрганизация)
		|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
		|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации
		|		ПО ТЧРаботникиОрганизации.Ссылка = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Ссылка
		|			И ТЧРаботникиОрганизации.Сотрудник = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Сотрудник
		|			И ТЧРаботникиОрганизации.ДатаНачала < ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала
		|			И (ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ПричинаОтсутствия = &Работает)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
		|		ИЗ
		|			ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
		|		ГДЕ
		|			ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПростойПоВинеРаботника) КАК ПВРПростой
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		|	И ТЧРаботникиОрганизации.ПричинаОтсутствия В (&Отсутствие, &Простой, &Прогулы)
		|	И ТЧРаботникиОрганизации.Сторно = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ДатаНачала,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
		|	ПВРПростой.ВидРасчета";
					   
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
		Запрос.УстановитьПараметр("Отсутствие", Перечисления.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине);					   
		Запрос.УстановитьПараметр("Простой", Перечисления.СостоянияРаботникаОрганизации.Простой);					   
		Запрос.УстановитьПараметр("Прогулы", Перечисления.СостоянияРаботникаОрганизации.Прогулы);					   
		Запрос.УстановитьПараметр("УчетВремениПростойПоВинеРаботника", Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника);
		Запрос.УстановитьПараметр("ДокументОснование", Основание);					   
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Основание.Организация));
		Запрос.УстановитьПараметр("Работает", Перечисления.СостоянияРаботникаОрганизации.Работает);					   
		Запрос.УстановитьПараметр("ВидРасчетаНевыход", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);					   
		Запрос.УстановитьПараметр("ВидРасчетаПрогул", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);					   
		Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		// Заполнение табличной части
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
		|	ТЧРаботникиОрганизации.ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(РегРаботникиОрганизации.Период) КАК Период
		|		ИЗ
		|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РегРаботникиОрганизации
		|				ПО ТЧРаботникиОрганизации.Сотрудник = РегРаботникиОрганизации.Сотрудник 
		|					И (РегРаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
		|					И РегРаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|		
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
		|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация) 
		|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование И
		|	ТЧРаботникиОрганизации.ПричинаОтсутствия В(&МассивПричин) И
		|	ТЧРаботникиОрганизации.Сторно = ЛОЖЬ";
					   
		МассивПричин = Новый Массив;
		МассивПричин.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты);
		МассивПричин.Добавить(Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый);
		Запрос.УстановитьПараметр("МассивПричин", МассивПричин);					   
		Запрос.УстановитьПараметр("ДокументОснование", Основание);					   
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Основание.Организация));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() цикл
			
			НоваяСтрока = Начисления.Добавить();
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.Физлицо = Выборка.ФизЛицо;
			НоваяСтрока.ДатаНачала = Выборка.ДатаНачала;
			НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
			НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			НоваяСтрока.Авторасчет = Истина;
			
			Если Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты Тогда
				НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплаты;
			ИначеЕсли Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый Тогда
				НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дата, 
	|	Док.Организация,
	|	ВЫБОР 
	|		КОГДА Док.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА Док.Организация 
	|		ИНАЧЕ Док.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ Как ГоловнаяОрганизация, 
	|	ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ПериодРегистрации, 
	|	Ответственный, 
	| 	Ссылка,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И Док.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Док.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель
	|ИЗ 
	|	Документ." + Метаданные().Имя + " КАК Док
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|			&ПериодРегистрации,
	|			Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документа "Начисления" 
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, Перерасчет = Ложь, Сотрудники = Неопределено)

	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос = Новый Запрос;
    МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 				  	 Ссылка);
   	Запрос.УстановитьПараметр("ПустаяДата", 					  	 Дата('00010101'));
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",   	 СписокСтруктурныхПодразделений);
	Запрос.УстановитьПараметр("Организация", 					  	 ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			  	 ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		  	 ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники", 					 Сотрудники);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", 		 ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 		  	 Справочники.Организации.ПустаяСсылка());

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыСотрудникиТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ДатаНачала") + " КАК Период
		|ИЗ 
		|	Документ.НевыходыВОрганизациях.Начисления 
		|ГДЕ 
		|	Ссылка = &ДокументСсылка
		|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "");
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникиТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ (" + МестоРаботыТекст + ") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;

 	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НевыходыНачисления.Сотрудник,
			|	НевыходыНачисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыНачисления
			|ГДЕ
			|	НевыходыНачисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НевыходыНачисления.Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "") +"
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
    // Выборка "ТЧНачисления": 
	//		Выбираются строки документа.  
	
	ТекстЗапроса = СтавкиОСМСТекст+ МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ТЧНачисления.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧНачисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ДатаОкончания <> &ПустаяДата
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ВидДохода КАК ВидДохода,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяИПН КАК СпособНалогообложенияИПН,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяСН КАК СпособНалогообложенияСН,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОПВ КАК СпособНалогообложенияОПВ,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяСО КАК СпособНалогообложенияСО,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОППВ КАК СпособНалогообложенияОППВ,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяВОСМС КАК СпособНалогообложенияВОСМС,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяООСМС КАК СпособНалогообложенияООСМС,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОПВР КАК СпособНалогообложенияОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЕСТЬNULL(ПериодыИсчисленияОППВ.ИсчислятьОППВ, ЛОЖЬ) КАК ИсчислятьОППВ
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДанныеПоРаботникуНаДатуНачисления.ПричинаИзмененияСостояния,
	|	ДанныеПоРаботникуНаДатуНачисления.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР 
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком 
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ТЧНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.СуммаВычетовДоходовОтОбратного,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ПодразделениеОрганизации.Владелец <> &Организация
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ТЧНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ ТЧНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ТЧНачисления.ДополнительныеДанные,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА ТЧНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	ТекстЗапроса = ТекстЗапроса + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК ТЧНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.НевыходыВОрганизациях.Начисления КАК ТЧНачисления
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник 
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|					И РаботникиОрганизации.Период <= ТЧНачисления.ДатаНачала
	|		
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ДанныеПоРаботникуНаДатуНачисления.Сотрудник = ТЧНачисления.Сотрудник 
	|			И (ДанныеПоРаботникуНаДатуНачисления.Организация = &ГоловнаяОрганизация) 
	|			И ДанныеПоРаботникуНаДатуНачисления.Период = ДатыПоследнихДвиженийРаботников.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&парамПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО ТЧНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО ДанныеПоРаботникуНаДатуНачисления.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И ДанныеПоРаботникуНаДатуНачисления.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СтрокиНачисления.НомерСтроки,
	|							ГрафикиРаботыФизЛиц.Ссылка КАК ГрафикРаботыФизЛица,
	|							ВЫБОР
	|								КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(СтрокиНачисления.ДатаНачала, СтрокиНачисления.ДатаОкончания, ДЕНЬ) + 1 
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ КАК ПланГрафикЗаполнен
	|						ИЗ
	|							Документ.НевыходыВОрганизациях.Начисления КАК СтрокиНачисления
	|   						
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|								ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|									И ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|								ПО ГрафикиРаботыФизЛиц.Ссылка = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|									И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|									И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СтрокиНачисления.ДатаНачала И СтрокиНачисления.ДатаОкончания
	|	
	|						ГДЕ
	|							СтрокиНачисления.Ссылка = &ДокументСсылка
	|						СГРУППИРОВАТЬ ПО
	|							СтрокиНачисления.НомерСтроки,
	|							СтрокиНачисления.ДатаНачала,
	|							СтрокиНачисления.ДатаОкончания,
	|							ГрафикиРаботыФизЛиц.Ссылка) КАК ДанныеПланГрафика
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПланГрафика.НомерСтроки
	|			И ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботыФизЛица";
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО ТЧНачисления.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = СтавкиОСМС.Период";

	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО ТЧНачисления.Сотрудник = МестоРаботы.Сотрудник
	|			И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО ТЧНачисления.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
	|			И ТЧНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И ТЧНачисления.Сотрудник В (&парамСотрудники)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период регистрации (месяц)!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	ЕстьДатаНачала = Истина;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		ЕстьДатаНачала = Ложь;
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// График работы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан рабочий график работника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) И ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала отсутствия не может превышать дату окончания!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка увольнения
	Если ЕстьДатаНачала И ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 
			 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "число оплачиваемых часов должно быть от 1 до 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления)
	
	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	КонецЕсли;
	
	Движение = НаборОсновныеНачисления.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ПериодДействияКонец 	    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней 					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов 				= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке 		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
	КонецЕсли;

	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке = ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеДни 	= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.УчитываемыеЧасы	= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли; 
	
	// Реквизиты
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ДополнительныеДанные		= ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоШапкеДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к документу 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник 							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Дней			= 0;
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		Движение.ДнейПоНорме 	= 0;
		Движение.ЧасовПоНорме 	= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
		// Реквизиты
		Движение.СводнаяЗапись = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоТЧ.Результат = 0 Тогда
		// нулевые суммы не записываем
		Возврат;
	КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) И ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода 				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
					
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 

	КонецЕсли;
	

	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) И ВыборкаПоТЧ.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ОПВСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) И ВыборкаПоТЧ.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) И ВыборкаПоТЧ.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;


	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ 
		И ВыборкаПоТЧ.ИсчислятьОППВ
		И ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) 
		И ВыборкаПоТЧ.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВОСМССведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) И ВыборкаПоТЧ.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) И ВыборкаПоТЧ.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияООСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВР) И ВыборкаПоТЧ.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	// Свойства
	Движение.Период                 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                = ВыборкаПоТЧ.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью" 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
    
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;
			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачисления = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, УчетнаяПолитикаПоПерсоналуОрганизации);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда
					
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.РабочееВремяРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
						
				КонецЕсли;

			КонецЦикла;
			
			Если НЕ Отказ Тогда
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				Конеццикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
