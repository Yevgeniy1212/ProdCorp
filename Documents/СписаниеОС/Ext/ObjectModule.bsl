////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)
Перем ТабЗатрат;
Перем ПроводкиНУ;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной ДА3
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДА3()
	
	//вспомогательные запросы для формирования печатной формы документа
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОС.Номер КАК НомерДок,
		|	СписаниеОС.Дата КАК ДатаДок,
		|	СписаниеОС.Организация,
		|	СписаниеОС.СтруктурноеПодразделение,
		|	СписаниеОС.ПричинаСписания,
		|	СписаниеОС.СчетЗатратБУ КАК СчетДт,
		|	СписаниеОС.ДокументОснованиеВид,
		|	СписаниеОС.ДокументОснованиеДата,
		|	СписаниеОС.ДокументОснованиеНомер,
		|	СписаниеОС.ИнвентаризационнаяКомиссия.(
		|		ФизЛицо КАК ФизЛицо,
		|		Председатель КАК Председатель
		|	) КАК ИнвентаризационнаяКомиссия
		|ИЗ
		|	Документ.СписаниеОС КАК СписаниеОС
		|
		|ГДЕ
		|	СписаниеОС.Ссылка = &Ссылка";
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	СтруктурнаяЕдиницаОрганизация 	  = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	СведенияОбОрганизации			  = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДок",     Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеОСОС.Ссылка.СчетЗатратБУ КАК СчетДт,
		|	СписаниеОСОС.НомерСтроки КАК НП,
		|	СписаниеОСОС.ОсновноеСредство КАК ОС,
		|	ПОДСТРОКА(СписаниеОСОС.ОсновноеСредство.ЗаводскойНомер,1,250) КАК ЗаводскойНомер,
		|	ПОДСТРОКА(СписаниеОСОС.ОсновноеСредство.НаименованиеПолное, 1, 1000) КАК НаимОС,
		|	СписаниеОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		|	СписаниеОСОС.АмортизацияБУ КАК НачАмортизация,
		|	СписаниеОСОС.СтоимостьБУ   КАК Стоимость,
		|	СписаниеОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяц,
		|	(СписаниеОСОС.СтоимостьБУ - СписаниеОСОС.АмортизацияБУ - СписаниеОСОС.АмортизацияЗаМесяцБУ) КАК ОстСтоимостьБУ,
		|	ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК ДатаПоследнихПараметровАмортизации,
		|   СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетКт
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаДок, Организация = &Организация) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&ДатаДок, Организация = &Организация) КАК СчетаУчетаОССрезПоследних
		|		ПО СписаниеОСОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
        |		&ДатаДок,
        |		Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	    |		ПО СписаниеОСОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	 	|ГДЕ
		|	СписаниеОСОС.Ссылка = &Ссылка";
	
	РезЗапросаОС = Запрос.Выполнить();		
	ВыборкаОС    = РезЗапросаОС.Выбрать();
	
	// Получим список МОЛ на основании списка ОС
	СписокОС = РезЗапросаОС.Выгрузить().ВыгрузитьКолонку("ОС");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
	Запрос.УстановитьПараметр("Организация",      Док.Организация);
	Запрос.УстановитьПараметр("Дата",             Док.ДатаДок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	СписокМОЛ = Результат.ВыгрузитьКолонку("МОЛ");
	
	
	//сформируем запрос по таб. части ТМЗ
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 	"Номенклатура");
	СтруктураПолей.Вставить("Количество"  , 	"Количество");
	СтруктураПолей.Вставить("Сумма"       , 	"Сумма");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ВыборкаПоТоварам		  = РезультатЗапросаПоТоварам.Выбрать();
	
	//формирование печатной формы документа
	
	ТабДокумент						= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеОС_ДА3";
	
  	Макет = ПолучитьОбщийМакет("ДА3");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
	ОбластьМакета.Параметры.Заполнить(Док);
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДок, "ru");

	ОбластьМакета.Параметры.НомерДок				 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	Руководители							   = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);
	ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.Руководитель;	
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВалютаПечати = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаголовокТаблицы1				   = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
	ЗаголовокТаблицы1.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ЗаголовокТаблицы1);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятнияКУчету 	 = '00010101';
	
	Пока ВыборкаОС.Следующий() Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы
			ТабДокумент.Вывести(ЗаголовокТаблицы1);
		КонецЕсли;
			
		ОбластьМакета.Параметры.Заполнить(Док);
		ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОС.НаимОС) Тогда
			ОбластьМакета.Параметры["НаимОС"] = СокрЛП(ВыборкаОС.ОС);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НачСтоимость  		= ВыборкаОС.Стоимость;
		ОбластьМакета.Параметры.НачАмортизация	    = ВыборкаОС.НачАмортизация + ВыборкаОС.АмортизацияЗаМесяц;
		ОбластьМакета.Параметры.БалансоваяСтоимость = ВыборкаОС.ОстСтоимостьБУ;
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(ВыборкаОС.ОС, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.ДатаДок, ДокументПринятияКУчетуБУ,  ДатаПринятнияКУчету);
		ОбластьМакета.Параметры.ДатаВводаВЭксплуатацию = Формат(ДатаПринятнияКУчету, "Л=ru; ДЛФ=DD");
		Если ВыборкаОС.ДатаПоследнихПараметровАмортизации <> Null Тогда 
			ФактическийСрокИспользования = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаОС.ДатаПоследнихПараметровАмортизации, Док.ДатаДок); 
		Иначе 
			ФактическийСрокИспользования = "";
		КонецЕсли;		
		ОбластьМакета.Параметры.ФактическийСрокЭксплуатации = ФактическийСрокИспользования;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;	                            

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ОбластьМакета.Параметры.Заполнить(Док);
	ОбластьМакета.Параметры.ДокументОснованиеДата  = ?(ЗначениеЗаполнено(Док.ДокументОснованиеДата), Формат(Док.ДокументОснованиеДата,"ДФ=""дд ММММ гггг 'года'"""),"«____» ________________20__года");
	ОбластьМакета.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(Док.ДокументОснованиеНомер), Док.ДокументОснованиеНомер,"_______ ");
	Если ЗначениеЗаполнено(Док.ДокументОснованиеВид) Тогда
		Если Док.ДокументОснованиеВид = "приказом" Тогда
			ОбластьМакета.Параметры.ДокументОснованиеВид = "приказом";
		ИначеЕсли Док.ДокументОснованиеВид = "постановлением" Тогда
			ОбластьМакета.Параметры.ДокументОснованиеВид = "постановлением";
		ИначеЕсли Док.ДокументОснованиеВид = "распоряжением" Тогда
			ОбластьМакета.Параметры.ДокументОснованиеВид = "распоряжением";
		КонецЕсли;	
	Иначе
		ОбластьМакета.Параметры.ДокументОснованиеВид = "приказом (распоряжением)";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СписокОсмотренных");
	
	ТаблицаОС = РезЗапросаОС.Выгрузить();
	ТаблицаОС.Свернуть("НаимОС");
	
	ВыводитьНадпись = Истина;
	// выведем список всех ОС
	Для Каждого СтрокаНаимОС ИЗ ТаблицаОС Цикл
		
		ОбластьМакета.Параметры.ПроизвелаОсмотр = ?(ВыводитьНадпись, "на основании ________________ произвела осмотр" ,"");
		
		ОбластьМакета.Параметры.НаимОС = СокрЛП(СтрокаНаимОС.НаимОС);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьНадпись = Ложь;

	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПричинаСписания");
	ОбластьМакета.Параметры.Заполнить(Док);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОборотнаяСторона");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ"					, "Материально-ответственное лицо:");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии:");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии"		, "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДок);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДок);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 1 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															 "");
		ОбластьМакета.Параметры.Должность          = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЕсли;
	
	//Выводим список МОЛ
	ДанныеМОЛ		  = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДок);
	ВыводитьЗаголовок = Истина;
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого МОЛ Из ДанныеМОЛ Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.МОЛ,
													   		 "");
		ОбластьМакета.Параметры.Должность          = МОЛ.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = МОЛ.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 1-го
	Если ДанныеМОЛ.Количество() < 1 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, ЗаголовокРазделаКомиссии.МОЛ,"");
		ОбластьМакета.Параметры.Должность         		 = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи		 = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЕсли;
	
	ОбластьМакета				   = Макет.ПолучитьОбласть("ЗаголовокТаблицы3");
	ОбластьМакета.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ИтогоСуммаТМЗ = 0;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы3");
	
	Пока ВыборкаПоТоварам.Следующий() Цикл
		ИтогоСуммаТМЗ					 = ИтогоСуммаТМЗ  +  ВыборкаПоТоварам.Сумма;
		ОбластьМакета.Параметры.НаимТМЗ  = ВыборкаПоТоварам.Номенклатура;
		ОбластьМакета.Параметры.КодТМЗ   = ВыборкаПоТоварам.Номенклатура.Код;
		ОбластьМакета.Параметры.КолТМЗ   = ВыборкаПоТоварам.Количество;
		ОбластьМакета.Параметры.СуммаТМЗ = ВыборкаПоТоварам.Сумма;
		
		ТабДокумент.Вывести(ОбластьМакета);	
	КонецЦикла;	
	
	//выводим пустую строку, если нет оприходованных ТМЗ
	Если ВыборкаПоТоварам.Количество = 0 Тогда 
	  ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета						  = Макет.ПолучитьОбласть("ИтогоТаблицы3");
	ОбластьМакета.Параметры.ИтогоСуммаТМЗ = ИтогоСуммаТМЗ;
	ТабДокумент.Вывести(ОбластьМакета);
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Валюта			   = ВалютаПечати;
	ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСписаниеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ДА3" Тогда
		ТабДокумент = ПечатьДА3();		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДА3","ДА-3 (Акт на списание)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	мСтрокаРеквизитыБухУчета = "СчетЗатратБУ, СубконтоЗатратБУ1, ОС.СтоимостьБУ, ОС.АмортизацияБУ, ОС.АмортизацияЗаМесяцБУ, ОС.ОстСтоимостьБУ"; 
	мСтрокаРеквизитыНалУчета = "";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета,ЗаполнятьБУ)

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	СчетаУчета 		= ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

  		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя списать группу основных средств",СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 
		СтрокаТабличнойЧасти = ОС.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		ДокументОснование 		 = Основание;
		Организация 			 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			Если ТекСтрокаОС.НаличиеПоДаннымУчета И НЕ ТекСтрокаОС.НаличиеФактическое Тогда
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация,СчетЗатратБУ";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	Если СтруктураШапкиДокумента.НеобходимостьОтражениявНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");		
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда		
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;	

	
	//Проверим заполнения реквизита СчетДоходовБУ, при условии наличия строк в ТЧ "Товары"
	Если Товары.Количество()> 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
		Если СтруктураШапкиДокумента.НеобходимостьОтражениявНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		КонецЕсли;		
	КонецЕсли;	
	
	
	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не могут отражаться данным документом!",Отказ,Заголовок);
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	//ТЧ ОС
	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	//ТЧ Товары
	РеквизитыТабТМЗ = "ОсновноеСредство, Склад, Номенклатура, Сумма, СчетУчетаБУ"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", Новый Структура(РеквизитыТабТМЗ), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьТаблицуПоОС(ТаблицаПоОС, Отказ, Заголовок)
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		
		Если СтрокаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> снято с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет учета (БУ).",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если ((СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ) <> 0) Тогда 
			Если НЕ ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указан счет начисления амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаОС.Направление_БУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <"+СтрокаОС.ОсновноеСредство+"> код <" + СокрЛП(СтрокаОС.Код) + "> не указаны способы отражения расходов по амортизации (БУ).",,, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СоставОС 
//
Процедура ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента)
	
	//формируем список ОС, по которым необходимо осущестывить контроль их вхождения в какие-либо комплекты
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос   = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("СостояниеВСоставеОС", Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставОССрезПоследних.ОсновноеСредство,
	               |	СоставОССрезПоследних.ВСоставеОС
	               |ИЗ
	               |	РегистрСведений.СоставОС.СрезПоследних(
	               |		&Дата,
	               |		ОсновноеСредство В (&СписокОС)
	               |			И СостояниеВСоставеОС = &СостояниеВСоставеОС) КАК СоставОССрезПоследних";
	
				   
				   
    НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка 		 = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период              = СтруктураШапкиДокумента.Дата;
			НоваяСтрока.Активность          = Истина;
			НоваяСтрока.ОсновноеСредство    = Выборка.ОсновноеСредство;
			НоваяСтрока.ВСоставеОС          = Выборка.ВСоставеОС;
			НоваяСтрока.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ИсключеноИзСостава;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

//Процедура закрывает имеющиеся суммы резерва по переоценкам ОС по бух. учету и гасит не закрытые партии переоценок в регистре ПереоценкаВнеоборотныхАктивов
//
Процедура ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ПереоценкаВА   = Движения.ПереоценкаВнеоборотныхАктивов;	
	ПроводкиБУ     = Движения.Типовой;
	СписокОС       = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//выбираем имеющиеся суммы резерва 
	ЗапросРезервыПоПереоценкеОС = Новый Запрос;
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Организация"			 , ТекОрганизация);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СписокОС"			  , СписокОС);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Период"				  , ДатаДока);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СчетРезерваПереоценки", ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств);
	
	ЗапросРезервыПоПереоценкеОС.Текст = "ВЫБРАТЬ
	                                    |	ТиповойОстатки.Субконто1,
	                                    |	ТиповойОстатки.СуммаОстатокКт
	                                    |ИЗ
	                                    |	РегистрБухгалтерии.Типовой.Остатки(
	                                    |		&Период,
	                                    |		Счет = &СчетРезерваПереоценки,
	                                    |		,
	                                    |		Организация = &Организация И СтруктурноеПодразделение  = &СтруктурноеПодразделение
	                                    |			И Субконто1 В (&СписокОС)) КАК ТиповойОстатки";  
	
										
										
	ЗапросОстаткиПереоценокВА = Новый Запрос;
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Организация"			   , ТекОрганизация);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СписокОС", СписокОС);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Период"  , ДатаДока);
	
	ЗапросОстаткиПереоценокВА.Текст = "ВЫБРАТЬ
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток
	                                  |ИЗ
	                                  |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	                                  |		&Период,
	                                  |		ВнеоборотныйАктив В (&СписокОС)
	                                  |		    И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки";	
	
									  
	//закрываем резерв переоценок по бух. учету								  
	РезервыПоПереоценкеОС = ЗапросРезервыПоПереоценкеОС.Выполнить().Выбрать();								  
	
	Пока РезервыПоПереоценкеОС.Следующий() Цикл
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = ТекОрганизация;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Проводка.Содержание   = "Закрытие резерва переоценки";
		Проводка.НомерЖурнала = "ОС";
		Проводка.Сумма        = РезервыПоПереоценкеОС.СуммаОстатокКт;
		
		Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", РезервыПоПереоценкеОС.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
		
		Проводка.СчетКт = ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоГода;
		
	КонецЦикла;
	
	//гасим остатки по переоценкам в регистре ПереоценкаВнеоборотныхАктивов, для того чтобы вывести ресурсы в 0 
	ОстаткиПереоценокВА = ЗапросОстаткиПереоценокВА.Выполнить().Выбрать();								  
	Пока ОстаткиПереоценокВА.Следующий() Цикл
		
		ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
		ДвижениеПереоценкаВА.Период			   		  = ДатаДока;
		ДвижениеПереоценкаВА.Организация 	    	  = ТекОрганизация;
		ДвижениеПереоценкаВА.СтруктурноеПодразделение = СтруктурноеПодразделение;
		
		ДвижениеПереоценкаВА.ВнеоборотныйАктив  = ОстаткиПереоценокВА.ВнеоборотныйАктив;
		ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
		
		Если ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			ДвижениеПереоценкаВА.ВидДвижения 				= ВидДвиженияНакопления.Расход; 		
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			ДвижениеПереоценкаВА.ВидДвижения 				= ВидДвиженияНакопления.Приход; 			
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;
		
	КонецЦикла;//Пока ОстаткиПереоценокВА.Следующий() Цикл
	
КонецПроцедуры //ЗакрытиеПереоценокОС	

// Снимает основное средство с учета по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС)
	Для каждого СтрокаОС из ТаблицаПоОс Цикл
		Если СтрокаОС.СнятьСучетапоНалогам Тогда
			// Снимаем с учета по налогу на имущество
			Если СтрокаОС.ОбъектИмущественногоНалога Тогда
				Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
				Движение.Период 			   = СтруктураШапкиДокумента.Дата;
				Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
				Движение.НачислятьНалог 	   = Ложь;		
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога,
																								СтруктураШапкиДокумента.Организация,
																								глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																								Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					
					Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаИмущественногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				КонецЕсли;

			КонецЕсли;
			// Снимаем с учета по налогу на транспорт
			Если СтрокаОС.ОбъектТранспортногоНалога Тогда
				Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
				Движение.Период 			   = СтруктураШапкиДокумента.Дата;
				Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
				Движение.НачислятьНалог 	   = Ложь;				
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога,
																								СтруктураШапкиДокумента.Организация,
																								глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																								Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					
					Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаТранспортногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				КонецЕсли;
			КонецЕсли;
			// Снимаем с учета по земельному налогу
			Если СтрокаОС.ОбъектЗемельногоНалога Тогда
				Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
				Движение.Период 			   = СтруктураШапкиДокумента.Дата;
				Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
				Движение.НачислятьНалог 	   = Ложь;			
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога,
																								СтруктураШапкиДокумента.Организация,
																								глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																								Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					
					Движение.СтруктурнаяЕдиница = СтрокаОС.СтруктурнаяЕдиницаЗемельногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		                  			
	КонецЦикла;	
	
КонецПроцедуры	

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаПоТоварам, Отказ, Заголовок)

	ДатаДока       				= Дата;
	ТекОрганизация			 	= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
    НомерЖурнала   				= "ОС";
	
	СостояниеОС             = Движения.СостоянияОСОрганизаций;
	СобытияОС               = Движения.СобытияОСОрганизаций;
	НачислениеАмортизацииБУ = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ПроводкиБУ              = Движения.Типовой;
	ПроводкиНУ				= Движения.Налоговый;
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата);
	ВедетсяАналитУчетОсПоМОЛ 			= УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата);

	// Подготовим таблицу с данными по амортизации для начисления амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("СтруктурноеПодразделение"	 , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации"	 , Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета"				 , Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма"						 , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива", Новый ОписаниеТипов("Булево"));	
	ТабАмортизации.Колонки.Добавить("ТекущееПодразделение"		 , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("ТекущийМОЛ"				 , Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		Если  СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
			 
			НоваяСтрока = ТабАмортизации.Добавить();
			НоваяСтрока.СтруктурноеПодразделение	= СтруктурноеПодразделение;
			НоваяСтрока.Сумма                  		= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            		= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 		= СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        		= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ПризнакФиксированногоАктива = СтрокаОС.ПризнакФА;
			НоваяСтрока.ТекущееПодразделение		= СтрокаОС.ТекущееПодразделение;
			НоваяСтрока.ТекущийМОЛ					= СтрокаОС.МОЛОрганизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", НомерЖурнала);

	МоментДокумента = Новый МоментВремени(Дата, Ссылка);
	ТабЗнач 		= УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуОС(Организация, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), МоментДокумента, КонецМесяца(Дата));
		
	// Создание движений документа по БУ
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Проверим вся ли остаточная стоимость списывается, и в зависимости от этого будем формировать движения по рег. "СостоянияОСОрганизаций"
		СтрокаТЗ = ТабЗнач.Найти(ТекОС, "ОС_БУ");
		
		Если СтрокаТЧ.СтоимостьБУ = СтрокаТЗ.СтоимостьБУ Тогда
			// Движения по регистру СостоянияОСОрганизаций
			Движение = СостояниеОС.Добавить();
			
			Движение.Период			  		  = ДатаДока;
			Движение.ДатаСостояния  		  = ДатаДока;
			Движение.ОсновноеСредство		  = ТекОС;
			Движение.Организация    		  = ТекОрганизация;
			Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
			Движение.Состояние				  = Перечисления.ВидыСостоянийОС.СнятоСУчета;
			
		КонецЕсли;	
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = СобытияОС.Добавить();
		
		Движение.Период          		  = ДатаДока;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация     		  = СтруктураШапкиДокумента.Организация;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		Движение.Событие        		  = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента  		  = СтруктураШапкиДокумента.Номер;
	
		// Движения по регистру НачислениеАмортизации
		Движение = НачислениеАмортизацииБУ.Добавить();
			
		Движение.Период             	  = ДатаДока;
		Движение.ОсновноеСредство   	  = ТекОС;
		Движение.Организация        	  = ТекОрганизация;
		Движение.НачислятьАмортизацию	  = Ложь;
		Движение.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
		
		//списание амортизации
		СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;

		Если  СтруктураШапкиДокумента.СчетЗатратБУ = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств Тогда
			//Передача представительствам
			//передача амортизации
			СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
			
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = ТекОрганизация;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
				Проводка.Содержание   = "Передана амортизация";
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Если ВедетсяАналитУчетОсПоПодразделениям Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
				КонецЕсли;
				Если ВедетсяАналитУчетОсПоМОЛ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
				КонецЕсли;			
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетЗатратБУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоЗатратБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоЗатратБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоЗатратБУ3);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
			КонецЕсли;

			
			//Передача стоимости
			СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
	
			Если СуммаПроводки <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = Дата;
				Проводка.Организация  = ТекОрганизация;
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Проводка.Содержание   = "Передана стоимость";
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Сумма        = СуммаПроводки;
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетЗатратБУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратБУ3);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
				Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
				Если ВедетсяАналитУчетОсПоПодразделениям Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
				КонецЕсли;
				Если ВедетсяАналитУчетОсПоМОЛ Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
				КонецЕсли;
			КонецЕсли;
		Иначе //списание ОС
		//Если СуммаПроводки <> 0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.Содержание   = "Списана амортизация";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;
				
			Проводка.СчетДт = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
			КонецЕсли;
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
			КонецЕсли;			
		КонецЕсли;
		
		//списание остаточной стоимости
    	СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
 		
		Если СуммаПроводки <> 0 Тогда

			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = ТекОрганизация;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.Содержание   = "Списана ост. стоимость";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СуммаПроводки;

			Проводка.СчетДт = СтруктураШапкиДокумента.СчетЗатратБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратБУ3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);

			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаТЧ.ТекущееПодразделение);
			КонецЕсли;
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТЧ.МОЛОрганизации);
			КонецЕсли;
			// В налоговом учете отражается временная разница на сумму списания балансовой стоимости			
			СоответствиеСчетовСтоимостиФА = Новый Соответствие;
			СоответствиеСчетовСтоимостиФА.Вставить(СтрокаТЧ.СчетУчетаБУ, ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС,ТекОрганизация,Дата, СтрокаТЧ.ПризнакФА));
			
			ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, Проводка, Движения.Налоговый, СуммаПроводки, Истина, СоответствиеСчетовСтоимостиФА);						
						
		КонецЕсли;

	КонецЦикла;	//Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Дата, ТекОрганизация, Движения.СостоянияОСОрганизаций,Отказ,Заголовок);
	
	ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	
	//оприходование ТМЗ, по результатам списания ОС
	Для Каждого СтрокаТЧ из  ТаблицаПоТоварам Цикл
		
		Проводка = ПроводкиБУ.Добавить();
			
		Проводка.Период       = Дата;
		Проводка.Организация  = ТекОрганизация;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Проводка.Содержание   = "Оприходование ТМЗ";
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Сумма        = СтрокаТЧ.Сумма;
        Проводка.КоличествоДт = СтрокаТЧ.Количество;
		
		Проводка.СчетДт	= СтрокаТЧ.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТЧ.Номенклатура, Истина, Заголовок);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады", СтрокаТЧ.Склад);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка);
		
		Проводка.СчетКт = СтруктураШапкиДокумента.СчетДоходовБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходовБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходовБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходовБУ3);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтрокаТЧ.ОсновноеСредство);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТЧ.ОсновноеСредство);
		
	КонецЦикла; //Для Каждого СтрокаТЧ из  ТаблицаПоТоварам Цикл
	
КонецПроцедуры

// Движения по регистру "ФиксированныеАктивыУчитываемыеОтдельно"
//
Процедура ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрФА)
	
	// фиксируем выбытие только того актива, который выбывает, не включившись в состав группы
	ПризнакОтдельногоУчета = СтрФА.ПризнакВыделенногоУчетаФА;
	
	Если Не ПризнакОтдельногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
	
	Движение.Период 			= СтруктураШапкиДокумента.Дата;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив = СтрФА.ОсновноеСредство;
	Движение.ВидЛьготыФА 		= СтрФА.ВидЛьготыФА;
	Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;
	
КонецПроцедуры // ДвиженияПоРегиструФАУчитываемыеОтдельно()

// Выполняет движения по регистрам Налогового учета
//
Процедура ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, ТаблицаФА, ТаблицаСтоимости, ТаблицаПоТоварам, Отказ, Заголовок)	
	
	Для Каждого СтрФА из ТаблицаФА Цикл
		Если СтрФА.СнятьСУчетаПоНалогам Тогда
			Если СтрФА.ПризнакФА Тогда
				// Если объект выбыл полностью и снят с учета
				// Движения по регистру ОбъектыНалоговогоУчетаФА
				Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
				Движение.Период               		   = СтруктураШапкиДокумента.Дата;
				Движение.ФиксированныйАктив   		   = СтрФА.ОсновноеСредство;
				Движение.ГруппаНУ			  		   = СтрФА.ГруппаНУ;				
				Движение.Организация          		   = СтруктураШапкиДокумента.Организация;
				Движение.СостояниеФиксированногоАктива = Перечисления.ВидыСостоянийФА.Выбыл;     
				Движение.ПорядокПогашенияСтоимостиНУ   = СтрФА.ПорядокПогашенияСтоимостиНУ;
			КонецЕсли;
			
			ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента, СтрФА);			
		КонецЕсли;			

		Если (СтрФА.СтоимостьНУ <> 0) Тогда
			Если СтрФА.ПризнакФА Тогда												
				// По Фиксированным активам
				// стоимостный баланс уменьшаем на сумму списания в НУ				
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 	   = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Списание фиксированного актива";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
    				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрФА.ОсновноеСредство, Организация, Дата, СтрФА.ПризнакФА, СтрФА.ПризнакВыделенногоУчетаФА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				ПроводкаНУ.Сумма 	  = СтрФА.СтоимостьНУ;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
				
				Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
					ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);				
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
					// так как с точки зрения Дохода по НУ
					// уменьшив стоимостный баланс мы лишаем себя возможности
					// признать затраты от возмещения стоимости ФА через амортизацию
					// то сумма уменьшения стоимостного баланса образует в тек. периоде ПР
					ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;	
				КонецЕсли;        
				// ВР на сумму операции не отражавшейся в БУ
				ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ПроводкаНУ, Движения.Налоговый, - СтрФА.СтоимостьНУ);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтрФА.ПризнакФА И СтрФА.АмортизацияЗаМесяцБУ <> 0 Тогда												
				// По ВА, не подлежащим амортизации
				// списание выполняется обычным способом
				ПроводкаНУ = Движения.Налоговый.Добавить();
				ПроводкаНУ.Период 	   = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Списание внеоборотного актива";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
    			
				ПроводкаНУ.Сумма = -СтрФА.АмортизацияЗаМесяцБУ;				
				
				ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);												
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтрФА.ОсновноеСредство, Организация, Дата, СтрФА.ПризнакФА, СтрФА.ПризнакВыделенногоУчетаФА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрФА.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);
				
				// по налоговому учету				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				// ВР на сумму операции не отражавшейся в БУ
				ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ПроводкаНУ, Движения.Налоговый, СтрФА.АмортизацияЗаМесяцБУ);
		КонецЕсли;	
		
	КонецЦикла;	
	
	// списание балансовой стоимости ВА	
	// для фиксированных активов при списании списываем ПР в стоимости
	// для активов, не подлежащих амортизации - списываем всю стоимость на затраты с видом ПР	
	Для каждого СтрСтоимостногоБаланса из ТаблицаСтоимости Цикл
		Если СтрСтоимостногоБаланса.СтоимостьНУ = 0 Тогда
			Продолжить;
		КонецЕсли;	
		//Если НЕ СтрСтоимостногоБаланса.ПризнакФА  Тогда
		//	// списан выше по стоимости БУ
		//	Продолжить;
		//КонецЕсли;	
		
		// для фиксированного актива нужно списать ПР в его стоимости
		Если СтрСтоимостногоБаланса.ПризнакФА и (СтрСтоимостногоБаланса.ВидУчетаНУ = Справочники.ВидыУчетаНУ.ВР или СтрСтоимостногоБаланса.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ) Тогда
			 Продолжить;
		КонецЕсли;			
		
		ПроводкаНУ = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период 	   = СтруктураШапкиДокумента.Дата;
		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.Содержание  = "Списание балансовой стоимости ФА";
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
    			
		Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			 //Постоянные разницы в размере балансовой стоимости актива.
			 //ПР в стоимости списываем в момент реализации ФА.
			ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);							
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);													
			ПроводкаНУ.ВидУчетаДт = ?(НЕ СтрСтоимостногоБаланса.ВидУчетаНУ.Пустая() И НЕ СтрСтоимостногоБаланса.ВидУчетаНУ.ПринадлежитЭлементу(Справочники.ВидыУчетаНУ.ПР), СтрСтоимостногоБаланса.ВидУчетаНУ, Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ);
		КонецЕсли;                                             				
				
		ПроводкаНУ.Сумма  = СтрСтоимостногоБаланса.СтоимостьНУ;
		ПроводкаНУ.СчетКт = СтрСтоимостногоБаланса.СчетУчетаНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрСтоимостногоБаланса.ВнеоборотныйАктивНУ);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
		ПроводкаНУ.ВидУчетаКт = СтрСтоимостногоБаланса.ВидУчетаНУ;			
		
		// ВР на сумму операции не отражавшейся в БУ
		ПроцедурыНалоговогоУчета.ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ПроводкаНУ, Движения.Налоговый, - СтрСтоимостногоБаланса.СтоимостьНУ);
	КонецЦикла;
	
	
	//оприходование ТМЗ, по результатам списания ОС
	Для Каждого СтрокаТЧ из  ТаблицаПоТоварам Цикл
		 ПроводкаНУ 			= Движения.Налоговый.Добавить();
         ПроводкаНУ.Период 		= СтруктураШапкиДокумента.Дата;
		 ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		 ПроводкаНУ.Содержание 	= "Оприходование ТМЗ";
		 
		 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
    			
		 ПроводкаНУ.КоличествоДт = СтрокаТЧ.Количество;
		 ПроводкаНУ.Сумма        = СтрокаТЧ.Сумма;
		 		 
		 ПроводкаНУ.СчетДт = СтрокаТЧ.СчетУчетаНУ;
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура",	СтрокаТЧ.Номенклатура, Истина , Заголовок);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады", СтрокаТЧ.Склад);
		 
		 ПроводкаНУ.СчетКт = СтруктураШапкиДокумента.СчетДоходовНУ;
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДоходовНУ1);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДоходовНУ2);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДоходовНУ3);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаТЧ.ОсновноеСредство);													
		 
		 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
	КонецЦикла;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 		   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом   = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом"	 , ВедениеУчетаВременныхРазницБалансовымМетодом);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ"					 , УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль"			 , ОрганизацияПлательщикНалогаНаПрибыль);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);

	// подготовка таб. части ОС
	// Выборка строк табличной части
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.СтруктурноеПодразделение,
			СтруктураШапкиДокумента.Организация,
			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	Иначе
		Налогоплательщик = СтруктураШапкиДокумента.Организация;
	КонецЕсли;
	
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СписаниеОСОС.ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	// получим временную таблицу
	Запрос.Выполнить();
	
	// текст подзапроса, получающий данные из временной таблицы
	СписокОС = "Выбрать ОсновноеСредство Из СписокОС";
	
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ДатаДокумента"	, Дата);
	Запрос.УстановитьПараметр("СнятоСУчета"		, Перечисления.ВидыСостоянийОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПринятыйКУчету"	, Перечисления.ВидыСостоянийФА.ПринятКУчету);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеОСОС.НомерСтроки,
	|	СписаниеОСОС.ОсновноеСредство,
	|	СписаниеОСОС.ОсновноеСредство.Код КАК Код,
	|	СписаниеОСОС.СтоимостьБУ,
	|	СписаниеОСОС.АмортизацияБУ,
	|	СписаниеОСОС.АмортизацияЗаМесяцБУ,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК Направление_БУ,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета,
	|	ВЫБОР
	|		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL ТОГДА ЛОЖЬ	ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПризнакФА, 
	|   СписаниеОСОС.СнятьСУчетаПоНалогам,
	|	ЕстьNull(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектИмущественногоНалога,
	|	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога,
	|	ЕстьNull(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектТранспортногоНалога,
	|	ОбъектыТранспортногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаТранспортногоНалога,
	|	ЕстьNull(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, Ложь) КАК ОбъектЗемельногоНалога,
	|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаЗемельногоНалога,
	|	МестонахождениеОС.Местонахождение КАК ТекущееПодразделение,
	|	МестонахождениеОС.МОЛ КАК МОЛОрганизации
	|ИЗ
	|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СчетаУчетаОССрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|					&ДатаДокумента,
	|					Организация = &Организация
	|					И ОсновноеСредство В( " + СписокОС + " )) КАК СостоянияОСОрганизацииСрезПоследних
	|		
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = &СнятоСУчета) КАК ОС_СнятыеСУчета
	|		ПО СписаниеОСОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(&ДатаДокумента, ФиксированныйАктив В (" + СписокОС + ")И Организация = &Организация И СостояниеФиксированногоАктива = &ПринятыйКУчету) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения В (" + СписокОС + ") И Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения В (" + СписокОС + ") И Налогоплательщик = &Налогоплательщик) КАК ОбъектыЗемельногоНалогаСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(&ДатаДокумента, ОбъектНалогообложения В (" + СписокОС + ") И Налогоплательщик = &Налогоплательщик) КАК ОбъектыТранспортногоНалогаСрезПоследних
	|		ПО СписаниеОСОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|		    И ОсновноеСредство В (" + СписокОС + ")) КАК МестонахождениеОС
	|		ПО СписаниеОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка";
		
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);

	// Проверим, достаточно ли данных в таблице по ОС
	ПроверитьТаблицуПоОС(ТаблицаПоОС, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		Запрос.Текст = "
						|/////////////////////////ФиксированныеАктивыУчитываемыеОтдельно///////////
						|ВЫБРАТЬ
						|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
						|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация,
						|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА
						|ПОМЕСТИТЬ ФиксированныеАктивыУчитываемыеОтдельно
					  	|ИЗ
					  	|	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
					  	|		&Дата,
					  	|			ФиксированныйАктив В (" + СписокОС + ")
					  	|			) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
					  	|ГДЕ Событие = &ПринятыйКВыделенномуУчету
						|;
						|//////////////////////////ОСНОВНОЙ ЗАПРОС////////////////////////////////
                       	|ВЫБРАТЬ
						|	СписокОС.ОсновноеСредство как ОсновноеСредство,
					   	|	СписокОС.СтоимостьНУ,
					   	|	СписокОС.СтоимостьБУ,
						|	СписокОС.АмортизацияЗаМесяцБУ,						
					   	|	СписокОС.СнятьСУчетаПоНалогам,
					   	|	ВЫБОР
					   	|		КОГДА ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL ТОГДА ЛОЖЬ	ИНАЧЕ ИСТИНА
					   	|	КОНЕЦ КАК ПризнакФА,
					   	|	ВЫБОР
					   	|		КОГДА ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА
					   	|	КОНЕЦ КАК ПризнакВыделенногоУчетаФА,
					   	|ФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА КАК ВидЛьготыФА,
						|ОбъектыНалоговогоУчетаФАСрезПоследних.ГруппаНУ КАК ГруппаНУ,						
						|ОбъектыНалоговогоУчетаФАСрезПоследних.ПорядокПогашенияСтоимостиНУ КАК ПорядокПогашенияСтоимостиНУ						
					   	|ИЗ
					   	|	(ВЫБРАТЬ
					   	|		СписаниеОСОС.ОсновноеСредство КАК ОсновноеСредство,
						|		СписаниеОСОС.СнятьСУчетаПоНалогам КАК СнятьСУчетаПоНалогам,
					   	|		СУММА(СписаниеОСОС.СтоимостьНУ) КАК СтоимостьНУ,
					   	|		СУММА(СписаниеОСОС.СтоимостьБУ) КАК СтоимостьБУ,
						|		СУММА(СписаниеОСОС.АмортизацияЗаМесяцБУ) КАК АмортизацияЗаМесяцБУ,
					   	|		СписаниеОСОС.Ссылка.Организация КАК Организация
					   	|	ИЗ
					   	|		Документ.СписаниеОС.ОС КАК СписаниеОСОС
					   	|	ГДЕ
					   	|		СписаниеОСОС.Ссылка = &Ссылка
					   	|	
					   	|	СГРУППИРОВАТЬ ПО
					   	|		СписаниеОСОС.ОсновноеСредство,
					   	|		СписаниеОСОС.СнятьСУчетаПоНалогам,
					   	|		СписаниеОСОС.Ссылка.Организация) КАК СписокОС
					   	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(&Дата, ФиксированныйАктив В (" + СписокОС + ") И СостояниеФиксированногоАктива = &ПринятыйКУчету) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
					   	|		ПО СписокОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
					   	|			И СписокОС.Организация = ОбъектыНалоговогоУчетаФАСрезПоследних.Организация
						|	ЛЕВОЕ СОЕДИНЕНИЕ ФиксированныеАктивыУчитываемыеОтдельно
						|		ПО СписокОС.ОсновноеСредство = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
						|			И СписокОС.Организация = ФиксированныеАктивыУчитываемыеОтдельно.Организация";
					   
		Запрос.УстановитьПараметр("Ссылка"					 , Ссылка);
		Запрос.УстановитьПараметр("Дата"					 , СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("ПринятыйКУчету"			 , Перечисления.ВидыСостоянийФА.ПринятКУчету);
		Запрос.УстановитьПараметр("ПринятыйКВыделенномуУчету", Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);		
		
		ТаблицаФА = Запрос.Выполнить().Выгрузить();
		// ТаблицаСтоимости
		Период = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
		ТаблицаСтоимостиВА = ПроцедурыНалоговогоУчета.ОпределитьСтоимостьНУПоСпискуВА(СтруктураШапкиДокумента.Организация, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), Период);
	КонецЕсли;	
	
	
	//подготовка таб. части Товары
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("Склад"			  , "Склад");
	СтруктураПолей.Вставить("Номенклатура"	  , "Номенклатура");
	СтруктураПолей.Вставить("Количество"  	  , "Количество");
	СтруктураПолей.Вставить("Сумма"       	  , "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ" 	  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ" 	  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("НомерГТД" 	      , "НомерГТД");
	
	// Дополним полями, нужными для регл.
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если НЕ Отказ Тогда 				
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоТоварам,Отказ, Заголовок);
		
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоТоварам, СтруктураШапкиДокумента, Движения, Отказ);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда			
			ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, ТаблицаФА, ТаблицаСтоимостиВА, ТаблицаПоТоварам, Отказ, Заголовок);	
		КонецЕсли;	
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
		ДвижениеПоРегиструСоставОС(СтруктураШапкиДокумента);
		ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мВалютаРегламентированногоУчета 			  = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 		  = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();