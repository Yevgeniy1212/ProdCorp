////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//результат запроса по табличным частям
Перем мРезультатЗапросаПоТабличнымЧастям Экспорт;  // (Регл)

//перем флаг исполнения заявки
Перем ИсполнениеЗаявки Экспорт; // (Регл)

// Признак ведения учета по видам планов закупок
Перем ВедениеУчетаПоВидамПлановЗакупок Экспорт; // экспортируемая переменная 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой 
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма заявки
	//
	Функция ПечатьЗаявки()
		
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
			КодОС			= Истина;
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкиДляКонкурса.Организация,
		|	ЗаявкиДляКонкурса.Дата,
		|	ЗаявкиДляКонкурса.Номер,
		|	ЗаявкиДляКонкурса.Ответственный
		|Из
		|	Документ.гз_ФормированиеПотребностей КАК ЗаявкиДляКонкурса
		|ГДЕ
		|	ЗаявкиДляКонкурса.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаявкиДляКонкурса.Номенклатура.Наименование КАК ТоварНаименование,
		|	ЗаявкиДляКонкурса.Сумма КАК Сумма,
		|	ЗаявкиДляКонкурса.Цена КАК Цена,
		|	ЗаявкиДляКонкурса.МестоПоставки КАК МестоПоставки,
		|	ЗаявкиДляКонкурса.Номенклатура.БазоваяЕдиницаИзмерения КАК ед,
		|	ЗаявкиДляКонкурса.Количество,
		|	ЗаявкиДляКонкурса.Номенклатура."+Колонка+" КАК КодАртикул,
		|	ЗаявкиДляКонкурса.НомерСтроки
		|Из
		|	Документ.гз_ФормированиеПотребностей.Товары КАК ЗаявкиДляКонкурса
		|ГДЕ
		|	ЗаявкиДляКонкурса.Ссылка.Ссылка = &Ссылка";
		РезЗапросаСписка = Запрос.Выполнить();
		ТаблицаПоСписку = РезЗапросаСписка.Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("Потребности");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Формирование потребностей", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Периоды");
		ОбластьМакета.Параметры.Дата 		= Док.Дата;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Сумма = 0;	
		НомСтр = 1;
		Для Каждого ВыборкаСтрокТовары Из ТаблицаПоСписку Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;   
			
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			Сумма     = Сумма + ВыборкаСтрокТовары.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итог = Сумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьЗаявки()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМакета = "Потребности" Тогда
			
			ТабДокумент = ПечатьЗаявки();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
			
		КонецЕсли;
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Формирование потребностей"));
		
	КонецПроцедуры // Печать()
	
	// Функция получения результата запроса по табличной части
	//
	Функция ПолучитьРезультатзапросаПоТЧ(Тип = "ДляЦеновыхПредложений") Экспорт
		Возврат гз_ПроцедурыОперативногоУчетаЗакупок.ПолучитьРезультатЗапросаПоНоменклатурнымПозициямКонкурснойЗаявки(Тип,ЭтотОбъект);	
	КонецФункции //ПолучитьРезультатзапросаПоТЧ()

#КонецЕсли

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Потребности","Состав закупок");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		гз_ОбщегоНазначения.мЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		МестоПоставки = Основание.МестоПоставки;
		Год = Основание.Год;
		СкопироватьТовары(Основание);
		//
		ДокументОснование = Основание.Ссылка;
		
		НовДокОсн = ДокументыОснования.Добавить();
		НовДокОсн.ДокументОснование = Основание.Ссылка;
		Если Основание.Состояние = Перечисления.гз_СостояниеДокумента.Отменена Тогда 
			Сообщить("Документ "+Основание.Ссылка+", на основании которого вводится ""Объявление о проведении государственных закупок"" имеет состояние ""Отменен""",СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПоДокументуОснования()

// Процедура формирует документы ценовых предложений поставщиков
//
Процедура СформироватьЦеновоеПредложение(Контрагент, ДатаПодачи) Экспорт
	
	гз_ПроцедурыОперативногоУчетаЗакупок.СформироватьЦеновоеПредложение(Ссылка,Контрагент,ДатаПодачи,мРезультатЗапросаПоТабличнымЧастям);
	
КонецПроцедуры //СформироватьЦеновоеПредложение()

// Процедура формирует документы ценовых предложений поставщиков
//
Процедура СформироватьПротоколВскрытияЦеновогоПредложения() Экспорт
	
	гз_ПроцедурыОперативногоУчетаЗакупок.СформироватьПротоколВскрытияЦеновогоПредложения(Ссылка);
	
КонецПроцедуры //СформироватьПротоколВскрытияЦеновогоПредложения()

// Процедура выполняет копирование строк в табличную часть документа
//
Процедура СкопироватьТовары(ДокументОснование)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(гз_ЗаказПодразделения.Количество) КАК Количество,
	               |	гз_ЗаказПодразделения.Номенклатура КАК Номенклатура,
	               |	гз_ЗаказПодразделения.МестоПоставки,
	               |	гз_ЗаказПодразделения.ПериодПоставки
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Документ.гз_ЗаказПодразделения.СоставЗаявкиТовары КАК гз_ЗаказПодразделения
	               |ГДЕ
	               |	гз_ЗаказПодразделения.Ссылка.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	гз_ЗаказПодразделения.Номенклатура,
	               |	гз_ЗаказПодразделения.МестоПоставки,
	               |	гз_ЗаказПодразделения.ПериодПоставки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Количество,
	               |	ВТ_Товары.Номенклатура,
	               |	ВТ_Товары.МестоПоставки,
	               |	ВТ_Товары.ПериодПоставки,
	               |	гз_СвойстваНоменклатуры.СпособЗакупки,
	               |	ЕСТЬNULL(гз_ЦеныЗакупаТоваровРаботУслугСрезПоследних.Цена, 0) КАК Цена,
	               |	ВТ_Товары.Количество * ЕСТЬNULL(гз_ЦеныЗакупаТоваровРаботУслугСрезПоследних.Цена, 0) КАК Сумма
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_ЦеныЗакупаТоваровРаботУслуг.СрезПоследних(
	               |				,
	               |				Организация = &Организация
	               |					И ФинансовыйГод = &Год) КАК гз_ЦеныЗакупаТоваровРаботУслугСрезПоследних
	               |		ПО ВТ_Товары.Номенклатура = гз_ЦеныЗакупаТоваровРаботУслугСрезПоследних.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_СвойстваНоменклатуры КАК гз_СвойстваНоменклатуры
	               |		ПО ВТ_Товары.Номенклатура = гз_СвойстваНоменклатуры.Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", ДокументОснование.Организация);
	Запрос.УстановитьПараметр("Год", ДокументОснование.Год);
	Товары.Загрузить(запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //СкопироватьТовары()

// Функция проверяет формирование итогов на основании данного объявления о конкурсной заявке
//
// Возвращаемое значение:
//  Истина, если итоги сформированы, иначе - ложь
//  
Функция ПроверитьФормированиеИтогов() Экспорт
	
	Запрос=новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	гз_ИтогиГосударственныхЗакупок.Ссылка
	|ИЗ
	|	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
	|ГДЕ
	|	гз_ИтогиГосударственныхЗакупок.ДокументОснование = &Ссылка
	|	И гз_ИтогиГосударственныхЗакупок.Проведен
	|";
	запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 И Не Ссылка.Пустая() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьФормированиеИтогов()

// Функция формирует выборку исполненных заявок
//
// Возвращаемое значение:
//  Выборка исполненных заявок
//  
Функция СформироватьВыборкуИсполненныхЗаявок() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Номенклатура,
				   |	гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Регистратор
				   |Из
				   |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкам
				   |ГДЕ
				   |	гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ВидДвижения = &ВидДвиженияРасход
				   |	И гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ДокументЗаявка = &ДокументЗаявка
				   |	И гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Период >= гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ДокументЗаявка.Дата
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Период";
	
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);	
	Запрос.УстановитьПараметр("ДокументЗаявка", Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //СформироватьВыборкуИсполненныхЗаявок() 

// Функция формирует выборку не закупленных позиций
//
// Возвращаемое значение:
//  Выборка невыполненных позиций
//  
Функция СформироватьВыборкуНевыполненныхПозиций() Экспорт 
	
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Организация,
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
	             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(
	             |			,
	             |			Организация = &Организация
	             |				И ДокументЗаявка = &Ссылка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки";
	запрос.УстановитьПараметр("Организация",Организация);
	запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //СформироватьВыборкуНевыполненныхПозиций()  

// Функция формирует запрос для получения таблицы цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры.
//
// Возвращаемое значение:
//  Таблица значений, содержащая колонки Номенклатура и Цена
//  
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры) Экспорт 
	
	Возврат гз_ПроцедурыОперативногоУчетаЗакупок.мПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры,Организация,Год);
	
КонецФункции //ПолучитьТаблицуЦенНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура подготавливает таблицу заявок
//
Процедура ПодготовитьТаблицуЗаявок(ТаблицаЗаявок,СтруктураШапкиДокумента)
	ТаблицаЗаявок.Колонки.Добавить("Организация");
	ТаблицаЗаявок.Колонки.Добавить("Подразделение");
	ТаблицаЗаявок.Колонки.Добавить("Состояние");
	ТаблицаЗаявок.Колонки.Добавить("Активность");
	ТаблицаЗаявок.Колонки.Добавить("Период");
	ТаблицаЗаявок.ЗаполнитьЗначения(Перечисления.гз_СостоянияЗаказа.Выполнена,"Состояние");
	ТаблицаЗаявок.ЗаполнитьЗначения(Истина,"Активность");
	ТаблицаЗаявок.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаЗаявок.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"Период");
	Для Каждого СтрокаЗаявка Из ТаблицаЗаявок Цикл
		 СтрокаЗаявка.Подразделение = СтрокаЗаявка.ДокументОснование.ПодразделениеОрганизации;
	 КонецЦикла;
	 ТаблицаЗаявок.Колонки.Найти("ДокументОснование").Имя="Заявка";
КонецПроцедуры //ПодготовитьТаблицуЗаявок()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТабЗаявки, СтруктураШапкиДокумента,Отказ, Заголовок, ТипТЧ) Экспорт
	
	Запрос = Новый Запрос;                      
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.НомерСтроки,
	                  |	ВЫБОР
	                  |		КОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки ЕСТЬ NULL 
	                  |			ТОГДА ЛОЖЬ
	                  |		ИНАЧЕ ИСТИНА
	                  |	КОНЕЦ КАК Конфликт,
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки КАК НомерСтроки1
	                  |ИЗ
	                  |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1
	                  |		ПО гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.НомерСтроки <> гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.НомерСтроки
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.Ссылка
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.Номенклатура
	                  |			И гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары1.МестоПоставки
	                  |ГДЕ
	                  |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Конфликт Тогда 
			Сообщить("В строках №" + Выборка.НомерСтроки +" и №"+Выборка.НомерСтроки1+" табличной части ""Товары"" дублируются номенклатура и место поставки!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
    	
	Если ТипТЧ = "Товары" Тогда
		РеквизитыТабЗаявки = "Номенклатура, Количество, Сумма, СпособЗакупки"; //через запятую
		ЗаполнитьРеквизитУслуга(ТабЗаявки);
	КонецЕсли;
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ТипТЧ, Новый Структура(РеквизитыТабЗаявки), Отказ, Заголовок);
КонецПроцедуры // ПроверкаРеквизитовТЧ()

//Процедура заполнения реквизита Услуга
//
Процедура ЗаполнитьРеквизитУслуга(ТЧ)
	ТЧ.Колонки.Добавить("Услуга");
	Для Каждого ТекСтрТЧ Из ТЧ Цикл
		ТекСтрТЧ.Услуга = ТекСтрТЧ.Номенклатура.Услуга;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьРеквизитУслуга()

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,  ТаблицаПоЗаявкеТовары, ТаблицаЗаявок, Отказ, Заголовок)
	ДокументЗаявка			= ЭтотОбъект.Ссылка;
	ОрганизацияДляДвижения 	= СтруктураШапкиДокумента.Организация;
	ДатаДляДвижения 		= СтруктураШапкиДокумента.Дата;
	// Движение по регистру по Товарам
	ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка);
	
	Движения.гз_СостоянияТекущихЗаявок.Загрузить(ТаблицаЗаявок);
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений регистров по ТЧ Товары
//
Процедура ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка)
	
	 СписатьГП = (Константы.гз_СпособУчетаИсполненияГодовогоПлана.Получить() = Перечисления.гз_СпособыУчетаИсполненияГодовогоПлана.ПриФормированииПотребностей);
	 // Движения по регистру сведений гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
	 
	Если СписатьГП Тогда 
		
		Если ИспользованиеВидовПлановЗакупок.Количество() > 0 Тогда 
			МассивВидовПлановЗакупок = ИспользованиеВидовПлановЗакупок.ВыгрузитьКолонку("ВидПланаЗакупок");
		Иначе 
			Запрос=новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	гз_ИспользуемыеВидыПлановЗакупокСрезПоследних.ВидПланаЗакупок
			|ИЗ
			|	РегистрСведений.гз_ИспользуемыеВидыПлановЗакупок.СрезПоследних(
			|			НачалоПериода(&Год,ГОД),
			|				Организация = &Организация) КАК гз_ИспользуемыеВидыПлановЗакупокСрезПоследних";
			Запрос.УстановитьПараметр("Год",		Год);
			Запрос.УстановитьПараметр("Организация", Организация);
			МассивВидовПлановЗакупок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПланаЗакупок");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекСтр из ТаблицаПоЗаявкеТовары Цикл
		
		Движение = Движения.гз_СформированныеПотребности.ДобавитьПриход();
		Движение.Количество				 = ТекСтр.Количество;
		Движение.МестоПоставки			 = ТекСтр.МестоПоставки;
		Движение.Номенклатура			 = ТекСтр.Номенклатура;
		Движение.Организация			 = ОрганизацияДляДвижения;
		Движение.Период					 = ДатаДляДвижения;
		Движение.Год					 = Год;
		
		Если СписатьГП Тогда 
			
			Для Каждого ВидПланаЗакупок Из МассивВидовПлановЗакупок Цикл 
				// движения по регистру гз_ДвижениеНоменклатурыПоГодовомуПлану
				Движение = Движения.гз_ДвижениеНоменклатурыПоГодовомуПлану.ДобавитьРасход();
				Движение.Год					 = Год;
				Движение.ВидПланаЗакупок		 = ВидПланаЗакупок;
				Движение.Номенклатура			 = ТекСтр.Номенклатура;
				Движение.Количество				 = ТекСтр.Количество;
				Движение.Организация			 = ОрганизацияДляДвижения;
				Движение.Сумма					 = ТекСтр.Количество * ТекСтр.Цена;
				Движение.Период					 = ДатаДляДвижения;
				Движение.СпособЗакупки			 = ТекСтр.СпособЗакупки;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
	МассивЗаказов = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	гз_РезервированиеПозицийГодовогоПланаОстатки.Заказ,
	             |	гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура,
	             |	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток
	             |ИЗ
	             |	РегистрНакопления.гз_РезервированиеПозицийГодовогоПлана.Остатки(
	             |			&Момент,
	             |			Заказ В (&МассивЗаказов)
	             |				И Номенклатура В (&МассивНоменклатуры)
	             |				И Организация = &Организация) КАК гз_РезервированиеПозицийГодовогоПланаОстатки";
	Запрос.УстановитьПараметр("Момент",		МоментВремени());
	Запрос.УстановитьПараметр("МассивЗаказов",		МассивЗаказов);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	ОтборПоНоменклатуре = Новый Структура("Номенклатура");
	СвернутыйСоставПоНоменклатуре = Товары.Выгрузить();
	СвернутыйСоставПоНоменклатуре.Свернуть("Номенклатура","Количество");
	Для Каждого НоменклатурнаяПозиция Из СвернутыйСоставПоНоменклатуре Цикл 
		Выборка.Сбросить();
		ОтборПоНоменклатуре.Номенклатура = НоменклатурнаяПозиция.Номенклатура;
		Пока Выборка.НайтиСледующий(ОтборПоНоменклатуре) Цикл 
			Если НоменклатурнаяПозиция.Количество > 0 Тогда 
				// движения по регистру гз_РезервированиеПозицийГодовогоПлана
				Движение = Движения.гз_РезервированиеПозицийГодовогоПлана.ДобавитьРасход();
				Движение.Количество 			 = ?(НоменклатурнаяПозиция.Количество >= Выборка.КоличествоОстаток,Выборка.КоличествоОстаток,НоменклатурнаяПозиция.Количество);
				Движение.Заказ					 = Выборка.Заказ;
				Движение.Номенклатура			 = Выборка.Номенклатура;
				Движение.Организация			 = ОрганизацияДляДвижения;
				Движение.Период					 = ДатаДляДвижения;
				НоменклатурнаяПозиция.Количество = НоменклатурнаяПозиция.Количество - Движение.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Движения.гз_РезервированиеПозицийГодовогоПлана.Записать();
	
КонецПроцедуры //ДвиженияПоРегистрамТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаСоставаЗаявкиТовары 	= Товары.Выгрузить();
	ТаблицаЗаявок 				= ДокументыОснования.Выгрузить();
	ТаблицаЗаявок.Свернуть("ДокументОснование");
	ПодготовитьТаблицуЗаявок(ТаблицаЗаявок,СтруктураШапкиДокумента);
	
	ПроверкаРеквизитовТЧ(ТаблицаСоставаЗаявкиТовары, СтруктураШапкиДокумента,Отказ, Заголовок, "Товары");
	
	// Проверим, не дублируются ли Номенклатура в таб.части
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСоставаЗаявкиТовары, ТаблицаЗаявок, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	СуммаДокумента = Товары.Итог("Сумма");
	
КонецПроцедуры //ПередЗаписью()

ВедениеУчетаПоВидамПлановЗакупок = Константы.гз_ВестиУчетПоВидамПлановЗакупок.Получить();
