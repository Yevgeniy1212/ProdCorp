////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем мСтруктурноеПодразделениеОрганизацияОтправитель Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция СформироватьТекстЗапроса(ДатаДок)
	
	ВедетсяАналитическийУчет = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(ДатаДок) 
		Или УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(ДатаДок);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	 |	1 КАК Количество,
	 |	ПеремещениеОСОС.НомерСтроки КАК НомерПП,
	 |	ВЫРАЗИТЬ(ПеремещениеОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
	 |	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	 |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвНомер,
	 |	ПОДСТРОКА(ПеремещениеОСОС.ОсновноеСредство.ЗаводскойНомер,1,250) КАК ЗаводскойНомер,
	 |	ПОДСТРОКА(ПеремещениеОСОС.ОсновноеСредство.НомерПаспорта,1,250) КАК НомерПаспорта,
	 |	ПеремещениеОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	 |	ПеремещениеОСОС.ПодразделениеОрганизации КАК Сдатчик,
	 |	ПеремещениеОСОС.МОЛОрганизации КАК МОЛСдатчик,
	 |	ПеремещениеОСОС.НовыйПодразделениеОрганизации КАК Получатель,
	 |	ПеремещениеОСОС.НовыйМОЛОрганизации КАК МОЛПринял, " + 
	 ?(ВедетсяАналитическийУчет, 
	 " 
	 |	ПеремещениеОСОС.СтоимостьБУ КАК НачальнаяСтоимость,
	 |	ПеремещениеОСОС.АмортизацияБУ КАК СуммаАмортизации ", 
	 "
	 |	ВЫБОР
	 |		КОГДА Стоимость.СуммаАмортизации ЕСТЬ NULL 
	 |			ТОГДА 0
	 |		ИНАЧЕ Стоимость.СуммаАмортизации
	 |	КОНЕЦ КАК СуммаАмортизации,
	 |	ВЫБОР
	 |		КОГДА Стоимость.НачальнаяСтоимость ЕСТЬ NULL 
	 |			ТОГДА 0
	 |		ИНАЧЕ Стоимость.НачальнаяСтоимость
	 |	КОНЕЦ КАК НачальнаяСтоимость ") + 
	 " 
	 |ИЗ
	 |	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	 |		ПО ПеремещениеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство " + 
	 ?(ВедетсяАналитическийУчет, "", 
	 "
	 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			ТиповойОстатки.СуммаОстатокДт КАК НачальнаяСтоимость,
	 |			ТиповойОстаткиАмортизация.СуммаОстатокКт КАК СуммаАмортизации,
	 |			ТиповойОстатки.Субконто1 КАК ОС
	 |		ИЗ
	 |			РегистрБухгалтерии.Типовой.Остатки(&Дата, Счет = &СчетОС, , ) КАК ТиповойОстатки
	 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&Дата, Счет = &СчетАмортизации, , ) КАК ТиповойОстаткиАмортизация
	 |				ПО ТиповойОстатки.Субконто1 = ТиповойОстаткиАмортизация.Субконто1) КАК Стоимость
	 |		ПО ПеремещениеОСОС.ОсновноеСредство = Стоимость.ОС ") + 
	 "
	 |ГДЕ
	 |	ПеремещениеОСОС.Ссылка = &ТекДокумент
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	НомерПП,
	 |	ОсновноеСредство";
	 
	 Возврат ТекстЗапроса;
	 
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// 
//
// Возвращаемое значение:
//  Табличный документ - Табличный документ - печатная форма накладной
//
Функция ПечатьНакладная()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ПеремещениеОС.Номер,
	              |	ПеремещениеОС.Дата,
	              |	ПеремещениеОС.Организация,
				  | ПеремещениеОС.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	              |	ПеремещениеОС.Ответственный
	              |ИЗ
	              |	Документ.ПеремещениеОС КАК ПеремещениеОС
	              |ГДЕ
	              |	ПеремещениеОС.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоОС = Новый Запрос();
	ЗапросПоОС.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоОС.УстановитьПараметр("Дата", 			 Шапка.Дата);
	ЗапросПоОС.УстановитьПараметр("Организация", 	 Шапка.Организация);
	ЗапросПоОС.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеОСОС.НомерСтроки КАК НомерСтроки,
	|	ПеремещениеОСОС.ОсновноеСредство КАК Наименование,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчета,
	|	ПеремещениеОСОС.ПодразделениеОрганизации,
	|	ПеремещениеОСОС.МОЛОрганизации,
	|	ПеремещениеОСОС.НовыйПодразделениеОрганизации,
	|	ПеремещениеОСОС.НовыйМОЛОрганизации
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО ПеремещениеОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(&Дата, Организация = &Организация) КАК СчетаУчетаОССрезПоследних
	|		ПО ПеремещениеОСОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ПеремещениеОСОС.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрок = ЗапросПоОС.Выполнить().Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеОС_Накладная";
	Макет       = ПолучитьМакет("Накладная");
	
	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	// данные Откуда
	ТаблицаМОЛ = ВыборкаСтрок.Скопировать();
	ТаблицаМОЛ.Свернуть("МОЛОрганизации");
	МОЛОткуда = "";
	
    Для Каждого СтрокаМОЛ Из ТаблицаМОЛ Цикл
		МОЛОткуда = МОЛОткуда + СокрЛП(СтрокаМОЛ.МОЛОрганизации) + Символы.ПС;  			
	КонецЦикла;	
	
	МОЛОткуда = Лев(МОЛОткуда, СтрДлина(МОЛОткуда) -1);
	
	ТаблицаПодразделение = ВыборкаСтрок.Скопировать();
	ТаблицаПодразделение.Свернуть("ПодразделениеОрганизации");
	ПодразделениеОткуда = "";
	
    Для Каждого СтрокаПодразделение Из ТаблицаПодразделение Цикл
		ПодразделениеОткуда = ПодразделениеОткуда + СокрЛП(СтрокаПодразделение.ПодразделениеОрганизации) + Символы.ПС;  			
	КонецЦикла;	
	ПодразделениеОткуда = Лев(ПодразделениеОткуда, СтрДлина(ПодразделениеОткуда) -1);
	
	// данные Куда
	ТаблицаМОЛКуда = ВыборкаСтрок.Скопировать();
	ТаблицаМОЛКуда .Свернуть("НовыйМОЛОрганизации");
	МОЛКуда = "";
	
    Для Каждого СтрокаМОЛ Из ТаблицаМОЛКуда Цикл
		МОЛКуда = МОЛКуда + СокрЛП(СтрокаМОЛ.НовыйМОЛОрганизации) + Символы.ПС;  			
	КонецЦикла;	
	
	МОЛКуда = Лев(МОЛКуда, СтрДлина(МОЛКуда) -1);
	
	ТаблицаПодразделениеКуда = ВыборкаСтрок.Скопировать();
	ТаблицаПодразделениеКуда.Свернуть("НовыйПодразделениеОрганизации");
	ПодразделениеКуда = "";
	
    Для Каждого СтрокаПодразделение Из ТаблицаПодразделениеКуда Цикл
		ПодразделениеКуда = ПодразделениеКуда + СокрЛП(СтрокаПодразделение.НовыйПодразделениеОрганизации) + Символы.ПС;  			
	КонецЦикла;	
	
	ПодразделениеКуда = Лев(ПодразделениеКуда, СтрДлина(ПодразделениеКуда) -1);
	
	ОбластьМакета.Параметры.ПодразделениеОткуда = ПодразделениеОткуда;
	ОбластьМакета.Параметры.МОЛОткуда = МОЛОткуда;
	
	ОбластьМакета.Параметры.Подразделение = ПодразделениеКуда;
	ОбластьМакета.Параметры.МОЛ = МОЛКуда;
	
	ОбластьМакета.Параметры.ТекстЗаголовок = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Накладная на перемещение ОС ", глСписокПрефиксовУзлов);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
	Для Каждого ВыборкаСтрокОС Из ВыборкаСтрок Цикл

		ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокОС) + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОС);
		ОбластьМакета.Параметры.Наименование = СокрЛП(ВыборкаСтрокОС.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;	
	
КонецФункции // ПечатьНакладная()

// Функция формирует табличный документ с печатной формой ОС-2,
// 
//
// Возвращаемое значение:
//  Табличный документ - Табличный документ - печатная форма ОС-2
//
Функция ПечатьОС2()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПеремещениеОС.Номер,
	               |	ПеремещениеОС.Дата КАК ДатаДокумента,
	               |	ПеремещениеОС.Организация,
				   |    ПеремещениеОС.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
				   |    ПеремещениеОС.СтруктурноеПодразделениеПолучатель 
	               |ИЗ
	               |	Документ.ПеремещениеОС КАК ПеремещениеОС
	               |ГДЕ
	               |	ПеремещениеОС.Ссылка = &ТекДокумент";
				   
	Док = Запрос.Выполнить().Выбрать();			   
	Док.Следующий();
				   
	ЗапросОС = Новый Запрос;
	ЗапросОС.УстановитьПараметр("ТекДокумент",     ЭтотОбъект.Ссылка);
	ЗапросОС.УстановитьПараметр("Дата",            ЭтотОбъект.Дата);
	ЗапросОС.УстановитьПараметр("СчетОс", 	   	   ПланыСчетов.Типовой.ОсновныеСредства);
	ЗапросОС.УстановитьПараметр("СчетАмортизации", ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	
	ЗапросОС.Текст = СформироватьТекстЗапроса(Дата);
	
	ТаблицаОС = ЗапросОС.Выполнить().Выгрузить();	
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	Макет = ПолучитьМакет("ОС2");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеОС_ОС2";
	
	// получим области макета
	Шапка 			 			= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 			= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 			= Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 			= Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона			= Макет.ПолучитьОбласть("ОборотнаяСторона");
	МОЛ				 			= Макет.ПолучитьОбласть("МОЛ");
	ПодписьГлавногоБухгалтера	= Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	
	//вывод шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН		     = СведенияОбОрганизации.РНН;
	Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	
	// сформируем список Подразделений сдатчиков
	ТаблицаСдатчик = ТаблицаОС.Скопировать();
	ТаблицаСдатчик.Свернуть("Сдатчик");
	
	СтрокаСдатчик = "";
	
	Для Каждого Стр Из ТаблицаСдатчик Цикл
		Если СтрокаСдатчик = "" Тогда
			СтрокаСдатчик = СтрокаСдатчик + Стр.Сдатчик;
		Иначе	
			СтрокаСдатчик = СтрокаСдатчик + ", " + Стр.Сдатчик;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСдатчик.Количество() <> 1 Тогда
		Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеОтправитель Тогда
			СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправитель.Пустая(), СтруктурноеПодразделениеОтправитель.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик); 
		КонецЕсли;					
	Иначе
		Если Стр.Сдатчик <> СтруктурноеПодразделениеОтправитель Тогда
			СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправитель.Пустая(), СтруктурноеПодразделениеОтправитель.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик)
		КонецЕсли;
	КонецЕсли;
	
	Шапка.Параметры.Сдатчик = СтрокаСдатчик;
	
	// сформируем список Подразделений получателей
	ТаблицаПолучатель = ТаблицаОС.Скопировать();
	ТаблицаПолучатель.Свернуть("Получатель");
	
	СтрокаПолучатель = "";

	Для Каждого Стр Из ТаблицаПолучатель Цикл
		Если СтрокаПолучатель = "" Тогда
			СтрокаПолучатель = СтрокаПолучатель + Стр.Получатель;
		Иначе	
			СтрокаПолучатель = СтрокаПолучатель + ", " + Стр.Получатель;
		КонецЕсли;	
	КонецЦикла;
	
	Если ТаблицаПолучатель.Количество() <> 1 Тогда
		Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеПолучатель Тогда
			СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучатель.Пустая(), СтруктурноеПодразделениеПолучатель.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель); 
		КонецЕсли;					
	Иначе
		Если Стр.Получатель <> СтруктурноеПодразделениеПолучатель Тогда
			СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучатель.Пустая(), СтруктурноеПодразделениеПолучатель.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель);
		КонецЕсли;
	КонецЕсли;
		
	Шапка.Параметры.Получатель = СтрокаПолучатель;
	
	ТабДокумент.Вывести(Шапка);
	
	//вывод заголовка таблицы
	ЗаголовокТаблицы.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	ДокументПриобретенияБУ = Неопределено;
	ДатаПриобретения 	   = '00010101';
    ИтогоПоДокументу 	   = 0;
	
	Для Каждого СтрокаОС ИЗ ТаблицаОС Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	
			
		СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= "шт";
		СтрокаТаблицы.Параметры.Количество 			= 1;
		Стоимость 									= СтрокаОС.НачальнаяСтоимость - СтрокаОС.СуммаАмортизации;
		СтрокаТаблицы.Параметры.Цена                = Стоимость;
		СтрокаТаблицы.Параметры.Всего               = Стоимость;
		
		ИтогоПоДокументу = ИтогоПоДокументу + Стоимость;
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.Поступило, Док.ДатаДокумента, ДокументПриобретенияБУ,  ДатаПриобретения);
		Если ДатаПриобретения = '00010101' Тогда
			//если не приобретали, может тогда сами выпускали, в этом случае выводим дату выпуска из карточки ОС
			СтрокаТаблицы.Параметры.ДатаПриобретения = СтрокаОС.ДатаВыпуска; 
		Иначе	
			СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения; 
		КонецЕсли;	
			
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;	
	
	// выведем итоговую строку
	Итого.Параметры.ИтогоВсего = ИтогоПоДокументу;
	ТабДокумент.Вывести(Итого);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	// вывод МОЛ
	СписокМОЛСдатчик = ТаблицаОС.Скопировать();
	СписокМОЛСдатчик.Свернуть("МОЛСдатчик");
	
	СписокМОЛ = СписокМОЛСдатчик.ВыгрузитьКолонку("МОЛСдатчик");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДокумента);
	
	ВыводитьЗаголовок = Истина;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		МОЛ.Параметры.ЗаголовокМОЛ = ?(ВыводитьЗаголовок, "Сдал", "");
		МОЛ.Параметры.Должность = СтрокаМОЛ.Должность;
		МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(МОЛ);
		
		ВыводитьЗаголовок = Ложь;
	КонецЦикла;	
	
	// Выведем материално-оветственного лица, принявшего ОС
	СписокМОЛПринял = ТаблицаОС.Скопировать();
	СписокМОЛПринял.Свернуть("МОЛПринял");
	
	СписокМОЛ = СписокМОЛПринял.ВыгрузитьКолонку("МОЛПринял");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДокумента);
	
	ВыводитьЗаголовок = Истина;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		МОЛ.Параметры.ЗаголовокМОЛ = ?(ВыводитьЗаголовок, "Принял", "");
		МОЛ.Параметры.Должность = СтрокаМОЛ.Должность;
		МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(МОЛ);
		
		ВыводитьЗаголовок = Ложь;
	КонецЦикла;	

	// Выведем подпись бухгалтера
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции	


// Функция формирует табличный документ с печатной формой ОС-2,
// 
//
// Возвращаемое значение:
//  Табличный документ - Табличный документ - печатная форма ОС-2
//
Функция ПечатьДА4() Экспорт
	
	СсылкаНаОбъект = ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", СсылкаНаОбъект);
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПеремещениеОС.Номер,
	               |	ПеремещениеОС.Дата КАК ДатаДокумента,
	               |	ПеремещениеОС.Организация,
				   |    ПеремещениеОС.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
				   |    ПеремещениеОС.СтруктурноеПодразделениеПолучатель,
				   |    ПеремещениеОС.Ответственный.ФизЛицо КАК Ответственный 
	               |ИЗ
	               |	Документ.ПеремещениеОС КАК ПеремещениеОС
	               |ГДЕ
	               |	ПеремещениеОС.Ссылка = &ТекДокумент";
				   
	Док = Запрос.Выполнить().Выбрать();			   
	Док.Следующий();
				   
	ЗапросОС = Новый Запрос;
	ЗапросОС.УстановитьПараметр("ТекДокумент"	 , СсылкаНаОбъект);
	ЗапросОС.УстановитьПараметр("Дата"			 , СсылкаНаОбъект.Дата);
	ЗапросОС.УстановитьПараметр("СчетОс"		 , ПланыСчетов.Типовой.ОсновныеСредства);
	ЗапросОС.УстановитьПараметр("СчетАмортизации", ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	
	ЗапросОС.Текст = СформироватьТекстЗапроса(СсылкаНаОбъект.Дата);
	
	ТаблицаОС = ЗапросОС.Выполнить().Выгрузить();
	
	СтруктурноеПодразделениеОтправитель = Док.СтруктурноеПодразделение;
	СтруктурноеПодразделениеПолучатель 	= Док.СтруктурноеПодразделениеПолучатель;
	СтруктурнаяЕдиницаОрганизация	    = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, СтруктурноеПодразделениеОтправитель);
	
	Макет = ПолучитьМакет("ДА4");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху        	= 0;
	ТабДокумент.ПолеСлева          	= 10;
	ТабДокумент.ПолеСнизу           = 0;
	ТабДокумент.ПолеСправа        	= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеОС_ДА4";
	
	// получим области макета
	Шапка 			 		  = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы 		  = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы 	 		  = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ИтогоТаблицы              = Макет.ПолучитьОбласть("ИтогоТаблицы");
	Итого 			 		  = Макет.ПолучитьОбласть("Итого");
	ОборотнаяСторона		  = Макет.ПолучитьОбласть("ОборотнаяСторона");
	МОЛ				 		  = Макет.ПолучитьОбласть("МОЛ");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	
	//вывод шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	   	
	Шапка.Параметры.Заполнить(Док);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь);
	Шапка.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект, глСписокПрефиксовУзлов);
	

	Стр 						  = """_____"""+"________________________ 20_____года";
	Шапка.Параметры.ДатаДокумента = ?(ЗначениеЗаполнено(Док.ДатаДокумента), Формат(Док.ДатаДокумента, "ДФ=""дд ММММ гггг 'года'"""), Стр);
	
	Если СсылкаНаОбъект.НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
		
		КолонкаПолучатель     = ТаблицаОС.Колонки.Найти("Получатель");
		КолонкаСдатчик        = ТаблицаОС.Колонки.Найти("Сдатчик");
		КолонкаСдатчик.Имя    = "";
		КолонкаПолучатель.Имя = "Сдатчик";
		КолонкаСдатчик.Имя    = "Получатель";
		
		КолонкаМОЛПолучатель     = ТаблицаОС.Колонки.Найти("МОЛПринял");
		КолонкаМОЛ               = ТаблицаОС.Колонки.Найти("МОЛСдатчик");
		КолонкаМОЛ.Имя           = "";
		КолонкаМОЛПолучатель.Имя = "МОЛСдатчик";
		КолонкаМОЛ.Имя           = "МОЛПринял";
		
	КонецЕсли;
	
	// сформируем список Подразделений сдатчиков
	ТаблицаСдатчик = ТаблицаОС.Скопировать();
	ТаблицаСдатчик.Свернуть("Сдатчик");
	
	СтрокаСдатчик = "";
	Для Каждого Стр Из ТаблицаСдатчик Цикл
		Если СтрокаСдатчик = "" Тогда
			СтрокаСдатчик = СтрокаСдатчик + Стр.Сдатчик;
		Иначе	
			СтрокаСдатчик = СтрокаСдатчик + ", " + Стр.Сдатчик;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаСдатчик.Количество() <> 1 Тогда
		Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеОтправитель Тогда
			СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправитель.Пустая(), СтруктурноеПодразделениеОтправитель.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик); 
		КонецЕсли;					
	Иначе
		Если Стр.Сдатчик <> СтруктурноеПодразделениеОтправитель Тогда
			СтрокаСдатчик = ?(НЕ СтруктурноеПодразделениеОтправитель.Пустая(), СтруктурноеПодразделениеОтправитель.НаименованиеПолное + " - " + СтрокаСдатчик, СтрокаСдатчик)
		КонецЕсли;
	КонецЕсли;
	
	Шапка.Параметры.Сдатчик = СтрокаСдатчик;
	
	// сформируем список Подразделений получателей
	ТаблицаПолучатель = ТаблицаОС.Скопировать();
	ТаблицаПолучатель.Свернуть("Получатель");
	
	СтрокаПолучатель = "";

	Для Каждого Стр Из ТаблицаПолучатель Цикл
		Если СтрокаПолучатель = "" Тогда
			СтрокаПолучатель = СтрокаПолучатель + Стр.Получатель;
		Иначе	
			СтрокаПолучатель = СтрокаПолучатель + ", " + Стр.Получатель;
		КонецЕсли;	
	КонецЦикла;
	
	Если ТаблицаПолучатель.Количество() <> 1 Тогда
		Если СтруктурнаяЕдиницаОрганизация <> СтруктурноеПодразделениеПолучатель Тогда
			СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучатель.Пустая(), СтруктурноеПодразделениеПолучатель.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель); 
		КонецЕсли;					
	Иначе
		Если Стр.Получатель <> СтруктурноеПодразделениеПолучатель Тогда
			СтрокаПолучатель = ?(НЕ СтруктурноеПодразделениеПолучатель.Пустая(), СтруктурноеПодразделениеПолучатель.НаименованиеПолное + " - " + СтрокаПолучатель, СтрокаПолучатель);
		КонецЕсли;
	КонецЕсли;
		
	Шапка.Параметры.Получатель = СтрокаПолучатель;
	
	ДанныеОтветственный			  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный, Док.ДатаДокумента);
	Шапка.Параметры.Ответственный = ДанныеОтветственный.Представление;
	
	ТабДокумент.Вывести(Шапка);
	
	//вывод заголовка таблицы
	Валюта							  = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	ДокументПриобретенияБУ = Неопределено;
	ДатаПриобретения 	   = '00010101';
    ИтогоПоДокументу 	   = 0;

	Для Каждого СтрокаОС ИЗ ТаблицаОС Цикл
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	
			
		СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
		
		СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения = "шт";
		СтрокаТаблицы.Параметры.Количество 		 = 1;
		Стоимость 								 = СтрокаОС.НачальнаяСтоимость - СтрокаОС.СуммаАмортизации;
		СтрокаТаблицы.Параметры.Цена             = Стоимость;
		СтрокаТаблицы.Параметры.Всего            = Стоимость;
		
		ИтогоПоДокументу = ИтогоПоДокументу + Стоимость;
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.Поступило, Док.ДатаДокумента, ДокументПриобретенияБУ,  ДатаПриобретения);
		Если ДатаПриобретения = '00010101' Тогда
			//если не приобретали, может тогда сами выпускали, в этом случае выводим дату выпуска из карточки ОС
			СтрокаТаблицы.Параметры.ДатаПриобретения = СтрокаОС.ДатаВыпуска; 
		Иначе	
			СтрокаТаблицы.Параметры.ДатаПриобретения = ДатаПриобретения; 
		КонецЕсли;	
			
		ТабДокумент.Вывести(СтрокаТаблицы);
		
	КонецЦикла;	
	
	// выведем итоговую строку
	Итого.Параметры.Валюта = Валюта;
	
	
	КоличествоСтрокОС = ТаблицаОС.Количество();
	Если КоличествоСтрокОС <> 0 Тогда
		Итого.Параметры.КоличествоНаименований = СтрЗаменить(ЧислоПрописью(КоличествоСтрокОС, "L=ru" ,",,,,,,,,0"), "00", "");
		Итого.Параметры.ИтогоВсегоПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоПоДокументу, Валюта);
	Иначе
		Итого.Параметры.КоличествоНаименований = "";
		Итого.Параметры.ИтогоВсегоПрописью     = "";
	КонецЕсли;
	
	
	ИтогоТаблицы.Параметры.ИтогоКоличество = КоличествоСтрокОС;
	ИтогоТаблицы.Параметры.ИтогоВсего	   = ИтогоПоДокументу;
	
	ТабДокумент.Вывести(ИтогоТаблицы);
	
	ТабДокумент.Вывести(Итого);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОборотнаяСторона);
	
	// вывод МОЛ
	СписокМОЛСдатчик = ТаблицаОС.Скопировать();
	СписокМОЛСдатчик.Свернуть("МОЛСдатчик");
	
	СписокМОЛ = СписокМОЛСдатчик.ВыгрузитьКолонку("МОЛСдатчик");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДокумента);
	
	ВыводитьЗаголовок = Истина;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		МОЛ.Параметры.ЗаголовокМОЛ		 = ?(ВыводитьЗаголовок, "Сдал:", "");
		МОЛ.Параметры.Должность			 = СтрокаМОЛ.Должность;
		МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(МОЛ);
		
		ВыводитьЗаголовок = Ложь;
	КонецЦикла;	
	
	// Выведем материално-оветственного лица, принявшего ОС
	СписокМОЛПринял = ТаблицаОС.Скопировать();
	СписокМОЛПринял.Свернуть("МОЛПринял");
	
	СписокМОЛ = СписокМОЛПринял.ВыгрузитьКолонку("МОЛПринял");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.ДатаДокумента);
	
	ВыводитьЗаголовок = Истина;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		МОЛ.Параметры.ЗаголовокМОЛ		 = ?(ВыводитьЗаголовок, "Принял:", "");
		МОЛ.Параметры.Должность			 = СтрокаМОЛ.Должность;
		МОЛ.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		ТабДокумент.Вывести(МОЛ);
		
		ВыводитьЗаголовок = Ложь;
	КонецЦикла;	

	// Выведем подпись бухгалтера
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента);
	
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;

	
КонецФункции	

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		
		ТабДокумент = ПечатьНакладная();
		
	ИначеЕсли ИмяМакета = "ОС2" Тогда	
		
		ТабДокумент = ПечатьОС2();	
			
	ИначеЕсли ИмяМакета = "ДА4" Тогда	
		
		ТабДокумент = ПечатьДА4();	
			
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная, ОС2, ДА4","Накладная на перемещение ОС", "Форма ОС-2", "Форма ДА-4 (Приказ №562)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету 
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача
	 или СтруктураШапкиДокумента.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Проверим соответствие организайий ОС и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     , СтруктураШапкиДокумента.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчет.Организация КАК Организация,
	               |	ОсновныеСредства.Код КАК Инв,
	               |	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	               |	ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.Ссылка) КАК ОсновноеСредствоПредставление
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МестонахождениеОС.Период КАК Период,
	               |			МестонахождениеОС.Регистратор КАК Регистратор,
	               |			МестонахождениеОС.НомерСтроки КАК НомерСтроки,
	               |			МестонахождениеОС.Активность КАК Активность,
	               |			МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	               |			МестонахождениеОС.Организация КАК Организация,
	               |			МестонахождениеОС.МОЛ КАК МОЛ,
	               |			МестонахождениеОС.Местонахождение КАК Местонахождение,
	               |			МестонахождениеОС.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	               |		ИЗ
	               |			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаСреза, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
	               |		ГДЕ
	               |			МестонахождениеОС.Организация = &ВыбОрганизация) КАК МестонахождениеОСБухгалтерскийУчет
	               |		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	               |ГДЕ
	               |	ОсновныеСредства.Ссылка В(&СписокОС)
	               |	И (НЕ ОсновныеСредства.ЭтоГруппа)
	               |	И МестонахождениеОСБухгалтерскийУчет.Организация ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		//Отказ = Истина;

		//Пока Выборка.Следующий() Цикл
		//	ОбщегоНазначения.СообщитьОбОшибке(("Бух.учет: Несоответствие организаций ОС """ + СокрЛП(Выборка.ОсновноеСредствоПредставление) + """ код <" + СокрЛП(Выборка.Инв) + "> и организации указанной в документе."),, Заголовок);
		//КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитов()

// Процедура подготовляет таблицу по табличной части документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПеремещениеОСОС.НомерСтроки,
	               |	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	ПеремещениеОСОС.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	ПеремещениеОСОС.МОЛОрганизации КАК МОЛОрганизации,
	               |	ПеремещениеОСОС.НовыйПодразделениеОрганизации КАК НовыйПодразделениеОрганизации,
	               |	ПеремещениеОСОС.НовыйМОЛОрганизации КАК НовыйМОЛОрганизации,
	               |	ПеремещениеОСОС.СтоимостьБУ КАК СтоимостьБУ,
	               |	ПеремещениеОСОС.АмортизацияБУ КАК АмортизацияБУ,
	               |	ПеремещениеОСОС.АмортизацияЗаМесяцБУ КАК АмортизацияЗаМесяцБУ
	               |ПОМЕСТИТЬ ПеремещениеОС
	               |ИЗ
	               |	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	               |ГДЕ
	               |	ПеремещениеОСОС.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации
	               |ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |ИЗ
	               |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ОбъектыНалоговогоУчетаФА.ФиксированныйАктив КАК Справочник.ОсновныеСредства) КАК ФиксированныйАктив,
	               |	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива В (&СостоянияФА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакФА
	               |ПОМЕСТИТЬ ОбъектыНалоговогоУчетаФА
	               |ИЗ
	               |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ВЫРАЗИТЬ(ФиксированныйАктив КАК Справочник.ОсновныеСредства) В (&СписокОС)) КАК ОбъектыНалоговогоУчетаФА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ФиксированныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение,
	               |	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ
	               |ПОМЕСТИТЬ МестонахождениеОС
	               |ИЗ
	               |	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеОС.НомерСтроки,
	               |	ПеремещениеОС.ОсновноеСредство,
	               |	ПеремещениеОС.ОсновноеСредство.Код КАК Код,
	               |	ПеремещениеОС.ПодразделениеОрганизации,
	               |	ПеремещениеОС.МОЛОрганизации,
	               |	ПеремещениеОС.НовыйПодразделениеОрганизации,
	               |	ПеремещениеОС.НовыйМОЛОрганизации,
	               |	ПеремещениеОС.СтоимостьБУ,
	               |	ПеремещениеОС.АмортизацияБУ,
	               |	ПеремещениеОС.АмортизацияЗаМесяцБУ,
	               |	ЕСТЬNULL(ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьЗемельныйНалог,
	               |	ЕСТЬNULL(ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьИмущественныйНалог,
	               |	ЕСТЬNULL(ОбъектыТранспортногоНалогаСрезПоследних.НачислятьНалог, ЛОЖЬ) КАК НачислятьТранспортныйНалог,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации КАК Направление_БУ,
	               |	ЕСТЬNULL(ОбъектыНалоговогоУчетаФА.ПризнакФА, ЛОЖЬ) КАК ПризнакФА,
	               |	ВЫБОР
	               |		КОГДА МестонахождениеОС.СтруктурноеПодразделение <> &СтруктурноеПодразделение
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СтруктурноеПодразделениеСоответствуетМестонахождению,
	               |	ВЫБОР
	               |		КОГДА МестонахождениеОС.Местонахождение <> ПеремещениеОС.ПодразделениеОрганизации
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПодразделениеСоответствуетМестонахождению,
	               |	ВЫБОР
	               |		КОГДА МестонахождениеОС.МОЛ <> ПеремещениеОС.МОЛОрганизации
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК МОЛСоответствуетМестонахождению
	               |ИЗ
	               |	ПеремещениеОС КАК ПеремещениеОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
	               |				&Дата,
	               |				Налогоплательщик = &Организация
	               |					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	               |					И ОбъектНалогообложения В (&СписокОС)) КАК ОбъектыЗемельногоНалогаСрезПоследних
	               |		ПО ПеремещениеОС.ОсновноеСредство = ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
	               |				&Дата,
	               |				Налогоплательщик = &Организация
	               |					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	               |					И ОбъектНалогообложения В (&СписокОС)) КАК ОбъектыИмущественногоНалогаСрезПоследних
	               |		ПО ПеремещениеОС.ОсновноеСредство = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога.СрезПоследних(
	               |				&Дата,
	               |				Налогоплательщик = &Организация
	               |					И ОбъектНалогообложения ССЫЛКА Справочник.ОсновныеСредства
	               |					И ОбъектНалогообложения В (&СписокОС)) КАК ОбъектыТранспортногоНалогаСрезПоследних
	               |		ПО ПеремещениеОС.ОсновноеСредство = ОбъектыТранспортногоНалогаСрезПоследних.ОбъектНалогообложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОССрезПоследних
	               |		ПО ПеремещениеОС.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ПО ПеремещениеОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыНалоговогоУчетаФА КАК ОбъектыНалоговогоУчетаФА
	               |		ПО ПеремещениеОС.ОсновноеСредство = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОС КАК МестонахождениеОС
	               |		ПО ПеремещениеОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);			   
	Запрос.УстановитьПараметр("Дата", 			СтруктураШапкиДокумента.Дата);			   
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);			   
	Запрос.УстановитьПараметр("СписокОС",		ОС.ВыгрузитьКолонку("ОсновноеСредство"));
    Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	РезультатЗапросаПоОС = Запрос.Выполнить();
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	ТаблицаПоОС.Колонки.Добавить("СтруктурноеПодразделение");
	ТаблицаПоОС.Колонки.Добавить("КорСтруктурноеПодразделение");
	ТаблицаПоОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, "СтруктурноеПодразделение");
	ТаблицаПоОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель,  "КорСтруктурноеПодразделение");
	
КонецПроцедуры	

// Процедура подготовляет таблицу по табличной части документа.
//
Процедура ПодготовитьТаблицыДокументаДляПрочихРегистров(СтруктураШапкиДокумента, ТаблицаПоОСДляПрочихРегистров)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПеремещениеОСОС.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ СписокОС
	               |ИЗ
	               |	Документ.ПеремещениеОС.ОС КАК ПеремещениеОСОС
	               |ГДЕ
	               |	ПеремещениеОСОС.Ссылка = &ДокументСсылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	               |	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения,
				   |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,
	               |	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Регистратор,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Активность,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки,
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СостоянияОСОрганизацийСрезПоследних.Период,
	               |	СостоянияОСОрганизацийСрезПоследних.Регистратор,
	               |	СостоянияОСОрганизацийСрезПоследних.НомерСтроки,
	               |	СостоянияОСОрганизацийСрезПоследних.Активность,
	               |	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство,
	               |	СостоянияОСОрганизацийСрезПоследних.Организация,
	               |	СостоянияОСОрганизацийСрезПоследних.УдалитьСостояние,
	               |	СостоянияОСОрганизацийСрезПоследних.ДатаСостояния,
	               |	СостоянияОСОрганизацийСрезПоследних.Состояние,
	               |	СостоянияОСОрганизацийСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК СостоянияОСОрганизацийСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Период,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Регистратор,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.НомерСтроки,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Активность,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовПоАмортизации,
	               |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаУчетаОССрезПоследних.Период,
	               |	СчетаУчетаОССрезПоследних.Регистратор,
	               |	СчетаУчетаОССрезПоследних.НомерСтроки,
	               |	СчетаУчетаОССрезПоследних.Активность,
	               |	СчетаУчетаОССрезПоследних.ОсновноеСредство,
	               |	СчетаУчетаОССрезПоследних.Организация,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоПриобретению,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСПоРеализации,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНДСУплаченногоНаТаможне,
	               |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаЗатратПоМодернизацииБУ,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаНУ,
	               |	СчетаУчетаОССрезПоследних.СчетДоходовОтРеализацииНУ,
	               |	СчетаУчетаОССрезПоследних.СчетСебестоимостиПриРеализацииНУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииНУ,
	               |	СчетаУчетаОССрезПоследних.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	               |	СчетаУчетаОССрезПоследних.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ,
	               |	СчетаУчетаОССрезПоследних.СтруктурноеПодразделение
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК СчетаУчетаОССрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.Организация,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СтруктурноеПодразделение,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	               |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток
	               |ИЗ
	               |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	               |			&МоментВремени,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И ВнеоборотныйАктив В
	               |					(ВЫБРАТЬ
	               |						СписокОС.ОсновноеСредство
	               |					ИЗ
	               |						СписокОС КАК СписокОС)) КАК ПереоценкаВнеоборотныхАктивовОстатки";
	
	Запрос.УстановитьПараметр("ДокументСсылка", 		Ссылка);			   
	Запрос.УстановитьПараметр("Дата", 					СтруктураШапкиДокумента.Дата);			   
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",СтруктурноеПодразделениеОтправитель);
	Запрос.УстановитьПараметр("МоментВремени", 			МоментВремени());			   
	Запрос.УстановитьПараметр("Организация", 			СтруктураШапкиДокумента.Организация);			   
	
	ТаблицаПоОСДляПрочихРегистров = Запрос.ВыполнитьПакет();
	
КонецПроцедуры	

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)

	ДатаДока = Дата;

	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	ОперацииОС                   = Движения.СобытияОСОрганизаций;

	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		// движения по регистру МестонахождениеОС формируются только в случае, если это обычное "Перемещение"
		//
		Если НЕ НачальноеЗаполнениеАналитикиНаСчетахУчетаОС ТОгда
			Движение = МестонахождениеОСОрганизаций.Добавить();
			Движение.Период           		  = ДатаДока;
			Движение.ОсновноеСредство 		  = СтрокаТЧ.ОсновноеСредство;
			Движение.Организация     		  = ОрганизацияПолучатель;
			Движение.МОЛ             		  = СтрокаТЧ.НовыйМОЛОрганизации;
			Движение.Местонахождение 		  = СтрокаТЧ.НовыйПодразделениеОрганизации;
			Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		КонецЕсли;	
			
		// Движения по регистру СобытияОСОрганизаций
		Движение = ОперацииОС.Добавить();
		Движение.Период					  = ДатаДока;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  = ОрганизацияПолучатель;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		Движение.Событие 				  = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента		  = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента			  = СтруктураШапкиДокумента.Номер;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоПрочимРегистрам(СтруктураШапкиДокумента, ТаблицаПоОСДляПрочихРегистров, Отказ)

	Если мСтруктурноеПодразделениеОрганизацияОтправитель = ОрганизацияПолучатель Тогда
		Если СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель Тогда 
			Возврат;
		КонецЕсли;  		
	КонецЕсли;
	
	ДатаДока = Дата;

	ГрафикиАмортизацииОСБухгалтерскийУчет 					 = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	НачислениеАмортизацииОСБухгалтерскийУчет 				 = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
    ПараметрыАмортизацииОСБухгалтерскийУчет 				 = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
    ПервоначальныеСведенияОСБухгалтерскийУчет 				 = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
    СостоянияОСОрганизаций 									 = Движения.СостоянияОСОрганизаций;
	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	СчетаУчетаОС 											 = Движения.СчетаУчетаОС;

	ТаблицаГрафикиАмортизацииОСБухгалтерскийУчет 				   	= ТаблицаПоОСДляПрочихРегистров[1].Выгрузить();
	ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет 				= ТаблицаПоОСДляПрочихРегистров[2].Выгрузить();
	ТаблицаПараметрыАмортизацииОСБухгалтерскийУчет 					= ТаблицаПоОСДляПрочихРегистров[3].Выгрузить();
	ТаблицаПервоначальныеСведенияОСБухгалтерскийУчет 				= ТаблицаПоОСДляПрочихРегистров[4].Выгрузить();
	ТаблицаСостоянияОСОрганизаций 									= ТаблицаПоОСДляПрочихРегистров[5].Выгрузить();
	ТаблицаСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет = ТаблицаПоОСДляПрочихРегистров[6].Выгрузить();
	ТаблицаСчетаУчетаОС 											= ТаблицаПоОСДляПрочихРегистров[7].Выгрузить();
	ТаблицаПереоценокВА												= ТаблицаПоОСДляПрочихРегистров[8].Выгрузить();
	

	Для Каждого СтрокаТЧ Из ТаблицаГрафикиАмортизацииОСБухгалтерскийУчет Цикл

		// движения по регистру ТаблицаГрафикиАмортизацииОСБухгалтерскийУчет формируются только в случае, если это обычное "Перемещение"
		
		Движение = ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период					  = ДатаДока;
		Движение.Организация		  	  = ОрганизацияПолучатель;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.ГрафикАмортизации 		  = СтрокаТЧ.ГрафикАмортизации;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет Цикл

		// движения по регистру ТаблицаНачислениеАмортизацииОСБухгалтерскийУчет формируются только в случае, если это обычное "Перемещение"
		
		Движение = НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период					  = ДатаДока;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  = ОрганизацияПолучатель;
		Движение.НачислятьАмортизацию 	  = СтрокаТЧ.НачислятьАмортизацию;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаПараметрыАмортизацииОСБухгалтерскийУчет Цикл

		// движения по регистру ТаблицаПараметрыАмортизацииОСБухгалтерскийУчет формируются только в случае, если это обычное "Перемещение"
		
		Движение = ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период					  					 = ДатаДока;
		Движение.ОсновноеСредство		  					 = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  					 = ОрганизацияПолучатель;
		Движение.СрокПолезногоИспользования 				 = СтрокаТЧ.СрокПолезногоИспользования;
		Движение.ОбъемПродукцииРабот 				  		 = СтрокаТЧ.ОбъемПродукцииРабот;
		Движение.СрокИспользованияДляВычисленияАмортизации	 = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизации;
		Движение.СтоимостьДляВычисленияАмортизации			 = СтрокаТЧ.СтоимостьДляВычисленияАмортизации;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботДляВычисленияАмортизации;
		Движение.КоэффициентАмортизации			  			 = СтрокаТЧ.КоэффициентАмортизации;
		Движение.КоэффициентУскорения			  			 = СтрокаТЧ.КоэффициентУскорения;
		Движение.ЛиквидационнаяСтоимость			  		 = СтрокаТЧ.ЛиквидационнаяСтоимость;
		Движение.СтруктурноеПодразделение			  		 = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаПервоначальныеСведенияОСБухгалтерскийУчет Цикл

		// движения по регистру ТаблицаПервоначальныеСведенияОСБухгалтерскийУчет формируются только в случае, если это обычное "Перемещение"
		
		Движение = ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период					  	 = ДатаДока;
		Движение.ОсновноеСредство		  	 = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  	 = ОрганизацияПолучатель;
		Движение.ИнвентарныйНомер 			 = СтрокаТЧ.ИнвентарныйНомер;
		Движение.СпособПоступления 			 = СтрокаТЧ.СпособПоступления;
		Движение.ПервоначальнаяСтоимость	 = СтрокаТЧ.ПервоначальнаяСтоимость;
		Движение.СпособНачисленияАмортизации = СтрокаТЧ.СпособНачисленияАмортизации;
		Движение.ПараметрВыработки			 = СтрокаТЧ.ПараметрВыработки;
		Движение.СтруктурноеПодразделение	 = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаСостоянияОСОрганизаций Цикл

		// движения по регистру ТаблицаСостоянияОСОрганизаций формируются только в случае, если это обычное "Перемещение"
		
		Движение = СостоянияОСОрганизаций.Добавить();
		Движение.Период					  = ДатаДока;
		Движение.ОсновноеСредство		  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  = ОрганизацияПолучатель;
		Движение.ДатаСостояния 			  = ДатаДока;
		Движение.Состояние 				  = СтрокаТЧ.Состояние;
		Движение.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
			
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет Цикл

		// движения по регистру ТаблицаСпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет формируются только в случае, если это обычное "Перемещение"
		
		Движение = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период					  			  = ДатаДока;
		Движение.ОсновноеСредство		  			  = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  			  = ОрганизацияПолучатель;
		Движение.СпособОтраженияРасходовПоАмортизации = СтрокаТЧ.СпособОтраженияРасходовПоАмортизации;
		Движение.СтруктурноеПодразделение 			  = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаСчетаУчетаОС Цикл

		// движения по регистру ТаблицаСчетаУчетаОС формируются только в случае, если это обычное "Перемещение"
		
		Движение = СчетаУчетаОС.Добавить();
		Движение.Период					  										   = ДатаДока;
		Движение.ОсновноеСредство		  										   = СтрокаТЧ.ОсновноеСредство;
		Движение.Организация			  										   = ОрганизацияПолучатель;
		Движение.СчетУчетаБУ 													   = СтрокаТЧ.СчетУчетаБУ;
		Движение.СчетУчетаНДСПоПриобретению 				  					   = СтрокаТЧ.СчетУчетаНДСПоПриобретению;
		Движение.СчетУчетаНДСПоРеализации		  								   = СтрокаТЧ.СчетУчетаНДСПоРеализации;
		Движение.СчетУчетаНДСУплаченногоНаТаможне			  					   = СтрокаТЧ.СчетУчетаНДСУплаченногоНаТаможне;
		Движение.СчетДоходовОтРеализацииБУ			  							   = СтрокаТЧ.СчетДоходовОтРеализацииБУ;
		Движение.СчетСебестоимостиПриРеализацииБУ			  					   = СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ;
		Движение.СчетУчетаЗатратПоМодернизацииБУ			  					   = СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ;
		Движение.СчетУчетаНУ			  										   = СтрокаТЧ.СчетУчетаНУ;
		Движение.СчетДоходовОтРеализацииНУ			  							   = СтрокаТЧ.СчетДоходовОтРеализацииНУ;
		Движение.СчетСебестоимостиПриРеализацииНУ			  					   = СтрокаТЧ.СчетСебестоимостиПриРеализацииНУ;
		Движение.СчетНачисленияАмортизацииБУ			  						   = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
		Движение.СчетНачисленияАмортизацииНУ			  						   = СтрокаТЧ.СчетНачисленияАмортизацииНУ;
		Движение.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТЧ.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		Движение.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаТЧ.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		Движение.СтруктурноеПодразделение			  							   = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;
	
КонецПроцедуры

// Отражение перемещения основного средства 
// в учете по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС)
	
	Если НачальноеЗаполнениеАналитикиНаСчетахУчетаОС ТОгда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		// Перемещаем в учете по налогу на имущество
		Если СтрокаОС.НачислятьИмущественныйНалог Тогда
			Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
			Движение.Период 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 			= ОрганизацияПолучатель;
			Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог 		= ИСТИНА;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.НовыйПодразделениеОрганизации,
																			ОрганизацияПолучатель,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.НовыйПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.НовыйПодразделениеОрганизации, ОрганизацияПолучатель);
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// Перемещаем в учете по налогу на транспорт
		Если СтрокаОС.НачислятьТранспортныйНалог Тогда
			Движение = Движения.ОбъектыТранспортногоНалога.Добавить();
			
			Движение.Период 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 			= ОрганизацияПолучатель;
			Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог 		= ИСТИНА;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.НовыйПодразделениеОрганизации,
																			ОрганизацияПолучатель,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.НовыйПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.НовыйПодразделениеОрганизации, ОрганизацияПолучатель);
				
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// Перемещаем в учете по налогу на землю
		Если СтрокаОС.НачислятьЗемельныйНалог Тогда
			Движение = Движения.ОбъектыЗемельногоНалога.Добавить();
			Движение.Период 				= СтруктураШапкиДокумента.Дата;
			Движение.Организация 			= ОрганизацияПолучатель;
			Движение.ОбъектНалогообложения 	= СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог 		= ИСТИНА;				
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				
				Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтрокаОС.НовыйПодразделениеОрганизации,
																			ОрганизацияПолучатель,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);

				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.НовыйПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.НовыйПодразделениеОрганизации, ОрганизацияПолучатель);
			Иначе
				Движение.Налогоплательщик 	= ОрганизацияПолучатель;
				Движение.СтруктурнаяЕдиница = ОрганизацияПолучатель;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	      
	
КонецПроцедуры	// ДвиженияПоРегистрамМестныхНалогов

// Формирует проводки по регистру бухгалтерии.
//
Процедура ФормированиеПроводокБУ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель Тогда
		Если Не (УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) 
			Или УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата)) Тогда
			Возврат;
		КонецЕсли;  
	КонецЕсли;
		
	РанееВедетсяАналитическийУчетОСПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(НачалоДня(Дата) - 1);
	РанееВедетсяАналитическийУчетОСПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(НачалоДня(Дата) - 1);
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	НомерЖурнала   = "ОС";
	
	// Подготовим таблицу с данными по амортизации для списания амортизации по направлениям затрат
	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТабАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТабАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	ТабАмортизации.Колонки.Добавить("ПризнакФиксированногоАктива", Новый ОписаниеТипов("Булево"));	
	ТабАмортизации.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТабАмортизации.Колонки.Добавить("ТекущийМОЛ", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТабАмортизации.Колонки.Добавить("СтруктурноеПодразделение");
	ТабАмортизации.Колонки.Добавить("КорСтруктурноеПодразделение");
		
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл

		Если СтрокаОС.АмортизацияЗаМесяцБУ > 0 Тогда
 			НоваяСтрока = ТабАмортизации.Добавить();
			НоваяСтрока.Сумма                  		= СтрокаОС.АмортизацияЗаМесяцБУ;
			НоваяСтрока.ОбъектУчета            		= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НаправлениеАмортизации 		= СтрокаОС.Направление_БУ;
			НоваяСтрока.СчетАмортизации        		= СтрокаОС.СчетНачисленияАмортизацииБУ;
			НоваяСтрока.ПризнакФиксированногоАктива = СтрокаОС.ПризнакФА;
			НоваяСтрока.ТекущееПодразделение		= СтрокаОС.ПодразделениеОрганизации;
			НоваяСтрока.ТекущийМОЛ					= СтрокаОС.МОЛОрганизации;
		КонецЕсли;

	КонецЦикла;

	ТабАмортизации.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, "СтруктурноеПодразделение");
	ТабАмортизации.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, "КорСтруктурноеПодразделение");

	// Вызов процедуры списания амортизации по направлениям.
	// Создаются движения по начислению амортизации.
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух", "ОС");
	СчетДляПерем = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств;
	
	Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаОС.ОсновноеСредство;
		
		КолонкиДокумента = СтрокаОС.Владелец().Колонки;
				
		// СТОИМОСТЬ ОС
		Если СтрокаОС.СтоимостьБУ <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Перемещение стоимости ОС";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаОС.СтоимостьБУ;
			
			Если ТекОрганизация <> ОрганизацияПолучатель И НЕ ОрганизацияПолучатель.Пустая() Тогда
				
				Проводка.СчетДт = СчетДляПерем;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Справочники.Контрагенты.НайтиПоРеквизиту("ИдентификационныйКодЛичности", ОрганизацияПолучатель.ИдентификационныйНомер));
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиОборотов", Справочники.СтатьиОборотов.НайтиПоНаименованию("основные средства"));
				
			Иначе
				
				Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
			КонецЕсли;
									
			Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					Проводка, СтрокаОС.СтруктурноеПодразделение, "Кт");
	        
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.КорСтруктурноеПодразделение, "Дт");
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.СтруктурноеПодразделение, "Дт");
			КонецЕсли;

			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
				
				Если НЕ НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.НовыйПодразделениеОрганизации);
				    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
				Если Не НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.НовыйМОЛОрганизации);
				    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ТекОрганизация <> ОрганизацияПолучатель И НЕ ОрганизацияПолучатель.Пустая() Тогда
				
				Проводка = Движения.Типовой.Добавить();
			
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = ОрганизацияПолучатель;
				Проводка.Содержание   = "Перемещение стоимости ОС";
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Сумма        = СтрокаОС.СтоимостьБУ;
				
				Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);				
							
				Проводка.СчетКт = СчетДляПерем;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Справочники.Контрагенты.НайтиПоРеквизиту("ИдентификационныйКодЛичности", ОрганизацияПолучатель.ИдентификационныйНомер));
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиОборотов", Справочники.СтатьиОборотов.НайтиПоНаименованию("основные средства"));
																			
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
						Проводка, СтрокаОС.СтруктурноеПодразделение, "Кт");
		        
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.КорСтруктурноеПодразделение, "Дт");
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.СтруктурноеПодразделение, "Дт");
				КонецЕсли;

				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
					
					Если НЕ НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.НовыйПодразделениеОрганизации);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					Иначе
						// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
						
						// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
						Если РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
					Если Не НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.НовыйМОЛОрганизации);
					    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					Иначе
						// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
						
						// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
						Если РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		// НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ОС
		Если (СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ) <> 0 Тогда
			Проводка = Движения.Типовой.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Активность   = Истина;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Перемещение накопленной амортизации ОС";
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Сумма        = СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ;
						
			Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Если ТекОрганизация <> ОрганизацияПолучатель И НЕ ОрганизацияПолучатель.Пустая() Тогда
				
				Проводка.СчетКт = СчетДляПерем;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Справочники.Контрагенты.НайтиПоРеквизиту("ИдентификационныйКодЛичности", ОрганизацияПолучатель.ИдентификационныйНомер));
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиОборотов", Справочники.СтатьиОборотов.НайтиПоНаименованию("основные средства"));
				
			Иначе
				
				Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
				
			КонецЕсли;
									
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
					Проводка, СтрокаОС.СтруктурноеПодразделение, "Дт");
								
			Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.КорСтруктурноеПодразделение, "Кт");
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.СтруктурноеПодразделение, "Кт");
			КонецЕсли;
			
			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
				Если НЕ НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.НовыйПодразделениеОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
					КонецЕсли;	
					
				КонецЕсли;	
					
			КонецЕсли;
			
			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
				Если Не НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.НовыйМОЛОрганизации);
				Иначе
					// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
	                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					
					// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
					Если РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
					КонецЕсли;
					
				КонецЕсли;		
			КонецЕсли;
			
			Если ТекОрганизация <> ОрганизацияПолучатель И НЕ ОрганизацияПолучатель.Пустая() Тогда
				
				Проводка = Движения.Типовой.Добавить();
			
				Проводка.Период       = ДатаДока;
				Проводка.Активность   = Истина;
				Проводка.Организация  = ОрганизацияПолучатель;
				Проводка.Содержание   = "Перемещение накопленной амортизации ОС";
				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Сумма        = СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ;
											
				Проводка.СчетДт = СчетДляПерем;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Справочники.Контрагенты.НайтиПоРеквизиту("ИдентификационныйКодЛичности", ОрганизацияПолучатель.ИдентификационныйНомер));
				// на тот случай если счет ОС, имеет субконто "Внеоборотные активы" а не "Основные средства", н-р счет 1510
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиОборотов", Справочники.СтатьиОборотов.НайтиПоНаименованию("основные средства"));
					
				Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
													
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(
						Проводка, СтрокаОС.СтруктурноеПодразделение, "Дт");
									
				Если НЕ КолонкиДокумента.Найти("КорСтруктурноеПодразделение") = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.КорСтруктурноеПодразделение, "Кт");
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.СтруктурноеПодразделение, "Кт");
				КонецЕсли;
				
				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
					Если НЕ НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.НовыйПодразделениеОрганизации);
					Иначе
						// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
						
						// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
						Если РанееВедетсяАналитическийУчетОСПоПодразделениям Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
						КонецЕсли;	
						
					КонецЕсли;	
						
				КонецЕсли;
				
				Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
					Если Не НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.НовыйМОЛОрганизации);
					Иначе
						// при НачальноеЗаполнениеАналитикиОС в аналитку "куда" записываются текущие данные
		                ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
						
						// аналитика "откуда" тоже заполняется тек. данными, если до оформления уже была включен соответствующий аналит. учет
						Если РанееВедетсяАналитическийУчетОСПоМОЛ Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛОрганизации);
						КонецЕсли;
						
					КонецЕсли;		
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ОС";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	
		
	Если Не НачальноеЗаполнениеАналитикиНаСчетахУчетаОС Тогда
		СтруктураОбязательныхПолей.Вставить("НовыйПодразделениеОрганизации");
		СтруктураОбязательныхПолей.Вставить("НовыйМОЛОрганизации");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
    
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Процедура закрывает имеющиеся суммы резерва по переоценкам ОС по бух. учету и гасит не закрытые партии переоценок в регистре ПереоценкаВнеоборотныхАктивов
//
Процедура ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель = СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	ПереоценкаВА   = Движения.ПереоценкаВнеоборотныхАктивов;	
	ПроводкиБУ     = Движения.Типовой;
	СписокОС       = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	//выбираем имеющиеся суммы резерва 
	ЗапросРезервыПоПереоценкеОС = Новый Запрос;
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
	
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СписокОС",    СписокОС);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("Период",      ДатаДока);
	ЗапросРезервыПоПереоценкеОС.УстановитьПараметр("СчетРезерваПереоценки", ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств);
	
	ЗапросРезервыПоПереоценкеОС.Текст = "ВЫБРАТЬ
	                                    |	ТиповойОстатки.Субконто1,
	                                    |	ТиповойОстатки.СуммаОстатокКт
	                                    |ИЗ
	                                    |	РегистрБухгалтерии.Типовой.Остатки(
	                                    |		&Период,
	                                    |		Счет = &СчетРезерваПереоценки,
	                                    |		,
	                                    |		Организация = &Организация И СтруктурноеПодразделение  = &СтруктурноеПодразделение
	                                    |			И Субконто1 В (&СписокОС)) КАК ТиповойОстатки";  
	
										
										
	ЗапросОстаткиПереоценокВА = Новый Запрос;
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Организация", 				ТекОрганизация);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
	
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("СписокОС",    СписокОС);
	ЗапросОстаткиПереоценокВА.УстановитьПараметр("Период",      ДатаДока);
	
	ЗапросОстаткиПереоценокВА.Текст = "ВЫБРАТЬ
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток,
	                                  |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток
	                                  |ИЗ
	                                  |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	                                  |		&Период,
	                                  |		ВнеоборотныйАктив В (&СписокОС)
	                                  |		    И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки";	
	
									  
	//закрываем резерв переоценок по бух. учету								  
	РезервыПоПереоценкеОС = ЗапросРезервыПоПереоценкеОС.Выполнить().Выбрать();								  
	
	Пока РезервыПоПереоценкеОС.Следующий() Цикл
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = ТекОрганизация;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель);

		Проводка.Содержание   = "Перемещение резерва переоценки";
		Проводка.НомерЖурнала = "ОС";
		Проводка.Сумма        = РезервыПоПереоценкеОС.СуммаОстатокКт;
		
		Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", РезервыПоПереоценкеОС.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
		
		Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", РезервыПоПереоценкеОС.Субконто1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
		
	КонецЦикла;
	
	//гасим остатки по переоценкам в регистре ПереоценкаВнеоборотныхАктивов, для того чтобы вывести ресурсы в 0 
	ОстаткиПереоценокВА = ЗапросОстаткиПереоценокВА.Выполнить().Выбрать();								  
	Пока ОстаткиПереоценокВА.Следующий() Цикл
		
		// Списание суммы переоценки по СП-отправителю
		ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
		ДвижениеПереоценкаВА.Период			   			= ДатаДока;
		ДвижениеПереоценкаВА.Организация 	    		= ТекОрганизация;
		ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель;
		
		ДвижениеПереоценкаВА.ВнеоборотныйАктив  = ОстаткиПереоценокВА.ВнеоборотныйАктив;
		ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
		
		Если ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 		
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 			
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;
		
		// Начисление суммы переоценки по СП-получателю
		ДвижениеПереоценкаВА = ПереоценкаВА.Добавить();
		ДвижениеПереоценкаВА.Период			   			= ДатаДока;
		ДвижениеПереоценкаВА.Организация 	    		= ТекОрганизация;
		ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель;
		
		ДвижениеПереоценкаВА.ВнеоборотныйАктив  = ОстаткиПереоценокВА.ВнеоборотныйАктив;
		ДвижениеПереоценкаВА.ДокументПереоценки = ОстаткиПереоценокВА.ДокументПереоценки;
		
		Если ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток > 0 Тогда
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Приход; 		
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		Иначе
			ДвижениеПереоценкаВА.ВидДвижения = ВидДвиженияНакопления.Расход; 			
			ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - ОстаткиПереоценокВА.СуммаПереоценкиСтоимостиОстаток;
			ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - ОстаткиПереоценокВА.СуммаПереоценкиАмортизацииОстаток;
		КонецЕсли;

	КонецЦикла;//Пока ОстаткиПереоценокВА.Следующий() Цикл
	
КонецПроцедуры //ЗакрытиеПереоценокОС	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	ТаблицаПоОС = Новый ТаблицаЗначений;
	
	ТаблицаПоОСДляПрочихРегистров = Новый Массив;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	СтруктураШапкиДокумента.Вставить("Организация", ?(ТипЗнч(мСтруктурноеПодразделениеОрганизацияОтправитель)=Тип("СправочникСсылка.Организации"), мСтруктурноеПодразделениеОрганизацияОтправитель, Организация));
	
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);	
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ОрганизацияПлательщикНалогаНаПрибыль или ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// поготовим таблицу по основным средствам
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС);
	
	// поготовим таблицы для остальных регистров
	ПодготовитьТаблицыДокументаДляПрочихРегистров(СтруктураШапкиДокумента, ТаблицаПоОСДляПрочихРегистров);
	
	// проверим заполнение табличной части документа
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		ЗакрытиеПереоценокОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента, ТаблицаПоОС);
		ДвиженияПоПрочимРегистрам(СтруктураШапкиДокумента, ТаблицаПоОСДляПрочихРегистров, Отказ);
		ФормированиеПроводокБУ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры


мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();