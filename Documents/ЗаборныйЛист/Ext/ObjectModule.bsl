////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК ПредставлениеОтправителя,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	|	ОтветственныеЛицаСкладОтправитель.ФизическоеЛицо КАК МОЛОтправителя,
	|	ОтветственныеЛицаСкладПолучатель.ФизическоеЛицо КАК МОЛПолучателя,
	|	ПеремещениеТоваров.Водитель КАК ПредставлениеВодителя
	|ИЗ
	|	Документ.ЗаборныйЛист КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСкладОтправитель
	|		ПО ПеремещениеТоваров.СкладОтправитель = ОтветственныеЛицаСкладОтправитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСкладПолучатель
	|		ПО ПеремещениеТоваров.СкладПолучатель = ОтветственныеЛицаСкладПолучатель.СтруктурнаяЕдиница
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ПеремещениеТоваров.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.ДатаПолучения КАК ДатаПолучения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.ДатаПолучения КАК ДатаПолучения,
	|		ПеремещениеТоваров.СчетУчета КАК СчетУчета
	|	ИЗ
	|		Документ.ЗаборныйЛист.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.ДатаПолучения,
	|		ПеремещениеТоваров.СчетУчета) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Заборный лист", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	ИтогКол = 0; ИтогСумма = 0;
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
        ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;    
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
		ИтогКол = ИтогКол + ВыборкаСтрокТовары.Количество;
		ИтогСумма = ИтогСумма + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	// Вывести подвал
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвала.Параметры.ИтогКол = ИтогКол;
	ОбластьПодвала.Параметры.ИтогСумма = ИтогСумма;
	ТабДокумент.Вывести(ОбластьПодвала);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ПредставлениеМОЛОтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.МОЛОтправителя);
	ОбластьМакета.Параметры.ПредставлениеМОЛПолучателя  = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.МОЛПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеВодители()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	|	ПеремещениеТоваров.Водитель КАК МОЛПолучателя
	|ИЗ
	|	Документ.ЗаборныйЛист КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ПеремещениеТоваров.Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ПеремещениеТоваров.ДатаПолучения КАК ДатаПолучения,
	|	ПеремещениеТоваров.ВодительОт КАК ВодительОт,
	|	ПеремещениеТоваров.АвтотранспортОт КАК Отправитель,
	|	ПеремещениеТоваров.АвтотранспортОт.Представление КАК ПредставлениеОтправителя,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.ДатаПолучения КАК ДатаПолучения,
	|		ПеремещениеТоваров.ВодительОт Как ВодительОт,
	|		ПеремещениеТоваров.АвтотранспортОт Как АвтотранспортОт,
	|		ПеремещениеТоваров.СчетУчета КАК СчетУчета
	|	ИЗ
	|		Документ.ЗаборныйЛист.ГСМОтВодителей КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.АвтотранспортОт,
	|		ПеремещениеТоваров.ВодительОт,
	|		ПеремещениеТоваров.ДатаПолучения,
	|		ПеремещениеТоваров.СчетУчета) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.СубконтоКт2) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|           И ПеремещениеТоваров.АвтотранспортОт = ДвиженияТиповой.СубконтоКт2
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("НакладнаяВодители");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Заборный лист", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	ИтогКол = 0; ИтогСумма = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
        ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		ОбластьСтроки.Параметры.ПредставлениеВодителяОт = ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаСтрокТовары.ВодительОт);
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;    
		
		ТабДокумент.Вывести(ОбластьСтроки);
		ИтогКол = ИтогКол + ВыборкаСтрокТовары.Количество;
		ИтогСумма = ИтогСумма + ?(ВыборкаСтрокТовары.Сумма = Null,0,ВыборкаСтрокТовары.Сумма);
		
	КонецЦикла;

	// Вывести подвал
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвала.Параметры.ИтогКол	 = ИтогКол;
	ОбластьПодвала.Параметры.ИтогСумма	 = ИтогСумма;
	ТабДокумент.Вывести(ОбластьПодвала);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ПредставлениеМОЛПолучателя  = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.МОЛПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Функция формирует табличный документ с печатной формой "З-6(накладная на внутреннее перемещение материалов)".
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ6()

	// сформируем запрос по данным шапки 
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ОтветственныеЛицаСрезПоследнихОтправитель.ФизическоеЛицо КАК МОЛОтправитель,
	|	ОтветственныеЛицаСрезПоследнихПолучатель.ФизическоеЛицо КАК МОЛПолучатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследнихОтправитель
	|		ПО ПеремещениеТоваров.СкладОтправитель = ОтветственныеЛицаСрезПоследнихОтправитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследнихПолучатель
	|		ПО ПеремещениеТоваров.СкладПолучатель = ОтветственныеЛицаСрезПоследнихПолучатель.СтруктурнаяЕдиница
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекДокумент";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
		
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ПеремещениеТоваров.Номенклатура.Код КАК ТоварКод,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчета КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчета) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|   СУММА(Сумма), КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	|ПО
	|	Общие
	|";
	
	ВыборкаТоварыОбщие = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЕстьТовары = ВыборкаТоварыОбщие.Следующий();
	
	ВыборкаТовары = ВыборкаТоварыОбщие.Выбрать();
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_З6";
	Макет       = ПолучитьМакет("З6");
	
	// получим области макета
	Шапка 						 = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы2			 = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ЗаголовокТаблицыДляПереноса  = Макет.ПолучитьОбласть("ЗаголовокТаблицыДляПереноса");
	СтрокаТаблицы2				 = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	Подвал						 = Макет.ПолучитьОбласть("Подвал");
	
	// Вывод шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияПоОКПО 		 = СведенияОбОрганизации.КодПоОКПО;
	Шапка.Параметры.ОрганизацияРНН 			 = СведенияОбОрганизации.РНН;
	
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.Заполнить(Док);
		
	ТабДокумент.Вывести(Шапка);
	
	// вывод таблицы
	
	//заголовок
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы2.Параметры.Валюта = Валюта;
	ТабДокумент.Вывести(ЗаголовокТаблицы2);
	ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
	
	//вывцожим строки таблицы
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
			
		КонецЕсли;
		
		СуммаТовара = ?(ВыборкаТовары.Сумма = Null, 0, ВыборкаТовары.Сумма);
		
		СтрокаТаблицы2.Параметры.Заполнить(ВыборкаТовары);
		СтрокаТаблицы2.Параметры.Количество = Формат(ВыборкаТовары.Количество, "ЧДЦ=3");
		СтрокаТаблицы2.Параметры.Сумма = Формат(СуммаТовара, "ЧДЦ=2");
		СтрокаТаблицы2.Параметры.Цена = Формат(?(ЗначениеЗаполнено(ВыборкаТовары.Количество), СуммаТовара/ВыборкаТовары.Количество, 0), "ЧДЦ=2");
		
		ТабДокумент.Вывести(СтрокаТаблицы2);
		
	КонецЦикла;	
	
	// вывод подвала
	Если ЕстьТовары Тогда
		Подвал.Параметры.КоличествоНаименований = ЧислоПрописью(ВыборкаТоварыОбщие.Номенклатура, ,",,,,,,,,0"); ;
		Подвал.Параметры.СуммаПрописью 			= ОбщегоНазначения.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ВыборкаТоварыОбщие.Сумма),ВыборкаТоварыОбщие.Сумма,0), Валюта);
	Иначе
		Подвал.Параметры.КоличествоНаименований = "_______";
		Подвал.Параметры.СуммаПрописью 			= "_________________тенге____тиын";
	КонецЕсли;
	
	//МОЛ
	ДанныеОтправителя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.МОЛОтправитель,Док.Дата);
	ДанныеПолучателя  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.МОЛПолучатель,Док.Дата);
	
	Подвал.Параметры.ДолжностьОтпустил = ДанныеОтправителя.Должность;
	Подвал.Параметры.ФИООтпустил 	   = ДанныеОтправителя.Представление;
	
	Подвал.Параметры.ДолжностьПолучил = ДанныеПолучателя.Должность;
	Подвал.Параметры.ФИОПолучил 	  = ДанныеПолучателя.Представление;
	
	ТабДокумент.Вывести(Подвал);	
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьЗ6()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ДвиженияРегистровПоОстаткам(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Операция = Движения.Типовой;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ)Тогда
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Ввод остатков ГСМ по водителю";
			Проводка.Сумма       = СтрокаТЧ.СуммаОстатка;
			Проводка.КоличествоДт= СтрокаТЧ.Количество;

			Проводка.СчетДт = СтрокаТЧ.СчетУчетаБУ;
			Проводка.СчетКт = ПланыСчетов.Типовой.Вспомогательный;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтруктураШапкиДокумента.СкладПолучатель);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Программы", СтрокаТЧ.КлассификацияРасходов);
		КонецЕсли;
		Если СтруктураШапкиДокумента.СкладПолучатель.ЯвляетсяАвтотранспортом Тогда
				
			Движение = Движения.УчетГСМ.Добавить();
			Движение.Период						= Дата;
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Движение.Организация 				= СтруктураШапкиДокумента.Организация;
			Движение.КлассификацияРасходов		= СтрокаТЧ.КлассификацияРасходов;
			Движение.Водитель					= СтруктураШапкиДокумента.Водитель;
			Движение.Автотранспорт				= СтруктураШапкиДокумента.СкладПолучатель;
			Движение.ГСМ						= СтрокаТЧ.Номенклатура;
			Движение.Количество					= СтрокаТЧ.Количество;
			Движение.Сумма						= СтрокаТЧ.СуммаОстатка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
	Иначе
		ТабДокумент = ПечатьПеремещениеВодители();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Заполняет табличную часть остатками на складе
//
//Процедура ЗаполнитьТабличнуюЧастьПоОстаткам() Экспорт

//	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
//		Сообщить("Не заполнен склад для получения остатков!");
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(Организация) Тогда
//		Сообщить("Не заполнена организация для получения остатков!");
//	КонецЕсли;
//	
//	//
//	Если НЕ ЗначениеЗаполнено(ИсточникФинансирования) Тогда
//		Сообщить("Не заполнен источник финансирования для получения остатков!");
//	КонецЕсли;

//	
//	//ЕстьУчетПоПрограммам = глЗначениеПеременной("глВедетсяУчетПоПрограммамТовары");
//	
//	Если Товары.Количество()>0 Тогда
//		Режим = РежимДиалогаВопрос.ДаНет;
//		Ответ = Вопрос("Перед заполнением табличная часть будет очищена.
//						|Продолжить?", Режим, 0);
//		Если Ответ = КодВозвратаДиалога.Да Тогда
//			Товары.Очистить();
//		Иначе
//			возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	|	ТиповойОстатки.Счет,
//  	|	ТиповойОстатки.Субконто1 КАК Номенклатура, " + 
//	//
//  	?(ЕстьУчетПоПрограммам, "ТиповойОстатки.Субконто3 КАК КлассификацияРасходов,", "") + "
//  	|	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество
//  	|ИЗ
//  	|	РегистрБухгалтерии.Типовой.Остатки(
//  	|		&Дата,
//  	|		,
//  	|		&ВидыСубконто,
//	//
//	|		Организация = &Организация И ИсточникФинансирования = &ИсточникФинансирования
//  	|			И Субконто2 = &Склад) КАК ТиповойОстатки
//	|ГДЕ ТиповойОстатки.Субконто1.ВидНоменклатуры.ГруппаТМЗ = &Топливо
//	|
//  	|СГРУППИРОВАТЬ ПО
//  	|	ТиповойОстатки.Субконто1, " +
//	//
//  	?(ЕстьУчетПоПрограммам, "ТиповойОстатки.Субконто3,", "") + "
//	|	ТиповойОстатки.Счет");
//	
//	ВидыСубконто = Новый Массив;
//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
//	//
//	Если ЕстьУчетПоПрограммам Тогда
//		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Программы);
//	КонецЕсли; 
//	Запрос.УстановитьПараметр("ИсточникФинансирования",ИсточникФинансирования);
//	Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
//	Запрос.УстановитьПараметр("Организация",Организация);
//	Запрос.УстановитьПараметр("Склад",СкладОтправитель);
//	Запрос.УстановитьПараметр("Топливо",Перечисления.ГруппыТМЗ.Топливо);
//	Запрос.УстановитьПараметр("Дата",?(ЭтоНовый(),Дата(1,1,1),Дата));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока = Товары.Добавить();
//		НоваяСтрока.Количество = Выборка.Количество;
//		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
//		НоваяСтрока.СчетУчета = Выборка.Счет;
//		НоваяСтрока.НовыйСчетУчета = Выборка.Счет;
//		НоваяСтрока.Коэффициент = 1;
//		НоваяСтрока.ЕдиницаИзмерения = Выборка.Номенклатура.БазоваяЕдиницаИзмерения;
//		//
//		Если ЕстьУчетПоПрограммам Тогда
//			НоваяСтрока.КлассификацияРасходов = Выборка.КлассификацияРасходов;
//		КонецЕсли; 
//	КонецЦикла;

//КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоостаткам()

#КонецЕсли
// Заполняет табличную часть остатками на складе
//
//Процедура ЗаполнитьТабличнуюЧастьОтВодителейПоОстаткам() Экспорт

//	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
//		Сообщить("Не заполнен авто для получения остатков!");
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(Организация) Тогда
//		Сообщить("Не заполнена организация для получения остатков!");
//	КонецЕсли;
//	
//	//
//	Если НЕ ЗначениеЗаполнено(ИсточникФинансирования) Тогда
//		Сообщить("Не заполнен источник финансирования для получения остатков!");
//	КонецЕсли;

//	
//	ЕстьУчетПоПрограммам = глЗначениеПеременной("глВедетсяУчетПоПрограммамТовары");
//	
//	Если ГСМОтВодителей.Количество()>0 Тогда
//		Режим = РежимДиалогаВопрос.ДаНет;
//		Ответ = Вопрос("Перед заполнением табличная часть будет очищена.
//						|Продолжить?", Режим, 0);
//		Если Ответ = КодВозвратаДиалога.Да Тогда
//			ГСМОтВодителей.Очистить();
//		Иначе
//			возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//				   |	УчетГСМОстатки.Автотранспорт КАК АвтотранспортОт,
//				   |	УчетГСМОстатки.Водитель КАК ВодительОт," + 
//					//
//				  	?(ЕстьУчетПоПрограммам,"УчетГСМОстатки.КлассификацияРасходов КАК КлассификацияРасходов,", "") + "
//				   |	УчетГСМОстатки.ГСМ,
//				   |	УчетГСМОстатки.КоличествоОстаток КАК Количество,
//				   |	УчетГСМОстатки.СуммаОстаток КАК Сумма
//				   |ИЗ
//				   |	РегистрНакопления.УчетГСМ.Остатки(&Дата, ) КАК УчетГСМОстатки
//				   |ГДЕ
//				   |	УчетГСМОстатки.Организация = &Организация
//				   |	И УчетГСМОстатки.ИсточникФинансирования = &ИсточникФинансирования
//				   |	И УчетГСМОстатки.Автотранспорт = &Автотранспорт
//				   |	И УчетГСМОстатки.Водитель <> &Водитель");
//	Запрос.УстановитьПараметр("Дата", 	МоментВремени());
//	Запрос.УстановитьПараметр("Организация", Организация);
//	Запрос.УстановитьПараметр("ИсточникФинансирования", ИсточникФинансирования);
//	Запрос.УстановитьПараметр("Автотранспорт", СкладПолучатель);
//	Запрос.УстановитьПараметр("Водитель", Водитель);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ГСМотВодителей.Очистить();
//		
//		НоваяСтрока = ГСМотВодителей.Добавить();
//		НоваяСтрока.Номенклатура = Выборка.ГСМ;
//		Если ЕстьУчетПоПрограммам Тогда
//			НоваяСтрока.КлассификацияРасходов    = Выборка.КлассификацияРасходов;
//		КонецЕсли; 
//		НоваяСтрока.Количество = Выборка.Количество;
//		НоваяСтрока.ВодительОт = Выборка.ВодительОт;
//		НоваяСтрока.АвтотранспортОт = Выборка.АвтотранспортОт;
//		НоваяСтрока.Коэффициент = 1;
//		НоваяСтрока.ЕдиницаИзмерения = Выборка.ГСМ.БазоваяЕдиницаИзмерения;
//		
//	КонецЦикла;			   
//	
//КонецПроцедуры // 

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДокументОснование = Основание;
		СкладОтправитель = Основание.Склад;
		Для Каждого СтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = СтрокаТовары.Количество;
			НоваяСтрока.Коэффициент = СтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.КлассификацияРасходов = СтрокаТовары.КлассификацияРасходов;
			НоваяСтрока.СчетУчета = СтрокаТовары.СчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчета = СтрокаТовары.СчетУчетаБУ;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда	
		ДокументОснование = Основание;
		СкладОтправитель = Основание.Склад;
		Для Каждого СтрокаПродукция Из Основание.Продукция Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = СтрокаПродукция.ЕдиницаИзмерения;
			НоваяСтрока.Количество = СтрокаПродукция.Количество;
			НоваяСтрока.Коэффициент = СтрокаПродукция.Коэффициент;
			НоваяСтрока.Номенклатура = СтрокаПродукция.Номенклатура;
			НоваяСтрока.КлассификацияРасходов = СтрокаПродукция.КлассификацияРасходов;
			НоваяСтрока.СчетУчета = СтрокаПродукция.Счет;
			НоваяСтрока.НовыйСчетУчета = СтрокаПродукция.Счет;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ)

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчета      = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.НовыйСчетУчета = СчетаУчетаНовые.СчетУчетаБУ;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчета      = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.НовыйСчетУчета = ПланыСчетов.Типовой.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость, З6","Перемещение ГСМ со склада", "Перемещение ГСМ от водителей");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	СчетаУчета 		= ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	СчетаУчетаНовые = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ);		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");

	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	//
	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПередачаГСМводителю.ВводНачальныхОстатковГСМПоВодителям Тогда
	     СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");
	Иначе
	     СтруктураОбязательныхПолей = Новый Структура("Организация, СкладПолучатель");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей.Вставить("СчетУчета");
	СтруктураОбязательныхПолей.Вставить("НовыйСчетУчета");

	//
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если СтруктураШапкиДокумента.СкладПолучатель.ЯвляетсяАвтотранспортом Тогда
			Если СтрокаТаблицы.Номенклатура.ВидНоменклатуры.ГруппаТМЗ <> Перечисления.ГруппыТМЗ.Топливо Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""ТМЗ"": ";
				СтрокаСообщения = "Вид номенклатуры должен относиться к группе ТМЗ ""Топливо""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, Ложь, Отказ,,"Перемещены ГСМ");
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Коэффициент"     , "Коэффициент");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчета");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ", "НовыйСчетУчета");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("КлассификацияРасходов",  "КлассификацияРасходов");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчета");
	
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3", "Ссылка");
	Если ВидОперации = Перечисления.ВидыОперацийПередачаГСМводителю.ВводНачальныхОстатковГСМПоВодителям Тогда
		СтруктураПолей.Вставить("СуммаОстатка", "СуммаОстатка");
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам 	= ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам	, СтруктураШапкиДокумента, Истина);

	// Движения по документу
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПередачаГСМводителю.ВводНачальныхОстатковГСМПоВодителям Тогда
			ДвиженияРегистровПоОстаткам(СтруктураШапкиДокумента, ТаблицаПоТоварам);
			Возврат;
		Иначе
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ГСМОтВодителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ГСМ от водителей".
 	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Коэффициент"     , "Коэффициент");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчета");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ", "НовыйСчетУчета");
	СтруктураПолей.Вставить("АвтотранспортОт" ,	"АвтотранспортОт");
	СтруктураПолей.Вставить("ВодительОт"	  ,	"ВодительОт");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("КлассификацияРасходов",  "КлассификацияРасходов");
	СтруктураПолей.Вставить("Склад",                  "АвтотранспортОт");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчета");
	
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3", "Ссылка");
	// Подготовим таблицу товаров и тары для проведения.
	РезультатЗапросаПоГСМ = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ГСМОтВодителей", СтруктураПолей);
	ТаблицаПоГСМ 	= ПодготовитьТаблицуТоваров(РезультатЗапросаПоГСМ, СтруктураШапкиДокумента);
	ТаблицаПоГСМ1 = ТаблицаПоГСМ.Скопировать();
	ТаблицаПоГСМ2 = ТаблицаПоГСМ.Скопировать();
	//перемещение между авто
	Для Каждого СтрокаТаблицы Из ТаблицаПоГСМ1 Цикл
		Если СтрокаТаблицы.АвтотранспортОт = Ссылка.СкладПолучатель Тогда
			ТаблицаПоГСМ1.Удалить(СтрокаТаблицы);
			продолжить;
		КонецЕсли;
	КонецЦикла;
	//перемещение внутри авто
	Для Каждого СтрокаТаблицы Из ТаблицаПоГСМ2 Цикл
		Если СтрокаТаблицы.АвтотранспортОт <> Ссылка.СкладПолучатель Тогда
			ТаблицаПоГСМ2.Удалить(СтрокаТаблицы);
			продолжить;
		КонецЕсли;
	КонецЦикла;
	
 	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоГСМ1, Отказ, Заголовок);
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоГСМ2, Истина, Ложь, Отказ,,"Перемещены ГСМ",,Истина);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

УчетнаяПолитикаНеЗадана = Ложь;
