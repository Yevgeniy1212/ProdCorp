
// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.КомандировкиОрганизаций") 
			ИЛИ ТипОснования = Тип("ДокументСсылка.ОтпускаОрганизаций")
			ИЛИ ТипОснования = Тип("ДокументСсылка.ТрудовыеОтпускаОрганизаций") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			
			// Заполнение табличной части. 
			Для Каждого ТекСтрока Из Основание.РаботникиОрганизации Цикл
				
				Переносить = ?(ТипОснования = Тип("ДокументСсылка.ОтпускаОрганизаций"), НЕ ТекСтрока.ПроизошедшееСобытие, ЗначениеЗаполнено(ТекСтрока.ДатаОкончания) И НЕ ТекСтрока.ПроизошедшееСобытие);
							
				Если Переносить И НЕ ТекСтрока.Сторно Тогда
					НоваяСтрока = РаботникиОрганизации.Добавить();
					НоваяСтрока.Сотрудник		= ТекСтрока.Сотрудник;
					НоваяСтрока.ФизЛицо			= ТекСтрока.ФизЛицо;
					НоваяСтрока.ДатаВозврата	= ?(НЕ ЗначениеЗаполнено(ТекСтрока.ДатаОкончания), ОбщегоНазначения.ПолучитьРабочуюДату(), ТекСтрока.ДатаОкончания + 86400);
					НоваяСтрока.ЗаниматьСтавку	= ТекСтрока.ОсвобождатьСтавку;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	Ссылка);
	Запрос.УстановитьПараметр("Организация", 		ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", 		'00010101');
	Запрос.УстановитьПараметр("РегистрацияОтпуска", Перечисления.ИспользованиеОтпусковВидСтроки.РегистрацияОтпуска);
	Запрос.УстановитьПараметр("Прием", 				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);

    ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.Ссылка,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
		|	ТЧРаботникиОрганизации.Сотрудник.Организация,
		|	ТЧРаботникиОрганизации.ДатаВозврата КАК ДатаВозврата,
		|	ТЧРаботникиОрганизации.ЗаниматьСтавку
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧРаботникиОрганизации.Сторно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаВозврата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаВозврата,
		|	ТЧРаботникиОрганизации.ЗаниматьСтавку,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		|	ДанныеПоРаботникуДоНазначения.Должность,
		|	ДанныеПоРаботникуДоНазначения.ТарифныйРазряд,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок,
		|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.ПериодЗавершения <> &ПустаяДата
		|				И СостояниеРаботников.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаВозврата
		|			ТОГДА СостояниеРаботников.СостояниеЗавершения
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК СостояниеДоВозврата,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &Организация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ПериодыОкончанияТрудовыхОтпусков.ДатаОкончания КАК ДатаОкончанияТрудовогоОтпуска,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(Работники.Период) КАК ДатаДвижения
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО Работники.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|					И (Работники.Организация = &Организация) 
		|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаВозврата
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
		|		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|			И (ДанныеПоРаботникуДоНазначения.Организация = &Организация) 
		|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник 
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки 
		|					И ТЧРаботникиОрганизации.ДатаВозврата = ТЧРаботникиОрганизации2.ДатаВозврата	
		|		
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|								ТЧРаботникиОрганизации.НомерСтроки,
		|								МАКСИМУМ(СостояниеРаботников.Период) КАК Период
		|							ИЗ
		|								ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|									ПО ТЧРаботникиОрганизации.Сотрудник = СостояниеРаботников.Сотрудник
		|										И СостояниеРаботников.Организация = &Организация
		|										И СостояниеРаботников.Период <= ТЧРаботникиОрганизации.ДатаВозврата
		|							СГРУППИРОВАТЬ ПО
		|								ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПредыдущихСостояний
		|			ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПредыдущихСостояний.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|			ПО ТЧРаботникиОрганизации.Сотрудник = СостояниеРаботников.Сотрудник
		|				И СостояниеРаботников.Организация = &Организация
		|				И ДатыПредыдущихСостояний.Период = СостояниеРаботников.Период
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|								ТрудовыеОтпуска.НомерСтроки,
		|								ТрудовыеОтпуска.Период,
		|								МАКСИМУМ(ИспользованиеОтпусков.ДатаОкончания) КАК ДатаОкончания
		|							ИЗ
		|								(ВЫБРАТЬ
		|										ТЧРаботникиОрганизации.НомерСтроки,
		|										ТЧРаботникиОрганизации.Сотрудник,
		|										МАКСИМУМ(НАЧАЛОПЕРИОДА(ИспользованиеОтпусков.Период, ДЕНЬ)) КАК Период
		|									ИЗ
		|										Документ.ВозвратНаРаботуОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|										ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
		|											ПО ТЧРаботникиОрганизации.Сотрудник = ИспользованиеОтпусков.Сотрудник
		|												И ИспользованиеОтпусков.Организация = &Организация
		|												И ИспользованиеОтпусков.Период <= КОНЕЦПЕРИОДА(ТЧРаботникиОрганизации.ДатаВозврата, ДЕНЬ)
		|												И ИспользованиеОтпусков.ВидСтроки = &РегистрацияОтпуска
		|												И НЕ ТЧРаботникиОрганизации.Сторно
		|									СГРУППИРОВАТЬ ПО
		|										ТЧРаботникиОрганизации.НомерСтроки,
		|										ТЧРаботникиОрганизации.Сотрудник,
		|										ТЧРаботникиОрганизации.ДатаВозврата) КАК ТрудовыеОтпуска
		|								
		|								ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИспользованиеОтпусковРаботникамиОрганизаций КАК ИспользованиеОтпусков
		|									ПО ТрудовыеОтпуска.Сотрудник = ИспользованиеОтпусков.Сотрудник
		|										И ИспользованиеОтпусков.Организация = &Организация
		|										И НАЧАЛОПЕРИОДА(ИспользованиеОтпусков.Период, ДЕНЬ) = ТрудовыеОтпуска.Период
		|										И ИспользованиеОтпусков.ВидСтроки = &РегистрацияОтпуска
		|
		|							СГРУППИРОВАТЬ ПО
		|								ТрудовыеОтпуска.НомерСтроки,
		|								ТрудовыеОтпуска.Период) КАК ПериодыОкончанияТрудовыхОтпусков
		|			ПО ТЧРаботникиОрганизации.НомерСтроки = ПериодыОкончанияТрудовыхОтпусков.НомерСтроки
		|				И СостояниеРаботников.Период = ПериодыОкончанияТрудовыхОтпусков.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СостояниеРаботниковОрганизации.Регистратор
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|		ПО СостояниеРаботниковОрганизации.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
		|			И (СостояниеРаботниковОрганизации.Организация = &Организация) 
		|			И СостояниеРаботниковОрганизации.Период = ТЧРаботникиОрганизации.ДатаВозврата
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, работники которой возвращаются на работу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам. 
//  Отказ        - флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

    СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
		КонецЕсли;

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаВозврата
		НетДатыВозврата = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВозврата);
		Если НетДатыВозврата Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата возврата на работу!", Отказ, Заголовок);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыВозврата Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;	

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВозврата, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		КонецЕсли; 

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	

		// Проверка: возврат из трудового отпуска оформляется только в случае его полного использования
		Если ВыборкаПоСтрокамДокумента.СостояниеДоВозврата = Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаОкончанияТрудовогоОтпуска <> NULL Тогда
				Если КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончанияТрудовогоОтпуска) + 1 <> НачалоДня(ВыборкаПоСтрокамДокумента.ДатаВозврата) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "досрочный возврат из трудового отпуска необходимо оформлять документом 'Отзыв из отпусков организаций'", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
// по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботниковОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации,  
	
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналуОрганизации)

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаВозврата;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
        Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.Состояние                  = Перечисления.СостоянияРаботникаОрганизации.Работает;
			
	КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи.
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                 накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
    ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
	Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

		// займем ставки
		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаВозврата;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ТарифныйРазряд				= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
		
		// Реквизиты
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

   КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(СтруктураПроведенияПоРегистрамНакопления);
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);

				Если НЕ Отказ И ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналуОрганизации);

					Если ВыборкаПоРаботникиОрганизации.ЗаниматьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВосстанавливатьДвижения = Ложь;
