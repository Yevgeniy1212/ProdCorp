////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//флаг вывода шапки 
Перем ВывестиШапкуПроведения;  // локальная переменная

// признак резервирования номенклатуры по годовому плану при подаче заказов
Перем мРезервированиеНоменклатурыПоГодовомуПлану Экспорт; // экспортируемая переменная

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция возвращает представление адреса по виду КИ.
	//
	// Параметры:
	//  ОбъектКИ - объект, для которого необходимо получить адрес.
	//  ВидАдреса - вид адреса, элемент справочника "Виды контактной информации"
	//
	// Возвращаемое значение:
	//  Текст - представление адреса
	//
	Функция ммПолучитьмПредставлениеАдреса()
		
		Если гз_ОбщегоНазначения.АвтономныйРежимРаботы() Тогда
			Возврат "";
		Иначе
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Объект", Организация);
			Запрос.УстановитьПараметр("Тип"   , Перечисления["ТипыКонтактнойИнформации"].Адрес);
			Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 350) КАК Представление 
			|Из
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Вид = &Вид
			|";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат "";
			Иначе
				Возврат РезультатЗапроса.Выгрузить()[0].Представление;
			КонецЕсли;
		КонецЕсли;	
	КонецФункции //ммПолучитьмПредставлениеАдреса()
	
	// Функция формирует табличный документ с печатной формой Решение
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма документа
	//
	Функция ПечатьРешения() Экспорт
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();                        
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	гз_ИтогиГосударственныхЗакупок.Организация,
		|	гз_ИтогиГосударственныхЗакупок.Комментарий,
		|	гз_ИтогиГосударственныхЗакупок.Номер,
		|	гз_ИтогиГосударственныхЗакупок.Дата,
		|	гз_ИтогиГосударственныхЗакупок.Автор
		|Из
		|	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
		|ГДЕ
		|	гз_ИтогиГосударственныхЗакупок.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Победитель КАК Победитель,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.ВторойПослеПобедителя,
		|	ВложенныйЗапрос.Цена2,
		|	ВложенныйЗапрос.Сумма КАК Сумма
		|Из
		|	(ВЫБРАТЬ
		|		гз_ИтогиГосударственныхЗакупокТовары.Номенклатура,
		|		гз_ИтогиГосударственныхЗакупокТовары.Количество,
		|		гз_ИтогиГосударственныхЗакупокТовары.Победитель,
		|		гз_ИтогиГосударственныхЗакупокТовары.Цена,
		|		гз_ИтогиГосударственныхЗакупокТовары.ВторойПослеПобедителя,
		|		гз_ИтогиГосударственныхЗакупокТовары.Цена2,
		|		гз_ИтогиГосударственныхЗакупокТовары.Количество * гз_ИтогиГосударственныхЗакупокТовары.Цена КАК Сумма
		|	Из
		|		Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары
		|	ГДЕ
		|		гз_ИтогиГосударственныхЗакупокТовары.Ссылка.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Победитель";
		
		Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Победитель");
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ИтогиГосударственныхЗакупок";
		Макет       = ПолучитьМакет("Решение");
		ОбластьЗаголовка 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтогТаблицы 		= Макет.ПолучитьОбласть("ИтогТаблицы");
		ОбластьПодвал	 		= Макет.ПолучитьОбласть("Подвал");
		ОбластьПоставщик 		= Макет.ПолучитьОбласть("СтрокаПоставщик");
		// Выводим заголовок                                       
		ОбластьЗаголовка.Параметры.Дата 			= Формат(Док.Дата, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовка.Параметры.Наименование 	= Организация.НаименованиеПолное;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда 
			ОбластьЗаголовка.Параметры.ОписаниеКонкурса = ДокументОснование.ОписаниеКонкурса;
			СпособЗакупкиДокументаОснования = ?(ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.гз_ПроведенныеЗакупки"),
			ДокументОснование.СуммаПоСпособамЗакупки[0].СпособЗакупки,ДокументОснование.СпособЗакупки);
		Иначе 
			СпособЗакупкиДокументаОснования = "";
		КонецЕсли;
		ОбластьЗаголовка.Параметры.ПочтовыйАдрес 	= СокрЛП(ммПолучитьмПредставлениеАдреса());
		
		ОбластьЗаголовка.Параметры.СпособЗакупки 	= ?(Найти(НРег(СпособЗакупкиДокументаОснования),"способом")<>0,НРег(СпособЗакупкиДокументаОснования),
														"способом """+НРег(СпособЗакупкиДокументаОснования)+"""");
		ТабДокумент.Вывести(ОбластьЗаголовка);
		Запрос=Новый Запрос; 
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
			ДатаЗакупок = Дата;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.гз_ПроведенныеЗакупки") Тогда 
			ДатаЗакупок = ДокументОснование.Дата;
		Иначе 
			ДатаЗакупок = ?(ДокументОснование.КонкурсПродлен,КонецДня(ДокументОснование.ДатаОкончанияПроведенияКонкурса)+ДокументОснование.КоличествоДнейПродления*24*60*60,КонецДня(ДокументОснование.ДатаОкончанияПроведенияКонкурса));
		КонецЕсли;
			
		Запрос.УстановитьПараметр("Дата",ДатаЗакупок);
		Запрос.УстановитьПараметр("КонкурснаяЗаявка",ДокументОснование);
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_ЦеновоеПредложениеПоставщика.Контрагент КАК Поставщик,
		             |	гз_ЦеновоеПредложениеПоставщика.Дата
		             |Из
		             |	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		             |ГДЕ
		             |	гз_ЦеновоеПредложениеПоставщика.Дата <= &Дата
		             |	И гз_ЦеновоеПредложениеПоставщика.ДокументОснование = &КонкурснаяЗаявка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьПоставщик.Параметры.Поставщик 	=Выборка.Поставщик;
			ОбластьПоставщик.Параметры.Дата 		=Формат(Выборка.Дата,"ДЛФ=DDT");
			ТабДокумент.Вывести(ОбластьПоставщик);
		КонецЦикла;
		ОбластьШапкаОтклоненные 	= Макет.ПолучитьОбласть("ШапкаОтклоненные");
		ТабДокумент.Вывести(ОбластьШапкаОтклоненные);
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Дата",ДатаЗакупок);
		Запрос.УстановитьПараметр("КонкурснаяЗаявка",ДокументОснование);
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_ЦеновоеПредложениеПоставщика.Контрагент КАК Поставщик,
		             |	гз_ЦеновоеПредложениеПоставщика.Дата
		             |Из
		             |	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		             |ГДЕ
		             |	гз_ЦеновоеПредложениеПоставщика.Дата > &Дата
		             |	И гз_ЦеновоеПредложениеПоставщика.ДокументОснование = &КонкурснаяЗаявка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьПоставщик.Параметры.Поставщик 	=Выборка.Поставщик;
			ОбластьПоставщик.Параметры.Дата 		=Формат(Выборка.Дата,"ДЛФ=DDT");
			ТабДокумент.Вывести(ОбластьПоставщик);
		КонецЦикла;
		Если Выборка.Количество()=0 Тогда
			ТабДокумент.Вывести(Макет.ПолучитьОбласть("СтрокаОтсутствуют"));
		КонецЕсли;
		Пока Результат.Следующий() Цикл
			ОбластьШапкаТаблицы.Параметры.НаименованиеКонтрагента = СокрЛП(Результат.Победитель.НаименованиеПолное);
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
			РезультатПоЗаписям = Результат.Выбрать();
			Ном = 0;
			Пока РезультатПоЗаписям.Следующий() Цикл
				Ном = Ном+1;
				ОбластьСтрокаТаблицы.Параметры.Номер = Ном;
				ОбластьСтрокаТаблицы.Параметры.Наименование = РезультатПоЗаписям.Номенклатура;
				ОбластьСтрокаТаблицы.Параметры.Кол          = РезультатПоЗаписям.Количество;
				ОбластьСтрокаТаблицы.Параметры.Цена         = РезультатПоЗаписям.Цена;
				ОбластьСтрокаТаблицы.Параметры.Цена2        = РезультатПоЗаписям.Цена2;
				ОбластьСтрокаТаблицы.Параметры.Сумма        = РезультатПоЗаписям.Сумма;
				ОбластьСтрокаТаблицы.Параметры.Контрагент2  = РезультатПоЗаписям.ВторойПослеПобедителя;
				ОбластьСтрокаТаблицы.Параметры.ЕдИзм 		= РезультатПоЗаписям.Номенклатура.БазоваяЕдиницаИзмерения;
				ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
			КонецЦикла;
			ОбластьИтогТаблицы.Параметры.СуммаДоговора = результат.Сумма;
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда 
				ОбластьИтогТаблицы.Параметры.СрокПодписанияДоговоров = Формат(ДокументОснование.СрокПодписанияДоговоров,"ДЛФ=DD");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьИтогТаблицы);
		КонецЦикла;
		ОбластьПодвал.Параметры.Автор = Автор;
		ТабДокумент.Вывести(ОбластьПодвал);
		Возврат ТабДокумент;
	КонецФункции //ПечатьРешения()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМакета = "Решение" Тогда
			
			ТабДокумент = ПечатьРешения();
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
			
		КонецЕсли;
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Итоги государственных закупок товаров, работ и услуг"));
		
	КонецПроцедуры // Печать()
	
#КонецЕсли

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	ДокументОснование = Основание;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
					 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
					 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток КАК Количество,
					 |	ЕСТЬNULL(ДопСведения.Цена, 0) КАК Цена,
					 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток * ЕСТЬNULL(ДопСведения.Цена, 0) КАК Сумма,
					 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки
					 |ИЗ
					 |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(
					 |			&МоментВремени,
					 |			ДокументЗаявка = &Заявка
					 |				И Организация = &Организация) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки
					 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
					 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Цена КАК Цена,
					 |			ВЫБОР
					 |				КОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
					 |					ТОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка.МестоПоставки
					 |				ИНАЧЕ гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки
					 |			КОНЕЦ КАК МестоПоставки
					 |		ИЗ
					 |			Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
					 |		ГДЕ
					 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Заявка) КАК ДопСведения
					 |		ПО гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура = ДопСведения.Номенклатура
					 |			И гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки = ДопСведения.МестоПоставки
					 |ГДЕ
					 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток > 0";
		
		Запрос.УстановитьПараметр("Заявка", 		Основание);
		Запрос.УстановитьПараметр("МоментВремени", 	ТекущаяДата());
		Запрос.УстановитьПараметр("Организация", 	Основание.Организация);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщить("Не обнаружены данные для заполнения табличных частей документа", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		Результат = Результат.Выбрать();
		Товары.Очистить();
		Пока Результат.Следующий() Цикл
			НовСтр 					= Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Результат);
			ЗаполнитьЗначенияСвойств(НовСтр,Основание,"СпособЗакупки");
		КонецЦикла;  
	КонецЕсли;
КонецПроцедуры //ЗаполнитьПоДокументуОснования()

// Процедура выполняет копирование строк в табличную часть документа
//
Процедура СкопироватьТовары(ДокументОснование)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.НомерСтроки,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ДатаНачалаПоставки,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ДатаОкончанияПоставки,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Количество,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Номенклатура,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.ПериодПоставки,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.РазмерАвансовогоПлатежа,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Сумма,
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Цена,
	|	&ПарамСостояния КАК Состояние
	|Из
	|	Документ.гз_ЗаказПодразделения.СоставЗаявкиТовары КАК гз_ПланЗакупокПодразделенияСоставЗаявкиТовары
	|ГДЕ
	|	гз_ПланЗакупокПодразделенияСоставЗаявкиТовары.Ссылка.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ПарамСостояния", Перечисления.гз_СостоянияЗаказа.Конкурс);
	Товары.Загрузить(запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //СкопироватьТовары()

// Процедура заполнения табличной части по документу-основанию
//
Процедура ЗаполнитьТЧПоОснованию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
				 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток КАК Количество,
				 |	ЕСТЬNULL(ДопСведения.Цена, 0) КАК Цена,
				 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток * ЕСТЬNULL(ДопСведения.Цена, 0) КАК Сумма,
				 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки
				 |ИЗ
				 |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(
				 |			&МоментВремени,
				 |			ДокументЗаявка = &Заявка
				 |				И Организация = &Организация) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки
				 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Номенклатура КАК Номенклатура,
				 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Цена КАК Цена,
				 |			ВЫБОР
				 |				КОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
				 |					ТОГДА гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка.МестоПоставки
				 |				ИНАЧЕ гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.МестоПоставки
				 |			КОНЕЦ КАК МестоПоставки
				 |		ИЗ
				 |			Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
				 |		ГДЕ
				 |			гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка = &Заявка) КАК ДопСведения
				 |		ПО гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура = ДопСведения.Номенклатура
				 |			И гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки = ДопСведения.МестоПоставки
				 |ГДЕ
				 |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("Заявка", 		ДокументОснование);
	Запрос.УстановитьПараметр("МоментВремени", 	МоментВремени());
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Сообщить("Не обнаружены данные для заполнения табличных частей документа", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Результат = Результат.Выбрать();
	Товары.Очистить();
	Пока Результат.Следующий() Цикл
		НовСтр 					= Товары.Добавить();
		НовСтр.Номенклатура 	= Результат.Номенклатура;
		НовСтр.Цена				= Результат.Цена;
		НовСтр.Количество		= Результат.Количество;
		НовСтр.МестоПоставки	= Результат.МестоПоставки;
	КонецЦикла;
			
КонецПроцедуры //ЗаполнитьТЧПоОснованию()

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Решение","Решение");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция возвращает значение признака формирования регистрации договоров по гос закупкам 
// на основании данного документа
//
Функция ПроверитьРегистрациюДоговоров() Экспорт
	
	Запрос=новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	гз_РегистрацияДоговораПоГосударственнымЗакупкам.Ссылка,
	|	гз_РегистрацияДоговораПоГосударственнымЗакупкам.ДокументОснование
	|ИЗ
	|	Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам КАК гз_РегистрацияДоговораПоГосударственнымЗакупкам
	|ГДЕ
	|	гз_РегистрацияДоговораПоГосударственнымЗакупкам.Проведен
	|	И гз_РегистрацияДоговораПоГосударственнымЗакупкам.ДокументОснование = &Ссылка
	|	И гз_РегистрацияДоговораПоГосударственнымЗакупкам.ДокументОснование <> &Неопределено
	|";
	запрос.УстановитьПараметр("Ссылка",Ссылка);
	запрос.УстановитьПараметр("Неопределено",Документы.гз_ИтогиГосударственныхЗакупок.ПустаяСсылка());
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьРегистрациюДоговоров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация"; // , ОперацияСОбъектамиОС - НЕ обязательна к заполнению
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов ТЧ документа
//
Процедура ПроверкаРеквизитовТЧ(ТабЗаявки, СтруктураШапкиДокумента,Отказ, Заголовок, ТипТЧ) Экспорт
	
	Запрос = Новый Запрос;                           
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_ИтогиГосударственныхЗакупокТовары.НомерСтроки,
	                  |	ВЫБОР
	                  |		КОГДА гз_ИтогиГосударственныхЗакупокТовары1.НомерСтроки ЕСТЬ NULL 
	                  |			ТОГДА ЛОЖЬ
	                  |		ИНАЧЕ ИСТИНА
	                  |	КОНЕЦ КАК Конфликт,
	                  |	гз_ИтогиГосударственныхЗакупокТовары1.НомерСтроки КАК НомерСтроки1
	                  |ИЗ
	                  |	Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары1
	                  |		ПО гз_ИтогиГосударственныхЗакупокТовары.НомерСтроки <> гз_ИтогиГосударственныхЗакупокТовары1.НомерСтроки
	                  |			И гз_ИтогиГосударственныхЗакупокТовары.Ссылка = гз_ИтогиГосударственныхЗакупокТовары1.Ссылка
	                  |			И гз_ИтогиГосударственныхЗакупокТовары.Номенклатура = гз_ИтогиГосударственныхЗакупокТовары1.Номенклатура
	                  |			И гз_ИтогиГосударственныхЗакупокТовары.МестоПоставки = гз_ИтогиГосударственныхЗакупокТовары1.МестоПоставки
	                  |			И гз_ИтогиГосударственныхЗакупокТовары.Победитель = гз_ИтогиГосударственныхЗакупокТовары1.Победитель
	                  |ГДЕ
	                  |	гз_ИтогиГосударственныхЗакупокТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Конфликт Тогда 
			Сообщить("В строках №" + Выборка.НомерСтроки +" и №"+Выборка.НомерСтроки1+" табличной части ""Товары"" дублируются номенклатура и место поставки!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ПризнатьКонкурсНеСостоявшимсяПоВыбраннымПозициям Тогда 
		РеквизитыТабЗаявки = "Номенклатура, Количество"; //через запятую
	Иначе 
		РеквизитыТабЗаявки = "Номенклатура, СпособЗакупки, Количество, Победитель, Цена, Количество"; //через запятую
	КонецЕсли;
	
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ТипТЧ, Новый Структура(РеквизитыТабЗаявки), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитовТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоЗаявкеТовары, Отказ, Заголовок)
	Если Не Отказ Тогда
		ВывестиШапкуПроведения = Истина;
		СписокНоменклатурыПоЗаявкам = СформироватьСписокНоменклатурыПоЗаявкам();
		ДокументЗаявка			= ЭтотОбъект.Ссылка;
		ОрганизацияДляДвижения 	= СтруктураШапкиДокумента.Организация;
		ДатаДляДвижения 		= СтруктураШапкиДокумента.Дата;
		
		// Движение по регистру по Товарам
		ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка, СписокНоменклатурыПоЗаявкам, Заголовок);
		
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()

// Функция формирует список номенклатуры по заявкам
//
Функция СформироватьСписокНоменклатурыПоЗаявкам()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", МоментВремени());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументЗаявка", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
	               |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток КАК Количество,
	               |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.МестоПоставки
	               |ИЗ
	               |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(&Период, ДокументЗаявка.Ссылка = &ДокументЗаявка) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки
	               |ГДЕ
	               |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток > 0";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции  //СформироватьСписокНоменклатурыПоЗаявкам()

// Процедура формирования движений регистров по ТЧ Товары
//
Процедура ДвиженияПоРегистрамТовары(ТаблицаПоЗаявкеТовары, Отказ, ОрганизацияДляДвижения, ДатаДляДвижения, ДокументЗаявка, СписокНоменклатурыПоЗаявкам, Заголовок)
	Если Не Отказ Тогда
		СписаниеГП = (Константы.гз_СпособУчетаИсполненияГодовогоПлана.Получить() = Перечисления.гз_СпособыУчетаИсполненияГодовогоПлана.ПриПроведенииДокументаИтогиГосударственныхЗакупок);
		ОтражениеСостоянияКонкурса = (ЗначениеЗаполнено(ДокументЗаявка) И ТипЗнч(ДокументЗаявка)=Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок"));
		Если СписаниеГП И Не ПризнатьКонкурсНеСостоявшимсяПоВыбраннымПозициям Тогда 
			
			Если ИспользованиеВидовПлановЗакупок.Количество() > 0 Тогда 
				МассивВидовПлановЗакупок = ИспользованиеВидовПлановЗакупок.ВыгрузитьКолонку("ВидПланаЗакупок");
			Иначе 
				Запрос=новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	гз_ИспользуемыеВидыПлановЗакупокСрезПоследних.ВидПланаЗакупок
				|ИЗ
				|	РегистрСведений.гз_ИспользуемыеВидыПлановЗакупок.СрезПоследних(
				|			НачалоПериода(&Год,ГОД),
				|				Организация = &Организация) КАК гз_ИспользуемыеВидыПлановЗакупокСрезПоследних";
				Запрос.УстановитьПараметр("Год",		?((ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок")),ДокументОснование.Год, НачалоГода(Дата)));
				Запрос.УстановитьПараметр("Организация", Организация);
				МассивВидовПлановЗакупок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПланаЗакупок");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекСтр из ТаблицаПоЗаявкеТовары Цикл
			Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
				Движение = Движения.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.ДобавитьРасход();
				Движение.Количество				 = ТекСтр.Количество;
				Движение.Номенклатура			 = ТекСтр.Номенклатура;
				Движение.Организация			 = ОрганизацияДляДвижения;
				Движение.МестоПоставки			 = ТекСтр.МестоПоставки;
				Движение.Период					 = ДатаДляДвижения;
				Движение.ДокументЗаявка			 = ДокументОснование;
			КонецЕсли;
			Если СписаниеГП И Не ПризнатьКонкурсНеСостоявшимсяПоВыбраннымПозициям Тогда 
				Для Каждого ВидПланаЗакупок Из МассивВидовПлановЗакупок Цикл 
					// движения по регистру гз_ДвижениеНоменклатурыПоГодовомуПлану
					Движение = Движения.гз_ДвижениеНоменклатурыПоГодовомуПлану.ДобавитьРасход();
					Движение.Год					 = ?(ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок"),ДокументОснование.Год, НачалоГода(Дата));
					Движение.ВидПланаЗакупок		 = ВидПланаЗакупок;
					Движение.Номенклатура			 = ТекСтр.Номенклатура;
					Движение.Количество				 = ТекСтр.Количество;
					Движение.Организация			 = ОрганизацияДляДвижения;
					Движение.Сумма					 = ТекСтр.Количество * ТекСтр.Цена;
					Движение.Период					 = ДатаДляДвижения;
					Движение.СпособЗакупки			 = ТекСтр.СпособЗакупки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если мРезервированиеНоменклатурыПоГодовомуПлану И ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда 
			МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
			МассивЗаказов = ДокументОснование.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
			
			Запрос=новый Запрос;
			Запрос.Текст="
			|            ВЫБРАТЬ
			|	гз_РезервированиеПозицийГодовогоПланаОстатки.Заказ,
			|	гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура,
			|	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.гз_РезервированиеПозицийГодовогоПлана.Остатки(
			|			,
			|			Заказ В (&МассивЗаказов)
			|				И Номенклатура В (&МассивНоменклатуры)
			|				И Организация = &Организация) КАК гз_РезервированиеПозицийГодовогоПланаОстатки
			|";
			Запрос.УстановитьПараметр("МассивЗаказов",		МассивЗаказов);
			Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
			Запрос.УстановитьПараметр("Организация",		Организация);
			Результат = Запрос.Выполнить().Выгрузить();
			СвернутыйСоставПоНоменклатуре = Товары.Выгрузить();
			СвернутыйСоставПоНоменклатуре.Свернуть("Номенклатура","Количество");
			Для Каждого НоменклатурнаяПозиция Из СвернутыйСоставПоНоменклатуре Цикл 
				Для Каждого ТекСтрока Из Результат Цикл 
					Если ТекСтрока.Номенклатура = НоменклатурнаяПозиция.Номенклатура Тогда 
						Если НоменклатурнаяПозиция.Количество > 0 Тогда 
							// движения по регистру гз_РезервированиеПозицийГодовогоПлана
							Движение = Движения.гз_РезервированиеПозицийГодовогоПлана.ДобавитьРасход();
							Движение.Количество 			 = ?(НоменклатурнаяПозиция.Количество >= ТекСтрока.КоличествоОстаток,ТекСтрока.КоличествоОстаток,НоменклатурнаяПозиция.Количество);
							Движение.Заказ					 = ТекСтрока.Заказ;
							Движение.Номенклатура			 = ТекСтрока.Номенклатура;
							Движение.Организация			 = ОрганизацияДляДвижения;
							Движение.Период					 = ДатаДляДвижения;
							НоменклатурнаяПозиция.Количество = НоменклатурнаяПозиция.Количество - Движение.Количество;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Движения.гз_РезервированиеПозицийГодовогоПлана.Записать();
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ЗаказПодразделения.Ссылка КАК Заказ,
			               |	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			               |	гз_СостоянияТекущихЗаявокСрезПоследних.Состояние
			               |ИЗ
			               |	Документ.гз_ЗаказПодразделения КАК гз_ЗаказПодразделения
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			гз_РезервированиеПозицийГодовогоПланаОстатки.Заказ КАК Заказ,
			               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура) КАК Номенклатура,
			               |			СУММА(гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток) КАК КоличествоОстаток
			               |		ИЗ
			               |			РегистрНакопления.гз_РезервированиеПозицийГодовогоПлана.Остатки(
			               |					&Дата,
			               |					Организация = &Организация
			               |						И Заказ В (&СписокЗаказов)) КАК гз_РезервированиеПозицийГодовогоПланаОстатки
			               |		ГДЕ
			               |			гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток >= 0
			               |		
			               |		СГРУППИРОВАТЬ ПО
			               |			гз_РезервированиеПозицийГодовогоПланаОстатки.Заказ) КАК Остатки
			               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_СостоянияТекущихЗаявок.СрезПоследних(
			               |					&Дата,
			               |					Организация = &Организация
			               |						И Заявка В (&СписокЗаказов)) КАК гз_СостоянияТекущихЗаявокСрезПоследних
			               |			ПО Остатки.Заказ = гз_СостоянияТекущихЗаявокСрезПоследних.Заявка
			               |		ПО (Остатки.Заказ = гз_ЗаказПодразделения.Ссылка)
			               |ГДЕ
			               |	гз_ЗаказПодразделения.Ссылка В(&СписокЗаказов)";
			Запрос.УстановитьПараметр("Дата",				Новый МоментВремени(Дата+1,Ссылка));
			Запрос.УстановитьПараметр("СписокЗаказов",		МассивЗаказов);
			Запрос.УстановитьПараметр("Организация",		Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Движение = Движения.гз_СостоянияТекущихЗаявок.Добавить();
				Движение.Период = Дата;
				Движение.Заявка = Выборка.Заказ;
				Движение.Организация = Организация;
				Движение.Подразделение = Выборка.Заказ.ПодразделениеОрганизации;
				Если Выборка.КоличествоОстаток = 0 И Выборка.Состояние <> Перечисления.гз_СостоянияЗаказа.Выполнена Тогда
						Движение.Состояние = Перечисления.гз_СостоянияЗаказа.Выполнена;
				ИначеЕсли Выборка.КоличествоОстаток <> 0 И Выборка.Состояние = Перечисления.гз_СостоянияЗаказа.Выполнена Тогда
						Движение.Состояние = Перечисления.гз_СостоянияЗаказа.Конкурс;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ДвиженияПоРегистрамТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаСоставаЗаявкиТовары = Товары.Выгрузить();
	ПроверкаРеквизитовТЧ(ТаблицаСоставаЗаявкиТовары, СтруктураШапкиДокумента,Отказ, Заголовок, "Товары");
	ТаблицаСоставаЗаявкиТовары.Свернуть("Номенклатура, Цена, СпособЗакупки, МестоПоставки","Количество");
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСоставаЗаявкиТовары,  Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") ИЛИ ТипЗнч(Основание) = Тип("СправочникСсылка.гз_ПроведенныеЗакупки") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	//Если ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
	//	Возврат;
	//КонецЕсли;
	//ТаблицаСоставаЗаявкиТовары = Товары.Выгрузить();
	//ПроверкаРеквизитовТЧ(ТаблицаСоставаЗаявкиТовары, СтруктураШапкиДокумента,Отказ, Заголовок, "Товары");
	
	Если ПроверитьРегистрациюДоговоров() Тогда 
		Сообщить("На основании данных итогов зарегистрированы договора по государственным закупкам. "+
		"Документ не будет записан.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мРезервированиеНоменклатурыПоГодовомуПлану = Константы.гз_РезервироватьПозицииГодовогоПланаПриПодачеЗаказов.Получить();