
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	УстановитьТекстПоляЗакрытия();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьГрафикПлатежныхДнейПриИзменении(Элемент)
	
	Элементы.ПлатежиДатаПлатежа.КнопкаРегулирования = Не Объект.НеУчитыватьГрафикПлатежныхДней;
	Элементы.ГруппаПлатежиПриведениеДатыПлатежа.Видимость = Не Объект.НеУчитыватьГрафикПлатежныхДней;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеЗакрытиеЗаявокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Закрытия.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Ключ", Закрытия[0].Значение);
		ОткрытьФорму("Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Закрытия[0].Значение);
	ИначеЕсли Закрытия.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДокументаЗакрытия", ЭтаФорма);
		Закрытия.ПоказатьВыборЭлемента(Оповещение, "Выберите открываемый документ закрытия", Закрытия[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Платежи

&НаКлиенте
Процедура ПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьТекстПоляЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиЗРСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Платежи.ТекущиеДанные.ЗРС) 
		И Объект.Платежи.НайтиСтроки(Новый Структура("ЗРС",Элементы.Платежи.ТекущиеДанные.ЗРС)).Количество() > 1 Тогда
		Элементы.Платежи.ТекущиеДанные.ЗРС = ПредопределенноеЗначение("Документ.ден_ЗаявкаНаРасходованиеСредств.ПустаяСсылка");
		Элементы.Платежи.ТекущиеДанные.ДатаПлатежа = Дата('00010101');
		Элементы.Платежи.ТекущиеДанные.СуммаПоЗаявке = 0;
		Элементы.Платежи.ТекущиеДанные.Сумма = 0;
		ПоказатьПредупреждение(, "Данная заявка уже выбрана в других строках текущего плана платежей!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиЗРСОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	ТекущиеДанные.ВидОплаты 	= ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.ПустаяСсылка");
	ТекущиеДанные.СчетКасса 	= Неопределено;
	ТекущиеДанные.ДатаПлатежа 	= Дата('00010101');
	ТекущиеДанные.Сумма 		= 0;
	ТекущиеДанные.СуммаПоЗаявке = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиЗРСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеПоЗаявке(ВыбранноеЗначение, Объект.Организация);
	
	Если СтруктураДанных.Заполнять Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтруктураДанных);
		ТекущиеДанные.Сумма = СтруктураДанных.СуммаПоЗаявке;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиДатаПлатежаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Платежи.ТекущиеДанные;
	Организация = Объект.Организация;	
	Дата = ТекДанные.ДатаПлатежа;
	ТекДанные.ДатаПлатежа = дог_УправлениеДоговорами.ПривестиДатуПлатежа(Направление, Организация,Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗакрытьЗаявки(Команда) Экспорт
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Режим = РежимДиалогаВопрос.ДаНет;	
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед продолжением необходимо записать документ. Записать?'"), Режим, 0);
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПлатежныеДокументы(Команда) Экспорт
	
	Если Объект.Платежи.Количество() > 0 Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиДокумента", ЭтотОбъект), "Для заполнения необходимо записать документ. Продолжить?",РежимДиалогаВопрос.ДаНет);
            Возврат;
	    КонецЕсли;
		ОформитьПлатежныеДокументыФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиДатыКПредыдущей(Команда) Экспорт
	
	ПривестиКСледующейНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиДатыКСледующей(Команда) Экспорт
	
	ПривестиКСледующейНаСервере(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПлатежиПриведениеДатыПлатежа.Видимость = Не Объект.НеУчитыватьГрафикПлатежныхДней;
	
	Элементы.ПлатежиДатаПлатежа.КнопкаРегулирования = Не Объект.НеУчитыватьГрафикПлатежныхДней;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, "Платежи");

КонецПроцедуры 

&НаСервере
Процедура УстановитьТекстПоляЗакрытия()
	
	Закрытия.Очистить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеЗаявокНаРасходованиеСредств.Ссылка
		|ИЗ
		|	Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств КАК ЗакрытиеЗаявокНаРасходованиеСредств
		|ГДЕ
		|	ЗакрытиеЗаявокНаРасходованиеСредств.ДокументОснование = &ДокументОснование
		|	И ЗакрытиеЗаявокНаРасходованиеСредств.Проведен";

		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);

		Результат = Запрос.Выполнить();
	    Закрытия.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
    ЕстьСтрокиКЗакрытию = Ложь;
	ЗаявкиКЗакрытию = Новый Массив;
	Для Каждого СтрокаПлатежи Из Объект.Платежи Цикл
		Если СтрокаПлатежи.Сумма <> СтрокаПлатежи.СуммаПоЗаявке Тогда
			ЕстьСтрокиКЗакрытию = Истина;
			ЗаявкиКЗакрытию.Добавить(СтрокаПлатежи.ЗРС);
		КонецЕсли;
	КонецЦикла;
	
	Если Закрытия.Количество() = 0 Тогда
		Если ЕстьСтрокиКЗакрытию Тогда
			Элементы.ПолеЗакрытиеЗаявок.ЦветТекста = Новый Цвет(255,0,0);
			ПолеЗакрытиеЗаявок = "Частичное закрытие заявок не выполнено !!!";
		Иначе
			Элементы.ПолеЗакрытиеЗаявок.ЦветТекста = Новый Цвет(25,85,174);
			ПолеЗакрытиеЗаявок = "Частичное закрытие заявок не требуется";
		КонецЕсли;
	Иначе
		Элементы.ПолеЗакрытиеЗаявок.ЦветТекста = Новый Цвет(25,85,174);
		Если Закрытия.Количество() = 1 Тогда
			ПолеЗакрытиеЗаявок = Строка(Закрытия.Получить(0));
		Иначе
			ПолеЗакрытиеЗаявок = "Документы закрытия: " + Строка(Закрытия.Количество()) + " шт.";
		КонецЕсли;
		ТребуетсяДополнительноеЗакрытие = Ложь;

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗакрытиеЗаявокНаРасходованиеСредствЗаявкиНаРасходованиеСредств.Заявка
		|ИЗ
		|	Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств.ЗаявкиНаРасходованиеСредств КАК ЗакрытиеЗаявокНаРасходованиеСредствЗаявкиНаРасходованиеСредств
		|ГДЕ
		|	ЗакрытиеЗаявокНаРасходованиеСредствЗаявкиНаРасходованиеСредств.Ссылка.Проведен
		|	И ЗакрытиеЗаявокНаРасходованиеСредствЗаявкиНаРасходованиеСредств.Заявка В(&Заявка)";

		Запрос.УстановитьПараметр("Заявка", ЗаявкиКЗакрытию);

		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() <> ЗаявкиКЗакрытию.Количество() Тогда
			ПолеЗакрытиеЗаявок = ПолеЗакрытиеЗаявок + "	Требуется дополнительное частичное закрытие!";
			Элементы.ПолеЗакрытиеЗаявок.ЦветТекста = Новый Цвет(255,0,0);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
		И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаЗакрытия(ВыбЭлемент, Параметры) Экспорт

	Если ВыбЭлемент <> Неопределено Тогда
		ВыбЗначение = ВыбЭлемент.Значение;
		ПараметрыФормы = Новый Структура("Ключ", ВыбЗначение);
		ОткрытьФорму("Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, ВыбЗначение);
	КонецЕсли;

КонецПроцедуры 

// Служебные процедуры и функции

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		Объект.Платежи.Очистить();
		Объект.Номер = "";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоЗаявке(ЗРС, Организация)
	
	Структура = Новый Структура("ЗРС,ВидОплаты,СчетКасса,ДатаПлатежа,СуммаПоЗаявке,Заполнять,Валюта");
	Структура.ЗРС = ЗРС;
	Структура.ВидОплаты = ЗРС.ФормаОплаты;
	Структура.Валюта = ЗРС.ВалютаДокумента;
	Структура.СчетКасса = ЗРС.БанковскийСчетКасса;
	Структура.ДатаПлатежа = ЗРС.ДатаРасхода;
	Структура.СуммаПоЗаявке = ЗРС.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	Если Организация = ЗРС.Организация Тогда
		Структура.Заполнять = Истина;
	Иначе
		Структура.Заполнять = Ложь;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДок(Режим)
	
	Док = РеквизитФормыВЗначение("Объект");
	Док.Записать(РежимЗаписиДокумента[Режим]);
	ЗначениеВРеквизитФормы(Док, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПривестиКСледующейНаСервере(КСледующей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.ДатаПлатежа КАК Дата,
		|	Таб.НомерСтроки
		|ПОМЕСТИТЬ ТабДок
		|ИЗ
		|	&ТабДанных КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДок.Дата,
		|	МИНИМУМ(ЕСТЬNULL(ГрафикПлатежныхДней.ДатаКалендаря, 0)) КАК ДатаПлатежаСлед,
		|	ТабДок.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(ЕСТЬNULL(ГрафикПлатежныхДней.ДатаКалендаря, 0)) КАК ДатаПлатежаПред
		|ИЗ
		|	ТабДок КАК ТабДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ден_ГрафикПлатежныхДней КАК ГрафикПлатежныхДней
		|		ПО (ВЫБОР
		|				КОГДА &КСледующей
		|					ТОГДА ТабДок.Дата <= ГрафикПлатежныхДней.ДатаКалендаря
		|				ИНАЧЕ ТабДок.Дата >= ГрафикПлатежныхДней.ДатаКалендаря
		|			КОНЕЦ)
		|ГДЕ
		|	ГрафикПлатежныхДней.Организация = &Организация
		|	И ГрафикПлатежныхДней.ВидДня = &ВидДня
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабДок.Дата,
		|	ТабДок.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Док = РеквизитФормыВЗначение("Объект");  
		
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("ВидДня", 		Перечисления.ден_ВидыДнейГрафикаПлатежныхДней.Платежный);
    Запрос.УстановитьПараметр("ТабДанных", 		Док.Платежи);
    Запрос.УстановитьПараметр("КСледующей", 	КСледующей);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если КСледующей И Результат.ДатаПлатежаСлед <> 0 Тогда
			Док.Платежи[Результат.НомерСтроки-1].ДатаПлатежа = Результат.ДатаПлатежаСлед;
		ИначеЕсли Не КСледующей И Результат.ДатаПлатежаПред <> 0 Тогда
			Док.Платежи[Результат.НомерСтроки-1].ДатаПлатежа = Результат.ДатаПлатежаПред;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Док, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаписатьДок("Запись");
    Иначе
        Возврат;
    КонецЕсли;
    
    ОформитьПлатежныеДокументыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПлатежныеДокументыФрагмент()
    
    Перем ПараметрыФормы;
    
    ПараметрыФормы = Новый Структура("План",Объект.Ссылка);
    ОткрытьФорму("Документ.ден_ПланПлатежей.Форма.ФормаОформленияПлатежныхДокументов",ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписиДокумента(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ!'"));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ден_ЗакрытиеЗаявокНаРасходованиеСредств.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры