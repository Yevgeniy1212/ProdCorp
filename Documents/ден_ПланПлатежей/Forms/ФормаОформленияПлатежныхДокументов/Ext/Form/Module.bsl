////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры фомры:
//  План - ДокументСсылка.ден_ПланПлатежей

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.План.Организация;
	ВыборПоВладельцу = Параметры.План.Организация;
	
	СформироватьДеревоЗаявок();
	
	Элементы.ДокументыОплатыПоказатьДокументы.Пометка = Ложь;
	
	НадписьГруппы = "Документы к оплате";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Истина);
	
	РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	СформироватьДеревоЗаявок();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	СформироватьДеревоЗаявок();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	СформироватьДеревоЗаявок();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СформироватьДеревоЗаявок();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	СформироватьДеревоЗаявок();
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоЗаявок

&НаКлиенте
Процедура ДеревоЗаявокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДокументыОплатыПоказатьДокументы.Пометка Тогда
		Структура = Новый Структура("ЗРС",?(Элемент.ТекущиеДанные=Неопределено,Неопределено,Элемент.ТекущиеДанные.ЗРС));
		Элементы.ДокументыОплаты.ОтборСтрок = Новый ФиксированнаяСтруктура(Структура);
		Заявка = Структура.ЗРС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		УстановитьФлажкиВПодчиненных(Элемент.ТекущиеДанные.ПолучитьЭлементы(),Элемент.ТекущиеДанные.Применить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокПлатежныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокПлатежныйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДокументыОплаты

&НаКлиенте
Процедура ДокументыОплатыПлатежныеДокументыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыПлатежныеДокументыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЕдиныйПлатежныйДокумент(Команда) Экспорт
	
	СформироватьЗаявкиСерв(Истина);
	
	РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЗаявок(Команда) Экспорт
	
	СформироватьДеревоЗаявок();
	
    РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокументы(Команда) Экспорт
	
	Элементы.ДокументыОплатыПоказатьДокументы.Пометка = НЕ Элементы.ДокументыОплатыПоказатьДокументы.Пометка;
	
	Элементы.ГруппаДокументыОплаты.Видимость = Элементы.ДокументыОплатыПоказатьДокументы.Пометка;
	
	Если Элементы.ДокументыОплатыПоказатьДокументы.Пометка И Элементы.ДеревоЗаявок.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоЗаявок.ТекущиеДанные;
		Структура = Новый Структура("ЗРС", ТекущиеДанные.ЗРС);
		Элементы.ДокументыОплаты.ОтборСтрок = Новый ФиксированнаяСтруктура(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда) Экспорт
	
	ПровестиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда) Экспорт
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда) Экспорт
	
	СформироватьЗаявкиСерв();
	
	РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда) Экспорт
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") Тогда
		Элементы.Получатель.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками") Тогда
		Элементы.Получатель.Видимость = Истина;
		Элементы.Контрагент.Видимость = Ложь;
	Иначе
		Элементы.Получатель.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Элементы.БанковскийСчетКасса.Видимость = Истина;
		Если ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
			Элементы.БанковскийСчетКасса.Заголовок = "Банковский счет";
			Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
			БанковскийСчетКасса = Элементы.БанковскийСчетКасса.ОграничениеТипа.ПривестиЗначение(БанковскийСчетКасса);
		Иначе
			Элементы.БанковскийСчетКасса.Заголовок = "Касса";
			Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
			БанковскийСчетКасса = Элементы.БанковскийСчетКасса.ОграничениеТипа.ПривестиЗначение(БанковскийСчетКасса);
		КонецЕсли;
	Иначе
		Элементы.БанковскийСчетКасса.Видимость=Ложь;
	КонецЕсли;
	
	ВозможноФормированиеЕдиногоДокумента = Ложь;
	
	Если ЗначениеЗаполнено(ФормаОплаты) И ЗначениеЗаполнено(ВидОперации) И ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") Тогда
			ВозможноФормированиеЕдиногоДокумента = Истина;
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками") Тогда
			ВозможноФормированиеЕдиногоДокумента = ЗначениеЗаполнено(Получатель) И ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные");
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств")
			ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам") Тогда
			ВозможноФормированиеЕдиногоДокумента = Ложь;
		Иначе
			ВозможноФормированиеЕдиногоДокумента = ЗначениеЗаполнено(Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоЗаявокЕдиныйПлатежныйДокумент.Видимость = ВозможноФормированиеЕдиногоДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(ИмяДерева, СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
    	Элементы[ИмяДерева].Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВПодчиненных(Строки, Пометка)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		СтрокаПодчиненная.Применить = Пометка;
		УстановитьФлажкиВПодчиненных(СтрокаПодчиненная.ПолучитьЭлементы(), Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЗаявкиНаСервере(СтрокаДерева, ФормированиеДокуметовТекДатой)
	
	Попытка
		РКО = Ложь;
		Если СтрокаДерева.ЗРС.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Документ = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО = Истина;
		Иначе
			Документ = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
			Документ.Оплачено = Ложь;
			Документ.ДатаВыписки = ?(ФормированиеДокуметовТекДатой, ТекущаяДата(), СтрокаДерева.ДатаПлатежа);
		КонецЕсли;
		Документ.Заполнить(СтрокаДерева.ЗРС);
		Документ.ОтраженоВОперУчете = Истина;
		Документ.Дата = ?(ФормированиеДокуметовТекДатой, ТекущаяДата(), СтрокаДерева.ДатаПлатежа);
		Если СтрокаДерева.ЗРС.СуммаДокумента > СтрокаДерева.СуммаПлатежа Тогда
			//Здесь будет фильтр по видам операций  
			Документ.СуммаДокумента = СтрокаДерева.СуммаПлатежа;
			Сумма = СтрокаДерева.СуммаПлатежа;
			СтрокиУдалить = Новый Массив;
			Для Каждого СтрокаТЧ Из Документ.РасшифровкаПлатежа Цикл
				Если СтрокаТЧ.СуммаПлатежа > Сумма Тогда
					Если Сумма > 0 Тогда
						СтрокаТЧ.СуммаПлатежа = Сумма;
						Документ.ПроверкаКурсовВалют(СтрокаТЧ);
						мТекущаяВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента),СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов,Документ.ВалютаДокумента);
						СтрокаТЧ.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, Документ.ВалютаДокумента,
						мТекущаяВалютаВзаиморасчетов,
						Документ.КурсДокумента, СтрокаТЧ.КурсВзаиморасчетов,
						Документ.КратностьДокумента, СтрокаТЧ.КратностьВзаиморасчетов);
						
						Если СтрокаТЧ.КурсВзаиморасчетовПлан > 0 Тогда
							РассчитатьСуммуПлатежаПлан(СтрокаТЧ,Документ);
						КонецЕсли;
						Сумма = 0;
						Если НЕ РКО Тогда
							Документ.ПересчитатьСуммуНДС(СтрокаТЧ);
						КонецЕсли;
					Иначе
						СтрокаТЧ.СуммаПлатежа = 0;
						СтрокаТЧ.СуммаВзаиморасчетов = 0;
						СтрокаТЧ.СуммаПлатежаПлан = 0;
						СтрокиУдалить.Добавить(СтрокаТЧ);
					КонецЕсли;
				Иначе
					Сумма = Сумма - СтрокаТЧ.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				Документ.РасшифровкаПлатежа.Удалить(СтрокаУдалить);
			КонецЦикла;
		КонецЕсли;
		Документ.Записать();
		Возврат Документ.Ссылка;
	Исключение
		ТекстСообщения = "Не удалось сформировать платежный документ по заявке - """ + Строка(СтрокаДерева.ЗРС) + """ на дату " + СтрокаДерева.ДатаПлатежа + ".
						  | По причине: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ?(РКО,Документы.РасходныйКассовыйОрдер.ПустаяСсылка(),Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка());
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РассчитатьСуммуПлатежаПлан(СтрокаТЧ, Док)
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Док.ПроверкаКурсовВалют(СтрокаТЧ);
	
	Если Док.ЕстьРасчетыСКонтрагентами ИЛИ Док.ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаТЧ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаТЧ.СуммаПлатежаПлан = СтрокаТЧ.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Док.ВалютаДокумента Тогда
		СтрокаТЧ.СуммаПлатежаПлан = СтрокаТЧ.СуммаВзаиморасчетов;
	
	ИначеЕсли (Док.КурсДокумента <> 0) И (СтрокаТЧ.КратностьВзаиморасчетов <> 0) И (СтрокаТЧ.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаТЧ.СуммаПлатежаПлан = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, 
																							  ВалютаВзаиморасчетов,
																							  Док.ВалютаДокумента,
											                                                  СтрокаТЧ.КурсВзаиморасчетовПлан,
																							  Док.КурсДокумента,
																							  СтрокаТЧ.КратностьВзаиморасчетов,
																							  Док.КратностьДокумента);	
	Иначе
		СтрокаТЧ.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

&НаСервереБезКонтекста
Процедура ПолучитьСтрокиФормированияЗаявок(Строки, ФормированиеДокуметов, ПараметрыФормирования, ЕдинымДокументом, МассивЗаявок = Неопределено, СтрокиТЧ = Неопределено,ДокументыОплаты)
	
	ПервыйУровень = (МассивЗаявок = Неопределено);
	
	Если ПервыйУровень Тогда
		МассивЗаявок = Новый Массив;
		СтрокиТЧ = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если СтрокаПодчиненная.Применить 
			И СтрокаПодчиненная.СуммаПлатежа>0
			И НЕ ЗначениеЗаполнено(СтрокаПодчиненная.ПлатежныйДокумент) Тогда
			Если ЕдинымДокументом Тогда
				МассивЗаявок.Добавить(СтрокаПодчиненная.ЗРС);
				СтрокиТЧ.Добавить(СтрокаПодчиненная);
			Иначе
				СтруктураСтроки = Новый Структура("СуммаПлатежа,ЗРС,ДатаПлатежа");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки,СтрокаПодчиненная);
				СтрокаПодчиненная.ПлатежныйДокумент = СформироватьЗаявкиНаСервере(СтруктураСтроки,ФормированиеДокуметов);
				Если ЗначениеЗаполнено(СтрокаПодчиненная.ПлатежныйДокумент) Тогда
					НС = ДокументыОплаты.Добавить();
					НС.ПлатежныеДокументы = СтрокаПодчиненная.ПлатежныйДокумент;
					НС.ЗРС = СтруктураСтроки.ЗРС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		ПолучитьСтрокиФормированияЗаявок(СтрокаПодчиненная.Строки,ФормированиеДокуметов,ПараметрыФормирования,ЕдинымДокументом,МассивЗаявок,СтрокиТЧ,ДокументыОплаты);
	КонецЦикла;
	
	Если ЕдинымДокументом И ПервыйУровень Тогда
		ЕдиныйДокумент = ФормироватьЕдиныйПлатежныйДокумент(МассивЗаявок,ПараметрыФормирования);
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СтрокаТЧ.ПлатежныйДокумент = ЕдиныйДокумент;
			Если ЗначениеЗаполнено(СтрокаТЧ.ПлатежныйДокумент) Тогда
				НС = ДокументыОплаты.Добавить();
				НС.ПлатежныеДокументы = СтрокаТЧ.ПлатежныйДокумент;
				НС.ЗРС = СтрокаТЧ.ЗРС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормироватьЕдиныйПлатежныйДокумент(МассивЗаявок, ПараметрыФормирования)
	
	Если МассивЗаявок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если ПараметрыФормирования.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
	//	Возврат ЗаполнитьППИПоДокументуОснования(ПараметрыФормирования.Основание, МассивЗаявок, ПараметрыФормирования);
	//ИначеЕсли ПараметрыФормирования.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
	//	Возврат ЗаполнитьРКОПоДокументуОснования(ПараметрыФормирования.Основание, МассивЗаявок, ПараметрыФормирования);
	//КонецЕсли;
	
КонецФункции

//// Процедура выполняет заполнение документа по документу-основанию
////
//&НаСервереБезКонтекста
//Функция ЗаполнитьППИПоДокументуОснования(Основание, Заявки, Параметры)
//	
//	ППИ = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
//	
//	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
//	
//	ППИ.ВалютаДокумента = ВалютаРегламентированногоУчета;
//	
//	// Заполним реквизиты из стандартного набора по документу основанию.
//	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ППИ, Основание);

//	РабочаяДата = ТекущаяДата();
//	ППИ.Дата 				= РабочаяДата;
//	ППИ.ДатаВыписки 		= РабочаяДата;
//	ППИ.ДатаВалютирования 	= РабочаяДата;
//	
//	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(Основание);
//	ВидДокументаОснования       = Основание.Метаданные().Имя;
//	ППИ.ДокументОснование    	= Основание;
//	
//	ППИ.СчетОрганизации    		= Параметры.БанковскийСчетКасса;
//	
//	СтруктураКурсаДокумента 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ППИ.ВалютаДокумента, ППИ.Дата);
//	КурсДокумента          		= СтруктураКурсаДокумента.Курс;
//	КратностьДокумента      	= СтруктураКурсаДокумента.Кратность;
//	
//	ППИ.СтруктурноеПодразделениеОтправитель = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Основание, "СтруктурноеПодразделение");
//	
//	ППИ.ОтраженоВОперУчете = Истина;
//	ППИ.ОтражатьВБухгалтерскомУчете = Истина;
//	
//	Если Не ЗначениеЗаполнено(ППИ.СчетКонтрагента) Тогда
//		ППИ.СчетКонтрагента = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ППИ.Контрагент, "ОсновнойБанковскийСчет");
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ППИ.СчетОрганизации) Тогда
//		ППИ.СчетОрганизации = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ППИ.Организация, "ОсновнойБанковскийСчет");
//	КонецЕсли;
//	
//	// Заполним счет учета
//	Если Не ППИ.СчетОрганизации.Пустая() Тогда
//		СчетУчетаБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(ППИ.СчетОрганизации, ППИ.СчетБанк.Пустая()).СчетУчетаБУ;
//		Если ЗначениеЗаполнено(СчетУчетаБанк) Тогда
//			ППИ.СчетБанк = СчетУчетаБанк;
//		КонецЕсли;	
//	КонецЕсли;  
//	
//	ВидОперацииЗаявка = Параметры.ВидОперации;
//	УправлениеДенежнымиСредствамиСервер.ОпределитьОперациюПоОснованиюУпр(ППИ.ВидОперации, ВидОперацииЗаявка);
//	
//	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
//	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
//	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
//	|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//	|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
//	|ИЗ
//	|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование В (&ДокументЗаявка)) КАК ЗаявкиНаРасходованиеСредствОстатки";
//	
//	Запрос.УстановитьПараметр("ДокументЗаявка", Заявки);
//	
//	СтавкаНДС = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	ВидОперации = ППИ.ВидОперации;
//	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
//		СуммаПлатежа = 0;
//		Пока Выборка.Следующий() Цикл
//			СтрокаПеречисление 								= ППИ.ПеречислениеЗаработнойПлаты.Добавить();
//			СтрокаПеречисление.ДокументПланированияПлатежа 	= Выборка.ЗаявкаНаРасходование;
//			СтрокаПеречисление.Подразделение 				= фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Выборка.ЗаявкаНаРасходование, "ЦФО"); 
//			СтрокаПеречисление.Проект 						= Выборка.Проект;
//			СтрокаПеречисление.СуммаКВыплате 				= Выборка.СуммаПлатежа;
//			СтрокаПеречисление.СтатьяДвиженияДенежныхСредств= Выборка.СтатьяДвиженияДенежныхСредств;
//			СуммаПлатежа 									= СуммаПлатежа + Выборка.СуммаПлатежа; 
//		КонецЦикла;
//		СтрокаПлатеж = ППИ.РасшифровкаПлатежа.Добавить();
//		СтрокаПлатеж.СуммаПлатежа = СуммаПлатежа;
//		СтрокаПлатеж.СуммаВзаиморасчетов = СуммаПлатежа;
//	Иначе	
//		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
//			Пока Выборка.Следующий() Цикл
//				СтрокаПодотчет = ППИ.ПеречислениеВПодотчет.Добавить();
//				СтрокаПодотчет.ФизЛицо 						= Выборка.Получатель;
//				СтрокаПодотчет.СтатьяДвиженияДенежныхСредств= Выборка.СтатьяДвиженияДенежныхСредств;
//				СтрокаПодотчет.Проект						= Выборка.Проект;
//				СтрокаПодотчет.ДокументПланированияПлатежа	= Выборка.ЗаявкаНаРасходование;
//				СтрокаПодотчет.СуммаПлатежа				 	= Выборка.СуммаПлатежа;
//				СтрокаПодотчет.Подразделение				= фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Выборка.ЗаявкаНаРасходование, "ЦФО");
//				СтрокаПлатеж.Сделка							= Выборка.Сделка;
//				СтрокаПлатеж.ДоговорКонтрагента				= Выборка.ДоговорКонтрагента;
//			КонецЦикла;
//		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
//			Пока Выборка.Следующий() Цикл
//				СтрокаНДСизм = ППИ.ПеречислениеНДССИзмененнымСрокомУплаты.Добавить();
//				СтрокаНДСизм.Контрагент 					= Параметры.Контрагент;
//				СтрокаНДСизм.Договор	 					= Выборка.ДоговорКонтрагента;
//				СтрокаНДСизм.Проект							= Выборка.Проект;
//				СтрокаНДСизм.ДокументПланированияПлатежа	= Выборка.ЗаявкаНаРасходование;
//				СтрокаНДСизм.СуммаПлатежа				 	= Выборка.СуммаПлатежа;
//				СтрокаНДСизм.Подразделение					= Выборка.ЗаявкаНаРасходование.ЦФО;
//				ППИ.ВидНалога 								= Выборка.ЗаявкаНаРасходование.ВидНалога;
//				Если ППИ.ВидНалога.Пустая() Тогда
//					ППИ.ВидНалога = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты;
//				КонецЕсли;
//				ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ППИ.ВидНалога, "СчетУчетаРасчетовСКонтрагентомБУ,СчетКонтрагента,КодБК,КодНазначенияПлатежа,Контрагент");
//				СтрокаНДСизм.СчетУчетаРасчетовСКонтрагентом	= ЗначенияРеквизитов.СчетУчетаРасчетовСКонтрагентомБУ;
//				ППИ.СчетКонтрагента							= ЗначенияРеквизитов.СчетКонтрагента;
//				ППИ.КодБК 									= ЗначенияРеквизитов.КодБК;
//				ППИ.КодНазначенияПлатежа 					= ЗначенияРеквизитов.КодНазначенияПлатежа;
//				ППИ.Контрагент 								= ЗначенияРеквизитов.Контрагент;		
//			КонецЦикла;
//			
//			ДатаПрекращенияВыводаРНН = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ДатаПрекращенияВыводаРННВПервичныхДокументах");
//			
//			ВыводитьРНН = Не ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) Или ППИ.ДатаВыписки < ДатаПрекращенияВыводаРНН;
//			
//			Если НЕ ППИ.Контрагент.Пустая() Тогда
//				Если ВыводитьРНН Тогда 
//					ППИРННПолучателя = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ППИ.Контрагент, "РНН");
//				Иначе 
//					ППИРННПолучателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ППИ.Контрагент, "ИдентификационныйКодЛичности");
//				КонецЕсли;
//			КонецЕсли;
//			Если НЕ ППИ.СчетКонтрагента.Пустая() Тогда
//				ППИ.ТекстПолучателя = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ППИ.СчетКонтрагента, "ТекстКорреспондента");
//			Иначе
//				ИменаРеквизитов = "НаименованиеПолное, Наименование";
//				ЗначРеквКонтрагента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ППИ.Контрагент, ИменаРеквизитов);
//				ППИ.ТекстПолучателя = ?(НЕ ЗначениеЗаполнено(ЗначРеквКонтрагента.НаименованиеПолное), ЗначРеквКонтрагента.Наименование, ЗначРеквКонтрагента.НаименованиеПолное);
//			КонецЕсли;
//			
//			СформироватьНазначениеПлатежа(ППИ);	
//			
//			ВидНалога = ППИ.ВидНалога;
//			
//			Если ЗначениеЗаполнено(фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНалога, "НазначениеПлатежа")) Тогда
//				ППИ.НазначениеПлатежа = СокрЛП(фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНалога, "НазначениеПлатежа"));
//			КонецЕсли;	
//			ППИ.СчетУчетаРасчетовСКонтрагентомБУ = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНалога, "СчетУчетаРасчетовСКонтрагентомБУ");
//			Для Ном = 1 По ППИ.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество() Цикл
//				ТекущийВидСубконто = ППИ.СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто[Ном-1].ВидСубконто;		
//				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств Тогда
//					ППИ["СубконтоДтБУ" + Ном] = ППИ.СтатьяДвиженияДенежныхСредств;
//				КонецЕсли;	
//				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
//					ППИ["СубконтоДтБУ" + Ном] = ВидНалога;
//				КонецЕсли;			
//			КонецЦикла;	
//			
//			ППИ.СчетУчетаРасчетовСКонтрагентомНУ = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНалога, "СчетУчетаРасчетовСКонтрагентомНУ");	
//			Если НЕ ЗначениеЗаполнено(ППИ.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
//				ППИ.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ППИ.СчетУчетаРасчетовСКонтрагентомБУ, ППИ.Дата);						
//			КонецЕсли;			
//		КонецЕсли;
//		
//		Выборка.Сбросить();
//		
//		ДоговорКонтрагента = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ППИ.Контрагент, "ОсновнойДоговорКонтрагента");
//		ОсновнойДоговорКонтрагента = дог_УправлениеДоговорами.ДоступныйДоговорКонтрагента(ДоговорКонтрагента);
//		Пока Выборка.Следующий() Цикл
//			СтрокаПлатеж = ППИ.РасшифровкаПлатежа.Добавить();
//			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
//			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
//			СтрокаПлатеж.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
//			Если ППИ.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
//				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
//				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
//			Иначе
//				СтруктураКурсВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
//				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
//				Если (СтрокаПлатеж.СуммаВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
//					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
//					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
//				КонецЕсли;
//			КонецЕсли;
//			Если НЕ ЗначениеЗаполнено(ППИ.Контрагент) Тогда
//				СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
//			ИначеЕсли НЕ ден_ПроцедурыКазначейства.ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) = Неопределено Тогда
//				Если ППИ.Организация.Пустая() Тогда
//					СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
//					ППИ.Организация = ОсновнойДоговорКонтрагента.Организация;
//				ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
//					ИЛИ ОсновнойДоговорКонтрагента.Организация 	= ППИ.Организация Тогда
//					СтрокаПлатеж.ДоговорКонтрагента 			= ОсновнойДоговорКонтрагента;
//				КонецЕсли;
//			КонецЕсли;
//			СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(ППИ.Организация, ППИ.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
//			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ	= СчетаУчета.СчетРасчетовПокупателя;
//				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам			= СчетаУчета.СчетВозвратовПокупателя;
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
//				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам			= ПланыСчетов.Типовой.ПустаяСсылка();						
//			Иначе
//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ	= СчетаУчета.СчетРасчетов;
//				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        	= СчетаУчета.СчетАвансов;			
//			КонецЕсли;
//			СтрокаПлатеж.СтавкаНДС 						 		= СтавкаНДС;
//			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	 		= Выборка.СтатьяДвиженияДенежныхСредств;
//			Если НЕ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
//					 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты) Тогда
//				СтрокаПлатеж.Проект							 	= Выборка.Проект;
//				СтрокаПлатеж.ДокументПланированияПлатежа	 	= Выборка.ЗаявкаНаРасходование;
//				СтрокаПлатеж.КурсВзаиморасчетовПлан			 	= ?(СтрокаПлатеж.КурсВзаиморасчетов = 0 И Выборка.ЗаявкаНаРасходование.ВалютаДокумента = ППИ.ВалютаДокумента, КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов);
//				СтрокаПлатеж.СуммаПлатежаПлан				 	= СтрокаПлатеж.СуммаПлатежа;
//			КонецЕсли;
//			ППИ.СтатьяДвиженияДенежныхСредств	 				= Выборка.СтатьяДвиженияДенежныхСредств;
//			
//			УправлениеДенежнымиСредствамиКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
//			
//			СтрокаПлатеж.Подразделение							= Выборка.ЗаявкаНаРасходование.ЦФО;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	ППИ.СуммаДокумента = ППИ.РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	
//	ППИ.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
//	
//	ден_ПроцедурыКазначейства.ЗаполнитьРеквизитыРасчетногоДокумента(ППИ, ППИ.РасшифровкаПлатежа);

//	Попытка
//		ППИ.УстановитьНовыйНомер();
//		ППИ.Записать(РежимЗаписиДокумента.Запись);
//		Возврат ППИ.Ссылка;
//	Исключение
//		ТекстСообщения = "Не удалось создать платежное поручение исходящее по причине:
//						 |	" + ОписаниеОшибки();
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//		Возврат Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка();
//	КонецПопытки;
//	
//КонецФункции // ЗаполнитьПоДокументуОснования

//// Процедура выполняет заполнение документа по документу-основанию
////
//&НаСервереБезКонтекста
//Функция ЗаполнитьРКОПоДокументуОснования(Основание, Заявки, Параметры)
//	
//	РКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();

//	/// Заполним реквизиты из стандартного набора по документу основанию.
//	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(РКО, Основание);
//	
//	РКО.Дата 			= ТекущаяДата();
//	РКО.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
//	РКО.Контрагент 		= Параметры.Контрагент;

//	ПараметрыДокументаОснования = ОбщегоНазначенияБК.СформироватьСтруктуруШапкиДокумента(Основание);
//	ВидДокументаОснования       = Основание.Метаданные().Имя;
//	
//	РКО.ДокументОснование 	= ПараметрыДокументаОснования.Ссылка;
//	
//	ТекущийПользователь 	= Пользователи.ТекущийПользователь();
//	
//	РКО.Касса                   			= Параметры.БанковскийСчетКасса;
//	Если Не ЗначениеЗаполнено(РКО.Касса) Тогда
//		РКО.Касса = РКО.Организация.ОсновнаяКасса;
//	КонецЕсли;

//	// Заполняет счета учета БУ и НУ
//	Если Не РКО.Касса.Пустая() Тогда
//		СчетУчетаКассы = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(РКО.Касса, РКО.СчетКасса.Пустая()).СчетУчетаБУ;
//		Если ЗначениеЗаполнено(СчетУчетаКассы) Тогда
//			РКО.СчетКасса = СчетУчетаКассы;
//		КонецЕсли;	
//	КонецЕсли;
//	
//	РКО.СтруктурноеПодразделениеОтправитель = Основание.СтруктурноеПодразделение;
//	
//	РКО.ОтражатьВУправленческомУчете	= Истина;
//	РКО.ОтражатьВБухгалтерскомУчете		= Истина;
//	
//	СтруктураКурсаДокумента 			= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(РКО.ВалютаДокумента, РКО.Дата);
//	КурсДокумента           			= СтруктураКурсаДокумента.Курс;
//	КратностьДокумента	      			= СтруктураКурсаДокумента.Кратность;
//	
//	ВидОперацииЗаявка = Параметры.ВидОперации;
//	УправлениеДенежнымиСредствамиСервер.ОпределитьОперациюПоОснованиюУпр(РКО.ВидОперации, ВидОперацииЗаявка);
//	
//	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
//	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
//	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
//	|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//	|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
//	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
//	|ИЗ
//	|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование В (&ДокументЗаявка)) КАК ЗаявкиНаРасходованиеСредствОстатки";
//	
//	Запрос.УстановитьПараметр("ДокументЗаявка", Заявки);
//	
//	СтавкаНДС = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		СтрокаПлатеж = РКО.РасшифровкаПлатежа.Добавить();
//		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
//		СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
//		Если РКО.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
//			СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
//			СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
//		Иначе
//			СтруктураКурсВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
//			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
//			Если (СтрокаПлатеж.СуммаВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
//				СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
//				/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
//			КонецЕсли;
//		КонецЕсли;
//		СтрокаПлатеж.Сделка				= Выборка.Сделка;
//		СтрокаПлатеж.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
//		
//		ВидОперации = РКО.ВидОперации;
//		Если НЕ (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
//			СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(РКО.Организация, РКО.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
//			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ  	= СчетаУчета.СчетРасчетовПокупателя;
//				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        	= СчетаУчета.СчетВозвратовПокупателя;
//			Иначе
//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ 	= СчетаУчета.СчетРасчетов;        			
//				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     	= СчетаУчета.СчетАвансов;					
//			КонецЕсли;
//		КонецЕсли;
//		
//		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	= Выборка.СтатьяДвиженияДенежныхСредств;
//		СтрокаПлатеж.Проект							= Выборка.Проект;
//		СтрокаПлатеж.ДокументПланированияПлатежа	= Выборка.ЗаявкаНаРасходование;
//		СтрокаПлатеж.КурсВзаиморасчетовПлан			= ?(СтрокаПлатеж.КурсВзаиморасчетов=0 И Выборка.ЗаявкаНаРасходование.ВалютаДокумента = РКО.ВалютаДокумента,КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов);
//		СтрокаПлатеж.СуммаПлатежаПлан				= СтрокаПлатеж.СуммаПлатежа;
//		СтатьяДвиженияДенежныхСредств	 			= Выборка.СтатьяДвиженияДенежныхСредств;
//		СтрокаПлатеж.Подразделение					= фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Выборка.ЗаявкаНаРасходование, "ЦФО");
//		
//	КонецЦикла;
//	
//	РКО.СуммаДокумента = РКО.РасшифровкаПлатежа.Итог("СуммаПлатежа");
//	
//	ЕстьРасчетыСКонтрагентами = ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
//	ЕстьРасчетыПоКредитам     = ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
//	
//	Ответственный = ТекущийПользователь;

//	Если РКО.Выдать = "" И ЗначениеЗаполнено(РКО.Контрагент) Тогда

//		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
//			РКО.Выдать =?(РКО.Контрагент.НаименованиеПолное="",РКО.Контрагент.Наименование, РКО.Контрагент.НаименованиеПолное);
//		ИначеЕсли РКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
//			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
//			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
//			|ИЗ
//			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
//			Запрос.УстановитьПараметр("Дата",    РКО.Дата);
//			Запрос.УстановитьПараметр("ФизЛицо", РКО.Контрагент);
//			Результат = Запрос.Выполнить().Выбрать();
//			Если Результат.Следующий() Тогда
//				РКО.Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
//				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;

//	ВидОперации = РКО.ВидОперации;
//	
//	Если РКО.ПоДокументу = "" И ЗначениеЗаполнено(РКО.Контрагент) 
//	   И (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
//	 		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами) Тогда
//		
//	   	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
//	   		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(РКО.Контрагент.ФизЛицо, РКО.Дата);
//	   	Иначе
//			ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(РКО.Контрагент, РКО.Дата);
//		КонецЕсли;

//		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
//			РКО.ПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
//				              ДокФизЛица.Серия       + ", номер " +
//				              ДокФизЛица.Номер       + ", выданый " +
//				              Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
//				              ДокФизЛица.Выдан;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ден_ПроцедурыКазначейства.ЗаполнитьРеквизитыРасчетногоДокумента(РКО, РКО.РасшифровкаПлатежа);

//КонецФункции // ЗаполнитьПоДокументуОснования

&НаСервереБезКонтекста
Процедура ОбходДереваСПроведениемЗаявок(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если СтрокаПодчиненная.Применить 
			И ЗначениеЗаполнено(СтрокаПодчиненная.ПлатежныйДокумент) Тогда
			Попытка
				ДокументОбъект = СтрокаПодчиненная.ПлатежныйДокумент.ПолучитьОбъект();	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстСообщения = "Невозможно провести документ: " + СтрокаПодчиненная.ПлатежныйДокумент + " " + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		ОбходДереваСПроведениемЗаявок(СтрокаПодчиненная.Строки);
	КонецЦикла;
	
КонецПроцедуры

//&НаСервереБезКонтекста
//Процедура СформироватьНазначениеПлатежа(Объект, АвтоподстановкаСуммыНДС = "СуммаИНДС")
//	
//	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений(); 
//	
//	НазваниеВалюты = НРег(Объект.СчетОрганизации.ВалютаДенежныхСредств.НаименованиеПолное);
//	
//	Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
//		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
//	
//		СтрокаТекста = "";
//		ПериодРегистрацииПеречислений = НачалоМесяца(Объект.Дата);
//		
//		СведенияОКонтрагенте = фин_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Объект.Контрагент, Объект.Дата, , Объект.СчетКонтрагента);
//		
//		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
//			// Перечисление пенсионных взносов
//			Если (Объект.ПеречислениеПенсионныхВзносов.Количество() > 0) Тогда
//				ДокументДляПеречисления = Объект.ПеречислениеПенсионныхВзносов[0].Документ;
//				ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;
//				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
//					ВидОПВ = ?(ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов, НСтр("ru = 'ОПВ'"), НСтр("ru = 'ОППВ'"));
//					Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
//					 ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
//						СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление обязательных %1 пенсионных взносов'"); 
//						СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, ?(ВидОПВ = НСтр("ru = 'ОПВ'"), "", НСтр("ru = 'профессиональных '")));
//						Объект.КодНазначенияПлатежа = "019";
//					ИначеЕсли ВидОПВ = "ОПВ" Тогда
//						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.КодНазначенияПлатежа;					
//					Иначе
//						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.КодНазначенияПлатежа;					
//					КонецЕсли;
//					
//					Если СтрокаТекста = "" Тогда
//						
//						Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
//							Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация,
//																							Объект.Организация,
//																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
//						Иначе
//							Налогоплательщик = Объект.Организация;
//						КонецЕсли;
//						
//						Если ВидОПВ = "ОПВ" Тогда
//							СтавкаОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
//							СтрокаТекста = НСтр("ru = '%1% обязательные пенсионные взносы'"); 
//							СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Строка(СтавкаОПВ));
//						Иначе 
//							СтавкаОППВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
//							СтрокаТекста = НСтр("ru = '%1% обязательные профессиональные пенсионные взносы'"); 
//							СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Строка(СтавкаОППВ));
//						КонецЕсли;
//						
//					КонецЕсли;
//					
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			// Перечисление социальных отчислений
//			Если (Объект.ПеречислениеСоциальныхОтчислений.Количество() > 0) Тогда
//				ДокументДляПеречисления = Объект.ПеречислениеСоциальныхОтчислений[0].Документ;
//				ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;
//				
//				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
//					Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
//					 ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
//						СтрокаТекста = НСтр("ru = 'Пеня за несвоевременное перечисление обязательных социальных отчислений'");
//						Объект.КодНазначенияПлатежа = "017";
//					Иначе
//						Объект.КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.КодНазначенияПлатежа;					
//					КонецЕсли;
//				КонецЕсли;
//				
//			КонецЕсли;			 
//				
//			Если СтрокаТекста = "" Тогда
//				СтрокаТекста = НСтр("ru = 'Обязательные социальные отчисления'");
//			КонецЕсли;
//			
//			ПодтрокаТекста = НСтр("ru = '%1 в %2'"); 
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтрокаТекста, СтрокаТекста, СокрЛП(СведенияОКонтрагенте.ПолноеНаименование));
//			
//		КонецЕсли;

//		ПодстрокаТекста = НСтр("ru = '%1 за период %2 г. cогласно прилагаемого списка. НДС не облагается.'"); 
//		СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, НРег(Формат(ПериодРегистрацииПеречислений, "ДФ='ММММ гггг'")));
//			
//		Если Объект.ВключатьКомиссиюБанка Тогда

//			ПодстрокаТекста = НСтр("ru = '%1 В том числе комиссия банка %2%. Комиссионное вознаграждение банка %3 %4.'");
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Объект.ПроцентКомиссии, Объект.ПроцентКомиссии, НазваниеВалюты);

//		КонецЕсли;
//		
//		Объект.НазначениеПлатежа = СтрокаТекста;
//	
//	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
//		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда 
//	
//		СтрокаТекста = НСтр("ru = 'Для зачисления на картсчета сотрудникам согласно спискам '");
//				
//		Если Объект.ВключатьКомиссиюБанка Тогда

//			Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
//				СуммаПоВедомостям = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
//			Иначе
//				СуммаПоВедомостям = Объект.ПеречислениеВПодотчет.Итог("СуммаПлатежа");
//			КонецЕсли;
//			
//			ПодстрокаТекста = НСтр("ru = '%1 %2 %3. В том числе комиссия банка %4%. Комиссионное вознаграждение банка %5 %3.'");  
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Формат(СуммаПоВедомостям + Объект.СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00"), НазваниеВалюты, Объект.ПроцентКомиссии, Формат(Объект.СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") );
//		
//		Иначе
//			ПодстрокаТекста = НСтр("ru = '%1 %2 %3.'");  
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Формат(Объект.СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00"), НазваниеВалюты);
//		КонецЕсли;
//	
//		// определим уникод организации в банковской системе
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("парамОрганизация", Объект.Организация);
//		Запрос.УстановитьПараметр("парамБанк", 		  Объект.СчетКонтрагента.Банк);
//		
//		Запрос.Текст = "
//		|ВЫБРАТЬ
//		|	КодыОрганизацийВБанковскойСистеме.КодОрганизации
//		|ИЗ
//		|	РегистрСведений.КодыОрганизацийВБанковскойСистеме КАК КодыОрганизацийВБанковскойСистеме
//		|ГДЕ
//		|	КодыОрганизацийВБанковскойСистеме.Организация = &парамОрганизация
//		|	И КодыОрганизацийВБанковскойСистеме.Банк = &парамБанк
//		|";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ПодстрокаТекста = НСтр("ru = '%1 %2'");  
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СокрЛП(Выборка.КодОрганизации), СтрокаТекста);
//		КонецЕсли;
//		
//		Объект.НазначениеПлатежа = СтрокаТекста;
//		
//	Иначе
//		// Все прочие виды операций по единому образцу
//		
//		// Удаляем ранее включенные в текст сведения о сумме платежа и НДС
//		АдресСуммы = Найти(Объект.НазначениеПлатежа, НСтр("ru = 'Сумма'"));
//		
//		Если АдресСуммы > 0 Тогда
//			СтрокаТекста = НСтр("ru = '%1'");
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Лев(Объект.НазначениеПлатежа, АдресСуммы-2));
//		Иначе
//			СтрокаТекста = НСтр("ru = '%1'");
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, Объект.НазначениеПлатежа);
//		КонецЕсли;
//		
//		АдресНДС = Найти(СтрокаТекста, НСтр("ru = 'в т.ч. НДС'"));
//		
//		Если АдресНДС > 0 Тогда
//			ПодстрокаТекста = НСтр("ru = '%1'");  
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресНДС-2));
//		КонецЕсли;
//		
//		АдресКомиссии = Найти(СтрокаТекста, НСтр("ru = 'В том числе комиссия'"));
//		
//		Если АдресКомиссии > 0 Тогда
//			ПодстрокаТекста = НСтр("ru = '%1'");  
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, Лев(СтрокаТекста, АдресКомиссии-2));
//		КонецЕсли;

//		// формируем текст назначения по данным счета контрагента, если такая возможность есть
//		Если СтрокаТекста = "" И НЕ Объект.СчетКонтрагента.Пустая() Тогда
//			СтрокаТекста = Объект.СчетКонтрагента.ТекстНазначения;
//		КонецЕсли;	
//		
//		// добавляем в текст сведения о сумме платежа, в соответствии с форматом автоподставновки, выбранным пользователем		
//		ТекстСумма = " ";
//		
//		Если Объект.ВключатьКомиссиюБанка Тогда
//			СуммаДляПлатежа	= Объект.СуммаДокумента + Объект.СуммаКомиссии;
//		Иначе
//			СуммаДляПлатежа	= Объект.СуммаДокумента;		
//		КонецЕсли;
//		           
//		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "Сумма" Тогда
//			ПодтекстШаблон = НСтр("ru = 'Сумма %1 %2'");  
//			ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ОбщегоНазначенияБКВызовСервера.ФорматСумм(СуммаДляПлатежа, Объект.ВалютаДокумента, "0-00", "", "-", Истина));
//		КонецЕсли;	
//		
//		// добавляем в текст сведения о сумме НДС, в соответствии с форматом автоподставновки, выбранным пользователем
//		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "НДС" Тогда
//			
//			ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();		
//			ТабНДС.Свернуть("СтавкаНДС", "СуммаНДС");
//			
//			Для Каждого СтрокаНДС Из ТабНДС Цикл
//				ПодтекстШаблон = НСтр("ru = '%1 в т.ч. НДС(%2) %3'");
//				ТекстСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодтекстШаблон, ТекстСумма, ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС), ОбщегоНазначенияБКВызовСервера.ФорматСумм(СтрокаНДС.СуммаНДС, Объект.ВалютаДокумента, "0-00","", "-", Истина));
//			КонецЦикла;
//			
//		КонецЕсли;
//		
//		СтрокаТекста = ТекстСумма;

//		Если (АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "Сумма") 
//			 И Объект.ВключатьКомиссиюБанка И НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
//			 						   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
//									   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
//									   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты) Тогда
//									   
//			ПодстрокаТекста = НСтр("ru = '%1 В том числе комиссия банка %2%. Комиссионное вознаграждение банка %3 %4.'");
//			
//			СтрокаТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодстрокаТекста, СтрокаТекста, Объект.ПроцентКомиссии, Формат(Объект.СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00"), НазваниеВалюты);
//									   
//		 КонецЕсли;
//		
//		 Объект.НазначениеПлатежа = СтрокаТекста;
//		 
//	 КонецЕсли;
//	
//КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявкиСерв(ЕдинымДокументом = Ложь)
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	ПараметрыФормирования = Новый Структура("ФормаОплаты,ВидОперации,Контрагент,Получатель,БанковскийСчетКасса,ВалютаДокумента,Основание",ФормаОплаты,ВидОперации,Контрагент,Получатель,БанковскийСчетКасса,?(ЗначениеЗаполнено(БанковскийСчетКасса),БанковскийСчетКасса.ВалютаДенежныхСредств,Неопределено),Параметры.План);
	ПолучитьСтрокиФормированияЗаявок(Дерево.Строки,ФормироватьДокументыТекущейДатой,ПараметрыФормирования,ЕдинымДокументом,,,ДокументыОплаты);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоЗаявок");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЗаявок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланПлатежейПлатежи.ЗРС КАК ЗРС
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	Документ.ден_ПланПлатежей.Платежи КАК ПланПлатежейПлатежи
	|ГДЕ
	|	ПланПлатежейПлатежи.Ссылка = &План
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗРС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПлатежейПлатежи.ЗРС КАК ЗРС,
	|	Заявки.ФормаОплаты КАК ФормаОплаты,
	|	Заявки.БанковскийСчетКасса КАК СчетКасса,
	|	Заявки.ВидОперации КАК ВидОперации,
	|	ПланПлатежейПлатежи.ДатаПлатежа,
	|	Заявки.ВалютаДокумента КАК Валюта,
	|	ПланПлатежейПлатежи.Сумма КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.КоличествоДок, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИмеютсяПлатежныеДокументы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПланПлатежейПлатежи.ЗРС.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПланПлатежейПлатежи.ЗРС.Контрагент
	|		ИНАЧЕ ПланПлатежейПлатежи.ЗРС.Получатель
	|	КОНЕЦ КАК Получатель
	|ИЗ
	|	Документ.ден_ПланПлатежей.Платежи КАК ПланПлатежейПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК КоличествоДок,
	|			ВложенныйЗапрос.ДокументПланированияПлатежа КАК ЗРС
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
	|				ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	|				ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка,
	|				ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты КАК ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка,
	|				ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|				РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|				РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|				ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка,
	|				ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа
	|			ИЗ
	|				Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заявки КАК ВТ_Заявки
	|					ПО ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа = ВТ_Заявки.ЗРС
	|			ГДЕ
	|				ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления = ЛОЖЬ) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ДокументПланированияПлатежа) КАК ВложенныйЗапрос
	|		ПО ПланПлатежейПлатежи.ЗРС = ВложенныйЗапрос.ЗРС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ден_ЗаявкаНаРасходованиеСредств КАК Заявки
	|		ПО ПланПлатежейПлатежи.ЗРС = Заявки.Ссылка
	|ГДЕ
	|	ПланПлатежейПлатежи.Ссылка = &План
	|	И ВЫБОР
	|			КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ден_ВидыДенежныхСредств.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Заявки.ФормаОплаты = &ФормаОплаты
	|					И ВЫБОР
	|						КОГДА &БанковскийСчетКасса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|								ИЛИ &БанковскийСчетКасса = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|								ИЛИ &БанковскийСчетКасса = НЕОПРЕДЕЛЕНО
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Заявки.БанковскийСчетКасса = &БанковскийСчетКасса
	|					КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Заявки.ВидОперации = &ВидОперации
	|					И ВЫБОР
	|						КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП)
	|							ТОГДА ИСТИНА
	|						КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику)
	|								ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками)
	|							ТОГДА ВЫБОР
	|									КОГДА &Получатель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ Заявки.Получатель = &Получатель
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ Заявки.Контрагент = &Контрагент
	|							КОНЕЦ
	|					КОНЕЦ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОперации,
	|	ФормаОплаты,
	|	СчетКасса,
	|	ЗРС
	|ИТОГИ ПО
	|	ВидОперации,
	|	ФормаОплаты,
	|	СчетКасса";
	
	Запрос.УстановитьПараметр("ФормаОплаты",		ФормаОплаты);
	Запрос.УстановитьПараметр("БанковскийСчетКасса",БанковскийСчетКасса);
	Запрос.УстановитьПараметр("ВидОперации",		ВидОперации);
   	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
   	Запрос.УстановитьПараметр("Получатель",			Получатель);
   	Запрос.УстановитьПараметр("План",				Параметры.План);
	
	Результат = Запрос.Выполнить();

	ВыборкаВидОперации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	Дерево.Строки.Очистить();
	Пока ВыборкаВидОперации.Следующий() Цикл
		// Вставить обработку выборки ВыборкаВидОперации
        Строка = Дерево.Строки.Добавить();
		Строка.ВидОперацииФОБК = ВыборкаВидОперации.ВидОперации;
		ВыборкаФормаОплаты = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФормаОплаты.Следующий() Цикл
			// Вставить обработку выборки ВыборкаФормаОплаты
            СтрокаФО = Строка.Строки.Добавить();
			СтрокаФО.ВидОперацииФОБК = ВыборкаФормаОплаты.ФормаОплаты;
			ВыборкаСчетКасса = ВыборкаФормаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаСчетКасса.Следующий() Цикл
				// Вставить обработку выборки ВыборкаСчетКасса
                СтрокаСК = СтрокаФО.Строки.Добавить();
				СтрокаСК.ВидОперацииФОБК = ВыборкаСчетКасса.СчетКасса;
				ВыборкаЗРС = ВыборкаСчетКасса.Выбрать();

				Пока ВыборкаЗРС.Следующий() Цикл
					СтрокаЗРС = СтрокаСК.Строки.Добавить();
					СтрокаЗРС.ВидОперацииФОБК = ВыборкаЗРС.ЗРС;
					ЗаполнитьЗначенияСвойств(СтрокаЗРС,ВыборкаЗРС);

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
    ЗначениеВРеквизитФормы(Дерево, "ДеревоЗаявок");
	
    ПоказатьДокументыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДокументыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПлатежныеДокументы КАК ПлатежныеДокументы,
	|	ВложенныйЗапрос.ДокументПланированияПлатежа КАК ЗРС,
	|	ВложенныйЗапрос.Проведен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК ПлатежныеДокументы,
	|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|		ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен КАК Проведен
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|	ГДЕ
	|		(НЕ ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка,
	|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДокументПланированияПлатежа,
	|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|	ГДЕ
	|		(НЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка,
	|		ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.ДокументПланированияПлатежа,
	|		ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка.Проведен
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты КАК ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты
	|	ГДЕ
	|		(НЕ ПлатежноеПоручениеИсходящееПеречислениеНДССИзмененнымСрокомУплаты.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка,
	|		ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ДокументПланированияПлатежа,
	|		ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка.Проведен
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|	ГДЕ
	|		(НЕ ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.ДокументПланированияПлатежа,
	|		РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|	ГДЕ
	|		(НЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументПланированияПлатежа,
	|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|	ГДЕ
	|		(НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка,
	|		ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.ДокументПланированияПлатежа,
	|		ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
	|	ИЗ
	|		Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
	|	ГДЕ
	|		(НЕ ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка,
	|		ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.ДокументПланированияПлатежа,
	|		ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.Проведен
	|	ИЗ
	|		Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты
	|	ГДЕ
	|		(НЕ ПлатежныйОрдерСписаниеДенежныхСредствПеречислениеЗаработнойПлаты.Ссылка.ПометкаУдаления)) КАК ВложенныйЗапрос
	|ГДЕ
	|	(НЕ ВложенныйЗапрос.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ден_ЗаявкаНаРасходованиеСредств.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежныеДокументы";

	Результат = Запрос.Выполнить();

	ДокументыОплаты.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	ОбходДереваСПроведениемЗаявок(Дерево.Строки);
	
КонецПроцедуры

