#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПоНесколькимПроектам(Объект, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам) Экспорт
	
	Если ЕстьРасчетыСКонтрагентами Или ЕстьРасчетыПоКредитам Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ТаблицаПроекты = Объект.РасшифровкаПлатежа.Выгрузить(,"Проект");
			ТаблицаПроекты.Свернуть("Проект");
			Если ТаблицаПроекты.Количество() > 1 Тогда
				Возврат Истина;
			ИначеЕсли ТаблицаПроекты.Количество() = 1 Тогда
				Возврат (ЗначениеЗаполнено(ТаблицаПроекты[0].Проект) И ТипЗнч(ТаблицаПроекты[0].Проект) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьБюджетныеПараметры(Объект, КЭШ_Разрезы, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам) Экспорт

	Объект.БюджетныеПараметры.Очистить();
	
	НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
	НоваяСтрока.Измерение	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент;
	НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты;
	НоваяСтрока.Значение 	= Объект.Контрагент;
	
	НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
	НоваяСтрока.Измерение	= Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение;
	НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО;
	НоваяСтрока.Значение 	= Объект.ЦФО;
	
	НесколькоПроектов = ПоНесколькимПроектам(Объект, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам);
	
	Если НЕ Объект.ФинансовыйПоказатель.Пустая() Тогда
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СтрокаРасшифровки = Объект.РасшифровкаПлатежа[0];
			
			Если Не НесколькоПроектов Тогда
				НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
				НоваяСтрока.Измерение	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект;
				НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты;
				НоваяСтрока.Значение 	= СтрокаРасшифровки.Проект;
			КонецЕсли;
			
			Тип = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
			СписокРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(Объект.ФинансовыйПоказатель);
			Для Каждого Разрез Из СписокРазрезов Цикл
				ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение,КЭШ_Разрезы);
				Если ЭПВХ.ТипЗначения.СодержитТип(Тип) Тогда
					НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
					НоваяСтрока.Измерение	= Разрез.Значение;
					НоваяСтрока.Разрез 		= ЭПВХ;
					НоваяСтрока.Значение 	= СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
			НоваяСтрока.Измерение	= Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект;
			НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты;
			НоваяСтрока.Значение 	= Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;


КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
// 	Объект - документ
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"), , , , ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	Организация = Объект.Организация;
	ФормаОплаты = Объект.ФормаОплаты;	
	БанковскийСчетКасса = Объект.БанковскийСчетКасса;
		
	Если ФормаОплаты.Пустая() Тогда
		ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			БанковскийСчетКасса = Организация.ОсновнаяКасса;
		Иначе
			БанковскийСчетКасса = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(БанковскийСчетКасса, "ВалютаДенежныхСредств");
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ЗаполнитьДокументПоСчетуНаОплатуПокупателю(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьДокументПоРеализацииТоваровУслуг(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ЗаполнитьДокументПоРеализацииУслугПоПереработке(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьДокументПоВозвратуТоваровПоставщику(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ЗаполнитьДокументПоПлатежномуПоручениюИсходящему(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ЗаполнитьДокументПоАктуОбОказанииПроизводственныхУслуг(Объект, ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

Процедура ЗаполнитьДокументПоСчетуНаОплатуПокупателю(Объект, Основание)
	
	Объект.Контрагент = Основание.Контрагент;
	
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	//СпособЗаполнения = "Не заполнять";
	СпособЗаполнения = "По сумме документа" ;
	
	СтрокаПлатеж.ДоговорКонтрагента   	 	= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов        	= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;

	Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
		Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
			Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		Иначе
			Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		КонецЕсли;
		Объект.БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
	Иначе
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнаяКасса;
		КонецЕсли;
	КонецЕсли;

	СтруктураКурсаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаПоступления);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования 	= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 				= СтруктураКурсаОснования.Курс;
		КратностьОснования 			= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента 	= Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоРеализацииТоваровУслуг(Объект, Основание)
	
	//Объект.Контрагент = Основание.Контрагент;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СпособЗаполнения = "Не заполнять";
	
	СтрокаПлатеж.ДоговорКонтрагента   		= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов         	= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;

	Если ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБанковскийСчет) Тогда
		СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

	СчетОрганизации     = Объект.Организация.ОсновнойБанковскийСчет;

	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СпособЗаполнения = "По сумме документа";

	Если НЕ СчетОрганизации.Пустая() Тогда
		Объект.ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	
	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования 	= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 				= СтруктураКурсаОснования.Курс;
		КратностьОснования 			= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента 	= Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		Объект.СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 Объект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,Объект.КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		
	КонецЕсли;

	Объект.Контрагент = Основание.Контрагент;
	Объект.Организация = Основание.Организация;
	Объект.СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
КонецПроцедуры

Процедура ЗаполнитьДокументПоРеализацииУслугПоПереработке(Объект, Основание)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СпособЗаполнения = "Не заполнять";
	
	СтрокаПлатеж.ДоговорКонтрагента   		= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов         	= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;

	ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;

	Если ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБанковскийСчет) Тогда
		СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

	СчетОрганизации     = Объект.Организация.ОсновнойБанковскийСчет;

	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СпособЗаполнения = "По сумме документа";

	Если НЕ СчетОрганизации.Пустая() Тогда
		ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования 	= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 				= СтруктураКурсаОснования.Курс;
		КратностьОснования 			= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента 	= Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДокументПоВозвратуТоваровПоставщику(Объект, Основание)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СпособЗаполнения = "Не заполнять";
	
	ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком;
	Контрагент  = Основание.Контрагент;

	СтрокаПлатеж.ДоговорКонтрагента   		= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов         	= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;

	Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
		СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

	СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;

	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
		
	Если Основание.Проведен Тогда
		СпособЗаполнения = "По сумме документа";
	КонецЕсли;

	Если НЕ СчетОрганизации.Пустая() Тогда
		ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования 	= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 				= СтруктураКурсаОснования.Курс;
		КратностьОснования 			= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента 	= Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоПлатежномуПоручениюИсходящему(Объект, Основание)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СпособЗаполнения = "Не заполнять";
	
	ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами;
	ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные;
	
	БанковскийСчетКасса = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	СчетОрганизации     = Объект.Организация.ОсновнойБанковскийСчет;
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	
	СтрокаПлатеж.СуммаПлатежа = Основание.СуммаДокумента;
	
	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 			= СтруктураКурсаОснования.Курс;
		КратностьОснования 		= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента = Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоАктуОбОказанииПроизводственныхУслуг(Объект, Основание)
	
	Объект.Контрагент = Основание.Контрагент;
	//Объект.Подразделение = Основание.Подразделение
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СпособЗаполнения = "Не заполнять";
	
	СтрокаПлатеж.ДоговорКонтрагента   		= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов         	= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;

	Если ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБанковскийСчет) Тогда
		СчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

	СчетОрганизации     = Объект.Организация.ОсновнойБанковскийСчет;

	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СпособЗаполнения = "По сумме документа";

	Если НЕ СчетОрганизации.Пустая() Тогда
		Объект.ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;

	СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	
	Если СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования 	= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования 				= СтруктураКурсаОснования.Курс;
		КратностьОснования 			= СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента 	= Основание.СуммаДокумента;

		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ);
	
	ТаблицаРасшифровкаПлатежа = ПараметрыПроведения.ТаблицаРасшифровкаПлатежа;
	Если ТаблицаРасшифровкаПлатежа <> Неопределено Тогда
		КолонкиГруппировок = "ДоговорКонтрагента,Сделка,КурсВзаиморасчетов,КратностьВзаиморасчетов,СтатьяДвиженияДенежныхСредств,Проект";
		ПараметрыПроведения.ТаблицаРасшифровкаПлатежа.Свернуть(КолонкиГруппировок, "СуммаПлатежа, СуммаВзаиморасчетов");
	КонецЕсли; 

	Возврат ПараметрыПроведения;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
		
КонецПроцедуры

#КонецЕсли
