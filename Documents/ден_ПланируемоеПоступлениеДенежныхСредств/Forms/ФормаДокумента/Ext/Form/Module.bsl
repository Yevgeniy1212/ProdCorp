&НаКлиенте
Перем КЭШ_Разрезы;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КЭШ_Разрезы = Новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)	

	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СтруктурноеПодразделениеОрганизацияПриИзменении

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора,СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры // СтруктурноеПодразделениеОрганизацияНачалоВыбора

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// фин_ОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступления) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;

	ВидОперацииПриИзмененииНаСервере();
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
		
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере();	
	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ВидДоговора = ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Организация, ВидДоговора", Объект.Контрагент, Объект.Организация, ВидДоговора));
		
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	СтрокаДанных          = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВзаиморасчетыПоДоговоруВЦелом(СтрокаДанных.ДоговорКонтрагента) ИЛИ (НЕ ВедетсяУчетПоРасчетнымДокументам) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура(); 	
	СтруктураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода", 		Объект.Дата - 1);
	СтруктураПараметров.Вставить("ТипыДокументов", 		ПолучитьТипСделки());
	
	ВыборРасчетногоДокумента(СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ТекстСообщения = "Для выбора курса взаиморасчетов нужно выбрать договор контрагента.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Валюта",ВалютаДоговора(СтрокаПлатеж.ДоговорКонтрагента));
	СтруктураПараметров.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности",?(Объект.ДатаПоступления='00010101',Объект.Дата,Объект.ДатаПоступления));
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаВзаиморасчетов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ФОРМЫ ГруппаПлатеж

&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	БанковскийСчетКассаПриИзменениНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ФормаОплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.БанковскийСчетКасса = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		ПриОчисткеВалютыДокумента();
	ИначеЕсли НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда
		ДатаКурса = ?(Объект.ДатаПоступления = '00010101', Объект.Дата, Объект.ДатаПоступления);
		СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
		Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
		РассчитатьСуммуПлатежаТаблица();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана валюта поступления денежных средств.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", ?(Объект.ДатаПоступления='00010101',Объект.Дата,Объект.ДатаПоступления));
	СтруктураПараметров.Вставить("КратностьВалюты", Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("КурсВалюты", Объект.КурсДокумента);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратности", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратности(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		Объект.КурсДокумента      = Результат.КурсВалюты;
		Объект.КратностьДокумента = Результат.КратностьВалюты;
		
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаПоступления) ИЛИ НЕ Объект.ВалютаДокумента.Пустая() Тогда
		ДатаПоступленияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ФОРМЫ ГруппаОснование

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	//Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;

	ПриИзмененииДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если НЕ Список И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Все строки расшифровки платежа, кроме первой, будут удалены.
							|Продолжить?'");	
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииСтрокРасшифровки", ЭтотОбъект), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
	Иначе
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииСтрокРасшифровки(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Пока Объект.РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления = Объект.РасшифровкаПлатежа[1];
			Объект.РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
		РассчитатьСуммуПлатежа();
		Объект.СуммаДокумента = Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаПлатежа;
	Иначе
		Список = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ТекстСообщения = "Для выбора курса взаиморасчетов нужно выбрать договор контрагента."; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", ВалютаДоговора(СтрокаПлатеж.ДоговорКонтрагента));
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", ?(Объект.ДатаПоступления='00010101',Объект.Дата,Объект.ДатаПоступления));
	СтруктураПараметров.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаВзаиморасчетов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаВзаиморасчетов(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
		СтрокаПлатеж.КурсВзаиморасчетов = Результат.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = Результат.КратностьВалюты;
		
		РассчитатьСуммуПлатежа();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сделка) Тогда
		СделкаПриИзмененииНаСервере(Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сделка, Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	СтрокаДанных          = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВзаиморасчетыПоДоговоруВЦелом(СтрокаДанных.ДоговорКонтрагента) ИЛИ (НЕ ВедетсяУчетПоРасчетнымДокументам) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура(); 	
	СтруктураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода", 		Объект.Дата - 1);
	СтруктураПараметров.Вставить("ТипыДокументов", 		ПолучитьТипСделки());
	
	ВыборРасчетногоДокумента(СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзаиморасчетовПрочиеПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ФОРМЫ ГруппаБюджетирование

&НаКлиенте
Процедура ФинансовыйПоказательПриИзменении(Элемент)	
	
	ФинансовыйПоказательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеПараметрыИзмерениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БюджетныеПараметры.ТекущиеДанные;
	Если ТекущиеДанные.Измерение.Пустая() Тогда
		ТекущиеДанные.Разрез = "";
		Возврат;
	Иначе 
		ТекущиеДанные.Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ТекущиеДанные.Измерение, КЭШ_Разрезы);
		ТекущиеДанные.Значение = ПолучитьТипЗначения(ТекущиеДанные.Разрез,ТекущиеДанные.Значение);
		Элементы.БюджетныеПараметрыЗначение.ВыбиратьТип = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеПараметрыИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокРазрезов = Новый СписокЗначений;
	Если НЕ ПолучитьПоНесколькимПроектам() Тогда
		СписокРазрезов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект"));
	КонецЕсли;
	СписокРазрезов.Добавить(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение"));
	Если ЗначениеЗаполнено(Объект.ФинансовыйПоказатель) Тогда
		ПолучитьРазрезыУчета(СписокРазрезов);
	КонецЕсли;
	Для Каждого РазрезЭлемент Из СписокРазрезов Цикл
		СписокВыбора.Добавить(РазрезЭлемент.Значение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(РазрезЭлемент.Значение));
	КонецЦикла;
	
    ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ФОРМЫ ГруппаДополнительно

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекущийДокументОснование = Объект.ДокументОснование;
		Возврат;
	КонецЕсли;
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru = 'Заполнить текущий документ данными документа-основания?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииПоОснованию", ЭтотОбъект), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);			   
					   
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаполненииПоОснованию(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнениеПоОснованиюНаСервере();
	
		// активизируем текущую строку платежа
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
		Если НЕ ТекущаяОрганизация = Объект.Организация  Тогда
			СтруктурноеПодразделениеОрганизацияПриИзменении(Элементы.СтруктурноеПодразделениеОрганизация);
		КонецЕсли;
		ТекущийДокументОснование 	= Объект.ДокументОснование;
		ТекущаяОрганизация 	  		= Объект.Организация;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛИ ЗАКЛАДОК

&НаКлиенте
Процедура НажатиеПоЭлементуНавигацииНадпись(Элемент)
	
	НажатиеНаПанельЗакладокСсылка(Элементы, Элемент, Элементы.ГруппаСтраницыЛевая);
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеПоЭлементуНавигацииКартинка(Элемент)
	
	НажатиеНаПанельЗакладокКартинка(Элементы, Элемент, Элементы.ГруппаСтраницыЛевая);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Заполнить(Команда) Экспорт
	
	ЗаполнитьНаСервере(КЭШ_Разрезы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента 			= Объект.Дата;
	ТекущаяВалютаДокумента 			= Объект.ВалютаДокумента;
	ТекущаяОрганизация 				= Объект.Организация;
	ТекущееСтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
	ТекущийДокументОснование 		= Объект.ДокументОснование;

	ВалютаРегламентированногоУчета 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВедетсяУчетПоРасчетнымДокументам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ВедутсяВзаиморасчетыПоДокументам();
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ПоказыватьДвиженияПриПроведении");	
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Список = ?(Объект.РасшифровкаПлатежа.Количество() > 1, 1, 0);
	
	ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;

	ЕстьРасчетыСКонтрагентами = ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
	ЕстьРасчетыПоКредитам     = ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьТипБанковскийСчетКасса();
	КонецЕсли;

	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтаФорма,,"БюджетныеПараметры",Ложь);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УстановитьЗаголовкиГрупп();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы; 
	                  
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Форма.ИдентификаторСтрокаПлатеж);
	ВалютаВзаиморасчетовПоДоговору = ПолучитьВалютаВзаиморасчетов(СтрокаПлатеж.ДоговорКонтрагента);
	Элементы.ИнфНадписьКурса.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору,
		СтрокаПлатеж.КурсВзаиморасчетов, СтрокаПлатеж.КратностьВзаиморасчетов, Форма.ВалютаРегламентированногоУчета, Истина);
		
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		СуммаВзаиморасчетовЗаголовок = "Сумма <нет валюты>";
	Иначе
		СуммаВзаиморасчетовЗаголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору);
	КонецЕсли;
	Элементы.СуммаВзаиморасчетов.Заголовок = СуммаВзаиморасчетовЗаголовок;
	
	ВалютаСтрокой = СокрЛП(Строка(Объект.ВалютаДокумента));
	СуммаПлатежа = Формат(Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль");
	
	Элементы.НадписьИтогоСписок.Заголовок = "Итого платежей по списку: " + СуммаПлатежа + " " + ВалютаСтрокой;
		
	Если Объект.ВалютаДокумента.Пустая() Тогда
		НадписьСуммаДокумента = "Не указана валюта прихода денежных средств!";
	Иначе
		НадписьСуммаДокумента = "Всего по документу: " + Формат(Объект.СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " 
			+ ВалютаСтрокой;
	КонецЕсли;		
	Элементы.НадписьСуммаДокумента.Заголовок = НадписьСуммаДокумента;
		
	Элементы.НадписьВалютаДокумент.Заголовок = ВалютаСтрокой;
	Элементы.НадписьВалютаДокумент1.Заголовок = ВалютаСтрокой;

	// Видимость реквизитов и заголовков колонок
	Для каждого ЭлементГруппы Из Элементы.ГруппаОсновнаяПанель.ПодчиненныеЭлементы Цикл
		ЭлементГруппы.Видимость = Истина;
	КонецЦикла; 
	
	ВидОперации = Объект.ВидОперации;
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами") Тогда
		Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаРасчеты;
		Элементы.ФормаОплаты.Видимость = Истина;
		Если Форма.Список Тогда
		 	Элементы.ГруппаПанельПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежПоНесколькимСделкам;
		Иначе
			Элементы.ГруппаПанельПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежПоОднойСделке;
		КонецЕсли;
		Элементы.Сделка.Доступность = Истина;
		Элементы.Список.Видимость 	= Истина;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами") Тогда
			Элементы.Сделка.Доступность = Ложь;
		Иначе
			Элементы.Сделка.Доступность = Форма.ВедетсяУчетПоРасчетнымДокументам И (ПолучитьВедениеВзаиморасчетов(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам"));
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам") Тогда
		Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница = Элементы.ГруппаРасчеты;
		Элементы.ГруппаПанельПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежПоОднойСделке;
		Элементы.ФормаОплаты.Видимость 	= Истина;
		Элементы.Сделка.Доступность 	= Ложь;
		Элементы.Список.Видимость 		= Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств") Тогда
		Элементы.ГруппаОсновнаяПанель.ТекущаяСтраница 	= Элементы.ГруппаРасчеты;
		Элементы.ГруппаПанельПлатежи.ТекущаяСтраница 	= Элементы.ГруппаПлатежПрочие;
		Элементы.ФормаОплаты.Видимость 	= Истина;
		Элементы.Список.Видимость 		= Ложь;
	КонецЕсли;
	Если НЕ Объект.БанковскийСчетКасса = Неопределено И НЕ Объект.БанковскийСчетКасса.Пустая() Тогда
		Элементы.ВалютаДокумента.Доступность = Ложь;
	Иначе
		Элементы.ВалютаДокумента.Доступность = Истина;
	КонецЕсли;
	Если НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств")) Тогда 
		Если Форма.Список Тогда
			Элементы.ГруппаПлатежПоОднойСделке.Видимость 		= Истина;
			Элементы.ГруппаПлатежПоНесколькимСделкам.Видимость 	= Истина;
			Элементы.ГруппаПанельПлатежи.ТекущаяСтраница 		= Элементы.ГруппаПлатежПоНесколькимСделкам;
		Иначе
			Элементы.ГруппаПлатежПоОднойСделке.Видимость 		= Истина;
			Элементы.ГруппаПлатежПоНесколькимСделкам.Видимость 	= Истина;
			Элементы.ГруппаПанельПлатежи.ТекущаяСтраница 		= Элементы.ГруппаПлатежПоОднойСделке;
		КонецЕсли;
		// -учет договоров- начало
		Элементы.РасчетнаяДатаПрихода.Видимость = Истина;
		Элементы.ЭтапОплаты.Видимость 			= Истина;
	Иначе
		Элементы.РасчетнаяДатаПрихода.Видимость = Ложь;
		Элементы.ЭтапОплаты.Видимость 			= Ложь;
		// -учет договоров- конец
	КонецЕсли;
	Если Объект.ВалютаДокумента.Пустая() Тогда
		Элементы.КурсДокумента.Доступность					= Ложь;
		Элементы.СуммаПлатежа.Доступность					= Ложь;
		Элементы.БанковскийСчетКасса.Доступность 		 	= Ложь;
		Элементы.ВключатьВПлатежныйКалендарь.Доступность 	= Ложь;
		Элементы.РасшифровкаПлатежа.ПодчиненныеЭлементы.РасшифровкаПлатежаСуммаПлатежа.Доступность = Ложь;
	Иначе
		Элементы.КурсДокумента.Доступность 					= Истина;
		Элементы.СуммаПлатежа.Доступность 					= Истина;
		Элементы.БанковскийСчетКасса.Доступность 			= Истина;
		Элементы.ВключатьВПлатежныйКалендарь.Доступность 	= Истина;
		Элементы.РасшифровкаПлатежа.ПодчиненныеЭлементы.РасшифровкаПлатежаСуммаПлатежа.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Номер = "";
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
			СтрокаРасшифровка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	ТекущееСтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
	ТекущаяОрганизация = Объект.Организация;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	//СписокТабличныхЧастей = Новый СписокЗначений;
	//СписокТабличныхЧастей.Добавить("РасшифровкаПлатежа"    , "РасшифровкаПлатежа");
	//СписокТабличныхЧастей.Добавить("БюджетныеПараметры", "БюджетныеПараметры");
	//
	//АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(
	//	ЭтаФорма, СписокТабличныхЧастей);
	//фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	//Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	//
	//фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, "ДекорацияПлатежНадпись");

КонецПроцедуры 

&НаСервере
Процедура УстановитьТипБанковскийСчетКасса()

	Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
		НовыйТип = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Объект.БанковскийСчетКасса = НовыйТип.ПривестиЗначение(Объект.БанковскийСчетКасса);
	ИначеЕсли Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
		НовыйТип = Новый ОписаниеТипов("СправочникСсылка.Кассы");
		Объект.БанковскийСчетКасса = НовыйТип.ПривестиЗначение(Объект.БанковскийСчетКасса);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиГрупп()

	оф_СредстваКПоступлениюЗаголовок 				= "Средства к поступлению";
	оф_УчетПоступленияЗаголовок 					= "Учет поступления";
	оф_ПлательщикЗаголовок 							= "Плательщик";
	оф_АналитикаУчетаПоступленияЗаголовок 			= "Аналитика учета поступления";
	оф_СуммаПоступленияЗаголовок					= "СуммаПоступления";
	оф_ПлановаяКлассификацияПлатежаЗаголовок 		= "Плановая классификация платежа";
	оф_РазрезыУчетаЗаголовок 						= "Разрезы учета";
	оф_СвязьГрафиковПлатежейПоДоговорамЗаголовок 	= "Связь графиков платежей по договорам";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютаВзаиморасчетов(Значение)
	
	Возврат Значение.ВалютаВзаиморасчетов	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	
	Возврат фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Валюта, ДатаКурса);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВедениеВзаиморасчетов(Значение)
	
	Возврат Значение.ВедениеВзаиморасчетов	
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	// Установить курс документа
	СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента = СтруктураКурсаВалютаДокумента.Курс;
	Объект.КратностьДокумента = СтруктураКурсаВалютаДокумента.Кратность;	

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуПлатежаТаблица()

	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов = ПолучитьВалютаВзаиморасчетов(Строка.ДоговорКонтрагента);
		Иначе
			Строка.СуммаПлатежа = Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
			Строка.СуммаПлатежа = Строка.СуммаВзаиморасчетов;
		ИначеЕсли (Объект.КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, 
				ВалютаВзаиморасчетов, Объект.ВалютаДокумента, Строка.КурсВзаиморасчетов, Объект.КурсДокумента, 
				Строка.КратностьВзаиморасчетов, Объект.КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры 

&НаСервере
Процедура РассчитатьСуммуВзаиморасчетовНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);	
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = ПолучитьВалютаВзаиморасчетов(СтрокаПлатеж.ДоговорКонтрагента);
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (Объект.КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
			Объект.ВалютаДокумента, ВалютаВзаиморасчетов, Объект.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			Объект.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры 

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
&НаКлиенте
Процедура ПриОчисткеВалютыДокумента()
	
	Объект.СуммаДокумента 		= 0;
	Объект.КурсДокумента 		= 0;
	Объект.КратностьДокумента 	= 0;
	ТекущаяВалютаДокумента 		= ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	
	Для Каждого Платеж Из Объект.РасшифровкаПлатежа Цикл
		Платеж.СуммаПлатежа = 0;
	КонецЦикла;
	
	Объект.БанковскийСчетКасса = Неопределено;
	Объект.ВключатьВПлатежныйКалендарь = Ложь;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеНаПанельЗакладокСсылка(Элементы, Элемент, Родитель)
	
	ЖирныйШрифт = Новый Шрифт(,,Истина,,,);
	НеЖирныйШрифт = Новый Шрифт(,,Ложь,,);
	Для Каждого Группа Из Родитель.ПодчиненныеЭлементы Цикл
		ИмяЭлемента = Сред(Группа.Имя, СтрДлина(Родитель.Имя) + 1);
		Элементы["Декорация" + ИмяЭлемента + "Надпись"].Шрифт =  НеЖирныйШрифт;
	КонецЦикла;
	ИмяЭлемента = Сред(Элемент.Имя, СтрДлина("Декорация") + 1);
	ИмяЭлемента = Сред(ИмяЭлемента, 0, СтрДлина(ИмяЭлемента) - СтрДлина("Надпись")); 
	Элементы.ГруппаСтраницыПравая.ТекущаяСтраница = Элементы.ГруппаСтраницыПравая.ПодчиненныеЭлементы["Группа" + ИмяЭлемента];
	Элементы["Декорация" + ИмяЭлемента + "Надпись"].Шрифт = ЖирныйШрифт;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеНаПанельЗакладокКартинка(Элементы, Элемент, Родитель)
	
	ЖирныйШрифт = Новый Шрифт(,,Истина,,,);
	НеЖирныйШрифт = Новый Шрифт(,,Ложь,,);
	Для Каждого Группа Из Родитель.ПодчиненныеЭлементы Цикл
		ИмяЭлемента = Сред(Группа.Имя, СтрДлина(Родитель.Имя) + 1);
		Элементы["Декорация" + ИмяЭлемента + "Надпись"].Шрифт =  НеЖирныйШрифт;
	КонецЦикла;
	ИмяЭлемента = Сред(Элемент.Имя, СтрДлина("Декорация") + 1);
	ИмяЭлемента = Сред(ИмяЭлемента, 0, СтрДлина(ИмяЭлемента) - СтрДлина("Картинка")); 
	Элементы.ГруппаСтраницыПравая.ТекущаяСтраница = Элементы.ГруппаСтраницыПравая.ПодчиненныеЭлементы["Группа" + ИмяЭлемента];
	Элементы["Декорация" + ИмяЭлемента + "Надпись"].Шрифт = ЖирныйШрифт;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьТекущуюСтраницуОсновнойПанели();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКассаПриИзменениНаСервере()

	Если (НЕ Объект.БанковскийСчетКасса = Неопределено) И (НЕ Объект.БанковскийСчетКасса.Пустая()) Тогда
		ден_ПроцедурыКазначейства.ПриИзмененииЗначенияКассыБанковскогоСчета(Объект.ВалютаДокумента, 
																   Объект.КурсДокумента, 
																   Объект.КратностьДокумента, 
																   Объект.ДатаПоступления, 
																   Объект.СуммаДокумента, 
																   БанковскийСчетКассаВалютаДенежныхСредств());
		Элементы.ВалютаДокумента.Доступность = Ложь;
		
		СуммаДокументаПриИзмененииНаСервере();
		
		Если Объект.Организация.Пустая() Тогда
			Объект.Организация = Объект.БанковскийСчетКасса.Владелец;
		КонецЕсли;
	Иначе
		Элементы.ВалютаДокумента.Доступность = Истина;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетовНаСервере();

	УправлениеФормой(ЭтаФорма);
	
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;

КонецПроцедуры

&НаСервере
Функция БанковскийСчетКассаВалютаДенежныхСредств()
	
	Возврат Объект.БанковскийСчетКасса.ВалютаДенежныхСредств
	
КонецФункции

&НаСервере
Функция СуммаДокументаПриИзмененииНаСервере()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		РассчитатьСуммуВзаиморасчетовНаСервере();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ФормаОплатыПриИзмененииНаСервере()
	
	Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
	ИначеЕсли Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
		Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
		Объект.БанковскийСчетКасса = Объект.Организация.ОсновнаяКасса;
   	Иначе
		Объект.БанковскийСчетКасса = Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПоступленияПриИзмененииНаСервере()
	
	УстановитьКурсДокумента(Объект.ДатаПоступления);
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

// Рассчитывает новый курс документа при смене даты
//
&НаСервере
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаПоступления);
	Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении контрагента
//
&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	ВосстанавливатьРеквизиты 	= (Объект.РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС 			= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;	
	Проект 						= СтрокаПлатеж.Проект;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	ДоговорК 						= Объект.Контрагент.ОсновнойДоговорКонтрагента;
	ОсновнойДоговорКонтрагента 		= дог_УправлениеДоговорами.ДоступныйДоговорКонтрагента(ДоговорК);
	ВидОсновногоДоговора 			= ОсновнойДоговорКонтрагента.ВидДоговора;
	ОрганизацияОсновногоДоговора 	= ОсновнойДоговорКонтрагента.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ ден_ПроцедурыКазначейства.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ВидОсновногоДоговора) = Неопределено Тогда
		Если Объект.Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
			Объект.Организация 				= ОрганизацияОсновногоДоговора;
		ИначеЕсли ОрганизацияОсновногоДоговора.Пустая()ИЛИ ОрганизацияОсновногоДоговора = Объект.Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;		
		СтрокаПлатеж.Проект = Проект;
	КонецЕсли;
	
	//УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриИзмененииКонтраген

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
&НаСервере
Процедура ПриИзмененииДоговораНаСервере()
	                                            
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	СтрокаПлатеж.Сделка = Неопределено; // для сделки нет значения по умолчанию в договоре
	
	// Надо поменять валюту и курс взаиморасчетов
	ТекущаяВалютаВзаиморасчетов = ПолучитьВалютаВзаиморасчетов(СтрокаПлатеж.ДоговорКонтрагента);
	
	СтруктураКурсаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетовНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	ЗаполнитьДДСиПроект();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа()
	
	РассчитатьСуммуПлатежаНаСервере();
	
	СуммаПлатежаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуПлатежаНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = ПолучитьВалютаВзаиморасчетов(СтрокаПлатеж.ДоговорКонтрагента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		Объект.СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	ИначеЕсли (Объект.КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
																							  Объект.ВалютаДокумента,
			                                                								  СтрокаПлатеж.КурсВзаиморасчетов,Объект.КурсДокумента,
																							  СтрокаПлатеж.КратностьВзаиморасчетов,Объект.КратностьДокумента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры 

// Процедура рассчитывает курс взаиморасчетов
//
&НаКлиенте
Процедура РассчитатьКурсВзаиморасчетов()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);		 
	
	Если РаботаСБухгалтерскимиРеквизитами И (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (Объект.КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * Объект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / Объект.КратностьДокумента;
	ИначеЕсли СтрокаПлатеж.СуммаВзаиморасчетов=0 И Объект.КратностьДокумента <> 0 И СтрокаПлатеж.КурсВзаиморасчетов<>0 Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * Объект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.КурсВзаиморасчетов / Объект.КратностьДокумента;
	КонецЕсли;
						
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ВалютаДоговора(Договор)
	
	Возврат Договор.ВалютаВзаиморасчетов;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура СделкаПриИзмененииНаСервере(Знач Значение, Значение2)
	
	Значение2 = Значение.СуммаДокумента;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВзаиморасчетыПоДоговоруВЦелом(Договор)
	
	Возврат Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипСделки()
	
	Возврат Метаданные.Документы.ден_ПланируемоеПоступлениеДенежныхСредств.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип;	
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере()

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	
	// Надо поменять валюту и курс взаиморасчетов
	ТекущаяВалютаВзаиморасчетов = ПолучитьВалютаВзаиморасчетов(СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураКурсаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетовСервер();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьАвтоотметку();
	
	УправлениеФормой(ЭтаФорма);
	

КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
&НаСервере
Процедура РассчитатьСуммуВзаиморасчетовСервер()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (Объект.КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
																									 Объект.ВалютаДокумента,
			                               															 ВалютаВзаиморасчетов,
			                                                  										 Объект.КурсДокумента, 
																									 СтрокаПлатеж.КурсВзаиморасчетов,
															  										 Объект.КратностьДокумента, 
																									 СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьАвтоотметку()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	Автоотметка = ПолучитьОтметкуНезаполненногоДляСделки(СтрокаПлатеж);
	Если Элементы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		Элементы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;
	Если Элементы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		Элементы.Сделка.ОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметку()

// Определение необходимости устанавливать отметку незаполненного для сделки
//
// Параметры
//  ТекущаяСтрокаПлатежа  – СтрокаТабличнойЧасти – Строка табличной части, для которой определяется
//                                                 необходимость отметки незаполненного значения
//
// Возвращаемое значение:
//   Булево   – Истина = отмечать, Ложь = не отмечать
//
&НаСервере
Функция ПолучитьОтметкуНезаполненногоДляСделки(ТекущаяСтрокаПлатежа)
	
	Отметка = Ложь;
	ДоговорКонтрагента = ТекущаяСтрокаПлатежа.ДоговорКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Отметка = НЕ ЗначениеЗаполнено(ТекущаяСтрокаПлатежа.Сделка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отметка;
	
КонецФункции // ПолучитьОтметкуНезаполненногоДляСделки()

&НаСервереБезКонтекста
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации)
	
	Возврат ден_ПроцедурыКазначейства.ОпределитьВидДоговораСКонтрагентом(ВидОперации);	
	
КонецФункции

// Процедура выбора расчетного документа.
//
&НаКлиенте
Процедура ВыборРасчетногоДокумента(СтруктураПараметров, Элемент) 

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);	
	
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры // ВыборРасчетногоДокумента()

&НаСервере
Процедура ФинансовыйПоказательПриИзмененииСервер()	
	
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаОбласть Из Объект.БюджетныеПараметры Цикл
		Если СтрокаОбласть.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект ИЛИ СтрокаОбласть.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ФинансовыйПоказатель) Тогда
			СтрокиУдалить.Добавить(СтрокаОбласть);
		ИначеЕсли Объект.ФинансовыйПоказатель.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",СтрокаОбласть.Измерение)).Количество() = 0 Тогда
			СтрокиУдалить.Добавить(СтрокаОбласть);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.БюджетныеПараметры.Удалить(СтрокаУдалить);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипЗначения(Разрез, Значение)
	
	Возврат Разрез.ТипЗначения.ПривестиЗначение(Значение)
	
КонецФункции

&НаСервере
Функция ПолучитьПоНесколькимПроектам()
	
	Возврат Документы.ден_ПланируемоеПоступлениеДенежныхСредств.ПоНесколькимПроектам(Объект, 
																					 ЕстьРасчетыСКонтрагентами, 
																					 ЕстьРасчетыПоКредитам);
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПоОснованиюНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.БюджетныеПараметры.Очистить();
	
	Документы.ден_ПланируемоеПоступлениеДенежныхСредств.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	
	ЕстьРасчетыСКонтрагентами = ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
	ЕстьРасчетыПоКредитам = ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьРазрезыУчета(СписокРазрезов)
	
	Для Каждого РазрезУчета Из Объект.ФинансовыйПоказатель.РазрезыУчета Цикл
	    Если СписокРазрезов.НайтиПоЗначению(РазрезУчета.Измерение)=Неопределено Тогда
			СписокРазрезов.Добавить(РазрезУчета.Измерение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(КЭШ_Разрезы)
	
	Документы.ден_ПланируемоеПоступлениеДенежныхСредств.ЗаполнитьБюджетныеПараметры(Объект, КЭШ_Разрезы, ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДДСиПроект()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Регистратор
		|ПОМЕСТИТЬ ВТ_РегистрацияДоговоров
		|ИЗ
		|	РегистрСведений.дог_ЗарегистрированныеДоговорыКонтрагентов.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Контрагент = &Контрагент
		|				И Договор = &Договор) КАК дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дог_РегистрацияДоговоров.СтатьяДДС
		|ИЗ
		|	ВТ_РегистрацияДоговоров КАК ВТ_лал
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.дог_РегистрацияДоговоров КАК дог_РегистрацияДоговоров
		|		ПО ВТ_лал.Регистратор = дог_РегистрацияДоговоров.Ссылка";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Договор", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(РезультатЗапроса) И РезультатЗапроса.Колонки.Найти("СтатьяДДС")<>Неопределено Тогда
		Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = РезультатЗапроса[0].СтатьяДДС;
	КонецЕсли;
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("бсо_Проект")<>Неопределено Тогда
		Объект.РасшифровкаПлатежа[0].Проект = Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента.бсо_Проект;
	КонецЕсли;
	
КонецПроцедуры
