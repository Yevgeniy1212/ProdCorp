// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

Перем ДатаДвижений;
Перем ТаблицаПлатежейУпр;
Перем РасчетныйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура проверяет заполненность необходимых реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок)
 	
	Если ОтраженоВОперУчете И (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			
			ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
			ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
			
			Если Не Отказ Тогда
				
				Если ЗначениеЗаполнено(Организация) 
					И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	

	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога 
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СуммаДокумента");
	Иначе
		Если СуммаДокумента + СуммаКомиссии = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана ни одна из сумм (сумма документа, сумма комиссии)! Для проведения документа одна из сумм должна быть заполнена!",Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли; 	
	
	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВключатьКомиссиюБанка И Не СуммаКомиссии =0 Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет затрат для отнесении комиссии банка.");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет затрат налогового учета для отнесении комиссии банка.");		
		КонецЕсли; 	
		
		Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
			СтруктураПолей.Вставить("ВидУчетаНУ");
		КонецЕсли;

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств  
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
	 
	 СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет учета.");

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ,ДоговорКонтрагента");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЕстьРасчетыПоКредитам Тогда			
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;
		                                                                                    
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
													  Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЦикла;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выплаты зарплаты можно оформлять только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок);
		КонецЕсли;
		Если ПеречислениеЗаработнойПлаты.Количество()=0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не введены сведения о работниках!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеДокумента

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам бухгалтерского и налогового учетов
// 
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	

	// Бухгалтерские проводки документа
	Если НЕ СтруктураШапкиДокумента.Оплачено Тогда
		Возврат;
	КонецЕсли;

	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;

	ВидСчетаОрг = СчетОрганизации.ВидСчета;
	ВалютаСчета = СчетОрганизации.ВалютаДенежныхСредств;

	СчетКт      = СтруктураШапкиДокумента.СчетБанк;
	
	СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
	
	СтруктураШапкиДокумента.Вставить("СчетБанкНУ", СчетКтНУ);
	РасчетыВВалюте = Ложь;
	Если СчетБанк.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;

	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,СчетКт);
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ"		,СчетКтНУ);
		
		СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", Ложь);
		
		//Вызов универсальной процедуры подготовки реестра платежей по данным документа. 		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		СодержаниеПроводки = "";
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
				СодержаниеПроводки = "Расчеты с контрагентом";
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплатыБУ"),"СчетАванса");
			КонецЕсли; 
			УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Ложь,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей); 	  
		Иначе //расчеты по кредитам
			СодержаниеПроводки = "Расчеты по кредитам и займам";
			УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Ложь,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей);
		КонецЕсли; 

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога,
								"Перечисление налога",
								"Прочее списание денежных средств");

		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДтБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДтБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДтБУ3);

		Проводка.СчетКт      = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
		//Бит Источники финансирования
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
		Иначе
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		КонецЕсли;
		
        Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;

		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
		
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
													 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		
		
		// проводки по НУ для вида операции "Прочее"
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;				
			
			ПроводкаНУ.СчетДт     = СчетУчетаРасчетовСКонтрагентомНУ;
			ПроводкаНУ.Содержание  = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога,
								"Перечисление налога",
								"Прочее списание денежных средств");
          			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СубконтоДтНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
			
			Если  ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда				
				ПроводкаНУ.СчетКт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();						
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			Иначе
				 ПроводкаНУ.СчетКт     = СчетКтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			 КонецЕсли;  
			
			Если РасчетыВВалюте Тогда
				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
												СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли; // Если РасчетыВВалюте Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);	
			Иначе
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			КонецЕсли;
				
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			
			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				
				//если выбран счет затрат или доходов, то сделаем еще одну проводку
				//погашение начисленной выше задолженности
				ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				
				ПроводкаНУ_Погашение.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				
				ПроводкаНУ_Погашение.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);	
				Иначе
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				КонецЕсли;
					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		КонецЕсли;        		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Перевод средств на другой счет организации";
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);

			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			Проводка.СчетКт      = СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтатьяДДС);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);

			Если РасчетыВВалюте Тогда

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;

				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);

				Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
															 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
															 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Перевод средств на другой счет организации";
				
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетКонтрагента, Истина).СчетУчетаНУ;	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				ПроводкаНУ.СчетКт      = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтатьяДДС);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				Если РасчетыВВалюте Тогда  		
					
					ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
					
					ПроводкаНУ.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
					СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
				Иначе
					ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли; 
			КонецЕсли;
			


	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
        		
		ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	
		// списание по регистрам Типовой, ВзаиморасчетыСРаботникамиОрганизаций и ВыплаченныеДоходыРаботникамОрганизацийНУ
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПлатежныйОрдер.Ссылка.Организация КАК Организация,
		|	ПлатежныйОрдер.Физлицо,
		|	ПлатежныйОрдер.СтатьяДвиженияДенежныхСредств,
		|	НАЧАЛОПЕРИОДА(ПлатежныйОрдер.Ссылка.Дата, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
		|	НАЧАЛОПЕРИОДА(ПлатежныйОрдер.Ссылка.Дата, МЕСЯЦ) КАК ПериодНачисленияДепонированнойЗарплаты,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца) КАК СпособРасчетаСуммКВыплате,
		|	СУММА(ПлатежныйОрдер.СуммаПлатежа) КАК Сумма,
		|	0 КАК ДепонированнаяСумма
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлатежныйОрдер
		|ГДЕ
		|	ПлатежныйОрдер.Ссылка = &ДокументСсылка
		|СГРУППИРОВАТЬ ПО
		|	ПлатежныйОрдер.Ссылка.Организация,
		|	ПлатежныйОрдер.Физлицо,
		|	ПлатежныйОрдер.СтатьяДвиженияДенежныхСредств,
		|	НАЧАЛОПЕРИОДА(ПлатежныйОрдер.Ссылка.Дата, МЕСЯЦ)
		|";

		РезультатЗапроса = Запрос.Выполнить();
		Если ВедетсяУчетПоСотрудникам Тогда
			
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				
				// по бухгалтерии
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Перечисление ЗП";
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Выборка.ФизЛицо);
				
				Проводка.СчетКт      = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Выборка.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= Выборка.Сумма;
				КонецЕсли;
				
				// Ресурсы
				Проводка.Сумма		= Выборка.Сумма;
				
				//Отражение в налоговом учете
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить(); 					
					
					ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;					
					
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
					//заполнения счет Дт(НУ)
					ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", Выборка.ФизЛицо);					
					
					ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);								
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);								
					
					ПроводкаНУ.Сумма			= Выборка.Сумма; 					
					
					ПроводкаНУ.Содержание		= "Перечисление ЗП"; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);			
				КонецЕсли;   				
				
			КонецЦикла;
		Иначе
			ТаблицаДанных = РезультатЗапроса.Выгрузить();
			ТаблицаДанных.Свернуть("Организация,СтатьяДвиженияДенежныхСредств","Сумма");
			
			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				
				 // по бухгалтерии
				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Перечисление ЗП";

				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;				

				Проводка.СчетКт      = СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаДанных.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
				КонецЕсли;
				
				// Ресурсы
				Проводка.Сумма		= СтрокаДанных.Сумма;
				
				//Отражение в налоговом учете
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить(); 					
					
					ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;					
					
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
					//заполнения счет Дт(НУ)
					ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
										
					ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);								
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтрокаДанных.СтатьяДвиженияДенежныхСредств);								
					
					ПроводкаНУ.Сумма			= СтрокаДанных.Сумма; 					
					
					ПроводкаНУ.Содержание		= "Перечисление ЗП"; 
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);			
				КонецЕсли;  			
				
			КонецЦикла;	
			
		КонецЕсли;
		
		СтруктураПараметровЗапроса = Новый Структура();
		СтруктураПараметровЗапроса.Вставить("ДокументСсылка", Ссылка);
		
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ЭтотОбъект, 
														Запрос.Текст, 
														СтруктураПараметровЗапроса, 
														Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк,
														глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
		
	КонецЕсли;
	
	// комиссия банка
	Если ВключатьКомиссиюБанка И СуммаКомиссии <> 0 Тогда
		
		ВалютаРег       = мВалютаРегламентированногоУчета;
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДтБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДтБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДтБУ3);
		
		Проводка.СчетКт      = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
		//Бит Источники финансирования

		Проводка.Содержание  = "Комиссия банка";
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаКомиссии;					
		КонецЕсли;         				
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаКомиссии;					
		КонецЕсли;   
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаКомиссии, 
												СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);			
		
	// проводки по НУ для комиссии банка
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			ПроводкиНУ = Движения.Налоговый;
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;				
			
			ПроводкаНУ.СчетДт     = СчетУчетаРасчетовСКонтрагентомНУ;
			ПроводкаНУ.Содержание = "Комиссия банка";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СубконтоДтНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				Если ЗначениеЗаполнено(СчетОрганизации) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты", 	СчетОрганизации.Банк.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры", 	СчетОрганизации.ДоговорКонтрагента);
				КонецЕсли;
			Иначе
				ПроводкаНУ.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);								
			КонецЕсли;  			
			
			ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаКомиссии, 
													СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
													СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				
				//если выбран счет затрат или доходов, то сделаем еще одну проводку
				//погашение начисленной выше задолженности
				ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				
				ПроводкаНУ_Погашение.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				
				ПроводкаНУ_Погашение.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);								
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли; 			
		КонецЕсли;        

	КонецЕсли;
												
													
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл

// Заполняет счета учета БУ и НУ в дпокументе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если Не СчетОрганизации.Пустая() Тогда
		СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

//Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	ДокументОснование           = ПараметрыДокументаОснования.Ссылка;
	                                                             
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
	 ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
	 ИЛИ ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 
	 ИЛИ ВидДокументаОснования = "ПоступлениеИзПереработки"  Тогда

	 	Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			 ВидОперации  = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		Иначе
			 ВидОперации  = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		КонецЕсли; 
		
		Контрагент 			= ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 	= ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			Если НЕ(ПараметрыДокументаОснования.Сумма = 0 И ПараметрыДокументаОснования.СуммаНДС = 0)  Тогда
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
				Если НЕ ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+ПараметрыДокументаОснования.СуммаНДС;
				КонецЕсли; 
			КонецЕсли;
			СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
		КонецЕсли;
		
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
        
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;        			
		КонецЕсли;		
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента 	= РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж 	= РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "ден_ЗаявкаНаРасходованиеСредств" Тогда		
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Оплачено",Основание.Метаданные()) Тогда
			
			Если Основание.Оплачено Тогда
				Сообщить("Платежный ордер не вводится на основании документов, уже исполненных банком.");
				Возврат;
			КонецЕсли;
			
			ДокументОснование = Основание.Ссылка;
			
			ЗаполнитьПоРасчетномуДокументуУпр();
			
		Иначе
			
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
			СпособЗаполнения = "Не заполнять";
			ВалютаДокумента  = мВалютаРегламентированногоУчета;
			СтрокаПлатежОС = Неопределено;

			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
			
			ПользовательДокумента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			Если Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
				Сообщить("Заявка оформлена на расходование наличных денежных средств.");
				Возврат;
			КонецЕсли;
			
			ВидОперацииЗаявка = Основание.ВидОперации;
			
			УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);
			
			Организация = Основание.Организация;
			ВалютаДокумента = Основание.ВалютаДокумента;
			
			Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
				СчетОрганизации = Основание.БанковскийСчетКасса;
			ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
				СчетОрганизации= Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
			Ответственный     = Основание.Ответственный;
			ДокументОснование = Основание.Ссылка;
			
			Если ВалютаДокумента.Пустая() Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;                        
			
			СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
			ден_ПроцедурыКазначейства.ПОСДС_ЗаполнитьПоЗаявкеУпр(ЭтотОбъект, Основание);
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			ОтраженоВОперУчете = Истина;
			
		КонецЕсли;
		СтруктурноеПодразделениеОтправитель = Основание.СтруктурноеПодразделение;
		
	КонецЕсли;
 	
    ЗаполнитьСчетаУчетаРегл();
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) 
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);	
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  тогда
		// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
		// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
		ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
		ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
		СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	КонецЕсли;	
	 //так как для всех операций, кроме одной используется только одно поле дя выбора структурного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеОтправитель);

	//Бит Источники финансирования
	СтруктураШапкиДокумента.Вставить("ИсточникФинансирования", 			ИсточникФинансирования);
	//Бит Источники финансирования
	
	// Документ должен принадлежать хотя бы к одному виду учета  (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДатаДвижений=Дата;   
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;

	// проверим заполнение шапки
	СтруктураПолей = Новый Структура("Организация, СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	Если не Оплачено Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("Платежный ордер может быть проведен только если он оплачен(флаг ""Оплачено"")."+Символы.ПС+
		         "До установки признака оплаты документ можно только записать.",Отказ,Заголовок);

	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты Тогда
			ТаблицаПлатежейУпр = ПолучитьТаблицуПлатежейУпрЗП(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежныйОрдерСписаниеДенежныхСредств", (ВключатьКомиссиюБанка И СуммаКомиссии<>0));
		Иначе
			ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежныйОрдерСписаниеДенежныхСредств", (ВключатьКомиссиюБанка И СуммаКомиссии<>0));
		КонецЕсли;
				 
 		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
     	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
		
		Если ВключатьКомиссиюБанка И СуммаКомиссии <> 0 И Не ЗначениеЗаполнено(СчетОрганизации.Банк.Контрагент) Тогда
			Отказ = Истина;
			Сообщить("Для отражения комиссинных взносов банку, необходимо заполнить поле ""Контрагент""" + Символы.ПС
			+ " у банка: " + СчетОрганизации.Банк);
			Возврат;		
		КонецЕсли; 	

	КонецЕсли;
	

	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете  тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты  ИЛИ
			СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
				
				//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении данной операции валюта документа должна быть равной валюте регламентированного учета."
				,Отказ,Заголовок);
				
			КонецЕсли;
		КонецЕсли;
	
		//Проверим на возможность проведения в БУ и НУ
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	// Движения по документу
	Если Оплачено И НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если Не Отказ И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры // ОбработкаУдаленияПроведения

// Процедура - обработчик события "ОбработкаПроведения".
//  
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет 
		И Не ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств	 Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.ОшибкаПриПроведении("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

//формирует движения по управленческим регистрам 
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ВидДокументаОснования       = ДокументОснование.Метаданные().Имя;
		Если ВидДокументаОснования = "ПлатежноеПоручениеВходящее" Тогда
			Если ДокументОснование.Оплачено = ЛОЖЬ Тогда
				РасчетныйДокумент = ДокументОснование.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДвиженияПоСтатьям = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,ВестиПоДокументамРасчетовСКонтрагентом,Сделка,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
	
	// По регистру "Денежные средства"
	НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
	ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();

	// По регистру "Денежные средства к списанию"
	НаборДвиженийСписание   = Движения.ден_ДенежныеСредстваКСписанию;
	ТаблицаДвиженийСписание = НаборДвиженийСписание.Выгрузить();
	
	СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
	
	СуммаСКомиссией = ?(ВключатьКомиссиюБанка, СуммаДокумента + СуммаКомиссии, СуммаДокумента);
	СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаСКомиссией, ВалютаДокумента,
			Константы.ВалютаУправленческогоУчета.Получить(), 
			СтрокаКурсыВалют.КурсДокумента,
			СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента,
			СтрокаКурсыВалют.КратностьУпрУчета);
	
	СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
	СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
	СтрокаДвиженийОстатки.Организация 		  = Организация;
	СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
	СтрокаДвиженийОстатки.Сумма               = СуммаСКомиссией;
	СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
	СтрокаДвиженийОстатки.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
	
	// По регистру "Денежные средства к списанию"
	Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
		
		СтрокаДвиженийСписание = ТаблицаДвиженийСписание.Добавить();
		СтрокаДвиженийСписание.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийСписание.Организация 		   = Организация;
		СтрокаДвиженийСписание.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
		СтрокаДвиженийСписание.СуммаУпр            = СтрокаДвижение.СуммаУпр;
		СтрокаДвиженийСписание.ДокументСписания    = ?(НЕ ЗначениеЗаполнено(РасчетныйДокумент),Ссылка,РасчетныйДокумент);
		СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
		СтрокаДвиженийСписание.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
		
	КонецЦикла;
	
	НаборДвиженийОстатки.мПериод              = ДатаДвижений;
	НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
	Движения.ден_ДенежныеСредства.ВыполнитьРасход();
	Если ОтраженоВОперУчете	Тогда
		НаборДвиженийСписание.мПериод              = ДатаДвижений;
		НаборДвиженийСписание.мТаблицаДвижений     = ТаблицаДвиженийСписание;
		Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьРасход();
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		
		// Поступление на расчетный счет
		ТаблицаДвиженийОстатки.Очистить();
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетКонтрагента;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		СтрокаДвиженийОстатки.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
		
		НаборДвиженийОстатки.мПериод              = ДатаДвижений;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ден_ДенежныеСредства.ВыполнитьПриход();
		
		Если ОтраженоВОперУчете Тогда
			// по регистру "Денежные средства к получению"
			
			НаборДвиженийПолучение   = Движения.ден_ДенежныеСредстваКПолучению;
			ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
				СтрокаДвиженийПолучение.БанковскийСчетКасса = СчетКонтрагента;
				СтрокаДвиженийПолучение.Организация 		= Организация;
				СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийПолучение.ДокументПолучения    = ?(НЕ ЗначениеЗаполнено(РасчетныйДокумент),Ссылка,РасчетныйДокумент);
				СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств; //
				СтрокаДвиженийПолучение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
			
			НаборДвиженийПолучение.мПериод              = ДатаДвижений;
			НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
		 КонецЕсли;
	КонецЕсли;
	
	Если ОтраженоВОперУчете И НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКСписанию;
		ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
		ТаблицаДвиженийДС.Очистить();

		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
			СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийДС.Организация 		 = Организация;
			СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
			СтрокаДвиженийДС.ДокументСписания    = Ссылка;
			СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийДС.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
			
		КонецЦикла;

		НаборДвиженийДС.мПериод              = Дата;
		НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
		Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
		
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			
			// По регистру "Денежные средства к получению"
			НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКПолучению;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = СчетКонтрагента;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр     		 = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументПолучения   = ?(НЕ ЗначениеЗаполнено(РасчетныйДокумент),Ссылка,РасчетныйДокумент);
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств; //
				СтрокаДвиженийДС.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = ?(Оплачено,Мин(ДатаДвижений,Дата),Дата);
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
		КонецЕсли;
	
		ЕстьРезерв=Ложь;
		ЕстьРазмещение=Ложь;
				
		// По регистру "Денежные средства в резерве"
		НаборДвиженийРезерв   = Движения.ден_ДенежныеСредстваВРезерве;
		ТаблицаДвиженийРезерв = НаборДвиженийРезерв.Выгрузить();
		ТаблицаДвиженийРезерв.Очистить();
		
		// По регистру "Размещение заявок на расходование средств"
		НаборДвиженийРазмещение  = Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаДвиженийРазмещение = НаборДвиженийРазмещение.Выгрузить();
		ТаблицаДвиженийРазмещение.Очистить();
		
		// По регистру "Заявки на расходование средств"
		НаборДвиженийЗаявки   = Движения.ден_ЗаявкиНаРасходованиеСредств;
		ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
		ТаблицаДвиженийЗаявки.Очистить();
		
		// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
		Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДокументЗаявка",СтрокаЗаявка.ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("БанковскийСчетКасса",СчетОрганизации);
				Запрос.Текст = "ВЫБРАТЬ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ден_ДенежныеСредстваВРезерве.Остатки(, ДокументРезервирования = &ДокументЗаявка И БанковскийСчетКасса=&БанковскийСчетКасса) КАК ДенежныеСредстваВРезервеОстатки";
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL) И (НЕ Результат.СуммаОстаток=0) Тогда
					
					СтрокаДвижений = ТаблицаДвиженийРезерв.Добавить();
					СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
					СтрокаДвижений.Организация 		   = Организация;
					СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
					СтрокаДвижений.Сумма               = ?(Результат.СуммаОстаток <СтрокаЗаявка.СуммаПлатежаПлан,Результат.СуммаОстаток,СтрокаЗаявка.СуммаПлатежаПлан);
					СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					СтрокаДвижений.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
					
					ЕстьРезерв=Истина;
					
				КонецЕсли;
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
				|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
				// Ранжируем планиуемые поступления для закрытия. Первыми закрывается размещение по планируемым поступлениям,
				// у которых совпадает счет, затем форма оплаты, затем организация.
				|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса=&СчетОрганизации
				|		Тогда 4
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты=&ФормаОплаты
				|		Тогда 2
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация=&Организация
				|		Тогда 1
				|	Иначе 0
				|	Конец) КАК Релевантность,
				|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования=&ДокументРезервирования) КАК РазмещениеЗаявок
				|ГДЕ НЕ((РазмещениеЗаявок.СуммаОстаток) ЕСТЬ NULL )";
				
				Запрос.УстановитьПараметр("СчетОрганизации",СчетОрганизации);
				Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ден_ВидыДенежныхСредств.Безналичные);
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования",СтрокаЗаявка.ДокументПланированияПлатежа);
				
				ТабРазмещение=Запрос.Выполнить().Выгрузить();
				
				ТабРазмещение.Сортировать("Релевантность Убыв,ДатаПоступления Возр");
				
				СуммаКСписанию=СтрокаЗаявка.СуммаПлатежаПлан;
				
				Для Каждого Строка Из ТабРазмещение Цикл
					
					ЕстьРазмещение=Истина;
					
					СтрокаДвижение=ТаблицаДвиженийРазмещение.Добавить();
					СтрокаДвижение.ДокументПланирования=Строка.ДокументПланирования;
					СтрокаДвижение.ДокументРезервирования=СтрокаЗаявка.ДокументПланированияПлатежа;
					
					Если Строка.СуммаОстаток>=СуммаКСписанию Тогда
						
						СтрокаДвижение.Сумма=СуммаКСписанию;
						Прервать;
						
					Иначе
						
						СтрокаДвижение.Сумма=Строка.СуммаОстаток;
						СуммаКСписанию=СуммаКСписанию-Строка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезерв тогда
			
			НаборДвиженийРезерв.мПериод          = Дата;
			НаборДвиженийРезерв.мТаблицаДвижений = ТаблицаДвиженийРезерв;
			Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРазмещение Тогда
			
			НаборДвиженийРазмещение.мПериод          = Дата;
			НаборДвиженийРазмещение.мТаблицаДвижений = ТаблицаДвиженийРазмещение;
			Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
			
			ЕстьЗаявка=Ложь;
			ЕстьРасчеты=Ложь;
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ЗаявкаНаРасходование 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Организация					= Организация;
				СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
				СтрокаДвиженийЗаявки.СтруктурноеПодразделение		= СтруктурноеПодразделениеОтправитель;
				СтрокаДвиженийЗаявки.ЦФО							= СтрокаПлатеж.Подразделение;
				Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					СтрокаДвиженийЗаявки.Сделка = СтрокаПлатеж.Сделка;
				КонецЕсли;
				
				ЕстьЗаявка = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДвиженийЗаявки.Количество()>0 Тогда
			
			НаборДвиженийЗаявки.мПериод          = Дата;
			НаборДвиженийЗаявки.мТаблицаДвижений = ТаблицаДвиженийЗаявки;
			Движения.ден_ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда  // Проводим по фактическим взаиморасчетам

		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений. 
		
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
		
		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
		
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,ДатаДвижений,"ДенежныеСредстваСписание",Ссылка);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет,Контрагент,Организация),"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеОтправитель,"СтруктурноеПодразделение");
		
		НаборДвижений.мПериод            = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(СчетКонтрагента,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
		
			НаборДвижений.мПериод            = ДатаДвижений;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

//Заполняет сумму документа и расшифровку платежа по расчетному документу
 //
Процедура ЗаполнитьПоРасчетномуДокументуУпр() Экспорт
	
	Организация=РасчетныйДокумент.Организация;
	СчетОрганизации=РасчетныйДокумент.СчетОрганизации;
	
	Контрагент=РасчетныйДокумент.Контрагент;
	СчетКонтрагента=РасчетныйДокумент.СчетКонтрагента;
	
	ВалютаДокумента=РасчетныйДокумент.ВалютаДокумента;
	СтруктураКурсаДокумента   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ВидОперацииДокумент=РасчетныйДокумент.ВидОперации;
	
	Если ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;	
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет;
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению Тогда
		ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаСтруктурномуПодразделению;
	Иначе
		ВидОперации=ВидОперацииДокумент;
	КонецЕсли;
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
	ОтраженоВОперУчете=РасчетныйДокумент.ОтраженоВОперУчете;
	ОтражатьВБухгалтерскомУчете=РасчетныйДокумент.ОтражатьВБухгалтерскомУчете;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
	    //По расшифровке платежа 
		
			ТекстЗапроса="ВЫБРАТЬ
		             |	ДенежныеСредстваКСписаниюОстатки.ДокументСписания,
		             |	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток,
					 |	ДенежныеСредстваКСписаниюОстатки.СтатьяДвиженияДенежныхСредств,
		             |	РасчетныйДокумент.ДоговорКонтрагента,
		             |	РасчетныйДокумент.Сделка,
		             |	РасчетныйДокумент.Ссылка.СуммаДокумента КАК СуммаДокумента,
		             |	РасчетныйДокумент.СуммаПлатежа,
					 |	РасчетныйДокумент.КурсВзаиморасчетов,
		             |	РасчетныйДокумент.КратностьВзаиморасчетов,
		             |	РасчетныйДокумент.СуммаВзаиморасчетов,
		             |	РасчетныйДокумент.СтавкаНДС,
		             |	РасчетныйДокумент.СуммаНДС,
		             |	РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом,
		             |	РасчетныйДокумент.СчетУчетаРасчетовПоАвансам,
					 |	РасчетныйДокумент.Проект 				 
		             |ИЗ
		             |	РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки(, ДокументСписания=&РасчетныйДокумент) КАК ДенежныеСредстваКСписаниюОстатки
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+РасчетныйДокумент.Метаданные().Имя+".РасшифровкаПлатежа КАК РасчетныйДокумент
		             |		ПО ДенежныеСредстваКСписаниюОстатки.ДокументСписания = РасчетныйДокумент.Ссылка";
					 
		Запрос=Новый Запрос;
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента=Результат.ДоговорКонтрагента;
			СтрокаПлатеж.Сделка=Результат.Сделка;
			СтрокаПлатеж.КурсВзаиморасчетов=Результат.КурсВзаиморасчетов;
			СтрокаПлатеж.КратностьВзаиморасчетов=Результат.КратностьВзаиморасчетов;
			СтрокаПлатеж.СтавкаНДС=Результат.СтавкаНДС;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам=Результат.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом=Результат.СчетУчетаРасчетовСКонтрагентом;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Результат.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.Проект=Результат.Проект;
			
			КоэффициентПересчета=?(Результат.СуммаДокумента=0,0,Результат.СуммаОстаток/Результат.СуммаДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=Результат.СуммаПлатежа*КоэффициентПересчета;
			СтрокаПлатеж.СуммаВзаиморасчетов=Результат.СуммаВзаиморасчетов*КоэффициентПересчета;
			СтрокаПлатеж.СуммаНДС=Результат.СуммаНДС*КоэффициентПересчета;
			
			СтрокаПлатеж.Подразделение = ДокументОснование.ЦФО;
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе
		
		ТекстЗапроса="ВЫБРАТЬ
		             |	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток
		             |ИЗ
		             |	РегистрНакопления.ден_ДенежныеСредстваКСписанию.Остатки(, ДокументСписания=&РасчетныйДокумент) КАК ДенежныеСредстваКСписаниюОстатки";
					 
		Запрос=Новый Запрос;
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			СуммаДокумента=Результат.СуммаОстаток;
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			СтрокаПлатеж.Подразделение = ДокументОснование.ЦФО;
			
		КонецЕсли;
		
		СчетУчетаРасчетовСКонтрагентом=РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом;
		СубконтоДтБУ1=РасчетныйДокумент.СубконтоДтБУ1;
	    СубконтоДтБУ2=РасчетныйДокумент.СубконтоДтБУ2;
		СубконтоДтБУ3=РасчетныйДокумент.СубконтоДтБУ3;
		СтатьяДвиженияДенежныхСредств=РасчетныйДокумент.СтатьяДвиженияДенежныхСредств;
		
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьПоРасчетномуДокументуУпр()

Функция ПолучитьТаблицуПлатежейУпрЗП(ДатаДокумента,ВалютаДокумента,Документ, ВидПлатежногоДокумента, ЕстьКомиссияБанка = Ложь) Экспорт
	
	Запрос=Новый Запрос;
	
	ИсточникДляСДДС					=	"РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств";
	ИсточникДляСуммыПлатежа			=	"РасшифровкаПлатежаДок.СуммаПлатежа";
	ИсточникДляСуммыВзаиморасчетов	=	"РасшифровкаПлатежаДок.СуммаПлатежа";
	ИсточникДанных					= 	"Документ."+ВидПлатежногоДокумента+".ПеречислениеЗаработнойПлаты КАК РасшифровкаПлатежаДок";
	

	Запрос.Текст="ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
	|	&ВалютаРеглУчета КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК ВедениеВзаиморасчетов,
	|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	РасшифровкаПлатежаДок.Подразделение КАК Подразделение,
	|	"+ИсточникДляСуммыПлатежа+" КАК СуммаПлатежа,
	|	"+ИсточникДляСуммыВзаиморасчетов+" КАК СуммаВзаиморасчетов,
	|	"+ИсточникДляСДДС+" КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	РасшифровкаПлатежаДок.Проект КАК Проект,
	|	0 КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаРеглУчета=&ВалютаУпрУчета ТОГДА "+ИсточникДляСуммыПлатежа+"
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаРеглУчета<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			"+ИсточникДляСуммыПлатежа+"*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаРеглУчета=&ВалютаРеглУчета ТОГДА "+ИсточникДляСуммыПлатежа+"
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаРеглУчета<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			"+ИсточникДляСуммыПлатежа+"*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	|ИЗ
	|	"+ИсточникДанных+"
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаРеглУчета) КАК КурсыДокумента
	|	ПО ИСТИНА
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	Если ЕстьКомиссияБанка Тогда
		Запрос.Текст=Запрос.Текст+" 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ 
		|	Док.СчетОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО КАК ВидДоговора,
		|	Неопределено КАК ВалютаВзаиморасчетов,
		|	Неопределено КАК ВедениеВзаиморасчетов,
		|	ЛОЖЬ  КАК ВестиПоДокументамРасчетовСКонтрагентом,	
		|	Неопределено,
		|	Док.Подразделение КАК Подразделение,
		|	Док.СуммаКомиссии КАК СуммаПлатежа,
		|	Док.СуммаКомиссии КАК СуммаВзаиморасчетов,
		|	ВЫБОР 
		|		КОГДА Док.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|			ТОГДА Док.СчетОрганизации.СтатьяДвиженияДенежныхСредств
		|		ИНАЧЕ Док.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	&ДокументПланированияПлатежа,
		|	&Проект,  
		|	Док.СуммаКомиссии КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаРеглУчета=&ВалютаУпрУчета ТОГДА Док.СуммаКомиссии
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаРеглУчета<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			Док.СуммаКомиссии*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаРеглУчета=&ВалютаРеглУчета ТОГДА Док.СуммаКомиссии
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаРеглУчета<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
		|			Док.СуммаКомиссии*КурсыДокумента.Курс
		|			/ КурсыДокумента.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
		|	ВЫБОР
		|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
	//	|  0 КАК СуммаВзаиморасчетовОстаток,
	//	| 0 КАК СуммаУпрОстаток,
	//	| Истина КАК ЭтоКомиссия
		|ИЗ
		|	Документ."+ВидПлатежногоДокумента+" КАК Док
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаРеглУчета) КАК КурсыДокумента
		|	ПО ИСТИНА
		|	ГДЕ
		|	Док.Ссылка = &Ссылка"; 
		Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , Документ.РасшифровкаПлатежа[0].ДокументПланированияПлатежа);
		Запрос.УстановитьПараметр("ВключатьВПлатежныйКалендарь" , Документ.РасшифровкаПлатежа[0].ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь);
		Запрос.УстановитьПараметр("Проект" , Документ.РасшифровкаПлатежа[0].Проект);
		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежей()
	
//Процедура проверяет заполнение обязательных полей для проведения
//по управленческому учету.
//
Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
    ДляОплаченных = УправлениеДенежнымиСредствами.ПрименятьКонтрольЗаполненияЗаявокДляОплаченныхДокументов(Дата);
    ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если ОтраженоВОперУчете И ((НЕ Оплачено) ИЛИ ДляОплаченных)
		И (НЕ ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет) Тогда

			ЕстьРазрешение=УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезЗаявки();
		
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
					СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
					
			Отказ=Отказ И НЕ ЕстьРазрешение;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"),СтруктурноеПодразделениеОтправитель);
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();