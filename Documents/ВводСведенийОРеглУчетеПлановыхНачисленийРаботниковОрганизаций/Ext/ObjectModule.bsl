Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если	ТипЗнч(Основание)	=	Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций")	тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование	=	Основание;
		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДолгосрочныеНачисленияОрганизации.Сотрудник,
		|	ДолгосрочныеНачисленияОрганизации.Ссылка,
		|	ДолгосрочныеНачисленияОрганизации.ВидРасчета,
		|	ДолгосрочныеНачисленияОрганизации.ДатаДействия КАК ДатаНачала
		|ИЗ
		|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК ДолгосрочныеНачисленияОрганизации
		|
		|ГДЕ
		|	ДолгосрочныеНачисленияОрганизации.Ссылка = &ДокументСсылка";
										
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
		ЗапросДляЗаполнения.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДолгосрочныеНачисленияОрганизации.Сотрудник,
		|	ДолгосрочныеНачисленияОрганизации.Ссылка,
		|	ДолгосрочныеНачисленияОрганизации.ВидРасчета,
		|	ДолгосрочныеНачисленияОрганизации.ДатаДействия КАК ДатаНачала
		|ИЗ
		|	Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ДополнительныеНачисления КАК ДолгосрочныеНачисленияОрганизации
		|
		|ГДЕ
		|	ДолгосрочныеНачисленияОрганизации.Ссылка = &ДокументСсылка";
										
		ДополнительныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
	ИначеЕсли	ТипЗнч(Основание)	=	Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию")	тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование	=	Основание;
		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.Текст	=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПриПриеме.Сотрудник,
		|	НачисленияПриПриеме.ВидРасчета,
		|	ПринятыеРаботники.ДатаПриема КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК НачисленияПриПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО НачисленияПриПриеме.Ссылка = ПринятыеРаботники.Ссылка
		|			И НачисленияПриПриеме.Сотрудник = ПринятыеРаботники.Сотрудник
		|			И НачисленияПриПриеме.Сторно = ПринятыеРаботники.Сторно
		|			
		|ГДЕ
		|	НачисленияПриПриеме.Ссылка = &ДокументСсылка
		|	И НачисленияПриПриеме.Сторно = ЛОЖЬ";
										
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
		ЗапросДляЗаполнения.Текст	=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПриПриеме.Сотрудник,
		|	НачисленияПриПриеме.ВидРасчета,
		|	ПринятыеРаботники.ДатаПриема КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ДополнительныеНачисления КАК НачисленияПриПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО НачисленияПриПриеме.Ссылка = ПринятыеРаботники.Ссылка
		|			И НачисленияПриПриеме.Сотрудник = ПринятыеРаботники.Сотрудник
		|			И НачисленияПриПриеме.Сторно = ПринятыеРаботники.Сторно
		
		|ГДЕ
		|	НачисленияПриПриеме.Ссылка = &ДокументСсылка
		|	И НачисленияПриПриеме.Сторно = ЛОЖЬ";
										
		ДополнительныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
	
	ИначеЕсли	ТипЗнч(Основание)	=	Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций")	тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		
		ДокументОснование	=	Основание;
		Организация = Основание.ОбособленноеПодразделениеКуда;
		
		ЗапросДляЗаполнения	=	Новый	Запрос;
		ЗапросДляЗаполнения.УстановитьПараметр("ДокументСсылка",	Основание);
		ЗапросДляЗаполнения.Текст	=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ПринятыеРаботники.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО Начисления.Ссылка = ПринятыеРаботники.Ссылка
		|			И Начисления.Сотрудник = ПринятыеРаботники.Сотрудник
		|			И Начисления.Сторно = ПринятыеРаботники.Сторно
		|ГДЕ
		|	Начисления.Ссылка = &ДокументСсылка
		|			И Начисления.Сторно = ЛОЖЬ";
										
		ОсновныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
		
		ЗапросДляЗаполнения.Текст	=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ПринятыеРаботники.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ДополнительныеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ПринятыеРаботники
		|		ПО Начисления.Ссылка = ПринятыеРаботники.Ссылка
		|			И Начисления.Сотрудник = ПринятыеРаботники.Сотрудник
		|			И Начисления.Сторно = ПринятыеРаботники.Сторно
		|ГДЕ
		|	Начисления.Ссылка = &ДокументСсылка
		|			И Начисления.Сторно = ЛОЖЬ";
										
		ДополнительныеНачисления.Загрузить(ЗапросДляЗаполнения.Выполнить().Выгрузить());
	
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

    // Описание текста запроса:
	//
    // 1. Выборка "Начисления": 
	//		Объединяются строки ТЧ Начисления и ДополнительныеНачисления. Сразу проверяем наличие строк-дублей.  
	// 2. Выборка "СуществующиеДвижения": 
	//		Проверяем на наличие существующих конфликтных движений в регистре сведений. 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ВидСтроки,
	|	Начисления.ВидРасчета,
	|	Начисления.СпособОтраженияВБухучете,
	|	Начисления.ДатаНачала,
	|	Начисления.КонфликтныйНомерСтроки,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	СуществующиеДвижения.Регистратор.Представление КАК КонфликтныйДокумент,
	|	Начисления.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА Начисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		ТЧОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ТЧОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|		ТЧОсновныеНачисления.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	|		ТЧОсновныеНачисления.ДатаНачала КАК ДатаНачала,
	|		МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК КонфликтныйНомерСтроки,
	|		""Основные начисления"" КАК ВидСтроки
	|	ИЗ
	|		Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ПовторяющиесяСтроки
	|			ПО ТЧОсновныеНачисления.Ссылка = ПовторяющиесяСтроки.Ссылка
	|				И ТЧОсновныеНачисления.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки
	|				И ТЧОсновныеНачисления.Сотрудник = ПовторяющиесяСтроки.Сотрудник
	|				И ТЧОсновныеНачисления.ВидРасчета = ПовторяющиесяСтроки.ВидРасчета
	|	ГДЕ
	|		ТЧОсновныеНачисления.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧОсновныеНачисления.Сотрудник,
	|		ТЧОсновныеНачисления.ВидРасчета,
	|		ТЧОсновныеНачисления.СпособОтраженияВБухучете,
	|		ТЧОсновныеНачисления.ДатаНачала,
	|		ТЧОсновныеНачисления.НомерСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧДополнительныеНачисления.НомерСтроки,
	|		ТЧДополнительныеНачисления.Сотрудник,
	|		ТЧДополнительныеНачисления.ВидРасчета,
	|		ТЧДополнительныеНачисления.СпособОтраженияВБухучете,
	|		ТЧДополнительныеНачисления.ДатаНачала,
	|		МИНИМУМ(ПересекающиесяСтроки.НомерСтроки),
	|		""Дополнительные начисления""
	|	ИЗ
	|		Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ТЧДополнительныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ПересекающиесяСтроки
	|			ПО ТЧДополнительныеНачисления.Ссылка = ПересекающиесяСтроки.Ссылка
	|				И ТЧДополнительныеНачисления.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
	|				И ТЧДополнительныеНачисления.Сотрудник = ПересекающиесяСтроки.Сотрудник
	|				И ТЧДополнительныеНачисления.ВидРасчета = ПересекающиесяСтроки.ВидРасчета
	|	ГДЕ
	|		ТЧДополнительныеНачисления.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТЧДополнительныеНачисления.Сотрудник,
	|		ТЧДополнительныеНачисления.ВидРасчета,
	|		ТЧДополнительныеНачисления.СпособОтраженияВБухучете,
	|		ТЧДополнительныеНачисления.ДатаНачала,
	|		ТЧДополнительныеНачисления.НомерСтроки) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций КАК СуществующиеДвижения
	|		ПО Начисления.Сотрудник = СуществующиеДвижения.Сотрудник
	|			И Начисления.ВидРасчета = СуществующиеДвижения.ВидРасчета
	|			И Начисления.ДатаНачала = СуществующиеДвижения.Период
	|			И (СуществующиеДвижения.Организация = &ГоловнаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, в которую принимается работник!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части """ + ВыборкаПоСтрокамДокумента.ВидСтроки + """: ";

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала)  Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменений!", Отказ, Заголовок);
	КонецЕсли;
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	// Одинаковые строки
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке  + "по сотруднику " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " обнаружено повторное назначение способа учета того же начисления в строке №" + ВыборкаПоСтрокамДокумента.КонфликтныйНомерСтроки + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// Движения в регистре на дату из документа
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтныйДокумент) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.ДатаНачала + " способ учета начисления уже зарегистрирован документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, УчетнаяПолитикаПоПерсоналуОрганизации)

	//Движения по регистру "РеглУчетПлановыхНачисленийРаботниковОрганизаций"
	Движение = Движения.РеглУчетПлановыхНачисленийРаботниковОрганизаций.Добавить();
	// Свойства
	Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачала;
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчета;
	// Ресурсы
	Движение.СпособОтраженияВБухучете   = ВыборкаПоРаботникиОрганизации.СпособОтраженияВБухучете;
	// Реквизиты
	

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, УчетнаяПолитикаПоПерсоналуОрганизации);
				КонецЕсли; 
				
			КонецЦикла;					
			
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ОсновныеНачисления);
	МассивТЧ.Добавить(ДополнительныеНачисления);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

мДлинаСуток = 86400;
