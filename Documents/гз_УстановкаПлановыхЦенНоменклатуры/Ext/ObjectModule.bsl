////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Если Клиент Тогда

	// Функция формирует табличный документ с печатной формой документа,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма документа
	//
	Функция ПечатьДокумента()

		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		

		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	Ответственный.Представление КАК ОтветственныйПредставление
		|ИЗ
		|	Документ.гз_УстановкаПлановыхЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент";

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.НомерСтроки 				     КАК НомерСтроки,
		|	УстановкаЦенНоменклатуры.Номенклатура,
		|	ПОДСТРОКА(УстановкаЦенНоменклатуры.Номенклатура.НаименованиеПолное, 1, 250) КАК Товар,
		|	УстановкаЦенНоменклатуры.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	УстановкаЦенНоменклатуры.Цена,
		|	УстановкаЦенНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияПредставление,
		|	Константа.ВалютаРегламентированногоУчета КАК Валюта,
		|	Константа.ВалютаРегламентированногоУчета.Представление            КАК ВалютаПредставление
		|
		|ИЗ
		|	Документ.гз_УстановкаПлановыхЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатуры
		|     ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константа ПО Истина
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	УстановкаЦенНоменклатуры.НомерСтроки
		|";

		ЗапросПоТоварам = Запрос.Выполнить();

		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатуры_ИзменениеЦен";

		Макет = ПолучитьМакет("ИзменениеЦен");

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Установка плановых цен номенклатуры", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть(ОбластьШапки + "|Номенклатура");
		ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть(ОбластьШапки + "|Цена");
		ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Номенклатура");
		ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть(ОбластьСтроки + "|Цена");
		ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
		ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

		// Выведем шапку
		Если ВыводитьКоды Тогда
			ОбластьШапкаНоменклатура.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
		
		ОбластьШапкаТипЦен.Параметры.ФинансовыйГод = ФинансовыйГод;
		ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
		
		// Выведем таблицу
		ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ОбластьСтрокаНоменклатура.Параметры.Заполнить(ВыборкаПоСтрокам);
			Если ВыборкаПоСтрокам.Товар = "" Тогда 
				ОбластьСтрокаНоменклатура.Параметры.Товар = ВыборкаПоСтрокам.Номенклатура;
			КонецЕсли;
			Если ВыводитьКоды Тогда
				ОбластьСтрокаНоменклатура.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
			КонецЕсли; 
			ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
			ОбластьСтрокаТипЦен.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;

		// Выведем подвал
		ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
		ТабДокумент.Присоединить(ОбластьПодвалТипЦен);

		ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

		ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 29));
		ОбластьОтветственного.Объединить();
		ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

		Возврат ТабДокумент;

	КонецФункции // ПечатьДокумента()

	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяМакета = "ПереченьЦен" Тогда
			// Получить экземпляр документа на печать
			ТабДокумент = ПечатьДокумента();
		КонецЕсли;
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;  
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Установка плановых цен номенклатуры"));
		
	КонецПроцедуры // Печать()

#КонецЕсли

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПереченьЦен", "Перечень цен");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция формирует запрос для получения таблицы цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры.
//
// Возвращаемое значение:
//  Таблица значений, содержащая колонки Номенклатура и Цена
//  
Функция ПолучитьТаблицуЦенНоменклатуры() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ФинансовыйГод", ФинансовыйГод);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЦеныНоменклатуры.Цена
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_ЦеныЗакупаТоваровРаботУслуг.СрезПоследних(&ДатаЦен, ФинансовыйГод = &ФинансовыйГод И Организация = &Организация) КАК ЦеныНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = Ложь";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции //ПолучитьТаблицуЦенНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ФинансовыйГод, Организация");

	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет наличие одних и тех же номенклатурных позиций в табличной
// части "Товары" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиТовары(ТаблицаТоваров, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаТоваров.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("Номенклатура", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
								   + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
																						|");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
								   + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаТоваров.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицыДублей.Номенклатура));
			
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
								   + СписокНомеровСтрок
								   + " в табличной части документа указана одна и та же номенклатурная позиция.";
								   
		КонецЦикла;
														  
		гз_ОбщегоНазначения.мОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиТовары()

// Процедура проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Функция выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	НаборДвижений   = Движения.гз_ЦеныЗакупаТоваровРаботУслуг;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	гз_ОбщегоНазначения.мЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 	 "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ФинансовыйГод, "ФинансовыйГод");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.гз_ЦеныЗакупаТоваровРаботУслуг.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = гз_ОбщегоНазначения.мСформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = гз_УправлениеЗапасами.мСформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Цена",                       "Цена");

	РезультатЗапросаПоТоварам = гз_ПроцедурыОперативногоУчетаЗакупок.мСформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	Если СтруктураШапкиДокумента.НеПроводитьНулевыеЗначения Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоТоварам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварам.Получить(Сч);
			Если СтрокаТаблицы.Цена = 0 Тогда
				ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПроверитьДублиТовары(ТаблицаПоТоварам, Отказ, Заголовок); 
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()

