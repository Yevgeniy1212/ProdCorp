#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПоНесколькимПроектам(Объект) Экспорт
	
	ВидОперации 				= Объект.ВидОперации;
	УказыватьВедомости			= Объект.УказыватьВедомости;
	РасшифровкаПлатежа 			= Объект.РасшифровкаПлатежа;
	ПеречислениеЗаработнойПлаты = Объект.ПеречислениеЗаработнойПлаты;
	ПеречислениеВПодотчет 		= Объект.ПеречислениеВПодотчет;
	
	ЕстьРасчетыСКонтрагентами	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ТаблицаПроекты = Неопределено;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Если РасшифровкаПлатежа.Количество() > 1 Тогда
			ТаблицаПроекты = РасшифровкаПлатежа.Выгрузить(,"Проект");
			ТаблицаПроекты.Свернуть("Проект");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
		Если ПеречислениеЗаработнойПлаты.Количество()>1 Тогда
			ТаблицаПроекты = ПеречислениеЗаработнойПлаты.Выгрузить(,"Проект");
			ТаблицаПроекты.Свернуть("Проект");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику И УказыватьВедомости Тогда	
		Если ПеречислениеВПодотчет.Количество()>1 Тогда
			ТаблицаПроекты = ПеречислениеВПодотчет.Выгрузить(,"Проект");
			ТаблицаПроекты.Свернуть("Проект");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаПроекты = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТаблицаПроекты.Количество()>1 Тогда
		Возврат Истина;
	ИначеЕсли ТаблицаПроекты.Количество()=1 Тогда
		Возврат (ЗначениеЗаполнено(ТаблицаПроекты[0].Проект) И ТипЗнч(ТаблицаПроекты[0].Проект)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам());
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоНесколькимПодразделениям(Объект) Экспорт
	
	ВидОперации 						= Объект.ВидОперации;
	УказыватьВедомости					= Объект.УказыватьВедомости;
	РасшифровкаПлатежа 					= Объект.РасшифровкаПлатежа;
	ПеречислениеЗаработнойПлаты 		= Объект.ПеречислениеЗаработнойПлаты;
	ПеречислениеПоИсполнительнымЛистам 	= Объект.ПеречислениеПоИсполнительнымЛистам;
	ПеречислениеПенсионныхВзносов 		= Объект.ПеречислениеПенсионныхВзносов;
	ПеречислениеСоциальныхОтчислений 	= Объект.ПеречислениеСоциальныхОтчислений;
	
	ЕстьРасчетыСКонтрагентами	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ТаблицаЦФО = Неопределено;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Если РасшифровкаПлатежа.Количество()>1 Тогда
			ТаблицаЦФО = РасшифровкаПлатежа.Выгрузить(,"ЦФО");
			ТаблицаЦФО.Свернуть("ЦФО");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
		Если ПеречислениеЗаработнойПлаты.Количество()>1 Тогда
			ТаблицаЦФО = ПеречислениеЗаработнойПлаты.Выгрузить(,"Подразделение");
			ТаблицаЦФО.Свернуть("Подразделение");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам И УказыватьВедомости Тогда
		Если ПеречислениеПоИсполнительнымЛистам.Количество()>1 Тогда
			ТаблицаЦФО = ПеречислениеПоИсполнительнымЛистам.Выгрузить(,"Подразделение");
			ТаблицаЦФО.Свернуть("Подразделение");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов И УказыватьВедомости Тогда
		Если ПеречислениеПенсионныхВзносов.Количество()>1 Тогда
			ТаблицаЦФО = ПеречислениеПенсионныхВзносов.Выгрузить(,"Подразделение");
			ТаблицаЦФО.Свернуть("Подразделение");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений И УказыватьВедомости Тогда
		Если ПеречислениеСоциальныхОтчислений.Количество()>1 Тогда
			ТаблицаЦФО = ПеречислениеСоциальныхОтчислений.Выгрузить(,"Подразделение");
			ТаблицаЦФО.Свернуть("Подразделение");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаЦФО = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТаблицаЦФО.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоНесколькимСтатьямДДС(Объект) Экспорт
	
	ВидОперации 				= Объект.ВидОперации;
	УказыватьВедомости			= Объект.УказыватьВедомости;
	РасшифровкаПлатежа 			= Объект.РасшифровкаПлатежа;
	ПеречислениеЗаработнойПлаты = Объект.ПеречислениеВПодотчет;
	ПеречислениеВПодотчет 		= Объект.ПеречислениеВПодотчет;
	
	ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам 		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ТаблицаСДДС = Неопределено;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Если РасшифровкаПлатежа.Количество() > 1 Тогда
			ТаблицаСДДС = РасшифровкаПлатежа.Выгрузить(,"СтатьяДвиженияДенежныхСредств");
			ТаблицаСДДС.Свернуть("СтатьяДвиженияДенежныхСредств");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
		Если ПеречислениеЗаработнойПлаты.Количество() > 1 Тогда
			ТаблицаСДДС = ПеречислениеЗаработнойПлаты.Выгрузить(,"СтатьяДвиженияДенежныхСредств");
			ТаблицаСДДС.Свернуть("СтатьяДвиженияДенежныхСредств");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику И УказыватьВедомости Тогда	
		Если ПеречислениеВПодотчет.Количество() > 1 Тогда
			ТаблицаСДДС = ПеречислениеВПодотчет.Выгрузить(,"СтатьяДвиженияДенежныхСредств");
			ТаблицаСДДС.Свернуть("СтатьяДвиженияДенежныхСредств");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаСДДС = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТаблицаСДДС.Количество()>1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РазрезСтатьяДДС(Объект) Экспорт
	
	ФинансовыйПоказатель = Объект.ФинансовыйПоказатель;
	
	Если НЕ ЗначениеЗаполнено(ФинансовыйПоказатель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСДДС = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	Для Каждого РазрезУчета Из ФинансовыйПоказатель.РазрезыУчета Цикл
		ТекущийРазрез = РазрезУчета.Измерение;
		ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ТекущийРазрез);
		Если ЭПВХ.ТипЗначения.СодержитТип(ТипСДДС) Тогда
			Возврат ТекущийРазрез;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаБюджетнойАналитики(Объект) Экспорт
	
	ВидОперации 		= Объект.ВидОперации;
	УказыватьВедомости 	= Объект.УказыватьВедомости;
	РасшифровкаПлатежа 	= Объект.РасшифровкаПлатежа;
	
	ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам 		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			Объект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение",	РасшифровкаПлатежа[0].ЦФО);
	Запрос.УстановитьПараметр("Проект",			РасшифровкаПлатежа[0].Проект);
	Запрос.УстановитьПараметр("СтатьяДДС",		РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
                       |	РасшифровкаПлатежа.Проект,
                       |	РасшифровкаПлатежа.ЦФО,
                       |	РасшифровкаПлатежа.СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
                       |ГДЕ
                       |	РасшифровкаПлатежа.Ссылка = &Ссылка";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	ПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
                       |	ПеречислениеЗаработнойПлаты.Проект,
                       |	ПеречислениеЗаработнойПлаты.Подразделение КАК ЦФО,
                       |	ПеречислениеЗаработнойПлаты.СуммаКВыплате КАК СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлаты
                       |ГДЕ
                       |	ПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	ПеречислениеВПодотчет.СтатьяДвиженияДенежныхСредств,
                       |	ПеречислениеВПодотчет.Проект,
                       |	&Подразделение КАК ЦФО,
                       |	ПеречислениеВПодотчет.СуммаПлатежа КАК СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
                       |ГДЕ
                       |	ПеречислениеВПодотчет.Ссылка = &Ссылка";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам И УказыватьВедомости Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
                       |	&Проект КАК Проект,
                       |	ПеречислениеПоИсполнительнымЛистам.Подразделение КАК ЦФО,
                       |	ПеречислениеПоИсполнительнымЛистам.СуммаПлатежа КАК СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеПоИсполнительнымЛистам КАК ПеречислениеПоИсполнительнымЛистам
                       |ГДЕ
                       |	ПеречислениеПоИсполнительнымЛистам.Ссылка = &Ссылка";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов И УказыватьВедомости Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
                       |	&Проект КАК Проект,
                       |	ПеречислениеПенсионныхВзносов.Подразделение КАК ЦФО,
                       |	ПеречислениеПенсионныхВзносов.СуммаКПеречислению КАК СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
                       |ГДЕ
                       |	ПеречислениеПенсионныхВзносов.Ссылка = &Ссылка";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений И УказыватьВедомости Тогда
        Запрос.Текст = "ВЫБРАТЬ
                       |	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
                       |	&Проект КАК Проект,
                       |	ПеречислениеСоциальныхОтчислений.Подразделение КАК ЦФО,
                       |	ПеречислениеСоциальныхОтчислений.СуммаКПеречислению КАК СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
                       |ГДЕ
                       |	ПеречислениеСоциальныхОтчислений.Ссылка = &Ссылка";
	Иначе
        Запрос.Текст = "ВЫБРАТЬ
                       |	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
                       |	РасшифровкаПлатежа.Проект,
                       |	РасшифровкаПлатежа.ЦФО,
                       |	РасшифровкаПлатежа.СуммаПлатежа
                       |ИЗ
                       |	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
                       |ГДЕ
                       |	РасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
				   
    Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция КонтрольВыполнен(Объект, ТаблицаПечать = Неопределено) Экспорт
	
	Сценарий 				= Объект.Сценарий;
	ФинансовыйПоказатель 	= Объект.ФинансовыйПоказатель;
	ДатаРасхода 			= Объект.ДатаРасхода;
	СуммаДокумента			= Объект.СуммаДокумента;
	ВалютаДокумента 		= Объект.ВалютаДокумента;
	КратностьДокумента 		= Объект.КратностьДокумента;
	КурсДокумента 			= Объект.КурсДокумента; 
	Организация 			= Объект.Организация;
	БюджетныеПараметры		= Объект.БюджетныеПараметры;
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Если Сценарий.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	Если ФинансовыйПоказатель.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	Если ДатаРасхода = '00010101' Тогда
		Возврат Истина;
	КонецЕсли;
	ПолныйМассивИмен = Новый Массив;
	СписокРазрезовУчета = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	Для Каждого РазрезЭлемент Из СписокРазрезовУчета Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		ПолныйМассивИмен.Добавить(ИмяРазреза);
	КонецЦикла;
	
	КонтрольПоЦФО 		= Ложь;
	КонтрольПоПроектам 	= Ложь;
	КонтрольПоСДДС 		= Ложь;
	НесколькоЦФО		= Ложь;
	НесколькоПроектов	= Ложь;
	НесколькоСДДС		= Ложь;
	ПоНесколькимРазрезам = Ложь;
	
	// определим разрезы контроля
	
	РазрезСтатьяДДС = РазрезСтатьяДДС(Объект);
	Если ЗначениеЗаполнено(РазрезСтатьяДДС) Тогда
		СтрокиСДДС = БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",РазрезСтатьяДДС));
		Если СтрокиСДДС.Количество() > 0 Тогда
			КонтрольПоСДДС = Истина;
			Если СтрокиСДДС[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента И ПоНесколькимСтатьямДДС(Объект) Тогда
				НесколькоСДДС = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтрокиПроект = БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
	Если СтрокиПроект.Количество() > 0 Тогда
		КонтрольПоПроектам = Истина;
		Если СтрокиПроект[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента И ПоНесколькимПроектам(Объект) Тогда
			НесколькоПроектов = Истина;
		КонецЕсли;
	КонецЕсли;
	СтрокиЦФО = БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
	Если СтрокиЦФО.Количество() > 0 Тогда
		КонтрольПоЦФО = Истина;
		Если СтрокиЦФО[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента И ПоНесколькимПодразделениям(Объект) Тогда
			НесколькоЦФО = Истина;
		КонецЕсли;
	КонецЕсли;
	ПоНесколькимРазрезам = НесколькоЦФО ИЛИ НесколькоПроектов ИЛИ НесколькоСДДС;

	// построение таблицы контролируемых значений
	
	ТаблицаАналитики = ТаблицаБюджетнойАналитики(Объект);
	Если ЗначениеЗаполнено(РазрезСтатьяДДС) Тогда
		ИмяРазрезаСДДС = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезСтатьяДДС);
		ТаблицаАналитики.Колонки.СтатьяДвиженияДенежныхСредств.Имя 	= ИмяРазрезаСДДС;
		ТаблицаАналитики.Колонки.ЦФО.Имя							= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение);
		ТаблицаАналитики.Колонки.Проект.Имя 						= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект);
	КонецЕсли;
	ТаблицаВыполненияКонтроля = Новый ТаблицаЗначений;
	ТаблицаВыполненияКонтроля.Колонки.Добавить("СуммаПлатежа",			Новый ОписаниеТипов("Число"));
	ТаблицаВыполненияКонтроля.Колонки.Добавить("ФинансовыйПоказатель",	Новый ОписаниеТипов("СправочникСсылка.фин_ФинансовыеПоказатели"));
	СтрокаСвертки = "ФинансовыйПоказатель";
	Для Каждого СтрокаКонтроль Из БюджетныеПараметры Цикл
		ИмяКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаКонтроль.Измерение);
		ТипКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаКонтроль.Измерение).ТипЗначения;
		ТаблицаВыполненияКонтроля.Колонки.Добавить(ИмяКолонки,			ТипКолонки);
		СтрокаСвертки = СтрокаСвертки + "," + ИмяКолонки;
	КонецЦикла;
	Если ПоНесколькимРазрезам Тогда
		Для Каждого СтрокаАналитики Из ТаблицаАналитики Цикл
			НС = ТаблицаВыполненияКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаАналитики);
		КонецЦикла;
	Иначе
		НС = ТаблицаВыполненияКонтроля.Добавить();
		НС.СуммаПлатежа = СуммаДокумента;
	КонецЕсли;
	Для Каждого СтрокаКонтроль Из БюджетныеПараметры Цикл
		ИмяКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаКонтроль.Измерение);
		ТипКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(СтрокаКонтроль.Измерение).ТипЗначения;
		Если СтрокаКонтроль.СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ФиксированноеЗначение Тогда
			ЗначениеЗаполнения = ТипКолонки.ПривестиЗначение(СтрокаКонтроль.Значение);
			ТаблицаВыполненияКонтроля.ЗаполнитьЗначения(ЗначениеЗаполнения,ИмяКолонки);
		ИначеЕсли СтрокаКонтроль.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
			ЗначениеЗаполнения = Объект.Контрагент;
			ТаблицаВыполненияКонтроля.ЗаполнитьЗначения(ЗначениеЗаполнения,ИмяКолонки);
		ИначеЕсли ТаблицаАналитики.Количество() > 0 И НЕ ПоНесколькимРазрезам Тогда
			ЗначениеЗаполнения = Неопределено;
			Если СтрокаКонтроль.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
				ЗначениеЗаполнения = ТаблицаАналитики[0].Проект;
			ИначеЕсли СтрокаКонтроль.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
				ЗначениеЗаполнения = ТаблицаАналитики[0].ЦФО;
			ИначеЕсли СтрокаКонтроль.Измерение = РазрезСтатьяДДС Тогда
				ЗначениеЗаполнения = ТаблицаАналитики[0][ИмяРазрезаСДДС];
			КонецЕсли;
			Если ЗначениеЗаполнения <> Неопределено Тогда
				ТаблицаВыполненияКонтроля.ЗаполнитьЗначения(ЗначениеЗаполнения,ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаВыполненияКонтроля.ЗаполнитьЗначения(ФинансовыйПоказатель, "ФинансовыйПоказатель");
	ТаблицаВыполненияКонтроля.Свернуть(СтрокаСвертки, "СуммаПлатежа");
	ТаблицаВыполненияКонтроля.Колонки.СуммаПлатежа.Имя = "Сумма";
	ТаблицаВыполненияКонтроля.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
	
	// валютные пересчеты
	
	КурсУпр = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, ДатаРасхода);
	
	//ОтборПоПроектам = Истина;
	Для Каждого СтрокаКонтроль Из ТаблицаВыполненияКонтроля Цикл
		СтрокаКонтроль.СуммаУпр = ?(мВалютаУправленческогоУчета = ВалютаДокумента,СтрокаКонтроль.Сумма,фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаКонтроль.Сумма,ВалютаДокумента,мВалютаУправленческогоУчета,КурсДокумента,КурсУпр.Курс,КратностьДокумента,КурсУпр.Кратность));
		Если КонтрольПоПроектам Тогда
			Если СтрокаКонтроль.Проект = Неопределено ИЛИ СтрокаКонтроль.Проект = Справочники.ВидыРаспределенияПоПроектам.ПустаяСсылка() Тогда
				СтрокаКонтроль.Проект = Справочники.Проекты.ПустаяСсылка();
			ИначеЕсли ТипЗнч(СтрокаКонтроль.Проект) = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникВидыРаспределенияПоПроектам() Тогда
				фин_УправлениеПроектами.РаспределитьДвиженияДСПоПроектам(ТаблицаВыполненияКонтроля, СтрокаКонтроль, СтрокаКонтроль.Проект, КонецМесяца(ДатаРасхода));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаВыполненияКонтроля.Колонки.Сумма.Имя = "СуммаПлатежа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", 				Сценарий);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель", 	ФинансовыйПоказатель);
	Запрос.УстановитьПараметр("НачалоПериода", 			фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаРасхода,Сценарий));
	Запрос.УстановитьПараметр("КонецПериода", 			фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаРасхода,Сценарий));
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("ДатаРасхода", 			ДатаРасхода);
	Запрос.УстановитьПараметр("Ссылка", 				Объект.Ссылка);

	// рассчитаем контроль по лимиту
	
	ДокБюджет = Новый ТаблицаЗначений;
	Для Каждого НР Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		ДокБюджет.Колонки.Добавить(НР.Имя,НР.Тип);
	КонецЦикла;
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	//определим применяемое количество правил лимитирования - на весь документ, или по разрезам
	ОбщийКонтроль = Истина;
	Если ПоНесколькимРазрезам Тогда
		ТаблицаОборотовДокументаДляКонтроля = ДокБюджет.Скопировать();
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("Период");
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("Сценарий");
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("СуммаСценария");
		ТЗ = ТаблицаВыполненияКонтроля.Скопировать();
		
		Для Каждого СтрокаДляКонтроля  Из ТЗ Цикл
			// подготовим промежуточную копию таблицы бюджетных параметров для сохранения значений текущей строки контроля
			мБюджетныеПараметры = БюджетныеПараметры.Выгрузить();
			Для Каждого СтрокаКонтроль Из мБюджетныеПараметры Цикл
				ИмяКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаКонтроль.Измерение);
				СтрокаКонтроль.Значение = СтрокаДляКонтроля[ИмяКолонки];
			КонецЦикла;
			
			мСтрокаКонтроля = ТаблицаОборотовДокументаДляКонтроля.Добавить();
			мСтрокаКонтроля.Период = ДатаРасхода;
			мСтрокаКонтроля.Сценарий = Сценарий;
			мСтрокаКонтроля.ФинансовыйПоказатель = ФинансовыйПоказатель;
			мСтрокаКонтроля.Сумма = СтрокаДляКонтроля.СуммаПлатежа;
			мСтрокаКонтроля.ВалютаОперации = СуммаДокумента;
			Для Каждого СтрокаПараметры Из мБюджетныеПараметры Цикл
				ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаПараметры.Измерение);
				мСтрокаКонтроля[ИмяРазреза] = СтрокаПараметры.Значение;
			КонецЦикла;
		КонецЦикла;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Период",ДатаРасхода);
		Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
			СтруктураДанных.Вставить(ИмяРазреза,ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку(ИмяРазреза));	
		КонецЦикла;
		
		СписокЛимитов = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку("ФинансовыйПоказатель"),Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Истина);
		СтрокаКопированияСвертки = "";
		Если НесколькоПроектов Тогда
			СтрокаКопированияСвертки = СтрокаКопированияСвертки + ?(СтрокаКопированияСвертки="","",",")+"Проект";
		КонецЕсли;
		Если НесколькоЦФО Тогда
			СтрокаКопированияСвертки = СтрокаКопированияСвертки + ?(СтрокаКопированияСвертки="","",",")+"УправленческоеПодразделение";
		КонецЕсли;
		Если НесколькоСДДС Тогда
			СтрокаКопированияСвертки = СтрокаКопированияСвертки + ?(СтрокаКопированияСвертки="","",",")+ИмяРазрезаСДДС;
		КонецЕсли;
		ТЗ = СписокЛимитов.Скопировать(,СтрокаКопированияСвертки);
		ТЗ.Свернуть(СтрокаКопированияСвертки);
		Если ТЗ.Количество()>1 Тогда
			ОбщийКонтроль = Ложь;
		КонецЕсли;
		
		МассивУдаляемых = Новый Массив;
		Для Каждого СтрокаЛимит Из СписокЛимитов Цикл
			Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаЛимит.Период,СтрокаЛимит.Сценарий.Периодичность) <> фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаРасхода,СтрокаЛимит.Сценарий.Периодичность) Тогда
				МассивУдаляемых.Добавить(СтрокаЛимит);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаЛимит Из МассивУдаляемых Цикл
			СписокЛимитов.Удалить(СтрокаЛимит);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщийКонтроль Тогда
		ТаблицаОборотовДокументаДляКонтроля = ДокБюджет.Скопировать();
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("Период");
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("Сценарий");
		ТаблицаОборотовДокументаДляКонтроля.Колонки.Добавить("СуммаСценария");
		мСтрокаКонтроля = ТаблицаОборотовДокументаДляКонтроля.Добавить();
		мСтрокаКонтроля.Период = ДатаРасхода;
		мСтрокаКонтроля.Сценарий = Сценарий;
		мСтрокаКонтроля.ФинансовыйПоказатель = ФинансовыйПоказатель;
		мСтрокаКонтроля.Сумма = СуммаДокумента;
		мСтрокаКонтроля.ВалютаОперации = СуммаДокумента;
		мБюджетныеПараметры = БюджетныеПараметры.Выгрузить();
		СтрокаДляКонтроля = ТаблицаВыполненияКонтроля[0];
		Для Каждого СтрокаКонтроль Из мБюджетныеПараметры Цикл
			ИмяКолонки = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаКонтроль.Измерение);
			СтрокаКонтроль.Значение = СтрокаДляКонтроля[ИмяКолонки];
		КонецЦикла;
		Для Каждого СтрокаПараметры Из мБюджетныеПараметры Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаПараметры.Измерение);
			мСтрокаКонтроля[ИмяРазреза] = СтрокаПараметры.Значение;
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Период",ДатаРасхода);
		Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
			СтруктураДанных.Вставить(ИмяРазреза,ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку(ИмяРазреза));	
		КонецЦикла;
		
		СписокЛимитов = фин_УправлениеЗависимостямиСтатейБюджетов.ПолучитьТаблицуКонтролирующихПравил(ТаблицаОборотовДокументаДляКонтроля.ВыгрузитьКолонку("ФинансовыйПоказатель"),Сценарий,БюджетированиеПоОрганизациям,Организация,СтруктураДанных,Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Истина);
		
		МассивУдаляемых = Новый Массив;
		Для Каждого СтрокаЛимит Из СписокЛимитов Цикл
			Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаЛимит.Период,СтрокаЛимит.Сценарий.Периодичность) <> фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаРасхода,СтрокаЛимит.КонтролирующийСценарий.Периодичность) Тогда
				МассивУдаляемых.Добавить(СтрокаЛимит);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаЛимит Из МассивУдаляемых Цикл
			СписокЛимитов.Удалить(СтрокаЛимит);
		КонецЦикла;
	КонецЕсли;
	ДокБюджет = Неопределено;
	
	Если СписокЛимитов.Количество()>0 Тогда
		Для Каждого СтрокаОборотовДляКонтроля Из ТаблицаОборотовДокументаДляКонтроля Цикл
			
			ТабКонтролируемыхЗначений=Документы.ден_ЗаявкаНаРасходованиеСредств.ПроверкаКонтролируемыхЗначений(Объект,СписокЛимитов,СтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,БюджетированиеПоОрганизациям,ПолныйМассивИмен);
			
			Для Каждого СтрокаРезультатКонтроля Из ТабКонтролируемыхЗначений Цикл
				ВсегоРазрешено = СтрокаРезультатКонтроля.СуммаКонтроль;
				Исполнено = СтрокаРезультатКонтроля.СуммаСценарияИсполнение;
				ОписаниеКонтроля = "";
				Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
					Если ТабКонтролируемыхЗначений.Колонки.Найти(ИмяРазреза)=Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультатКонтроля[ИмяРазреза]) Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаРезультатКонтроля[ИмяРазреза]) Тогда
						ОписаниеКонтроля = ОписаниеКонтроля + ?(ОписаниеКонтроля="","",Символы.ПС)+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза])+": "+СтрокаРезультатКонтроля[ИмяРазреза];
					КонецЕсли;
				КонецЦикла;
				// 2 - неисполненный остаток по текущей заявке
				Если ВалютаДокумента = Сценарий.Валюта Тогда
					КИсполнениюПоТекущейЗаявке = СтрокаОборотовДляКонтроля.Сумма; 
				Иначе	
					КурсСценария = ОбщегоНазначения.ПолучитьКурсВалюты(Сценарий.Валюта,ДатаРасхода);
					КИсполнениюПоТекущейЗаявке = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаОборотовДляКонтроля.Сумма,ВалютаДокумента,Сценарий.Валюта,КурсДокумента,КурсСценария.Курс,КратностьДокумента,КурсСценария.Кратность) 
				КонецЕсли;
				
				// 3 - получение остатков по прочим заявкам
				КИсполнениюПоПрочимЗаявкам = 0;
				ТекстУсловие = "";
			    МассивЗаявок = Новый Массив;
				Для Каждого ИмяРазреза Из ПолныйМассивИмен Цикл
					Если ТабКонтролируемыхЗначений.Колонки.Найти(ИмяРазреза)=Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаРезультатКонтроля[ИмяРазреза]) Тогда
						Продолжить;
					КонецЕсли;
					Если Найти(ИмяРазреза,"Разрез")<>0 Тогда
						ПутьРазреза = "ДополнительныеРазрезы."+ИмяРазреза;
					Иначе 
						ПутьРазреза = ИмяРазреза;
					КонецЕсли;
					ТекстУсловие= ТекстУсловие+"
					|				И "+ПутьРазреза+" =&"+ИмяРазреза;
					Запрос.УстановитьПараметр(ИмяРазреза,СтрокаРезультатКонтроля[ИмяРазреза]);
				КонецЦикла;

				Запрос.Текст = 
					"ВЫБРАТЬ
					|	БюджетныеДанные.ЗаявкаНаРасходование КАК ЗаявкаНаРасходование,
		            |	БюджетныеДанные.СуммаУпрОстаток КАК КИсполнениюПоПрочимЗаявкам
					|ИЗ
					|	РегистрНакопления.ден_РезервыПоБюджетамПодВыполнениеЗаявок.Остатки(
					|			,
					|			Сценарий = &Сценарий
					|				И ФинансовыйПоказатель = &ФинансовыйПоказатель
					|				И (Организация=ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ИЛИ Организация=&Организация) "+ТекстУсловие+") КАК БюджетныеДанные
					|
					|ИТОГИ
					| 	СУММА(КИсполнениюПоПрочимЗаявкам)
					|
					|ПО Общие";
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					КИсполнениюПоПрочимЗаявкам = ВыборкаДетальныеЗаписи.КИсполнениюПоПрочимЗаявкам;
					// пересчитаем в валюту документа
					Если мВалютаУправленческогоУчета <> Сценарий.Валюта Тогда
						КурсСцен = ОбщегоНазначения.ПолучитьКурсВалюты(Сценарий.Валюта,ДатаРасхода);
						КИсполнениюПоПрочимЗаявкам = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(КИсполнениюПоПрочимЗаявкам,мВалютаУправленческогоУчета,Сценарий.Валюта,КурсУпр.Курс,КурсСцен.Курс,КурсУпр.Кратность,КурсСцен.Кратность);
					КонецЕсли;
				КонецЕсли;
				ОстатокСУчетомЗаявки = (ВсегоРазрешено - Исполнено - КИсполнениюПоПрочимЗаявкам) - КИсполнениюПоТекущейЗаявке;
				Если ТаблицаПечать<>Неопределено Тогда
					НоваяСтрокаПечать = ТаблицаПечать.Добавить();
					НоваяСтрокаПечать.Сценарий = СтрокаРезультатКонтроля.КонтролирующийСценарий;
					НоваяСтрокаПечать.Разрешено = ВсегоРазрешено;
					НоваяСтрокаПечать.Исполнено = Исполнено;
					НоваяСтрокаПечать.Резерв = КИсполнениюПоПрочимЗаявкам;
					НоваяСтрокаПечать.ПоТекущей = КИсполнениюПоТекущейЗаявке;
					НоваяСтрокаПечать.Остаток = ОстатокСУчетомЗаявки;
				Иначе
					Если ОстатокСУчетомЗаявки < 0 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В результате проведения заявки возникает превышение лимитов"+?(ОписаниеКонтроля="",""," ("+ОписаниеКонтроля+")")+":
							|	нехватка: "+Строка(ОстатокСУчетомЗаявки)+ " "+Сценарий.Валюта+";
							|	общее исполнение: "+Строка(Исполнено+КИсполнениюПоПрочимЗаявкам+КИсполнениюПоТекущейЗаявке)+ " "+Сценарий.Валюта+";
							|	в т.ч. по резервам под прочие заявки: "+Строка(КИсполнениюПоПрочимЗаявкам)+ " "+Сценарий.Валюта, Объект.Ссылка,);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверкаКонтролируемыхЗначений(Источник, СписокЛимитов, СтрокаОборотовДляКонтроля,ТаблицаОборотовДокументаДляКонтроля,БюджетированиеПоОрганизациям,МассивИмен,ДатаАктуальности = Неопределено) Экспорт
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	ТабРезультата = СписокЛимитов.СкопироватьКолонки();
	
	Для Каждого СтрокаЛимитов Из СписокЛимитов Цикл
		ПодходящаяСтрока = Истина;
		Для Каждого ИмяРазреза Из МассивИмен Цикл
			Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ (СтрокаЛимитов[ИмяРазреза] = СтрокаОборотовДляКонтроля[ИмяРазреза] ИЛИ НЕ ЗначениеЗаполнено(СтрокаЛимитов[ИмяРазреза])) Тогда
				ПодходящаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаЛимитов.ФинансовыйПоказатель = СтрокаОборотовДляКонтроля.ФинансовыйПоказатель И ПодходящаяСтрока Тогда
			НовыйЛимит = ТабРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЛимит,СтрокаЛимитов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверитьПоказателиВСоответствииСправиламиКонтроля(ТабРезультата,ТаблицаОборотовДокументаДляКонтроля,СтрокаОборотовДляКонтроля,МассивИмен,Источник,БюджетированиеПоОрганизациям,Источник.Организация,Источник.ВалютаДокумента,Источник.Сценарий,,ДатаАктуальности);
	
КонецФункции // ПроверкаКонтролируемыхЗначений()

Функция СписокЗаявокПоПодразделению(Подразделение) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦФО",Подразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Подразделения.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка = &ЦФО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасшифровкаПлатежа.Ссылка
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подразделения КАК Подразделения
		|		ПО РасшифровкаПлатежа.ЦФО = Подразделения.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеречислениеПенсионныхВзносов.Ссылка
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подразделения КАК Подразделения
		|		ПО ПеречислениеПенсионныхВзносов.Подразделение = Подразделения.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеречислениеСоциальныхОтчислений.Ссылка
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подразделения КАК Подразделения
		|		ПО ПеречислениеСоциальныхОтчислений.Подразделение = Подразделения.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеречислениеПоИсполнительнымЛистам.Ссылка
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеПоИсполнительнымЛистам КАК ПеречислениеПоИсполнительнымЛистам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подразделения КАК Подразделения
		|		ПО ПеречислениеПоИсполнительнымЛистам.Подразделение = Подразделения.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеречислениеЗаработнойПлаты.Ссылка
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подразделения КАК Подразделения
		|		ПО ПеречислениеЗаработнойПлаты.Подразделение = Подразделения.Подразделение";

	Результат = Запрос.Выполнить();

    Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Список;
	
КонецФункции

Функция КраткийСоставПодразделений(Объект) Экспорт
	
	ВидОперации = Объект.ВидОперации;
	УказыватьВедомости = Объект.УказыватьВедомости;
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа; 
	
	ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам 		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	МассивПодразделений = Новый Массив;
	МассивПодразделений.Добавить(РасшифровкаПлатежа[0].ЦФО);
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		МассивПодразделений = РасшифровкаПлатежа.ВыгрузитьКолонку("ЦФО");
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И УказыватьВедомости Тогда
 		МассивПодразделений = Объект.ПеречислениеЗаработнойПлаты.ВыгрузитьКолонку("Подразделение");
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда

	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам И УказыватьВедомости Тогда
  		МассивПодразделений = Объект.ПеречислениеПоИсполнительнымЛистам.ВыгрузитьКолонку("Подразделение");
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов И УказыватьВедомости Тогда
   		МассивПодразделений = Объект.ПеречислениеПенсионныхВзносов.ВыгрузитьКолонку("Подразделение");
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений И УказыватьВедомости Тогда
       МассивПодразделений = Объект.ПеречислениеСоциальныхОтчислений.ВыгрузитьКолонку("Подразделение");
	Иначе
		МассивПодразделений = РасшифровкаПлатежа.ВыгрузитьКолонку("ЦФО");
	КонецЕсли;
	
	Возврат МассивПодразделений;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
// 	Объект - документ
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"), , , , ДокументОснование);
	
	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ЗаполнитьДокументПоПоступлениюТоваровИУслуг(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда 
		ЗаполнитьДокументПоПоступлениюДопРасходов(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ЗаполнитьДокументПоВозвратуТоваровОтПокупателя(Объект, ДокументОснование);	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ЗаполнитьДокументПоАвансовомуОтчету(Объект, ДокументОснование);		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаполнитьДокументПоПриходномуКассовомуОрдеру(Объект, ДокументОснование);	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		ЗаполнитьДокументПоДоговоруЗаймаСРаботником(Объект, ДокументОснование);	
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.узп_ЗаявкаМТС") Тогда
		ЗаполнитьДокументПоЗаявкеМТС(Объект, ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.узп_ЗаказПоставщику") Тогда
		ЗаполнитьДокументПоЗаказуПоставщику(Объект, ДокументОснование);
	КонецЕсли;
	
	Объект.Состояние = фин_ОбщегоНазначенияСервер.СостояниеДокументаПоУмолчанию("ден_ЗаявкаНаРасходованиеСредств");

КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

// Процедура выполняет заполнение документа по основанию.
//
// Параметры:
// 	Объект - документ
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьПоОснованию(Объект, Основание) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Объект, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));//, , , , ДокументОснование);
	
	ЗаполнитьЗначенияСвойств(Объект,Основание);
	Если Основание.Свойство("МассивБюджетныеПараметры") Тогда
		Для Каждого ПараметрБюджета Из Основание.МассивБюджетныеПараметры Цикл
			НС 							= Объект.БюджетныеПараметры.Добавить();
			НС.Измерение  				= ПараметрБюджета.Ключ;
			НС.Разрез 					= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПараметрБюджета.Ключ);
			Если ПараметрБюджета.Значение = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента Тогда
				НС.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента;
			Иначе
				НС.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ФиксированноеЗначение;
				НС.Значение = ПараметрБюджета.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Основание.Свойство("СтрокаРасшифровка") Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Основание.СтрокаРасшифровка);
	КонецЕсли;
	
	
	Объект.Состояние = фин_ОбщегоНазначенияСервер.СостояниеДокументаПоУмолчанию("ден_ЗаявкаНаРасходованиеСредств");

КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

Процедура ЗаполнитьДокументПоПоступлениюТоваровИУслуг(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	
	Объект.Контрагент  						= Основание.Контрагент;
	СтрокаПлатеж.ДоговорКонтрагента        	= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов 			= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов         = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов    = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СтруктураКурсаДокумента 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	
	// СпособЗаполнения - "По сумме документа"
	
	ОснованиеСуммаДокумента = Основание.СуммаДокумента;

	СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
	КурсОснования			= СтруктураКурсаОснования.Курс;
	КратностьОснования		= СтруктураКурсаОснования.Кратность;

	СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
	Объект.СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
								ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов, Объект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;

	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоПоступлениюДопРасходов(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	
	Объект.Контрагент  						= Основание.Контрагент;
	СтрокаПлатеж.ДоговорКонтрагента        	= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов 			= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов         = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов    = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СтруктураКурсаДокумента 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	
	// СпособЗаполнения - "По сумме документа"
	
	ОснованиеСуммаДокумента = Основание.СуммаДокумента;

	СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
	КурсОснования			= СтруктураКурсаОснования.Курс;
	КратностьОснования		= СтруктураКурсаОснования.Кратность;

	СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
	Объект.СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
								ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов, Объект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;

	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоВозвратуТоваровОтПокупателя(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
	
	Объект.Контрагент  						= Основание.Контрагент;
	СтрокаПлатеж.ДоговорКонтрагента        	= Основание.ДоговорКонтрагента;
	СтруктураКурсаВзаиморасчетов 			= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов         = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов    = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		СтрокаПлатеж.Сделка = Основание;
	КонецЕсли;
	
	СтруктураКурсаДокумента 	= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	
	// СпособЗаполнения - "По сумме документа"
	
	ОснованиеСуммаДокумента = Основание.СуммаДокумента;

	СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
	КурсОснования			= СтруктураКурсаОснования.Курс;
	КратностьОснования		= СтруктураКурсаОснования.Кратность;

	СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
	Объект.СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
								ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов, Объект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;

	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоАвансовомуОтчету(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		
	Объект.Получатель                       = Основание.ФизЛицо;
	Объект.ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
	СтруктураКурсаВзаиморасчетов     		= ОбщегоНазначения.ПолучитьКурсВалюты(Объект.ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
	СтрокаПлатеж.КурсВзаиморасчетов        	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов   	= СтруктураКурсаВзаиморасчетов.Кратность;
	
	СтруктураКурсаДокумента 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	
	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоПриходномуКассовомуОрдеру(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		Объект.ВидОперации 	= Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
		Объект.Контрагент	= Основание.Контрагент;
		
		СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
		
		СпособЗаполнения = "По сумме документа";

		Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.Сделка = Основание;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов 			= ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Объект.Дата);
		СтрокаПлатеж.КурсВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов     = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтруктураКурсаДокумента  	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		// Отказ
		// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
		Возврат;
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		// Отказ
		// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
		Возврат;
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		// Отказ
		// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
		Возврат;
		
	КонецЕсли;
	
	// СпособЗаполнения - "По сумме документа"
	
	ОснованиеСуммаДокумента = Основание.СуммаДокумента;

	СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
	КурсОснования			= СтруктураКурсаОснования.Курс;
	КратностьОснования		= СтруктураКурсаОснования.Кратность;

	СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
	Объект.СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
								ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов, Объект.КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;

	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоДоговоруЗаймаСРаботником(Объект, Основание)
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Объект.БанковскийСчетКасса = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнаяКасса");
		Иначе
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
		Объект.ВалютаДокумента = Объект.БанковскийСчетКасса.ВалютаДенежныхСредств;
	Иначе
		Объект.ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	КонецЕсли;
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();

	Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками;
	Объект.Получатель  = Основание.ФизЛицо;
	Объект.РасчетныйДокумент = Основание;
	Объект.ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
	
	СтруктураКурсаВзаиморасчетов     		= ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      	= СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов 	= СтруктураКурсаВзаиморасчетов.Кратность;
	
	СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
	КурсОснования      		= СтруктураКурсаОснования.Курс;
	КратностьОснования 		= СтруктураКурсаОснования.Кратность;

	СтруктураКурсаДокумента 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;

	СуммаДокумента = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
								Объект.ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
								СтрокаПлатеж.КурсВзаиморасчетов, Объект.КурсДокумента,
								СтрокаПлатеж.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Объект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоЗаявкеМТС(Объект, Основание);	
	
	Объект.ВидОперации 				 = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	СтрокаПлатеж					 = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа		 = Основание.суммаДокумента;
	СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаДокумента;
	СтрокаПлатеж.КурсВзаиморасчетов  = 1;
	СтрокаПлатеж.ЦФО				 = Основание.Подразделение;
	Объект.Сценарий					 = Основание.Сценарий;
	Объект.СуммаДокумента 			 = Основание.СуммаДокумента;
	//Объект.Сумма 					 = Основание.СуммаДокумента;

КонецПроцедуры

Процедура ЗаполнитьДокументПоЗаказуПоставщику(Объект, Основание);	
	
	Объект.ВидОперации 				 = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	СтрокаПлатеж					 = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа		 = Основание.суммаДокумента;
	СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаДокумента;
	СтрокаПлатеж.КурсВзаиморасчетов  = 1;
	СтрокаПлатеж.ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
	Объект.Получатель 				 = Основание.Подразделение;
	Объект.СуммаДокумента 			 = Основание.СуммаДокумента;
	Объект.Контрагент				 = Основание.Контрагент;
	
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеРезервов(Объект) Экспорт
	
	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;
	// Очистим записи документа по размещению, если он был ранее проведен
	Если Объект.Проведен Тогда
		НаборОстаткиРезерв = РегистрыНакопления.ден_ДенежныеСредстваВРезерве.СоздатьНаборЗаписей();
		НаборОстаткиРезерв.Отбор.Регистратор.Установить(Объект.Ссылка);
		НаборОстаткиРезерв.Прочитать();
		НаборОстаткиРезерв.Очистить();
		НаборОстаткиРезерв.Записать();
		НаборПланируемоеПоступление  = РегистрыНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.СоздатьНаборЗаписей();
		НаборПланируемоеПоступление.Отбор.Регистратор.Установить(Объект.Ссылка);
		НаборПланируемоеПоступление.Прочитать();
		НаборПланируемоеПоступление.Очистить();
		НаборПланируемоеПоступление.Записать();
	КонецЕсли;
	// Заполнение документа
	ЗаполнитьРазмещение(Объект, Отказ);
	// Если заполнить удалось, то запись документа с проведением
	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			НеПроведен = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция не выполнена!");
		КонецЕсли;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ДополнительныеЗапросы = Новый Массив;
	ДополнительныеЗапросы.Добавить("ТаблицаКонтроля");
	
	ДополнительныеПараметрыЗапросов = Новый Структура;
	ДополнительныеПараметрыЗапросов.Вставить("ДатаРасхода", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДатаРасхода"));
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаУпрУчета", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	ТаблицаРазмещениеЗаявки = ПараметрыПроведения.ТаблицаРазмещениеЗаявки;
	Если ТаблицаРазмещениеЗаявки <> Неопределено И ТаблицаРазмещениеЗаявки.Количество() > 0 Тогда
		ПараметрыПроведения.ТаблицаРазмещениеЗаявки.Свернуть("МестоРазмещения", "СуммаПлатежа");
	КонецЕсли; 
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаТаблицаКонтроля(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт

	НомераТаблиц.Вставить("ТаблицаКонтроля", НомераТаблиц.Количество());

	ТекстЗапроса = "";
	
	ВидОперации = Реквизиты.ВидОперации;
	
	ЕстьРасчетыСКонтрагентами	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КурсыУпрУчета.Курс КАК Курс,
		|	КурсыУпрУчета.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасхода, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заявка.Ссылка КАК Ссылка,
		|	Заявка.Сценарий КАК Сценарий,
		|	Заявка.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	КурсыУпрУчета.Курс КАК Курс,
		|	КурсыУпрУчета.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявок
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств КАК Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курс КАК КурсыУпрУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Заявка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявок.Сценарий КАК Сценарий,
		|	ВТ_ДанныеЗаявок.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА Договоры.ВалютаВзаиморасчетов = &ВалютаУпрУчета
		|					ТОГДА ТаблицаКонтроля.СуммаВзаиморасчетов
		|				КОГДА ВТ_ДанныеЗаявок.Курс ЕСТЬ NULL 
		|						ИЛИ ТаблицаКонтроля.КурсВзаиморасчетов = 0
		|					ТОГДА 0
		|				КОГДА Договоры.ВалютаВзаиморасчетов <> &ВалютаУпрУчета
		|						И ВТ_ДанныеЗаявок.Курс <> 0
		|						И ТаблицаКонтроля.КурсВзаиморасчетов <> 0
		|					ТОГДА ТаблицаКонтроля.СуммаВзаиморасчетов * ТаблицаКонтроля.КурсВзаиморасчетов * ВТ_ДанныеЗаявок.Кратность / (ВТ_ДанныеЗаявок.Курс * ТаблицаКонтроля.КратностьВзаиморасчетов)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр,
		|	ВТ_ДанныеЗаявок.Курс КАК КурсУпрУчета,
		|	ВТ_ДанныеЗаявок.Кратность КАК КратностьУпрУчета,
		|	СУММА(ТаблицаКонтроля.СуммаПлатежа) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ТаблицаКонтроля
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок
		|		ПО ТаблицаКонтроля.Ссылка = ВТ_ДанныеЗаявок.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО ТаблицаКонтроля.ДоговорКонтрагента = Договоры.Ссылка
		|ГДЕ
		|	ТаблицаКонтроля.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеЗаявок.Сценарий,
		|	ВТ_ДанныеЗаявок.ФинансовыйПоказатель,
		|	ВТ_ДанныеЗаявок.Курс,
		|	ВТ_ДанныеЗаявок.Кратность";
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику 
		ИЛИ ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КурсыУпрУчета.Курс КАК Курс,
		|	КурсыУпрУчета.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасхода, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заявка.Ссылка КАК Ссылка,
		|	Заявка.Сценарий КАК Сценарий,
		|	Заявка.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
		|	Заявка.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	КурсыУпрУчета.Курс КАК Курс,
		|	КурсыУпрУчета.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_ДанныеЗаявок
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств КАК Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курс КАК КурсыУпрУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Заявка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеЗаявок.Сценарий КАК Сценарий,
		|	ВТ_ДанныеЗаявок.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВТ_ДанныеЗаявок.ВалютаВзаиморасчетовПодотчетника = &ВалютаУпрУчета
		|					ТОГДА ТаблицаКонтроля.СуммаВзаиморасчетов
		|				КОГДА ВТ_ДанныеЗаявок.Курс ЕСТЬ NULL 
		|						ИЛИ ТаблицаКонтроля.КурсВзаиморасчетов = 0
		|					ТОГДА 0
		|				КОГДА ВТ_ДанныеЗаявок.ВалютаВзаиморасчетовПодотчетника <> &ВалютаУпрУчета
		|						И ВТ_ДанныеЗаявок.Курс <> 0
		|						И ТаблицаКонтроля.КурсВзаиморасчетов <> 0
		|					ТОГДА ТаблицаКонтроля.СуммаВзаиморасчетов * ТаблицаКонтроля.КурсВзаиморасчетов * ВТ_ДанныеЗаявок.Кратность / (ВТ_ДанныеЗаявок.Курс * ТаблицаКонтроля.КратностьВзаиморасчетов)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр,
		|	ВТ_ДанныеЗаявок.Курс КАК КурсУпрУчета,
		|	ВТ_ДанныеЗаявок.Кратность КАК КратностьУпрУчета,
		|	СУММА(ТаблицаКонтроля.СуммаПлатежа) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ТаблицаКонтроля
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаявок КАК ВТ_ДанныеЗаявок
		|		ПО ТаблицаКонтроля.Ссылка = ВТ_ДанныеЗаявок.Ссылка
		|ГДЕ
		|	ТаблицаКонтроля.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеЗаявок.Сценарий,
		|	ВТ_ДанныеЗаявок.ФинансовыйПоказатель,
		|	ВТ_ДанныеЗаявок.Курс,
		|	ВТ_ДанныеЗаявок.Кратность";
	Иначе
		ТекстЗапроса=
		"ВЫБРАТЬ
		|	ТаблицаКонтроля.Ссылка.Сценарий,
		|	ТаблицаКонтроля.Ссылка.ФинансовыйПоказатель,
		|	ТаблицаКонтроля.СуммаПлатежа
		|ИЗ
		|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ТаблицаКонтроля
		|ГДЕ
		|	ТаблицаКонтроля.Ссылка = &Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заявка на расходование средств
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаявкаНаРасходованиеСредств";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на расходование средств'");
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаРасходованиеСредств") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявкаНаРасходованиеСредств",
			НСтр("ru = 'Заявка на расходование средств'"),
			ПечатьЗаявкаНаРасходованиеСредств(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ден_ЗаявкаНаРасходованиеСредств.ЗаявкаНаРасходованиеСредств");
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

Функция ПечатьЗаявкаНаРасходованиеСредств(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ден_ЗаявкаНаРасходованиеСредств_ЗаявкаНаРасходованиеСредств";
	
	Макет = Документы.ден_ЗаявкаНаРасходованиеСредств.ПолучитьМакет("ЗаявкаНаРасходованиеСредств");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявка.Ссылка,
	|	Заявка.ВерсияДанных,
	|	Заявка.ПометкаУдаления,
	|	Заявка.Номер,
	|	Заявка.Дата,
	|	Заявка.Проведен,
	|	Заявка.Автор,
	|	Заявка.АвтоРазмещениеПоЗаявке,
	|	Заявка.АвтоРезервированиеПоЗаявке,
	|	Заявка.Банк,
	|	Заявка.БанковскийСчетКасса,
	|	Заявка.ВалютаВзаиморасчетовПодотчетника,
	|	Заявка.ВалютаДокумента,
	|	Заявка.ВидНалога,
	|	Заявка.ВидОперации,
	|	Заявка.ВключатьВПлатежныйКалендарь,
	|	Заявка.ДатаПогашенияАванса,
	|	Заявка.ДатаРасхода,
	|	Заявка.ДокументОснование,
	|	Заявка.КодНазначенияПлатежа,
	|	Заявка.Комментарий,
	|	Заявка.Контрагент,
	|	Заявка.КратностьДокумента,
	|	Заявка.КурсДокумента,
	|	Заявка.Номенклатура,
	|	Заявка.Описание,
	|	Заявка.Организация,
	|	Заявка.Ответственный,
	|	Заявка.Получатель,
	|	Заявка.РасчетнаяДатаПлатежа,
	|	Заявка.РасчетныйДокумент,
	|	Заявка.РучнаяКорректировка,
	|	Заявка.Состояние,
	|	Заявка.СтруктурноеПодразделение,
	|	Заявка.СуммаДокумента,
	|	Заявка.Сценарий,
	|	Заявка.УказыватьВедомости,
	|	Заявка.ФинансовыйПоказатель,
	|	Заявка.ФормаОплаты,
	|	Заявка.ЦФО,
	|	Заявка.ЭтапОплаты,
	|	Заявка.РазмещениеЗаявки.(
	|		Ссылка,
	|		НомерСтроки,
	|		МестоРазмещения,
	|		СуммаПлатежа
	|	)
	|ИЗ
	|	Документ.ден_ЗаявкаНаРасходованиеСредств КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка В (&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();

	ТабДокумент.Очистить();

	ВставлятьРазделительСтраниц = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Выборка.ВидОперации);
		ЕстьРасчетыПоКредитам 		= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Выборка.ВидОперации);

		Отказ = Ложь;
		//Проверим заполнение реквизитов документов
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(Выборка.Ссылка, СтруктураОбязательныхПолейШапка(ЕстьРасчетыСКонтрагентами,ЕстьРасчетыПоКредитам,Выборка.ВидОперации,Выборка.ВключатьВПлатежныйКалендарь,Выборка.ФормаОплаты), Отказ,);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;	
			
		Обл  = Макет.ПолучитьОбласть("Заголовок");
		
		Обл.Параметры.ЗаголовокЗаявки = "" + Выборка.Ссылка+Символы.ПС+Выборка.ВидОперации;
		Обл.Параметры.Заполнить(Выборка);
		
		ТабДокумент.Вывести(Обл);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Обл = Макет.ПолучитьОбласть("ЗаголовокРасчеты");
			Обл.Параметры.Контрагент = Выборка.Контрагент;
			ТабДокумент.Вывести(Обл);
			
			Запрос = Новый Запрос;
			
			ФильтрСписокСчетов = Новый Массив();
			ВыборкаИзПланаСчетов = ПланыСчетов.Типовой.Выбрать();
			Пока ВыборкаИзПланаСчетов.Следующий() Цикл
			
				Если ВыборкаИзПланаСчетов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) = Неопределено
					ИЛИ ВыборкаИзПланаСчетов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры) = Неопределено Тогда
					продолжить;
				КонецЕсли;
				ФильтрСписокСчетов.Добавить(ВыборкаИзПланаСчетов.Ссылка);
			
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
			
			АналитикаРасчетов = Новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
			Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ВЫБОР КОГДА НЕ((РасчетыСКонтрагентамиОстатки.СуммаОстаток) ЕСТЬ NULL ) 
			|		ТОГДА 
			|			ВЫБОР КОГДА НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен
			|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаОстаток+ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|			ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаОстаток КОНЕЦ
			|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
			|ИЗ
			|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
			|			,
			|			Счет В (&ФильтрСписокСчетов),
			|			&АналитикаРасчетов,
			|			Организация = &Организация
			|		    И Субконто1 = &Контрагент
			|		    И Субконто2 В (ВЫБРАТЬ
			|								ДоговорКонтрагента
			|							ИЗ
			|								Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК Расшифровка
			|							ГДЕ
			|								Расшифровка.Ссылка = &Ссылка)) КАК РасчетыСКонтрагентамиОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = РасчетыСКонтрагентамиОстатки.Субконто2
			|
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Обл = Макет.ПолучитьОбласть("СтрокаРасчеты");
				Обл.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(Обл);
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалРасчеты");
			ТабДокумент.Вывести(Обл);
			
		ИначеЕсли Выборка.ВидОперации=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику И Выборка.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			
			Обл = Макет.ПолучитьОбласть("ЗаголовокПодотчет");
			Обл.Параметры.Получатель = Выборка.Получатель;
			Обл.Параметры.ТекстВыдачаФизЛицу = "Выдача денежных средств под отчет";
			Обл.Параметры.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			ТабДокумент.Вывести(Обл);
			
			Запрос = Новый Запрос;
			
			ФильтрСписокСчетов = Новый Массив();
			ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
			//ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
			ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами);
			//ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
			
			Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
			
			АналитикаРасчетов = Новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
			Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА НЕ ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток ЕСТЬ NULL 
			|			ТОГДА ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|	КОНЕЦ КАК ТекущийДолг
			|ИЗ
			|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
			|				,
			|				Счет В (&ФильтрСписокСчетов),
			|				&АналитикаРасчетов,
			|				Организация = &Организация
			|					И Субконто1 = &Получатель) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Получатель = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Субконто1
			|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",			Выборка.Ссылка);
			Запрос.УстановитьПараметр("Получатель", 	Выборка.Получатель);
			Запрос.УстановитьПараметр("Организация", 	Выборка.Организация);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				Обл = Макет.ПолучитьОбласть("СтрокаПодотчет");
				Обл.Параметры.ДатаПогашенияАванса = Выборка.ДатаПогашенияАванса;
				Обл.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(Обл);
				
			КонецЕсли;
			
			Обл = Макет.ПолучитьОбласть("ПодвалПодотчет");
			ТабДокумент.Вывести(Обл);
			
		ИначеЕсли Выборка.ВидОперации=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику И Выборка.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
			
			Обл = Макет.ПолучитьОбласть("ЗаголовокПодотчетСписком");
			Обл.Параметры.ТекстВыдачаФизЛицу = "Выдача денежных средств под отчет";
			Обл.Параметры.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			ТабДокумент.Вывести(Обл);
			
			Запрос = Новый Запрос;
			
			ФильтрСписокСчетов = Новый Массив();
			ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
			//ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПодотчетныхЛиц);
			ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПередПодотчетнымиЛицами);
			//ФильтрСписокСчетов.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПередПодотчетнымиЛицами);
			
			Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
			
			АналитикаРасчетов = Новый Массив();
			АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
			Запрос.УстановитьПараметр("АналитикаРасчетов", АналитикаРасчетов);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПеречислениеВПодотчет.ФизЛицо,
			|	СУММА(ПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаПлатежа,
			|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента
			|ПОМЕСТИТЬ ВТ_Подотчетники
			|ИЗ
			|	Документ.ден_ЗаявкаНаРасходованиеСредств.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
			|ГДЕ
			|	ПеречислениеВПодотчет.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеречислениеВПодотчет.ФизЛицо,
			|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Подотчетники.ВалютаДокумента КАК ВалютаВзаиморасчетовПодотчетника,
			|	ВТ_Подотчетники.СуммаПлатежа КАК СуммаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА НЕ ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток ЕСТЬ NULL 
			|			ТОГДА ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаОстаток + ВТ_Подотчетники.СуммаПлатежа
			|		ИНАЧЕ ВТ_Подотчетники.СуммаПлатежа
			|	КОНЕЦ КАК ТекущийДолг,
			|	ВТ_Подотчетники.ФизЛицо КАК Подотчетник
			|ИЗ
			|	ВТ_Подотчетники КАК ВТ_Подотчетники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
			|				,
			|				Счет В (&ФильтрСписокСчетов),
			|				&АналитикаРасчетов,
			|				Организация = &Организация
			|					И Субконто1 В
			|						(ВЫБРАТЬ
			|							Подотчетники.ФизЛицо
			|						ИЗ
			|							ВТ_Подотчетники КАК Подотчетники)) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
			|		ПО ВТ_Подотчетники.ФизЛицо = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Субконто1
			|			И ВТ_Подотчетники.ВалютаДокумента = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта";
			
			Запрос.УстановитьПараметр("Ссылка",			Выборка.Ссылка);
			Запрос.УстановитьПараметр("Получатель", 	Выборка.Получатель);
			Запрос.УстановитьПараметр("Организация", 	Выборка.Организация);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Обл = Макет.ПолучитьОбласть("СтрокаПодотчетСписком");
				Обл.Параметры.ДатаПогашенияАванса=Выборка.ДатаПогашенияАванса;
				Обл.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(Обл);
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалПодотчет");
			ТабДокумент.Вывести(Обл);
			
		ИначеЕсли Выборка.ВидОперации=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			Обл = Макет.ПолучитьОбласть("ЗаголовокПодотчет");
			Обл.Параметры.Получатель = Выборка.Получатель;
			Обл.Параметры.ТекстВыдачаФизЛицу = "Выдача денежных средств по договору займа";
			Обл.Параметры.РасчетныйДокумент = Выборка.РасчетныйДокумент;
			ТабДокумент.Вывести(Обл);
			
			Запрос=Новый Запрос;
			Запрос.Текст =  
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ВЫБОР КОГДА НЕ((ПогашениеЗаймовРаботникамиОрганизацийОстатки.ФизЛицо) ЕСТЬ NULL ) 
			|		ТОГДА ПогашениеЗаймовРаботникамиОрганизацийОстатки.ОсновнойДолгОстаток 
			|				+ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов 
			|		КОГДА НЕ((ПогашениеЗаймовРаботникамиОстатки.ФизЛицо) ЕСТЬ NULL ) 
			|		ТОГДА ПогашениеЗаймовРаботникамиОстатки.ОсновнойДолгОстаток 
			|				+ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов 
			|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
			|ИЗ
			|	Документ.ден_ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботниками.Остатки КАК ПогашениеЗаймовРаботникамиОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Получатель = ПогашениеЗаймовРаботникамиОстатки.ФизЛицо 
			|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.РасчетныйДокумент = ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.Остатки КАК ПогашениеЗаймовРаботникамиОрганизацийОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Получатель = ПогашениеЗаймовРаботникамиОрганизацийОстатки.ФизЛицо 
			|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.РасчетныйДокумент = ПогашениеЗаймовРаботникамиОрганизацийОстатки.ДоговорЗайма
			|
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				Обл = Макет.ПолучитьОбласть("СтрокаПодотчет");
				Обл.Параметры.ДатаПогашенияАванса = Выборка.ДатаПогашенияАванса;
				Обл.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(Обл);
				
			КонецЕсли;
			
			Обл = Макет.ПолучитьОбласть("ПодвалПодотчет");
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Обл = Макет.ПолучитьОбласть("ЗаголовокРазмещениеЗаявки");
		РазмещениеЗаявки = Выборка.РазмещениеЗаявки.Выгрузить();
		Если РазмещениеЗаявки.Количество() = 0 Тогда
			
			Обл.Параметры.ТекстРазмещениеЗаявки = "Не размещено";
			ТабДокумент.Вывести(Обл);
			
		Иначе
			
			Обл.Параметры.ТекстРазмещениеЗаявки = "Таблица размещения";
			ТабДокумент.Вывести(Обл);
			
			Обл = Макет.ПолучитьОбласть("ШапкаРазмещениеЗаявки");
			ТабДокумент.Вывести(Обл);
			
			ТабРазмещениеЗаявки = РазмещениеЗаявки.Скопировать();
			ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
			
			Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
				
				Если Строка.МестоРазмещения = Неопределено Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Строка.МестоРазмещения) = Тип("ДокументСсылка.ден_ПланируемоеПоступлениеДенежныхСредств") Тогда
					
					Обл = Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
					
					ОстатокКРазмещению = ден_ПроцедурыКазначейства.ПолучитьНеразмещенныйОстаток(Строка.МестоРазмещения,Выборка.ДатаРасхода,Выборка.Ссылка,Выборка.СтруктурноеПодразделение);
					
					Обл.Параметры.МестоРазмещения = Строка.МестоРазмещения;
					Обл.Параметры.СуммаПлатежа = Строка.СуммаПлатежа;
					Обл.Параметры.ТекущийОстаток = ОстатокКРазмещению - Строка.СуммаПлатежа;
					
				Иначе
					
					// Проверяем остаток доступных денежных средств
					Обл = Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
					
					СвободныйОстаток = ден_ПроцедурыКазначейства.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,Выборка.ДатаРасхода,Выборка.Ссылка,Выборка.СтруктурноеПодразделение);
					
					Обл.Параметры.МестоРазмещения = Строка.МестоРазмещения;
					Обл.Параметры.СуммаПлатежа = Строка.СуммаПлатежа;
					Обл.Параметры.ТекущийОстаток = СвободныйОстаток - Строка.СуммаПлатежа;
					
				КонецЕсли;
				
				ТабДокумент.Вывести(Обл);
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалРазмещение");
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Если НЕ Выборка.Описание = "" Тогда
			
			Обл = Макет.ПолучитьОбласть("ОписаниеЗаявки");
			Обл.Параметры.Описание = Выборка.Описание;
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Сценарий) Тогда // Есть связь с бюджетированием
		
			Обл = Макет.ПолучитьОбласть("ЗаголовокБюджетирование");
			Обл.Параметры.Заполнить(Выборка);
			
			// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
			ТаблицаПечать = Новый ТаблицаЗначений;
			ТаблицаПечать.Колонки.Добавить("Сценарий");
			ТаблицаПечать.Колонки.Добавить("Разрешено");
			ТаблицаПечать.Колонки.Добавить("Исполнено");
			ТаблицаПечать.Колонки.Добавить("Резерв");
			ТаблицаПечать.Колонки.Добавить("ПоТекущей");
			ТаблицаПечать.Колонки.Добавить("Остаток");
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонтрольВыполнен(ДокументОбъект,ТаблицаПечать);	
			Если ТаблицаПечать.Количество() <> 0 Тогда
				Обл.Параметры.НадписьКонтрольОборотов = "Ограничения, установленные по обороту:";
				ТабДокумент.Вывести(Обл);
				Обл = Макет.ПолучитьОбласть("ЗаголовокКонтроль");
				ТабДокумент.Вывести(Обл);
				Для каждого СтрокаПроверки Из ТаблицаПечать Цикл
					Обл = Макет.ПолучитьОбласть("СтрокаКонтроль");
					СуммаКонтроль = 0;
					СуммаИсполнение = 0;
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Если (НЕ СтрокаПроверки["Разрешено"] = NULL) И (НЕ СтрокаПроверки["Исполнено"] = NULL) Тогда
						Обл.Параметры.СуммаКонтроль = СтрокаПроверки["Разрешено"];
						Обл.Параметры.СуммаИсполнение = СтрокаПроверки["Исполнено"] + СтрокаПроверки["Резерв"] + СтрокаПроверки["ПоТекущей"];
						Обл.Параметры.КонтролирующийСценарий = СтрокаПроверки.Сценарий;
						Обл.Параметры.ТекущийОстаток = СтрокаПроверки.Остаток;
						Обл.Параметры.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Выборка.ДатаРасхода,Строка(СтрокаПроверки.Сценарий.Периодичность));
						ТабДокумент.Вывести(Обл);
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		    Обл = Макет.ПолучитьОбласть("ПодвалКонтроль");
			ТабДокумент.Вывести(Обл);
		КонецЕсли;	
		
		Обл = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Обл);
		// Первую колонку не печатаем
		ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Процедура заполняет размещение планируемого расхода денежных средств
//
Процедура ЗаполнитьРазмещение(Объект, Отказ)
	
	ТекстУсловия = "";
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана валюта заявки.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.ФормаОплаты.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана форма оплаты.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Таблица = общ_ПроцедурыМеханизмаЗащиты.ПолучитьТаблицуРазмещения(Объект.АвтоРазмещениеПоЗаявке,
																				Объект.АвтоРезервированиеПоЗаявке,
																				Объект.Организация,
																				Объект.ФормаОплаты,
																				Объект.БанковскийСчетКасса,
																				Объект.ВалютаДокумента,
																				Объект.ДатаРасхода,
																				Объект.Ссылка);
	РазмещеноВручную = Объект.РазмещениеЗаявки.Итог("СуммаПлатежа");
	ОсталосьРазместить = Объект.СуммаДокумента - РазмещеноВручную;
	Объект.РазмещениеЗаявки.Очистить();
	Для Каждого Строка Из Таблица Цикл
		Если Строка.СвободныйОстаток <= 0 Тогда
			Продолжить;	
		ИначеЕсли Строка.СвободныйОстаток >= ОсталосьРазместить Тогда
			Размещение = Объект.РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения = Строка.МестоРазмещения;
			Размещение.СуммаПлатежа = ОсталосьРазместить;
			Прервать;
		Иначе
			Размещение = Объект.РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения = Строка.МестоРазмещения;
			Размещение.СуммаПлатежа = Строка.СвободныйОстаток;
			ОсталосьРазместить = ОсталосьРазместить-Размещение.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРазмещение()

Функция ПроверитьПоказателиВСоответствииСправиламиКонтроля(ТабРезультата,ТаблицаОборотовДокументаДляКонтроля,СтрокаОборотовДляКонтроля,ИменаРазрезов,
		СтруктураДанныхШапки,БюджетированиеПоОрганизациям,Организация,ВалютаДокумента,Сценарий,СтатьиИФинансовыеПоказатели=Неопределено,ДатаАктуальности = Неопределено)
		
	КонтрольПройден = Истина;
	Запрос = Новый Запрос;
	ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
	ТабРезультата.Колонки.Добавить("СуммаКонтроль");
	
	Если ТабРезультата.Количество() = 0 Тогда
		
		Возврат ТабРезультата;
		
	Иначе
		
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			
			СтруктураПоискаОборотов = Новый Структура("Период,ФинансовыйПоказатель",СтрокаОборотовДляКонтроля.Период,СтрокаОборотовДляКонтроля.ФинансовыйПоказатель);
			
			ТекстФильтр = "";
			Для Каждого Разрез Из ИменаРазрезов Цикл
				Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(СтрокаОборотовДляКонтроля.ФинансовыйПоказатель,Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]) Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПроверки[Разрез]) Тогда
					СтруктураПоискаОборотов.Вставить(Разрез,СтрокаПроверки[Разрез]);
				КонецЕсли;
				ТекстФильтр = ТекстФильтр+" И 
				|			"+?(Найти(Разрез,"Разрез")=0,"","ДополнительныеРазрезы.")+Разрез+"=&"+Разрез;
				Запрос.УстановитьПараметр(Разрез,СтрокаПроверки[Разрез]);
			КонецЦикла;
			Если СтрокаПроверки.КонтролирующийСценарий.Пустая() Тогда
				ТекущийСценарий	= Сценарий;
				ДатаНачала		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотовДляКонтроля.Период, ТекущийСценарий.Периодичность);
				ДатаКонца  		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,Сценарий.Периодичность);
			Иначе
				ТекущийСценарий=СтрокаПроверки.КонтролирующийСценарий;				
				ДатаНачала = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотовДляКонтроля.Период, ТекущийСценарий.Периодичность);
				ДатаКонца  = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаНачала,ТекущийСценарий.Периодичность);
			КонецЕсли;
			
			Сумма	= СтрокаОборотовДляКонтроля.Сумма;
			// пересчет в валюту сценария
			ВалютаСценария = Сценарий.Валюта;
			
			Если ВалютаСценария = ВалютаДокумента Тогда
				СуммаСценария = Сумма;
			Иначе
				Курс 		= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаСценария,ДатаНачала);
				КурсДок 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,ДатаНачала);
				СуммаСценария=фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(Сумма,
						ВалютаДокумента,ВалютаСценария,
						КурсДок.Курс,Курс.Курс,
						КурсДок.Кратность,Курс.Кратность);
			КонецЕсли;
			
			ДополнительныеСуммы = 0;
			
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.фин_КонтролируемыеФинансовыеПоказатели.Обороты(,"+?(ДатаАктуальности=Неопределено,"","&ДатаАктуальности")+", ,"+?(БюджетированиеПоОрганизациям,"Организация = &Организация И ","")+" 
			|					ПериодПланирования >=&ДатаНачала И ПериодПланирования<=&ДатаОкончания И
			|					КонтролирующийСценарий=&КонтролирующийСценарий И
			|					ФинансовыйПоказатель=&ФинансовыйПоказатель И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения"+ТекстФильтр+"
			|					) КАК КонтролируемыеФинансовыеПоказателиОбороты"+?(ДатаАктуальности=Неопределено,"","
			|	ГДЕ КонтролируемыеФинансовыеПоказателиОбороты.СуммаСценарияКонтрольОборот>0");		
			
			Запрос.УстановитьПараметр("ДатаАктуальности",						ДатаАктуальности);
			Запрос.УстановитьПараметр("Организация",							Организация);
			Запрос.УстановитьПараметр("ДатаНачала",								ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания",							ДатаКонца);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",					СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("ФинансовыйПоказатель",					СтрокаПроверки.ФинансовыйПоказатель);
			Запрос.УстановитьПараметр("Сценарий",								Сценарий);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",	Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
			
			СуммаКонтроль = 0;
			СуммаИсполнение = 0;
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль	= Выборка["СуммаКонтроль"]*фин_РегистрацияФактическихДанныхПоБюджетированию.РазрядностьПланирования();
				СуммаИсполнение	= Выборка["СуммаИсполнение"];//+СуммаСценария;
			КонецЕсли;
			
			СтрокаПроверки.СуммаСценарияИсполнение = СуммаИсполнение;
			СтрокаПроверки.СуммаКонтроль = СуммаКонтроль;
			СтрокаПроверки.Период = ДатаНачала;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТабРезультата;
	
КонецФункции

// Возвращает структуру, содержащую поля шапки, обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейШапка(ЕстьРасчетыСКонтрагентами, ЕстьРасчетыПоКредитам, ВидОперации, ВключатьВПлатежныйКалендарь, ФормаОплаты)
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		СтруктураПолей = Новый Структура("Организация,Контрагент, 
		|Ответственный,Состояние");
				
		
	ИначеЕсли ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтруктураПолей = Новый Структура("Организация,
		|ВалютаВзаиморасчетовПодотчетника, Ответственный,Состояние"+?(ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Наличные,",Получатель",""));
				
	Иначе
		
		СтруктураПолей = Новый Структура("Организация,Ответственный,Состояние, ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		
		СтруктураПолей.Вставить("ФормаОплаты");
		СтруктураПолей.Вставить("ВалютаДокумента");
		
	КонецЕсли;
	
	Возврат СтруктураПолей;
	
КонецФункции // СтруктураОбязательныхПолейШапка()

#КонецЕсли