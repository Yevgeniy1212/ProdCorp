
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.ТабличныеЧасти.РасшифровкаПлатежа) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для изменения реквизитов заявки'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФокус();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Документы.ден_ЗаявкаНаРасходованиеСредств.ПоНесколькимПроектам(ТекущийОбъект) Тогда
		Строки = ТекущийОбъект.БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
		Для Каждого СтрокаУдалить Из Строки Цикл
			ТекущийОбъект.БюджетныеПараметры.Удалить(СтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный");
	КонецЕсли;
	
	ТекущийОбъект.СуммаДокумента = ТекущийОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаБюджетныйКонтроль 
		И Элементы.ПанельБюджетныйКонтроль.ТекущаяСтраница = Элементы.БюджетныйКонтроль Тогда
		ОбновитьДанныеКонтроля();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте        
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение.Свойство("ДокументПланирования") Тогда
		Элементы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения = ВыбранноеЗначение.ДокументПланирования;
		СуммаКРазмещению = Объект.СуммаДокумента - Объект.РазмещениеЗаявки.Итог("СуммаПлатежа");
		СуммаПлатежа = ?(ВыбранноеЗначение.СуммаПлатежа <= СуммаКРазмещению, ВыбранноеЗначение.СуммаПлатежа, СуммаКРазмещению);
		Элементы.РазмещениеЗаявки.ТекущиеДанные.СуммаПлатежа = СуммаПлатежа;
	Иначе
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
	УстановитьФокус();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ДатаРасходаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если Объект.ФормаОплаты <> ТекущаяФормаОплаты Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику")
			И ТекущаяФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
			Если НесколькоПодотчетников(Объект.ПеречислениеВПодотчет) Тогда
				ТекстВопроса = НСтр("ru = 'При наличных расчетах на каждого подотчетника формируется отдельная заявка. Данные по фамилиям подотчетников будут очищены. Продолжить?'");	
				ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОчисткеФамилийПодотчетников", ЭтотОбъект), 
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;						  
		Иначе
			ФормаОплатыПриИзмененииНаСервере();				   
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.БанковскийСчетКасса = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ВалютаДокументаПриИзмененииНаСервере();
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуПлатежаТаблицаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана валюта расхода денежных средств.'"));
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура("Валюта", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", ?(Объект.ДатаРасхода='00010101',Объект.Дата,Объект.ДатаРасхода));
	СтруктураПараметров.Вставить("КратностьВалюты", Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("КурсВалюты", Объект.КурсДокумента);

	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаДокумента", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	Если ЭтоОперацияВРегламентированнойВалюте(Объект.ВидОперации) И ВалютаКассыСчета(Объект.БанковскийСчетКасса) <> ВалютаРегламентированногоУчета Тогда
		Объект.БанковскийСчетКасса = ТекущийСчетКасса;
		Возврат;
	КонецЕсли;
	
	ТекущийСчетКасса = Объект.БанковскийСчетКасса;

	БанковскийСчетКассаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Организация);
	Если ЭтоОперацияВРегламентированнойВалюте(ТекущийВидОперации) Тогда
		СтруктураОтбора.Вставить("ВалютаДенежныхСредств", ВалютаРегламентированногоУчета);
	ИначеЕсли НЕ ПравоИзмененияВалюты() Тогда
		СтруктураОтбора.Вставить("ВалютаДенежныхСредств", ТекущаяВалютаДокумента);
	КонецЕсли;
	
	СтруктураОтбораБанкаКассы = Новый Структура("Отбор", СтруктураОтбора);
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", СтруктураОтбораБанкаКассы, Элемент);
	ИначеЕсли Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Наличные") Тогда
		ОткрытьФорму("Справочник.Кассы.ФормаВыбора", СтруктураОтбораБанкаКассы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
		Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	УстановитьФокус();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если Список = 0 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Все строки расшифровки платежа, кроме первой, будут удалены.
							|Продолжить?'");	
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОбУдаленииСтрокРасшифровки", ЭтотОбъект), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
					   
	Иначе
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ВидДоговора = ОпределитьВидДоговораСКонтрагентом(ТекущийВидОперации);
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Организация, ВидДоговора", Объект.Контрагент, Объект.Организация, ВидДоговора));
		
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Объект.ВалютаВзаиморасчетовПодотчетника, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуПодотчетника();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументЗаймаПриИзменении(Элемент)
	
	ДокументЗаймаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.Контрагент = КонтрагентПоВидуНалога(Объект.ВидНалога);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	БанкПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьВедомостиПриИзменении(Элемент)
	
	Объект.ПеречислениеЗаработнойПлаты.Очистить();
	Объект.ПеречислениеПенсионныхВзносов.Очистить();
	Объект.ПеречислениеПоИсполнительнымЛистам.Очистить();
	Объект.ПеречислениеСоциальныхОтчислений.Очистить();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНазначенияПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", 		"КодыНазначенияПлатежей");
	ПараметрыФормы.Вставить("ИмяСекции", 		"Классификатор");
	ПараметрыФормы.Вставить("РежимВыбора", 		Истина);
	ПараметрыФормы.Вставить("ТекущийКодСтроки", ?(НЕ ЗначениеЗаполнено(Объект.КодНазначенияПлатежа), Неопределено, СокрЛП(Объект.КодНазначенияПлатежа)));
	
	ОткрытьФорму("ОбщаяФорма.куфиб_ФормаВыбораИзКлассификатора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасшифровкаПлатежа

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'");
		Если Список = 0 Тогда
			ПутьКТабличнойЧасти = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента";    
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПутьКТабличнойЧасти);
		Иначе		
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаПлатеж.НомерСтроки, "ДоговорКонтрагента");	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПутьКТабличнойЧасти,"Объект");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", ВалютаДоговора(СтрокаПлатеж.ДоговорКонтрагента));
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", ?(Объект.ДатаРасхода='00010101',Объект.Дата,Объект.ДатаРасхода));
	СтруктураПараметров.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсВзаиморасчетов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	СтрокаДанных          = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ВзаиморасчетыПоДоговоруВЦелом(СтрокаДанных.ДоговорКонтрагента) ИЛИ (НЕ ВедетсяУчетПоРасчетнымДокументам) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров   = Новый Структура;
	СтруктураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			Объект.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	СтрокаДанных.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("КонецПериода", 		Объект.Дата-1);

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);	
	
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
					
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(ИдентификаторСтрокаПлатеж, "РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПереводПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеВПодотчет

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику") Тогда
		Для Каждого СтрокаПодотчет Из Объект.ПеречислениеВПодотчет Цикл
			СтрокаПодотчет.ФизЛицо = Объект.Получатель;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ПеречислениеВПодотчет.ТекущиеДанные.ФизЛицо = Объект.Получатель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПодотчетника();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПодотчетника();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовПодотчетникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетовПодотчетника) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана валюта взаиморасчетов подотчетника.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВалютаВзаиморасчетовПодотчетника","Объект");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Валюта", Объект.ВалютаВзаиморасчетовПодотчетника);
	СтруктураПараметров.Вставить("ДатаУстановкиКурсаИКратности", ?(Объект.ДатаРасхода='00010101',Объект.Дата,Объект.ДатаРасхода));
	СтруктураПараметров.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаКурсаКратностиВзаиморасчетов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаКурсаИКратности", СтруктураПараметров,,,,, Оповещение);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СуммаКОплате = 0;
	Подразделение = Неопределено;
	
	Если НЕ ПроверитьВедомость(Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.Ведомость,Объект.ФормаОплаты,Объект.Банк,СуммаКОплате,Подразделение) Тогда
		Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ЗарплатаКВыплатеОрганизаций.ПустаяСсылка");
		ПоказатьПредупреждение(, "Выбранная ведомость не удовлетворяет параметрам заявки!");
		Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
	Иначе
		Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = СуммаКОплате;
		Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.Подразделение = Подразделение;
	КонецЕсли;
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;

	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
		СписокНеоплаченных = СписокНеоплаченныхВедомостей(Объект.Организация,Объект.СтруктурноеПодразделение,ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк"),Объект.Банк);
	Иначе
		СписокНеоплаченных = СписокНеоплаченныхВедомостей(Объект.Организация,Объект.СтруктурноеПодразделение,ПредопределенноеЗначение("Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу"),Объект.Банк);	
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Ссылка", СписокНеоплаченных);
	
	ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора", Новый Структура("Отбор", ПараметрыФормы), Элемент);
	
КонецПроцедуры

&НаКлиенте
 Процедура ПеречислениеЗаработнойПлатыСуммаКВыплатеПриИзменении(Элемент)
	 
	 РассчитатьСуммуПоВедомостям();
	 
 КонецПроцедуры
 
 &НаКлиенте
Процедура ПеречислениеЗаработнойПлатыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(Элементы.ПеречислениеЗаработнойПлаты.ТекущаяСтрока,"ПеречислениеЗаработнойПлаты");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПенсионныхВзносов

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовПослеУдаления(Элемент)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПенсионныхВзносовДокументПриИзменении(Элемент)
	
	СтруктураЗаполнения = ДанныеДляЗаполненияПоВедомостиОПВиСО(Элементы.ПеречислениеПенсионныхВзносов.ТекущиеДанные.Документ);
	
	Элементы.ПеречислениеПенсионныхВзносов.ТекущиеДанные.СуммаКПеречислению = СтруктураЗаполнения.СуммаКПеречислению;
	Элементы.ПеречислениеПенсионныхВзносов.ТекущиеДанные.Подразделение = СтруктураЗаполнения.Подразделение;
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеСоциальныхОтчислений

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийПослеУдаления(Элемент)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеСоциальныхОтчисленийДокументПриИзменении(Элемент)
	
	СтруктураЗаполнения = ДанныеДляЗаполненияПоВедомостиОПВиСО(Элементы.ПеречислениеСоциальныхОтчислений.ТекущиеДанные.Документ);
	
	Элементы.ПеречислениеСоциальныхОтчислений.ТекущиеДанные.СуммаКПеречислению = СтруктураЗаполнения.СуммаКПеречислению;
	Элементы.ПеречислениеСоциальныхОтчислений.ТекущиеДанные.Подразделение = СтруктураЗаполнения.Подразделение;
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПеречислениеПоИсполнительнымЛистам

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамПослеУдаления(Элемент)
	
	РассчитатьСуммуПоВедомостям();

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамДокументПриИзменении(Элемент)
	
	СтруктураЗаполнения = ДанныеДляЗаполненияПоВедомостиИЛ(Элементы.ПеречислениеПоИсполнительнымЛистам.ТекущиеДанные.Документ);
	
	Элементы.ПеречислениеПоИсполнительнымЛистам.ТекущиеДанные.СуммаКПеречислению = СтруктураЗаполнения.СуммаКПеречислению;
	Элементы.ПеречислениеПоИсполнительнымЛистам.ТекущиеДанные.СуммаСборов = СтруктураЗаполнения.СуммаСборов;
	Элементы.ПеречислениеПоИсполнительнымЛистам.ТекущиеДанные.СуммаПлатежа = СтруктураЗаполнения.СуммаПлатежа;
	
	РассчитатьСуммуПоВедомостям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеПоИсполнительнымЛистамДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСпособов = Новый СписокЗначений;
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезПочту"));
	Иначе
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу"));
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("СпособПеречисления", СписокСпособов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Документ.ИЛПеречислениеПолучателям.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ Резервирование

&НаКлиенте
Процедура АвтоРезервированиеПоЗаявкеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоРазмещениеПоЗаявкеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РазмещениеЗаявки

&НаКлиенте
Процедура РазмещениеЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана валюта заявки.",,"Объект.ВалютаДокумента",,Отказ);
	КонецЕсли;
	
	Если Объект.ФормаОплаты.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана форма оплаты.",,"Объект.ФормаОплаты",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеЗаявкиМестоРазмещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораРазмещенияЗаявки(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БюджетныеПараметры

&НаКлиенте
Процедура БюджетныеПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.БюджетныеПараметры.ТекущиеДанные.СпособУказанияЗначения = ПредопределенноеЗначение("Перечисление.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельБюджетныйКонтрольПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если  Элементы.ПанельБюджетныйКонтроль.ТекущаяСтраница = Элементы.ПанельБюджетныйКонтроль.ПодчиненныеЭлементы.БюджетныйКонтроль Тогда
		ОбновитьДанныеКонтроля();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыйПоказательПриИзменении(Элемент)
	
	ФинансовыйПоказательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеПараметрыИзмерениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БюджетныеПараметры.ТекущаяСтрока;
	ОбработатьИзменениеРазрезаУчета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеПараметрыИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазрезыУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БюджетныеПараметры.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура") Тогда
		МассивТипов = Новый Массив;
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре") Тогда
			ИспользуемыйНоменклатурныйПеречень = ПолучитьЗначениеРеквизита(Объект.ФинансовыйПоказатель, "ИспользуемыйНоменклатурныйПеречень");
			Если ИспользуемыйНоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура") 
				ИЛИ ИспользуемыйНоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
			КонецЕсли;
			Если ИспользуемыйНоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура") 
				ИЛИ ИспользуемыйНоменклатурныйПеречень = ПредопределенноеЗначение("Перечисление.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура") Тогда
				МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
		Иначе
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		ТипЗнчРазреза = ТипЗначенияРазреза(Элементы.БюджетныеПараметры.ТекущиеДанные.Разрез);
		Если ТипЗнчРазреза <> Неопределено Тогда
			Элемент.ОграничениеТипа = ТипЗнчРазреза;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоБюджетныйКонтроль

&НаКлиенте
Процедура АктуальныйМониторингПриИзменении(Элемент)
	
	ОбновитьДанныеКонтроля();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБюджетныйКонтрольКИсполнениюПоПрочимЗаявкамОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Идентификатор = Элементы.ДеревоБюджетныйКонтроль.ТекущиеДанные.Идентификатор;
	Валюта = Элементы.ДеревоБюджетныйКонтроль.ТекущиеДанные.Валюта;
	
	Попытка
		ТабличныйДокумент = ТаблицаРасшифровки(Идентификатор,Валюта);
		Если ТабличныйДокумент <> Неопределено Тогда
			ТабличныйДокумент.Защита = Истина;
			ТабличныйДокумент.ТолькоПросмотр = Истина;
			ТабличныйДокумент.Показать("Прочие заявки");
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если Найти(ТекстОшибки,"недостаточно прав") <> 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выполнения расшифровки!'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При расшифровке возникла ошибка: '" + ТекстОшибки));
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт          
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьРезервирование(Команда) Экспорт
	
	Если Объект.РазмещениеЗаявки.Итог("СуммаПлатежа") >= Объект.СуммаДокумента Тогда
		Сообщить("Заявка размещена полностью.");
		Возврат;
	КонецЕсли;
	
	Если Объект.АвтоРазмещениеПоЗаявке ИЛИ Объект.АвтоРезервированиеПоЗаявке Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			// Если документ ранее был записан, то он будет переноситься в конец дня из-за 
			// оперативного проведения, о чем следует предупредить.
			Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаполненииСПроведением", ЭтаФорма);
			ТекстВопроса = НСтр("ru = 'В режиме заполнения с проведением документ будет проводиться оперативно. 
									   |Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьРезервированиеНаСервере();	
		КонецЕсли; 
	Иначе
		ПоказатьПредупреждение(, "Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазрезыУчета(Команда) Экспорт
	
	ЗаполнитьРазрезыУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБюджетныйКонтроль(Команда) Экспорт
	
	ОбновитьДанныеКонтроля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельСогласования(Команда) Экспорт
	
	ОбновитьДанныеСогласования();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда) Экспорт
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма.Форма", ПараметрыФормы, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьНаМаршрут(Команда) Экспорт
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перед постановкой на маршрут необходимо записать документ!'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьПостановкуНаМаршрут();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента 			= Объект.Дата;
	ТекущийДокументОснование 		= Объект.ДокументОснование;
	ТекущаяОрганизация				= Объект.Организация;
	ТекущееСтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
	ТекущийВидОперации				= Объект.ВидОперации;
	ТекущаяФормаОплаты				= Объект.ФормаОплаты;
	ТекущаяДатаДокумента			= Объект.Дата;
	ТекущийСчетКасса 				= Объект.БанковскийСчетКасса;
	ТекущаяВалютаДокумента			= Объект.ВалютаДокумента;	
	
	ВедетсяУчетПоРасчетнымДокументам 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ВедутсяВзаиморасчетыПоДокументам();
	ВалютаРегламентированногоУчета 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	РаботаСБухгалтерскимиРеквизитами 	= ПравоДоступа("Редактирование",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.БанковскийСчетКасса);
	РаботаСПлановымиРеквизитами 		= ПравоДоступа("Редактирование",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.ФинансовыйПоказатель);

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			ФинансовыйПоказатель 		= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойФинансовыйПоказательЗаявокНаРасход");
			ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
			ЕстьРасчетыПоКредитам     	= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
			// Заполнить реквизит Получатель значением по умолчанию.
			ЗаполнитьПолучателя();
			Параметр = "ФормаОплатыЗаявок";
			Объект.ФормаОплаты = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(),Параметр);
		Иначе
			ЕстьРасчетыСКонтрагентами 	= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
			ЕстьРасчетыПоКредитам     	= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
		КонецЕсли;
		//Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	Иначе
		ЕстьРасчетыСКонтрагентами		= ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
		ЕстьРасчетыПоКредитам			= ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
		ОбновлениеСписковВедомостей();
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	// Формируем список исключений
	СписокИсключения = Новый СписокЗначений;
	
	Если НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда				
		СписокИсключения.Добавить(Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаСтруктурномуПодразделению);				
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();

	Если Объект.Ссылка.Пустая() И Не( 
		Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты
		ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов
		ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений
		ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам
			ИЛИ Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств) Тогда
		УстановитьТипПолучатель();
	КонецЕсли;

	Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Список = 1;
	Иначе
		Список = 0;
	КонецЕсли;	
	
	// Установить автоотметку незаполненного для сделки
	УстановитьАвтоотметку();
	
	ОткрыватьНастройкуДвижений 	= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ПоказыватьДвиженияПриПроведении");	
	
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтаФорма,,"БюджетныеПараметры",Ложь);
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	ЗаполнитьСписокРазрезовУчета();
	
	УстановитьВидимостьГруппыСогласования();
	
	Если Элементы.ГруппаСогласование.Видимость Тогда
		ОбновитьДанныеСогласования();
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
	УстановитьВидимостьЭлементов();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПереводНаДругойСчет")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
        Элементы.ФормаОплаты.ТолькоПросмотр = Истина;
	Иначе
        Элементы.ФормаОплаты.ТолькоПросмотр = Ложь;
	КонецЕсли;
	 Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")
	    ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам")
	    ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
	    ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
        УстановитьСвойствоЭлемента(Элементы,"УказыватьВедомости","Видимость",Истина);
	Иначе
        УстановитьСвойствоЭлемента(Элементы,"УказыватьВедомости","ТолькоПросмотр",Ложь);
	КонецЕсли;
	Элементы.ГруппаДополнительноПравая.Видимость = Истина;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику") Тогда
		Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаВыдачаПодотчетнику;
		Элементы.Получатель.Видимость = Объект.ФормаОплаты=ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Наличные");
		Элементы.ПеречислениеВПодотчет.ПодчиненныеЭлементы.ПеречислениеВПодотчетФизЛицо.Видимость = НЕ (Объект.ФормаОплаты=ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Наличные"));
		Элементы.ГруппаДополнительноПравая.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПереводНаДругойСчет") Тогда
		Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаПеревод;
		Элементы.ГруппаДополнительноПравая.Видимость = Ложь;
	ИначеЕсли Форма.ЕстьРасчетыСКонтрагентами Тогда
		Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаРасчеты;
		Если Форма.Список = 1 Тогда
			Элементы.ПанельПлатежи.ТекущаяСтраница=Элементы.ПанельПлатежи.ПодчиненныеЭлементы.ПлатежПоНесколькимСделкам;
		Иначе
			Элементы.ПанельПлатежи.ТекущаяСтраница=Элементы.ПанельПлатежи.ПодчиненныеЭлементы.ПлатежПоОднойСделке;
		КонецЕсли;
		Элементы.Сделка.Видимость = Истина;
		Элементы.Список.Видимость = Истина;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами") Тогда
			Элементы.Сделка.Видимость = Ложь;
		Иначе
			Элементы.Сделка.Видимость = Форма.ВедетсяУчетПоРасчетнымДокументам 
				И (ПолучитьЗначениеРеквизита(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента, "ВедениеВзаиморасчетов") = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам"));
		КонецЕсли;
	ИначеЕсли Форма.ЕстьРасчетыПоКредитам Тогда
		Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаРасчеты;
		Элементы.ПанельПлатежи.ТекущаяСтраница=Элементы.ПанельПлатежи.ПодчиненныеЭлементы.ПлатежПоОднойСделке;
		Элементы.Сделка.Видимость = Ложь;
		Элементы.Список.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками") Тогда
		Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаКредитыИЗаймыРаботников;
		Элементы.ГруппаДополнительноПравая.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств") Тогда
			Элементы.УказыватьВедомости.Видимость = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам");
			Элементы.ГруппаПараметрыПлатежа.ТекущаяСтраница=Элементы.ГруппаПараметрыПлатежа.ПодчиненныеЭлементы.ГруппаПлатежаПрочее;
			УстановитьСвойствоЭлемента(Элементы,"ГруппаДополнительноПравая","Видимость",Ложь);
			УстановитьСвойствоЭлемента(Элементы,"ЦФОПрочее","Видимость",НЕ Объект.УказыватьВедомости);
			УстановитьСвойствоЭлемента(Элементы,"ПроектПрочее","Видимость",НЕ (Объект.УказыватьВедомости И Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")));
			Элементы.СуммаПлатежаПрочие.Доступность = НЕ Объект.УказыватьВедомости;
			УстановитьСвойствоЭлемента(Элементы,"СтатьяДвиженияДенежныхСредствПрочее","Видимость",НЕ (Объект.УказыватьВедомости И Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")));
			Элементы.ВидНалога.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты"));
			Элементы.Банк.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") И Объект.ФормаОплаты=ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные"));
			Элементы.КонтрагентПрочие.Видимость = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") ИЛИ Объект.ФормаОплаты<>ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Наличные"));
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов") Тогда
				Элементы.КонтрагентПрочие.Заголовок = "ГЦВП";
			ИначеЕсли Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда	
				Элементы.КонтрагентПрочие.Заголовок = "ГФСС";
			Иначе
				Элементы.КонтрагентПрочие.Заголовок = "Получатель";
			КонецЕсли;
		  Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")
		    	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам")
		    	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
		    	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
				Элементы.СтраницыВедомости.Видимость = Объект.УказыватьВедомости;
				Если Объект.УказыватьВедомости Тогда
					Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") Тогда
						Элементы.СтраницыВедомости.ТекущаяСтраница = Элементы.СтраницыВедомости.ПодчиненныеЭлементы["СтраницаПеречислениеЗаработнойПлаты"+ВидСтраницыПоДоступу("ЗарплатаКВыплатеОрганизаций")];
					ИначеЕсли  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам") Тогда
						Элементы.СтраницыВедомости.ТекущаяСтраница = Элементы.СтраницыВедомости.ПодчиненныеЭлементы["СтраницаПеречислениеПоИсполнительнымЛистам"+ВидСтраницыПоДоступу("ИЛПеречислениеПолучателям")];
					ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов") Тогда
						Элементы.СтраницыВедомости.ТекущаяСтраница = Элементы.СтраницыВедомости.ПодчиненныеЭлементы["СтраницаПеречислениеПенсионныхВзносов"+ВидСтраницыПоДоступу("ОПВПеречислениеВФонды")];
					ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
						Элементы.СтраницыВедомости.ТекущаяСтраница = Элементы.СтраницыВедомости.ПодчиненныеЭлементы["СтраницаПеречислениеСоциальныхОтчислений"+ВидСтраницыПоДоступу("СОПеречислениеВФонды")];
					КонецЕсли;
				КонецЕсли;
			Иначе
				Элементы.СтраницыВедомости.Видимость = Ложь;
			КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.БанковскийСчетКасса = Неопределено И НЕ Объект.БанковскийСчетКасса.Пустая() Тогда
		Элементы.ВалютаДокумента.Доступность = Ложь;
	Иначе
	  Если ЭтоОперацияВРегламентированнойВалюте(Форма.ТекущийВидОперации) Тогда
	  	 Элементы.ВалютаДокумента.Доступность = Ложь;
	  Иначе
	  	 Элементы.ВалютаДокумента.Доступность = Истина;
	  КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьКнопкиЗаполнитьИПровести(Форма);
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		
		УстановитьСвойствоЭлемента(Элементы,"КурсДокумента","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"БанковскийСчетКасса","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"ВключатьВПлатежныйКалендарь","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"СтраницаРезервированиеИРазмещение","Видимость",Ложь,Элементы.Страницы.ПодчиненныеЭлементы);
		УстановитьСвойствоЭлемента(Элементы,"ГруппаРезервированиеИРазмещение","Видимость",Ложь);

		УстановитьСвойствоЭлемента(Элементы,"РасшифровкаПлатежаСуммаПлатежа","Доступность",Ложь,Элементы.РасшифровкаПлатежа.ПодчиненныеЭлементы);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежа","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаПодотчет","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаЗаймы","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаПрочие","Доступность",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"ПеречислениеВПодотчетСуммаПлатежа","Доступность",Ложь,Элементы.ПеречислениеВПодотчет.ПодчиненныеЭлементы);
		
	Иначе
		
		УстановитьСвойствоЭлемента(Элементы,"КурсДокумента","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"БанковскийСчетКасса","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"ВключатьВПлатежныйКалендарь","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"СтраницаРезервированиеИРазмещение","Видимость",Истина,Элементы.Страницы.ПодчиненныеЭлементы);
 		УстановитьСвойствоЭлемента(Элементы,"ГруппаРезервированиеИРазмещение","Видимость", ПравоПросмотраТЧРазмещениеЗаявки());

		УстановитьСвойствоЭлемента(Элементы,"РасшифровкаПлатежаСуммаПлатежа","Доступность",Истина,Элементы.РасшифровкаПлатежа.ПодчиненныеЭлементы);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежа","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаПодотчет","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаЗаймы","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"СуммаПлатежаПрочие","Доступность",Истина);
		УстановитьСвойствоЭлемента(Элементы,"ПеречислениеВПодотчетСуммаПлатежа","Доступность",Истина,Элементы.ПеречислениеВПодотчет.ПодчиненныеЭлементы);
		
	КонецЕсли;
	
	Если НЕ (Форма.РаботаСБухгалтерскимиРеквизитами ИЛИ Форма.РаботаСПлановымиРеквизитами) Тогда
		
		УстановитьСвойствоЭлемента(Элементы,"КурсДокумента","Видимость",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"КурсВзаиморасчетов","Видимость",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"СуммаВзаиморасчетов","Видимость",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"РасшифровкаПлатежаВалютаВзаиморасчетов","Видимость",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"РасшифровкаПлатежаКратностьВзаиморасчетов","Видимость",Ложь);
		УстановитьСвойствоЭлемента(Элементы,"РасшифровкаПлатежаСуммаВзаиморасчетов","Видимость",Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	Элементы.ГруппаПереключателейСтраницФормы.ПодчиненныеЭлементы.ГруппаБюджетныйКонтроль.Видимость = Элементы.ГруппаСогласование.Видимость ИЛИ ПравоДоступа("Просмотр",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.ФинансовыйПоказатель);
	Элементы.ГруппаПереключателейСтраницФормы.ПодчиненныеЭлементы.ГруппаРезервированиеИРазмещение.Видимость = ПравоДоступа("Просмотр",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.ТабличныеЧасти.РазмещениеЗаявки);
	Элементы.ПанельБюджетныйКонтроль.ПодчиненныеЭлементы.БюджетныйКонтроль.Видимость = ПравоДоступа("Просмотр",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.ФинансовыйПоказатель);
	Элементы.СтруктурноеПодразделениеОрганизация.Доступность = ПравоДоступа("Редактирование",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.Организация);
	Элементы.ГруппаПлановыеРеквизиты.Видимость = ПравоДоступа("Просмотр",Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.ФинансовыйПоказатель);
	
	Для Каждого РеквизитФормы Из ПолучитьРеквизиты() Цикл
		Если Найти(РеквизитФормы.Имя,"Надпись") <> 0 Тогда
			ЭтаФорма[РеквизитФормы.Имя] = РеквизитФормы.Заголовок;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
&НаКлиенте
Процедура УстановитьФокус()
	
	Если ЭтаФорма.Элементы.РасшифровкаПлатежа.ТекущиеДанные = Неопределено Тогда
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьАвтоотметку()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	Автоотметка = ПолучитьОтметкуНезаполненногоДляСделки(СтрокаПлатеж);
	
	Если Элементы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		Элементы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;
	
	Если Элементы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		Элементы.Сделка.ОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыСогласования()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка
		|ПОМЕСТИТЬ Виды
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
		|	И НЕ фин_ВидыДокументов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усд_АктуальныеМаршрутыСогласованияДокументов.Маршрут
		|ИЗ
		|	РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК усд_АктуальныеМаршрутыСогласованияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Виды КАК Виды
		|		ПО усд_АктуальныеМаршрутыСогласованияДокументов.ВидДокументов = Виды.Ссылка";

	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", "ден_ЗаявкаНаРасходованиеСредств");

	Результат = Запрос.Выполнить();

	ИспользоватьПодсистемуЭлектронногоДОО = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьПодсистемуЭлектронногоДокументооборота");
	
	Элементы.ГруппаСогласование.Видимость = (ИспользоватьПодсистемуЭлектронногоДОО И НЕ Результат.Пустой());
	
КонецПроцедуры

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("РазмещениеЗаявкиЗаполнитьРезервирование") <> Неопределено Тогда
		Элементы.РазмещениеЗаявкиЗаполнитьРезервирование.Доступность = 
		НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()) И (Объект.АвтоРезервированиеПоЗаявке ИЛИ Объект.АвтоРазмещениеПоЗаявке);
	КонецЕсли;
		
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Номер = "";
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
			СтрокаРасшифровка.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	ТекущееСтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
	ТекущаяОрганизация = Объект.Организация;

	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
    ТекущийВидОперации = ВидОперации;
	
	Объект.РасшифровкаПлатежа.Очистить();
	Объект.ПеречислениеВПодотчет.Очистить();
	Объект.ПеречислениеЗаработнойПлаты.Очистить();
	Объект.ПеречислениеПенсионныхВзносов.Очистить();
	Объект.ПеречислениеПоИсполнительнымЛистам.Очистить();
	Объект.ПеречислениеСоциальныхОтчислений.Очистить();
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	ИдентификаторСтрокаПлатеж = СтрокаПлатеж.ПолучитьИдентификатор();
	Если ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику И Объект.ВалютаВзаиморасчетовПодотчетника.Пустая() Тогда
		Объект.ВалютаВзаиморасчетовПодотчетника = Объект.ВалютаДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = 1;
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	Список = 0;
	Если ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты
		ИЛИ ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов
		ИЛИ ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений Тогда
		Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		ФормаОплатыПриИзмененииНаСервере();
	КонецЕсли;
	Если ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
		Объект.ВидНалога = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты;
		Объект.Контрагент = Объект.ВидНалога.Контрагент;
	КонецЕсли;
	
	Если ЭтоОперацияВРегламентированнойВалюте(ВидОперации) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.РазмещениеЗаявки.Очистить();	
		
		ДатаКурса = ?(Объект.ДатаРасхода = '00010101', Объект.Дата, Объект.ДатаРасхода);
		СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
		Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
		Если ЗначениеЗаполнено(Объект.БанковскийСчетКасса) И Объект.БанковскийСчетКасса.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета Тогда
			Объект.БанковскийСчетКасса = Неопределено;
		КонецЕсли;
		РассчитатьСуммуПлатежаТаблицаНаСервере();
		
		ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
		
		ТекстСообщения = "Валюта документа изменена, т.к. выбранная операция может проводиться только в " + ВалютаРегламентированногоУчета;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВалютаДокумента", "Объект");
	КонецЕсли;
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(ТекущийВидОперации), Объект.Ссылка, ЭтаФорма);
	
	ОпределитьНаличиеРасчетов();
	
	//Надо определить тип поля "Получатель"
	УстановитьТипПолучатель();	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ФормаОплатыПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПравоДоступа("Редактирование", Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.БанковскийСчетКасса) Тогда
		Если Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
			Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнойБанковскийСчет;
		ИначеЕсли Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные Тогда
			Элементы.БанковскийСчетКасса.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
			Объект.БанковскийСчетКасса = Объект.Организация.ОсновнаяКасса;
	   	Иначе
			Объект.БанковскийСчетКасса = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда
		Если Объект.УказыватьВедомости Тогда
			СтрокиУдалить = Новый Массив;
			Для Каждого СтрокаЗП Из Объект.ПеречислениеЗаработнойПлаты Цикл
				Если (Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные И СтрокаЗП.Ведомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 
					ИЛИ (Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные И СтрокаЗП.Ведомость.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк) Тогда
					СтрокиУдалить.Добавить(СтрокаЗП);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				Объект.ПеречислениеЗаработнойПлаты.Удалить(СтрокаУдалить);
			КонецЦикла;
			РассчитатьСуммуКОплатеПоВедомостям();
			ОбновлениеСписковВедомостей(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам Тогда
		Если Объект.УказыватьВедомости Тогда
			СтрокиУдалить = Новый Массив;
			Для Каждого СтрокаЗП Из Объект.ПеречислениеПоИсполнительнымЛистам Цикл
				Если (Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Безналичные И СтрокаЗП.Документ.СпособПеречисления = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу) 
					ИЛИ (Объект.ФормаОплаты = Перечисления.ден_ВидыДенежныхСредств.Наличные И СтрокаЗП.Документ.СпособПеречисления <> Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезКассу) Тогда
					СтрокиУдалить.Добавить(СтрокаЗП);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
				Объект.ПеречислениеПоИсполнительнымЛистам.Удалить(СтрокаУдалить);
			КонецЦикла;
			РассчитатьСуммуКОплатеПоВедомостям();
			ОбновлениеСписковВедомостей(Истина);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		Для Каждого СтрокаПодотчет Из Объект.ПеречислениеВПодотчет Цикл
			СтрокаПодотчет.ФизЛицо = Объект.Получатель;
		КонецЦикла;
	КонецЕсли;
	
	Объект.РазмещениеЗаявки.Очистить();
	ТекущаяФормаОплаты = Объект.ФормаОплаты;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ДатаРасхода) И НЕ Объект.ВалютаДокумента.Пустая() Тогда
		УстановитьКурсДокумента(Объект.Дата);
		РассчитатьСуммуПлатежаТаблицаНаСервере();
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаРасходаПриИзмененииНаСервере()
    
    Если ЗначениеЗаполнено(Объект.ДатаРасхода) ИЛИ НЕ Объект.ВалютаДокумента.Пустая() Тогда
        УстановитьКурсДокумента(Объект.ДатаРасхода);
        РассчитатьСуммуПлатежаТаблицаНаСервере();
	КонецЕсли;
	
    Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаБюджетныйКонтроль 
        И Элементы.ПанельБюджетныйКонтроль.ТекущаяСтраница = Элементы.БюджетныйКонтроль Тогда
        ОбновитьДанныеКонтроля();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере()
    
    Если Объект.ВалютаДокумента.Пустая() Тогда
        
        ПриОчисткеВалютыДокумента();
        
    ИначеЕсли НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента Тогда
		Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику
			И (Объект.ВалютаВзаиморасчетовПодотчетника.Пустая() ИЛИ Объект.ВалютаВзаиморасчетовПодотчетника = ТекущаяВалютаДокумента) Тогда
            СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
            Объект.ВалютаВзаиморасчетовПодотчетника = Объект.ВалютаДокумента;
            СтрокаПлатеж.КурсВзаиморасчетов = 1;
            СтрокаПлатеж.КратностьВзаиморасчетов = 1;
        КонецЕсли;
        
        УдалитьРазмещение();	
        
        СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента,?(Объект.ДатаРасхода='00010101',Объект.Дата,Объект.ДатаРасхода));
        
        Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
        Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
        РассчитатьСуммуПлатежаТаблицаНаСервере();
        
		УправлениеФормой(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКассаПриИзмененииНаСервере()
    
    Если (НЕ Объект.БанковскийСчетКасса=Неопределено) И (НЕ Объект.БанковскийСчетКасса.Пустая()) Тогда
        ВалютаДокумента = Объект.ВалютаДокумента;
        ден_ПроцедурыКазначейства.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента, Объект.ДатаРасхода, Объект.СуммаДокумента, ВалютаКассыСчета(Объект.БанковскийСчетКасса));
        Если ПравоИзмененияВалюты() Тогда
            Объект.ВалютаДокумента = ВалютаДокумента;
        КонецЕсли;
        Элементы.ВалютаДокумента.Доступность=Ложь;
        
        УдалитьРазмещение();
        СуммаДокументаПриИзменении();
        
        Если Объект.Организация.Пустая() Тогда
            
            Объект.Организация = ВладелецСчетаКассы(Объект.БанковскийСчетКасса);
            
        КонецЕсли;
    Иначе
        Элементы.ВалютаДокумента.Доступность = Истина;
    КонецЕсли;
	
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
    РассчитатьСуммуПлатежаТаблицаНаСервере();
	
    УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	ВосстанавливатьРеквизиты 	= (Объект.РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС 			= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;	
	Проект = СтрокаПлатеж.Проект;
    Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	ИдентификаторСтрокаПлатеж = СтрокаПлатеж.ПолучитьИдентификатор();
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	ОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Объект.Контрагент.ОсновнойДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;		
	ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Объект.Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
			Объект.Организация = ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
			  ИЛИ ОсновнойДоговорКонтрагента.Организация = Объект.Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
		КонецЕсли;		
	КонецЕсли;
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;		
		СтрокаПлатеж.Проект = Проект;
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
   
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	// Надо поменять валюту и курс взаиморасчетов
	ТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетовНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УстановитьАвтоотметку();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении статьи движения денежных средств
//
&НаСервере
Процедура ПриИзмененииСтатьиДДС(Идентификатор,ПолеДанных)
	
	Строка = Объект[ПолеДанных].НайтиПоИдентификатору(Идентификатор);
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения = фин_УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, Объект.ДатаРасхода);
		
		Если НЕ ВидРаспределения = Неопределено Тогда
			Строка.Проект = ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

&НаСервере
Процедура ДокументЗаймаПриИзмененииНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(Объект.РасчетныйДокумент) Тогда
		Объект.Получатель                       = Объект.РасчетныйДокумент.ФизЛицо;
		Объект.ВалютаВзаиморасчетовПодотчетника = Объект.РасчетныйДокумент.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     		= фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаВзаиморасчетовПодотчетника, Объект.ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов         = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов    = СтруктураКурсаВзаиморасчетов.Кратность; 
		СтрокаПлатеж.СуммаВзаиморасчетов		= Объект.РасчетныйДокумент.СуммаЗайма;
		Объект.СуммаДокумента 					= фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
																											Объект.ВалютаВзаиморасчетовПодотчетника, 
																											Объект.ВалютаДокумента,
																											СтрокаПлатеж.КурсВзаиморасчетов, 
																											Объект.КурсДокумента,
																											СтрокаПлатеж.КратностьВзаиморасчетов, 
																											Объект.КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа				= Объект.СуммаДокумента;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Контрагент = Объект.Банк.Контрагент;
	Если Объект.УказыватьВедомости Тогда
		СтрокиУдалить = Новый Массив;
		Для Каждого СтрокаВедомость Из Объект.ПеречислениеЗаработнойПлаты Цикл
			Если СтрокаВедомость.Ведомость.Банк <> Объект.Банк Тогда
				СтрокиУдалить.Добавить(СтрокаВедомость);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.ПеречислениеЗаработнойПлаты.Удалить(СтрокаУдалить);
		КонецЦикла;
		РассчитатьСуммуПоВедомостямНаСервере();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновлениеСписковВедомостей(Истина);
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ЗначениеРеквизита)
											
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Ссылка, ЗначениеРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура НажатиеПоЭлементуНавигации(Элемент)
	
	общ_ОбщегоНазначенияКлиент.НажатиеНаПанельЗакладок(Элементы, Элемент, Элементы.ГруппаПереключателейСтраницФормы);	
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
&НаСервере
Процедура ЗаполнитьПолучателя()

	ВремПолучатель = Неопределено;
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойПоставщик");

	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнойПокупатель");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Объект.Получатель = ВремПолучатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ВремКонтрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолучателя()

&НаСервере
Процедура ОбновлениеСписковВедомостей(ИзДанныхФормы = Ложь)
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП И НЕ ПравоДоступа("Просмотр",Метаданные.Документы.ЗарплатаКВыплатеОрганизаций) Тогда
		Таблица = ДанныеФормыВЗначение(ТаблицаПеречислениеЗаработнойПлаты,Тип("ТаблицаЗначений"));
		общ_ПривилегированныеПроцедуры.ЗагрузитьТабличнуюЧастьВТаблицуЗначений(Таблица,Объект.ПеречислениеЗаработнойПлаты.Выгрузить());
		ЗначениеВДанныеФормы(Таблица,ТаблицаПеречислениеЗаработнойПлаты);
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов И НЕ ПравоДоступа("Просмотр",Метаданные.Документы.ОПВПеречислениеВФонды) Тогда
		Таблица = ДанныеФормыВЗначение(ТаблицаПеречислениеПенсионныхВзносов,Тип("ТаблицаЗначений"));
		общ_ПривилегированныеПроцедуры.ЗагрузитьТабличнуюЧастьВТаблицуЗначений(Таблица,Объект.ПеречислениеПенсионныхВзносов.Выгрузить());
		ЗначениеВДанныеФормы(Таблица,ТаблицаПеречислениеПенсионныхВзносов);
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений И НЕ ПравоДоступа("Просмотр",Метаданные.Документы.СОПеречислениеВФонды) Тогда
		Таблица = ДанныеФормыВЗначение(ТаблицаПеречислениеСоциальныхОтчислений,Тип("ТаблицаЗначений"));
		общ_ПривилегированныеПроцедуры.ЗагрузитьТабличнуюЧастьВТаблицуЗначений(Таблица,Объект.ПеречислениеСоциальныхОтчислений.Выгрузить());
		ЗначениеВДанныеФормы(Таблица,ТаблицаПеречислениеСоциальныхОтчислений);
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам И НЕ ПравоДоступа("Просмотр",Метаданные.Документы.ИЛПеречислениеПолучателям) Тогда
		Таблица = ДанныеФормыВЗначение(ТаблицаПеречислениеПоИсполнительнымЛистам,Тип("ТаблицаЗначений"));
		общ_ПривилегированныеПроцедуры.ЗагрузитьТабличнуюЧастьВТаблицуЗначений(Таблица,Объект.ПеречислениеПоИсполнительнымЛистам.Выгрузить());
		ЗначениеВДанныеФормы(Таблица,ТаблицаПеречислениеПоИсполнительнымЛистам);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает тип поля "Получатель" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьТипПолучатель()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента = "";

	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ИмяСправочника = "ФизическиеЛица";
	ИначеЕсли Объект.ВидОперации=Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ИмяСправочника = "ФизическиеЛица";
		ИмяРасчетногоДокумента="ДоговорЗаймаСРаботником";
	КонецЕсли;
	
	Если ТипЗнч(Объект.Получатель) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
		Объект.Получатель = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяРасчетногоДокумента) И ТипЗнч(Объект.РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
		Объект.РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // УстановитьТипПолучатель()

// Определение необходимости устанавливать отметку незаполненного для сделки
//
// Параметры
//  ТекущаяСтрокаПлатежа  – СтрокаТабличнойЧасти – Строка табличной части, для которой определяется
//                                                 необходимость отметки незаполненного значения
//
// Возвращаемое значение:
//   Булево   – Истина = отмечать, Ложь = не отмечать
//
&НаСервере
Функция ПолучитьОтметкуНезаполненногоДляСделки(ТекущаяСтрокаПлатежа)
	
	Отметка = Ложь;
	ДоговорКонтрагента = ТекущаяСтрокаПлатежа.ДоговорКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Отметка = НЕ ЗначениеЗаполнено(ТекущаяСтрокаПлатежа.Сделка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отметка;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокРазрезовУчета()
	
	СписокВыбораРазрезыУчета.Очистить();
	
	Для Каждого Разрез Из Объект.ФинансовыйПоказатель.РазрезыУчета Цикл
		СписокВыбораРазрезыУчета.Добавить(Разрез.Измерение);
	КонецЦикла;
	
	Для Каждого Разрез Из СписокВыбораРазрезыУчета Цикл
		Разрез.Представление = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Разрез.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСогласования()
	
	КомментарийПоМаршруту 	= "Документу не назначен маршрут";
	СостояниеНаМаршруте 				= Справочники.усд_СостоянияДокументов.ПустаяСсылка();
	Маршрут 				= Справочники.усд_МаршрутыДвиженияДокументов.ПустаяСсылка();
	Этап 					= Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка();
	Приоритет				= Перечисления.усд_ПриоритетыРассмотренияДокументов.ПустаяСсылка();
	Статус					= Перечисления.усд_СтатусыДокументовНаЭтапах.ПустаяСсылка();
	Исполнитель 			= "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.фин_ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И (НЕ ВидыДокументов.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяДокумента());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ВидДокументов = Выборка.Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НазначенияМаршрутов.Маршрут
		|ИЗ
		|	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
		|ГДЕ
		|	НазначенияМаршрутов.Документ = &Документ";
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Маршрут = Выборка.Маршрут;
			КомментарийПоМаршруту = "Документ ожидает подписей на маршруте согласования и утверждения";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Состояние,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет
			               |ИЗ
			               |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
			Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Этап = Выборка.Этап;
				СостояниеНаМаршруте = Выборка.Состояние;
				Приоритет = Выборка.Приоритет;
				Статус = Выборка.Статус;
				Исполнитель = Выборка.ОтветственноеЛицо;
				Если Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
					КомментарийПоМаршруту = "Документ отклонен по причине: " + Выборка.ПричинаВозврата;
				ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
					КомментарийПоМаршруту = "Документ согласован и утвержден";
				ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
					КомментарийПоМаршруту = "Документ возвращен по причине: " + Выборка.ПричинаВозврата;
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет
				               |ИЗ
				               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
				Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					Этап = Выборка.Этап;
					Приоритет = Выборка.Приоритет;
					Исполнитель = Выборка.ОтветственноеЛицо;
					Статус = Выборка.Статус;
					Если Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
						КомментарийПоМаршруту = "Документ отклонен по причине: " + Выборка.ПричинаВозврата;
					ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
						КомментарийПоМаршруту = "Документ согласован и утвержден";
					ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
						КомментарийПоМаршруту = "Документ возвращен по причине: " + Выборка.ПричинаВозврата;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Элементы.ПоставитьНаМаршрут.Видимость=Ложь;
			Элементы.Подписать.Видимость=Истина;
		Иначе
			РежимПостановкиДокументовНаМаршрут = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РежимПостановкиДокументовНаМаршрут");
			Элементы.ПоставитьНаМаршрут.Видимость = (РежимПостановкиДокументовНаМаршрут <> Перечисления.усд_РежимыПостановкиДокументовНаМаршрут.Автоматический) И НЕ ТолькоПросмотр;
			Элементы.Подписать.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	Если Исполнитель <> "" Тогда
		КомментарийПоМаршруту = КомментарийПоМаршруту + "
		|Исполнитель: " + Исполнитель;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДокумента()
	
	Возврат  "ден_ЗаявкаНаРасходованиеСредств"

КонецФункции

&НаСервереБезКонтекста
Функция ВидСтраницыПоДоступу(ИмяДокумента)
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы[ИмяДокумента]) Тогда
		Возврат "";	
	Иначе
		Возврат "Список";	
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоЭлемента(ЭлементыФормы, ИмяЭлемента, СвойствоЭлемента, ЗначениеСвойства, КоллекцияЭлементов = Неопределено)
	
	КоллекцияДляпоиска = ?(КоллекцияЭлементов = Неопределено, ЭлементыФормы, КоллекцияЭлементов);
	
	Если КоллекцияДляпоиска.Найти(ИмяЭлемента) <> Неопределено Тогда
		КоллекцияДляпоиска[ИмяЭлемента][СвойствоЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоОперацияВРегламентированнойВалюте(Знач ВидОперации)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНДССИзмененнымСрокомУплаты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
		 Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПравоПросмотраТЧРазмещениеЗаявки()

	Возврат ПравоДоступа("Просмотр", Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.ТабличныеЧасти.РазмещениеЗаявки);	

КонецФункции

&НаСервере
Процедура ОпределитьНаличиеРасчетов()
	
	ЕстьРасчетыСКонтрагентами = ден_ПроцедурыКазначейства.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации);
	ЕстьРасчетыПоКредитам = ден_ПроцедурыКазначейства.ЕстьРасчетыПоКредитам(Объект.ВидОперации);
	
КонецПроцедуры

// Процедура рассчитывает сумму платежа таблицы.
//
&НаСервере
Процедура РассчитатьСуммуПлатежаТаблицаНаСервере()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		
		Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Строка.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Иначе
			Строка.СуммаПлатежа = Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		Строка.СуммаПлатежа = Строка.СуммаВзаиморасчетов;
	
		ИначеЕсли (Объект.КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, 
																							ВалютаВзаиморасчетов,
																							Объект.ВалютаДокумента,
																							Строка.КурсВзаиморасчетов,
																							Объект.КурсДокумента,
																							Строка.КратностьВзаиморасчетов,
																							Объект.КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	
КонецПроцедуры // РассчитатьСуммуПлатежаТаблица()

&НаСервере
Процедура РассчитатьСуммуКОплатеПоВедомостям()

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКонтроля()
	
	Сценарий = Объект.Сценарий;
	ФинансовыйПоказатель = Объект.ФинансовыйПоказатель;
	Если Сценарий.Пустая() Или ФинансовыйПоказатель.Пустая() Или Объект.ДатаРасхода = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольПоЦФО 			= Ложь;
	КонтрольПоПроектам 		= Ложь;
	КонтрольПоСДДС 			= Ложь;
	НесколькоЦФО			= Ложь;
	НесколькоПроектов		= Ложь;
	НесколькоСДДС			= Ложь;
	ПоНесколькимРазрезам 	= Ложь;
	
	// определим разрезы контроля
	РазрезСтатьяДДС = Документы.ден_ЗаявкаНаРасходованиеСредств.РазрезСтатьяДДС(Объект);
	Если ЗначениеЗаполнено(РазрезСтатьяДДС) Тогда
		СтрокиСДДС = Объект.БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",РазрезСтатьяДДС));
		Если СтрокиСДДС.Количество() > 0 Тогда
			КонтрольПоСДДС = Истина;
			Если СтрокиСДДС[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента 
				И Документы.ден_ЗаявкаНаРасходованиеСредств.ПоНесколькимСтатьямДДС(Объект) Тогда
				НесколькоСДДС = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиПроект = Объект.БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
	Если СтрокиПроект.Количество() > 0 Тогда
		КонтрольПоПроектам = Истина;
		Если СтрокиПроект[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента 
			И Документы.ден_ЗаявкаНаРасходованиеСредств.ПоНесколькимПроектам(Объект) Тогда
			НесколькоПроектов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЦФО = Объект.БюджетныеПараметры.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
	Если СтрокиЦФО.Количество() > 0 Тогда
		КонтрольПоЦФО = Истина;
		Если СтрокиЦФО[0].СпособУказанияЗначения = Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента 
			И Документы.ден_ЗаявкаНаРасходованиеСредств.ПоНесколькимПодразделениям(Объект) Тогда
			НесколькоЦФО = Истина;
		КонецЕсли;
	КонецЕсли;
	ПоНесколькимРазрезам = НесколькоЦФО ИЛИ НесколькоПроектов ИЛИ НесколькоСДДС;
	
	// видимость колонок контроля
	
	Элементы.ДеревоБюджетныйКонтроль.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольАналитика.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольПроект.Видимость 			= КонтрольПоПроектам И НесколькоПроектов;
	Элементы.ДеревоБюджетныйКонтроль.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольАналитика.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольПодразделение.Видимость 	= КонтрольПоЦФО И НесколькоЦФО;
	Элементы.ДеревоБюджетныйКонтроль.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольАналитика.ПодчиненныеЭлементы.ДеревоБюджетныйКонтрольСтатьяДДС.Видимость 		= КонтрольПоСДДС И НесколькоСДДС;
	
	// подготовка данных для расчета
	ТаблицаБюджетныйКонтроль = ДанныеФормыВЗначение(ДеревоБюджетныйКонтроль, Тип("ДеревоЗначений"));
	ТаблицаАналитики = Документы.ден_ЗаявкаНаРасходованиеСредств.ТаблицаБюджетнойАналитики(Объект);  
	СоответствиеРасшифровка = Новый Соответствие;
	ДанныеШапки = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(РеквизитФормыВЗначение("Объект"));
	
	общ_ПроцедурыМеханизмаЗащиты.ЗаполнитьБюджетныйКонтроль(ТаблицаБюджетныйКонтроль,ТаблицаАналитики,РазрезСтатьяДДС,Объект.БюджетныеПараметры.Выгрузить(),
		Сценарий,ФинансовыйПоказатель,ДанныеШапки,ВалютаУправленческогоУчета,СоответствиеРасшифровка,НесколькоПроектов,НесколькоЦФО,НесколькоСДДС,
		ПоНесколькимРазрезам,КонтрольПоПроектам,КонтрольПоЦФО,КонтрольПоСДДС,АктуальныйМониторинг,Модифицированность);	
		
	ЗначениеВДанныеФормы(ТаблицаБюджетныйКонтроль,ДеревоБюджетныйКонтроль);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(СоответствиеРасшифровка, УникальныйИдентификатор);
	
	Обновлено = ТекущаяДата();
	
КонецПроцедуры

// Рассчитывает новый курс документа при смене даты
//
&НаСервере
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ДатаКурса);
	Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

&НаСервереБезКонтекста
Функция НесколькоПодотчетников(Знач ПеречислениеВПодотчет)
	
	Таблица = ПеречислениеВПодотчет.Выгрузить();	
	Таблица.Свернуть("ФизЛицо");
	
	Возврат Таблица.Количество() > 1;
	
КонецФункции

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
&НаСервере
Процедура ПриОчисткеВалютыДокумента()
	
	Объект.СуммаДокумента 		= 0;
	Объект.КурсДокумента 		= 0;
	Объект.КратностьДокумента 	= 0;
	СтараяВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
	
	Для Каждого Платеж Из Объект.РасшифровкаПлатежа Цикл
		Платеж.СуммаПлатежа = 0;
	КонецЦикла;
	
	Объект.БанковскийСчетКасса = Неопределено;
	Объект.ВключатьВПлатежныйКалендарь = Ложь;
	
	УдалитьРазмещение();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриОчисткеВалютыДокумента()

&НаСервере
Процедура УдалитьРазмещение()
	
	Если НЕ РаботаСПлановымиРеквизитами Тогда
		ОчиститьРазмещениеЗаявкиНаСервере();
	Иначе	
		Объект.РазмещениеЗаявки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазмещениеЗаявкиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Объект.РазмещениеЗаявки.Очистить();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВалютаКассыСчета(БанковскийСчетКасса)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(БанковскийСчетКасса, "ВалютаДенежныхСредств");	
	
КонецФункции

&НаСервереБезКонтекста
Функция ВладелецСчетаКассы(СчетКасса)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СчетКасса, "Владелец");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПравоИзмененияВалюты()
	
	Возврат ПравоДоступа("Редактирование", Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Реквизиты.ВалютаДокумента);
	
КонецФункции

&НаСервере
Процедура СуммаДокументаПриИзменении()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);		 
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		РассчитатьКурсВзаиморасчетовНаСервере();
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов=Объект.СуммаДокумента;
		
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		РассчитатьКурсВзаиморасчетовНаСервере();
		
	КонецЕсли;
			 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКурсВзаиморасчетов()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);		 
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 И СтрокаПлатеж.КурсВзаиморасчетов = 0 Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = 1;
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (Объект.КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0 И СтрокаПлатеж.КурсВзаиморасчетов <> 1) Тогда
		Если СтрокаПлатеж.КратностьВзаиморасчетов = 0 Тогда
			СтрокаПлатеж.КратностьВзаиморасчетов = 1;
		КонецЕсли;
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * Объект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / Объект.КратностьДокумента;
	ИначеЕсли Объект.КратностьДокумента <> 0 И СтрокаПлатеж.КурсВзаиморасчетов<>0 Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * Объект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.КурсВзаиморасчетов / Объект.КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКурсВзаиморасчетовНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (Объект.КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * Объект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / Объект.КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
&НаСервере
Процедура РассчитатьСуммуВзаиморасчетовНаСервере()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (Объект.КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  Объект.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  Объект.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками") Тогда
		ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = ВалютаДоговора(СтрокаПлатеж.ДоговорКонтрагента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		Объект.СуммаДокумента = СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	ИначеЕсли (Объект.КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
																							  ВалютаВзаиморасчетов,
																							  Объект.ВалютаДокумента,
											                                                  СтрокаПлатеж.КурсВзаиморасчетов,
																							  Объект.КурсДокумента,
																							  СтрокаПлатеж.КратностьВзаиморасчетов,
																							  Объект.КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВалютаДоговора(Договор)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Договор, "ВалютаВзаиморасчетов");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации)
	
	Возврат ден_ПроцедурыКазначейства.ОпределитьВидДоговораСКонтрагентом(ВидОперации);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ВзаиморасчетыПоДоговоруВЦелом(Договор)
	
	Возврат Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуПодотчетника()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	СтрокаПлатеж.СуммаПлатежа = Объект.ПеречислениеВПодотчет.Итог("СуммаПлатежа");
	РассчитатьСуммуВзаиморасчетовСПодотчетником();
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") 
		И Объект.ПеречислениеВПодотчет.Количество() > 0 Тогда
		Объект.Получатель = Объект.ПеречислениеВПодотчет[0].ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетовСПодотчетником()
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками") Тогда
		ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = ВалютаДоговора(СтрокаПлатеж.ДоговорКонтрагента);
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
		Объект.СуммаДокумента = СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли (Объект.КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = фин_ОбщегоНазначенияСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
																									Объект.ВалютаДокумента,
																									ВалютаВзаиморасчетов,
													                                               	Объект.КурсДокумента,
																									СтрокаПлатеж.КурсВзаиморасчетов,
																									Объект.КратностьДокумента,
																									СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // РассчитатьСуммуПлатежа()

&НаКлиенте
Процедура ПеречислениеВПодотчетПослеУдаления(Элемент)
	
	РассчитатьСуммуПодотчетника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуПодотчетника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВПодотчетСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(Элементы.ПеречислениеВПодотчет.ТекущаяСтрока, "ПеречислениеВПодотчет");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)

	Возврат фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	

КонецФункции // ПолучитьКурсВалюты()

&НаСервереБезКонтекста
Функция КонтрагентПоВидуНалога(ВидНалога)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВидНалога, "Контрагент");
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуПоВедомостям()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП") Тогда
		Сумма = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
	ИначеЕсли  Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам") Тогда
		Сумма = Объект.ПеречислениеПоИсполнительнымЛистам.Итог("СуммаПлатежа");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов") Тогда
		Сумма = Объект.ПеречислениеПенсионныхВзносов.Итог("СуммаКПеречислению");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений") Тогда
		Сумма = Объект.ПеречислениеСоциальныхОтчислений.Итог("СуммаКПеречислению");
	КонецЕсли;
	
    СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	СтрокаПлатеж.СуммаПлатежа = Сумма;
	
	РассчитатьКурсВзаиморасчетов();
	
	Объект.СуммаДокумента=Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуПоВедомостямНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда
		Сумма = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
	ИначеЕсли  Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПоИсполнительнымЛистам Тогда
		Сумма = Объект.ПеречислениеПоИсполнительнымЛистам.Итог("СуммаПлатежа");
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеПенсионныхВзносов Тогда
		Сумма = Объект.ПеречислениеПенсионныхВзносов.Итог("СуммаКПеречислению");
	ИначеЕсли Объект.ВидОперации = Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.ПеречислениеСоциальныхОтчислений Тогда
		Сумма = Объект.ПеречислениеСоциальныхОтчислений.Итог("СуммаКПеречислению");
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокаПлатеж);
	СтрокаПлатеж.СуммаПлатежа = Сумма;
	
	РассчитатьКурсВзаиморасчетовНаСервере();
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВедомость(Ведомость, ФормаОплаты, Банк, СуммаКОплате, Подразделение)
	
	Если Ведомость.СпособВыплаты<>?(ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные,Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк,Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) Тогда
		ТекстСообщения = НСтр("ru = 'Ведомость '" + Строка(Ведомость) + "' предназначена для другого способа выплаты!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	Если ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные И Ведомость.Банк<>Банк Тогда
		ТекстСообщения = НСтр("ru = 'Ведомость '" + Строка(Ведомость) + "' предназначена для выплаты через другой банк!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость",   Ведомость);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизации.Ссылка КАК Ведомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РанееВыплаченныеСуммы.Ведомость
	|			ИЗ
	|				РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы) КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизации.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизации.Ссылка = &Ведомость И
	|	НЕ РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL
	|";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Ведомость '" + Строка(Ведомость) + "' уже оплачена!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	// Определим суммы к выплате
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ведомость", 	Ведомость);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаКВыплате
	|
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|	ПО ЗарплатаКВыплате.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|	   И ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|ГДЕ
	|	ЗарплатаКВыплате.Ссылка = &Ведомость И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";
		
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СуммаКОплате = РезультатЗапроса.СуммаКВыплате;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ведомость.ПодразделениеОрганизации) Тогда
		Подразделение =  фин_БюджетированиеОбщегоНазначения.ПодразделениеПоСоответствию(Ведомость.ПодразделениеОрганизации);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокНеоплаченныхВедомостей(Организация, СтруктурноеПодразделение, СпособВыплаты, Банк)
	
	СписокОтбора = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СпособВыплаты", СпособВыплаты);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",   СтруктурноеПодразделение);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизации.Ссылка КАК Ведомость
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РанееВыплаченныеСуммы.Ведомость
	|			ИЗ
	|				РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы) КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизации.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизации.Организация = &Организация И
	|	ЗарплатаКВыплатеОрганизации.СтруктурноеПодразделение = &СтруктурноеПодразделение И
	|	ЗарплатаКВыплатеОрганизации.СпособВыплаты = &СпособВыплаты И
	|	ВЫБОР КОГДА &СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк) ТОГДА ЗарплатаКВыплатеОрганизации.Банк = &Банк ИНАЧЕ ИСТИНА КОНЕЦ И
	|	РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL
	|";
	
	СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ведомость"));
	
	Возврат СписокОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДляЗаполненияПоВедомостиОПВиСО(Документ)
	
	СуммаДокумента = ?(ТипЗнч(Документ)=Тип("ДокументСсылка.ОПВПеречислениеВФонды"),Документ.ПенсионныеВзносы.Итог("Сумма"),Документ.СоциальныеОтчисления.Итог("Сумма"));
	Подразделение = фин_БюджетированиеОбщегоНазначения.ПодразделениеПоСоответствию(Документ.ПодразделениеОрганизации);
	
	Возврат Новый Структура("СуммаКПеречислению,Подразделение",СуммаДокумента,Подразделение);
	
 КонецФункции

 &НаСервереБезКонтекста
Функция ДанныеДляЗаполненияПоВедомостиИЛ(Документ)
	
	Возврат Новый Структура("СуммаПлатежа,СуммаСборов,СуммаКПеречислению",Документ.ИсполнительныеЛисты.Итог("СуммаПлатежа"),Документ.ИсполнительныеЛисты.Итог("СуммаСборов"),Документ.ИсполнительныеЛисты.Итог("СуммаВзаиморасчетов"));
	
КонецФункции

// Процедура выполняет необходимые действия при выборе Размещения заявки
//
&НаКлиенте
Процедура НачалоВыбораРазмещенияЗаявки(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("ден_ПланируемоеПоступлениеДенежныхСредств", "Планируемое поступление денежных средств");
	
	Если Объект.ФормаОплаты=ПредопределенноеЗначение("Перечисление.ден_ВидыДенежныхСредств.Безналичные") Тогда
		СписокТипов.Добавить("БанковскиеСчета", "Банковские счета");
	Иначе
		СписокТипов.Добавить("Кассы", "Кассы");
	КонецЕсли;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПослеВыбораРазмещенияЗаявки", ЭтотОбъект, ЭлементФормы), 
						  СписокТипов, 
						  ЭлементФормы);
		
КонецПроцедуры // НачалоВыбораРазмещенияЗаявки()

&НаСервере
Процедура ЗаполнитьРезервированиеНаСервере()

	ДанныйОбъект = РеквизитФормыВЗначение("Объект");
	
	Документы.ден_ЗаявкаНаРасходованиеСредств.ВыполнитьЗаполнениеРезервов(ДанныйОбъект);
	
	ЗначениеВРеквизитФормы(ДанныйОбъект, "Объект");
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);

КонецПроцедуры 

&НаСервере
Процедура ФинансовыйПоказательПриИзмененииНаСервере()
    
    СтрокиУдалить = Новый Массив;
	
    Для Каждого СтрокаОбласть Из Объект.БюджетныеПараметры Цикл
        Если НЕ ЗначениеЗаполнено(Объект.ФинансовыйПоказатель) Тогда
            СтрокиУдалить.Добавить(СтрокаОбласть);
        ИначеЕсли Объект.ФинансовыйПоказатель.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",СтрокаОбласть.Измерение)).Количество()=0 Тогда
            СтрокиУдалить.Добавить(СтрокаОбласть);
        КонецЕсли;
	КонецЦикла;
	
    Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
        Объект.БюджетныеПараметры.Удалить(СтрокаУдалить);
	КонецЦикла;
	
    ЗаполнитьСписокРазрезовУчета();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРазрезаУчета(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.БюджетныеПараметры.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные.Измерение.Пустая() Тогда
		ТекущиеДанные.Разрез = "";
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура;
		ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты;
		ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО;
		ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		Возврат;
	ИначеЕсли ТекущиеДанные.Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
		ТекущиеДанные.Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты;
		ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
	|ИЗ
	|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
	|ГДЕ
	|	НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";

	Запрос.УстановитьПараметр("Измерение", ТекущиеДанные.Измерение);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТекущиеДанные.Разрез = ВыборкаДетальныеЗаписи.Разрез;
		ТекущиеДанные.Значение = ТекущиеДанные.Разрез.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
	Иначе
		ТекущиеДанные.Разрез = "";
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипЗначенияРазреза(Разрез)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Разрез, "ТипЗначения"); 	
	
КонецФункции

&НаСервере
Функция ТаблицаРасшифровки(Идентификатор, Валюта)
	
	СоответствиеРасшифровка = ПолучитьИзВременногоХранилища(АдресРасшифровок);
	СписокЗаявок = СоответствиеРасшифровка.Получить(Идентификатор);
	Если СписокЗаявок <> Неопределено И СписокЗаявок.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкиОстатки.ЗаявкаНаРасходование КАК Заявка,
		|	ЗаявкиОстатки.СуммаУпрОстаток КАК Сумма,
		|	ЗаявкиОстатки.СуммаОстаток КАК СуммаЗаявки
		|ИЗ
		|	РегистрНакопления.ден_ЗаявкиНаРасходованиеСредств.Остатки("+?(АктуальныйМониторинг=0,"","&Дата")+", ЗаявкаНаРасходование В (&Ссылка)) КАК ЗаявкиОстатки";
		
		Запрос.УстановитьПараметр("Дата", ?(АктуальныйМониторинг=2,КонецДня(Объект.ДатаРасхода),Объект.ДатаРасхода));
		Запрос.УстановитьПараметр("Ссылка", СписокЗаявок);
		
		Результат = Запрос.Выполнить();
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Макет = Документы.ден_ЗаявкаНаРасходованиеСредств.ПолучитьМакет("РасшифровкаПоЗаявкам");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.ТекстСумма = "Сумма, "+Строка(Валюта);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ВыборкаДетальныеЗаписи = Результат.Выгрузить();
		ВыборкаДетальныеЗаписи.Колонки.Добавить("Разрезы",Новый ОписаниеТипов("Строка"));
		
		Для Каждого СтрокаЗаявка Из ВыборкаДетальныеЗаписи Цикл
			// пересчитаем в валюту строки
			Если ВалютаУправленческогоУчета = Валюта Тогда
				// оставляем без пересчета
			ИначеЕсли ВалютаУправленческогоУчета = СтрокаЗаявка.Заявка.ВалютаДокумента ИЛИ Валюта = СтрокаЗаявка.Заявка.ВалютаДокумента  Тогда
                СтрокаЗаявка.Сумма = СтрокаЗаявка.СуммаЗаявки;
			Иначе
				Курс = ОбщегоНазначения.ПолучитьКурсВалюты(Объект.Сценарий.Валюта,Объект.ДатаРасхода);
				КурсУпр = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Объект.ДатаРасхода);
				СтрокаЗаявка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаЗаявка.Сумма,ВалютаУправленческогоУчета,Валюта,КурсУпр.Курс,Курс.Курс,КурсУпр.Кратность,Курс.Кратность);
			КонецЕсли;
			Заявка = СтрокаЗаявка.Заявка;
			Для Каждого СтрокаПараметров Из Заявка.БюджетныеПараметры Цикл
				СтрокаЗаявка.Разрезы = СтрокаЗаявка.Разрезы+?(СтрокаЗаявка.Разрезы="","",";"+Символы.ПС)+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(СтрокаПараметров.Измерение)+": "+?(ЗначениеЗаполнено(СтрокаПараметров.Значение),Строка(СтрокаПараметров.Значение),"<пустое значение>");
			КонецЦикла;
			ОбластьСтрока.Параметры.Заполнить(СтрокаЗаявка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазрезыУчетаНаСервере()
	
	Объект.БюджетныеПараметры.Очистить();
	
	ТипСДДС = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	Для Каждого РазрезУчета Из СписокВыбораРазрезыУчета Цикл
		ТекущийРазрез = РазрезУчета.Значение;
		Если ТекущийРазрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент Тогда
			НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
			НоваяСтрока.Измерение	= ТекущийРазрез;
			НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты;
			НоваяСтрока.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента;
		ИначеЕсли ТекущийРазрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение Тогда
			НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
			НоваяСтрока.Измерение	= ТекущийРазрез;
			НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО;
			НоваяСтрока.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента;
		ИначеЕсли ТекущийРазрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект Тогда
			НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
			НоваяСтрока.Измерение	= ТекущийРазрез;
			НоваяСтрока.Разрез 		= ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты;
			НоваяСтрока.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента;
		Иначе
			ЭПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ТекущийРазрез);
			Если ЭПВХ.ТипЗначения.СодержитТип(ТипСДДС) Тогда
				НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
				НоваяСтрока.Измерение	= ТекущийРазрез;
				НоваяСтрока.Разрез 		= ЭПВХ;
				НоваяСтрока.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ПоДаннымДокумента;
			Иначе
				НоваяСтрока = Объект.БюджетныеПараметры.Добавить();
				НоваяСтрока.Измерение	= ТекущийРазрез;
				НоваяСтрока.Разрез 		= ЭПВХ;
				НоваяСтрока.Значение 	= ЭПВХ.ТипЗначения.ПривестиЗначение(Неопределено);
				НоваяСтрока.СпособУказанияЗначения 	= Перечисления.ден_СпособУказанияЗначенияБюджетногоПараметра.ФиксированноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПостановкуНаМаршрут()
	
	НачатьТранзакцию();
	
	Если усд_ПроцедурыСогласованияДокументов.СнятьСМаршрута(Объект.Ссылка) Тогда
		Если НЕ усд_ПроцедурыСогласованияДокументов.ПоставитьНаМаршрут(Объект.Ссылка,ВидДокументов, усд_УправлениеСогласованиемДокументов.НазначитьМаршрут(,Объект.Ссылка)) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		ОбновитьДанныеСогласования();
	Иначе
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОчисткеФамилийПодотчетников(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ФормаОплаты = ТекущаяФормаОплаты;
		ФормаОплатыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаДокумента(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		Объект.КурсДокумента      = Результат.КурсВалюты;
		Объект.КратностьДокумента = Результат.КратностьВалюты;
		
		РассчитатьСуммуПлатежаТаблицаНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбУдаленииСтрокРасшифровки(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Пока Объект.РасшифровкаПлатежа.Количество() > 1 Цикл
			СтрокаУдаления=Объект.РасшифровкаПлатежа[1];
			Объект.РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
		
		РассчитатьСуммуПлатежа();
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	Иначе
		Список = 1;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсВзаиморасчетов(Результат, Параметры) Экспорт
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Результат <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = Результат.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = Результат.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКурсаКратностиВзаиморасчетов(Результат, Параметры) Экспорт
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;

	Если Результат <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = Результат.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = Результат.КратностьВалюты;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРазмещенияЗаявки(Результат, ЭлементФормы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ден_ПланируемоеПоступлениеДенежныхСредств" Тогда
		
		СтандартнаяОбработка = Ложь;
				
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ФормаОплаты"					,Объект.ФормаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента"				,Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"				,Объект.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента"			,Объект.КратностьДокумента);
		СтруктураПараметров.Вставить("ДатаДок"						,Объект.ДатаРасхода);
		СтруктураПараметров.Вставить("ИмяРегистра"					,"ден_ПланируемыеПоступленияДенежныхСредств");
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
		СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
		СтруктураПараметров.Вставить("СуммаДокумента"				,Объект.СуммаДокумента);
		СтруктураПараметров.Вставить("ВидОперации"					,);
		СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Объект.БанковскийСчетКасса);
		СтруктураПараметров.Вставить("Организация"					,Объект.Организация);
		СтруктураПараметров.Вставить("Проект"						,);
		СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",);
		СтруктураПараметров.Вставить("Контрагент"					,);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
		СтруктураПараметров.Вставить("Сделка"						,);
		СтруктураПараметров.Вставить("СтркутрноеПодразделение"		,Объект.СтруктурноеПодразделение);
		ОткрытьФорму("Обработка.ден_ПодборПараметровРасшифровкиПлатежа.Форма", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);
		
	Иначе

		Отбор = Новый Структура("ВалютаДенежныхСредств, Владелец");
		Отбор.ВалютаДенежныхСредств = Объект.ВалютаДокумента;
		Отбор.Владелец = Объект.Организация;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник." + Результат.Значение + ".ФормаВыбора", ПараметрыФормы, ЭлементФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаполненииСПроведением(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРезервированиеНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ТекущаяОрганизация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ТекущееСтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);

	ТекущаяОрганизация = Объект.Организация;
	ТекущийВидОперации = Объект.ВидОперации;
	
	УправлениеФормой(ЭтаФорма);
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
    
    Перем НоваяСтрока;
    
    УстановитьПривилегированныйРежим(Истина);
	
    Объект.РасшифровкаПлатежа.Очистить();
    Объект.РазмещениеЗаявки.Очистить();
    Объект.ПеречислениеВПодотчет.Очистить();
    Объект.ПеречислениеЗаработнойПлаты.Очистить();
    Объект.ПеречислениеПенсионныхВзносов.Очистить();
    Объект.ПеречислениеПоИсполнительнымЛистам.Очистить();
    Объект.ПеречислениеСоциальныхОтчислений.Очистить();
    Объект.БюджетныеПараметры.Очистить();
	
	Документы.ден_ЗаявкаНаРасходованиеСредств.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
        НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		ИдентификаторСтрокаПлатеж = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = ИдентификаторСтрокаПлатеж;
	Иначе
		Список = 1;
	КонецЕсли;	
	
    ОпределитьНаличиеРасчетов();
	
КонецПроцедуры
