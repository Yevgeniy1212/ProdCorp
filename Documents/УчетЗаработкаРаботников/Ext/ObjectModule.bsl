////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// предназначена для заполнения табличной части 
// Параметры:
//	Основание - передается объект-основание
// Возвращаемое значение: нет
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботу"))
	 ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.КадровоеПеремещение")) Тогда
	 
	 	ОснованиеПрием = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПриемНаРаботу"));
		Для Каждого Строка Из Основание.Работники Цикл
			НоваяСтрока = Работники.Добавить();
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			НоваяСтрока.ФизЛицо   = Строка.Физлицо;
			Если ОснованиеПрием Тогда
				НоваяСтрока.ДатаИзменения = Строка.ДатаПриема;
			Иначе
				НоваяСтрока.ДатаИзменения = Строка.ДатаНачала;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры  // ЗаполнитьПоОснованию

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// Описание текста запроса:
	// 1. Выборка "УчетЗаработкаРаботниковРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо"
	// 3. Выборка "ПоследующиеДвижение": 
	//		В регистре УчетЗаработкаРаботников ищем движения, следующие за теми, которые мы 
	//      собираемся записать в этот же регистр - затем проверим, нет ли уже движения
	//      на ту дату, которая указана в документе
    //
	ТекстЗапроса = "ВЫБРАТЬ
	               |	УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	               |	УчетЗаработкаРаботниковРаботники.ФизЛицо,
	               |	УчетЗаработкаРаботниковРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	               |	ПоследующиеДвижения.РегистраторПредставление,
	               |	УчетЗаработкаРаботниковРаботники.ДатаИзменения,
	               |	УчетЗаработкаРаботниковРаботники.СпособОтраженияВУпрУчете,
	               |	УчетЗаработкаРаботниковРаботники.УчетНачисленийПоОрганизации
	               |ИЗ
	               |	Документ.УчетЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(УчетЗаработкаРаботниковРаботники1.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |		ИЗ
	               |			Документ.УчетЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УчетЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники1
	               |				ПО УчетЗаработкаРаботниковРаботники1.Ссылка = &ДокументСсылка И УчетЗаработкаРаботниковРаботники.ФизЛицо = УчетЗаработкаРаботниковРаботники1.ФизЛицо И УчетЗаработкаРаботниковРаботники.НомерСтроки < УчетЗаработкаРаботниковРаботники1.НомерСтроки
	               |		
	               |		ГДЕ
	               |			УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			УчетЗаработкаРаботниковРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	               |		ПО УчетЗаработкаРаботниковРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			УчетЗаработкаРаботников.Регистратор.Представление КАК РегистраторПредставление,
	               |			УчетЗаработкаРаботниковРаботники.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(УчетЗаработкаРаботников.Период) КАК ДатаПоследующегоДвижения
	               |		ИЗ
	               |			Документ.УчетЗаработкаРаботников.Работники КАК УчетЗаработкаРаботниковРаботники
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетЗаработкаРаботников КАК УчетЗаработкаРаботников
	               |				ПО УчетЗаработкаРаботниковРаботники.ФизЛицо = УчетЗаработкаРаботников.Физлицо И УчетЗаработкаРаботниковРаботники.ДатаИзменения <= УчетЗаработкаРаботников.Период
	               |		
	               |		ГДЕ
	               |			УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			УчетЗаработкаРаботников.Регистратор.Представление,
	               |			УчетЗаработкаРаботниковРаботники.НомерСтроки) КАК ПоследующиеДвижения
	               |		ПО УчетЗаработкаРаботниковРаботники.НомерСтроки = ПоследующиеДвижения.НомерСтроки И УчетЗаработкаРаботниковРаботники.ДатаИзменения = ПоследующиеДвижения.ДатаПоследующегоДвижения
	               |
	               |ГДЕ
	               |	УчетЗаработкаРаботниковРаботники.Ссылка = &ДокументСсылка";

	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	// ФизЛицо
	ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
	Если Не ЕстьФизЛицо Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаИзменения) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения учета сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// СпособОтраженияВУпрУчете
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СпособОтраженияВУпрУчете)  Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан способ отражения заработка сотрудника в учете!", Отказ, Заголовок);
	КонецЕсли;
	
	// повторяющиеся строки		
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер)  Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "по сотруднику " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " найдена повторяющаяся строка № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// повторяющиеся строки		
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РегистраторПредставление)  Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "способ учета заработка сотрудника " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " уже зарегистрирован ранее документом " + ВыборкаПоСтрокамДокумента.РегистраторПредставление + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

    // Движения на дату приёма
	
	//Движения по регистру "УчетЗаработкаРаботников"
	Движение = Движения.УчетЗаработкаРаботников.Добавить();
	// Свойства
	Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаИзменения;
	
	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоРаботникиОрганизации.ФизЛицо;
	// Ресурсы
	Движение.СпособОтраженияВУпрУчете  = ВыборкаПоРаботникиОрганизации.СпособОтраженияВУпрУчете;
	Движение.УчетНачисленийПоОрганизации  = ВыборкаПоРаботникиОрганизации.УчетНачисленийПоОрганизации;


КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// выполним выборку по табличной части документа
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(Режим);
			ВыборкаСтрокЗапроса = РезультатЗапросаПоРаботники.Выбрать();
			
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
				КонецЕсли; 
				
			КонецЦикла;					
			
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ДокументОснование = Основание;
	ЗаполнитьПоДокументуОснования(Основание);
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры
