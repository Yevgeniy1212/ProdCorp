////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец 	    = ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало 	    = ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец 	    = ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке = ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеДни 	= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.УчитываемыеЧасы 	= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли;
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней 					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов 				= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке 		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
	КонецЕсли;

	// Реквизиты
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени  	        = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.Показатель1                = ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2                = ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3                = ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4                = ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5                = ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6                = ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ДополнительныеДанные		= ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДопНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.БазовыйПериодНачало    	= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец		    = ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;

	// Реквизиты
	Движение.Показатель1                = ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2                = ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3                = ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4                = ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5                = ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6                = ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ЧислоМесяцев				= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Если ВыборкаПоСтрокамДокумента.РасчетПоДоговору Тогда
		Движение.ДокументОснование		= ВыборкаПоСтрокамДокумента.ДокументОснование;
	КонецЕсли;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.ДополнительныеДанные		= ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуДопНачислений

// Добавляет строку сторно начислений в движения и табличную часть документа
//
Процедура ДобавитьСтрокуСторно(Движения, ТабличнаяЧасть, Строка, МассивИндексыСтрокНачисления = Неопределено)

	// новая запись движений
	Движение = Движения.Добавить();

	ЗаполнитьЗначенияСвойств(Движение, Строка);
	
	// прочие реквизиты
	Движение.ПериодРегистрации          	= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало       	= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец  		  	= Строка.ПериодДействияКонецСторно;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	// Новая строка табличной части
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка);
	
	// прочие реквизиты
	СтрокаТабличнойЧасти.ДатаНачала       				= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания    				= Строка.ПериодДействияКонецСторно;
	СтрокаТабличнойЧасти.Сторно							= Истина;
	СтрокаТабличнойЧасти.Авторасчет						= Истина;
	
	Если МассивИндексыСтрокНачисления <> Неопределено Тогда
		МассивИндексыСтрокНачисления.Добавить(СтрокаТабличнойЧасти.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуСторно()

// Заполняет значения реквизитов "СуммаВычета..." по переданным данным
//
// Параметры: 
//	ТаблицаВычетов - таблица значений - данные по вычетам
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличныеЧастиДаннымиПоВычетам(ТаблицаВычетов)
	
	// Предварительно обнулим существующие строки
	Для Каждого СтрокаТЧ Из ОсновныеНачисления Цикл
		Если СтрокаТЧ.Авторасчет Тогда
			СтрокаТЧ.СуммаВычетаИПН = 0;
			СтрокаТЧ.СуммаВычетаОПВ = 0;
			СтрокаТЧ.СуммаВычетаСН = 0;
			СтрокаТЧ.СуммаВычетаСО = 0;
			СтрокаТЧ.СуммаВычетаОППВ = 0;
			СтрокаТЧ.СуммаВычетаВОСМС = 0;
			СтрокаТЧ.СуммаВычетаООСМС = 0;
			СтрокаТЧ.СуммаВычетаОПВР = 0;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ДополнительныеНачисления Цикл
		Если СтрокаТЧ.Авторасчет Тогда
			СтрокаТЧ.СуммаВычетаИПН = 0;
			СтрокаТЧ.СуммаВычетаОПВ = 0;
			СтрокаТЧ.СуммаВычетаСН = 0;
			СтрокаТЧ.СуммаВычетаСО = 0;
			СтрокаТЧ.СуммаВычетаОППВ = 0;
			СтрокаТЧ.СуммаВычетаВОСМС = 0;
			СтрокаТЧ.СуммаВычетаООСМС = 0;
			СтрокаТЧ.СуммаВычетаОПВР = 0;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарамРегистратор", Ссылка);
	
	// Способы налогообложения, имеющие вычеты по доходам
	СпособыНалогообложенияДоходов = Новый СписокЗначений;
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды);
	
	Запрос.УстановитьПараметр("парамСпособыНалогообложения", СпособыНалогообложенияДоходов);
    	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ТабличнаяЧасть,
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяИПН В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяИПН ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяИПН,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяОПВ В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяОПВ ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяОПВ,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяСН В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяСН ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяСН,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяСО В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяСО ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяСО,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяОППВ В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяОППВ ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяОППВ,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяВОСМС В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяВОСМС ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяВОСМС,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяООСМС В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяООСМС ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяООСМС,
	|	ВЫБОР КОГДА Начисления.ОблагаетсяОПВР В (&парамСпособыНалогообложения) ТОГДА Начисления.ОблагаетсяОПВР ИНАЧЕ NULL КОНЕЦ КАК ОблагаетсяОПВР,
	|	Начисления.Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		""Основные"" КАК ТабличнаяЧасть,
	|		ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяСН КАК ОблагаетсяСН,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяСО КАК ОблагаетсяСО,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОППВ КАК ОблагаетсяОППВ,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяВОСМС КАК ОблагаетсяВОСМС,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяООСМС КАК ОблагаетсяООСМС,
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВР КАК ОблагаетсяОПВР,
	|		ОсновныеНачисления.Результат КАК Результат
	|	ИЗ
	|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
	|
	|	ГДЕ
	|		ОсновныеНачисления.Ссылка = &парамРегистратор И
	|		ОсновныеНачисления.Авторасчет И
	|		(ОсновныеНачисления.ВидРасчета.ОблагаетсяИПН В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВ В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяСН В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяСО В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОППВ В (&парамСпособыНалогообложения)ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяВОСМС В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяООСМС В (&парамСпособыНалогообложения) ИЛИ
	|		ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВР В (&парамСпособыНалогообложения))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		""Дополнительные"" КАК ТабличнаяЧасть,
	|		ДополнительныеНачисления.НомерСтроки КАК НомерСтроки,
	|		ДополнительныеНачисления.Сотрудник КАК Сотрудник,
	|		ДополнительныеНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяСН КАК ОблагаетсяСН,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяСО КАК ОблагаетсяСО,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОППВ КАК ОблагаетсяОППВ,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС КАК ОблагаетсяВОСМС,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяООСМС КАК ОблагаетсяООСМС,
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВР КАК ОблагаетсяОПВР,
	|		ДополнительныеНачисления.Результат КАК Результат
	|	ИЗ
	|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
	|
	|	ГДЕ
	|		ДополнительныеНачисления.Ссылка = &парамРегистратор И
	|		ДополнительныеНачисления.Авторасчет И
	|		(ДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяСН В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяСО В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОППВ В (&парамСпособыНалогообложения)ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяООСМС В (&парамСпособыНалогообложения) ИЛИ
	|		ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВР В (&парамСпособыНалогообложения))) КАК Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ОблагаетсяИПН,
	|	Начисления.ОблагаетсяОПВ,
	|	Начисления.ОблагаетсяСН,
	|	Начисления.ОблагаетсяСО,
	|	Начисления.ОблагаетсяОППВ,
	|	Начисления.ОблагаетсяВОСМС,
	|	Начисления.ОблагаетсяООСМС,
	|	Начисления.ОблагаетсяОПВР,
	|	Начисления.НомерСтроки";
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	ТекущееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийСпособНалогообложенияИПН = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияСН = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияОПВ = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияСО = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияОППВ = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияВОСМС = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияООСМС = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	ТекущийСпособНалогообложенияОПВР = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
	УжеПрименилиВычетПоИПН = 0;
	УжеПрименилиВычетПоОПВ = 0;
	УжеПрименилиВычетПоСН = 0;
	УжеПрименилиВычетПоСО = 0;
	УжеПрименилиВычетПоОППВ = 0;
	УжеПрименилиВычетПоВОСМС = 0;
	УжеПрименилиВычетПоООСМС = 0;
	УжеПрименилиВычетПоОПВР = 0;
	
	СтруктураПоиска = Новый Структура("ФизЛицо, СпособНалогообложения");
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		
		Если ТекущееФизЛицо <> Строка.ФизЛицо Тогда
			УжеПрименилиВычетПоИПН = 0;
			УжеПрименилиВычетПоОПВ = 0;
			УжеПрименилиВычетПоСН = 0;
			УжеПрименилиВычетПоСО = 0;
			УжеПрименилиВычетПоОППВ = 0;
			УжеПрименилиВычетПоВОСМС = 0;
			УжеПрименилиВычетПоООСМС = 0;
			УжеПрименилиВычетПоОПВР = 0;
			ТекущееФизЛицо = Строка.ФизЛицо;
			ТекущийСпособНалогообложенияИПН = Строка.ОблагаетсяИПН;
			ТекущийСпособНалогообложенияСН = Строка.ОблагаетсяОПВ;
			ТекущийСпособНалогообложенияОПВ = Строка.ОблагаетсяСН;
			ТекущийСпособНалогообложенияСО = Строка.ОблагаетсяСО;
			ТекущийСпособНалогообложенияОППВ = Строка.ОблагаетсяОППВ;
			ТекущийСпособНалогообложенияВОСМС = Строка.ОблагаетсяВОСМС;
			ТекущийСпособНалогообложенияООСМС = Строка.ОблагаетсяООСМС;
			ТекущийСпособНалогообложенияОПВР = Строка.ОблагаетсяОПВР;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияИПН <> Строка.ОблагаетсяИПН Тогда
			УжеПрименилиВычетПоИПН = 0;
			ТекущийСпособНалогообложенияИПН = Строка.ОблагаетсяИПН;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияОПВ <> Строка.ОблагаетсяОПВ Тогда
			УжеПрименилиВычетПоОПВ = 0;
			ТекущийСпособНалогообложенияОПВ = Строка.ОблагаетсяОПВ;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияСН <> Строка.ОблагаетсяСН Тогда
			УжеПрименилиВычетПоСН = 0;
			ТекущийСпособНалогообложенияСН = Строка.ОблагаетсяСН;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияСО <> Строка.ОблагаетсяСО Тогда
			УжеПрименилиВычетПоСО = 0;
			ТекущийСпособНалогообложенияСО = Строка.ОблагаетсяСО;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияОППВ <> Строка.ОблагаетсяОППВ Тогда
			УжеПрименилиВычетПоОППВ = 0;
			ТекущийСпособНалогообложенияОППВ = Строка.ОблагаетсяОППВ;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияВОСМС <> Строка.ОблагаетсяВОСМС Тогда
			УжеПрименилиВычетПоВОСМС = 0;
			ТекущийСпособНалогообложенияВОСМС = Строка.ОблагаетсяВОСМС;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияООСМС <> Строка.ОблагаетсяООСМС Тогда
			УжеПрименилиВычетПоООСМС = 0;
			ТекущийСпособНалогообложенияООСМС = Строка.ОблагаетсяООСМС;
		КонецЕсли;
		
		Если ТекущийСпособНалогообложенияОПВР <> Строка.ОблагаетсяОПВР Тогда
			УжеПрименилиВычетПоОПВР = 0;
			ТекущийСпособНалогообложенияОПВР = Строка.ОблагаетсяОПВР;
		КонецЕсли;
		
		Результат = ?(Строка.Результат = Null, 0, Строка.Результат);
		
		Если Результат = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.ФизЛицо = Строка.ФизЛицо;
		
		// ИПН
		РазмерВычетаИПН = 0;
		Если ТекущийСпособНалогообложенияИПН <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияИПН;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаИПН = ?(СтрокаВычетов[0].ИПНСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ИПНСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяИПН = ?(СтрокаВычетов[0].ИПНСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ИПНСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоИПН;
					Если СуммаВычетаТекущегоМесяцаИПН > 0 Тогда
						РазмерВычетаИПН = ?(СуммаВычетаТекущегоМесяцаИПН < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаИПН, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаИПН = 0 Тогда
						РазмерВычетаИПН = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоИПН;
					Если СуммаВычетаГодоваяИПН > 0 Тогда
						РазмерВычетаИПН = ?(СуммаВычетаГодоваяИПН < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяИПН, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяИПН = 0 Тогда
						РазмерВычетаИПН = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаИПН < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаИПН = РазмерВычетаИПН;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// СН
		РазмерВычетаСН = 0;
		Если ТекущийСпособНалогообложенияСН <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияСН;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаСН = ?(СтрокаВычетов[0].СНСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].СНСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяСН = ?(СтрокаВычетов[0].СНСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].СНСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоСН;
					Если СуммаВычетаТекущегоМесяцаСН > 0 Тогда
						РазмерВычетаСН = ?(СуммаВычетаТекущегоМесяцаСН < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаСН, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаСН = 0 Тогда
						РазмерВычетаСН = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоСН;
					Если СуммаВычетаГодоваяСН > 0 Тогда                                 
						РазмерВычетаСН = ?(СуммаВычетаГодоваяСН < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяСН, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяСН = 0 Тогда
						РазмерВычетаСН = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаСН < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаСН = РазмерВычетаСН;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// ОПВ
		РазмерВычетаОПВ = 0;
		Если ТекущийСпособНалогообложенияОПВ <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияОПВ;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаОПВ = ?(СтрокаВычетов[0].ОПВСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ОПВСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяОПВ = ?(СтрокаВычетов[0].ОПВСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ОПВСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоОПВ;
					Если СуммаВычетаТекущегоМесяцаОПВ > 0 Тогда                                   
						РазмерВычетаОПВ = ?(СуммаВычетаТекущегоМесяцаОПВ < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаОПВ, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаОПВ = 0 Тогда
						РазмерВычетаОПВ = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоОПВ;
					Если СуммаВычетаГодоваяОПВ > 0 Тогда
						РазмерВычетаОПВ = ?(СуммаВычетаГодоваяОПВ < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяОПВ, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяОПВ = 0 Тогда
						РазмерВычетаОПВ = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаОПВ < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаОПВ = РазмерВычетаОПВ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// СО
		РазмерВычетаСО = 0;
		Если ТекущийСпособНалогообложенияСО <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияСО;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаСО = ?(СтрокаВычетов[0].СОСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].СОСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяСО = ?(СтрокаВычетов[0].СОСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].СОСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоСО;
					Если СуммаВычетаТекущегоМесяцаСО > 0 Тогда
						РазмерВычетаСО = ?(СуммаВычетаТекущегоМесяцаСО < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаСО, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаСО = 0 Тогда
						РазмерВычетаСО = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоСО;
					Если СуммаВычетаГодоваяСО > 0 Тогда
						РазмерВычетаСО = ?(СуммаВычетаГодоваяСО < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяСО, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяСО = 0 Тогда
						РазмерВычетаСО = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаСО < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаСО = РазмерВычетаСО;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ОППВ
		РазмерВычетаОППВ = 0;
		Если ТекущийСпособНалогообложенияОППВ <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияОППВ;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаОППВ = ?(СтрокаВычетов[0].ОППВСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ОППВСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяОППВ = ?(СтрокаВычетов[0].ОППВСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ОППВСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоОППВ;
					Если СуммаВычетаТекущегоМесяцаОППВ > 0 Тогда
						РазмерВычетаОППВ = ?(СуммаВычетаТекущегоМесяцаОППВ < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаОППВ, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаОППВ = 0 Тогда
						РазмерВычетаОППВ = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоОППВ;
					Если СуммаВычетаГодоваяОППВ > 0 Тогда
						РазмерВычетаОППВ = ?(СуммаВычетаГодоваяОППВ < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяОППВ, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяОППВ = 0 Тогда
						РазмерВычетаОППВ = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаОППВ < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаОППВ = РазмерВычетаОППВ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ВОСМС
		РазмерВычетаВОСМС = 0;
		Если ТекущийСпособНалогообложенияВОСМС <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияВОСМС;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаВОСМС = ?(СтрокаВычетов[0].ВОСМССуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ВОСМССуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяВОСМС = ?(СтрокаВычетов[0].ВОСМССуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ВОСМССуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоВОСМС;
					Если СуммаВычетаТекущегоМесяцаВОСМС > 0 Тогда                                   
						РазмерВычетаВОСМС = ?(СуммаВычетаТекущегоМесяцаВОСМС < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаВОСМС, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаВОСМС = 0 Тогда
						РазмерВычетаВОСМС = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоВОСМС;
					Если СуммаВычетаГодоваяВОСМС > 0 Тогда
						РазмерВычетаВОСМС = ?(СуммаВычетаГодоваяВОСМС < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяВОСМС, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяВОСМС = 0 Тогда
						РазмерВычетаВОСМС = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаВОСМС < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаВОСМС = РазмерВычетаВОСМС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// ООСМС
		РазмерВычетаООСМС = 0;
		Если ТекущийСпособНалогообложенияООСМС <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияООСМС;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаООСМС = ?(СтрокаВычетов[0].ООСМССуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ООСМССуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяООСМС = ?(СтрокаВычетов[0].ООСМССуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ООСМССуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоООСМС;
					Если СуммаВычетаТекущегоМесяцаООСМС > 0 Тогда
						РазмерВычетаООСМС = ?(СуммаВычетаТекущегоМесяцаООСМС < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаООСМС, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаООСМС = 0 Тогда
						РазмерВычетаООСМС = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоООСМС;
					Если СуммаВычетаГодоваяООСМС > 0 Тогда
						РазмерВычетаООСМС = ?(СуммаВычетаГодоваяООСМС < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяООСМС, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяООСМС = 0 Тогда
						РазмерВычетаООСМС = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаООСМС < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаООСМС = РазмерВычетаООСМС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ОПВР
		РазмерВычетаОПВР = 0;
		Если ТекущийСпособНалогообложенияОПВР <> Null Тогда
			СтруктураПоиска.СпособНалогообложения = ТекущийСпособНалогообложенияОПВР;
			СтрокаВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокаВычетов.Количество() > 0 Тогда
				СуммаВычетаТекущегоМесяцаОПВР = ?(СтрокаВычетов[0].ОПВРСуммаВычетаТекущегоМесяца = Null, 0, СтрокаВычетов[0].ОПВРСуммаВычетаТекущегоМесяца);
				СуммаВычетаГодоваяОПВР = ?(СтрокаВычетов[0].ОПВРСуммаВычетаГодовая = Null, 0, СтрокаВычетов[0].ОПВРСуммаВычетаГодовая);
				РазмерМесячногоВычета = ?(СтрокаВычетов[0].РазмерМесячногоВычета = Null, 0, СтрокаВычетов[0].РазмерМесячногоВычета);
				РазмерГодовогоВычета = ?(СтрокаВычетов[0].РазмерГодовогоВычета = Null, 0, СтрокаВычетов[0].РазмерГодовогоВычета);
				Если РазмерМесячногоВычета > 0 Тогда
					РазмерМесячногоВычета = РазмерМесячногоВычета - УжеПрименилиВычетПоОПВР;
					Если СуммаВычетаТекущегоМесяцаОПВР > 0 Тогда
						РазмерВычетаОПВР = ?(СуммаВычетаТекущегоМесяцаОПВР < РазмерМесячногоВычета, РазмерМесячногоВычета - СуммаВычетаТекущегоМесяцаОПВР, 0);
					ИначеЕсли СуммаВычетаТекущегоМесяцаОПВР = 0 Тогда
						РазмерВычетаОПВР = ?(Результат < РазмерМесячногоВычета, Результат, РазмерМесячногоВычета);
					КонецЕсли;
				ИначеЕсли РазмерГодовогоВычета > 0 Тогда
					РазмерГодовогоВычета = РазмерГодовогоВычета - УжеПрименилиВычетПоОПВР;
					Если СуммаВычетаГодоваяОПВР > 0 Тогда
						РазмерВычетаОПВР = ?(СуммаВычетаГодоваяОПВР < РазмерГодовогоВычета, Мин(РазмерГодовогоВычета - СуммаВычетаГодоваяОПВР, Результат), 0);
					ИначеЕсли СуммаВычетаГодоваяОПВР = 0 Тогда
						РазмерВычетаОПВР = ?(Результат < РазмерГодовогоВычета, Результат, РазмерГодовогоВычета);
					КонецЕсли;
				КонецЕсли
			КонецЕслИ;
			
			Если НЕ (РазмерВычетаОПВР < 0) Тогда
				Если Строка.ТабличнаяЧасть = "Основные" Тогда
					СтрокаТЧ = ОсновныеНачисления.Получить(Строка.НомерСтроки - 1);
				Иначе
					СтрокаТЧ = ДополнительныеНачисления.Получить(Строка.НомерСтроки - 1);
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено Тогда
					СтрокаТЧ.СуммаВычетаОПВР = РазмерВычетаОПВР;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УжеПрименилиВычетПоИПН = УжеПрименилиВычетПоИПН + РазмерВычетаИПН;
		УжеПрименилиВычетПоСН = УжеПрименилиВычетПоСН + РазмерВычетаСН;
		УжеПрименилиВычетПоОПВ = УжеПрименилиВычетПоОПВ + РазмерВычетаОПВ;
		УжеПрименилиВычетПоСО = УжеПрименилиВычетПоСО + РазмерВычетаСО;
		УжеПрименилиВычетПоОППВ = УжеПрименилиВычетПоОППВ + РазмерВычетаОППВ;
		УжеПрименилиВычетПоВОСМС = УжеПрименилиВычетПоВОСМС + РазмерВычетаВОСМС;
		УжеПрименилиВычетПоООСМС = УжеПрименилиВычетПоООСМС + РазмерВычетаООСМС;
		УжеПрименилиВычетПоОПВР = УжеПрименилиВычетПоОПВР + РазмерВычетаОПВР;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выполняет расчет основных и дополнительных записей начислений.
//
Процедура РассчитатьНачисления(Сотрудник = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	НачатьТранзакцию();
	Отказ = Ложь;

	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		МассивИндексыСтрокДополнительныеНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		МассивИндексыСтрокДополнительныеНачисления = Новый Массив();
	КонецЕсли;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																	Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	// создадим наборы записей для выполнения движений
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// получим реквизиты табличной части
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, , Сотрудник, "Расчет").Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, "", "Расчет");
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборОсновныеНачисления);

			Если НЕ (Сотрудник = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, , Сотрудник, "Расчет").Выбрать();
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ, , "Расчет");
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуДопНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, НаборДопНачисления);

			Если НЕ Сотрудник = Неопределено Тогда
				МассивИндексыСтрокДополнительныеНачисления.Добавить(ВыборкаПоДопНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;	
	КонецЕсли; 

	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, ОсновныеНачисления, СтрокаСторно, МассивИндексыСтрокНачисления);
	КонецЦикла;
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов

	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, ОсновныеНачисления, , Налогоплательщик, МассивИндексыСтрокНачисления, КомментироватьРасчет);
	// запишем результат расчета для расчета доп. начислений
	НаборОсновныеНачисления.Записать(Истина, Истина);
	
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, ДополнительныеНачисления, , Налогоплательщик, МассивИндексыСтрокДополнительныеНачисления, КомментироватьРасчет);

	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();
	
	НаборДопНачисления.Очистить();
	НаборДопНачисления.Записать();
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	

КонецПроцедуры // РассчитатьНачисления()

// Выполняет расчет вычетов по ИПН, СН, СО, ОПВ, ВОСМС и ОСМС согласно ст. 144 НК РК.
//
Процедура РассчитатьВычеты() Экспорт
	
	Отказ = Ложь;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамРегистратор" , ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамПустойСпособНалогообложения" , Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамНачалоМесяца", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамНачалоГода", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	// Способы налогообложения, имеющие вычеты по доходам
	СпособыНалогообложенияДоходов = Новый СписокЗначений;
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка);
	СпособыНалогообложенияДоходов.Добавить(Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды);
	
	Запрос.УстановитьПараметр("парамСпособыНалогообложения", СпособыНалогообложенияДоходов);
	
	// Периоды
	// Поля:
	//		Физлицо
	//
	//	Описание:
	// 	Таблица список физлиц по которым необходимо выполнить расчет вычетов
	ФизЛицаТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияРаботников.Физлицо КАК Физлицо
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Физлицо КАК Физлицо
	|	ИЗ
	|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
	|
	|	ГДЕ
	|		ОсновныеНачисления.Ссылка = &парамРегистратор
	|		И ОсновныеНачисления.Авторасчет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДополнительныеНачисления.Физлицо КАК Физлицо
	|	ИЗ
	|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
	|
	|	ГДЕ
	|		ДополнительныеНачисления.Ссылка = &парамРегистратор
	|		И ДополнительныеНачисления.Авторасчет) КАК НачисленияРаботников";
	
	// Вычеты
	// Поля:
	//		Физлицо
	//		СпособНалогообложения
	//      ИПНСуммаВычетаТекущегоМесяца
	//      ИПНСуммаВычетаГодовая
	//      ОПВСуммаВычетаТекущегоМесяца
	//      ОПВСуммаВычетаГодовая
	//      СНСуммаВычетаТекущегоМесяца
	//      СНСуммаВычетаГодовая
	//      СОСуммаВычетаТекущегоМесяца
	//      СОСуммаВычетаГодовая
	//      ОППВСуммаВычетаТекущегоМесяца
	//      ОППВСуммаВычетаГодовая
	//      ВОСМССуммаВычетаТекущегоМесяца
	//      ВОСМССуммаВычетаГодовая
	//      ООСМССуммаВычетаТекущегоМесяца
	//      ООСМССуммаВычетаГодовая
	//      ОПВРСуммаВычетаТекущегоМесяца
	//      ОПВРСуммаВычетаГодовая
	//      РазмерМесячногоВычета
	//      РазмерГодовогоВычета
	//
	// Описание:
	// Выбирает сумму предоставленных с начала года вычетов и сумму вычетов по способам налогообложения и физлицам из СписокФизлиц
	ВычетыТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияРаботников.Физлицо КАК Физлицо,
	|	НачисленияРаботников.СпособНалогообложения КАК СпособНалогообложения,
	|	ИПНОбороты.СуммаВычетаТекущегоМесяца КАК ИПНСуммаВычетаТекущегоМесяца,	
	|	ИПНОбороты.СуммаВычетаГодовая КАК ИПНСуммаВычетаГодовая,
	|	ОПВОбороты.СуммаВычетаТекущегоМесяца КАК ОПВСуммаВычетаТекущегоМесяца,
	|	ОПВОбороты.СуммаВычетаГодовая КАК ОПВСуммаВычетаГодовая,
	|	СНОбороты.СуммаВычетаТекущегоМесяца КАК СНСуммаВычетаТекущегоМесяца,
	|	СНОбороты.СуммаВычетаГодовая КАК СНСуммаВычетаГодовая,
	|	СООбороты.СуммаВычетаТекущегоМесяца КАК СОСуммаВычетаТекущегоМесяца,
	|	СООбороты.СуммаВычетаГодовая КАК СОСуммаВычетаГодовая,
	|	ОППВОбороты.СуммаВычетаТекущегоМесяца КАК ОППВСуммаВычетаТекущегоМесяца,
	|	ОППВОбороты.СуммаВычетаГодовая КАК ОППВСуммаВычетаГодовая,
	|	ВОСМСОбороты.СуммаВычетаТекущегоМесяца КАК ВОСМССуммаВычетаТекущегоМесяца,
	|	ВОСМСОбороты.СуммаВычетаГодовая КАК ВОСМССуммаВычетаГодовая,
	|	ООСМСОбороты.СуммаВычетаТекущегоМесяца КАК ООСМССуммаВычетаТекущегоМесяца,
	|	ООСМСОбороты.СуммаВычетаГодовая КАК ООСМССуммаВычетаГодовая,
	|	ОПВРОбороты.СуммаВычетаТекущегоМесяца КАК ОПВРСуммаВычетаТекущегоМесяца,
	|	ОПВРОбороты.СуммаВычетаГодовая КАК ОПВРСуммаВычетаГодовая,
	|	ВычетыПоДоходам.МесячныйВычет КАК РазмерМесячногоВычета,
	|	ВычетыПоДоходам.ГодовойВычет КАК РазмерГодовогоВычета
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НачисленияРаботников.Физлицо КАК Физлицо,
	|       НачисленияРаботников.СпособНалогообложения КАК СпособНалогообложения
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОсновныеНачисления.Физлицо КАК Физлицо,
	|       	ВЫБОР 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяИПН В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяИПН 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВ В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВ 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяСН В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяСН 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяСО В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяСО 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОППВ В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОППВ 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяВОСМС В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяВОСМС 
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяООСМС В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяООСМС
	|				КОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВР В (&парамСпособыНалогообложения)
	|				ТОГДА ОсновныеНачисления.ВидРасчета.ОблагаетсяОПВР
	|			КОНЕЦ КАК СпособНалогообложения
	|		ИЗ
	|			Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
	|
	|		ГДЕ
	|			ОсновныеНачисления.Ссылка = &парамРегистратор
	|			И ОсновныеНачисления.Авторасчет
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДополнительныеНачисления.Физлицо КАК Физлицо,
	|       	ВЫБОР 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяСН В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяСН 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяСО В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяСО 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОППВ В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОППВ
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС 
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяООСМС В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяООСМС
	|				КОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВР В (&парамСпособыНалогообложения)
	|				ТОГДА ДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВР
	|			КОНЕЦ КАК СпособНалогообложения
	|		ИЗ
	|			Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
	|
	|		ГДЕ
	|			ДополнительныеНачисления.Ссылка = &парамРегистратор
	|			И ДополнительныеНачисления.Авторасчет) КАК НачисленияРаботников) КАК НачисленияРаботников
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИПНОбороты.ФизЛицо,
	|			ИПНОбороты.СпособНалогообложения,
	|			СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ИПНОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ИПНОборотыПоМесяцам.ФизЛицо,
	|				ИПНОборотыПоМесяцам.СпособНалогообложения,
	|				ИПНОборотыПоМесяцам.Период,
	|				ИПНОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ИПНОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ИПНОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|			РегистрНакопления.ИПНСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ИПНОборотыПоМесяцам) КАК ИПНОбороты
	|
	|		СГРУППИРОВАТЬ ПО
	|			ИПНОбороты.ФизЛицо, 
	|			ИПНОбороты.СпособНалогообложения) КАК ИПНОбороты
	|	ПО ИПНОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ИПНОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СНОбороты.ФизЛицо,
	|			СНОбороты.СпособНалогообложения,
	|			СУММА(СНОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(СНОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СНОборотыПоМесяцам.ФизЛицо,
	|				СНОборотыПоМесяцам.СпособНалогообложения,
	|				СУММА(СНОборотыПоМесяцам.СуммаВычета) КАК СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(СНОборотыПоМесяцам.Период, МЕСЯЦ) = &парамНачалоМесяца ТОГДА СУММА(СНОборотыПоМесяцам.СуммаВычета) ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.СНСведенияОДоходах КАК СНОборотыПоМесяцам
	|
	|			ГДЕ
	|				(СНОборотыПоМесяцам.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода) И
	|				СНОборотыПоМесяцам.ПериодРегистрации <= &парамПериодРегистрации И 
	|				СНОборотыПоМесяцам.Организация = &парамОрганизация И 
	|				СНОборотыПоМесяцам.СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|				СНОборотыПоМесяцам.ФизЛицо В (" + ФизЛицаТекст + ")
	|
	|			СГРУППИРОВАТЬ ПО
	|				СНОборотыПоМесяцам.ФизЛицо,
	|				СНОборотыПоМесяцам.СпособНалогообложения,
	|				СНОборотыПоМесяцам.Период) КАК СНОбороты
	|
	|		СГРУППИРОВАТЬ ПО
	|			СНОбороты.ФизЛицо, 
	|			СНОбороты.СпособНалогообложения) КАК СНОбороты
	|	ПО СНОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И СНОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОПВОбороты.ФизЛицо,
	|			ОПВОбороты.СпособНалогообложения,
	|			СУММА(ОПВОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ОПВОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОПВОборотыПоМесяцам.ФизЛицо,
	|				ОПВОборотыПоМесяцам.СпособНалогообложения,
	|				ОПВОборотыПоМесяцам.Период,
	|				ОПВОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ОПВОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ОПВОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.ОПВСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ОПВОборотыПоМесяцам) КАК ОПВОбороты
	|		СГРУППИРОВАТЬ ПО          	
	|			ОПВОбороты.ФизЛицо, 
	|			ОПВОбороты.СпособНалогообложения) КАК ОПВОбороты
	|	ПО ОПВОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ОПВОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СООбороты.ФизЛицо,
	|			СООбороты.СпособНалогообложения,
	|			СУММА(СООбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(СООбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СООборотыПоМесяцам.ФизЛицо,
	|				СООборотыПоМесяцам.СпособНалогообложения,
	|				СООборотыПоМесяцам.Период,
	|				СООборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(СООборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА СООборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.СОСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК СООборотыПоМесяцам) КАК СООбороты
	|		СГРУППИРОВАТЬ ПО
	|			СООбороты.ФизЛицо, 
	|			СООбороты.СпособНалогообложения) КАК СООбороты
	|	ПО СООбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И СООбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОППВОбороты.ФизЛицо,
	|			ОППВОбороты.СпособНалогообложения,
	|			СУММА(ОППВОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ОППВОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОППВОборотыПоМесяцам.ФизЛицо,
	|				ОППВОборотыПоМесяцам.СпособНалогообложения,
	|				ОППВОборотыПоМесяцам.Период,
	|				ОППВОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ОППВОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ОППВОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.ОППВСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ОППВОборотыПоМесяцам) КАК ОППВОбороты
	|		СГРУППИРОВАТЬ ПО
	|			ОППВОбороты.ФизЛицо, 
	|			ОППВОбороты.СпособНалогообложения) КАК ОППВОбороты
	|	ПО ОППВОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ОППВОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВОСМСОбороты.ФизЛицо,
	|			ВОСМСОбороты.СпособНалогообложения,
	|			СУММА(ВОСМСОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ВОСМСОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВОСМСОборотыПоМесяцам.ФизЛицо,
	|				ВОСМСОборотыПоМесяцам.СпособНалогообложения,
	|				ВОСМСОборотыПоМесяцам.Период,
	|				ВОСМСОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ВОСМСОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ВОСМСОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.ВОСМССведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ВОСМСОборотыПоМесяцам) КАК ВОСМСОбороты
	|		СГРУППИРОВАТЬ ПО          	
	|			ВОСМСОбороты.ФизЛицо, 
	|			ВОСМСОбороты.СпособНалогообложения) КАК ВОСМСОбороты
	|	ПО ВОСМСОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ВОСМСОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ООСМСОбороты.ФизЛицо,
	|			ООСМСОбороты.СпособНалогообложения,
	|			СУММА(ООСМСОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ООСМСОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ООСМСОборотыПоМесяцам.ФизЛицо,
	|				ООСМСОборотыПоМесяцам.СпособНалогообложения,
	|				ООСМСОборотыПоМесяцам.Период,
	|				ООСМСОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ООСМСОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ООСМСОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.ООСМССведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ООСМСОборотыПоМесяцам) КАК ООСМСОбороты
	|		СГРУППИРОВАТЬ ПО
	|			ООСМСОбороты.ФизЛицо, 
	|			ООСМСОбороты.СпособНалогообложения) КАК ООСМСОбороты
	|	ПО ООСМСОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ООСМСОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОПВРОбороты.ФизЛицо,
	|			ОПВРОбороты.СпособНалогообложения,
	|			СУММА(ОПВРОбороты.СуммаВычетаОборот) КАК СуммаВычетаГодовая,
	|			СУММА(ОПВРОбороты.СуммаВычетаТекущегоМесяца) КАК СуммаВычетаТекущегоМесяца
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ОПВРОборотыПоМесяцам.ФизЛицо,
	|				ОПВРОборотыПоМесяцам.СпособНалогообложения,
	|				ОПВРОборотыПоМесяцам.Период,
	|				ОПВРОборотыПоМесяцам.СуммаВычетаОборот,
	|				ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ОПВРОборотыПоМесяцам.Период, Месяц) = &парамНачалоМесяца ТОГДА ОПВРОборотыПоМесяцам.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВычетаТекущегоМесяца
	|			ИЗ
	|				РегистрНакопления.ОПВРСведенияОДоходах.Обороты(&парамНачалоГода, &парамКонецМесяцаНалоговогоПериода, Месяц, ПериодРегистрации <= &парамПериодРегистрации И Организация = &парамОрганизация И СпособНалогообложения В (&парамСпособыНалогообложения) И 
	|					ФизЛицо В (" + ФизЛицаТекст + ")) КАК ОПВРОборотыПоМесяцам) КАК ОПВРОбороты
	|		СГРУППИРОВАТЬ ПО
	|			ОПВРОбороты.ФизЛицо, 
	|			ОПВРОбороты.СпособНалогообложения) КАК ОПВРОбороты
	|	ПО ОПВРОбороты.ФизЛицо = НачисленияРаботников.ФизЛицо И ОПВРОбороты.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыПоДоходам.СрезПоследних(&парамНачалоМесяца) КАК ВычетыПоДоходам
	|	ПО ВычетыПоДоходам.СпособНалогообложения = НачисленияРаботников.СпособНалогообложения";

	Запрос.Текст   = ВычетыТекст;
	ТаблицаВычетов = Запрос.Выполнить().Выгрузить();
	ЗаполнитьТабличныеЧастиДаннымиПоВычетам(ТаблицаВычетов);
		
КонецПроцедуры // РассчитатьВычеты()
	
// Выполняет перерасчет по заданному списку сотрудников
// Если передан пустой список сотрудников - перерасчет не проводится
// Если в качестве списка сотрудников передан не массив, а НеОпределено - перерасчет по всем сотрудникам 
// регистратора по которым требуется перерасчет
//
// Параметры
// 	Сотрудники - список значений - ссылки на сотрудников
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Сотрудники = НеОпределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	Если НЕ ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// перерасчет выполняется в транзакции
	НачатьТранзакцию();

	// получим список перерассчитываемых сотрудников
	Если Сотрудники = НеОпределено Тогда
		
		// таблица СотрудникиДляПерерасчета
		// Список сотрудников, по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// Получает список неповторяющихся сотрудников по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		СотрудникиДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.Сотрудник КАК Сотрудник
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.Сотрудник
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет";
		
		Запрос = Новый Запрос(СотрудникиДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		СотрудникиСписок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Иначе
		
		СотрудникиСписок = Сотрудники;	
	
	КонецЕсли;

    // если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																	Организация,
																	ИсчислениеНалоговСтруктурныхЕдиниц,
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
    // прочитать движения
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Прочитать();
	Движения.ИПНСведенияОДоходах.Прочитать();
	Движения.ОПВСведенияОДоходах.Прочитать();
	Движения.СНСведенияОДоходах.Прочитать();
	Движения.СОСведенияОДоходах.Прочитать();
	Движения.ВОСМССведенияОДоходах.Прочитать();
	Движения.ООСМССведенияОДоходах.Прочитать();

	////////////////////////////////////////////////////////////////////////
	// Основные и дополнительные начисления
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, СотрудникиСписок, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, ОсновныеНачисления, , Налогоплательщик);
    // запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	ПроведениеРасчетов.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, СотрудникиСписок, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, ДополнительныеНачисления, , Налогоплательщик);
    // запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// регистры накопления
	
	// сначала удалим сведения о взаиморасчетах с перерассчитанными работниками
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
	
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.Выгрузить();
		НаборЗаписей.мТаблицаДвижений.Индексы.Добавить("ФизЛицо");
		
		Для Каждого ЭлементСписка Из СотрудникиСписок Цикл
		    СтруктураПоиска.ФизЛицо = ЭлементСписка.ФизЛицо;
			
		    НайденныеСтроки = НаборЗаписей.мТаблицаДвижений.НайтиСтроки(СтруктураПоиска);
		    
		    Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		    	НаборЗаписей.мТаблицаДвижений.Удалить(НайденнаяСтрока);
		    КонецЦикла;
		    
		КонецЦикла;
	
	КонецЦикла;
	
	// теперь сформируем новые движения по регистрам накопления для перерассчитанных работников
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Истина, СотрудникиСписок, "Перерасчет").Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;

	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Истина, СотрудникиСписок, "Перерасчет").Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;
	
	// запишем движения регистров накопления в базу
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
	    ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
	    НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	    НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
	    НаборЗаписей.Записать();
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	Для Н=1 По 2 Цикл
		
		Если Н=1 Тогда
			НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
		Иначе	
		    НаборЗаписей = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
		КонецЕсли; 
		
		НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Ссылка;
		Если Сотрудники <> НеОпределено Тогда
			НаборЗаписей.Прочитать();
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаПерерасчета из НаборЗаписей Цикл
				Если Сотрудники.НайтиПоЗначению(СтрокаПерерасчета.Сотрудник) <> НеОпределено Тогда
					СтрокиКУдалению.Добавить(СтрокаПерерасчета);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Строка Из СтрокиКУдалению Цикл
				НаборЗаписей.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла; 
	
	// перерасчет выполняется в транзакции
	ЗафиксироватьТранзакцию();

КонецПроцедуры  // Перерассчитать

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиИсправлений
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Исправления)
		|	И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|	И Начисления.Сторно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Исправления)
		|	И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|	И Начисления.Сторно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", 	   Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ФизЛицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,	
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	ИСТИНА КАК Сторно,
	|	-Начисления.СуммаВычетаИПН КАК СуммаВычетаИПН,
	|	-Начисления.СуммаВычетаОПВ КАК СуммаВычетаОПВ,
	|	-Начисления.СуммаВычетаСН КАК СуммаВычетаСН,
	|	-Начисления.СуммаВычетаСО КАК СуммаВычетаСО,
	|	-Начисления.СуммаВычетаВОСМС КАК СуммаВычетаВОСМС,
	|	-Начисления.СуммаВычетаООСМС КАК СуммаВычетаООСМС,
	|	Начисления.СпособОтраженияВБухучете,
	|	Начисления.ДополнительныеДанные,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.Ссылка КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В(&Сотрудники))
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(),Выборка);
		
	КонецЦикла;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		// новая рассчитываемая строка
		НоваяСтрока = ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,"Сотрудник,ФизЛицо,ВидРасчета,ДатаНачала,ДатаОкончания," + 
													"Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6," + 
													"ПодразделениеОрганизации,СпособОтраженияВБухучете,ДополнительныеДанные");
		НоваяСтрока.Авторасчет = Истина;
	КонецЦикла;
	
	// выполним запрос к ДополнительныеНачисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Физлицо КАК ФизЛицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ДокументОснование,
	|	-Начисления.СуммаВычетаИПН КАК СуммаВычетаИПН,
	|	-Начисления.СуммаВычетаОПВ КАК СуммаВычетаОПВ,
	|	-Начисления.СуммаВычетаСН КАК СуммаВычетаСН,
	|	-Начисления.СуммаВычетаСО КАК СуммаВычетаСО,
	|	-Начисления.СуммаВычетаВОСМС КАК СуммаВычетаВОСМС,
	|	-Начисления.СуммаВычетаООСМС КАК СуммаВычетаООСМС,
	|	ИСТИНА КАК Сторно,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.ДополнительныеДанные
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ЗаполнитьЗначенияСвойств(ДополнительныеНачисления.Добавить(),Выборка);
		
	КонецЦикла;
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл

		// новая рассчитываемая строка
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,"Сотрудник,ФизЛицо,ВидРасчета,ДатаНачала,ДатаОкончания," + 
													"Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6," +
													"ПодразделениеОрганизации,ДокументОснование,СпособОтраженияВБухучете,ДополнительныеДанные");
		НоваяСтрока.Авторасчет = Истина;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ДоговорНаВыполнениеРаботСФизЛицом") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			
			НоваяСтрока = ДополнительныеНачисления.Добавить();
			НоваяСтрока.Сотрудник = Основание.Сотрудник;
			НоваяСтрока.ДокументОснование = Основание;
			НоваяСтрока.ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
			НоваяСтрока.ВидРасчета = Основание.ВидРасчета;
			Если Основание.ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
				НоваяСтрока.ДатаНачала = Макс(Основание.ДатаНачала,Мин(НачалоМесяца(Основание.ДатаОкончания),НачалоМесяца(ТекущаяДата())));
				НоваяСтрока.ДатаОкончания = Мин(КонецМесяца(ТекущаяДата()),Основание.ДатаОкончания);
			Иначе
				ПериодРегистрации = НачалоМесяца(Основание.ДатаОкончания);
				НоваяСтрока.ДатаНачала = Макс(Основание.ДатаНачала,НачалоМесяца(Основание.ДатаОкончания));
				НоваяСтрока.ДатаОкончания = Основание.ДатаОкончания;
			КонецЕсли;
			Валюта = Основание.ВалютаДокумента;
			Структура = РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом.ПолучитьПоследнее(НоваяСтрока.ДатаОкончания, Новый Структура("Валюта", Валюта));
			НоваяСтрока.Показатель1	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Основание.СуммаЗаРаботу,Валюта,Константы.ВалютаРегламентированногоУчета.Получить(),
																		Структура.Курс,1,
																		Структура.Кратность,1);
			НоваяСтрока.Результат = НоваяСтрока.Показатель1;
			НоваяСтрока.Авторасчет = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Дата,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПериодРегистрации,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР 
	|		КОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация 
	|		ИНАЧЕ РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций КАК РегистрацияРазовыхНачисленийРаботниковОрганизации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&парамПериодРегистрации, 
	|				Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Перерасчет = Ложь, Сотрудники = НеОпределено, Режим)

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	Запрос = Новый Запрос;
    МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	 Ссылка);
   	Запрос.УстановитьПараметр("ПустаяДата", 		 Дата('00010101'));
	Запрос.УстановитьПараметр("Организация", 		 ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	 ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники",	 Сотрудники);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель",	ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "ДатаНачала") + " КАК Период
		|ИЗ 
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления 
		|ГДЕ 
		|	Ссылка = &ДокументСсылка
		|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "");
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
			|ГДЕ
			|	ОсновныеНачисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "") +"
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтавкиОСМСТекст+ МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыФизЛиц.Ссылка КАК ГрафикРаботыФизЛица,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(СтрокиНачисления.ДатаНачала, СтрокиНачисления.ДатаОкончания, ДЕНЬ) + 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПланГрафикЗаполнен
	|ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыФизЛиц.Ссылка = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СтрокиНачисления.ДатаНачала И СтрокиНачисления.ДатаОкончания)
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ГрафикиРаботыФизЛиц.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ГрафикРаботыФизЛица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.СуммаВычетаИПН,
	|	ТЧНачисления.СуммаВычетаОПВ,
	|	ТЧНачисления.СуммаВычетаСН,
	|	ТЧНачисления.СуммаВычетаСО,
	|	ТЧНачисления.СуммаВычетаОППВ,
	|	ТЧНачисления.СуммаВычетаВОСМС,
	|	ТЧНачисления.СуммаВычетаООСМС,
	|	ТЧНачисления.СуммаВычетаОПВР,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР 
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком 
	|				И НЕ(ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ДанныеПоРаботникуНаДатуНачисления.ПричинаИзмененияСостояния,
	|	ДанныеПоРаботникуНаДатуНачисления.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.СуммаВычетовДоходовОтОбратного,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ТЧНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ ТЧНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	ТЧНачисления.ДополнительныеДанные,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент, 
	|	ВЫБОР 
	|		КОГДА НЕ(ТЧНачисления.ПодразделениеОрганизации.Владелец = &Организация) 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) КАК ВидДохода,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяИПН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяИПН,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяОПВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВ,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяСН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСН,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяСО, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСО,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяОППВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОППВ,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяВОСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяВОСМС,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяООСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяООСМС,
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ОблагаетсяОПВР, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				И &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ПериодыИсчисленияОППВ.ИсчислятьОППВ КАК ИсчислятьОППВ
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + ",
	|	ЕСТЬNULL(ТЧНачисления.ВидРасчета.ЯвляетсяПрочимДоходом, ЛОЖЬ) КАК ЯвляетсяПрочимДоходом,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам и мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА ТЧНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	ТекстЗапроса = ТекстЗапроса + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
	
	Если Режим = "Расчет" Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ДвойныеСтрокиОтОбратного.ПерваяСтрокаОтОбратного
	|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник 
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|					И РаботникиОрганизации.Период <= ТЧНачисления.ДатаНачала
	|		
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ДанныеПоРаботникуНаДатуНачисления.Сотрудник = ТЧНачисления.Сотрудник 
	|			И (ДанныеПоРаботникуНаДатуНачисления.Организация = &ГоловнаяОрганизация) 
	|			И ДанныеПоРаботникуНаДатуНачисления.Период = ДатыПоследнихДвиженийРаботников.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&ПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО ТЧНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО ДанныеПоРаботникуНаДатуНачисления.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И ДанныеПоРаботникуНаДатуНачисления.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПланГрафика.НомерСтроки
	|			И ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботыФизЛица";
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО ТЧНачисления.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = СтавкиОСМС.Период";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО ТЧНачисления.Сотрудник = МестоРаботы.Сотрудник
	|			И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО ТЧНачисления.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
	|			И ТЧНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
	
	Если Режим = "Расчет" Тогда
		// если вызывается для проверки перед расчетом, то предупредим, что нельзя считать два вида "от обратого" по одному человеку одним документом.
		ТекстЗапроса = ТекстЗапроса + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СтрокиТЧ.НомерСтроки,
		|							МИНИМУМ(СтрокиТЧ2.НомерСтроки) КАК ПерваяСтрокаОтОбратного
		|						ИЗ
		|							Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СтрокиТЧ
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СтрокиТЧ2
		|								ПО СтрокиТЧ2.Ссылка = &ДокументСсылка
		|									И СтрокиТЧ.Сотрудник = СтрокиТЧ2.Сотрудник
		|									И СтрокиТЧ2.ВидРасчета.ОтОбратного
		|									И СтрокиТЧ.ВидРасчета.КатегорияРасчета = СтрокиТЧ2.ВидРасчета.КатегорияРасчета
		|									И СтрокиТЧ2.НомерСтроки < СтрокиТЧ.НомерСтроки
		|						ГДЕ
		|							СтрокиТЧ.Ссылка = &ДокументСсылка
		|							И СтрокиТЧ.ВидРасчета.ОтОбратного
		|
		|						СГРУППИРОВАТЬ ПО
		|							СтрокиТЧ.НомерСтроки) КАК ДвойныеСтрокиОтОбратного
		|		ПО ТЧНачисления.НомерСтроки = ДвойныеСтрокиОтОбратного.НомерСтроки
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И ТЧНачисления.Сотрудник В (&парамСотрудники)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Перерасчет = Ложь, Сотрудники = НеОпределено, Режим)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 		  Ссылка);
	Запрос.УстановитьПараметр("Организация", 			  ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	  ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", 			  Дата('00010101'));
	Запрос.УстановитьПараметр("СпособыРасчетаПоДоговору", ПроведениеРасчетов.ПолучитьСписокСпособовРасчетовПоДоговору());
	Запрос.УстановитьПараметр("НачалоПериодаРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",  КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрации", 		  ?(Дата > КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),?(Дата < ВыборкаПоШапкеДокумента.ПериодРегистрации, ВыборкаПоШапкеДокумента.ПериодРегистрации,Дата)));
	Запрос.УстановитьПараметр("парамСотрудники",		  Сотрудники);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель",	ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);

	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "
		|	ВЫБОР
		|		КОГДА ДатаНачала МЕЖДУ &НачалоПериодаРегистрации И &КонецПериодаРегистрации
		|			ТОГДА ДатаНачала
		|		ИНАЧЕ &НачалоПериодаРегистрации
		|	КОНЕЦ") + " КАК Период
		|ИЗ 
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления 
		|ГДЕ 
		|	Ссылка = &ДокументСсылка
		|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "");
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисления.Сотрудник КАК Сотрудник,
			|	ДополнительныеНачисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
			|ГДЕ
			|	ДополнительныеНачисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	ПолеДатаНачала = "
	|ВЫБОР
	|	КОГДА СтрокиТЧ.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА &ДатаРегистрации
	|	ИНАЧЕ СтрокиТЧ.ДатаНачала
	|КОНЕЦ";
	
	Запрос.Текст = МестоРаботыТекст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета В (&СпособыРасчетаПоДоговору)
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК РасчетПоДоговору,
	|	СтрокиНачисления.ДокументОснование,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДокументОснование.Организация <> &Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНеСоответствиеОрганизацииДоговора,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.СуммаВычетаИПН,
	|	СтрокиНачисления.СуммаВычетаОПВ,
	|	СтрокиНачисления.СуммаВычетаСН,
	|	СтрокиНачисления.СуммаВычетаСО,
	|	СтрокиНачисления.СуммаВычетаОППВ,
	|	СтрокиНачисления.СуммаВычетаВОСМС,
	|	СтрокиНачисления.СуммаВычетаООСМС,
	|	СтрокиНачисления.СуммаВычетаОПВР,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.СуммаВычетовДоходовОтОбратного,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	СтрокиНачисления.Сотрудник.Наименование КАК СотрудникНаименование,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета.ЧислоМесяцев КАК ЧислоМесяцев,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуПослеРегистрации.Период > &КонецПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДанныеПоРаботникуПослеРегистрации.Период
	|				КОНЕЦ
	|		ИНАЧЕ &ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрации,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА СтрокиНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ СтрокиНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент, 
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) КАК ВидДохода,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяИПН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяИПН,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОПВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВ,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяСН, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСН,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяСО, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяСО,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОППВ, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОППВ,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяООСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяООСМС,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяВОСМС, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяВОСМС,
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ОблагаетсяОПВР, ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)) КАК ОблагаетсяОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " >= ДАТАВРЕМЯ(2017, 07, 01) 
	|			ТОГДА ИСТИНА
	|		КОГДА " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " < ДАТАВРЕМЯ(2017, 07, 01) 
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " >= ДАТАВРЕМЯ(2019, 01, 01) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " < ДАТАВРЕМЯ(2017, 07, 01) 
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " >= ДАТАВРЕМЯ(2017, 07, 01) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "СтрокиНачисления.ДатаНачала") + " >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ПериодыИсчисленияОППВ.ИсчислятьОППВ КАК ИсчислятьОППВ
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + ",
	|	ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ЯвляетсяПрочимДоходом, ЛОЖЬ) КАК ЯвляетсяПрочимДоходом,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета В (&СпособыРасчетаПоДоговору)
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.ДокументОснование.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|							И СтрокиНачисления.ДокументОснование.ДатаОкончания < &ДатаРегистрации
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния
	|	КОНЕЦ КАК ПричинаИзмененияСостояния,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета В (&СпособыРасчетаПоДоговору)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДокументОснование.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДанныеПоРаботникуДоРегистрации.Период
	|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации	
	|";

	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам и мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА СтрокиНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
		
	Если Режим = "Расчет" Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ДвойныеСтрокиОтОбратного.ПерваяСтрокаОтОбратного
	|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаРегистрации,
	|				Организация = &ГоловнаяОрганизация
	|		    	И Сотрудник В
	|		        	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            	Начисления.Сотрудник
	|		        	ИЗ
	|		            	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|		        	ГДЕ
	|		            	Начисления.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуДоРегистрации
	|		ПО ДанныеПоРаботникуДоРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(
	|				&ДатаРегистрации,
	|				Организация = &ГоловнаяОрганизация
	|		    	И Сотрудник В
	|		        	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            	Начисления.Сотрудник
	|		        	ИЗ
	|		            	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|		        	ГДЕ
	|		            	Начисления.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуПослеРегистрации
	|		ПО ДанныеПоРаботникуПослеРегистрации.Сотрудник = СтрокиНачисления.Сотрудник
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&НачалоПериодаРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО СтрокиНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО СтрокиНачисления.Сотрудник = МестоРаботы.Сотрудник
	|			И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&НачалоПериодаРегистрации", "
	|				ВЫБОР
	|					КОГДА СтрокиНачисления.ДатаНачала МЕЖДУ &НачалоПериодаРегистрации И &КонецПериодаРегистрации
	|						ТОГДА СтрокиНачисления.ДатаНачала
	|					ИНАЧЕ &НачалоПериодаРегистрации
	|				КОНЕЦ") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО СтрокиНачисления.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
	|			И СтрокиНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
	
	Если Режим = "Расчет" Тогда
		// если вызывается для проверки перед расчетом, то предупредим, что нельзя считать два вида "от обратого" по одному человеку одним документом.
		Запрос.Текст = Запрос.Текст + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СтрокиТЧ.НомерСтроки,
		|							МИНИМУМ(СтрокиТЧ2.НомерСтроки) КАК ПерваяСтрокаОтОбратного
		|						ИЗ
		|							Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СтрокиТЧ
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СтрокиТЧ2
		|								ПО СтрокиТЧ2.Ссылка = &ДокументСсылка
		|									И СтрокиТЧ.Сотрудник = СтрокиТЧ2.Сотрудник
		|									И СтрокиТЧ2.ВидРасчета.ОтОбратного
		|									И СтрокиТЧ.ВидРасчета.КатегорияРасчета = СтрокиТЧ2.ВидРасчета.КатегорияРасчета
		|									И СтрокиТЧ2.НомерСтроки < СтрокиТЧ.НомерСтроки
		|						ГДЕ
		|							СтрокиТЧ.Ссылка = &ДокументСсылка
		|							И СтрокиТЧ.ВидРасчета.ОтОбратного
		|
		|						СГРУППИРОВАТЬ ПО
		|							СтрокиТЧ.НомерСтроки) КАК ДвойныеСтрокиОтОбратного
		|		ПО СтрокиНачисления.НомерСтроки = ДвойныеСтрокиОтОбратного.НомерСтроки
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И СтрокиНачисления.Сотрудник В (&парамСотрудники)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|";

	Возврат Запрос.Выполнить();
                  
КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц, в котором выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, Режим)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
									

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ПодразделениеОрганизации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задано подразделение организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	ЕстьДатаНачала = Истина;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ЕстьДатаНачала = Ложь;
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Предупредим пользователя, если начисления делаются уже уволенном работнику
	Если ЕстьДатаНачала И ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
	КонецЕсли;
	
	Если ПериодРегистрации < '20100101' Тогда
		Если Режим = "Расчет" Тогда
			// в процессе расчета проверим, чтобы не было двух строк "От обратного"
			Если ВыборкаПоСтрокамДокумента.ПерваяСтрокаОтОбратного <> NULL Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "для сотрудник уже введен вид расчета ""от обратного"" в строке № " + ВыборкаПоСтрокамДокумента.ПерваяСтрокаОтОбратного + ", "
														+ "
														|несколько видов ""от обратного"" с одинаковой очередностью для одного и того же сотрудника надо считать разными документами!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДополнительныеНачисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "", Режим)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Доп. начисления"": ";
									
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// ДокументОснование
	Если ВыборкаПоСтрокамДокумента.РасчетПоДоговору Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан договор на выполнение работ, по которому производится начисление!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеОрганизацииДоговора Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " указанный договор ГПХ оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Предупредим пользователя, если начисления делаются уже уволенном работнику
	Если ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		ДатаНачала = ВыборкаПоСтрокамДокумента.ДатаРегистрации;

		Если ВыборкаПоСтрокамДокумента.РасчетПоДоговору Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ДатаНачала, "ДЛФ=DD") + " договор с " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже прекратил действие (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Иначе
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		КонецЕсли;
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
	КонецЕсли;

	Если ПериодРегистрации < '20100101' Тогда
		Если Режим = "Расчет" Тогда
			// в процессе расчета проверим, чтобы не было двух строк "От обратного"
			Если ВыборкаПоСтрокамДокумента.ПерваяСтрокаОтОбратного <> NULL Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "для сотрудника уже введен вид расчета ""от обратного"" в строке № " + ВыборкаПоСтрокамДокумента.ПерваяСтрокаОтОбратного + ", "
														+ "
														|несколько видов ""от обратного"" с одинаковой очередностью для одного и того же сотрудника надо считать разными документами!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДополнительныеНачисления()

// Добавляет одну строку в движения по регистрам накопления.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, 
															ВыборкаПоСтрокамДокумента, 
															ИсчислениеНалоговСтруктурныхЕдиниц)
															
    Если ВыборкаПоСтрокамДокумента.Результат = 0 
       И ВыборкаПоСтрокамДокумента.СуммаВычетаИПН = 0 
       И ВыборкаПоСтрокамДокумента.СуммаВычетаОПВ = 0 
       И ВыборкаПоСтрокамДокумента.СуммаВычетаСН = 0 
       И ВыборкаПоСтрокамДокумента.СуммаВычетаСО = 0
	   И ВыборкаПоСтрокамДокумента.СуммаВычетаВОСМС = 0 
       И ВыборкаПоСтрокамДокумента.СуммаВычетаООСМС = 0 Тогда
    	// нулевые суммы не записываем
    	Возврат;
    КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьИПН Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		 ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаИПН <> 0 Тогда
		
			Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяИПН;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Движение.ВидДохода			= ВыборкаПоСтрокамДокумента.ВидДохода;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаИПН;
																
		КонецЕсли;
		
	КонецЕсли;
	

	////////////////////////////////
	// СНСведенияОДоходах

	Если ВыборкаПоСтрокамДокумента.УчитыватьСН Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		 ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаСН <> 0 Тогда
		
			Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяСН;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаСН;

		КонецЕсли;
		
	КонецЕсли;
		
	////////////////////////////////
	// ОПВСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьОПВ Тогда 
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		   	  ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаОПВ <> 0 Тогда
			
			Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОПВ;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаОПВ;
			
		КонецЕсли;

	КонецЕсли;
	
	////////////////////////////////
	// СОСведенияОДоходах

	Если ВыборкаПоСтрокамДокумента.УчитыватьСО Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		   	  ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаСО <> 0 Тогда

			Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяСО;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаСО;
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	////////////////////////////////
	// ОППВСведенияОДоходах

	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ 
		И ВыборкаПоСтрокамДокумента.ИсчислятьОППВ
		И ВыборкаПоСтрокамДокумента.УчитыватьОППВ Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 Тогда

			Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОППВ;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаОППВ;
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	////////////////////////////////
	// ВОСМССведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьВОСМС Тогда

		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		   	  ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаВОСМС <> 0 Тогда
			
			Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяВОСМС;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Движение.ВидДохода			= ВыборкаПоСтрокамДокумента.ВидДохода;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаВОСМС;
			
		КонецЕсли;

	КонецЕсли;
	
	////////////////////////////////
	// ООСМССведенияОДоходах

	Если ВыборкаПоСтрокамДокумента.УчитыватьООСМС Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 
		   	  ИЛИ ВыборкаПоСтрокамДокумента.СуммаВычетаООСМС <> 0 Тогда

			Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяООСМС;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаООСМС;
			
		КонецЕсли;
	
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах

	Если ВыборкаПоСтрокамДокумента.УчитыватьОПВР Тогда
		
		Если ВыборкаПоСтрокамДокумента.Результат <> 0 Тогда

			Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
			
			//Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Иначе
				Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОПВР;
			Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
			Движение.СуммаВычета		= ВыборкаПоСтрокамДокумента.СуммаВычетаОПВР;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПрочимДоходом Тогда

		////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
		
		Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.мТаблицаДвижений.Добавить();
		
		//Свойства
		Движение.Период 		= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.МесяцНалоговогоПериода	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоСтрокамДокумента.Результат;
	
	Иначе

		////////////////////////////////
		// ВзаиморасчетыСРаботникамиОрганизаций
		
		Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
		
		//Свойства
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.Результат;
		
		// Реквизиты
		Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения" 
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание)	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью" 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ОсновныеНачисления);
	МассивТЧ.Добавить(ДополнительныеНачисления);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	КраткийСоставВидовРасчетаДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставВидовРасчетаДокумента(ОсновныеНачисления, ДополнительныеНачисления);
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" 
//
Процедура ОбработкаПроведения(Отказ, Режим)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);

	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// основные Начисления

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;

			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, , , "ОбработкаПроведения").Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, "ОбработкаПроведения");
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
			КонецЦикла;

			////////////////////////////////////////////////////////////////////////
			// дополнительные Начисления

			// получим реквизиты табличной части
			ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, , , "ОбработкаПроведения").Выбрать();

			Пока ВыборкаПоДопНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ, Заголовок, "ОбработкаПроведения");
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуДопНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
			КонецЦикла;

			Если НЕ Отказ Тогда
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				Конеццикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
