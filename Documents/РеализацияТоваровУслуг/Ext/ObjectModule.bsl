////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;		
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				СтрокаТЧ.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
				СтрокаТЧ.СчетСписанияСебестоимостиНУ = СчетаУчета.СчетОтрицательныхОтклоненийНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоОтрицательныхОтклоненийНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");			
			КонецЕсли;
		КонецЕсли; 		
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			// Счет доходов и его аналитика
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				СтрокаТЧ.СчетДоходовНУ  = СчетаУчета.СчетДоходовОтРеализацииНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовНУ","СчетДоходовНУ", "СубконтоДоходовНУ");
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
				СтрокаТЧ.СчетДоходовНУ  = СчетаУчета.СчетПоложительныхОтклоненийНУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоПоложительныхОтклоненийНУ","СчетДоходовНУ", "СубконтоДоходовНУ");
			КонецЕсли;
		КонецЕсли; 	
		
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетДоходовНУ  		= ПланыСчетов.Налоговый.ПустаяСсылка();			
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоДоходовНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетСписанияСебестоимостиНУ 		= ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоСписанияСебестоимостиНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()

//Заполняет счета расчетов с контрагентами шапки документа
//
Процедура ОбработкаЗаполненияРегл(Основание)

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);

	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;

КонецПроцедуры // ОбработкаЗаполненияРегл()

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы З-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-2.
//
Функция ПечатьЗ2()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"	   , Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Склад,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Ответственный.ФизЛицо
	|		ИНАЧЕ РеализацияТоваровУслуг.Ответственный
	|	КОНЕЦ КАК Ответственный,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	РеализацияТоваровУслуг.УдалитьДоверенность,
	|	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.УчитыватьАкциз,
	|	РеализацияТоваровУслуг.СуммаВключаетАкциз,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО РеализацияТоваровУслуг.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекДокумент";
		
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияТоваровУслугТовары.НомерСтроки) КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаАкциза) КАК СуммаАкциза
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ТекДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код,
	|	РеализацияТоваровУслугТовары.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаАкциза)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаСтрокТоварыИтоги = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаСтрокТоварыИтоги.Следующий();
	
	ВыборкаСтрокТовары = ВыборкаСтрокТоварыИтоги.Выбрать();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	Макет = ПолучитьОбщийМакет("З2");

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_З2";

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеОтправителя = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	
	ОтветственныйДляПечати  = "";
	ДолжностьОтветственного = "";
	
	Если ТипЗнч(Шапка.Ответственный) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеОтветственного	= ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный, Дата); 
		ОтветственныйДляПечати  = ДанныеОтветственного.Представление;
		ДолжностьОтветственного = ДанныеОтветственного.Должность;
	Иначе
		ОтветственныйДляПечати = Шапка.Ответственный;
	КонецЕсли;	
		
	ОбластьМакета.Параметры.ОтветственныйЗаПоставку = ОтветственныйДляПечати;
		
	ПредставлениеПолучателя							= ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	УчитыватьНДС_       = Шапка.УчитыватьНДС;
	УчитыватьАкциз_     = Шапка.УчитыватьАкциз;
	СуммаВключаетНДС_   = Шапка.СуммаВключаетНДС;
	СуммаВключаетАкциз_ = Шапка.СуммаВключаетАкциз;
	
	ПрибавлятьНДС   = УчитыватьНДС_ И (НЕ СуммаВключаетНДС_);
	ПрибавлятьАкциз = УчитыватьАкциз_ И (НЕ СуммаВключаетАкциз_);

	// Выводим заголовок таблицы
	Если УчитыватьАкциз_ Тогда
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыАкциз");
	Иначе
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	КонецЕсли;
	ЗаголовокТаблицы.Параметры.Валюта = Шапка.ВалютаПредставление;
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	ИтогоКоличество = 0;
	// Выводим многострочную часть документа
	Если УчитыватьАкциз_ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыАкциз");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
	КонецЕсли;
	
	НомерСтроки = 1;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Количество = ВыборкаСтрокТовары.Количество;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
            ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерПП			  = НомерСтроки;
		ОбластьМакета.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное),ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное, ВыборкаСтрокТовары.Номенклатура);
		СуммаСНДС								  = ?(ПрибавлятьНДС, ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.СуммаНДС, ВыборкаСтрокТовары.Сумма);
		Если УчитыватьАкциз_ Тогда
			СуммаСНДС = ?(ПрибавлятьАкциз, СуммаСНДС + ВыборкаСтрокТовары.СуммаАкциза, СуммаСНДС);
		КонецЕсли;
		ОбластьМакета.Параметры.СуммаСНДС = СуммаСНДС;
		
		ИтогоКоличество = ИтогоКоличество + Количество;
		
		ТабДокумент.Вывести(ОбластьМакета);

		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

	// Выводим итоги по документу
	Если УчитыватьАкциз_ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоАкциз");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	КонецЕсли;
	
	ИтогоСумма = ВыборкаСтрокТоварыИтоги.Сумма;
	
	Если ИтогоСумма <> Неопределено Тогда 
		ИтогоСумма = ?(ПрибавлятьНДС, ИтогоСумма + ВыборкаСтрокТоварыИтоги.СуммаНДС, ИтогоСумма);
		ИтогоСумма = ?(ПрибавлятьАкциз, ИтогоСумма + ВыборкаСтрокТоварыИтоги.СуммаАкциза, ИтогоСумма);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогоСуммаНДС   = ВыборкаСтрокТоварыИтоги.СуммаНДС;
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	
	Если УчитыватьАкциз_ Тогда
		ОбластьМакета.Параметры.ИтогоСуммаАкциза = ВыборкаСтрокТоварыИтоги.СуммаАкциза;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета 				   = Макет.ПолучитьОбласть("ИтогоПрописью");
	ОбластьМакета.Параметры.Валюта = Шапка.ВалютаПредставление;
	                                                              
	ОбластьМакета.Параметры.КоличествоОтпущенныхЗапасовПрописью = ОбщегоНазначения.КоличествоПрописью(ИтогоКоличество);
	ОбластьМакета.Параметры.СуммаПрописью 						= ОбщегоНазначения.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ИтогоСумма),ИтогоСумма,0), Шапка.ВалютаДокумента);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// вывод подписей
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
		
	Руководители						= ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента,);
	Бухгалтер   						= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), "Не предусмотрен", Руководители.ГлавныйБухгалтер);
	ОбластьМакета.Параметры.ГлБухгалтер = Бухгалтер;
	
	ОбластьМакета.Параметры.ОтпускРазрешил			= ОтветственныйДляПечати;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтветственного;
			
	//данные по доверенности 		
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,Шапка);
	ОбщегоНазначения.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ОбластьМакета);

	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ							= ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.МОЛОтпустил = ДанныеМОЛ.Представление;
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьЗ2()

// Функция формирует табличный документ унифицированной формы Р-1
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме Р-1.
//
Функция ПечатьР1()
	
	ЗапросДок = Новый Запрос;
	ЗапросДок.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДок.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент КАК Заказчик,
	|	РеализацияТоваровУслуг.Организация КАК Исполнитель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо КАК Ответственный,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	РеализацияТоваровУслуг.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода,
	|	РеализацияТоваровУслуг.ДатаОкончанияОтчетногоПериода КАК ДатаОкончанияОтчетногоПериода,
	|	РеализацияТоваровУслуг.ПереченьДокументации КАК ПереченьДокументации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Док = ЗапросДок.Выполнить().Выбрать();
	Док.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияТоваровУслугУслуги.НомерСтроки) КАК НомерСтроки,
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК УслугаКод,
	|	СУММА(РеализацияТоваровУслугУслуги.Количество) КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
	|	РеализацияТоваровУслугУслуги.Цена
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	ОБЩИЕ";
	
	
	ВыборкаСтрокУслугиИтоги = ЗапросУслуги.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаСтрокУслугиИтоги.Следующий();
	
	ВыборкаСтрокУслуги = ВыборкаСтрокУслугиИтоги.Выбрать();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);

	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("Р1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	Запасы 			 = Макет.ПолучитьОбласть("Запасы");
	Подвал 			 = Макет.ПолучитьОбласть("Подвал");	
			
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Р1";

	////////////////////////////////////////////////////////////////////////
		
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-исполнитель
	ПредставлениеИсполнителя 				 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеИсполнителя = ПредставлениеИсполнителя;
	Шапка.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	// Организация-сдатчик
	СведенияОбОрганизацииЗаказчике 		   = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Заказчик, Док.Дата);
	ПредставлениеЗаказчика				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеЗаказчика = ПредставлениеЗаказчика;
	Шапка.Параметры.КонтрагентРНН_БИН	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	//Номер, Дата
	Шапка.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=Д");
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов); 
	
	//   Договор 
	Шапка.Параметры.ДокументОснование = Док.Основание;
	
	ТабДокумент.Вывести(Шапка);
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	ИтогоКоличество = 0;
	ИтогоСуммаНДС   = 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоСумма	    = 0;
	
	НомерСтроки = 1;
	
	УчитыватьНДС_     = Док.УчитыватьНДС;
	СуммаВключаетНДС_ = Док.СуммаВключаетНДС;

	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		Количество = ВыборкаСтрокУслуги.Количество;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
		
		Если УчитыватьНДС_ И НЕ СуммаВключаетНДС_ Тогда 
			
			СтрокаТаблицы.Параметры.Цена = Окр((ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС) / ВыборкаСтрокУслуги.Количество, 2) ;

			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
		Иначе 
			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;

			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
		КонецЕсли;
			
		СтрокаТаблицы.Параметры.НомерПП 					 = НомерСтроки;
		СтрокаТаблицы.Параметры.Наименование				 = ВыборкаСтрокУслуги.Содержание;
		СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаСтрокУслуги.ЕдиницаИзмерения;
		
		ИтогоКоличество = ИтогоКоличество + Количество;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	Итого.Параметры.ИтогоСумма 		= ИтогоСумма;
	Итого.Параметры.ИтогоКоличество = ИтогоКоличество;
	
    ТабДокумент.Вывести(Итого);
	
	// Запасы
	Запасы.Параметры.Заполнить(Док);
	ТабДокумент.Вывести(Запасы);
	
	//Подвал
	Подвал.Параметры.ДатаПринятия = Формат(Док.Дата, "ДЛФ=Д");
	Если ЗначениеЗаполнено(Док.Ответственный) Тогда 
		ДанныеМОЛ = ДанныеФизЛица(Док.Организация, Док.Ответственный, Док.Дата);
		Подвал.Параметры.ДолжностьОтветственного = ДанныеМОЛ.Должность;
		Подвал.Параметры.ФИООтветственного       = ДанныеМОЛ.Представление;
	КонецЕсли;
		
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьР1()

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчетсво
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан,НеСклонятьФамилию, Пол");

	ЕстьРаботникиОрганизации = Метаданные.РегистрыСведений.Найти("РаботникиОрганизаций") <> Неопределено;

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ФИОФизЛицСрезПоследних.НеСклонятьФамилию,
	|	ФизическиеЛица.Пол";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации";
	Иначе
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ФизическиеЛица.Должность";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + ",
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)) КАК ДокументКемВыдан
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаСреза, 
	|				ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза, 
	|				Сотрудник.ФизЛицо = &ФизЛицо 
	|				И Организация = &Организация
	|				И (Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо";
	КонецЕсли;
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо
	|	И ЕСТЬNULL(РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния, &Увольнение) <> &Увольнение";
	Если ЕстьРаботникиОрганизации Тогда
	ЗапросПоЛицам.Текст = ЗапросПоЛицам.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизацийСрезПоследних.Период УБЫВ
	|";
	КонецЕсли;
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Если Данные.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Данные);
		Результат.Представление = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ДанныеФизЛица()

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной()   
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Склад КАК Склад,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.УчитыватьАкциз,
	|	РеализацияТоваровУслуг.СуммаВключаетАкциз,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.УдалитьДоверенность,
	|	ОтветственныеЛицаСклад.ФизическоеЛицо КАК ОтпустилМОЛ,
	|	РеализацияТоваровУслуг.ДоверенностьЛицо,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО РеализацияТоваровУслуг.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	СуммаАкциза,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		СУММА(СуммаАкциза)   КАК СуммаАкциза,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Содержание,
	|	РеализацияТоваровУслуг.Содержание,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|   0,
	|	НомерСтроки,
	|	2
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Расходная накладная", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если (Шапка.Получатель <> Шапка.Грузополучатель) И ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
		ПредставлениеГрузополучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СокрЛП(ПредставлениеГрузополучателя);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
		
	//данные по доверенности 
	ОбластьМакета = Макет.ПолучитьОбласть("Доверенность");
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,Шапка);
	
	ОбщегоНазначения.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности,ОбластьМакета,,,,,Истина);
	Если ЗначениеЗаполнено(ОбластьМакета.Параметры.Доверенность) Тогда
		ТабДокумент.Вывести(ОбластьМакета); 
	КонецЕсли;

	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Если Товары.Количество() <> 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Склад");
		ОбластьМакета.Параметры.Склад = Шапка.Склад;
		ТабДокумент.Вывести(ОбластьМакета); 
	КонецЕсли;	
	
	ЕстьСкидки = Ложь;
	
	ОбластьШапка = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьШапка.Параметры.Колонка = Колонка;
	КонецЕсли;		
	ТабДокумент.Вывести(ОбластьШапка);

	ОбластьСтрока = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтрока.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтрока.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;				
		КонецЕсли;   	
		
		ТабДокумент.Вывести(ОбластьСтрока);
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма + ?((Шапка.УчитыватьАкциз И НЕ Шапка.СуммаВключаетАкциз), ВыборкаСтрокТовары.СуммаАкциза, 0);
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		
	КонецЦикла;

	// Вывести Итого
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьИтого);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");		
		ОбластьИтогоНДС.Параметры.НДС 	   = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьИтогоНДС.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Вывести(ОбластьИтогоНДС); 
		
		Если НЕ Шапка.СуммаВключаетНДС ТОгда
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = Сумма+СуммаНДС;
			ТабДокумент.Вывести(ОбластьИтогоСНДС);
		КонецЕсли;
		
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ЗапросТовары.Количество()
										   + ", на сумму " 	       + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтпустилМОЛПредставление = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.ОтпустилМОЛ);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой акта об обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Основание,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.СтруктурноеПодразделение,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо КАК Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Содержание КАК Номенклатура,
	|	Содержание КАК Товар,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Акт", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ОбластьМакета.Параметры.Поставщик = СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;	
	
	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
        ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	Если БанковскийСчетОрганизации.Пустая() Тогда	
		СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
	Иначе
		СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата, ,БанковскийСчетОрганизации);
	КонецЕсли;	

	ОбластьМакета.Параметры.Организация              = СведенияОбОрганизации.ПолноеНаименование;
	ОбластьМакета.Параметры.РНН_БИНОрганизации       = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Шапка.Дата);
	ОбластьМакета.Параметры.АдресОрганизации         = СведенияОбОрганизации.ЮридическийАдрес;
	ОбластьМакета.Параметры.РасчетныйСчетОрганизации = СведенияОбОрганизации.НомерСчета + " в " + СведенияОбОрганизации.Банк + " ," 
	                                                 + СведенияОбОрганизации.АдресБанка;
													 
   	ОбластьМакета.Параметры.БИКОрганизации           = СведенияОбОрганизации.БИК;													 
	Если ЗначениеЗаполнено(Шапка.Ответственный) Тогда 
		ДанныеМОЛ = ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный, Шапка.Дата);
		ОбластьМакета.Параметры.ДолжностьОтветственного = ДанныеМОЛ.Должность;
		ОбластьМакета.Параметры.ФИООтветственного       = ДанныеМОЛ.Представление;
	КонецЕсли;
	
	СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета.Параметры.Контрагент               = СведенияОПокупателе.ПолноеНаименование;
	ОбластьМакета.Параметры.РНН_БИНКонтрагента       = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Шапка.Дата);
	ОбластьМакета.Параметры.АдресКонтрагента         = СведенияОПокупателе.ЮридическийАдрес;
	ОбластьМакета.Параметры.РасчетныйСчетКонтрагента = СведенияОПокупателе.НомерСчета + " в " + СведенияОПокупателе.Банк + " ," 
	                                                 + СведенияОПокупателе.АдресБанка;
													 
   	ОбластьМакета.Параметры.БИККонтрагента           = СведенияОПокупателе.БИК;	
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьНакладной();
	ИначеЕсли ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
	ИначеЕсли ИмяМакета = "З2" Тогда
		ТабДокумент = ПечатьЗ2();
	ИначеЕсли ИмяМакета = "Р1" Тогда
		ТабДокумент = ПечатьР1();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли                   

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная,Акт, З2,Р1","Расходная накладная","Акт об оказании услуг", "З-2 (накладная на отпуск запасов)", "Р-1 (акт выполненных работ)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчетаВТабЧасти(ТабличнаяЧасть) Экспорт
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл		
		ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
	КонецЦикла;
Конецпроцедуры	
                                               
// Производит заполнение и установку реквизитов налогового учета и НДС 
// в строке табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
	ОбработкаТабличныхЧастей.ЗаполнитьАкцизВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
	
Конецпроцедуры	

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт

	Если ЗаполнятьБУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			  СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;	
			
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				СтрокаТЧ.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");			
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
				СтрокаТЧ.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетОтрицательныхОтклоненийБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоОтрицательныхОтклоненийБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");			
			КонецЕсли;
		КонецЕсли; 		
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			// Счет доходов и его аналитика
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				СтрокаТЧ.СчетДоходовБУ  = СчетаУчета.СчетДоходовОтРеализацииБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовБУ","СчетДоходовБУ", "СубконтоДоходовБУ");
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
				СтрокаТЧ.СчетДоходовБУ  = СчетаУчета.СчетПоложительныхОтклоненийБУ;
				ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоПоложительныхОтклоненийБУ","СчетДоходовБУ", "СубконтоДоходовБУ");
			КонецЕсли;
		КонецЕсли; 	

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаАкцизаПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			 СтрокаТЧ.СчетУчетаАкцизаПоРеализации = СчетаУчета.СчетУчетаАкцизаПоРеализации;
		КонецЕсли; 	
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации    = СчетаУчета.СчетУчетаНДСПоРеализации;
		КонецЕсли; 		
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			  СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;	
			
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетСписанияСебестоимостиБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоСписанияСебестоимостиБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		КонецЕсли; 		
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			// Счет доходов и его аналитика
			СтрокаТЧ.СчетДоходовБУ  = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоДоходовБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 			
		КонецЕсли; 	

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаАкцизаПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			 СтрокаТЧ.СчетУчетаАкцизаПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли; 	
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли; 		
	
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьСчетаБУ

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ,  МетаданныеДока);	
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ,  МетаданныеДока);
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();
		
	ЗаполнитьСчетаБУ(СтрокаТЧ, "Услуги", СчетаУчета, ЗаполнятьБУ,  МетаданныеДока);	
	ЗаполнитьСчетаНУ(СтрокаТЧ, "Услуги", СчетаУчета, ЗаполнятьНУ,  МетаданныеДока);
    
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(ЗаполнятьБУ,ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ,ЗаполнятьНУ)
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

Процедура СкопироватьТовары(Основание) Экспорт
    ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура,
	|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателюТовары.Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС,
	|	СчетНаОплатуПокупателюТовары.СтавкаАкциза,
	|	СчетНаОплатуПокупателюТовары.СуммаАкциза,
	// - КУФИБ - начало
	|	СчетНаОплатуПокупателюТовары.Заказ,
	// - КУФИБ - конец
	|	СчетНаОплатуПокупателюТовары.Коэффициент,
	|	СчетНаОплатуПокупателюТовары.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка";
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Товары);
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Товары", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Основание = Неопределено) Экспорт

	Если Основание = Неопределено Тогда
		ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
		ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
		ФормаПоступления.РежимВыбора = Истина;
		ФормаПоступления.Отбор.Организация.Значение = Организация;
		ФормаПоступления.Отбор.Организация.Использование = Истина;
		Поступление = ФормаПоступления.ОткрытьМодально();
	Иначе
		Поступление = Основание;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	 
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];

	Если ТабЧасть.Количество() > 0 И Режим = "Заполнить" Тогда

		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли

		ТабЧасть.Очистить();
		
		Если ИмяТабЧасти =  "Товары" Тогда
			НомераГТД.Очистить();
		КонецЕсли;
		
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ИмяТабЧасти = "Товары",",
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ИмяТабЧасти + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	| ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|УПОРЯДОЧИТЬ ПО
	| НомерСтроки";
ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТоваров.Следующий() Цикл
		
		Если ИмяТабЧасти = "Товары" Тогда
			
			СтруктураПоиска = Новый Структура;			
			СтруктураПоиска.Вставить("Номенклатура", ВыборкаТоваров.Номенклатура); 		
			СтруктураПоиска.Вставить("ЕдиницаИзмерения", ВыборкаТоваров.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("СтавкаНДС", ВыборкаТоваров.СтавкаНДС);
			
			СтрокаТЧ = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, ВыборкаТоваров, ТабЧасть, ЭтотОбъект.НомераГТД);
				
			СтрокаТЧ.ЕдиницаИзмерения = ВыборкаТоваров.ЕдиницаИзмерения;
			СтрокаТЧ.Коэффициент 	  = ВыборкаТоваров.Коэффициент;
			СтрокаТЧ.СтавкаНДС 		  = ВыборкаТоваров.СтавкаНДС;  
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТЧ);
			
			Если УчитыватьАкциз Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(СтрокаТЧ, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуАкцизаТабЧасти(СтрокаТЧ, ЭтотОбъект);
			КонецЕсли;
		Иначе
			
			СтрокаТЧ = ТабЧасть.Добавить();
			
			СтрокаТЧ.Номенклатура = ВыборкаТоваров.Номенклатура;
			СтрокаТЧ.Количество   = ВыборкаТоваров.Количество;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТЧ);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

Процедура СкопироватьУслуги(Основание) Экспорт
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.НомерСтроки,
	|	СчетНаОплатуПокупателюУслуги.Содержание,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Цена,
	|	СчетНаОплатуПокупателюУслуги.Сумма,
	|	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
	|	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	// - КУФИБ - начало
	|	СчетНаОплатуПокупателюУслуги.Заказ,
	// - КУФИБ - конец
	|	СчетНаОплатуПокупателюУслуги.Номенклатура
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка";
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого СтрокаТабличнойЧасти из Услуги Цикл
		ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти);
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти,"Услуги", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	КонецЦикла;	
КонецПроцедуры

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ВидОперации  =  Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты шапки по документу основанию.
		АдресДоставки = Основание.АдресДоставки;

		
		// заполним банковский счет отдельно, так как в процедуре ЗаполнитьШапкуДокументаПоОснованию 
		// обрабатывается реквизит "БанковскийСчет", а у нас "БанковскийСчетОрганизации"
		БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
				
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		СкопироватьТовары(Основание);
		СкопироватьУслуги(Основание);
		
		ДокументОснование = Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты шапки по документу основанию.
		Организация     = Основание.Организация;
		Склад           = Основание.Склад;
		ВалютаДокумента = Основание.ВалютаДокумента;
        		
		#Если Клиент Тогда
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		#КонецЕсли

		// Флаги включения налогов.
		УчитыватьНДС   = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);
		УчитыватьАкциз = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаАкциза(Организация, Дата);
		
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС   = ТипЦен.ЦенаВключаетНДС;
			СуммаВключаетАкциз = ТипЦен.ЦенаВключаетАкциз;
		Иначе
			СуммаВключаетНДС   = Истина;
			СуммаВключаетАкциз = Ложь;
		КонецЕсли;

		ЗаполнитьПоПоступлению("Товары" , "Заполнить", Основание);
		ДокументОснование = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		   		
		Если Основание.ПодтвержденДокументамиОтгрузки Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);				
				КонецЕсли;
				
			#КонецЕсли

			Возврат;       		
		КонецЕсли;  	
		
		Дата = Основание.ДатаСовершенияОборотаПоРеализации;
		
		ДокументОснование = Основание.Ссылка;
		
	
		Грузополучатель             = Основание.Контрагент;	 	
		Грузоотправитель            = Основание.Организация;
		БанковскийСчетОрганизации   = Основание.СчетОрганизации;
		АдресДоставки			    = Основание.ПунктНазначения;
		
		ДоверенностьВыдана = Основание.ДоверенностьВыдана;
		ДоверенностьДата = Основание.ДоверенностьДата;
		ДоверенностьЛицо = Основание.ДоверенностьЛицо;
		ДоверенностьНомер = Основание.ДоверенностьНомер;
		
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		
		ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
										и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);
										
		Если Товары.Количество() > 0 Тогда
			ЗаполнитьРеквизитыНалоговогоУчетаВТабЧасти(Товары);
			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		КонецЕсли;
		
		Если Услуги.Количество() > 0 Тогда
			ЗаполнитьРеквизитыНалоговогоУчетаВТабЧасти(Услуги);
			ЗаполнитьСчетаУчетаВТабЧастиУслуги(Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		КонецЕсли;			
				
	КонецЕсли;
	
	ОбработкаЗаполненияРегл(Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента) Экспорт

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаТоваров.Колонки.Добавить("КорСчетСписанияНУ");

			
	КоэффОплаты      = 0;

	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаТоваров.Колонки.Добавить("КорСубконтоСписанияНУ3");
	
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	
	ТаблицаТоваров.Колонки.Добавить("СтруктурноеПодразделение");
		
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	
	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если СтрокаТаблицы.Коэффициент<>0 Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			
			СтрокаТаблицы.КорСчетСписанияБУ = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;			
			СтрокаТаблицы.КорСубконтоСписанияБУ3 = Ссылка;
			
			СтрокаТаблицы.КорСчетСписанияНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();			
			СтрокаТаблицы.КорСубконтоСписанияНУ3 = Ссылка; 					
						
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
			
			СтрокаТаблицы.КорСчетСписанияБУ = СтрокаТаблицы.СчетСписанияСебестоимостиБУ;
			
			СтрокаТаблицы.КорСубконтоСписанияБУ1 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ1;
			СтрокаТаблицы.КорСубконтоСписанияБУ2 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ2;
			СтрокаТаблицы.КорСубконтоСписанияБУ3 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ3;
			
			СтрокаТаблицы.КорСчетСписанияНУ = СтрокаТаблицы.СчетСписанияСебестоимостиНУ;
			
			СтрокаТаблицы.КорСубконтоСписанияНУ1 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ1;
			СтрокаТаблицы.КорСубконтоСписанияНУ2 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ2;
			СтрокаТаблицы.КорСубконтоСписанияНУ3 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ3;
			
		КонецЕсли;

	КонецЦикла;

	ТаблицаТоваров.ЗаполнитьЗначения(КоэффОплаты,      									"КоэффОплаты");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                                 		"Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,              		"Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        		"Организация");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение,  "СтруктурноеПодразделение");
		
   	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, 		"ДоговорКонтрагента");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
								  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	//ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	//ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуУслуг()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

		
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	//ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	// Оборудование нельзя продать по договору, взаиморасчеты по которому ведутся по заказам.
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
	//   И  (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	//   ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
	//	ОбщегоНазначения.ОшибкаПриПроведении("Реализация оборудования не может производиться по договору с ведением взаиморасчетов """
	//	+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
	//	+ """.", Отказ, Заголовок);
	//КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");
	КонецЕсли;
			
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");				
	КонецЕсли;	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
//
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";

		Если СтруктураШапкиДокумента.УчитыватьАкциз Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Ставка акциза""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Необходимо очистить ставку акциза или указать ""Вид подакцизного товара"" у номенклатуры!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза)  И Не ЗначениеЗаполнено(СтрокаТЧ.АкцизВидОперацииРеализации) Тогда			
				СтрокаСообщения = "Не заполнено значение реквизита ""Акциз вид операции реализации""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);				
			КонецЕсли;  
		КонецЕсли;   		             		

		Если НЕ СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда

			Если СтруктураШапкиДокумента.УчитыватьНДС 
				И НЕ (УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) = 0) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчитыватьАкциз 
				И НЕ (УчетНДСИАкциза.ПолучитьСтавкуАкциза(СтрокаТЧ.СтавкаАкциза) = 0) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаАкцизаПоРеализации) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета акциза по реализации""!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет положительных отклонений (БУ)""!";
				Иначе
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (БУ)""!";
				КонецЕсли;
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КорСчетСписанияБУ) Тогда
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет отрицательных отклонений (БУ)""!";
				Иначе
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет списания себестоимости (БУ)""!";
				КонецЕсли;
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Содержание");
	СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");
	КонецЕсли;
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");		
	КонецЕсли;	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Услуги"": ";

		Если УчитыватьНДС 
			И НЕ (УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) = 0) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета НДС по реализации""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить движения по спецрегистрам подсистемы учета НДС
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",	ТаблицаПоУслугам);    
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыАкциз(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	//Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		//Возможны корректировки таблиц при расчетах в у.е.
		ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоТоварам,ТаблицаПоУслугам",ТаблицаПоТоварам,ТаблицаПоУслугам), Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету);
		
		//Распределение выручки по товарам по партиям
		СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, Партия, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетУчетаБУ, СчетУчетаНУ, 
												|СчетДоходовБУ,СчетДоходовНУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
												|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3,
												|СтавкаНДС, СтавкаАкциза, Сумма, СуммаВал, НДС, НДСВал, Акциз, АкцизВал, СуммаБезНДС, СуммаБезНДСВал,СуммаСписания, Количество");
		
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		// Для дальнейшей работы количество по услугам интереса не представляет.
		//ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
		
		//Дополним данными по таблице товаров с распределением по партиям
		//Развернем таблицу товаров по партиям для распределения выручки по БУ.
		
		ВыручкаПоТоварам = ТаблицаВыручки.Скопировать();
		ВыручкаПоТоварам.Очистить();
		
		ВыручкаПоТоварам.Колонки.Добавить("СчетСписанияСебестоимостиБУ");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ1");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ2");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ3");
		
		ВыручкаПоТоварам.Колонки.Добавить("СчетСписанияСебестоимостиНУ");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ1");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ2");
		ВыручкаПоТоварам.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ3");

		
		СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаВал,НДС,НДСВал, Акциз, АкцизВал,СуммаБезНДС,СуммаБезНДСВал");
		
		Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
			
			ТаблицаПартийБУ = СтрокаТаблицыТоваров.СписанныеПартииБУ;
			
			Для каждого Партия из ТаблицаПартийБУ Цикл
				
				СтрокаТаблицыВыручки = ВыручкаПоТоварам.Добавить();
				
				Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
					
					Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
						СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество;
						
					ИначеЕсли Не(ТаблицаПартийБУ.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
						
					ИначеЕсли Не(ТаблицаПоТоварам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
						СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыТоваров[Колонка.Имя];
						
					КонецЕсли;
					
				КонецЦикла; // Для каждого Колонка из ВыручкаПоТоварам.Колонки Цикл
				
			КонецЦикла; // Для каждого Партия из ТаблицаПартийБУ Цикл
			
		КонецЦикла; // Для каждого СтрокаТаблицыТоваров Из ТаблицаПоТоварам Цикл 
		
		//Распределим выручку по партиям
		
		ВыручкаПоТоварам = УправлениеВзаиморасчетами.СформироватьКорректирующиеЗаписи(ТаблицаПоТоварам,ВыручкаПоТоварам,СписокРаспределяемыхКолонок);
		
		ТаблицаВыручки.Колонки.Добавить("СчетСписанияСебестоимостиБУ");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ1");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ2");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиБУ3");
		
		
		ТаблицаВыручки.Колонки.Добавить("СчетСписанияСебестоимостиНУ");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ1");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ2");
		ТаблицаВыручки.Колонки.Добавить("СубконтоСписанияСебестоимостиНУ3");

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки );
		
		//Фиксация выручки и НДС по БУ (проводки)
		ВыручкаПоБУ = ТаблицаВыручки.Скопировать();
		
		//По НУ
		ВыручкаПоНУ = ТаблицаВыручки.Скопировать();

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			ВыручкаПоБУ.Свернуть("Номенклатура, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовБУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
								|СтавкаНДС, СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3",
								"Сумма, СуммаВал,СуммаБезНДС, СуммаБезНДСВал, НДС, НДСВал, Акциз, АкцизВал, Количество, СуммаСписания");
								
			НомСтр = ВыручкаПоБУ.Количество();
			
			Пока НомСтр > 0 Цикл
				
				НомСтр = НомСтр - 1;
				СтркаТЗ = ВыручкаПоБУ.Получить(НомСтр);
				
				Если СтркаТЗ.Сумма = 0 Тогда
					
					ВыручкаПоБУ.Удалить(НомСтр);
					
				КонецЕсли;
				
			КонецЦикла;
								
			ВыручкаПоБУ.Свернуть("СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовБУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
								|СтавкаНДС, СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3",
								"Сумма, СуммаВал,СуммаБезНДС, СуммаБезНДСВал, НДС, НДСВал, Акциз, АкцизВал, Количество, СуммаСписания");
								
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
			ВыручкаПоБУ.Свернуть("СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовБУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
								|СтавкаНДС",
								"Сумма, СуммаВал,СуммаБезНДС, СуммаБезНДСВал, НДС, НДСВал, Акциз, АкцизВал, Количество");
								
		КонецЕсли;

		Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
				
				СуммаПроводки 	 = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаСписания;
				
				КурсыВалют = РегистрыСведений.КурсыВалют.СрезПоследних(Дата, Новый Структура("Валюта", СтруктураШапкиДокумента.ВалютаВзаиморасчетов));
				КурсВалютыВзаиморачетов = 1;
				Если КурсыВалют.Количество() > 0 Тогда
					КурсВалютыВзаиморачетов = КурсыВалют[0].Курс;
				КонецЕсли;
				СуммаСписанияВал = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСписания, Константы.ВалютаРегламентированногоУчета.Получить(), СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
								  							  1, КурсВалютыВзаиморачетов);
				СуммаПроводкиВал = СтрокаТаблицы.СуммаБезНДСВал - СуммаСписанияВал;
				СуммаПроводкиВал = ?(СуммаПроводкиВал > 0, СуммаПроводкиВал, -СуммаПроводкиВал);
				
			Иначе	
				
				СуммаПроводки 	 = СтрокаТаблицы.СуммаБезНДС;
				СуммаПроводкиВал = СтрокаТаблицы.СуммаБезНДСВал;
				
			КонецЕсли;
			
			Если (Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению) 
				 Или (СуммаПроводки > 0)  Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма   	 = СуммаПроводки;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СуммаПроводкиВал;
					
				КонецЕсли;
				
				Проводка.СчетКт 	 = СтрокаТаблицы.СчетДоходовБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовБУ3);			
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					Проводка.Содержание = "Положит. отклонение ст-ти реал-ции от себест-ти ";
				Иначе
					Проводка.Содержание = "Выручка от реализации";
				КонецЕсли;
			
				Если Проводка.СчетКт.Валютный Тогда
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СуммаПроводкиВал;
				КонецЕсли;
				
			ИначеЕсли СуммаПроводки < 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма   	 = -СуммаПроводки;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетДт 	 = СтрокаТаблицы.СчетСписанияСебестоимостиБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,           СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ3);			
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СуммаПроводкиВал;
					
				КонецЕсли;
				
				Проводка.Содержание = "Отрицат. отклонение ст-ти реал-ции от себест-ти ";
				
				Если Проводка.СчетДт.Валютный Тогда
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СуммаПроводкиВал;
				КонецЕсли;
				
			КонецЕсли;
			
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.НДС;
				Проводка.Содержание  = "НДС";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
					
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
			КонецЕсли;
			
			// Акциз
			Если СтруктураШапкиДокумента.УчитыватьАкциз И СтрокаТаблицы.Акциз > 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТаблицы.Акциз;
				Проводка.Содержание  = "Акциз";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ТипыОпераций",           СтруктураШапкиДокумента.ТипОперации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					
					//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.АкцизВал;
					
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТаблицы.СчетУчетаАкцизаПоРеализации;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.Акциз);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
			КонецЕсли;
		КонецЦикла; // Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
		
		//Фиксация выручки по НУ (проводки)
		// Налоговый учет
		
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
			ВыручкаПоНУ = ТаблицаВыручки.Скопировать();
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					ВыручкаПоНУ.Свернуть("Номенклатура, СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3,
										|СтавкаНДС, СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3",
										"Сумма, СуммаБезНДС, НДС,  Акциз, АкцизВал, Количество, СуммаСписания");
					
					НомСтр = ВыручкаПоНУ.Количество();
					
					Пока НомСтр > 0 Цикл
						
						НомСтр = НомСтр - 1;
						СтркаТЗ = ВыручкаПоНУ.Получить(НомСтр);
						
						Если СтркаТЗ.Сумма = 0 Тогда
							
							ВыручкаПоНУ.Удалить(НомСтр);
							
						КонецЕсли;
						
					КонецЦикла;
					
					ВыручкаПоНУ.Свернуть("СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3,
											|СтавкаНДС, СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3",
											"Сумма, СуммаБезНДС, НДС, Акциз,  Количество, СуммаСписания");
											
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
					ВыручкаПоНУ.Свернуть("СчетУчетаНДСПоРеализации, СчетУчетаАкцизаПоРеализации, СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3,
										|СтавкаНДС",
										"Сумма, СуммаБезНДС, НДС, Акциз,  Количество");
					
				КонецЕсли;
				    		 			
			
			
			Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл			
				// Выручка
				Если СтрокаТаблицы.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					
					СуммаПроводки 	 = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаСписания; 									
				Иначе						
					СуммаПроводки 	 = СтрокаТаблицы.СуммаБезНДС;						
				КонецЕсли;
				
			Если (Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению) 
				 Или (СуммаПроводки > 0)  Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма   	 = СуммаПроводки;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);				
				
							
				ПроводкаНУ.СчетКт 	 = СтрокаТаблицы.СчетДоходовНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,           СтрокаТаблицы.СубконтоДоходовНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,           СтрокаТаблицы.СубконтоДоходовНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,           СтрокаТаблицы.СубконтоДоходовНУ3);			
				
				Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
					ПроводкаНУ.Содержание = "Положит. отклонение ст-ти реал-ции от себест-ти ";
				Иначе
					ПроводкаНУ.Содержание = "Выручка от реализации";
				КонецЕсли;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);
							
			ИначеЕсли СуммаПроводки < 0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма   	 = -СуммаПроводки;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				ПроводкаНУ.СчетДт 	 = СтрокаТаблицы.СчетСписанияСебестоимостиНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,           СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,           СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,           СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ3);			
				
				ПроводкаНУ.СчетКт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				 								
				ПроводкаНУ.Содержание = "Отрицат. отклонение ст-ти реал-ции от себест-ти ";
				
			    ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);  
							
			КонецЕсли; 
								
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.НДС;
				ПроводкаНУ.Содержание  = "НДС";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);				
			КонецЕсли;
			
			
			// Акциз
			Если СтруктураШапкиДокумента.УчитыватьАкциз И СтрокаТаблицы.Акциз > 0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = ДатаДока;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = СтрокаТаблицы.Акциз;
				ПроводкаНУ.Содержание  = "Акциз";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаАкцизаНУ(СтрокаТаблицы.СчетУчетаАкцизаПоРеализации, Дата);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.Акциз);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  ВидУчетаНУ);				
			КонецЕсли;
			
		КонецЦикла; // Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл			
	КонецЕсли;
			
			//сформируем движения для регистра "Реализация ТМЗ"
			ТаблицаВыручкиРеализацияТМЗ = ТаблицаВыручки.Скопировать();
			ТаблицаВыручкиРеализацияТМЗ.Свернуть("СчетУчетаБУ, Номенклатура, Партия","Сумма, СуммаСписания, Количество, НДС, Акциз");
			Для Каждого СтрокаРеализации ИЗ ТаблицаВыручкиРеализацияТМЗ Цикл
				
				ДвижениеРеализации = Движения.РеализацияТМЗ.Добавить();
				
				ДвижениеРеализации.Период 					= ДатаДока;
				ДвижениеРеализации.Организация 				= СтруктураШапкиДокумента.Организация;
				ДвижениеРеализации.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
				ДвижениеРеализации.Номенклатура 			= СтрокаРеализации.Номенклатура;
				
				Если ДвижениеРеализации.Номенклатура.Услуга Тогда
					ДвижениеРеализации.Склад 	  = Справочники.Склады.ПустаяСсылка();
					ДвижениеРеализации.Партия 	  = Неопределено;
					ДвижениеРеализации.СчетУчета  = ПланыСчетов.Типовой.ПустаяСсылка();
					ДвижениеРеализации.Стоимость  = 0;
					ДвижениеРеализации.Количество = СтрокаРеализации.Количество;
				Иначе
					ДвижениеРеализации.Склад 	  = СтруктураШапкиДокумента.Склад;
					ДвижениеРеализации.Партия 	  = СтрокаРеализации.Партия;
					ДвижениеРеализации.СчетУчета  = СтрокаРеализации.СчетУчетаБУ;
					ДвижениеРеализации.Стоимость  = СтрокаРеализации.СуммаСписания;
					ДвижениеРеализации.Количество = СтрокаРеализации.Количество;
				КонецЕсли;
				
				ДвижениеРеализации.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
				ДвижениеРеализации.Сумма 			  = СтрокаРеализации.Сумма;
				ДвижениеРеализации.НДС 				  = СтрокаРеализации.НДС;
				ДвижениеРеализации.Акциз 			  = СтрокаРеализации.Акциз;
				
			КонецЦикла;
					
	

	//КонецЕсли; 
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
		 
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              						
			УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);		
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета Акцищза "Акциз"
Процедура ДвиженияРегистровПодсистемыАкциз(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если не СтруктураШапкиДокумента.УчитыватьАкциз Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикАкциза = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	   СтруктураШапкиДокумента.Организация,
																	   глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	   Перечисления.РазделыНалоговогоУчета.Акциз);
	Иначе
		ПлательщикАкциза = СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	ДвиженияАкциз = Движения.Акциз;
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если  НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ДвиженияАкциз.Добавить();
		СтрокаДвижения.Период  		= СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация  = СтруктураШапкиДокумента.Организация;  
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;  
		СтрокаДвижения.Налогоплательщик = ПлательщикАкциза;  
		СтрокаДвижения.ВидОперации  = СтрокаТЧ.АкцизВидОперацииРеализации; 
		СтрокаДвижения.СтавкаАкциза = СтрокаТЧ.СтавкаАкциза;
		СтрокаДвижения.ТМЗ			= СтрокаТЧ.Номенклатура;
		СтрокаДвижения.Количество   = СтрокаТЧ.Количество/(?(СтрокаТЧ.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, СтрокаТЧ.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза));
		СтрокаДвижения.СуммаАкциза  = СтрокаТЧ.Акциз;
		
	КонецЦикла;	
	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект);
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
		
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);	
	

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	  	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;  	
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора", "ВидДоговора");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга"      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("Коэффициент"  , "Коэффициент");
	СтруктураПолей.Вставить("Сумма"       , "Сумма");
	
	СтруктураПолей.Вставить("СтавкаНДС"   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"         , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации",  "СчетУчетаНДСПоРеализации");
	
	СтруктураПолей.Вставить("СтавкаАкциза", "СтавкаАкциза");
	СтруктураПолей.Вставить("Акциз" , "СуммаАкциза");
	СтруктураПолей.Вставить("АкцизВидОперацииРеализации",  "АкцизВидОперацииРеализации");	
	СтруктураПолей.Вставить("СчетУчетаАкцизаПоРеализации", "СчетУчетаАкцизаПоРеализации");
	
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	
	СтруктураПолей.Вставить("СчетДоходовБУ","СчетДоходовБУ");
	
	СтруктураПолей.Вставить("СубконтоДоходовБУ1", "СубконтоДоходовБУ1");	
	СтруктураПолей.Вставить("СубконтоДоходовБУ2", "СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3", "СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СчетДоходовНУ",	  "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоДоходовНУ1", "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2", "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3", "СубконтоДоходовНУ3");
	
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ1",	"СубконтоСписанияСебестоимостиБУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ2",	"СубконтоСписанияСебестоимостиБУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ3",	"СубконтоСписанияСебестоимостиБУ3");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ1",	"СубконтоСписанияСебестоимостиНУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ2",	"СубконтоСписанияСебестоимостиНУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ3",	"СубконтоСписанияСебестоимостиНУ3");
	

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("СчетДоходовБУ" , 		"СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1", 	"СубконтоДоходовБУ1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2", 	"СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3", 	"СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СчетДоходовНУ" , 		"СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоДоходовНУ1", 	"СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2", 	"СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3", 	"СубконтоДоходовНУ3");
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

		
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);

	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	// Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);

		// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
							
		// Движения по товарам организаций							
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(Неопределено,СтруктураШапкиДокумента, Движения, Отказ);
		
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
								
			Если Не Отказ Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
			КонецЕсли;							
			
		Иначе
			
			// Движения документа по данному виду операции по налоговому учету не предусмотрены
		
		КонецЕсли;
		
	КонецЕсли;

	Если Не Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;
	
	
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Истина;
//мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();