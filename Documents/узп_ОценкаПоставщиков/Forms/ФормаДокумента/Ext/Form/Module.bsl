
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗагрузке", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Загрузить последние значения оценок для выбранного контрагента?'"), Режим, 0);
	//Ответ = Вопрос("Загрузить последние значения оценок для выбранного контрагента?",РежимДиалогаВопрос.ДаНет);
	//Если Ответ = КодВозвратаДиалога.Да Тогда 
	//	ПолучитьПоследниеОценкиКонтрагента(Объект.Дата, Объект.Контрагент)
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗагрузке(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ПолучитьПоследниеОценкиКонтрагента(Объект.Дата, Объект.Контрагент)
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДляСравненияПриИзменении(Элемент)
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

&НаКлиенте
Процедура ОценкаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Оценка.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Если ПолучитьСвойство(ТекущиеДанные.Критерий,"Предопределенный") Тогда 
			Элементы.ОценкаЗначение.ТолькоПросмотр = Истина;
			Элементы.ОценкаКомментарий.ТолькоПросмотр = Истина;
			//Элементы.ОценкаКритерий.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ОценкаЗначение.ТолькоПросмотр = Ложь;
			Элементы.ОценкаКомментарий.ТолькоПросмотр = Ложь;
			//Элементы.ОценкаКритерий.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если ПолучитьСвойство(ТекущиеДанные.Критерий,"СпособРасчетаОценки") = ПредопределенноеЗначение("Перечисление.узп_СпособыРасчетаОценок.Фиксированный") Тогда
			Элементы.ОценкаЗначение.МаксимальноеЗначение = 5;
			Элементы.ОценкаЗначение.МинимальноеЗначение = 0;
		Иначе
			Элементы.ОценкаЗначение.МаксимальноеЗначение = 0;
			Элементы.ОценкаЗначение.МинимальноеЗначение = 0 ;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Возврат Значение[Свойство];
КонецФункции

&НаСервере
Процедура ОценкаБалПриИзмененииНаСервере(Идентификатор)
	ТекущиеДанные = Объект.Оценка.НайтиПоИдентификатору(Идентификатор);
	Критерий = ТекущиеДанные.Критерий;
	ТекущиеДанные.Балл = РассчитатьПоШкале(Критерий,Критерий.Шкала,Объект.Дата,ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ОценкаЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Оценка.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ОценкаБалПриИзмененииНаСервере(Идентификатор);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ОбновитьКритерии(Команда)
	ОбновитьКритерииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуру(Команда)
	ОбновитьНоменклатуруНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели

		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьКритерииНаСервере();
	Если Не ЗначениеЗаполнено(Объект.Состояние) Тогда
		Объект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	//ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 


&НаСервере
Процедура ОбновитьКритерииНаСервере() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_КритерииОценкиПоставщиков.Ссылка КАК Критерий,
	               |	узп_КритерииОценкиПоставщиков.Комментарий,
	               |	узп_КритерииОценкиПоставщиков.СпособРасчетаОценки,
	               |	узп_КритерииОценкиПоставщиков.ТипЗначения,
	               |	узп_КритерииОценкиПоставщиков.Шкала,
	               |	узп_КритерииОценкиПоставщиков.Предопределенный
	               |ИЗ
	               |	ПланВидовХарактеристик.узп_КритерииОценкиПоставщиков КАК узп_КритерииОценкиПоставщиков
	               |ГДЕ
	               |	НЕ узп_КритерииОценкиПоставщиков.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.Оценка.НайтиСтроки(Новый Структура("Критерий",Выборка.Критерий));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Оценка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Комментарий = "" Тогда
					НайденнаяСтрока.Комментарий = Выборка.Комментарий;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗначенийКритериев();
КонецПроцедуры

&НаСервере
Процедура РасчетЗначенийКритериев()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_ДополнительныеХарактеристикиКонтрагентов.Контрагент,
	               |	узп_ДополнительныеХарактеристикиКонтрагентов.Дата,
	               |	РАЗНОСТЬДАТ(узп_ДополнительныеХарактеристикиКонтрагентов.Дата,&Дата, ГОД) КАК СрокДеятельности
	               |ИЗ
	               |	РегистрСведений.узп_ДополнительныеХарактеристикиКонтрагентов КАК узп_ДополнительныеХарактеристикиКонтрагентов
	               |ГДЕ
	               |	узп_ДополнительныеХарактеристикиКонтрагентов.Контрагент = &Контрагент";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачалаДеятельности = Выборка.Дата;
		СрокДеятельности = Выборка.СрокДеятельности;
	Иначе
		ДатаНачалаДеятельности = "Нет данных";
	КонецЕсли;
	НайденныеСтроки = Объект.Оценка.НайтиСтроки(Новый Структура("Критерий",ПланыВидовХарактеристик.узп_КритерииОценкиПоставщиков.СрокДеятельности));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		//Если Не ЗначениеЗаполнено(НайденнаяСтрока.Значение) тогда
			НайденнаяСтрока.Значение = СрокДеятельности;
		//КонецЕсли;
	КонецЦикла;
	
	
	Для Каждого СтрокаТЧ Из Объект.Оценка Цикл
		Идентификатор = СтрокаТЧ.ПолучитьИдентификатор();
		ОценкаБалПриИзмененииНаСервере(Идентификатор);
	КонецЦикла;
	
	ПолучитьЦеныНаТекущийЛот();
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоследниеОценкиКонтрагента(Дата, Контрагент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_ОценкаПоставщиковСрезПоследних.Период,
	               |	узп_ОценкаПоставщиковСрезПоследних.Регистратор,
	               |	узп_ОценкаПоставщиковСрезПоследних.НомерСтроки,
	               |	узп_ОценкаПоставщиковСрезПоследних.Активность,
	               |	узп_ОценкаПоставщиковСрезПоследних.Организация,
	               |	узп_ОценкаПоставщиковСрезПоследних.СтруктурноеПодразделение,
	               |	узп_ОценкаПоставщиковСрезПоследних.Контрагент,
	               |	узп_ОценкаПоставщиковСрезПоследних.Критерий,
	               |	узп_ОценкаПоставщиковСрезПоследних.Балл,
	               |	узп_ОценкаПоставщиковСрезПоследних.Значение
	               |ИЗ
	               |	РегистрСведений.узп_ОценкаПоставщиков.СрезПоследних(
	               |			&Дата,
	               |			Контрагент = &Контрагент
	               |				И НЕ Критерий = ЗНАЧЕНИЕ(ПланВидовХарактеристик.узп_КритерииОценкиПоставщиков.СрокДеятельности)) КАК узп_ОценкаПоставщиковСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	узп_ОценкаПоставщиковСрезПоследних.Период,
	               |	узп_ОценкаПоставщиковСрезПоследних.Регистратор,
	               |	узп_ОценкаПоставщиковСрезПоследних.НомерСтроки,
	               |	узп_ОценкаПоставщиковСрезПоследних.Активность,
	               |	узп_ОценкаПоставщиковСрезПоследних.Организация,
	               |	узп_ОценкаПоставщиковСрезПоследних.СтруктурноеПодразделение,
	               |	узп_ОценкаПоставщиковСрезПоследних.Контрагент,
	               |	узп_ОценкаПоставщиковСрезПоследних.Критерий,
	               |	узп_ОценкаПоставщиковСрезПоследних.Балл,
	               |	узп_ОценкаПоставщиковСрезПоследних.Значение
	               |ИЗ
	               |	РегистрСведений.узп_ОценкаПоставщиков.СрезПоследних(
	               |			,
	               |			Контрагент = &Контрагент
	               |				И Критерий = ЗНАЧЕНИЕ(ПланВидовХарактеристик.узп_КритерииОценкиПоставщиков.СрокДеятельности)) КАК узп_ОценкаПоставщиковСрезПоследних
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ДополнительныеХарактеристикиКонтрагентов КАК Контрагенты
				   //|		ПО узп_ОценкаПоставщиковСрезПоследних.Контрагент = Контрагенты.Контрагент
				   |";
	Результат = Запрос.Выполнить();
	//Выборка = Запрос.Выполнить().Выбрать();
	ВыборкаОценки = Результат.Выбрать();
	Пока ВыборкаОценки.Следующий() Цикл
		НайденныеСтроки = Объект.Оценка.НайтиСтроки(Новый Структура("Критерий",ВыборкаОценки.Критерий));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Оценка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОценки);
			ОценкаБалПриИзмененииНаСервере(НоваяСтрока.ПолучитьИдентификатор());
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Значение = ВыборкаОценки.Значение;
				ОценкаБалПриИзмененииНаСервере(НайденнаяСтрока.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПоШкале(Критерий,Шкала,Дата,Значение)
	Если Критерий.СпособРасчетаОценки = Перечисления.узп_СпособыРасчетаОценок.Фиксированный Тогда
		Возврат Значение
	КонецЕсли;
	//Если Критерий.ТипЗначения.типы().найти(Тип("Дата")) Тогда
	//	Возврат Значение
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Шкала",Шкала);
	Запрос.УстановитьПараметр("Значение",Значение);
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	узп_ШкалаОценкиПоставщиков.Результат
		               |ИЗ
		               |	РегистрСведений.узп_ШкалаОценкиПоставщиков.СрезПоследних(
		               |			&Дата,
		               |			Использовать = ИСТИНА
		               |				И Шкала = &Шкала
		               |				И (ЗначениеОт <= &Значение
		               |					ИЛИ ЗначениеОт = 0
		               |						И ЗначениеДо < 0)
		               |				И (ЗначениеДо >= &Значение
		               |					ИЛИ ЗначениеДо = 0
		               |						И ЗначениеОт > 0)) КАК узп_ШкалаОценкиПоставщиков";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	узп_ШкалаОценкиПоставщиков.Результат
		               |ИЗ
		               |	РегистрСведений.узп_ШкалаОценкиПоставщиков.СрезПоследних(
		               |			&Дата,
		               |			Использовать = ИСТИНА
		               |				И Шкала = &Шкала
		               |				И (ЗначениеОт = &Значение)) КАК узп_ШкалаОценкиПоставщиков";
	КонецЕсли;
				   
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	узп_ШкалаОценкиПоставщиковСрезПоследних.Результат
	//               |ИЗ
	//               |	РегистрСведений.узп_ШкалаОценкиПоставщиковСрезПоследних.СрезПоследних(
	//               |			&Дата,
	//               |			Использовать = ИСТИНА
	//               |				И Шкала = &Шкала
	//               |				И ВЫБОР
	//               |					КОГДА Шкала.ТипЗначенияШкалы = ЗНАЧЕНИЕ(Перечисление.узп_ТипыЗначенийШкалОценкиПоставщиков.Число)
	//               |						ТОГДА (&Значение > ЗначениеОт
	//               |								ИЛИ ЗначениеОт = 0)
	//               |								И (&Значение < ЗначениеДо
	//               |									ИЛИ ЗначениеДо = 0)
	//               |					КОГДА Шкала.ТипЗначенияШкалы = ЗНАЧЕНИЕ(Перечисление.узп_ТипыЗначенийШкалОценкиПоставщиков.Булево)
	//               |						ТОГДА ЗначениеОт = &Значение
	//               |					КОГДА Шкала.ТипЗначенияШкалы = ЗНАЧЕНИЕ(Перечисление.узп_ТипыЗначенийШкалОценкиПоставщиков.Дата)
	//               |						ТОГДА &Значение МЕЖДУ ЗначениеОт И ЗначениеДо
	//               |					КОГДА Шкала.ТипЗначенияШкалы = ЗНАЧЕНИЕ(Перечисление.узп_ТипыЗначенийШкалОценкиПоставщиков.ЗначенияКритериевОценки)
	//               |						ТОГДА ЗначениеОт = &Значение
	//               |				КОНЕЦ) КАК узп_ШкалаОценкиПоставщиковСрезПоследних";
	//			   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Результат;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьНоменклатуруНаСервере()
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.Текст = "";
КонецПроцедуры

&НаСервере
Процедура ПолучитьЦеныНаТекущийЛот()
	Запрос = Новый Запрос;
	МенеджерВТ=Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Лот",Объект.Лот);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_ЛотТовары.Ссылка,
	               |	узп_ЛотТовары.Номенклатура,
	               |	узп_ЛотТовары.Количество
	               |ПОМЕСТИТЬ ВТ_СписокТоваровЛота
	               |ИЗ
	               |	Документ.узп_Лот.Товары КАК узп_ЛотТовары
	               |ГДЕ
	               |	узп_ЛотТовары.Ссылка = &Лот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	Представление(ВТ_СписокТоваровЛота.Номенклатура) КАК ПозицияЛота,
	               |	ВТ_СписокТоваровЛота.Номенклатура КАК Номенклатура,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.ТипЦен КАК ТипЦен,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Цена,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Валюта,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Контрагент КАК Контрагент
	               |ИЗ
	               |	ВТ_СписокТоваровЛота КАК ВТ_СписокТоваровЛота
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПереченьЦенПоставщиков.СрезПоследних(
	               |				&Дата,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_СписокТоваровЛота.Номенклатура
	               |					ИЗ
	               |						ВТ_СписокТоваровЛота КАК ВТ_СписокТоваровЛота)) КАК узп_ПереченьЦенПоставщиковСрезПоследних
	               |		ПО ВТ_СписокТоваровЛота.Номенклатура = узп_ПереченьЦенПоставщиковСрезПоследних.Номенклатура
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	               |ПО
	               |	Контрагент,
	               |	ТипЦен";
		
	Результат = Запрос.Выполнить();
	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТЧАнализ = Новый ТаблицаЗначений;
	ТЧАнализ.Колонки.Добавить("Номенклатура");
	ТЧАнализ.Колонки.Добавить("Контрагент");
	ТЧАнализ.Колонки.Добавить("ТипЦен");
	ТЧАнализ.Колонки.Добавить("Цена");
	//////
	ТД = Новый ТабличныйДокумент;
	ОбластьВывода = ТД.ПолучитьОбласть(1,1,1,Результат.Колонки.Количество());
	Для Счетчик = 1 по Результат.Колонки.Количество() Цикл
		ОбластьШапки = ОбластьВывода.Область(2,Счетчик+1,2,Счетчик+1);
		ОбластьШапки.Текст = Результат.Колонки[Счетчик-1].Имя;
		ОбластьЗаполнения = ОбластьВывода.Область(3,Счетчик+1,3,Счетчик+1);
		ОбластьЗаполнения.Параметр=Результат.Колонки[Счетчик-1].Имя;
		ОбластьЗаполнения.Заполнение=ТипЗаполненияОбластиТабличногоДокумента.Параметр;
    КонецЦикла;
    ////
	Пока ВыборкаКонтрагент.Следующий() Цикл
		//ОбластьВывода.Параметры["ПозицияЛота"] = ВыборкаКонтрагент.ПозицияЛота;
		Если ВыборкаКонтрагент.Контрагент = Объект.Контрагент Тогда 
			ВыборкаТипЦен = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипЦен.Следующий() Цикл
				Выборка = ВыборкаТипЦен.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбластьВывода.Параметры.Заполнить(Выборка);
					ТД.Вывести(ОбластьВывода);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	АнализЦен.Вывести(ТД);
КонецПроцедуры
