

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник.фин_ПлановаяНоменклатура.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	дог_УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПланЗакупокПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаполненииОснованием", ЭтаФорма,);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить по документу-основанию?'"), Режим, 0);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Товары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НС.Количество = 1;
		Элементы.Товары.ТекущаяСтрока = НС.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ОбновитьСписокОценкок(Команда)
	ОбновитьСписокОценкокНаСервере();
	Если ДокументыКонтрагентов.ПолучитьЭлементы().Количество()>0 Тогда 
		Элементы.ДокументыКонтрагентов.Развернуть(ДокументыКонтрагентов.ПолучитьЭлементы().Получить(0).ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.Товары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.Товары,Истина,Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Объект.ТипЦен = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойТипЦенЗаказовПокупателей");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Состояние) Тогда
		Объект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
		Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьХарактеристики = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ИспользоватьХарактеристикиНоменклатурыПриПланированииЗакупок");
	
	ОбновитьСписокОценкокНаСервере();
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	//ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СформироватьНадписьЦеныИВалюта(Форма);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура ОбновитьСписокОценкокНаСервере()
	мДокументыКонтрагентов = РеквизитФормыВЗначение("ДокументыКонтрагентов");
	Документы.узп_Лот.ПолучитьСписокОценок(Объект.ссылка, мДокументыКонтрагентов);
	ЗначениеВРеквизитФормы(мДокументыКонтрагентов,"ДокументыКонтрагентов");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	дог_УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)
	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"Услуги","Товары"), Ложь);
	Иначе
		//узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор,Истина,ЭтаФорма,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	//ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		//Если ИмяТаблицы = "Товары" Тогда
		//	СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		//КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			//СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			//Если ИмяТаблицы = "Товары" Тогда
			//	СтрокаТабличнойЧасти.Коэффициент = 1;
			//КонецЕсли;
			//СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
			//НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),ИмяТаблицы)
		КонецЕсли;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаполненииОснованием(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ЗаполнитьПоОснованию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ОбъектДокумент,"Объект");
КонецПроцедуры

&наСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Если Не Значение = Неопределено Тогда
		Возврат Значение[Свойство];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДокументыКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДокументыКонтрагентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//ДокументыКонтрагентов.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()).ПолучитьРодителя().ПолучитьРодителя()
	Ид = ТекущиеДанные.ПолучитьИдентификатор();
	ТекущаяВетка = ДокументыКонтрагентов.НайтиПоИдентификатору(Ид);
	Если Не ТекущаяВетка = Неопределено Тогда 
		Контрагент = Неопределено;
		Родитель = ТекущаяВетка.ПолучитьРодителя();
		Пока Не Родитель = Неопределено Цикл
			Контрагент = Родитель.Контрагент;
			Родитель = Родитель.ПолучитьРодителя();
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Родитель = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущиеДанные.Документ = "Создать документ оценки поставщика" Тогда 
		Форма = ПолучитьФорму("Документ.узп_ОценкаПоставщиков.ФормаОбъекта");
		Форма.Объект.Контрагент = Контрагент;
		Форма.Объект.Лот = Объект.Ссылка;
		Форма.Объект.ДокументОснование = Объект.Ссылка;
		Форма.ОбновитьКритерииНаСервере();
		Форма.Открыть();
	ИначеЕсли ТекущиеДанные.Документ = "Создать документ регистрация цен поставщика" Тогда 
		Форма = ПолучитьФорму("Документ.узп_РегистрацияЦенПоставщиков.ФормаОбъекта");
		Форма.Объект.Контрагент = Контрагент;
		Форма.Объект.ДокументОснование = Объект.Ссылка;
		Форма.Объект.ТипЦен = Объект.ТипЦен;
		Форма.Объект.ДокументОснование = Объект.Ссылка;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			НоваяСтрока = Форма.Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Валюта = ПолучитьСвойство(Объект.ТипЦен,"ВалютаЦены");
			Если ИспользоватьХарактеристики Тогда 
				НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
			КонецЕсли;
			
		КонецЦикла;
		Форма.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма.Объект);
		Форма.Открыть();
	ИначеЕсли ТекущиеДанные.Документ = "Оценки поставщика" Тогда 
		
	ИначеЕсли ТекущиеДанные.Документ = "Регистрация цен поставщика" Тогда 
		
	ИначеЕсли Не ТекущиеДанные.Документ = Неопределено Тогда 
		ПоказатьЗначение(,ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ДокументыКонтрагентов.ПолучитьЭлементы().Количество()>0 Тогда 
		Элементы.ДокументыКонтрагентов.Развернуть(ДокументыКонтрагентов.ПолучитьЭлементы().Получить(0).ПолучитьИдентификатор(),Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка,,ТекущаяНоменклатура);
КонецПроцедуры
