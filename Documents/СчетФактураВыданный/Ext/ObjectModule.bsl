Перем мВалютаРегламентированногоУчета Экспорт;
Перем ИзмененДоговорКонтрагента Экспорт;
Перем СписокВыбораСчетФактур Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ИнициализацияТаблицыСтрок()

	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("НомерСтроки");
	ТаблицаСтрок.Колонки.Добавить("ТоварНаименование");
	ТаблицаСтрок.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаСтрок.Колонки.Добавить("Количество");
	ТаблицаСтрок.Колонки.Добавить("ЦенаБезНДС");
	ТаблицаСтрок.Колонки.Добавить("ЦенаБезНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтоимостьБезНДС");
	ТаблицаСтрок.Колонки.Добавить("СтоимостьБезНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтавкаНДС");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДС");
	ТаблицаСтрок.Колонки.Добавить("СуммаНДСРегл");
	ТаблицаСтрок.Колонки.Добавить("СтавкаАкциза");
	ТаблицаСтрок.Колонки.Добавить("СуммаАкциза");
	ТаблицаСтрок.Колонки.Добавить("СуммаАкцизаРегл");
	ТаблицаСтрок.Колонки.Добавить("Всего");
	ТаблицаСтрок.Колонки.Добавить("ВсегоРегл");
	ТаблицаСтрок.Колонки.Добавить("НомерГТД");
	ТаблицаСтрок.Колонки.Добавить("ДатаОборота");
	ТаблицаСтрок.Колонки.Добавить("КодТНВЭД");
	
	Возврат ТаблицаСтрок;
    
КонецФункции // ИнициализацияТаблицыСтрок()

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	Если ДатаОборотаВТабличнойЧасти Тогда
		
		СтруктураТабличныхЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
		
		Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из ЭтотОбъект[КлючЗначение.Ключ] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда 
					СтрокаТаблицы.ДатаОборота = Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументыОснования.Количество()=0 
		или не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		
		// Основание не выбрано, установим датой совершения оборота дату выписки счета-фактуры, прочие параметры не определяем
		Если НЕ ЗначениеЗаполнено(ДатаСовершенияОборотаПоРеализации) Тогда
			ДатаСовершенияОборотаПоРеализации = Дата;
		КонецЕсли;
		
		Возврат;
	КонецЕсли; 
	
	Док = ДокументыОснования[0].ДокументОснование;
	
	Если Не ЗначениеЗаполнено(Док) Тогда
		Возврат;
	КонецЕсли;
		
	МетаДок = Док.Метаданные();

	Если НЕ МетаДок.Реквизиты.Найти("ВалютаДокумента") = Неопределено  И Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Док.ВалютаДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) И НЕ МетаДок.Реквизиты.Найти("Организация") = Неопределено Тогда
		Организация = Док.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) И НЕ МетаДок.Реквизиты.Найти("Контрагент") = Неопределено Тогда
		Контрагент = Док.Контрагент;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ МетаДок.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДоговорКонтрагента = Док.ДоговорКонтрагента;
		ИзмененДоговорКонтрагента = Истина;  		
	КонецЕсли;       		
    	
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
	// установим плательщика и покупателя
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
	КонецЕсли;	
	
	// Страна назначения
	Если НЕ ЗначениеЗаполнено(СтранаНазначения) Тогда
		СтранаНазначения = ?(ЗначениеЗаполнено(Покупатель.СтранаРезидентства), Покупатель.СтранаРезидентства, Справочники.КлассификаторСтранМира.Казахстан);
	КонецЕсли;	
	
	// Дата совершения оборота  = дата выписки документа реализации
	Если НЕ ЗначениеЗаполнено(ДатаСовершенияОборотаПоРеализации) Тогда
		 ДатаСовершенияОборотаПоРеализации = Док.Дата;
	КонецЕсли;	

КонецПроцедуры        

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
Процедура ЗаполнитьРеквизитыДокумента() Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.Сторнирование") Тогда
		ДокументОсн = ДокументОснование.ДокументОснование;
	Иначе
		ДокументОсн = ДокументОснование;
	КонецЕсли;
	 	
			
	Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", ДокументОсн.ПолучитьОбъект().Метаданные())
			 И ЗначениеЗаполнено(ДокументОсн.БанковскийСчетОрганизации)  Тогда
			СчетОрганизации				= ДокументОсн.БанковскийСчетОрганизации;
		Иначе
			СчетОрганизации				= Организация.ОсновнойБанковскийСчет;
		КонецЕсли;      		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетКонтрагента) И ЗначениеЗаполнено(Контрагент)Тогда
		СчетКонтрагента				= Контрагент.ОсновнойБанковскийСчет; 		    		
	КонецЕсли;
        		
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Грузополучатель", ДокументОсн.ПолучитьОбъект().Метаданные()) Тогда
		Грузополучатель				= ?(ДокументОсн.Грузополучатель.Пустая(),ДокументОсн.Контрагент, ДокументОсн.Грузополучатель);
	Иначе
		Грузополучатель             = ДокументОсн.Контрагент;
	КонецЕсли; 
			
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьЛицо", ДокументОсн.ПолучитьОбъект().Метаданные()) 
		И ЗначениеЗаполнено(ДокументОсн.ДоверенностьЛицо)Тогда     
		ДоверенностьЛицо				= ДокументОсн.ДоверенностьЛицо;	
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьНомер", ДокументОсн.ПолучитьОбъект().Метаданные()) 
		И ЗначениеЗаполнено(ДокументОсн.ДоверенностьНомер)Тогда     
		ДоверенностьНомер				= ДокументОсн.ДоверенностьНомер;	
	КонецЕсли; 

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьДата", ДокументОсн.ПолучитьОбъект().Метаданные()) 
		И ЗначениеЗаполнено(ДокументОсн.ДоверенностьДата)Тогда     
		ДоверенностьДата				= ДокументОсн.ДоверенностьДата;	
	КонецЕсли; 

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоверенностьВыдана", ДокументОсн.ПолучитьОбъект().Метаданные()) 
		И ЗначениеЗаполнено(ДокументОсн.ДоверенностьВыдана)Тогда     
		ДоверенностьВыдана				= ДокументОсн.ДоверенностьВыдана;	
	КонецЕсли; 

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("АдресДоставки", ДокументОсн.ПолучитьОбъект().Метаданные())
		 И ЗначениеЗаполнено(ДокументОсн.АдресДоставки)Тогда
		АдресДоставки				= СокрЛП(ДокументОсн.АдресДоставки);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Контрагент, Дата),"ЮридическийАдрес,");
	КонецЕсли;
	
	ПунктНазначения = АдресДоставки;

	Грузоотправитель            = ДокументОсн.Организация;
    	
	УсловияОплаты				= ?(ЗначениеЗаполнено(ДоговорКонтрагента.УсловияОплаты), ДоговорКонтрагента.УсловияОплаты, "безналичный расчет");
	СпособОтправления			= "самовывоз"; 
	УсловияПоставки						= ?(ЗначениеЗаполнено(ДоговорКонтрагента.УсловияПоставки),ДоговорКонтрагента.УсловияПоставки,"");
	
	// в соответствии со ст. 263 в счете-фактуре могут указываться реквизиты    	
	
КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

//Процедура заполняет реквизит "Осн. счет-фактура", если для укзанных документов оснований, были
//уже введены счет-фактуры, т.е. введенная счет-фактура является дополнительной
//
Процедура ЗаполнитьОсновнойСчетФактура() Экспорт
	
	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			СписокВыбораСчетФактур = Новый СписокЗначений;
			Для Каждого ДокументОсн Из ДокументыОснования Цикл				
				Если ДокументОсн.ДокументОснование = Неопределено Тогда
					Продолжить;
				КонецЕсли;						
				СчетФактураОсновная = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОсн.ДокументОснование.ДокументОснование,"СчетФактураВыданный");		
				Если  Не ЗначениеЗаполнено(СчетФактураОсновная) Тогда
					Продолжить;
				Иначе
					СписокВыбораСчетФактур.Добавить(СчетФактураОсновная);
				КонецЕсли;				
			КонецЦикла;
			Если СписокВыбораСчетФактур.Количество() = 1  Тогда
				ОсновнойСчетФактура = СписокВыбораСчетФактур[0].Значение;
			Иначе
				ОсновнойСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ОсновнойСчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОснование.ДокументОснование,"СчетФактураВыданный");						
		КонецЕсли;				
	Иначе
		ОсновнойСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;  
	
КонецПроцедуры

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	УчитыватьНДСОснования = Ложь;
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.Сторнирование") Тогда
		Если Не ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
			Сообщить("В документе: " + Основание + " не заполнен документ сторнирование. Нет данных для заполнения счет-фактуры");
			Возврат;
		КонецЕсли;
		
		ЕстьДокумент = Ложь;
		СписокДокументов = ОбщегоНазначения.ПолучитьСписокВводимыхДокументовНаОсновании(Документы.СчетФактураВыданный.ПустаяСсылка().Метаданные());
		Для Каждого Элемент ИЗ  СписокДокументов Цикл
			Если НЕ ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка." + Элемент.Значение) Тогда
				Продолжить;
			Иначе
				ЕстьДокумент = Истина;
				УчитыватьНДСОснования = Основание.УчитыватьНДС;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если Не ЕстьДокумент Тогда
			Сообщить("Для сторнируемого документа: " + Основание.ДокументОснование + " не предусмотрен ввод счет-фактуры выданной", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	Иначе
		УчитыватьНДСОснования = Основание.УчитыватьНДС;
	КонецЕсли;
		
	Если Основание.Дата <> КонецДня(Основание.Дата) Тогда
		Дата = Основание.Дата+1;
	Иначе
		Дата = Основание.Дата;
	КонецЕсли;	
	
	Если Основание.Метаданные().Имя = "ВозвратТоваровОтПокупателя" Тогда
		ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	Иначе
		ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
	КонецЕсли;

	ДокументОснование = Основание.Ссылка;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СпособВыставления) Тогда
		СпособВыставления = Перечисления.СпособыОбменаДокументами.Бумажно;
	КонецЕсли;
	
	ЗаполнитьОсновнойСчетФактура();
	
	//раз вводим на основани то будем запрещать пользователю редактировать данные
	ПодтвержденДокументамиОтгрузки = Истина;
	
	//добавим документ-основания в табличную часть
	НоваяСтрока = ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = Основание.Ссылка;
	
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.Сторнирование") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание.ДокументОснование);
	Иначе
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;
		
	//из документа основания
	ЗаполнитьРеквизитыДокумента();
	
	//заполним табличные части
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);		
	СвернутьТабличныеЧасти();	
	   	
	УчетНДСИАкциза.ПроверитьСтавкиНДСВТабличныхЧастях(ЭтотОбъект, УчитыватьНДСОснования);
	
	// установим плательщика и покупателя
	Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);
	Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
	 	
	ДатаСовершенияОборотаПоРеализации = Основание.Дата;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПодписанияГЗ", Основание.Метаданные())
		И  Услуги.Количество() > 0 Тогда
		ДатаПодписанияГЗ = Основание.ДатаПодписанияГЗ;
		Если ЗначениеЗаполнено(ДатаПодписанияГЗ) Тогда
			ДатаСовершенияОборотаПоРеализации = ДатаПодписанияГЗ;
		КонецЕсли;
	КонецЕсли;

	// Страна назначения
	Если НЕ ЗначениеЗаполнено(СтранаНазначения) Тогда
		СтранаНазначения = ?(ЗначениеЗаполнено(Покупатель.СтранаРезидентства), Покупатель.СтранаРезидентства, Справочники.КлассификаторСтранМира.Казахстан);
	КонецЕсли;	
	#Если Клиент Тогда
		Если Не ЗначениеЗаполнено(ПунктНазначения) Тогда
			Если ТипЗнч(Основание) =  Тип("ДокументСсылка.Сторнирование") Тогда
				
				АдресДоставки = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Основание.ДокументОснование.Контрагент, Дата),"ЮридическийАдрес,");
			
			КонецЕсли; 			
		КонецЕсли;		
	#КонецЕсли
	
	КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив;
Функция СвернутьМассив(Массив) Экспорт
	Результат = Новый Массив;
	ДополнитьМассив(Результат, Массив, Истина);
	Возврат Результат;
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в массив будут включены только те значения, которых в нем еще нет, причем единожды.
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Для Каждого Значение Из МассивИсточник Цикл
		Если Не ТолькоУникальныеЗначения Или МассивПриемник.Найти(Значение) = Неопределено Тогда
			МассивПриемник.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Если Клиент Тогда

//Функция собирает данные по документам основания
//
Функция СобратьДанныеТабличныхЧастейДляПечатиСНомерамиГТД() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПоказыватьНомераГТД", Истина);
	Запрос.УстановитьПараметр("НомерГТДПустаяСсылка", Справочники.НомераГТД.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК ID,
	|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
	|	СчетФактураВыданныйТовары.Номенклатура,
	|	СчетФактураВыданныйТовары.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	СчетФактураВыданныйТовары.ЕдиницаИзмерения,
	|	СчетФактураВыданныйТовары.Количество КАК Количество,
	|	СчетФактураВыданныйТовары.СтавкаАкциза,
	|	СчетФактураВыданныйТовары.СтавкаНДС,
	|	СчетФактураВыданныйТовары.Цена,
	|	СчетФактураВыданныйТовары.СуммаАкциза КАК Акциз,
	|	СчетФактураВыданныйТовары.СуммаНДС КАК НДС,
	|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
	|	ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерГТД, &НомерГТДПустаяСсылка) КАК НомерГТД,
	|	ВЫБОР  
	|		КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 1)
	|	КОНЕЦ КАК БазисРаспределения,
	|	СчетФактураВыданныйТовары.КлючСвязи,
	|	СчетФактураВыданныйТовары.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.НомераГТД КАК СчетФактураВыданныйНомераГТД
	|		ПО СчетФактураВыданныйТовары.КлючСвязи = СчетФактураВыданныйНомераГТД.КлючСвязи
	|			И (СчетФактураВыданныйНомераГТД.Ссылка = &ТекущийДокумент)
	|ГДЕ
	|	СчетФактураВыданныйТовары.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СчетФактураВыданныйУслуги.НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ СчетФактураВыданныйУслуги.Содержание = """"
	|			ТОГДА СчетФактураВыданныйУслуги.Содержание
	|		ИНАЧЕ СчетФактураВыданныйУслуги.Номенклатура
	|	КОНЕЦ,
	|	0,
	|	СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетФактураВыданныйУслуги.Количество,
	|	"""",
	|	СчетФактураВыданныйУслуги.СтавкаНДС,
	|	СчетФактураВыданныйУслуги.Цена,
	|	0,
	|	СчетФактураВыданныйУслуги.СуммаНДС,
	|	СчетФактураВыданныйУслуги.Сумма,
	|	&НомерГТДПустаяСсылка,
	|	1,
	|	0,
	|	СчетФактураВыданныйУслуги.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|ГДЕ
	|	СчетФактураВыданныйУслуги.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СчетФактураВыданныйОС.НомерСтроки,
	|	СчетФактураВыданныйОС.ОсновноеСредство,
	|	0,
	|	""шт"",
	|	1,
	|	"""",
	|	СчетФактураВыданныйОС.СтавкаНДС,
	|	СчетФактураВыданныйОС.Сумма,
	|	0,
	|	СчетФактураВыданныйОС.СуммаНДС,
	|	СчетФактураВыданныйОС.Сумма,
	|	&НомерГТДПустаяСсылка,
	|	1,
	|	0,
	|	СчетФактураВыданныйОС.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	|ГДЕ
	|	СчетФактураВыданныйОС.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	1,
	|	СчетФактураВыданныйНМА.НематериальныйАктив,
	|	0,
	|	""шт"",
	|	1,
	|	"""",
	|	СчетФактураВыданныйНМА.СтавкаНДС,
	|	СчетФактураВыданныйНМА.Сумма,
	|	0,
	|	СчетФактураВыданныйНМА.СуммаНДС,
	|	СчетФактураВыданныйНМА.Сумма,
	|	&НомерГТДПустаяСсылка,
	|	1,
	|	0,
	|	СчетФактураВыданныйНМА.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	|ГДЕ
	|	СчетФактураВыданныйНМА.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
				   
	ОбщаяТаблицаДляПечати = Запрос.Выполнить().Выгрузить();
		
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.
	МассивНайденныхСтрок = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);
	ТаблицаТовары = ОбщаяТаблицаДляПечати.Скопировать(МассивНайденныхСтрок);
	
	МассивКлючейСвязи = ТаблицаТовары.ВыгрузитьКолонку("КлючСвязи");
	МассивКлючейСвязи = СвернутьМассив(МассивКлючейСвязи);
	
	Для Каждого КлючСвязи Из МассивКлючейСвязи Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", КлючСвязи);
		МассивСтрокСКлючомСвязи = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		
		МассивБазисовРаспределения = Новый Массив;
		Для Каждого СтрокаСКлючомСвязи Из МассивСтрокСКлючомСвязи Цикл
			МассивБазисовРаспределения.Добавить(СтрокаСКлючомСвязи.БазисРаспределения);	
		КонецЦикла;
		
		КоличествоДляРаспределения = МассивСтрокСКлючомСвязи[0].Количество;
		Если КоличествоДляРаспределения <> 0 Тогда
			РаспределенныйКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйКоличество.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Количество = РаспределенныйКоличество[Индекс];
			КонецЦикла;
		КонецЕсли;		
		
		АкцизДляРаспределения = МассивСтрокСКлючомСвязи[0].Акциз;
		Если АкцизДляРаспределения <> 0 Тогда
			РаспределенныйАкциз = ОбщегоНазначения.РаспределитьПропорционально(АкцизДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйАкциз.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Акциз = РаспределенныйАкциз[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		НДСДляРаспределения = МассивСтрокСКлючомСвязи[0].НДС;
		Если НДСДляРаспределения <> 0 Тогда
			РаспределенныйНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйНДС.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].НДС = РаспределенныйНДС[Индекс];
			КонецЦикла;
		КонецЕсли;

		СуммаДляРаспределения = МассивСтрокСКлючомСвязи[0].Сумма;
		Если СуммаДляРаспределения <> 0 Тогда
			РаспределенныйСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйСумма.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Сумма = РаспределенныйСумма[Индекс];
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалить из ОбщаяТаблицаДляПечати все записи по товарам.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.	
	Пока Истина Цикл
		МассивстрокДляУдаления = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);	
		Если МассивстрокДляУдаления.Количество() = 0 Тогда
			Прервать;
		Иначе
			ОбщаяТаблицаДляПечати.Удалить(МассивстрокДляУдаления[0]);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
		НоваяСтрока = ОбщаяТаблицаДляПечати.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары, , "НомерСтроки");
	КонецЦикла;
	
	// Группировка и сортировка перед выводом.
	ЗапросДляГруппировки = Новый Запрос;
	ЗапросДляГруппировки.Текст =
	"ВЫБРАТЬ
	|	ОбщаяТаблицаДляПечати.ID,
	|	ОбщаяТаблицаДляПечати.НомерСтроки КАК НомерСтроки,
	|	ОбщаяТаблицаДляПечати.Номенклатура,
	|	ОбщаяТаблицаДляПечати.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ОбщаяТаблицаДляПечати.ЕдиницаИзмерения,
	|	ОбщаяТаблицаДляПечати.Количество КАК Количество,
	|	ОбщаяТаблицаДляПечати.СтавкаАкциза,
	|	ОбщаяТаблицаДляПечати.СтавкаНДС,
	|	ОбщаяТаблицаДляПечати.Цена,
	|	ОбщаяТаблицаДляПечати.Акциз КАК Акциз,
	|	ОбщаяТаблицаДляПечати.НДС КАК НДС,
	|	ОбщаяТаблицаДляПечати.Сумма КАК Сумма,
	|	ОбщаяТаблицаДляПечати.НомерГТД,
	|	ОбщаяТаблицаДляПечати.ДатаОборота
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ОбщаяТаблицаДляПечати КАК ОбщаяТаблицаДляПечати
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ID КАК ID,
	|	МИНИМУМ(ВТ.НомерСтроки) КАК НомерСтроки,
	|	ВТ.Номенклатура,
	|	СУММА(ВТ.КоэффициентРасчетаОблагаемойБазыАкциза) КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ВТ.ЕдиницаИзмерения,
	|	СУММА(ВТ.Количество) КАК Количество,
	|	ВТ.СтавкаАкциза,
	|	ВТ.СтавкаНДС,
	|	ВТ.Цена,
	|	СУММА(ВТ.Акциз) КАК Акциз,
	|	СУММА(ВТ.НДС) КАК НДС,
	|	СУММА(ВТ.Сумма) КАК Сумма,
	|	ВТ.НомерГТД,
	|	ВТ.ДатаОборота
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ID,
	|	ВТ.Номенклатура,
	|	ВТ.ЕдиницаИзмерения,
	|	ВТ.СтавкаАкциза,
	|	ВТ.СтавкаНДС,
	|	ВТ.Цена,
	|	ВТ.НомерГТД,
	|	ВТ.ДатаОборота
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	ЗапросДляГруппировки.УстановитьПараметр("ОбщаяТаблицаДляПечати", ОбщаяТаблицаДляПечати);
	ОбщаяТаблицаДляПечати = ЗапросДляГруппировки.Выполнить().Выгрузить(); 
		
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// используем процедуру общего модуля так как для валютных расчетов могут быть погрешности округления при пересчете по строкам
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ОбщаяТаблицаДляПечати, СтруктураШапкиДокумента, Истина);
	
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ЭтотОбъект);
	
	ТекстДовереренности = ОбщегоНазначения.ПолучитьТекстДоверенности(ДанныеДоверенности);
	ПараметрВыдана = "";
	ПараметрЛицо   = "";
	Если ЗначениеЗаполнено(ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ДоверенностьЛицо) Тогда
		ТекстДовереренности = ТекстДовереренности +  НСтр("ru=', выданной %1%2'");
		
		Если ЗначениеЗаполнено(ДоверенностьВыдана) Тогда
			ПараметрВыдана = СокрЛП(ДоверенностьВыдана);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоверенностьЛицо)Тогда
			Если ЗначениеЗаполнено(ПараметрВыдана) Тогда
				ПараметрЛицо = ", " + СокрЛП(ДоверенностьЛицо);
			Иначе
				ПараметрЛицо = СокрЛП(ДоверенностьЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   		
	
	ТекстДовереренности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДовереренности, ПараметрВыдана, ПараметрЛицо);
	Если Не ЗначениеЗаполнено(ТекстДовереренности) Тогда
		ТекстДовереренности = НСтр("ru='Без доверенности'")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОтправленияПоКлассификатору) Тогда
		мМакетКодовСпособаОтправления 	= ПолучитьОбщийМакет("ПФ_MXL_СпособыОтправления");
		мОбластьСтрокСпособаОтправления = мМакетКодовСпособаОтправления.Области.Найти("Классификатор");
		НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(
			мМакетКодовСпособаОтправления, мОбластьСтрокСпособаОтправления, СпособОтправленияПоКлассификатору);
		
		Если НЕ ПустаяСтрока(НаименованиеСтроки) Тогда
			СпособОтправленияПечать = СпособОтправленияПоКлассификатору +" ("+НаименованиеСтроки+")";
		Иначе
			СпособОтправленияПечать = СпособОтправленияПоКлассификатору;
		КонецЕсли;
	Иначе
		СпособОтправленияПечать = СпособОтправления;
	КонецЕсли;
		
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	     Организация);
	ДанныеДляПечати.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
	ДанныеДляПечати.Вставить("Контрагент",       		 Контрагент);
	ДанныеДляПечати.Вставить("Номер",            		 Номер);
	ДанныеДляПечати.Вставить("Дата",             		 Дата);
	ДанныеДляПечати.Вставить("Поставщик",        		 Поставщик);
	ДанныеДляПечати.Вставить("Покупатель",       		 Покупатель);
	ДанныеДляПечати.Вставить("СтранаНазначения",    	 СтранаНазначения);
	
	ДанныеДляПечати.Вставить("ДоговорПокупателя",		 ДоговорКонтрагента.Наименование);
	ДанныеДляПечати.Вставить("Грузоотправитель", 		 Грузоотправитель);
	ДанныеДляПечати.Вставить("Грузополучатель",  		 Грузополучатель);
	ДанныеДляПечати.Вставить("УсловияОплаты",    	 	 УсловияОплаты);
	ДанныеДляПечати.Вставить("ПунктНазначения",  	 	 ?(ЗначениеЗаполнено(АдресДоставки), АдресДоставки, ПунктНазначения));
	ДанныеДляПечати.Вставить("СпособОтправления",		 СпособОтправленияПечать);
	ДанныеДляПечати.Вставить("СчетОрганизации",			 СчетОрганизации);
	ДанныеДляПечати.Вставить("Доверенность", 			 ТекстДовереренности);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		 ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("ОсновнойСчетФактура", 	 ОсновнойСчетФактура);
	ДанныеДляПечати.Вставить("Валюта",         			 ВалютаДокумента);
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Дата, Ответственный);
	ДанныеДляПечати.Вставить("ФИОРуководителя", 		 Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", 	 Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОИсполнителя", 			 Руководители.Исполнитель);
	ДанныеДляПечати.Вставить("ДолжностьИсполнителя", 	 Руководители.ИсполнительДолжность);

	ТоварыИн = ИнициализацияТаблицыСтрок();
	
	ТолькоУслуги  = Истина;
	НомерСтроки = 1;
	Для Каждого СтрокаПечати ИЗ ОбщаяТаблицаДляПечати Цикл

		Строчка = ТоварыИн.Добавить();
		Строчка.НомерСтроки         		 = НомерСтроки;
		Если ТипЗнч(СтрокаПечати.Номенклатура) = Тип("Строка") Тогда
			Строчка.ТоварНаименование   		 = СтрокаПечати.Номенклатура;
		Иначе
			Строчка.ТоварНаименование   		 = СтрокаПечати.Номенклатура.НаименованиеПолное;
		КонецЕсли;
		Строчка.ЕдиницаИзмеренияНаименование = ?(СтрокаПечати.ЕдиницаИзмерения = "", "шт", СтрокаПечати.ЕдиницаИзмерения);
		Строчка.Количество 					 = СтрокаПечати.Количество;		
		Строчка.СтоимостьБезНДС            	 = СтрокаПечати.СуммаВал - СтрокаПечати.НДСВал;
		Строчка.СтоимостьБезНДСРегл        	 = СтрокаПечати.Сумма - СтрокаПечати.НДС;
		Если Строчка.СтоимостьБезНДС <> СтрокаПечати.СуммаВал Тогда
			Строчка.ЦенаБезНДС = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
		Иначе
			Строчка.ЦенаБезНДС = СтрокаПечати.Цена;
		КонецЕсли;	
		Строчка.ЦенаБезНДСРегл 				 = Окр(Строчка.СтоимостьБезНДСРегл/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
		Строчка.СуммаНДС          			 = СтрокаПечати.НДСВал;		
		Строчка.СуммаНДСРегл       			 = СтрокаПечати.НДС;		
		Строчка.СтавкаАкциза				 = СтрокаПечати.СтавкаАкциза;
		Строчка.СуммаАкциза        			 = СтрокаПечати.АкцизВал;
		Строчка.СуммаАкцизаРегл    			 = СтрокаПечати.Акциз;
		Строчка.Всего    					 = СтрокаПечати.СуммаВал;
		Строчка.ВсегоРегл  					 = СтрокаПечати.Сумма;
		Строчка.НомерГТД  					 = СтрокаПечати.НомерГТД;
		Строчка.ДатаОборота  				 = СтрокаПечати.ДатаОборота;
		НомерСтроки 						 = НомерСтроки+1;
		
		Если ЗначениеЗаполнено(СтрокаПечати.СтавкаНДС) Тогда
			Строчка.СтавкаНДС = ?(СтрокаПечати.СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтрокаПечати.СтавкаНДС.МестоРеализацииНеРК, "Без НДС", "" + СтрокаПечати.СтавкаНДС.Ставка + "%");
		КонецЕсли;
		
		Если ТолькоУслуги И ((СтрокаПечати.ID = 1) ИЛИ (СтрокаПечати.ID = 3)) Тогда 
			ТолькоУслуги = ЛОЖЬ;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТоварыИн);
	
	ТТН = "";
	// В случае реализации товаров, заполняем данные о ТТН
	Если НЕ ТолькоУслуги Тогда		
		ТекущийНомер = 1;
		Для Каждого Основание Из ДокументыОснования Цикл
			ПредставлениеДок = "";
			Если ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
				Попытка
					ПредставлениеДок = РаботаСДиалогами.СформироватьЗаголовокДокумента(Основание.ДокументОснование,,глСписокПрефиксовУзлов);
				Исключение
					ПредставлениеДок = Строка(Основание.ДокументОснование);
				КонецПопытки;
				ТТН 		 = ТТН + ?(ТекущийНомер = 1, "", ", ") + ПредставлениеДок;
				ТекущийНомер = ТекущийНомер + 1;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТТН", ТТН);
	Если НЕ ДатаОборотаВТабличнойЧасти Тогда
		ДанныеДляПечати.Вставить("ДатаОборотаПоРеализации", ДатаСовершенияОборотаПоРеализации);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ДатаОборотаВТабличнойЧасти", ДатаОборотаВТабличнойЧасти);
	
	Возврат ДанныеДляПечати;		
	
КонецФункции

//Функция собирает данные по документам основания
//
Функция СобратьДанныеТабличныхЧастейДляПечатиБезНомеровГТД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК ID,
	|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
	|	СчетФактураВыданныйТовары.Номенклатура,
	|	СчетФактураВыданныйТовары.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	СчетФактураВыданныйТовары.ЕдиницаИзмерения,
	|	СчетФактураВыданныйТовары.Количество КАК Количество,
	|	СчетФактураВыданныйТовары.СтавкаАкциза,
	|	СчетФактураВыданныйТовары.СтавкаНДС,
	|	СчетФактураВыданныйТовары.Цена,
	|	СчетФактураВыданныйТовары.СуммаАкциза КАК Акциз,
	|	СчетФактураВыданныйТовары.СуммаНДС КАК НДС,
	|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерГТД, &ПустойНомерГТД) <> &ПустойНомерГТД  
	|			ТОГДА СчетФактураВыданныйНомераГТД.НомерГТД.КодТНВЭД
	|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.КодТНВЭД
	|	КОНЕЦ КАК КодТНВЭД,
	|	ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерСтроки, 0) КАК НомерСтрокиТаблицыГТД,
	|	ВЫБОР  
	|		КОГДА ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 1)
	|	КОНЕЦ КАК БазисРаспределения,
	|	СчетФактураВыданныйТовары.КлючСвязи КАК КлючСвязи,
	|	СчетФактураВыданныйТовары.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.НомераГТД КАК СчетФактураВыданныйНомераГТД
	|		ПО СчетФактураВыданныйТовары.КлючСвязи = СчетФактураВыданныйНомераГТД.КлючСвязи
	|			И (СчетФактураВыданныйНомераГТД.Ссылка = СчетФактураВыданныйТовары.Ссылка)
	|ГДЕ
	|	СчетФактураВыданныйТовары.Ссылка = &ТекущийДокумент
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	МИНИМУМ(СчетФактураВыданныйУслуги.НомерСтроки),
	|	ВЫБОР
	|		КОГДА НЕ СчетФактураВыданныйУслуги.Содержание = """"
	|			ТОГДА СчетФактураВыданныйУслуги.Содержание
	|		ИНАЧЕ СчетФактураВыданныйУслуги.Номенклатура
	|	КОНЕЦ,
	|	СУММА(0),
	|	СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СУММА(СчетФактураВыданныйУслуги.Количество),
	|	"""",
	|	СчетФактураВыданныйУслуги.СтавкаНДС,
	|	СчетФактураВыданныйУслуги.Цена,
	|	СУММА(0),
	|	СУММА(СчетФактураВыданныйУслуги.СуммаНДС),
	|	СУММА(СчетФактураВыданныйУслуги.Сумма),
	|	"""",
	|	0,
	|	1,
	|	0,
	|	СчетФактураВыданныйУслуги.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
	|ГДЕ
	|	СчетФактураВыданныйУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ СчетФактураВыданныйУслуги.Содержание = """"
	|			ТОГДА СчетФактураВыданныйУслуги.Содержание
	|		ИНАЧЕ СчетФактураВыданныйУслуги.Номенклатура
	|	КОНЕЦ,
	|	СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетФактураВыданныйУслуги.СтавкаНДС,
	|	СчетФактураВыданныйУслуги.Цена,
	|	СчетФактураВыданныйУслуги.ДатаОборота
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	МИНИМУМ(СчетФактураВыданныйОС.НомерСтроки),
	|	СчетФактураВыданныйОС.ОсновноеСредство,
	|	СУММА(0),
	|	""шт"",
	|	1,
	|	"""",
	|	СчетФактураВыданныйОС.СтавкаНДС,
	|	СчетФактураВыданныйОС.Сумма,
	|	СУММА(0),
	|	СУММА(СчетФактураВыданныйОС.СуммаНДС),
	|	СУММА(СчетФактураВыданныйОС.Сумма),
	|	СчетФактураВыданныйОС.ОсновноеСредство.КодТНВЭД,
	|	0,
	|	1,
	|	0,
	|	СчетФактураВыданныйОС.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
	|ГДЕ
	|	СчетФактураВыданныйОС.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданныйОС.ОсновноеСредство,
	|	СчетФактураВыданныйОС.СтавкаНДС,
	|	СчетФактураВыданныйОС.Сумма,
	|	СчетФактураВыданныйОС.ОсновноеСредство.КодТНВЭД,
	|	СчетФактураВыданныйОС.ДатаОборота
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	1,
	|	СчетФактураВыданныйНМА.НематериальныйАктив,
	|	СУММА(0),
	|	""шт"",
	|	1,
	|	"""",
	|	СчетФактураВыданныйНМА.СтавкаНДС,
	|	СчетФактураВыданныйНМА.Сумма,
	|	СУММА(0),
	|	СУММА(СчетФактураВыданныйНМА.СуммаНДС),
	|	СУММА(СчетФактураВыданныйНМА.Сумма),
	|	СчетФактураВыданныйНМА.НематериальныйАктив.КодТНВЭД,
	|	0,
	|	1,
	|	0,
	|	СчетФактураВыданныйНМА.ДатаОборота
	|ИЗ
	|	Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
	|ГДЕ
	|	СчетФактураВыданныйНМА.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданныйНМА.НематериальныйАктив,
	|	СчетФактураВыданныйНМА.СтавкаНДС,
	|	СчетФактураВыданныйНМА.Сумма,
	|	СчетФактураВыданныйНМА.НематериальныйАктив.КодТНВЭД,
	|	СчетФактураВыданныйНМА.ДатаОборота
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	ОбщаяТаблицаДляПечати = Запрос.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.
	МассивНайденныхСтрок = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);
	ТаблицаТовары = ОбщаяТаблицаДляПечати.Скопировать(МассивНайденныхСтрок);
	
	МассивКлючейСвязи = ТаблицаТовары.ВыгрузитьКолонку("КлючСвязи");
	МассивКлючейСвязи = СвернутьМассив(МассивКлючейСвязи);
	
	Для Каждого КлючСвязи Из МассивКлючейСвязи Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", КлючСвязи);
		МассивСтрокСКлючомСвязи = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		
		МассивБазисовРаспределения = Новый Массив;
		Для Каждого СтрокаСКлючомСвязи Из МассивСтрокСКлючомСвязи Цикл
			МассивБазисовРаспределения.Добавить(СтрокаСКлючомСвязи.БазисРаспределения);	
		КонецЦикла;
		
		КоличествоДляРаспределения = МассивСтрокСКлючомСвязи[0].Количество;
		Если КоличествоДляРаспределения <> 0 Тогда
			РаспределенныйКоличество = ОбщегоНазначения.РаспределитьПропорционально(КоличествоДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйКоличество.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Количество = РаспределенныйКоличество[Индекс];
			КонецЦикла;
		КонецЕсли;		
		
		АкцизДляРаспределения = МассивСтрокСКлючомСвязи[0].Акциз;
		Если АкцизДляРаспределения <> 0 Тогда
			РаспределенныйАкциз = ОбщегоНазначения.РаспределитьПропорционально(АкцизДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйАкциз.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Акциз = РаспределенныйАкциз[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		НДСДляРаспределения = МассивСтрокСКлючомСвязи[0].НДС;
		Если НДСДляРаспределения <> 0 Тогда
			РаспределенныйНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйНДС.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].НДС = РаспределенныйНДС[Индекс];
			КонецЦикла;
		КонецЕсли;

		СуммаДляРаспределения = МассивСтрокСКлючомСвязи[0].Сумма;
		Если СуммаДляРаспределения <> 0 Тогда
			РаспределенныйСумма = ОбщегоНазначения.РаспределитьПропорционально(СуммаДляРаспределения, МассивБазисовРаспределения);
			Для Индекс = 0 По РаспределенныйСумма.ВГраница() Цикл
				МассивСтрокСКлючомСвязи[Индекс].Сумма = РаспределенныйСумма[Индекс];
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалить из ОбщаяТаблицаДляПечати все записи по товарам.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID", 1); // Отобрать только строки таблицы Товары.	
	Пока Истина Цикл
		МассивстрокДляУдаления = ОбщаяТаблицаДляПечати.НайтиСтроки(ПараметрыОтбора);	
		Если МассивстрокДляУдаления.Количество() = 0 Тогда
			Прервать;
		Иначе
			ОбщаяТаблицаДляПечати.Удалить(МассивстрокДляУдаления[0]);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
		НоваяСтрока = ОбщаяТаблицаДляПечати.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТовары);
	КонецЦикла;
	
	// Группировка и сортировка перед выводом.
	ЗапросДляГруппировки = Новый Запрос;
	ЗапросДляГруппировки.Текст =
	"ВЫБРАТЬ
	|	ОбщаяТаблицаДляПечати.ID КАК ID,
	|	ОбщаяТаблицаДляПечати.НомерСтроки КАК НомерСтроки,
	|	ОбщаяТаблицаДляПечати.Номенклатура КАК Номенклатура,
	|	ОбщаяТаблицаДляПечати.КоэффициентРасчетаОблагаемойБазыАкциза КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ОбщаяТаблицаДляПечати.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОбщаяТаблицаДляПечати.Количество КАК Количество,
	|	ОбщаяТаблицаДляПечати.СтавкаАкциза КАК СтавкаАкциза,
	|	ОбщаяТаблицаДляПечати.СтавкаНДС КАК СтавкаНДС,
	|	ОбщаяТаблицаДляПечати.Цена КАК Цена,
	|	ОбщаяТаблицаДляПечати.Акциз КАК Акциз,
	|	ОбщаяТаблицаДляПечати.НДС КАК НДС,
	|	ОбщаяТаблицаДляПечати.Сумма КАК Сумма,
	|	ОбщаяТаблицаДляПечати.КодТНВЭД КАК КодТНВЭД,
	|	ОбщаяТаблицаДляПечати.КлючСвязи КАК КлючСвязи,
	|	ОбщаяТаблицаДляПечати.НомерСтрокиТаблицыГТД КАК НомерСтрокиТаблицыГТД,
	|	ОбщаяТаблицаДляПечати.ДатаОборота КАК ДатаОборота
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ОбщаяТаблицаДляПечати КАК ОбщаяТаблицаДляПечати
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ID КАК ID,
	|	МИНИМУМ(ВТ.НомерСтроки) КАК НомерСтроки,
	|	ВТ.Номенклатура КАК Номенклатура,
	|	СУММА(ВТ.КоэффициентРасчетаОблагаемойБазыАкциза) КАК КоэффициентРасчетаОблагаемойБазыАкциза,
	|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВТ.Количество) КАК Количество,
	|	ВТ.СтавкаАкциза КАК СтавкаАкциза,
	|	ВТ.СтавкаНДС КАК СтавкаНДС,
	|	ВТ.Цена КАК Цена,
	|	СУММА(ВТ.Акциз) КАК Акциз,
	|	СУММА(ВТ.НДС) КАК НДС,
	|	СУММА(ВТ.Сумма) КАК Сумма,
	|	ВТ.КодТНВЭД КАК КодТНВЭД,
	|	МИНИМУМ(ВТ.НомерСтрокиТаблицыГТД) КАК НомерСтрокиТаблицыГТД,
	|	ВТ.ДатаОборота КАК ДатаОборота
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ID,
	|	ВТ.Номенклатура,
	|	ВТ.ЕдиницаИзмерения,
	|	ВТ.СтавкаАкциза,
	|	ВТ.СтавкаНДС,
	|	ВТ.Цена,
	|	ВТ.КодТНВЭД,
	|	ВТ.КлючСвязи,
	|	ВТ.ДатаОборота
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки,
	|	НомерСтрокиТаблицыГТД";
	
	ЗапросДляГруппировки.УстановитьПараметр("ОбщаяТаблицаДляПечати", ОбщаяТаблицаДляПечати);
	ОбщаяТаблицаДляПечати = ЗапросДляГруппировки.Выполнить().Выгрузить();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// используем процедуру общего модуля так как для валютных расчетов могут быть погрешности округления при пересчете по строкам
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ОбщаяТаблицаДляПечати, СтруктураШапкиДокумента, Истина);
	
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,ЭтотОбъект);
	
	ТекстДовереренности = ОбщегоНазначения.ПолучитьТекстДоверенности(ДанныеДоверенности);
	ПараметрВыдана = "";
	ПараметрЛицо   = "";
	Если ЗначениеЗаполнено(ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(ДоверенностьЛицо) Тогда
		ТекстДовереренности = ТекстДовереренности +  НСтр("ru=', выданной %1%2'");
		
		Если ЗначениеЗаполнено(ДоверенностьВыдана) Тогда
			ПараметрВыдана = СокрЛП(ДоверенностьВыдана);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоверенностьЛицо)Тогда
			Если ЗначениеЗаполнено(ПараметрВыдана) Тогда
				ПараметрЛицо = ", " + СокрЛП(ДоверенностьЛицо);
			Иначе
				ПараметрЛицо = СокрЛП(ДоверенностьЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   		
	
	ТекстДовереренности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДовереренности, ПараметрВыдана, ПараметрЛицо);
	Если Не ЗначениеЗаполнено(ТекстДовереренности) Тогда
		ТекстДовереренности = НСтр("ru='Без доверенности'")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОтправленияПоКлассификатору) Тогда
		мМакетКодовСпособаОтправления 	= ПолучитьОбщийМакет("ПФ_MXL_СпособыОтправления");
		мОбластьСтрокСпособаОтправления = мМакетКодовСпособаОтправления.Области.Найти("Классификатор");
		НаименованиеСтроки = РегламентированнаяОтчетность.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(
			мМакетКодовСпособаОтправления, мОбластьСтрокСпособаОтправления, СпособОтправленияПоКлассификатору);
		
		Если НЕ ПустаяСтрока(НаименованиеСтроки) Тогда
			СпособОтправленияПечать = СпособОтправленияПоКлассификатору +" ("+НаименованиеСтроки+")";
		Иначе
			СпособОтправленияПечать = СпособОтправленияПоКлассификатору;
		КонецЕсли;
	Иначе
		СпособОтправленияПечать = СпособОтправления;
	КонецЕсли;
		
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      	     Организация);
	ДанныеДляПечати.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
	ДанныеДляПечати.Вставить("Контрагент",       		 Контрагент);
	ДанныеДляПечати.Вставить("Номер",            		 Номер);
	ДанныеДляПечати.Вставить("Дата",             		 Дата);
	ДанныеДляПечати.Вставить("Поставщик",        		 Поставщик);
	ДанныеДляПечати.Вставить("Покупатель",       		 Покупатель);
	ДанныеДляПечати.Вставить("СтранаНазначения",    	 СтранаНазначения);
	
	ДанныеДляПечати.Вставить("ДоговорПокупателя",		 ДоговорКонтрагента.Наименование);
	ДанныеДляПечати.Вставить("Грузоотправитель", 		 Грузоотправитель);
	ДанныеДляПечати.Вставить("Грузополучатель",  		 Грузополучатель);
	ДанныеДляПечати.Вставить("УсловияОплаты",    	 	 УсловияОплаты);
	ДанныеДляПечати.Вставить("ПунктНазначения",  	 	 ?(ЗначениеЗаполнено(АдресДоставки), АдресДоставки, ПунктНазначения));
	ДанныеДляПечати.Вставить("СпособОтправления",		 СпособОтправленияПечать);
	ДанныеДляПечати.Вставить("СчетОрганизации",			 СчетОрганизации);
	ДанныеДляПечати.Вставить("Доверенность", 			 ТекстДовереренности);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		 ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("ОсновнойСчетФактура", 	 ОсновнойСчетФактура);
	ДанныеДляПечати.Вставить("Валюта",         			 ВалютаДокумента);
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Дата, Ответственный);
	ДанныеДляПечати.Вставить("ФИОРуководителя", 		 Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", 	 Руководители.ГлавныйБухгалтер);
	ДанныеДляПечати.Вставить("ФИОИсполнителя", 			 Руководители.Исполнитель);
	ДанныеДляПечати.Вставить("ДолжностьИсполнителя", 	 Руководители.ИсполнительДолжность);

	ТоварыИн = ИнициализацияТаблицыСтрок();
	
	ТолькоУслуги  = Истина;
	НомерСтроки = 1;
	Для Каждого СтрокаПечати ИЗ ОбщаяТаблицаДляПечати Цикл

		Строчка = ТоварыИн.Добавить();
		Строчка.НомерСтроки         		 = НомерСтроки;
		Если ТипЗнч(СтрокаПечати.Номенклатура) = Тип("Строка") Тогда
			Строчка.ТоварНаименование   		 = СтрокаПечати.Номенклатура;
		Иначе
			Строчка.ТоварНаименование   		 = СтрокаПечати.Номенклатура.НаименованиеПолное;
		КонецЕсли;
		Строчка.ЕдиницаИзмеренияНаименование = ?(СтрокаПечати.ЕдиницаИзмерения = "", "шт", СтрокаПечати.ЕдиницаИзмерения);
		Строчка.Количество 					 = СтрокаПечати.Количество;		
		Строчка.СтоимостьБезНДС            	 = СтрокаПечати.СуммаВал - СтрокаПечати.НДСВал;
		Строчка.СтоимостьБезНДСРегл        	 = СтрокаПечати.Сумма - СтрокаПечати.НДС;
		Если Строчка.СтоимостьБезНДС <> СтрокаПечати.СуммаВал Тогда
			Строчка.ЦенаБезНДС = Окр(Строчка.СтоимостьБезНДС/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
		Иначе
			Строчка.ЦенаБезНДС = СтрокаПечати.Цена;
		КонецЕсли;	
		Строчка.ЦенаБезНДСРегл 				 = Окр(Строчка.СтоимостьБезНДСРегл/?(СтрокаПечати.Количество = 0, 1, СтрокаПечати.Количество), 2);
		Строчка.СуммаНДС          			 = СтрокаПечати.НДСВал;		
		Строчка.СуммаНДСРегл       			 = СтрокаПечати.НДС;		
		Строчка.СтавкаАкциза				 = СтрокаПечати.СтавкаАкциза;
		Строчка.СуммаАкциза        			 = СтрокаПечати.АкцизВал;
		Строчка.СуммаАкцизаРегл    			 = СтрокаПечати.Акциз;
		Строчка.Всего    					 = СтрокаПечати.СуммаВал;
		Строчка.ВсегоРегл  					 = СтрокаПечати.Сумма;
		Строчка.КодТНВЭД  					 = СтрокаПечати.КодТНВЭД;
		Строчка.ДатаОборота  				 = СтрокаПечати.ДатаОборота;
		НомерСтроки 						 = НомерСтроки+1;
		
		Если ЗначениеЗаполнено(СтрокаПечати.СтавкаНДС) Тогда
			Строчка.СтавкаНДС = ?(СтрокаПечати.СтавкаНДС.ДляОсвобожденногоОборота ИЛИ СтрокаПечати.СтавкаНДС.МестоРеализацииНеРК, "Без НДС", "" + СтрокаПечати.СтавкаНДС.Ставка + "%");
		КонецЕсли;
		
		Если ТолькоУслуги И ((СтрокаПечати.ID = 1) ИЛИ (СтрокаПечати.ID = 3)) Тогда 
			ТолькоУслуги = ЛОЖЬ;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТоварыИн);
	
	ТТН = "";
	// В случае реализации товаров, заполняем данные о ТТН
	Если НЕ ТолькоУслуги Тогда		
		ТекущийНомер = 1;
		Для Каждого Основание Из ДокументыОснования Цикл
			ПредставлениеДок = "";
			Если ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
				Попытка
					ПредставлениеДок = РаботаСДиалогами.СформироватьЗаголовокДокумента(Основание.ДокументОснование,,глСписокПрефиксовУзлов);
				Исключение
					ПредставлениеДок = Строка(Основание.ДокументОснование);
				КонецПопытки;
				ТТН 		 = ТТН + ?(ТекущийНомер = 1, "", ", ") + ПредставлениеДок;
				ТекущийНомер = ТекущийНомер + 1;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТТН", ТТН);	
	Если НЕ ДатаОборотаВТабличнойЧасти Тогда
		ДанныеДляПечати.Вставить("ДатаОборотаПоРеализации", ДатаСовершенияОборотаПоРеализации);
	КонецЕсли;
	ДанныеДляПечати.Вставить("ДатаОборотаВТабличнойЧасти", ДатаОборотаВТабличнойЧасти);
	
	Возврат ДанныеДляПечати;		
	
КонецФункции

//Функция собирает данные участникам совместной деятельности
//
Функция СобратьДанныеПоУчастникамСовместнойДеятельности() Экспорт
	
	Если УчастникиСовместнойДеятельности.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	   , Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
				   |	СчетФактураВыданныйУчастникиСовместнойДеятельности.НомерСтроки,
				   |	СчетФактураВыданныйУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности,
				   |	СчетФактураВыданныйУчастникиСовместнойДеятельности.ДоляУчастия
				   |ПОМЕСТИТЬ ВТ_УчастникиСовместнойДеятельности
				   |ИЗ
				   |	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК СчетФактураВыданныйУчастникиСовместнойДеятельности
				   |ГДЕ
				   |	СчетФактураВыданныйУчастникиСовместнойДеятельности.Ссылка = &Ссылка
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТ_УчастникиСовместнойДеятельности.Ссылка КАК Ссылка,
				   |	СУММА(ВТ_УчастникиСовместнойДеятельности.ДоляУчастия) КАК СуммаДолейУчастия
				   |ПОМЕСТИТЬ ВТ_СуммыДолейУчастников
				   |ИЗ
				   |	ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_УчастникиСовместнойДеятельности.Ссылка
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Ссылка
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	СведенияСчетовФактурВыданныхОбороты.Покупатель,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаВВалютеДоговораОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСВВалютеДоговораОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаВВалютеДоговораОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаРеглОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаНДСРеглОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.ОборотПоРеализацииРеглОборот,
				   |	СведенияСчетовФактурВыданныхОбороты.СуммаАкцизаРеглОборот,
				   |	УчастникиСовместнойДеятельности.ДоляУчастия,
				   |	УчастникиСовместнойДеятельности.СуммаДолейУчастия,
				   |	УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки,
				   |	СведенияСчетовФактурВыданныхОбороты.СтавкаНДС,
				   |	СведенияСчетовФактурВыданныхОбороты.СтавкаАкциза
				   |ИЗ
				   |	РегистрНакопления.СведенияСчетовФактурВыданных.Обороты( , , Регистратор, Организация = &Организация) КАК СведенияСчетовФактурВыданныхОбороты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			ВТ_УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСовместнойДеятельности,
				   |			ВТ_УчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия,
				   |			ВТ_СуммыДолейУчастников.СуммаДолейУчастия КАК СуммаДолейУчастия,
				   |			ВТ_УчастникиСовместнойДеятельности.НомерСтроки КАК НомерСтроки
				   |		ИЗ
				   |			ВТ_УчастникиСовместнойДеятельности КАК ВТ_УчастникиСовместнойДеятельности
				   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуммыДолейУчастников КАК ВТ_СуммыДолейУчастников
				   |				ПО ВТ_УчастникиСовместнойДеятельности.Ссылка = ВТ_СуммыДолейУчастников.Ссылка) КАК УчастникиСовместнойДеятельности
				   |		ПО СведенияСчетовФактурВыданныхОбороты.Покупатель = УчастникиСовместнойДеятельности.УчастникСовместнойДеятельности
				   |ГДЕ
				   |	СведенияСчетовФактурВыданныхОбороты.Регистратор = &Ссылка
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерСтроки";
				   
		   
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		Возврат Результат.Выгрузить();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати, ДанныеДляПечатиПоУчастникамСовместнойДеятельности, ВВалютеРеглУчета = Ложь, ПоказыватьНомераГТД = Ложь) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура";
	Макет = ПолучитьМакет("СчетФактура");
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(ДанныеДляПечати.Организация, ДанныеДляПечати.СтруктурноеПодразделение); 
	
	СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель,Дата, ,СчетКонтрагента);
	ОрганизацияГоловы   = Справочники.Организации.ПустаяСсылка();
	Если ДанныеДляПечати.Поставщик = ДанныеДляПечати.Организация Тогда
		// для СП выводим реквизиты СП
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(ДанныеДляПечати.Организация, ДанныеДляПечати.СтруктурноеПодразделение);
		СведенияОПоставщике = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Дата, , СчетОрганизации);
		
		Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
			И НЕ СтруктурнаяЕдиницаОрганизация.УказыватьРеквизитыГоловнойОрганизации Тогда
			Если Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
				ОрганизацияГоловы = Организация.ГоловнаяОрганизация;
			Иначе
				ОрганизацияГоловы = Организация;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) И Организация <> Организация.ГоловнаяОрганизация Тогда
			ОрганизацияГоловы = Организация.ГоловнаяОрганизация;
		КонецЕсли;
		
	Иначе	
		// если в счете-фактуре указываются данные головной организации, то собственные данные СП игнорируем
		СведенияОПоставщике = ОбщегоНазначения.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата, , СчетОрганизации);
	КонецЕсли;
	
	СведенияОГрузоотправителе = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель) Тогда
		СведенияОГрузоотправителе = ОбщегоНазначения.СведенияОЮрФизЛице(ДанныеДляПечати.Грузоотправитель, Дата);
	КонецЕсли;	
	
	СведенияОГрузополучателе = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель) Тогда
		СведенияОГрузополучателе = ОбщегоНазначения.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	КонецЕсли;	

	// Выводим шапку накладной	
	ТекстДополнительныйИлиИсправленныйСчетФактура = "";
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		ТекстДополнительныйИлиИсправленныйСчетФактура = "Дополнительный счет-фактура" + ?(ЗначениеЗаполнено(ДанныеДляПечати.ОсновнойСчетФактура), " к " + 
		"счету-фактуре №" + ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати.ОсновнойСчетФактура) + " от " + Формат(ДанныеДляПечати.ОсновнойСчетФактура.Дата,"ДФ=dd.MM.yyyy" ),"");
	ИначеЕсли ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		ТекстДополнительныйИлиИсправленныйСчетФактура = "Исправленный счет-фактура" + ?(ЗначениеЗаполнено(ДанныеДляПечати.ОсновнойСчетФактура), " к " + 
		"счету-фактуре №" + ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати.ОсновнойСчетФактура) + " от " + Формат(ДанныеДляПечати.ОсновнойСчетФактура.Дата,"ДФ=dd.MM.yyyy" ),"");
	КонецЕсли;
	
	ТекстПервичныйСчетФактура = "";
	ПервичныйСчетФактура = ДанныеДляПечати;
	Пока ЗначениеЗаполнено(ПервичныйСчетФактура.ОсновнойСчетФактура) И ЗначениеЗаполнено(ПервичныйСчетФактура.ВидСчетаФактуры) И НЕ ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный Цикл
		ПервичныйСчетФактура = ПервичныйСчетФактура.ОсновнойСчетФактура;
		Если ПервичныйСчетФактура = Ссылка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПервичныйСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный И НЕ ТипЗнч(ПервичныйСчетФактура) = Тип("Структура") Тогда
		ТекстПервичныйСчетФактура = "Первичный счет-фактура №" + ОбщегоНазначения.ПолучитьНомерНаПечать(ПервичныйСчетФактура) + " от " + Формат(ПервичныйСчетФактура.Дата,"ДФ=dd.MM.yyyy") ;
	КонецЕсли;
	
	ПрефиксГТД = ?(ПоказыватьНомераГТД, "ГТД", "ТНВЭД");
		
	Если ДанныеДляПечати.Свойство("ДатаОборотаПоРеализации") Тогда
		Макет.УдалитьОбласть(Макет.Область("ШапкаТаблицы" + ПрефиксГТД + "|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Макет.УдалитьОбласть(Макет.Область("Строка" + ПрефиксГТД + "|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Макет.УдалитьОбласть(Макет.Область("Итого" + ПрефиксГТД + "|ДатаОборота" + ПрефиксГТД), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
				
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ДополнительныйИлиИсправленныйСчетФактура = ТекстДополнительныйИлиИсправленныйСчетФактура;
	Если ТекстПервичныйСчетФактура = "" Тогда
		ОбластьМакета.Области.ПервичныйСчетФактура.Видимость = Ложь;
	Иначе
		ОбластьМакета.Параметры.ПервичныйСчетФактура = ТекстПервичныйСчетФактура;	
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если ДанныеДляПечати.Свойство("ДатаОборотаПоРеализации") Тогда
		ОбластьМакета.Параметры.ДатаОборотаПоРеализации = Формат(ДанныеДляПечати.ДатаОборотаПоРеализации, "ДФ=dd.MM.yyyy");
	Иначе
		ОбластьМакета.Область("R1C2").ШиринаКолонки = ОбластьМакета.Область("R1C2").ШиринаКолонки + 9;
		ОбластьМакета.Область("ДатаОборотаПоРеализации").Видимость = Ложь;
	КонецЕсли;
		
	ОбластьМакета.Параметры.Номер = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Счет-фактура", глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	ОбластьМакета.Параметры.СвидетельствоПоНДС = "Свидетельство о постановке на регистрационный учет по НДС, "+
												 ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "СвидетельствоПоНДС,");
												 
	//Реквизиты поставщика
	ПредставлениеРНН_БИНПоставщика = "";
	РННиБИНПоставщика = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПоставщике, Дата, Истина, ПредставлениеРНН_БИНПоставщика, , Истина);		

	Если ЗначениеЗаполнено(ОрганизацияГоловы) И ОрганизацияГоловы <> СтруктурнаяЕдиницаОрганизация Тогда
		СведенияГоловы          = ОбщегоНазначения.СведенияОЮрФизЛице(ОрганизацияГоловы, Дата);
		РННиБИНПоставщикаГолова = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияГоловы, Дата, Ложь, , , Истина);		
		ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(СведенияГоловы, "ПолноеНаименование,", , Дата);
		РННиБИНПоставщика = РННиБИНПоставщика + "(" + ПредставлениеРНН_БИНПоставщика + " головной организации """ + ПредставлениеПоставщика + """: " + РННиБИНПоставщикаГолова + ")";						
	КонецЕсли;

	ОбластьМакета.Параметры.РННИАдресПоставщика 		   = РННиБИНПоставщика  + ", " +  ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	ОбластьМакета.Параметры.ПредставлениеРНН_БИНПоставщика = ПредставлениеРНН_БИНПоставщика;
	
	ОбластьМакета.Параметры.РасчетныйСчетПоставщика		  = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,БИК,");
	
	//Реквизиты грузоотправителя
	ПредставлениеРНН_БИНГрузоотправителя = "";
	РННиБИНГрузоотправителя = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОГрузоотправителе, Дата, Истина, ПредставлениеРНН_БИНГрузоотправителя, , Истина);
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя  = РННиБИНГрузоотправителя  + ", " +  ОбщегоНазначения.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ЮридическийАдрес,");
	ОбластьМакета.Параметры.ПредставлениеРНН_БИНГрузоотправителя = ПредставлениеРНН_БИНГрузоотправителя;
		
	//Реквизиты грузополучателя
	ПредставлениеРНН_БИНГрузополучателя = "";
	РННиБИНГрузополучателя = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОГрузополучателе, Дата, Истина, ПредставлениеРНН_БИНГрузополучателя, , Истина);		
	ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ДанныеДляПечати.Грузополучатель);
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = РННиБИНГрузополучателя  + ", " + ?(ЗначениеЗаполнено(ТекстНомерНалоговойРегистрации), ТекстНомерНалоговойРегистрации + ", ", "") + ОбщегоНазначения.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ЮридическийАдрес,");
	ОбластьМакета.Параметры.ПредставлениеРНН_БИНГрузополучателя = ПредставлениеРНН_БИНГрузополучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаПокупателя");
	
	Если ДанныеДляПечатиПоУчастникамСовместнойДеятельности = Неопределено Тогда 
		
		ОбластьМакета.Параметры.Получатель = "Получатель";
		ОбластьМакета.Область("РасчетныйСчетПокупателя").Видимость = Истина;	
			
		//Реквизиты покупателя	
		ОбластьМакета.Параметры.ПредставлениеПокупателя 	  = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		
		//Вывод БИН, если он заполнен		
		ПредставлениеРНН_БИНПокупателя = "";
		РННиБИНПокупателя = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);	
		ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(ДанныеДляПечати.Покупатель);
		ОбластьМакета.Параметры.РННИАдресПокупателя = РННиБИНПокупателя  + ", " + ?(ЗначениеЗаполнено(ТекстНомерНалоговойРегистрации), ТекстНомерНалоговойРегистрации + ", ", "") + ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ПредставлениеРНН_БИНПокупателя = ПредставлениеРНН_БИНПокупателя;
		
		ОбластьМакета.Параметры.РасчетныйСчетПокупателя = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,БИК,");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	Иначе 
		ТаблицаУчастниковСовместнойДеятельности = ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Скопировать(, "Покупатель");
		ТаблицаУчастниковСовместнойДеятельности.Свернуть("Покупатель");
		
		Для Каждого Строчка Из ТаблицаУчастниковСовместнойДеятельности Цикл
			
			СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(Строчка.Покупатель,Дата, ,СчетКонтрагента);
			
			Если Строчка.Покупатель = Покупатель Тогда
				
				ОбластьМакета.Параметры.Получатель = "Получатель";
				ОбластьМакета.Область("РасчетныйСчетПокупателя").Видимость = Истина;	
			Иначе
				
				ОбластьМакета.Параметры.Получатель = "Участник совместной деятельности";
				ОбластьМакета.Область("РасчетныйСчетПокупателя").Видимость = Ложь;	
			КонецЕсли;
			
			//Реквизиты покупателя	
			ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			
			//Вывод БИН, если он заполнен		
			ПредставлениеРНН_БИНПокупателя = "";
			РННиБИНПокупателя = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПокупателе, Дата, Истина, ПредставлениеРНН_БИНПокупателя, , Истина);	
			ТекстНомерНалоговойРегистрации = ТекстНомерНалоговойРегистрации(Строчка.Покупатель);
			ОбластьМакета.Параметры.РННИАдресПокупателя = РННиБИНПокупателя  + ", " + ?(ЗначениеЗаполнено(ТекстНомерНалоговойРегистрации), ТекстНомерНалоговойРегистрации + ", ", "") +  ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			ОбластьМакета.Параметры.ПредставлениеРНН_БИНПокупателя = ПредставлениеРНН_БИНПокупателя;
			
			ОбластьМакета.Параметры.РасчетныйСчетПокупателя = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "НомерСчета,Банк,БИК,");
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ПрефиксГТД);
	Если ВВалютеРеглУчета Тогда
		ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
	Иначе
		ОбластьМакета.Параметры.Валюта = ВалютаДокумента;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ПрефиксГТД);

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
    ПрефиксПоля  = ?(ВВалютеРеглУчета, "Регл", "");
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		ОбластьМакета.Параметры.Заполнить(Строчка);
		
		ОбластьМакета.Параметры.ЦенаБезНДС 		 = Строчка["ЦенаБезНДС"+ПрефиксПоля]; 
		ОбластьМакета.Параметры.СтоимостьБезНДС  = Строчка["СтоимостьБезНДС"+ПрефиксПоля];
		ОбластьМакета.Параметры.СуммаНДС		 = Строчка["СуммаНДС"+ПрефиксПоля];	
		ОбластьМакета.Параметры.Всего			 = Строчка["Всего"+ПрефиксПоля];
		ОбластьМакета.Параметры.СуммаАкциза		 = Строчка["СуммаАкциза"+ПрефиксПоля];
		Если НЕ ДанныеДляПечати.Свойство("ДатаОборотаПоРеализации") Тогда
			ОбластьМакета.Параметры.ДатаОборота  = Строчка["ДатаОборота"];
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого" + ПрефиксГТД);
	ОбластьМакета.Параметры.ИтогоСуммаНДС 			= ВыборкаСтрокТовары.Итог("СуммаНДС" 		+ ПрефиксПоля);
	ОбластьМакета.Параметры.ИтогоСтоимостьБезНДС 	= ВыборкаСтрокТовары.Итог("СтоимостьБезНДС" + ПрефиксПоля);
	ОбластьМакета.Параметры.ИтогоВсего    			= ВыборкаСтрокТовары.Итог("Всего" 			+ ПрефиксПоля);
	ОбластьМакета.Параметры.ИтогоСуммаАкциза 		= ВыборкаСтрокТовары.Итог("СуммаАкциза" 	+ ПрефиксПоля);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Если ДанныеДляПечатиПоУчастникамСовместнойДеятельности <> Неопределено Тогда 
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыУчастникиСовместнойДеятельности");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаУчастникиСовместнойДеятельности");
		ПрефиксПоля  = ?(ВВалютеРеглУчета, "Регл", "ВВалютеДоговора");
		НомерСтроки = 0;
		Для Каждого Строчка Из ДанныеДляПечатиПоУчастникамСовместнойДеятельности Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакета.Параметры.НомерСтроки		               = НомерСтроки;
			СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(Строчка.Покупатель, Дата);
			
			//Реквизиты покупателя	
			ОбластьМакета.Параметры.УчастникСовместнойДеятельности = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ОбластьМакета.Параметры.ДоляУчастия                    = ""+ Строчка.ДоляУчастия +"/"+ Строчка.СуммаДолейУчастия;
			ОбластьМакета.Параметры.СтоимостьБезНДС                = Строчка["Сумма"+ПрефиксПоля + "Оборот"] + Строчка["СуммаАкциза"+ПрефиксПоля + "Оборот"];
			ОбластьМакета.Параметры.СуммаНДС                       = Строчка["СуммаНДС"+ПрефиксПоля + "Оборот"];
			ОбластьМакета.Параметры.Всего	                       = Строчка["Сумма"+ПрефиксПоля + "Оборот"] + Строчка["СуммаАкциза"+ПрефиксПоля + "Оборот"] + Строчка["СуммаНДС"+ПрефиксПоля + "Оборот"];
			
			ОбластьМакета.Параметры.СтавкаАкциза = Строчка.СтавкаАкциза;
			ОбластьМакета.Параметры.СуммаАкциза  = Строчка["СуммаАкциза"+ПрефиксПоля + "Оборот"];
			
			Если ЗначениеЗаполнено(Строчка.СтавкаНДС) Тогда
				ОбластьМакета.Параметры.СтавкаНДС = ?(Строчка.СтавкаНДС.ДляОсвобожденногоОборота ИЛИ Строчка.СтавкаНДС.МестоРеализацииНеРК, "Без НДС", "" + Строчка.СтавкаНДС.Ставка + "%");
			КонецЕсли;
		
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоУчастникиСовместнойДеятельности");
		ОбластьМакета.Параметры.ИтогоСтоимостьБезНДС = ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("Сумма"+ПрефиксПоля + "Оборот") + ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("СуммаАкциза"+ПрефиксПоля + "Оборот");
		ОбластьМакета.Параметры.ИтогоСуммаНДС 		 = ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("СуммаНДС"+ПрефиксПоля + "Оборот");
		ОбластьМакета.Параметры.ИтогоСуммаАкциза     = ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("СуммаАкциза"+ПрефиксПоля + "Оборот");
		ОбластьМакета.Параметры.ИтогоВсего			 = ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("Сумма"+ПрефиксПоля + "Оборот") + ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("СуммаАкциза"+ПрефиксПоля + "Оборот") + ДанныеДляПечатиПоУчастникамСовместнойДеятельности.Итог("СуммаНДС"+ПрефиксПоля + "Оборот");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакетаПодтверждение = ОбластьМакета.Область("ПодвалПодтверждениеПолучения");
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный Тогда
		ОбластьМакетаПодтверждение.Видимость = Ложь;
	КонецЕсли;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Дата);
	//заполним уполномоченного за главного бухгалтера для подписи счета-фактуры
	Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера) Тогда
		ДолжностьГлБухгалтера = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность), "<Должность не указана>: ", Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтераДолжность + ": ");		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ДолжностьГлБухгалтера + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаГлавногоБухгалтера;
	Иначе
		ДолжностьГлБухгалтера = "Главный бухгалтер: ";	
		ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), "Не предусмотрен", Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ДолжностьГлБухгалтера + ГлавныйБухгалтер;
	КонецЕсли;
	
	//заполним уполномоченного за руководителя для подписи счета-фактуры
	Если ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя) Тогда
		ДолжностьРуководителя = ?(НЕ ЗначениеЗаполнено(Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность), " ", Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителяДолжность + ": ");		
		ОбластьМакета.Параметры.ФИОРуководителя =  ДолжностьРуководителя + Руководители.УполномоченныйПодписыватьСчетаФактурыЗаРуководителя;
	Иначе
		ДолжностьРуководителя = "Руководитель: ";		
		ОбластьМакета.Параметры.ФИОРуководителя = ДолжностьРуководителя + Руководители.Руководитель;
	КонецЕсли;  		
	
	Если НЕ  Ответственный.ФизЛицо.Пустая() Тогда
		ДанныеОтветственногоЛица = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Ответственный.ФизЛицо, Дата);
		ОбластьМакета.Параметры.ФИОИсполнителя = ДанныеОтветственногоЛица.Представление;
		ОбластьМакета.Параметры.ДолжностьИсполнителя = ДанныеОтветственногоЛица.Должность;
	КонецЕсли;		
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()
 
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "СчетФактура" ИЛИ ИмяМакета = "СчетФактураВВалютеРегл" ИЛИ ИмяМакета = "СчетФактураСНомерамиГТД" Тогда
		
		ТипОснования = ТипЗнч(ДокументОснование);
		ДанныеДляПечати 								  = Неопределено;
		ДанныеДляПечатиПоУчастникамСовместнойДеятельности = Неопределено;
		
		Если ИмяМакета = "СчетФактураСНомерамиГТД" Тогда
			ДанныеДляПечати = СобратьДанныеТабличныхЧастейДляПечатиСНомерамиГТД();
		Иначе
			ДанныеДляПечати = СобратьДанныеТабличныхЧастейДляПечатиБезНомеровГТД();
		КонецЕсли;
		
		ДанныеДляПечатиПоУчастникамСовместнойДеятельности = СобратьДанныеПоУчастникамСовместнойДеятельности();
		
		Если ДанныеДляПечати = Неопределено ИЛИ ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Сообщить("Нет данных для печати");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяМакета = "СчетФактура" Тогда			
		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати, ДанныеДляПечатиПоУчастникамСовместнойДеятельности);
	ИначеЕсли ИмяМакета = "СчетФактураВВалютеРегл" Тогда
		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати, ДанныеДляПечатиПоУчастникамСовместнойДеятельности, Истина);
	ИначеЕсли ИмяМакета = "СчетФактураСНомерамиГТД" Тогда
		ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати, ДанныеДляПечатиПоУчастникамСовместнойДеятельности, , Истина);
	ИначеЕсли ИмяМакета = "ЭлектронныйСчетФактура" Тогда
		ТабДокумент = ЭСФСервер.НоваяПечатнаяФормаЭСФ(Ссылка);		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура("СчетФактура"   , "Счет-фактура");
	СтруктураФорм.Вставить("СчетФактураВВалютеРегл" , "Счет-фактура в валюте регламентированного учета");
	СтруктураФорм.Вставить("СчетФактураСНомерамиГТД", "Счет-фактура (с источниками происхождения)");
	СтруктураФорм.Вставить("ЭлектронныйСчетФактура" , "Электронный счет-фактура");
	
	Возврат СтруктураФорм;
	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//Процедура сворачивает табличные части документа по одинаковым разрезам
//
Процедура СвернутьТабличныеЧасти() Экспорт
	Если Товары.Количество() > 1 Тогда
		Товары.Свернуть("Номенклатура,Цена,СтавкаНДС,СтавкаАкциза, ЕдиницаИзмерения, Коэффициент, КлючСвязи", "Количество, Сумма, ОборотПоРеализации, СуммаНДС, СуммаАкциза");
	КонецЕсли;
	
	Если Услуги.Количество() > 1 Тогда
		Услуги.Свернуть("Номенклатура,Содержание,Цена,СтавкаНДС", "Количество, Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;
       	
	Если ОС.Количество() > 1 Тогда
		ОС.Свернуть("ОсновноеСредство,СтавкаНДС", "Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;

	Если НМА.Количество() > 1 Тогда
		НМА.Свернуть("НематериальныйАктив,СтавкаНДС", "Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;   

КонецПроцедуры
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""Покупатель""!");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	СтруктураОбязательныхПолей.Вставить("ДатаСовершенияОборотаПоРеализации");

	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный ИЛИ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		СтруктураОбязательныхПолей.Вставить("ОсновнойСчетФактура");
	КонецЕсли; 
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция ПроверитьРеквизитыДокументовОснований(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Если счет-фактура выписывался на аванс и является более первичным
	// приходные документы не котролируем, так как они не будут синхронизироваться
	// с счетом-фактурой при проведении
	
	Если НЕ СтруктураШапкиДокумента.ПодтвержденДокументамиОтгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В случае, если у документа несколько документов оснований
	// необходимо, чтобы ключевые реквизиты шапки совпадали в каждом из них.
	// В случае, если документ-основание только один - Счет-фактура может быть переоформлена автоматически.
	
	Если ДокументыОснования.Количество()< 2 Тогда
		Возврат Истина;
	КонецЕсли;
		
	РезультатПроверки = Истина;	
	// Проверка ключевых реквизитов
	Для Каждого СтрокаДокумент Из ДокументыОснования Цикл
		МетаданныеДокументаОснования = СтрокаДокумент.ДокументОснование.Метаданные();
		НачалоСообщения = "Документы-основания, строка:" + СокрЛП(СтрокаДокумент.НомерСтроки);
		
		ЕстьРеквизитКонтрагент 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования);
		ЕстьРеквизитДоговор 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования);
		ЕстьРеквизитВалютаДокумента  = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования);
		
		Если ЕстьРеквизитКонтрагент И НЕ СтруктураШапкиДокумента.Контрагент = СтрокаДокумент.ДокументОснование.Контрагент Тогда
			ТекстСообщения = НачалоСообщения + ". Значение контрагента не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.Контрагент);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;	
		
		Если ЕстьРеквизитДоговор И НЕ СтруктураШапкиДокумента.ДоговорКонтрагента = СтрокаДокумент.ДокументОснование.ДоговорКонтрагента Тогда
			ТекстСообщения = НачалоСообщения + ". Значение договора контрагента не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.ДоговорКонтрагента);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;	
		
		Если ЕстьРеквизитВалютаДокумента И НЕ СтруктураШапкиДокумента.ВалютаДокумента = СтрокаДокумент.ДокументОснование.ВалютаДокумента Тогда
			ТекстСообщения = НачалоСообщения + ". Значение валюты документа не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.ВалютаДокумента);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат РезультатПроверки;
КонецФункции

// Сравнивает дату счета-фактуры и документов основания
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + ДокументыОснования[0].ДокументОснование.Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Проверяет правильность заполнения строк табличной части "Услуги".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ОрганизацияПлательщикНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                 
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();

	// Проверить что в табличной части  Услуги нет товаров
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ,Заголовок); 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	Если НЕ ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	КонецЕсли;

	
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ОрганизацияПлательщикНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("СтавкаАкциза"  , "СтавкаАкциза");
	СтруктураПолей.Вставить("Акциз"          , "СуммаАкциза");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,Заголовок);
	
	ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// Выполняет проверки,необходимые для корректного отражения акциза
//
Процедура ПроверитьТабЧатьТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		Если СтруктураШапкиДокумента.УчитыватьАкциз Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Ставка акциза""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.ВидПодакцизногоТМЗ) И ЗначениеЗаполнено(СтрокаТЧ.СтавкаАкциза) Тогда
				СтрокаСообщения = "Необходимо очистить ставку акциза или указать ""Вид подакцизного товара"" у номенклатуры!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;  					
		КонецЕсли;				
	КонецЦикла;         	
		
КонецПроцедуры // ПроверитьТабЧатьТоварыПоСтрочно()

// Проверяет правильность заполнения строк табличной части "ОС".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ОрганизацияПлательщикНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ОрганизацияПлательщикНДС  Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиНомераГТД(Отказ)
	
	Если НЕ НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ДатаСовершенияОборотаПоРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоРахождениямТоваровИНомеровГТД = НомераГТДСервер.ИзмениласьТЧТоварыОтносительноТЧНомеровГТД(Товары, НомераГТД);
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоРахождениямТоваровИНомеровГТД Цикл
		СтрокаТоваров = Товары.Найти(СтрокаТабличнойЧасти.НомерСтроки, "НомерСтроки");
		Если СтрокаТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоРазницы = ?(ВидСчетаФактуры =  Перечисления.ВидыСчетовФактур.Дополнительный, -1*(СтрокаТабличнойЧасти.Количество),(СтрокаТабличнойЧасти.Количество));
		
		Если КоличествоРазницы > 0  Тогда 
			ТекстСообщения = НСтр("ru = 'Для номенклатуры <%1> не заполнен источник происхождения в количестве %2 %3. Документ: ""%4"".'");	
			КоличествоРазницы = СтрокаТабличнойЧасти.Количество;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для номенклатуры <%1> количество, указанное в источниках происхождениях, превышает на %2 %3. Документ: ""%4"".'");
			КоличествоРазницы = ?(НЕ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный, -1*(СтрокаТабличнойЧасти.Количество),(СтрокаТабличнойЧасти.Количество));
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, СтрокаТоваров.Номенклатура,КоличествоРазницы, СтрокаТоваров.ЕдиницаИзмерения, ЭтотОбъект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);		
						
	КонецЦикла;

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();


	Возврат ТаблицаПоОС;

КонецФункции // ПодготовитьТаблицуОС()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаПоНМА = РезультатЗапросаПоНМА.Выгрузить();	

	Возврат ТаблицаПоНМА;

КонецФункции // ПодготовитьТаблицуНМА()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") Или ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
		ЭтотОбъект.СпособВыставления = Перечисления.СпособыОбменаДокументами.Электронно;					
	КонецЕсли;
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);       	
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура-обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если Не ОбменДанными.Загрузка  Тогда 	
		
		//определим сумму документа
		СуммаДокумента  = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
		
		ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
		// установим плательщика и покупателя
		Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
			Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
			Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтранаНазначения) Тогда
			СтранаНазначения = Справочники.КлассификаторСтранМира.Казахстан;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
			ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
		КонецЕсли;
		
		ЭСФСервер.ПередЗаписьюСчетаФактуры(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЭСФСервер.ОбновитьСторнирующиеДокументы(ЭтотОбъект);
	
КонецПроцедуры

//Процедура-обработчик соыбтия "ОбработкаПроведения" документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	ОрганизацияПлательщикНДС 						= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль); 
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНДС"			   , 			ОрганизацияПлательщикНДС); 
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);

	ПроверитьВозможностьПроведения(СтруктураШапкиДокумента, Отказ);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			 	, "Номенклатура");
	СтруктураПолей.Вставить("Количество"				, "Количество");
	СтруктураПолей.Вставить("СтавкаНДС"   			 	, "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   					, "Сумма");
	СтруктураПолей.Вставить("СтавкаАкциза"   		   	, "СтавкаАкциза");
	СтруктураПолей.Вставить("НДС"						, "СуммаНДС");
	СтруктураПолей.Вставить("Акциз"						, "СуммаАкциза");
	СтруктураПолей.Вставить("ОборотПоРеализации"		, "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"				, "ДатаОборота");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			, "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"   			, "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				, "Сумма");
	СтруктураПолей.Вставить("НДС"					, "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации" 	, "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"				, "ДатаОборота");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

    // Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОсновноеСредство".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство"		, "ОсновноеСредство");
	СтруктураПолей.Вставить("СтавкаНДС"   			, "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				, "Сумма");
	СтруктураПолей.Вставить("НДС"					, "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации" 	, "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"				, "ДатаОборота");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);

    // Получим необходимые данные для проведения и проверки заполенения данные по табличной части "НМА".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив"	, "НематериальныйАктив");
	СтруктураПолей.Вставить("СтавкаНДС"   		 	, "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				, "Сумма");
	СтруктураПолей.Вставить("НДС"					, "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации" 	, "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"				, "ДатаОборота");
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);

	// Подготовим курс регламентированного учета
	КурсВалютыРегламентированногоУчета = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);	

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоОС 	 = ПодготовитьТаблицуОС(РезультатЗапросаПоОС		  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоНМА 	 = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА		  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента	   , Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента   , Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНомераГТД(Отказ);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, 	СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС, 		СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, 		СтруктураШапкиДокумента, Истина);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);		
							
		ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
		
	КонецЕсли;
		
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроверитьВозможностьОтменыПроведения(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)

	Если Метаданные.Перечисления.Найти("РазделыУчета") <> Неопределено И 
		Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		МассивСФПрекратившихДействие = Новый Массив;
		ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(СтруктураШапкиДокумента, МассивСФПрекратившихДействие);
		ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(СтруктураШапкиДокумента, МассивСФПрекратившихДействие);
	КонецЕсли;
	
	//Движения по СФ нужно формировать в случае, если в документ установлен признак "Учитывать НДС"
	Если Не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мОтображатьСтруктурныеПодразделения Тогда
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС = СтруктураШапкиДокумента.Организация;															
	КонецЕсли;	
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоТоварам.Количество() <> 0 Тогда 
		ТаблицаПоТоварам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Истина); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоТоварам.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
    ПериодДвижений = ?(НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаСовершенияОборотаПоРеализации), СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ДатаСовершенияОборотаПоРеализации);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();		
		
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке; 
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  	= СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент 	= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		   	= СтрокаТаблицы.Номенклатура;
		СтрокаДвижения.СтавкаАкциза = СтрокаТаблицы.СтавкаАкциза;
		
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Покупатель 					  = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Покупатель;
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;
		
		
		СтрокаДвижения.СуммаАкцизаВВалютеДоговора 	= СтрокаТаблицы.АкцизВал;		
		СтрокаДвижения.СуммаАкцизаРегл 		  		= СтрокаТаблицы.Акциз;
		
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		СтрокаДвижения.ОборотПоРеализацииРегл = СтрокаТаблицы.ОборотПоРеализации;
		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;		
		
		СтрокаДвижения.СтранаНазначения = СтруктураШапкиДокумента.СтранаНазначения;
		
		СтрокаДвижения.СчетФактура		= Ссылка;
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоУслугам.Количество() <> 0 Тогда 
		ТаблицаПоУслугам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоУслугам.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 

	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.Номенклатура;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Покупатель = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Покупатель;
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;

		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		СтрокаДвижения.ОборотПоРеализацииРегл = СтрокаТаблицы.ОборотПоРеализации;
		
		СтрокаДвижения.СтранаНазначения = СтруктураШапкиДокумента.СтранаНазначения;
		
		СтрокаДвижения.СчетФактура		= Ссылка;
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;		
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоОС.Количество() <> 0 Тогда 
		ТаблицаПоОС = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоОС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 

	Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.ОсновноеСредство;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Покупатель = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Покупатель;
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;

		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		СтрокаДвижения.ОборотПоРеализацииРегл = СтрокаТаблицы.ОборотПоРеализации;
		
		СтрокаДвижения.СтранаНазначения = СтруктураШапкиДокумента.СтранаНазначения;
		
		СтрокаДвижения.СчетФактура		= Ссылка;
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;		
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоНМА.Количество() <> 0 Тогда 
		ТаблицаПоНМА = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоНМА.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 

	Для Каждого СтрокаТаблицы Из ТаблицаПоНМА Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.НематериальныйАктив;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Покупатель = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Покупатель = СтруктураШапкиДокумента.Покупатель;
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;

		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		СтрокаДвижения.ОборотПоРеализацииРегл = СтрокаТаблицы.ОборотПоРеализации;
		
		СтрокаДвижения.СтранаНазначения = СтруктураШапкиДокумента.СтранаНазначения;
		
		СтрокаДвижения.СчетФактура		= Ссылка;
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора = СтрокаТаблицы.ОборотПоРеализацииВал;		
	КонецЦикла;
	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Добавляет движения, которые отмечают исправляемый счет-фактуру как прекративший действие
//
Процедура ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(СтруктураШапкиДокумента, МассивСФПрекратившихДействие)
	
	МассивСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(СтруктураШапкиДокумента.Ссылка);
	Для Каждого Сторно Из МассивСторнирований Цикл
		Если НЕ Сторно.Ссылка.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СчетФактура Из МассивСФПрекратившихДействие Цикл
		СтрокаДвижения = Движения.СчетаФактурыПрекратившиеДействие.Добавить();
		СтрокаДвижения.Период = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.СчетФактура = СчетФактура;
		СтрокаДвижения.Состояние = Перечисления.СостоянияДокументов.Аннулирован;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет движения, которые сторнируют исправляемый счет-фактуру и его дополнительные счета-фактуры.
//
Процедура ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(СтруктураШапкиДокумента, МассивСФПрекратившихДействие)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ОсновнойСчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СторнируемыеСчетаФактуры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ОсновнойСчетФактура = &ОсновнойСчетФактура
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияСчетовФактурВыданных.Период,
	|	СведенияСчетовФактурВыданных.Регистратор,
	|	СведенияСчетовФактурВыданных.Налогоплательщик,
	|	СведенияСчетовФактурВыданных.Организация,
	|	СведенияСчетовФактурВыданных.СтруктурнаяЕдиница,
	|	СведенияСчетовФактурВыданных.СчетФактура,
	|	СведенияСчетовФактурВыданных.СтавкаНДС,
	|	СведенияСчетовФактурВыданных.Контрагент,
	|	СведенияСчетовФактурВыданных.ТМЗ,
	|	СведенияСчетовФактурВыданных.Покупатель,
	|	СведенияСчетовФактурВыданных.СтавкаАкциза,
	|	-СведенияСчетовФактурВыданных.СуммаВВалютеДоговора КАК СуммаВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаРегл КАК СуммаРегл,
	|	-СведенияСчетовФактурВыданных.СуммаНДСВВалютеДоговора КАК СуммаНДСВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаНДСРегл КАК СуммаНДСРегл,
	|	-СведенияСчетовФактурВыданных.ОборотПоРеализацииВВалютеДоговора КАК ОборотПоРеализацииВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.ОборотПоРеализацииРегл КАК ОборотПоРеализацииРегл,
	|	-СведенияСчетовФактурВыданных.СуммаАкцизаВВалютеДоговора КАК СуммаАкцизаВВалютеДоговора,
	|	-СведенияСчетовФактурВыданных.СуммаАкцизаРегл КАК СуммаАкцизаРегл,
	|	СведенияСчетовФактурВыданных.СтранаНазначения,
	|	СведенияСчетовФактурВыданных.УчастникСовместнойДеятельности
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурВыданных КАК СведенияСчетовФактурВыданных
	|ГДЕ
	|	СведенияСчетовФактурВыданных.Регистратор В
	|			(ВЫБРАТЬ
	|				СторнируемыеСчетаФактуры.СчетФактура
	|			ИЗ
	|				СторнируемыеСчетаФактуры КАК СторнируемыеСчетаФактуры)
	|	И СведенияСчетовФактурВыданных.Активность = ИСТИНА";	
	
	Запрос.УстановитьПараметр("ОсновнойСчетФактура", СтруктураШапкиДокумента.ОсновнойСчетФактура);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Если исправляемый счет-фактура является исправленным, то сторнируются только движения, которые он сделал.
		// Движения, которые он сторнировал, не сторнируются, т.к. это приведет к двойному сторнированию.		
		Если Выборка.Регистратор = СтруктураШапкиДокумента.ОсновнойСчетФактура
			И Выборка.СчетФактура <> СтруктураШапкиДокумента.ОсновнойСчетФактура Тогда			
			Продолжить;	// Это движение, которое сторнировал исправляемый счет-фактура, его сторнировать не требуется.		
		КонецЕсли;
		
		СтрокаДвижения = Движения.СведенияСчетовФактурВыданных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, Выборка);
		
		Если МассивСФПрекратившихДействие.Найти(Выборка.Регистратор) = Неопределено Тогда
			МассивСФПрекратившихДействие.Добавить(Выборка.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сторнирующие движения записываются тем же периодом, что и сторнируемые движения. Этот период может быть закрыт.
	Движения.СведенияСчетовФактурВыданных.ДополнительныеСвойства.Вставить(ЭСФКлиентСервер.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);	
	
КонецПроцедуры

Процедура ПроверитьВозможностьОтменыПроведения(Отказ) Экспорт
		
	// Если текущий документ не актуален (исправлен другим), а так же сам влияет на актуальность др. документов
	// то отменять его проведение без корректировки связанных документов нельзя.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыПрекратившиеДействие.Регистратор
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(, СчетФактура = &Ссылка) КАК СчетаФактурыПрекратившиеДействие";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
				
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			ТекстСообщения = НСтр(
			"ru = 'Невозможно отменить проведение документа: ""%1"",
			|так как для документа проведен связанный документ: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект.Ссылка, Выборка.Регистратор);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка, , , Отказ);
			
		КонецЦикла;
					 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура запрещает проведение документа,
// если связанный с ним исправляемый СФ не проведен
Процедура ПроверитьВозможностьПроведения(СтруктураШапкиДокумента, Отказ) Экспорт
	// Исправленный ЭСФ можно провести только если проведен документ, взамен которого он выписан
	// в противном случае сторно-записи не будут сформированы
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		Если НЕ СтруктураШапкиДокумента.ОсновнойСчетФактура.Проведен Тогда			
			ОбщегоНазначения.СообщитьОбОшибке("Исправляемый документ не проведен: " + СокрЛП(СтруктураШапкиДокумента.ОсновнойСчетФактура) + Символы.ПС
		                 + "Проведение исправленного документа невозможно.", Отказ, СтруктураШапкиДокумента.Ссылка);
		КонецЕсли;		 
	КонецЕсли;			
КонецПроцедуры

Процедура ЗаполнитьПунктНазначения() Экспорт

	Если НЕ ЗначениеЗаполнено(ПунктНазначения) И ЗначениеЗаполнено(СтранаНазначения.УчастникТаможенногоСоюза) Тогда
		Если РеализацияПоТоварамИзПеречня() Тогда
			ПунктНазначения = АдресДоставки;
		КонецЕсли;    			
	КонецЕсли;
	
КонецПроцедуры

Функция РеализацияПоТоварамИзПеречня()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВС
	|			ПО (СведенияОНоменклатуреГСВС.НоменклатураГСВС = ГСВС.Ссылка)
	|				И (СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий)
	|		ПО (ГСВС.КодГСВС = Товары.Номенклатура.КодТНВЭД)
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))");
	                                                            
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());	
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ТекстНомерНалоговойРегистрации(Контрагент)
	
	ЗначениеСтраныТС = Справочники.СтраныУчастникиТаможенногоСоюза.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.СтранаРезидентства КАК СтранаРезидентства,
	|	Контрагенты.НомерНалоговойРегистрацииВСтранеРезидентства КАК НомерНалоговойРегистрацииВСтранеРезидентства,
	|	СтраныУчастникиТаможенногоСоюза.Ссылка КАК ЗначениеСтраныТС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныУчастникиТаможенногоСоюза КАК СтраныУчастникиТаможенногоСоюза
	|			ПО КлассификаторСтранМира.УчастникТаможенногоСоюза = СтраныУчастникиТаможенногоСоюза.Ссылка
	|		ПО Контрагенты.СтранаРезидентства = КлассификаторСтранМира.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтранаРезидентства							 = Выборка.СтранаРезидентства;
		
		ЗначениеСтраныТС							 = Выборка.ЗначениеСтраныТС;
		ЗначениеНомераРегистрацииВСтранеРезидентства = Выборка.НомерНалоговойРегистрацииВСтранеРезидентства;	
		
		Если ЗначениеЗаполнено(ЗначениеСтраныТС) И ЗначениеСтраныТС <> Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь 
			И ЗначениеСтраныТС <> Справочники.СтраныУчастникиТаможенногоСоюза.Россия 
			И СтранаРезидентства <> Справочники.КлассификаторСтранМира.Казахстан Тогда
			ТекстНомерНалоговойРегистрации = "Номер налоговой регистрации в стране резидентства: " + ЗначениеНомераРегистрацииВСтранеРезидентства;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстНомерНалоговойРегистрации;
	
КонецФункции

ИзмененДоговорКонтрагента = Ложь;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();