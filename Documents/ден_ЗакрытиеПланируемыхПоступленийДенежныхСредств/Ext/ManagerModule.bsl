#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет заполнение табличной части документами планирования, по которым есть остатки в регистрах
// "ПланируемыеПоступленияДенежныхСредств" и (или) в регистре "РазмещениеЗаявокНаРасходованиеСредств"
//
Процедура ЗаполнитьДокументыПланированияПоОстаткам(Объект) Экспорт
	
	Запрос = СформироватьЗапросПолученияОстатков(Объект);
	
	Объект.ПланируемыеПоступленияДС.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры //ЗаполнитьДокументыПланированияПоОстаткам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Создает запрос для получения остатков по регистрам "ЗаявкиНаРасходованиеСредств"
// и "ДенежныеСредстваВРезерве"
//
Функция СформироватьЗапросПолученияОстатков(Объект, ДокументПланирования = "") Экспорт
	
	ЦФО = Объект.ЦФО;
	Контрагент = Объект.Контрагент;
	ОтборДатаНач = Объект.ОтборДатаНач;
	ОтборДатаКон = Объект.ОтборДатаКон;
	
	Запрос = Новый Запрос;
	СтруктураПараметров = Новый Структура;
	
	ТекстОтбора = "";
	
	Если ДокументПланирования = "" Тогда // Формируем запрос для заполнения ТЧ
		
		Если Объект.ОтборЦФО Тогда
			
			Если ЦФО.Пустая() Тогда
				ТекстОтбора = ТекстОтбора + "
				|И (##.ЦФО = &ЦФО)";
			Иначе
				ТекстОтбора = ТекстОтбора + "
				|И (##.ЦФО В ИЕРАРХИИ (&ЦФО))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("ЦФО", ЦФО);
			
		КонецЕсли;
				
		Если Объект.ОтборКонтрагент Тогда
			
			Если Контрагент.Пустая() Тогда
				ТекстОтбора = ТекстОтбора+"
				|И (##.Контрагент = &Контрагент)";
			Иначе
				ТекстОтбора = ТекстОтбора + "
				|И (##.Контрагент В ИЕРАРХИИ (&Контрагент))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Контрагент", Контрагент);
			
		КонецЕсли;
				
		Если Объект.ОтборОтветственный Тогда
			
			Если Объект.Ответственный.Пустая() Тогда
				ТекстОтбора = ТекстОтбора + "
				|И (##.Ответственный = &Ответственный)";
			Иначе
				ТекстОтбора = ТекстОтбора + "
				|И (##.Ответственный В ИЕРАРХИИ (&Ответственный))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Ответственный", Объект.ОтветственныйПоступление);
			
		КонецЕсли;
		
		Если НЕ (ОтборДатаНач = '00010101' ИЛИ ОтборДатаКон = '00010101') Тогда
			
			ТекстОтбора = ТекстОтбора + "
			|И (##.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон)";
			
			СтруктураПараметров.Вставить("ДатаНач", НачалоДня(ОтборДатаНач));
			СтруктураПараметров.Вставить("ДатаКон", КонецДня(ОтборДатаКон));
			
		ИначеЕсли НЕ ОтборДатаНач = '00010101' Тогда
			
			ТекстОтбора = ТекстОтбора + "
			|И (##.ДатаПоступления >= &ДатаНач)";
			
			СтруктураПараметров.Вставить("ДатаНач", НачалоДня(ОтборДатаНач));
			
		ИначеЕсли НЕ ОтборДатаКон = '00010101' Тогда
			
			ТекстОтбора = ТекстОтбора + "
			|И (##.ДатаПоступления <= &ДатаКон)";
			
			СтруктураПараметров.Вставить("ДатаКон", КонецДня(ОтборДатаКон));
			
		КонецЕсли;
		
		ТекстОтбора = ТекстОтбора + "
		|И (##.Организация = &Организация)";
		СтруктураПараметров.Вставить("Организация", Объект.Организация);
		
		ТекстОтбора = ТекстОтбора + "
		|И (##.СтруктурноеПодразделение = &СтруктурноеПодразделение)";
		СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		
		ТекстОтбора = Сред(ТекстОтбора, 4);
		
	Иначе // Формируем запрос по конкретной заявке
		
		ТекстОтбора = "##=&ДокументПланирования";
		СтруктураПараметров.Вставить("ДокументПланирования", ДокументПланирования);
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланируемоеПоступлениеОстаток.ДокументПланирования КАК ДокументПланирования,
	|	СУММА(ПланируемоеПоступлениеОстаток.СуммаПоступленияОстаток) КАК ОстатокПоступление,
	|	СУММА(ПланируемоеПоступлениеОстаток.СуммаРазмещенияОстаток) КАК ОстатокРазмещение,
	|	ПланируемоеПоступлениеОстаток.ДокументПланирования.Ответственный КАК Ответственный,
	|	ПланируемоеПоступлениеОстаток.ДокументПланирования.ВалютаДокумента КАК ВалютаПоступление,
	|	ПланируемоеПоступлениеОстаток.ДокументПланирования.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеДСОстатки.ДокументПланирования КАК ДокументПланирования,
	|		ПоступлениеДСОстатки.СуммаОстаток КАК СуммаПоступленияОстаток,
	|		ПоступлениеДСОстатки.СуммаУпрОстаток КАК СуммаУпрПоступленияОстаток,
	|		ПоступлениеДСОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовПоступленияОстаток,
	|       0 КАК СуммаРазмещенияОстаток
	|	ИЗ
	|		РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(&МоментВремени,"+СтрЗаменить(ТекстОтбора,"##","ДокументПланирования")+" ) КАК ПоступлениеДСОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования,
	|		0,
	|		0,
	|		0,
	|		РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(,"+СтрЗаменить(ТекстОтбора,"##","ДокументПланирования")+" ) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки) КАК ПланируемоеПоступлениеОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемоеПоступлениеОстаток.ДокументПланирования";
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда
		Момент = Объект.Дата;
	Иначе
		Момент = Объект.Ссылка.МоментВремени();
	КонецЕсли;
	Запрос.УстановитьПараметр("МоментВремени", Момент);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПолученияОстатков()

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт 
	
	ПереопределяемыеТаблицы = Новый Массив;
	ПереопределяемыеТаблицы.Добавить("ПланируемыеПоступленияДС");
	
	ДополнительныеЗапросы = Новый Массив;
	ДополнительныеЗапросы.Добавить("ПланируемыеПоступленияОстатки");  
	ДополнительныеЗапросы.Добавить("РазмещениеЗаявокНаРасходованиеСредствОстатки");
	
	ДополнительныеПараметрыЗапросов = Новый Структура;
	//ДополнительныеПараметрыЗапросов.Вставить("Дата", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Дата"));
	ДополнительныеПараметрыЗапросов.Вставить("МоментВремени", ДокументСсылка.МоментВремени());
	//ДополнительныеПараметрыЗапросов.Вставить("ВалютаУпр", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,ПереопределяемыеТаблицы,ДополнительныеПараметрыЗапросов,ДополнительныеЗапросы);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

// Возвращает текст запроса, переопределяющий получение ТЧ ПланируемыеПоступленияДС
//
Функция ТекстЗапросаПланируемыеПоступленияДС(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ПланируемыеПоступленияДС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланируемыеПоступленияКЗакрытию.ДокументПланирования КАК ДокументПланирования,
	|	ПланируемыеПоступленияКЗакрытию.ДокументПланирования.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ
	|	ПланируемыеПоступленияКЗакрытию
	|ИЗ
	|	Документ.ден_ЗакрытиеПланируемыхПоступленийДенежныхСредств.ПланируемыеПоступленияДС КАК ПланируемыеПоступленияКЗакрытию
	|ГДЕ
	|	ПланируемыеПоступленияКЗакрытию.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПланируемыеПоступленияОстатки(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт

	НомераТаблиц.Вставить("ТаблицаПланируемыеПоступленияОстатки", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланируемыеПоступленияКЗакрытию.ДокументПланирования КАК ДокументПланирования,
	|	ПланируемыеПоступленияКЗакрытию.ВидОперации КАК ВидОперации,
	|	ПланируемыеПоступленияОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПланируемыеПоступленияОстатки.Организация КАК Организация,
	|	ПланируемыеПоступленияОстатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ПланируемыеПоступленияОстатки.Контрагент КАК Контрагент,
	|	ПланируемыеПоступленияОстатки.Сделка КАК Сделка,
	|	ПланируемыеПоступленияОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ПланируемыеПоступленияОстатки.Проект КАК Проект,
	|	ПланируемыеПоступленияОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ПланируемыеПоступленияОстатки.СуммаУпрОстаток КАК СуммаУпр,
	|	ПланируемыеПоступленияОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки(&МоментВремени,
	|		ДокументПланирования В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДокументПланирования ИЗ ПланируемыеПоступленияКЗакрытию)) КАК ПланируемыеПоступленияОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПланируемыеПоступленияКЗакрытию
	|		ПО ПланируемыеПоступленияКЗакрытию.ДокументПланирования = ПланируемыеПоступленияОстатки.ДокументПланирования
	|ГДЕ
	|	НЕ (ПланируемыеПоступленияОстатки.СуммаОстаток ЕСТЬ NULL 
	|			ИЛИ (ПланируемыеПоступленияОстатки.СуммаОстаток = 0 
	|				И ПланируемыеПоступленияОстатки.СуммаВзаиморасчетовОстаток = 0 
	|				И ПланируемыеПоступленияОстатки.СуммаУпрОстаток = 0))
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ден_ПланируемыеПоступленияДенежныхСредств.Остатки";
		
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРазмещениеЗаявокНаРасходованиеСредствОстатки(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт

	НомераТаблиц.Вставить("ТаблицаРазмещениеЗаявокНаРасходованиеСредств", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования КАК ДокументПланирования,
	|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК ДокументРезервирования,
	|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(&МоментВремени,
	|		ДокументПланирования В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДокументПланирования ИЗ ПланируемыеПоступленияКЗакрытию)) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|ГДЕ
	|	НЕ (РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток ЕСТЬ NULL ИЛИ РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток = 0)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки";	
	
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

#КонецЕсли