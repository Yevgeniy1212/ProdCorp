Перем мВалютаРегламентированногоУчета Экспорт;
// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ЕстьКоэффициент = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаЦенности");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если ЕстьКоэффициент И (СтрокаТаблицы.Коэффициент <> 0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.ОборотПоРеализации
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("Контрагент");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Контрагент");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
Процедура ЗаполнитьРеквизитыДокумента() Экспорт
	
	ДокументОсн = ДокументОснование;
		
КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если Основание.Дата <> КонецДня(Основание.Дата) Тогда
		Дата = Основание.Дата+1;
	Иначе
		Дата = Основание.Дата;
	КонецЕсли;	
	
	ДокументОснование = Основание.Ссылка;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	МетаданныеДокумента = Основание.ПолучитьОбъект().Метаданные();	
	
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента) Тогда
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетУчетаРасчетовПоАвансам", МетаданныеДокумента) Тогда
		СчетУчетаРасчетовПоАвансам = Основание.СчетУчетаРасчетовПоАвансам;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	КонецЕсли;

	// Документн не имеет смысла без данного признака
	УчитыватьНДС = Истина;	
	
	//из документа основания
	ЗаполнитьРеквизитыДокумента();
	
	//заполним табличные части
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект,Основание.Ссылка);		
	СвернутьТабличныеЧасти();	
		
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчетаВТабЧасти(ТабличнаяЧасть) Экспорт
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл		
		ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
	КонецЦикла;
Конецпроцедуры // ЗаполнитьРеквизитыНалоговогоУчетаВТабЧасти

// Заполняет счета расчетов по умолчанию, если это нужно
Процедура ЗаполнитьСчетаУчетаРасчетовРегл() Экспорт

	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
    	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетовРегл

// Производит заполнение и установку реквизитов налогового учета и НДС 
// в строке табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);	
Конецпроцедуры	

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт

	Если ЗаполнятьБУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации    = СчетаУчета.СчетУчетаНДСПоРеализации;
		КонецЕсли; 		
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли; 		
	
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьСчетаБУ

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Если ИмяТабЧасти = "ОС" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);			
	ИначеЕсли ИмяТабЧасти = "НМА" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаНМА(Организация, СтрокаТЧ.НематериальныйАктив, Дата);			
		СчетаУчета.Вставить("СчетУчетаНДСПоРеализации", ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	Иначе	
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	КонецЕсли;
	
	Если СчетаУчета.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
		СчетаУчета.СчетУчетаНДСПоРеализации  = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	КонецЕсли;	
		
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);	

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура();	
	
	Возврат СтруктураФорм;            
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//Процедура сворачивает табличные части документа по одинаковым разрезам
//
Процедура СвернутьТабличныеЧасти() Экспорт
	Если Товары.Количество() > 1 Тогда
		Товары.Свернуть("Номенклатура,Цена,СтавкаНДС,ЕдиницаИзмерения, Коэффициент, КлючСвязи", "Количество, Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;
	
	Если Услуги.Количество() > 1 Тогда
		Услуги.Свернуть("Номенклатура,Содержание,Цена,СтавкаНДС", "Количество, Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;
       	
	Если ОС.Количество() > 1 Тогда
		ОС.Свернуть("ОсновноеСредство,СтавкаНДС", "Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;

	Если НМА.Количество() > 1 Тогда
		НМА.Свернуть("НематериальныйАктив,СтавкаНДС", "Сумма, ОборотПоРеализации, СуммаНДС");
	КонецЕсли;   

КонецПроцедуры
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()
  
// Проверяет правильность заполнения строк табличной части "Услуги".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");			
		КонецЕсли;
	КонецЕсли;    		                 
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();

	// Проверить что в табличной части  Услуги нет товаров
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ,Заголовок); 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	Если НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Иначе 
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	КонецЕсли;

	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");			
		КонецЕсли;
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ОС".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");			
		КонецЕсли;	
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");			
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСПоРеализации");			
		КонецЕсли;	
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаДокумента,ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок)
	ПризнакКорректировки = НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
	
	// Проводки по товарам
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если  СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		Проводка = ПроводкиБУ.Добавить();				
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		Проводка.Содержание  = "НДС: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
 		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации Тогда
			// Оборот по реализации
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);				
					
		Иначе
			// Корректировка оборота по реализации
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = ?(ПризнакКорректировки, -СтрокаТаблицы.НДСВал, СтрокаТаблицы.НДСВал);
				
			КонецЕсли;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);				
		КонецЕсли;	
		
		//формирование проводок по НУ
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();				
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
			ПроводкаНУ.Содержание  = "НДС: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);			
			
			СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации Тогда
				// Оборот по реализации				
			
				ПроводкаНУ.СчетДт       = СчетУчетаРасчетовСКонтрагентомНУ;			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
							
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);				
				
			Иначе
				// Корректировка оборота по реализации
				ПроводкаНУ.СчетКт       = СчетУчетаРасчетовСКонтрагентомНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
								            								
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);				
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
		КонецЕсли; 		
	КонецЦикла;		
	
КонецПроцедуры // ДвиженияПоРегистрамРегл 

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить движения по спецрегистрам подсистемы учета НДС
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);
	ТаблицыДокумента.Вставить("ТаблицаПоУслугам",	ТаблицаПоУслугам);    
	ТаблицыДокумента.Вставить("ТаблицаПоОС",		ТаблицаПоОС);    
	ТаблицыДокумента.Вставить("ТаблицаПоНМА",		ТаблицаПоНМА);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ПроводкиБУ 		= Движения.Типовой;		
		ПроводкиНУ 		= Движения.Налоговый;		
		ДатаДокумента 	= СтруктураШапкиДокумента.Дата;		
		ТаблицаАвансов 	= УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету, "НДС");
		
		// Проводки по БУ
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоТоварам, ПроводкиБУ,ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоОС, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоНМА, ПроводкиБУ,ПроводкиНУ,Отказ, Заголовок);
		
		//Учет курсовых разниц
		Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
			ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
		КонецЕсли; // Учет курсовых разниц
	КонецЕсли;	 
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если НЕ ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	ПризнакКорректировки = СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              						
			Если ПризнакКорректировки Тогда
				УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДС(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);			
			Иначе	
				УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);		
			КонецЕсли;		
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);       	
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура-обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//определим сумму документа
	СуммаДокумента  = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
		
   	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" документа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	

	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи


//Процедура-обработчик соыбтия "ОбработкаПроведения" документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	НеобходимостьОтраженияВНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	//проверим заполнение шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//проверим заполнение табличной части  Товары                                                                                 	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//проверим заполнение табличной части  Услуги
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок);
	//проверим заполнение табличной части ОС
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок);
	//проверим заполнение табличной части НМА
	ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок);
	    	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", 			"Номенклатура");	
	СтруктураПолей.Вставить("Количество", 				"Количество");
	СтруктураПолей.Вставить("Коэффициент", 				"Коэффициент");
	СтруктураПолей.Вставить("Сумма", 					"Сумма");	
	СтруктураПолей.Вставить("ОборотПоРеализации",		"ОборотПоРеализации");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");
		

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", 			"Номенклатура");
	СтруктураПолей.Вставить("Содержание", 				"Содержание");
	СтруктураПолей.Вставить("Услуга", 					"Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество", 				"Количество");
	СтруктураПолей.Вставить("Сумма", 					"Сумма");
	СтруктураПолей.Вставить("ОборотПоРеализации",		"ОборотПоРеализации");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС",						"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");		
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "ОсновныеСредства".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",				"ОсновноеСредство");	
	СтруктураПолей.Вставить("Сумма", 					"Сумма");
	СтруктураПолей.Вставить("ОборотПоРеализации",		"ОборотПоРеализации");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");		
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	РезультатЗапросаПоОсновнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "НМА".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",				"НематериальныйАктив");	
	СтруктураПолей.Вставить("Сумма", 					"Сумма");
	СтруктураПолей.Вставить("ОборотПоРеализации",		"ОборотПоРеализации");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");		
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации", "СчетУчетаНДСПоРеализации");

	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);
	
	// Подготовим таблицы товаров, услуг, ОС для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	ТаблицаПоУслугам    = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	ТаблицаПоОС 		= ПодготовитьТаблицуТоваров(РезультатЗапросаПоОсновнымСредствам, СтруктураШапкиДокумента);
	
	ТаблицаПоНМА 		= ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента,    Истина, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента,    Истина, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС,      СтруктураШапкиДокумента,    Истина, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА,     СтруктураШапкиДокумента,    Истина, мВалютаРегламентированногоУчета);
	
	Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента
		И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		// Договор в у.е., документ оформлен в тенге
		ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаПоТоварам, СтруктураШапкиДокумента);
		ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаПоУслугам, СтруктураШапкиДокумента);
		ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаПоОС,      СтруктураШапкиДокумента);
		ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаПоНМА,     СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							ТаблицаПоУслугам,ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);			
		Если Не Отказ Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;									
	КонецЕсли;

	Если Не Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
	КонецЕсли;
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

Процедура ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаЗначений, СтруктураШапкиДокумента)
	
	Если ТаблицаЗначений.Колонки.Найти("СуммаВал") <> Неопределено Тогда

		СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал") / (СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов), 2);
		
		//Распределение суммы по таблице
		РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег, ТаблицаЗначений.ВыгрузитьКолонку("СуммаВал"));
		
		Если Не РаспределениеРег = Неопределено Тогда
			ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег, "СуммаВал");
		КонецЕсли;		
			
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("ОборотПоРеализацииВал") <> Неопределено Тогда
			
		СуммаРег = Окр(ТаблицаЗначений.Итог("ОборотПоРеализацииВал") / (СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов), 2);
		
		//Распределение суммы по таблице
		РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег, ТаблицаЗначений.ВыгрузитьКолонку("ОборотПоРеализацииВал"));
		
		Если Не РаспределениеРег = Неопределено Тогда
			ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег, "ОборотПоРеализацииВал");
		КонецЕсли;		
			
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("НДСВал") <> Неопределено Тогда
			
		СуммаРег = Окр(ТаблицаЗначений.Итог("НДСВал") / (СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов), 2);
		
		//Распределение суммы по таблице
		РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег, ТаблицаЗначений.ВыгрузитьКолонку("НДСВал"));
		
		Если Не РаспределениеРег = Неопределено Тогда
			ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег, "НДСВал");
		КонецЕсли;		
			
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("СуммаБезНДСВал") <> Неопределено Тогда
			
		СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаБезНДСВал") / (СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов), 2);
		
		//Распределение суммы по таблице
		РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"));
		
		Если Не РаспределениеРег = Неопределено Тогда
			ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег, "СуммаБезНДСВал");
		КонецЕсли;		
			
	КонецЕсли;
	
	// Уберем расхождения из-за округления
	Если ТаблицаЗначений.Колонки.Найти("СуммаБезНДСВал") <> Неопределено
		И ТаблицаЗначений.Колонки.Найти("ОборотПоРеализацииВал") <> Неопределено
		И ТаблицаЗначений.Итог("СуммаБезНДСВал") = ТаблицаЗначений.Итог("ОборотПоРеализацииВал") Тогда
		
		КолонкаСуммаБезНДС = ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"); 	
		ТаблицаЗначений.ЗагрузитьКолонку(КолонкаСуммаБезНДС, "ОборотПоРеализацииВал");
		
	КонецЕсли;
	
КонецПроцедуры


мВалютаРегламентированногоУчета 				= Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 			= ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();