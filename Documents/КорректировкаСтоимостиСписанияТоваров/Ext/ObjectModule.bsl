Перем мУдалятьДвижения;
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура();

КонецФункции // ПолучитьСписокПечатныхФорм()

Процедура ЗаписатьСведенияОКорректировке(СведенияОКорректировкиСтоимостиПродукцииИТоваров)
	
	Если СведенияОКорректировкиСтоимостиПродукцииИТоваров.Количество() <> 0 Тогда 
		//запишем данные вспомогательного регистра    
		СведенияОКорректировкиСтоимостиПродукцииИТоваров.ЗаполнитьЗначения(Организация, "Организация");
		СведенияОКорректировкиСтоимостиПродукцииИТоваров.ЗаполнитьЗначения(Дата		  , "ПериодРасчета");
		СведенияОКорректировкиСтоимостиПродукцииИТоваров.ЗаполнитьЗначения(Истина	  , "Активность");
		СведенияОКорректировкиСтоимостиПродукцииИТоваров.ЗаполнитьЗначения(Ссылка	  , "Регистратор");
		
		СведенияОКорректировкиСтоимостиПродукцииИТоваров.Свернуть("Организация,СтруктурноеПодразделение,СтруктурноеПодразделениеПолучатель, ПериодРасчета,Номенклатура,Регистратор,ОперацияСписания,ОПР, КорректируемыйДокумент,НоменклатурнаяГруппаВыпуска, ПодразделениеВыпуска, СчетЗатратБУ, СтатьяЗатрат, ВидУчета","Количество,СуммаКорректировки, Себестоимость, СуммаКорректировкиВНУ");
		
		ВспомогательныйРасчет = РегистрыСведений.СведенияОКорректировкиСтоимостиПродукцииИТоваров.СоздатьНаборЗаписей();
		ВспомогательныйРасчет.Отбор.Регистратор.Установить(Ссылка);
		ВспомогательныйРасчет.Прочитать();
		ВспомогательныйРасчет.Загрузить(СведенияОКорректировкиСтоимостиПродукцииИТоваров);
		ВспомогательныйРасчет.Записать(); 
	КонецЕсли;
	             
КонецПроцедуры

// Процедура проверяет наличие операций заданного вида в месяце проведения документа
// Проверка необходима в связи стем, что документ формирует записи в непериодический регистр сведений
Функция СуществуютПовторяемыеДокументы(СтруктураШапкиДокумента, Отказ)
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаНачалаПериода", 			НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", 		КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",  				СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",		  				Ссылка);
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение",  	СтруктураШапкиДокумента.СтруктурноеПодразделение);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ 
				|	КорректировкаСтоимостиСписанияТоваров.Ссылка,
	            |	КорректировкаСтоимостиСписанияТоваров.Представление КАК ПредставлениеДокумента,
				|	КорректировкаСтоимостиСписанияТоваров.Дата	            
	            |ИЗ
	            |	Документ.КорректировкаСтоимостиСписанияТоваров КАК КорректировкаСтоимостиСписанияТоваров
	            |ГДЕ
	            |	НЕ КорректировкаСтоимостиСписанияТоваров.Ссылка = &Ссылка
	            |	И КорректировкаСтоимостиСписанияТоваров.Организация = &Организация " + ?(мПоддержкаРаботыСоСтруктурнымиПодразделениями, " И КорректировкаСтоимостиСписанияТоваров.СтруктурноеПодразделение = &СтруктурноеПодразделение ", "")+ "	            
	            |	И КорректировкаСтоимостиСписанияТоваров.Дата >= &ДатаНачалаПериода
	            |	И КорректировкаСтоимостиСписанияТоваров.Дата <= &ДатаОкончанияПериода
	            |	И КорректировкаСтоимостиСписанияТоваров.Проведен
	            |	И (НЕ КорректировкаСтоимостиСписанияТоваров.ПометкаУдаления); ";
				
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = "Операция уже выполнена в документах:";
		Выборка  =   РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + "
					|   " + СокрЛП(Выборка.ПредставлениеДокумента);
		КонецЦикла; 		
		Сообщить(ТекстСообщения);	
		Отказ = Истина;		
	КонецЕсли;	
	
	Возврат Отказ;
Конецфункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		// Проверка ручной корректировки
		Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура;
   
	СтруктураДопПараметров.Вставить("Организация", 				Организация);
	СтруктураДопПараметров.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
   	СтруктураДопПараметров.Вставить("Период", 					Дата);
   	СтруктураДопПараметров.Вставить("Регистратор", 				ЭтотОбъект);
	
	Если СуществуютПовторяемыеДокументы(СтруктураДопПараметров, Отказ) Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров = Движения.СведенияОКорректировкиСтоимостиПродукцииИТоваров.Выгрузить();
	ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Очистить();
	                    
	ДатаНач = НачалоМесяца(ПериодРегистрации);
	ДатаКон = КонецМесяца(ПериодРегистрации);
	
	МетаданныеРегистров = Метаданные.РегистрыНакопления;
				
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОстатковИПриходов.Счет КАК Счет,
	               |	ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
	               |	ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация ) КАК ТаблицаОстатковИПриходов
	               |ГДЕ
	               |	(ТаблицаОстатковИПриходов.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
	               |			ИЛИ ТаблицаОстатковИПриходов.Регистратор ССЫЛКА Документ.ГТДИмпорт)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОстатковИПриходов.Счет,
	               |	ТаблицаОстатковИПриходов.Субконто1,
	               |	ТаблицаОстатковИПриходов.Субконто2";
		
	Запрос.УстановитьПараметр("ДатаКон", 				  ДатаКон);
   	Запрос.УстановитьПараметр("ДатаНач", 				  ДатаНач);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Организация", 			  Организация);
   	Запрос.УстановитьПараметр("СписокСчетов", 			  КорректировкаСтоимости.СписокСчетовУчетаНоменклатуры("Бух"));
   
   	Результат = Запрос.Выполнить();
   
   	ВыборкаДетальныеЗаписи = Результат.Выбрать();
   
   	МассивТоваров = Новый Массив;
   
   	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		   МассивТоваров.Добавить(ВыборкаДетальныеЗаписи.Субконто1);
	КонецЦикла;
   
	
   	СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивТоваров);
   	СтруктураДопПараметров.Вставить("Учет"			, "Бух");
   	Массив = Новый Массив;
   	
   	СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
   	СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер"	  , "");
	
	ЗаписьВозвратыПоПроизводству = Движения.Типовой.Выгрузить();
	ЗаписьВозвратыПоПроизводству.Очистить();
	СтруктураДопПараметров.Вставить("ЗаписьВозвратыПоПроизводству", ЗаписьВозвратыПоПроизводству);
	
	СтруктураДопПараметров.Вставить("ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров", ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров);
	                                   
   	КорректировкаСтоимости.КорректировкаСтоимости(МассивТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров);
	
	Для Каждого Строка Из СтруктураДопПараметров.ЗаписьВозвратыПоПроизводству Цикл 
		
		Проводка = Движения.Типовой.Добавить();
				   
		Проводка.Период = Строка.Период;
		Проводка.Регистратор   = Строка.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = Строка.Организация;
		Проводка.Содержание    = "Корректировка стоимости списания";
		Проводка.ВидРегламентнойОперации = Строка.ВидРегламентнойОперации;
				
		Проводка.СчетКт = Строка.СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.СубконтоКт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.СубконтоКт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Строка.СубконтоКт3);
				
		Проводка.СчетДт = Строка.СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СубконтоДт1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СубконтоДт2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СубконтоДт3);
		
		Проводка.СтруктурноеПодразделениеДт = Строка.СтруктурноеПодразделениеДт; 
		Проводка.СтруктурноеПодразделениеКт = Строка.СтруктурноеПодразделениеКт;
				
		Проводка.Сумма = Строка.Сумма;
				
	КонецЦикла;
	
	Движения.Типовой.Записать(Ложь);
	Движения.РеализацияТМЗ.Записать(Ложь);
	
	Если УчитыватьКПН Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОстатковИПриходов.Счет КАК Счет,
	               |	ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
	               |	ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов
	               |ГДЕ
	               |	(ТаблицаОстатковИПриходов.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
	               |			ИЛИ ТаблицаОстатковИПриходов.Регистратор ССЫЛКА Документ.ГТДИмпорт)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОстатковИПриходов.Счет,
	               |	ТаблицаОстатковИПриходов.Субконто1,
	               |	ТаблицаОстатковИПриходов.Субконто2";
				   
	   Запрос.УстановитьПараметр("ДатаКон", 				 ДатаКон);
	   Запрос.УстановитьПараметр("ДатаНач", 				 ДатаНач);
	   Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	   Запрос.УстановитьПараметр("Организация", 			 Организация);
	   Запрос.УстановитьПараметр("СписокСчетов", 			 КорректировкаСтоимости.СписокСчетовУчетаНоменклатуры("Нал"));
	   
	   Результат = Запрос.Выполнить();
	   
	   ВыборкаДетальныеЗаписи = Результат.Выбрать();
	   
	   МассивТоваров = Новый Массив;
	   
	   Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		   МассивТоваров.Добавить(ВыборкаДетальныеЗаписи.Субконто1);
	   КонецЦикла;        
	   
	   СтруктураДопПараметров.Вставить("ТаблицаТоваров"				 , МассивТоваров);
	   СтруктураДопПараметров.Вставить("Учет"						 , "Нал");
	   СтруктураДопПараметров.Вставить("СписокНеКорректируемыхСчетов", Неопределено);
	   СтруктураДопПараметров.Вставить("РасчетПрямыхЗатратНомер"	 , "");
	   
	   ТаблицаРасчетаСебестоимости = СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров.Скопировать();
	   
	   //Нам необходимо значть регистраторы корректировок, чтобы их сразу отсчеь при выборке
	   СписокКорректируемыхДокументов = Новый СписокЗначений;
	   СписокКорректируемыхДокументов.ЗагрузитьЗначения(ТаблицаРасчетаСебестоимости.ВыгрузитьКолонку("КорректируемыйДокумент"));
	   
	   СтруктураДопПараметров.Вставить("СписокКорректируемыхДокументов",СписокКорректируемыхДокументов);
	   
	   ТаблицаРасчетаСебестоимости.Свернуть("Номенклатура,ПодразделениеВыпуска,НоменклатурнаяГруппаВыпуска, СтруктурноеПодразделение, СтруктурноеПодразделениеПолучатель, ОперацияСписания, ОПР, КорректируемыйДокумент, СтатьяЗатрат, СчетЗатратБУ, ВидУчета", "СуммаКорректировки, Количество, Себестоимость,СуммаКорректировкиВНУ");	   
	   СтруктураДопПараметров.Вставить("ТаблицаРасчетаСебестоимости", ТаблицаРасчетаСебестоимости);
	   
	   //скорректируем по виду учета НУ = "НУ"
	   СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);   
	   КорректировкаСтоимости.КорректировкаСтоимости(МассивТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров);	
	   //скорректируем по виду учета НУ = "ПР"
	   СтруктураДопПараметров.Вставить("ВидУчетаНУ", Справочники.ВидыУчетаНУ.ПР);	
	   КорректировкаСтоимости.КорректировкаСтоимости(МассивТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров);		
	   
   КонецЕсли;
   
   
   ЗаписатьСведенияОКорректировке(СтруктураДопПараметров.ЗаписьСведенияОКорректировкиСтоимостиПродукцииИТоваров);
          	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();