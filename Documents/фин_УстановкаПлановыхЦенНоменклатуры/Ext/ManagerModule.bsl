#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	// Процедура выполняет заполнение документа по документу-основанию
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный И Метаданные.Документы.Найти("УстановкаЦенНоменклатуры")<>Неопределено И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		// Заполнение шапки
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
			Если ДокументОснование.ВидыЦен.Количество()>0 Тогда
				Объект.ДокументОснование = ДокументОснование.Ссылка;
				Объект.ТипЦен = ДокументОснование.ВидыЦен[0].ВидЦены;
				Объект.Товары.Очистить();
				Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
					Если ТекСтрокаТовары.ВидЦены<>Объект.ТипЦен Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = Объект.Товары.Добавить();
					НоваяСтрока.Валюта = ДокументОснование.ВидыЦен[0].ВидЦены.ВалютаЦены;
					НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
					НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Объект.НеПроводитьНулевыеЗначения = ДокументОснование.НеПроводитьНулевыеЗначения;
			Объект.ДокументОснование = ДокументОснование.Ссылка;
			Объект.ТипЦен = ДокументОснование.ТипЦен;
			Объект.Товары.Очистить();
			Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Валюта = ТекСтрокаТовары.Валюта;
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.фин_УстановкаПлановыхЦенНоменклатуры") Тогда
		// Заполнение шапки
		Объект.Автор = ДокументОснование.Автор;
		Объект.ДокументОснование = ДокументОснование.ДокументОснование;
		Объект.Информация = ДокументОснование.Информация;
		Объект.Комментарий = ДокументОснование.Комментарий;
		Объект.НеПроводитьНулевыеЗначения = ДокументОснование.НеПроводитьНулевыеЗначения;
		Объект.Ответственный = ДокументОснование.Ответственный;
		Объект.РучнаяКорректировка = ДокументОснование.РучнаяКорректировка;
		Объект.Сценарий = ДокументОснование.Сценарий;
		Объект.ТипЦен = ДокументОснование.ТипЦен;
		Объект.Товары.Очистить();
		Для Каждого ТекСтрокаТовары Из ДокументОснование.Товары Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Валюта = ТекСтрокаТовары.Валюта;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры   

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//Анализ промежуточного исполнения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлановыеЦеныНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Изменение цен'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Возврат;	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлановыеЦеныНоменклатуры") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлановыеЦеныНоменклатуры",
			НСтр("ru = 'Изменение цен'"),
			ПечатьПлановыеЦеныНоменклатуры(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.фин_УстановкаПлановыхЦенНоменклатуры.ПФ_MXL_ПлановыеЦеныНоменклатуры");
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПлановыеЦеныНоменклатуры(МассивОбъектов, ОбъектыПечати) Экспорт
	Макет = Документы.фин_УстановкаПлановыхЦенНоменклатуры.ПолучитьМакет("ПФ_MXL_ПлановыеЦеныНоменклатуры");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "фин_УстановкаПлановыхЦенНоменклатуры_ПлановыеЦеныНоменклатуры";
	ТабличныйДокумент.Очистить();
	Для Каждого Ссылка Из МассивОбъектов Цикл
		УстановитьПривилегированныйРежим(Истина);
		
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	Ответственный.Представление КАК ОтветственныйПредставление
		|ИЗ
		|	Документ.фин_УстановкаПлановыхЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Ссылка В (&Ссылка)";

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.НомерСтроки 				     КАК НомерСтроки,
		|	УстановкаЦенНоменклатуры.Номенклатура,
		//|	ПОДСТРОКА(УстановкаЦенНоменклатуры.Номенклатура.НаименованиеПолное, 1, 250) КАК Товар,
		|	Представление(УстановкаЦенНоменклатуры.Номенклатура) КАК Товар,
		|	УстановкаЦенНоменклатуры.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	УстановкаЦенНоменклатуры.Цена,
		|	УстановкаЦенНоменклатуры.Номенклатура."+фин_ОбщегоНазначенияВызовСервераПовтИсп.РеквизитЕдиницыИзмерения()+".Представление  КАК ЕдиницаИзмеренияПредставление,
		|	УстановкаЦенНоменклатуры.Валюта,
		|	УстановкаЦенНоменклатуры.Валюта.Представление            КАК ВалютаПредставление
		|
		|ИЗ
		|	Документ.фин_УстановкаПлановыхЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатуры
		|
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	УстановкаЦенНоменклатуры.НомерСтроки
		|";

		ЗапросПоТоварам = Запрос.Выполнить();

		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		//ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(Ссылка, "Изменение прогнозных цен номенклатуры", глСписокПрефиксовУзлов);
		ОбластьМакета.Параметры.ТекстЗаголовка = Строка(Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть(ОбластьШапки + "|Номенклатура");
		ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть(ОбластьШапки + "|Цена");
		ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть(ОбластьСтроки + "|Номенклатура");
		ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть(ОбластьСтроки + "|Цена");
		ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
		ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

		// Выведем шапку
		Если ВыводитьКоды Тогда
			ОбластьШапкаНоменклатура.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьШапкаНоменклатура);
		
		ОбластьШапкаТипЦен.Параметры.ТипЦен = Ссылка.ТипЦен;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТипЦен);
		
		// Выведем таблицу
		ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВставлятьРазделительСтраниц = Ложь;
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			ВставлятьРазделительСтраниц = Ложь;
			
			ОбластьСтрокаНоменклатура.Параметры.Заполнить(ВыборкаПоСтрокам);
			ОбластьСтрокаНоменклатура.Параметры.Товар = ВыборкаПоСтрокам.Товар;
			Если ВыводитьКоды Тогда
				ОбластьСтрокаНоменклатура.Параметры.КодАртикул = ВыборкаПоСтрокам.КодАртикул;
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьСтрокаНоменклатура);
			ОбластьСтрокаТипЦен.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;

		// Выведем подвал
		ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьПодвалНоменклатура);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТипЦен);

		ТекОбласть = ТабличныйДокумент.Области.ОтветственныйПредставление;

		ОбластьОтветственного = ТабличныйДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабличныйДокумент.ШиринаТаблицы, 29));
		ОбластьОтветственного.Объединить();
		ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

		ВставлятьРазделительСтраниц = Истина;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	КонецЦикла;
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьДокумента()

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ИмяОбъектаМетаданных = ДокументСсылка.Метаданные().Имя;
	ПараметрыПроведения = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(ИмяОбъектаМетаданных,НомераТаблиц,Ложь);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	Реквизиты = фин_ОбщегоНазначенияСервер.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если Отказ Тогда
		Возврат ПараметрыПроведения;
	КонецЕсли;
	Запрос.Текст = фин_УправлениеПроведениемДокументовСервер.ТекстЗапросаВременныеТаблицыДокумента(ИмяОбъектаМетаданных,НомераТаблиц, Реквизиты);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	НомераТаблиц = Новый Структура;
	Запрос.Текст = "";
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
		ИмяТЧ = ТабличнаяЧасть.Имя;
		Запрос.Текст = Запрос.Текст + ТекстЗапросаТабличнаяЧасть(ИмяОбъектаМетаданных,ИмяТЧ, НомераТаблиц, ПараметрыПроведения, Реквизиты);
	КонецЦикла;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	Если ПараметрыПроведения.Реквизиты[0].НеПроводитьНулевыеЗначения Тогда
		Сч = 0;
		Пока Сч < ПараметрыПроведения.ТаблицаТовары.Количество() Цикл
			СтрокаТаблицы = ПараметрыПроведения.ТаблицаТовары.Получить(Сч);
			Если СтрокаТаблицы.Цена = 0 Тогда
				ПараметрыПроведения.ТаблицаТовары.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции 

//Проверить добавить колонку
//
Процедура ПроверитьДобавитьКолонку(ТаблицаРеквизиты,ИмяКолонки) Экспорт
	Если ТаблицаРеквизиты.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаТабличнаяЧасть(ИмяОбъектаМетаданных,ИмяТЧ, НомераТаблиц,ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["Есть"+ИмяТЧ] Тогда
		ПараметрыПроведения.Вставить("Таблица"+ИмяТЧ, Неопределено);
	Иначе 
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	"+ИмяТЧ+".НомерСтроки КАК НомерСтроки";
		Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ТекстЗапроса = ТекстЗапроса+",
			|	"+ИмяТЧ+"."+Реквизит.Имя+" КАК "+Реквизит.Имя;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|ИЗ
		|	Документ."+ИмяОбъектаМетаданных+"."+ИмяТЧ+" КАК "+ИмяТЧ+"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ "+ИмяТЧ+".Ссылка = &Ссылка"
		+ фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("Таблица"+ИмяТЧ, НомераТаблиц.Количество());
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

//Текст запроса реквизиты документа
//
Функция ТекстЗапросаРеквизитыДокумента(ИмяОбъектаМетаданных,НомераТаблиц,ТребуютсяРегламентированныеПоказатели = Ложь)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	Если Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти.Количество()>0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|";
		Первая = Истина;
		Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Имя;
			
			ТекстЗапроса = ТекстЗапроса + ?(Первая,"",",")+ "
			|	МАКСИМУМ(СоставДокумента.Есть"+ИмяТЧ+") КАК Есть"+ИмяТЧ;
			Первая = Ложь;
		КонецЦикла;
		
		ТекстЗапроса =  ТекстЗапроса + "
		|ПОМЕСТИТЬ СоставДокумента
		|ИЗ
		|	(";
		
		ПерваяТЧ = Истина;
		Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Имя;
			
			ТекстЗапроса = ТекстЗапроса + ?(ПерваяТЧ,"","
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	") + "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|";
			
			ПерваяТЧКор = Истина;
			Для Каждого ТабличнаяЧастьКорреспондирующая Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
				
				ИмяТЧКор = ТабличнаяЧастьКорреспондирующая.Имя;
				ТекстЗапроса =  ТекстЗапроса + ?(ПерваяТЧКор,"",",") +"
				|		"+?(ИмяТЧ = ИмяТЧКор,"ИСТИНА","ЛОЖЬ")+" КАК Есть"+ИмяТЧКор;
				
				ПерваяТЧКор = Ложь;
			КонецЦикла;
			ТекстЗапроса =  ТекстЗапроса + "
			|	ИЗ
			|		Документ."+ИмяОбъектаМетаданных+"."+ИмяТЧ+" КАК ТаблицаДокумента
			|	ГДЕ
			|		ТаблицаДокумента.Ссылка = &Ссылка";
			
			ПерваяТЧ = Ложь;
		КонецЦикла;
		
		ТекстЗапроса =  ТекстЗапроса + "
		|) КАК СоставДокумента
		|;
		|";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ПОМЕСТИТЬ СоставДокумента
		|;
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса+"	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
//	|	Реквизиты.Организация КАК Организация,
	//|	Реквизиты.Организация КАК Налогоплательщик,
	//|	ВЫБОР
	//|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	//|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|			ТОГДА Реквизиты.Организация
	//|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	//|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
	Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].Реквизиты Цикл
			
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + ",
		|	РеглПоказатели.РазмерМЗП,
		|	РеглПоказатели.РазмерМРП,
		|	РеглПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
		|	РеглПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы,
		|	РеглПоказатели.РазмерМЗПДляЦелейНалогообложения,
		|	РеглПоказатели.РазмерМРПДляЦелейНалогообложения";
	КонецЕсли;
	
	ТекстЗапроса =  ТекстЗапроса + "
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ."+ИмяОбъектаМетаданных+" КАК Реквизиты";
	
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаРеглПоказателей,) КАК РеглПоказатели
		|		ПО ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса =  ТекстЗапроса + "
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Дата КАК Дата,
	//|	Реквизиты.Организация КАК Налогоплательщик,
	//|	ВЫБОР
	//|		КОГДА Реквизиты.Организация.ГоловнаяОрганизация ЕСТЬ NULL 
	//|				ИЛИ Реквизиты.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|			ТОГДА Реквизиты.Организация
	//|		ИНАЧЕ Реквизиты.Организация.ГоловнаяОрганизация
	//|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Реквизиты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
	Для Каждого Реквизит Из Метаданные.Документы[ИмяОбъектаМетаданных].Реквизиты Цикл
			
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы[ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Имя;
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЕСТЬNULL(СоставДокумента.Есть"+ИмяТЧ+", ЛОЖЬ) КАК Есть"+ИмяТЧ;
		
	КонецЦикла;
	Если ТребуютсяРегламентированныеПоказатели Тогда
		ТекстЗапроса =  ТекстЗапроса + ",
		|	Реквизиты.РазмерМЗП,
		|	Реквизиты.РазмерМРП,
		|	Реквизиты.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
		|	Реквизиты.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы,
		|	Реквизиты.РазмерМЗПДляЦелейНалогообложения,
		|	Реквизиты.РазмерМРПДляЦелейНалогообложения";
	КонецЕсли;
	ТекстЗапроса =  ТекстЗапроса + "
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";

	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецЕсли