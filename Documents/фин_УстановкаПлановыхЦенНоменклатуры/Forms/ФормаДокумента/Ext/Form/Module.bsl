&НаКлиенте
Перем Действие,Величина;
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	Элементы.ТоварыГруппаЦеныРегл.Видимость = НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный;
	Элементы.ТоварыГруппаПоступление.Видимость = НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный И  НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_УстановкаПлановыхЦенНоменклатуры", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	Иначе
		
		общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекущийДокументОснование = Объект.ДокументОснование;
		Возврат;
	КонецЕсли;
	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаполненииОснованием", ЭтотОбъект,);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить по документу-основанию?'"), Режим, 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Валюта = ?(Объект.Товары.Количество()>1,Объект.Товары[Объект.Товары.Количество()-2].Валюта,ТекущиеДанные.Валюта);
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Валюта) Тогда
			ТекущиеДанные.Валюта = мВалютаУправленческогоУчета;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Изменить(Команда)
	ОписаниеОповещенияВыборИзмененияЦены = Новый ОписаниеОповещения("ОбработатьВыборПараметровИзмененияЦен",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ИзменениеПоказателя",Новый Структура("ИмяПоказателя,ДействиеНадпоказателем,Величина","Цена",Действие,Величина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияВыборИзмененияЦены);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПараметровИзмененияЦен(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Действие = РезультатВыбора.ДействиеНадПоказателем;
		Величина = РезультатВыбора.Величина;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.Цена = фин_ОбщегоНазначенияКлиентСервер.РезультатИзмененияПоказателя(СтрокаТЧ.Цена,Действие,Величина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы,Элементы.Товары);
	Если НЕ ТипЗнч(ФормаВыбора)=Тип("УправляемаяФорма") Тогда
		ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	КонецЕсли;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦенамНоменклатуры(Команда)
	ЗаполнитьТовары(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЦенамНоменклатуры(Команда)
	ЗаполнитьТовары(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоЦенамНоменклатуры(Команда)
	ЗаполнитьТовары(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦенамНоменклатуры1(Команда)
	ЗаполнитьТовары(Истина, Ложь,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЦенамНоменклатуры1(Команда)
	ЗаполнитьТовары(Ложь, Ложь,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоЦенамНоменклатуры1(Команда)
	ЗаполнитьТовары(Ложь, Истина,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
	// Если заполняем, то почистим ТЧ
	Если Объект.Товары.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоПоступлению", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), Режим, 0);
		Возврат;
	КонецЕсли;
	ПослеЗакрытияВопросаЗаполнитьПоПоступлению(Неопределено,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНоменклатуре(Команда)
	ЗаполнитьТовары(Истина, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПоступлению(Команда)
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора",,Элементы.Товары);
	ФормаВыбора.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоНоменклатуреПлановой(Команда)
	ЗаполнитьТовары(Истина, Ложь,Истина, Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПлановойНоменклатуре(Команда)
	//ФормаВыбор = Справочники.фин_ПлановаяНоменклатура.ПолучитьФормуВыбора(,ЭтотОбъект);
	//ФормаВыбор.ЗакрыватьПриВыборе=Ложь;
	//ФормаВыбор.Открыть();
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ФормаВыбора = ПолучитьФорму("Справочник.фин_ПлановаяНоменклатура.ФормаВыбора",ПараметрыФормы,Элементы.Товары);
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦенамНоменклатурыПлановой(Команда)
	ЗаполнитьТовары(Истина, Ложь,,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоЦенамНоменклатурыПлановой(Команда)
	ЗаполнитьТовары(Ложь, Ложь,,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоЦенамНоменклатурыПлановой(Команда)
	ЗаполнитьТовары(Ложь, Истина,,Истина,Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	//ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			
		КонецЕсли;
		
		Объект.НеПроводитьНулевыеЗначения = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) И Объект.Товары.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ " + СокрЛП(Объект.Ссылка) + " был записан некорректно! Информация о ценах очищена.");
		Объект.Товары.Очистить();
	КонецЕсли;
	
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтотОбъект);
	
	//общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	//общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтотОбъект, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтотОбъект, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	ФормаДокумента = Параметры.ФормаДокумента;
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, Результат.ЗначенияПриЗакрытии);
		ФормаДокумента.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(ФормаДокумента.Объект);
		ФормаДокумента.Модифицированность = Истина;
				                                   
		//дог_УправлениеДоговорамиКлиент.ИзменитьЦеныВалюту(ФормаДокумента.Объект, Параметры.СпособЗаполненияЦен, Результат,);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Документы.фин_УстановкаПлановыхЦенНоменклатуры.ЗаполнитьПоДокументуОснованию(Объект, Объект.ДокументОснование);
	ТекущийДокументОснование = Объект.ДокументОснование;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаполненииОснованием(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт
	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ВалютаЦены, ЗапрашиватьЦену;   // локальные
	Модифицированность = Истина;
	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти" Тогда
		Выборка = ЗначениеВыбора.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЦен <> Null
			   И Выборка.Номенклатура <> Null
			   И НЕ Выборка.ЭтоГруппа Тогда
				Объект.ТипЦен = Выборка.ТипЦен;
				Номенклатура = Выборка.Номенклатура;
				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
				СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект.Товары, СтруктураОтбора);
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = Объект.Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
				КонецЕсли;
				СтрокаТабличнойЧасти.Цена = Выборка.Цена;
				СтрокаТабличнойЧасти.Валюта = ПолучитьЗначениеРеквизитаИсточника(Объект.ТипЦен, "ВалютаЦены");
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда
		ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
		ЗначениеВыбора.Свойство("ЗапрашиватьЦену" , ЗапрашиватьЦену);
		Если ЗапрашиватьЦену = Неопределено Тогда
			ЗапрашиватьЦену = Ложь
		КонецЕсли;
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект.Товары, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			// Надо добавить
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура               = Номенклатура;
			Если ЗапрашиватьЦену Тогда
				ЗначениеВыбора.Свойство("Цена" ,             Цена);
				ЗначениеВыбора.Свойство("ВалютаЦены" ,       ВалютаЦены);
				НоваяСтрока.Цена = Цена;
				НоваяСтрока.Валюта = ВалютаЦены;
			Иначе
				ПриИзмененииНоменклатуры(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти = Неопределено) Экспорт
	//Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти) Тогда
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	ДанныеСтроки = Новый Структура("Артикул,Валюта,Номенклатура,НомерСтроки,Цена");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки,СтрокаТабличнойЧасти);
	ПерезаполнитьСтроку(ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ДанныеСтроки);
КонецПроцедуры // ПриИзмененииНоменклатуры()

// Производит перезаполнение и установку необходимых полей в строке табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо перезаполнить.
//
&НаСервере
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти)

	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("ТипЦен", Объект.ТипЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL
	|	      ТОГДА 0
	|	      ИНАЧЕ ЦеныНоменклатуры.Цена КОНЕЦ                      КАК Цена,
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Валюта ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.ВалютаЦены
	|	      ИНАЧЕ ЦеныНоменклатуры.Валюта КОНЕЦ	                 КАК Валюта
	|ИЗ
	|	РегистрСведений.фин_ПрогнозныеЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен = &ТипЦен И Номенклатура = &Номенклатура И Сценарий = &Сценарий) КАК ЦеныНоменклатуры
	|
	|ПРАВОЕ СОЕДИНЕНИЕ Справочник."+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3(),"ВидыЦен","ТипыЦенНоменклатуры")+" КАК ТипыЦенСправочник
	|	ПО ЦеныНоменклатуры.ТипЦен = ТипыЦенСправочник.Ссылка
	|
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка = &ТипЦен	
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьСтроку()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
&НаКлиенте
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	Возврат СтрокаТабличнойЧасти;
КонецФункции // НайтиСтрокуТабЧасти()

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	
	Объект.Товары.Загрузить(ТаблицаОбработки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов		 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	//ПараметрыФормы.Вставить("ВалютаДокумента"         , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"             , ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
	//ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	//ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);
	ПараметрыФормы.Вставить("Расход"                  , Истина);
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ТипЦен");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизита()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект
КонецФункции

// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Очистить            - Истина - заполнить с предварительной очисткой, Ложь - добавить
//  Обновить            - Истина - обновить строки, Ложь - добавить строки
//  ПоЦенамКонтрагентов - Истина - заполнять по ценам контрагентов, Ложь - заполнять по ценам номенклатуры
//
&НаКлиенте
Процедура ЗаполнитьТовары(Очистить, Обновить, ПоНоменклатуре = Ложь,ПоПрогнозным=Истина,ПлановаяНоменклатура=Ложь)
	Если Объект.Товары.Количество() > 0 И Очистить Тогда
		ПараметрыФормы = Новый Структура("Очистить,Обновить,ПоНоменклатуре,ПоПрогнозным,ПлановаяНоменклатура",Очистить,Обновить,ПоНоменклатуре,ПоПрогнозным,ПлановаяНоменклатура);
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьТовары", ЭтотОбъект,ПараметрыФормы);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), Режим, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТоварыНаСервере(Очистить, Обновить, ПоНоменклатуре, ПоПрогнозным, ПлановаяНоменклатура);
КонецПроцедуры // ЗаполнитьТовары()

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьТовары(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Товары.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран тип цен номенклатуры");
		// Ничего делать не надо
		Возврат;

	КонецЕсли;
	
	ЗаполнитьТоварыНаСервере(Параметры.Очистить, Параметры.Обновить, Параметры.ПоНоменклатуре,Параметры.ПоПрогнозным,Параметры.ПлановаяНоменклатура);

	//ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыНаСервере(Очистить, Обновить, ПоНоменклатуре = Ложь,ПоПрогнозным=Истина,ПлановаяНоменклатура=Ложь)

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", 	Объект.Дата);
	Запрос.УстановитьПараметр("ТипЦен", 	Объект.ТипЦен);
	Запрос.УстановитьПараметр("Сценарий", 	Объект.Сценарий);
	
	Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЦеныНоменклатуры.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Валюта ЕСТЬ NULL 
	|			ТОГДА ТипыЦенСправочник.ВалютаЦены
	|		ИНАЧЕ ЦеныНоменклатуры.Валюта
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	Справочник."+?(ПлановаяНоменклатура,"фин_Плановая","")+"Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+?(ПоПрогнозным ИЛИ ПлановаяНоменклатура,"фин_Прогнозные","")+"ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, "+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3() И НЕ (ПоПрогнозным ИЛИ ПлановаяНоменклатура),"ВидЦены","ТипЦен")+" = &ТипЦен"+?(ПоПрогнозным," И Сценарий = &Сценарий","")+") КАК ЦеныНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3(),"ВидыЦен","ТипыЦенНоменклатуры")+" КАК ТипыЦенСправочник
	|		ПО ЦеныНоменклатуры."+?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3() И НЕ (ПоПрогнозным ИЛИ ПлановаяНоменклатура),"ВидЦены","ТипЦен")+" = ТипыЦенСправочник.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = Ложь";
	Если НЕ ПоНоменклатуре Тогда
		Текст = Текст + 
		" И
		|	ТипыЦенСправочник.Ссылка = &ТипЦен	
		|";
	КонецЕсли;
    Запрос.Текст = Текст;
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Обновить Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Выборка.Цена;
		СтрокаТабличнойЧасти.Валюта = Выборка.Валюта;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
			СтрокаТабличнойЧасти.Валюта = Объект.ТипЦен.ВалютаЦены;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТовары()

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоПоступлению(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Товары.Очистить();
	
	ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора",,Элементы.Товары);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//  ЧиститьТипыЦен      - Признак необходимости очистки типов цен перед заполнением.
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, ЧиститьТипыЦен = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документе "+СокрЛП(ДокументПоступление)+" не установлен тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ТипЦен = ДокументПоступление.ТипЦен;

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.СуммаВключаетНДС,
	|	Док.ВалютаДокумента,
	|	Док.Контрагент,
	|	Док.ТипЦен     КАК ТипЦен,
	|	Док.Товары.(
	|		Номенклатура,
	|		Цена,
	|		СтавкаНДС,
	|		СУММА(НомерСтроки) // для того, чтобы работала группировка
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Товары.(Номенклатура,
	|	Цена,
	|	СтавкаНДС)";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Выборка = Шапка.Товары.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;

		КонецЕсли;
		ИмяСправочникаТиповЦен = ?(Метаданные.Справочники.Найти("ТипыЦен")<>Неопределено,"ТипыЦен",?(Метаданные.Справочники.Найти("ТипыЦенНоменклатуры")<>Неопределено,"ТипыЦенНоменклатуры",""));
		СтрокаТабличнойЧасти.Цена  = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                        Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        ?(ИмяСправочникаТиповЦен="" ИЛИ Метаданные.Справочники[ИмяСправочникаТиповЦен].Реквизиты.Найти("ЦенаВключаетНДС")=Неопределено,Ложь,Шапка.СуммаВключаетНДС),
		                                        ?(ИмяСправочникаТиповЦен="" ИЛИ Метаданные.Справочники[ИмяСправочникаТиповЦен].Реквизиты.Найти("ЦенаВключаетНДС")=Неопределено,Ложь,Шапка.ТипЦен.ЦенаВключаетНДС),
		                                        ?(ИмяСправочникаТиповЦен="" ИЛИ Метаданные.Справочники[ИмяСправочникаТиповЦен].Реквизиты.Найти("ЦенаВключаетНДС")=Неопределено,Ложь,Шапка.ТипЦен.ЦенаВключаетНДС),
		                                        Выборка.СтавкаНДС.ставка);

		СтрокаТабличнойЧасти.Валюта =  Шапка.ВалютаДокумента;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()


// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НДС для избежания ошибок округления, то это не значит, 
// что при отпуске без НДС мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Все расчеты с акцизом провоим из того предположения, что если Цена включает НДС, то она включает и Акциз
//
// Параметры: 
//  Цена                - число, пересчитваемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитвать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
//  ЦенаВключаетАкциз   - булево, определяет содержит ли переданное значение цены Акциз,
//  УчитыватьАкциз      - булево, определяет должно ли новое значение цены учитвать Акциз,
//  СуммаВключаетАкциз  - булево, определяет должно ли новое значение цены включать Акциз,
//  СуммаАкциза         - число, сумма акциза на единицу, 
//
// Возвращаемое значение:
//  Числое, новое значение цены.
//
&НаСервере
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
													УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт

	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	
	НадоВключитьАкциз  = Ложь;
	НадоИсключитьАкциз = Ложь;
	
	НоваяЦена		 = Цена;
	
	Если УчитыватьНДС Тогда
		Если СуммаВключаетНДС И (НЕ ЦенаВключаетНДС) Тогда
			// Надо добавлять НДС       
			НадоВключитьНДС = Истина;
		ИначеЕсли НЕ СуммаВключаетНДС И ЦенаВключаетНДС Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;
	Иначе
		Если ЦенаВключаетНДС  Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;	
	КонецЕсли;
		
	
	//НДС накручивается сверху, поэтому при любом раскладе первым исключаем его
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	

	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()


&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Объект.Товары.НайтиСтроки(Новый Структура("номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
			НС = Объект.Товары.Добавить();
			НС.Номенклатура = ВыбранноеЗначение;
			НС.Валюта = ?(Объект.Товары.Количество()>1,Объект.Товары[Объект.Товары.Количество()-2].Валюта,НС.Валюта);
			Если НЕ ЗначениеЗаполнено(НС.Валюта) Тогда
				НС.Валюта = мВалютаУправленческогоУчета;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьОбъектМетаданных("ПоступлениеТоваровУслуг","Документы") И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
		ЗаполнитьТабличнуюЧастьПоПоступлению(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Объект.Товары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалюту(Команда)
	мРежимВыбора = РежимВыбораВалюты();
	Если мРежимВыбора = 0 Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.Валюты.ФормаВыбора");
		Результат = ФормаВыбора.ОткрытьМодально();
		Если ЗначениеЗаполнено(Результат) Тогда
			ОбработкаВыбораВалюты(Результат,Неопределено);
		КонецЕсли;
	ИначеЕсли мРежимВыбора = 1 Тогда
		ОповещениеВыбораВалюты = Новый ОписаниеОповещения("ОбработкаВыбораВалюты",ЭтотОбъект);
		ОткрытьФорму("Справочник.Валюты.Форма.УправляемаяФормаВыбора",,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОповещениеВыбораВалюты);
	Иначе
		ОповещениеВыбораВалюты = Новый ОписаниеОповещения("ОбработкаВыбораВалюты",ЭтотОбъект);
		ОткрытьФорму("Справочник.Валюты.ФормаВыбора",Новый Структура("РежимВыбора",Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОповещениеВыбораВалюты);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РежимВыбораВалюты()
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана И ТекущийРежимЗапуска()=РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Возврат 0;	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат 1;	
	Иначе
		Возврат 2;	
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаИсточника(Источник, ИмяРеквизита)
	
	Возврат Источник[ИмяРеквизита];
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораВалюты(ВыбраннаяВалюта,ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбраннаяВалюта) Тогда
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.Валюта = ВыбраннаяВалюта;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
