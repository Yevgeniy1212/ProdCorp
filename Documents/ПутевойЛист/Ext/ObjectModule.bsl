
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;


// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		//шг 2 строки
		СтрокаТЧ.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");			
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетЗатратБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
			
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
//шг 2 строки		
		СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "АктСписания" Тогда

		ТабДокумент = ПечатьАктСписания();
	ИначеЕсли ИмяМакета = "ПутевойЛист" Тогда
		ТабДокумент = ПечатьПутевогоЛиста();
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Функция формирует табличный документ с печатной формой 
// Возвращаемое значение:
//  Табличный документ - печатная форма акта списания
//
Функция ПечатьАктСписания()
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);

	ЗапросКТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата Как ДатаДокумента,
	|	Организация,
	|	Склад,
	|	Склад.Представление         КАК ПредставлениеСклада,
	|	СуммаДокумента,
	|	Константы.ВалютаРегламентированногоУчета ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ПредставлениеОтветственный,
	|	ОтветственныеЛица.ФизическоеЛицо   КАК Ответственный,	
	|	ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия 
	|ИЗ
	|	Документ.ПутевойЛист КАК ПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ПутевойЛист.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо,
	|	Константы
	|
	|ГДЕ
	|	ПутевойЛист.Ссылка = &ТекущийДокумент";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	ПутевойЛист.Номенклатура,
	                       |	ПутевойЛист.Количество,
	                       |	ПутевойЛист.НомерСтроки КАК НомерСтроки,
	                       |	ПутевойЛист.СчетУчетаБУ КАК Счет,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * ПутевойЛист.Коэффициент * ПутевойЛист.Количество, 0) КАК Сумма,
	                       |	ЕСТЬNULL(ДвиженияТиповой.Сумма / ДвиженияТиповой.КоличествоКт * ПутевойЛист.Коэффициент, 0) КАК Себестоимость,
	                       |	ПутевойЛист.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	                       |	ПутевойЛист.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	                       |	ПутевойЛист.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	                       |	ПутевойЛист.СчетЗатратБУ КАК СчетСписания,
	                       |	ПутевойЛист.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
			               |	ВЫРАЗИТЬ(ПутевойЛист.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	                       |	ПутевойЛист.Номенклатура.Код КАК НоменклатурныйНомер,
	                       |	ПутевойЛист.КоличествоУВодителя,
	                       |	ПутевойЛист.КоличествоПоНорме,
	                       |	ПутевойЛист.Ссылка.Километраж КАК Километраж,
	                       |	ПутевойЛист.Ссылка.НормаРасходаКиллометраж КАК НормаРасходаКиллометраж
	                       |ИЗ
	                       |	(ВЫБРАТЬ
	                       |		ПутевойЛистТовары.Номенклатура КАК Номенклатура,
	                       |		ПутевойЛистТовары.СчетУчетаБУ КАК СчетУчетаБУ,
	                       |		СУММА(ПутевойЛистТовары.Количество) КАК Количество,
	                       |		ПутевойЛистТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                       |		МИНИМУМ(ПутевойЛистТовары.НомерСтроки) КАК НомерСтроки,
	                       |		ПутевойЛистТовары.Ссылка КАК Ссылка,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ1 КАК СубконтоЗатратБУ1,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ2 КАК СубконтоЗатратБУ2,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ3 КАК СубконтоЗатратБУ3,
	                       |		ПутевойЛистТовары.СчетЗатратБУ КАК СчетЗатратБУ,
	                       |		ПутевойЛистТовары.Коэффициент КАК Коэффициент,
	                       |		СУММА(ПутевойЛистТовары.КоличествоУВодителя) КАК КоличествоУВодителя,
	                       |		СУММА(ПутевойЛистТовары.КоличествоПоНорме) КАК КоличествоПоНорме
	                       |	ИЗ
	                       |		Документ.ПутевойЛист.Товары КАК ПутевойЛистТовары
	                       |	ГДЕ
	                       |		ПутевойЛистТовары.Ссылка = &ТекущийДокумент
	                       |	
	                       |	СГРУППИРОВАТЬ ПО
	                       |		ПутевойЛистТовары.Номенклатура,
	                       |		ПутевойЛистТовары.СчетУчетаБУ,
	                       |		ПутевойЛистТовары.ЕдиницаИзмерения,
	                       |		ПутевойЛистТовары.Ссылка,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ1,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ2,
	                       |		ПутевойЛистТовары.СубконтоЗатратБУ3,
	                       |		ПутевойЛистТовары.СчетЗатратБУ,
	                       |		ПутевойЛистТовары.Коэффициент) КАК ПутевойЛист
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                       |			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	                       |			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
	                       |			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                       |			ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	                       |			ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	                       |			ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3
	                       |		ИЗ
	                       |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ТиповойДвиженияССубконто.СчетКт,
	                       |			ТиповойДвиженияССубконто.СубконтоКт1,
	                       |			ТиповойДвиженияССубконто.СчетДт,
	                       |			ТиповойДвиженияССубконто.СубконтоДт1,
	                       |			ТиповойДвиженияССубконто.СубконтоДт2,
	                       |			ТиповойДвиженияССубконто.СубконтоДт3) КАК ДвиженияТиповой
	                       |		ПО ПутевойЛист.Номенклатура = ДвиженияТиповой.СубконтоКт1
	                       |			И ПутевойЛист.СчетУчетаБУ = ДвиженияТиповой.СчетКт
	                       |			И ПутевойЛист.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	                       |			И (ДвиженияТиповой.СубконтоДт1 ЕСТЬ NULL 
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ ПутевойЛист.СубконтоЗатратБУ1 = ДвиженияТиповой.СубконтоДт1)
	                       |			И (ДвиженияТиповой.СубконтоДт2 ЕСТЬ NULL 
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ ПутевойЛист.СубконтоЗатратБУ2 = ДвиженияТиповой.СубконтоДт2)
	                       |			И (ДвиженияТиповой.СубконтоДт3 ЕСТЬ NULL 
	                       |				ИЛИ ДвиженияТиповой.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	                       |				ИЛИ ПутевойЛист.СубконтоЗатратБУ3 = ДвиженияТиповой.СубконтоДт3)
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = ЗапросКТоварам.Выполнить().Выбрать();

	ТаблицаИнвентаризационнаяКомиссия = Шапка.ИнвентаризационнаяКомиссия.Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";

	Макет = ПолучитьМакет("АктСписания");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка"); 	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.Комментарий = СокрЛП(Комментарий);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"); 	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	СуммаИтог = 0;
	КолИтог = 0;
	//СуммаИтогНДС = 0;
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтрока.Параметры.Наименование = СокрЛП(ВыборкаСтрокТовары.Наименование);
		
		ОбластьСтрока.Параметры.Себестоимость = Формат(ВыборкаСтрокТовары.Себестоимость, "ЧДЦ=2");
		ОбластьСтрока.Параметры.Сумма 		  = Формат(ВыборкаСтрокТовары.Сумма, "ЧДЦ=2");
		
		ПараметрСубконто = ?(ВыборкаСтрокТовары.СубконтоЗатратБУ1 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ1) + Символы.ПС + 
						   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ2 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ2) + Символы.ПС + 
						   ?(ВыборкаСтрокТовары.СубконтоЗатратБУ3 = Null, "",ВыборкаСтрокТовары.СубконтоЗатратБУ3);
		
		ОбластьСтрока.Параметры.Субконто = СокрЛП(ПараметрСубконто);
		
		ТабДокумент.Вывести(ОбластьСтрока);
		
		СуммаИтог = СуммаИтог + ВыборкаСтрокТовары.Сумма; 	
		КолИтог   = КолИтог   + ВыборкаСтрокТовары.Количество; 	
		
	КонецЦикла; 		
	ОбластьИтогов = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтогов.Параметры.СуммаИтог = Формат(СуммаИтог, "ЧДЦ=2");
	ОбластьИтогов.Параметры.КолИтог = Формат(КолИтог, "ЧЦ=15; ЧДЦ=3");
	
	ТабДокумент.Вывести(ОбластьИтогов);
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.ДатаДокумента);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);

	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			ОбластьМакета.Параметры.Должность          = "";
			ОбластьМакета.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла; 
		
	КонецЕсли;  	
	//установим альбомный формат
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции
//  Табличный документ - печатная форма путевого листа
Функция ПечатьПутевогоЛиста()
	
	Запрос = Новый Запрос;
	ЗапросКТоварам = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);

	ЗапросКТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПутевойЛист.Номер КАК НомерДокумента,
	|	ПутевойЛист.Дата КАК ДатаДокумента,
	|	ПутевойЛист.Организация,
	|	ПутевойЛист.Склад.Представление КАК Склад,
	|	ПутевойЛист.Автотранспорт,
	|	ПутевойЛист.Водитель,
	|	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства КАК ГосНомер,
	|	ПутевойЛист.ВремяВыезда,
	|	ПутевойЛист.ВремяВозвращения,
	|	ПутевойЛист.МотоЧасы,
	|	ПутевойЛист.НормаРасходаМотоЧас Как НормаМотоЧас,
	|	ПутевойЛист.РасходМотоЧас,
	|	ПутевойЛист.КилометражПриВыезде,
	|	ПутевойЛист.КилометражПриВозвращении,
	|	ПутевойЛист.Километраж,
	|	ПутевойЛист.НормаРасходаКиллометраж Как НормаКилометраж,
	|	ПутевойЛист.РасходКилометраж 
	|ИЗ
	|	Документ.ПутевойЛист КАК ПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	|		ПО ПутевойЛист.Организация = ПараметрыРасчетаТранспортногоНалога.Организация
	|			И ПутевойЛист.Автотранспорт = ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство
	|ГДЕ
	|	ПутевойЛист.Ссылка = &ТекущийДокумент";
	
	ЗапросКТоварам.Текст = "ВЫБРАТЬ
	                       |	ПутевойЛистТовары.Номенклатура,
	                       |	ПутевойЛистТовары.Номенклатура.Код КАК НомНомер,
	                       |	ПутевойЛистТовары.ЕдиницаИзмерения КАК ЕдИзм,
	                       |	ПутевойЛистТовары.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	                       |	ПутевойЛистТовары.КоличествоУВодителя КАК ОстатокКолНач,
	                       |	ПутевойЛистТовары.КоличествоПоНорме КАК ПоНорме,
	                       |	ПутевойЛистТовары.Количество,
	                       |	ПутевойЛистТовары.Коэффициент
	                       |ИЗ
	                       |	Документ.ПутевойЛист.Товары КАК ПутевойЛистТовары
	                       |ГДЕ
	                       |	ПутевойЛистТовары.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = ЗапросКТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";

	Макет = ПолучитьМакет("ПутевойЛист");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"); 	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияПредставление = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.Комментарий = СокрЛП(Комментарий);
	ОбластьМакета.Параметры.МаркаАвто = СокрЛП(Шапка.Автотранспорт.Наименование);
	пВидГСМ = "Бензин";
	ОбластьМакета.Параметры.ВидГСМ = пВидГСМ;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОборотнаяСторона"); 	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	//СуммаИтог = 0;
	//КолИтог = 0;
	ИтогНачальныйОстаток = 0;
	ИтогКонечныйОстаток  = 0;
	ИтогНорма            = 0;
	ИтогКоличество       = 0;
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		ИтогНачальныйОстаток = ИтогНачальныйостаток + ВыборкаСтрокТовары.ОстатокКолНач;
		КонечныйОстаток      = ВыборкаСтрокТовары.ОстатокКолНач - ВыборкаСтрокТовары.Количество;
		ИтогКонечныйОстаток  = ИтогКонечныйОстаток + КонечныйОстаток;
		ИтогКоличество = ИтогКоличество + ВыборкаСтрокТовары.Количество;
		ИтогНорма            = ИтогНорма + ВыборкаСтрокТовары.ПоНорме;
		ОбластьСтрока.Параметры.ОстатокКолКон = КонечныйОстаток;
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		ТабДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла; 		
	ОбластьИтогов = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтогов.Параметры.ОстатокПриВыезде     = ИтогНачальныйОстаток;
	ОбластьИтогов.Параметры.ОстатокПриВозвращении= ИтогКонечныйОстаток;
	ОбластьИтогов.Параметры.ИтогПоНорме      = ИтогНорма;
	ОбластьИтогов.Параметры.ИтогКоличество   = ИтогКоличество;
	
	ТабДокумент.Вывести(ОбластьИтогов);
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура("ПутевойЛист","Путевой лист");
	СтруктураФорм.Вставить("АктСписания", "Акт списания");
	Возврат СтруктураФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);			
	
Конецпроцедуры

// Процедура заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета          = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ и НУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаВал");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.Колонки.Добавить("Склад");
	ТаблицаТоваров.Колонки.Добавить("Организация");
	ТаблицаТоваров.Колонки.Добавить("ИсточникФинансирования");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");

	ТаблицаТоваров.Колонки.Добавить("КоэффОплаты");

	КоэффОплаты      = 1;

	ТаблицаТоваров.ЗаполнитьЗначения(0,                         		  "Сумма");
	ТаблицаТоваров.ЗаполнитьЗначения(0,                         		  "СуммаВал");
	ТаблицаТоваров.ЗаполнитьЗначения(КоэффОплаты,                         "КоэффОплаты");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,                          "Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,       "Склад");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.ИсточникФинансирования, "ИсточникФинансирования");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,                        "ДоговорКонтрагента");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад, ИсточникФинансирования");
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("СчетЗатратБУ");
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНУ");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// построчная проверка заполнения
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыПоСтрочно(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		Если СтруктураШапкиДокумента.Склад.ЯвляетсяАвтотранспортом Тогда
			Если СтрокаТЧ.Номенклатура.ВидНоменклатуры.ГруппаТМЗ <> Перечисления.ГруппыТМЗ.Топливо Тогда
				СтрокаСообщения = "Вид номенклатуры должен относиться к группе ТМЗ ""Топливо""!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары

Процедура КонтрольОстатковПоРегиструУчетГСМ(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ = Ложь, Заголовок)
	
	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Организация КАК Организация,
		|	ТаблицаТоваров.ИсточникФинансирования КАК ИсточникФинансирования,
		|	ТаблицаТоваров.Водитель КАК Водитель,
		|	ТаблицаТоваров.Склад КАК Склад,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ЕСТЬNULL(УчетГСМОстатки.КоличествоОстаток, 0) КАК Остаток,
		|	ТаблицаТоваров.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмерения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПутевойЛистТовары.Ссылка.Организация КАК Организация,
		|		ПутевойЛистТовары.Ссылка.ИсточникФинансирования КАК ИсточникФинансирования,
		|		ПутевойЛистТовары.Ссылка.Водитель КАК Водитель,
		|		ПутевойЛистТовары.Ссылка.Склад КАК Склад,
		|		ПутевойЛистТовары.Номенклатура КАК Номенклатура,
		|		СУММА(ПутевойЛистТовары.Количество) КАК Количество
		|	ИЗ
		|		Документ.ПутевойЛист.Товары КАК ПутевойЛистТовары
		|	ГДЕ
		|		ПутевойЛистТовары.Ссылка = &Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПутевойЛистТовары.Ссылка.Водитель,
		|		ПутевойЛистТовары.Ссылка.Склад,
		|		ПутевойЛистТовары.Ссылка.Организация,
		|		ПутевойЛистТовары.Номенклатура,
		|		ПутевойЛистТовары.Ссылка.ИсточникФинансирования) КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетГСМ.Остатки(&Дата, ) КАК УчетГСМОстатки
		|		ПО ТаблицаТоваров.Организация = УчетГСМОстатки.Организация
		|			И ТаблицаТоваров.ИсточникФинансирования = УчетГСМОстатки.ИсточникФинансирования
		|			И ТаблицаТоваров.Водитель = УчетГСМОстатки.Водитель
		|			И ТаблицаТоваров.Склад = УчетГСМОстатки.Автотранспорт
		|			И ТаблицаТоваров.Номенклатура = УчетГСМОстатки.ГСМ";
		Запрос.УстановитьПараметр("Дата", 	МоментВремени());
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Количество > Выборка.Остаток Тогда
				Разница = Выборка.Количество - Выборка.Остаток;
				Сообщить("У водителя '" + СтруктураШапкиДокумента.Водитель.Наименование + "' для списания не хватает ГСМ '" + Выборка.НоменклатураНаименование + "' в количестве " + Строка(Разница) + " " + Выборка.БазоваяЕдиницаИзмерения, СтатусСообщения.Важное);
				Сообщить("		Необходимо " + Строка(Выборка.Количество) + ", в наличии " + Строка(Выборка.Остаток), СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрольОстатковПоРегиструУчетГСМ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, ИСТИНА, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
	
КонецПроцедуры // ДвиженияПоРегистрам()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль или ОтражатьВНалоговомУчете);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);


	СтруктураШапкиДокумента.Вставить("ВалютаДокумента"		,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		,1);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	,1);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"       		, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"             		, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"         		, "Количество");
	СтруктураПолей.Вставить("Коэффициент"         		, "Коэффициент");
	СтруктураПолей.Вставить("НомерСтроки"        		, "НомерСтроки");
	СтруктураПолей.Вставить("СчетУчетаБУ"        		, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        		, "СчетУчетаНУ");

	СтруктураПолей.Вставить("КорСчетСписанияБУ" 		, "СчетЗатратБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1" 	, "СубконтоЗатратБУ1");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2" 	, "СубконтоЗатратБУ2");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3" 	, "СубконтоЗатратБУ3");
	
	СтруктураПолей.Вставить("КорСчетСписанияНУ" 		, "СчетЗатратНУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ1" 	, "СубконтоЗатратНУ1");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ2" 	, "СубконтоЗатратНУ2");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ3" 	, "СубконтоЗатратНУ3");
	
	СтруктураПолей.Вставить("СтавкаНДС"        			, "СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС"    			, "СчетУчетаНДС");	
	СтруктураПолей.Вставить("НДСВидОборота"        		, "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления"        	, "НДСВидПоступления");
	СтруктураПолей.Вставить("КлассификацияРасходов"    	, "КлассификацияРасходов");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "ВозвратнаяТара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.Склад.ЯвляетсяАвтотранспортом Тогда
		КонтрольОстатковПоРегиструУчетГСМ(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
    
КонецПроцедуры // ОбработкаПроведения()


Процедура ПриЗаписи(Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();