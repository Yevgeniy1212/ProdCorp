////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;
// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;


// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ, ЗаполнятьНУ)

	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаБУ      = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.НовыйСчетУчетаБУ = СчетаУчетаНовые.СчетУчетаБУ;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ      = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.НовыйСчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();

	КонецЕсли;
	
	Если ЗаполнятьНУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаНУ      = СчетаУчета.СчетУчетаНУ;
		СтрокаТЧ.НовыйСчетУчетаНУ = СчетаУчетаНовые.СчетУчетаНУ;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаНУ      = ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.НовыйСчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетаБУ()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета 		= ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	СчетаУчетаНовые = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр ур_ЗерноПоНедостаче 
	Движения.ур_ЗерноПоНедостаче.Записывать = Истина;
	Движения.ур_ЗерноПоНедостаче.Очистить();
			
	Для Каждого ТекСтрокаТоварыОУ Из Товары Цикл
		
		//ур_ЗерноНаСкладах
		Движение = Движения.ур_ЗерноПоНедостаче.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.Склад = Склад;
		Движение.Культура = ТекСтрокаТоварыОУ.ЗерноваяРасписка.ВидКультуры;
		Движение.Класс = ТекСтрокаТоварыОУ.ЗерноваяРасписка.КлассностьКультуры;
		Движение.ГодУрожая = ТекСтрокаТоварыОУ.ЗерноваяРасписка.ГодУрожая;
		Движение.ЗерноваяРасписка = ТекСтрокаТоварыОУ.ЗерноваяРасписка;
		Движение.Видзерна = ТекСтрокаТоварыОУ.ЗерноваяРасписка.ВидЗерна;
		Движение.ЗачтенныйВес = ТекСтрокаТоварыОУ.Количество;
		Движение.Цена = ТекСтрокаТоварыОУ.Цена;
		Движение.Сумма = ТекСтрокаТоварыОУ.Сумма;
		Движение.СуммаНедостачи = ТекСтрокаТоварыОУ.СуммаНедостачи;
		Движение.ТипОперации = ТипОперации;
		Движение.ДатаОбразования = ТекСтрокаТоварыОУ.ДатаОбразования;
					
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
УчетнаяПолитикаНеЗадана = Ложь;
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();