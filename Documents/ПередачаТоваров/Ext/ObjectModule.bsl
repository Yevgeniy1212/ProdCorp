// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;		// (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПартионныйУчетБУ;

Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-2
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция ПечатьЗ2()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"		   , ЭтотОбъект.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПередачаТоваров.Номер КАК Номер,
	               |	ПередачаТоваров.Дата КАК ДатаСоставления,
	               |	ПередачаТоваров.Дата КАК ДатаДокумента,
	               |	ПередачаТоваров.Организация,
	               |	ПередачаТоваров.СтруктурноеПодразделение,
	               |	ПередачаТоваров.Организация КАК Руководители,
	               |	ПередачаТоваров.Склад КАК Склад,
	               |	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	               |	ПередачаТоваров.ВалютаДокумента,
	               |	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	               |	ПередачаТоваров.Контрагент КАК Контрагент,
	               |	ВЫБОР
	               |		КОГДА ПередачаТоваров.Ответственный.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |			ТОГДА ПередачаТоваров.Ответственный.ФизЛицо
	               |		ИНАЧЕ ПередачаТоваров.Ответственный
	               |	КОНЕЦ КАК Ответственный,
	               |	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ,
	               |	ПередачаТоваров.УдалитьДоверенность,
	               |	ПередачаТоваров.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	ПередачаТоваров.ДоверенностьНомер,
	               |	ПередачаТоваров.ДоверенностьДата,
	               |	ПередачаТоваров.ДоверенностьВыдана
	               |ИЗ
	               |	Документ.ПередачаТоваров КАК ПередачаТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	               |		ПО ПередачаТоваров.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ПередачаТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	МИНИМУМ(ПередачаТоваров.НомерСтроки) КАК НомерСтроки,
							|	ПередачаТоваров.Номенклатура,
	                        |	ВЫРАЗИТЬ(ПередачаТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ПередачаТоваров.Номенклатура.Код КАК ТоварКод,
	                        |	ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
	                        |	СУММА(ПередачаТоваров.Количество) КАК КоличествоПринято
	                        |ИЗ
	                        |	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	                        |ГДЕ
	                        |	ПередачаТоваров.Ссылка = &ТекущийДокумент
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ПередачаТоваров.Номенклатура,
	                        |	ПередачаТоваров.Номенклатура.БазоваяЕдиницаИзмерения,
	                        |	ПередачаТоваров.Номенклатура.Код,
	                        |	ВЫРАЗИТЬ(ПередачаТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	                        |УПОРЯДОЧИТЬ ПО
							|	НомерСтроки";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("З2");
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(ЭтотОбъект.Организация, ЭтотОбъект.СтруктурноеПодразделение);

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху 		   = 0;
	ТабДокумент.ПолеСлева  		   = 10;
	ТабДокумент.ПолеСнизу  		   = 0;
	ТабДокумент.ПолеСправа 		   = 0;
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_З2";

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеОтправителя = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	
	ОтветственныйДляПечати  = "";
	ДолжностьОтветственного = "";
	
	Если ТипЗнч(Шапка.Ответственный) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеОтветственного    = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный, ЭтотОбъект.Дата); 
		ОтветственныйДляПечати  = ДанныеОтветственного.Представление;
		ДолжностьОтветственного = ДанныеОтветственного.Должность;
	Иначе
		ОтветственныйДляПечати = Шапка.Ответственный;
	КонецЕсли;	
		
	ОбластьМакета.Параметры.ОтветственныйЗаПоставку = ОтветственныйДляПечати;
	
	ПредставлениеПолучателя                         = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.Валюта = Валюта;
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС       = 0;
	ИтогоСуммаНДС          = 0;
	ИтогоВсегоСНДС         = 0;
	
    ТаблицаСуммСписания = ПроцедурыБухгалтерскогоУчета.ПолучитьСуммуСписанияАктивов(ЭтотОбъект.Ссылка);
	// Выводим многострочную часть документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	НомерСтроки = 1;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
            ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;	

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность		   = 1;
		СтрокаСуммСписания = ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			 ВсегоСНДС = 0;
			 Цена	   = 0;
		 Иначе
			 Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			 ВсегоСНДС = Цена * ВыборкаСтрокТовары.КоличествоПринято;
		 КонецЕсли;

		Количество 	   = ВыборкаСтрокТовары.КоличествоПринято;

		ОбластьМакета.Параметры.НомерПП           = НомерСтроки;
		ОбластьМакета.Параметры.Количество 		  = Количество;
		ОбластьМакета.Параметры.СуммаСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаНДС          = 0;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименование),СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),ВыборкаСтрокТовары.Номенклатура);
		        		
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.ИтогоСуммаСНДС	= ИтогоВсегоСНДС;
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличествоПринято;
	
	ТабДокумент.Вывести(ОбластьМакета);
		
	ОбластьМакета				   = Макет.ПолучитьОбласть("ИтогоПрописью");
	ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
	
	ОбластьМакета.Параметры.КоличествоОтпущенныхЗапасовПрописью = ОбщегоНазначения.КоличествоПрописью(ИтогоКоличествоПринято);
	ОбластьМакета.Параметры.СуммаПрописью						= ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Шапка.ВалютаДокумента);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// вывод подписей
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	//данные по доверенности 		
	ДанныеДоверенности = Новый Структура("ДоверенностьНомер,ДоверенностьДата,УдалитьДоверенность,ДоверенностьЛицо,ДоверенностьВыдана");
	ЗаполнитьЗначенияСвойств(ДанныеДоверенности,Шапка);
	ОбщегоНазначения.ЗаполнитьДанныеДоверенностиВПечатнойФорме(ДанныеДоверенности, ОбластьМакета);
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента,);
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	ОбластьМакета.Параметры.ГлБухгалтер 			= Бухгалтер;
	ОбластьМакета.Параметры.ОтпускРазрешил 			= ОтветственныйДляПечати;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтветственного;
		
	// заполняем МОЛ
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ						    = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(ЭтотОбъект.Организация, Шапка.МОЛ, ЭтотОбъект.Дата);
		ОбластьМакета.Параметры.МОЛОтпустил = ДанныеМОЛ.Представление;
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьЗ8()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "З2" Тогда
		
		// Унифицированная форма З-2 (накладная).
		ТабДокумент = ПечатьЗ2();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("З2","З-2 (накладная на отпуск запасов)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура производит заполнение счетов учета в табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт;

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабличнойЧастиПоТоварам()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБухРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЗаполнятьНУ);
	СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НоменклатурнаяГруппаОрганизации", МетаданныеДокумента, ИмяТабЧасти) Тогда
		СтрокаТЧ.НоменклатурнаяГруппаОрганизации = СчетаУчета.Группа;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБухРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЗаполнятьНУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	Если ЗаполнятьБУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачиБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачиБУ = ?(ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, ПланыСчетов.Типовой.МатериалыПереданныеВПереработку, СчетаУчета.СчетУчетаБУ);
		КонецЕсли;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачиБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачиБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли; 		
	КонецЕсли;
	
	Если ЗаполнятьНУ = Истина Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачиНУ = ?(ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку, СчетаУчета.СчетУчетаНУ);
		КонецЕсли;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетПередачиНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда	
			СтрокаТЧ.СчетПередачиНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ЗаполнитьСчетаБух()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Контрагент");
	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("СчетПередачиБУ");

	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетПередачиНУ");		
	КонецЕсли;
	    	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура дополняет список реквизитов табличной части регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиТоварыРегл(Реквизиты)
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		
		Реквизиты = Реквизиты + ", СчетУчетаБУ, СчетПередачиБУ";
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиТоварыРегл()

// Процедура выполняет проверку документа на корректность заполнения
//  Параметры:
//		Заголовок - заголовок докуумента при проведении
//		Отказ     - флаг отказа от проведения документа
//		СтруктураШапкиДокумента - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаПоТоварам)
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Создать списки реквизитов для проверки
	РеквизитыШапки   = "Организация, Заказ, Склад, ВидПередачи";
	
	РеквизитыТабПрод = "Номенклатура, Количество, ЕдиницаИзмерения";
	
	ДополнитьРеквизитыТабличнойЧастиТоварыРегл(РеквизитыТабПрод);
	
	Если СтруктурашапкиДокумента.УчитыватьКПН Тогда
		РеквизитыТабПрод = РеквизитыТабПрод + ", ВидУчетаНУ";
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента");

	// Выполнить проверку 
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,       СтруктураОбязательныхПолей,   Отказ, Заголовок);
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда	
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
//	ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроводкиБУ = Движения.Типовой;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда
		//// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	//
	
КонецПроцедуры

Функция ПодготовитьТаблицуПоНомерамГТД()   Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНомераГТД.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНомераГТД.КлючСвязи,
	|	ТаблицаНомераГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомераГТД.Количество КАК Количество
	|ПОМЕСТИТЬ НомераГТД
	|ИЗ
	|	Документ.ПередачаТоваров.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	1 КАК Коэффициент,
	|	ТаблицаТовары.Количество КАК Количество,
	|	&ИмяСписка КАК ИмяСписка
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераГТД.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.ИмяСписка КАК ИмяСписка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	НомераГТД.НомерГТД КАК НомерГТД,
	|	СУММА(НомераГТД.Количество * ТаблицаТовары.Коэффициент) КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераГТД КАК НомераГТД
	|		ПО ТаблицаТовары.КлючСвязи = НомераГТД.КлючСвязи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ИмяСписка,
	|	ТаблицаТовары.Номенклатура,
	|	НомераГТД.НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИмяСписка", "Товары");
		
	Возврат Запрос.Выполнить().Выгрузить();	 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
		
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И ВедениеУчетаВременныхРазницБалансовымМетодом И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетПередачиБУ"    , "СчетПередачиБУ");
	
	СтруктураПолей.Вставить("СчетУчетаНУ"     , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетПередачиНУ"    , "СчетПередачиНУ");

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",              "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                    "Ссылка.Склад");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",        "СчетПередачиБУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1",   "Ссылка.Контрагент");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2",   "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3",   "Ссылка.ДоговорКонтрагента");
	
	СтруктураПолей.Вставить("КорСчетСписанияНУ",        "СчетПередачиНУ");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ1",   "Ссылка.Контрагент");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ2",   "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ3",   "Ссылка.ДоговорКонтрагента");
	
	СтруктураПолей.Вставить("СтруктурноеПодразделение", "Ссылка.СтруктурноеПодразделение");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Подготовим таблицу товаров для проведения.
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку  Тогда
		ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	КонецЕсли;   	
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаПоТоварам);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,  Отказ, Заголовок);
		
		Если НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда			
			ТаблицаТоваров = ПодготовитьТаблицуПоНомерамГТД();
			// Движения по товарам организаций							
			НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(ТаблицаТоваров,СтруктураШапкиДокумента, Движения, Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
			
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Заказ			   	= Основание;
		ВидОперации 		= Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки;
		
		Если Основание.Проведен Тогда

            // Заполним табличные части непереданных материалов по заказу покупателя.
			//	ЗаполнитьПродукциюПоОстаткам();
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();