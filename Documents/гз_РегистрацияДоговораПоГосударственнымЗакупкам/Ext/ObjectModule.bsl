////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
 
// хранит заголовок
Перем Заголовок; // заголовок
//хранит соответствие реквизитов шапки реквизитам справочника
Перем мСоответствиеРеквизитовШапкиРеквизитамСправочникаДоговоров Экспорт; // (Регл)
//хранит соответствие реквизитов шапки ресурсам 
Перем мСоответствиеРеквизитовШапкиРесурсамРегистраДоговоров Экспорт; // (Регл)
//хранит соответствие реквизитов товаров ресурсам 
Перем мСоответствиеРеквизитовТЧТоваровУслугРесурсамРегистраТоваровУслуг Экспорт; // (Регл)
 
Перем ВедениеУчетаПоСпецификам Экспорт; // признак учета по спецификам
 
Перем ВедениеУчетаЗакупокВРазрезеСкладов Экспорт; // признак учета закупок в разрезе складов

// Хранит валюту регламентированного учета
Перем мВалютаРегламентированногоУчета Экспорт; // (Регл)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
 
// Функция выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицу(РезультатЗапроса, СтруктураШапкиДокумента)
 
 Таблица = РезультатЗапроса.Выгрузить();
 
 Возврат Таблица;
 
КонецФункции // ПодготовитьТаблицуТоваровУслуг()
 
// Процедура выполняет движения по регистрам 
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаТовары,  Отказ)
 
	 СписатьГП = (Константы.гз_СпособУчетаИсполненияГодовогоПлана.Получить() = Перечисления.гз_СпособыУчетаИсполненияГодовогоПлана.ПриПроведенииДокументаРегистрацияДоговоров);
	 СписатьПотребности = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.гз_ФормированиеПотребностей"));
	 
	Если СписатьГП Тогда 
		
		Если ИспользованиеВидовПлановЗакупок.Количество() > 0 Тогда 
			МассивВидовПлановЗакупок = ИспользованиеВидовПлановЗакупок.ВыгрузитьКолонку("ВидПланаЗакупок");
		Иначе 
			Запрос=новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	гз_ИспользуемыеВидыПлановЗакупокСрезПоследних.ВидПланаЗакупок
			|ИЗ
			|	РегистрСведений.гз_ИспользуемыеВидыПлановЗакупок.СрезПоследних(
			|			НачалоПериода(&Год,ГОД),
			|				Организация = &Организация) КАК гз_ИспользуемыеВидыПлановЗакупокСрезПоследних";
			Запрос.УстановитьПараметр("Год",		?((ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок")),ДокументОснование.Год, НачалоГода(Дата)));
			Запрос.УстановитьПараметр("Организация", Организация);
			МассивВидовПлановЗакупок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПланаЗакупок");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ДополнительноеСоглашение Тогда
		
		Движение = Движения.гз_СтатусыДоговоровПоГосударственнымЗакупкам.Добавить();
		Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Регистратор = Ссылка;
		Движение.Период = Дата;
		Движение.Статус = СтруктураШапкиДокумента.СтатусДоговора;
		
	КонецЕсли;
	
	
	
	// Движения по регистру сведений гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
	 Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ДополнительноеСоглашение Тогда
		 Движение = Движения.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.Добавить();
		 Движение.Организация = СтруктураШапкиДокумента.Организация;
		 Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		 Движение.Регистратор = Ссылка;
		 Движение.Период = Дата;
		 
		 Движение.Сумма	   = СтруктураШапкиДокумента.СуммаДоговора;
		 
		 Если СпособОплаты = Перечисления.гз_СпособыОплатыПоДоговору.ПоПредоплате Тогда
			 Движение.СуммаАванса = СуммаПредоплаты;
		 КонецЕсли;
		 Движение.СпособОплаты = СпособОплаты;
		 Движение.Год = НачалоГода(СтруктураШапкиДокумента.Год);
		 Движение.МестоПоставки = СтруктураШапкиДокумента.МестоПоставки;
		 Движение.СубъектМалогоПредпринимательства = СтруктураШапкиДокумента.СубъектМалогоПредпринимательства;
		 Движение.СпособЗакупки	= СтруктураШапкиДокумента.СпособЗакупки;
		 Движение.Контрагент = Контрагент;
		 Движение.ЗарубежныйПоставщик = (Контрагент.СтранаРезидентства <> Справочники.КлассификаторСтранМира.ПустаяСсылка() И Контрагент.СтранаРезидентства <> Справочники.КлассификаторСтранМира.Казахстан);
		 Движение.Состояние = Состояние;
		 Движение.ДатаИсполнения = ДатаИсполнения;
		 Движение.Товаропроизводитель = Товаропроизводитель;
		 Движение.СрокОплаты = СрокОплаты;
		 Движение.СпособРасчетаШтрафа = СпособРасчетаШтрафа;
		 Движение.РазмерШтрафа = РазмерШтрафа;
		 Если ЗначениеЗаполнено(ДокументОснование) Тогда
			  Движение.Закупка = ?(ТипЗнч(ДокументОснование)=Тип("ДокументСсылка.гз_ИтогиГосударственныхЗакупок"),ДокументОснование.ДокументОснование,ДокументОснование);
		 КонецЕсли;
	 Иначе	 
		 Движение = Движения.гз_КорректировкиДоговоровГосударственныхЗакупок.Добавить();
		 Движение.ДоговорКонтрагента = ОсновноеСоглашение.ДоговорКонтрагента;
		 Движение.Регистратор = Ссылка;
		 Движение.Период = Дата;
		 Движение.Год = НачалоГода(ОсновноеСоглашение.Год);
		 Движение.Сумма	   = СтруктураШапкиДокумента.СуммаДоговора;
		 
		 Если ОсновноеСоглашение.СпособОплаты = Перечисления.гз_СпособыОплатыПоДоговору.ПоПредоплате Тогда
			 Движение.СуммаАванса = СуммаПредоплаты;
		 КонецЕсли;
	 КонецЕсли;
	 Для Каждого ТекСтр Из ТаблицаТовары Цикл
		 
		 Если ВедениеУчетаЗакупокВРазрезеСкладов Тогда 	 
		 // Движения по регистру сведений гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставки
			 Движение = Движения.гз_НоменклатураПоДоговорамГосударственныхЗакупокПоМестамПоставки.Добавить();
			 Движение.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			 Движение.Регистратор 			= Ссылка;
			 Движение.Период 				= СтруктураШапкиДокумента.Дата;
			 Движение.ДоговорКонтрагента	= ДоговорКонтрагента;
			 Движение.Количество  			= ТекСтр.Количество;
			 Движение.Номенклатура 			= ТекСтр.Номенклатура;
			 Движение.МестоПоставки			= ТекСтр.МестоПоставки;
			 Движение.Склад					= ТекСтр.МестоПоставки.Склад;
			 Если ТекСтр.МестоПоставки.Пустая() Тогда 
				 Движение.МестоПоставки = СтруктураШапкиДокумента.МестоПоставки;
			 КонецЕсли;
			 Движение.Сумма					= ТекСтр.Сумма;
												 
		 // Движения по регистру накопления гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставки
			 Движение = Движения.гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставки.ДобавитьПриход();
			 Движение.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			 Движение.Регистратор 			= Ссылка;
			 Движение.Период 				= СтруктураШапкиДокумента.Дата;
			 Движение.ДоговорКонтрагента	= ДоговорКонтрагента;
			 Движение.Год					= Год;
			 Движение.Организация			= Организация;
			 Движение.Количество  			= ТекСтр.Количество;
			 Движение.Номенклатура 			= ТекСтр.Номенклатура;
			 Движение.Склад 				= ТекСтр.МестоПоставки.Склад;
			 Если ТекСтр.МестоПоставки.Пустая() Тогда 
				 Движение.Склад = СтруктураШапкиДокумента.МестоПоставки.Склад;
			 КонецЕсли;
			 Движение.Сумма					= ТекСтр.Сумма;
												 
		 КонецЕсли;
		 
		 Если СписатьПотребности Тогда 
			 // движения по регистру гз_СформированныеПотребности
			 Движение = Движения.гз_СформированныеПотребности.ДобавитьРасход();
			 Движение.Год					 = Год;
			 Движение.Номенклатура			 = ТекСтр.Номенклатура;
			 Движение.МестоПоставки			 = ТекСтр.МестоПоставки;
			 Движение.Количество			 = ТекСтр.Количество;
			 Движение.Организация			 = Организация;
			 Движение.Период				 = Дата;
		 КонецЕсли;
		 
		 Если СписатьГП Тогда 
			Для Каждого ВидПланаЗакупок Из МассивВидовПлановЗакупок Цикл 
				 // движения по регистру гз_ДвижениеНоменклатурыПоГодовомуПлану
				 Движение = Движения.гз_ДвижениеНоменклатурыПоГодовомуПлану.ДобавитьРасход();
				 Движение.Год					 = Год;
				 Движение.ВидПланаЗакупок		 = ВидПланаЗакупок;
				 Движение.Номенклатура			 = ТекСтр.Номенклатура;
				 Движение.Количество			 = ТекСтр.Количество;
				 Движение.Организация			 = Организация;
				 Движение.Сумма					 = ТекСтр.Сумма;
				 Движение.Период				 = Дата;
				 Движение.СпособЗакупки			 = СтруктураШапкиДокумента.СпособЗакупки;
			 КонецЦикла;
		  КонецЕсли;
		  
	 КонецЦикла;
	  
	  СвернутаяТаблицаТовары = ТаблицаТовары.СкопироватьКолонки();
	  СписокНоменклатуры = ТаблицаТовары.Скопировать(,"Номенклатура");
	  СписокНоменклатуры.Свернуть("Номенклатура");
	  Для Каждого ТекСтр Из СписокНоменклатуры Цикл 
		  СтруктураОтбора = Новый Структура;
		  СтруктураОтбора.Вставить("Номенклатура",ТекСтр.Номенклатура);
		  НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
		  Количество = 0;
		  ТрудСубподрядчика = 0;
		  Сумма = 0;
		  СуммаТоваров = 0;
		  СуммаКазСодержания = 0;
		  СуммаКазСодержанияТоваров = 0;
		  НоваяСтрока = СвернутаяТаблицаТовары.Добавить();
		  ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденныеСтроки[0]);
		  Если НайденныеСтроки.Количество() > 1 Тогда 
			  Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				  Количество = Количество + НайденнаяСтрока.Количество;
				  ТрудСубподрядчика = ТрудСубподрядчика + НайденнаяСтрока.ТрудСубподрядчика;
				  Сумма = Сумма + НайденнаяСтрока.Сумма;
				  СуммаКазСодержания = СуммаКазСодержания + 
				  НайденнаяСтрока.Сумма*НайденнаяСтрока.ПроцентКазахстанскогоСодержания/100;
				  СуммаТоваров = СуммаТоваров + НайденнаяСтрока.СуммаТоваров;
				  СуммаКазСодержанияТоваров = СуммаКазСодержанияТоваров + 
				  НайденнаяСтрока.СуммаТоваров*НайденнаяСтрока.КазахстанскоеСодержаниеТоваровПриВыполненииРабот/100;
			  КонецЦикла;
			  НоваяСтрока.Количество 				= Количество;
			  НоваяСтрока.ТрудСубподрядчика 		= ТрудСубподрядчика;
			  НоваяСтрока.Сумма 					= Сумма;
			  НоваяСтрока.СуммаТоваров 				= СуммаТоваров;
			  НоваяСтрока.ПроцентКазахстанскогоСодержания 				   = 100*СуммаКазСодержания/Сумма;
			  Если СуммаТоваров <> 0 Тогда 
				  НоваяСтрока.КазахстанскоеСодержаниеТоваровПриВыполненииРабот = 100*СуммаКазСодержанияТоваров/СуммаТоваров;
			  КонецЕсли;
		  КонецЕсли;
	  КонецЦикла;
	  
	  Для Каждого ТекСтр Из СвернутаяТаблицаТовары Цикл 
		  
		// Движения по регистру сведений гз_НоменклатураПоДоговорамГосударственныхЗакупок
		 Движение = Движения.гз_НоменклатураПоДоговорамГосударственныхЗакупок.Добавить();
		 Движение.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		 Движение.Регистратор 			= Ссылка;
		 Движение.Период 				= СтруктураШапкиДокумента.Дата;
		 Движение.Количество  			= ТекСтр.Количество;
		 Движение.Номенклатура 			= ТекСтр.Номенклатура;
		 Движение.Сумма					= ТекСтр.Сумма;
		 Движение.СпособЗакупки			= СтруктураШапкиДокумента.СпособЗакупки;
		 Движение.ПроцентКазахстанскогоСодержания = ТекСтр.ПроцентКазахстанскогоСодержания;
		 Если НЕ ТекСтр.Номенклатура.Услуга Тогда
		 	Движение.Производитель 		= ТекСтр.Производитель;
		    Если Товаропроизводитель Тогда
		    	 Движение.Производитель 		= Контрагент;
		    КонецЕсли;
		 КонецЕсли;
		 Движение.СуммаТоваров 			= ТекСтр.СуммаТоваров;
		 Движение.ТрудСубподрядчика 	= ТекСтр.ТрудСубподрядчика;
		 Движение.НаименованиеТовара 	= ТекСтр.НаименованиеТовара;
		 Движение.КазахстанскоеСодержаниеТоваровПриВыполненииРабот = ТекСтр.КазахстанскоеСодержаниеТоваровПриВыполненииРабот;
		 Движение.РазмерАвансовогоПлатежа = ТекСтр.РазмерАвансовогоПлатежа;
		 
	 КонецЦикла;
 
КонецПроцедуры //ДвиженияПоРегистрам()
 
// Процедура проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаТовары, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.НомерСтроки,
	                  |	ВЫБОР
	                  |		КОГДА гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.НомерСтроки ЕСТЬ NULL 
	                  |			ТОГДА ЛОЖЬ
	                  |		ИНАЧЕ ИСТИНА
	                  |	КОНЕЦ КАК Конфликт,
	                  |	гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.НомерСтроки КАК НомерСтроки1
	                  |ИЗ
	                  |	Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам.Товары КАК гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам.Товары КАК гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1
	                  |		ПО гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.НомерСтроки <> гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.НомерСтроки
	                  |			И гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.Ссылка = гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.Ссылка
	                  |			И гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.Номенклатура = гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.Номенклатура
	                  |			И гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.МестоПоставки = гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары1.МестоПоставки
	                  |ГДЕ
	                  |	гз_РегистрацияДоговораПоГосударственнымЗакупкамТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Конфликт Тогда 
			Сообщить("В строках №" + Выборка.НомерСтроки +" и №"+Выборка.НомерСтроки1+" табличной части ""Товары"" дублируются номенклатура и место поставки!");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ИмяТабличнойЧасти = "Товары";
	 
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,Количество,Сумма");	
	 
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);
	 
	// проверить заполненение поля "ПроцентКазахстанского
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		Если ТекСтрока.ПроцентКазахстанскогоСодержания > 100 Тогда
			гз_ОбщегоНазначения.мОшибкаПриПроведении("В строке №" + ТекСтрока.НомерСтроки + " указано некорректное значение реквизита ""Процент казахстанского содержания""", Отказ, Заголовок);
		КонецЕсли;
		Если (ТекСтрока.ТрудСубподрядчика+ТекСтрока.СуммаТоваров)>ТекСтрока.Сумма Тогда
			гз_ОбщегоНазначения.мОшибкаПриПроведении("В строке №" + ТекСтрока.НомерСтроки + " сумма товаров и оплаты труда работников субподрядичка более общей суммы", Отказ, Заголовок);
		КонецЕсли;
		Если (ТекСтрока.ТрудСубподрядчика)>ТекСтрока.Сумма*ТекСтрока.ПроцентКазахстанскогоСодержания/100 Тогда
			гз_ОбщегоНазначения.мОшибкаПриПроведении("В строке №" + ТекСтрока.НомерСтроки + " сумма оплаты труда работников-резидентов субподрядичка превышает процент казахстанского содержания для всей суммы", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
 
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

 // Укажем, что надо проверить:
 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ОсновнойДоговор Тогда
	 СтруктураОбязательныхПолей = Новый Структура("Организация, НомерДоговора, ДатаДоговора, Контрагент, Год, СпособОплаты, СпособЗакупки, ВидОперации,ДоговорКонтрагента,СтатусДоговора"+?(ВедениеУчетаПоСпецификам,",Специфика",""));
 Иначе
	 СтруктураОбязательныхПолей = Новый Структура("Организация,ДоговорКонтрагента,ОсновноеСоглашение, СпособЗакупки, ВидОперации");
 КонецЕсли;
 // Теперь позовем общую процедуру проверки.
 гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
 
 Если НЕ ЭтотОбъект.ДоговорКонтрагента.Пустая() И ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
	 Отказ=Истина;
	 Сообщить("Документ "+?(ЭтоНовый(),"Регистрация договоров по государственным закупкам №"+Строка(Номер)+" от "+Строка(Дата),Строка(Ссылка))+" не может быть проведен: 
	 |	валюта договора не соответствует валюте регламентированного учета!",СтатусСообщения.ОченьВажное);
 КонецЕсли;
 
КонецПроцедуры // ПроверитьЗаполнениеШапки()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
 
// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
 
	 Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	 
	 // Сформируем структуру реквизитов шапки документа
	 СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	 
	 // Проверим правильность заполнения шапки документа
	 ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	 
	 // Если шапка заполнена некорректно, то договор создавать не будем, а проводки выполнять - тем более
	 Если Отказ Тогда
		 Возврат;
	 КонецЕсли; 
	 
	 // Проверка ручной корректировки
	 Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок,	ЭтотОбъект) Тогда 
		 Возврат;
	 КонецЕсли;
	 
	 // таблица Товары
	 СтруктураПолей = Новый Структура;
	 Для Каждого Реквизит Из Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		 Имя = Реквизит.Имя;
		 СтруктураПолей.Вставить(Имя, Имя);
	 КонецЦикла; 
	 РезультатЗапросаПоТоварам = гз_ПроцедурыОперативногоУчетаЗакупок.мСформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	 ТаблицаТовары = ПодготовитьТаблицу(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	 ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаТовары, СтруктураШапкиДокумента, Отказ, Заголовок);
	 
	 ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаТовары,  Отказ);
 
КонецПроцедуры //ОбработкаПроведения()
 
// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
 
 гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
 
КонецПроцедуры //ОбработкаУдаленияПроведения()
 
// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
 
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДатаИсполнения = '00010101' И Состояние = Перечисления.гз_СостоянияДоговоровПоГосударственнымЗакупкам.Исполнен Тогда
		ДатаИсполнения = ТекущаяДата(); 
	 КонецЕсли;
	 
	 Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		 Возврат;
	 КонецЕсли;
 
 //Если ДоговорКонтрагента.Пустая() Тогда
 //	Отказ=Истина;
 //	Сообщить("Документ "+?(ЭтоНовый(),"Регистрация договоров по государственным закупкам №"+Строка(Номер)+" от "+Строка(Дата),Строка(Ссылка))+" не может быть записан: 
 //	|	не указан договор контрагента!",СтатусСообщения.ОченьВажное);
 //	Возврат;
 //КонецЕсли;
 
 // Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	 СуммаДоговора = Товары.Итог("Сумма");
	 
	 Если ВидОперации = Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ДополнительноеСоглашение Тогда
		 Если СпособЗакупки <> ОсновноеСоглашение.СпособЗакупки Тогда
			 СпособЗакупки = ОсновноеСоглашение.СпособЗакупки;
		 КонецЕсли;
		 Если Год <> ОсновноеСоглашение.Год Тогда
			 Год = ОсновноеСоглашение.Год;
		 КонецЕсли;
		 Если ДоговорКонтрагента <> ОсновноеСоглашение.ДоговорКонтрагента Тогда
			 ДоговорКонтрагента = ОсновноеСоглашение.ДоговорКонтрагента;
		 КонецЕсли;
		 Если Контрагент <> ОсновноеСоглашение.Контрагент Тогда
			 Контрагент = ОсновноеСоглашение.Контрагент;
		 КонецЕсли;
	 КонецЕсли;
	 Год = НачалоГода(Год);
КонецПроцедуры //ПередЗаписью()
 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	 
 #Если Клиент Тогда
	 
	 // Процедура осуществляет печать документа. Можно направить печать на 
	 // экран или принтер, а также распечатать необходимое количество копий.
	 //
	 //  Название макета печати передается в качестве параметра,
	 // по переданному названию находим имя макета в соответствии.
	 //
	 // Параметры:
	 //  НазваниеМакета - строка, название макета.
	 //
	 Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		 
		 Если ЭтоНовый() Тогда
			 Предупреждение("Документ можно распечатать только после его записи");
			 Возврат;
		 КонецЕсли;
		 
		 Если НЕ гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			 Возврат;
		 КонецЕсли;	
		 
		 ТабДокумент = Новый ТабличныйДокумент;
		 
		 гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
		 
	 КонецПроцедуры // Печать()
	 
 #КонецЕсли
 
// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
 
 Возврат Новый Структура();
 
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция формирует таблицу для отбора списка соглашений
//
// Возвращаемое значение:
//  Таблица значений
//  
Функция СформироватьТаблицуДляОтбораСпискаСоглашений() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам КАК гз_РегистрацияДоговораПоГосударственнымЗакупкам
	               |ГДЕ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.ВидОперации = &ВидОперацииДопСоглашение
	               |	И гз_РегистрацияДоговораПоГосударственнымЗакупкам.Ссылка <> &Ссылка
	               |	И (гз_РегистрацияДоговораПоГосударственнымЗакупкам.ОсновноеСоглашение = &ОсновноеСоглашение ИЛИ гз_РегистрацияДоговораПоГосударственнымЗакупкам.ОсновноеСоглашение = &Ссылка)";
	Запрос.УстановитьПараметр("ВидОперацииДопСоглашение",	Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ДополнительноеСоглашение);                  
	Запрос.УстановитьПараметр("ОсновноеСоглашение",	ОсновноеСоглашение);                  
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //СформироватьТаблицуДляОтбораСпискаСоглашений()

// Функция формирует массив документов итогов по по победителю
//
// Возвращаемое значение:
//  Массив
//  
Функция СформироватьВыборкуИтоговПоПобедителю() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гз_ИтогиГосударственныхЗакупокТовары.Ссылка
	|ИЗ
	|	Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары
	|ГДЕ
	|	гз_ИтогиГосударственныхЗакупокТовары.Победитель = &Победитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	гз_ИтогиГосударственныхЗакупокТовары.Ссылка
	|ИЗ
	|	Документ.гз_ИтогиГосударственныхЗакупок.Товары КАК гз_ИтогиГосударственныхЗакупокТовары
	|ГДЕ
	|	гз_ИтогиГосударственныхЗакупокТовары.ВторойПослеПобедителя = &Победитель";
	Запрос.УстановитьПараметр("Победитель",Контрагент);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции //СформироватьВыборкуИтоговПоПобедителю()

// Функция формирует запрос для получения таблицы цен номенклатуры
//
// Параметры:
//  МассивНоменклатуры.
//
// Возвращаемое значение:
//  Таблица значений, содержащая колонки Номенклатура и Цена
//  
Функция ПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры) Экспорт 
	
	Возврат гз_ПроцедурыОперативногоУчетаЗакупок.мПолучитьТаблицуЦенНоменклатуры(МассивНоменклатуры,Организация,Год);
	
КонецФункции //ПолучитьТаблицуЦенНоменклатуры()

Процедура ОбработкаЗаполнения(Основание)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ФормированиеПотребностей") Тогда
		// Заполнение шапки
		ДокументОснование 	= Основание;
		Автор 				= Основание.Автор;
		Год 				= Основание.Год;
		Комментарий 		= Основание.Комментарий;
		МестоПоставки 		= Основание.МестоПоставки;
		Организация 		= Основание.Организация;
		Ответственный 		= Основание.Ответственный;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
			НоваяСтрока.МестоПоставки 	= ТекСтрокаТовары.МестоПоставки;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
		КонецЦикла;
		ВидОперации = Перечисления.гз_ВидыОперацийРегистрацииДоговоров.ОсновнойДоговор;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание) Экспорт 
	
	ОбработкаЗаполнения(Основание);	
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
 
ВедениеУчетаПоСпецификам  = Константы.гз_ВестиУчетПоСпецификам.Получить();
ВедениеУчетаЗакупокВРазрезеСкладов  = Константы.гз_ВестиУчетЗакупокВРазрезеМестПоставки.Получить();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

