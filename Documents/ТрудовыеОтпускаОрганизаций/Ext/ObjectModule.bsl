Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиРаботники"
//			"ПоТабличнойЧастиОтпуска"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим, СИерархией=Ложь)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ЕжегодныйОтпуск", Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');
	Запрос.УстановитьПараметр("ПустойОтпуск",	 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(ОтпускаОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР 
		|		КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  
		|			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование 
		|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР 
		|													КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" 
		|														ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" 
		|													ИНАЧЕ """" 
		|											   КОНЕЦ + ВЫБОР 
		|															КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" 
		|																ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" 
		|															ИНАЧЕ """" 
		|														КОНЕЦ
		|	КОНЕЦ КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.ТрудовыеОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиРаботники" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ТрудовыеОтпускаОрганизацийРаботники.ФизЛицо.Наименование) КАК Работник,
        |	ФИОФизЛиц.Фамилия КАК Фамилия,
        |	ФИОФизЛиц.Имя КАК Имя,
        |	ФИОФизЛиц.Отчество КАК Отчество,
        |	ФИОФизЛиц.НеСклонятьФамилию КАК НеСклонятьФамилию,
		|	ДанныеОРаботникахОрганизации.НомерСтроки КАК НомерСтрокиРаботники,
		|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование КАК ПодразделениеРаботника,
		|	ДанныеОРаботникахОрганизации.ДолжностьНаименование КАК Должность,
		|	ДанныеОРаботникахОрганизации.ТарифныйРазрядНаименование КАК ТарифныйРазряд,
		|	ДанныеОРаботникахОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|	ТрудовыеОтпускаОрганизацийРаботники.ДатаНачала КАК ДатаНачалаВсего,
		|	ТрудовыеОтпускаОрганизацийРаботники.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ВЫРАЗИТЬ(ТрудовыеОтпускаОрганизацийРаботники.Основание КАК СТРОКА(1000)) КАК Основание,
		|	ТрудовыеОтпускаОрганизацийОтпуска.НомерСтроки КАК НомерСтроки,
		|	ТрудовыеОтпускаОрганизацийОтпуска.ДатаНачала КАК ДатаНачала,
		|	ТрудовыеОтпускаОрганизацийОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ТрудовыеОтпускаОрганизацийОтпуска.РабочийГодПо,
		|	ТрудовыеОтпускаОрганизацийОтпуска.РабочийГодС,
		|	ТрудовыеОтпускаОрганизацийОтпуска.ВидТрудовогоОтпуска КАК ВидОтпуска,
		|	ТрудовыеОтпускаОрганизацийРаботники.ДнейОтпуска КАК ПродолжительностьВсего,
		|	ТрудовыеОтпускаОрганизацийОтпуска.ДнейОтпуска КАК Продолжительность
		|ИЗ
		|	Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТрудовыеОтпускаОрганизацийРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТрудовыеОтпускаОрганизацийОтпуска
		|			ПО ТрудовыеОтпускаОрганизацийОтпуска.Сотрудник = ТрудовыеОтпускаОрганизацийРаботники.Сотрудник
		|				И ТрудовыеОтпускаОрганизацийОтпуска.ДатаНачалаВсего = ТрудовыеОтпускаОрганизацийРаботники.ДатаНачала
		|				И ТрудовыеОтпускаОрганизацийОтпуска.Сторно = ТрудовыеОтпускаОрганизацийРаботники.Сторно
		|				И ТрудовыеОтпускаОрганизацийОтпуска.ДатаНачала <> &ПустаяДата
		|				И ТрудовыеОтпускаОрганизацийОтпуска.Ссылка = ТрудовыеОтпускаОрганизацийРаботники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        ТрудовыеОтпускаОрганизацийРаботники.ФизЛицо
		|		    ИЗ
		|		        Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТрудовыеОтпускаОрганизацийРаботники
		|		    ГДЕ
		|		        ТрудовыеОтпускаОрганизацийРаботники.Ссылка = &ТекущийДокумент
		|		        И НЕ ТрудовыеОтпускаОрганизацийРаботники.Сторно)) КАК ФИОФизЛиц
		|		ПО ТрудовыеОтпускаОрганизацийРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ТарифныйРазряд.Наименование КАК ТарифныйРазрядНаименование,
		|			РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|			СписокДат.НомерСтроки КАК НомерСтроки
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТрудовыеОтпускаОрганизаций.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|				ТрудовыеОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТрудовыеОтпускаОрганизаций
		|					ПО РаботникиВнутри.Период <= ТрудовыеОтпускаОрганизаций.ДатаНачала
		|						И РаботникиВнутри.Сотрудник = ТрудовыеОтпускаОрганизаций.Сотрудник
		|						И (РаботникиВнутри.Организация = &ГоловнаяОрганизация)
		|			ГДЕ
		|				ТрудовыеОтпускаОрганизаций.Ссылка = &ТекущийДокумент
		|				И НЕ ТрудовыеОтпускаОрганизаций.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТрудовыеОтпускаОрганизаций.Сотрудник,
		|				ТрудовыеОтпускаОрганизаций.НомерСтроки) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК ДанныеОРаботникахОрганизации
		|		ПО ТрудовыеОтпускаОрганизацийРаботники.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|
		|ГДЕ
		|	ТрудовыеОтпускаОрганизацийРаботники.Ссылка = &ТекущийДокумент
		|	И НЕ ТрудовыеОтпускаОрганизацийРаботники.Сторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник, ДатаНачалаВсего, ДатаНачала";
		
		Если СИерархией Тогда
			ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ ПО
		|	Работник";
		КонецЕсли;

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой приказа списком,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаСписком()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовыеОтпускаОрганизаций_ПриказСписком";

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("ПриказСписком");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапкиИПодвала.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		ОбластьМакетаШапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл
		
		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Основание = СокрЛП(ВыборкаРаботники.Основание);
		ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),0,ВыборкаРаботники.Продолжительность);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
			
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	СчПечати = 0;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
		СчПечати = СчПечати + 1;
		Если СчПечати > 15 Тогда 
			Прервать;
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказаСписком()	

// Функция формирует табличный документ с печатной формой приказа на одного сотрудника
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТрудовыеОтпускаОрганизаций_Приказ";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники", Истина).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
	Макет = ПолучитьМакет("Приказ");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакетаОтпуск = Макет.ПолучитьОбласть("Отпуск"); // строка отпуска

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиДляПечати = 1;
		ВыборкаОтпуска = ВыборкаРаботники.Выбрать();
		Пока ВыборкаОтпуска.Следующий() Цикл
			Если НомерСтрокиДляПечати = 1 Тогда
				// Подвал документа.
				ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаОтпуска);
				ОбластьМакетаПодвал.Параметры.ПродолжительностьВсего = ?(НЕ ЗначениеЗаполнено(ВыборкаОтпуска.ДатаНачалаВсего) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаОтпуска.ДатаОкончанияВсего),"",ВыборкаОтпуска.ПродолжительностьВсего);
				
				// Шапка документа.
				Если РаботникиОрганизации.Количество() > 1 Тогда
					ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаОтпуска.НомерСтрокиРаботники;
				КонецЕсли; 
				
				// Данные по работнику.
                ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаОтпуска);
                СтруктураФИО = Новый Структура;
                СтруктураФИО.Вставить("Фамилия",ВыборкаОтпуска.Фамилия); 
                СтруктураФИО.Вставить("Имя",ВыборкаОтпуска.Имя);
                СтруктураФИО.Вставить("Отчество",ВыборкаОтпуска.Отчество);
                ФИОРаботника = ОбщегоНазначения.ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, ВыборкаОтпуска.НеСклонятьФамилию);
                ОбластьМакетаШапка.Параметры.Работник = ?(ФИОРаботника = "", ВыборкаОтпуска.Работник, ФИОРаботника);

				Если ЗначениеЗаполнено(ВыборкаОтпуска.ТарифныйРазряд) Тогда
					ОбластьМакетаШапка.Параметры.Должность = "" + ВыборкаОтпуска.Должность + ", " + ВыборкаОтпуска.ТарифныйРазряд;
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакетаШапка);
			КонецЕсли;
			
			// Данные по отпускам работника.
			ОбластьМакетаОтпуск.Параметры.Заполнить(ВыборкаОтпуска);
			ОбластьМакетаОтпуск.Параметры.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
			ОбластьМакетаОтпуск.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВыборкаОтпуска.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаОтпуска.ДатаОкончания),0,ВыборкаОтпуска.Продолжительность);
			ТабДокумент.Вывести(ОбластьМакетаОтпуск);
			НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакетаОтпуск);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказ()	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//  ДатаНачала, ДатаОкончания – даты начала и окончания 
//								просмотра графика отпусков
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания, Режим) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат
	КонецЕсли;
	
	Если Режим = "РаботникиОрганизации" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Сообщить("Не указаны границы периода просмотра графика отпусков!");
			Возврат
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГрафикОтпусковОрганизации.Сотрудник КАК Сотрудник,
		|	ГрафикОтпусковОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	ГрафикОтпусковОрганизации.Период КАК ДатаНачала,
		|	ГрафикОтпусковОрганизации.ДатаОкончания,
		|	ГрафикОтпусковОрганизации.ВидТрудовогоОтпуска КАК ВидТрудовогоОтпуска,
		|	ГрафикОтпусковОрганизации.ДнейОтпуска,
		|	ГрафикОтпусковОрганизации.РабочийГодС,
		|	ГрафикОтпусковОрганизации.РабочийГодПо
		|ИЗ
		|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
		|		
		|		ГДЕ
		|			РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РаботникиОрганизации.Сотрудник
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		
		|		ГДЕ
		|			РаботникиОрганизации.Организация = &ГоловнаяОрганизация И
		|			РаботникиОрганизации.Период > &ДатаНачала И
		|			РаботникиОрганизации.Период <= &ДатаОкончания И
		|			РаботникиОрганизации.ОбособленноеПодразделение = &Организация) КАК РаботникиОрганизации
		|		ПО ГрафикОтпусковОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник 
		|
		|ГДЕ
		|	ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация И
		|	ГрафикОтпусковОрганизации.Период <= &ДатаОкончания И
		|	ГрафикОтпусковОрганизации.Период >= &ДатаНачала И
		|	ГрафикОтпусковОрганизации.Состояние = &Отпуск
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикОтпусковОрганизации.Сотрудник,
		|	ГрафикОтпусковОрганизации.Период,
		|	ГрафикОтпусковОрганизации.ДатаОкончания
		|
		|ИТОГИ 
		|	МАКСИМУМ(ДатаОкончания), 
		|	СУММА(ДнейОтпуска) 
		|ПО 
		|	ГрафикОтпусковОрганизации.Сотрудник
		|");
		
		Запрос.УстановитьПараметр("Организация", 	     Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("ПустаяОрганизация", 	 Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Отпуск",				 Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
		Запрос.УстановитьПараметр("ДатаНачала",			 ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",		 ДатаОкончания);
		
		РаботникиОрганизации.Очистить();
		Отпуска.Очистить();
		
		ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);//ВыборкаФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			Выборка = ВыборкаСотрудник.Выбрать();
			СтрокаРаботники = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Если СтрокаРаботники = Неопределено 
						ИЛИ КонецДня(СтрокаРаботники.ДатаОкончания) + 1 <> НачалоДня(Выборка.ДатаНачала) Тогда
					// создаем строку в т.ч. РаботникиОрганизации
					СтрокаРаботники = РаботникиОрганизации.Добавить();
					СтрокаРаботники.ФизЛицо 	  = Выборка.ФизЛицо;
					СтрокаРаботники.Сотрудник	  = Выборка.Сотрудник;
					СтрокаРаботники.ДатаНачала	  = Выборка.ДатаНачала;
					СтрокаРаботники.ДатаОкончания = Выборка.ДатаОкончания;
					Если СтрокаРаботники.ДатаОкончания <= ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
						СтрокаРаботники.ПроизошедшееСобытие = Истина;
					Иначе
						СтрокаРаботники.ПроизошедшееСобытие = Ложь;
					КонецЕсли;
					СтрокаРаботники.ДнейОтпуска = Выборка.ДнейОтпуска;
				Иначе
					// увеличиваем период действия предыдущей строки
					СтрокаРаботники.ДатаОкончания = Выборка.ДатаОкончания;
					СтрокаРаботники.ДнейОтпуска   = СтрокаРаботники.ДнейОтпуска + Выборка.ДнейОтпуска;
				КонецЕсли;
			
				Если НЕ Выборка.ВидТрудовогоОтпуска.Пустая() Тогда
					// создаем новую строку в т.ч. Отпуска
					НоваяСтрока = Отпуска.Добавить();
					НоваяСтрока.ДатаНачалаВсего = СтрокаРаботники.ДатаНачала;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
            КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

// Рассчитывает число дней отпуска по указанной строке табличной части работники или в целом по документу
//
// Параметры:
//	СтрокаТабличнойЧасти - строка табличной части РаботникиОрганизации, которую рассчитать
//
Процедура Рассчитать(СтрокаТабличнойЧасти = Неопределено) Экспорт

	Запрос = Новый Запрос;
	ПараметрыЗапроса = Новый Структура();

	УсловиеПоРаботнику = "";
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УсловиеПоРаботнику = "Сотрудник = &парамСотрудник И ДатаНачала = &парамДатаНачала";
		ПараметрыЗапроса.Вставить("парамСотрудник", СтрокаТабличнойЧасти.Сотрудник);
		ПараметрыЗапроса.Вставить("парамДатаНачала", СтрокаТабличнойЧасти.ДатаНачала);
	КонецЕсли;
	
	Если ИсправляемыйДокумент <> Неопределено Тогда
		УсловиеИсправлемыйДокумент = Истина;
		ПараметрыЗапроса.Вставить("ИсправлемыйДокумент", ИсправляемыйДокумент);
	Иначе
		УсловиеИсправлемыйДокумент = Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДокументСсылка", Ссылка);
	ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	ДанныеРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиТЧ.Сотрудник,
	|	СтрокиТЧ.ДатаНачала КАК ДатаРасчета
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета
	|ИЗ
	|	Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК СтрокиТЧ
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &ДокументСсылка 
	|	И НЕ СтрокиТЧ.Сторно
	|	" + ?(УсловиеПоРаботнику <> "", "И " + УсловиеПоРаботнику, "");
	
	НеиспользованныеОтпускаТекст = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаНеиспользованныеОтпуска(ДанныеРасчетаТекст, ПараметрыЗапроса, УсловиеИсправлемыйДокумент);
		
	// установим параметры Запроса
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	// отсортируем отпуска по размеру (сначала отрицательные (излишне использованные)),
	// по рабочему году и по приоритету, оставим только тех работников, у к-рых общая сумма неиспользованных дней > 0
	Запрос.Текст = "
	|" + НеиспользованныеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеиспользованныеОтпуска.Сотрудник.Наименование КАК ФИОСотрудника,
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	НеиспользованныеОтпуска.ДатаРасчета,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска,
	|	НеиспользованныеОтпуска.Результат,
	|	ДОБАВИТЬКДАТЕ(НеиспользованныеОтпуска.ДатаРасчета, ДЕНЬ, НеиспользованныеОтпуска.Результат) КАК МаксДатаОкончания,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.РабочийГодПо
	|ИЗ
	|	ВТ_НеиспользованныеОтпуска КАК НеиспользованныеОтпуска
	|				
	|УПОРЯДОЧИТЬ ПО
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.ДатаРасчета,
	|	ВЫБОР КОГДА НеиспользованныеОтпуска.Результат < 0 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска
	|
	|ИТОГИ
	|	МИНИМУМ(НеиспользованныеОтпуска.ДатаРасчета),
	|	СУММА(НеиспользованныеОтпуска.Результат),
	|	МАКСИМУМ(МаксДатаОкончания)
	|
	|ПО ОБЩИЕ,
	|	Сотрудник,
	|	ДатаРасчета
	|";
	
	ВыборкаДат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаДат.Следующий() Тогда
		
		// получим данные регл. производственного календаря за рассчитываемый период
		Запрос.УстановитьПараметр("ДатаНач", ВыборкаДат.ДатаРасчета);
		Запрос.УстановитьПараметр("ДатаКон", ВыборкаДат.МаксДатаОкончания + 120 * мДлинаСуток); // добавим на переносы праздничных дней и длинные отпуска
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РеглПроизводственныйКалендарь.ДатаКалендаря,
		|	РеглПроизводственныйКалендарь.КалендарныеДни
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РеглПроизводственныйКалендарь
		|ГДЕ
		|	РеглПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
		|УПОРЯДОЧИТЬ ПО
		|	РеглПроизводственныйКалендарь.ДатаКалендаря
		|";
		
		ТаблицаКалендаря = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаКалендаря.Количество() = 0 Тогда
			Сообщить("Не заполнен регламентированный производственный календарь!");
			Возврат;
		КонецЕсли;
		
		Выборка = ВыборкаДат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Сотрудник", 		СтрокаТабличнойЧасти.Сотрудник);
			СтруктураПоиска.Вставить("ДатаНачалаВсего", СтрокаТабличнойЧасти.ДатаНачала);
			СтруктураПоиска.Вставить("Сторно", 			СтрокаТабличнойЧасти.Сторно);
			
			НайденныеСтроки = Отпуска.НайтиСтроки(СтруктураПоиска);
			Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
				Отпуска.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		Иначе
			ТЗОтпускаСторно = Отпуска.Выгрузить(Отпуска.НайтиСтроки(Новый Структура("Сторно", Истина)),);
			Отпуска.Очистить();
			Отпуска.Загрузить(ТЗОтпускаСторно);
		КонецЕсли;
		
		ТекущийСотрудник 	   = Неопределено;
		ТекущаяДатаРасчета	   = Неопределено;
		ТекущаяДата			   = Неопределено;
		ТекущаяСтрокаРаботники = Неопределено;
		ОбщееЧислоДней		   = 0;
		ЧислоДнейЗаПредыдущиеИнтервалы = 0;
		ПредоставлятьОтпуск	   = Истина;
		ПоследняяДатаОтпуска   = Неопределено;
		НоваяСтрокаОтпуска	   = Неопределено;
		ОстатокНеиспользованныхДней = 0;
		
		// таблица уже учтенных дней отпуска - чтобы в цикле отслеживать сколько дней от какого вида отпуска за какой раб. год уже учтено
		ТаблицаУчтено = Новый ТаблицаЗначений;
		ТаблицаУчтено.Колонки.Добавить("ВидТрудовогоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыТрудовыхОтпусков"));
		ТаблицаУчтено.Колонки.Добавить("РабочийГодС", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаУчтено.Колонки.Добавить("УчтеноДней", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0));
		
		Пока Выборка.Следующий() Цикл

			Если Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
				// запомним, сколько всего дней отпуска есть у работника, 
				// все дальнейшие действия в цикле выполняем только для детальных записей
				Если Выборка.Группировка() = "ДатаРасчета" Тогда
					ОстатокНеиспользованныхДней = ?(Выборка.Результат <> NULL, Выборка.Результат, 0);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		
		
			Если ТекущийСотрудник <> Выборка.Сотрудник
					ИЛИ ТекущаяДатаРасчета <> Выборка.ДатаРасчета Тогда
				
				// закроем предыдущую строку РаботникиОрганизации
				Если ТекущаяСтрокаРаботники <> Неопределено 
						И НоваяСтрокаОтпуска <> Неопределено Тогда

					ТекущаяСтрокаРаботники.ДнейОтпуска = ОбщееЧислоДней - ЧислоДнейЗаПредыдущиеИнтервалы;
					ЧислоДнейЗаПредыдущиеИнтервалы = ОбщееЧислоДней;
					Если НЕ ЗначениеЗаполнено(ПоследняяДатаОтпуска) Тогда
						
						ТекущаяСтрокаРаботники.ДатаОкончания = НоваяСтрокаОтпуска.ДатаОкончания;
						
						Если ТекущаяСтрокаРаботники.ДатаОкончания <= ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
							ТекущаяСтрокаРаботники.ПроизошедшееСобытие = Истина;
						Иначе
							ТекущаяСтрокаРаботники.ПроизошедшееСобытие = Ложь;
						КонецЕсли;
						
					ИначеЕсли НоваяСтрокаОтпуска.ДатаОкончания < ПоследняяДатаОтпуска Тогда
						
						Сообщить(ТекущаяСтрокаРаботники.Сотрудник.Наименование + " не имеет неиспользованных дней отпуска для предоставления с " + Формат(ТекущаяСтрокаРаботники.ДатаНачала, "ДФ='дд.ММ.гггг'") + " по " + Формат(ТекущаяСтрокаРаботники.ДатаОкончания, "ДФ='дд.ММ.гггг'"));
						
					КонецЕсли;
				КонецЕсли;
				
				Если ТекущийСотрудник <> Выборка.Сотрудник Тогда
					
					// таблицу уже учтенных дней имеющего отпуска чистим только когда меняется работник
					ТаблицаУчтено.Очистить();
					ОбщееЧислоДней = 0;
					ЧислоДнейЗаПредыдущиеИнтервалы = 0;
				КонецЕсли;
					
				ТекущийСотрудник 	= Выборка.Сотрудник;
				ТекущаяДатаРасчета	= Выборка.ДатаРасчета;
				ТекущаяДата 		= Выборка.ДатаРасчета;
				ПредоставлятьОтпуск = Истина;
				НоваяСтрокаОтпуска  = Неопределено;
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Сотрудник",  Выборка.Сотрудник);
				СтруктураПоиска.Вставить("ДатаНачала", Выборка.ДатаРасчета);
				СтруктураПоиска.Вставить("Сторно",     Ложь);
				
				НайденныеСтроки = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
				ТекущаяСтрокаРаботники = НайденныеСтроки[0];
				ПоследняяДатаОтпуска = ТекущаяСтрокаРаботники.ДатаОкончания;
				
				Если ЗначениеЗаполнено(ПоследняяДатаОтпуска) И ТекущаяСтрокаРаботники.ДатаНачала > ПоследняяДатаОтпуска Тогда
					Сообщить("В строке " + ТекущаяСтрокаРаботники.НомерСтроки + " табл. части ""Сотрудники"" дата начала больше даты окончания!");
					ПредоставлятьОтпуск = Ложь;
				КонецЕсли;
					
				Если ОстатокНеиспользованныхДней <= 0 Тогда
					Сообщить("По состоянию на " + Формат(Выборка.ДатаРасчета, "ДФ='дд.ММ.гггг'") + " у сотрудника " + Выборка.ФИОСотрудника+ " нет неиспользованных дней отпуска!");
					ПредоставлятьОтпуск = Ложь;
				КонецЕсли;
				
				СтрокаКалендаря = ТаблицаКалендаря.Найти(ТекущаяДата, "ДатаКалендаря");
				Если СтрокаКалендаря <> Неопределено Тогда
					ИндКалендаря = ТаблицаКалендаря.Индекс(СтрокаКалендаря);
				Иначе
					Сообщить("Не заполнен регламентированный производственный календарь за " + Формат(ТекущаяДата, "ДФ=гггг"));
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредоставлятьОтпуск Тогда // в целом у работника есть неиспользованные дни и не дошли до даты окончания в ТЧ РаботникиОрганизации
				
				// Определим, сколько дней можем предоставить по данному виду отпуска.
				// Из-за того, что у одного работника может быть несколько отдельных интервалов отпуска в году,
				// но т.к. запрос выполняется еще без учета этих интервалов, то для каждого из них он
				// будет возвращать в том числе и те виды отпуска, которые уже вошли в предыдущие интервалы
				// на более ранних шагах цикла обхода результата выборки, поэтому здесь ведем расчет отпусков 
				// с учетом данных, обработанных на предыдущих шагах цикла.
				УчтеноДней = Выборка.Результат;
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("ВидТрудовогоОтпуска", Выборка.ВидТрудовогоОтпуска);
				СтруктураПоиска.Вставить("РабочийГодС", НачалоДня(Выборка.РабочийГодС));
				
				НайденныеСтрокиУчтено = ТаблицаУчтено.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтрокиУчтено.Количество() > 0 Тогда
					УчтеноДней = УчтеноДней - НайденныеСтрокиУчтено[0].УчтеноДней;
				КонецЕсли;
			
				Если УчтеноДней <> 0 Тогда // есть какие-то ранее неучтенные дни неиспользованного отпуска
				
					НоваяСтрокаОтпуска = Отпуска.Добавить();
					НоваяСтрокаОтпуска.Сотрудник 			= Выборка.Сотрудник;
					НоваяСтрокаОтпуска.ФизЛицо   			= Выборка.ФизЛицо;
					НоваяСтрокаОтпуска.ДатаНачалаВсего 		= Выборка.ДатаРасчета;
					НоваяСтрокаОтпуска.ВидТрудовогоОтпуска	= Выборка.ВидТрудовогоОтпуска;
					НоваяСтрокаОтпуска.РабочийГодС			= Выборка.РабочийГодС;
					НоваяСтрокаОтпуска.РабочийГодПо			= Выборка.РабочийГодПо;
					Если ОбщееЧислоДней < 0 И ОбщееЧислоДней + УчтеноДней > 0 Тогда
						// начиная с этой строки закрыли все ранее 
						// излишне предоставленные отпуска и теперь будут дни уже реального отпуска
						НоваяСтрокаОтпуска.ДнейОтпуска = - ОбщееЧислоДней;
						
						НоваяСтрокаОтпуска = Отпуска.Добавить();
						НоваяСтрокаОтпуска.ФизЛицо 	 			= Выборка.ФизЛицо;
						НоваяСтрокаОтпуска.Сотрудник 			= Выборка.Сотрудник;
						НоваяСтрокаОтпуска.ДатаНачалаВсего      = Выборка.ДатаРасчета;
						НоваяСтрокаОтпуска.ВидТрудовогоОтпуска	= Выборка.ВидТрудовогоОтпуска;
						НоваяСтрокаОтпуска.РабочийГодС			= Выборка.РабочийГодС;
						НоваяСтрокаОтпуска.РабочийГодПо			= Выборка.РабочийГодПо;
						НоваяСтрокаОтпуска.ДнейОтпуска 			= ОбщееЧислоДней + УчтеноДней; 
						
						// предоставляем только положительное число дней отпуска
						ЧислоПредоставляемыхДней = ОбщееЧислоДней + УчтеноДней;
					Иначе
						НоваяСтрокаОтпуска.ДнейОтпуска = УчтеноДней;

						// полностью предоставляем все дни текущего вида отпуска
						ЧислоПредоставляемыхДней = УчтеноДней;
					КонецЕсли;
					ОбщееЧислоДней = ОбщееЧислоДней + УчтеноДней;
					
					Если ОбщееЧислоДней > 0 Тогда
						// уже пошли настоящие предоставляемые дни отпуска
						НоваяСтрокаОтпуска.ДатаНачала = ТекущаяДата;
						
						// определим дату окончания текущего вида отпуска
						ПрошлоДней = 0;
						Пока ПрошлоДней < ЧислоПредоставляемыхДней 
								И (НЕ ЗначениеЗаполнено(ПоследняяДатаОтпуска) ИЛИ ТекущаяДата <= ПоследняяДатаОтпуска) Цикл
							
							Если ИндКалендаря < ТаблицаКалендаря.Количество() Тогда
								ПрошлоДней = ПрошлоДней + ТаблицаКалендаря[ИндКалендаря].КалендарныеДни;
								ТекущаяДата = ТекущаяДата + мДлинаСуток;
								ИндКалендаря = ИндКалендаря + 1;
							Иначе
								Сообщить("Не заполнен регламентированный производственный календарь за "+Формат(ТекущаяДата, "ДФ=гггг"));
								Возврат;
							КонецЕсли;	
							
						КонецЦикла;
						
						НоваяСтрокаОтпуска.ДнейОтпуска   = ПрошлоДней;
						НоваяСтрокаОтпуска.ДатаОкончания = ТекущаяДата - мДлинаСуток;
						
						Если НоваяСтрокаОтпуска.ДатаОкончания = ПоследняяДатаОтпуска Тогда
							// предоставили весь доступный отпуск, чтобы заполнить с ДатыНачала по ДатуОкончания из т.ч. РаботникиОрганизации
							ПредоставлятьОтпуск = Ложь;
						КонецЕсли;
						
						// скорректируем по реально использованным дням
						УчтеноДней = УчтеноДней + (ПрошлоДней - ЧислоПредоставляемыхДней);	
						ОбщееЧислоДней = ОбщееЧислоДней + (ПрошлоДней - ЧислоПредоставляемыхДней);
						
					КонецЕсли;
				КонецЕсли;

				// запомним, сколько дней учли на этом шаге цикла
				Если НайденныеСтрокиУчтено.Количество() > 0 Тогда
					НайденныеСтрокиУчтено[0].УчтеноДней = НайденныеСтрокиУчтено[0].УчтеноДней + УчтеноДней; 
				Иначе
					НоваяСтрокаУчтено = ТаблицаУчтено.Добавить();
					НоваяСтрокаУчтено.ВидТрудовогоОтпуска = Выборка.ВидТрудовогоОтпуска;
					НоваяСтрокаУчтено.РабочийГодС = НачалоДня(Выборка.РабочийГодС);
					НоваяСтрокаУчтено.УчтеноДней = УчтеноДней;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
		// закроем последнуюю строку
		Если ТекущаяСтрокаРаботники <> Неопределено 
				И НоваяСтрокаОтпуска <> Неопределено Тогда

			ТекущаяСтрокаРаботники.ДнейОтпуска = ОбщееЧислоДней - ЧислоДнейЗаПредыдущиеИнтервалы;
			Если НЕ ЗначениеЗаполнено(ПоследняяДатаОтпуска) Тогда
						
				ТекущаяСтрокаРаботники.ДатаОкончания = НоваяСтрокаОтпуска.ДатаОкончания;
						
				Если ТекущаяСтрокаРаботники.ДатаОкончания <= ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
					ТекущаяСтрокаРаботники.ПроизошедшееСобытие = Истина;
				Иначе
					ТекущаяСтрокаРаботники.ПроизошедшееСобытие = Ложь;
				КонецЕсли;
						
			ИначеЕсли НоваяСтрокаОтпуска.ДатаОкончания < ПоследняяДатаОтпуска Тогда
						
				Сообщить(ТекущаяСтрокаРаботники.Сотрудник.Наименование + " не имеет неиспользованных дней отпуска для предоставления с " + Формат(ТекущаяСтрокаРаботники.ДатаНачала, "ДФ='дд.ММ.гггг'") + " по " + Формат(ТекущаяСтрокаРаботники.ДатаОкончания, "ДФ='дд.ММ.гггг'"));
						
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
	
		Сообщить("Нет данных о неиспользованных отпусках!");	
		
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета <> "Диаграмма" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                |	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
		                |	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
		                |ИЗ
 		                |	Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
		                |
		                |ГДЕ
		                |	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка И
		                |	(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> &ПустаяДата)");
						
		Запрос.УстановитьПараметр("ПустаяДата",'00010101');
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ДатаНачала <> Null И Выборка.ДатаОкончания <> Null И НЕ ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
 	Если ИмяМакета = "ПриказСписком" Тогда
 		ТабДокумент = ПечатьПриказаСписком()
 	ИначеЕсли ИмяМакета = "Приказ" Тогда
 		ТабДокумент = ПечатьПриказа()
	ИначеЕсли ИмяМакета = "Диаграмма" тогда

		Если Не Проведен Тогда
 			Предупреждение("Диаграмму графика отпусков можно распечатать только после проведения документа!");
			Возврат;
		КонецЕсли;
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
 		|	Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();	 

		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.Отпуска.Создать();
			Форма = Отчет.ПолучитьФорму();
			ЗначениеНастройкиПользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(Отчет, Форма);
			ЗначениеНастройкиПользователя.ВыводитьДиаграммуГанта = истина;
			ЗначениеНастройкиПользователя.ВыводитьЗаголовокОтчета = истина;
			Отчет.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПользователя);
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НачалоПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаНач),НачалоГода(РабочаяДата),НачалоМесяца(Выборка.ДатаНач)));
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "КонецПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаКон),КонецГода(РабочаяДата),КонецМесяца(Выборка.ДатаКон)));
			ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Регистратор", Ссылка);
			ТабДокумент = Новый ТабличныйДокумент;
			Отчет.СформироватьОтчет(ТабДокумент);
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (диаграмма)"));
		Иначе
			Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПриказСписком, Приказ, Диаграмма", "Приказ на список сотрудников", "Приказ на каждого сотрудника", "Диаграмма");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТрудовыеОтпускаОрганизаций.Дата,
	               |	ТрудовыеОтпускаОрганизаций.Организация,
	               |	ВЫБОР 
			   	   |		КОГДА ТрудовыеОтпускаОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация 
			       |			ТОГДА ТрудовыеОтпускаОрганизаций.Организация 
			   	   |			ИНАЧЕ ТрудовыеОтпускаОрганизаций.Организация.ГоловнаяОрганизация 
				   |		КОНЕЦ КАК ГоловнаяОрганизация,
	               |	ТрудовыеОтпускаОрганизаций.Ссылка
	               |ИЗ
	               |	Документ.ТрудовыеОтпускаОрганизаций КАК ТрудовыеОтпускаОрганизаций
	               |
	               |ГДЕ
	               |	ТрудовыеОтпускаОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - табличная часть запроса
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	 Ссылка);
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", 		 Дата('00010101'));
	Запрос.УстановитьПараметр("МаксДата",			 Дата('29991231'));
	Запрос.УстановитьПараметр("Прием",				 Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
		|	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
		|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
		|	ДанныеПоРаботникуДоНазначения.Должность,
		|	ДанныеПоРаботникуДоНазначения.ТарифныйРазряд,
		|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	NULL КАК КонфликтныйДокумент,
		|	ВЫБОР
		|		КОГДА ДетализированныеСтроки.ДатаНачала <> ТЧРаботникиОрганизации.ДатаНачала 
		|				ИЛИ ДетализированныеСтроки.ДатаОкончания <> ТЧРаботникиОрганизации.ДатаОкончания
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаНеСоответствиеИнтерваловОтпуска,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ДнейОтпуска <> ДетализированныеСтроки.ДнейОтпуска
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаНеСоответствиеДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(Работники.Период) КАК Период
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|					И (Работники.Организация = &ГоловнаяОрганизация)
		|					И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
		|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
		|					И (ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
		|						ИЛИ ТЧРаботникиОрганизации.ПроизошедшееСобытие = ЛОЖЬ
		|						ИЛИ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала)
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ВЫБОР КОГДА ТЧОтпуска.ДатаНачала <> &ПустаяДата ТОГДА ТЧОтпуска.ДатаНачала ИНАЧЕ &МаксДата КОНЕЦ) КАК ДатаНачала,
		|			МАКСИМУМ(ТЧОтпуска.ДатаОкончания) КАК ДатаОкончания,
		|			СУММА(ТЧОтпуска.ДнейОтпуска) КАК ДнейОтпуска
		|		ИЗ
		|			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТЧОтпуска
		|				ПО (ТЧОтпуска.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|					И ТЧРаботникиОрганизации.ДатаНачала = ТЧОтпуска.ДатаНачалаВсего
		|					И НЕ ТЧОтпуска.Сторно 
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДетализированныеСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДетализированныеСтроки.НомерСтроки
        |
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""КонфликтныйДокумент"",
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СостояниеРаботниковОрганизации.Регистратор,
		|	NULL,
		|	NULL,
		|	ЛОЖЬ
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
		|		ПО СостояниеРаботниковОрганизации.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
		|			И (СостояниеРаботниковОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (ТЧРаботникиОрганизации.ПроизошедшееСобытие
		|					И (СостояниеРаботниковОрганизации.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания)
		|				ИЛИ СостояниеРаботниковОрганизации.Период = ТЧРаботникиОрганизации.ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
	 	|";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтрокиРаботники,
		|	ТЧОтпуска.НомерСтроки КАК НомерСтрокиОтпуска,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачалаВсего,
		|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ТЧОтпуска.ВидТрудовогоОтпуска КАК ВидОтпуска,
		|	ТЧОтпуска.ДатаНачала КАК ДатаНачала,
		|	ТЧОтпуска.ДатаОкончания КАК ДатаОкончания,
		|	ТЧОтпуска.РабочийГодС КАК РабочийГодС,
		|	ТЧОтпуска.РабочийГодПо КАК РабочийГодПо,
		|	ТЧОтпуска.ДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТЧОтпуска.РабочийГодС, ГОД), МЕСЯЦ, МЕСЯЦ(ПриказыОПриеме.Период) - 1), ДЕНЬ, ДЕНЬ(ПриказыОПриеме.Период) - 1) = ТЧОтпуска.РабочийГодС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеС,
		|	ВЫБОР
		|		КОГДА " + ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода("ТЧОтпуска.РабочийГодС") + " = ТЧОтпуска.РабочийГодПо
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеПо,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧОтпуска.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТЧОтпуска
		|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|			И ТЧОтпуска.Ссылка = &ДокументСсылка
		|			И ТЧРаботникиОрганизации.ДатаНачала = ТЧОтпуска.ДатаНачалаВсего
		|			И НЕ ТЧОтпуска.Сторно
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧОтпуска.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧОтпуска2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТЧОтпуска
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТЧОтпуска2
		|				ПО (ТЧОтпуска2.Ссылка = &ДокументСсылка)
		|					И ТЧОтпуска.Сотрудник = ТЧОтпуска2.Сотрудник
		|					И ТЧОтпуска.ДатаНачалаВсего = ТЧОтпуска2.ДатаНачалаВсего
		|					И ТЧОтпуска.НомерСтроки <> ТЧОтпуска2.НомерСтроки
		|					И ТЧОтпуска.ДатаНачала <= ТЧОтпуска2.ДатаНачала
		|					И НЕ ТЧОтпуска2.Сторно
		|					И (ТЧОтпуска.ДатаОкончания = &ПустаяДата
		|						ИЛИ ТЧОтпуска.ДатаОкончания >= ТЧОтпуска2.ДатаНачала)
		|		ГДЕ
		|			ТЧОтпуска.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧОтпуска.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧОтпуска.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник,
		|				МАКСИМУМ(Работники.Период) КАК Период
		|			ИЗ
		|				ВТДанныеДокумента КАК ТЧРаботникиОрганизации
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|						И (Работники.Организация = &ГоловнаяОрганизация)
		|						И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
		|						И (Работники.ПричинаИзмененияСостояния = &Прием)
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ПриказыОПриеме
		|		ПО ПриказыОПриеме.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
	 	|";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботникиОрганизации.Сотрудник,
	               |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	               |	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
	               |	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
	               |	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
	               |	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
	               |	ТЧРаботникиОрганизации.ДнейОтпуска
	               |ПОМЕСТИТЬ ВТДанныеДокумента
	               |ИЗ
	               |	Документ.ТрудовыеОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |ГДЕ
	               |	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	               |	И (НЕ ТЧРаботникиОрганизации.Сторно) 
				   |;
				   |/////////////////////////////////////////////////
				   |" + ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, работники которой отправляются в отпуск!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, Режим)

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиОтпуска) +
		""" табл. части ""Трудовые отпуска"" для строки номер """ + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиРаботники) + 
		""" табл. части ""Сотрудники"": ";
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
		КонецЕсли;
	
		// Сотрудник
		ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НЕ ЕстьСотрудник Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		ЕстьДатаНачала = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если Режим <> "ПоТабличнойЧастиОтпуска" Тогда
			Если НЕ ЕстьДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если ЕстьДатаНачала И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если ЕстьСотрудник И ЕстьДатаНачала Тогда

			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
			КонецЕсли;

			// Проверка: противоречие другой строке документа
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "период отпуска пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	
			
			Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
				// Проверка: соответствие интервалов отпуска в основной и дополнительной табличных частях
				Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеИнтерваловОтпуска Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " указанный общий период отпуска не соответствует детальному!", Отказ, Заголовок);
				КонецЕсли;

				// Проверка: соответствие суммарных дней отпуска в основной и дополнительной табличных частях
				Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеДнейОтпуска Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " указанная общая продолжительность отпуска не соответствует детальному!", Отказ, Заголовок);
				КонецЕсли;
				
				// Проверка: ранее сотрудник должен быть принят на работу
				Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
					СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
				ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
					СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
				КонецЕсли; 
			КонецЕсли;

		КонецЕсли;

		Если Режим = "ПоТабличнойЧастиОтпуска" Тогда
			
			// РабочийГодС
			ЕстьРабочийГодС = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодС);
			Если НЕ ЕстьРабочийГодС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеС Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
			
			// РабочийГодПо
			ЕстьРабочийГодПо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодПо);
			Если НЕ ЕстьРабочийГодПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания рабочего года!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеПо Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания рабочего года не соответствует дате приема!", Отказ, Заголовок);
			КонецЕсли;
			
			// Причина отсутствия
			ЕстьВидОтпуска = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска);
			Если НЕ ЕстьВидОтпуска Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
			КонецЕсли;
			
			Если ЕстьДатаНачала Тогда
				
				// Проверка: период детальной записи отпуска должен попадать в основной период отпуска
				Если ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоСтрокамДокумента.ДатаНачалаВсего или
					ВыборкаПоСтрокамДокумента.ДатаОкончания > ВыборкаПоСтрокамДокумента.ДатаОкончанияВсего Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "период отпуска """ + ВыборкаПоСтрокамДокумента.ВидОтпуска + """ не соответствует общему интервалу отпуска!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;	
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("НамеченныеСобытияПоПерсоналуОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
					СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")

	Причина = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		// движения по дате "с"
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное состояние работника
		Движение.Состояние 					= Перечисления.СостоянияРаботникаОрганизации[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];
			
	КонецЕсли; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда

		// Движения по дате "по"
		Если  ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
			
			ИмяРегистра = "СостояниеРаботниковОрганизаций";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
	            // Свойства
	            Движение.ПериодЗавершения = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	            // Ресурсы
	            Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
			КонецЕсли;
			
		Иначе
			
			ИмяРегистра = "НамеченныеСобытияПоПерсоналуОрганизаций";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	
				// Измерения
				Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
				Движение.ДатаИзменения              = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
				// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное планируемое изменение работника
				Движение.ПланируемоеСобытие         = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];

				// Реквизиты
				Движение.ЗанимаемыхСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
				Движение.ЗаниматьСтавку             = ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ИспользованиеОтпусковРаботникамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
					СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
	Режим = "ПоТабличнойЧастиРаботникиОрганизации";
	Если СтруктураПараметров.Свойство(Режим) Тогда
	    ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
	    Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
			Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаНачала;

			// Измерения
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность			    	= ВыборкаПоРаботникиОрганизации.Должность;
			Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

			// Ресурсы                        
			Движение.КоличествоСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 
                                              
			// Реквизиты
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда

				Движение = Движения[ИмяРегистра].Добавить();	

				// Свойства
				Движение.Период                = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения		   = ВидДвиженияНакопления.Приход;
			
				// Измерения
				Движение.ПодразделениеОрганизации = ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность			   	  = ВыборкаПоРаботникиОрганизации.Должность;
				Движение.ТарифныйРазряд		      = ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

				// Ресурсы
				Движение.КоличествоСтавок      = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
				
				// Реквизиты
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

			КонецЕсли;

		КонецЕсли; 
	КонецЕсли;

	Режим = "ПоТабличнойЧастиОтпуска";
	Если СтруктураПараметров.Свойство(Режим) Тогда
	  	ИмяРегистра = "ИспользованиеОтпусковРаботникамиОрганизаций";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период           		    = ВыборкаПоРаботникиОрганизации.ДатаНачалаВсего;

			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Сотрудник			    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ВидТрудовогоОтпуска	   	= ВыборкаПоРаботникиОрганизации.ВидОтпуска;

			// Ресурсы
			Движение.ИспользованоДней       	= ВыборкаПоРаботникиОрганизации.ДнейОтпуска; 

			// Реквизиты
			Движение.ДатаНачала       			= ВыборкаПоРаботникиОрганизации.ДатаНачала;
			Движение.ДатаОкончания		       	= ВыборкаПоРаботникиОрганизации.ДатаОкончания;
			Движение.РабочийГодС       			= ВыборкаПоРаботникиОрганизации.РабочийГодС;
			Движение.РабочийГодПо       		= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
			Если ВыборкаПоРаботникиОрганизации.ДатаНачала <> '00010101' Тогда
				Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.РегистрацияОтпуска;
			Иначе
				Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.КорректировкаОтпуска;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
    	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиРаботникиОрганизации");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			// По табличной части "Работники организации"
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиРаботникиОрганизации");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиРаботникиОрганизации");

				Если НЕ Отказ И ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений, );

					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
			// По табличной части "Отпуска"
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиОтпуска");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиОтпуска");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиОтпуска");

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);		

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры

мДлинаСуток = 86400;
мВосстанавливатьДвижения = Ложь;
