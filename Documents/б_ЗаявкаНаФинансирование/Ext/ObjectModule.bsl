////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы(ТабДокумент,имяМакета)
	
	Запрос = Новый Запрос;
	ЗапросКСтатьям = Новый Запрос;
	ЗапросПримечание = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	б_ЗаявкаНаФинансирование.Организация,
	|	б_ЗаявкаНаФинансирование.ФормируемыйБюджет КАК ФормируемыйБюджет,
	|	б_ЗаявкаНаФинансирование.Сценарий КАК Сценарий,
	|	б_ЗаявкаНаФинансирование.ПериодПланирования КАК ПериодПланирования
	|ИЗ
	|	Документ.б_ЗаявкаНаФинансирование КАК б_ЗаявкаНаФинансирование
	|ГДЕ
	|	б_ЗаявкаНаФинансирование.ссылка = &ТекущийДокумент
	|";
	
	ЗапросКСтатьям.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЗапросКСтатьям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетнаяТаблица.СтатьяБюджета.КодСтрокиБюджета КАК КодСтрокиБюджета,
	|	РасчетнаяТаблица.СтатьяБюджета КАК Статьябюджета,
	|	РасчетнаяТаблица.ГодовойПлан КАК ГодовойПлан,
	|	РасчетнаяТаблица.Отклонение КАК Отклонение,
	|	РасчетнаяТаблица.ПланНамесяц КАК ПланНаМесяц,
	|	РасчетнаяТаблица.СуммаПоЗаявке КАК СуммаПоЗаявке,
	|	РасчетнаяТаблица.ОдобреннаяСумма КАК ОдобреннаяСумма,
	|	РасчетнаяТаблица.Примечание КАК Примечание,
	|	РасчетнаяТаблица.Контрагент,
	|	РасчетнаяТаблица.ППИ,
	|	РасчетнаяТаблица.ФактПредыдущегоПериода КАК ФактПредыдущегоПериода,
	|	РасчетнаяТаблица.СуммыПредыдущихПлатежей КАК СуммыПредыдущихПлатежей,
	|	РасчетнаяТаблица.ОстатокПланаСУчетомФакта КАК ОстатокПланаСУчетомФакта,
	|	РасчетнаяТаблица.СуммаППИБезНдс КАК СуммаППИБезНдс,
	|	РасчетнаяТаблица.СуммаППИСНдс КАК СуммаППИСНдс,
	|	РасчетнаяТаблица.СтавкаНДС,
	|	РасчетнаяТаблица.Договор
	|ИЗ
	|	Документ.б_ЗаявкаНаФинансирование.РасчетнаяТаблица КАК РасчетнаяТаблица
	|ГДЕ
	|	РасчетнаяТаблица.Ссылка = &ТекущийДокумент
	|	И НЕ РасчетнаяТаблица.СтатьяБюджета.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетнаяТаблица.СтатьяБюджета.КодСтрокиБюджета
	|ИТОГИ
	|	СУММА(ГодовойПлан),
	|	СУММА(Отклонение),
	|	СУММА(ПланНаМесяц),
	|	СУММА(СуммаПоЗаявке),
	|	СУММА(ОдобреннаяСумма),
	|	СУММА(ФактПредыдущегоПериода),
	|	СУММА(СуммыПредыдущихПлатежей),
	|	СУММА(ОстатокПланаСУчетомФакта),
	|	СУММА(СуммаППИБезНдс),
	|	СУММА(СуммаППИСНдс)
	|ПО
	|	ОБЩИЕ,
	|	Статьябюджета ИЕРАРХИЯ";
	
	ЗапросПримечание.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	ЗапросПримечание.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетнаяТаблица.СтатьяБюджета КАК Статьябюджета,
	|	РасчетнаяТаблица.Примечание КАК Примечание,
	|	РасчетнаяТаблица.Контрагент,
	|	РасчетнаяТаблица.Договор,
	|	РасчетнаяТаблица.ППИ,
	|	РасчетнаяТаблица.СтавкаНДС
	|ИЗ
	|	Документ.б_ЗаявкаНаФинансирование.РасчетнаяТаблица КАК РасчетнаяТаблица
	|ГДЕ
	|	РасчетнаяТаблица.Ссылка = &ТекущийДокумент
	|	И НЕ РасчетнаяТаблица.СтатьяБюджета.ЭтоГруппа";
	
	ЗапросШапка = Запрос.Выполнить().Выбрать();
	
	ЗапросШапка.Следующий();
	
	Результат = ЗапросКСтатьям.Выполнить();
	
	тз = ЗапросПримечание.Выполнить().Выгрузить();
		
	Макет = ПолучитьМакет("Заявка");
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 10;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаФинансирование";
	
	// Выводим шапку накладной
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Организация = ЗапросШапка.Организация;
	Если ВидПериода = 0 Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = "Заявка на финансирование на " + Формат(Дата," ДФ = MMMM.yyyy");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = "Заявка на финансирование на " + Формат(Дата,"ДФ='q ""квартал"" гггг ""г.""'");
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Годовойплан = "План на "+Год(периодПланирования)+" г.";
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	ВыборкаОбщийИтог.Следующий();
	
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаГруппа = Макет.ПолучитьОбласть("Группа");
	
	Выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатьяБюджета.ЭтоГруппа тогда
			ОбластьМакетаГруппа.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьМакетаГруппа,Выборка.Уровень());
		Иначе
				
			
			СтрокаТЗ 				= тз.Найти(Выборка.СтатьяБюджета, "СтатьяБюджета");
		 	Примечание = ?(СтрокаТЗ = НЕОПРЕДЕЛЕНО,"",СтрокаТЗ.Примечание);
			
			ОбластьМакетаСтрока.Параметры.Заполнить(Выборка);
			ОбластьМакетаСтрока.Параметры.Примечание = Примечание;
			
			Если Не СтрокаТЗ = НЕОПРЕДЕЛЕНО Тогда
				
				ОбластьМакетаСтрока.Параметры.Контрагент = СтрокаТЗ.Контрагент;
				ОбластьМакетаСтрока.Параметры.ППИ = СтрокаТЗ.ППИ;
				//ОбластьМакетаСтрока.Параметры.СтавкаНДС = СтрокаТЗ.СтавкаНДС;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока,);
		  КонецЕсли;

	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ВыборкаОбщийИтог);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Макет = ПолучитьОбщийМакет("ПодписиОтчета");
	ОбластьПодписи        = Макет.ПолучитьОбласть("Подписи");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация,Дата);
	
	Руководитель = Руководители.Руководитель;
	РуководительДолжность = Руководители.РуководительДолжность;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	БухгалтерДолжность    = Руководители.ГлавныйБухгалтерДолжность;
	
	ОбластьПодписи.Параметры.Руководитель				= Руководитель;
	ОбластьПодписи.Параметры.РуководительДолжность		= РуководительДолжность;
	ОбластьПодписи.Параметры.ГлавныйБухгалтер 			= Бухгалтер;
	ОбластьПодписи.Параметры.ГлавныйБухгалтерДолжность 	= БухгалтерДолжность;
	
	ТабДокумент.Вывести(ОбластьПодписи);
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заявка" Тогда
			ТабДокумент = ПечатьТаблицы( Новый ТабличныйДокумент,"Заявка");
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

Процедура РассчитатьГодовойПлан() Экспорт
	
	//План на год
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ПериодПланирования));
	Запрос.УстановитьПараметр("КонецПериода",КонецГода(ПериодПланирования));
	Запрос.УстановитьПараметр("Статус",Перечисления.СостоянияОбъектов.Утвержден);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_БюджетОбороты.СтатьяБюджета,
	|	б_БюджетОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.б_Бюджет.Обороты(
	|			&Началопериода,
	|			&Конецпериода,
	|			,
	|			Организация = &Организация
	|				И Бюджет = &ФормируемыйБюджет
	|				И Статус = &Статус) КАК б_БюджетОбороты
	|";
	
	тзПлан = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ РасчетнаяТаблица Цикл
		Если СтрокаТЧ.СтатьяБюджета.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ГодовойПлан =  0;
		
		СтрокаТЗ 				= тзПлан.Найти(СтрокаТЧ.СтатьяБюджета, "СтатьяБюджета");
		
		СтрокаТЧ.ГодовойПлан = ?(СтрокаТЗ = НЕОПРЕДЕЛЕНО,0,СтрокаТЗ.СуммаОборот);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьОтклонение() Экспорт
	
	мСубконтоДоходы = Новый Массив;
	мСубконтоДоходы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	
	мСубконтоТипыОпераций = Новый Массив;
	мСубконтоТипыОпераций.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	мСубконтоСтатьиЗатрат = Новый Массив;
	мСубконтоСтатьиЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	мСубконтоОС = Новый Массив;
	мСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	мСубконтоНМА = Новый Массив;
	мСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	
	мСписокСчетовПоставщиков = Новый Массив;
	мСписокСчетовПоставщиков.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	
	НачалоПериода = НачалоДня(НачалоГода(Дата));
	КонецПериода  = КонецМесяца(ДобавитьМесяц(Дата,-1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("мСписокСчетовПоставщиков", мСписокСчетовПоставщиков);
	Запрос.УстановитьПараметр("мСубконтоОС", мСубконтоОС);
	Запрос.УстановитьПараметр("мСубконтоНМА", мСубконтоНМА);
	Запрос.УстановитьПараметр("мСубконтоСтатьиЗатрат", мСубконтоСтатьиЗатрат);
	Запрос.УстановитьПараметр("мСубконтоДоходы", мСубконтоДоходы);
	Запрос.УстановитьПараметр("мСубконтоТипыОпераций", мСубконтоТипыОпераций);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	Запрос.УстановитьПараметр("Статус",Перечисления.СостоянияОбъектов.Утвержден);
		
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ОборотПоБУ.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотПоБУ.Организация КАК Организация,
	|	ОборотПоБУ.Сумма КАК Сумма,
	|	ОборотПоБУ.Регистратор КАК Регистратор,
	|	ОборотПоБУ.ПериодМесяц КАК ПериодМесяц,
	|	ОборотПоБУ.ПериодКвартал КАК ПериодКвартал
	|ПОМЕСТИТЬ ФактическийОборот
	|ИЗ
	|	(ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСчетамБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСчетамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма,
	|		ТиповойОбороты.Регистратор КАК Регистратор,
	|		ТиповойОбороты.ПериодМесяц КАК ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал КАК ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК б_СоответствияСтатейБюджетаСчетамБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаСчетамБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК СоответствияСтатейБюджетаСчетамБУ),
	|					,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСчетамБУ.Счет)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаСчетамБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаДоходамБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаДоходамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК б_СоответствияСтатейБюджетаДоходамБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаДоходамБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК СоответствияСтатейБюджетаДоходамБУ),
	|					&мСубконтоДоходы,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаДоходамБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаДоходамБУ.Доход)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаДоходамБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаТипамОперацийБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК б_СоответствияСтатейБюджетаТипамОперацийБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаТипамОперацийБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК СоответствияСтатейБюджетаТипамОперацийБУ),
	|					&мСубконтоТипыОпераций,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаТипамОперацийБУ.ТипОперации)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаТипамОперацийБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК б_СоответствияСтатейБюджетаСтатьямЗатратБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК СоответствияСтатейБюджетаСтатьямЗатратБУ),
	|					&мСубконтоСтатьиЗатрат,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяЗатрат)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаГруппамОСБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаГруппамОСБУ.ПризнакСуммы,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК б_СоответствияСтатейБюджетаГруппамОСБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаГруппамОСБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК СоответствияСтатейБюджетаГруппамОСБУ),
	|					&мСубконтоОС,
	|					,
	|					КорСчет В ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаГруппамОСБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ГруппаОС = б_СоответствияСтатейБюджетаГруппамОСБУ.ГруппаОС)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаГруппамОСБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаВидамНМАБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаВидамНМАБУ.ПризнакСуммы,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК б_СоответствияСтатейБюджетаВидамНМАБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаВидамНМАБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК СоответствияСтатейБюджетаВидамНМАБУ),
	|					&мСубконтоНМА,
	|					,
	|					КорСчет В ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаВидамНМАБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ВидНМА = б_СоответствияСтатейБюджетаВидамНМАБУ.ВидНМА)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаВидамНМАБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет) КАК ОборотПоБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБУ.Организация КАК Организация,
	|	СУММА(ОборотыБУ.Сумма) КАК СуммаФакт,
	|	СУММА(ОборотыБУ.СуммаПлан) КАК СуммаПлан,
	|	ОборотыБУ.СтатьяБюджета,
	|	СУММА(ОборотыБУ.СуммаПлан - ОборотыБУ.Сумма) КАК Отклонение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФактическийОборотБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ФактическийОборотБУ.Организация КАК Организация,
	|		ФактическийОборотБУ.Сумма КАК Сумма,
	|		0 КАК СуммаПлан,
	|		ФактическийОборотБУ.Регистратор КАК Регистратор,
	|		ФактическийОборотБУ.ПериодМесяц КАК ПериодМесяц,
	|		ФактическийОборотБУ.ПериодКвартал КАК ПериодКвартал
	|	ИЗ
	|		ФактическийОборот КАК ФактическийОборотБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_БюджетОбороты.СтатьяБюджета,
	|		б_БюджетОбороты.Организация,
	|		0,
	|		б_БюджетОбороты.СуммаОборот,
	|		б_БюджетОбороты.Регистратор,
	|		б_БюджетОбороты.ПериодМесяц,
	|		б_БюджетОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрНакопления.б_Бюджет.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Авто,
	|				Бюджет = &ФормируемыйБюджет
	|					И Статус = &Статус) КАК б_БюджетОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗависимостиСтатейБюджета.ЗависимаяСтатьяБюджета,
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Сумма, 0) * ЗависимостиСтатейБюджета.Коэффициент,
	|		0,
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Регистратор, NULL),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.ПериодМесяц, NULL),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.ПериодКвартал, NULL)
	|	ИЗ
	|		РегистрСведений.ЗависимостиСтатейБюджета КАК ЗависимостиСтатейБюджета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактическийОборот КАК ФактическийОборотПоБУ
	|			ПО ЗависимостиСтатейБюджета.ВлияющаяСтатьяБюджета = ФактическийОборотПоБУ.СтатьяБюджета
	|	ГДЕ
	|		ЗависимостиСтатейБюджета.ЗависимыйБюджет = &ФормируемыйБюджет) КАК ОборотыБУ
	|ГДЕ
	|	ОборотыБУ.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБУ.СтатьяБюджета,
	|	ОборотыБУ.Организация";
	
	тзОтклонение = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ РасчетнаяТаблица Цикл
		Если СтрокаТЧ.СтатьяБюджета.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		
		
		СтрокаТЧ.Отклонение = 0;
		
		СтрокаТЗОтклонение	 	= тзОтклонение.Найти(СтрокаТЧ.СтатьяБюджета, "СтатьяБюджета");
		
		СтрокаТЧ.ОстатокПланаСУчетомФакта = ?(СтрокаТЗОтклонение = НЕОПРЕДЕЛЕНО,0,СтрокаТЧ.ГодовойПлан - СтрокаТЗОтклонение.СуммаФакт);
		СтрокаТЧ.ФактПредыдущегоПериода = ?(СтрокаТЗОтклонение = НЕОПРЕДЕЛЕНО,0,СтрокаТЗОтклонение.СуммаФакт);

		
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета,
			|	СУММА(б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СуммаППИБезНдс) КАК СуммаППИБезНдс
			|ИЗ
			|	Документ.б_ЗаявкаНаФинансирование.РасчетнаяТаблица КАК б_ЗаявкаНаФинансированиеРасчетнаяТаблица
			|ГДЕ
			|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета = &СтатьяБюджета
			|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.ППИ <> ЗНАЧЕНИЕ(Документ.ПлатежноеПоручениеИсходящее.ПустаяСсылка)
			|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка <> &Ссылка
			|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка.Организация = &Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета";
		
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СтатьяБюджета", СтрокаТЧ.СтатьяБюджета);
		Запрос.УстановитьПараметр("Организация",Организация);

		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НеРазнесенныеСуммы = ВыборкаДетальныеЗаписи.СуммаППИБезНдс - СтрокаТЗОтклонение.СуммаФакт;
			СтрокаТЧ.СуммыПредыдущихПлатежей = ?(НеРазнесенныеСуммы < 0,0,НеРазнесенныеСуммы);
		КонецЦикла;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьПланНаМесяц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ФормируемыйБюджет);
	Если ВидПериода = 0 Тогда
		Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(Дата));
		Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(Дата));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода",НачалоКвартала(Дата));
		Запрос.УстановитьПараметр("КонецПериода",КонецКвартала(Дата));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Статус",Перечисления.СостоянияОбъектов.Утвержден);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_БюджетОбороты.СтатьяБюджета,
	|	б_БюджетОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.б_Бюджет.Обороты(
	|			&Началопериода,
	|			&Конецпериода,
	|			,
	|			Организация = &Организация
	|				И Бюджет = &ФормируемыйБюджет
	|				И Статус = &Статус) КАК б_БюджетОбороты
	|";
	
	тзПланНаМесяц = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаТЧ ИЗ РасчетнаяТаблица Цикл
		Если СтрокаТЧ.СтатьяБюджета.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ПланНаМесяц = 0;
		
		СтрокаТЗМесяц 			= тзПланНаМесяц.Найти(СтрокаТЧ.СтатьяБюджета, "СтатьяБюджета");
		
		СтрокаТЧ.ПланНаМесяц = ?(СтрокаТЗМесяц = НЕОПРЕДЕЛЕНО,0,СтрокаТЗМесяц.СуммаОборот);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьДанныеДляЗаявки() Экспорт
	РассчитатьГодовойПлан();	
	РассчитатьОтклонение();	
	РассчитатьПланНаМесяц();	
КонецПроцедуры



// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заявка","Заявка");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
									|ФормируемыйБюджет,
									|Сценарий,
									|ПериодПланирования");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
									 Отказ, Заголовок)
									

Конецпроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//БИТ
	Если ЭтотОбъект.Согласован = Истина 
		Тогда 
		Для Каждого Строка Из РасчетнаяТаблица Цикл 
			Если Строка.ППИ <> Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка() Тогда
				ДокументОбъект = Строка.ППИ.ПолучитьОбъект();
				ДокументОбъект.СогласованоБП = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;

		КонецЦикла;
	Иначе
		Для Каждого Строка Из РасчетнаяТаблица Цикл 
			Если Строка.ППИ <> Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка() Тогда
				ДокументОбъект = Строка.ППИ.ПолучитьОбъект();
				ДокументОбъект.СогласованоБП = Ложь;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
