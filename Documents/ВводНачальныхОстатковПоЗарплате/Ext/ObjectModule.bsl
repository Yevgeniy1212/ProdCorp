////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ 

// По строке выборок из результатов запроса по документу формирует движения по 
// регистрам взаиморасчетов по зарплате и налоговому сальдо по ИПН.
//
Процедура ДобавитьСтрокуЗарплатаИНалоги(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
    /////////////////////////////////////////////////////////////////////////////
    // текущие взаиморасчеты
    //
    
    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
    																	ВыборкаПоШапкеДокумента.Организация,
    																	ИсчислениеНалоговСтруктурныхЕдиниц,
    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;
    
    Если ВыборкаПоСтрокамДокумента.ВзаиморасчетыСРаботниками <> 0 Тогда
    	
    	////////////////////////////////////////////
        // ВзаиморасчетыСРаботникамиОрганизаций
    	
    	Движение 						= Движения.ВзаиморасчетыСРаботникамиОрганизаций.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 				= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда    		
    		Движение.Налогоплательщик	= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница		= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.ПериодВзаиморасчетов 	= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.Организация 			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.ВзаиморасчетыСРаботниками;
    	
    	// Реквизиты
    	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ВзаиморасчетыСРаботниками;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Нач. сальдо по з/п за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
	КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // депонированные суммы
    //
    
    Если ВыборкаПоСтрокамДокумента.ВзаиморасчетыСДепонентами <> 0 Тогда
    	
    	////////////////////////////////////////////
        // ВзаиморасчетыСДепонентамиОрганизаций
    	
    	Движение 						= Движения.ВзаиморасчетыСДепонентамиОрганизаций.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 				= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда    		
    		Движение.Налогоплательщик	= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница		= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.ПериодВзаиморасчетов 	= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.Организация 			= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.ВзаиморасчетыСДепонентами;

    	// Реквизиты
    	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ВзаиморасчетыСДепонентами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Нач. сальдо по деп.з/п за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
    КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // ИПН, исчисленный, но еще не подлежащий перечислению
    //
    
    Если ВыборкаПоСтрокамДокумента.ИПНРасчетыСБюджетом <> 0 Тогда
    	
    	///////////////////////////////
        // ИПНРасчетыСБюджетом
    	
    	Движение 							= Движения.ИПНРасчетыСБюджетом.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда    		
    		Движение.Налогоплательщик	 	= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик	 	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 		= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
    	Движение.МесяцНалоговогоПериода 	= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Налог						= ВыборкаПоСтрокамДокумента.ИПНРасчетыСБюджетом;
    	
    	// Реквизиты
    	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    КонецЕсли;    	

КонецПроцедуры // ДобавитьСтрокуЗарплатаИНалоги()

// По строке выборок из результатов запроса по документу формирует движения по 
// регистрам взаиморасчетов по пенсионным взносам и социальным отчислениям.
//
Процедура ДобавитьСтрокуВзносыИОтчисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
    /////////////////////////////////////////////////////////////////////////////
    // ОПВРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ОПВРасчетыСБюджетом <> 0 Тогда
    	
    	/////////////////////////////
        // ОПВРасчетыСФондами
    	
    	Движение 							= Движения.ОПВРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ОПВРасчетыСБюджетом;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОПВРасчетыСБюджетом;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОПВ за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
    КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // СОРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.СОРасчетыСФондами <> 0 Тогда
    	
        // СОРасчетыСФондами
    	
    	Движение 							= Движения.СОРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Отчисление					= ВыборкаПоСтрокамДокумента.СОРасчетыСФондами;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию;
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.СОРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо СО за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
	КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////////
	// ОППВ расчеты с фондами
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ И ВыборкаПоСтрокамДокумента.ОППВРасчетыСФондами Тогда
			
        // ОППВРасчетыСФондами
    	
    	Движение 							= Движения.ОППВРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ОППВРасчетыСФондами;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОППВРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОППВ за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////
    // ОПВРРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ОПВРРасчетыСФондами <> 0 Тогда
    	
        // ОПВРРасчетыСФондами
    	
    	Движение 							= Движения.ОПВРРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ОПВРРасчетыСФондами;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОПВРРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОПВР за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);    	
	КонецЕсли;		
	
	////////////////////////////////////////////////////////////////////////////////
	// ВОСМС расчеты с фондами
	
	Если ВыборкаПоСтрокамДокумента.ВОСМСРасчетыСФондами Тогда
			
        // ВОСМСРасчетыСФондами
    	
    	Движение 							= Движения.ВОСМСРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ВОСМСРасчетыСФондами;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ВОСМСРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо взносов ОСМС за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
	КонецЕсли;
	
	 /////////////////////////////////////////////////////////////////////////////
    // ООСМСРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ООСМСРасчетыСФондами <> 0 Тогда
    	
        // ООСМСРасчетыСФондами
    	
    	Движение 							= Движения.ООСМСРасчетыСФондами.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе    		
    		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.ВидПлатежа					= ВыборкаПоСтрокамДокумента.ВидПлатежа;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Отчисление					= ВыборкаПоСтрокамДокумента.ООСМСРасчетыСФондами;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Типовой.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	// Счета
    	Проводка.СчетДт					= ПланыСчетов.Типовой.Вспомогательный;
    	
    	Проводка.СчетКт					= ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ООСМСРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо отчислений ОСМС за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВзносыИОтчисления()

// По строке выборок из результатов запроса по документу формирует движения по 
// регистрам взаиморасчетов по пенсионным взносам, подлежащим перечислению.
//
Процедура ДобавитьСтрокуОПВПодлежитПеречислению(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
    /////////////////////////////////////////////////////////////////////////////
    // ОПВПодлежитПеречислениюВФонды
    //
    
    Если ВыборкаПоСтрокамДокумента.ОПВПодлежитПеречислениюВФонды <> 0 Тогда
    	
        // ОПВПодлежитПеречислениюВФонды
    	
    	Движение 							= Движения.ОПВПодлежитПеречислениюВФонды.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе			
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.МесяцВыплатыДоходов		= ВыборкаПоСтрокамДокумента.МесяцВыплатыДоходов;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ОПВПодлежитПеречислениюВФонды;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////
    // ВОСМСПодлежитПеречислениюВФонды
    //
    
    Если ВыборкаПоСтрокамДокумента.ВОСМСПодлежитПеречислениюВФонды <> 0 Тогда
    	
        // ВОСМСПодлежитПеречислениюВФонды
    	
    	Движение 							= Движения.ВОСМСПодлежитПеречислениюВФонды.ДобавитьПриход();
    	
    	// Свойства
    	Движение.Период 					= ВыборкаПоШапкеДокумента.Дата;
    	
    	// Измерения
    	Движение.Физлицо 					= ВыборкаПоСтрокамДокумента.ФизЛицо;
    	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
	    																	ВыборкаПоШапкеДокумента.Организация,
	    																	ИсчислениеНалоговСтруктурныхЕдиниц,
	    																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);			
			Движение.Налогоплательщик		= Налогоплательщик;
    	Иначе			
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
    	Движение.МесяцНалоговогоПериода		= ВыборкаПоСтрокамДокумента.ПериодРегистрации;
    	Движение.МесяцВыплатыДоходов		= ВыборкаПоСтрокамДокумента.МесяцВыплатыДоходов;
    	Движение.Организация 				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
    	
    	// Ресурсы
    	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ВОСМСПодлежитПеречислениюВФонды;
    	
    	// Реквизит
    	Движение.ВидСтроки				 	= Перечисления.РасчетыСБюджетомФондамиВидСтроки.НачальныйОстаток;
    	
    КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуОПВПодлежитПеречислению()

// По строке выборок из результатов запроса по документу формирует движения по 
// регистрам взаиморасчетов по зарплате и налоговому сальдо по ИПН.
//
Процедура ДобавитьСтрокуЗарплатаИНалогиНал(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	СуммаКПроводке = ВыборкаПоСтрокамДокумента.ВзаиморасчетыСРаботниками  + ВыборкаПоСтрокамДокумента.ВзаиморасчетыСДепонентами;
          
    Если СуммаКПроводке <> 0 Тогда
        	
    	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
		
		Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	
    	// Ресурсы
    	Проводка.Сумма					= СуммаКПроводке;
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, Справочники.ВидыУчетаНУ.НУ);
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Нач. сальдо по з/п за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);    	
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
    КонецЕсли;
               
 
КонецПроцедуры // ДобавитьСтрокуЗарплатаИНалоги()

// По строке выборок из результатов запроса по документу формирует движения по 
// регистрам взаиморасчетов по пенсионным взносам и социальным отчислениям.
//
Процедура ДобавитьСтрокуВзносыИОтчисленияНал(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
    /////////////////////////////////////////////////////////////////////////////
    // ОПВРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ОПВРасчетыСБюджетом <> 0 Тогда
    	
       	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОПВРасчетыСБюджетом;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОПВ за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
				
    КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // СОРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.СОРасчетыСФондами <> 0 Тогда    	
          	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
		
		Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.СОРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо СО за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
    КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // ОППВРасчетыСФондами
    //
    
    Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ И ВыборкаПоСтрокамДокумента.ОППВРасчетыСФондами <> 0 Тогда
    	
       	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОППВРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОППВ по за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);

	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////
    // ОПВРРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ОПВРРасчетыСФондами <> 0 Тогда
    	
       	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ОПВРРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ОПВР по за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);

	КонецЕсли;		
		
	/////////////////////////////////////////////////////////////////////////////
    // ВОСМСРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ВОСМСРасчетыСФондами <> 0 Тогда
    	
       	// бухгалтерская проводка
    	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
    	
    	Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ВОСМСРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо взносов ОСМС за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
				
    КонецЕсли;

    /////////////////////////////////////////////////////////////////////////////
    // ООСМСРасчетыСФондами
    //
    
    Если ВыборкаПоСтрокамДокумента.ООСМСРасчетыСФондами <> 0 Тогда    	
          	
    	Проводка 						= Движения.Налоговый.Добавить();
    	
    	// Свойства
    	Проводка.Период					= ВыборкаПоШапкеДокумента.Дата;	
    	
    	// Измерения
    	Проводка.Организация			= ВыборкаПоШапкеДокумента.Организация;
		
		Проводка.СчетДт					= ПланыСчетов.Налоговый.Вспомогательный;
		
    	Проводка.СчетКт					= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВыборкаПоСтрокамДокумента.ВидПлатежа);
    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ВыборкаПоСтрокамДокумента.ФизЛицо);
    	   	
    	// Ресурсы
    	Проводка.Сумма					= ВыборкаПоСтрокамДокумента.ООСМСРасчетыСФондами;
    	
    	// Реквизиты    	
    	Проводка.Содержание				= "Сальдо ООСМС за " + Формат(ВыборкаПоСтрокамДокумента.ПериодРегистрации, "ДФ='МММ гг'");
		
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВыборкаПоШапкеДокумента.ВидУчетаНУ);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
				
    КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВзносыИОтчисления()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на экран или 
// принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет автозаполнение табличной части документа.
// 
// Параметры:
//	СпособЗаполнения - строка "ПоРаботникам", "ПоФизЛицам".
//	ИмяТабличнойЧасти - строка, имя табличной части документам.
//
Процедура Автозаполнение(СпособЗаполнения, ИмяТабличнойЧасти) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДата", Дата);
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	
	Если СпособЗаполнения = "ПоРаботникам" Тогда
		
		Запрос.УстановитьПараметр("парамПодразделениеОрганизации", ПодразделениеОрганизации);		
		Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		       
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(&парамДата, МЕСЯЦ) КАК ПериодРегистрации
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамДата, 
		|			Организация = &парамГоловнаяОрганизация
		|			И Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство) КАК РаботникиОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковПоЗарплате." + ИмяТабличнойЧасти + " КАК СтрокиТЧ
		|		ПО РаботникиОрганизации.Сотрудник.ФизЛицо = СтрокиТЧ.Физлицо
		|		И СтрокиТЧ.Ссылка.Проведен
		|ГДЕ
		|	РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация		
		|	И СтрокиТЧ.Физлицо ЕСТЬ NULL
		|";
		
		Если НЕ ПодразделениеОрганизации.Пустая() Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделениеОрганизации)
			|";
		КонецЕсли;
		
		//Если НЕ СтруктурноеПодразделение.Пустая() Тогда
		//	Запрос.Текст = Запрос.Текст + "
		//	|	И РаботникиОрганизации.СтруктурноеПодразделение = &парамСтруктурноеПодразделение
		//	|";
		//КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование
		|";

	Иначе
	
		// из справочника ФизическиеЛица
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	НАЧАЛОПЕРИОДА(&парамДата, МЕСЯЦ) КАК ПериодРегистрации
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковПоЗарплате." + ИмяТабличнойЧасти + " КАК СтрокиТЧ
		|		ПО ФизическиеЛица.Ссылка = СтрокиТЧ.Физлицо
		|		И СтрокиТЧ.Ссылка.Проведен
		|
		|ГДЕ
		|	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ
		|	И СтрокиТЧ.ФизЛицо ЕСТЬ NULL
		|		
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование
		|";
	
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл
		
		НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	
	КонецЦикла;	

КонецПроцедуры // Автозаполнение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
                        
// Формирует запрос по табличной части "ЗарплатаИНалоги" документа.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЗарплатаИНалоги(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" 			, Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата"	   			, Дата('00010101'));
    Запрос.УстановитьПараметр("ДатаНачала"	   			, ВыборкаПоШапкеДокумента.Дата);
	Запрос.УстановитьПараметр("Организация"	   			, ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам  Тогда
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ФизЛицо,
		|	&ДатаНачала КАК Период
		|ИЗ 
		|	Документ.ВводНачальныхОстатковПоЗарплате.ЗарплатаИНалоги
		|ГДЕ 
		|	Ссылка = &ДокументСсылка";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	КонецЕсли;
 	
    ВыборкаПоляСЕ = "";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница	
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе 
		ВыборкаПоляСЕ = ",
		|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|				И МестоРаботы.ПодразделениеОрганизации.Владелец = &Организация
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации";	
	Иначе
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";		
	КонецЕсли;

	УсловиеСоединения = "";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
	УсловиеСоединения = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;
    
	
	Запрос.Текст		 = МестоРаботыТекст + "ВЫБРАТЬ
	                      |		СтрокиТЧ.ФизЛицо КАК ФизЛицо,
	                      |		СтрокиТЧ.НомерСтроки КАК НомерСтроки,
	                      |		НАЧАЛОПЕРИОДА(СтрокиТЧ.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	                      |		СтрокиТЧ.ВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками,
	                      |		СтрокиТЧ.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами,
	                      |		СтрокиТЧ.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
						  |	    "+ ВыборкаПоляСЕ +"
						  |	ИЗ
	                      |		Документ.ВводНачальныхОстатковПоЗарплате.ЗарплатаИНалоги КАК СтрокиТЧ
						  |
						  |	"+ УсловиеСоединения +" 
						  |
						  |	ГДЕ
	                      |		СтрокиТЧ.Ссылка = &ДокументСсылка
						  |УПОРЯДОЧИТЬ ПО
	               		  |	СтрокиТЧ.НомерСтроки";
	
		   
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЗарплатаИНалоги()

// Формирует запрос по табличной части "ВзносыИОтчисления" документа.
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоВзносыИОтчисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ДатаНачала", ВыборкаПоШапкеДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ФизЛицо,
		|	&ДатаНачала КАК Период
		|ИЗ 
		|	Документ.ВводНачальныхОстатковПоЗарплате.ВзносыИОтчисления
		|ГДЕ 
		|	Ссылка = &ДокументСсылка";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	КонецЕсли;


	// список видов платежей, которые не являются пенями и штрафами
	// и попадают в регистр накопления ОПВПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	ВыборкаПоляСЕ = "";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница	
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе 
		ВыборкаПоляСЕ = ",
		|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|				И МестоРаботы.ПодразделениеОрганизации.Владелец = &Организация
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации";	
	Иначе
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";		
	КонецЕсли; 

	УсловиеСоединения = "";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
	УсловиеСоединения = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;


	Запрос.Текст = МестоРаботыТекст + " ВЫБРАТЬ
				   |	СтрокиТЧ.ФизЛицо,
				   |	СтрокиТЧ.НомерСтроки,
				   |	НАЧАЛОПЕРИОДА(СтрокиТЧ.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
				   |	СтрокиТЧ.ВидПлатежа,
				   |	ВЫБОР КОГДА СтрокиТЧ.ВидПлатежа В (&СписокВидовПлатежей) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПлатежЯвляетсяНалогом,
				   |	СтрокиТЧ.ОПВРасчетыСБюджетом,
   				   |	СтрокиТЧ.ВОСМСРасчетыСФондами,
				   |	СтрокиТЧ.ООСМСРасчетыСФондами,
				   |	СтрокиТЧ.ОПВПодлежитПеречислениюВФонды,
				   |	СтрокиТЧ.ОПВРРасчетыСФондами,
				   |	СтрокиТЧ.СОРасчетыСФондами" + ?(ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ,",
				   |	СтрокиТЧ.ОППВРасчетыСФондами", "") + "
				   |	"+ ВыборкаПоляСЕ +"
				   |
				   |ИЗ
	               |	Документ.ВводНачальныхОстатковПоЗарплате.ВзносыИОтчисления КАК СтрокиТЧ
				   |
				   |	"+ УсловиеСоединения +"
				   |
	               |ГДЕ
	               |	СтрокиТЧ.Ссылка = &ДокументСсылка
	               |УПОРЯДОЧИТЬ ПО
	               |	СтрокиТЧ.НомерСтроки
	               |";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзносыИОтчисления()

// Формирует запрос по табличной части "ОПВПодлежитПеречислению" документа.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоОПВПодлежитПеречислению(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ДатаНачала", ВыборкаПоШапкеДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ФизЛицо,
		|	&ДатаНачала КАК Период
		|ИЗ 
		|	Документ.ВводНачальныхОстатковПоЗарплате.ОПВПодлежитПеречислению
		|ГДЕ 
		|	Ссылка = &ДокументСсылка";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";

	КонецЕсли;

   	ВыборкаПоляСЕ = "";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
		|			ТОГДА СтрокиТЧ.Ссылка.ПодразделениеОрганизации
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВыборкаПоляСЕ = ",
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница	
		|		КОГДА НЕ (СтрокиТЧ.Ссылка.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ТОГДА СтрокиТЧ.Ссылка.СтруктурноеПодразделение
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе 
		ВыборкаПоляСЕ = ",
		|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|				И МестоРаботы.ПодразделениеОрганизации.Владелец = &Организация
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации";	
	Иначе
		ВыборкаПоляСЕ = ВыборкаПоляСЕ + ",		
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";		
	КонецЕсли;

	УсловиеСоединения = "";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями ИЛИ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
	УсловиеСоединения = "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;

	
	Запрос.Текст = МестоРаботыТекст + "ВЫБРАТЬ
				   |	СтрокиТЧ.ФизЛицо,
				   |	СтрокиТЧ.НомерСтроки,
				   |	НАЧАЛОПЕРИОДА(СтрокиТЧ.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
				   |	НАЧАЛОПЕРИОДА(СтрокиТЧ.МесяцВыплатыДоходов, МЕСЯЦ) КАК МесяцВыплатыДоходов,
				   |	СтрокиТЧ.ВидПлатежа,
				   |	СтрокиТЧ.ОПВПодлежитПеречислениюВФонды,
   				   |	СтрокиТЧ.ВОСМСПодлежитПеречислениюВФонды
				   |	"+ ВыборкаПоляСЕ +"
				   |ИЗ
	               |	Документ.ВводНачальныхОстатковПоЗарплате.ОПВПодлежитПеречислению КАК СтрокиТЧ
				   |
				   |	"+ УсловиеСоединения +"
				   |
	               |ГДЕ
	               |	СтрокиТЧ.Ссылка = &ДокументСсылка
	               |УПОРЯДОЧИТЬ ПО
	               |	СтрокиТЧ.НомерСтроки
	               |";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоОПВПодлежитПеречислению()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой вносятся остатки!", Отказ, Заголовок);
	КонецЕсли;
	Если ВыборкаПоШапкеДокумента.НеобходимостьОтраженияВНУ  И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидУчетаНУ) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан реквизит ""Вид учета НУ""!", Отказ, Заголовок);
	КонецЕсли;       	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ЗарплатаИНалоги" документа.
//
Процедура ПроверитьЗаполнениеСтрокиЗарплатаИНалоги(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Зарплата и налоги"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// Период регистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан месяц!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиЗарплатаИНалоги()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ВзносыИОтчисления" документа.
//
Процедура ПроверитьЗаполнениеСтрокиВзносыИОтчисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Взносы и отчисления"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// Период регистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан месяц!", Отказ, Заголовок);
	КонецЕсли;

	// Вид платежа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидПлатежа) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид платежа!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиВзносыИОтчисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОПВПодлежитПеречислению" документа.
//
Процедура ПроверитьЗаполнениеСтрокиОПВПодлежитПеречислению(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Подлежит перечислению (НУ)"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// Период регистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

	// Вид платежа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидПлатежа) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид платежа!", Отказ, Заголовок);
	КонецЕсли;

	// МесяцВыплатыДоходов
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцВыплатыДоходов) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан месяц выплаты доходов!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиОПВПодлежитПеречислению()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ЗарплатаИНалоги);
	МассивТЧ.Добавить(ВзносыИОтчисления);
	МассивТЧ.Добавить(ОПВПодлежитПеречислению);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
		
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);	
	
	//так как документ формируется раздельно от бух.учета, то проводки будем делать, в зависимости от признака "Учитывать КПН"	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураПризнаковРапсределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	СтруктураШапкиДокумента.Вставить("РаспределятьНалогиПоСтруктурнымЕдиницам", 	РаспределятьНалогиПоСтруктурнымЕдиницам);
	СтруктураШапкиДокумента.Вставить("РаспределятьНалогиПоПодразделениямОрганизаций", 			РаспределятьНалогиПоПодразделениямОрганизаций);
	
	ОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Организация, Дата);
	СтруктураШапкиДокумента.Вставить("ОрганизацияЯвляетсяВкладчикомОППВ", ОрганизацияЯвляетсяВкладчикомОППВ);
	
	// Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда

		////////////////////////////////////////////////////////////////////////
		// Зарплата и налоги

		// получим реквизиты табличной части
		ВыборкаПоЗарплатаИНалоги = СформироватьЗапросПоЗарплатаИНалоги(СтруктураШапкиДокумента).Выбрать();

		Пока ВыборкаПоЗарплатаИНалоги.Следующий() Цикл 

			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиЗарплатаИНалоги(СтруктураШапкиДокумента, ВыборкаПоЗарплатаИНалоги, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуЗарплатаИНалоги(СтруктураШапкиДокумента, ВыборкаПоЗарплатаИНалоги, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					ДобавитьСтрокуЗарплатаИНалогиНал(СтруктураШапкиДокумента, ВыборкаПоЗарплатаИНалоги);
				КонецЕсли; 				
					
			КонецЕсли;
		КонецЦикла;

		////////////////////////////////////////////////////////////////////////
		// Взносы и отчисления

		// получим реквизиты табличной части
		ВыборкаПоВзносыИОтчисления = СформироватьЗапросПоВзносыИОтчисления(СтруктураШапкиДокумента).Выбрать();

		Пока ВыборкаПоВзносыИОтчисления.Следующий() Цикл 

			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиВзносыИОтчисления(СтруктураШапкиДокумента, ВыборкаПоВзносыИОтчисления, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВзносыИОтчисления(СтруктураШапкиДокумента, ВыборкаПоВзносыИОтчисления, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					ДобавитьСтрокуВзносыИОтчисленияНал(СтруктураШапкиДокумента, ВыборкаПоВзносыИОтчисления);
				КонецЕсли; 
				
			КонецЕсли;
		КонецЦикла;

		////////////////////////////////////////////////////////////////////////
		// ОПВПодлежитПеречислению
		
		Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			// получим реквизиты табличной части
			ВыборкаПоОПВПодлежитПеречислению = СформироватьЗапросПоОПВПодлежитПеречислению(СтруктураШапкиДокумента).Выбрать();
			
			Пока ВыборкаПоОПВПодлежитПеречислению.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиОПВПодлежитПеречислению(СтруктураШапкиДокумента, ВыборкаПоОПВПодлежитПеречислению, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОПВПодлежитПеречислению(СтруктураШапкиДокумента, ВыборкаПоОПВПодлежитПеречислению, ИсчислениеНалоговСтруктурныхЕдиниц);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  						
	КонецЕсли; 
	     	
	
КонецПроцедуры // ОбработкаПроведения()
   
// Обработчик события "ОбработкаУдаленияПроведения" документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();