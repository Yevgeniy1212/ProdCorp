#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//Процедура ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	фин_ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПараметрыПроведения = Документы.фин_БюджетныйРегламент.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаРегламент, Движения, Отказ,"Регламент",,, "фин_РегламентФормированияБюджетов");	
	
	Движение = Движения.фин_ПрименяемыеРегламентыФормированияБюджетов.Добавить();
	Движение.Период 			= ПараметрыПроведения.Реквизиты[0].Дата;
	Движение.РасширенныйРежим 	= ПараметрыПроведения.Реквизиты[0].РасширенныйРежим;
	Движение.Регламент 			= ПараметрыПроведения.Реквизиты[0].Ссылка;
	Движения.фин_ПрименяемыеРегламентыФормированияБюджетов.Записывать=Истина;
	
	Если ПараметрыПроведения.Реквизиты[0].РасширенныйРежим = Истина Тогда
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаУстановленныеПараметрыКомплекта, Движения, Отказ,"УстановленныеПараметрыКомплекта",,, "фин_УстановленныеКомпонентыКомплектаБюджетов");	
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаПредшествующиеБюджеты, Движения, Отказ,"ПредшествующиеБюджеты",,, "фин_ВзаимосвязиБюджетовПоРегламенту");	
		фин_УправлениеПроведениемДокументовСервер.СформироватьДвиженияПоРегистрам(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаЗначенияПользовательскихПараметровКомплектаБюджетов, Движения, Отказ,"ЗначенияПользовательскихПараметровКомплектаБюджетов",,, "фин_ЗначенияПользовательскихПараметровКомплектаБюджетов");	
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения

//Процедура ПередЗаписью
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка=Истина Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	ПериодичностьРегламента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПериодичностьФормированияБюджетногоРегламента");
	Дата = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Дата,ПериодичностьРегламента);
	
	Если ЭтоНовый() ИЛИ (НЕ Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(Бюджет.Дата) КАК Дата
		               |ИЗ
		               |	Документ.фин_Бюджет КАК Бюджет
		               |ГДЕ
		               |	Бюджет.Проведен
		               |	И Бюджет.Дата > &Дата";
		Запрос.УстановитьПараметр("Дата",?(Дата='00010101',ТекущаяДата(),Дата));
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если Выборка.Дата <> NULL Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Регламент "+Ссылка+" не может быть проведен, так как имеются бюджеты, датированные до "+Строка(Выборка.Дата),,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Проведен И НЕ ДополнительныеСвойства.Свойство("РазрешенаЗапись") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БюджетныйРегламент.Ссылка,
		|	&Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.фин_БюджетныйРегламент КАК БюджетныйРегламент
		|ГДЕ
		|	БюджетныйРегламент.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БюджетныйРегламент.Дата КАК ДатаОкончания,
		|	ВТ_ДанныеДокумента.Дата КАК ДатаНачала
		|ПОМЕСТИТЬ ВТ_Границы
		|ИЗ
		|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.фин_БюджетныйРегламент КАК БюджетныйРегламент
		|		ПО ВТ_ДанныеДокумента.Ссылка <> БюджетныйРегламент.Ссылка
		|			И ВТ_ДанныеДокумента.Дата <= БюджетныйРегламент.Дата
		|			И (БюджетныйРегламент.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Бюджет.Ссылка
		|ИЗ
		|	Документ.фин_Бюджет КАК Бюджет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Границы КАК ВТ_Границы
		|		ПО Бюджет.Дата >= ВТ_Границы.ДатаНачала
		|			И (ВЫБОР
		|				КОГДА НЕ ВТ_Границы.ДатаОкончания ЕСТЬ NULL 
		|					ТОГДА Бюджет.Дата <= ВТ_Границы.ДатаОкончания
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|ГДЕ
		|	Бюджет.Проведен";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Дата",	Дата);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+Ссылка+" не может быть изменен, так как имеются бюджеты, использующие данный регламент!",,,,Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПериодичностьРегламента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПериодичностьФормированияБюджетногоРегламента");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БюджетныйРегламент.Ссылка
	|ИЗ
	|	Документ.фин_БюджетныйРегламент КАК БюджетныйРегламент
	|ГДЕ
	|	БюджетныйРегламент.Ссылка <> &Ссылка
	|	И НАЧАЛОПЕРИОДА(БюджетныйРегламент.Дата, ДЕНЬ) = &Дата";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", 	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Дата,ПериодичностьРегламента));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ "+Ссылка+" не может быть записан, 
		|	так как существуют бюджетные регламенты для указанного периода",ЭтотОбъект,"Дата","Объект",Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
КонецПроцедуры



#КонецЕсли
