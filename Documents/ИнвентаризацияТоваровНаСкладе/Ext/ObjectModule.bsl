////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Организация,
	|   СтруктурноеПодразделение,
	|	Склад
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтроки,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК КоличествоПоУчету,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,					
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК СуммаПоУчету,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерСтроки";
				 
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Инвентаризация товаров на складе", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим данные об организации и складе
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.Организация  	   = СтруктурнаяЕдиницаОрганизация;
	ОбластьМакета.Параметры.ВалютаНаименование = ВалютаПечати.Наименование;
	ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ИтогСуммы        = 0;
	ИтогСуммыПоУчету = 0;

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
		ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего        = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
	ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()


// Формирует табличный документ с формой инвентаризационной описи ИНВ-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ИНВ-4.
//
Функция ПечатьИНВ10() Экспорт
	
    ТабДокумент = Новый ТабличныйДокумент;
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("СекретарьКомиссии", "Секретарь комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
    
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	Номер КАК НомерДокумента,
    |	Дата КАК ДатаДокумента,
    |	Организация,
	|   СтруктурноеПодразделение,
    |	Склад,
    |	Ответственный,
	|	ДатаНачалаИнвентаризации     КАК ДатаНачалаИнвентаризации,
	|	ДатаОкончанияИнвентаризации  КАК ДатаОкончанияИнвентаризации,
	|	ДокументОснованиеВид   КАК ДокументОснованиеВид,
	|	ДокументОснованиеДата  КАК ДокументОснованиеДата,
	|	ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ
	|ИЗ
    |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|
    |ГДЕ
    |	Ссылка = &Ссылка";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//запрос по табличной части Инвентаризационная комиссия
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизЛицо КАК ФизЛицо,
	|	Председатель КАК Председатель,
	|	Секретарь КАК Секретарь
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.ИнвентаризационнаяКомиссия КАК ИнвентаризацияТоваровНаСкладе
	|ГДЕ
	|	Ссылка = &Ссылка";
	
    ТаблицаИнвентаризационнаяКомиссия  = Запрос.Выполнить().Выгрузить();
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК ТоварНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК ФактСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК БухСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СчетУчетаБУ КАК СубСчет,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номер";
				 
	РезультатТовары = Запрос.Выполнить();
	ВыборкаСтрокТовары = РезультатТовары.Выбрать();
	ТаблицаСчетовУчета = РезультатТовары.Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ10";
	
	Макет       = ПолучитьМакет("ИНВ10");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ВидЗапасов				 = СчетУчета.Наименование;
	
	// выведем  данные приказа об инвентаризации
	ОбластьМакета.Параметры.ДокументОснованиеВид        = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеВид),Шапка.ДокументОснованиеВид," приказа(распоряжения) ");
	ДокОснованиеДата 									= Формат(Шапка.ДокументОснованиеДата,"ДФ=""дд ММММ гггг 'года'""");
	ОбластьМакета.Параметры.ДокументОснованиеДата       = ?(ЗначениеЗаполнено(ДокОснованиеДата), ДокОснованиеДата, """____""_______________20____года");
	ОбластьМакета.Параметры.ДокументОснованиеНомер		= ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеНомер), Шапка.ДокументОснованиеНомер, "________");
	ОбластьМакета.Параметры.ДатаНачалаИнвентаризации    = ?(ЗначениеЗаполнено(Шапка.ДатаНачалаИнвентаризации),Формат(Шапка.ДатаНачалаИнвентаризации,"ДФ=""дд ММММ гггг 'года.'"""), """____""_______________20____года.");   
	ОбластьМакета.Параметры.ДатаОкончанияИнвентаризации = ?(ЗначениеЗаполнено(Шапка.ДатаОкончанияИнвентаризации),Формат(Шапка.ДатаОкончанияИнвентаризации,"ДФ=""дд ММММ гггг 'года.'"""), """____""_______________20____года.");
	ОбластьМакета.Параметры.ДатаДок=Формат(Шапка.ДатаДокумента,"ДФ=""дд ММММ гггг 'года.'""");
	
	// заполним МОЛ склада
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
		ОбластьМакета.Параметры.МОЛ = ДанныМОЛ.Представление;
		ОбластьМакета.Параметры.ДолжностьМОЛ = ДанныМОЛ.Должность;
	КонецЕсли;
		
	// определим все счета учета, и запишем в одну строку
	ТаблицаСчетовУчета.Свернуть("СубСчет");
	СписокСчетов = "";
	Для Каждого Счет Из ТаблицаСчетовУчета Цикл
		Если СписокСчетов = "" Тогда
			СписокСчетов = СписокСчетов + Счет.СубСчет;	
		Иначе
			СписокСчетов = СписокСчетов + ", " + Счет.СубСчет;	
		КонецЕсли;	
	КонецЦикла;	
	ОбластьМакета.Параметры.СписокСчетов = СписокСчетов;
		
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	СтрокНаСтранице = 24;
	НомерСтраницы   = 1;
	Ном             = 0;

	ИтогФактКоличество = 0;
	ИтогФактСумма      = 0;
	ИтогБухКоличество  = 0;
	ИтогБухСумма       = 0;
	ИтогФактСуммаВсего = 0;

	КолвоСтрокПоСтранице = 0;
	КолвоПостранице      = 0;
	СуммаЛиста           = 0;
	ИтогоКолво           = 0;
	ИтогоФактСуммаНаВсехСтраницах =0;

	// Выводим заголовок таблицы
	ОбластьМакетаНомерСтроки  = Макет.ПолучитьОбласть("НомерСтраницы");
	ОбластьМакетаПерваяСтрока = Макет.ПолучитьОбласть("ПерваяСтрокаОборотнойСтороны");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.Валюта = мВалютаРегламентированногоУчета;
	ОбластьМакетаНомерСтроки.Параметры.НомерСтраницы = "Оборотная сторона формы Инв-10" + Символы.ПС + "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаНомерСтроки);
	ТабДокумент.Вывести(ОбластьМакетаПерваяСтрока);
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
	ОбластьПустаяСтрока  = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	МассивОбластей = Новый Массив;
	
	МассивОбластей.Добавить(ОбластьМакета);
	МассивОбластей.Добавить(ОбластьИтоговПоСтранице);
	МассивОбластей.Добавить(ОбластьПустаяСтрока);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварНаименование) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
		ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;
			
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, МассивОбластей) Тогда
			
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакетаНомерСтроки.Параметры.НомерСтраницы =  "Оборотная сторона формы Инв-10" + Символы.ПС + "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ОбластьМакетаНомерСтроки);
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
			ИтогФактКоличество = 0;
			ИтогФактСумма      = 0;
			ИтогБухКоличество  = 0;
			ИтогБухСумма       = 0;
			
			КолвоСтрокПоСтранице = 0;
			КолвоПостранице      = 0;
			СуммаЛиста           = 0;
			
			Ном = 1; 			
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
		ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
		ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
		ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
		ИтогоФактСуммаНаВсехСтраницах = ИтогоФактСуммаНаВсехСтраницах + ВыборкаСтрокТовары.ФактСумма;
		
		ИтогФактСуммаВсего = ИтогФактСуммаВсего + ВыборкаСтрокТовары.БухСумма; 
		ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
      	
		КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
		КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
		СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;
		
	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги документа
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьИтоговПоСтранице);
	МассивОбластей.Добавить(ОбластьМакета);
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, МассивОбластей) Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьМакета.Параметры.НомерСтраницы = "Оборотная сторона формы Инв-10" + Символы.ПС + "Страница " + (НомерСтраницы + 1); 
	КонецЕсли;
	
	ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ОбщегоНазначения.КоличествоПрописью(ИтогоКолво);
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью     = СтрЗаменить(ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0"), "00", "");
	ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоФактСуммаНаВсехСтраницах, мВалютаРегламентированногоУчета);
	
	ОбластьМакета.Параметры.Валюта = мВалютаРегламентированногоУчета;
	
	ТабДокумент.Вывести(ОбластьМакета);
    	
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, ПредседательКомиссии.ФизЛицо, Шапка.ДатаДокумента);
			
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.ДолжностьКомиссии = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.ФИОКомиссии       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.ДолжностьКомиссии = "";
		ОбластьМакета.Параметры.ФИОКомиссии       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подпись секретаря инвентаризационной комиссии
	СекретарьКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Секретарь");
	
	Если НЕ (СекретарьКомиссии = Неопределено) Тогда
		
		ДанныеСекретаря = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, СекретарьКомиссии.ФизЛицо, Шапка.ДатаДокумента);
			
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ЗаголовокРазделаКомиссии.СекретарьКомиссии;
		ОбластьМакета.Параметры.ДолжностьКомиссии = ДанныеСекретаря.Должность;
		ОбластьМакета.Параметры.ФИОКомиссии       = ДанныеСекретаря.Представление;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
		
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если (НЕ Строка.Председатель) И (НЕ Строка.Секретарь) Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Шапка.Организация, СписокЧленовКомиссии, Шапка.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
		                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   "");
		ОбластьМакета.Параметры.ДолжностьКомиссии = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.ФИОКомиссии       = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 3 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		Для Итератор = (ДанныеЧленовКомиссии.Количество() + 1) По 3 Цикл
			
			ОбластьМакета.Параметры.ЗаголовокКомиссии = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаКомиссии.ЧленыКомиссии,
														   "");
			ОбластьМакета.Параметры.ДолжностьКомиссии = "";
			ОбластьМакета.Параметры.ФИОКомиссии = "";
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	
	КонецЕсли;
	
	//выводим подвал
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
	ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
	ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ10()


// Формирует табличный документ с формой сличительаной ведомости ИНВ-14
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ИНВ-14.
//
Функция ПечатьИНВ18() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", ЭтотОбъект.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер  КАК НомерДокумента,
	|	Дата   КАК ДатаДокумента,
	|	ДатаНачалаИнвентаризации    КАК ДатаНачалаИнвентаризации,
	|	ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ДокументОснованиеВид        КАК ДокументОснованиеВид,
	|	ДокументОснованиеДата       КАК ДокументОснованиеДата,
	|	ДокументОснованиеНомер      КАК ДокументОснованиеНомер,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Склад,
	| 	ОтветственныеЛицаСклад.ФизическоеЛицо КАК МОЛ	
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСклад
	|		ПО ИнвентаризацияТоваровНаСкладе.Склад = ОтветственныеЛицаСклад.СтруктурнаяЕдиница
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	//запрос по табличной части  Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Ссылка);
	Запрос.Текст  = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	                |	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Коэффициент,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                |	ВЫРАЗИТЬ(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(250)) КАК ТоварНаименование,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК ФактСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК БухСумма,
	                |	ИнвентаризацияТоваровНаСкладеТовары.Цена
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номер";
				 
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ18";
	Макет       = ПолучитьМакет("ИНВ18");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	
	// выведем  данные приказа об инвентаризации
	ОбластьМакета.Параметры.ДокументОснованиеВид        = ?(ЗначениеЗаполнено(Шапка.ДокументОснованиеВид),Шапка.ДокументОснованиеВид," приказа(распоряжения) ");
	ДокОснованиеДата 									= Формат(Шапка.ДокументОснованиеДата,"ДФ=""дд ММММ гггг ' года'""");
	ОбластьМакета.Параметры.ДокументОснованиеДата       = ?(ЗначениеЗаполнено(ДокОснованиеДата), ДокОснованиеДата, """____""_______________20__года");
 	ОбластьМакета.Параметры.ДатаДок=Формат(Шапка.ДатаДокумента,"ДФ=""дд ММММ гггг ' года.'""");

	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);

	ФИОМОЛ = "";
	ДолжностьМОЛ = "";
	
	// определим МОЛ склада
	Если ЗначениеЗаполнено(Шапка.Склад) Тогда
		ДанныеМОЛ	 = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.МОЛ, Шапка.ДатаДокумента);
		ФИОМОЛ	 	 = ДанныеМОЛ.Представление;
		ДолжностьМОЛ = ДанныеМОЛ.Должность;
	КонецЕсли;	
	
	ОбластьМакета.Параметры.МОЛ = ФИОМОЛ;
	ОбластьМакета.Параметры.ДолжностьМОЛ = ДолжностьМОЛ;
		
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 19;
	СтрокШапки      = 5;
	СтрокПодвала    = 5;
	НомерСтраницы   = 1;
	Ном             = 0;

	ИтогоРезультатИзлишекКолво   = 0;
	ИтогоРезультатИзлишекСумма   = 0;
	ИтогоРезультатНедостачаКолво = 0;
	ИтогоРезультатНедостачаСумма = 0;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Оборотная сторона формы Инв-18" + Символы.ПС + "Страница " + НомерСтраницы; 
	ЗаголовокТаблицы.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы");
	
	МассивОбластей = Новый Массив;
	МассивОбластей.Добавить(ОбластьМакета);
	МассивОбластей.Добавить(ОбластьИтоговПоСтранице);
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.

		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, МассивОбластей) Тогда	
			
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Оборотная сторона формы Инв-18" + Символы.ПС + "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);

		Разница     = 0;
		РазницаСумм = 0;

		Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
		РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
		Если Разница = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Разница < 0 Тогда
			ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
			ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСумм;
			ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
			ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

			ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
			ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСумм);
			ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + 0;
			ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + 0;
		Иначе
			ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
			ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
			ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
			ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСумм;

			ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + 0;
			ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + 0;
			ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
			ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСумм;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		Ном = Ном + 1;

	КонецЦикла;

	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоТаблицы");
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	МассивОбластей.Очистить();
	МассивОбластей.Добавить(ОбластьМакета);
	
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, МассивОбластей) Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выведем подпись бухгалтера
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ФИОБухгалтера = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.МОЛ = ФИОМОЛ;
	ОбластьМакета.Параметры.ДолжностьМОЛ = ДолжностьМОЛ;
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // Печать()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

 // Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ведомость" тогда
		ТабДокумент = ПечатьДокумента();

	ИначеЕсли ИмяМакета = "ИНВ10" тогда
		ТабДокумент = ПечатьИНВ10();
		
	ИначеЕсли ИмяМакета = "ИНВ18" тогда
		ТабДокумент = ПечатьИНВ18();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость,ИНВ10,ИНВ18","Инвентаризация товаров на складе","ИНВ-10 (Инвентаризационная опись запасов)","ИНВ-18 (Сличительная ведомость)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладе() Экспорт

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("КонецПериода",    Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ВидСубконто",     ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	Запрос.УстановитьПараметр("ПорядокСубконто", ПорядокСубконто);
	Запрос.УстановитьПараметр("ПустойСклад",     Справочники.Склады.ПустаяСсылка());
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение В (&СтруктурноеПодразделение)";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
		УсловиеСчетУчета = " И Счет = &СчетУчета";
	Иначе
		УсловиеСчетУчета = "";
	Конецесли;
	
		
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ТекстЗапросаИнвентаризация = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ТиповойОстатки.Субконто2         КАК Склад,
		|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество,
		|	0   							 КАК СуммаПартии,
		|	0								 КАК КоличествоПартии
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет = &СчетУчета,
		|											&ПорядокСубконто,
		|											Организация В (&Организация) И Субконто2 В (&Склад) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	&ПустойСклад			         КАК Склад,
		|	0							     КАК Сумма,
		|	0 								 КАК Количество,
		|	ТиповойОстатки.СуммаОстаток      КАК СуммаПартии,
		|	ТиповойОстатки.КоличествоОстаток КАК КоличествоПартии
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет = &СчетУчета,
		|											&ПорядокСубконто,
		|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
		|
		//|УПОРЯДОЧИТЬ ПО
		//|	ТиповойОстатки.Счет.Порядок
		|";
	Иначе
		ТекстЗапросаИнвентаризация = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ТиповойОстатки.Субконто2         КАК Склад,
		|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество,
		|	0   							 КАК СуммаПартии,
		|	0								 КАК КоличествоПартии
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|														Типовой.Ссылка
		|													ИЗ
		|														ПланСчетов.Типовой КАК Типовой
		|													ГДЕ
		|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
		|											&ПорядокСубконто,
		|											Организация В (&Организация) И Субконто2 В (&Склад) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	&ПустойСклад			         КАК Склад,
		|	0							     КАК Сумма,
		|	0 								 КАК Количество,
		|	ТиповойОстатки.СуммаОстаток      КАК СуммаПартии,
		|	ТиповойОстатки.КоличествоОстаток КАК КоличествоПартии
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|														Типовой.Ссылка
		|													ИЗ
		|														ПланСчетов.Типовой КАК Типовой
		|													ГДЕ
		|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
		|											&ПорядокСубконто,
		|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + ") КАК ТиповойОстатки
		|
		//|УПОРЯДОЧИТЬ ПО
		//|	ТиповойОстатки.Счет.Порядок
		|";
	КонецЕсли;	
	
	Запрос.Текст =ТекстЗапросаИнвентаризация;

	ТаблицаОстатков   = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Свернуть("Счет,Номенклатура,БазоваяЕдиницаИзмерения","Сумма,Количество,СуммаПартии,КоличествоПартии");
	
	СчетаССуммовымУчетомпоСкладам = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		
		Если СтрокаТаблицы.Количество = NULL Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаТаблицы.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СчетаССуммовымУчетомпоСкладам.Получить(СтрокаТаблицы.Счет) = Неопределено Тогда
			
			СчетаССуммовымУчетомпоСкладам.Вставить(СтрокаТаблицы.Счет,УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.Счет));
			
		КонецЕсли;
		
		ВедетсяСуммовойУчет = СчетаССуммовымУчетомпоСкладам.Получить(СтрокаТаблицы.Счет);
		
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = СтрокаТаблицы.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = СтрокаТаблицы.Счет;
		СтрокаТабличнойЧасти.Количество       = СтрокаТаблицы.Количество;
		СтрокаТабличнойЧасти.КоличествоУчет   = СтрокаТаблицы.Количество;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		
		Если ВедетсяСуммовойУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет        = СтрокаТаблицы.Сумма;
			СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
			СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
				СтрокаТабличнойЧасти.СуммаУчет        = ОКР(СтрокаТаблицы.СуммаПартии/СтрокаТаблицы.КоличествоПартии*СтрокаТаблицы.Количество,2,1);
				СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			Иначе
				СтрокаТабличнойЧасти.СуммаУчет        = СтрокаТаблицы.Сумма;
				СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамОрганизации() Экспорт

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("КонецПериода",    Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ВидСубконто",     ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение В (&СтруктурноеПодразделение) ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
		УсловиеСчетУчета = " И Счет = &СчетУчета";
	Иначе
		УсловиеСчетУчета = "";
	Конецесли;
	
	Если СкладыДляОтбора.Количество()=0 тогда 
		Условиесклад = "";
	иначе
		условиесклад = " и субконто2 в(&МассивСкладов) "
	КонецЕсли;
	запрос.УстановитьПараметр("МассивСкладов",СкладыДляОтбора.Выгрузить().ВыгрузитьКолонку("Склад"));
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ТекстЗапросаИнвентаризация = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет в иерархии( &СчетУчета),
		|											,
		|											Организация В (&Организация) " +  УсловиеСтруктурноеПодразделение + Условиесклад+") КАК ТиповойОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТиповойОстатки.Счет.Порядок";
	Иначе
		
		ТекстЗапросаИнвентаризация = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет              КАК Счет,
		|	ТиповойОстатки.Субконто1         КАК Номенклатура,
		|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
		|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
		|	ТиповойОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
		|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|														Типовой.Ссылка
		|													ИЗ
		|														ПланСчетов.Типовой КАК Типовой
		|													ГДЕ
		|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
		|											,
		|											Организация В (&Организация) " +  УсловиеСтруктурноеПодразделение + Условиесклад+") КАК ТиповойОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТиповойОстатки.Счет.Порядок";
	КонецЕсли;	
	Запрос.Текст = ТекстЗапросаИнвентаризация;

	Выборка   = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СчетУчетаБУ      = Выборка.Счет;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоУчет   = СтрокаТабличнойЧасти.Количество;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;

		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		СтрокаТабличнойЧасти.Сумма            = СтрокаТабличнойЧасти.СуммаУчет;
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоОстаткамОрганизации()

Процедура ЗаполнитьПоОстаткам() Экспорт
	Если ВидОперации = Перечисления.ВидыОперацийИнвентаризация.ПоСкладу ТОгда
		ЗаполнитьПоОстаткамНаСкладе();
	Иначе
		ЗаполнитьПоОстаткамОрганизации();
	КонецЕсли;
Конецпроцедуры // ЗаполнитьПоОстаткам()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличества() Экспорт

	# Если Клиент Тогда

		Если Товары.Количество() > 0 Тогда
			ТекстВопроса = "Перезаполнить учетные количества и суммы?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли;

		// Документ должен быть записан, чтобы этот запрос сработал.
		Если Модифицированность() Тогда

			ТекстВопроса = "Перед заполнением следует записать документ.
			               |Продолжить?";

			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);

			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;

			Записать(РежимЗаписиДокумента.Запись);

		КонецЕсли;

	#КонецЕсли

	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",           		Склад);
	Запрос.УстановитьПараметр("КонецПериода",    		Дата);
	Запрос.УстановитьПараметр("Организация",     		Организация);
	Запрос.УстановитьПараметр("ВидСубконто",     		ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Запрос.УстановитьПараметр("ПорядокСубконто", 		ПорядокСубконто);
	Запрос.УстановитьПараметр("ПустойСклад"    , 		Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДокументСсылка",  		Ссылка);
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение В (&СтруктурноеПодразделение) ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	ТекстЗапросаИнвентаризацияПоСкладу = "
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет              КАК Счет,
	|	ТиповойОстатки.Субконто1         КАК Номенклатура,
	|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ТиповойОстатки.Субконто2         КАК Склад,
	|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
	|	ТиповойОстатки.КоличествоОстаток КАК Количество,
	|	0							     КАК СуммаПартии,
	|	0 								 КАК КоличествоПартии
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
	|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|														Типовой.Ссылка
	|													ИЗ
	|														ПланСчетов.Типовой КАК Типовой
	|													ГДЕ
	|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
	|											&ПорядокСубконто,
	|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + " И Субконто2 В (&Склад) И
	|											Субконто1 В (ВЫБРАТЬ
	|															Номенклатура 
	|														ИЗ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары
	|														ГДЕ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
	|											) КАК ТиповойОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет              КАК Счет,
	|	ТиповойОстатки.Субконто1         КАК Номенклатура,
	|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	&ПустойСклад         			 КАК Склад,
	|	0      							 КАК Сумма,
	|	0		 						 КАК Количество,
	|	ТиповойОстатки.СуммаОстаток      КАК СуммаПартии,
	|	ТиповойОстатки.КоличествоОстаток КАК КоличествоПартии
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
	|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|														Типовой.Ссылка
	|													ИЗ
	|														ПланСчетов.Типовой КАК Типовой
	|													ГДЕ
	|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконто ),
	|											&ПорядокСубконто,
	|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + " И
	|											Субконто1 В (ВЫБРАТЬ
	|															Номенклатура 
	|														ИЗ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары
	|														ГДЕ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
	|											) КАК ТиповойОстатки";
	Если СкладыДляОтбора.Количество()=0 тогда 
		Условиесклад = "";
	иначе
		условиесклад = " и субконто2 в(&МассивСкладов) "
	КонецЕсли;
	
	ТекстЗапросаИнвентаризацияПоОрганизации = "
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет              КАК Счет,
	|	ТиповойОстатки.Субконто1         КАК Номенклатура,
	|	ТиповойОстатки.Субконто1.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	&ПустойСклад					 КАК Склад,
	|	ТиповойОстатки.СуммаОстаток      КАК Сумма,
	|	ТиповойОстатки.КоличествоОстаток КАК Количество,
	|	0							     КАК СуммаПартии,
	|	0 								 КАК КоличествоПартии
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&КонецПериода,
	|											Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|														Типовой.Ссылка
	|													ИЗ
	|														ПланСчетов.Типовой КАК Типовой
	|													ГДЕ
	|														Типовой.ВидыСубконто.ВидСубконто = &ВидСубконтоНоменклатура),
	|											,
	|											Организация В (&Организация) " + УсловиеСтруктурноеПодразделение + Условиесклад+" И
	|											Субконто1 В (ВЫБРАТЬ
	|															Номенклатура 
	|														ИЗ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары
	|														ГДЕ 
	|															Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
	|											) КАК ТиповойОстатки";
	
	Если ВидОперации = Перечисления.ВидыОперацийИнвентаризация.ПоСкладу Тогда
		Запрос.Текст = ТекстЗапросаИнвентаризацияПоСкладу;
	Иначе
		запрос.УстановитьПараметр("МассивСкладов",СкладыДляОтбора.Выгрузить().ВыгрузитьКолонку("Склад"));		
		Запрос.Текст = ТекстЗапросаИнвентаризацияПоОрганизации;
	КонецЕсли; 
	
	ТаблицаОстатков   = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Свернуть("Счет,Номенклатура,БазоваяЕдиницаИзмерения","Сумма,Количество,СуммаПартии,КоличествоПартии");

	Для Каждого СтрокаТабличнойЧасти ИЗ Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Счет", СтрокаТабличнойЧасти.СчетУчетаБУ);
		
		ТаблицаСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		Если НЕ (ТаблицаСтрок.Количество()>0) Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КоличествоУчет = ТаблицаСтрок[0].Количество;
		Если ТаблицаСтрок[0].Сумма = 0 Тогда
			СтрокаТабличнойЧасти.СуммаУчет      = ОКР(ТаблицаСтрок[0].СуммаПартии/ТаблицаСтрок[0].КоличествоПартии*ТаблицаСтрок[0].Количество,2,1);
		Иначе
			СтрокаТабличнойЧасти.СуммаУчет      = ТаблицаСтрок[0].Сумма;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПерезаполнитьУчетныеКоличества()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();