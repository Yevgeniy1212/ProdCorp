//Процедура ЗаполнитьСуммыДокумента
//
Процедура ЗаполнитьСуммыДокумента() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Количество,
	               |	ВЫБОР
	               |		КОГДА Товары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
	               |			ТОГДА Товары.Ссылка.МестоПоставки
	               |		ИНАЧЕ Товары.МестоПоставки
	               |	КОНЕЦ КАК МестоПоставки,
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Документ.гз_ИсполнениеЗаказаПодразделения.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	МестоПоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Количество КАК Количество,
	               |	ВТ_Товары.МестоПоставки,
	               |	ВТ_Товары.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) <= 0
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) = ВТ_Товары.Количество
	               |			ТОГДА ЕСТЬNULL(Остатки.СуммаОстаток, 0)
	               |		ИНАЧЕ ЕСТЬNULL(Остатки.СуммаОстаток, 0) / ЕСТЬNULL(Остатки.КоличествоОстаток, 0) * ВТ_Товары.Количество
	               |	КОНЕЦ КАК Сумма,
	               |	ВТ_Товары.НомерСтроки
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ТРУНераспределенные.Остатки(
	               |				&МоментВремени,
	               |				Организация = &Организация
	               |					И (Номенклатура, МестоПоставки) В
	               |						(ВЫБРАТЬ
	               |							ВТ_Товары.Номенклатура,
	               |							ВТ_Товары.МестоПоставки
	               |						ИЗ
	               |							ВТ_Товары)) КАК Остатки
	               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
	               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки";
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
	РезультатЗапроса = Запрос.Выполнить();
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры //ЗаполнитьСуммыДокумента

//Процедура ЗаполнитьСуммыИКоличествоДокумента
//
Процедура ЗаполнитьСуммыИКоличествоДокумента() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Товары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
	               |			ТОГДА Товары.Ссылка.МестоПоставки
	               |		ИНАЧЕ Товары.МестоПоставки
	               |	КОНЕЦ КАК МестоПоставки,
	               |	Товары.Номенклатура,
	               |	Товары.НомерСтроки
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	Документ.гз_ИсполнениеЗаказаПодразделения.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.МестоПоставки,
	               |	ВТ_Товары.Номенклатура,
	               |	ВТ_Товары.НомерСтроки,
	               |	Остатки.КоличествоОстаток КАК Количество,
	               |	Остатки.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ТРУНераспределенные.Остатки(
	               |				&МоментВремени,
	               |				Организация = &Организация
	               |					И (Номенклатура, МестоПоставки) В
	               |						(ВЫБРАТЬ
	               |							ВТ_Товары.Номенклатура,
	               |							ВТ_Товары.МестоПоставки
	               |						ИЗ
	               |							ВТ_Товары)) КАК Остатки
	               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
	               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки";
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
	РезультатЗапроса = Запрос.Выполнить();
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры //ЗаполнитьСуммыИКоличествоДокумента

//Процедура ЗаполнитьПоОстаткам
//
Процедура ЗаполнитьПоОстаткам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Остатки.КоличествоОстаток КАК Количество,
	               |	Остатки.СуммаОстаток КАК Сумма,
	               |	Остатки.МестоПоставки,
	               |	Остатки.Номенклатура
	               |ИЗ
	               |	РегистрНакопления.гз_ТРУНераспределенные.Остатки(
	               |			&МоментВремени,
	               |			Организация = &Организация
	               |				И МестоПоставки = &МестоПоставки) КАК Остатки";
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("МестоПоставки",	МестоПоставки);
	Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
	РезультатЗапроса = Запрос.Выполнить();
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры //ЗаполнитьПоОстаткам

//Процедура ЗаполнитьНеисполненными
//
Процедура ЗаполнитьНеисполненными() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Неисполненные.КоличествоОстаток КАК Количество,
	               |	Неисполненные.МестоПоставки КАК МестоПоставки,
	               |	Неисполненные.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	РегистрНакопления.гз_НеисполненныеПозицииЗаказов.Остатки(
	               |			&МоментВремени,
	               |			Организация = &Организация
	               |				И Подразделение = &Подразделение
	               |				И Год = &Год) КАК Неисполненные
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	МестоПоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Товары.Количество КАК Количество,
	               |	ВТ_Товары.МестоПоставки,
	               |	ВТ_Товары.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) <= 0
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) = ВТ_Товары.Количество
	               |			ТОГДА ЕСТЬNULL(Остатки.СуммаОстаток, 0)
	               |		ИНАЧЕ ЕСТЬNULL(Остатки.СуммаОстаток, 0) / ЕСТЬNULL(Остатки.КоличествоОстаток, 0) * ВТ_Товары.Количество
	               |	КОНЕЦ КАК Сумма
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ТРУНераспределенные.Остатки(
	               |				&МоментВремени,
	               |				Организация = &Организация
	               |					И (Номенклатура, МестоПоставки) В
	               |						(ВЫБРАТЬ
	               |							ВТ_Товары.Номенклатура,
	               |							ВТ_Товары.МестоПоставки
	               |						ИЗ
	               |							ВТ_Товары)) КАК Остатки
	               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
	               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки";
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Подразделение",	ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
	Запрос.УстановитьПараметр("Год",			Год);
	РезультатЗапроса = Запрос.Выполнить();
	Товары.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры //ЗаполнитьНеисполненными

//Процедура ЗаполнитьПоДокументуОснования
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") Тогда
		// Заполнение шапки
		РесурсЗаполнения = "Количество";
		Год 						= Основание.Год;
		МестоПоставки 				= Основание.МестоПоставки;
		Организация 				= Основание.Организация;
		ПодразделениеОрганизации 	= Основание.ПодразделениеОрганизации;
		ДокументОснование 			= Основание;
		ЗаказПодразделения			= Основание;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Товары.Количество,
		               |	ВЫБОР
		               |		КОГДА Товары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		               |			ТОГДА Товары.Ссылка.МестоПоставки
		               |		ИНАЧЕ Товары.МестоПоставки
		               |	КОНЕЦ КАК МестоПоставки,
		               |	Товары.Номенклатура КАК Номенклатура,
		               |	Товары.НомерСтроки
		               |ПОМЕСТИТЬ ВТ_Товары
		               |ИЗ
		               |	Документ.гз_ЗаказПодразделения.СоставЗаявкиТовары КАК Товары
		               |ГДЕ
		               |	Товары.Ссылка = &Ссылка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	МестоПоставки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Товары.Количество КАК Количество,
		               |	ВТ_Товары.МестоПоставки,
		               |	ВТ_Товары.Номенклатура,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) <= 0
		               |			ТОГДА 0
		               |		КОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0) = ВТ_Товары.Количество
		               |			ТОГДА ЕСТЬNULL(Остатки.СуммаОстаток, 0)
		               |		ИНАЧЕ ЕСТЬNULL(Остатки.СуммаОстаток, 0) / ЕСТЬNULL(Остатки.КоличествоОстаток, 0) * ВТ_Товары.Количество
		               |	КОНЕЦ КАК Сумма,
		               |	ВТ_Товары.НомерСтроки
		               |ИЗ
		               |	ВТ_Товары КАК ВТ_Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ТРУНераспределенные.Остатки(
		               |				&МоментВремени,
		               |				Организация = &Организация
		               |					И (Номенклатура, МестоПоставки) В
		               |						(ВЫБРАТЬ
		               |							ВТ_Товары.Номенклатура,
		               |							ВТ_Товары.МестоПоставки
		               |						ИЗ
		               |							ВТ_Товары)) КАК Остатки
		               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
		               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки";
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("Ссылка",			ЗаказПодразделения);
		Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
		РезультатЗапроса = Запрос.Выполнить();
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		СуммаДокумента = Товары.Итог("Сумма");
		
		
		//Для Каждого ТекСтрокаСоставЗаявкиТовары Из Основание.СоставЗаявкиТовары Цикл
		//	НоваяСтрока = Товары.Добавить();
		//	НоваяСтрока.Количество = ТекСтрокаСоставЗаявкиТовары[РесурсЗаполнения];
		//	НоваяСтрока.МестоПоставки = ТекСтрокаСоставЗаявкиТовары.МестоПоставки;
		//	НоваяСтрока.Номенклатура = ТекСтрокаСоставЗаявкиТовары.Номенклатура;
		//КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупок") Тогда
		// Заполнение шапки
		Год = Основание.Год;
		МестоПоставки = Основание.МестоПоставки;
		Организация = Основание.Организация;
		СуммаДокумента = Основание.СуммаДокумента;
		ДокументОснование 			= Основание;
		
		Товары.Очистить();
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.МестоПоставки = ТекСтрокаТовары.МестоПоставки;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьПоДокументуОснования

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ ДОКУМЕНТА

#Если Клиент Тогда
	
	
	// Функция формирует табличный документ с печатной формой Заказ,
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма документа
	//
	Функция ПечатьЗаказа()
			
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИсполнениеЗаказаПодразделения.Организация,
		|	ИсполнениеЗаказаПодразделения.ПодразделениеОрганизации,
		|	ИсполнениеЗаказаПодразделения.Дата,
		|	ИсполнениеЗаказаПодразделения.Номер,
		|	ИсполнениеЗаказаПодразделения.МестоПоставки,
		|	ИсполнениеЗаказаПодразделения.Ответственный
		|Из
		|	Документ.гз_ИсполнениеЗаказаПодразделения КАК ИсполнениеЗаказаПодразделения
		|ГДЕ
		|	ИсполнениеЗаказаПодразделения.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.НомерСтроки,
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.Количество,
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.МестоПоставки,
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.Сумма,
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.Номенклатура
		|ИЗ
		|	Документ.гз_ИсполнениеЗаказаПодразделения.Товары КАК гз_ЗаказПодразделенияСоставЗаявкиТовары
		|ГДЕ
		|	гз_ЗаказПодразделенияСоставЗаявкиТовары.Ссылка = &Ссылка";
		
		РезЗапросаСписка = Запрос.Выполнить().Выбрать();
		
		РезультатЗапросаПоНоменклатуре = Запрос.Выполнить().Выгрузить();
		РезультатЗапросаПоНоменклатуре.Свернуть("Номенклатура");
		МассивНоменклатуры = РезультатЗапросаПоНоменклатуре.ВыгрузитьКолонку("Номенклатура");
		
		ЗапросВидаНоменклатуры = Новый Запрос;
		ЗапросВидаНоменклатуры.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		ЗапросВидаНоменклатуры.Текст =		 "ВЫБРАТЬ
							   |	гз_СвойстваНоменклатуры.Номенклатура
							   |ИЗ
							   |	РегистрСведений.гз_СвойстваНоменклатуры КАК гз_СвойстваНоменклатуры
							   |ГДЕ
							   |	гз_СвойстваНоменклатуры.Номенклатура В(&МассивНоменклатуры)
							   |	И гз_СвойстваНоменклатуры.Работа";
		Результат = ЗапросВидаНоменклатуры.Выполнить().Выгрузить();
			
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЗаявкиНаПланированиеГосЗакупок";
		Макет       = ПолучитьМакет("Заказ");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Исполнение заказа подразделения", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Подразделение = СокрЛП(Док.ПодразделениеОрганизации);
		ОбластьМакета.Параметры.Год = Формат(Год,"ДФ=гггг");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);      
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьГруппировки = Макет.ПолучитьОбласть("СтрокаГруппировки");
		Сумма = 0;	
		НомСтр = 1;
		ТабДокумент.НачатьАвтогруппировкуСтрок();
		Пока РезЗапросаСписка.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(РезЗапросаСписка);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(РезЗапросаСписка.Номенклатура.Наименование);
			ОбластьМакета.Параметры.Ед = РезЗапросаСписка.Номенклатура.БазоваяЕдиницаИзмерения;
			
			Если Результат.Найти(РезЗапросаСписка.Номенклатура, "Номенклатура")<>Неопределено Тогда 
				ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Работа			  
			ИначеЕсли РезЗапросаСписка.Номенклатура.Услуга Тогда  
				ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Услуга			 
			Иначе 
				ОбластьМакета.Параметры.ВидНоменклатуры = Перечисления.гз_ВидыПредметовЗакупки.Товар			 
			КонецЕсли;
			
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = РезЗапросаСписка.Номенклатура.Код;
			КонецЕсли;   
			
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета, 0);
		КонецЦикла;
		
		ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
			
	КонецФункции //ПечатьЗаявки()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;
		
		Если НЕ гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;	
		
		Если ИмяМакета = "ИсполнениеЗаказов" Тогда
			ТабДокумент = ПечатьЗаказа();
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
		КонецЕсли;
		
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
		
	КонецПроцедуры // Печать()
	
	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
	// Функция формирует бухгалтерские документы
	//
	Функция ОформитьПоступлениеБУ(Документ,Вид=Неопределено,Склад = Неопределено) Экспорт
		
		//Возврат гз_ПроцедурыОперативногоУчетаЗакупок.ОформитьПоступлениеБУ(мВалютаРегламентированногоУчета,
		//												ВедениеУчетаЗакупокВРазрезеСкладов,Документ);
														
	КонецФункции //ОформитьПоступлениеБУ()
	
#КонецЕсли


// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИсполнениеЗаказов","Исполнение заказа");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицу(РезультатЗапроса, СтруктураШапкиДокумента)
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПодготовитьТаблицу()

// Процедура выполняет движения по регистрам 
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаТовары,  Отказ)
	УчетИсполненияЗаказов = Константы.гз_ВестиУчетИсполненияЗаказовПодразделений.Получить();
	РезервированиеПозицийПоГП = Константы.гз_РезервироватьПозицииГодовогоПланаПриПодачеЗаказов.Получить();
	
	Если УчетИсполненияЗаказов Тогда
		
		Запрос = Новый Запрос;
		МенеждерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеждерВТ;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(Товары.Количество) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА Товары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		               |			ТОГДА Товары.Ссылка.МестоПоставки
		               |		ИНАЧЕ Товары.МестоПоставки
		               |	КОНЕЦ КАК МестоПоставки,
		               |	Товары.Номенклатура,
		               |	СУММА(Товары.Сумма) КАК Сумма
		               |ПОМЕСТИТЬ ВТ_Товары
		               |ИЗ
		               |	Документ.гз_ИсполнениеЗаказаПодразделения.Товары КАК Товары
		               |ГДЕ
		               |	Товары.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Товары.Номенклатура,
		               |	ВЫБОР
		               |		КОГДА Товары.МестоПоставки = ЗНАЧЕНИЕ(Справочник.гз_МестаПоставки.ПустаяСсылка)
		               |			ТОГДА Товары.Ссылка.МестоПоставки
		               |		ИНАЧЕ Товары.МестоПоставки
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Товары.Номенклатура КАК Номенклатура,
		               |	ВТ_Товары.МестоПоставки КАК МестоПоставки,
		               |	ВТ_Товары.Количество,
		               |	ВТ_Товары.Сумма,
		               |	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		               |	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
		               |ИЗ
		               |	ВТ_Товары КАК ВТ_Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_ТРУНераспределенные.Остатки(
		               |				&МоментВремени,
		               |				Организация = &Организация
		               |					И (МестоПоставки, Номенклатура) В
		               |						(ВЫБРАТЬ
		               |							ВТ_Товары.МестоПоставки,
		               |							ВТ_Товары.Номенклатура
		               |						ИЗ
		               |							ВТ_Товары)) КАК Остатки
		               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
		               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки";
		Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
		Запрос.УстановитьПараметр("Ссылка",		СтруктураШапкиДокумента.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекстСообщения = "";
		
		Пока Выборка.Следующий() Цикл 
			
			Если Выборка.КоличествоОстаток < Выборка.Количество Тогда 
				
				Отказ = Истина;
				ТекстСообщения = ТекстСообщения + "  Номенклатура """+Выборка.Номенклатура+""", место поставки """+Выборка.МестоПоставки+""": нехватка по позиции "+Строка(Выборка.Количество-Выборка.КоличествоОстаток)+Символы.ПС;
				
			Иначе
				
				// проверка суммы
				
				// проверка суммового остатка
				Если (Выборка.КоличествоОстаток = Выборка.Количество) И (Выборка.СуммаОстаток > Выборка.Сумма) Тогда
					
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + "  Номенклатура """+Выборка.Номенклатура+""", место поставки """+Выборка.МестоПоставки+""": имеется суммовой остаток "+Строка(Выборка.СуммаОстаток-Выборка.Сумма)+" KZT"+Символы.ПС;
					
				КонецЕсли;	
				
				Если (Выборка.КоличествоОстаток > Выборка.Количество) И (Выборка.СуммаОстаток = Выборка.Сумма) Тогда
					
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + "  Номенклатура """+Выборка.Номенклатура+""", место поставки """+Выборка.МестоПоставки+""": имеется количественный остаток "+Строка(Выборка.КоличествоОстаток-Выборка.Количество)+" при нулевом остатке по сумме"+Символы.ПС;
					
				КонецЕсли;	
				
				Если Выборка.СуммаОстаток < Выборка.Сумма Тогда
					
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + "  Номенклатура """+Выборка.Номенклатура+""", место поставки """+Выборка.МестоПоставки+""": сумма превышена на "+Строка(Выборка.Сумма-Выборка.СуммаОстаток)+" KZT"+Символы.ПС;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда 
			Сообщить("Невозможно провести документ "+Ссылка+Символы.ПС+ТекстСообщения);
			Возврат;
		КонецЕсли;
				
		// Движения по РН Неисполненные позиции заказов подразделений
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Товары.МестоПоставки,
		               |	ВТ_Товары.Номенклатура,
		               |	&Период КАК Период,
		               |	Остатки.Организация,
		               |	Остатки.Год,
		               |	Остатки.Подразделение,
		               |	ВЫБОР
		               |		КОГДА ВТ_Товары.Количество > ЕСТЬNULL(Остатки.КоличествоОстаток, 0)
		               |			ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток, 0)
		               |		ИНАЧЕ ВТ_Товары.Количество
		               |	КОНЕЦ КАК Количество,
		               |	&Заказ КАК ЗаказПодразделения,
		               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
		               |ИЗ
		               |	ВТ_Товары КАК ВТ_Товары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.гз_НеисполненныеПозицииЗаказов.Остатки(&МоментВремени, ЗаказПодразделения = &Заказ) КАК Остатки
		               |		ПО ВТ_Товары.Номенклатура = Остатки.Номенклатура
		               |			И ВТ_Товары.МестоПоставки = Остатки.МестоПоставки
		               |ГДЕ
		               |	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) > 0";
		Запрос.УстановитьПараметр("Ссылка",			Ссылка);
		Запрос.УстановитьПараметр("Заказ",			ЗаказПодразделения);
		Запрос.УстановитьПараметр("Период",			Дата);
		Запрос.УстановитьПараметр("МоментВремени",	МоментВремени());
		Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("Год",			Год);
		Запрос.УстановитьПараметр("Подразделение",	ПодразделениеОрганизации);
		Движения.гз_НеисполненныеПозицииЗаказов.Очистить();
		Движения.гз_НеисполненныеПозицииЗаказов.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	Для Каждого ТекСтр Из ТаблицаТовары Цикл
		// движения по фактическому поступлению
		Движение = Движения.гз_ИсполнениеЗаказовПодразделений.Добавить();
		Движение.Регистратор 			= Ссылка;
		Движение.Период 				= СтруктураШапкиДокумента.Дата;
		Движение.Год					= СтруктураШапкиДокумента.Год;
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
		Движение.Подразделение			= СтруктураШапкиДокумента.ПодразделениеОрганизации;
		Движение.МестоПоставки			= ?(ТекСтр.МестоПоставки.Пустая(),СтруктураШапкиДокумента.МестоПоставки,ТекСтр.МестоПоставки);
		Движение.Количество  			= ТекСтр.Количество;
		Движение.Номенклатура 			= ТекСтр.Номенклатура;
		Движение.Сумма					= ТекСтр.Сумма;
		
		Если УчетИсполненияЗаказов Тогда
			Движение = Движения.гз_ТРУНераспределенные.ДобавитьРасход();
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.Организация 	= СтруктураШапкиДокумента.Организация;
			Движение.МестоПоставки	= ?(ТекСтр.МестоПоставки.Пустая(),СтруктураШапкиДокумента.МестоПоставки,ТекСтр.МестоПоставки);
			Движение.Количество  	= ТекСтр.Количество;
			Движение.Номенклатура 	= ТекСтр.Номенклатура;
			Движение.Сумма			= ТекСтр.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если УчетИсполненияЗаказов Тогда
		
		Если (НЕ ЗаказПодразделения.Пустая()) И РезервированиеПозицийПоГП Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ИсполнениеЗаказаПодразделенияТовары.Номенклатура КАК Номенклатура,
			               |	СУММА(гз_ИсполнениеЗаказаПодразделенияТовары.Количество) КАК Количество
			               |ПОМЕСТИТЬ ВТ_Товары
			               |ИЗ
			               |	Документ.гз_ИсполнениеЗаказаПодразделения.Товары КАК гз_ИсполнениеЗаказаПодразделенияТовары
			               |ГДЕ
			               |	гз_ИсполнениеЗаказаПодразделенияТовары.Ссылка = &Ссылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	гз_ИсполнениеЗаказаПодразделенияТовары.Номенклатура
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура,
			               |	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток,
			               |	ЕСТЬNULL(ВТ_Товары.Количество, 0) КАК Количество
			               |ИЗ
			               |	РегистрНакопления.гз_РезервированиеПозицийГодовогоПлана.Остатки(
			               |			&Момент,
			               |			Заказ = &Заказ
			               |				И Номенклатура В
			               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |						ВТ_Товары.Номенклатура
			               |					ИЗ
			               |						ВТ_Товары)) КАК гз_РезервированиеПозицийГодовогоПланаОстатки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
			               |		ПО гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура = ВТ_Товары.Номенклатура
			               |ГДЕ
			               |	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток > 0";
			Запрос.УстановитьПараметр("Заказ",	ЗаказПодразделения);
			Запрос.УстановитьПараметр("Момент",	МоментВремени());
			Запрос.УстановитьПараметр("Ссылка",	СтруктураШапкиДокумента.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				
				Движение = Движения.гз_РезервированиеПозицийГодовогоПлана.ДобавитьРасход();
				Движение.Период 		= Дата;
				Движение.Организация 	= СтруктураШапкиДокумента.Организация;
				Движение.Заказ			= ЗаказПодразделения;
				Движение.Количество  	= Мин(Выборка.КоличествоОстаток,Выборка.Количество);
				Движение.Номенклатура 	= Выборка.Номенклатура;
				
			КонецЦикла;
		
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры //ДвиженияПоРегистрам()

// Процедура проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаТовары, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура,Количество,Сумма");	
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ПодразделениеОрганизации,Год");
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Если шапка заполнена некорректно, то договор создавать не будем, а проводки выполнять - тем более
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок,	ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	// таблица Товары
	СтруктураПолей = Новый Структура;
	Для Каждого Реквизит Из Ссылка.Метаданные().ТабличныеЧасти.Товары.Реквизиты Цикл
		Имя = Реквизит.Имя;
		СтруктураПолей.Вставить(Имя, Имя);
	КонецЦикла; 
	РезультатЗапросаПоТоварам = гз_ПроцедурыОперативногоУчетаЗакупок.мСформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаТовары = ПодготовитьТаблицу(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаТовары, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаТовары,  Отказ);
	
КонецПроцедуры //ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры //ОбработкаУдаленияПроведения()

// процедура-обработчик заполнения документа
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ЗаказПодразделения") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ПоступлениеТоваровРаботУслугПоДоговорамГосударственныхЗакупок") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗаполнения

// процедура-обработчик события ПередЗаписью
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма");
КонецПроцедуры //ПередЗаписью
