Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем ПартионныйУчетБУ;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Формирует печатную форму реестра к платежному поручению
//
// Параметры:
//  нет
//
Функция ПечатьРеестра(ВидРеестра) 
	
	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата<ДатаПрекращенияВыводаРНН;

	Макет = ПолучитьМакет("Реестр");
	ОбластьШапки   			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкиТаблицы  	= Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ВыводитьРНН, "", "_ИИН"));
	ОбластьСтроки  			= Макет.ПолучитьОбласть("СтрокаРаботника" + ?(ВыводитьРНН, "", "_ИИН"));
	Если ВыводитьРНН Тогда
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи");
	Иначе 
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал|Подписи_ИИН");
	КонецЕсли;
	
	ОбластьПодвалаИтог		= Макет.ПолучитьОбласть("Подвал|Итог");
    	
	ЗапросПоШапкеДокумента = Новый Запрос();
	ЗапросПоШапкеДокумента.Текст = "ВЫБРАТЬ
	                               |	АвансовыйОтчет.Организация.Наименование КАК НазваниеОрганизации,
	                               |	АвансовыйОтчет.Организация.КБЕ КАК КБЕОрганизации,
	                               |	АвансовыйОтчет.Дата,
	                               |	АвансовыйОтчет.Организация,
								   |	АвансовыйОтчет.СтруктурноеПодразделение
								   |ИЗ
	                               |	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	                               |ГДЕ
	                               |	АвансовыйОтчет.Ссылка = &ПарамСсылка"  ;
	ЗапросПоШапкеДокумента.УстановитьПараметр("ПарамСсылка", Ссылка);
	
	// получим данные для печати
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДокумента.Выполнить().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.СтруктурноеПодразделение);
	СведенияОбОрганизации 	 = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапкеДокумента.Дата, , );
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
    	
	ОбластьШапки.Параметры.НазваниеОрганизации = ПредставлениеОрганизации;
			
	ЗапросПоРаботникам = Новый Запрос();
	Если ВидРеестра = "ПеречислениеСоциальныхОтчислений" Тогда
		ТекстЗапросаПоРаботникам =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                            |	СОПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	                            |	СОПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
	                            |	СОПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
	                            |	СОПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
	                            |	СОПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
	                            |	ВЫБОР
	                            |		КОГДА СОПеречислениеВФонды.Сумма ЕСТЬ NULL 
	                            |			ТОГДА 0
	                            |		ИНАЧЕ СОПеречислениеВФонды.Сумма
	                            |	КОНЕЦ КАК Сумма,
	                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
	                            |	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
	                            |	СОПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
	                            |	СОПеречислениеВФонды.ВидОперации КАК ВидОперации
	                            |ИЗ
	                            |	(ВЫБРАТЬ
	                            |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
	                            |		СОПеречислениеВФондыСоциальныеОтчисления.ПериодРегистрации КАК ПериодРегистрации,
	                            |		СОПеречислениеВФондыСоциальныеОтчисления.ВидОперации КАК ВидОперации,
	                            |		СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) КАК Сумма
	                            |	ИЗ
	                            |		(ВЫБРАТЬ
	                            |			НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
								|			ВЫБОР
								|				КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
								|					ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо
								|				ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо
								|			КОНЕЦ КАК ФизЛицо,
								|			СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ВидОперации КАК ВидОперации,
	                            |			СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма
	                            |		ИЗ
	                            |			Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	                            |		ГДЕ
	                            |			СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В
	                            |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                            |						АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.Ссылка
	                            |					ИЗ
	                            |						Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	                            |					ГДЕ
	                            |						АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка = &ПарамСсылка)) КАК СОПеречислениеВФондыСоциальныеОтчисления
	                            |	
	                            |	СГРУППИРОВАТЬ ПО
	                            |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо,
	                            |		СОПеречислениеВФондыСоциальныеОтчисления.ПериодРегистрации,
								|		СОПеречислениеВФондыСоциальныеОтчисления.ВидОперации) КАК СОПеречислениеВФонды
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	                            |		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
	                            |		ПО (ФИОФизЛиц.ФизЛицо = СОПеречислениеВФонды.ФизЛицо)
	                            |
	                            |УПОРЯДОЧИТЬ ПО
	                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
	                            |	СОПеречислениеВФонды.ПериодРегистрации
	                            |ИТОГИ ПО
	                            |	ВидОперации";
								
	Иначе
		ТекстЗапросаПоРаботникам =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                            |	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
		                            |	ОПВПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
		                            |	ОПВПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
		                            |	ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
		                            |	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
		                            |	ВЫБОР
		                            |		КОГДА ОПВПеречислениеВФонды.Сумма ЕСТЬ NULL 
		                            |			ТОГДА 0
		                            |		ИНАЧЕ ОПВПеречислениеВФонды.Сумма
		                            |	КОНЕЦ КАК Сумма,
		                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
		                            |	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
		                            |	ОПВПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации,
		                            |	ОПВПеречислениеВФонды.ВидОперации КАК ВидОперации
		                            |ИЗ
		                            |	(ВЫБРАТЬ
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодРегистрации,
		                            |		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма,
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ВидОперации КАК ВидОперации
		                            |	ИЗ
		                            |		(ВЫБРАТЬ
		                            |			НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
		                            |			ВЫБОР
		                            |				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		                            |					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
		                            |				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
		                            |			КОНЕЦ КАК ФизЛицо,
		                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
		                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ВидОперации КАК ВидОперации
		                            |		ИЗ
		                            |			Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
		                            |		ГДЕ
		                            |			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В
		                            |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		                            |						АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.Ссылка
		                            |					ИЗ
		                            |						Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
		                            |					ГДЕ
		                            |						АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка = &ПарамСсылка)) КАК ОПВПеречислениеВФондыПенсионныеВзносы
		                            |	
		                            |	СГРУППИРОВАТЬ ПО
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо,
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации,
		                            |		ОПВПеречислениеВФондыПенсионныеВзносы.ВидОперации) КАК ОПВПеречислениеВФонды
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
		                            |		ПО (ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
		                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		                            |		ПО (ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
		                            |
		                            |УПОРЯДОЧИТЬ ПО
		                            |	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
		                            |	ОПВПеречислениеВФонды.ПериодРегистрации
		                            |ИТОГИ ПО
		                            |	ВидОперации";
	КонецЕсли;
		
	ЗапросПоРаботникам.Текст = ТекстЗапросаПоРаботникам;
	ЗапросПоРаботникам.УстановитьПараметр("ПарамСсылка", Ссылка);
	ЗапросПоРаботникам.УстановитьПараметр("ПарамДата", Дата);
	
	ВыборкаПоВидуВзносов = ЗапросПоРаботникам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВидуВзносов.Следующий() Цикл
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьСтроки);
		
		ОбластьШапки.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		
		Если ВидРеестра = "ПеречислениеПенсионныхВзносов" Тогда
			Если ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных пенсионных взносов";
			ИначеЕсли ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных пенсионных взносов работодателя";
			Иначе
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных профессиональных пенсионных взносов";
			КонецЕсли;
		Иначе
			Если ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				ОбластьШапки.Параметры.Наименование = "Список на перечисление обязательных социальных отчислений";
			ИначеЕсли ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				ОбластьШапки.Параметры.Наименование = "Список на перечисление взносов обязательного социального медицинского страхования";
			ИначеЕсли ВыборкаПоВидуВзносов.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
				ОбластьШапки.Параметры.Наименование = "Список на перечисление отчислений обязательного социального медицинского страхования";
			КонецЕсли; 
		КонецЕсли;
		
		ТекстРНН_БИН  = "";
	    
		ОбластьШапки.Параметры.ОрганизацияРНН_БИН		= ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоШапкеДокумента.Дата, Ложь, ТекстРНН_БИН);
		ОбластьШапки.Параметры.ТекстРНН_БИН	 			= ТекстРНН_БИН;
                         		
		ТабДокумент.Вывести(ОбластьШапки);
		
		ТабДокумент.Вывести(ОбластьШапкиТаблицы);

		// по работникам
		ВыборкаПоРаботникам = ВыборкаПоВидуВзносов.Выбрать();
		
		// подсчитываем количество строк документа - для корректного разбиения на страницы
		ВсегоСтрокДокумента = ВыборкаПоРаботникам.Количество();
		
		НомерСтроки = 1; СуммаИтого = 0;
		Пока ВыборкаПоРаботникам.Следующий() Цикл
			Если ВыборкаПоРаботникам.Сумма <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаПоРаботникам);
			ОбластьСтроки.Параметры.НомерСтроки   = НомерСтроки;
			ОбластьСтроки.Параметры.ПериодПлатежа = ВыборкаПоРаботникам.ПериодРегистрации;
			ОбластьСтроки.Параметры.РНН_ИИН		  = ?(ВыводитьРНН, ВыборкаПоРаботникам.РНН, ВыборкаПоРаботникам.ИИН);
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста и НомерСтроки = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьПодвала);
				ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьШапки);
				ТабДокумент.Вывести(ОбластьШапкиТаблицы);			
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьСтроки);
			СуммаИтого  = СуммаИтого + ВыборкаПоРаботникам.Сумма;
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		// подвал
		
		ОбластьПодвалаИтог.Параметры.СуммаИтого	 = Формат(СуммаИтого, "ЧЦ=10; ЧДЦ=2; ЧРД=,");
		ОбластьПодвала.Параметры.КоличествоСтрок = ВсегоСтрокДокумента;
		ОбластьПодвала.Параметры.СуммаПрописью   = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
		
		ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Организация, Дата, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
		ОбластьПодвала.Параметры.Руководитель = ОтветЛица.Руководитель;
		ОбластьПодвала.Параметры.ГлавныйБухгалтер = ?(ПустаяСтрока(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов), "Не предусмотрен", ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
		
		ТабДокумент.Вывести(ОбластьПодвала);
		ТабДокумент.Присоединить(ОбластьПодвалаИтог);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЦикла;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьРеестра()
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()

		Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата    КАК ДатаДокумента,
	|	ФизЛицо КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|   Ответственный,
	|	СтруктурноеПодразделение,
	|	Организация.Ссылка    КАК Организация,
	|	СчетРасчетовСПодотчетнымЛицом,
	|	НазначениеАванса      КАК НазначениеАванса,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	НДСВключенВСтоимость,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента.Представление КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента,	
	|	КоличествоДокументов КАК КоличествоДокументовВПриложении,
	|	КоличествоЛистов КАК КоличествоЛистовВПриложении,
	|	ДатаНачалаОтчетногоПериода,	
	|	ДатаОкончанияОтчетногоПериода,	
	|	ВыданныеАвансы.(
	|		Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Авансы = Шапка.ВыданныеАвансы.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_Т3";

	Макет = ПолучитьМакет("Т3");

	// ТИТУЛЬНЫЙ ЛИСТ
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("СчетРасчета", 		  	  Шапка.СчетРасчетовСПодотчетнымЛицом);
	Запрос.УстановитьПараметр("Сотрудник", 	 			  Шапка.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация",			  Шапка.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Шапка.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ДатаИтогов", 			  ЭтотОбъект.МоментВремени());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ТиповойОстатки.СуммаОстатокДт,
	|	ТиповойОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаИтогов, Счет = &СчетРасчета, ,
	|	                                        Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение И Субконто1 = &Сотрудник) КАК ТиповойОстатки";
	ПредыдущийАванс = Запрос.Выполнить().Выбрать();
	ПредыдущийАванс.Следующий();
	
	Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
	Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
	ДанныеВал  = ОбщегоНазначения.ПолучитьКурсВалюты(ЭтотОбъект.ВалютаДокумента, ЭтотОбъект.Дата);

	СуммаДоДокумента = 0;

	Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
		Перерасход = 0;
	Иначе
		СуммаДоДокумента = - Число(Перерасход);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Остаток) Тогда
		Остаток = 0;
	Иначе
		СуммаДоДокумента = Число(Остаток);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", ЭтотОбъект.ВыданныеАвансы.ВыгрузитьКолонку("Документ"));
	Запрос.УстановитьПараметр("ФизЛицо", ЭтотОбъект.ФизЛицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	РасходныйКассовыйОрдер.ВалютаДокумента,
	|	РасходныйКассовыйОрдер.Дата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Организация,
	|	РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель,
	|	РасходныйКассовыйОрдер.ВалютаДокумента,
	|	РасходныйКассовыйОрдер.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПеречислениеВПодотчет.СуммаПлатежа),
	|	ПеречислениеВПодотчет.Ссылка,
	|	ПеречислениеВПодотчет.Ссылка.Организация,
	|	ПеречислениеВПодотчет.Ссылка.СтруктурноеПодразделениеОтправитель,
	|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента,
	|	ПеречислениеВПодотчет.Ссылка.Дата
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
	|ГДЕ
	|	ПеречислениеВПодотчет.Ссылка В(&МассивДокументов)
	|	И ПеречислениеВПодотчет.ФизЛицо = &ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеречислениеВПодотчет.Ссылка,
	|	ПеречислениеВПодотчет.Ссылка.Организация,
	|	ПеречислениеВПодотчет.Ссылка.СтруктурноеПодразделениеОтправитель,
	|	ПеречислениеВПодотчет.Ссылка.ВалютаДокумента,
	|	ПеречислениеВПодотчет.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(АвизоПоПрочимОперациямКорреспонденции.Сумма),
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка,
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка.Организация,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяССылка),
	|	АвизоПоПрочимОперациямКорреспонденции.Валюта,
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка.Дата
	|ИЗ
	|	Документ.АвизоПоПрочимОперациям.Корреспонденции КАК АвизоПоПрочимОперациямКорреспонденции
	|ГДЕ
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка В(&МассивДокументов)
	|	И АвизоПоПрочимОперациямКорреспонденции.СубконтоБУ1 = &ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка,
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка.Организация,
	|	АвизоПоПрочимОперациямКорреспонденции.Ссылка.Дата,
	|	АвизоПоПрочимОперациямКорреспонденции.Валюта";
	
	Таб = Запрос.Выполнить().Выгрузить();
	Таб.Свернуть("Ссылка, Организация, СтруктурноеПодразделение, ВалютаДокумента, Дата", "СуммаДокумента");
	
	Для Каждого СтрокаТаблицы Из Таб Цикл
		ТекКурсДока = ОбщегоНазначения.КурсДокумента(СтрокаТаблицы.Ссылка, мВалютаРегламентированногоУчета);
		ТекКратДока = ОбщегоНазначения.КратностьДокумента(СтрокаТаблицы.Ссылка, мВалютаРегламентированногоУчета);
		СтрокаТаблицы.СуммаДокумента = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаДокумента, СтрокаТаблицы.ВалютаДокумента, мВалютаРегламентированногоУчета, ТекКурсДока, 1, ТекКратДока, 1);
	КонецЦикла;
	
	ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	КурсДока = ОбщегоНазначения.КурсДокумента(ЭтотОбъект.Ссылка, мВалютаРегламентированногоУчета);
	КратДока = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект.Ссылка, мВалютаРегламентированногоУчета);
    КурсоваяРазница = 0;
	
	Если НЕ (ЭтотОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		ЗапросПоПроводкам.УстановитьПараметр("КурсоваяРазница", Справочники.Доходы.КурсовыеРазницы);
		ЗапросПоПроводкам.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойДвиженияССубконто.СубконтоДт1 = &КурсоваяРазница
		|				ТОГДА ТиповойДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДт,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойДвиженияССубконто.СубконтоКт1 = &КурсоваяРазница
		|				ТОГДА ТиповойДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
		|";
		
		ВыборкаКР = ЗапросПоПроводкам.Выполнить().Выгрузить();
		КурсоваяРазница = ВыборкаКР.Итог("СуммаДт") - ВыборкаКР.Итог("СуммаКт");
	    ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
	КонецЕсли;

	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы;
	
	ДанныеПодотчетногоЛица = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
		
	ПодотчетноеЛицо = ДанныеПодотчетногоЛица.Представление;
	ТабельныйНомер  = ДанныеПодотчетногоЛица.ТабельныйНомер;
	Должность       = ДанныеПодотчетногоЛица.Должность;

	Если НЕ Шапка.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
		Подразделение = Шапка.СтруктурноеПодразделение;
	Иначе
		Если мОтображатьСтруктурныеПодразделения Тогда
			Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Иначе			
			Подразделение = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов);
	
	// Выводим титульный лист авансового отчета
	
	ОбластьТитул1 = Макет.ПолучитьОбласть("Титул1");
	ОбластьТитул1.Параметры.Заполнить(Шапка);
	
	ОбластьТитул1.Параметры.ПредставлениеПодотчетногоЛица          = ПодотчетноеЛицо;
	ОбластьТитул1.Параметры.ДолжностьПодотчетногоЛицаПредставление = Должность;
	ОбластьТитул1.Параметры.ТабельныйНомерПодотчетногоЛица         = ТабельныйНомер;
	ОбластьТитул1.Параметры.НомерДокумента                         = НомерДокумента;
	ОбластьТитул1.Параметры.ПолученоИзКассы                        = ПолученоИзКассы;
	
	
	Если СуммаДоДокумента >= 0 тогда
		ОбластьТитул1.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьТитул1.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;

	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
    ОбластьТитул1.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
	ОбластьТитул1.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
	Руководитель = Руководители.Руководитель;
		
	ГлавныйБухгалтер    = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), "Не предусмотрен", Руководители.ГлавныйБухгалтер);
	
	ОбластьТитул1.Параметры.РасшифровкаПодписи = Руководители.Руководитель;
	
	ОбластьТитул1.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
	
	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ЗапросПоПроводкам.Текст = "ВЫБРАТЬ
	                          |	Типовой.СчетДт,
	                          |	Типовой.СчетКт,
	                          |	СУММА(Типовой.Сумма) КАК Сумма,
	                          |	МИНИМУМ(Типовой.НомерСтроки) КАК НомерСтроки
	                          |ИЗ
	                          |	РегистрБухгалтерии.Типовой КАК Типовой
	                          |ГДЕ
	                          |	Типовой.Регистратор = &Ссылка
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	Типовой.СчетДт,
	                          |	Типовой.СчетКт
	                          |
	                          |УПОРЯДОЧИТЬ ПО
	                          |	МИНИМУМ(Типовой.НомерСтроки) УБЫВ";
	ТаблицаПроводок = ЗапросПоПроводкам.Выполнить().Выгрузить();

	Для Шаг = 1 По 3 Цикл
		
		ОчиститьСтрокуПоСчетам(ОбластьТитул1, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
		ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьТитул1, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
		
	КонецЦикла;

	ТабДокумент.Вывести(ОбластьТитул1);
	
	ОбластьИсточникАванса = Макет.ПолучитьОбласть("СтрокаИсточникАванса");
	НомерИсточника = 0;
	
	Если Таб.Количество() = 0 Тогда
		
		Для Шаг = 1 По 2 Цикл
			ОбластьИсточникАванса.Параметры.ИсточникАванса = "" + Шаг + ".";
			ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			ТабДокумент.Вывести(ОбластьИсточникАванса);
		КонецЦикла;

	Иначе
		
		Для каждого СтрокаДетали Из Таб Цикл
			ИсточникАванса = "";
			НомерИсточника = НомерИсточника + 1;
			СтруктурЕдиницаОрганизация_ = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(СтрокаДетали.Организация, СтрокаДетали.СтруктурноеПодразделение);
			СведенияОбОрганизации_     = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурЕдиницаОрганизация_, СтрокаДетали.Дата);
			ИсточникАванса = СведенияОбОрганизации_.Представление;
			ОбластьИсточникАванса.Параметры.ИсточникАванса = Строка(НомерИсточника) + ". " + ИсточникАванса + ", " + Формат(СтрокаДетали.Дата, "ДЛФ=Д");
			ОбластьИсточникАванса.Параметры.СуммаДеталь = СтрокаДетали.СуммаДокумента;
			
			ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
			
			ТабДокумент.Вывести(ОбластьИсточникАванса);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Таб.Количество() = 1 Тогда
		ОбластьИсточникАванса.Параметры.ИсточникАванса = "2.";
		ОбластьИсточникАванса.Параметры.СуммаДеталь    = "";
		
		ОчиститьСтрокуПоСчетам(ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
		ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьИсточникАванса, "СубСчетДебет4", "СубСчетКредит4", "Сумма4");
		
		ТабДокумент.Вывести(ОбластьИсточникАванса);
	КонецЕсли;
	
	ОбластьТитул2 = Макет.ПолучитьОбласть("Титул2");
	ОбластьТитул2.Параметры.Заполнить(Шапка);
	
    ОбластьТитул2.Параметры.ПредставлениеГлавногоБухгалтера = ГлавныйБухгалтер;
	ДанныеОФизЛицеОтветственный = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Шапка.Организация, Шапка.Ответственный.ФизЛицо, Шапка.ДатаДокумента);
	
	Если ГлавныйБухгалтер = Шапка.Ответственный Тогда
		ОбластьТитул2.Параметры.Бухгалтер = "Не предусмотрен";
	Иначе	
		ОбластьТитул2.Параметры.Бухгалтер = ?(НЕ ЗначениеЗаполнено(ДанныеОФизЛицеОтветственный.Представление), Шапка.Ответственный, ДанныеОФизЛицеОтветственный.Представление);
	КонецЕсли;
	
	//ОбластьТитул2.Параметры.ПредставлениеБухгалтера = 
	
	Для Шаг = 5 По 8 Цикл
		ОчиститьСтрокуПоСчетам(ОбластьТитул2, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
		ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьТитул2, "СубСчетДебет"  + (Шаг), "СубСчетКредит" + (Шаг), "Сумма" + (Шаг));
	КонецЦикла;
	
	ЗапросТовары = Новый Запрос();
	ЗапросТовары.УстановитьПараметр("ВалютаРеглУчета"           , мВалютаРегламентированногоУчета);
	ЗапросТовары.УстановитьПараметр("ТекущийДокумент"           , ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("СчетЗарПлаты"              , ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда);
	//ЗапросТовары.УстановитьПараметр("СчетДепонированнойЗарПлаты", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате);
	ЗапросТовары.УстановитьПараметр("СчетДепонированнойЗарПлаты", ПланыСчетов.Типовой.ПустаяСсылка());
	ЗапросТовары.УстановитьПараметр("СчетПоИЛ"                  , ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам);
	ЗапросТовары.УстановитьПараметр("ПустойСчет"                , ПланыСчетов.Типовой.ПустаяСсылка());
	
	СчетОПВ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
	Если НЕ ЗначениеЗаполнено(СчетОПВ) Тогда
		СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
	КонецЕсли;
	ЗапросТовары.УстановитьПараметр("СчетОПВ", СчетОПВ);
	
	СчетСО = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
	Если НЕ ЗначениеЗаполнено(СчетСО) Тогда
		СчетСО = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
	КонецЕсли;
	
	ЗапросТовары.УстановитьПараметр("СчетСО", СчетСО);
	
	ЗапросТовары.Текст = 
	
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате) КАК СуммаКВыплате
	|ПОМЕСТИТЬ ЗарплатаКВыплате
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				АвансовыйОтчет.Ведомость
	|			ИЗ
	|				Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
	|			ГДЕ
	|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК ID,
	|	АвансовыйОтчет.НомерСтроки КАК НомерСтроки,
	|	0 КАК ПорядокДляСортировки,
	|	АвансовыйОтчет.НомерВходящегоДокумента КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента КАК ДокументДата,
	|	АвансовыйОтчет.ВидВходящегоДокумента КАК НаименованиеРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ) КАК ПоОтчету,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.Сумма
	|		КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			ИНАЧЕ АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ) КАК СуммаНДС,
	|	АвансовыйОтчет.СчетУчетаБУ КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС КАК СчетНДС,
	|	АвансовыйОтчет.Поставщик.Наименование КАК Поставщик,
	|	АвансовыйОтчет.Номенклатура.Наименование КАК Содержание
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ВидВходящегоДокумента,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Поставщик.Наименование,
	|	АвансовыйОтчет.Номенклатура.Наименование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидВходящегоДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.СуммаВзаиморасчетов
	|		КОНЕЦ),
	|	0,
	|	ВЫБОР
	|		КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|				И НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код + ""("" + АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код + "")""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	АвансовыйОтчет.Контрагент.Наименование,
	|	АвансовыйОтчет.Содержание
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ВидВходящегоДокумента,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|				И НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код + ""("" + АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код + "")""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|				КОГДА НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Контрагент.Наименование,
	|	АвансовыйОтчет.Содержание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.Ведомость.Номер,
	|	АвансовыйОтчет.Ведомость.Дата,
	|	""Платежная ведомость"",
	|	СУММА(ЗарплатаКВыплате.Сумма),
	|	0,
	|	0,
	|	&СчетЗарПлаты,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	""Выплата заработной платы""
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО АвансовыйОтчет.Ведомость = ЗарплатаКВыплате.Ссылка
	|			И (ЗарплатаКВыплате.Сумма <> 0)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Ведомость.Номер,
	|	АвансовыйОтчет.Ведомость.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.Ведомость.Номер,
	|	АвансовыйОтчет.Ведомость.Дата,
	|	""Платежная ведомость"",
	|	СУММА(ЗарплатаКВыплате.ДепонированнаяСумма),
	|	0,
	|	0,
	|	&СчетДепонированнойЗарПлаты,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	""Выплата деп. заработной платы""
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО АвансовыйОтчет.Ведомость = ЗарплатаКВыплате.Ссылка
	|			И (ЗарплатаКВыплате.ДепонированнаяСумма <> 0)
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Ведомость.Номер,
	|	АвансовыйОтчет.Ведомость.Дата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	0,
	|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
	|	""Почтовый перевод"",
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов),
	|	0,
	|	0,
	|	&СчетПоИЛ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИЛПеречислениеПолучателям.Получатель.Наименование,
	|	ИЛПеречислениеПолучателям.ДокументОснование.ВидИсполнительногоДокумента + "" "" + ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.РеквизитыИсполнительногоДокумента, 1, 1000)
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|ГДЕ
	|	ИЛПеречислениеПолучателям.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				АвансовыйОтчет.Документ
	|			ИЗ
	|				Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчет
	|			ГДЕ
	|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.Получатель.Наименование,
	|	ИЛПеречислениеПолучателям.ДокументОснование.ВидИсполнительногоДокумента + "" "" + ПОДСТРОКА(ИЛПеречислениеПолучателям.ДокументОснование.РеквизитыИсполнительногоДокумента, 1, 1000)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	4,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	1,
	|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ИЛПеречислениеПолучателям.ДокументОснование.ВидРасчетаПочтовыйСбор.Наименование, ""Почтовый сбор""),
	|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов),
	|	0,
	|	0,
	|	&СчетПоИЛ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИЛПеречислениеПолучателям.Получатель.Наименование,
	|	""""
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|ГДЕ
	|	ИЛПеречислениеПолучателям.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				АвансовыйОтчет.Документ
	|			ИЗ
	|				Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчет
	|			ГДЕ
	|				АвансовыйОтчет.Ссылка = &ТекущийДокумент)
	|	И ИЛПеречислениеПолучателям.СуммаСборов <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.НомерВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.ДатаВходящегоДокумента,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.Получатель.Наименование,
	|	ЕСТЬNULL(ИЛПеречислениеПолучателям.ДокументОснование.ВидРасчетаПочтовыйСбор.Наименование, ""Почтовый сбор"")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	5,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.Документ.Номер,
	|	АвансовыйОтчет.Документ.Дата,
	|	""ОПВ перечисление в фонды"",
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	0,
	|	&СчетОПВ,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
	|			ТОГДА ""Перечисление пенсионных взносов работодателя""
	|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
	|			ТОГДА ""Перечисление профессиональных пенсионных взносов""
	|		ИНАЧЕ ""Перечисление пенсионных взносов""
	|	КОНЕЦ
	|ИЗ
	|	Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Документ,
	|	АвансовыйОтчет.Документ.Номер,
	|	АвансовыйОтчет.Документ.Дата,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
	|			ТОГДА ""Перечисление пенсионных взносов работодателя""
	|		КОГДА АвансовыйОтчет.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
	|			ТОГДА ""Перечисление профессиональных пенсионных взносов""
	|		ИНАЧЕ ""Перечисление пенсионных взносов""
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	6,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.Документ.Номер,
	|	АвансовыйОтчет.Документ.Дата,
	|	""СО перечисление в фонды"",
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	0,
	|	&СчетСО,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	""Перечисление социальных отчислений""
	|ИЗ
	|	Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Документ,
	|	АвансовыйОтчет.Документ.Номер,
	|	АвансовыйОтчет.Документ.Дата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	7,
	|	АвансовыйОтчет.НомерСтроки,
	|	0,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.ВидВходящегоДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА АвансовыйОтчет.Сумма
	|			ИНАЧЕ АвансовыйОтчет.Сумма * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчет.Сумма
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
	|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Суточные)
	|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)
	|				ТОГДА АвансовыйОтчет.СуммаНДС
	|			КОГДА АвансовыйОтчет.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета
	|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.Суточные)
	|					И АвансовыйОтчет.ВидЗадолженностиПодотчетногоЛица <> ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы)
	|				ТОГДА АвансовыйОтчет.СуммаНДС * (АвансовыйОтчет.Ссылка.КурсДокумента / АвансовыйОтчет.Ссылка.КратностьДокумента)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	АвансовыйОтчет.СчетЗатратБУ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.Поставщик.Наименование,
	|	АвансовыйОтчет.Содержание
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.ВидВходящегоДокумента,
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	АвансовыйОтчет.СчетЗатратБУ,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	АвансовыйОтчет.НомерСтроки,
	|	АвансовыйОтчет.Поставщик.Наименование,
	|	АвансовыйОтчет.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки,
	|	ПорядокДляСортировки";
	
	РезультатЗапроса = ЗапросТовары.Выполнить();
	Товар = РезультатЗапроса.Выбрать();
    ТаблицыДокумента = РезультатЗапроса.Выгрузить();
	Израсходованно = ТаблицыДокумента.Итог("ПоОтчету") + ?(Шапка.СуммаВключаетНДС, 0, ТаблицыДокумента.Итог("СуммаНДС"));
	
	ДляРасчета     = Израсходованно;
 	ОстатокНаКонец = СуммаДоДокумента + ПолученоИзКассы - Израсходованно;
	
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьТитул2.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьТитул2.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	ОбластьТитул2.Параметры.Израсходовано 		= Израсходованно;
	ОбластьТитул2.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ДляРасчета, мВалютаРегламентированногоУчета);
	ОбластьТитул2.Параметры.ИтогоПолучено 		= ПолученоИзКассы;
	
	ТабДокумент.Вывести(ОбластьТитул2);
	
	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		
		ТекстДокумента   = ?(НЕ ЗначениеЗаполнено(Товар.НаименованиеРасхода), "", СокрЛП(Товар.НаименованиеРасхода));
		ТекстНомера 	 = ?(НЕ ЗначениеЗаполнено(Товар.ДокументНомер), "", Товар.ДокументНомер);
		ТекстДата   	 = ?(НЕ ЗначениеЗаполнено(Товар.ДокументДата), "", Формат(Товар.ДокументДата,"ДФ=dd.MM.yyyy"));
		
		ОбластьМакета.Параметры.ДокументРасхода      = ТекстДокумента;
		ОбластьМакета.Параметры.ДокументРасходаНомер = ТекстНомера;
		ОбластьМакета.Параметры.ДокументРасходаДата  = ТекстДата ;
		
		КонтрагентТекст = ?(НЕ ЗначениеЗаполнено(Товар.Поставщик), "", СокрЛП(Товар.Поставщик));
		СодержаниеТекст = ?(КонтрагентТекст = "",СокрЛП(Товар.Содержание), ? (Товар.Содержание = "", "", ", " + СокрЛП(Товар.Содержание)));
		
		ОбластьМакета.Параметры.Содержание = КонтрагентТекст + СодержаниеТекст;
		
		Сумма = Товар.ПоОтчету 
		      + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

       	ОбластьМакета.Параметры.ПоОтчету = Сумма;
				
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ИтогоПоОтчету        = ИтогоПоОтчету;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "Т3" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАвансовогоОтчета();
	ИначеЕсли ИмяМакета = "ПеречислениеОПВ" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРеестра("ПеречислениеПенсионныхВзносов");
    ИначеЕсли ИмяМакета = "ПеречислениеСО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРеестра("ПеречислениеСоциальныхОтчислений");
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Авансовый отчет"), Ссылка);

КонецПроцедуры // Печать

Процедура ЗаполнитьСтрокуПоСчетам(ТаблицаПроводок, ОбластьМакета, СчетДт, СчетКт, Сумма)
	
	Если ТаблицаПроводок.Количество() <> 0 Тогда
		
		Проводка = ТаблицаПроводок.Получить(ТаблицаПроводок.Количество() - 1);
		
		ОбластьМакета.Параметры[СчетДт] = Проводка.СчетДт;
		ОбластьМакета.Параметры[СчетКт] = Проводка.СчетКт;
		ОбластьМакета.Параметры[Сумма]  = Проводка.Сумма;
		
		ТаблицаПроводок.Удалить(Проводка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокуПоСчетам(ОбластьМакета, СчетДт, СчетКт, Сумма)
	
	ОбластьМакета.Параметры[СчетДт] = "";
	ОбластьМакета.Параметры[СчетКт] = "";
	ОбластьМакета.Параметры[Сумма]  = "";
	
КонецПроцедуры

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т3"			   , "Т-3 (Авансовый отчет)");
   	СтруктураМакетов.Вставить("ПеречислениеОПВ", "Реестр на перечисление пенсионных взносов ");
	СтруктураМакетов.Вставить("ПеречислениеСО" , "Реестр на перечисление соц. страхования ");

	Возврат СтруктураМакетов;
  
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)

	Если ЗаполнятьБУ = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетЗатратБУ", "СубконтоЗатратБУ");			
		Иначе
			СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратБУ   = ПланыСчетов.Типовой.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратБУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		Иначе
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаБУРегл()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)

	Если ЗаполнятьНУ  = Истина Тогда

		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
			ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетЗатратНУ", "СубконтоЗатратНУ");			
		Иначе
			СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		Если ИмяТабЧасти = "Прочее" Тогда
			СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			Для СчетчикЦикла = 1 По 3 Цикл
				СтрокаТЧ["СубконтоЗатратНУ" + СчетчикЦикла] = Неопределено;
			КонецЦикла; 	
		Иначе
			СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУРегл()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента);
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь"); 
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);		
Конецпроцедуры	

// Функция возвращает сумму к выплате заработной платы по указанной ведомости
//
Функция ПолучитьСуммуКВыплатеЗарплатыПоВедомости(Ведомость) Экспорт

	СуммаКВыплате = 0;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма+ЗарплатаКВыплатеЗарплата.ДепонированнаяСумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Регистратор
	|
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ведомость И
	|	ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) И
	|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
	|";

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Если РезультатЗапроса.Следующий() Тогда
		СуммаКВыплате = РезультатЗапроса.Сумма;
	КонецЕсли;
	
	Возврат СуммаКВыплате;

КонецФункции // ПолучитьСуммуКВыплатеЗарплатыПоВедомости()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПодокументуОснования(Основание) Экспорт
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ДокументОснование = Основание;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
		НоваяСтрока 				= ВыплатаЗаработнойПлаты.Добавить();
		НоваяСтрока.Ведомость 		= Основание;
		НоваяСтрока.СуммаКВыплате	= ПолучитьСуммуКВыплатеЗарплатыПоВедомости(Основание);
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда
		
		// оплата по испол. листам всегда в валюте регл. учета
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		
		НоваяСтрока 				= ОплатаПоИсполнительнымЛистам.Добавить();
		НоваяСтрока.Документ 		= Основание;
		НоваяСтрока.СуммаКОплате	= Основание.ИсполнительныеЛисты.Итог("СуммаВзаиморасчетов");
		НоваяСтрока.СуммаСборов		= Основание.ИсполнительныеЛисты.Итог("СуммаСборов");
		НоваяСтрока.СуммаПлатежа	= Основание.ИсполнительныеЛисты.Итог("СуммаПлатежа");
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОПВПеречислениеВФонды") Тогда
		
		НоваяСтрока 				= ПеречислениеПенсионныхВзносов.Добавить();
		НоваяСтрока.Документ 		= Основание;
		НоваяСтрока.Сумма			= Основание.ПенсионныеВзносы.Итог("Сумма");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СОПеречислениеВФонды") Тогда
		
		НоваяСтрока 				= ПеречислениеСоциальныхОтчислений.Добавить();
		НоваяСтрока.Документ 		= Основание;
		НоваяСтрока.Сумма			= Основание.СоциальныеОтчисления.Итог("Сумма");

	КонецЕсли;

КонецПроцедуры

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураПолученный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	               |ГДЕ
	               |	СчетФактураПолученный.Ссылка.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	               |	И СчетФактураПолученный.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если Провести Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ИначеЕсли ТекущийДокумент.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
			
		ТекущийДокумент.Записать(РежимЗаписи);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
											 СтруктураШапкиДокумента.ВалютаДокумента,    ВалютаРег,
											 СтруктураШапкиДокумента.КурсДокумента,      Данные.Курс,
											 СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоВыплатеЗаработнойПлаты(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка) КАК ПредставлениеДок,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,	
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
	|
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчетВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = АвансовыйОтчетВыплатаЗаработнойПлаты.Ведомость
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка
	|
	|ГДЕ
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка = &ДокументСсылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,	
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПодготовитьТаблицуПоОплатеПоИсполнительнымЛистам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоОплатеПоИсполнительнымЛистам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураШапкиДокумента.Дата);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ИЛПеречислениеПолучателям.Ссылка) КАК ПредставлениеДок,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ КАК ФИОРаботника,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.ДокументОснование.Номер КАК НомерИЛ,
	|	ИЛПеречислениеПолучателям.ДокументОснование.Дата КАК ДатаИЛ,
	|	НАЧАЛОПЕРИОДА(ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов) КАК СуммаСборов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов + ИЛПеречислениеПолучателям.СуммаСборов) КАК Сумма
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента) КАК ФИОФизЛиц
	|		ПО ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|ГДЕ
	|	ИЛПеречислениеПолучателям.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												ОплатаПоИсполнительнымЛистам.Документ
	|											ИЗ
	|												Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК ОплатаПоИсполнительнымЛистам
	|											ГДЕ
	|												ОплатаПоИсполнительнымЛистам.Ссылка = &ДокументСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.Ссылка,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.ДокументОснование.Номер,
	|	ИЛПеречислениеПолучателям.ДокументОснование.Дата,
	|	НАЧАЛОПЕРИОДА(ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПодготовитьТаблицуПоОплатеПоИсполнительнымЛистам()
                           
// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	ВалютаБух     = мВалютаРегламентированногоУчета;

	КурсВалютыБух = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаБух, Дата);
	КурсБух       = ?(КурсВалютыБух.Курс = 0,1,КурсВалютыБух.Курс);
	КратБух       = ?(КурсВалютыБух.Кратность = 0, 1,КурсВалютыБух.Кратность) ;

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	ТаблицаПрочие.Колонки.Добавить("СуммаБух", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));

	Для Каждого СтрокаТаб Из ТаблицаПрочие Цикл

		НДС         = СтрокаТаб.НДС;
		СуммаБезНДС = ?(СуммаВключаетНДС, СтрокаТаб.Сумма - НДС, СтрокаТаб.Сумма);

		// Пересчитаем сумму по курсу
		СтрокаТаб.СуммаБух = СуммаБезНДС * ((СтруктураШапкиДокумента.КурсДокумента * КратБух)
		                     / (КурсБух * СтруктураШапкиДокумента.КратностьДокумента));

	КонецЦикла;

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ФизЛицо, ВалютаДокумента");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если Товары.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Документ");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	// Для учета в подсистеме НДС
	Если СтруктураШапкиДокумента.УчитыватьНДС ТОгда
		Если Не НДСВключенВСтоимость И НЕ ОтложитьПринятиеНДСКЗачету Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");			
		КонецЕсли;
		Если НЕ ОтложитьПринятиеНДСКЗачету Тогда 
			СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
		КонецЕсли;  		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");				
	КонецЕсли;                                                  

	// проверка реквизитов КПН
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ или СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("Поставщик");
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""ТМЗ"": ";
		СтрокаСообщения = " указан забалансовый счет. Прием на комиссию документом не поддерживается!";

		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) и СтрокаТЧ.СчетУчетаБУЗаб Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДоговорКонтрагента, Сумма");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	//УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "ВыплатаЗаработнойПлаты".
//
// Параметры:
// Параметры: 
//  ТаблицаПоОплате			  - результат запроса, содержащий данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыплатаЗаработнойПлаты(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого Строка Из ТаблицаПоОплате Цикл
		СтрокаНачалоСообщенияОбОшибке = "В табл. части ""Выплата зарплаты"" в документе " + Строка.ПредставлениеДок + ": ";
	
		Если НЕ ЗначениеЗаполнено(Строка.ФизЛицо) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалоСообщенияОбОшибке + "не указан работник!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыплатаЗаработнойПлаты()

// Проверяет правильность заполнения строк табличной части "ОплатаПоИсполнительнымЛистам".
//
// Параметры:
// Параметры: 
//  ТаблицаПоОплате			  - результат запроса, содержащий данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоИсполнительнымЛистам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого Строка Из ТаблицаПоОплате Цикл
		СтрокаНачалоСообщенияОбОшибке = "В табл. части ""Оплата по исп. листам"" в документе " + Строка.ПредставлениеДок + ": ";
	
		Если НЕ ЗначениеЗаполнено(Строка.Получатель) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалоСообщенияОбОшибке + "не указан получатель!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалоСообщенияОбОшибке + "не указан документ-основание!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ПериодВзаиморасчетов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалоСообщенияОбОшибке + "не указан месяц, за который осуществляется оплата!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения реквизитов в строке выборки из результата
// запроса по документам перечисления ОПВ (СО).
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
//
// Параметры: 
//  ВыборкаПоСтрокамПеречисления - спозиционированная на определеной строке выборка 
//  							   из результата запроса, 
//  Отказ 						 - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(ВыборкаПоСтрокамПеречисления, Отказ, Заголовок)

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на перечисление присутствуют строки с не указанным физическим лицом!", Отказ, Заголовок);
	КонецЕсли;

	// месяц исчисления
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.МесяцИсчисления) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на перечисление присутствуют документы с не заданным месяцем исчисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО()

// Проверяет правильность заполнения строк табличной части "ПеречислениеОПВ".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПеречислениеОПВ	- результат запроса, содержащий данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПеречислениеОПВ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",      Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Регистратор
	               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
	               |ИЗ
	               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	               |		ПО ОПВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов))
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	               |		ПО ОПВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов))
				   |
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |// ОППВ
	               |ВЫБРАТЬ
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	               |		ПО ОППВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	               |		ПО ОППВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |// ОПВР
	               |ВЫБРАТЬ
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
	               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	               |		ПО ОПВРРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	               |		ПО ОПВРРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
	               |			И (АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ведомость
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
	               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
	               |ИЗ
	               |	Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
	               |		ПО АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ = РанееИспользованныеВедомости.Ведомость
	               |ГДЕ
	               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка = &ДокументСсылка";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": документ уже включен в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
    
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ПеречислениеСО".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПеречислениеСО	- результат запроса, содержащий данные для проведения и проверки ТЧ 
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПеречислениеСО(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",      Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
	               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
	               |ИЗ
	               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	               |		ПО СОРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |ИЗ
	               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	               |		ПО СОРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ,
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	               |		ПО ВОСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	               |		ПО ВОСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ,
	               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	               |		ПО ООСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |ИЗ
	               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	               |		ПО ООСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
	               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ведомость
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
	               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
	               |ИЗ
	               |	Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
	               |		ПО АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ = РанееИспользованныеВедомости.Ведомость
	               |ГДЕ
	               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка = &ДокументСсылка";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл
		Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": документ уже включен в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Сумма";
	РеквизитыСтр = РеквизитыСтр + ", СчетЗатратБУ";
		
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		РеквизитыСтр = РеквизитыСтр + ", СчетЗатратНУ";
	КонецЕсли;
    		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);
	
	// Проверка специфических реквизитов документа
	ПроверитьЗаполнениеТабличнойЧастиПрочееПострочно(СтруктураШапкиДокумента, Отказ, Заголовок);
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения табличной части Прочее
// в специфических случаях
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочееПострочно(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Цикл по строкам табличной части.
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти["Прочее"].Реквизиты;
    СтрокаНачалаСообщенияОбОшибке = "";
	
	Для каждого СтрокаТаблицы Из Прочее Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части ""Прочее"": ";
		
		СтруктураОбязательныхПолей = Новый Структура;
		Если СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные или 
			СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы Тогда
			Если СтрокаТаблицы.СуммаНДС <> 0 Тогда
				// ругаемся. Так как для этого вида не должен быть указан НДС
				СтрокаСообщения = "указана сумма НДС. Для задолженности вида ""Суточные"" сумма НДС должна быть равна 0.";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;			
		Иначе	
			// проверка реквизитов НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда	
				
				Если НЕ ОтложитьПринятиеНДСКЗачету Тогда 
					СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
					СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
					СтруктураОбязательныхПолей.Вставить("НДСВидПоступления");
				КонецЕсли;
				
				Если (СтрокаТаблицы.СтавкаНДС.Ставка <> 0) и (Не СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ НЕ ОтложитьПринятиеНДСКЗачету) Тогда 
					СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
				КонецЕсли; 				
			КонецЕсли;
			
			// проверка реквизитов КПН
			//Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ или СтруктураШапкиДокумента.УчитыватьНДС Тогда
			//	СтруктураОбязательныхПолей.Вставить("Поставщик");
			//КонецЕсли;
		КонецЕсли;
		
		// Цикл проверки по списку реквизитов
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];           			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
				
				// Проверка и вывод сообщений
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;				
				КонецЕсли;                                  
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;                                  
		КонецЦикла;		
	КонецЦикла;         

КонецПроцедуры	

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоВыплатеЗП, ТаблицаПоОплатеИЛ, ТаблицаПоПрочее,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
	                        ТаблицаПоТоварам, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                        Отказ, Заголовок);
							
	ТаблицыДляПроведенияПоНДС = Новый Структура();
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	// из таблицы прочие необходимо удалить строки
	// по суточным, так как НДС по этой операции начислять не нужно
	СтрокиСуточных = ТаблицаПоПрочее.НайтиСтроки(Новый Структура("ВидЗадолженностиПодотчетногоЛица", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные));
	Для Каждого СтрокаДляУдаления из  СтрокиСуточных Цикл
		ТаблицаПоПрочее.Удалить(СтрокаДляУдаления);
	КонецЦикла;	
	
	СтрокиСуточных = ТаблицаПоПрочее.НайтиСтроки(Новый Структура("ВидЗадолженностиПодотчетногоЛица", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы));
	Для Каждого СтрокаДляУдаления из  СтрокиСуточных Цикл
		ТаблицаПоПрочее.Удалить(СтрокаДляУдаления);
	КонецЦикла;	
	
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);
	Если НЕ ОтложитьПринятиеНДСКЗачету Тогда
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ, Заголовок);
	КонецЕсли;
	
	ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента, ТаблицаПоВыплатеЗП);
	ДвиженияПоОплатеПоИЛ(СтруктураШапкиДокумента, ТаблицаПоОплатеИЛ);
	ДвиженияПоПеречислениюОПВ(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоПеречислениюСО(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамБухгалтерии(РежимПроведения, СтруктураШапкиДокумента, 
		                          ТаблицаПоТоварам, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
		                          Отказ, Заголовок);

	ВалютаРег = мВалютаРегламентированногоУчета;

	// Формирование проводок.
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	СписокСчетовПроизводства = Неопределено;	
	СчетРасчетовСПодотчетником = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;

	ДатаДок      = Дата;
	СкладПроводок = СтруктураШапкиДокумента.Склад;

	// чтобы для каждой строки не выполнять запрос по стратегии списания для счета
	// добавим соответствие [Счет, СтратегияСписания]
	СтратегииСписания = Новый Соответствие;
	
	// Проводки по товарам
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оприходованы ТМЗ";

		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура,Истина, Заголовок);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладПроводок);
		
		// если нет соответствия стратегии выбранному счету, добавим значение
		Если СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ) = Неопределено Тогда
			
			СтратегииСписания.Вставить(СтрокаТаблицы.СчетУчетаБУ,УправлениеЗапасами.ВедетсяПартионныйУчетДляСчета(СтрокаТаблицы.СчетУчетаБУ));
			
		КонецЕсли;
		
		ВедетсяПартионныйУчетДляСчета = СтратегииСписания.Получить(СтрокаТаблицы.СчетУчетаБУ);
		
		Если ВедетсяПартионныйУчетДляСчета Тогда
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Партии", Ссылка,, Заголовок);
			
		КонецЕсли;
		
		Проводка.КоличествоДт= СтрокаТаблицы.Количество;

		Если СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Иначе
			Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС;
		КонецЕсли;

		Проводка.СчетКт             = СчетРасчетовСПодотчетником;
		Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
		Проводка.СубконтоКт.ВидыЗадолженностиПодотчетныхЛиц = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов;

		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Если СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			Иначе
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал;
			КонецЕсли;
		КонецЕсли;

		// Проводки по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость и не СтрокаТаблицы.СчетУчетаБУ.Забалансовый И СтруктураШапкиДокумента.УчитыватьНДС и СтрокаТаблицы.НДС<>0 Тогда

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Если ОтложитьПринятиеНДСКЗачету Тогда
				Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
				Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
			Иначе
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				Проводка.Содержание   = "Выделен НДС";
			КонецЕсли;

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);

			Проводка.СчетКт      = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизаций  = СтруктураШапкиДокумента.ФизЛицо;
			Проводка.СубконтоКт.ВидыЗадолженностиПодотчетныхЛиц = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов;
			Если СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.Сумма       = СтрокаТаблицы.НДС;
			
		КонецЕсли;
		
		// поводки по налоговому учету
		Если не СтрокаТаблицы.СчетУчетаБУ.Забалансовый  Тогда
			Если НЕ СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура",СтрокаТаблицы.Номенклатура,Истина , Заголовок);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",СкладПроводок);
			
			Если Проводка.СчетДт.Количественный Тогда			
				Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;
						
			Проводка.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.Контрагент, Истина, Заголовок);
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				Проводка.Сумма = СтрокаТаблицы.СуммаБезНДС;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтруктураШапкиДокумента.ВидУчетаНУ);
			Проводка.Содержание   = "Оприходованы ТМЗ";	
			
			//сразу сделаем погашение начисленной задолженности
			Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда			
				ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, Проводка, "Период, Организация, Сумма") ;
				
				ПроводкаНУ_Погашение.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт,ПроводкаНУ_Погашение.СубконтоДт,"Контрагенты", СтрокаТаблицы.Контрагент, Истина, Заголовок);
				
				ПроводкаНУ_Погашение.СчетКт = ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", 	 Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов);						
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);		
				
				ПроводкаНУ_Погашение.Содержание   = "Погашение задолженности перед поставщиком";                     
			КонецЕсли;
			// Проводки по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость  И СтруктураШапкиДокумента.УчитыватьНДС и СтрокаТаблицы.НДС<>0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				
				Если  ОтложитьПринятиеНДСКЗачету Тогда
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
					ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);					
					ПроводкаНУ.Содержание   = "Выделен НДС";
				КонецЕсли; 
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ.СчетКт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетРасчетовСПодотчетником, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"РаботникиОрганизаций",СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.Сумма       = СтрокаТаблицы.НДС;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
						
			КонецЕсли;  		
			
		КонецЕсли;	
		
	КонецЦикла; // Проводки по товарам

	//Проводки по расчетам с поставщиками
	Если ТаблицаПоОплатамПоставщикам.Количество() > 0 Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетРасчетовСПодотчетником);
		СтруктураШапкиДокумента.Вставить("КоррСубконто2", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ОплатаПоставщикам);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			СтруктураШапкиДокумента.Вставить("КоррСчетНУ", ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетРасчетовСПодотчетником, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц));
			СтруктураШапкиДокумента.Вставить("КоррСубконтоНУ2", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ОплатаПоставщикам);
		КонецЕсли;
		
		//Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок)=Ложь тогда
		//	Возврат;
		//КонецЕсли;
		Для Каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СтрокаТаблицы.Содержание;
			Проводка.Сумма        = СтрокаТаблицы.СуммаВзаиморасчетов;
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.ТипОперации);
			
			Проводка.СчетКт       = СчетРасчетовСПодотчетником;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц",   Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ОплатаПоставщикам);
			
			Если  СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.Сумма;
			КонецЕсли;
			
			Если  СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.Сумма;
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				// поводки по налоговому учету
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма        = СтрокаТаблицы.СуммаВзаиморасчетов;
					
					Проводка.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом, Дата, ПланыСчетов.Налоговый.РасчетыСКонтрагентамиИПрочиеВзаиморасчеты);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТаблицы.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтрокаТаблицы.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтрокаТаблицы.ТипОперации);            			
					
					Проводка.СчетКт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетРасчетовСПодотчетником, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтруктураШапкиДокумента.ФизЛицо);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	//КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаПоПрочее Цикл

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = СтрокаТаблицы.Содержание;
		Проводка.Сумма        = СтрокаТаблицы.СуммаБух + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТаблицы.НДС, 0);

		Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоЗатратБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоЗатратБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоЗатратБУ3);

		Проводка.СчетКт       = СчетРасчетовСПодотчетником;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций",  СтруктураШапкиДокумента.ФизЛицо);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц",  СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица);

		
		Если  СтрокаТаблицы.СчетЗатратБУ.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Если  СчетРасчетовСПодотчетником.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		// Проводка по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 
			И НЕ (СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные ИЛИ 
					СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы) Тогда
					
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СтрокаТаблицы.НДС;
			
			Если ОтложитьПринятиеНДСКЗачету Тогда
				Проводка.СчетДт       = ПланыСчетов.Типовой.НДСНачисленныйПриПокупке;
				Проводка.Содержание   = "Отложенное принятие НДС к зачету"; 
			Иначе
				Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДС;
				Проводка.Содержание   = "Выделен НДС";
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетКт       = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц",  СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
			КонецЕсли;

		КонецЕсли; // Проводка по НДС
		
		// поводки по налоговому учету
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = СтрокаТаблицы.СчетЗатратНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СтрокаТаблицы.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,СтрокаТаблицы.СубконтоЗатратНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3,СтрокаТаблицы.СубконтоЗатратНУ3);            			
			
			Проводка.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтрокаТаблицы.Контрагент, Истина, Заголовок);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
			СуммаПроводки = 0;
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				СуммаПроводки = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				СуммаПроводки = СтрокаТаблицы.СуммаБезНДС;
			КонецЕсли;
			Проводка.Сумма  = СуммаПроводки;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
			Проводка.Содержание   = "Прочие затраты";
			
			ПроцедурыНалоговогоУчета.ОтразитьРасходыНаРемонтПроизводственныхОС(ПроводкиНУ,
										Новый Структура("СчетБУ, СубконтоБУ1, СубконтоБУ2,СубконтоБУ3",
										СтрокаТаблицы.СчетЗатратБУ, СтрокаТаблицы.СубконтоЗатратБУ1, СтрокаТаблицы.СубконтоЗатратБУ2, СтрокаТаблицы.СубконтоЗатратБУ3),
										Новый Структура("СчетНУ, СубконтоНУ1, СубконтоНУ2,СубконтоНУ3",
										СтрокаТаблицы.СчетЗатратНУ, СтрокаТаблицы.СубконтоЗатратНУ1, СтрокаТаблицы.СубконтоЗатратНУ2, СтрокаТаблицы.СубконтоЗатратНУ3),
										ДатаДок, СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение, ВидУчетаНУ, СуммаПроводки, 0, Отказ, СписокСчетовПроизводства);
										
			//сразу сделаем погашение начисленной задолженности
			ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
			ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, Проводка, "Период, Организация, Сумма,Содержание") ;
			
			ПроводкаНУ_Погашение.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт,ПроводкаНУ_Погашение.СубконтоДт,"Контрагенты", СтрокаТаблицы.Контрагент, Истина, Заголовок);
			
			ПроводкаНУ_Погашение.СчетКт = ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", 	 СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица);						
										
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);		
			                                  			
			// Проводка по НДС
			Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС <> 0 
					И НЕ (СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные ИЛИ 
					СтрокаТаблицы.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы) Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				
				Если  ОтложитьПринятиеНДСКЗачету Тогда
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКНачислениюНУ(ПланыСчетов.Типовой.НДСНачисленныйПриПокупке, Дата);					
					ПроводкаНУ.Содержание   = "Отложенное принятие НДС к зачету"; 
				Иначе
					ПроводкаНУ.СчетДт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДС, Дата);					
					ПроводкаНУ.Содержание   = "Выделен НДС";
				КонецЕсли;    
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ.СчетКт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетРасчетовСПодотчетником, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"РаботникиОрганизаций",СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.ПриобретениеАктивов);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
				ПроводкаНУ.Сумма       = СтрокаТаблицы.НДС;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
							
				
			КонецЕсли; // Проводка по НДС
			
		КонецЕсли;	
	КонецЦикла;

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерии()

// Процедура формирует движения по регистрам по выплате заработной платы
//
Процедура ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента, ТаблицаПоВыплатеЗП)

	Если ТаблицаПоВыплатеЗП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	
	Для Каждого Результат Из ТаблицаПоВыплатеЗП Цикл

		Если Результат.Сумма <> 0 Или Результат.ДепонированнаяСумма <> 0 Тогда
			
			// Отмечаем факт выплаты по ведомости
			Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
			// Измерения
			Движение.Ведомость 	= Результат.Ведомость;
			Движение.Физлицо 	= Результат.ФизЛицо;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		// свернем таблицу по выплате ЗП без учета физ.лиц.
		ТаблицаПоВыплатеЗП.Свернуть("Ведомость, ВыплаченностьЗарплаты, Номер, Дата","Сумма, ДепонированнаяСумма");		
	КонецЕсли;
	
	Для Каждого Результат Из ТаблицаПоВыплатеЗП Цикл

		Если Результат.Сумма <> 0 Или Результат.ДепонированнаяСумма <> 0 Тогда
			
			// Формируем проводки по выплате зарплаты
			Если Результат.Сумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Результат.Сумма;
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;				
				Если ВедетсяУчетПоСотрудникам Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Результат.ФизЛицо);
				КонецЕсли;
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
				Проводка.Содержание  = "Выплата з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт = мВалютаРегламентированногоУчета;
					Проводка.ВалютнаяСуммаКт = Результат.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
			// Формируем проводки по выплате депонированной зарплаты
			Если Результат.ДепонированнаяСумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = Дата;
				Проводка.Организация = Организация;
				Проводка.Сумма       = Результат.ДепонированнаяСумма;
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
				Если ВедетсяУчетПоСотрудникам Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Результат.ФизЛицо);
				КонецЕсли;
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
				Проводка.Содержание  = "Выплата деп.з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт = мВалютаРегламентированногоУчета;
					Проводка.ВалютнаяСуммаКт = Результат.ДепонированнаяСумма;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				СуммаКПроводке = Результат.ДепонированнаяСумма + Результат.Сумма;
				  Если СуммаКПроводке <> 0 Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить(); 					
					// Свойства
					ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;					
					// Измерения
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
					Если ВедетсяУчетПоСотрудникам Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", Результат.ФизЛицо);
					КонецЕсли;
					
					// Корреспондеция счетов и аналитика
					ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
					
					// Ресурсы
					ПроводкаНУ.Сумма      = СуммаКПроводке; 					
					// Реквизиты
					ПроводкаНУ.Содержание = "Выплата з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");  
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли;				
			КонецЕсли;    			
		КонецЕсли;		  		
	КонецЦикла;

	// движения по выплате заработной платы по регистрам накопления
	ТекстЗапросаПоВзаиморасчетам = "
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
	|	ВЫБОР КОГДА НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) 
	|		ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате, 
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
	|
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчетВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = АвансовыйОтчетВыплатаЗаработнойПлаты.Ведомость
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	|
	|ГДЕ
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
	|	ВЫБОР КОГДА НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) 
	|		ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
	|	КОНЕЦ, 
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате
	|";

	СтруктураПараметровЗапроса = Новый Структура();

	СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
	
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ЭтотОбъект, 
													ТекстЗапросаПоВзаиморасчетам, 
													СтруктураПараметровЗапроса, 
													Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	
КонецПроцедуры // ДвиженияПоЗарплатеРегл()

//Процедура формирует движения по регистрам по выплате сумм по исполнительным листам 
//
Процедура ДвиженияПоОплатеПоИЛ(СтруктураШапкиДокумента, ТаблицаПоОплатеИЛ)

	Если ТаблицаПоОплатеИЛ.Количество() = 0 Тогда
		Возврат;
		
	КонецЕсли;

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Для Каждого Результат Из ТаблицаПоОплатеИЛ Цикл

		Если Результат.Сумма <> 0 Тогда
			// Формируем проводки по перечислению по ИЛ
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = Результат.Сумма;
			
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Результат.Получатель);
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт = мВалютаРегламентированногоУчета;
				Проводка.ВалютнаяСуммаКт = Результат.Сумма;
			КонецЕсли;

			Проводка.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				// Формируем проводки по перечислению по ИЛ
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = Результат.Сумма;
				                                                                                                                                                                             
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам, Дата, ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Результат.Получатель);
				
				ПроводкаНУ.СчетКт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
								
				ПроводкаНУ.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);							
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаПоВзаиморасчетам = "
	|ВЫБРАТЬ
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов) КАК СуммаСборов
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчет
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|		ПО АвансовыйОтчет.Документ = ИЛПеречислениеПолучателям.Ссылка
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("ДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));	

КонецПроцедуры // ДвиженияПоОплатеПоИЛ

//Процедура формирует движения по регистрам по перечислению сумм ОПВ 
//
Процедура ДвиженияПоПеречислениюОПВ(СтруктураШапкиДокумента, Отказ, Заголовок)

	ТекстЗапросаПоВзаиморасчетам = 
		"ВЫБРАТЬ
		|	ОПВПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	НАЧАЛОПЕРИОДА(ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	СУММА(ОПВПеречислениеВФонды.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчет
		|		ПО ОПВПеречислениеВФонды.Ссылка = АвансовыйОтчет.Документ
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	ОПВПеречислениеВФонды.ФизЛицо,
		|	ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
		|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	РезультатЗапросаПоПеречислениюОПВ = Запрос.Выполнить();
	
	ЕстьОПВ  = Ложь;
	ЕстьОППВ = Ложь;
	//++ЗУП
	ЕстьОПВР = Ложь;
	//--ЗУП
	
	Выборка = РезультатЗапросаПоПеречислениюОПВ.Выбрать();
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);

	// Корреспонденция счетов БУ и НУ
	СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
	Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
		СчетДт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
	КонецЕсли; 
	
	СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВ(СчетДт, Дата);
				
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		 ТаблицаДляПроведенияПоРегиструБухгалтерии = РезультатЗапросаПоПеречислениюОПВ.Выгрузить();
		 ТаблицаДляПроведенияПоРегиструБухгалтерии.Свернуть("ВидПлатежа, ВидОперации, МесяцИсчисления", "Сумма");  
		 Для Каждого СтрокаДанных Из ТаблицаДляПроведенияПоРегиструБухгалтерии Цикл
			 
			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов = СтрокаДанных.ВидОперации Тогда 
				ЕстьОПВ						  = Истина;
				ТекстПроводки				  = "ОПВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;					
			//++ЗУП	
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя = СтрокаДанных.ВидОперации Тогда
				ЕстьОПВР					  = Истина;
				ТекстПроводки				  = "ОПВР";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;				
			//--ЗУП	
			Иначе
				ЕстьОППВ					  = Истина;
				ТекстПроводки 				  = "ОППВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;					
			КонецЕсли;
			 
			// движения по регистру бухгалтерии
			Проводка = Движения.Типовой.Добавить();

			//	Свойства
			Проводка.Период		 = СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;                                                					
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);			
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;
			
			// Ресурсы
			Проводка.Сумма		 = СтрокаДанных.Сумма;
			
			// Реквизиты
			Проводка.Содержание	 = ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";		 
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
				
				
				ПроводкаНУ.СчетДт			= СчетДтНУ;
								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления"    , СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
								
				ПроводкаНУ.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
			
				ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		= ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		 КонецЦикла;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВедетсяУчетПоСотрудникам Тогда
			
			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов = Выборка.ВидОперации Тогда 
				ЕстьОПВ						  = Истина;
				ТекстПроводки				  = "ОПВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;					
			//++ЗУП	
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя = Выборка.ВидОперации Тогда 
				ЕстьОПВР					  = Истина;
				ТекстПроводки				  = "ОПВР";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			//--ЗУП	
			Иначе
				ЕстьОППВ					  = Истина;
				ТекстПроводки 				  = "ОППВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;					
			КонецЕсли;

			// движения по регистру бухгалтерии
			Проводка = Движения.Типовой.Добавить();

			//	Свойства
			Проводка.Период		= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация= СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;         
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций",      Выборка.ФизЛицоБУ);
				
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Выборка.Сумма;
			КонецЕсли;
			
			// Ресурсы
			Проводка.Сумма		= Выборка.Сумма;
			
			// Реквизиты
			Проводка.Содержание	= ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
					
					
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
								
				ПроводкаНУ.СчетДт			= СчетДтНУ;
								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций",      Выборка.ФизЛицоБУ);
									
								
				ПроводкаНУ.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
				
				ПроводкаНУ.Сумма			= Выборка.Сумма;				
				// Реквизиты
				ПроводкаНУ.Содержание		= ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		КонецЕсли;
                					
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьОПВ Тогда 
		ТекстЗапросаПоВзаиморасчетамОПВ = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И ОПВПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");
	
		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамОПВ,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
	Если ЕстьОППВ Тогда
		ТекстЗапросаПоВзаиморасчетамОППВ = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И ОПВПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОППВ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамОППВ,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;											
	
	//++ЗУП
	Если ЕстьОПВР Тогда
		ТекстЗапросаПоВзаиморасчетамОПВР = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И ОПВПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВР(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамОПВР,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
	//--ЗУП										
												
КонецПроцедуры // ДвиженияПоПеречислениюОПВ

//Процедура формирует движения по регистрам по перечислению сумм ОПВ 
//
Процедура ДвиженияПоПеречислениюСО(СтруктураШапкиДокумента, Отказ, Заголовок)

	ТекстЗапросаПоВзаиморасчетам = 
		"ВЫБРАТЬ
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	СУММА(СОПеречислениеВФонды.Сумма) КАК Сумма
		|ИЗ
		|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчет
		|		ПО СОПеречислениеВФонды.Ссылка = АвансовыйОтчет.Документ
		|ГДЕ
		|	АвансовыйОтчет.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	СОПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	РезультатЗапросаПоПеречислениюСО = Запрос.Выполнить();
	
	ЕстьСО  = Ложь;
	ЕстьВОСМС = Ложь;
	ЕстьООСМС = Ложь;

	Выборка = РезультатЗапросаПоПеречислениюСО.Выбрать();
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоСоциальномуСтрахованию	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		 ТаблицаДляПроведенияПоРегиструБухгалтерии = РезультатЗапросаПоПеречислениюСО.Выгрузить();
		 ТаблицаДляПроведенияПоРегиструБухгалтерии.Свернуть("ВидПлатежа, ВидОперации, МесяцИсчисления", "Сумма");  
		 Для Каждого СтрокаДанных Из ТаблицаДляПроведенияПоРегиструБухгалтерии Цикл
	 
 			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений = СтрокаДанных.ВидОперации Тогда 
				ЕстьСО						  = Истина;
				ТекстПроводки				  = "СО";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУСО(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС = СтрокаДанных.ВидОперации Тогда 
				ЕстьВОСМС					  = Истина;
				ТекстПроводки 				  = "Взносы ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВОСМС(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС = СтрокаДанных.ВидОперации Тогда 
				ЕстьООСМС					  = Истина;
				ТекстПроводки 				  = "Отчисления ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУООСМС(СчетДт, Дата);
			КонецЕсли;

			 // Проведение по регистру бухгалтерии	
			Проводка = Движения.Типовой.Добавить();
			
			//	Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;        
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды",	СтрокаДанных.ВидПлатежа);
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;

			// Ресурсы
			Проводка.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			Проводка.Содержание		= ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";		 
			
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата; 				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
							
				ПроводкаНУ.СчетДт			= СчетДтНУ; 								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
								
				ПроводкаНУ.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
				
				ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		=  ТекстПроводки + " за " +  Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		 КонецЦикла;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
	
		ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВедетсяУчетПоСотрудникам Тогда
				 
 			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений = Выборка.ВидОперации Тогда 
				ЕстьСО						  = Истина;
				ТекстПроводки				  = "СО";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУСО(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС = Выборка.ВидОперации Тогда 
				ЕстьВОСМС					  = Истина;
				ТекстПроводки 				  = "Взносы ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВОСМС(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС = Выборка.ВидОперации Тогда 
				ЕстьООСМС					  = Истина;
				ТекстПроводки 				  = "Отчисления ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУООСМС(СчетДт, Дата);
			КонецЕсли;

			// Проведение по регистру бухгалтерии	
			Проводка = Движения.Типовой.Добавить();
			
			//	Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			
			// Корреспонденция счетов и аналитика
			Проводка.СчетДт			= СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды",	Выборка.ВидПлатежа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", 		Выборка.ФизЛицоБУ);
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Выборка.Сумма;
			КонецЕсли;

			// Ресурсы
			Проводка.Сумма			= Выборка.Сумма;
			
			// Реквизиты
			Проводка.Содержание		= ТекстПроводки + " за " +  Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата; 				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт			= СчетДтНУ; 								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", 		Выборка.ФизЛицоБУ);
				
				ПроводкаНУ.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СтруктураШапкиДокумента.СчетРасчетовСПодотчетнымЛицом, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыЗадолженностиПодотчетныхЛиц", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Прочие);
				
				ПроводкаНУ.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		=  ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЦикла; // Пока Выборка.Следующий() Цикл

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСО Тогда 
		ТекстЗапросаПоВзаиморасчетамСО = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");
	
		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюСО(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамСО,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
	Если ЕстьВОСМС Тогда
		ТекстЗапросаПоВзаиморасчетамВОСМС = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюВОСМС(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамВОСМС,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
	Если ЕстьООСМС Тогда
		ТекстЗапросаПоВзаиморасчетамООСМС = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "АвансовыйОтчет.Ссылка = &Ссылка", "АвансовыйОтчет.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюООСМС(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамООСМС,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПеречислениюСО

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ОбработкаПроведения()
// Формирует движения по регистрам подсистемы учета НДС "НДСКВозмещению"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	//Если мОтображатьСтруктурныеПодразделения Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	//Иначе
	//	ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	//КонецЕсли;	
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              							
			УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДСКВозмещению(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ);				
		КонецЕсли; 
	КонецЦикла;		
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
					+ ОплатаПоставщикам.Итог("Сумма") 
					+ ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") 
					+ ОплатаПоИсполнительнымЛистам.Итог("СуммаПлатежа")
					+ ПеречислениеПенсионныхВзносов.Итог("Сумма")
					+ ПеречислениеСоциальныхОтчислений.Итог("Сумма")
					+ Прочее.Итог("Сумма") + ?(УчитыватьНДС И НЕ СуммаВключаетНДС,Прочее.Итог("СуммаНДС"),0);

					УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект,"СчетФактураПолученный");

	НаличиеОперацийПоЗарплате 	= (ВыплатаЗаработнойПлаты.Количество() >0 ИЛИ ПеречислениеПенсионныхВзносов.Количество()>0 ИЛИ ПеречислениеСоциальныхОтчислений.Количество()>0);
	НаличиеПрочихОпераций 		= (Товары.Количество() >0 ИЛИ Прочее.Количество()
									ИЛИ ОплатаПоИсполнительнымЛистам.Количество()>0 ИЛИ ОплатаПоставщикам.Количество() >0);

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события заполнения на основании
// 
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура - обработка проведения документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
		
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ (ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ)));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль); 
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);


	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"   , "Номенклатура");
	СтруктураПолей.Вставить("Количество"     , "Количество");
	СтруктураПолей.Вставить("Коэффициент"    , "Коэффициент");
	СтруктураПолей.Вставить("Сумма"          , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"      , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"            , "СуммаНДС");
	СтруктураПолей.Вставить("Услуга"         , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Контрагент"     , "Поставщик"); 
	СтруктураПолей.Вставить("СчетУчетаБУ"    , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"    , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаБУЗаб" , "СчетУчетаБУ.Забалансовый");
	СтруктураПолей.Вставить("СчетУчетаНДС"   , "СчетУчетаНДС");
	СтруктураПолей.Вставить("НомерГТД"       , 	"НомерГТД");
	
	СтруктураПолей.Вставить("НДСВидОборота"     , "НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления" , "НДСВидПоступления");
	СтруктураПолей.Вставить("СчетФактура"       , "СчетФактура");
	
	СтруктураПолей.Вставить("ВидВходящегоДокумента"   , "ВидВходящегоДокумента"); 
	СтруктураПолей.Вставить("НомерВходящегоДокумента" , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Документ", "Документ");
	СтруктураПолей.Вставить("Сумма", "Сумма");

	РезультатЗапросаПоВыданнымАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"           , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ТипОперации"   , "ТипОперации");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов", "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"               , "Сделка");
	СтруктураПолей.Вставить("Сумма"                , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"   , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов",           "КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом",    "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("СчетУчетаРасчетовПоАвансам",        "СчетУчетаРасчетовПоАвансам");
	
	СтруктураПолей.Вставить("ВидВходящегоДокумента"         , "ВидВходящегоДокумента"); 
	СтруктураПолей.Вставить("НомерВходящегоДокумента"       , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"        , "ДатаВходящегоДокумента");
	
	РезультатЗапросаПоОплатеПоставщикам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Сумма",		"Сумма");
	СтруктураПолей.Вставить("СтавкаНДС", 	"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 			"СуммаНДС");
	СтруктураПолей.Вставить("СчетФактура",	"СчетФактура");
	СтруктураПолей.Вставить("Содержание", 	"Содержание");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Услуга", 		"Номенклатура.Услуга");
	СтруктураПолей.Вставить("Контрагент", 	"Поставщик");
	СтруктураПолей.Вставить("СчетЗатратБУ",	"СчетЗатратБУ");
	СтруктураПолей.Вставить("СубконтоЗатратБУ1", "СубконтоЗатратБУ1");
	СтруктураПолей.Вставить("СубконтоЗатратБУ2", "СубконтоЗатратБУ2");
	СтруктураПолей.Вставить("СубконтоЗатратБУ3", "СубконтоЗатратБУ3");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
	СтруктураПолей.Вставить("СубконтоЗатратНУ1", "СубконтоЗатратНУ1");
	СтруктураПолей.Вставить("СубконтоЗатратНУ2", "СубконтоЗатратНУ2");
	СтруктураПолей.Вставить("СубконтоЗатратНУ3", "СубконтоЗатратНУ3");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("ВидЗадолженностиПодотчетногоЛица", "ВидЗадолженностиПодотчетногоЛица");
	
	СтруктураПолей.Вставить("НДСВидОборота", 		"НДСВидОборота");
	СтруктураПолей.Вставить("НДСВидПоступления", 	"НДСВидПоступления");
	
	СтруктураПолей.Вставить("ВидВходящегоДокумента"   , "ВидВходящегоДокумента"); 
	СтруктураПолей.Вставить("НомерВходящегоДокумента" , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");

	РезультатЗапросаПоПрочее = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	ТаблицаПоВыплатеЗП = ПодготовитьТаблицуПоВыплатеЗаработнойПлаты(СтруктураШапкиДокумента);
	ТаблицаПоОплатеИЛ  = ПодготовитьТаблицуПоОплатеПоИсполнительнымЛистам(СтруктураШапкиДокумента);	
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Для каждого СтрокаОплаты из ОплатаПоставщикам Цикл
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
		Отказ, Заголовок,"Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+" - ");
	КонецЦикла;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыплатаЗаработнойПлаты(ТаблицаПоВыплатеЗП, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоИсполнительнымЛистам(ТаблицаПоОплатеИЛ, СтруктураШапкиДокумента, Отказ, Заголовок);
    ПроверитьЗаполнениеТабличнойЧастиПеречислениеОПВ(СтруктураШапкиДокумента, Отказ, Заголовок);
    ПроверитьЗаполнениеТабличнойЧастиПеречислениеСО(СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		// -куфиб- начало
		Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПодотчетныеЛица") ИЛИ РольДоступна("ден_Финансист") ИЛИ РольДоступна("БухгалтерСДоступомКДаннымПоЗаработнойПлате") Тогда
		// -куфиб- конец
			ОбработкаПодчиненныхДокументовСчетФактура();
		// -куфиб- начало
		КонецЕсли;
		// -куфиб- конец
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоВыплатеЗП, ТаблицаПоОплатеИЛ, ТаблицаПоПрочее,
							Отказ, Заголовок);
							
		// Движения по регистру накопления ТоварыОрганизацийБУ
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоТоварам, СтруктураШапкиДокумента, Движения, Отказ);
							
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки события удаления провендения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();//Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
