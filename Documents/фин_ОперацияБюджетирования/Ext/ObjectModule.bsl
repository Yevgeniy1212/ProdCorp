#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Перем мКэшСоответствиеСчетов Экспорт; // Хранит мКэшСоответствиеСчетов

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	Если НЕ ПометкаУдаления 
		И Ссылка.ПометкаУдаления = ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Возврат;
	КонецЕсли;
	
	Активность = НЕ ПометкаУдаления;
	
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТЧИКИ СОБЫТИЙ
	
	// Процедура ПриКопировании
	//
	Процедура ПриКопировании(ОбъектКопирования)
		
		Если ОбъектКопирования = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.фин_ОперацияБюджетирования") Тогда
			Возврат;
		КонецЕсли;
		
		Организация   = ОбъектКопирования.Организация;
		Комментарий   = ОбъектКопирования.Комментарий;
		Ответственный = ОбъектКопирования.Ответственный;
		
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПлануСчетовБюджетирования") Тогда
			ДвиженияБД = РегистрыБухгалтерии.фин_Бюджетирование.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
			
			Пока ДвиженияБД.Следующий() Цикл
				
				Проводка = Движения.фин_Бюджетирование.Добавить();
				
				Проводка.СчетДт          = ДвиженияБД.СчетДт;
				Проводка.СчетКт          = ДвиженияБД.СчетКт;
				Проводка.Сценарий        = ДвиженияБД.Сценарий;
				Проводка.ФинансовыйПоказатель  = ДвиженияБД.ФинансовыйПоказатель;
				
				Для Каждого Субконто Из ДвиженияБД.СубконтоДт Цикл
					Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				
				Для Каждого Субконто Из ДвиженияБД.СубконтоКт Цикл
					Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				
				Проводка.ВалютаДт        = ДвиженияБД.ВалютаДт;
				Проводка.ВалютаКт        = ДвиженияБД.ВалютаКт;
				Проводка.ВалютнаяСуммаДт = ДвиженияБД.ВалютнаяСуммаДт;
				Проводка.ВалютнаяСуммаКт = ДвиженияБД.ВалютнаяСуммаКт;
				Проводка.КоличествоДт    = ДвиженияБД.КоличествоДт;
				Проводка.КоличествоКт    = ДвиженияБД.КоличествоКт;
				Проводка.Организация     = ДвиженияБД.Организация;
				Проводка.СуммаСценария   = ДвиженияБД.СуммаСценария;
				Проводка.СуммаУпр   	 = ДвиженияБД.СуммаУпр;
			КонецЦикла;
		КонецЕсли;
		Для Каждого Набор Из Метаданные().Движения Цикл
			Если Метаданные.РегистрыНакопления.Индекс(Набор)<>-1 Тогда
				ДвиженияБД = РегистрыНакопления[Набор.Имя].ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
				
				Пока ДвиженияБД.Следующий() Цикл
					
					Проводка = Движения[Набор.Имя].Добавить();
					
					ЗаполнитьЗначенияСвойств(Проводка,ДвиженияБД);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры // ПриКопировании()
	
	//Процедура ПередЗаписью
	//
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
		
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НаборЗаписей ИЗ Движения Цикл
		     		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьОрганизация = БюджетированиеПоОрганизациям И ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьОрганизация Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
				
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записывать = Истина;
		
		
	КонецЦикла; 			
	             	
	СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	
		
	КонецПроцедуры // ПередЗаписью()
	
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
	КонецПроцедуры
	
#КонецЕсли
