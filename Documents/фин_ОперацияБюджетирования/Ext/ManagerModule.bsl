#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ);
	
	Возврат ПараметрыПроведения;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("фин_УчетПоПлануСчетовБюджетирования") Тогда
		// Заявка на расходование средств
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПечатьБухгалтерскойСправки";
		КомандаПечати.Представление = НСтр("ru = 'Бухгалтерская справка'");
		КомандаПечати.Порядок = 50;
	КонецЕсли;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьБухгалтерскойСправки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьБухгалтерскойСправки",
			НСтр("ru = 'Бухгалтерская справка'"),
			ПечатьБухгалтерскойСправки(МассивОбъектов, ОбъектыПечати),
			,
			);
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой 
// 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма 
//
Функция ПечатьБухгалтерскойСправки(МассивОбъектов, ОбъектыПечати)
	
	мКэшСоответствиеСчетов = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "фин_ОперацияБюджетирования";
	ВставлятьРазделительСтраниц = Ложь;
	мВалютаУпр = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого ДокументОбъект Из МассивОбъектов Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Ссылка = ДокументОбъект.Ссылка;

		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацияБ.Организация,
		|	ОперацияБ.Номер,
		|	ОперацияБ.Дата,
		|	ПОДСТРОКА(ОперацияБ.Содержание, 1, 250) КАК Содержание
		|ИЗ
		|	Документ.фин_ОперацияБюджетирования КАК ОперацияБ
		|ГДЕ
		|	ОперацияБ.Ссылка = &Ссылка";
		
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БюджетированиеДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	БюджетированиеДвиженияССубконто.СчетДт,
		|	БюджетированиеДвиженияССубконто.СубконтоДт1,
		|	БюджетированиеДвиженияССубконто.СубконтоДт2,
		|	БюджетированиеДвиженияССубконто.СубконтоДт3,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоДт1) КАК ПРЕДСТАВЛЕНИЕСубконтоДт1,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоДт2) КАК ПРЕДСТАВЛЕНИЕСубконтоДт2,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоДт3) КАК ПРЕДСТАВЛЕНИЕСубконтоДт3,
		|	БюджетированиеДвиженияССубконто.СчетКт,
		|	БюджетированиеДвиженияССубконто.СубконтоКт1,
		|	БюджетированиеДвиженияССубконто.СубконтоКт2,
		|	БюджетированиеДвиженияССубконто.СубконтоКт3,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоКт1) КАК ПРЕДСТАВЛЕНИЕСубконтоКт1,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоКт2) КАК ПРЕДСТАВЛЕНИЕСубконтоКт2,
		|	ПРЕДСТАВЛЕНИЕ(БюджетированиеДвиженияССубконто.СубконтоКт3) КАК ПРЕДСТАВЛЕНИЕСубконтоКт3,
		|	БюджетированиеДвиженияССубконто.Организация,
		|	БюджетированиеДвиженияССубконто.ВалютаДт,
		|	БюджетированиеДвиженияССубконто.ВалютаКт,
		|	БюджетированиеДвиженияССубконто.Сценарий,
		|	БюджетированиеДвиженияССубконто.ВалютнаяСуммаДт,
		|	БюджетированиеДвиженияССубконто.ВалютнаяСуммаКт,
		|	БюджетированиеДвиженияССубконто.КоличествоДт,
		|	БюджетированиеДвиженияССубконто.КоличествоКт,
		|	БюджетированиеДвиженияССубконто.СуммаСценария,
		|	БюджетированиеДвиженияССубконто.СуммаУпр,
		|	БюджетированиеДвиженияССубконто.ФинансовыйПоказатель
		|ИЗ
		|	РегистрБухгалтерии.фин_Бюджетирование.ДвиженияССубконто(, , Регистратор = &Регистратор ) КАК БюджетированиеДвиженияССубконто
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ВыборкаДвижений = Запрос.Выполнить().Выбрать();
		
		Макет = ПолучитьМакет("БухгалтерскаяСправка");
		
		// Получаем области макета для вывода в табличный документ.
		ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета по умолчанию.
		ТабДокумент.ПолеСверху              = 10;
		ТабДокумент.ПолеСлева               = 0;
		ТабДокумент.ПолеСнизу               = 0;
		ТабДокумент.ПолеСправа              = 0;
		ТабДокумент.РазмерКолонтитулаСверху = 10;
		ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
		
		// Загрузим настройки пользователя.
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацияБюджетирования_БухгалтерскаяСправка";

		// Выведем шапку документа.
		ШапкаДокумента.Параметры.Организация    = СокрЛП(Док.Организация.Наименование);
		ШапкаДокумента.Параметры.НомерДокумента = Док.Номер;
		ШапкаДокумента.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=D");
		ШапкаДокумента.Параметры.Содержание     = Док.Содержание;
		
		ТабДокумент.Вывести(ШапкаДокумента);
		
		// Выведем заголовок таблицы.
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		ОбщаяСуммаУпр 		= 0;
		ОбщаяСуммаСценария  = 0;
		КоличествоПроводок 	= 0;	
		// Выведем строки документа.
		Пока ВыборкаДвижений.Следующий() Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
			// Субконто Дт
			КоличествоСубконтоСчетаДт = ОпределитьДляСчетаКоличествоСубконто(ВыборкаДвижений.СчетДт, мКэшСоответствиеСчетов);
			АналитикаДт = "";
			Для Счетчик = 1 По КоличествоСубконтоСчетаДт Цикл
				АналитикаДт = АналитикаДт + ?(НЕ ЗначениеЗаполнено(ВыборкаДвижений["ПредставлениеСубконтоДТ" + Счетчик])
								, "<...>", ВыборкаДвижений["ПредставлениеСубконтоДТ" + Счетчик]);
				Если НЕ Счетчик = КоличествоСубконтоСчетаДт Тогда
					АналитикаДт = АналитикаДт + Символы.ПС;				
				КонецЕсли;
			КонецЦикла;	
			// Субконто Кт
			КоличествоСубконтоСчетаКт = ОпределитьДляСчетаКоличествоСубконто(ВыборкаДвижений.СчетКт, мКэшСоответствиеСчетов);
			АналитикаКт = "";
			Для Счетчик = 1 По КоличествоСубконтоСчетаКт Цикл
				АналитикаКт = АналитикаКт + ?(НЕ ЗначениеЗаполнено(ВыборкаДвижений["ПредставлениеСубконтоКТ" + Счетчик])
								, "<...>", ВыборкаДвижений["ПредставлениеСубконтоКТ" + Счетчик]);
				Если НЕ Счетчик = КоличествоСубконтоСчетаКт Тогда
					АналитикаКт = АналитикаКт + Символы.ПС;				
				КонецЕсли;
			КонецЦикла;	
							
			СтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
			СтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
			
			ОбщаяСуммаУпр = ОбщаяСуммаУпр + ВыборкаДвижений.СуммаУпр;
			
			// Проверим, помещается ли строка с подвалом.
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалДокумента);
			
			
			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ПодвалТаблицы.Параметры.ИтоговаяСтрока ="Всего корреспонденций:" + ВыборкаДвижений.Количество()
		+ ", на сумму " + ФорматСумм(ОбщаяСуммаУпр, мВалютаУпр);

		// Выведем подвал таблицы.
		ТабДокумент.Вывести(ПодвалТаблицы);
		
		// Выведем подвал документа.
		
		ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Ссылка.Ответственный), "", Строка(?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный,Ссылка.Ответственный.ФизическоеЛицо,Ссылка.Ответственный.ФизЛицо)));
		ТабДокумент.Вывести(ПодвалДокумента);

		
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции


// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", ЧРД = "", ВалютаПрописью = Ложь) Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)+
					?(НЕ ЗначениеЗаполнено(ЧРД),"", ";" + "ЧРД=" + ЧРД);
					
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Если ВалютаПрописью и НЕ СокрЛП(Валюта.ПараметрыПрописиНаРусском) = "" Тогда 
			СтрокаПараметров = СтрЗаменить(Валюта.ПараметрыПрописиНаРусском, ",", Символы.ПС);
			НовыеПараметрыПрописи = СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 1))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 2))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 3))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 4))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 5))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 6))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 7))+","+
									СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, 8))+","+ 0;
	
	
			ЗначимаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", НовыеПараметрыПрописи);
    		ЧисловаяЧасть = ЧислоПрописью(Цел(Сумма),"ru_RU; НП = Ложь; ДП = Ложь", ",,,,,,,,0");
            РезультирующаяСтрока = СтрЗаменить(ЗначимаяЧасть, ЧисловаяЧасть, РезультирующаяСтрока + " ");
		Иначе			
			РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
		КонецЕсли;	
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()


//Функция для счета возвращает количество субконто для него
Функция ОпределитьДляСчетаКоличествоСубконто(Знач Счет, СоответсвиеСчетов) Экспорт
	
	СоответсвиеСчетов = Новый Соответствие;
	
	КоличествоСубконтоСчета = СоответсвиеСчетов[Счет];
	Если КоличествоСубконтоСчета = -1
		ИЛИ КоличествоСубконтоСчета = Неопределено Тогда
		
		КоличествоСубконтоСчета = Счет.ВидыСубконто.Количество();
		СоответсвиеСчетов[Счет] = КоличествоСубконтоСчета;
		
	КонецЕсли;

	Возврат КоличествоСубконтоСчета;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли