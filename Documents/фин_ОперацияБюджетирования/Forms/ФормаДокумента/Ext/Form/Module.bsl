
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_НастройкаЗависимостейМеждуФинансовымиПоказателями", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели

		КонецЕсли;
		
	КонецЕсли;
	Для Инд = 1 По фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("МаксимальноеКоличествоСубконто") Цикл
		Элементы["СубконтоКт"+Строка(Инд)].Видимость = Истина;
		Элементы["СубконтоДт"+Строка(Инд)].Видимость = Истина;
	КонецЦикла;
	
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
    мОрганизация = Объект.Организация;
	мВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	НаборЗаписей = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["Регистратор"].Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ДвиженияБюджетирование.Загрузить(НаборЗаписей.Выгрузить());
	
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.Движенияфин_ФактическиеОборотыБюджетов);
	
	Если Объект.Движения.фин_ФактическиеОборотыБюджетов.Количество()>0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаФактическиеОборотыБюджетов;	
	ИначеЕсли Объект.Движения.фин_ОборотыБюджетов.Количество()>0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОборотыБюджетов;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	// Проверка ведения однофирменности
	Элементы.Организация.Видимость = Форма.БюджетированиеПоОрганизациям;
	
	
КонецПроцедуры
 

//Процедура установки типа субконто Номенклатура в зависимости от детализации сценария планирования
//
&НаСервере
Процедура УстановитьТипСубконтоНоменклатуры(ДетализацияПланирования,Счет,ТипСчета,Идентификатор)
	ТекущиеДанные = ДвиженияБюджетирование.НайтиПоИдентификатору(Идентификатор);
	//Элементы.Организация.ДоступныеТипы
	Если ДетализацияПланирования = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Для К = 0 По Счет.ВидыСубконто.Количество() - 1 Цикл
		//Элементы["Субконто"+ТипСчета+Строка(к+1)].Заголовок = Счет.ВидыСубконто[К].ВидСубконто.ТипЗначения;
		ТипСубконто   = Счет.ВидыСубконто[К].ВидСубконто.ТипЗначения;
		Если Счет.ВидыСубконто[К].ВидСубконто.Наименование="Номенклатура" Тогда // Выбираем по сценарию
			НадлежащийТип = Новый Массив();
			Если (НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЭтоУТ3()) И ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
				НадлежащийТип.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
			Иначе
				НадлежащийТип.Добавить(Тип("СправочникСсылка.Номенклатура"));
			КонецЕсли;
			мОписание = Новый ОписаниеТипов(НадлежащийТип);
			//ТекущиеДанные["Субконто"+ТипСчета+Строка(К)].Вставить(ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура,мОписание.ПривестиЗначение(ТекущиеДанные["Субконто"+ТипСчета+Строка(К)].Номенклатура));
			мОписание.ПривестиЗначение(ТекущиеДанные["Субконто"+ТипСчета+Строка(К+1)]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //УстановитьТипСубконтоНоменклатуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Пересчитывает сумму операции при изменении сумм в проводках.
//
&НаКлиенте
Процедура ПересчитатьСуммуОперации()
	Объект.СуммаОперацииСценарий = 0;
    Объект.СуммаОперацииУпр = 0;
	Для каждого Проводка Из ДвиженияБюджетирование Цикл
		Объект.СуммаОперацииСценарий = Объект.СуммаОперацииСценарий + Проводка.СуммаСценария;
		Объект.СуммаОперацииУпр = Объект.СуммаОперацииУпр + Проводка.СуммаУпр;
	КонецЦикла;

КонецПроцедуры // ПересчитатьСуммуОперации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Функция ПолучитьКоличествоДвиженийБюджетирование()
	мОбъект = РеквизитФормыВЗначение("Объект");
	Возврат мОбъект.Движения.фин_Бюджетирование.Количество()
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если НЕ (мОрганизация = Объект.Организация) Тогда
        Если НЕ (ПолучитьКоличествоДвиженийБюджетирование() = 0) Тогда
			мОрганизация = Объект.Организация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеПослеУдаления(Элемент)
	ПересчитатьСуммуОперации();
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПересчитатьСуммуОперации();
КонецПроцедуры

&НаСервере
Процедура РасчетСуммы(Идентификатор)
	СтрокаТЧ = ДвиженияБюджетирование.НайтиПоИдентификатору(Идентификатор);
	ТипСуммы = "СуммаУпр";
	Сценарий 					 = СтрокаТЧ.Сценарий;		
	ВалютаСценария				 = Сценарий.Валюта;
	Дата = Объект.Дата;
	Сценарий = СтрокаТЧ.Сценарий;
	ВалютаРегл                   = мВалютаРегламентированногоУчета;	
	СтруктураКурсыВалютыУпрУчета =фин_УправлениеБюджетированием.КурсВалютыПоСценарию(мВалютаУправленческогоУчета,Дата,Сценарий);
	СтруктураКурсыВалютыРеглУчета=фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаРегл,Дата,Сценарий);
	СтруктураКурсыВалютыСценария =фин_УправлениеБюджетированием.КурсВалютыПоСценарию(ВалютаСценария,Дата,Сценарий);		
	КурсВалютыУпрУчета           =СтруктураКурсыВалютыУпрУчета.Курс;
	КратностьВалютыУпрУчета      =СтруктураКурсыВалютыУпрУчета.Кратность;
	КурсВалютыРеглУчета          =СтруктураКурсыВалютыРеглУчета.Курс;
	КратностьВалютыРеглУчета     =СтруктураКурсыВалютыРеглУчета.Кратность;	
	КурсВалютыСценария           =СтруктураКурсыВалютыСценария.Курс;
	КратностьВалютыСценария      =СтруктураКурсыВалютыСценария.Кратность;
	СтруктураКурсыВалютыОперации =фин_УправлениеБюджетированием.КурсВалютыПоСценарию(СтрокаТЧ.ВалютаДт,Дата,Сценарий);
    КурсВалютыОперацииДт         =СтруктураКурсыВалютыОперации.Курс;
	КратностьВалютыОперацииДт    =СтруктураКурсыВалютыОперации.Кратность;	
	СтруктураКурсыВалютыОперации =фин_УправлениеБюджетированием.КурсВалютыПоСценарию(СтрокаТЧ.ВалютаКт,Дата,Сценарий);
    КурсВалютыОперацииКт         =СтруктураКурсыВалютыОперации.Курс;
	КратностьВалютыОперацииКт    =СтруктураКурсыВалютыОперации.Кратность;	
	Если ТипСуммы="СуммаУпр" Тогда		
		Если СтрокаТЧ.СчетДТ.Валютный И НЕ СтрокаТЧ.ВалютаДТ = Неопределено Тогда			
			СтрокаТЧ.ВалютнаяСуммаДТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, мВалютаУправленческогоУчета, СтрокаТЧ.ВалютаДТ, КурсВалютыУпрУчета, КурсВалютыОперацииДт, 
								КратностьВалютыУпрУчета, КратностьВалютыОперацииДт);			
		КонецЕсли;		
		Если СтрокаТЧ.СчетКт.Валютный И НЕ СтрокаТЧ.ВалютаКТ = Неопределено Тогда			
			СтрокаТЧ.ВалютнаяСуммаКТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, мВалютаУправленческогоУчета, СтрокаТЧ.ВалютаКт, КурсВалютыУпрУчета, КурсВалютыОперацииКт, 
								КратностьВалютыУпрУчета, КратностьВалютыОперацииКт);			
		КонецЕсли;	
		Если НЕ Сценарий.Пустая() Тогда			
			СтрокаТЧ.СуммаСценария=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаУпр, мВалютаУправленческогоУчета, ВалютаСценария, КурсВалютыУпрУчета, КурсВалютыСценария, 
								КратностьВалютыУпрУчета, КратностьВалютыСценария);			
		КонецЕсли;		
	ИначеЕсли ТипСуммы="ВалютнаяСуммаДт" Тогда		
		СтрокаТЧ.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаДт, СтрокаТЧ.ВалютаДт, мВалютаУправленческогоУчета,КурсВалютыОперацииДт ,КурсВалютыУпрУчета, 
								КратностьВалютыОперацииДт,КратностьВалютыУпрУчета);								
		Если СтрокаТЧ.СчетКт.Валютный И НЕ СтрокаТЧ.ВалютаКТ = Неопределено Тогда			
			СтрокаТЧ.ВалютнаяСуммаКТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаДт, СтрокаТЧ.ВалютаДт, СтрокаТЧ.ВалютаКт, КурсВалютыОперацииДт, КурсВалютыОперацииКт, 
								КратностьВалютыОперацииДт, КратностьВалютыОперацииКт);			
		КонецЕсли;						
		Если НЕ Сценарий.Пустая() Тогда						
			СтрокаТЧ.СуммаСценария=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаДт,СтрокаТЧ.ВалютаДт,ВалютаСценария,КурсВалютыОперацииДт ,КурсВалютыСценария, 
								КратностьВалютыОперацииДт,КратностьВалютыСценария);
		КонецЕсли;		
	ИначеЕсли ТипСуммы="ВалютнаяСуммаКт" Тогда		
		СтрокаТЧ.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаКт, СтрокаТЧ.ВалютаКт, мВалютаУправленческогоУчета,КурсВалютыОперацииКт ,КурсВалютыУпрУчета, 
								КратностьВалютыОперацииКт,КратностьВалютыУпрУчета);								
		Если СтрокаТЧ.СчетДт.Валютный И НЕ СтрокаТЧ.ВалютаДТ = Неопределено Тогда			
			СтрокаТЧ.ВалютнаяСуммаДТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаКт, СтрокаТЧ.ВалютаКт, СтрокаТЧ.ВалютаДт, КурсВалютыОперацииКт, КурсВалютыОперацииДт, 
								КратностьВалютыОперацииКт, КратностьВалютыОперацииДт);			
		КонецЕсли;						
		Если НЕ Сценарий.Пустая() Тогда						
			СтрокаТЧ.СуммаСценария=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.ВалютнаяСуммаКт,СтрокаТЧ.ВалютаКт,ВалютаСценария,КурсВалютыОперацииКт ,КурсВалютыСценария, 
								КратностьВалютыОперацииКт,КратностьВалютыСценария);
		КонецЕсли;							
	ИначеЕсли ТипСуммы="СуммаСценария" Тогда					
        Если СтрокаТЧ.СчетДт.Валютный И НЕ СтрокаТЧ.ВалютаДТ = Неопределено Тогда
			
			СтрокаТЧ.ВалютнаяСуммаДТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, СтрокаТЧ.ВалютаДТ, КурсВалютыСценария, КурсВалютыОперацииДт, 
								КратностьВалютыСценария, КратностьВалютыОперацииДт);
		КонецЕсли;
		Если СтрокаТЧ.СчетКт.Валютный И НЕ СтрокаТЧ.ВалютаКТ = Неопределено Тогда
			
			СтрокаТЧ.ВалютнаяСуммаКТ=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, СтрокаТЧ.ВалютаКт, КурсВалютыСценария, КурсВалютыОперацииКт, 
								КратностьВалютыСценария, КратностьВалютыОперацииКт);	
		КонецЕсли;		
		СтрокаТЧ.СуммаУпр=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаСценария, ВалютаСценария, мВалютаУправленческогоУчета, КурсВалютыСценария, КурсВалютыУпрУчета, 
								КратностьВалютыСценария, КратностьВалютыУпрУчета);								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеСценарийПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ТекущиеДанные.Сценарий) Тогда
		Сценарий = ТекущиеДанные.Сценарий;
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
			Счет = ТекущиеДанные.СчетДт;
			УстановитьТипСубконтоНоменклатуры(Сценарий.ДетализацияПланирования,Счет,"Дт",Идентификатор);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетКт) Тогда
			Счет = ТекущиеДанные.СчетКт;
			УстановитьТипСубконтоНоменклатуры(Сценарий.ДетализацияПланирования,Счет,"Кт",Идентификатор);
		КонецЕсли;
		РасчетСуммы(ТекущиеДанные.ПолучитьИдентификатор());
		//РасчетСумм("СуммаУпр",Элементы.ТабличноеПолеДвиженияБД.ТекущаяСтрока);
	Иначе
		ТекущиеДанные.СуммаСценария = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеСчетДтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	Сценарий = ТекущиеДанные.Сценарий;
	УстановитьТипСубконтоНоменклатуры(Сценарий.ДетализацияПланирования,ТекущиеДанные.СчетДт,"Дт",Идентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеВалютаДтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	РасчетСуммы(ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеСчетКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	СтрокаТЧ = ТекущиеДанные;
	Сценарий = ТекущиеДанные.Сценарий;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	УстановитьТипСубконтоНоменклатуры(Сценарий.ДетализацияПланирования,ТекущиеДанные.СчетКт,"Кт",Идентификатор);
	Если СтрокаТЧ.КоличествоКт = 0 Тогда
		Если СтрокаТЧ.СчетКт.Количественный Тогда
			СтрокаТЧ.КоличествоКт = СтрокаТЧ.КоличествоДт;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеВалютаКтПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	РасчетСуммы(ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеСуммаУпрПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДвиженияБюджетирование.ТекущиеДанные;
	РасчетСуммы(ТекущиеДанные.ПолучитьИдентификатор());
	ПересчитатьСуммуОперации();
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБюджетированиеСуммаСценарияПриИзменении(Элемент)
	ПересчитатьСуммуОперации();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Бюджетирование
	НаборЗаписей = РегистрыБухгалтерии.фин_Бюджетирование.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["Регистратор"].Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Очистить();
	Для каждого СтрокаТЧ из ДвиженияБюджетирование Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ВалютаДт = СтрокаТЧ.ВалютаДт;
		НоваяЗапись.ВалютаКт = СтрокаТЧ.ВалютаКт;
		НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.ВалютнаяСуммаДт;
		НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.ВалютнаяСуммаКт;
		НоваяЗапись.КоличествоДт = СтрокаТЧ.КоличествоДт;
		НоваяЗапись.КоличествоКт = СтрокаТЧ.КоличествоКт;
		Если БюджетированиеПоОрганизациям Тогда
			НоваяЗапись.Организация = ТекущийОбъект.Организация;
		КонецЕсли;
		НоваяЗапись.Период = ТекущийОбъект.Дата;
		//НоваяЗапись.СубконтоДт = СтрокаТЧ.СубконтоДт;
		//НоваяЗапись.СубконтоКт = СтрокаТЧ.СубконтоКт;
		НоваяЗапись.СуммаСценария = СтрокаТЧ.СуммаСценария;
		НоваяЗапись.СуммаУпр = СтрокаТЧ.СуммаУпр;
		НоваяЗапись.Сценарий = СтрокаТЧ.Сценарий;
		НоваяЗапись.СчетДт = СтрокаТЧ.СчетДт;
		НоваяЗапись.СчетКт = СтрокаТЧ.СчетКт;
		НоваяЗапись.ФинансовыйПоказатель = СтрокаТЧ.ФинансовыйПоказатель;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура Движенияфин_ФактическиеОборотыБюджетовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Строка = Элемент.ТекущиеДанные;
	Строка.Период = Объект.Дата;
	Если БюджетированиеПоОрганизациям Тогда 
		Строка.Организация     = Объект.Организация;
	КонецЕсли;
КонецПроцедуры
