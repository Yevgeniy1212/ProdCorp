
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийформы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтотОбъект);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.БюджетныеОперации);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка = Истина;
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
	Оповестить("Запись_фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтклоненияПриИзменении(Элемент)
	ПричинаОтклоненияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	СценарийПланированияПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьИсправительныеПредупредительныеМерыПриИзменении(Элемент)
	Если НЕ Объект.ПланироватьИсправительныеПредупредительныеМеры Тогда
		Объект.Исполнители.Очистить();
		Объект.ОтветственныйЗаПринятиеМер = Неопределено;
		Объект.Мероприятие = ПредопределенноеЗначение("Справочник.фин_МероприятияБюджетногоПроцесса.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаКорреспондирующейОперацииПоРасценкамПриИзменении(Элемент)
	Если Объект.СуммаКорреспондирующейОперацииПоРасценкам Тогда
		БазоваяСтрока = Объект.БюджетныеОперации[0];
		СтруктураРасчета = Новый Структура("Период,ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Валюта");
		ЗаполнитьЗначенияСвойств(СтруктураРасчета,Объект.БюджетныеОперации[1]);
		СтруктураРасчета.Вставить("СценарийПланирования",Объект.Сценарий);
		Объект.БюджетныеОперации[1].Сумма = - РассчитатьСуммуПоРасценкам(БазоваяСтрока.Количество,СтруктураРасчета);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаПринятиеМерПриИзменении(Элемент)
	Объект.Исполнители.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.ОтветственныйЗаПринятиеМер) Тогда
		Возврат;
	КонецЕсли;
	ОтветственныйЗаПринятиеМерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БазоваяОперацияПериодПриИзменении(Элемент)
	Если Элементы.БюджетныеОперации.ТекущиеДанные.Период<>'00010101' Тогда
		Элементы.БюджетныеОперации.ТекущиеДанные.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Элементы.БюджетныеОперации.ТекущиеДанные.Период,Периодичность); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И ВидСтруктурногоОтклонения<>ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоПериоду") Тогда
		ПередатьЗначение("Период");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазоваяОперацияАналитикаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И ВидСтруктурногоОтклонения=ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоПериоду") Тогда
		ПередатьЗначение(СтрЗаменить(Элемент.Имя,"БазоваяОперация",""));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазоваяОперацияВалютаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения)  Тогда
		ПередатьЗначение(СтрЗаменить(Элемент.Имя,"БазоваяОперация",""));
		Если Объект.СуммаКорреспондирующейОперацииПоРасценкам Тогда
			СтруктураРасчета = Новый Структура("Период,ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Валюта");
			ЗаполнитьЗначенияСвойств(СтруктураРасчета,Объект.БюджетныеОперации[1]);
			СтруктураРасчета.Вставить("СценарийПланирования",Объект.Сценарий);
			Объект.БюджетныеОперации[1].Сумма = - РассчитатьСуммуПоРасценкам(Объект.БюджетныеОперации[0].Количество,СтруктураРасчета);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазоваяОперацияСуммаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И НЕ Объект.СуммаКорреспондирующейОперацииПоРасценкам  Тогда
		Объект.БюджетныеОперации[1].Сумма = - Объект.БюджетныеОперации[0].Сумма;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БазоваяОперацияКоличествоПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения)  Тогда
		Объект.БюджетныеОперации[1].Количество = - Объект.БюджетныеОперации[0].Количество;
		Если ПолеОбъекта(Объект.БюджетныеОперации[0].ФинансовыйПоказатель,"УчетПоСумме") Тогда
			Если Объект.БюджетныеОперации[0].Сумма = 0 Тогда
				СтруктураРасчета = Новый Структура("Период,ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Валюта");
				ЗаполнитьЗначенияСвойств(СтруктураРасчета,Объект.БюджетныеОперации[0]);
				СтруктураРасчета.Вставить("СценарийПланирования",Объект.Сценарий);
				Объект.БюджетныеОперации[0].Сумма = РассчитатьСуммуПоРасценкам(Объект.БюджетныеОперации[0].Количество,СтруктураРасчета);
				Если НЕ Объект.СуммаКорреспондирующейОперацииПоРасценкам Тогда
					Объект.БюджетныеОперации[1].Сумма = - Объект.БюджетныеОперации[0].Сумма;
				КонецЕсли;
			КонецЕсли;
			Если Объект.СуммаКорреспондирующейОперацииПоРасценкам Тогда
				СтруктураРасчета = Новый Структура("Период,ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Валюта");
				ЗаполнитьЗначенияСвойств(СтруктураРасчета,Объект.БюджетныеОперации[1]);
				СтруктураРасчета.Вставить("СценарийПланирования",Объект.Сценарий);
				Объект.БюджетныеОперации[1].Сумма = - РассчитатьСуммуПоРасценкам(Объект.БюджетныеОперации[0].Количество,СтруктураРасчета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорреспондирующаяОперацияПолеПриИзменении(Элемент)
	Если Период<>'00010101' Тогда
		Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Период,Периодичность); 
	КонецЕсли;
	ИмяПоля = СтрЗаменить(Элемент.Имя,"КорреспондирующаяОперация","");
	Если ИмяПоля = "ФинансовыйПоказатель" Тогда
		ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель);
		Номенклатура = ОписаниеТипов.ПривестиЗначение(Номенклатура);
		Объект.БюджетныеОперации[1]["Номенклатура"] = ЭтотОбъект["Номенклатура"];
		Элементы.КорреспондирующаяОперацияНоменклатура.ОграничениеТипа = ОписаниеТипов;
		ОбработатьИзменениеПоказателя(Объект.БюджетныеОперации[1]);
		ОбработатьИзменениеПоказателя(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	Объект.БюджетныеОперации[1][ИмяПоля] = ЭтотОбъект[ИмяПоля];
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

#Область ОбработчикиСобытийТаблицыБюджетныеОперации

&НаКлиенте
Процедура БюджетныеОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
				Элементы.БюджетныеОперации.ТекущиеДанные[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,Элементы.БюджетныеОперации.ТекущиеДанные[Пара.Представление]);
			КонецЦикла;
			Элементы.БюджетныеОперации.ТекущиеДанные.Период = Объект.ДатаНачала;
			Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель = Объект.ФинансовыйПоказатель;
			Элементы.БюджетныеОперации.ТекущиеДанные.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
			Элементы.БюджетныеОперации.ТекущиеДанные.Валюта = ВалютаРегл;
		КонецЕсли;
	КонецЕсли;
	ОписаниеТипов = ОписаниеТиповНоменклатурногоПеречня(Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель);
	Элементы.БюджетныеОперацииНоменклатура.ОграничениеТипа = ОписаниеТипов;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БюджетныеОперации.ТекущиеДанные;
	ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ФинансовыйПоказатель);
	ТекущиеДанные.Номенклатура = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Номенклатура);
	Элементы.БюджетныеОперацииНоменклатура.ОграничениеТипа = ОписаниеТипов;
	Элементы.БазоваяОперацияНоменклатура.ОграничениеТипа = ОписаниеТипов;
	ОбработатьИзменениеПоказателя(ТекущиеДанные);
	Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И ВидСтруктурногоОтклонения<>ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоСтатье") Тогда
		ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ФинансовыйПоказатель);
		Номенклатура = ОписаниеТипов.ПривестиЗначение(Номенклатура);
		Объект.БюджетныеОперации[1]["Номенклатура"] = ЭтотОбъект["Номенклатура"];
		Элементы.КорреспондирующаяОперацияНоменклатура.ОграничениеТипа = ОписаниеТипов;
		ПередатьЗначение("ФинансовыйПоказатель");
		ОбработатьИзменениеПоказателя(Объект.БюджетныеОперации[1]);
		ОбработатьИзменениеПоказателя(ЭтотОбъект);
	КонецЕсли;
	Если НЕ СписокОпераций Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииПериодПриИзменении(Элемент)
	Если Элементы.БюджетныеОперации.ТекущиеДанные.Период<>'00010101' Тогда
		Элементы.БюджетныеОперации.ТекущиеДанные.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Элементы.БюджетныеОперации.ТекущиеДанные.Период,Периодичность); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",ПараметрыВыбораСтатьи(Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель),Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.фин_СтатьиБюджета") Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель = ФинансовыйПоказатель(ВыбранноеЗначение);
		БюджетныеОперацииФинансовыйПоказательПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка Тогда
		Отказ = Истина;
		ОткрытьРедактор(?(Копирование,Элементы.БюджетныеОперации.ТекущаяСтрока,Неопределено),Копирование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка Тогда
		Отказ = Истина;
		ОткрытьРедактор(Элементы.БюджетныеОперации.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура РедактированиеСписком(Команда)
	СписокОпераций = НЕ СписокОпераций;
	Элементы.ФормаРедактированиеСписком.Пометка = СписокОпераций;
	Если НЕ СписокОпераций Тогда
		НастроитьДокументПоВидуОтклонения();
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНаличияПозицийВПлане(Команда)
	КонтрольНаличияПозицийВПланеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораИзСтатейБюджетов(Команда)
	Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка = НЕ Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтрокуВОтдельномОкне(Команда)
	Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка = НЕ Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#Область ПроцедурыУправленияФормой

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("БюджетныеОперации");
	СписокТЧ.Добавить("БазоваяОперация");
	СписокТЧ.Добавить("КорреспондирующаяОперация");
	НастроитьРазрезыБюджета(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов"),СписокТЧ);
	
	ВидСтруктурногоОтклонения = Объект.ПричинаОтклонения.ВидСтруктурногоОтклонения;
	мВидСтруктурногоОтклонения = ВидСтруктурногоОтклонения;

	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание) ИЛИ (ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) И ТипЗнч(Параметры.ЗначенияЗаполнения)=Тип("Структура") И Параметры.ЗначенияЗаполнения.Свойство("ОтборДляРасшифровки"))) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Объект.Сценарий 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
			Объект.Состояние 	= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
			Если БюджетированиеПоОрганизациям Тогда
				Объект.Организация 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
			Если Объект.БюджетныеОперации.Количество()=0 Тогда
				НоваяСтрока = Объект.БюджетныеОперации.Добавить();
				Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
					НоваяСтрока[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,Неопределено);
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И Объект.БюджетныеОперации.Количество()=1 Тогда
				НоваяСтрока = Объект.БюджетныеОперации.Добавить();
				Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
					НоваяСтрока[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,Неопределено);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	мОрганизация= Объект.Организация;
	Если Объект.БюджетныеОперации.Количество()>0 Тогда
		Элементы.БюджетныеОперации.ТекущаяСтрока = Объект.БюджетныеОперации[0].ПолучитьИдентификатор();
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.СтраницыОперации.ТекущаяСтраница = ?(Форма.СписокОпераций,Элементы.СтраницаСписок,Элементы.СтраницаОперация);
	Элементы.ГруппаПринимаемыеМеры.Видимость = Объект.ПланироватьИсправительныеПредупредительныеМеры;
	
	СписокРазрезов = ВсеРазрезы();
	
	ВидСтруктурногоОтклонения = Форма.ВидСтруктурногоОтклонения;
	Если НЕ ЗначениеЗаполнено(Форма.ВидСтруктурногоОтклонения) Тогда
		Элементы.ГруппаКорреспондирующаяОперация.Видимость = Ложь;
		Элементы.СуммаКорреспондирующейОперацииПоРасценкам.Видимость = Ложь;
		Если (НЕ Форма.СписокОпераций) И Объект.БюджетныеОперации.Количество()>0 Тогда
			БазоваяСтрока = Объект.БюджетныеОперации.НайтиПоИдентификатору(Элементы.БюджетныеОперации.ТекущаяСтрока);
			Если БазоваяСтрока<>Неопределено Тогда
				ФинансовыйПоказатель = БазоваяСтрока.ФинансовыйПоказатель;
				РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ФинансовыйПоказатель);
				Для Каждого Разрез Из СписокРазрезов Цикл
					Элементы["БазоваяОперация"+Разрез].Видимость = РазрезыФинансовогоПоказателя.НайтиПоЗначению(Разрез)<>Неопределено;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаКорреспондирующаяОперация.Видимость = Истина;
		Элементы.СуммаКорреспондирующейОперацииПоРасценкам.Видимость = Истина;
		Элементы.КорреспондирующаяОперацияПериод.ТолькоПросмотр 				= НЕ ВидСтруктурногоОтклонения = ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоПериоду");
		Элементы.КорреспондирующаяОперацияФинансовыйПоказатель.ТолькоПросмотр 	= НЕ ВидСтруктурногоОтклонения = ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоСтатье");
		Элементы.ГруппаАналитикаКорреспондирующейОперации.ТолькоПросмотр 		= НЕ (ВидСтруктурногоОтклонения = ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоСтатье") ИЛИ ВидСтруктурногоОтклонения = ПредопределенноеЗначение("Перечисление.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоАналитике"));
		Элементы.ГруппаСуммаИВалюта.Видимость									= Объект.БюджетныеОперации.Количество()>0 И ПолеОбъекта(Объект.БюджетныеОперации[0].ФинансовыйПоказатель,"УчетПоСумме");
		Элементы.БазоваяОперацияКоличество.Видимость							= Объект.БюджетныеОперации.Количество()>0 И ПолеОбъекта(Объект.БюджетныеОперации[0].ФинансовыйПоказатель,"УчетПоКоличеству");
		Если (НЕ Форма.СписокОпераций) И Объект.БюджетныеОперации.Количество()>0 Тогда
			БазоваяСтрока = Объект.БюджетныеОперации.НайтиПоИдентификатору(Элементы.БюджетныеОперации.ТекущаяСтрока);
			Если БазоваяСтрока<>Неопределено Тогда
				ФинансовыйПоказатель = БазоваяСтрока.ФинансовыйПоказатель;
				РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ФинансовыйПоказатель);
				Для Каждого Разрез Из СписокРазрезов Цикл
					Элементы["БазоваяОперация"+Разрез].Видимость = РазрезыФинансовогоПоказателя.НайтиПоЗначению(Разрез)<>Неопределено;
				КонецЦикла;
			КонецЕсли;
			Если Объект.БюджетныеОперации.Количество()>1 Тогда
				ВтораяСтрока = Объект.БюджетныеОперации.НайтиПоИдентификатору(Объект.БюджетныеОперации[1].ПолучитьИдентификатор());
				Если ВтораяСтрока<>Неопределено Тогда
					ФинансовыйПоказатель = ВтораяСтрока.ФинансовыйПоказатель;
					РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ФинансовыйПоказатель);
					Для Каждого Разрез Из СписокРазрезов Цикл
						Элементы["КорреспондирующаяОперация"+Разрез].Видимость = РазрезыФинансовогоПоказателя.НайтиПоЗначению(Разрез)<>Неопределено;
					КонецЦикла;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(форма,ВтораяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	

КонецПроцедуры 

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель);
КонецФункции

&НаСервере
Функция ПолучитьИмяРазреза(Значение)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Значение)
КонецФункции

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета(ПереченьРазрезов,СписокТЧ)
	ОбработанныеРазрезы=Новый Массив;
	Для Каждого Разрез Из ПереченьРазрезов Цикл
		//ИмяРазреза = фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Разрез.Значение);
		ИмяРазреза = ПолучитьИмяРазреза(Разрез.Значение);
		СоответствиеРазрезовИзмерениям.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение),ИмяРазреза);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение);
		ЭтотОбъект["ТипРазреза"+НомерРазреза]=ЭлементПВХ;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ+"Разрез"+НомерРазреза].Видимость 	= Истина;
		КонецЦикла;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы[ТЧ+"Разрез"+НомерРазреза].Заголовок = ?(СокрЛП(ЭлементПВХ.ПредставлениеДополнительногоРеквизита)="",Строка(ЭлементПВХ),ЭлементПВХ.ПредставлениеДополнительногоРеквизита);
			Элементы[ТЧ+"Разрез"+НомерРазреза].ОграничениеТипа = ЭлементПВХ.ТипЗначения;
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		//Элементы["БюджетныеОперацииРазрез"+НомерРазреза]
		ИмяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(имяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Элементы[ТЧ+ИмяЭлемента].Видимость 			= Ложь;
				//Элементы["БюджетныеОперации"+ИмяЭлемента].ИзменятьВидимость 	= Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПриведенноеЗначение(ЭлементПВХ,Значение)
	Возврат ?(ЗначениеЗаполнено(ЭлементПВХ),ЭлементПВХ.ТипЗначения.ПривестиЗначение(Значение),Неопределено);	
КонецФункции

&НаСервере
Процедура ПричинаОтклоненияПриИзмененииНаСервере()
	ВидСтруктурногоОтклонения = Объект.ПричинаОтклонения.ВидСтруктурногоОтклонения;
	НастроитьДокументПоВидуОтклонения();
	мВидСтруктурногоОтклонения = ВидСтруктурногоОтклонения;
КонецПроцедуры

&НаСервере
Процедура НастроитьДокументПоВидуОтклонения()
	Если НЕ СписокОпераций Тогда
		Пока Объект.БюджетныеОперации.Количество()>?(ЗначениеЗаполнено(ВидСтруктурногоОтклонения),2,1) Цикл
			Объект.БюджетныеОперации.Удалить(Объект.БюджетныеОперации[Объект.БюджетныеОперации.Количество()-1]);
		КонецЦикла;
		Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) Тогда
			Если Объект.БюджетныеОперации.Количество()<2 Тогда
				Пока Объект.БюджетныеОперации.Количество()<2 Цикл
					НоваяСтрока = Объект.БюджетныеОперации.Добавить();
					Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
						НоваяСтрока[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,Неопределено);
					КонецЦикла;
					Если НоваяСтрока<>Объект.БюджетныеОперации[0] Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект.БюджетныеОперации[0]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаБазовая 	= Объект.БюджетныеОперации[0];
			СтрокаВторая 	= Объект.БюджетныеОперации[1];
			Если ВидСтруктурногоОтклонения = Перечисления.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоПериоду Тогда
				ЗаполнитьЗначенияСвойств(СтрокаВторая,СтрокаБазовая,,"Период");
			ИначеЕсли ВидСтруктурногоОтклонения = Перечисления.фин_ВидыСтруктурныхОтклонений.ОтклонениеПоАналитике И мВидСтруктурногоОтклонения<>ВидСтруктурногоОтклонения И СтрокаБазовая.ФинансовыйПоказатель<>СтрокаВторая.ФинансовыйПоказатель Тогда
				ЗаполнитьЗначенияСвойств(СтрокаВторая,СтрокаБазовая);
			Иначе 
				ЗаполнитьЗначенияСвойств(СтрокаВторая,СтрокаБазовая,"Период");
			КонецЕсли;
			СтрокаВторая.Сумма = - СтрокаБазовая.Сумма;
			СтрокаВторая.Количество = - СтрокаБазовая.Количество;
		КонецЕсли;
		Элементы.БюджетныеОперации.ТекущаяСтрока = Объект.БюджетныеОперации[0].ПолучитьИдентификатор();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрезыФинансовогоПоказателя(ФинансовыйПоказатель)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокИменРазрезовПоказателя(ФинансовыйПоказатель);	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеРазрезы()
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();	
КонецФункции

&НаКлиенте
Процедура ПередатьЗначение(ИмяПоля)
	БазоваяСтрока = Объект.БюджетныеОперации[0];
	Если Объект.БюджетныеОперации.Количество()>1 Тогда
		ВтораяСтрока = Объект.БюджетныеОперации[1];
		ВтораяСтрока[ИмяПоля] 	= БазоваяСтрока[ИмяПоля];
		Если ИмяПоля<>"Валюта" Тогда
			ЭтотОбъект[ИмяПоля] 		= БазоваяСтрока[ИмяПоля];
		КонецЕсли;
	Иначе
		ВтораяСтрока = Объект.БюджетныеОперации.Добавить();
		ЗаполнитьЗначенияСвойств(ВтораяСтрока,БазоваяСтрока);
		Если НЕ Объект.СуммаКорреспондирующейОперацииПоРасценкам Тогда
			ВтораяСтрока.Сумма = - БазоваяСтрока.Сумма;
		Иначе
			СтруктураРасчета = Новый Структура("Период,ФинансовыйПоказатель,УправленческоеПодразделение,Проект,Контрагент,Номенклатура,Валюта");
			ЗаполнитьЗначенияСвойств(СтруктураРасчета,ВтораяСтрока);
			СтруктураРасчета.Вставить("СценарийПланирования",Объект.Сценарий);
			ВтораяСтрока.Сумма = - РассчитатьСуммуПоРасценкам(БазоваяСтрока.Количество,СтруктураРасчета);
		КонецЕсли;
		ВтораяСтрока.Количество = - БазоваяСтрока.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоказателя(СтрокаДокумента)
	СписокРазрезов = ВсеРазрезы();
	ФинансовыйПоказатель = СтрокаДокумента.ФинансовыйПоказатель;
	РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ФинансовыйПоказатель);
	Для Каждого Разрез Из СписокРазрезов Цикл
		Если РазрезыФинансовогоПоказателя.НайтиПоЗначению(Разрез)=Неопределено Тогда
			Если Найти(Разрез,"Разрез")=0 Тогда
				СтрокаДокумента[Разрез] = "";
			Иначе
				СтрокаДокумента[Разрез] = ПриведенноеЗначение(ЭтотОбъект["Тип"+СтрЗаменить(Разрез,"Разрез","Разреза")],Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзмененииНаКлиенте()
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	Для Каждого СтрокаОперации Из Объект.БюджетныеОперации Цикл
		СтрокаОперации.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОперации.Период,Периодичность); 
	КонецЦикла;
	Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Период,Периодичность); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуПоРасценкам(Количество,ПараметрыРасчета)
	Если ПараметрыРасчета.ФинансовыйПоказатель.УчетПоСумме = Ложь Тогда
		Возврат 0;
	КонецЕсли;
	ПараметрыРасчета.Вставить("ВалютаОперации",ПараметрыРасчета.Валюта);
	ПараметрыРасчета.Вставить("Цена",0);
	ПараметрыРасчета.Вставить("Сумма",0);
	ПараметрыРасчета.Вставить("Количество",Количество);
	фин_ПроцедурыУправленияПлановымЦенообразованием.УстановитьЦенуПоУмолчанию(ПараметрыРасчета,ПараметрыРасчета.СценарийПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПроектам"),ПараметрыРасчета.Период);
	Возврат ПараметрыРасчета.Сумма;
КонецФункции

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,Поле)
	Возврат ОбъектДанных[Поле];	
КонецФункции

&НаСервере
Процедура ОтветственныйЗаПринятиеМерПриИзмененииНаСервере()
	Объект.Исполнители.Загрузить(фин_ПроцедурыКалендарногоПланирования.ТаблицаИсполнителей(Объект.ОтветственныйЗаПринятиеМер));
КонецПроцедуры

&НаСервере
Процедура КонтрольНаличияПозицийВПланеНаСервере()
	Если СписокОпераций Тогда
		Для Каждого СтрокаДокумента Из Объект.БюджетныеОперации Цикл
			Если НЕ Документы.фин_РассмотрениеОтклоненийФактическихДанных.КонтрольНаличияВПлане(Объект,СтрокаДокумента) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные строки №"+СтрокаДокумента.НомерСтроки+" не обнаружены в планах!");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ Документы.фин_РассмотрениеОтклоненийФактическихДанных.КонтрольНаличияВПлане(Объект,Объект.БюджетныеОперации[0]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные рассматриваемой операции не обнаружены в планах!");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидСтруктурногоОтклонения) И НЕ Документы.фин_РассмотрениеОтклоненийФактическихДанных.КонтрольНаличияВПлане(Объект,Объект.БюджетныеОперации[1]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные корреспондирующей операции не обнаружены в планах!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборАнализируемаяОперация(Команда)
	ТекущиеДанные = Объект.БюджетныеОперации[0];
	СтруктураОтбора = Новый Структура("Организация,Сценарий,ПериодПланирования,ФинансовыйПоказатель",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Период,ТекущиеДанные.ФинансовыйПоказатель);
	РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ТекущиеДанные.ФинансовыйПоказатель);
	Для Каждого РазрезЭлемент Из РазрезыФинансовогоПоказателя Цикл
		Разрез = РазрезЭлемент.Значение;
		Если Найти(Разрез,"Разрез")=0 И ЗначениеЗаполнено(ТекущиеДанные[Разрез]) Тогда
			СтруктураОтбора.Вставить(Разрез,ТекущиеДанные[Разрез]);
		КонецЕсли;
	КонецЦикла;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораСтроки",ЭтотОбъект,0);
	ОткрытьФорму("РегистрНакопления.фин_ОборотыБюджетов.ФормаСписка",Новый Структура("Отбор,РежимВыбора",СтруктураОтбора,Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияВыбораСтроки(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект.БюджетныеОперации[ДополнительныеПараметры],РезультатВыбора,,"Количество");
		РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(Объект.БюджетныеОперации[ДополнительныеПараметры].ФинансовыйПоказатель);
		Для Каждого РазрезЭлемент Из РазрезыФинансовогоПоказателя Цикл
			Разрез = РазрезЭлемент.Значение;
			Если Найти(Разрез,"Разрез")<>0 Тогда
				Объект.БюджетныеОперации[ДополнительныеПараметры][Разрез] = ПолеОбъекта(РезультатВыбора.ДополнительныеРазрезы,Разрез);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БюджетныеОперацииКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БюджетныеОперации.ТекущиеДанные;
	Если ТекущиеДанные.Количество<>0 И ТекущиеДанные.Цена<>0 Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВыбораСтатьи(ФинансовыйПоказатель)
	Статья = фин_ПроцедурыМеханизмовБюджетирования.ОпределитьСтатьюБюджетаПоПоказателю(ФинансовыйПоказатель);
	Структура = Новый Структура("ТекущаяСтрока",Статья);
	Если ЗначениеЗаполнено(Статья) Тогда
		Структура.Вставить("Отбор",Новый Структура("Владелец",Статья.Владелец));
	КонецЕсли;
	Возврат структура;
КонецФункции

&НаСервереБезКонтекста
Функция ФинансовыйПоказатель(СтатьяБюджета)
	Возврат СтатьяБюджета.ФинансовыйПоказатель;	
КонецФункции

&НаКлиенте
Процедура ОткрытьРедактор(ИдентификаторСтроки=Неопределено,Копирование=Ложь)
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ФинансовыйПоказатель,Период",Объект.ФинансовыйПоказатель,Объект.ДатаНачала);
	Иначе
		СтрокаДокумента = Объект.БюджетныеОперации.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураПараметров = ПустаяСтруктура();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтрокаДокумента);
	КонецЕсли;
	СтруктураПараметров.Вставить("РежимВыбораИзСтатейБюджетов",Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка);
	СтруктураПараметров.Вставить("ТолькоПросмотр",ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОткрытияРедактора",ЭтотОбъект,?(Копирование,Неопределено,ИдентификаторСтроки));
	ОткрытьФорму("Обработка.фин_РедактированиеСтрокиТабличнойЧастиДокумента.Форма",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОткрытияРедактора(Результат,ИдентификаторСтроки) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	СтрокаДокумента = ?(ИдентификаторСтроки=Неопределено,Объект.БюджетныеОперации.Добавить(),Объект.БюджетныеОперации.НайтиПоИдентификатору(ИдентификаторСтроки));
	ЗаполнитьЗначенияСвойств(СтрокаДокумента,Результат);
	Элементы.БюджетныеОперации.ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяСтруктура()
	Структура = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Обработки.фин_РедактированиеСтрокиТабличнойЧастиДокумента.Реквизиты Цикл
		Структура.Вставить(Реквизит.Имя);	
	КонецЦикла;
	Возврат Структура;
КонецФункции

#КонецОбласти


