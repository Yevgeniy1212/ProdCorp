#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция КонтрольНаличияВПлане(Объект,СтрокаОбъекта) Экспорт
	
	ТекстФильтра = "";
	
	Запрос = Новый Запрос;
	РазрезыСтатьи = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокИменРазрезовПоказателя(СтрокаОбъекта.ФинансовыйПоказатель);
	Для Каждого РазрезЭлемент Из РазрезыСтатьи Цикл
		Разрез = РазрезЭлемент.Значение;
		Если Найти(Разрез,"Разрез")=0 Тогда
			ТекстФильтра = ТекстФильтра + " И "+Разрез+"=&"+Разрез;
			Запрос.УстановитьПараметр(Разрез, 	СтрокаОбъекта[Разрез]);
		ИначеЕсли Найти(ТекстФильтра,"ДополнительныеРазрезы")=0 Тогда
			ТекстФильтра = ТекстФильтра + " И ДополнительныеРазрезы=&ДополнительныеРазрезы";
			СтруктураДополнительныхРазрезов = Новый Структура;
			Для Каждого мРазрезЭлемент Из РазрезыСтатьи Цикл
				мРазрез = мРазрезЭлемент.Значение;
				Если Найти(мРазрез,"Разрез")<>0 Тогда
					СтруктураДополнительныхРазрезов.Вставить(мРазрез,СтрокаОбъекта[мРазрез]);
				КонецЕсли;
			КонецЦикла;
			Запрос.УстановитьПараметр("ДополнительныеРазрезы", 	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураДополнительныхРазрезов));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ОборотыБюджетовОбороты.КоличествоОборот,
		|	фин_ОборотыБюджетовОбороты.СуммаУпрОборот,
		|	фин_ОборотыБюджетовОбороты.ВалютнаяСуммаОборот,
		|	фин_ОборотыБюджетовОбороты.СуммаСценарияОборот
		|ИЗ
		|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И Сценарий = &Сценарий
		|				И ПериодПланирования = &ПериодПланирования
		|				И ФинансовыйПоказатель = &ФинансовыйПоказатель"+ТекстФильтра+") КАК фин_ОборотыБюджетовОбороты";
	
	Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
	Запрос.УстановитьПараметр("ПериодПланирования", 	СтрокаОбъекта.Период);
	Запрос.УстановитьПараметр("Сценарий", 				Объект.Сценарий);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель", 	СтрокаОбъекта.ФинансовыйПоказатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоОснованию(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
	
		// выплата заработной платы всегда в валюте регл. учета
		Объект.Состояние			= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		ЗаполнитьЗначенияСвойств(Объект,ДокументОснование);
		Объект.Дата = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			Объект.Сценарий 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
		КонецЕсли;
		Если ДокументОснование.Свойство("ОтборДляРасшифровки") Тогда
			НоваяСтрока = Объект.БюджетныеОперации.Добавить();
			ТаблицаОтборов = ЗначениеИзСтрокиВнутр(ДокументОснование.ОтборДляРасшифровки);
			СтруктураОтборов = Новый Структура;
			ПериодОтбора = Неопределено;
			Для Каждого СтрокаТаблицы Из ТаблицаОтборов Цикл
				Если СтрокаТаблицы.ВидСравнения <> "Равно" Тогда
					Если СтрокаТаблицы.Поле = "Период" Тогда
						ПериодОтбора =  СтрокаТаблицы.Значение;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если СтрокаТаблицы.Поле = "ФинансовыйПоказатель" ИЛИ СтрокаТаблицы.Поле = "СтатьяБюджета" Тогда
					НоваяСтрока.ФинансовыйПоказатель = ?(ТипЗнч(СтрокаТаблицы.Значение)=Тип("СправочникСсылка.фин_СтатьиБюджета") И НЕ СтрокаТаблицы.Значение.ЭтоГруппа,СтрокаТаблицы.Значение.ФинансовыйПоказатель,СтрокаТаблицы.Значение);
					СтруктураОтборов.Вставить("ФинансовыйПоказатель",НоваяСтрока.ФинансовыйПоказатель);
				ИначеЕсли СтрокаТаблицы.Поле = "ПериодПланирования" Тогда
					НоваяСтрока.Период = СтрокаТаблицы.Значение;
					СтруктураОтборов.Вставить("ПериодПланирования",НоваяСтрока.Период);
				ИначеЕсли СтрокаТаблицы.Поле = "Организация" Тогда
					Объект.Организация = СтрокаТаблицы.Значение;
				ИначеЕсли СтрокаТаблицы.Поле = "ВалютаОперации" Тогда
					НоваяСтрока.Валюта = СтрокаТаблицы.Значение;
					СтруктураОтборов.Вставить("Валюта",СтрокаТаблицы.Значение);
				ИначеЕсли СтрокаТаблицы.Поле <> "Период" Тогда
					Попытка
						НоваяСтрока[СтрокаТаблицы.Поле] = СтрокаТаблицы.Значение;
						СтруктураОтборов.Вставить(СтрокаТаблицы.Поле,СтрокаТаблицы.Значение);
					Исключение
						
					КонецПопытки;
				Иначе
					ПериодОтбора =  СтрокаТаблицы.Значение;
				КонецЕсли;
			КонецЦикла;
			//Если НоваяСтрока.ФинансовыйПоказатель.УчетПоСумме И НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
				НоваяСтрока.Валюта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
			//КонецЕсли;
			Отклонение = ПолучитьРазмерОтклонения(Объект.Сценарий,Объект.Организация,СтруктураОтборов,ПериодОтбора);
			НоваяСтрока.Сумма = Отклонение.Сумма;
			НоваяСтрока.Количество = Отклонение.Количество;
		КонецЕсли;
		
		
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмерОтклонения(Сценарий,Организация,Структура,Граница = Неопределено) Экспорт
	Если Граница = Неопределено Тогда
		Если Структура.Свойство("ПериодПланирования") И Структура.ПериодПланирования> ТекущаяДата() Тогда
			Граница = '00010101';
		Иначе
			Граница = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	МассивРегистров = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрыФактическихДанных();
	
	Отбор = "";
	Запрос = Новый Запрос;
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ЭлементСтруктуры.Ключ = "ПериодПланирования" Тогда
			Запрос.УстановитьПараметр("НачалоПериода",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ЭлементСтруктуры.Значение,Сценарий));
			Запрос.УстановитьПараметр("КонецПериода",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ЭлементСтруктуры.Значение,Сценарий));
			Отбор = Отбор + "
			|	И ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода";
		Иначе
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
			Отбор = Отбор + "
			|	И "+ЭлементСтруктуры.Ключ+"=&"+ЭлементСтруктуры.Ключ;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	-План.КоличествоОборот КАК Количество,
		|	-План.СуммаУпрОборот КАК Сумма
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, &Граница, , Организация=&Организация И Сценарий = &Сценарий"+Отбор+") КАК План
		|";
		Для Каждого ИмяРегистра Из МассивРегистров Цикл
			Запрос.Текст=Запрос.Текст+"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Факт.КоличествоОборот,
			|	Факт.СуммаУпрОборот
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".Обороты(, &Граница, , Организация=&Организация И Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)"+Отбор+") КАК Факт
			|";
		КонецЦикла;
		Запрос.Текст = Запрос.Текст+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-Регистрация.КоличествоОборот,
		|	-Регистрация.СуммаУпрОборот
		|ИЗ
		|	РегистрНакопления.фин_АнализОтклоненийФактическихДанных.Обороты(, , , Организация=&Организация И Сценарий = &Сценарий"+Отбор+") КАК Регистрация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВТ.Количество) КАК Количество,
		|	СУММА(ВТ.Сумма) КАК Сумма
		|ИЗ
		|	ВТ КАК ВТ";
	
	Запрос.УстановитьПараметр("Организация", 	?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям"),Организация,Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Сценарий", 	Сценарий);
	Запрос.УстановитьПараметр("Граница", 	Граница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Новый Структура("Сумма,Количество",0,0);
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат,ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПереопределяемыеТаблицы = Новый Массив;
	ПереопределяемыеТаблицы.Добавить("БюджетныеОперации");
	ПереопределяемыеТаблицы.Добавить("Исполнители");
	
	ДополнительныеПараметрыЗапросов = Новый Структура;
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаУпрУчета",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаСценария",ДокументСсылка.Сценарий.Валюта);
	ДополнительныеПараметрыЗапросов.Вставить("БюджетированиеПоОрганизациям",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"));
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,ПереопределяемыеТаблицы,ДополнительныеПараметрыЗапросов);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаБюджетныеОперации(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["ЕстьБюджетныеОперации"] Тогда
		ПараметрыПроведения.Вставить("ТаблицаБюджетныеОперации", Неопределено);
	Иначе
	ТекстЗапроса="ВЫБРАТЬ
	             |	БюджетныеОперации.Ссылка,
	             |	БюджетныеОперации.Ссылка.Дата КАК Дата,
	             |	БюджетныеОперации.НомерСтроки,
	             |	БюджетныеОперации.Период,
	             |	БюджетныеОперации.ФинансовыйПоказатель,
	             |	БюджетныеОперации.УправленческоеПодразделение,
	             |	БюджетныеОперации.Проект,
	             |	БюджетныеОперации.Контрагент,
	             |	БюджетныеОперации.Номенклатура,
	             |	БюджетныеОперации.Валюта,
	             |	БюджетныеОперации.Количество,
	             |	БюджетныеОперации.Сумма,
	             |	БюджетныеОперации.Разрез1,
	             |	БюджетныеОперации.Разрез10,
	             |	БюджетныеОперации.Разрез2,
	             |	БюджетныеОперации.Разрез3,
	             |	БюджетныеОперации.Разрез4,
	             |	БюджетныеОперации.Разрез5,
	             |	БюджетныеОперации.Разрез6,
	             |	БюджетныеОперации.Разрез7,
	             |	БюджетныеОперации.Разрез8,
	             |	БюджетныеОперации.Разрез9,
	             |	БюджетныеОперации.ДополнительныеРазрезы,
	             |	БюджетныеОперации.Ссылка.Организация,
	             |	БюджетныеОперации.Ссылка.ПричинаОтклонения,
	             |	БюджетныеОперации.Ссылка.Ссылка КАК Документ,
	             |	БюджетныеОперации.Ссылка.Сценарий КАК СценарийПланирования
	             |ПОМЕСТИТЬ ВТ_Операции
	             |ИЗ
	             |	Документ.фин_РассмотрениеОтклоненийФактическихДанных.БюджетныеОперации КАК БюджетныеОперации
	             |ГДЕ
	             |	БюджетныеОперации.Ссылка = &Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата,
	             |	КурсыВалют.Курс КАК Курс,
	             |	КурсыВалют.Кратность КАК Кратность,
	             |	КурсыВалют.Валюта КАК Валюта
	             |ПОМЕСТИТЬ ВТ_КурсыОперации
	             |ИЗ
	             |	РегистрСведений.КурсыВалют КАК КурсыВалют
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	             |			Обороты.Дата КАК Дата,
	             |			КурсыВнутр.Валюта КАК Валюта
	             |		ИЗ
	             |			РегистрСведений.КурсыВалют КАК КурсыВнутр
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |					УчетФактическихДанныхПоБюджетамБюджетныеОперации.Период КАК Дата,
	             |					УчетФактическихДанныхПоБюджетамБюджетныеОперации.Валюта КАК ВалютаДок
	             |				ИЗ
	             |					ВТ_Операции КАК УчетФактическихДанныхПоБюджетамБюджетныеОперации) КАК Обороты
	             |				ПО (Обороты.Дата >= КурсыВнутр.Период)
	             |					И КурсыВнутр.Валюта = Обороты.ВалютаДок
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Обороты.Дата,
	             |			КурсыВнутр.Валюта) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	             |		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	             |			И КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата,
	             |	КурсыВалют.Курс КАК Курс,
	             |	КурсыВалют.Кратность КАК Кратность
	             |ПОМЕСТИТЬ ВТ_КурсыУпрУчета
	             |ИЗ
	             |	РегистрСведений.КурсыВалют КАК КурсыВалют
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	             |			Обороты.Дата КАК Дата
	             |		ИЗ
	             |			РегистрСведений.КурсыВалют КАК КурсыВнутр
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |					ОперацииДата.Период КАК Дата
	             |				ИЗ
	             |					ВТ_Операции КАК ОперацииДата) КАК Обороты
	             |				ПО (Обороты.Дата >= КурсыВнутр.Период)
	             |					И (КурсыВнутр.Валюта = &ВалютаУпрУчета)
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	             |		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	             |ГДЕ
	             |	КурсыВалют.Валюта = &ВалютаУпрУчета
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата,
	             |	КурсыВалют.Курс КАК Курс,
	             |	КурсыВалют.Кратность КАК Кратность
	             |ПОМЕСТИТЬ ВТ_КурсыСценария
	             |ИЗ
	             |	РегистрСведений.КурсыВалют КАК КурсыВалют
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	             |			Обороты.Дата КАК Дата
	             |		ИЗ
	             |			РегистрСведений.КурсыВалют КАК КурсыВнутр
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |					ОперацииДата.Период КАК Дата
	             |				ИЗ
	             |					ВТ_Операции КАК ОперацииДата) КАК Обороты
	             |				ПО (Обороты.Дата >= КурсыВнутр.Период)
	             |					И (КурсыВнутр.Валюта = &ВалютаСценария)
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	             |		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	             |ГДЕ
	             |	КурсыВалют.Валюта = &ВалютаСценария
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	БюджетныеОперацииДокумент.Дата КАК Период,
	             |	БюджетныеОперацииДокумент.Валюта КАК Валюта,
	             |	БюджетныеОперацииДокумент.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |	БюджетныеОперацииДокумент.Проект КАК Проект,
	             |	БюджетныеОперацииДокумент.Контрагент КАК Контрагент,
	             |	БюджетныеОперацииДокумент.Номенклатура КАК Номенклатура,
	             |	БюджетныеОперацииДокумент.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
	             |	БюджетныеОперацииДокумент.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	СУММА(БюджетныеОперацииДокумент.Сумма) КАК ВалютнаяСумма,
	             |	СУММА(БюджетныеОперацииДокумент.Количество) КАК Количество,
	             |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	             |				КОГДА БюджетныеОперацииДокумент.Валюта = &ВалютаУпрУчета
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма
	             |				КОГДА БюджетныеОперацииДокумент.Валюта <> &ВалютаУпрУчета
	             |						И КурсыОперации.Курс <> 0
	             |						И КурсыУпрУчета.Курс <> 0
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма * КурсыОперации.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
	             |				ИНАЧЕ 0
	             |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр,
	             |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	             |				КОГДА БюджетныеОперацииДокумент.Валюта = &ВалютаУпрУчета
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма
	             |				КОГДА БюджетныеОперацииДокумент.Валюта <> &ВалютаУпрУчета
	             |						И КурсыОперации.Курс <> 0
	             |						И КурсыСценария.Курс <> 0
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма * КурсыОперации.Курс * КурсыСценария.Кратность / (КурсыСценария.Курс * КурсыОперации.Кратность)
	             |				ИНАЧЕ 0
	             |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаСценария,
	             |	БюджетныеОперацииДокумент.Период КАК ПериодПланирования,
	             |	ВЫБОР
	             |		КОГДА &БюджетированиеПоОрганизациям
	             |			ТОГДА БюджетныеОперацииДокумент.Организация
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	             |	КОНЕЦ КАК Организация,
	             |	БюджетныеОперацииДокумент.ПричинаОтклонения КАК ПричинаОтклоненияФактическихДанных,
	             |	БюджетныеОперацииДокумент.Документ КАК ДокументРассмотрения,
	             |	БюджетныеОперацииДокумент.СценарийПланирования КАК Сценарий
	             |ИЗ
	             |	ВТ_Операции КАК БюджетныеОперацииДокумент
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыОперации КАК КурсыОперации
	             |		ПО (КурсыОперации.Дата = БюджетныеОперацииДокумент.Период)
	             |			И (КурсыОперации.Валюта = БюджетныеОперацииДокумент.Валюта)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыУпрУчета КАК КурсыУпрУчета
	             |		ПО (КурсыУпрУчета.Дата = БюджетныеОперацииДокумент.Период)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыСценария КАК КурсыСценария
	             |		ПО (КурсыСценария.Дата = БюджетныеОперацииДокумент.Период)
	             |
	             |СГРУППИРОВАТЬ ПО
				 |	БюджетныеОперацииДокумент.Дата,
	             |	БюджетныеОперацииДокумент.Период,
	             |	БюджетныеОперацииДокумент.Валюта,
	             |	БюджетныеОперацииДокумент.УправленческоеПодразделение,
	             |	БюджетныеОперацииДокумент.ДополнительныеРазрезы,
	             |	БюджетныеОперацииДокумент.Проект,
	             |	БюджетныеОперацииДокумент.Контрагент,
	             |	БюджетныеОперацииДокумент.Номенклатура,
	             |	БюджетныеОперацииДокумент.ФинансовыйПоказатель,
	             |	БюджетныеОперацииДокумент.ПричинаОтклонения,
	             |	БюджетныеОперацииДокумент.Документ,
	             |	ВЫБОР
	             |		КОГДА &БюджетированиеПоОрганизациям
	             |			ТОГДА БюджетныеОперацииДокумент.Организация
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	             |	КОНЕЦ,
	             |	БюджетныеОперацииДокумент.Период,
	             |	БюджетныеОперацииДокумент.СценарийПланирования";

		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ВТ_Операции",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_КурсыОперации",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_КурсыУпрУчета",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_КурсыСценария",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаБюджетныеОперации",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

Функция ТекстЗапросаИсполнители(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["ЕстьИсполнители"] Тогда
		ПараметрыПроведения.Вставить("ТаблицаИсполнители", Неопределено);
	Иначе
	ТекстЗапроса="ВЫБРАТЬ
	             |	Исполнители.Ссылка,
	             |	Исполнители.НомерСтроки,
	             |	Исполнители.Пользователь,
	             |	ЗНАЧЕНИЕ(Перечисление.фин_ВидыЗадачПоБюджетам.МероприятияПоРезультатамАнализаОтклонений) КАК ВидЗадачи,
	             |	ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка) КАК УровеньДетализации,
	             |	Исполнители.Ссылка.Организация,
	             |	Исполнители.Ссылка.ОтветственныйЗаПринятиеМер КАК Исполнитель,
	             |	Исполнители.Ссылка.Мероприятие КАК Бюджет,
	             |	Исполнители.Ссылка КАК КалендарныйПлан,
	             |	Исполнители.Ссылка.ДатаНачала,
	             |	Исполнители.Ссылка.ДатаЗавершения
	             |ИЗ
	             |	Документ.фин_РассмотрениеОтклоненийФактическихДанных.Исполнители КАК Исполнители
	             |ГДЕ
	             |	Исполнители.Ссылка = &Ссылка";

		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ТаблицаИсполнители",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли