////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы(ТабДокумент,имяМакета)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	
	//+++ Oleg SmartT. 2021-04-20	
	"ВЫБРАТЬ
	|	Расчет.ВидРесурса КАК ВидРесурса,
	|	Расчет.Дата КАК Дата,
	|	Расчет.ОстатокНаНачало КАК ОстатокНаНачало,
	|	Расчет.Приход КАК Приход,
	|	Расчет.Расход КАК Расход,
	|	Расчет.ДнейХранения КАК ДнейХранения,
	|	Расчет.Коэффициент КАК Коэффициент,
	|	Расчет.Количество КАК Количество,
	|	Расчет.ТоннаДни КАК ТоннаДни,
	|	Расчет.Тариф КАК Тариф,
	|	Расчет.Сумма КАК Сумма,
	|	Расчет.ОстатокНаНачало_Залог,
	|	Расчет.Приход_Залог,
	|	Расчет.Расход_Залог,
	|	Расчет.Количество_Залог,
	|	Расчет.ТоннаДни_Залог,
	|	Расчет.Сумма_Залог КАК Сумма_Залог,
	|	Расчет.Сумма + Расчет.Сумма_Залог КАК ОбщаяСумма
	|ИЗ
	|	Документ.ур_АктСверкиРасчетовПоХранению.Расчет КАК Расчет
	|ГДЕ
	|	Расчет.Ссылка = &ТекДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРесурса,
	|	Дата
	|ИТОГИ
	|	СУММА(ДнейХранения),
	|	СУММА(Коэффициент),
	|	СУММА(Сумма),
	|	СУММА(Сумма_Залог),
	|	СУММА(ОбщаяСумма)
	|ПО
	|	ОБЩИЕ,
	|	ВидРесурса";
	//--- Oleg SmartT. 2021-04-20	
	
	Результат = Запрос.Выполнить();
	
	Макет = ПолучитьМакет("Хранение");
	
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка	    = Макет.ПолучитьОбласть("Шапка");
	ОбластьРесурс	    = Макет.ПолучитьОбласть("Ресурс");
	ОбластьСтрока	    = Макет.ПолучитьОбласть("Строка");
	ОбластьИтог		    = Макет.ПолучитьОбласть("Итого");
	ОбластьПодписи	    = Макет.ПолучитьОбласть("Подписи");
	
	//ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");

	ТабДокумент = Новый ТабличныйДокумент;

	НазваниеОрганизации = Организация.НаименованиеПолное;
	
	НаименованиеКонтрагента = Склад.Наименование;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Склад;
	КонецЕсли;
	
	СтрЗаголовокТаблица = НазваниеОрганизации + " в лице руководителя _______________________ и главного бухгалтера _______________________" + ", с одной стороны, "
				+ НаименованиеКонтрагента + " в лице руководителя _______________________ и главного бухгалтера _______________________ " 
				+ ", с другой стороны, "
				+ "составили настоящий акт сверки и согласились о нижеследующем,"
				+ " стоимость работ по услугам хранения государственных ресурсов за " + ПредставлениеПериода(НачалоДня(НачалоМесяца(Дата)), КонецДня(КонецМесяца(Дата)), "ФП")+" состовляет:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	ТабДокумент.Вывести(ОбластьШапка);

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	ТекВидРесурса = "";
	
	ВыборкаПоРесурсам = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРесурсам.Следующий() Цикл
		
		ОбластьРесурс.Параметры.Заполнить(ВыборкаПоРесурсам);
		ТабДокумент.Вывести(ОбластьРесурс);
		
		Выборка = ВыборкаПоРесурсам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластьИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДокумент.Вывести(ОбластьИтог);
	
	ОбластьПодписи.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьПодписи.Параметры.НазваниеКонтрагента = НаименованиеКонтрагента;
	ТабДокумент.Вывести(ОбластьПодписи);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
 
// Процедура устанавливает даты периода начисления зарплаты
//
Процедура ОпределитьДатыПериодаНачисления() Экспорт

КонецПроцедуры // ОпределитьДатыПериодаНачисления()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Хранение" Тогда
			ТабДокумент = ПечатьТаблицы( Новый ТабличныйДокумент,"Хранение");
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли


// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Хранение","Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры
