
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьЕдиныйСрокПоставки(ЭтаФорма);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйСрокПоставкиПоЗаказуПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
	УстановитьЕдиныйСрокПоставки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СрокПоставкиПриИзменении(Элемент)
	УстановитьЕдиныйСрокПоставки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//дог_УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

	ОткрытьФормуЦеныИВалюта(ЭтаФорма);
КонецПроцедуры

// Процедура выполняет открытие формы "Цены и валюта" и передачу необходимых параметров открытия
//
// Параметры:
//  ФормаДокумента            - УправляемаяФорма - форма документа, из которого вызывается установка цен и валюты
//  СпособЗаполненияЦен       - ПеречислениеСсылка.СпособыЗаполненияЦен - способ заполнения цен в документе
//  ВызовПриИзмененииДоговора - Булево - признак того, что форма открывается в результате изменения договора в документе
//  ДополнительныеПараметрыОповещения - Произвольный - параметры, которые будут переданы в процедуру обработки оповещения о закрытии формы "Цены и валюта"
//  ПараметрыОткрытия         - Структура - структура, содержащая дополнительные параметры открытия формы "Цены и валюта". Может содержать следующие ключи:
//     * БезКонтроляВалютыВзаиморасчетов - Булево - признак отсутствия валюты взаиморасчетов (доступность, заполненность и т.п.)
//     * НедоступныеРеквизиты - Структура - структура, содержащая список реквизитов, запрещенных для редактирования в форме "Цены и валюта". 
//                                          Реквизиты указываются в ключах структуры. В значениях структуры можно указать конкретное свойство, 
//                                          значение которого необходимо изменить ("Видимость", "Доступность", "ТолькоПросмотр").
//                                          Свойство указывается в виде Соответствия или Структуры, где "Ключ" - имя свойства, а "Значение" - значение, которое необходимо установить. Возможна установка нескольких свойств.
//                                          Если для ключа структуры "НедоступныеРеквизиты" не указано значение, то устанавливается свойство "Доступность" в значение "ЛОЖЬ".
//     * ЕстьЗаполненныеТабличныеЧасти - Булево - признак наличия в документе заполненных табличных частей. Если параметр не указан, то будет выполнена попытка определения заполненности ТЧ из объекта переданной формы.
//
&НаКлиенте
Процедура ОткрытьФормуЦеныИВалюта(ФормаДокумента, СпособЗаполненияЦен = Неопределено, ВызовПриИзмененииДоговора = Ложь, ДополнительныеПараметрыОповещения = Неопределено, ЗНАЧ ПараметрыОткрытия = Неопределено) Экспорт
	
	Если СпособЗаполненияЦен = Неопределено Тогда
		СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатуры");
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметры", 
		ФормаДокумента, СпособЗаполненияЦен, ВызовПриИзмененииДоговора, ДополнительныеПараметрыОповещения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЦеныИВалюта", 
		ФормаДокумента, ПараметрыОповещения);	
		
	ДанныеДокумента = ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия);
	
	ПараметрыФормы = Новый Структура("ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ТолькоПросмотр", 
		ДанныеДокумента, ВызовПриИзмененииДоговора, ПараметрыОткрытия, ФормаДокумента.ТолькоПросмотр);
	ОткрытьФорму("ОбщаяФорма.дог_ФормаЦеныИВалюта", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДокументаДляФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	ДанныеДокумента = Новый Структура();
	
	ДанныеДокумента.Вставить("Дата", ФормаДокумента.Объект.Дата);
	
	Если ФормаДокумента.Объект.Свойство("ТипЦен") Тогда
		ДанныеДокумента.Вставить("ТипЦен", ФормаДокумента.Объект.ТипЦен);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ВалютаДокумента") Тогда
		//ДанныеДокумента.Вставить("ВалютаДокумента", ФормаДокумента.Объект.ВалютаДокумента);
		ДанныеДокумента.Вставить("ВалютаДокумента", ФормаДокумента.Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ВалютаДокумента") Тогда
		ДанныеДокумента.Вставить("ВалютаДокумента", ФормаДокумента.Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("ДоговорКонтрагента") Тогда
		ДанныеДокумента.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("КурсДокумента") Тогда
		ДанныеДокумента.Вставить("КурсДокумента", ФормаДокумента.Объект.КурсДокумента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("КратностьДокумента") Тогда
		ДанныеДокумента.Вставить("КратностьДокумента", ФормаДокумента.Объект.КратностьДокумента);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("УчитыватьНДС") Тогда
		ДанныеДокумента.Вставить("УчитыватьНДС", ФормаДокумента.Объект.УчитыватьНДС);
	КонецЕсли;
	
	Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
		ДанныеДокумента.Вставить("СуммаВключаетНДС", ФормаДокумента.Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыОткрытияФормыЦеныИВалюта(ФормаДокумента, ПараметрыОткрытия)
	
	Если ПараметрыОткрытия = Неопределено Тогда 
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ПараметрыОткрытия.Вставить("БезКонтроляВалютыВзаиморасчетов", НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента));
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытия.Свойство("НедоступныеРеквизиты") Тогда
		ПараметрыОткрытия.Вставить("НедоступныеРеквизиты", Новый Структура);
	КонецЕсли;
	
	// попытаемся определить заполненность хотя бы одной табличной части, если не передан соответствующий параметр открытия формы
	Если НЕ ПараметрыОткрытия.Свойство("ЕстьЗаполненныеТабличныеЧасти") Тогда
		МассивИменТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
									"Товары,Услуги,ОС,НМА,ВыданныеАвансы,ОплатаПоставщикам,ВыплатаЗаработнойПлаты,ОплатаПоИсполнительнымЛистам,ПеречислениеПенсионныхВзносов,ПеречислениеСоциальныхОтчислений,Прочее,Разделы,Продукция");
									
		// для установки значения "Истина" необходимо найти хотя бы 1 заполненную табличную часть. после чего можно прервать цикл
		ЕстьЗаполненныеТабличныеЧасти = Ложь;
		Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
			Если ФормаДокумента.Объект.Свойство(ИмяТабличнойЧасти)
				И ФормаДокумента.Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
				ЕстьЗаполненныеТабличныеЧасти = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьЗаполненныеТабличныеЧасти Тогда 
			ЕстьЗаполненныеТабличныеЧасти = ФормаДокумента.Объект.Свойство("Сумма");
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("ЕстьЗаполненныеТабличныеЧасти", ЕстьЗаполненныеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

////////////////////////////////
// ТЧ Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СуммаСтавкаНДСПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СуммаСтавкаНДСПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.СрокПоставки = Объект.СрокПоставки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Элементы.Товары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	Если Элементы.Товары.ТекущиеДанные<> Неопределено Тогда
		Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
			Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
			ЦенаКоличествоПриИзменении();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Товары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор());
		Элементы.Товары.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		ТоварыПриНачалеРедактирования(Элемент, Истина, Ложь)	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Ложь, ТекущаяНоменклатура);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Услуги"

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Услуги.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, ТекущаяНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор(),"Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СуммаСтавкаНДСПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СуммаСтавкаНДСПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Услуги.ТекущиеДанные.СрокПоставки = Объект.СрокПоставки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Услуги.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"Услуги");
		Элементы.Услуги.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		УслугиПриНачалеРедактирования(Элемент, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////
// ТЧ Основные средства

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	СуммаСтавкаНДСПриИзменении("ОС");
КонецПроцедуры
 
&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ОС.ТекущиеДанные.СрокПоставки = Объект.СрокПоставки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ОСПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ОСОСПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.ОС.ТекущиеДанные.ПолучитьИдентификатор(), "ОС");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.Товары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.Товары,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	НачатьПодбор(Элементы.Услуги,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугиПлановая(Команда)
	НачатьПодбор(Элементы.Услуги,Истина,Истина);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И Объект.ДоговорКонтрагента.Организация = Объект.Организация Тогда
		Иначе
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	Объект.Номер = "";
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ПоказыватьДвиженияПриПроведении");	
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.УслугиПодборУслуги.Видимость = Ложь;
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	//Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
	//	Элементы.УслугиПодборУслугиПлановая.Видимость = Ложь;
	//	Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	//КонецЕсли;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Объект.СрокПоставки 	= КонецМесяца(ТекущаяДата());
			Объект.Состояние 		= Перечисления.СостоянияОбъектов.Подготовлен;
			//Объект.ВалютаДокумента 	= Объект.мВалютаДокумента;
			Объект.ТипЦен 			= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойТипЦенЗаказовПокупателей");
			
		КонецЕсли;
		РассчетОбщейСуммыТоварногоДоговора();	
	КонецЕсли;
		
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	УстановитьЗаголовкиГрупп();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ТипНоменклатуры = Новый ОписаниеТипов(МассивТипов);
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Элементы.УслугиНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	мВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ТоварыСрокПоставки.Видимость = НЕ Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.УслугиСрокПоставки.Видимость = НЕ Объект.ЕдиныйСрокПоставкиПоЗаказу;
	Элементы.ТоварыСтавкаНДС.Видимость 	= Объект.УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость 	= Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость 	= Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость 	= Объект.УчитыватьНДС;
	
	СформироватьНадписьЦеныИВалюта(Форма);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
		
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовкиГрупп()
	НадписьИсточникЗаявки 			= "Источник заявки";
	НадписьПараметрыПланирования 	= "Параметры планирования";
	НадписьСуммаДокумента 			= "Сумма документа";
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)
	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"Услуги","Товары"));
	Иначе
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма")+Объект.Услуги.Итог("Сумма")+Объект.ОС.Итог("Сумма")+?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС,Объект.Товары.Итог("СуммаНДС")+Объект.Услуги.Итог("СуммаНДС")+Объект.ОС.Итог("СуммаНДС"),0);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЕдиныйСрокПоставки(Форма)
	Объект = Форма.Объект;
	Если Объект.ЕдиныйСрокПоставкиПоЗаказу И Объект.СрокПоставки<>'00010101' Тогда
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.СрокПоставки = Объект.СрокПоставки
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
			СтрокаТЧ.СрокПоставки = Объект.СрокПоставки
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.ОС Цикл
			СтрокаТЧ.СрокПоставки = Объект.СрокПоставки
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "Товары", Колонка = "Номенклатура")
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ТекущиеДанные 							= Объект[ТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы[Колонка], ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
		ДанныеСтрокиТаблицы.Цена			   	= СведенияОНоменклатуре.Цена;
	КонецЕсли;
	ДанныеСтрокиТаблицы.СтавкаНДС         	= СведенияОНоменклатуре.СтавкаНДС;
	
	//дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта, ТЧ, МетаданныеДокумента); 
	дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта,мВалютаРегламентированногоУчета,Истина);
	
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаКоличествоПриИзменении(ТЧ = "Товары")
	ТекущиеДанные 							= Элементы[ТЧ].ТекущиеДанные;
	
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СуммаСтавкаНДСПриИзменении(ТЧ = "Товары")
	ТекущиеДанные 							= Элементы[ТЧ].ТекущиеДанные;
	
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	дог_УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить реквизиты документа по данным договора?';"), Режим, 0);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	Объект.ВалютаДокумента = ПолучитьСвойство(Объект.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
	Объект.ТипЦен = ПолучитьСвойство(Объект.ДоговорКонтрагента,"ТипЦен");
	ЗаполнитьКурсДокумента();
	ПослеЗакрытияФормыЦеныИВалюта(Неопределено, Новый Структура("ВызовПриИзмененииДоговора, ФормаДокумента,ДополнительныеПараметры",Истина,ЭтаФорма,Неопределено));
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Возврат Значение[Свойство];
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаполненииОснованием", ЭтаФорма,);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить по документу-основанию?'"), Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаполненииОснованием(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	ЗаполнитьПоОснованию();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	Документы.узп_ЗаказПокупателя.ЗаполнитьПоДокументуОснованию(Объект,Объект.ДокументОснование);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсДокумента()
	Если Объект.ВалютаДокумента=мВалютаРегламентированногоУчета Тогда
		Объект.КурсДокумента = 1;
		Объект.КратностьДокумента = 1;
	Иначе
		КурсВалюты = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Объект.ВалютаДокумента,Объект.Дата);
		Объект.КурсДокумента = КурсВалюты.Курс;
		Объект.КратностьДокумента = КурсВалюты.Кратность;
	КонецЕсли;
КонецПроцедуры