

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает курс и кратность документа на основании реквизитов шапки
//
Процедура ОбновитьКурсыДокумента(Объект) Экспорт

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаИсточник",Объект.ВалютаИсточник.Код);
	СтруктураГруппаВалют.Вставить("ВалютаПриемник",Объект.ВалютаПриемник.Код);
	
	СтруктураКурсыВалют 	= фин_УправлениеБюджетированием.ПолучитьКурсыСценарияДляГруппыВалют(СтруктураГруппаВалют,Объект.ПериодПланирования,Объект.Сценарий);
	
	Объект.КурсИсточник 	= СтруктураКурсыВалют.ВалютаИсточникКурс;
	Объект.КурсПриемник 	= СтруктураКурсыВалют.ВалютаПриемникКурс;
	
	Объект.КратностьИсточник = СтруктураКурсыВалют.ВалютаИсточникКратность;
	Объект.КратностьПриемник = СтруктураКурсыВалют.ВалютаПриемникКратность;
		
КонецПроцедуры //ОбновитьКурсыДокумента

//Обновляет курс и сумму документа при изменении валюты
//
Процедура ОбновитьКурсыИСуммуДокумента(Объект,СтараяВалютаИсточник) Экспорт

	СтарыйКурс		= Объект.КурсИсточник;
	СтараяКратность	= Объект.КратностьИсточник;
	
	Документы.фин_ВнутреннееПеремещениеСредствПриБюджетировании.ОбновитьКурсыДокумента(Объект);
	
	Сумма=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма,
										СтараяВалютаИсточник,Объект.ВалютаИсточник,
										СтарыйКурс,Объект.КурсИсточник,
										СтараяКратность,Объект.КратностьИсточник);
												
КонецПроцедуры //ОбновитьКурсыИСуммуДокумента


// Процедура ПроверкаЗапретаИзменений
// 
Процедура ПроверкаЗапретаИзменений(Объект,Отказ) Экспорт
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	&ПериодПланирования КАК Период,
	             |	&Сценарий КАК Сценарий,
	             |	&УправленческоеПодразделениеИсточник КАК УправленческоеПодразделениеИсточник,
	             |	&ПроектИсточник КАК ПроектИсточник,
	             |	&УправленческоеПодразделениеПриемник КАК УправленческоеПодразделениеПриемник,
	             |	&ПроектПриемник КАК ПроектПриемник,
	             |	&ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	ГраницыПланированияИсточник.ГраницаФиксации КАК ГраницаФиксацииИсточник,
	             |	ГраницыПланированияПриемник.ГраницаФиксации КАК ГраницаФиксацииПриемник
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ГраницыПериодов.Сценарий КАК Сценарий,
	             |		ГраницыПериодов.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |		ГраницыПериодов.Проект КАК Проект,
	             |		МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	             |	ИЗ
	             |		РегистрСведений.фин_ГраницыПериодовБюджетирования КАК ГраницыПериодов
	             |	ГДЕ
	             |		ГраницыПериодов.Сценарий = &Сценарий
	             |		И (&УправленческоеПодразделениеИсточник = ГраницыПериодов.УправленческоеПодразделение
	             |				ИЛИ ГраницыПериодов.УправленческоеПодразделение = &ПустойЦФО)
	             |		И (&ПроектИсточник = ГраницыПериодов.Проект
	             |				ИЛИ ГраницыПериодов.Проект = &ПустойПроект)
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ГраницыПериодов.Сценарий,
	             |		ГраницыПериодов.УправленческоеПодразделение,
	             |		ГраницыПериодов.Проект) КАК ГраницыПланированияИсточник
	             |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ГраницыПериодов.Сценарий КАК Сценарий,
	             |			ГраницыПериодов.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |			ГраницыПериодов.Проект КАК Проект,
	             |			МАКСИМУМ(ГраницыПериодов.ГраницаФиксации) КАК ГраницаФиксации
	             |		ИЗ
	             |			РегистрСведений.фин_ГраницыПериодовБюджетирования КАК ГраницыПериодов
	             |		ГДЕ
	             |			ГраницыПериодов.Сценарий = &Сценарий
	             |			И (&УправленческоеПодразделениеПриемник = ГраницыПериодов.УправленческоеПодразделение
	             |					ИЛИ ГраницыПериодов.УправленческоеПодразделение = &ПустойЦФО)
	             |			И (&ПроектПриемник = ГраницыПериодов.Проект
	             |					ИЛИ ГраницыПериодов.Проект = &ПустойПроект)
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ГраницыПериодов.Сценарий,
	             |			ГраницыПериодов.УправленческоеПодразделение,
	             |			ГраницыПериодов.Проект) КАК ГраницыПланированияПриемник
	             |		ПО (ИСТИНА)";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Сценарий",				Объект.Сценарий);
	Запрос.УстановитьПараметр("ПериодПланирования",		Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("ФинансовыйПоказатель",	Объект.ФинансовыйПоказатель);
	
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений()));
	Запрос.УстановитьПараметр("ПустойПроект",Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов()));
	
	СтрокиУПИсточник = Объект.ПараметрыИсточника.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
	Если СтрокиУПИсточник.Количество()=0 Тогда
		Запрос.УстановитьПараметр("УправленческоеПодразделениеИсточник",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение"));
	Иначе
		Запрос.УстановитьПараметр("УправленческоеПодразделениеИсточник",СтрокиУПИсточник[0].Значение);
	КонецЕсли;
	СтрокиУППриемник = Объект.ПараметрыПриемника.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение));
	Если СтрокиУППриемник.Количество()=0 Тогда
		Запрос.УстановитьПараметр("УправленческоеПодразделениеПриемник",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("УправленческоеПодразделение"));
	Иначе
		Запрос.УстановитьПараметр("УправленческоеПодразделениеПриемник",СтрокиУППриемник[0].Значение);
	КонецЕсли;
	СтрокиПроектИсточник = Объект.ПараметрыИсточника.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
	Если СтрокиПроектИсточник.Количество()=0 Тогда
		Запрос.УстановитьПараметр("ПроектИсточник",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"));
	Иначе
		Запрос.УстановитьПараметр("ПроектИсточник",СтрокиПроектИсточник[0].Значение);
	КонецЕсли;
	СтрокиПроектПриемник = Объект.ПараметрыПриемника.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект));
	Если СтрокиПроектПриемник.Количество()=0 Тогда
		Запрос.УстановитьПараметр("ПроектПриемник",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"));
	Иначе
		Запрос.УстановитьПараметр("ПроектПриемник",СтрокиПроектПриемник[0].Значение);
	КонецЕсли;
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если (НЕ РезультатЗапроса.ГраницаФиксацииИсточник=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксацииИсточник) Тогда
			
			ТекстСообщения = "Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Объект.Сценарий+"
			|Финансовый показатель: "+РезультатЗапроса.ФинансовыйПоказатель+"
			|ЦФО: "+РезультатЗапроса.ЦФОИсточник+"
			|Проект: "+РезультатЗапроса.ПроектИсточник+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксацииИсточник;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			
		КонецЕсли;
		
		Если (НЕ РезультатЗапроса.ГраницаФиксацииПриемник=NULL ) И (РезультатЗапроса.Период<=РезультатЗапроса.ГраницаФиксацииПриемник) Тогда
			
			ТекстСообщения = "Попытка изменения зафиксированного плана:
			|Сценарий планирования: "+Объект.Сценарий+"
			|Финансовый показатель: "+РезультатЗапроса.ФинансовыйПоказатель+"
			|ЦФО: "+РезультатЗапроса.ЦФОПриемник+"
			|Проект: "+РезультатЗапроса.ПроектПриемник+"
			|Период планирования: "+РезультатЗапроса.Период+"
			|Граница фиксации планов: "+РезультатЗапроса.ГраницаФиксацииПриемник;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры //ПроверкаЗапретаИзменений


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ДополнительныеДанные = Новый Массив;
	ДополнительныеДанные.Добавить("ПроводкиПоДаннымДокумента");
	
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,,,ДополнительныеДанные);
	
	Возврат ПараметрыПроведения;

КонецФункции


Функция ТекстЗапросаПроводкиПоДаннымДокумента(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса="ВЫБРАТЬ
	             |	ПеремещениеСредств.ПериодПланирования КАК Период,
	             |	ДанныеСчетДт.Счет КАК СчетДт,
	             |	ДанныеСчетКт.Счет КАК СчетКт,
	             |	NULL КАК СубконтоКт1,
	             |	NULL КАК СубконтоКт2,
	             |	NULL КАК СубконтоКт3,
	             |	NULL КАК СубконтоДт1,
	             |	NULL КАК СубконтоДт2,
	             |	NULL КАК СубконтоДт3,
	             |	ВЫБОР
	             |		КОГДА ДанныеСчетДт.Валютный
	             |			ТОГДА ПеремещениеСредств.ВалютаПриемник
	             |		ИНАЧЕ NULL
	             |	КОНЕЦ КАК ВалютаДт,
	             |	ПеремещениеСредств.Сумма * ТаблицаПроводок.КоэффициентДляСуммы КАК ВалютнаяСуммаКт,
	             |	ВЫБОР
	             |		КОГДА ДанныеСчетКт.Валютный
	             |			ТОГДА ПеремещениеСредств.ВалютаИсточник
	             |		ИНАЧЕ NULL
	             |	КОНЕЦ КАК ВалютаКт,
	             |	ТаблицаПроводок.Ссылка КАК ФинансовыйПоказатель,
	             |	ВЫБОР
	             |		КОГДА ДанныеСчетДт.Количественный
	             |			ТОГДА ПеремещениеСредств.КоличествоПриемник * ТаблицаПроводок.КоэффициентДляКоличества
	             |		ИНАЧЕ NULL
	             |	КОНЕЦ КАК КоличествоДт,
	             |	ВЫБОР
	             |		КОГДА ДанныеСчетКт.Количественный
	             |			ТОГДА ПеремещениеСредств.КоличествоИсточник * ТаблицаПроводок.КоэффициентДляКоличества
	             |		ИНАЧЕ NULL
	             |	КОНЕЦ КАК КоличествоКт,
	             |	ПеремещениеСредств.Сценарий
	             |ИЗ
	             |	Документ.фин_ВнутреннееПеремещениеСредствПриБюджетировании КАК ПеремещениеСредств
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаПроводокДляФинансовыхПоказателей КАК НастройкаПроводок
	             |		ПО ПеремещениеСредств.ФинансовыйПоказатель = НастройкаПроводок.ФинансовыйПоказатель
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ШаблоныПроводок КАК ТаблицаПроводок
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				Бюджетирование.Ссылка КАК Счет,
	             |				Бюджетирование.Валютный КАК Валютный,
	             |				Бюджетирование.Количественный КАК Количественный
	             |			ИЗ
	             |				ПланСчетов.фин_Бюджетирование КАК Бюджетирование) КАК ДанныеСчетДт
	             |			ПО ТаблицаПроводок.СчетДт = ДанныеСчетДт.Счет
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				Бюджетирование.Ссылка КАК Счет,
	             |				Бюджетирование.Валютный КАК Валютный,
	             |				Бюджетирование.Количественный КАК Количественный
	             |			ИЗ
	             |				ПланСчетов.фин_Бюджетирование КАК Бюджетирование) КАК ДанныеСчетКт
	             |			ПО ТаблицаПроводок.СчетКт = ДанныеСчетКт.Счет
	             |		ПО (НастройкаПроводок.ФинансовыйПоказатель = ТаблицаПроводок.Ссылка)
	             |ГДЕ
	             |	ПеремещениеСредств.Ссылка = &Ссылка";
	ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	НомераТаблиц.Вставить("ТаблицаПроводкиПоДаннымДокумента",  НомераТаблиц.Количество());
	Возврат ТекстЗапроса;	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.


////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли