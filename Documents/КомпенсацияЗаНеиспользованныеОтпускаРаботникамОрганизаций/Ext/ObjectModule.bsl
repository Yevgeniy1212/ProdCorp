Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если Клиент Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиРаботники"
//			"ПоТабличнойЧастиОтпуска"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
	Запрос.УстановитьПараметр("ПустаяДата",		 '00010101');

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомпенсацияОтпуска.Дата КАК ДатаДок,
		|	КомпенсацияОтпуска.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(КомпенсацияОтпуска.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	КомпенсацияОтпуска.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо
		|ИЗ
		|	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций КАК КомпенсацияОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО КомпенсацияОтпуска.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	КомпенсацияОтпуска.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиРаботники" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, КомпенсацияОтпуска.ФизЛицо.Наименование) КАК Работник,
        |	ФИОФизЛиц.Фамилия КАК Фамилия,
        |	ФИОФизЛиц.Имя КАК Имя,
        |	ФИОФизЛиц.Отчество КАК Отчество,
        |	ФИОФизЛиц.НеСклонятьФамилию КАК НеСклонятьФамилию,
		|	ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование КАК ПодразделениеРаботника,
		|	ДанныеОРаботникахОрганизации.ДолжностьНаименование КАК Должность,
		|	ДанныеОРаботникахОрганизации.ТарифныйРазрядНаименование КАК ТарифныйРазряд,
		|	ДанныеОРаботникахОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|	КомпенсацияОтпуска.НомерСтроки КАК НомерСтрокиРаботники,
		|	КомпенсацияОтпуска.ДатаКомпенсации КАК ДатаКомпенсации,
		|	ТрудовыеОтпуска.ВидТрудовогоОтпуска.Наименование КАК ВидОтпуска,
		|	ТрудовыеОтпуска.РабочийГодПо,
		|	ТрудовыеОтпуска.РабочийГодС,
		|	ТрудовыеОтпуска.ДнейОтпуска КАК Продолжительность,
		|	ЕСТЬNULL(КомпенсацияЗаНеиспользованныйОтпуск.ДнейОтпуска, 0) КАК ПродолжительностьВсего,
		|	ВЫРАЗИТЬ(КомпенсацияОтпуска.Основание КАК СТРОКА(1000)) КАК Основание
		|ИЗ
		|	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК КомпенсацияОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.Отпуска КАК ТрудовыеОтпуска
		|			ПО ТрудовыеОтпуска.Ссылка = &ТекущийДокумент
		|				И КомпенсацияОтпуска.Сотрудник = ТрудовыеОтпуска.Сотрудник
		|				И КомпенсацияОтпуска.ДатаКомпенсации = ТрудовыеОтпуска.ДатаКомпенсации
		|				И КомпенсацияОтпуска.Сторно = ТрудовыеОтпуска.Сторно
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки,
		|			СУММА(ТЧОтпуска.ДнейОтпуска) КАК ДнейОтпуска
		|		ИЗ
		|			Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска
		|				ПО ТЧОтпуска.Ссылка = &ТекущийДокумент
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|					И ТЧРаботникиОрганизации.ДатаКомпенсации = ТЧОтпуска.ДатаКомпенсации
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ТекущийДокумент
		|			И НЕ ТЧРаботникиОрганизации.Сторно
		|		СГРУППИРОВАТЬ ПО 
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК КомпенсацияЗаНеиспользованныйОтпуск
		|		ПО КомпенсацияОтпуска.НомерСтроки = КомпенсацияЗаНеиспользованныйОтпуск.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        КомпенсацияОтпуска.ФизЛицо
		|		    ИЗ
		|		        Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК КомпенсацияОтпуска
		|		    ГДЕ
		|		        КомпенсацияОтпуска.Ссылка = &ТекущийДокумент
		|		        И НЕ КомпенсацияОтпуска.Сторно)) КАК ФИОФизЛиц
		|		ПО КомпенсацияОтпуска.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|			РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|			РаботникиОрганизации.ТарифныйРазряд.Наименование КАК ТарифныйРазрядНаименование,
		|			РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|			СписокДат.НомерСтроки КАК НомерСтроки
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|				КомпенсацияОтпуска.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК КомпенсацияОтпуска
		|					ПО РаботникиВнутри.Период <= КомпенсацияОтпуска.ДатаКомпенсации
		|						И РаботникиВнутри.Сотрудник = КомпенсацияОтпуска.Сотрудник
		|						И (РаботникиВнутри.Организация = &ГоловнаяОрганизация)
		|			ГДЕ
		|				КомпенсацияОтпуска.Ссылка = &ТекущийДокумент
		|				И НЕ КомпенсацияОтпуска.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник,
		|				КомпенсацияОтпуска.НомерСтроки) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|					И СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период) КАК ДанныеОРаботникахОрганизации
		|		ПО КомпенсацияОтпуска.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|
		|ГДЕ
		|	КомпенсацияОтпуска.Ссылка = &ТекущийДокумент
		|	И НЕ КомпенсацияОтпуска.Сторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник, ДатаКомпенсации, РабочийГодС";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой приказа списком,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказаСписком()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций_ПриказСписком";

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("ПриказСписком");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		ОбластьМакетаШапка.Параметры.НомерДок = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапкиИПодвала.НазваниеОрганизации);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	СчПечати = 0;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Цикл
		СчПечати = СчПечати + 1;
		Если СчПечати > 15 Тогда 
			Прервать;
		КонецЕсли;		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказаСписком()	

// Функция формирует табличный документ с печатной формой приказа на одного сотрудника
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций_Приказ";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиРаботники").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Приказ");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаОтпуск = Макет.ПолучитьОбласть("Отпуск"); // строка отпуска
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
	КонецЕсли;

	// Начинаем формировать выходной документ
	ЕстьДанные = ВыборкаРаботники.Следующий();
	
	Пока ЕстьДанные Цикл
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		НомерСтрокиДляПечати = 1;
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаРаботники);
        
        СтруктураФИО = Новый Структура;
        СтруктураФИО.Вставить("Фамилия",ВыборкаРаботники.Фамилия); 
        СтруктураФИО.Вставить("Имя",ВыборкаРаботники.Имя);
        СтруктураФИО.Вставить("Отчество",ВыборкаРаботники.Отчество);
        ФИОРаботника = ОбщегоНазначения.ПреобразоватьФИОВДательныйПадеж(СтруктураФИО, ВыборкаРаботники.НеСклонятьФамилию);
        ОбластьМакетаШапка.Параметры.Работник = ?(ФИОРаботника = "", ВыборкаРаботники.Работник, ФИОРаботника);
        
        Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакетаШапка.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		
		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтрокиРаботники;
		КонецЕсли; 
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаРаботники);
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		ТекущийНомерСтроки = ВыборкаРаботники.НомерСтрокиРаботники;
		Пока ЕстьДанные
				И ВыборкаРаботники.НомерСтрокиРаботники = ТекущийНомерСтроки Цикл
			
			ОбластьМакетаОтпуск.Параметры.Заполнить(ВыборкаРаботники);
			ОбластьМакетаОтпуск.Параметры.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
			
			ТабДокумент.Вывести(ОбластьМакетаОтпуск);
				
			НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
				
			ЕстьДанные = ВыборкаРаботники.Следующий();
				
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакетаОтпуск);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказ()	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа неиспользованным отпусками
//
// Параметры:
//	ПоСпискуРаботников - булево, если Истина, то выбирает неиспользованные отпуска только для указанных в т.ч. Работники
//								 иначе - всех работников по организации на дату документа
//	СтрокаРаботникиОрганизации - строка т.ч. РаботникиОрганизации, к-рую рассчитывать
//
Процедура Автозаполнение(ПоСпискуРаботников, СтрокаРаботникиОрганизации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация!");
		Возврат;
	КонецЕсли;

    ПараметрыЗапроса = Новый Структура();
    ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
    ПараметрыЗапроса.Вставить("ОбособленноеПодразделение", Организация);
	
	Если ИсправляемыйДокумент <> Неопределено Тогда
		УсловиеИсправлемыйДокумент = Истина;
		ПараметрыЗапроса.Вставить("ИсправлемыйДокумент", ИсправляемыйДокумент);
	Иначе
		УсловиеИсправлемыйДокумент = Ложь;
	КонецЕсли;
	
	Если ПоСпискуРаботников Тогда
		// по списку работников в табличной части РаботникиОрганизации
		ПараметрыЗапроса.Вставить("ДокументСсылка", Ссылка);
		
		УсловиеПоРаботнику = "";
		Если СтрокаРаботникиОрганизации <> Неопределено Тогда
			УсловиеПоРаботнику = "Сотрудник = &Сотрудник И ДатаКомпенсации = &ДатаКомпенсации";
			
			ПараметрыЗапроса.Вставить("Сотрудник", 		 СтрокаРаботникиОрганизации.Сотрудник);
			ПараметрыЗапроса.Вставить("ДатаКомпенсации", СтрокаРаботникиОрганизации.ДатаКомпенсации);
		КонецЕсли;
		
		// для предотвращения некорректного расчета в случае, когда введено несколько строк по одному работнику
		// рассчитываем на самую последнуюю дату
		ДанныеРасчетаТекст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ГоловнаяОрганизация КАК Организация,
		|	СтрокиТЧ.Сотрудник,
		|	МАКСИМУМ(СтрокиТЧ.ДатаКомпенсации) КАК ДатаРасчета,
		|	МАКСИМУМ(СтрокиТЧ.ПоРабочийГод) КАК ПоРабочийГод
		|ПОМЕСТИТЬ ВТ_ДанныеРасчета
		|ИЗ
		|	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК СтрокиТЧ
		|ГДЕ
		|	СтрокиТЧ.Ссылка = &ДокументСсылка
		|	И НЕ СтрокиТЧ.Сторно
		|	" + ?(УсловиеПоРаботнику <> "", " И " + УсловиеПоРаботнику, "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиТЧ.Сотрудник
		|";
		  
	Иначе
		// всех работников из регистра РаботникиОрганизаций
		ПараметрыЗапроса.Вставить("ДатаДок", НачалоДня(Дата));
		ПараметрыЗапроса.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
		
		ДанныеРасчетаТекст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Организация,
		|	РаботникиОрганизации.Сотрудник,
		|	&ДатаДок КАК ДатаРасчета
		|ПОМЕСТИТЬ ВТ_ДанныеРасчета
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
		|	И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
		|";
		
	КонецЕсли;

	НеиспользованныеОтпускаТекст = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаНеиспользованныеОтпуска(ДанныеРасчетаТекст, ПараметрыЗапроса, УсловиеИсправлемыйДокумент);
		
	// определим общее число дней неиспользованного отпуска
	ТекстЗапроса = "
	|" + НеиспользованныеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеиспользованныеОтпуска.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	НеиспользованныеОтпуска.Сотрудник.Наименование КАК ФИОСотрудника,
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.ДатаРасчета КАК ДатаКомпенсации,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.РабочийГодПо
	|";
	
	Если ПоСпискуРаботников Тогда
	
		ТекстЗапроса = ТекстЗапроса + ",
		|	ВЫБОР
		|		КОГДА ДанныеРасчета.ПоРабочийГод <> 0 И ГОД(НеиспользованныеОтпуска.РабочийГодС) > ДанныеРасчета.ПоРабочийГод // у работника до указанного года отпусков нет
		|			ТОГДА 0
		|		ИНАЧЕ НеиспользованныеОтпуска.Результат
		|	КОНЕЦ КАК ДнейОтпуска,
		|	ДанныеРасчета.ПоРабочийГод
		|";
		
	Иначе
	
	    ТекстЗапроса = ТекстЗапроса + ",
	    |	НеиспользованныеОтпуска.Результат КАК ДнейОтпуска,
	    |	0 КАК ПоРабочийГод
	    |";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИЗ
	|	ВТ_НеиспользованныеОтпуска КАК НеиспользованныеОтпуска
	|";
	
	Если ПоСпискуРаботников Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеРасчета КАК ДанныеРасчета
		|		ПО НеиспользованныеОтпуска.Сотрудник = ДанныеРасчета.Сотрудник
		|			И НеиспользованныеОтпуска.ДатаРасчета = ДанныеРасчета.ДатаРасчета
		|";
	
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НеиспользованныеОтпуска.Сотрудник.Наименование,
	|	НеиспользованныеОтпуска.ДатаРасчета,
	|	ВЫБОР КОГДА НеиспользованныеОтпуска.Результат < 0 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска
	|
	|ИТОГИ
	|	МАКСИМУМ(ФИОСотрудника),
	|	МАКСИМУМ(ПоРабочийГод),
	|	СУММА(ДнейОтпуска)
	|ПО
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.ДатаРасчета
	|";
		
	Запрос = Новый Запрос;
	
	// установим параметры запроса
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	                       
	Запрос.Текст = ТекстЗапроса;
	                            
	ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// удалим старые строки
	Если ПоСпискуРаботников И СтрокаРаботникиОрганизации <> Неопределено Тогда
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Сотрудник", 		СтрокаРаботникиОрганизации.Сотрудник);
		СтруктураПоиска.Вставить("ДатаКомпенсации", СтрокаРаботникиОрганизации.ДатаКомпенсации);
		СтруктураПоиска.Вставить("Сторно",			СтрокаРаботникиОрганизации.Сторно);
		
		НайденныеСтроки = Отпуска.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из НайденныеСтроки Цикл
			Отпуска.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		СтрокаРаботникиОрганизации.ДнейОтпуска = 0;
	Иначе
		ТЗОтпускаСторно = Отпуска.Выгрузить(Отпуска.НайтиСтроки(Новый Структура("Сторно", Истина)),);
		Отпуска.Очистить();
		
		// проставим во всех строках т.ч. РаботникиОрганизации ДнейОтпуска = 0
		Для Каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			Если НЕ СтрокаТЧ.Сторно Тогда
				СтрокаТЧ.ДнейОтпуска = 0;
			КонецЕсли;
		КонецЦикла;
		Отпуска.Загрузить(ТЗОтпускаСторно);
	КонецЕсли;
	
		Пока ВыборкаСотрудник.Следующий() Цикл
			ВыборкаДатаКомпенсации = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДатаКомпенсации.Следующий() Цикл
				
				Если ВыборкаДатаКомпенсации.ДнейОтпуска > 0 Тогда
				
					// установим общее число дней в т.ч. РаботникиОрганизации
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Сотрудник", 		ВыборкаДатаКомпенсации.Сотрудник);
					СтруктураПоиска.Вставить("ДатаКомпенсации", ВыборкаДатаКомпенсации.ДатаКомпенсации);
					СтруктураПоиска.Вставить("Сторно", 			Ложь);
						
					Если ПоСпискуРаботников Тогда
						НайденныеСтроки = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденныеСтроки[0].ДнейОтпуска = ВыборкаДатаКомпенсации.ДнейОтпуска;
						КонецЕсли;
					Иначе
						// добавим в т.ч. РаботникиОрганизации
						НоваяСтрока = РаботникиОрганизации.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДатаКомпенсации);
					КонецЕсли;
					
					Выборка = ВыборкаДатаКомпенсации.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если Выборка.ДнейОтпуска <> 0 Тогда
							НоваяСтрока = Отпуска.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						КонецЕсли;
					КонецЦикла;
				
				Иначе
					
					ТекстСообщения = ВыборкаДатаКомпенсации.ФИОСотрудника + " не имеет на " + Формат(ВыборкаДатаКомпенсации.ДатаКомпенсации, "ДФ=dd.MM.yyyy") + " неиспользованных дней отпуска";
					
					Если ЗначениеЗаполнено(ВыборкаДатаКомпенсации.ПоРабочийГод) Тогда
						ТекстСообщения = ТекстСообщения + " за период работы по " + Формат(ВыборкаДатаКомпенсации.ПоРабочийГод, "ЧГ=0") + " г. включительно";
					КонецЕсли;
				
					Сообщить(ТекстСообщения + "!");
				
				КонецЕсли;
			КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

    Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
					|	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
					|	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
					|ИЗ
					 |	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
					|
					|ГДЕ
					|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка И
					|	(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> &ПустаяДата)");
						
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаНачала <> Null и Выборка.ДатаОкончания <> Null и Не ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
 	Если ИмяМакета = "ПриказСписком" Тогда
 		ТабДокумент = ПечатьПриказаСписком()
 	ИначеЕсли ИмяМакета = "Приказ" Тогда
 		ТабДокумент = ПечатьПриказа()
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПриказСписком, Приказ", "Приказ на список сотрудников", "Приказ на каждого сотрудника");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КомпенсацияОтпусков.Дата,
	               |	КомпенсацияОтпусков.Организация,
	               |	ВЫБОР 
			   	   |		КОГДА КомпенсацияОтпусков.Организация.ГоловнаяОрганизация = &ПустаяОрганизация 
			       |			ТОГДА КомпенсацияОтпусков.Организация 
			   	   |			ИНАЧЕ КомпенсацияОтпусков.Организация.ГоловнаяОрганизация 
				   |		КОНЕЦ КАК ГоловнаяОрганизация,
	               |	КомпенсацияОтпусков.Ссылка
	               |ИЗ
	               |	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций КАК КомпенсацияОтпусков
	               |
	               |ГДЕ
	               |	КомпенсацияОтпусков.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - табличная часть запроса
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 	 Ссылка);
	Запрос.УстановитьПараметр("Организация",		 Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПустаяДата", 		 Дата('00010101'));
	Запрос.УстановитьПараметр("Прием" ,      		 Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаКомпенсации,
		|	ТЧРаботникиОрганизации.ДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер
		|ИЗ
		|	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка) 
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник 
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки 
		|					И ТЧРаботникиОрганизации.ДатаКомпенсации = ТЧРаботникиОрганизации2.ДатаКомпенсации
		|					И НЕ ТЧРаботникиОрганизации2.Сторно
		|		
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|			ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И НЕ ТЧРаботникиОрганизации.Сторно
		|";
		
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтрокиРаботникиОрганизации,
		|	ТЧОтпуска.НомерСтроки КАК НомерСтрокиОтпуска,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
		|	ТЧРаботникиОрганизации.ДатаКомпенсации КАК ДатаКомпенсации,
		|	ТЧОтпуска.ВидТрудовогоОтпуска КАК ВидОтпуска,
		|	ТЧОтпуска.РабочийГодС КАК РабочийГодС,
		|	ТЧОтпуска.РабочийГодПо КАК РабочийГодПо,
		|	ТЧОтпуска.ДнейОтпуска КАК ДнейОтпуска,
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТЧОтпуска.РабочийГодС, ГОД), МЕСЯЦ, МЕСЯЦ(ПриказыОПриеме.Период) - 1), ДЕНЬ, ДЕНЬ(ПриказыОПриеме.Период) - 1) = ТЧОтпуска.РабочийГодС
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеС,
		|	ВЫБОР
		|		КОГДА " + ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода("ТЧОтпуска.РабочийГодС") + " = ТЧОтпуска.РабочийГодПо
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаВРабочемГодеПо,
		|	NULL КАК КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧОтпуска.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
		|ИЗ
		|	Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.Отпуска КАК ТЧОтпуска
		|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧОтпуска.Сотрудник
		|			И ТЧРаботникиОрганизации.Ссылка = ТЧОтпуска.Ссылка
		|			И ТЧРаботникиОрганизации.ДатаКомпенсации = ТЧОтпуска.ДатаКомпенсации
		|			И НЕ ТЧОтпуска.Сторно
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				Документ.КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|						И (Работники.Организация = &ГоловнаяОрганизация)
		|						И Работники.Период <= ТЧРаботникиОрганизации.ДатаКомпенсации
		|						И (Работники.ПричинаИзмененияСостояния = &Прием)
		|			ГДЕ
		|				ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|				И НЕ ТЧРаботникиОрганизации.Сторно
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ПриказыОПриеме
		|		ПО ПриказыОПриеме.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
		|
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И НЕ ТЧРаботникиОрганизации.Сторно
	 	|";
		
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, сотрудникам которой предоставляется компенсация за неиспользованный отпуск!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, Режим)

	Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";
	ИначеЕсли Режим = "ПоТабличнойЧастиОтпуска" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиОтпуска) +
		""" табл. части ""Неиспользованных трудовых отпусков"" для строки номер """ + СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтрокиРаботникиОрганизации) +
		""" табл. части ""Сотрудники"": ";
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НЕ ЕстьСотрудник Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаКомпенсации
	ЕстьДатаКомпенсации = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаКомпенсации);
	Если НЕ ЕстьДатаКомпенсации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата предоставления компенсации!", Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьСотрудник И ЕстьДатаКомпенсации Тогда

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;	
			
		Если Режим = "ПоТабличнойЧастиРаботникиОрганизации" Тогда
	
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДнейОтпуска) Тогда
				//Приказ о приеме не принадлежит физлицу
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " не указаны число компенсируемых дней отпуска!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если Режим = "ПоТабличнойЧастиОтпуска" Тогда
			
		// РабочийГодС
		ЕстьРабочийГодС = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодС);
		Если НЕ ЕстьРабочийГодС Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала рабочего года!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеС Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала рабочего года не соответствует дате приема!", Отказ, Заголовок);
		КонецЕсли;
			
		// РабочийГодПо
		ЕстьРабочийГодПо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РабочийГодПо);
		Если Не ЕстьРабочийГодПо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания рабочего года!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеПо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания рабочего года не соответствует дате приема!", Отказ, Заголовок);
		КонецЕсли;
			
		// Вид отпуска
		ЕстьВидОтпуска = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидОтпуска);
		Если НЕ ЕстьВидОтпуска Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ИспользованиеОтпусковРаботникамиОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
					СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

	Режим = "ПоТабличнойЧастиОтпуска";
	Если СтруктураПараметров.Свойство(Режим) Тогда
	  	ИмяРегистра = "ИспользованиеОтпусковРаботникамиОрганизаций";
		Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период           		    = ВыборкаПоРаботникиОрганизации.ДатаКомпенсации;

			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Сотрудник			    	= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ВидТрудовогоОтпуска	   	= ВыборкаПоРаботникиОрганизации.ВидОтпуска;

			// Ресурсы
			Движение.ИспользованоДней       	= ВыборкаПоРаботникиОрганизации.ДнейОтпуска; 

			// Реквизиты
			Движение.РабочийГодС       			= ВыборкаПоРаботникиОрганизации.РабочийГодС;
			Движение.РабочийГодПо       		= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
			Движение.ВидСтроки       			= Перечисления.ИспользованиеОтпусковВидСтроки.КомпенсацияОтпуска;
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиРаботникиОрганизации");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			// По табличной части "Работники организации"
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиРаботникиОрганизации");

			КонецЦикла;
			
			// По табличной части "Отпуска"
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, "ПоТабличнойЧастиОтпуска");
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ПоТабличнойЧастиОтпуска");
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, "ПоТабличнойЧастиОтпуска");

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров);
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры


мДлинаСуток = 86400;
мВосстанавливатьДвижения = Ложь;