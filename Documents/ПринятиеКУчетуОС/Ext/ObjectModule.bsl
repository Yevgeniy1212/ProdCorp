Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем ВедетсяАналитУчетОсПоПодразделениям;
Перем ВедетсяАналитУчетОсПоМОЛ;

//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьДА1()
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии");
	
	// запрос для реквизитов шапки 
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументОС.Дата,
		|	ДокументОС.Номер,
		|	ДокументОС.Организация,
		|	ДокументОС.СтруктурноеПодразделение,
		|	ДокументОС.ДокументОснование,
		|	ДокументОС.ДокументОснованиеВид,
		|	ДокументОС.ДокументОснованиеДата,
		|	ДокументОС.ДокументОснованиеНомер,
		|	ДокументОС.ДокументОснование.Контрагент КАК Контрагент,
		|	ДокументОС.СчетУчетаОбъектаСтроительстваБУ,
		|	ДокументОС.СчетУчетаНоменклатурыБУ,
		|	ДокументОС.ИнвентаризационнаяКомиссия.(
		|		Ссылка,
		|		НомерСтроки,
		|		ФизЛицо,
		|		Председатель
		|	) КАК ИнвентаризационнаяКомиссия
		|ИЗ
		|	Документ.ПринятиеКУчетуОС КАК ДокументОС
		|ГДЕ
		|	ДокументОС.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",      ЭтотОбъект.Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ВЫРАЗИТЬ(ДокументОСОС.ОсновноеСредство.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеОС,
		|	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.ЗаводскойНомер,1,250) КАК ЗаводскойНомер,
		|	ПОДСТРОКА(ДокументОСОС.ОсновноеСредство.НомерПаспорта,1,250) КАК НомерПаспорта,
		|	ДокументОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		|	ДокументОСОС.МОЛ,
		|	ДокументОСОС.ИнвентарныйНомер,
		|	ДокументОСОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
		//|	ДокументОСОС.СрокПолезногоИспользованияБУ КАК СрокСлужбыНормативной,
		|	ДокументОСОС.СрокИспользованияДляВычисленияАмортизацииБУ КАК СрокСлужбыПолезной,
		|	ДокументОСОС.СчетУчетаБУ
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОС КАК ДокументОСОС
		|ГДЕ
		|	ДокументОСОС.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	РезЗапросаОС = Запрос.Выполнить();
	ТаблицаОС 	 = РезЗапросаОС.Выгрузить();
	
	ТаблицаМОЛ = ТаблицаОС.Скопировать();
	ТаблицаМОЛ.Свернуть("МОЛ");
		
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("ДА1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            		  = Макет.ПолучитьОбласть("Шапка");
	Таблица1		 		  = Макет.ПолучитьОбласть("Таблица1");
	СтрокаТаблицы1	 		  = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ЗаголовокТаблицы2		  = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	СтрокаТаблицы2   		  = Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоСтрокаТаблицы2		  = Макет.ПолучитьОбласть("ИтогоСтрокаТаблицы2");
	Приказ			 		  = Макет.ПолучитьОбласть("Приказ");
	Подвал           		  = Макет.ПолучитьОбласть("Подвал");	
	ШапкаОборотнойСтороны	  = Макет.ПолучитьОбласть("ШапкаОборотнойСтороны");	
	ОССдал			 		  = Макет.ПолучитьОбласть("ОССдал|Сдал");
	ПодвалВерх	     		  = Макет.ПолучитьОбласть("ПодвалВерх");
	ПодвалНиз	     		  = Макет.ПолучитьОбласть("ПодвалНиз");
	ПодвалДатаСдал   		  = Макет.ПолучитьОбласть("ПодвалДата|Сдал");
	ПодвалДатаПринял 		  = Макет.ПолучитьОбласть("ПодвалДата|Принял");
	ОСПринял		  		  = Макет.ПолучитьОбласть("ОССдал|Принял");
	Комиссия          		  = Макет.ПолучитьОбласть("Комиссия");	
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	ПустаяСекцияСдал 		  = Макет.ПолучитьОбласть("ПодвалПустаяСекция|Сдал");
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ДА1";

	////////////////////////////////////////////////////////////////////////
	// 1-я страница формы
	
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-сдатчик
	ПредставлениеОрганизацииСдатчик = "";
	Если ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СведенияОбОрганизацииСдатчике					= ОбщегоНазначения.СведенияОЮрФизЛице(Док.Контрагент, Док.Дата);
		ПредставлениеОрганизацииСдатчик				 	= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "ПолноеНаименование,");
		Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;
		Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииСдатчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	ИначеЕсли ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.РеструктуризацияОС")
			  ИЛИ ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		ПредставлениеОрганизацииСдатчик					= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");			  
		Шапка.Параметры.ПредставлениеОрганизацииСдатчик = ПредставлениеОрганизацииСдатчик;			
		Шапка.Параметры.ОрганизацияРНН_БИН_Сдатчик		= ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	КонецЕсли;
	
	// Организация-получатель
	СведенияОбОрганизацииПолучателе					   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ПредставлениеОрганизацииПолучатель = СведенияОбОрганизацииПолучателе;
	Шапка.Параметры.ОрганизацияРНН_БИН_Получатель	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	Шапка.Параметры.НомерДок           		 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.ДатаДок           		 = Формат(Док.Дата,"ДЛФ=Д");
	Шапка.Параметры.РасшифровкаПодписиПринял = Руководители.Руководитель;
	Шапка.Параметры.ДолжностьПринял          = Руководители.РуководительДолжность;
	
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.Вывести(Таблица1);
	
	//Заполняем раздел "Основание"
	Если Док.ДокументОснование <> Неопределено И ЗначениеЗаполнено(Док.ДокументОснование) Тогда 
		СтрокаТаблицы1.Параметры.НаимДокОсн	 = Док.ДокументОснование.Метаданные().Синоним;
		СтрокаТаблицы1.Параметры.НомерДокОсн = Док.ДокументОснование.Номер;
		СтрокаТаблицы1.Параметры.ДатаДокОсн	 = Док.ДокументОснование.Дата;
	КонецЕсли;	

	Сдатчик    = "";
	СчетКт     = "";
	
	Сдатчик    = ПредставлениеОрганизацииСдатчик; 
	Получатель = СведенияОбОрганизацииПолучателе; 
	
	Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства Тогда
		Если ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СчетКт = Док.ДокументОснование.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование   Тогда
		СчетКт = Док.СчетУчетаНоменклатурыБУ;	
	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства   Тогда
		СчетКт = Док.СчетУчетаОбъектаСтроительстваБУ;	
	КонецЕсли;
	
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету = '00010101';

	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
			
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы1) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(Таблица1);
			
		КонецЕсли;
		
		СтрокаТаблицы1.Параметры.Заполнить(СтрокаОС);
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.НаименованиеОС) Тогда 
			СтрокаТаблицы1.Параметры.НаименованиеОС = СтрокаОС.ОсновноеСредство;
        КонецЕсли;
		
		УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(СтрокаОС.ОсновноеСредство, Док.Организация, Перечисления.ВидыСостоянийОС.ПринятоКУчету, Док.Дата, ДокументПринятияКУчетуБУ,  ДатаПринятияКУчету);
		ТабДокумент.Вывести(СтрокаТаблицы1);
	
	КонецЦикла;
	
	
		
	// выводим вторую часть таблицы
	ЗаголовокТаблицы2.Параметры.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ЗаголовокТаблицы2);
	
	ДокументПринятияКУчетуБУ = Неопределено;
	ДатаПринятияКУчету 		 = '00010101';

	// Выведем строки таблицы
	
	ИтогоБалансоваяСтоимость = 0;
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы2);
		КонецЕсли;
		
		СтрокаТаблицы2.Параметры.Заполнить(СтрокаОС);
		
		//СтрокаТаблицы2.Параметры.ДатаВводаВЭксплуатацию = Док.Дата;
		СтрокаТаблицы2.Параметры.СчетКт 				= СчетКт;
		СтрокаТаблицы2.Параметры.СчетДт 				= СтрокаОС.СчетУчетаБУ;
        СтрокаТаблицы2.Параметры.СуммаАмортизации		= "";
        СтрокаТаблицы2.Параметры.БалансоваяСтоимость	= СтрокаОС.ПервоначальнаяСтоимость;
		
		
		
		ТабДокумент.Вывести(СтрокаТаблицы2);
		ИтогоБалансоваяСтоимость							   = ИтогоБалансоваяСтоимость + СтрокаТаблицы2.Параметры.БалансоваяСтоимость;
		ИтогоСтрокаТаблицы2.Параметры.ИтогоБалансоваяСтоимость = ИтогоБалансоваяСтоимость;
		
			
	КонецЦикла;	
	
      ТабДокумент.Вывести(ИтогоСтрокаТаблицы2);

	//Приказ.Параметры.Заполнить(Док);
	
	//формируем список основных средств через запятую
	СписокОС = "";
	СписокНаименованийОС = ТаблицаОС.Скопировать();
	СписокНаименованийОС.Свернуть("НаименованиеОС");
	Для Каждого СтрокаОС ИЗ СписокНаименованийОС Цикл
		Если СписокОС = "" Тогда
			СписокОС = СтрокаОС.НаименованиеОС;
		Иначе
			СписокОС = СписокОС + ", " + СтрокаОС.НаименованиеОС;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Док.ДокументОснованиеВид) Тогда
		Если Док.ДокументОснованиеВид = "приказа" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "приказа";
		ИначеЕсли Док.ДокументОснованиеВид = "постановления" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "постановления";
		ИначеЕсли Док.ДокументОснованиеВид = "распоряжения" Тогда
			Приказ.Параметры.ДокументОснованиеВид = "распоряжения";
		КонецЕсли;	
	Иначе
		Приказ.Параметры.ДокументОснованиеВид = "приказа (распоряжения)";
	КонецЕсли;
	
	Стр 									= """_____"""+"________________________ 20_____года";
	Приказ.Параметры.ДокументОснованиеДата 	= ?(ЗначениеЗаполнено(Док.ДокументОснованиеДата), Формат(Док.ДокументОснованиеДата, "ДФ=""дд ММММ гггг 'года'"""), Стр);
	Приказ.Параметры.ДокументОснованиеНомер = ?(ЗначениеЗаполнено(Док.ДокументОснованиеНомер),Док.ДокументОснованиеНомер,"__________ ");
	Приказ.Параметры.НаименованиеОбъекта	= СписокОС;
	ТабДокумент.Вывести(Приказ);
	
	ТабДокумент.Вывести(Подвал);
	
	//выводим комиссию
	
	//сначала председатель 
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = ДанныеПредседателя.Должность;
		Комиссия.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
	Иначе
		Комиссия.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		Комиссия.Параметры.Должность                = "";
		Комиссия.Параметры.РасшифровкаПодписи       = "";
	КонецЕсли;
	
	ТабДокумент.Вывести(Комиссия);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.Дата);
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ТаблицаИнвентаризационнаяКомиссия.Количество() < 1 Тогда
		ВыводитьЗаголовок = Истина;	
		
		Для Итератор = 1 По 3 Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии  = ?(ВыводитьЗаголовок, 
			                                                 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			                                                 "");
			Комиссия.Параметры.Должность          = "";
			Комиссия.Параметры.РасшифровкаПодписи = "";
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
	Иначе
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
			
			Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Комиссия) Тогда
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			КонецЕсли;
			
			Комиссия.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
			                                                ЗаголовокРазделаКомиссии.ЧленыКомиссии,
			                                                "");
			Комиссия.Параметры.Должность          = ЧленКомиссии.Должность;
			Комиссия.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
			
			ТабДокумент.Вывести(Комиссия);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ШапкаОборотнойСтороны);
	
	ОССдал.Параметры.ОбъектОсновныхСредств = "Долгосрочный актив";
	ОССдал.Параметры.Сдал				   = "Сдал";
	ТабДокумент.Вывести(ОССдал);
	
	//список МОЛ
	СписокМОЛ = ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ");
	ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокМОЛ, Док.Дата);

	ВыводитьПринял 	 = Истина;
	ВыведенаОСПринял = Ложь;
	ВыведенаДатаСдал = Ложь;
	
	Для Каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОСПринял) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьПринял = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОСПринял.Параметры.Принял = ?(ВыводитьПринял,	"Принял" ,"");

		ОСПринял.Параметры.Должность          = СтрокаМОЛ.Должность;
		ОСПринял.Параметры.РасшифровкаПодписи = СтрокаМОЛ.Представление;
		
		Если ВыведенаОСПринял Тогда
			Если НЕ ВыведенаДатаСдал Тогда
				ТабДокумент.Вывести(ПодвалДатаСдал);
				ВыведенаДатаСдал = Истина;
			Иначе
				ТабДокумент.Вывести(ПустаяСекцияСдал);
			КонецЕсли;
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОСПринял);
		
		ВыведенаОСПринял = Истина;
		
		ВыводитьПринял = Ложь;
		
	КонецЦикла;

	Если НЕ ВыведенаДатаСдал Тогда
		ТабДокумент.Вывести(ПодвалДатаСдал);
		ВыведенаДатаСдал = Истина;
	Иначе
		ТабДокумент.Вывести(ПустаяСекцияСдал);
	КонецЕсли;
	ТабДокумент.Присоединить(ПодвалДатаПринял);
	
	ПодвалВерх.Параметры.Доверенность = "№_____________ от ""____""___________________ 20___ года";
	
	ТабДокумент.Вывести(ПодвалВерх);
	ТабДокумент.Вывести(ПодвалНиз);
	
	// Выведем подпись бухгалтера
	ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписиПринял = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьПринятиеКУчетуОС()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ДА1" Тогда
		
		ТабДокумент = ПечатьДА1();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("ДА1","ДА-1 (Акт премки-передачи)");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	Если ЗаполнятьНУ  = Истина Тогда

		СтрокаТЧ.СчетУчетаНУ = СчетаУчета.СчетУчетаНУ;
		
		Если НЕ ЗначениеЗаполнено (СтрокаТЧ.СчетУчетаНУ )Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, "СчетУчетаБУ","СчетУчетаНУ" , Дата);	
		КонецЕсли;	
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаНУ()
   
// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)
	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ                      = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетНачисленияАмортизацииБУ      = СчетаУчета.СчетНачисленияАмортизацииБУ;	
		СтрокаТЧ.СчетДоходовОтРеализацииБУ  	  = СчетаУчета.СчетДоходовОтРеализацииБУ;	
		СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ  = СчетаУчета.СчетУчетаЗатратПоМодернизацииБУ;
		СтрокаТЧ.СчетУчетаНДСПоРеализации 		  = СчетаУчета.СчетУчетаНДСПоРеализации;
		СтрокаТЧ.СчетУчетаНДСПоПриобретению    	  = СчетаУчета.СчетУчетаНДСПоПриобретению;
		
		
						
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетУчетаБУ) Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Типовой.ОсновныеСредства;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетНачисленияАмортизацииБУ) Тогда
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = ПланыСчетов.Типовой.АмортизацияОсновныхСредств;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетДоходовОтРеализацииБУ) Тогда
			СтрокаТЧ.СчетДоходовОтРеализацииБУ = ПланыСчетов.Типовой.ДоходыОтВыбытияАктивов;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ) Тогда
			СтрокаТЧ.СчетСебестоимостиПриРеализацииБУ = ПланыСчетов.Типовой.РасходыПоВыбытиюАктивов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ) Тогда
			СтрокаТЧ.СчетУчетаЗатратПоМодернизацииБУ = ПланыСчетов.Типовой.КапитальныйРемонтОС;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТЧ.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено( СтрокаТЧ.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	ЗаполнитьСчетаНУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ)Экспорт 
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет табличную часть ОС по данным документа-основания "Реструктуризация ОС"
//
Процедура ЗаполнитьТабличнуюЧастьОСПоРеструктуризации(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеструктуризацияОСОС.ОсновноеСредство,
	               |	РеструктуризацияОСОС.ОсновноеСредство.Код КАК КодОС,
	               |	РеструктуризацияОСОС.СтоимостьБУ,
	               |	РеструктуризацияОСОС.СчетУчетаБУ,
	               |	РеструктуризацияОСОС.СчетУчетаНУ
	               |ИЗ
	               |	Документ.РеструктуризацияОС.ОС КАК РеструктуризацияОСОС
	               |ГДЕ
	               |	РеструктуризацияОСОС.Ссылка = &Основание";
				   
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ОС.Добавить();
		
		СтрокаТЧ.ОсновноеСредство = Выборка.ОсновноеСредство;
		СтрокаТЧ.ИнвентарныйНомер = Выборка.КодОС;
		СтрокаТЧ.ПервоначальнаяСтоимостьБУ = Выборка.СтоимостьБУ;
		СтрокаТЧ.СтоимостьДляВычисленияАмортизацииБУ = Выборка.СтоимостьБУ;
		СтрокаТЧ.СчетУчетаБУ = Выборка.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНУ = Выборка.СчетУчетаНУ;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Если Основание.ЭтоГруппа Тогда
			Сообщить("Нельзя принять к учету группу основных средств", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 

		СтрокаТабличнойЧасти = ОС.Добавить();
    	
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Организация 	  		 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		СпособПоступления 		 = Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату; 
		ВидОперации		  		 = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства;
		ДокументОснование 		 = Основание;
		
		МассивОрганизаций 		= Новый массив;		//Организации, в которых учет ведется в одной базе
		ТаблицаОС 				= Новый ТаблицаЗначений; //Пустая таблица, которая будет заполнена текущими ос в целях присвоения им новых Инв. ном.
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			
			НоваяСтрока = ОС.Добавить();
			НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
			НоваяСтрока.ИнвентарныйНомер = ЦС_ПрефиксацияИнвентарныхНомеров.ПолучитьИнвентарныйНомер(МассивОрганизаций,Организация,ТекСтрокаОС.ОсновноеСредство,ТаблицаОС,?(ЭтоНовый(),ТекущаяДата(),Дата));
			НоваяСтрока.СчетУчетаБУ		 = ТекСтрокаОС.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНУ		 = ТекСтрокаОС.СчетУчетаНУ;
			НоваяСтрока.СчетУчетаНДСПоПриобретению = ТекСтрокаОС.СчетУчетаНДС;
			
			Сумма = Окр((ТекСтрокаОС.Сумма * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0,1,Основание.КратностьВзаиморасчетов)),2);
			СуммаНДС = Окр((ТекСтрокаОС.СуммаНДС * Основание.КурсВзаиморасчетов / ?(Основание.КратностьВзаиморасчетов = 0,1,Основание.КратностьВзаиморасчетов)),2);
			
			НоваяСтрока.ПервоначальнаяСтоимостьБУ = Сумма;
			НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма;
			
			Если Основание.НДСВключенВСтоимость И НЕ Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.ПервоначальнаяСтоимостьБУ			= Сумма + СуммаНДС;
				НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма + СуммаНДС;								
			ИначеЕсли НЕ Основание.НДСВключенВСтоимость И Основание.СуммаВключаетНДС Тогда 			
				НоваяСтрока.ПервоначальнаяСтоимостьБУ 			= Сумма - СуммаНДС;
				НоваяСтрока.СтоимостьДляВычисленияАмортизацииБУ = Сумма - СуммаНДС;				
			КонецЕсли;
			
			НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаОС.ПодразделениеОрганизации;
			НоваяСтрока.МОЛ = ТекСтрокаОС.МОЛОрганизации;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда
		
		Организация 			 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		СпособПоступления 		 = Перечисления.СпособыПоступленияАктивов.ПоРезультатамИнвентаризации; 
		ВидОперации		  		 = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
		ДокументОснование 		 = Основание; 
		КорСчетОприходованияБУ 	 = ПланыСчетов.Типовой.ПрочиеДоходы;
		
		Для Каждого ТекСтрокаОС Из Основание.ОС Цикл
			Если НЕ ТекСтрокаОС.НаличиеПоДаннымУчета И ТекСтрокаОС.НаличиеФактическое Тогда
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство 		  = ТекСтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПервоначальнаяСтоимостьБУ = ТекСтрокаОС.СтоимостьФактическая;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание)	 = Тип("ДокументСсылка.РеструктуризацияОС") Тогда
		
		Организация				 = Основание.Организация;
		СтруктурноеПодразделение = Основание.СтруктурноеПодразделение;
		СпособПоступления 		 = Перечисления.СпособыПоступленияАктивов.Иное; 
		ВидОперации		 		 = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОсновныеСредства;
		ДокументОснование		 = Основание; 
		
		ЗаполнитьТабличнуюЧастьОСПоРеструктуризации(Основание);
		
	КонецЕсли;

КонецПРоцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение НЕ заполнен или
// заполнен НЕ корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		СтруктураОбязательныхПолей.Вставить("КорСчетОприходованияБУ", "Не заполнено значение реквизита  ""Счет оприходования""");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
		СтруктураОбязательныхПолей.Вставить("Номенклатура", "Не заполнено значение реквизита ""Оборудование""");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНоменклатурыБУ", "Не заполнено значение реквизит  ""Счет учета (БУ)""");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		СтруктураОбязательныхПолей.Вставить("ОбъектСтроительства", "Не заполнено значение реквизита ""Объект""");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаОбъектаСтроительстваБУ", "Не заполнено значение реквизита ""Счет учета (БУ)""");
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

			
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство,ИнвентарныйНомер,СчетУчетаБУ, ПодразделениеОрганизации, МОЛ"; //через запятую

	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	БухУчет    = Истина;
	НалУчет    = ?(СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ, Истина, Ложь);

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда 
		РеквизитыВысокойВажности = "";
	Иначе 
		РеквизитыВысокойВажности = "ПервоначальнаяСтоимостьБУ";
	КонецЕсли;
		
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;

	Для Каждого СтрокаТЧ Из ОС Цикл

		ПроверкаПоСтроке(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, Отказ,Заголовок, МетаданныеРеквизиты, СтруктураШапкиДокумента);

	КонецЦикла;

КонецПроцедуры // ПроверкаРеквизитов()

//Проверка заполнения реквизитов
//
Функция ПроверкаПоСтроке(СтрокаОС, БезусловныеРеквизиты, БухУчет, НалУчет, Отказ, Заголовок, МетаданныеРеквизиты, СтруктураШапкиДокумента)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;

	//Проверка реквизитов бух. учете
	РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизацииБУ"	,СтатусСообщения.Важное);

	//Проверка реквизитов групп амортизации
	Если СтрокаОС.НачислятьАмортизациюБУ Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ" ,СтатусСообщения.Важное);
		
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда 
			РеквизитыДляПроверки.Вставить("СтоимостьДляВычисленияАмортизацииБУ", СтатусСообщения.Важное);
		КонецЕсли;
				
	    Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
			или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
			или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка 
			Или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
				РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ" ,СтатусСообщения.Важное);
		КонецЕсли;
		
		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"	  ,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботБУ" ,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботДляВычисленияАмортизацииБУ" ,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскоренияБУ" ,СтатусСообщения.Важное);
		КонецЕсли;

		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизацииБУ" ,СтатусСообщения.Важное);
		КонецЕсли;	
		РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииБУ"	,СтатусСообщения.Важное);
		
	КонецЕсли;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", инв. номер ОС <" + СтрокаОС.ИнвентарныйНомер+"> : ";
			ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + СтрокаСообщения, Отказ, Заголовок, КлючЗначение.Значение)

		КонецЕсли;

	КонецЦикла;
	
КонецФункции

// Проверяет факт принятия к учету основного средства в других организациях.
//
Процедура ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, СписокОС, Отказ, Заголовок)
	
	ВыборкаОС = ПолныеПрава.ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, СписокОС).Выбрать();
	
	Пока ВыборкаОС.Следующий() Цикл
		
		ТекстСообщенияОбОшибке =
		"Основное средство " + ВыборкаОС.ОсновноеСредство + " (" + СокрЛП(ВыборкаОС.КодОсновногоСредства) + ") " + Формат(ВыборкаОС.ДатаСостояния, "ДФ=dd.MM.yyyy") + " принято к учету в организации " + ВыборкаОС.Организация;
		
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЦикла;
КонецПроцедуры

Функция ПодготовитьТаблицуПоНомерамГТД()   
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	ТекстЗапроса =
	 "ВЫБРАТЬ
	 |	НомераГТДТаблица.НомерГТД,
	 |	НомераГТДТаблица.Количество КАК Количество,
	 |	1 КАК Коэффициент,
	 |	Реквизиты.Номенклатура КАК Номенклатура,
	 |	1 КАК НомерСтроки,
	 |	"""" КАК ИмяСписка,
	 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	 |ИЗ
	 |	Документ.ПринятиеКУчетуОС.НомераГТД КАК НомераГТДТаблица
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК Реквизиты
	 |			ПО (Реквизиты.Ссылка = НомераГТДТаблица.Ссылка)
	 |ГДЕ
	 |	Реквизиты.Ссылка = &Ссылка
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	НомерСтроки,
	 |	Реквизиты.НомераГТД.КлючСвязи";  
	
	Запрос.Текст =  ТекстЗапроса;
		
	Возврат Запрос.Выполнить().Выгрузить();	 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ФиксированныеАктивыУчитываемыеОтдельно
//
Процедура ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТабОС, СтруктураШапкиДокумента)

	НаборДвижений   = Движения.ФиксированныеАктивыУчитываемыеОтдельно;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ СтрокаОС.ПризнакФиксированногоАктива Тогда
			Продолжить;
		КонецЕсли;	
			
		Если (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме) 
			ИЛИ (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты)
			ИЛИ (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            	= Дата;
			НоваяСтрока.Организация 	  	= СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ФиксированныйАктив 	= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие        		= Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету;			
			НоваяСтрока.ВидЛьготыФА 		= ?(СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме, Перечисления.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации, Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
		КонецЕсли;
	КонецЦикла;

	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно()


//Процедура формирования движений  по регистру ОбъектыНалоговогоУчетаФА
//
Процедура ДвижениеПоРегиструОбъектыНалоговогоУчетаФА(ТабОС, СтруктураШапкиДокумента, Отказ)
	НаборДвижений   = Движения.ОбъектыНалоговогоУчетаФА;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ СтрокаОС.ПризнакФиксированногоАктива Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ГруппаНУ) Тогда
			Сообщить("" + СокрЛП(СтрокаОС.ОсновноеСредство) +" код <" + СокрЛП(СтрокаОС.ОсновноеСредство.Код) + "> -  не указана группа налогового учета для фиксированного актива. Документ не может быть проведен", СтатусСообщения.Важное);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;	
			
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      	= Дата;
		НоваяСтрока.Организация                 	= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ФиксированныйАктив            	= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ГруппаНУ            			= СтрокаОС.ГруппаНУ;
		НоваяСтрока.СостояниеФиксированногоАктива	= Перечисления.ВидыСостоянийФА.ПринятКУчету;
		НоваяСтрока.ПорядокПогашенияСтоимостиНУ     = СтрокаОС.ПорядокПогашенияСтоимостиНУ;
		//
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам  ОбъектыИмущественногоНалога, ОбъектыЗемельногоНалога, ОбъектыТранспортногоНалога
//
Процедура ДвиженияПоРегистрамИмущественногоЗемельногоТранспортногоНалогов(ТабОС, СтруктураШапкиДокумента)
	ДвиженияОбъектИмущественногоНалога = Движения.ОбъектыИмущественногоНалога;
	ДвиженияОбъектЗемельногоНалога 	   = Движения.ОбъектыЗемельногоНалога;
	ДвиженияОбъектТранспортногоНалога  = Движения.ОбъектыТранспортногоНалога;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.СтруктурноеПодразделение,
			СтруктураШапкиДокумента.Организация,
			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
	КонецЕсли;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
																			
		//объект имущественного налога
		Если СтрокаОС.ОбъектИмущественногоНалога Тогда
			Движение = ДвиженияОбъектИмущественногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.ПодразделениеОрганизации, СПДокумента);
				
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
		//объект транспортного налога
		Если СтрокаОС.ОбъектТранспортногоНалога Тогда
			Движение = ДвиженияОбъектТранспортногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.ПодразделениеОрганизации, СПДокумента);				
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
		//объект земельного налога
		Если СтрокаОС.ОбъектЗемельногоНалога Тогда
			Движение = ДвиженияОбъектЗемельногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				СПДокумента = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.СтруктурноеПодразделение),СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.Организация);				
				Движение.СтруктурнаяЕдиница = ?(СтрокаОС.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтрокаОС.ПодразделениеОрганизации, СПДокумента);				
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СтруктурноеПодразделение    = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомер;
		НоваяСтрока.СпособПоступления			= СтруктураШапкиДокумента.СпособПоступления;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
	  	НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()


// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           		 = Дата;
		НоваяСтрока.Организация      		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство 		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              		 = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  		 = СтрокаОС.ПодразделениеОрганизации;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           		 = Дата;
			НоваяСтрока.Организация       		 = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  		 = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации 		 = СтрокаОС.ГрафикАмортизацииБУ;
			НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период              	 = Дата;
		НоваяСтрока.Организация         	 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство    	 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию	 = СтрокаОС.НачислятьАмортизациюБУ;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		
		НоваяСтрока.СтруктурноеПодразделение 	= СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот         = СтрокаОС.ОбъемПродукцииРаботБУ;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			НоваяСтрока.ЛиквидационнаяСтоимость			  = 0;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			НоваяСтрока.ЛиквидационнаяСтоимость			  = СтрокаОС.ПервоначальнаяСтоимостьБУ - СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;
		
		НоваяСтрока.КоэффициентАмортизации = СтрокаОС.КоэффициентАмортизацииБУ;
		НоваяСтрока.КоэффициентУскорения   = СтрокаОС.КоэффициентУскоренияБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
//
Процедура ДвижениеПоРегиструСпособыОтраженияБух( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           					 = Дата;
		НоваяСтрока.ОсновноеСредство 					 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация      					 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение			 = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.СпособОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок)
		
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период		    		 = Дата;
		НоваяСтрока.ДатаСостояния    		 = Дата;
		НоваяСтрока.ОсновноеСредство 		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация      		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.Состояние        		 = Перечисления.ВидыСостоянийОС.ПринятоКУчету;
		
	КонецЦикла;
	
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийОС(Дата, СтруктураШапкиДокумента.Организация, ТаблицаДвижений,Отказ,Заголовок);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

// Процедура формирования движений по регистру События ОС бух.
//
Процедура ДвижениеПоРегиструСобытияОСОрганизаций( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           		 = Дата;
		НоваяСтрока.ОсновноеСредство 		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация      		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.Событие          		 = СтруктураШапкиДокумента.СобытиеОС;
		НоваяСтрока.НомерДокумента   		 = СтруктураШапкиДокумента.Номер;
		НоваяСтрока.НазваниеДокумента		 = СтруктураШапкиДокумента.ПредставлениеВидаДокумента;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура ДвижениеПоРегиструСчетовУчетаОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		  = Дата;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.СчетУчетаБУ       = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизацииБУ	     = СтрокаОС.СчетНачисленияАмортизацииБУ;
		НоваяСтрока.СчетНачисленияАмортизацииНУ	     = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаОС.СчетНачисленияАмортизацииБУ), , , Дата);
		
		НоваяСтрока.СчетУчетаЗатратПоМодернизацииБУ  = СтрокаОС.СчетУчетаЗатратПоМодернизацииБУ;
		НоваяСтрока.СчетУчетаНДСПоПриобретению       = СтрокаОС.СчетУчетаНДСПоПриобретению;
		НоваяСтрока.СчетУчетаНДСПоРеализации         = СтрокаОС.СчетУчетаНДСПоРеализации;
		НоваяСтрока.СчетДоходовОтРеализацииБУ      	 = СтрокаОС.СчетДоходовОтРеализацииБУ;
		НоваяСтрока.СчетСебестоимостиПриРеализацииБУ = СтрокаОС.СчетСебестоимостиПриРеализацииБУ;
		
		НоваяСтрока.СчетУчетаНУ         			= СтрокаОС.СчетУчетаНУ;		
		НоваяСтрока.СчетДоходовОтРеализацииНУ       = СтрокаОС.СчетДоходовОтРеализацииНУ;
		НоваяСтрока.СчетСебестоимостиПриРеализацииНУ= СтрокаОС.СчетСебестоимостиПриРеализацииНУ;
		
		НоваяСтрока.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ= СтрокаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		НоваяСтрока.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ= СтрокаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСчетовУчетаОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура подготовки данных для списания оборудования
//
Процедура ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТабОС, Отказ)

	НомСтр   = 0;
	ДатаДока = Дата;

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Количество,
		|	ПринятиеКУчетуОСОсновныеСредства.СчетУчетаБУ КАК КорСчетСписанияБУ,
		|	ПринятиеКУчетуОСОсновныеСредства.СчетУчетаНУ КАК КорСчетСписанияНУ,
		|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК КорСубконтоСписанияБУ1,
		|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
		|	ПринятиеКУчетуОСОсновныеСредства.ОсновноеСредство КАК КорСубконтоСписанияНУ1,
		|	&ВидОперацииПоступления КАК КорСубконтоСписанияНУ2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконтоСписанияНУ3,
		|	0 КАК КоэффОплаты,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура,
		|	ПринятиеКУчетуОСОсновныеСредства.НомерСтроки,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Организация,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.УчитыватьКПН КАК ОтражениеВНУ,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Номенклатура.Услуга,
		|	ПринятиеКУчетуОСОсновныеСредства.ИнвентарныйНомер,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.Склад,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчетаНоменклатурыБУ КАК СчетУчетаБУ,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СчетУчетаНоменклатурыНУ КАК СчетУчетаНУ,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОприходования,
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка.СтруктурноеПодразделение,
		|	ПринятиеКУчетуОСОсновныеСредства.МОЛ,
		|	ПринятиеКУчетуОСОсновныеСредства.ПодразделениеОрганизации
		|ИЗ
		|	Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОсновныеСредства
		|ГДЕ
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка );
	Запрос.УстановитьПараметр("ВидОперацииПоступления", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаОС = Результат.Выгрузить();
	ТаблицаОС.Колонки.Добавить("Регистратор");
	ТаблицаОС.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаОС.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаОС.ЗаполнитьЗначения(ЭтотОбъект,"Регистратор");
	
	//порядок субконто не важен, важно чтобы были все колонки для списания
	//значение в аналитику, возьмется согласно типу устанавливаемого значения
	Если ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ Тогда
		ТаблицаОС.Колонки.ПодразделениеОрганизации.Имя = "КорСубконтоСписанияБУ2"; 
		ТаблицаОС.Колонки.МОЛ.Имя = "КорСубконтоСписанияБУ3"; 
	ИначеЕсли ВедетсяАналитУчетОсПоПодразделениям Тогда
		ТаблицаОС.Колонки.ПодразделениеОрганизации.Имя = "КорСубконтоСписанияБУ2"; 
	ИначеЕсли  ВедетсяАналитУчетОсПоМОЛ  Тогда
		ТаблицаОС.Колонки.МОЛ.Имя = "КорСубконтоСписанияБУ2"; 
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаОС, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ, , "Принят к учету объект ОС");
	
	// проставляем первоначальную стоимость ОС в табл. части документа (берем ее из проводок)
		
	Для Каждого СтрокаДвижений из Движения.Типовой Цикл
		ТекущееОС 		 = СтрокаДвижений.СубконтоДт.ОсновныеСредства;
		ТекущаяСтоимость = СтрокаДвижений.Сумма;
		
		// корректируем данные табличной части документа (недоступное для редактирования поле ПервоначальнаяСтоимостьБУ)
		СтрокаТабличнойЧасти = ОС.Найти(ТекущееОС,"ОсновноеСредство");
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.ПервоначальнаяСтоимостьБУ = ТекущаяСтоимость;	
			
			Если СтрокаТабличнойЧасти.НачислятьАмортизациюБУ И СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ = 0 Тогда 
				СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ = ТекущаяСтоимость;
			КонецЕсли;
							
		КонецЕсли;
				
		// корректируем данные ТЗ, по которой формируются движения
		СтрокаТабличнойЧасти = ТабОС.Найти(ТекущееОС,"ОсновноеСредство");
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаТабличнойЧасти.ПервоначальнаяСтоимостьБУ = ТекущаяСтоимость;	
			
			Если СтрокаТабличнойЧасти.НачислятьАмортизациюБУ И СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ = 0 Тогда 
				СтрокаТабличнойЧасти.СтоимостьДляВычисленияАмортизацииБУ = ТекущаяСтоимость;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	ПроводкиНУ = Движения.Налоговый;
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата);

	//Движения по бух. учету
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		ПроводкиБУ = Движения.Типовой;
		
		Для Каждого СтрокаОС из ТаблицаПоОС Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Принят к учету объект ОС";
			Проводка.Сумма        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.СчетДт       = СтрокаОС.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛ);
			КонецЕсли;
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.КорСчетОприходованияБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.КорСубконтоОприходованияБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.КорСубконтоОприходованияБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.КорСубконтоОприходованияБУ3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   СтрокаОС.ОсновноеСредство);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.НомерЖурнала = "ОС";
				ПроводкаНУ.Содержание   = "Принят к учету объект ОС";
				
				ПроводкаНУ.Сумма        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				ПроводкаНУ.СчетДт       = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.СчетКт       = СтруктураШапкиДокумента.КорСчетОприходованияНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.КорСубконтоОприходованияНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураШапкиДокумента.КорСубконтоОприходованияНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураШапкиДокумента.КорСубконтоОприходованияНУ3);				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
			
		КонецЦикла;		
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
	   //списываем оборудование, приходуем ОС
		ФормированиеДвиженийПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ПроводкиБУ = Движения.Типовой;
		
		Для Каждого СтрокаОС из ТаблицаПоОС Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Принят к учету объект ОС";
			Проводка.Сумма        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Проводка.СчетДт       = СтрокаОС.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Если ВедетсяАналитУчетОсПоПодразделениям Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаОС.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если ВедетсяАналитУчетОсПоМОЛ Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛ);
			КонецЕсли;
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаОбъектаСтроительстваБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", ОбъектСтроительства);
			
			Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.НомерЖурнала = "ОС";
				ПроводкаНУ.Содержание   = "Принят к учету объект ОС";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				ПроводкаНУ.Сумма        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				
				ПроводкаНУ.СчетДт       = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
				
				ПроводкаНУ.СчетКт       = СтруктураШапкиДокумента.СчетУчетаОбъектаСтроительстваНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ОбъектСтроительства);
								
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
	// Отнесение на затраты в НУ в момент принятия к учету по налоговым преференциям
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		Для Каждого СтрокаОС из ТаблицаПоОС Цикл
			Если СтрокаОС.ПорядокПогашенияСтоимостиНУ <> Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты Тогда
				Продолжить;
			КонецЕсли;	
	
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.НомерЖурнала = "ОС";
				ПроводкаНУ.Содержание   = "Единовременное отнесение на вычеты стоимости ФА (преференции)";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
				
				
				ПроводкаНУ.СчетКт       = СтрокаОС.СчетУчетаНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.ЕдиновременноеСписаниеСтоимостиОбъектаПреференций);
				
				ПроводкаНУ.Сумма        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);				
				
				Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					// признание ВР по операции
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период       = Дата;
					ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.НомерЖурнала = "ОС";
					ПроводкаНУ.Содержание   = "Признание ВР по отнесению на вычеты стоимости ФА (преференции)";
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПрочиеРасходыПоВнеоборотнымАктивам;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиЗатрат", Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций);
					
					
					ПроводкаНУ.СчетКт       = СтрокаОС.СчетУчетаНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.ЕдиновременноеСписаниеСтоимостиОбъектаПреференций);
					
					ПроводкаНУ.Сумма        = - СтрокаОС.ПервоначальнаяСтоимостьБУ;
					ПроводкаНУ.ВидУчетаДт	= Справочники.ВидыУчетаНУ.ВР;
					ПроводкаНУ.ВидУчетаКт	= Справочники.ВидыУчетаНУ.ВР;
				КонецЕсли;				
		КонецЦикла;		
	КонецЕсли;
	
	
	// Движение по остальным регл. регистрам
    ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструСостоянияОСБух             ( ТаблицаПоОС, СтруктураШапкиДокумента,Отказ,  Заголовок);
	
	ДвижениеПоРегиструМестонахождениеОСБух       ( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТаблицаПоОС, СтруктураШапкиДокумента, Заголовок);
	
	ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструСпособыОтраженияБух	     ( ТаблицаПоОС, СтруктураШапкиДокумента, Заголовок);
	
	ДвижениеПоРегиструСобытияОСОрганизаций       ( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	ДвижениеПоРегиструСчетовУчетаОСБух           ( ТаблицаПоОС, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамИмущественногоЗемельногоТранспортногоНалогов( ТаблицаПоОС, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.УчитыватьКПН И СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
		// в случае, если документ образует постоянную разницу по
		// регистрам учета ФА движений выполнять не нужно
		ДвижениеПоРегиструОбъектыНалоговогоУчетаФА(ТаблицаПоОС, СтруктураШапкиДокумента, Отказ);
		ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТаблицаПоОС, СтруктураШапкиДокумента);
	КонецЕсли;	
	
КонецПроцедуры // ФормированиеДвижений()


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
     ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ)

	Заголовок = "";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
			
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПоОС = ОС.Выгрузить();
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим не принято ли ОС в другие организации
	ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок); 
		
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование 
			И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
			
			ТаблицаТоваров = ПодготовитьТаблицуПоНомерамГТД();			
			НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(ТаблицаТоваров,СтруктураШапкиДокумента, Движения, Отказ);	
			
		КонецЕсли; 		
		
		Если НЕ Отказ Тогда
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

// Предопределенная процедура обработки "ПередЗаписью" документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	КраткийСоставМОЛ 		   = УправлениеВнеоборотнымиАктивами.ЗаполнитьКраткийСоставДокументаОСМОЛПодразделения(ОС, "МОЛ", Истина);
	КраткийСоставПодразделений = УправлениеВнеоборотнымиАктивами.ЗаполнитьКраткийСоставДокументаОСМОЛПодразделения(ОС, "ПодразделениеОрганизации", Ложь);
	
	// Заполнить табличную часть НомераГТД.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) 
		И ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаДокумента.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		ТаблицаДокумента.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаДокумента.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
		ТаблицаДокумента.Колонки.Добавить("КлючСвязи",	 Новый ОписаниеТипов("Число"));
		ТаблицаДокумента.Колонки.Добавить("Склад",		 Новый ОписаниеТипов("СправочникСсылка.Склады"));
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		
		НоваяСтрока.КлючСвязи    = 1;
		НоваяСтрока.Количество   = 1;
		НоваяСтрока.Коэффициент  = 1;
		НоваяСтрока.НомерСтроки  = 1;
		НоваяСтрока.Номенклатура = Номенклатура;
		
		ТаблицаНомераГТД = НомераГТДСервер.ПодготовитьТаблицуНомеровГТД(ТаблицаДокумента, НомераГТД.Выгрузить());
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Организация", Организация);
		СтруктураДанных.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
		СтруктураДанных.Вставить("Ссылка", Ссылка);
		СтруктураДанных.Вставить("Дата", Дата);
		СтруктураДанных.Вставить("Товары", ТаблицаДокумента);		
		СтруктураДанных.Вставить("НомераГТД", ТаблицаНомераГТД);		

		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(СтруктураДанных);
		
		НомераГТД.Загрузить(ТаблицаНомераГТД);
		
	КонецЕсли;                                     
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
