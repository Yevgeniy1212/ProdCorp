////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим       - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Дата,
	| 	Ссылка 
	|ИЗ 
	|	Документ." + Метаданные().Имя + "
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботники(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	// угловыми скобками выделены изменяющиеся фрагменты текста запроса
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Док.ФизЛицо,
	|	Док.НомерСтроки					КАК НомерСтроки,
	|	Док.ДатаПринятияРешения,  
	|	Док.Решение,  
	|	КандидатыНаРаботу.Статус		КАК ПроверяемоеЗначение,
	|	КандидатыНаРаботу.Период 		КАК ДатаРеквизита
	|
	|ИЗ
	|
	|	РегистрСведений.КандидатыНаРаботу КАК КандидатыНаРаботу
	|   	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|							(
	|							ВЫБРАТЬ
	|               	            КандидатыВнутри.ФизЛицо,
	|								МАКСИМУМ(Период) КАК ДатаЗначения
	|							ИЗ
	|								РегистрСведений.КандидатыНаРаботу КАК КандидатыВнутри
	|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + Метаданные().Имя + ".Работники КАК Док
	|									ПО КандидатыВнутри.ФизЛицо = Док.ФизЛицо И КандидатыВнутри.Период <= Док.ДатаПринятияРешения И Док.Ссылка  =  &ДокументСсылка
	|							СГРУППИРОВАТЬ ПО 
	|								КандидатыВнутри.ФизЛицо
	|							) КАК СписокДат
	|		ПО КандидатыНаРаботу.ФизЛицо = СписокДат.ФизЛицо И КандидатыНаРаботу.Период = СписокДат.ДатаЗначения
	|		ПРАВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ Документ." + Метаданные().Имя + ".Работники КАК Док				
	|		ПО КандидатыНаРаботу.ФизЛицо = Док.ФизЛицо 
	|
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка
	|	  
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	// ФизЛицо
	ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо);
	Если НЕ ЕстьФизЛицо Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаПринятияРешения
	ЕстьДатаПринятияРешения = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПринятияРешения);
	Если НЕ ЕстьДатаПринятияРешения Тогда	
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата принятия решения!", Отказ, Заголовок);
	КонецЕсли;

	// Решение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Решение) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано решение!", Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьФизЛицо И ЕстьДатаПринятияРешения Тогда
		Если ВыборкаПоСтрокамДокумента.ДатаРеквизита = NULL Тогда // проверяемое значение отсутствует
			Сообщить(СтрокаНачалаСообщенияОбОшибке + "указан сотрудник, не проходивший кадровый отбор кандидатов!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                 по которым надо проводить документ.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("КандидатыНаРаботу");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "")
	
	Если Не ВыборкаПоСтрокамДокумента.Решение и (ВыборкаПоСтрокамДокумента.ДатаРеквизита <> NULL) Тогда 
		// Запись движения регистра кандидатов только в случаее отрицательного решения

		ИмяРегистра = "КандидатыНаРаботу";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период      = ВыборкаПоСтрокамДокумента.ДатаПринятияРешения;
			

			// Измерения
			Движение.ФизЛицо     = ВыборкаПоСтрокамДокумента.ФизЛицо;

			// Ресурсы
			Движение.Статус      = Перечисления.СостоянияКандидатаНаРаботу.НеПрошелИспытательныйСрок;

		КонецЕсли

	КонецЕсли

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботники.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоРаботники, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПроведенияПоРегистрамСведений);

				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			// Заполнение табличной части. 
			ЕстьИС = Перечисления.ИспытательныйСрок.СИспытательнымСроком;
			Для Каждого ТекСтрокаКандидаты Из Основание.Работники Цикл
				Если ТекСтрокаКандидаты.ИспытательныйСрок = ЕстьИС Тогда
					НоваяСтрока                     = Работники.Добавить();
					НоваяСтрока.ФизЛицо             = ТекСтрокаКандидаты.ФизЛицо;
					НоваяСтрока.ДатаПринятияРешения = ТекСтрокаКандидаты.ДатаУвольнения;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);

КонецПроцедуры
