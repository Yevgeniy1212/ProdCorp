////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
// - БК - начало
Перем мОтображатьСтруктурныеПодразделенияВЗарплате Экспорт;

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	ДокументОснование = Основание;
	
	// Очистим табличные части
	СведенияОДоходах.Очистить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		Запрос = Новый Запрос;
		
		СписокВидовЗадолженности = Новый СписокЗначений;
		СписокВидовЗадолженности.Добавить(Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные);
		СписокВидовЗадолженности.Добавить(Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы);
		СписокВидовЗадолженности.Добавить(Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыНаПроезд);
		СписокВидовЗадолженности.Добавить(Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыПоНаймуЖилья);
		
		Запрос.УстановитьПараметр("СписокВидовЗадолженности", СписокВидовЗадолженности);
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.УстановитьПараметр("СуточныеСверхНормы", Перечисления.ВидыЗадолженностиПодотчетныхЛиц.СуточныеСверхНормы);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	АвансовыйОтчетПрочее.Ссылка.ФизЛицо КАК ФизЛицо,
		|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
		|	АвансовыйОтчетПрочее.Ссылка.Дата КАК Дата,
		|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	АвансовыйОтчетПрочее.Ссылка.КурсДокумента КАК КурсДокумента,
		|	АвансовыйОтчетПрочее.Ссылка.КратностьДокумента КАК КратностьДокумента,
		|	ЕСТЬNULL(СУММА(АвансовыйОтчетПрочее.Сумма), 0) КАК СуммаДохода,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА АвансовыйОтчетПрочее.ВидЗадолженностиПодотчетногоЛица <> &СуточныеСверхНормы
		|						ТОГДА АвансовыйОтчетПрочее.Сумма
		|					ИНАЧЕ ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 2))
		|		  		   КОНЕЦ), 0) КАК СуммаВычета
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
		|ГДЕ
		|	АвансовыйОтчетПрочее.Ссылка = &Основание
		|	И АвансовыйОтчетПрочее.ВидЗадолженностиПодотчетногоЛица В (&СписокВидовЗадолженности)
		|
		|СГРУППИРОВАТЬ ПО
		|	АвансовыйОтчетПрочее.Ссылка.ФизЛицо,
		|	АвансовыйОтчетПрочее.Ссылка.Организация,
		|	АвансовыйОтчетПрочее.Ссылка.Дата,
		|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
		|	АвансовыйОтчетПрочее.Ссылка.КурсДокумента,
		|	АвансовыйОтчетПрочее.Ссылка.КратностьДокумента
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();		
		
		Если Выборка.Следующий() Тогда
			
			Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("КомпенсационныеВыплатыПриСлужебныхКомандировках", Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций) Тогда
				ВРКомпенсационныеВыплаты = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсационныеВыплатыПриСлужебныхКомандировках;
			Иначе
				ВРКомпенсационныеВыплаты = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
			КонецЕсли;
		
			ПериодРегистрации 	= НачалоМесяца(Выборка.Дата);
			ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме;
			
		    // реквизиты табличной части СведенияОДоходах
		    СтрокаТЧ 			= СведенияОДоходах.Добавить();
		    
		    СтрокаТЧ.ФизЛицо					= Выборка.ФизЛицо;
		    СтрокаТЧ.ДатаДохода					= Выборка.Дата;
		    СтрокаТЧ.МесяцНалоговогоПериода 	= НачалоМесяца(Выборка.Дата);		    
		    СтрокаТЧ.ВидРасчета					= ВРКомпенсационныеВыплаты;
			СтрокаТЧ.УчитыватьИПН               = Истина;
			СтрокаТЧ.УчитыватьОПВ               = Истина;
			СтрокаТЧ.УчитыватьСН                = Истина;
			СтрокаТЧ.УчитыватьСО                = Истина;
		    СтрокаТЧ.СпособНалогообложенияИПН	= ВРКомпенсационныеВыплаты.ОблагаетсяИПН;			
		    СтрокаТЧ.СпособНалогообложенияОПВ	= ВРКомпенсационныеВыплаты.ОблагаетсяОПВ;			
		    СтрокаТЧ.СпособНалогообложенияСН	= ВРКомпенсационныеВыплаты.ОблагаетсяСН; 			
		    СтрокаТЧ.СпособНалогообложенияСО	= ВРКомпенсационныеВыплаты.ОблагаетсяСО;
			
			// Взносы ОСМС с доходов физлиц вводятся с 1 января 2019 года
			Если ПериодРегистрации >= Дата(2019,1,1) Тогда
				СтрокаТЧ.УчитыватьВОСМС                = Истина;
				СтрокаТЧ.СпособНалогообложенияВОСМС	= ВРКомпенсационныеВыплаты.ОблагаетсяВОСМС;
			КонецЕсли;
			
			// Отчисления ОСМС с доходов физлиц вводятся с 1 июля 2017 года
			Если ПериодРегистрации >= Дата(2017,7,1) Тогда
				СтрокаТЧ.УчитыватьООСМС                = Истина;
				СтрокаТЧ.СпособНалогообложенияООСМС	= ВРКомпенсационныеВыплаты.ОблагаетсяВОСМС;
			КонецЕсли;
			
			СтрокаТЧ.СуммаДохода			= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СуммаДохода, 
		    															 Выборка.ВалютаДокумента, 
		    															 ВалютаРеглУчета,
		    															 Выборка.КурсДокумента,
		    															 1,
		    															 Выборка.КратностьДокумента,
		    															 1);
		    СтрокаТЧ.СуммаВычета			= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВычета, 
		    															 Выборка.ВалютаДокумента, 
		    															 ВалютаРеглУчета,
		    															 Выборка.КурсДокумента,
		    															 1,
		    															 Выборка.КратностьДокумента,
		    															 1);
													 
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.УстановитьПараметр("ЮрФизЛицо_ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.Контрагент.ЮрФизЛицо = &ЮрФизЛицо_ФизЛицо
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрагентЯвляетсяФизЛицом,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов,
		|	
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеТоваровУслуг.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧТовары.Сумма, 0)
		|		КОГДА ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧТовары.Сумма - ТЧТовары.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧТовары.Сумма, 0)
		|	КОНЕЦ +
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеТоваровУслуг.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧУслуги.Сумма, 0)
		|		КОГДА ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧУслуги.Сумма - ТЧУслуги.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧУслуги.Сумма, 0)
		|	КОНЕЦ + 
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеТоваровУслуг.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧОС.Сумма, 0)
		|		КОГДА ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧОС.Сумма - ТЧОС.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧОС.Сумма, 0)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧТовары.Сумма) КАК Сумма,
		|							СУММА(ТЧТовары.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеТоваровУслуг.Товары КАК ТЧТовары
		|						ГДЕ
		|							ТЧТовары.Ссылка = &Основание) КАК ТЧТовары
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧУслуги.Сумма) КАК Сумма,
		|							СУММА(ТЧУслуги.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеТоваровУслуг.Услуги КАК ТЧУслуги
		|						ГДЕ
		|							ТЧУслуги.Ссылка = &Основание) КАК ТЧУслуги
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧОС.Сумма) КАК Сумма,
		|							СУММА(ТЧОС.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеТоваровУслуг.ОС КАК ТЧОС
		|						ГДЕ
		|							ТЧОС.Ссылка = &Основание) КАК ТЧОС
		|		ПО ИСТИНА
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &Основание
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если НЕ Выборка.КонтрагентЯвляетсяФизЛицом Тогда
				Сообщить("""" + Выборка.НаименованиеКонтрагента + """ не является физическим лицом, регистрация доходов в целях налогообложения для него не предусмотрена!");
			Иначе
				
				ПериодРегистрации = НачалоМесяца(Выборка.Дата);
				ВидОперации 	  = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов;
								
				// реквизиты табличной части СведенияОДоходах
				СтрокаТЧ						= СведенияОДоходах.Добавить();
				СтрокаТЧ.ФизЛицо				= Выборка.Контрагент;
				СтрокаТЧ.ДоговорКонтрагента		= Выборка.ДоговорКонтрагента;
				СтрокаТЧ.ДатаДохода				= Выборка.Дата;
				СтрокаТЧ.МесяцНалоговогоПериода	= НачалоМесяца(Выборка.Дата);				
				
				Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПрочиеДоходыОблагаемыеУИсточника", Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций) Тогда
					ВидРасчета	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПрочиеДоходыОблагаемыеУИсточника;
				Иначе
					ВидРасчета 	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
				КонецЕсли;
				
				СтрокаТЧ.ВидРасчета					= ВидРасчета;
				СтрокаТЧ.УчитыватьИПН               = Истина;
				СтрокаТЧ.УчитыватьОПВ               = Ложь;
				СтрокаТЧ.УчитыватьСН                = Ложь;
				СтрокаТЧ.УчитыватьСО                = Ложь;
				СтрокаТЧ.СпособНалогообложенияИПН	= ВидРасчета.ОблагаетсяИПН;			
			    СтрокаТЧ.СпособНалогообложенияОПВ	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();			
			    СтрокаТЧ.СпособНалогообложенияСН	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка(); 			
			    СтрокаТЧ.СпособНалогообложенияСО	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
				
				Если ПериодРегистрации >= Дата(2017,7,1) Тогда
					СтрокаТЧ.УчитыватьООСМС             = Ложь;
					СтрокаТЧ.СпособНалогообложенияООСМС	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
					СтрокаТЧ.УчитыватьВОСМС             = Истина;
					СтрокаТЧ.СпособНалогообложенияВОСМС	= ВидРасчета.ОблагаетсяВОСМС;			
				КонецЕсли;
 					
				СтрокаТЧ.СуммаДохода			= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		    															 	 Выборка.ВалютаДокумента, 
		    															 	 ВалютаРеглУчета,
		    															 	 Выборка.КурсВзаиморасчетов,
		    															 	 1,
		    															 	 Выборка.КратностьВзаиморасчетов,
		    															 	 1);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.УстановитьПараметр("ЮрФизЛицо_ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПоступлениеНМА.Организация,
		|	ПоступлениеНМА.Дата,
		|	ПоступлениеНМА.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	ВЫБОР
		|		КОГДА ПоступлениеНМА.Контрагент.ЮрФизЛицо = &ЮрФизЛицо_ФизЛицо
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрагентЯвляетсяФизЛицом,
		|	ПоступлениеНМА.Контрагент КАК Контрагент,		
		|	ПоступлениеНМА.ВалютаДокумента,
		|	ПоступлениеНМА.ДоговорКонтрагента,		
		|	ПоступлениеНМА.КратностьВзаиморасчетов,
		|	ПоступлениеНМА.КурсВзаиморасчетов,
		|	
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеНМА.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧНМА.Сумма, 0)
		|		КОГДА ПоступлениеНМА.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧНМА.Сумма - ТЧНМА.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧНМА.Сумма, 0)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНМА КАК ПоступлениеНМА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧНМА.Сумма) КАК Сумма,
		|							СУММА(ТЧНМА.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеНМА.НМА КАК ТЧНМА
		|						ГДЕ
		|							ТЧНМА.Ссылка = &Основание) КАК ТЧНМА
		|		ПО ИСТИНА
		|
		|ГДЕ
		|	ПоступлениеНМА.Ссылка = &Основание
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если НЕ Выборка.КонтрагентЯвляетсяФизЛицом Тогда
				Сообщить("""" + Выборка.НаименованиеКонтрагента + """ не является физическим лицом, регистрация доходов в целях налогообложения для него не предусмотрена!");
			Иначе
				
				ПериодРегистрации = НачалоМесяца(Выборка.Дата);
				ВидОперации 	  = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов;
				
				// реквизиты табличной части СведенияОДоходах
				СтрокаТЧ						= СведенияОДоходах.Добавить();
				СтрокаТЧ.ФизЛицо				= Выборка.Контрагент;
				СтрокаТЧ.ДоговорКонтрагента		= Выборка.ДоговорКонтрагента;
				СтрокаТЧ.ДатаДохода				= Выборка.Дата;
				СтрокаТЧ.МесяцНалоговогоПериода	= НачалоМесяца(Выборка.Дата);				
				
				Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПрочиеДоходыОблагаемыеУИсточника", Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций) Тогда
					ВидРасчета	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПрочиеДоходыОблагаемыеУИсточника;
				Иначе
					ВидРасчета	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
				КонецЕсли;
				
				СтрокаТЧ.ВидРасчета				  = ВидРасчета;
				СтрокаТЧ.УчитыватьИПН             = Истина;
				СтрокаТЧ.УчитыватьОПВ             = Ложь;
				СтрокаТЧ.УчитыватьСН              = Ложь;
				СтрокаТЧ.УчитыватьСО              = Ложь;
			    СтрокаТЧ.СпособНалогообложенияИПН = ВидРасчета.ОблагаетсяИПН;			
			    СтрокаТЧ.СпособНалогообложенияОПВ = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();			
			    СтрокаТЧ.СпособНалогообложенияСН  = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка(); 			
			    СтрокаТЧ.СпособНалогообложенияСО  = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
				Если ПериодРегистрации >= Дата(2017,7,1) Тогда
					СтрокаТЧ.УчитыватьООСМС             = Ложь;
					СтрокаТЧ.СпособНалогообложенияООСМС	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
					СтрокаТЧ.УчитыватьВОСМС             = Истина;
					СтрокаТЧ.СпособНалогообложенияВОСМС	= ВидРасчета.ОблагаетсяВОСМС;			
				КонецЕсли;

				СтрокаТЧ.СуммаДохода			  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		    															 	 Выборка.ВалютаДокумента, 
		    															 	 ВалютаРеглУчета,
		    															 	 Выборка.КурсВзаиморасчетов,
		    															 	 1,
		    															 	 Выборка.КратностьВзаиморасчетов,
		    															 	 1);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.УстановитьПараметр("ЮрФизЛицо_ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПоступлениеДопРасходов.Организация,
		|	ПоступлениеДопРасходов.Дата,
		|	ПоступлениеДопРасходов.Контрагент.Наименование КАК НаименованиеКонтрагента,
		|	ВЫБОР
		|		КОГДА ПоступлениеДопРасходов.Контрагент.ЮрФизЛицо = &ЮрФизЛицо_ФизЛицо
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрагентЯвляетсяФизЛицом,
		|	ПоступлениеДопРасходов.Контрагент КАК Контрагент,		
		|	ПоступлениеДопРасходов.ВалютаДокумента,
		|	ПоступлениеДопРасходов.ДоговорКонтрагента,		
		|	ПоступлениеДопРасходов.КратностьВзаиморасчетов,
		|	ПоступлениеДопРасходов.КурсВзаиморасчетов,
		|	
		|	ПоступлениеДопРасходов.Сумма -
		|	ВЫБОР
		|		КОГДА ПоступлениеДопРасходов.УчитыватьНДС
		|				И ПоступлениеДопРасходов.СуммаВключаетНДС
		|			ТОГДА ПоступлениеДопРасходов.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ + 
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеДопРасходов.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧТовары.Сумма, 0)
		|		КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧТовары.Сумма - ТЧТовары.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧТовары.Сумма, 0)
		|	КОНЕЦ +
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеДопРасходов.УчитыватьНДС
		|			ТОГДА ЕСТЬNULL(ТЧОС.Сумма, 0)
		|		КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
		|			ТОГДА ЕСТЬNULL(ТЧОС.Сумма - ТЧОС.СуммаНДС, 0)
		|		ИНАЧЕ ЕСТЬNULL(ТЧОС.Сумма, 0)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧТовары.Сумма) КАК Сумма,
		|							СУММА(ТЧТовары.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеДопРасходов.Товары КАК ТЧТовары
		|						ГДЕ
		|							ТЧТовары.Ссылка = &Основание) КАК ТЧТовары
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							СУММА(ТЧОС.Сумма) КАК Сумма,
		|							СУММА(ТЧОС.СуммаНДС) КАК СуммаНДС
		|						ИЗ
		|							Документ.ПоступлениеДопРасходов.ОС КАК ТЧОС
		|						ГДЕ
		|							ТЧОС.Ссылка = &Основание) КАК ТЧОС
		|		ПО ИСТИНА
		
		|
		|ГДЕ
		|	ПоступлениеДопРасходов.Ссылка = &Основание
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если НЕ Выборка.КонтрагентЯвляетсяФизЛицом Тогда
				Сообщить("""" + Выборка.НаименованиеКонтрагента + """ не является физическим лицом, регистрация доходов в целях налогообложения для него не предусмотрена!");
			Иначе
				ПериодРегистрации = НачалоМесяца(Выборка.Дата);
				ВидОперации 	  = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов;
								
				// реквизиты табличной части СведенияОДоходах
				СтрокаТЧ						= СведенияОДоходах.Добавить();
				СтрокаТЧ.ФизЛицо				= Выборка.Контрагент;
				СтрокаТЧ.ДоговорКонтрагента		= Выборка.ДоговорКонтрагента;
				СтрокаТЧ.ДатаДохода				= Выборка.Дата;
				СтрокаТЧ.МесяцНалоговогоПериода	= НачалоМесяца(Выборка.Дата);				
				
				Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПрочиеДоходыОблагаемыеУИсточника", Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций) Тогда
					ВидРасчета	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПрочиеДоходыОблагаемыеУИсточника;
				Иначе
					ВидРасчета 	= ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
				КонецЕсли;
								
				СтрокаТЧ.ВидРасчета				  = ВидРасчета;
				СтрокаТЧ.УчитыватьИПН             = Истина;
				СтрокаТЧ.УчитыватьОПВ             = Ложь;
				СтрокаТЧ.УчитыватьСН              = Ложь;
				СтрокаТЧ.УчитыватьСО              = Ложь;
			    СтрокаТЧ.СпособНалогообложенияИПН = ВидРасчета.ОблагаетсяИПН;			
			    СтрокаТЧ.СпособНалогообложенияОПВ = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();			
			    СтрокаТЧ.СпособНалогообложенияСН  = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка(); 			
			    СтрокаТЧ.СпособНалогообложенияСО  = Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
				Если ПериодРегистрации >= Дата(2017,7,1) Тогда
					СтрокаТЧ.УчитыватьООСМС             = Ложь;
					СтрокаТЧ.СпособНалогообложенияООСМС	= Справочники.СпособыНалогообложенияДоходов.ПустаяСсылка();
					СтрокаТЧ.УчитыватьВОСМС             = Истина;
					СтрокаТЧ.СпособНалогообложенияВОСМС	= ВидРасчета.ОблагаетсяВОСМС;			
				КонецЕсли;

				СтрокаТЧ.СуммаДохода			  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, 
		    															 	 Выборка.ВалютаДокумента, 
		    															 	 ВалютаРеглУчета,
		    															 	 Выборка.КурсВзаиморасчетов,
		    															 	 1,
		    															 	 Выборка.КратностьВзаиморасчетов,
		    															 	 1);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
//
Функция СформироватьЗапросПоШапке(ИсчислениеНалоговСтруктурныхЕдиниц)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = "
	|Выбрать РАЗРЕШЕННЫЕ
	|	Док.Дата, 
	|	Док.Организация, 
	|	Док.ПодразделениеОрганизации, 
	|	ЕСТЬNULL(Док.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ) КАК ЯвляетсяСтруктурнымПодразделением, 
	|	Док.ПериодРегистрации, 
	| 	Док.Ссылка,
	|	Док.ВидОперации, 
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И Док.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Док.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель
	|Из 
	|	Документ." + Метаданные().Имя + " КАК Док
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|			&ПериодРегистрации,
	|			Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличным частям документам.
//
Функция СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации" , ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация" , ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации" , ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		ПолеПериод = "&ПериодРегистрации";
	Иначе
		ПолеПериод = "ДатаДохода";
	КонецЕсли;

	СтрокиТЧТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОДоходах.НомерСтроки,
	|	СведенияОДоходах.ФизЛицо,
	|	ВЫБОР
	|		КОГДА СведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяКонтрагентом,
	|	ВЫБОР
	|		КОГДА СведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты ТОГДА СведенияОДоходах.ФизЛицо.ФизЛицо
	|		ИНАЧЕ Значение(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК ФизЛицоКонтрагента,
	|	СведенияОДоходах.МесяцНалоговогоПериода,
	|	СведенияОДоходах.ДатаДохода,
	|	" + ПолеПериод + " КАК Период,
	|	СведенияОДоходах.ДоговорКонтрагента,
	|	СведенияОДоходах.ВидРасчета,
	|	СведенияОДоходах.ВидДохода,
	|	СведенияОДоходах.УчитыватьИПН,
	|	СведенияОДоходах.СпособНалогообложенияИПН,
	|	СведенияОДоходах.УчитыватьОПВ,
	|	СведенияОДоходах.СпособНалогообложенияОПВ,
	|	СведенияОДоходах.УчитыватьСН,
	|	СведенияОДоходах.СпособНалогообложенияСН,
	|	СведенияОДоходах.УчитыватьСО,
	|	СведенияОДоходах.СпособНалогообложенияСО,
	|	СведенияОДоходах.УчитыватьОППВ,
	|	СведенияОДоходах.СпособНалогообложенияОППВ,
	|	СведенияОДоходах.УчитыватьВОСМС,
	|	СведенияОДоходах.СпособНалогообложенияВОСМС,
	|	СведенияОДоходах.УчитыватьООСМС,
	|	СведенияОДоходах.СпособНалогообложенияООСМС,
	//++ЗУП
	|	СведенияОДоходах.УчитыватьОПВР,
	|	СведенияОДоходах.СпособНалогообложенияОПВР,
	//--ЗУП
	|	СведенияОДоходах.СуммаДохода,
	|	СведенияОДоходах.СуммаВычета,
	|	ВЫБОР
	|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете
	|		ИНАЧЕ СведенияОДоходах.Ссылка.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете
	|ПОМЕСТИТЬ ВТ_СтрокиТЧ
	|ИЗ
	|	Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения.СведенияОДоходах КАК СведенияОДоходах
	|
	|ГДЕ
	|	СведенияОДоходах.Ссылка = &ДокументСсылка
	|
	|";
	
	Запрос.Текст = СтрокиТЧТекст;
	Запрос.Выполнить();
	СтрокиТЧТекст = "ВТ_СтрокиТЧ";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		// составим текст подзапроса для определения подразделения работника на начало каждого встречающегося месяца
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ
		|	ФизЛицо,
		|	" + ПолеПериод + " КАК Период
		|ИЗ
		|	Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения.СведенияОДоходах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Ссылка = &ДокументСсылка
		|
		|";
		ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, ВыборкаПоШапкеДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	// добавляем в запрос для определения подразделений - отдельных структурных единиц
	Запрос.Текст = МестоРаботыТекст+"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиТЧ.НомерСтроки,
	|	СтрокиТЧ.ФизЛицо,
	|	СтрокиТЧ.ЯвляетсяКонтрагентом,
	|	СтрокиТЧ.ФизЛицоКонтрагента,
	|	СтрокиТЧ.МесяцНалоговогоПериода,
	|	СтрокиТЧ.ДатаДохода,
	|	СтрокиТЧ.Период,
	|	СтрокиТЧ.ДоговорКонтрагента,
	|	СтрокиТЧ.ВидРасчета,
	|	СтрокиТЧ.ВидДохода,
	|	СтрокиТЧ.УчитыватьИПН,
	|	СтрокиТЧ.УчитыватьОПВ,
	|	СтрокиТЧ.УчитыватьСН,
	|	СтрокиТЧ.УчитыватьСО,
	|	СтрокиТЧ.УчитыватьОППВ,
	|	СтрокиТЧ.УчитыватьВОСМС,
	|	СтрокиТЧ.УчитыватьООСМС,
	//++ЗУП
	|	СтрокиТЧ.УчитыватьОПВР,
	//--ЗУП
	|	СтрокиТЧ.СпособНалогообложенияИПН,
	|	СтрокиТЧ.СпособНалогообложенияОПВ,
	|	СтрокиТЧ.СпособНалогообложенияСН,
	|	СтрокиТЧ.СпособНалогообложенияСО,
	|	СтрокиТЧ.СпособНалогообложенияОППВ,
	|	СтрокиТЧ.СпособНалогообложенияВОСМС,
	|	СтрокиТЧ.СпособНалогообложенияООСМС,
	//++ЗУП
	|	СтрокиТЧ.СпособНалогообложенияОПВР,
	//--ЗУП
	|	СтрокиТЧ.СуммаДохода,
	|	СтрокиТЧ.СуммаВычета,
	|	СтрокиТЧ.СпособОтраженияВБухучете";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	|			ТОГДА &ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
		
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		КОГДА ЕСТЬNULL(ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	|			ТОГДА &ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
 	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + СтрокиТЧТекст + " КАК СтрокиТЧ
	|";
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ+ " КАК МестоРаботы
	|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо
	|			И СтрокиТЧ.Период = МестоРаботы.Период
	|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ПодразделенияОрганизаций.Ссылка = &ПодразделениеОрганизации
	|";
		
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнымЧастям()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц начисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
//
Процедура ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
								""" табл. части ""Сведения о доходах"": ";
	
	// ФизЛицо	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указано физическое лицо или контрагент!", Отказ, Заголовок);
	КонецЕсли;
	
	// МесяцНалоговогоПериода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаДохода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ДатаДохода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указана дата получения дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		// ВидДохода
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ВидДохода) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан вид дохода!", Отказ, Заголовок);
		КонецЕсли;
	
			
		// СпособНалогообложенияИПН
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ИПН!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьОПВ Тогда
		// СпособНалогообложенияОПВ
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ОПВ!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов Тогда
		
		// ФизЛицо контрагента
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицоКонтрагента) Тогда 
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "для контрагента не указано физическое лицо!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДоговорКонтрагента
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ДоговорКонтрагента) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан договор контрагента!", Отказ, Заголовок);
		КонецЕсли;
		
		// ВидРасчета
		Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ВидРасчета) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан вид расчета!", Отказ, Заголовок);
		КонецЕсли;
	Иначе 
		
		//Если ВыборкаПоТЧ.УчитыватьОПВ Тогда
		//	// СпособНалогообложенияОПВ
		//	Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) Тогда
		//		ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ОПВ!", Отказ, Заголовок);
		//	КонецЕсли;
		//КонецЕсли;
		
 		Если ВыборкаПоТЧ.УчитыватьСН Тогда
			// СпособНалогообложенияСН
			Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения СН!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если ВыборкаПоТЧ.УчитыватьСО Тогда
			// СпособНалогообложенияСО
			Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения СО!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.УчитыватьОППВ Тогда
			// СпособНалогообложенияОППВ
			Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ОППВ!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.УчитыватьВОСМС Тогда
			// СпособНалогообложенияВОСМС
			Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ВОСМС!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоТЧ.УчитыватьООСМС Тогда
			// СпособНалогообложенияООСМС
			Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(НачалоСообщения + "не указан способ обложения ООСМС!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиТЧ()

// По строке выборки результата запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, 
		  												ИсчислениеНалоговСтруктурныхЕдиниц)

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;
																		
	Если ВыборкаПоТЧ.УчитыватьИПН Тогда
		  
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
				
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 

		// Выплаченные доходы по налоговому учету
		Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыВНатуральнойФорме Тогда
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.мТаблицаДвижений.Добавить();
			
			// Свойства
			Движение.Период			  = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			
			// Измерения
			Движение.ФизЛицо		  = ВыборкаПоТЧ.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			Иначе
				Движение.МесяцНалоговогоПериода = ВыборкаПоТЧ.МесяцНалоговогоПериода;
			КонецЕсли;
			Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода	  = ВыборкаПоТЧ.СуммаДохода;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьОПВ Тогда

		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьСН Тогда

		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
 		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьСО Тогда

		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
 		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ И ВыборкаПоТЧ.УчитыватьОППВ Тогда

		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
 		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
		
	КонецЕсли;
	
	Если ВыборкаПоТЧ.УчитыватьОПВР Тогда

		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();

		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
		КонецЕсли;

		// Измерения
		Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
		Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
 		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
		Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
		
	КонецЕсли;
	
	Если ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации),ВыборкаПоТЧ.МесяцНалоговогоПериода) >= Дата("20170701") Тогда
		
		Если ВыборкаПоТЧ.УчитыватьВОСМС Тогда
			
			Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			Иначе
				Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
			Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
			Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
			Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
			Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
			
		КонецЕсли;
		
		Если ВыборкаПоТЧ.УчитыватьООСМС
			И НЕ ВыборкаПоТЧ.ФизЛицо = ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель Тогда
			
			Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
			
			// Свойства
			Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
				Движение.Период  	       = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			Иначе
				Движение.Период            = ВыборкаПоТЧ.МесяцНалоговогоПериода;
			КонецЕсли;
			
			// Измерения
			Движение.ФизЛицо               = ВыборкаПоТЧ.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
			КонецЕсли;
			Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
			Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
			Движение.Организация		  	= ВыборкаПоШапкеДокумента.Организация;		
			Движение.СпособНалогообложения 	= ВыборкаПоТЧ.СпособНалогообложенияООСМС;
			Движение.ВидРасчета			 	= ВыборкаПоТЧ.ВидРасчета;
			Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			КонецЕсли;
			
			// Ресурсы
			Движение.СуммаДохода		= ВыборкаПоТЧ.СуммаДохода; 
			Движение.СуммаВычета		= ВыборкаПоТЧ.СуммаВычета; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов Тогда
		
		///////////////////////////////////////////////////
	    // ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
		
		Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.мТаблицаДвижений.Добавить();
				
		// Свойства
		Движение.ВидДвижения	  		= ВидДвиженияНакопления.Приход;
		Движение.Период			  		= ВыборкаПоТЧ.ДатаДохода;
				
		// Измерения
		Движение.Контрагент				= ВыборкаПоТЧ.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодВзаиморасчетов 	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
				
		// Ресурсы
		Движение.СуммаВзаиморасчетов  	= ВыборкаПоТЧ.СуммаДохода;
		
	КонецЕсли;
	

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание) 
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	ТипФизическиеЛица = Тип("СправочникСсылка.ФизическиеЛица");
	ТипКонтрагенты = Тип("СправочникСсылка.Контрагенты");
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(СведенияОДоходах);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	Для Каждого НаборЗаписей Из Движения Цикл
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
		КонецЕсли;
	Конеццикла;
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(ИсчислениеНалоговСтруктурныхЕдиниц);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			РезультатЗапросаПоТабличнымЧастям = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
			ВыборкаПоТабличнымЧастям = РезультатЗапросаПоТабличнымЧастям.Выбрать();

			Пока ВыборкаПоТабличнымЧастям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, ВыборкаПоТабличнымЧастям, Отказ, Заголовок);
				
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТабличнымЧастям, ИсчислениеНалоговСтруктурныхЕдиниц);

			КонецЦикла;
			
			Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов Тогда
				// надо отразить зарегистрированные доходы
				
				// получим данные отражения доходов
				РезультатЗапросаПоПроводкам = СформироватьПроводки(ВыборкаПоШапкеДокумента);
				
				ВыборкаПоПроводкам = РезультатЗапросаПоПроводкам.Выбрать();
				Пока ВыборкаПоПроводкам.Следующий() Цикл
					// Добавим строку с отражением
					ДобавитьСтрокуОтражения(ВыборкаПоШапкеДокумента, ВыборкаПоПроводкам); 
				КонецЦикла;
			КонецЕсли;
								
			Если Не Отказ Тогда
				// свернем таблицы регистров накопления и запишим их в наборы записей
				Для Каждого НаборЗаписей Из Движения Цикл
					Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
						ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
						НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
						НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
					КонецЕсли;
				Конеццикла;
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры
// - БК - конец


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПЕЧАТИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Формирует запрос по формированию проводок документа
//
Функция СформироватьПроводки(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация", ВыборкаПоШапкеДокумента.Организация);
	

		
		Запрос.УстановитьПараметр("парамСотрудникиРаботники", ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
		Запрос.УстановитьПараметр("парамПодразделения", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
		Запрос.УстановитьПараметр("парамКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	  	Запрос.УстановитьПараметр("парамДоговорыКонтрагентов", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
		СпособПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию;
		
	
	Запрос.УстановитьПараметр("парамСпособПоУмолчанию", 	СпособПоУмолчанию);
	// Счет Дт
	Запрос.УстановитьПараметр("парамСчетДтПоУмолчанию", 	 СпособПоУмолчанию.СчетДт);
	Запрос.УстановитьПараметр("парамСубконтоДт1ПоУмолчанию", СпособПоУмолчанию.СубконтоДт1);
	Запрос.УстановитьПараметр("парамСубконтоДт2ПоУмолчанию", СпособПоУмолчанию.СубконтоДт2);
	Запрос.УстановитьПараметр("парамСубконтоДт3ПоУмолчанию", СпособПоУмолчанию.СубконтоДт3);
	// Счет Кт
	Запрос.УстановитьПараметр("парамСчетКтПоУмолчанию",		 ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность);
	// - НУ - начало
	// Счет Дт
	Запрос.УстановитьПараметр("парамСчетДтНУПоУмолчанию", 		СпособПоУмолчанию.СчетДтНУ);
	Запрос.УстановитьПараметр("парамСубконтоДтНУ1ПоУмолчанию", СпособПоУмолчанию.СубконтоДтНУ1);
	Запрос.УстановитьПараметр("парамСубконтоДтНУ2ПоУмолчанию", СпособПоУмолчанию.СубконтоДтНУ2);
	Запрос.УстановитьПараметр("парамСубконтоДтНУ3ПоУмолчанию", СпособПоУмолчанию.СубконтоДтНУ3);
	// Счет Кт
	Запрос.УстановитьПараметр("парамСчетКтНУПоУмолчанию", 		ПланыСчетов.Типовой.ПрочаяКраткосрочнаяКредиторскаяЗадолженность.СчетНУ);
	// - НУ - конец
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОДоходах.НомерСтроки,
		|	СведенияОДоходах.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	СведенияОДоходах.ФизЛицо КАК Контрагент,
		|	СведенияОДоходах.ФизЛицо.ФизЛицо КАК ФизЛицо,
		|	СведенияОДоходах.ДоговорКонтрагента,
		|	СведенияОДоходах.ДатаДохода,
		|	СведенияОДоходах.МесяцНалоговогоПериода,
		|	СведенияОДоходах.ВидРасчета,
		|	СведенияОДоходах.ВидДохода,
		|	СведенияОДоходах.СуммаДохода,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете
		|		ИНАЧЕ СведенияОДоходах.Ссылка.СпособОтраженияВБухучете
		|	КОНЕЦ КАК СпособОтраженияВБухучете
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения.СведенияОДоходах КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
		|	ДанныеДокумента.ДатаДохода КАК ДатаДохода,
		|	ДанныеДокумента.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	МАКСИМУМ(УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_СведенияОПодразделенияхСрез
		|ИЗ
		|	ВТ_ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации КАК УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации
		|		ПО ДанныеДокумента.ПодразделениеОрганизации = УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.ПодразделениеОрганизации
		|			И (УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.Организация = &парамОрганизация)
		|			И (УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.Период <= ДанныеДокумента.ДатаДохода)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.ФизЛицо,
		|	ДанныеДокумента.ДатаДохода,
		|	ДанныеДокумента.ПодразделениеОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодразделениеОрганизации,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОПодразделенияхСрез.Контрагент КАК Контрагент,
		|	СведенияОПодразделенияхСрез.ФизЛицо КАК ФизЛицо,
		|	СведенияОПодразделенияхСрез.ДатаДохода КАК ДатаДохода,
		|	СведенияОПодразделенияхСрез.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.СпособОтраженияВБухучете
		|ПОМЕСТИТЬ ВТ_УчетЗаработкаПодразделенияОрганизации
		|ИЗ
		|	ВТ_СведенияОПодразделенияхСрез КАК СведенияОПодразделенияхСрез
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации КАК УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации
		|		ПО СведенияОПодразделенияхСрез.ПодразделениеОрганизации = УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.ПодразделениеОрганизации
		|			И СведенияОПодразделенияхСрез.Период = УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	ФизЛицо,
		|	ДатаДохода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходах.НомерСтроки,
		|	СведенияОДоходах.Контрагент,
		|	СведенияОДоходах.ДоговорКонтрагента,
		|	СведенияОДоходах.ФизЛицо,
		|	СведенияОДоходах.ВидРасчета,
		|	СведенияОДоходах.ДатаДохода,
		|	СведенияОДоходах.МесяцНалоговогоПериода,
		|	СведенияОДоходах.ПодразделениеОрганизации,
		|	СведенияОДоходах.СуммаДохода,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СчетДт
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СчетДт
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СчетДт
		|		ИНАЧЕ &парамСчетДтПоУмолчанию
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДт1
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДт1
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДт1
		|		ИНАЧЕ &парамСубконтоДт1ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДт1,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДт2
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДт2
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДт2
		|		ИНАЧЕ &парамСубконтоДт2ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДт2,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДт3
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДт3
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДт3
		|		ИНАЧЕ &парамСубконтоДт3ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДт3,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СчетКт
		|		КОГДА СведенияОДоходах.ВидДохода.СчетУчетаБУ <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидДохода.СчетУчетаБУ
		|		ИНАЧЕ &парамСчетКтПоУмолчанию
		|	КОНЕЦ КАК СчетКт,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКт1
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКт2
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКт2,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКт3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКт3,
		// - НУ - начало
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СчетДтНУ
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СчетДтНУ
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СчетДтНУ
		|		ИНАЧЕ &парамСчетДтНУПоУмолчанию
		|	КОНЕЦ КАК СчетДтНУ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДтНУ1
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДтНУ1
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДтНУ1
		|		ИНАЧЕ &парамСубконтоДтНУ1ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДтНУ1,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДтНУ2
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДтНУ2
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДтНУ2
		|		ИНАЧЕ &парамСубконтоДтНУ2ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДтНУ2,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоДтНУ3
		|		КОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидРасчета.СпособОтраженияВБухучете.СубконтоДтНУ3
		|		КОГДА НЕ УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете ЕСТЬ NULL 
		|				И УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетЗаработкаПодразделенияОрганизации.СпособОтраженияВБухучете.СубконтоДтНУ3
		|		ИНАЧЕ &парамСубконтоДтНУ3ПоУмолчанию
		|	КОНЕЦ КАК СубконтоДтНУ3,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СчетКтНУ
		|		КОГДА СведенияОДоходах.ВидДохода.СчетУчетаБУ <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.ВидДохода.СчетУчетаНУ
		|		ИНАЧЕ &парамСчетКтНУПоУмолчанию
		|	КОНЕЦ КАК СчетКтНУ,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКтНУ1
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКтНУ1,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКтНУ2
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКтНУ2,
		|	ВЫБОР
		|		КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СведенияОДоходах.СпособОтраженияВБухучете.СубконтоКтНУ3
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СубконтоКтНУ3
		// - НУ - конец
		|ПОМЕСТИТЬ ВТ_ДанныеУчета
		|ИЗ
		|	ВТ_ДанныеДокумента КАК СведенияОДоходах
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетЗаработкаПодразделенияОрганизации КАК УчетЗаработкаПодразделенияОрганизации
		|		ПО СведенияОДоходах.ПодразделениеОрганизации = УчетЗаработкаПодразделенияОрганизации.ПодразделениеОрганизации
		|			И (УчетЗаработкаПодразделенияОрганизации.ДатаДохода = СведенияОДоходах.ДатаДохода)
		|			И (УчетЗаработкаПодразделенияОрганизации.Контрагент = СведенияОДоходах.Контрагент)
		|			И (УчетЗаработкаПодразделенияОрганизации.ФизЛицо = СведенияОДоходах.ФизЛицо)
		|
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОДоходах.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|				ТОГДА СведенияОДоходах.СпособОтраженияВБухучете
		|			ИНАЧЕ &парамСпособПоУмолчанию
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДанныеУчета.НомерСтроки,
		|	ДанныеУчета.Контрагент,
		|	ДанныеУчета.ДоговорКонтрагента,
		|	ДанныеУчета.ФизЛицо,
		|	ДанныеУчета.ВидРасчета,
		|	ВЫБОР КОГДА ДанныеУчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОсновноеНачисление,
		|	ДанныеУчета.ДатаДохода,
		|	ДанныеУчета.МесяцНалоговогоПериода,
		|	ДанныеУчета.ПодразделениеОрганизации,
		|	ДанныеУчета.СуммаДохода,
		|	ДанныеУчета.СчетДт,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДт1
		|	КОНЕЦ КАК СубконтоДт1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДт2
		|	КОНЕЦ КАК СубконтоДт2,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДт3
		|	КОНЕЦ КАК СубконтоДт3,
		|	ДанныеУчета.СчетКт,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКт.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКт.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКт.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКт1
		|	КОНЕЦ КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКт.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКт.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКт.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКт2
		|	КОНЕЦ КАК СубконтоКт2,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКт.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКт.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКт.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКт3
		|	КОНЕЦ КАК СубконтоКт3,
		|	ЕСТЬNULL(ВидыСубконтоПодразделенияДт.НомерСтроки, 0) КАК НомерСубконтоПодразделенияДт,
		|	ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКт.НомерСтроки, 0) КАК НомерСубконтоСотрудникиРаботникиКт,
		|	ЕСТЬNULL(ВидыСубконтоКонтрагентыКт.НомерСтроки, 0) КАК НомерСубконтоКонтрагентыКт,
		|	ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКт.НомерСтроки, 0) КАК НомерСубконтоДоговорыКонтрагентовКт,
		// - НУ - начало
		|	ДанныеУчета.СчетДтНУ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДтНУ.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДтНУ1
		|	КОНЕЦ КАК СубконтоДтНУ1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДтНУ.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДтНУ2
		|	КОНЕЦ КАК СубконтоДтНУ2,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоПодразделенияДтНУ.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ПодразделениеОрганизации
		|		ИНАЧЕ ДанныеУчета.СубконтоДтНУ3
		|	КОНЕЦ КАК СубконтоДтНУ3,
		|	ДанныеУчета.СчетКтНУ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКтНУ.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКтНУ.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКтНУ.НомерСтроки, 0) = 1 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКтНУ1
		|	КОНЕЦ КАК СубконтоКтНУ1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКтНУ.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКтНУ.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКтНУ.НомерСтроки, 0) = 2 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКтНУ2
		|	КОНЕЦ КАК СубконтоКтНУ2,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКтНУ.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ФизЛицо
		|		КОГДА ЕСТЬNULL(ВидыСубконтоКонтрагентыКтНУ.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.Контрагент
		|		КОГДА ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКтНУ.НомерСтроки, 0) = 3 
		|			ТОГДА ДанныеУчета.ДоговорКонтрагента
		|		ИНАЧЕ ДанныеУчета.СубконтоКтНУ3
		|	КОНЕЦ КАК СубконтоКтНУ3,
		|	ЕСТЬNULL(ВидыСубконтоПодразделенияДтНУ.НомерСтроки, 0) КАК НомерСубконтоПодразделенияДтНУ,
		|	ЕСТЬNULL(ВидыСубконтоСотрудникиРаботникиКтНУ.НомерСтроки, 0) КАК НомерСубконтоСотрудникиРаботникиКтНУ,
		|	ЕСТЬNULL(ВидыСубконтоКонтрагентыКтНУ.НомерСтроки, 0) КАК НомерСубконтоКонтрагентыКтНУ,
		|	ЕСТЬNULL(ВидыСубконтоДоговорыКонтрагентовКтНУ.НомерСтроки, 0) КАК НомерСубконтоДоговорыКонтрагентовКтНУ
		// - НУ - конец
		|ИЗ
		|	ВТ_ДанныеУчета КАК ДанныеУчета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконтоСотрудникиРаботникиКт
		|		ПО ДанныеУчета.СчетКт = ВидыСубконтоСотрудникиРаботникиКт.Ссылка 
		|			И (ВидыСубконтоСотрудникиРаботникиКт.ВидСубконто = &парамСотрудникиРаботники)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконтоПодразделенияДт
		|		ПО ДанныеУчета.СчетДт = ВидыСубконтоПодразделенияДт.Ссылка 
		|			И (ВидыСубконтоПодразделенияДт.ВидСубконто = &парамПодразделения)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконтоКонтрагентыКт
		|		ПО ДанныеУчета.СчетКт = ВидыСубконтоКонтрагентыКт.Ссылка 
		|			И (ВидыСубконтоКонтрагентыКт.ВидСубконто = &парамКонтрагенты)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Типовой.ВидыСубконто КАК ВидыСубконтоДоговорыКонтрагентовКт
		|		ПО ДанныеУчета.СчетКт = ВидыСубконтоДоговорыКонтрагентовКт.Ссылка 
		|			И (ВидыСубконтоДоговорыКонтрагентовКт.ВидСубконто = &парамДоговорыКонтрагентов)
		// - НУ - начало
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконтоСотрудникиРаботникиКтНУ
		|		ПО ДанныеУчета.СчетКтНУ = ВидыСубконтоСотрудникиРаботникиКтНУ.Ссылка 
		|			И (ВидыСубконтоСотрудникиРаботникиКтНУ.ВидСубконто = &парамСотрудникиРаботники)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконтоПодразделенияДтНУ
		|		ПО ДанныеУчета.СчетДтНУ = ВидыСубконтоПодразделенияДтНУ.Ссылка 
		|			И (ВидыСубконтоПодразделенияДтНУ.ВидСубконто = &парамПодразделения)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконтоКонтрагентыКтНУ
		|		ПО ДанныеУчета.СчетКтНУ = ВидыСубконтоКонтрагентыКтНУ.Ссылка 
		|			И (ВидыСубконтоКонтрагентыКтНУ.ВидСубконто = &парамКонтрагенты)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидыСубконтоДоговорыКонтрагентовКтНУ
		|		ПО ДанныеУчета.СчетКтНУ = ВидыСубконтоДоговорыКонтрагентовКтНУ.Ссылка 
		|			И (ВидыСубконтоДоговорыКонтрагентовКтНУ.ВидСубконто = &парамДоговорыКонтрагентов)
		// - НУ - конец
		|";
		
	Возврат Запрос.Выполнить();	
	
КонецФункции

// По строке выборки результата запроса по проводкам формирует движения по регистру БУДополнительныеНачисления
// 
Процедура ДобавитьСтрокуОтражения(ВыборкаПоШапкеДокумента, ВыборкаПоПроводкам)
	
	Строка = ?(ВыборкаПоПроводкам.ОсновноеНачисление,Движения.БУОсновныеНачисления.Добавить(),Движения.БУДополнительныеНачисления.Добавить());
	
	// Свойства
	Строка.ВидРасчета 				 = ВыборкаПоПроводкам.ВидРасчета;
	Строка.ПериодРегистрации 		 = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Если ВыборкаПоПроводкам.ОсновноеНачисление Тогда
		Строка.ПериодДействияНачало = ВыборкаПоПроводкам.ДатаДохода;
		Строка.ПериодДействияКонец 	= КонецДня(ВыборкаПоПроводкам.ДатаДохода);
	КонецЕсли;
	
	// Измерения
	Строка.Сотрудник 				 = ВыборкаПоПроводкам.Контрагент;
	Строка.ФизЛицо 					 = ВыборкаПоПроводкам.ФизЛицо;
	Строка.Организация 				 = ВыборкаПоШапкеДокумента.Организация;
	
	// Ресурсы
	Строка.Результат 				 = ВыборкаПоПроводкам.СуммаДохода;
	
	// Реквизиты
	Строка.СчетДт 					 = ВыборкаПоПроводкам.СчетДт;
	Строка.СубконтоДт1 				 = ВыборкаПоПроводкам.СубконтоДт1;
	Строка.СубконтоДт2 				 = ВыборкаПоПроводкам.СубконтоДт2;
	Строка.СубконтоДт3 				 = ВыборкаПоПроводкам.СубконтоДт3;
	Строка.СчетКт 					 = ВыборкаПоПроводкам.СчетКт;
	Строка.СубконтоКт1 				 = ВыборкаПоПроводкам.СубконтоКт1;
	Строка.СубконтоКт2 				 = ВыборкаПоПроводкам.СубконтоКт2;
	Строка.СубконтоКт3 				 = ВыборкаПоПроводкам.СубконтоКт3;
	// - НУ - начало
	Строка.СчетДтНУ 					 = ВыборкаПоПроводкам.СчетДтНУ;
	Строка.СубконтоДтНУ1 				 = ВыборкаПоПроводкам.СубконтоДтНУ1;
	Строка.СубконтоДтНУ2 				 = ВыборкаПоПроводкам.СубконтоДтНУ2;
	Строка.СубконтоДтНУ3 				 = ВыборкаПоПроводкам.СубконтоДтНУ3;
	Строка.СчетКтНУ 					 = ВыборкаПоПроводкам.СчетКтНУ;
	Строка.СубконтоКтНУ1 				 = ВыборкаПоПроводкам.СубконтоКтНУ1;
	Строка.СубконтоКтНУ2 				 = ВыборкаПоПроводкам.СубконтоКтНУ2;
	Строка.СубконтоКтНУ3 				 = ВыборкаПоПроводкам.СубконтоКтНУ3;
	// - НУ - конец
	
	Строка.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.Организация;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();

// - БК - начало
мОтображатьСтруктурныеПодразделенияВЗарплате = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате();
// - БК - конец
