// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

Перем ДатаДвижений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам БУ и НУ
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок)

	// Бухгалтерские проводки документа
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.Оплачено) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = СтруктураШапкиДокумента.Дата;
	
	ВидСчетаОрг = СтруктураШапкиДокумента.СчетОрганизации.ВидСчета;
	ВалютаСчета = СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств;
	ПроводкиБУ  = Движения.Типовой;
	ПроводкиНУ	= Движения.Налоговый;
	
	РасчетыВВалюте = Ложь;
	
	СчетДт = СтруктураШапкиДокумента.СчетБанк;
	СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
		
	СтруктураШапкиДокумента.Вставить("СчетБанкНУ",СчетДтНУ );
	
	Если СчетДт.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	                	
		
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		     		 
		 СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);		
		 СтруктураШапкиДокумента.Вставить("КоррСчетНУ", СчетДтНУ);		     

		 
		 РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		 РеестрПлатежей.Колонки.Добавить("СодержаниеПроводки",		ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));			
		 РеестрПлатежей.Колонки.Добавить("РезультатРаспределения", 	Новый ОписаниеТипов("Булево"));
		 
		 СтрокаПриобретения = РеестрПлатежей[0];
		 
		
		 ФинРезультатСделкиСВалютой = 0;
		 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
			 //При приобретении валюты используется только первая строка реестра платежей						
			 
			 СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.ТенговаяСумма;
			 
			 Если НЕ СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПриобретения.КурсВзаиморасчетов Тогда						
				 
				 СуммаРасчетовПоКурсуБанка = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПриобретения.ВалютнаяСумма, СтрокаПриобретения.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
				 СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
				 СтруктураШапкиДокумента.КратностьДокумента, 1);
				 
			 КонецЕсли; 	
			 
			 ФинРезультатСделкиСВалютой =  СтрокаПриобретения.ТенговаяСумма - СуммаРасчетовПоКурсуБанка;			
		 ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты тогда		
			 //При приобретении валюты используется только первая строка реестра платежей			
			 
			 СтрокаПриобретения.СодержаниеПроводки = "Приобретение иностранной валюты";
			 
			 СуммаРасчетовПоКурсуБанка = СтрокаПриобретения.ТенговаяСумма;
			 
			 Если не СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПриобретения.КурсВзаиморасчетов Тогда
				 СтрокаПриобретения.ТенговаяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПриобретения.ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
													 СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, 1,
													 СтруктураШапкиДокумента.КратностьДокумента, 1);						
			 КонецЕсли; 	
			 ФинРезультатСделкиСВалютой = СтрокаПриобретения.ТенговаяСумма - СуммаРасчетовПоКурсуБанка;			
		 КонецЕсли;
		 
		 Если СтруктураШапкиДокумента.ВедениеУчетаВременныхразницБалансовымМетодом Тогда
			 //  в НУ отражаем полную информацию
			 РеестрПлатежейНУ = РеестрПлатежей.Скопировать();
		 Иначе
			 // схема ред. 1.5 в НУ не отражаем информацию о взаиморасчетах
			 РеестрПлатежейНУ = РеестрПлатежей.СкопироватьКолонки();
		 КонецЕсли;		
		 
		 Если НЕ (ФинРезультатСделкиСВалютой = 0) Тогда
			 
			 СтрокаРазницыКурсов = РеестрПлатежей.Добавить();
			 СтрокаРазницыКурсов.ВалютнаяСумма = 0;
			 Для Каждого Колонка Из РеестрПлатежей.Колонки Цикл
				 Если Колонка.Имя = "ТенговаяСумма" Тогда
					 // с точки зрения операции поступления
					 // для того чтобы показкать возникновение дохода по кредиту
					 // отражаем сумму с минусом
					 СтрокаРазницыКурсов[Колонка.Имя] = -ФинРезультатСделкиСВалютой;
				 ИначеЕсли Колонка.Имя = "ВалютнаяСумма" ИЛИ Колонка.Имя = "СуммаВзаиморасчетов" Тогда
					 СтрокаРазницыКурсов[Колонка.Имя] = 0;
				 Иначе
					 СтрокаРазницыКурсов[Колонка.Имя] = СтрокаПриобретения[Колонка.Имя];
				 КонецЕсли;
			 КонецЦикла;
			 
			 Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
				 СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от продажи валюты";		
			 Иначе
				 СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от покупки валюты";				
			 КонецЕсли;
			 //СтрокаРазницыКурсов.КоррСчет = ?(ФинРезультатСделкиСВалютой < 0, ПланыСчетов.Типовой.ПрочиеРасходы, ПланыСчетов.Типовой.ПрочиеДоходы); //=--=
			 //-=-=
			 СтрокаРазницыКурсов.КоррСчет = ?(ФинРезультатСделкиСВалютой < 0, ПланыСчетов.Типовой.РасходыПОКуплеПродажиВалюты, ПланыСчетов.Типовой.ДоходОтКуплиПродажиВалюты);
			 //-=-=
			 			 
			 // найдем подразделение для регл. операций, чтобы подставить в качестве соотв. субконто
			 ПодразделениеДляРеглОпераций = ПроцедурыБухгалтерскогоУчета.ПолучитьПодразделениеДляРеглОпераций(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			 Если Отказ Тогда
				 Возврат;
			 КонецЕсли;	 
			 
			 Для Каждого Субконто Из СтрокаРазницыКурсов.КоррСчет.ВидыСубконто Цикл
				 Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = Справочники.Доходы.ДоходыПриОбменеВалюты;
				 ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты;					
				 ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
					 СтрокаРазницыКурсов["КоррСубконто"+Субконто.НомерСтроки] = ПодразделениеДляРеглОпераций;
				 КонецЕсли;
			 КонецЦикла;	
			 
			 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				 
				 СтрокаРазницыКурсов.КоррСчетНУ = ?(ФинРезультатСделкиСВалютой < 0, ПланыСчетов.Налоговый.ПрочиеРасходы, ПланыСчетов.Налоговый.ПрочиеДоходы);				 
				 СтрокаРазницыКурсов.СчетОплатыНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();				 
				 
				 Для Каждого Субконто Из СтрокаРазницыКурсов.КоррСчетНУ.ВидыСубконто Цикл
					 Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = Справочники.Доходы.ДоходыПриОбменеВалюты;
					 ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты;					
					 ИначеЕсли Субконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения Тогда
						 СтрокаРазницыКурсов["КоррСубконтоНУ"+Субконто.НомерСтроки] = ПодразделениеДляРеглОпераций;
					 КонецЕсли;
				 КонецЦикла;	
				 
				СтрокаРазницыКурсовНУ = РеестрПлатежейНУ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРазницыКурсовНУ, СтрокаРазницыКурсов);
				// закрытие взаиморасчетов в НУ
				Если СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
					СтрокаРазницыКурсов = РеестрПлатежейНУ.Добавить();
					
					СтрокаРазницыКурсов.ВалютнаяСумма = 0;
					Для Каждого Колонка Из РеестрПлатежей.Колонки Цикл
						Если Колонка.Имя = "ТенговаяСумма" Тогда
							// с точки зрения операции поступления
							// для того чтобы показкать возникновение дохода по кредиту
							// отражаем сумму с минусом
							СтрокаРазницыКурсов[Колонка.Имя] = -ФинРезультатСделкиСВалютой;
						ИначеЕсли Колонка.Имя = "ВалютнаяСумма" ИЛИ Колонка.Имя = "СуммаВзаиморасчетов" Тогда
							СтрокаРазницыКурсов[Колонка.Имя] = 0;
						Иначе
							СтрокаРазницыКурсов[Колонка.Имя] = СтрокаПриобретения[Колонка.Имя];
						КонецЕсли;
					КонецЦикла;
					
					Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты	Тогда
						СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от продажи валюты";		
					Иначе
						СтрокаРазницыКурсов.СодержаниеПроводки = ?(ФинРезультатСделкиСВалютой < 0,"Убыток","Прибыль")+" от покупки валюты";				
					КонецЕсли; 				 
					
					СтрокаРазницыКурсов.КоррСчетНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
					СтрокаРазницыКурсов.КоррСубконтоНУ1 = СтруктураШапкиДокумента.Контрагент;
					СтрокаРазницыКурсов.КоррСубконтоНУ2 = СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента;
				КонецЕсли;  			 
			КонецЕсли;  			 
		 КонецЕсли;
		 // формирование проводок		 
		  
		 //Проводки по результатам распределения
		 УправлениеДенежнымиСредствами.СформироватьПроводкиПоДвижениюДенег(ЭтотОбъект, СтруктураШапкиДокумента, РеестрПлатежей,,,,Истина);
		 
		 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			 УправлениеДенежнымиСредствами.СформироватьПроводкиПоДвижениюДенегНУ(ЭтотОбъект, СтруктураШапкиДокумента, РеестрПлатежейНУ,,,,Истина);			
		 КонецЕсли;
		 
	 //ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда //-=-=
	 //-=-=
	 ИначеЕсли ЕстьРасчетыСКонтрагентами  Тогда
	 //-=-=
		 СтруктураШапкиДокумента.Вставить("КоррСчет", СчетДт);		
		 СтруктураШапкиДокумента.Вставить("КоррСчетНУ", СчетДтНУ);	
		 
		 СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения, Истина, Ложь));
		 
		 РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		 ПереворачиватьОтрицательныеПроводки = Истина;
		 
		 //Если ЕстьРасчетыПоКредитам тогда
		 //    СодержаниеПроводки = "Расчеты по кредитам и займам";
		 //ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами тогда
		     СодержаниеПроводки = "Расчеты с контрагентом";
		 //КонецЕсли; //-=-=        		
		 //УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей,ПереворачиватьОтрицательныеПроводки);	
		 УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей,ПереворачиватьОтрицательныеПроводки);	
		 //-=-=
		 	 ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		 //только в валюте регламентированного учета
		 //Закрываем задолжность по пене и вознагрождениям
		 
		 СуммаРасчетов = СуммаДокумента;
		 
		 Для Каждого СтрокаПлатежа ИЗ РасшифровкаПлатежа Цикл
			 
			 СтруктураОтбора = Новый Структура;
			 СтруктураОтбора.Вставить("СчетУчета",СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ);
			 СтруктураОтбора.Вставить("ТипСчетаУчета",Перечисления.ТипыКредитовИЗаймов.Выданные);
			 
			 СтруктураСчетов = УправлениеЗаймами.ПолучитьСоответствиеСчетовУчетаПоКредитамИЗаймам(СтруктураОтбора);
			 
			 СчетПени = СтруктураСчетов.СчетУчетаПени;
			 Если СчетПени <> Неопределено Тогда
				 СуммаОстатка = УправлениеЗаймами.ПолучитьЗадолжностьПениИВознагрождений(ЭтотОбъект,СтруктураШапкиДокумента,СчетПени,СтрокаПлатежа.ДоговорКонтрагента);
				 
				 Если СуммаОстатка > 0 Тогда //погашаем остатки пени
					 
					 СуммаПроводки = Мин(СуммаОстатка,СуммаРасчетов);
					 
					 Проводка = ПроводкиБУ.Добавить();
					 
					 Проводка.Период     = ДатаДока;		
					 Проводка.Организация = СтруктураШапкиДокумента.Организация;
					 Проводка.Содержание = "Погашение остатка по пени и вознагрождениям";
					 
					 
					 Проводка.СчетДт     = СчетДт;
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
					 
					 Проводка.СчетКт = СчетПени;
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
					 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
					 
					 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					 Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
					 
					 // установка валюты для валютных корреспонденций
					 Если Проводка.СчетДт.Валютный Тогда
						 Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						 Проводка.ВалютнаяСуммаДт = СуммаПроводки;
					 КонецЕсли;
					 
					 Если Проводка.СчетКт.Валютный Тогда
						 Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						 Проводка.ВалютнаяСуммаКт = СуммаПроводки;
					 КонецЕсли;
					 
					 ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
					 
					 Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
					 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
					 
					 СуммаРасчетов = СуммаРасчетов - СуммаПроводки;
					 
					 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
						 ПроводкаНУ = ПроводкиНУ.Добавить();
						 ПроводкаНУ.Период      = ДатаДока;
						 ПроводкаНУ.Организация = Организация;				
							 
						 ПроводкаНУ.СчетКт     = СчетПени.СчетНУ;
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СтруктураШапкиДокумента.Контрагент);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтрокаПлатежа.ДоговорКонтрагента);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СтруктураШапкиДокумента.ТипОперации);
						 
						 ПроводкаНУ.Содержание = "Погашение остатка по пени и вознагрождениям"; 			 
						 
						 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
							 
							 ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
						 Иначе
							 ПроводкаНУ.СчетДт     = СчетДтНУ;
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
						 КонецЕсли;			 
						 
						 Если РасчетыВВалюте Тогда
							 
							 ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, 
							 СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
							 СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
							 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						 Иначе
							 ПроводкаНУ.Сумма = СуммаПроводки;
						 КонецЕсли; // Если КассаВВалюте Тогда
						 
						 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						 ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
						 
						 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
					 КонецЕсли;			 
				 КонецЕсли;
				
			КонецЕсли;
			 
			
			СчетВознагрождений = СтруктураСчетов.СчетучетаВознагрождений;
			 
			 Если СчетВознагрождений <> Неопределено Тогда
				 Если СчетВознагрождений<>СчетПени Тогда
					 СуммаОстатка = УправлениеЗаймами.ПолучитьЗадолжностьПениИВознагрождений(ЭтотОбъект,СтруктураШапкиДокумента,СчетВознагрождений,СтрокаПлатежа.ДоговорКонтрагента);
					 
					 Если СуммаОстатка > 0 Тогда //погашаем остатки вознагрождений
						 
						 СуммаПроводки = Мин(СуммаОстатка,СуммаРасчетов);
						 
						 Проводка = ПроводкиБУ.Добавить();
						 
						 Проводка.Период     = ДатаДока;		
						 Проводка.Организация = СтруктураШапкиДокумента.Организация;
						 Проводка.Содержание = "Погашение остатка по вознагрождениям";
						 
						 
						 Проводка.СчетДт     = СчетДт;
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
						 
						 Проводка.СчетКт = СчетВознагрождений;
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
						 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
						 
						 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						 Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
						 
						 // установка валюты для валютных корреспонденций
						 Если Проводка.СчетДт.Валютный Тогда
							 Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							 Проводка.ВалютнаяСуммаДт = СуммаПроводки;
						 КонецЕсли;
						 
						 Если Проводка.СчетКт.Валютный Тогда
							 Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							 Проводка.ВалютнаяСуммаКт = СуммаПроводки;
						 КонецЕсли;
						 
						 ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
						 
						 Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
						 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						 
						 СуммаРасчетов = СуммаРасчетов - СуммаПроводки;
						 
						 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
							 ПроводкаНУ = ПроводкиНУ.Добавить();
							 ПроводкаНУ.Период      = ДатаДока;
							 ПроводкаНУ.Организация = Организация;				
							 
							 ПроводкаНУ.СчетКт     = СчетВознагрождений.СчетНУ;
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СтруктураШапкиДокумента.Контрагент);
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтрокаПлатежа.ДоговорКонтрагента);
							 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СтруктураШапкиДокумента.ТипОперации);
							 
							 ПроводкаНУ.Содержание = "Погашение % по займам"; 			 
							 
							 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
								 
								 ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
								 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
								 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
							 Иначе
								 ПроводкаНУ.СчетДт     = СчетДтНУ;
								 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
								 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
							 КонецЕсли;			 
							 
							 Если РасчетыВВалюте Тогда
								 
								 ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, 
								 СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								 СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
							 Иначе
								 ПроводкаНУ.Сумма = СуммаПроводки;
							 КонецЕсли; // Если КассаВВалюте Тогда
							 
							 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							 ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
							 
							 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
						 КонецЕсли;			 
					 КонецЕсли;
				 КонецЕсли;
				
			КонецЕсли;
			
			//Расчет начисления вознагрождения за дни с начала месяца
			
			СуммаВознагрождения = 0;
			
			ДатаОкончанияНачисления = УправлениеЗаймами.ПолучитьДатуОкончанияНачисления(ЭтотОбъект, СтруктураШапкиДокумента, СчетВознагрождений, СтрокаПлатежа.ДоговорКонтрагента);
			Если ДатаОкончанияНачисления <> Неопределено Тогда
				Если СуммаРасчетов >0 Тогда
					ДатаПоследнегоНачисления = УправлениеЗаймами.ПолучитьДатуПоследнегоНачисления(ЭтотОбъект, СтруктураШапкиДокумента, СчетВознагрождений, СтрокаПлатежа.ДоговорКонтрагента);
					
					Если ДатаПоследнегоНачисления = Неопределено Тогда
						ДатаПоследнегоНачисления = НачалоМесяца(Дата);
					КонецЕсли;
					
					Если ДатаОкончанияНачисления<Дата Тогда
						РасчетнаяДата = ДатаОкончанияНачисления;
					Иначе
						РасчетнаяДата = Дата;
					КонецЕсли;
					
					КолДней=0;
					//ОбщегоНазначения.РазобратьРазностьДат(Дата,ДатаПоследнегоНачисления,,,КолДней);
					//Сообщить(КолДней);
					КолДней = День(РасчетнаяДата)-День(ДатаПоследнегоНачисления);
					КолДней = Макс(0,КолДней);
					КоличествоДнейВГоду = УправлениеЗаймами.ПолучитьЧислоДнейВГоду(СтрокаПлатежа.ДоговорКонтрагента.ВидКалендарныхДней);
					
					//СуммаОсновногоДолга =  СтрокаПлатежа.ДоговорКонтрагента.СуммаДоговора;
					СуммаОсновногоДолга = УправлениеЗаймами.ПолучитьСуммуОсновногоДолга(СтруктураШапкиДокумента,СтрокаПлатежа.ДоговорКонтрагента);
					КоличествоДнейНачисления = ?(КоличествоДнейВГоду=0,0,(КолДней/КоличествоДнейВГоду));
					
					СуммаВознагрождения = СуммаОсновногоДолга*КоличествоДнейНачисления*(СтрокаПлатежа.ДоговорКонтрагента.ПроцентВознагрождения/100);
					
					Если СуммаВознагрождения > 0 тогда
						
						СтруктураОтбора = новый Структура;
						СтруктураОтбора.Вставить("Счетучета", СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ);
						СтруктураОтбора.Вставить("ТипСчетаУчета", СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ.ТипСчета);
						
						СтруктураСчетов = УправлениеЗаймами.ПолучитьСоответствиеСчетовУчетаПоКредитамИЗаймам(СтруктураОтбора);
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период     = ДатаДока;		
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание = "Начислено вознагрождения за "+Строка(КолДней)+" дней";
						
						
						Проводка.СчетДт     = СтруктураСчетов.СчетУчетаВознагрождений;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПлатежа.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ТипОперации);
						
						Проводка.СчетКт = СтруктураСчетов.СчетУчетаДоходов;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураСчетов.СубконтоДоходов1);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураСчетов.СубконтоДоходов2);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураСчетов.СубконтоДоходов3);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
						
						// установка валюты для валютных корреспонденций
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = СуммаВознагрождения;
						КонецЕсли;
						
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СуммаВознагрождения;
						КонецЕсли;
						
						ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
						
						Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВознагрождения, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
						СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						
						Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
							ПроводкаНУ = ПроводкиНУ.Добавить();
							ПроводкаНУ.Период      = ДатаДока;
							ПроводкаНУ.Организация = Организация;				
								
							ПроводкаНУ.СчетКт     = СтруктураСчетов.СчетУчетаДоходов.СчетНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураСчетов.СубконтоДоходов1);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтруктураСчетов.СубконтоДоходов2);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, СтруктураСчетов.СубконтоДоходов3);
							
							ПроводкаНУ.Содержание = "Начислено вознагрождения по займам"; 			 
							
							
							ПроводкаНУ.СчетДт     = СтруктураСчетов.СчетУчетаВознагрождений.счетНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтрокаПлатежа.ДоговорКонтрагента);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.ТипОперации);
							
							Если РасчетыВВалюте Тогда
								
								ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВознагрождения, 
								СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
							Иначе
								ПроводкаНУ.Сумма = СуммаВознагрождения;
							КонецЕсли; // Если КассаВВалюте Тогда
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
							
							ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
						КонецЕсли;			 
						
						СуммаПроводки = Мин(СуммаВознагрождения,СуммаРасчетов);
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период     = ДатаДока;		
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.Содержание = "Погашение начисленного вознагрождения";
						
						
						Проводка.СчетДт     = СчетДт;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
						
						Проводка.СчетКт = СчетВознагрождений;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
						
						// установка валюты для валютных корреспонденций
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаДт = СуммаПроводки;
						КонецЕсли;
						
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
							Проводка.ВалютнаяСуммаКт = СуммаПроводки;
						КонецЕсли;
						
						ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
						
						Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
						СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						
						СуммаРасчетов = СуммаРасчетов - СуммаПроводки;
						
						Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
							ПроводкаНУ = ПроводкиНУ.Добавить();
							ПроводкаНУ.Период      = ДатаДока;
							ПроводкаНУ.Организация = Организация;				
								
							ПроводкаНУ.СчетКт     = СчетВознагрождений.СчетНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СтруктураШапкиДокумента.Контрагент);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтрокаПлатежа.ДоговорКонтрагента);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СтруктураШапкиДокумента.ТипОперации);
							
							ПроводкаНУ.Содержание = "Погашение начисленного вознагрождения"; 			 
							
							Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
								
								ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
							Иначе
								ПроводкаНУ.СчетДт     = СчетДтНУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
							КонецЕсли;			 
							
							Если РасчетыВВалюте Тогда
								
								ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, 
								СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
							Иначе
								ПроводкаНУ.Сумма = СуммаПроводки;
							КонецЕсли; // Если КассаВВалюте Тогда
							
							ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
							
							ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
						КонецЕсли;			 
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
					
			
			Если СуммаРасчетов >0 Тогда
				СтруктураЗадолжностиОсновногоДолга = УправлениеЗаймами.ПолучитьСтруктуруОсновногоДолга(СтруктураШапкиДокумента,СтрокаПлатежа.ДоговорКонтрагента);
				
				Для Каждого СтрокаТЗ ИЗ СтруктураЗадолжностиОсновногоДолга Цикл
					СуммаПроводки = Мин(СтрокаТЗ.Остаток,СуммаРасчетов);
					
					Если СуммаПроводки = 0 Тогда
						Продолжить;
					КонецЕсли;
					//
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период     = ДатаДока;		
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание = "Погашение основного долга по займам";
					
					
					Проводка.СчетДт     = СчетДт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
					
					Проводка.СчетКт = СтрокаТЗ.Счет;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
					
					// установка валюты для валютных корреспонденций
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаДт = СуммаПроводки;
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт = СуммаПроводки;
					КонецЕсли;
					
					ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
					
					Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
					СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
					
					СуммаРасчетов = СуммаРасчетов - СуммаПроводки;
						
					Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
						ПроводкаНУ = ПроводкиНУ.Добавить();
						ПроводкаНУ.Период      = ДатаДока;
						ПроводкаНУ.Организация = Организация;				
							
						ПроводкаНУ.СчетКт     = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтрокаПлатежа.ДоговорКонтрагента);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СтруктураШапкиДокумента.ТипОперации);
						
						ПроводкаНУ.Содержание = "Погашение основного долга по займам"; 			 
						
						Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
							
							ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
						Иначе
							ПроводкаНУ.СчетДт     = СчетДтНУ;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
						КонецЕсли;			 
						
						Если РасчетыВВалюте Тогда
							
							ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаПроводки, 
							СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
							СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
							СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
						Иначе
							ПроводкаНУ.Сумма = СуммаПроводки;
						КонецЕсли; // Если КассаВВалюте Тогда
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
						
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
					КонецЕсли;			 
				КонецЦикла;
			КонецЕсли;			 
			
		//остаток нераспределенной суммы погашаем основной долг
			Если СуммаРасчетов >0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период     = ДатаДока;		
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание = "Погашение основного долга по займам";
				
				
				Проводка.СчетДт     = СчетДт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
				
				Проводка.СчетКт = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
				
				// установка валюты для валютных корреспонденций
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СуммаРасчетов;
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СуммаРасчетов;
				КонецЕсли;
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
				
				Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаРасчетов, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
				
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период      = ДатаДока;
					ПроводкаНУ.Организация = Организация;				
						
					ПроводкаНУ.СчетКт     = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтрокаПлатежа.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СтруктураШапкиДокумента.ТипОперации);
					
					ПроводкаНУ.Содержание = "Погашение основного долга по займам"; 			 
					
					Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
						
						ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
					Иначе
						ПроводкаНУ.СчетДт     = СчетДтНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					КонецЕсли;			 
					
					Если РасчетыВВалюте Тогда
						
						ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаРасчетов, 
						СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
						СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
						СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
					Иначе
						ПроводкаНУ.Сумма = СуммаРасчетов;
					КонецЕсли; // Если КассаВВалюте Тогда
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				КонецЕсли;			 
			КонецЕсли;
			
		 КонецЦикла;
		 //-=-=
	 ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		 
		 Проводка = ПроводкиБУ.Добавить();
		 
		 Проводка.Период     = ДатаДока;		
		 Проводка.Организация = СтруктураШапкиДокумента.Организация;
		 Проводка.Содержание = "Прочее поступление денежных средств";
		 
		 
		 Проводка.СчетДт     = СчетДт;
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		 //-=-=
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ИсточникФинансирования);
		 //-=-=
		 
		 Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентомБУ;
		 
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКтБУ1);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКтБУ2);
		 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКтБУ3);
		 
		 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
         		 
		 // установка валюты для валютных корреспонденций
		 Если Проводка.СчетДт.Валютный Тогда
			 Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			 Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		 КонецЕсли;
		 
		 Если Проводка.СчетКт.Валютный Тогда
			 Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			 Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		 КонецЕсли;
		 
		 ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДока);
		 
		 Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
		 СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
		 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		 
		 // проводки по НУ для вида операции "Прочее"
		 Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
			 ПроводкаНУ = ПроводкиНУ.Добавить();
			 ПроводкаНУ.Период      = ДатаДока;
			 ПроводкаНУ.Организация = Организация;				
			 			 
			 ПроводкаНУ.СчетКт     = СчетУчетаРасчетовСКонтрагентомНУ;
			 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СубконтоКтНУ1);
			 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СубконтоКтНУ2);
			 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СубконтоКтНУ3);
						 
			 ПроводкаНУ.Содержание = "Прочие поступления"; 			 
			 
			 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				 
				 ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
			 Иначе
				 ПроводкаНУ.СчетДт     = СчетДтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			 КонецЕсли;			 
			 
			 Если РасчетыВВалюте Тогда
				 
				 ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
								 СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
								 СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
								 СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			 Иначе
				 ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			 КонецЕсли; // Если КассаВВалюте Тогда
			 
			 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);

			 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
			 
			 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				 
				 //если выбран счет затрат или доходов, то сделаем еще одну проводку
				 //погашение начисленной выше задолженности
				 ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				 
				 ПроводкаНУ_Погашение.СчетДт     = СчетДтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				 
				 ПроводкаНУ_Погашение.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ОсновнойДоговорКонтрагента);						
				 //СП = СП-получатель, так как мы с 3310Н(СП-получатель) переносим  на 1010Н также на СП-получатель
				 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель);
				 
				 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);

			 КонецЕсли;
		 КонецЕсли;
				
	// перечисленные пенсионные взносы
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
		Если ВозвратПенсионныхВзносов.Количество() <> 0 Тогда
			//++ЗУП
			ВидОперацииВозврата = ВозвратПенсионныхВзносов[0].Документ.ВидОперации;
			Если ВидОперацииВозврата = Перечисления.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносов Тогда
				ВидОПВ = "ОПВ";
			ИначеЕсли ВидОперацииВозврата = Перечисления.ВидыОперацийОПВВозвратВзносов.ВозвратОбязательныхПенсионныхВзносовРаботодателя Тогда
				ВидОПВ = "ОПВР";
			Иначе
				ВидОПВ = "ОППВ";
			КонецЕсли;
			//--ЗУП
			
			Если ВидОПВ = "ОПВ" Тогда
				ДвиженияПоРегистрамОПВ(СтруктураШапкиДокумента, Отказ, Заголовок);
			//++ЗУП	
			ИначеЕсли ВидОПВ = "ОПВР" Тогда
				ДвиженияПоРегистрамОПВР(СтруктураШапкиДокумента, Отказ, Заголовок);
			//--ЗУП	
			Иначе 
				ДвиженияПоРегистрамОППВ(СтруктураШапкиДокумента, Отказ, Заголовок);			
			КонецЕсли;	
		КонецЕсли;
		
	// перечисленные социальные отчисления
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
		Если ВозвратСоциальныхОтчислений.Количество() <> 0 Тогда
			Если ВозвратСоциальныхОтчислений[0].Документ.ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений Тогда
				ДвиженияПоРегистрамСО(СтруктураШапкиДокумента, Отказ, Заголовок);
			ИначеЕсли ВозвратСоциальныхОтчислений[0].Документ.ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС Тогда
				ДвиженияПоРегистрамВОСМС(СтруктураШапкиДокумента, Отказ, Заголовок);
			Иначе
				ДвиженияПоРегистрамООСМС(СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

	// перечисленная заработная плата
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
		ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
	//-=-=	
	Если ПередаватьЗадолженностьПоТрехстороннемуСоглашению тогда
		
		ТабБу = Движения.Типовой.Выгрузить();
		ТабНу = Движения.Налоговый.Выгрузить();		
		ТабДДС = Движения.ден_ДвиженияДенежныхСредств.Выгрузить();
		
		Для Каждого строкатч из ТабБу Цикл
			
			Проводка = движения.Типовой.Добавить();
			Проводка.СчетДт = СтрокаТЧ.СчетКт;
			Проводка.СчетКт = СтрокаТЧ.СчетКт;
			Проводка.Период = строкатч.период;
			проводка.Организация = строкатч.организация;
			Проводка.СтруктурноеПодразделениеДт = строкатч.СтруктурноеПодразделениеДт;
			Проводка.СтруктурноеПодразделениеКт = строкатч.СтруктурноеПодразделениеДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтокт1,строкатч.субконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтоКт2,строкатч.субконтоКт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтоКт3,строкатч.субконтоКт3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтоКт4,строкатч.субконтоКт4);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Контрагенты",КонтрагентПоТрехстороннемуСоглашению);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Договоры",ДоговорКонтрагентаПоТрехстороннемуСоглашения);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтоКт3,строкатч.субконтоКт3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтоКт4,строкатч.субконтоКт4);
			
			
			Если СтрокаТЧ.СчетКт.Валютный тогда
				Проводка.ВалютаДт = СтрокаТч.ВалютаДт;
				Проводка.ВалютнаяСуммаДт = СтрокаТч.ВалютнаяСуммаДт;
			КонецЕсли;
			
			Если СтрокаТЧ.СчетКт.Валютный тогда
				Проводка.ВалютаКт = СтрокаТЧ.ВалютаДт;
				Проводка.ВалютнаяСуммаКт = СтрокаТч.ВалютнаяСуммаДт;
			КонецЕсли;
			
			проводка.Сумма = СтрокаТЧ.Сумма;
			Проводка.Содержание = "Передача задолженности по трехстороннему соглашению";
			
		КонецЦикла;
		Для Каждого строкатч из ТабНу Цикл
			
			Проводка = движения.Налоговый.Добавить();
			Проводка.СчетДт = СтрокаТЧ.СчетКт;
			Проводка.СчетКт = СтрокаТЧ.СчетКт;
			Проводка.Период = строкатч.период;           
			проводка.ВидУчетаДт = строкатч.видучетадт;
			проводка.ВидУчетакт = строкатч.видучетадт;
			проводка.Организация = строкатч.организация;
			Проводка.СтруктурноеПодразделениеДт = строкатч.СтруктурноеПодразделениеДт;
			Проводка.СтруктурноеПодразделениеКт = строкатч.СтруктурноеПодразделениеДт;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтокт1,строкатч.субконтоКт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтокт2,строкатч.субконтоКт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.Субконтодт,строкатч.видсубконтокт3,строкатч.субконтоКт3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Контрагенты",КонтрагентПоТрехстороннемуСоглашению);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,"Договоры",ДоговорКонтрагентаПоТрехстороннемуСоглашения);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтоКт3,строкатч.субконтоКт3);
			//ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтоКт4,строкатч.субконтоКт4);
			
			Проводка.Сумма = СтрокаТЧ.Сумма;
			Проводка.Содержание = "Передача задолженности по трехстороннему соглашению";
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ из ТабДДС Цикл
			
			Движение = движения.ден_ДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
			Движение.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
			Движение = движения.ден_ДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
			Движение.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
			движение.Контрагент = КонтрагентПоТрехстороннемуСоглашению;
			Движение.ДоговорКонтрагента = ДоговорКонтрагентаПоТрехстороннемуСоглашения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Дополнительная проводка по структурному подразделению
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств

		Тогда
		Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
			
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение = СтруктурноеПодразделение;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				КонтрагентПодразделения = НаборЗаписей[0].Контрагент;
			Иначе
				КонтрагентПодразделения = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			
			Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период     = СтруктураШапкиДокумента.Дата;		
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание = "Оплата поставщику";
				
				
				Проводка.СчетКт = СчетУчетаРасчетовСоСтруктурнымПодразделением;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, КонтрагентПодразделения);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяОборотов);
				
				Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
					Проводка.СчетДт     =	СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоКтБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоКтБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоКтБУ3);
				Иначе
					Проводка.СчетДт     = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПлатежа.ДоговорКонтрагента);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.ТипОперации);
				КонецЕсли;
						
				
				// установка валюты для валютных корреспонденций
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
				
				Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
								
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобственныеКонтрагенты.Организация,
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты";
	
	ТабСоб = запрос.Выполнить().Выгрузить();
	
	СчетПоЗп = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
		
	//Передать проводки по зарплате
	
	Для каждого СтрокаВедомость из ВозвратЗаработнойПлаты Цикл
		
		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() тогда
				Сообщить("В строке № "+ СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
			КонецЕсли;
			
			//{[+](фрагмент ДОБАВЛЕН), Рамиль З. 20.06.2023 16:04:15
			Для Каждого СтрокаВедомостьЗарплата Из СтрокаВедомость.Документ.Зарплата Цикл
				
				Проводка				= ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;		
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание		= "Передача факта возврата от структурного подразделения";			
				Проводка.СчетДт			= СчетПоЗп;
				СтрКонтр				= ТабСоб.Найти(СтрокаВедомость.Документ.Организация);
				Проводка.СчетКт	= СчетУчетаРасчетовСоСтруктурнымПодразделением;
				
				Если СтрКонтр <> Неопределено тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,стрконтр.контрагент);
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
								
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаВедомостьЗарплата.Физлицо);
				Проводка.Сумма	= СтрокаВедомостьЗарплата.Сумма;
				
			КонецЦикла;
			
			//}Рамиль З. 20.06.2023 16:04:15


		КонецЕсли;
		
	КонецЦикла;
	
	//Передать проводки по ОПВ
	СчетОПВ = планысчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
	Для каждого СтрокаВедомость из ВозвратПенсионныхВзносов Цикл
		
		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() тогда
				Сообщить("В строке № "+ СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
			КонецЕсли;
			
			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			Проводка.СчетКт 				= СчетУчетаРасчетовСоСтруктурнымПодразделением;
			СтрКонтр = ТабСоб.Найти(СтрокаВедомость.Документ.Организация);
			
			Если СтрКонтр<>Неопределено тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,стрконтр.контрагент);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
			Проводка.СчетДт 				= СчетОПВ; 	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаВедомость.Документ.ВидПлатежа);
			Проводка.Сумма 					= СтрокаВедомость.СуммаВозврата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Передать проводки по СО
	Для каждого СтрокаВедомость из ВозвратСоциальныхОтчислений Цикл
		
			Если СтрокаВедомость.Документ.ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратВзносовОСМС Тогда
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
	        ИначеЕсли СтрокаВедомость.Документ.ВидОперации = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОтчисленийОСМС Тогда
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
			Иначе
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию;
			КонецЕсли;

		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() тогда
				Сообщить("В строке № "+ СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
			КонецЕсли;
			
			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			Проводка.СчетКт 				= СчетУчетаРасчетовСоСтруктурнымПодразделением;
			СтрКонтр = ТабСоб.Найти(СтрокаВедомость.Документ.Организация);
			
			Если СтрКонтр<>Неопределено тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,стрконтр.контрагент);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
			Проводка.СчетДт 				= СчетОПВ; 	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаВедомость.Документ.ВидПлатежа);
			Проводка.Сумма 					= СтрокаВедомость.СуммаВозврата;
			
		КонецЕсли;
	КонецЦикла;
	//-=-=
	
КонецПроцедуры // ДвиженияПоРегистрамРегл

// Процедура выполнет проверку заполненности обязательных реквизитов
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок)
    ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	СтруктураОбязательныхПолейРасчетыУпр=Новый Структура;
	СтруктураОбязательныхПолейРасчетыУпр.Вставить("СчетОрганизации");
	СтруктураОбязательныхПолейРасчетыУпр.Вставить("СуммаДокумента");

	Если Оплачено Тогда
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр, Отказ, Заголовок);
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр, Отказ, Заголовок);
		
		//Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		//	
		//	Если Не Отказ Тогда
		//		ТаблицаПлатежейУпр.ЗаполнитьЗначения(Ложь, "КонтролироватьСуммуЗадолженности");
		//		УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,,Истина);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 	

	
	СтруктураПолей = Новый Структура("Организация");

	СтруктураПолей.Вставить("СчетБанк",       "Не указан счет учета денежных средств");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
 	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;  	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств Тогда

		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет учета.");
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда		
			// проводки по НУ для вида операции "Прочее"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
				СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет налогового учета.");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");

	КонецЕсли;

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

		// Проверим соответствие суммы по документу в целом, и сумм указанных в расшифровке платежа
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
		
		//Проверяем заполнение табличной части 
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ,ДоговорКонтрагента");
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И  ЕстьРасчетыПоКредитам Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;
	        

        		
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);

		// Проверки на логическое соответствие реквизитов
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
			Если НЕ СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда

				//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции реализации иностранной валюты валюта документа должна соответствовать валюте регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда

				//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
				ОбщегоНазначения.ОшибкаПриПроведении("При отражении операции приобретения иностранной валюты валюта документа должна отличаться от валюты регламентированного учета."
								 ,Отказ,Заголовок);

		   КонецЕсли;			
		КонецЕсли;
		
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			//Проверим соответствие организации. указанной в документе и организации указанной в договоре
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
													  Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
													  
			//Сопоставление валюты расчетов по договору и валюты документа
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
				Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					ИЛИ Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда

					//Документ выписан в валюте регламентированного учета, валюта договара на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") не отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции реализации иностранной валюты валюта договора должна соответствовать реализуемой валюте."
									 ,Отказ,Заголовок);

	           КонецЕсли;
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				Если НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) 
					ИЛИ НЕ Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда

					//Документ выписан валюте приобретения, валюта договора на приобретение валюты должна отличаться.
					ОбщегоНазначения.ОшибкаПриПроведении("Валюта договора"+?(НЕ ЗначениеЗаполнено(Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов)," не заполнена","("+Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов+") отличается от валюты регламентированного учета (" + мВалютаРегламентированногоУчета+")")+". 
					                 |При отражении операции приобретения иностранной валюты валюта договора должна соответствовать валюте регламентированного учета."
									 ,Отказ,Заголовок);

	           КонецЕсли;				
			Иначе
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,Платеж.ДоговорКонтрагента,
													 Отказ, Заголовок,"Строка "+Платеж.НомерСтроки+" - ");
	        КонецЕсли;
													  
		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов
				ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
				
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
			НачалоТекстСообщения = "Возврат заработной платы";
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
			НачалоТекстСообщения = "Возврат пенсионных взносов";
		Иначе
			НачалоТекстСообщения = "Возврат социальных отчислений";
		КонецЕсли;
				
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоТекстСообщения + " возможно оформлять только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок);
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Список.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Список.Ссылка) КАК ПредставлениеДок,
		|	Список.Ссылка.Организация КАК Организация,
		|	СУММА(Список.Сумма) КАК Сумма
		|ИЗ
		|	Документ.<<СписочныйДокумент>>.<<ТабличнаяЧастьСписка>> КАК Список
		|ГДЕ
		|	Список.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СпискиНаВозврат.Документ
		|						ИЗ
		|							Документ.ПлатежноеПоручениеВходящее.<<ТабличнаяЧастьППВ>> КАК СпискиНаВозврат
		|						ГДЕ
		|							СпискиНаВозврат.Ссылка = &ТекущийДокумент)
		|СГРУППИРОВАТЬ ПО 
		|	Список.Ссылка,
		|	Список.Ссылка.Организация
		|
		|ИТОГИ СУММА(Сумма) ПО ОБЩИЕ
		|";
		
		// в зависимости от вида операции подставим нужные имена
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ВозвратЗарплатыРаботниковОрганизаций");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "Зарплата");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьППВ>>", "ВозвратЗаработнойПлаты");
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "ОПВВозвратВзносов");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "ПенсионныеВзносы");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьППВ>>", "ВозвратПенсионныхВзносов");
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ВозвратПенсионныхВзносов.Документ.ВидОперации КАК ВидОперации
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ВозвратПенсионныхВзносов
			               |ГДЕ
			               |	ВозвратПенсионныхВзносов.Ссылка = &ТекущийДокумент";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("В табличной части ""Списки на возврат пенсионных взносов"" указаны ведомости с различными видами операций:
													|нельзя выполнять возврат одним документом по разным видам пенсионных взносов (ОПВ и ОППВ, ОПВР).", Отказ, Заголовок);
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<СписочныйДокумент>>", "СОВозвратОтчислений");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьСписка>>", "СоциальныеОтчисления");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<<ТабличнаяЧастьППВ>>", "ВозвратСоциальныхОтчислений");
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВозвратСоциальныхОтчислений.Документ.ВидОперации КАК ВидОперации
			|ИЗ
			|	Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ВозвратСоциальныхОтчислений
			|ГДЕ
			|	ВозвратСоциальныхОтчислений.Ссылка = &ТекущийДокумент";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("В табличной части ""Списки на возврат взносов и отчислений социального страхования"" указаны ведомости с различными видами операций:
				|нельзя выполнять возврат одним документом по разным видам социального страхования (СО, Отчисления ОСМС, Взносы ОСМС).", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				Если Выборка.Сумма <> СтруктураШапкиДокумента.СуммаДокумента Тогда
					ОбщегоНазначения.ОшибкаПриПроведении("Не совпадает сумма по документу и общая сумма по спискам на возврат либо есть повторяющиеся списочные документы.", Отказ,Заголовок);
				КонецЕсли;
			Иначе
				//Если Выборка.Организация <> СтруктураШапкиДокумента.Организация Тогда
				//	ОбщегоНазначения.ОшибкаПриПроведении("Не организация в документе и в списке на возврат " + Выборка.ПредставлениеДок + ".", Отказ,Заголовок);
				//КонецЕсли; //-=-=				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;


КонецПроцедуры  // ПроверитьЗаполнениеДокумента

// Заполняет счета учета БУ и НУ в документе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()
                           
// Процедура заполняет документ на основании возвратов пенсионных взносов и социальных отчислений
//
Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ОПВВозвратВзносов")) Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Контрагент = Основание.Контрагент;
		Если Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = ВозвратПенсионныхВзносов.Добавить();
		СтрокаСписок.Документ	   = Основание;
		СтрокаСписок.СуммаВозврата = Основание.ПенсионныеВзносы.Итог("Сумма");
		СуммаДокумента			   = СтрокаСписок.СуммаВозврата;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.СОВозвратОтчислений")) Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = ВозвратСоциальныхОтчислений.Добавить();
		СтрокаСписок.Документ	   = Основание;
		СтрокаСписок.СуммаВозврата = Основание.СоциальныеОтчисления.Итог("Сумма");
		СуммаДокумента			   = СтрокаСписок.СуммаВозврата;
	
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратЗарплатыРаботниковОрганизаций")) Тогда
			
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = ВозвратЗаработнойПлаты.Добавить();
		СтрокаСписок.Документ	   = Основание;
		СтрокаСписок.СуммаВозврата = Основание.Зарплата.Итог("Сумма");
		СуммаДокумента			   = СтрокаСписок.СуммаВозврата;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОснованиюРегл

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамОПВ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", 	СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", 				СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", 			ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", 		СтруктураШапкиДокумента.Организация);

	// Список видов платежей, по которым формируются движения по регистру ОПВПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВозвратОПВ.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВозвратОПВ.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ВозвратОПВ
		|		ПО ППВ.Документ = ВозвратОПВ.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ОПВВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ОПВВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОПВВозвратВзносов.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ОПВВозвратВзносов.ФизЛицо
	|		ИНАЧЕ ОПВВозвратВзносов.ФизЛицо.ФизЛицо
	|	КОНЕЦ КАК ФизЛицоБУ,
	|	ОПВВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРасчетыСФондами.Взнос, 0) КАК РасчетыСФондамиВзнос,
	|	ОПВРасчетыСФондами.Регистратор,
	|	ОПВРасчетыСФондами.НомерСтроки,
	|	ЕСТЬNULL(ОПВПодлежитПеречислениюВФонды.Взнос, 0) КАК ПодлежитПеречислениюВзнос,
	|	ОПВПодлежитПеречислениюВФонды.МесяцВыплатыДоходов КАК МесяцВыплатыДоходов";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
		
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
	|		СУММА(ОПВВозвратВзносовПенсионныеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОПВВозвратВзносовПенсионныеВзносы
	|	ГДЕ
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Документ.Ссылка
	|				ИЗ
	|					Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов
	|				ГДЕ
	|					ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ),
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа,
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо) КАК ОПВВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ПО ОПВВозвратВзносов.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И ОПВВозвратВзносов.МесяцИсчисления = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОПВВозвратВзносов.ВидПлатежа = ОПВРасчетыСФондами.ВидПлатежа
	|			И ОПВРасчетыСФондами.Организация = &парамОрганизация
	|			И ОПВРасчетыСФондами.Период МЕЖДУ ОПВВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОПВРасчетыСФондами.ВидДвижения = &парамРасход
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
	|		ПО ОПВВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			И ОПВРасчетыСФондами.ФизЛицо = ОПВПодлежитПеречислениюВФонды.ФизЛицо
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			И ОПВПодлежитПеречислениюВФонды.Организация = &парамОрганизация
	|			И ОПВРасчетыСФондами.Регистратор = ОПВПодлежитПеречислениюВФонды.Регистратор // берем только возвраты по соответствующему регистратору
	|			И ОПВРасчетыСФондами.СтруктурнаяЕдиница = ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница
	|			И ОПВРасчетыСФондами.Налогоплательщик = ОПВПодлежитПеречислениюВФонды.Налогоплательщик
	|			И ОПВПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ОПВПодлежитПеречислениюВФонды.ВидДвижения = &парамРасход";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + МестоРаботыТекст + ") КАК МестоРаботы
		|		ПО ОПВВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВВозвратВзносов.ФизЛицо,
	|	ОПВВозвратВзносов.ВидПлатежа,
	|	ОПВВозвратВзносов.МесяцИсчисления,
	|	ОПВРасчетыСФондами.Период УБЫВ, // считаем, что возвращают самое последнее перечисление ОПВ
	|	ОПВРасчетыСФондами.Регистратор,
	|	ОПВРасчетыСФондами.НомерСтроки, 
	|	ОПВПодлежитПеречислениюВФонды.МесяцВыплатыДоходов УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// подготовим таблицы значений для формирования движений
	Движения.ОПВРасчетыСФондами.мТаблицаДвижений = Движения.ОПВРасчетыСФондами.ВыгрузитьКолонки();
	Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений = Движения.ОПВПодлежитПеречислениюВФонды.ВыгрузитьКолонки();
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
				
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
						
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;					
				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
			
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
				КонецЕсли; 		
			
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат ОПВ за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
				
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ =  ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВ(СчетКт,Дата);		
					
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат ОПВ за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
				
				// движения по регистрам накопления
				ОстатокКВозврату 	= Выборка.Сумма;
				ТекущееФизЛицо 		= Выборка.ФизЛицо;
				ТекущийВидПлатежа 	= Выборка.ВидПлатежа;
				ТекущийПлатежЯвляетсяНалогом = Выборка.ПлатежЯвляетсяНалогом;
				ТекущийМесяцИсчисления = Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
						
					Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
						
						ТекущийРегистратор	= Выборка.Регистратор;
						ТекущийНомерСтроки	= Выборка.НомерСтроки;
						РасчетыСФондамиОстаток = Выборка.РасчетыСФондамиВзнос;
						
						Пока Выборка.Следующий()
								И Выборка.ФизЛицо = ТекущееФизЛицо
								И Выборка.ВидПлатежа = ТекущийВидПлатежа 
								И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
								И Выборка.Регистратор = ТекущийРегистратор
								И Выборка.НомерСтроки = ТекущийНомерСтроки 
								И Выборка.Налогоплательщик <> NULL Цикл
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
								СуммаКВозврату = Выборка.ПодлежитПеречислениюВзнос;
							Иначе
								СуммаКВозврату = Выборка.РасчетыСФондамиВзнос;
							КонецЕсли;
								
							СуммаКВозврату = Мин(СуммаКВозврату, ОстатокКВозврату, РасчетыСФондамиОстаток);
							Если СуммаКВозврату = 0 Тогда
								Продолжить;
							КонецЕсли;
							ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
							РасчетыСФондамиОстаток = РасчетыСФондамиОстаток - СуммаКВозврату;
							
							//////////////////////////////////////
							// ОПВРасчетыСФондами
							
							Движение = Движения.ОПВРасчетыСФондами.мТаблицаДвижений.Добавить();
							
							// Свойства
							Движение.Период 		= СтруктураШапкиДокумента.Дата;
							Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
							
							// Измерения
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
								Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода = Выборка.МесяцИсчисления;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= СтруктураШапкиДокумента.Организация;
							//Остаток списываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.Взнос					= СуммаКВозврату;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							//////////////////////////////////////
							// ОПВПодлежитПеречислениюВФонды
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
								
								// Свойства
								Движение.Период 		= СтруктураШапкиДокумента.Дата;
								Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
									Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
								Движение.МесяцВыплатыДоходов 	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= СтруктураШапкиДокумента.Организация;
								//Остаток списываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос				= СуммаКВозврату;
								
								// Реквизиты
								Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							КонецЕсли;
								
						КонецЦикла;
					
					КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
				Если ОстатокКВозврату <> 0 Тогда
					// невозвращенный остаток ставим на структурную единицу по месту работы

					//////////////////////////////////////
					// ОПВРасчетыСФондами
					
					Движение = Движения.ОПВРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период 		= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода = ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Нераспределенный остаток относим на основное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					//////////////////////////////////////
					// ОПВПодлежитПеречислениюВФонды
					
					Если ТекущийПлатежЯвляетсяНалогом Тогда
					
						Движение = Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
						
						// Свойства
						Движение.Период 		= СтруктураШапкиДокумента.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
						
						// Измерения
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
							Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик 	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
							Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов 	= ТекущийМесяцИсчисления;
						Движение.Организация			= СтруктураШапкиДокумента.Организация;
						// Нераспределенный остаток относим на основное место работы только если используется распределение
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос				= ОстатокКВозврату;
						
						// Реквизиты
						Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// свернем движения и запишем в наборы записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОПВРасчетыСФондами);
	Движения.ОПВРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОПВРасчетыСФондами.Загрузить(Движения.ОПВРасчетыСФондами.мТаблицаДвижений);
	
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ОПВПодлежитПеречислениюВФонды);
	Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ОПВПодлежитПеречислениюВФонды.Загрузить(Движения.ОПВПодлежитПеречислениюВФонды.мТаблицаДвижений);
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции // ДвиженияПоРегистрамОПВ()

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамОПВР(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", СтруктураШапкиДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОПВРВозврат.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ОПВРВозврат.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОПВРВозврат
		|		ПО ППВ.Документ = ОПВРВозврат.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ОПВВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ОПВВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОПВРРасчетыСФондами.Взнос, 0) КАК ОПВРРасчетыСФондамиВзнос";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОПВРРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,		
		|	ВЫБОР
		|		КОГДА НЕ(ОПВРРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОПВРРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления, 
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа КАК ВидПлатежа, 
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
	|		СУММА(ОПВВозвратВзносовПенсионныеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОПВВозвратВзносовПенсионныеВзносы
	|
	|   ГДЕ
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Документ.Ссылка
	|			ИЗ
	|				Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов
	|		
	|			ГДЕ
	|				ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ), 
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа, 
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо) КАК ОПВВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|		ПО ОПВВозвратВзносов.ФизЛицо = ОПВРРасчетыСФондами.ФизЛицо
	|			И ОПВВозвратВзносов.ВидПлатежа = ОПВРРасчетыСФондами.ВидПлатежа
	|			И ОПВВозвратВзносов.МесяцИсчисления = ОПВРРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОПВРРасчетыСФондами.Организация = &парамОрганизация
	|			И ОПВРРасчетыСФондами.Период МЕЖДУ ОПВВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И ОПВРРасчетыСФондами.ВидДвижения = &парамРасход
	|			И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ОПВВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВВозвратВзносов.ФизЛицо,
	|	ОПВВозвратВзносов.ВидПлатежа,
	|	ОПВВозвратВзносов.МесяцИсчисления,
	|	ОПВРРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
		
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;					
				
				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
			
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = СубконтоНалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
				КонецЕсли; 		
			
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицо);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат ОПВР за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
				
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ =  ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВР(СчетКт,Дата);		
					
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицо);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат ОПВР за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
							
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ОПВРРасчетыСФондамиВзнос);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ОПВРРасчетыСФондами
					
					Движение = Движения.ОПВРРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
										
					// Ресурсы
					Движение.Взнос					= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ОПВРРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ДвиженияПоРегистрамОПВР()

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамОППВ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", СтруктураШапкиДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОППВВозврат.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ОППВВозврат.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОППВВозврат
		|		ПО ППВ.Документ = ОППВВозврат.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ОПВВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ОПВВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ОПВВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОППВРасчетыСФондами.Взнос, 0) КАК ОППВРасчетыСФондамиВзнос";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ОППВРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ОППВРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ОППВРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ОППВРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления, 
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа КАК ВидПлатежа, 
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
	|		СУММА(ОПВВозвратВзносовПенсионныеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ОПВВозвратВзносов.ПенсионныеВзносы КАК ОПВВозвратВзносовПенсионныеВзносы
	|
	|   ГДЕ
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Документ.Ссылка
	|			ИЗ
	|				Документ.ПлатежноеПоручениеВходящее.ВозвратПенсионныхВзносов КАК ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов
	|		
	|			ГДЕ
	|				ПлатежноеПоручениеВходящееВозвратПенсионныхВзносов.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ), 
	|		ОПВВозвратВзносовПенсионныеВзносы.Ссылка.ВидПлатежа, 
	|		ОПВВозвратВзносовПенсионныеВзносы.ФизЛицо) КАК ОПВВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ПО ОПВВозвратВзносов.ФизЛицо = ОППВРасчетыСФондами.ФизЛицо
	|			И ОПВВозвратВзносов.ВидПлатежа = ОППВРасчетыСФондами.ВидПлатежа
	|			И ОПВВозвратВзносов.МесяцИсчисления = ОППВРасчетыСФондами.МесяцНалоговогоПериода
	|			И ОППВРасчетыСФондами.Организация = &парамОрганизация
	|			И ОППВРасчетыСФондами.Период МЕЖДУ ОПВВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И ОППВРасчетыСФондами.ВидДвижения = &парамРасход
	|			И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ОПВВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ОПВВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОПВВозвратВзносов.ФизЛицо,
	|	ОПВВозвратВзносов.ВидПлатежа,
	|	ОПВВозвратВзносов.МесяцИсчисления,
	|	ОППВРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;					
				
				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
			
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
				КонецЕсли; 		
			
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицо);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат ОППВ за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
				
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ =  ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВ(СчетКт,Дата);		
					
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицо);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат ОППВ за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
				
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ОППВРасчетыСФондамиВзнос);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ОППВРасчетыСФондами
					
					Движение = Движения.ОППВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
										
					// Ресурсы
					Движение.Взнос					= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ОППВРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецФункции // ДвиженияПоРегистрамОППВ()

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамСО(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", СтруктураШапкиДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СОВозврат.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СОВозврат.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК СОВозврат
		|		ПО ППВ.Документ = СОВозврат.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОВозвратОтчислений.МесяцИсчисления КАК МесяцИсчисления,
	|	СОВозвратОтчислений.ВидПлатежа КАК ВидПлатежа,
	|	СОВозвратОтчислений.ФизЛицо КАК ФизЛицо,
	|	СОВозвратОтчислений.Сумма КАК Сумма,
	|	ЕСТЬNULL(СОРасчетыСФондами.Отчисление, 0) КАК СОРасчетыСФондамиОтчисление";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (СОРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (СОРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (СОРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА СОРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидПлатежа КАК ВидПлатежа, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
	|		СУММА(СОВозвратОтчисленийСоциальныеОтчисления.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК СОВозвратОтчисленийСоциальныеОтчисления
	|
	|   ГДЕ
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Документ.Ссылка
	|			ИЗ
	|				Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений
	|		
	|			ГДЕ
	|				ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ), 
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидПлатежа, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо) КАК СОВозвратОтчислений
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ПО СОВозвратОтчислений.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И СОВозвратОтчислений.ВидПлатежа = СОРасчетыСФондами.ВидПлатежа
	|			И СОВозвратОтчислений.МесяцИсчисления = СОРасчетыСФондами.МесяцНалоговогоПериода
	|			И СОРасчетыСФондами.Организация = &парамОрганизация
	|			И СОРасчетыСФондами.Период МЕЖДУ СОВозвратОтчислений.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И СОРасчетыСФондами.ВидДвижения = &парамРасход
	|			И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + МестоРаботыТекст + ") КАК МестоРаботы
		|		ПО СОВозвратОтчислений.ФизЛицо = МестоРаботы.ФизЛицо
		|			И СОВозвратОтчислений.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СОВозвратОтчислений.ФизЛицо,
	|	СОВозвратОтчислений.ВидПлатежа,
	|	СОВозвратОтчислений.МесяцИсчисления,
	|	СОРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоСоциальномуСтрахованию	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// По регистру бухгалтерии - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
				
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
				КонецЕсли; 		
				
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат СО за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
					
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУСО(СчетКт, Дата);
								
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат СО за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
					
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.СОРасчетыСФондамиОтчисление);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// СОРасчетыСФондами
					
					Движение = Движения.СОРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					
					// Ресурсы
					Движение.Отчисление				= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.СОРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Отчисление				= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // СформироватьЗапросПоВозвратуСО()

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамООСМС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", СтруктураШапкиДокумента.Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СОВозврат.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(СОВозврат.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК СОВозврат
		|		ПО ППВ.Документ = СОВозврат.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОВозвратОтчислений.МесяцИсчисления КАК МесяцИсчисления,
	|	СОВозвратОтчислений.ВидПлатежа КАК ВидПлатежа,
	|	СОВозвратОтчислений.ФизЛицо КАК ФизЛицо,
	|	СОВозвратОтчислений.Сумма КАК Сумма,
	|	ЕСТЬNULL(ООСМСРасчетыСФондами.Отчисление, 0) КАК ООСМСРасчетыСФондамиОтчисление";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (ООСМСРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (ООСМСРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ООСМСРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ООСМСРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
	
		Запрос.Текст = Запрос.Текст + ", 
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидПлатежа КАК ВидПлатежа, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
	|		СУММА(СОВозвратОтчисленийСоциальныеОтчисления.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК СОВозвратОтчисленийСоциальныеОтчисления
	|
	|   ГДЕ
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Документ.Ссылка
	|			ИЗ
	|				Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений
	|		
	|			ГДЕ
	|				ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ), 
	|		СОВозвратОтчисленийСоциальныеОтчисления.Ссылка.ВидПлатежа, 
	|		СОВозвратОтчисленийСоциальныеОтчисления.ФизЛицо) КАК СОВозвратОтчислений
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|		ПО СОВозвратОтчислений.ФизЛицо = ООСМСРасчетыСФондами.ФизЛицо
	|			И СОВозвратОтчислений.ВидПлатежа = ООСМСРасчетыСФондами.ВидПлатежа
	|			И СОВозвратОтчислений.МесяцИсчисления = ООСМСРасчетыСФондами.МесяцНалоговогоПериода
	|			И ООСМСРасчетыСФондами.Организация = &парамОрганизация
	|			И ООСМСРасчетыСФондами.Период МЕЖДУ СОВозвратОтчислений.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И ООСМСРасчетыСФондами.ВидДвижения = &парамРасход
	|			И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО СОВозвратОтчислений.ФизЛицо = МестоРаботы.ФизЛицо
		|			И СОВозвратОтчислений.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СОВозвратОтчислений.ФизЛицо,
	|	СОВозвратОтчислений.ВидПлатежа,
	|	СОВозвратОтчислений.МесяцИсчисления,
	|	ООСМСРасчетыСФондами.Период УБЫВ // считаем, что возвращают наиболее поздние платежи
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоСоциальномуСтрахованию	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл

		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				// По регистру бухгалтерии - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
				
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
				КонецЕсли; 		
				
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат отчислений ОСМС за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
					
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУООСМС(СчетКт, Дата);
								
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.ФизЛицо);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат отчислений ОСМС за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
					
				// по регистрам накопления
				ОстатокКВозврату 		= Выборка.Сумма;
				ТекущееФизЛицо	 		= Выборка.ФизЛицо;
				ТекущийМесяцИсчисления	= Выборка.МесяцИсчисления;
				ТекущийВидПлатежа		= Выборка.ВидПлатежа;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.Следующий()
						И Выборка.ФизЛицо = ТекущееФизЛицо
						И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
						И Выборка.ВидПлатежа = ТекущийВидПлатежа
						И Выборка.Налогоплательщик <> NULL Цикл
						
					СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.ООСМСРасчетыСФондамиОтчисление);
					ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
					
					Если СуммаКВозврату = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					//////////////////////////////////
					// ООСМСРасчетыСФондами
					
					Движение = Движения.ООСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= Выборка.ФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Движение.СтруктурнаяЕдиница	= Выборка.СтруктурнаяЕдиница;
						Движение.Налогоплательщик	= Выборка.Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
					Движение.ВидПлатежа				= Выборка.ВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Остатки всегда списываем по подразделениям, чтобы не было зависания остатков
					Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
					
					// Ресурсы
					Движение.Отчисление				= СуммаКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
						
				КонецЦикла;
			
				Если ОстатокКВозврату <> 0 Тогда
				    // возвращенный нераспределенный остаток относим на структурную единицу по месту работы

					Движение = Движения.ООСМСРасчетыСФондами.Добавить();
					
					// Свойства
					Движение.Период			= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					//Нераспределенные остатки относим на оснровное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Отчисление				= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // СформироватьЗапросПоВозвратуООСМС()

// Формирует запрос по документам табличной части
//
Функция ДвиженияПоРегистрамВОСМС(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
    	
	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", 	СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("парамДата", 				СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", 			ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", 		СтруктураШапкиДокумента.Организация);

	// Список видов платежей, по которым формируются движения по регистру ВОСМСПодлежитПеречислениюВФонды
	СписокВидовПлатежей = Новый СписокЗначений;
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам  Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВозвратВОСМС.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ВозвратВОСМС.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ППВ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК ВозвратВОСМС
		|		ПО ППВ.Документ = ВозвратВОСМС.Ссылка
		|ГДЕ
		|	ППВ.Ссылка = &парамДокументСсылка
		|";
	
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВОСМСВозвратВзносов.МесяцИсчисления КАК МесяцИсчисления,
	|	ВОСМСВозвратВзносов.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ВОСМСВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЯвляетсяНалогом,
	|	ВОСМСВозвратВзносов.ФизЛицо КАК ФизЛицо,
	|	ВОСМСВозвратВзносов.ФизЛицоБУ КАК ФизЛицоБУ,
	|	ВОСМСВозвратВзносов.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондами.Взнос, 0) КАК РасчетыСФондамиВзнос,
	|	ВОСМСРасчетыСФондами.Регистратор,
	|	ВОСМСРасчетыСФондами.НомерСтроки,
	|	ЕСТЬNULL(ВОСМСПодлежитПеречислениюВФонды.Взнос, 0) КАК ПодлежитПеречислениюВзнос,
	|	ВОСМСПодлежитПеречислениюВФонды.МесяцВыплатыДоходов КАК МесяцВыплатыДоходов";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.ПодразделениеОрганизации
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ(ВОСМСРасчетыСФондами.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА ВОСМСРасчетыСФондами.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	
	Иначе
		
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ВОСМСВозвратВзносовСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
	|		ВОСМСВозвратВзносовСоциальныеОтчисления.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|		ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо КАК ФизЛицо,
	|		ВЫБОР
	|			КОГДА ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо
	|			ИНАЧЕ ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо.ФизЛицо
	|		КОНЕЦ КАК ФизЛицоБУ,
	|		СУММА(ВОСМСВозвратВзносовСоциальныеОтчисления.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.СОВозвратОтчислений.СоциальныеОтчисления КАК ВОСМСВозвратВзносовСоциальныеОтчисления
	|	ГДЕ
	|		ВОСМСВозвратВзносовСоциальныеОтчисления.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Документ.Ссылка
	|				ИЗ
	|					Документ.ПлатежноеПоручениеВходящее.ВозвратСоциальныхОтчислений КАК ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений
	|				ГДЕ
	|					ПлатежноеПоручениеВходящееВозвратСоциальныхОтчислений.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ВОСМСВозвратВзносовСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ),
	|		ВОСМСВозвратВзносовСоциальныеОтчисления.Ссылка.ВидПлатежа,
	|		ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо,
	|		ВЫБОР
	|			КОГДА ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				ТОГДА ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо
	|			ИНАЧЕ ВОСМСВозвратВзносовСоциальныеОтчисления.ФизЛицо.ФизЛицо
	|		КОНЕЦ) КАК ВОСМСВозвратВзносов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ПО ВОСМСВозвратВзносов.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
	|			И ВОСМСВозвратВзносов.МесяцИсчисления = ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|			И ВОСМСВозвратВзносов.ВидПлатежа = ВОСМСРасчетыСФондами.ВидПлатежа
	|			И ВОСМСРасчетыСФондами.Организация = &парамОрганизация
	|			И ВОСМСРасчетыСФондами.Период МЕЖДУ ВОСМСВозвратВзносов.МесяцИсчисления И КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|			И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ВОСМСРасчетыСФондами.ВидДвижения = &парамРасход
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
	|		ПО ВОСМСВозвратВзносов.ВидПлатежа В (&СписокВидовПлатежей)
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ВОСМСПодлежитПеречислениюВФонды.ФизЛицо
	|			И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода = ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода
	|			И ВОСМСПодлежитПеречислениюВФонды.Организация = &парамОрганизация
	|			И ВОСМСРасчетыСФондами.Регистратор = ВОСМСПодлежитПеречислениюВФонды.Регистратор // берем только возвраты по соответствующему регистратору
	|			И ВОСМСРасчетыСФондами.СтруктурнаяЕдиница = ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница
	|			И ВОСМСРасчетыСФондами.Налогоплательщик = ВОСМСПодлежитПеречислениюВФонды.Налогоплательщик
	|			И ВОСМСПодлежитПеречислениюВФонды.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|			И ВОСМСПодлежитПеречислениюВФонды.ВидДвижения = &парамРасход";

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ВОСМСВозвратВзносов.ФизЛицо = МестоРаботы.ФизЛицо
		|			И ВОСМСВозвратВзносов.МесяцИсчисления = МестоРаботы.Период";
	
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВОСМСВозвратВзносов.ФизЛицо,
	|	ВОСМСВозвратВзносов.ФизЛицоБУ,
	|	ВОСМСВозвратВзносов.ВидПлатежа,
	|	ВОСМСВозвратВзносов.МесяцИсчисления,
	|	ВОСМСРасчетыСФондами.Период УБЫВ, // считаем, что возвращают самое последнее перечисление ВОСМС
	|	ВОСМСРасчетыСФондами.Регистратор,
	|	ВОСМСРасчетыСФондами.НомерСтроки, 
	|	ВОСМСПодлежитПеречислениюВФонды.МесяцВыплатыДоходов УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	// подготовим таблицы значений для формирования движений
	Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений = Движения.ВОСМСРасчетыСФондами.ВыгрузитьКолонки();
	Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений = Движения.ВОСМСПодлежитПеречислениюВФонды.ВыгрузитьКолонки();
	
	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		
		ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
				
		Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
		
			Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
				
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;					
				
				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Типовой" - возвраты взносов по работникам из фондов
				Проводка = Движения.Типовой.Добавить();
			
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= Выборка.Сумма;
				КонецЕсли;
				
				СчетКт = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
					СчетКт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
				КонецЕсли; 		
			
				Проводка.СчетКт			= СчетКт;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);
				
				Проводка.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				Проводка.Содержание		= "Возврат взносов ОСМС за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				////////////////////////////////////////////////////////////////////////////
				// По регистру бухгалтерии "Налоговый" - возвраты взносов по работникам из фондов
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					Проводка = Движения.Налоговый.Добавить();
				
					// Свойства
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства"			 , СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					СчетКтНУ =  ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВОСМС(СчетКт,Дата);		
					
					Проводка.СчетКт			= СчетКтНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);
					
					Проводка.Сумма			= Выборка.Сумма;
					
					// Реквизиты
					Проводка.Содержание		= "Возврат взносов ОСМС за "+Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'");
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
				
				// движения по регистрам накопления
				ОстатокКВозврату 	= Выборка.Сумма;
				ТекущееФизЛицо 		= Выборка.ФизЛицо;
				ТекущийВидПлатежа 	= Выборка.ВидПлатежа;
				ТекущийПлатежЯвляетсяНалогом = Выборка.ПлатежЯвляетсяНалогом;
				ТекущийМесяцИсчисления = Выборка.МесяцИсчисления;
				СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
				ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
						
					Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
						
						ТекущийРегистратор	= Выборка.Регистратор;
						ТекущийНомерСтроки	= Выборка.НомерСтроки;
						РасчетыСФондамиОстаток = Выборка.РасчетыСФондамиВзнос;
						
						Пока Выборка.Следующий()
								И Выборка.ФизЛицо = ТекущееФизЛицо
								И Выборка.ВидПлатежа = ТекущийВидПлатежа 
								И Выборка.МесяцИсчисления = ТекущийМесяцИсчисления
								И Выборка.Регистратор = ТекущийРегистратор
								И Выборка.НомерСтроки = ТекущийНомерСтроки 
								И Выборка.Налогоплательщик <> NULL Цикл
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
								СуммаКВозврату = Выборка.ПодлежитПеречислениюВзнос;
							Иначе
								СуммаКВозврату = Выборка.РасчетыСФондамиВзнос;
							КонецЕсли;
								
							СуммаКВозврату = Мин(СуммаКВозврату, ОстатокКВозврату, РасчетыСФондамиОстаток);
							Если СуммаКВозврату = 0 Тогда
								Продолжить;
							КонецЕсли;
							ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
							РасчетыСФондамиОстаток = РасчетыСФондамиОстаток - СуммаКВозврату;
							
							//////////////////////////////////////
							// ВОСМСРасчетыСФондами
							
							Движение = Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.Добавить();
							
							// Свойства
							Движение.Период 		= СтруктураШапкиДокумента.Дата;
							Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
							
							// Измерения
							Движение.ФизЛицо		= Выборка.ФизЛицо;
							Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
								Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
								Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
							Иначе
								Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
								Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
							КонецЕсли;
							Движение.МесяцНалоговогоПериода = Выборка.МесяцИсчисления;
							Движение.ВидПлатежа				= Выборка.ВидПлатежа;
							Движение.Организация			= СтруктураШапкиДокумента.Организация;
							//Остаток списываем всегда чтобы не было зависания остатков
							Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
							
							// Ресурсы
							Движение.Взнос					= СуммаКВозврату;
							
							// Реквизиты
							Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							//////////////////////////////////////
							// ВОСМСПодлежитПеречислениюВФонды
							
							Если ТекущийПлатежЯвляетсяНалогом Тогда
							
								Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
								
								// Свойства
								Движение.Период 		= СтруктураШапкиДокумента.Дата;
								Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
								
								// Измерения
								Движение.ФизЛицо		= Выборка.ФизЛицо;
								Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
									Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
									Движение.Налогоплательщик 	= Выборка.Налогоплательщик;
								Иначе
									Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
									Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
								КонецЕсли;
								Движение.МесяцНалоговогоПериода	= Выборка.МесяцИсчисления;
								Движение.МесяцВыплатыДоходов 	= ?(Выборка.МесяцВыплатыДоходов <> NULL, Выборка.МесяцВыплатыДоходов, Выборка.МесяцИсчисления);
								Движение.Организация			= СтруктураШапкиДокумента.Организация;
								//Остаток списываем всегда чтобы не было зависания остатков
								Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
								
								// Ресурсы
								Движение.Взнос				= СуммаКВозврату;
								
								// Реквизиты
								Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
							
							КонецЕсли;
								
						КонецЦикла;
					
					КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
				Если ОстатокКВозврату <> 0 Тогда
					// невозвращенный остаток ставим на структурную единицу по месту работы

					//////////////////////////////////////
					// ВОСМСРасчетыСФондами
					
					Движение = Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.Добавить();
					
					// Свойства
					Движение.Период 		= СтруктураШапкиДокумента.Дата;
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ФизЛицо		= ТекущееФизЛицо;
					Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
						Налогоплательщик			= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																									СтруктураШапкиДокумента.Организация,
																									ИсчислениеНалоговСтруктурныхЕдиниц,
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
						Движение.Налогоплательщик 	= Налогоплательщик;
					Иначе
						Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
						Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					КонецЕсли;
					Движение.МесяцНалоговогоПериода = ТекущийМесяцИсчисления;
					Движение.ВидПлатежа				= ТекущийВидПлатежа;
					Движение.Организация			= СтруктураШапкиДокумента.Организация;
					// Нераспределенный остаток относим на основное место работы только если используется распределение
					Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
						Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
					КонецЕсли;
					
					// Ресурсы
					Движение.Взнос					= ОстатокКВозврату;
					
					// Реквизиты
					Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					//////////////////////////////////////
					// ВОСМСПодлежитПеречислениюВФонды
					
					Если ТекущийПлатежЯвляетсяНалогом Тогда
					
						Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.Добавить();
						
						// Свойства
						Движение.Период 		= СтруктураШапкиДокумента.Дата;
						Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
						
						// Измерения
						Движение.ФизЛицо		= ТекущееФизЛицо;
						Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам  Тогда
							Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
							Движение.Налогоплательщик 	= Налогоплательщик;
						Иначе
							Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
							Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
						КонецЕсли;
						Движение.МесяцНалоговогоПериода	= ТекущийМесяцИсчисления;
						Движение.МесяцВыплатыДоходов 	= ТекущийМесяцИсчисления;
						Движение.Организация			= СтруктураШапкиДокумента.Организация;
						// Нераспределенный остаток относим на основное место работы только если используется распределение
						Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
							Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
						КонецЕсли;
						
						// Ресурсы
						Движение.Взнос				= ОстатокКВозврату;
						
						// Реквизиты
						Движение.ВидСтроки			= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("МесяцИсчисления") Цикл
		
		КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ВидПлатежа") Цикл
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	// свернем движения и запишем в наборы записей
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ВОСМСРасчетыСФондами);
	Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ВОСМСРасчетыСФондами.Загрузить(Движения.ВОСМСРасчетыСФондами.мТаблицаДвижений);
	
	ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(Движения.ВОСМСПодлежитПеречислениюВФонды);
	Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	Движения.ВОСМСПодлежитПеречислениюВФонды.Загрузить(Движения.ВОСМСПодлежитПеречислениюВФонды.мТаблицаДвижений);
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		
		//колонки таблицы значений, которые будут суммироваться
	    СтрокаСуммирование = "Сумма, КоличествоДт, КоличествоКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт";
		
		//колонки таблицы значений, по которым будет выполняться группировка
		СтрокаГруппировка = "Период, Регистратор, Активность, Организация, "+
			"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
			"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
			"Содержание, НомерЖурнала, "+
			"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
			"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
			"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
			"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
			"ВалютаДт, ВалютаКт";

		ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Типовой, СтрокаГруппировка, СтрокаСуммирование);
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			//колонки таблицы значений, которые будут суммироваться
		    СтрокаСуммированиеНУ = "Сумма, КоличествоДт, КоличествоКт";
			
			//колонки таблицы значений, по которым будет выполняться группировка
			СтрокаГруппировкаНУ = "Период, Регистратор, Активность, Организация, "+
				"СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, " + 
				"СчетДт, СчетКт, ВидРегламентнойОперации, МоментВремени, "+
				"Содержание, НомерЖурнала, "+
				"ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, "+
				"СубконтоДт1, СубконтоДт2, СубконтоДт3, "+
				"ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, "+
				"СубконтоКт1, СубконтоКт2, СубконтоКт3,"+
				"ВидУчетаДт, ВидУчетаКт";

			ОбщегоНазначения.СвернутьНаборЗаписейРегистраБухгалтерии(Движения.Налоговый, СтрокаГруппировкаНУ, СтрокаСуммированиеНУ);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции // ДвиженияПоРегистрамВОСМС()

// Проверяет правильность заполнения реквизитов в строке выборки из результата
// запроса по документам возврата ОПВ (СО).
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
//
// Параметры: 
//  ВыборкаПоСтрокамПеречисления - спозиционированная на определеной строке выборка 
//  							   из результата запроса, 
//  Отказ 						 - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВозвратаОПВиСО(ВыборкаПоСтрокамПеречисления, Отказ, Заголовок)

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на возврат присутствуют строки с не указанным физическим лицом!", Отказ, Заголовок);
	КонецЕсли;

	// месяц исчисления
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.МесяцИсчисления) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на возврат присутствуют документы с не заданным месяцем возврата!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиВозврата()

// Формирует запрос по документам табличной части
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПризнаковРапсределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРапсределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамДата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамОрганизация", СтруктураШапкиДокумента.Организация);

	ПериодыФизЛицаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратЗарплаты.ФизЛицо,
	|	ПлатежноеПоручениеВходящее.Ссылка.Дата КАК Период
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.ВозвратЗаработнойПлаты КАК ПлатежноеПоручениеВходящее
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратЗарплатыРаботниковОрганизаций.Зарплата КАК ВозвратЗарплаты
	|		ПО ПлатежноеПоручениеВходящее.Документ = ВозвратЗарплаты.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Ссылка = &парамДокументСсылка
	|";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
	
	КонецЕсли;

	ЕстьХарактерВыплаты = Метаданные.РегистрыНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Реквизиты.Найти("ХарактерВыплаты") <> Неопределено;

	// находим ближайшие предыдущие перечисления зарплаты через банк и сторнируем их 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратЗарплаты.ФизЛицо,
	|	ВозвратЗарплаты.СуммаВозврата,
	|	РанееВыплаченнаяЗарплата.ИмяРегистра,
	|	РанееВыплаченнаяЗарплата.ПериодВзаиморасчетов,
	|	ЕСТЬNULL(РанееВыплаченнаяЗарплата.СуммаВыплаты, 0) КАК СуммаВыплаты,
	|	РанееВыплаченнаяЗарплата.ДатаВыплаты,
	|	РанееВыплаченнаяЗарплата.ХарактерВыплаты";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (РанееВыплаченнаяЗарплата.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (РанееВыплаченнаяЗарплата.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL) 
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (РанееВыплаченнаяЗарплата.Налогоплательщик ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченнаяЗарплата.Налогоплательщик
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК Налогоплательщик";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|   ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВозвратЗарплаты.ФизЛицо КАК ФизЛицо,
	|		СУММА(ВозвратЗарплаты.Сумма) КАК СуммаВозврата
	|	ИЗ
	|		Документ.ВозвратЗарплатыРаботниковОрганизаций.Зарплата КАК ВозвратЗарплаты
	|	ГДЕ
	|		ВозвратЗарплаты.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеВходящееВозвратЗаработнойПлаты.Документ
	|				ИЗ
	|					Документ.ПлатежноеПоручениеВходящее.ВозвратЗаработнойПлаты КАК ПлатежноеПоручениеВходящееВозвратЗаработнойПлаты
	|				ГДЕ
	|					ПлатежноеПоручениеВходящееВозвратЗаработнойПлаты.Ссылка = &парамДокументСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратЗарплаты.ФизЛицо) КАК ВозвратЗарплаты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							1 КАК Приоритет,
	|							""ВзаиморасчетыСРаботникамиОрганизаций"" КАК ИмяРегистра,
	|							ВзаиморасчетыСРаботниками.ФизЛицо,
	|							ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|							ВзаиморасчетыСРаботниками.ПодразделениеОрганизации,
	|							НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|							ВзаиморасчетыСРаботниками.Налогоплательщик,
	|							ВзаиморасчетыСРаботниками.Период КАК ДатаВыплаты,
	|							" + ?(ЕстьХарактерВыплаты, "ВзаиморасчетыСРаботниками.ХарактерВыплаты", "NULL") + " КАК ХарактерВыплаты,
	|							СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов) КАК СуммаВыплаты
	|						ИЗ
	|							РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботниками
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыФизЛицаТекст + ") КАК СписокФизЛиц
	|								ПО ВзаиморасчетыСРаботниками.ФизЛицо = СписокФизЛиц.ФизЛицо
	|						ГДЕ
	|							ВзаиморасчетыСРаботниками.Организация = &парамОрганизация
	|							И ВзаиморасчетыСРаботниками.ВидДвижения = &парамРасход
	|							И ВзаиморасчетыСРаботниками.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|							И ВзаиморасчетыСРаботниками.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|							И ВзаиморасчетыСРаботниками.Период <= КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|						СГРУППИРОВАТЬ ПО
	|							ВзаиморасчетыСРаботниками.ФизЛицо,
	|							ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница,
	|							ВзаиморасчетыСРаботниками.ПодразделениеОрганизации,
	|							НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|							ВзаиморасчетыСРаботниками.Период,
	|							ВзаиморасчетыСРаботниками.Налогоплательщик,
	|							" + ?(ЕстьХарактерВыплаты, "ВзаиморасчетыСРаботниками.ХарактерВыплаты", "NULL") + "
	|
	|						ОБЪЕДИНИТЬ ВСЕ
	|
	|						ВЫБРАТЬ
	|							2 КАК Приоритет,
	|							""ВзаиморасчетыСДепонентамиОрганизаций"" КАК ИмяРегистра,
	|							ВзаиморасчетыСДепонентами.ФизЛицо,
	|							ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|							ВзаиморасчетыСДепонентами.ПодразделениеОрганизации,
	|							НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|							ВзаиморасчетыСДепонентами.Налогоплательщик,
	|							ВзаиморасчетыСДепонентами.Период КАК ДатыВыплаты,
	|							" + ?(ЕстьХарактерВыплаты, "ВзаиморасчетыСДепонентами.ХарактерВыплаты", "NULL") + " КАК ХарактерВыплаты,
	|							СУММА(ВзаиморасчетыСДепонентами.СуммаВзаиморасчетов) КАК СуммаВыплаты
	|						ИЗ
	|							РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций КАК ВзаиморасчетыСДепонентами
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПериодыФизЛицаТекст + ") КАК СписокФизЛиц
	|								ПО ВзаиморасчетыСДепонентами.ФизЛицо = СписокФизЛиц.ФизЛицо
	|						ГДЕ
	|							ВзаиморасчетыСДепонентами.Организация = &парамОрганизация
	|							И ВзаиморасчетыСДепонентами.ВидДвижения = &парамРасход
	|							И ВзаиморасчетыСДепонентами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Перечисление)
	|							И ВзаиморасчетыСДепонентами.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|							И ВзаиморасчетыСДепонентами.Период <= КОНЕЦПЕРИОДА(&парамДата, ДЕНЬ)
	|						СГРУППИРОВАТЬ ПО
	|							ВзаиморасчетыСДепонентами.ФизЛицо,
	|							ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница,
	|							ВзаиморасчетыСДепонентами.ПодразделениеОрганизации,
	|							НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ),
	|							ВзаиморасчетыСДепонентами.Налогоплательщик,
	|							ВзаиморасчетыСДепонентами.Период,
	|							" + ?(ЕстьХарактерВыплаты, "ВзаиморасчетыСДепонентами.ХарактерВыплаты", "NULL") + ") КАК РанееВыплаченнаяЗарплата
	|		ПО ВозвратЗарплаты.ФизЛицо = РанееВыплаченнаяЗарплата.Физлицо";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + МестоРаботыТекст + ") КАК МестоРаботы
		|		ПО  ВозвратЗарплаты.ФизЛицо = МестоРаботы.ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратЗарплаты.ФизЛицо,
	|	РанееВыплаченнаяЗарплата.ДатаВыплаты УБЫВ, // считаем, что возвращают самое последнее перечисление зарплаты
	|	РанееВыплаченнаяЗарплата.Приоритет, // сначала текущие взаиморасчеты, а потом ранее депонированные суммы
	|	РанееВыплаченнаяЗарплата.ПериодВзаиморасчетов УБЫВ // возвращаем наименее просроченные долги
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	СуммаВозвратаТекущихВзаиморасчетовИтог = 0;
	СуммаВозвратаДепонированнойЗарплатыИтог = 0;
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
		ПроверитьЗаполнениеСтрокиВозвратаЗарплаты(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	
		// проводки по бухгалтерскому регистру будут на общие суммы - накопим итоги для них
		СуммаВозвратаТекущихВзаиморасчетов = 0;
		СуммаВозвратаДепонированнойЗарплаты = 0;
	
		ОстатокКВозврату 	= Выборка.СуммаВозврата;
		ФизЛицо 			= Выборка.ФизЛицо;
		СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
		ПодразделениеОрганизацииПоМестуРаботы = Выборка.ПодразделениеОрганизацииПоМестуРаботы;
		
		// обходим все предыдущие перечисления
		Пока Выборка.Следующий() И Выборка.Налогоплательщик <> NULL И ОстатокКВозврату <> 0 Цикл
			
			СуммаКВозврату = Мин(ОстатокКВозврату, Выборка.СуммаВыплаты);
			ОстатокКВозврату = ОстатокКВозврату - СуммаКВозврату;
			
			Если СуммаКВозврату = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРегистра = Выборка.ИмяРегистра;
			Если НЕ ЗначениеЗаполнено(ИмяРегистра) Тогда
				ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций";
			КонецЕсли;
			
			Если ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций" Тогда
				СуммаВозвратаТекущихВзаиморасчетов = СуммаВозвратаТекущихВзаиморасчетов + СуммаКВозврату;
				СуммаВозвратаТекущихВзаиморасчетовИтог = СуммаВозвратаТекущихВзаиморасчетовИтог + СуммаКВозврату;
			Иначе
				СуммаВозвратаДепонированнойЗарплаты = СуммаВозвратаДепонированнойЗарплаты + СуммаКВозврату;
				СуммаВозвратаДепонированнойЗарплатыИтог = СуммаВозвратаДепонированнойЗарплатыИтог + СуммаКВозврату;
			КонецЕсли;
			
			////////////////////////////////////////////////////////
			// ВзаиморасчетыСРаботникамиОрганизаций 
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
				Движение.Налогоплательщик	 = Выборка.Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	 = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов	 = Выборка.ПериодВзаиморасчетов;
			Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
			// Остаток всегда списываем по подразделениям, чтобы не было зависания остатков
			Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	 = - СуммаКВозврату;
			
			// Реквизиты
			Движение.СпособВыплаты			 = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
			Движение.ВидСтроки				 = Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
			Если ЕстьХарактерВыплаты Тогда
				Движение.ХарактерВыплаты	 = Выборка.ХарактерВыплаты;
			КонецЕсли;


			////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= СтруктураШапкиДокумента.Дата; 
			
			// Измерения						
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = Выборка.СтруктурнаяЕдиница;
				Движение.Налогоплательщик	 = Выборка.Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	 = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.МесяцНалоговогоПериода	 = Выборка.ПериодВзаиморасчетов;
			Движение.Организация			 = СтруктураШапкиДокумента.Организация;
			// Остаток всегда списываем по подразделениям, чтобы не было зависания остатков
			Движение.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			
			// Ресурсы
			Движение.СуммаДохода			 = - СуммаКВозврату;
		
		КонецЦикла; // Пока Выборка.Следующий() Цикл
		
		Если ОстатокКВозврату <> 0 Тогда
			// "лишний" вернувшийся остаток ставим на структурное подразделение по месту работы датой возврата
			
			СуммаВозвратаТекущихВзаиморасчетов = СуммаВозвратаТекущихВзаиморасчетов + ОстатокКВозврату;
			СуммаВозвратаТекущихВзаиморасчетовИтог = СуммаВозвратаТекущихВзаиморасчетовИтог + ОстатокКВозврату;
			
			////////////////////////////////////////////////////////
			// ВзаиморасчетыСРаботникамиОрганизаций 
			
			Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период 		= СтруктураШапкиДокумента.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ФизЛицо		= ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Налогоплательщик			 = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																							СтруктураШапкиДокумента.Организация,
																							ИсчислениеНалоговСтруктурныхЕдиниц,
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				Движение.СтруктурнаяЕдиница	 = СтруктурнаяЕдиницаПоМестуРаботы;
				Движение.Налогоплательщик	 = Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	 = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			
			Движение.ПериодВзаиморасчетов	 = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.Организация 			 = СтруктураШапкиДокумента.Организация;
			//Нераспределенный остаток относим на основное место работы только если используется распределение
			Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
			КонецЕсли;
			
			Если УчитыватьВедомостиПредставительств Тогда
				Представительство = СтруктураШапкиДокумента.ДокументОснование.Организация;
				//Представительство = СтруктураШапкиДокумента.Ссылка.СтруктурноеПодразделение;
				Движение.СтруктурнаяЕдиница	 = Представительство;
				Движение.Налогоплательщик	 = Представительство;
				Движение.Организация	     = Представительство;
			КонецЕсли;
			

			// Ресурсы
			Движение.СуммаВзаиморасчетов	 = - ОстатокКВозврату;
			
			// Реквизиты
			Движение.СпособВыплаты			 = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
			Движение.ВидСтроки				 = Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
			Если ЕстьХарактерВыплаты Тогда
				Движение.ХарактерВыплаты	 = Перечисления["ХарактерВыплатыЗарплаты"]["Зарплата"];
			КонецЕсли;


			////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= СтруктураШапкиДокумента.Дата; 
			
			// Измерения						
			Движение.ФизЛицо		= Выборка.ФизЛицо;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
				Движение.СтруктурнаяЕдиница	 = СтруктурнаяЕдиницаПоМестуРаботы;
				Движение.Налогоплательщик	 = Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница	 = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	 = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.МесяцНалоговогоПериода	 = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			Движение.Организация			 = СтруктураШапкиДокумента.Организация;
			//Нераспределенный остаток относим на основное место работы только если используется распределение
			Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
				Движение.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
			КонецЕсли;
			
			Если УчитыватьВедомостиПредставительств Тогда
				Представительство = СтруктураШапкиДокумента.ДокументОснование.Организация;
				Движение.СтруктурнаяЕдиница	 = Представительство;
				Движение.Налогоплательщик	 = Представительство;
				Движение.Организация	     = Представительство;
			КонецЕсли;

			
			// Ресурсы
			Движение.СуммаДохода			 = - ОстатокКВозврату;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////
		// бухгалтерские проводки 
		//
		
		Если ВедетсяУчетПоСотрудникам Тогда
			Если СуммаВозвратаТекущихВзаиморасчетов <> 0 Тогда
				Проводка = Движения.Типовой.Добавить();
					
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаТекущихВзаиморасчетов;
				КонецЕсли;
					
				Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", ФизЛицо);
				    
				// Ресурсы
				Проводка.Сумма			= СуммаВозвратаТекущихВзаиморасчетов;
				    
				// Реквизиты
				Проводка.Содержание		= "Возврат ранее перечисленной зарплаты";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			КонецЕсли;
			
			Если СуммаВозвратаДепонированнойЗарплаты <> 0 Тогда
				Проводка = Движения.Типовой.Добавить();
					
				// Свойства
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
				// Измерения
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
				// Корреспондеция счетов и аналитика
				Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаДепонированнойЗарплаты;
				КонецЕсли;
				
				Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", ФизЛицо);
				    
				// Ресурсы
				Проводка.Сумма			= СуммаВозвратаДепонированнойЗарплаты;
				    
				// Реквизиты
				Проводка.Содержание		= "Возврат ранее перечисленной зарплаты";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				//по налоговому учеу не делится депонированная ли ЗП или нет
				//учитывается вообщем
				СуммаКПроводке = СуммаВозвратаТекущихВзаиморасчетов + СуммаВозвратаДепонированнойЗарплаты;
				Если СуммаКПроводке <> 0 Тогда
					
									
					ПроводкаНУ = Движения.Налоговый.Добавить();
					
					// Свойства
					ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
					
					// Измерения
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
					// Корреспондеция счетов и аналитика
					ПроводкаНУ.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
					ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", ФизЛицо);
					
					// Ресурсы
					ПроводкаНУ.Сумма			= СуммаКПроводке;
					
					// Реквизиты
					ПроводкаНУ.Содержание		= "Возврат ранее перечисленной зарплаты";
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЦикла; // Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
	
	Если НЕ Отказ И НЕ ВедетсяУчетПоСотрудникам Тогда
		
		Если СуммаВозвратаТекущихВзаиморасчетовИтог <> 0 Тогда
			
			Проводка = Движения.Типовой.Добавить();
					
			// Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
			// Измерения
			Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
				// Корреспондеция счетов и аналитика
			Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаТекущихВзаиморасчетовИтог;
			КонецЕсли;
					
			Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
							    
			// Ресурсы
			Проводка.Сумма			= СуммаВозвратаТекущихВзаиморасчетовИтог;
				    
			// Реквизиты
			Проводка.Содержание		= "Возврат ранее перечисленной зарплаты";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
			
		Если СуммаВозвратаДепонированнойЗарплатыИтог <> 0 Тогда
			
			Проводка = Движения.Типовой.Добавить();
					
			// Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
					
			// Измерения
			Проводка.Организация	= СтруктураШапкиДокумента.Организация;
					
			// Корреспондеция счетов и аналитика
			Проводка.СчетДт			= СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт 	= СуммаВозвратаДепонированнойЗарплатыИтог;
			КонецЕсли;
				
			Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
							    
			// Ресурсы
			Проводка.Сумма			= СуммаВозвратаДепонированнойЗарплатыИтог;
				    
			// Реквизиты
			Проводка.Содержание		= "Возврат ранее перечисленной зарплаты";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
			
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			
			//по налоговому учету не делится депонированная ли ЗП или нет
			//учитывается вообщем
			СуммаКПроводке = СуммаВозвратаТекущихВзаиморасчетовИтог + СуммаВозвратаДепонированнойЗарплатыИтог;
			Если СуммаКПроводке <> 0 Тогда
											
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
					
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
				// Корреспондеция счетов и аналитика
				ПроводкаНУ.СчетДт			= СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
					
				ПроводкаНУ.СчетКт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
									
				// Ресурсы
				ПроводкаНУ.Сумма			= СуммаКПроводке;
					
				// Реквизиты
				ПроводкаНУ.Содержание		= "Возврат ранее перечисленной зарплаты";
					
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
					
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецЕсли;
		
КонецФункции // ДвиженияПоЗарплатеРегл()

// Проверяет правильность заполнения реквизитов в строке выборки из результата
// запроса по документам возврата зарплаты.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
//
// Параметры: 
//  ВыборкаПоСтрокамПеречисления - спозиционированная на определеной строке выборка 
//  							   из результата запроса, 
//  Отказ 						 - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВозвратаЗарплаты(ВыборкаПоСтрокамПеречисления, Отказ, Заголовок)

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на возврат присутствуют строки с не указанным физическим лицом!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиВозвратаЗарплаты()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;
	
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);
	КонецЕсли;
	
	ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	Если ВидДокументаОснования = "РеализацияТоваровУслуг"
		или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 	
		или ВидДокументаОснования = "РеализацияУслугПоПереработке" 
		или ВидДокументаОснования = "ПередачаОС" 
		или ВидДокументаОснования = "ПередачаНМА" 
		или ВидДокументаОснования = "ВозвратТоваровПоставщику" 		
		или ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику"  Тогда
			ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		Иначе
			ВидОперации  = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли; 
		
		Контрагент   = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента    = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ВидДокументаОснования = "СчетНаОплатуПокупателю" тогда
			СчетОрганизации = ПараметрыДокументаОснования.СтруктурнаяЕдиница;
		КонецЕсли;
		
		Если Не ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
			
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			Если ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;			
		
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику"  Тогда			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;
		Иначе				
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;		
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
	ИначеЕсли ВидДокументаОснования = "ОПВВозвратВзносов"
		Или ВидДокументаОснования = "СОВозвратОтчислений"
		Или ВидДокументаОснования = "ВозвратЗарплатыРаботниковОрганизаций" Тогда
		
		ЗаполнитьДокументПоОснованиюРегл(Основание);
		
	ИначеЕсли ВидДокументаОснования = "ПлатежноеПоручениеИсходящее" Тогда
		
		Если Основание.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению Тогда
			Сообщить("Для ввода на основании вид операции должен быть ""Оплата структурному подразделению""", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		Запрос = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Организация
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Контрагент = &КонтрагентОрганизации");
		
		Запрос.УстановитьПараметр("КонтрагентОрганизации", Основание.Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			#Если Клиент Тогда
				Сообщить("Нет организации, соответствующей контрагенту документа-основания.", СтатусСообщения.Внимание);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		ОрганизацияДокумента = ВыборкаРезультатов.Организация;
		
		Запрос = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Контрагент
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", Основание.Организация);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ВыборкаРезультатов = Результат.Выбрать();
			ВыборкаРезультатов.Следующий();
			КонтрагентДокумента = ВыборкаРезультатов.Контрагент;
			
		Иначе
			
			КонтрагентДокумента = Справочники.Контрагенты.ПустаяСсылка();
			#Если Клиент Тогда
				Сообщить("Нет контрагента, соответсвтующего организации документа-основания, контрагент не будет заполнен.");
			#КонецЕсли
			
		КонецЕсли;
		
		Организация = ОрганизацияДокумента;		
		
		СтрокаРасшифровкиОснования = Основание.РасшифровкаПлатежа[0];
		
		Если ЗначениеЗаполнено(КонтрагентДокумента) Тогда
			
			Контрагент = КонтрагентДокумента;
			
			ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаРасшифровкиОснования.ДоговорКонтрагента) Тогда
				ПараметрВалюта = СтрокаРасшифровкиОснования.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ПараметрВалюта = Основание.ВалютаДокумента
			КонецЕсли;
			
			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Контрагент.ОсновнойДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(ДоступныйОсновнойДоговорКонтрагента) Тогда
				Если (ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
					(ДоступныйОсновнойДоговорКонтрагента.Организация = Организация) И
					(ДоступныйОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрВалюта) Тогда
					ДоговорКонтрагентаДокумента = ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДоговорКонтрагентаДокумента) Тогда
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
				
				Запрос.УстановитьПараметр("Владелец", Контрагент);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрВалюта);
				
				Результат = Запрос.Выполнить();
				
				Если Не Результат.Пустой() Тогда
					
					ВыборкаРезультатов = Результат.Выбрать();
					ВыборкаРезультатов.Следующий();
					ДоговорКонтрагента = ВыборкаРезультатов.Ссылка;
					
				Иначе
					
					#Если Клиент Тогда
						Сообщить("Нет договора с поставщиком, соответствующего контрагенту, организации и валюте. Будет создан новый договор.");
					#КонецЕсли
					
					ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорКонтрагентаДокумента.Владелец = Контрагент;
					ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(ПараметрВалюта) + ")"; 
					ДоговорКонтрагентаДокумента.Организация = Организация;
					ДоговорКонтрагентаДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов = ПараметрВалюта;
					ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорКонтрагентаДокумента.Записать();
					
					ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// очистим контрагента, так как он может заполнится при заполнении шапки на основании
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;
		
		НоваяСтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРасшифровки.СуммаПлатежа = СтрокаРасшифровкиОснования.СуммаПлатежа;
		НоваяСтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровкиОснования.СуммаВзаиморасчетов;
		НоваяСтрокаРасшифровки.КурсВзаиморасчетов = СтрокаРасшифровкиОснования.КурсВзаиморасчетов;
		НоваяСтрокаРасшифровки.КратностьВзаиморасчетов = СтрокаРасшифровкиОснования.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			НоваяСтрокаРасшифровки.ДоговорКонтрагента = ДоговорКонтрагента;
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			НоваяСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;	
		КонецЕсли;
		
		СуммаДокумента = Основание.СуммаДокумента;
		СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения;
		
		ДатаВходящегоДокумента = Основание.Дата;
		НомерВходящегоДокумента = Основание.Номер;
		
	ИначеЕсли ВидДокументаОснования = "ОплатаОтПокупателяПлатежнойКартой" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		Контрагент = Основание.Эквайрер;
		ДоговорКонтрагента = Основание.ДоговорВзаиморасчетовЭквайрера;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		НоваяСтрокаПлатежа = РасшифровкаПлатежа.Добавить();
		
		НоваяСтрокаПлатежа.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			НоваяСтрокаПлатежа.Сделка = Основание;
		КонецЕсли;

		НоваяСтрокаПлатежа.КурсВзаиморасчетов = КурсДокумента;
		НоваяСтрокаПлатежа.КратностьВзаиморасчетов = КратностьДокумента;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			НоваяСтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;	
		КонецЕсли;
		
		Если Основание.РасшифровкаПлатежа.Количество() = 1 Тогда
			НоваяСтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		НоваяСтрокаПлатежа.СуммаПлатежа = Основание.СуммаДокумента - Основание.СуммаТорговойУступки;
        НоваяСтрокаПлатежа.СуммаВзаиморасчетов = НоваяСтрокаПлатежа.СуммаПлатежа;
		ПроверкаКурсовВалют(НоваяСтрокаПлатежа);
		НоваяСтрокаПлатежа.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ПересчитатьСуммуНДС(НоваяСтрокаПлатежа);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

		СчетБанк = ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаРегл();	
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный             = глЗначениеПеременной("глТекущийПользователь");
	
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ден_ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		Если (НЕ Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные) Тогда
			Сообщить("Документом планировалось поступление наличных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		
		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации, ВидОперацииПоступление);
		
		Организация = Основание.Организация;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			СчетОрганизации = Основание.БанковскийСчетКасса;
		ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
			СчетОрганизации= Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Ответственный     = Основание.Ответственный;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Контрагент = Основание.Контрагент;
		
		ПользовательДокумента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательДокумента,"ОсновнаяСтавкаНДС");
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоПланируемомуПоступлениюУпр(
		РасшифровкаПлатежа,
		Основание,
		СтавкаНДС, 
		ВалютаДокумента,
		КурсДокумента,
		КратностьДокумента,
		ВидОперации,
		Подразделение);
		
		Если Основание.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств И Основание.РасшифровкаПлатежа.Количество()>0 Тогда
            СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтруктурноеПодразделениеПолучатель = Основание.СтруктурноеПодразделение;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);	
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	Если ПередаватьЗадолженностьПоТрехстороннемуСоглашению Тогда 
		Если КонтрагентПоТрехстороннемуСоглашению.Пустая() ИЛИ ДоговорКонтрагентаПоТрехстороннемуСоглашения.Пустая() Тогда
			Отказ = Истина;
			Сообщить("Галочка передавать по трехстороннему соглашению установлена, не заполнены поля контрагент или договор по трехстороннему соглашению");
		КонецЕсли;
	КонецЕсли;

	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
 	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", РасшифровкаПлатежа[0].ДоговорКонтрагента);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
		// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
		ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
		ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
		СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете

	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом",  ВедениеУчетаВременныхРазницБалансовымМетодом);

	 //так как для всех операций, кроме одной используется только одно поле дя выбора структурного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеПолучатель);

	//Бит источники финансирования 
	СтруктураШапкиДокумента.Вставить("ИсточникФинансирования", ИсточникФинансирования); 
	//Бит источники финансирования 
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	ДатаДвижений = Дата;
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежноеПоручениеВходящее");	
	
	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда 

		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;

	КонецЕсли;

	// Движения по документу
	Если НЕ Отказ Тогда		
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если НЕ Отказ И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения
              
// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
		
	Если Не ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель;
	КонецЕсли;

	//Если НЕ Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	//	ТекстСообщения = "Проведение документа возможно только после установки флага ""Платежное поручение оплачено"".
	//	|Документ будет записан без проведения."; 
	//	
	//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Информация);
	//	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	//КонецЕсли;	
КонецПроцедуры

//Формирует движения по управленческим регистрам 
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;

	ДвиженияПоСтатьям 			  = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву 	   		  = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,СтатьяДвиженияДенежныхСредств,ВестиПоДокументамРасчетовСКонтрагентом,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
		
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа, СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
	
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к получению"
		НаборДвиженийПолучение   = Движения.ден_ДенежныеСредстваКПолучению;
		ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
			
		СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											Константы.ВалютаУправленческогоУчета.Получить(), 
											СтрокаКурсыВалют.КурсДокумента,
											СтрокаКурсыВалют.КурсУпрУчета, 
											СтрокаКурсыВалют.КратностьДокумента,
											СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		СтрокаДвиженийОстатки.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
		
		НаборДвиженийОстатки.мПериод              = ДатаДвижений;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ден_ДенежныеСредства.ВыполнитьПриход();
		
		Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
			// По регистру "Денежные средства к получению"
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
				СтрокаДвиженийПолучение.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвиженийПолучение.Организация 		= Организация;
				СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийПолучение.ДокументПолучения    = Ссылка;
				СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийПолучение.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
		
			НаборДвиженийПолучение.мПериод              = ДатаДвижений;
			НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
		КонецЕсли;
		Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
			
			// Резервируем денежные средства, если приход планировался и по нему размещались заявки
			Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
				|ИЗ
				|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументПланирования=&ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДокументРезервированияДатаРасхода";
				
				Запрос.УстановитьПараметр("ДокументПланирования",СтрокаРезерв.ДокументПланированияПлатежа);
				
				Результат=Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					
					СуммаРезерв=СтрокаРезерв.СуммаПлатежа;
					
					НаборРазмещение=Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
					ТаблицаРазмещение=НаборРазмещение.Выгрузить();
					ТаблицаРазмещение.Очистить();
					
					НаборРезерв=Движения.ден_ДенежныеСредстваВРезерве;
					ТаблицаРезерв=НаборРезерв.Выгрузить();
					ТаблицаРезерв.Очистить();
					
					Выборка=Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.СуммаОстаток>=СуммаРезерв Тогда
							
							СтрокаРазмещение=ТаблицаРазмещение.Добавить();
							СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
							СтрокаРазмещение.Сумма=СуммаРезерв;
							
							СтрокаРезерв=ТаблицаРезерв.Добавить();
							СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
							СтрокаРезерв.Организация=Организация;
							СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Безналичные;
							СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
							СтрокаРезерв.Сумма=СуммаРезерв;
							СтрокаРезерв.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
							
							Прервать;
							
						Иначе
							
							СтрокаРазмещение=ТаблицаРазмещение.Добавить();
							СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
							СтрокаРазмещение.Сумма=Выборка.СуммаОстаток;
							
							СтрокаРезерв=ТаблицаРезерв.Добавить();
							СтрокаРезерв.БанковскийСчетКасса=СчетОрганизации;
							СтрокаРезерв.Организация=Организация;
							СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Безналичные;
							СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
							СтрокаРезерв.Сумма=Выборка.СуммаОстаток;
							СтрокаРезерв.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
							
							СуммаРезерв=СуммаРезерв-Выборка.СуммаОстаток;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НаборРазмещение.мПериод=ДатаДвижений;
					НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
					Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
					
					НаборРезерв.мПериод=ДатаДвижений;
					НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
					Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	// По регистру "Денежные средства к получению"
	НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКПолучению;
	ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
	ТаблицаДвиженийДС.Очистить();

	Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
		
		СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
		СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийДС.Организация = Организация;
		СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
		СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
		СтрокаДвиженийДС.ДокументПолучения   = Ссылка;
		СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
		СтрокаДвиженийДС.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
		
	КонецЦикла;

	НаборДвиженийДС.мПериод              = ?(Оплачено,Мин(ДатаДвижений,Дата),Дата);
	НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
	Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
	
	// По регистру "Планируемые поступления денежных средств"
	НаборДвиженийПлан  = Движения.ден_ПланируемыеПоступленияДенежныхСредств;
	ТаблицаДвиженийПлан = НаборДвиженийПлан.Выгрузить();
	ТаблицаДвиженийПлан.Очистить();
	
	// По строкам табличной части
	Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
		
		ЕстьПланПоступление=Ложь;
		ЕстьРасчеты=Ложь;
		
		Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
			
			СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
			СтрокаДвиженийЗаявки = ТаблицаДвиженийПлан.Добавить();
			СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
			СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
			СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
			СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
			СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
			СтрокаДвиженийЗаявки.Организация					= Организация;
			СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
			СтрокаДвиженийЗаявки.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
			Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаДвиженийЗаявки.Сделка = ?(Не ЗначениеЗаполнено(СтрокаПлатеж.Сделка), Ссылка, СтрокаПлатеж.Сделка);
			КонецЕсли;
			
			ЕстьПланПоступление = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвиженийПлан.Количество()>0 Тогда
		
		НаборДвиженийПлан.мПериод          = Дата;
		НаборДвиженийПлан.мТаблицаДвижений = ТаблицаДвиженийПлан;
		Движения.ден_ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
		
	КонецЕсли;
					
	Если Оплачено Тогда  // Проводим по фактическим взаиморасчетам
		
		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений. 
		
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
		
		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
		
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,ДатаДвижений,"ДенежныеСредстваПоступление",Ссылка);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
		
		НаборДвижений.мПериод            = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
