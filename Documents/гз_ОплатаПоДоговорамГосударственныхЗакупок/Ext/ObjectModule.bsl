////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
 
// хранит заголовок
Перем Заголовок; // заголовок
//хранит соответствие реквизитов шапки реквизитам справочника
Перем мСоответствиеРеквизитовШапкиРеквизитамСправочникаДоговоров Экспорт; // (Регл)
//хранит соответствие реквизитов шапки ресурсам 
Перем мСоответствиеРеквизитовШапкиРесурсамРегистраДоговоров Экспорт; // (Регл)
//хранит соответствие реквизитов товаров ресурсам 
Перем мСоответствиеРеквизитовТЧТоваровУслугРесурсамРегистраТоваровУслуг Экспорт; // (Регл)
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
 
// Процедура выполняет движения по регистрам 
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ)
 Движение 						= Движения.гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупок.Добавить();
 Движение.Регистратор 			= Ссылка;
 Движение.Период 				= ДатаОплаты;
 Движение.Организация 			= Организация;
 Движение.ДоговорКонтрагента 	= ДоговорКонтрагента;
 Движение.Сумма					= ?(ВозвратОтПоставщика, - СуммаДокумента,СуммаДокумента);
КонецПроцедуры //ДвиженияПоРегистрам()
 
// Процедура проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

 // Укажем, что надо проверить:
 СтруктураОбязательныхПолей = Новый Структура("Организация,ДоговорКонтрагента,Год,Контрагент,ДатаОплаты");
 // Теперь позовем общую процедуру проверки.
 гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
 
КонецПроцедуры // ПроверитьЗаполнениеШапки()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
 
// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
 
 Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
 
 // 1 - сначала заполним элемент справочника ДоговорКонтрагента
 
 // Сформируем структуру реквизитов шапки документа
 СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
 
 // Проверим правильность заполнения шапки документа
 ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
 
 Если НЕ гз_ОбщегоНазначения.ЭтоДоговорГосЗакупок(ДоговорКонтрагента) Тогда 
	 Сообщить("Выбранный договор не является договором по государственным закупкам!");
	 Отказ = Истина;
 КонецЕсли;
 
 // Если шапка заполнена некорректно, то договор создавать не будем, а проводки выполнять - тем более
 Если Отказ Тогда
	 Возврат;
 КонецЕсли; 
 
 // Проверка ручной корректировки
 Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок,	ЭтотОбъект) Тогда 
	 Возврат;
 КонецЕсли;
 
 ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ);
 
КонецПроцедуры //ОбработкаПроведения()
 
// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
 
 гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
 
КонецПроцедуры //ОбработкаУдаленияПроведения()
 
// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
 
 // Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
 Год = НачалоГода(Год);
 
 Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
	 Возврат;
 КонецЕсли;
 
КонецПроцедуры //ПередЗаписью()
 
// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если НЕ Документы.ТипВсеСсылки().Типы().Найти(ТипЗнч(Основание)) = Неопределено Тогда 
		ЗаполнитьПоДокументуОснования(ЭтотОбъект,Основание);
	КонецЕсли;
КонецПроцедуры //ОбработкаЗаполнения()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ ДОКУМЕНТА
 
#Если Клиент Тогда
	 
	// Процедура осуществляет печать документа. Можно направить печать на 
	 // экран или принтер, а также распечатать необходимое количество копий.
	 //
	 //  Название макета печати передается в качестве параметра,
	 // по переданному названию находим имя макета в соответствии.
	 //
	 // Параметры:
	 //  НазваниеМакета - строка, название макета.
	 //
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		 
		 Если ЭтоНовый() Тогда
			 Предупреждение("Документ можно распечатать только после его записи");
			 Возврат;
		 КонецЕсли;
		 
		 Если НЕ гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			 Возврат;
		 КонецЕсли;	
		 
		 ТабДокумент = Новый ТабличныйДокумент;
		 
		 гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
		 
	 КонецПроцедуры // Печать()
	 
	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
	
	// Функция формирует бухгалтерские документы
	//
	Функция ОформитьПоступлениеБУ(Документ,Вид=Неопределено) Экспорт
		
		Возврат гз_ПроцедурыОперативногоУчетаЗакупок.ОформитьПоступлениеОплатБУ(Документ, Вид);	
		
	КонецФункции //ОформитьПоступлениеБУ()

#КонецЕсли

// Функция рассчитывает сумму штрафа
//
Функция РассчитатьСуммуШтрафа() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	ДоговорКонтрагента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.Сумма КАК СуммаДоговора,
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.СрокОплаты,
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.РазмерШтрафа,
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.СпособРасчетаШтрафа,
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.Регистратор
	               |ИЗ
	               |	РегистрСведений.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам КАК гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
	               |ГДЕ
	               |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента = &ДоговорКонтрагента";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.НеРассчитывать Тогда 
			Возврат 0;
		ИначеЕсли Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ФиксированнойСуммой 
				И ДатаОплаты > Выборка.СрокОплаты Тогда 
			Возврат Выборка.РазмерШтрафа;
		ИначеЕсли Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ПроцентомОтСуммыДоговора 
				И ДатаОплаты > Выборка.СрокОплаты Тогда 
			Возврат (Выборка.РазмерШтрафа/100) * Выборка.СуммаДоговора;
		ИначеЕсли Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ФиксированнойСуммойЗаКаждыйДеньПросрочки 
				И ДатаОплаты > Выборка.СрокОплаты Тогда 
			КоличествоДней = (НачалоДня(ДатаОплаты) - НачалоДня(Выборка.СрокОплаты))/(24*60*60);
			Возврат Выборка.РазмерШтрафа * КоличествоДней;
		ИначеЕсли Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ПроцентомОтСуммыДоговораЗаКаждыйДеньПросрочки 
				И ДатаОплаты > Выборка.СрокОплаты Тогда 
			КоличествоДней = (НачалоДня(ДатаОплаты) - НачалоДня(Выборка.СрокОплаты))/(24*60*60);
			Возврат (Выборка.РазмерШтрафа/100) * Выборка.СуммаДоговора * КоличествоДней;
		Иначе 
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",				Ссылка);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",	ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация",		Организация);
		Запрос.УстановитьПараметр("ДатаОплаты",			ДатаОплаты);
		Запрос.Текст = "ВЫБРАТЬ
						|	ЕСТЬNULL(гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних.Сумма, гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.Сумма) - ЕСТЬNULL(Платежи.СуммаОборот, 0) КАК СуммаЗадолженности,
						|	ЕСТЬNULL(гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних.Сумма, гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.Сумма) КАК СуммаДоговора,
						|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.СпособРасчетаШтрафа КАК СпособРасчетаШтрафа,
						|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.РазмерШтрафа КАК РазмерШтрафа,
						|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.СрокОплаты КАК СрокОплаты
						|ИЗ
						|	РегистрСведений.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам КАК гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.СуммаОборот КАК СуммаОборот,
						|			гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента
						|		ИЗ
						|			РегистрНакопления.гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупок.Обороты(
						|					,
						|					&ДатаОплаты,
						|					Регистратор,
						|					ДоговорКонтрагента = &ДоговорКонтрагента
						|						И Организация = &Организация) КАК гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты
						|		ГДЕ
						|			гз_ДвижениеДенежныхСредствПоДоговорамГосударственныхЗакупокОбороты.Регистратор <> &Ссылка) КАК Платежи
						|		ПО гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента = Платежи.ДоговорКонтрагента
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гз_КорректировкиДоговоровГосударственныхЗакупок.СрезПоследних(, ДоговорКонтрагента = &ДоговорКонтрагента) КАК гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних
						|		ПО гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента = гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних.ДоговорКонтрагента
						|			И (гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних.Год = гз_КорректировкиДоговоровГосударственныхЗакупокСрезПоследних.Год)
						|ГДЕ
						|	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента = &ДоговорКонтрагента
						|";
					   
		ВыборкаЗадолженностей = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗадолженностей.Следующий() Цикл 
			Если Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ПроцентомОтСуммыЗадолженности 
							И ДатаОплаты > Выборка.СрокОплаты Тогда 
				Возврат (Выборка.РазмерШтрафа/100) * ВыборкаЗадолженностей.СуммаЗадолженности;
			ИначеЕсли Выборка.СпособРасчетаШтрафа = Перечисления.гз_СпособыРасчетаШтрафа.ПроцентомОтСуммыЗадолженностиЗаКаждыйДеньПросрочки 
							И ДатаОплаты > Выборка.СрокОплаты Тогда 
				КоличествоДней = (НачалоДня(ДатаОплаты) - НачалоДня(Выборка.СрокОплаты))/(24*60*60);
				Возврат (Выборка.РазмерШтрафа/100) * ВыборкаЗадолженностей.СуммаЗадолженности * КоличествоДней;
			КонецЕсли;
			
		КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
	
КонецФункции //РассчитатьСуммуШтрафа()

// Процедура заполнения документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(ЭтотОбъект,Основание)  Экспорт
	
	гз_ПроцедурыОперативногоУчетаЗакупок.ЗаполнитьРегистрациюОплатПоДокументуОснования(ЭтотОбъект,Основание);

КонецПроцедуры //ЗаполнитьПоДокументуОснования()
 
// Функция возвращает доступные варианты печати документа
 //
 // Возвращаемое значение:
 //  Структура, каждая строка которой соответствует одному из вариантов печати
 //  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	 
	 Возврат Новый Структура();
	 
 КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 
// Функция формирует список для отбора списка соглашений
//
// Возвращаемое значение:
//  Массив
//  
Функция СформироватьСписокДляОтбораСпискаСоглашений() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.Ссылка
	               |ИЗ
	               |	Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам КАК гз_РегистрацияДоговораПоГосударственнымЗакупкам
	               |ГДЕ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.ДоговорКонтрагента = &ДоговорКонтрагента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.Ссылка
	               |ИЗ
	               |	Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам КАК гз_РегистрацияДоговораПоГосударственнымЗакупкам
	               |ГДЕ
	               |	гз_РегистрацияДоговораПоГосударственнымЗакупкам.ОсновноеСоглашение.ДоговорКонтрагента = &ДоговорКонтрагента
	               |			И гз_РегистрацияДоговораПоГосударственнымЗакупкам.ОсновноеСоглашение <> ЗНАЧЕНИЕ(Документ.гз_РегистрацияДоговораПоГосударственнымЗакупкам.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Свернуть("Ссылка");
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции //СформироватьСписокДляОтбораСпискаСоглашений()

// Функция формирует массив договоров из регистра сведений гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам
//
// Возвращаемое значение:
//  МассивДоговоров
//  
Функция ПолучитьМассивДоговоров() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам.ДоговорКонтрагента
				   |ИЗ
				   |	РегистрСведений.гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам КАК гз_ДоговорыКонтрагентовПоГосударственнымЗакупкам";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
	
КонецФункции //ПолучитьМассивДоговоров()

