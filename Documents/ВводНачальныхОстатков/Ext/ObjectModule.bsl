///////////////////////////////////////////////////////////////////////////////////////////////////
//Переменные

Перем мСтруктураРеквизитовЗаполняемыхПоУмолчанию Экспорт;
Перем мСтрокаРеквизитыНалУчета Экспорт; 		// (Регл)
Перем мУчетнаяПолитика Экспорт;                 // (Общ)
Перем УчетнаяПолитикаНУ Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем СтруктРекв Экспорт;
Перем мФормаДокумента Экспорт;
Перем УчетнаяПолитикаНеЗадана Экспорт;
Перем СодержаниеПроводки;
Перем СтруктураШапкиДокумента;
Перем Заголовок;

Перем мУчетнаяБУПолитикаПоДатам;
Перем мУчетнаяНУПолитикаПоДатам;


Перем мТаблицаУсловий;

Перем мОтказЗаписи Экспорт;
Перем мОбновитьСодержанияПодчиненныхДокументов Экспорт;
Перем мСписокСчетовБУПрочихРазделов Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ УчитыватьКПН
		И НЕ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
		ТекстСообщения = "У документа должен быть включен хотя бы один из режимов проведения: ""Ввод остатков по бухгалтерскому учету"" и (или) ""Ввод остатков по налоговому учету"".";
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы
		И НЕ ОтражатьВБухгалтерскомУчете И НЕ УчитыватьКПН И НЕ ОтражатьПоСпециальнымРегистрам Тогда
		ТекстСообщения = "У документа должен быть включен хотя бы один из режимов проведения:
		                 |""Ввод остатков по бухгалтерскому учету"" и (или) ""Ввод остатков по налоговому учету"" и (или) ""Ввод остатков по специальным регистрам"".";
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("РазделУчета"	, "Раздел учета");
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитов, Отказ, Заголовок);
	
	КурсВалютыРегУчета = 0;
	
	ЗапросВалюта = Новый Запрос;
	ЗапросВалюта.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	ЗапросВалюта.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	ЗапросВалюта.Текст = "ВЫБРАТЬ
	                     |	КурсыВалют.Курс КАК Курс
	                     |ИЗ
	                     |	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентированногоУчета) КАК КурсыВалют";

	Результат = ЗапросВалюта.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КурсВалютыРегУчета = ВыборкаДетальныеЗаписи.Курс;
	КонецЦикла;
						 
	Если КурсВалютыРегУчета = 0 Тогда 
		Сообщить("Не установлен курс валюты регламентированного учета!", СтатусСообщения.Важное);
		Отказ = Истина;
	ИначеЕсли КурсВалютыРегУчета <> 1 Тогда
		Сообщить("Не верно установлен курс валюты регламентированного учета!", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнен реквизит ""Раздел учета"", документ не записан.");
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена организация, документ не записан .");
		Отказ = Истина;
	КонецЕсли;	
	
	
	//необходима заполнить реквизит СписокСчетовБУПрочихРазделов - сохраненными выбранными счетами пользователя
	//для заполнения данных по НУ
	Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета
		И УчитыватьКПН Тогда
		СписокСчетовБУПрочихРазделов = Новый ХранилищеЗначения(мСписокСчетовБУПрочихРазделов);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	мФормаДокумента = Неопределено;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// Проверим правильность заполнения шапки документа	
	ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УчетнаяПолитикаНеЗадана = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата+24*60*60, УчетнаяПолитикаНеЗадана, СтруктураШапкиДокумента.Организация, "Бух");
	Если УчетнаяПолитикаНеЗадана Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СодержаниеПроводки = СодержаниеПроводки(СтруктураШапкиДокумента.РазделУчета);
	
	Если Не Отказ Тогда			
			Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
				ОбработкаПроведения_БухСправка(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
								
				ОбработкаПроведения_Номенклатура(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
				
				
				ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
				ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ);
				
			ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
				ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
				ОбработкаПроведения_РасчетыСКонтрагентами(Отказ);
				
			КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Текст содержания проводки
Функция СодержаниеПроводки(РазделУчета)
	
	СодержаниеТекст = "Остатки по разделу: """ + РазделУчета + """";
	
	Возврат(СодержаниеТекст);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКИ ПРОВЕДЕНИЯ ПО РАЗЛИЧНЫМ РАЗДЕЛАМ

////////////////////////////////////////////////////////////////////////////////
//Общий блок - формирования проводок и движений регистров

Функция ТипСчетаСубконто(Значение, СтрокаБухСправки, ПризнакБухгалтерскогоУчета = Истина)
	
	Если Значение = 1 Тогда //Тип счета
		Строка = "Счет";
	ИначеЕсли Значение = 2 Тогда//Тип субконто
		Строка = "Субконто";
	Иначе //Вид учета НУ
		Строка = "ВидУчета";		
	КонецЕсли;
	
	Если ПризнакБухгалтерскогоУчета Тогда
		СчетУчета = СтрокаБухСправки.СчетУчетаБУ;
		СуммаУчета = СтрокаБухСправки.СуммаБУ;
	Иначе
		СчетУчета = СтрокаБухСправки.СчетУчетаНУ;
		СуммаУчета = СтрокаБухСправки.СуммаНУ;
	КонецЕсли;
			
	ВидСчетаУчета = СчетУчета.Вид;
	Если ВидСчетаУчета = ВидСчета.Активный Тогда
		Строка = Строка + "Дт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
		Строка = Строка + "Кт";
	ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
		Если СуммаУчета <> 0 Тогда
			Строка = Строка + "Дт";
		Иначе
			Строка = Строка + "Кт";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция СформироватьПроводкуБух(Операция, СтрокаБухСправки)
	
	СчетУчета = СтрокаБухСправки.СчетУчетаБУ;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СодержаниеПроводки;
	Проводка.НомерЖурнала = "ВО";
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
	Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	Забалансовый = СчетУчета.Забалансовый;
	
	СуммаПроводки = 0;
	КоличествоПроводки = 0;
	
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
				
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;
			СуммаПроводки       = СтрокаБухСправки.СуммаБУ - СтрокаБухСправки.СуммаБУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоБУ - СтрокаБухСправки.КоличествоБУКт;
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда
			СуммаПроводки       = СтрокаБухСправки.СуммаБУКт - СтрокаБухСправки.СуммаБУ;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоБУКт - СтрокаБухСправки.КоличествоБУ;
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда			
			СуммаПроводки       = СтрокаБухСправки.СуммаБУ - СтрокаБухСправки.СуммаБУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоБУ - СтрокаБухСправки.КоличествоБУКт;
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		Проводка.Сумма       = СуммаПроводки;
		
	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
			Если ВидСчетаУчета = ВидСчета.Пассивный Тогда 
				СуммаПроводки = СтрокаБухСправки.СуммаБУКт - СтрокаБухСправки.СуммаБУ;
			Иначе	
				СуммаПроводки = СтрокаБухСправки.СуммаБУ - СтрокаБухСправки.СуммаБУКт;
			КонецЕсли;
		Иначе	
			СуммаПроводки = СтрокаБухСправки.СуммаБУ;
		КонецЕсли;
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;		
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда			
			ОтразитьПоДебету = Ложь;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		
		Проводка.Сумма       = СуммаПроводки;

	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		СуммаПроводки = СтрокаБухСправки.СуммаБУ;		
		Проводка.Сумма       = СуммаПроводки;
		Если ВидСчетаУчета = ВидСчета.Активный Тогда
           ОтразитьПоДебету 	= Истина;
	   	Иначе
		   ОтразитьПоДебету 	= Ложь;
		КонецЕсли;
		
	Иначе 
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
			СуммаПроводки = СтрокаБухСправки.СуммаБУ;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоБУ;
		Иначе	
			СуммаПроводки = СтрокаБухСправки.СуммаБУ - СтрокаБухСправки.СуммаБУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоБУ - СтрокаБухСправки.КоличествоБУКт;
		КонецЕсли;
		//для других разделов
			Если ВидСчетаУчета = ВидСчета.Активный Тогда				
				ОтразитьПоДебету = Истина;				
			ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда				
				ОтразитьПоДебету 	= Ложь;
				СуммаПроводки 		= -СуммаПроводки;
				КоличествоПроводки  = -КоличествоПроводки;
			ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
				
				Если СуммаПроводки > 0 Тогда					
					ОтразитьПоДебету = Истина;
				Иначе					
					ОтразитьПоДебету = Ложь;
				КонецЕсли;				
			КонецЕсли;  		
		КонецЕсли;
		Проводка.Сумма       = СуммаПроводки;		
		Если ОтразитьПоДебету Тогда			
			Проводка.СчетДт = СчетУчета;
			Если НЕ Забалансовый Тогда
				Проводка.СчетКт = ПланыСчетов.Типовой.Вспомогательный;
			КонецЕсли;
			Если СчетУчета.Валютный Тогда
				Проводка.ВалютаДт = СтрокаБухСправки.Валюта;
				Проводка.ВалютнаяСуммаДт = СтрокаБухСправки.ВалютнаяСумма;
			КонецЕсли;
			Если СчетУчета.Количественный Тогда
				Проводка.КоличествоДт = КоличествоПроводки;
			КонецЕсли;
			
		Иначе
			Проводка.СчетКт = СчетУчета;
			Если НЕ Забалансовый Тогда
				Проводка.СчетДт = ПланыСчетов.Типовой.Вспомогательный;
			КонецЕсли;
			Если СчетУчета.Валютный Тогда
				Проводка.ВалютаКт = СтрокаБухСправки.Валюта;
				Проводка.ВалютнаяСуммаКт = СтрокаБухСправки.ВалютнаяСумма;
			КонецЕсли;
			Если СчетУчета.Количественный Тогда
				Проводка.КоличествоКт = КоличествоПроводки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонтрольПроводки(СтрокаБухСправки.НомерСтроки, Проводка, ОтразитьПоДебету);
		
	Возврат Проводка;
		
КонецФункции // СформироватьПроводкуБух

Функция СформироватьПроводкуНал(Операция, СтрокаБухСправки)
	
	СчетУчета = СтрокаБухСправки.СчетУчетаНУ;
	ВидСчетаУчета = СчетУчета.Вид;
	
	Проводка = Операция.Добавить();
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = СодержаниеПроводки;
	Проводка.НомерЖурнала = "ВО";
	
	Забалансовый = СчетУчета.Забалансовый;
		
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	
	СуммаПроводки      = 0;     	
	КоличествоПроводки = 0;
	
	//Для раздела "Прочие счета", в отличие от других разделов, существует возможность вводить как количественные показатели по дебету, так и по кредиту
	Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета Тогда
			
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;
			СуммаПроводки       = СтрокаБухСправки.СуммаНУ - СтрокаБухСправки.СуммаНУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоНУ - СтрокаБухСправки.КоличествоНУКт;

		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда
			СуммаПроводки       = СтрокаБухСправки.СуммаНУКт - СтрокаБухСправки.СуммаНУ;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоНУКт - СтрокаБухСправки.КоличествоНУ;			
			ОтразитьПоДебету = Ложь;
			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда
			СуммаПроводки       = СтрокаБухСправки.СуммаНУ - СтрокаБухСправки.СуммаНУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоНУ - СтрокаБухСправки.КоличествоНУКт;		
			
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли; 
		Проводка.Сумма       = СуммаПроводки;		
		  //////////////
  ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами 
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
		
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства Тогда
			СуммаПроводки = СтрокаБухСправки.СуммаНУ;			
		Иначе	
			Если ВидСчетаУчета = ВидСчета.Пассивный Тогда 
				СуммаПроводки = СтрокаБухСправки.СуммаНУКт - СтрокаБухСправки.СуммаНУ;
			Иначе	
				СуммаПроводки = СтрокаБухСправки.СуммаНУ - СтрокаБухСправки.СуммаНУКт;
			КонецЕсли;			
		КонецЕсли;
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;		
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда			
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;  
		КонецЕсли;    		
		
		Проводка.Сумма       = СуммаПроводки;

	ИначеЕсли СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам
		ИЛИ СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами Тогда
		
		СуммаПроводки = СтрокаБухСправки.СуммаНУ;
		Проводка.Сумма       = СуммаПроводки;
		
		Если ВидСчетаУчета = ВидСчета.Активный Тогда 
			ОтразитьПоДебету    = Истина;
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный  Тогда
			ОтразитьПоДебету = Ложь;
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный  Тогда
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе	//для других разделов
		Если СтруктураШапкиДокумента.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы Тогда
			СуммаПроводки = СтрокаБухСправки.СуммаНУ;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоНУ;
		Иначе	
			СуммаПроводки = СтрокаБухСправки.СуммаНУ - СтрокаБухСправки.СуммаНУКт;
			КоличествоПроводки  = СтрокаБухСправки.КоличествоНУ - СтрокаБухСправки.КоличествоНУКт;
		КонецЕсли;
		Если ВидСчетаУчета = ВидСчета.Активный Тогда			
			ОтразитьПоДебету = Истина;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.Пассивный Тогда
			ОтразитьПоДебету = Ложь;			
		ИначеЕсли ВидСчетаУчета = ВидСчета.АктивноПассивный Тогда
						
			Если СуммаПроводки > 0 Тогда
				СуммаПроводки       = СуммаПроводки;
				ОтразитьПоДебету = Истина;
			Иначе
				СуммаПроводки       = -1 * СуммаПроводки;
				ОтразитьПоДебету = Ложь;
			КонецЕсли;			
			
		КонецЕсли;
	КонецЕсли;
	Проводка.Сумма       = СуммаПроводки;		
	Если ОтразитьПоДебету Тогда
		Проводка.СчетКт = ПланыСчетов.Налоговый.Вспомогательный;
		Проводка.СчетДт = СчетУчета;
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоДт = КоличествоПроводки;
		КонецЕсли;
		
	Иначе
		Проводка.СчетДт = ПланыСчетов.Налоговый.Вспомогательный;
		Проводка.СчетКт = СчетУчета;
		
		Если СчетУчета.Количественный Тогда
			Проводка.КоличествоКт = КоличествоПроводки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, СтрокаБухСправки.ВидУчетаНУ);
	
	КонтрольПроводки(СтрокаБухСправки.НомерСтроки, Проводка, ОтразитьПоДебету, "Налоговый");
	
	Возврат Проводка;
	
КонецФункции // СформироватьПроводкуНал

// Выполняет контрольную проверку проводки
//
// Параметры
//  НомерСтроки       - Число                    - Номер строки таб. части документа, по которой формируется проводка
//  Проводка          - РегистрБухгалтерииЗапись - Проводка для проверки
//  ОтразитьПоДебету  - Булево                   - Признак отражения счета по дебету
//
Процедура КонтрольПроводки(НомерСтроки, Проводка, ОтразитьПоДебету, ИмяПланаСчетов = "Типовой")

	Если ОтразитьПоДебету Тогда
		СчетУчета = Проводка.СчетДт;
		ПрефиксСчета = "Дт";
	Иначе
		СчетУчета = Проводка.СчетКт;
		ПрефиксСчета = "Кт";
	КонецЕсли;
	
	// Проверка отрицательной суммы
	Если Проводка.Сумма < 0 Тогда
		Сообщить("Номер строки: " + НомерСтроки + " отрицательная сумма проводки!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ИмяПланаСчетов = "Типовой" И СчетУчета.Валютный Тогда
		
		// Заполнение реквизита валюта
		Если НЕ ЗначениеЗаполнено(Проводка["Валюта" + ПрефиксСчета]) Тогда
			Сообщить("Номер строки: " + НомерСтроки + " не заполнена валюта!", СтатусСообщения.Важное);
		КонецЕсли;

		// Проверка валютной суммы для валюты рег. учета
		Если Проводка["Валюта" + ПрефиксСчета] = мВалютаРегламентированногоУчета
			И Проводка["ВалютнаяСумма" + ПрефиксСчета] <> Проводка.Сумма Тогда
			Сообщить("Номер строки: " + НомерСтроки + " валютная сумма не совпадает с суммой проводки!", СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СчетУчета.Количественный Тогда
		
		// Проверка отрицательного количества
		Если Проводка["Количество" + ПрефиксСчета] < 0 Тогда
			Сообщить("Номер строки: " + НомерСтроки + " отрицательное количество проводки!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		// Проверка заполнения количества
		Если Проводка["Количество" + ПрефиксСчета] = 0 Тогда
			Сообщить("Номер строки: " + НомерСтроки + " не заполнено количество проводки!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		// Проверка заполнения суммы
		Если Проводка.Сумма = 0 Тогда
			Сообщить("Номер строки: " + НомерСтроки + " не заполнена сумма проводки!", СтатусСообщения.Внимание);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // КонтрольПроводки()

//*****************************************************************************************************************************
// РАСЧЕТЫ ПО НАЛОГАМ И СБОРАМ

Процедура ОбработкаПроведения_РасчетыПоНалогамИСборам(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыПоНалогамИСборам(Отказ);
	
	ФормированиеПроводокБух_РасчетыПоНалогамИСборам(РасчетыПоНалогамИСборам);
КонецПроцедуры // ОбработкаПроведения_РасчетыПоНалогамИСборам

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыПоНалогамИСборам(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, ВидНалога, ВидПлатежаВбюджет");
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаБУ");
	КонецЕсли;
	Если УчитыватьКПН Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхРеквизитов.Вставить("ВидУчетаНУ");
	КонецЕсли;
		
	
	мТаблицаУсловий.Очистить();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчетаБУ";
		НовоеУсловие.ВидСравнения = "В ИЕРАРХИИ";
		НовоеУсловие.УсловиеОбъединения = "И ";
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ОбязательстваПоНалогам);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ТекущиеНалоговыеАктивы);
		
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
	КонецЕсли;
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыПоНалогамИСборам", , мТаблицаУсловий);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти_РасчетыПоНалогамИСборам

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыПоНалогамИСборам(БухСправка)
	
	Операция = Движения.Типовой;
	ОперацияНУ = Движения.Налоговый;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если ОтражатьВБухгалтерскомУчете И НЕ СтрокаБухСправки.СуммаБУ = 0  Тогда 
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
			Если СтрокаБухСправки.СчетУчетаБУ.Вид = ВидСчета.Активный Тогда
				ПрефиксСчета = "Дт";
			Иначе
				ПрефиксСчета = "Кт";
			КонецЕсли;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "НалогиСборыОтчисления", СтрокаБухСправки["ВидНалога"]);		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "ВидыПлатежейВБюджетИФонды", СтрокаБухСправки["ВидПлатежаВБюджет"]);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + ПрефиксСчета], Проводка["Субконто" + ПрефиксСчета], "Контрагенты", СтрокаБухСправки["НалоговыйКомитет"]);							
		КонецЕсли;
		
		Если УчитыватьКПН И НЕ СтрокаБухСправки.СуммаНУ = 0  Тогда 
			
			ПроводкаНУ = СформироватьПроводкуНал(ОперацияНУ, СтрокаБухСправки);
			Если СтрокаБухСправки.СчетУчетаНУ.Вид = ВидСчета.Активный Тогда
				ПрефиксСчета = "Дт";
			Иначе
				ПрефиксСчета = "Кт";
			КонецЕсли;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "НалогиСборыОтчисления", СтрокаБухСправки["ВидНалога"]);		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "ВидыПлатежейВБюджетИФонды", СтрокаБухСправки["ВидПлатежаВБюджет"]);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ["Счет" + ПрефиксСчета], ПроводкаНУ["Субконто" + ПрефиксСчета], "Контрагенты", СтрокаБухСправки["НалоговыйКомитет"]);				
		
		КонецЕсли;		
	КонецЦикла;   	
КонецПроцедуры

//*****************************************************************************************************************************
// ПО ТАБЛИЦЕ БУХГАЛТЕРСКАЯ СПРАВКА (ПРОЧИЕ СЧЕТА УЧЕТА)

Процедура ОбработкаПроведения_БухСправка(Отказ)
	
	ФормированиеПроводокБух_БухСправка(БухСправка);
		
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_БухСправка(БухСправка)
	
	Операция = Движения.Типовой;
	ОперацияНУ = Движения.Налоговый;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если ОтражатьВБухгалтерскомУчете И (СтрокаБухСправки.СуммаБУ <> 0 ИЛИ СтрокаБухСправки.КоличествоБУ <> 0 ИЛИ СтрокаБухСправки.СуммаБУКт <> 0 ИЛИ  СтрокаБухСправки.КоличествоБУКт <> 0) Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаБухСправки.СчетУчетаБУ) Тогда
				Сообщить("Номер строки: " + СтрокаБухСправки.НомерСтроки + " не заполнен счет учета. Проводка не сформирована!", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;    
			
			СчетУчета = СтрокаБухСправки.СчетУчетаБУ;
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
			
			ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], Сч, СтрокаБухСправки["Субконто"+Сч]);			
			КонецЦикла;
		КонецЕсли;
		
		//Формирование проводок по НУ
		Если УчитыватьКПН И (СтрокаБухСправки.СуммаНУ <> 0 ИЛИ СтрокаБухСправки.КоличествоНУ <> 0 ИЛИ СтрокаБухСправки.СуммаНУКт <> 0 ИЛИ  СтрокаБухСправки.КоличествоНУКт <> 0) Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаБухСправки.СчетУчетаНУ) Тогда
				Сообщить("Номер строки: " + СтрокаБухСправки.НомерСтроки + " не заполнен счет учета (НУ). Проводка не сформирована!", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;  
			
			СчетУчета = СтрокаБухСправки.СчетУчетаНУ;
			
			ПроводкаНУ = СформироватьПроводкуНал(ОперацияНУ, СтрокаБухСправки);
			
			ЧислоАктивныхСубконто = СчетУчета.ВидыСубконто.Количество();
			
			Для Сч = 1 По ЧислоАктивныхСубконто Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, СтрокаБухСправки, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, СтрокаБухСправки, Ложь)], Сч, СтрокаБухСправки["Субконто"+Сч]);			
			КонецЦикла;
			ПроводкаНУ[ТипСчетаСубконто(3, СтрокаБухСправки, Ложь)] = СтрокаБухСправки.ВидУчетаНУ;
		КонецЕсли;  
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*****************************************************************************************************************************
// ОСТАТКИ НОМЕНКЛАТУРЫ

Процедура ОбработкаПроведения_Номенклатура(Отказ)
	
	Если ОтражатьВБухгалтерскомУчете ИЛИ УчитыватьКПН Тогда
		ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ);
		ФормированиеПроводокБух_Номенклатура(Запасы);
	КонецЕсли;
	
	Если ОтражатьПоСпециальнымРегистрам Тогда
		ПроверитьЗаполнениеТабличнойЧасти_ТоварыОрганизаций(Отказ);
		ФормированиеДвижений_ТоварыОрганизаций();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения_Номенклатура

Процедура ПроверитьЗаполнениеТабличнойЧасти_Номенклатура(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, Номенклатура, КоличествоБУ");
	
	Если ОтражатьВБухгалтерскомУчете Тогда   
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаБУ");
	КонецЕсли;
	Если УчитыватьКПН Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхРеквизитов.Вставить("ВидУчетаНУ");
	КонецЕсли;
	                      	
		
	//Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Типовой.СырьеИМатериалы) Тогда
	//	СтруктураОбязательныхРеквизитов.Вставить("Склад");
	//КонецЕсли;
	
	//Проверка материалов на складах
	мТаблицаУсловий.Очистить();
	Если ОтражатьВБухгалтерскомУчете Тогда
		НовоеУсловие = мТаблицаУсловий.Добавить();
		
		НовоеУсловие.ИмяРеквизита = "СчетУчетаБУ";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);
		СписокСчетов.Добавить(ПланыСчетов.Типовой.Товары);
		
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "Запасы", "Запасы на складе", мТаблицаУсловий);
		
		//Поверка материалов в переработке
		Если СтруктураОбязательныхРеквизитов.Свойство("Склад") Тогда
			СтруктураОбязательныхРеквизитов.Удалить("Склад");
		КонецЕсли;
		СтруктураОбязательныхРеквизитов.Вставить("Контрагент");
		
		мТаблицаУсловий.Очистить();
		НовоеУсловие = мТаблицаУсловий.Добавить();
		НовоеУсловие.ИмяРеквизита = "СчетУчетаБУ";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И ";
		
		СписокСчетов = Новый СписокЗначений();
		//СписокСчетов.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку);
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "Запасы", "Материалы переданные в переработку", мТаблицаУсловий);
		
	КонецЕсли;
	
	Если УчитыватьКПН Тогда
		
		НовоеУсловие = мТаблицаУсловий.Добавить();
		
		НовоеУсловие.ИмяРеквизита = "СчетУчетаНУ";
		НовоеУсловие.ВидСравнения = "В";
		НовоеУсловие.УсловиеОбъединения = "И НЕ";
		
		СписокСчетов = Новый СписокЗначений();
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.Товары);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.СырьеИМатериалы);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);
		СписокСчетов.Добавить(ПланыСчетов.Налоговый.НезавершенноеПроизводство);
		
		НовоеУсловие.ЗначениеРеквизита = СписокСчетов;
		
		ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "Запасы", "Запасы на складе", мТаблицаУсловий);		

	КонецЕсли; 	
	
КонецПроцедуры

Процедура ФормированиеПроводокБух_Номенклатура(БухСправка)
	
	Операция = Движения.Типовой;
	ОперацияНУ = Движения.Налоговый;	
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		Если ОтражатьВБухгалтерскомУчете И (СтрокаБухСправки.СуммаБУ <> 0 ИЛИ  СтрокаБухСправки.КоличествоБУ <> 0) Тогда 
			Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
			
			СчетУчета = СтрокаБухСправки.СчетУчетаБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СтрокаБухСправки["Партия"]);		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаБухСправки["Склад"]);
									
			//Если СчетУчета = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку Тогда			
			//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Контрагент"]);
			//КонецЕсли;
		КонецЕсли;
		
		Если УчитыватьКПН И (СтрокаБухСправки.СуммаНУ <> 0 ИЛИ СтрокаБухСправки.КоличествоНУ <> 0)  Тогда		
			ПроводкаНУ =  СформироватьПроводкуНал(ОперацияНУ, СтрокаБухСправки);
			
			СчетУчетаНУ = СтрокаБухСправки.СчетУчетаНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто( ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Номенклатура", СтрокаБухСправки["Номенклатура"]);
							
			Если УправлениеЗапасамиПартионныйУчет.ВедетсяУчетПоСкладам (ПланыСчетов.Налоговый.Товары) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Склады", СтрокаБухСправки["Склад"]);
			КонецЕсли;  	
			Если СчетУчета = ПланыСчетов.Налоговый.МатериалыПереданныеВПереработку Тогда			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаБухСправки["Контрагент"]);
			КонецЕсли;
			
			ПроводкаНУ.ВидУчетаДт = СтрокаБухСправки.ВидУчетаНУ;						
		КонецЕсли;      	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_ТоварыОрганизаций(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, Номенклатура");
	
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "ТоварыОрганизаций", "Товары организаций");		

КонецПроцедуры

Процедура ФормированиеДвижений_ТоварыОрганизаций()
		
	Для Каждого СтрокаТаблицы Из ТоварыОрганизаций Цикл
		Если СтрокаТаблицы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		Движение = Движения.ТоварыОрганизацийБУ.Добавить();
		Движение.Период           		  = Дата;
		Движение.Организация      		  = Организация;
		Движение.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Движение.ВидДвижения              = ВидДвиженияНакопления.Приход;
		ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
		Движение.Товар              	  = СтрокаТаблицы.Номенклатура;
	КонецЦикла;
		
КонецПроцедуры


//*****************************************************************************************************************************
// РАСЧЕТЫ С ПОДОТЧЕТНЫМИ ЛИЦАМИ

Процедура ОбработкаПроведения_РасчетыСПодотчетнымиЛицами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ);
	
	ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(РасчетыСПодотчетнымиЛицами);
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСПодотчетнымиЛицами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки, РаботникОрганизации");
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаБУ");
	КонецЕсли;
	
	Если УчитыватьКПН Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхРеквизитов.Вставить("ВидУчетаНУ");
	КонецЕсли;
		
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСПодотчетнымиЛицами", , );
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСПодотчетнымиЛицами(БухСправка)
	
	Операция = ЭтотОбъект.Движения.Типовой;
	ОперацияНУ = ЭтотОбъект.Движения.Налоговый;
	
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если ОтражатьВБухгалтерскомУчете И НЕ СтрокаБухСправки.СуммаБУ = 0  Тогда
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "РаботникиОрганизаций", СтрокаБухСправки["РаботникОрганизации"]);							
						
		КонецЕсли;
		
		Если УчитыватьКПН И НЕ СтрокаБухСправки.СуммаНУ = 0  Тогда
			
			ПроводкаНУ = СформироватьПроводкуНал(ОперацияНУ, СтрокаБухСправки);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, СтрокаБухСправки, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, СтрокаБухСправки, Ложь)], "РаботникиОрганизаций", СтрокаБухСправки["РаботникОрганизации"]);
			
			ПроводкаНУ[ТипСчетаСубконто(3, СтрокаБухСправки, Ложь)]  = СтрокаБухСправки.ВидУчетаНУ;
				
		КонецЕсли;  		
		
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************************************************************
// РАСЧЕТЫ С КОНТРАГЕНТАМИ

Процедура ОбработкаПроведения_РасчетыСКонтрагентами(Отказ)
	
	ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ);
	
	ФормированиеПроводокБух_РасчетыСКонтрагентами(РасчетыСКонтрагентами);
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти_РасчетыСКонтрагентами(Отказ)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("НомерСтроки,  Контрагент, ДоговорКонтрагента");
	Если УправлениеВзаиморасчетами.ВедутсяВзаиморасчетыПоДокументам() И ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхРеквизитов.Вставить("Документ");
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаБУ");
	КонецЕсли;       	                 
	Если УчитыватьКПН  И Не РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхРеквизитов.Вставить("ВидУчетаНУ");
	КонецЕсли; 	
	
	ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхРеквизитов, "РасчетыСКонтрагентами", , );
	
КонецПроцедуры

////////////////////////////////////////////////////////
//Движения по регистрам бухгалтерии

Процедура ФормированиеПроводокБух_РасчетыСКонтрагентами(БухСправка)
	
	Операция   = ЭтотОбъект.Движения.Типовой;
	ОперацияНУ = ЭтотОбъект.Движения.Налоговый;
	
		
	Для Каждого СтрокаБухСправки Из БухСправка Цикл
		
		Если ОтражатьВБухгалтерскомУчете И (НЕ СтрокаБухСправки.СуммаБУ = 0 ИЛИ НЕ СтрокаБухСправки.СуммаБУКт = 0) Тогда 
			
			Проводка = СформироватьПроводкуБух(Операция, СтрокаБухСправки);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка[ТипСчетаСубконто(1, СтрокаБухСправки)], Проводка[ТипСчетаСубконто(2, СтрокаБухСправки)], "ДокументыРасчетовСКонтрагентами", СтрокаБухСправки["Документ"]);				
			
		КонецЕсли;
		
		Если УчитыватьКПН И (НЕ СтрокаБухСправки.СуммаНУ = 0 ИЛИ  НЕ СтрокаБухСправки.СуммаНУКт = 0) Тогда 
			
			Если Не ЗначениеЗаполнено(СтрокаБухСправки.СчетУчетаНУ) Тогда
				Сообщить("Номер строки: " + СтрокаБухСправки.НомерСтроки + " не заполнен счет учета (НУ). Проводка не сформирована");
				Продолжить;
			КонецЕсли;     			

			ПроводкаНУ = СформироватьПроводкуНал(ОперацияНУ, СтрокаБухСправки);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, СтрокаБухСправки, Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, СтрокаБухСправки, Ложь)], "Контрагенты", СтрокаБухСправки["Контрагент"]);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ[ТипСчетаСубконто(1, СтрокаБухСправки,Ложь)], ПроводкаНУ[ТипСчетаСубконто(2, СтрокаБухСправки, Ложь)], "Договоры", СтрокаБухСправки["ДоговорКонтрагента"]);
				
						
			ПроводкаНУ[ТипСчетаСубконто(3, СтрокаБухСправки, Ложь)]  = СтрокаБухСправки.ВидУчетаНУ;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
//******************************************************************************

Процедура ПроверкаЗаполненияТабличныхЧастей(Отказ, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти = "", ТаблицаУсловий = Неопределено, Отступ = "")
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.УстановитьПараметр(Условие.ИмяРеквизита, Условие.ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ
	|";
	
	Шаг = 0;
	Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		Шаг = Шаг + 1;
		Запрос.Текст = Запрос.Текст + "ВводНачальныхОстатков." + КлючЗначение.Ключ + ?(СтруктураОбязательныхПолей.Количество() = Шаг, "", ",") + "
		|";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков." + ИмяТабличнойЧасти + " КАК ВводНачальныхОстатков
	               |ГДЕ
	               |	ВводНачальныхОстатков.Ссылка = &ТекущийДокумент
				   |";
	
	Если ТаблицаУсловий <> Неопределено Тогда
		Для Каждого Условие ИЗ ТаблицаУсловий Цикл
			Запрос.Текст = Запрос.Текст + "
			| " + Условие.УсловиеОбъединения + " ВводНачальныхОстатков." + Условие.ИмяРеквизита + " " + Условие.ВидСравнения +
			?(Условие.ВидСравнения = "В" ИЛИ Условие.ВидСравнения = "В ИЕРАРХИИ", "(", "") + " &" + Условие.ИмяРеквизита + ?(Условие.ВидСравнения = "В" ИЛИ Условие.ВидСравнения = "В ИЕРАРХИИ", ")", "") + "
			|";
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ИмяКолонкиНомерСтроки = "НомерСтроки";
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Если ПредставлениеТабличнойЧасти = "" Тогда
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части: ";	
		Иначе
			СтрокаНачалаСообщенияОбОшибке = Отступ + "В строке номер """+ СокрЛП(СтрокаЗапроса[ИмяКолонкиНомерСтроки]) +
			""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаЗапроса[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					
					//Обработка ситуации исключения № 2
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
					
				КонецЕсли;
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;	
				
	КонецЦикла;
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мТаблицаУсловий = Новый ТаблицаЗначений();
мТаблицаУсловий.Колонки.Добавить("ИмяРеквизита");
мТаблицаУсловий.Колонки.Добавить("ВидСравнения");
мТаблицаУсловий.Колонки.Добавить("ЗначениеРеквизита");
мТаблицаУсловий.Колонки.Добавить("УсловиеОбъединения");

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();