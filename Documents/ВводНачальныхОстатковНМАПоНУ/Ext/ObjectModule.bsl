////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мФормаДокумента Экспорт;

Перем мСтруктураРеквизитовЗаполняемыхПоУмолчанию Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

Перем СписокСчетовОС Экспорт;
Перем СписокСчетовНачисленияАмортизации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура печати табличной части документа
//
Функция ПечатьОписи() Экспорт
	
	Если мФормаДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок  = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводНачальныхОстатковОС_Опись";
	
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект.Ссылка, Метаданные().Представление(), глСписокПрефиксовУзлов);
		
	ТабДок.Вывести( Область);
	
	СтруктутрнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение);
	
	Область = Макет.ПолучитьОбласть("ШапкаБух");
	Область.Параметры.Организация = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктутрнаяЕдиницаОрганизация, Дата), "ПолноеНаименование,");
	Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ТабДок.Вывести( Область);
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мФормаДокумента.ЭлементыФормы.ОС.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "КодОС" или Колонка.Имя = "РеквизитыНУ" ИЛИ Колонка.Имя = "ЛиквидационнаяСтоимостьБУ")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из НМА Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.НМА          = СтрокаТЧ.НематериальныйАктив;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "НематериальныйАктив" Тогда
				Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.ТекущаяОбласть.Формат = "БЛ=Нет; БИ=Да";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.ТекущаяОбласть.Формат = "ДЛФ=DD";
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Число") Тогда
					//Формат числового значения
					Разрядность = 0;
					РазрядностьДробнойЧасти = 0;
					Если Колонка.Значение.Тип.СодержитТип(Тип("Число")) тогда
						Разрядность = Колонка.Значение.Тип.КвалификаторыЧисла.Разрядность;
						РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
					КонецЕсли;
					СтрокаФормата = ?(Разрядность=0,"","ЧЦ="+Разрядность+";")+?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти);				
					
					Область.ТекущаяОбласть.Формат = СтрокаФормата;
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "НематериальныйАктив" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") Тогда
			//Формат числового значения
			РазрядностьДробнойЧасти = Колонка.Значение.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			СтрокаФормата = ?(РазрядностьДробнойЧасти=0,"","ЧДЦ="+РазрядностьДробнойЧасти+";");				
			Область.Параметры.КолИтог = НМА.Итог( Колонка.Ключ);
			Область.ТекущаяОбласть.Формат = СтрокаФормата+"ЧРД=,; ЧРГ=; ЧГ=3,0";
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр      = Истина;
	ТабДок.ОтображатьСетку     = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
    Возврат ТабДок;
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДок, 1, , "Данные табличной части документа " + ЭтотОбъект);
КонецФункции 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Опись" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОписи();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись ОС при вводе остатков");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаНал()
	
	мСтрокаРеквизитыНалУчета = "	
	|ОС.ПризнакФиксированногоАктива,
	|ОС.ГруппаНУ,
	|ОС.ТекущаяСтоимостьНУ,
	|ОС.ТекущаяСтоимостьПР,
	|ОС.ПорядокПогашенияСтоимостиНУ";	
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

//Процедура заполнения предопределенных значений для выбора счетов учета БУ,
//счетов начиления амортизации БУ
//
Процедура ЗаполнитьСчетаУчета() Экспорт
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.ДолгосрочныеАктивыДляПродажи);	
	
	СписокСчетовОС = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);	
	МассивОтбора.Добавить(ПланыСчетов.Типовой.АмортизацияИнвестицийВНедвижимость);	
	
	СписокСчетовНачисленияАмортизации = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСписокВыбораСчетов(МассивОтбора);	
	
КонецПроцедуры

// Процедура проверяет дублирование состояний ОС.
//
Процедура ПроверкаДублированияЗаписейСостоянийОС(ТаблицаДвижений, Отказ, Заголовок)
	
	Если ТаблицаДвижений.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний		= Новый Массив();
	ОС_ПоСостояниям		= Новый Массив();
	
	Для каждого Состояние из Перечисления.ВидыСостоянийОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый Массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись Из ТаблицаДвижений Цикл
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТаблицаДвижений.Период,
			               |	ТаблицаДвижений.ОсновноеСредство
			               |ПОМЕСТИТЬ втТаблицаДвиженийОС
			               |ИЗ
			               |	&ТаблицаДвижений КАК ТаблицаДвижений
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
			               |	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаСостояния,
			               |	СостоянияОСОрганизаций.Регистратор КАК Регистратор,
			               |	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК Код
			               |ИЗ
			               |	(ВЫБРАТЬ
			               |		СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
			               |		МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
			               |	ИЗ
			               |		РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
			               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДвиженийОС КАК ТаблицаДвиженийОС
			               |			ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаДвиженийОС.ОсновноеСредство
			               |				И СостоянияОСОрганизаций.Период <= ТаблицаДвиженийОС.Период
			               |	ГДЕ
			               |		СостоянияОСОрганизаций.Организация = &Организация
			               |		И СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
			               |	
			               |	СГРУППИРОВАТЬ ПО
			               |		СостоянияОСОрганизаций.ОсновноеСредство) КАК ПериодыСостоянийОС
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
			               |		ПО (СостоянияОСОрганизаций.ОсновноеСредство = ПериодыСостоянийОС.ОсновноеСредство)
			               |			И (СостоянияОСОрганизаций.Период = ПериодыСостоянийОС.ДатаСостояния)
			               |ГДЕ
			               |	СостоянияОСОрганизаций.Организация = &Организация
			               |	И СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)
			               |	И СостоянияОСОрганизаций.Состояние = &Состояние";

			Запрос.УстановитьПараметр("ТаблицаДвижений",	ТаблицаДвижений);			   
			Запрос.УстановитьПараметр("Организация",		Организация );
			Запрос.УстановитьПараметр("Состояние",			НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",	ОС_ПоСостояниям[А-1]);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для основного средства <"+Строка(Выборка.ОсновноеСредство)+ "> код <" + СокрЛП(Выборка.Код) + "> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.ДатаСостояния,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация";
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтрРекв = СтрРекв + ", ВидУчетаНУ";
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = Новый Структура;
	ОбязательныеРеквизиты.Вставить("ОсновноеСредство");
	Если ОтражатьВБухгалтерскомУчете Тогда
		 ОбязательныеРеквизиты.Вставить("ДатаПринятияКУчетуРегл");
	КонецЕсли;	
	
	//проверка заполнения обязательных реквизитов
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", ОбязательныеРеквизиты, Отказ, Заголовок);

	БухУчет    = Истина;
	НалУчет    = ?(СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ, Истина, Ложь);

	РеквизитыВысокойВажности = "ИнвентарныйНомерРегл";

	РеквизитыВысокойВажности = РеквизитыВысокойВажности +",ПервоначальнаяСтоимостьБУ,СчетУчетаБУ";
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти.ОС.Реквизиты;

	Для Каждого СтрокаТЧ Из НМА Цикл

		ПроверкаПоСтроке(СтрокаТЧ, РеквизитыВысокойВажности, БухУчет, НалУчет, Отказ,Заголовок, МетаданныеРеквизиты);

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Проверяет факт принятия к учету основного средства в других организациях.
//
Процедура ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, СписокОС, Отказ, Заголовок)
	
	ВыборкаОС = ПолныеПрава.ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, СписокОС).Выбрать();
	
	Пока ВыборкаОС.Следующий() Цикл
		
		ТекстСообщенияОбОшибке =
		"Основное средство " + ВыборкаОС.ОсновноеСредство + " (" + СокрЛП(ВыборкаОС.КодОсновногоСредства) + ") " + Формат(ВыборкаОС.ДатаСостояния, "ДФ=dd.MM.yyyy") + " принято к учету в организации " + ВыборкаОС.Организация;
		
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЦикла;
КонецПроцедуры

//Проверка заполнения реквизитов
//
Функция ПроверкаПоСтроке(СтрокаОС, БезусловныеРеквизиты, БухУчет, НалУчет, Отказ, Заголовок, МетаданныеРеквизиты)
	
	РеквизитыДляПроверки = Новый Структура(БезусловныеРеквизиты);
	Для каждого ТекРеквизит из РеквизитыДляПроверки Цикл
		РеквизитыДляПроверки.Вставить(ТекРеквизит.Ключ, СтатусСообщения.Важное);
	КонецЦикла;

	//Проверка реквизитов общей группы
	РеквизитыДляПроверки.Вставить("СостояниеПринятияКУчетуРегл"			,СтатусСообщения.Внимание);
	РеквизитыДляПроверки.Вставить("НомерДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
	РеквизитыДляПроверки.Вставить("НазваниеДокументаПринятияКУчетуРегл"	,СтатусСообщения.Внимание);
		
	РеквизитыДляПроверки.Вставить("МОЛ"	,СтатусСообщения.Внимание);
				
	//Проверка реквизитов бух. учете
	РеквизитыДляПроверки.Вставить("СчетНачисленияАмортизацииБУ"	,СтатусСообщения.Важное);
	
	Если Не НалУчет ТОгда
		РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьБУ" ,СтатусСообщения.Важное);
	Иначе
		Если СтрокаОС.ТекущаяСтоимостьНУ=0 И СтрокаОС.ТекущаяСтоимостьПР = 0 Тогда
			РеквизитыДляПроверки.Вставить("ТекущаяСтоимостьБУ"	,СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	//Проверка реквизитов групп амортизации
	Если СтрокаОС.НачислятьАмортизациюБУ Тогда
	   
		РеквизитыДляПроверки.Вставить("СпособНачисленияАмортизацииБУ" ,СтатусСообщения.Важное);
		
	    Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
			или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования 
			или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка 
			Или СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
				РеквизитыДляПроверки.Вставить("СрокПолезногоИспользованияБУ" ,СтатусСообщения.Важное);
		КонецЕсли;
		
		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда
			РеквизитыДляПроверки.Вставить("ПараметрВыработкиБУ"	  ,СтатусСообщения.Важное);
			РеквизитыДляПроверки.Вставить("ОбъемПродукцииРаботБУ" ,СтатусСообщения.Важное);
		ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка тогда
			РеквизитыДляПроверки.Вставить("КоэффициентУскоренияБУ" ,СтатусСообщения.Важное);
		КонецЕсли;

		Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЛинейныйПроцентом Тогда
			РеквизитыДляПроверки.Вставить("КоэффициентАмортизацииБУ" ,СтатусСообщения.Важное);
		КонецЕсли;	
		РеквизитыДляПроверки.Вставить("СпособОтраженияРасходовПоАмортизацииБУ"	,СтатусСообщения.Внимание);
		
	КонецЕсли;
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		Значение = СтрокаОС[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда // надо ругаться
			ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
			ВидУчета = ""; 
			Если Прав(КлючЗначение.Ключ,2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			КонецЕсли;
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения,Заголовок,КлючЗначение.Значение);
		КонецЕсли;

	КонецЦикла;
	
	//Логические проверки
    //...
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ФиксированныеАктивыУчитываемыеОтдельно
//
Процедура ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТабОС, СтруктураШапкиДокумента)

	НаборДвижений   = Движения.ФиксированныеАктивыУчитываемыеОтдельно;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ СтрокаОС.ПризнакФиксированногоАктива Тогда
			Продолжить;
		КонецЕсли;	
			
		Если (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме) 
			ИЛИ (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты)
			ИЛИ (СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            	= СтрокаОС.ДатаПринятияКУчетуРегл;
			НоваяСтрока.Организация 	  	= СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ФиксированныйАктив 	= СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие        		= Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету;			
			НоваяСтрока.ВидЛьготыФА 		= ?(СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме, Перечисления.ВидыФАУчитываемыхОтдельно.ДвойнаяНормаАмортизации, Перечисления.ВидыФАУчитываемыхОтдельно.ОбъектыПреференций);
		КонецЕсли;
	КонецЦикла;

	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно()


//Процедура формирования движений  по регистру ОбъектыНалоговогоУчетаФА
//
Процедура ДвижениеПоРегиструОбъектыНалоговогоУчетаФА(ТабОС, СтруктураШапкиДокумента)
	НаборДвижений   = Движения.ОбъектыНалоговогоУчетаФА;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Если НЕ СтрокаОС.ПризнакФиксированногоАктива Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      	= СтруктураШапкиДокумента.Дата;
		НоваяСтрока.Организация                 	= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ФиксированныйАктив            	= СтрокаОС.НематериальныйАктив;
		НоваяСтрока.ГруппаНУ            			= СтрокаОС.ГруппаНУ;
		НоваяСтрока.СостояниеФиксированногоАктива	= Перечисления.ВидыСостоянийФА.ПринятКУчету;	
		НоваяСтрока.ПорядокПогашенияСтоимостиНУ     = СтрокаОС.ПорядокПогашенияСтоимостиНУ;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам  ОбъектыИмущественногоНалога, ОбъектыЗемельногоНалога, ОбъектыТранспортногоНалога
//
Процедура ДвиженияПоРегистрамИмущественногоЗемельногоТранспортногоНалогов(ТабОС, СтруктураШапкиДокумента)
	
	ДвиженияОбъектИмущественногоНалога = Движения.ОбъектыИмущественногоНалога;
	ДвиженияОбъектЗемельногоНалога 	   = Движения.ОбъектыЗемельногоНалога;
	ДвиженияОбъектТранспортногоНалога  = Движения.ОбъектыТранспортногоНалога;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
			
		Если мОтображатьСтруктурныеПодразделения Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы( СтруктураШапкиДокумента.ПодразделениеОрганизации,
																			СтруктураШапкиДокумента.Организация,
																			глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																			Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
		КонецЕсли;

		//объект имущественного налога
		Если СтрокаОС.ОбъектИмущественногоНалога Тогда
			Движение = ДвиженияОбъектИмущественногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мОтображатьСтруктурныеПодразделения Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				Движение.СтруктурнаяЕдиница = ?(СтруктураШапкиДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.Организация) ;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			
		КонецЕсли;	
		
		//объект транспортного налога
		Если СтрокаОС.ОбъектТранспортногоНалога Тогда
			Движение = ДвиженияОбъектТранспортногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мОтображатьСтруктурныеПодразделения Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				Движение.СтруктурнаяЕдиница = ?(СтруктураШапкиДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.Организация);
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
		//объект земельного налога
		Если СтрокаОС.ОбъектЗемельногоНалога Тогда
			Движение = ДвиженияОбъектЗемельногоНалога.Добавить();
			Движение.Период 			   = Дата;
			Движение.Организация 		   = СтруктураШапкиДокумента.Организация;
			Движение.ОбъектНалогообложения = СтрокаОС.ОсновноеСредство;
			Движение.НачислятьНалог	       = Истина;   
			Если мОтображатьСтруктурныеПодразделения Тогда
				Движение.Налогоплательщик 	= Налогоплательщик;
				Движение.СтруктурнаяЕдиница = ?(СтруктураШапкиДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением,СтруктураШапкиДокумента.ПодразделениеОрганизации, СтруктураШапкиДокумента.Организация) ;
			Иначе
				Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух(ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение    = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления			= СтрокаОС.СпособПоступленияРегл;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период          		 = Дата;
		НоваяСтрока.Организация     		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ             		 = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение 		 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

// Процедура формирования движений по регистру СоставОС 
//
Процедура ДвижениеПоРегиструСоставОС( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если ЗначениеЗаполнено( СтрокаОС.РодительскоеОС) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период              = Дата;
			НоваяСтрока.Активность          = Истина;
			НоваяСтрока.ОсновноеСредство    = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ВСоставеОС          = СтрокаОС.РодительскоеОС;
			НоваяСтрока.СостояниеВСоставеОС = Перечисления.ВидыСостоянийВСоставеОС.ВключеноВСостав;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            		 = Дата;
			НоваяСтрока.Организация       		 = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  		 = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации 		 = СтрокаОС.ГрафикАмортизацииБУ;
			НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период              	 = Дата;
		НоваяСтрока.Организация         	 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство    	 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию 	 = СтрокаОС.НачислятьАмортизациюБУ;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		ДатаДвижения = СтрокаОС.ДатаПринятияКУчетуРегл;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период          		 = ДатаДвижения;
		НоваяСтрока.Организация     		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;

		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияБУ;
		НоваяСтрока.ОбъемПродукцииРабот         = СтрокаОС.ОбъемПродукцииРаботБУ;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокПолезногоИспользованияБУ;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.ТекущаяСтоимостьБУ;
			НоваяСтрока.ЛиквидационнаяСтоимость = 0;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			НоваяСтрока.ЛиквидационнаяСтоимость			  = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ
	КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
		КонецЕсли;
		НоваяСтрока.КоэффициентАмортизации = СтрокаОС.КоэффициентАмортизацииБУ;
		НоваяСтрока.КоэффициентУскорения   = СтрокаОС.КоэффициентУскоренияБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру  ВыработкаОС бух.
//
Процедура ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента)

	НаборДвижений   = Движения.ВыработкаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Для Каждого СтрокаОС Из ТабОС Цикл

		Если СтрокаОС.ВыработкаКоличествоБУ > 0
		   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда

			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Период            = Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
			НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;

		КонецЕсли;

	КонецЦикла;

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ДобавитьДвижение();
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

// Процедура формирования движений по регистру СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет ОС бух.
//
Процедура ДвижениеПоРегиструСпособыОтраженияБух( ТабОС, СтруктураШапкиДокумента, Заголовок)
		
	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           					 = СтруктураШапкиДокумента.Дата;
		НоваяСтрока.ОсновноеСредство					 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация     					 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение	         = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.СпособОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок)
		
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период		    		 = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ДатаСостояния    		 = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство 		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация      		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние        		 = Перечисления.ВидыСостоянийОС.ПринятоКУчету;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	КонецЦикла;
	
	ПроверкаДублированияЗаписейСостоянийОС(ТаблицаДвижений, Отказ, Заголовок);
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

// Процедура формирования движений по регистру События 
//
Процедура ДвижениеПоРегиструСобытияОСОрганизаций( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           		 = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство 		 = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация      		 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		НоваяСтрока.Событие           		 = СтрокаОС.СостояниеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента   		 = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента		 = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура ДвижениеПоРегиструСчетовУчетаОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период     		  = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчетаБУ       = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизацииБУ		 = СтрокаОС.СчетНачисленияАмортизацииБУ;
		НоваяСтрока.СчетУчетаЗатратПоМодернизацииБУ	 = СтрокаОС.СчетУчетаЗатратПоМодернизацииБУ;
		НоваяСтрока.СчетУчетаНДСПоПриобретению 		 = СтрокаОС.СчетУчетаНДСПоПриобретению;
		НоваяСтрока.СчетУчетаНДСПоРеализации   		 = СтрокаОС.СчетУчетаНДСПоРеализации;
		НоваяСтрока.СчетДоходовОтРеализацииБУ    	 = СтрокаОС.СчетДоходовОтРеализацииБУ;
		НоваяСтрока.СчетСебестоимостиПриРеализацииБУ = СтрокаОС.СчетСебестоимостиПриРеализацииБУ;
		НоваяСтрока.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаОС.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		НоваяСтрока.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = СтрокаОС.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструСчетовУчетаОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирование проводок бух
//
Процедура ФормированиеПроводокБух(ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Типовой;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) И НЕ (СтрокаОС.ТекущаяСтоимостьБУ = 0 )Тогда
			// Ввод балансовой стоимости ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.ИсточникФинансирования = СтруктураШапкиДокумента.ИсточникФинансирования;
			Проводка.Содержание  = "Ввод остатков по ОС (текущая стоимость)";
			Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьБУ;
			
			Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
			Проводка.СчетКт = ПланыСчетов.Типовой.Вспомогательный;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаОС.МОЛ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОС.СчетНачисленияАмортизацииБУ) И НЕ (СтрокаОС.НакопленнаяАмортизацияБУ = 0) Тогда
			// Ввод начисленной амортизации.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.ИсточникФинансирования = СтруктураШапкиДокумента.ИсточникФинансирования;
			Проводка.Содержание  = "Ввод остатков по ОС (начисл. амортизация)";
			Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
			
			Проводка.СчетДт = ПланыСчетов.Типовой.Вспомогательный;
			Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
			
			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(Дата) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", СтруктураШапкиДокумента.ПодразделениеОрганизации);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(Дата) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаОС.МОЛ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокБух

// Процедура формирование проводок нал.
//
Процедура ФормированиеПроводокНал(ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Если СтрокаОС.ПризнакФиксированногоАктива Тогда
			Если СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.НачислениеАмортизацииПоДвойнойНорме
				ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияЕдиновременноеОтнесениеНаВычеты
				ИЛИ СтрокаОС.ПорядокПогашенияСтоимостиНУ = Перечисления.ПорядокПогашенияСтоимостиФА.ПреференцияОтнесениеНаВычетыРавнымиДолями
				
				Тогда
				СчетУчетаНУ = ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс;
			Иначе
				СчетУчетаНУ = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;
			КонецЕсли;
			Стоимость = СтрокаОС.ТекущаяСтоимостьНУ;
			//ВидУчета = Справочники.ВидыУчетаНУ.НУ;
		//Иначе	
		//	// объекты не являющиеся фиксированными активами, считаем
		//	// внеоборотными активами не подлежащими амортизации
		//	СчетУчетаНУ = ПланыСчетов.Налоговый.ВАНеПодлежащиеАмортизации;
		//	Стоимость = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.НакопленнаяАмортизацияБУ;
		//	//ВидУчета = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		//КонецЕсли;
		
		Если НЕ (Стоимость = 0) Тогда			
			// Ввод стоимости по налоговому учету.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.ИсточникФинансирования = СтруктураШапкиДокумента.ИсточникФинансирования;
			Проводка.Содержание  = "Ввод остатков ОС";
			Проводка.Сумма       = Стоимость;
			
			Проводка.СчетДт      = СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.НематериальныйАктив);				
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
			Проводка.ВидУчетаДт = ВидУчетаНУ;
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт = ВидУчетаНУ;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка,ВидУчетаНУ, Ложь); 
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
		
		Если НЕ (СтрокаОС.ТекущаяСтоимостьПР = 0) Тогда				
			// Ввод постоянной разницы в оценке ОС.
			Проводка = Операция.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Ввод остатков по ОС (постоянная разница)";
			Проводка.Сумма       = СтрокаОС.ТекущаяСтоимостьПР;
			Проводка.СчетДт      = СчетУчетаНУ;
			Проводка.ВидУчетаДт  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);				
			
			Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
			Проводка.ВидУчетаКт  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		КонецЕсли;
		
		//ТекущаяСтоимостьВР = (СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.НакопленнаяАмортизацияБУ) - Стоимость - СтрокаОС.ТекущаяСтоимостьПР;
		//
		//Если НЕ (ТекущаяСтоимостьВР = 0) Тогда
		//	// Ввод временной разницы в оценке ОС.
		//	Проводка = Операция.Добавить();
		//	Проводка.Период      = Дата;
		//	Проводка.Организация = СтруктураШапкиДокумента.Организация;
		//	Проводка.Содержание  = "Ввод остатков по ОС (временная разница)";
		//	Проводка.Сумма       = ТекущаяСтоимостьВР;
		//	
		//	Проводка.СчетДт      = СчетУчетаНУ;
		//	Проводка.ВидУчетаДт  = Справочники.ВидыУчетаНУ.ВР;
		//	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", СтрокаОС.ОсновноеСредство);							
		//	
		//	Проводка.СчетКт      = ПланыСчетов.Налоговый.Вспомогательный;
		//	Проводка.ВидУчетаКт  = Справочники.ВидыУчетаНУ.ВР;
		//	
		//	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		//		Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		//КонецЕсли;
	КонецЦикла;		
КонецПроцедуры // ФормированиеПроводокНал

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ,Заголовок)

	ТабОС = НМА.Выгрузить();

		ФормированиеПроводокНал( ТабОС, СтруктураШапкиДокумента);	
		
		// движения по регистрам налогового учета ФА
		//Если СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
			// в случае, если документ образует постоянную разницу по
			// регистрам учета ФА движений выполнять не нужно
			ДвижениеПоРегиструОбъектыНалоговогоУчетаФА( ТабОС, СтруктураШапкиДокумента);
			//ДвижениеПоРегиструФиксированныеАктивыУчитываемыеОтдельно(ТабОС, СтруктураШапкиДокумента);
		//КонецЕсли;		

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОшибкаПроведенияПоСтроке(СтрокаОС, ТекстСообщения,Заголовок,Статус)
	НачалоСообщения = "- строка № "+СтрокаОС.НомерСтроки+", инв. номер ОС <"+СтрокаОС.ИнвентарныйНомерРегл+"> : ";
	ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения+ТекстСообщения, ,Заголовок ,Статус)
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
    ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	//так как документ формируется раздельно от бух.учета, то проводки будем делать, в зависимости от признака "Учитывать КПН"	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);

	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	ТаблицаПоОС = НМА.Выгрузить();
	//УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	// Проверим не принято ли ОС в другие организации
	//ПроверитьПринятиеКУчетуОСВДругихОрганизациях(СтруктураШапкиДокумента, ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"), Отказ, Заголовок);
	
	//ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки события удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

мФормаДокумента = Неопределено;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
