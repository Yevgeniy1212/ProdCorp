////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если Клиент Тогда
	
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция формирует табличный документ с печатной формой графика
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьГрафика()
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	KZT = Справочники.Валюты.НайтиПоКоду("398").Ссылка;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.Организация КАК ПредставлениеОрганизации,
	|	ГрафикВознагрождений.Контрагент.НаименованиеПолное КАК ПредставлениеКонтрагента,
	|	ГрафикВознагрождений.ДоговорКонтрагента,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК валюта,
	|	ГрафикВознагрождений.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ДатаНачалаДействияДоговора КАК ДатаНачала,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ДатаОкончанияДействияДоговора КАК ДатаОкончания,
	|	ГрафикВознагрождений.ДоговорКонтрагента.НеснижаемыйОстаток КАК НеснижаемыйОстаток,
	|	ГрафикВознагрождений.ДоговорКонтрагента.МаксимальныйОстаток КАК МаксимальныйОстаток,
	|	ГрафикВознагрождений.ДоговорКонтрагента.РасчетныйСчет КАК РасчетныйСчет,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ВИдКалендарныхДней КАК КоличествоДней
	|ИЗ
	|	Документ.НачисленияВознагрожденияПоРС КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|";
	
	ЗапросШапка.Текст = ТекстЗапроса;
	
	ЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
	ЗапросШапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.НомерСтроки,
	|	ГрафикВознагрождений.Период,
	|	ГрафикВознагрождений.Курс,
	|	ГрафикВознагрождений.Сумма,
	|	ГрафикВознагрождений.ВалютнаяСумма,
	|	ГрафикВознагрождений.КоличествоДней,
	|	ГрафикВознагрождений.ПроцентВознагрождения,
	|	ГрафикВознагрождений.СуммаВознагрождения,
	|	ГрафикВознагрождений.ВылютнаяСуммаВознаграждения
	|ИЗ
	|	Документ.НачисленияВознагрожденияПоРС.График КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|Итоги 
	|	Сумма(СуммаВознагрождения),
	|	Сумма(ВылютнаяСуммаВознаграждения)
	|ПО Общие
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГрафикВознагрожденияПоКредитамИЗаймам";
    Если Валюта = KZT Тогда
	Макет = ПолучитьМакет("Макет");
    Иначе
	Макет = ПолучитьМакет("МакетВалюта");
	КонецЕсли;
	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ЗапросШапка);
	ОбластьМакета.Параметры.ДатаНачала = Формат(ЗапросШапка.ДатаНачала,"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ДатаОкончания = Формат(ЗапросШапка.ДатаОкончания,"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "График вознагрождения", глСписокПрефиксовУзлов);
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	ВыборкаОбщийИтог.Следующий();
	
	выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = ПечатьГрафика();
	КонецЕсли;

УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","График");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
//	ТаблицаПоНачислению.ВыбратьСтроку();
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	ПроводкиБУ.Записывать = Истина;
	ПроводкиНУ.записывать = Истина;
//	Если СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ДатаОперации Тогда
//		 ДатаДока = СтруктураШапкиДокумента.Дата;
//	 Иначе
		 ДатаДока = Дата;
//	КонецЕсли;	
        Если ТаблицаПоНачислению.Итог("СуммаВознагрождения") <> 0 Тогда
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.СчетДт 	 = СчетУчетаВознаграждений;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,           СубконтоВознаграждения1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,           СубконтоВознаграждения2);
		Проводка.СчетКт      = СчетУчетаДоходов;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоДоходов1);
		Проводка.Содержание = "Начислены % по остаткам на РС";
		Если СчетУчетаВознаграждений.Валютный Тогда
			Если Валюта = Справочники.Валюты.НайтиПоКоду("398") Тогда
			Проводка.ВалютаДт        = Валюта;
			Проводка.ВалютнаяСуммаДт = ТаблицаПоНачислению.Итог("СуммаВознагрождения");
			Иначе	
			Проводка.ВалютаДт        = Валюта;
			Проводка.ВалютнаяСуммаДт = ТаблицаПоНачислению.Итог("ВылютнаяСуммаВознаграждения");
			КонецЕсли;
		КонецЕсли;
		Проводка.Сумма = ТаблицаПоНачислению.Итог("СуммаВознагрождения");
		// Проводка по КНП
			Если ТаблицаПоНачислению.Итог("СуммаКПН") <> 0 Тогда
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = СчетУчетаКПНБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.НалогиСборыОтчисления.НайтиПоНаименованию("Корпоративный подоходный налог"));
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			Проводка.СчетКт 	 = СчетУчетаВознаграждений;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,  СубконтоВознаграждения1);
			Проводка.Содержание = "Начислен ИПН с юр.лиц";
		Если СчетУчетаВознаграждений.Валютный Тогда
			Если Валюта = Справочники.Валюты.НайтиПоКоду("398") Тогда
			Проводка.ВалютаКт        = Валюта;
			Проводка.ВалютнаяСуммаКт = ТаблицаПоНачислению.Итог("СуммаКПН");
			Иначе	
			Проводка.ВалютаКт        = Валюта;
			Проводка.ВалютнаяСуммаКт = ТаблицаПоНачислению.Итог("ВалютнаяСуммаКНП");
			КонецЕсли;
		КонецЕсли;
			Проводка.Сумма = ТаблицаПоНачислению.Итог("СуммаКПН");
		Конецесли;
	КонецЕсли;
		// проводки по НУ
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			Если ТаблицаПоНачислению.Итог("СуммаКПН") <> 0 Тогда
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт =    СчетУчетаВознагражденийНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,СубконтоВознаграждения1);
			Проводка.СчетКт    = СчетУчетаДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоДоходовНУ1);
			Проводка.Содержание = "Начислены % по остатку на РС";
			Проводка.Сумма = ТаблицаПоНачислению.Итог("СуммаВознагрождения");
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период      = Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаКПННУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогСЮридическихЛиц);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			Проводка.СчетКт 	 = СтруктураШапкиДокумента.СчетУчетаДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1,  СубконтоДоходовНУ1);
			Проводка.Содержание = "Начислен ИПН с юр.лиц";
			Проводка.Сумма = ТаблицаПоНачислению.Итог("СуммаКПН");
			Конецесли;
		Конецесли;
КонецПроцедуры
//Подготавливаем таблицу по классам для проведения
Функция ПодготовитьТаблицуПоГрафику(ДокументОбъект)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.НомерСтроки,
	|	ГрафикВознагрождений.Период,
	|	ГрафикВознагрождений.ДатаПлатежа,
	|	ГрафикВознагрождений.Сумма,
	|	ГрафикВознагрождений.ПроцентВознагрождения,
	|	ГрафикВознагрождений.ВылютнаяСуммаВознаграждения,
	|	ГрафикВознагрождений.СуммаВознагрождения,
	|	ГрафикВознагрождений.ВалютнаяСуммаКНП,
	|	ГрафикВознагрождений.СуммаКПН,
	|	ГрафикВознагрождений.ВалютнаяСуммаВознаграждекияКПолучению,
	|	ГрафикВознагрождений.СуммаВознагрожденияКПолучению
	|ИЗ
	|	Документ.НачисленияВознагрожденияПоРС.График КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

// По строке выборки  формируем движения по регистрам
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(СтрокаТЗ,СтруктураШапкиДокумента)
	
	//Движения по регистру "СведенияПоГрафикамВознагрождений"
	Движение = Движения.СведенияПоГрафикамВознагрождений.Добавить();
	// Свойства
	Движение.Период                     = НачалоМесяца(СтрокаТЗ.Период);
	// Измерения
	Движение.Организация				= СтруктураШапкиДокумента.Организация;
	Движение.Объект                     = СтруктураШапкиДокумента.ДоговорКонтрагента;
	// Ресурсы
	Движение.Сумма  		  				= СтрокаТЗ.Сумма;
	Движение.КоличествоДней   				= СтрокаТЗ.КоличествоДней;
	Движение.ПроцентВознагрождения 			= СтрокаТЗ.ПроцентВознагрождения;
	Движение.СуммаВознагрождения    		= СтрокаТЗ.СуммаВознагрождения;
	Движение.СуммаКПН    					= СтрокаТЗ.СуммаКПН;
	Движение.СуммаВознагрожденияКПолучению	= СтрокаТЗ.СуммаВознагрожденияКПолучению;
	// Реквизиты
	Движение.ДатаОкончания                  = СтруктураШапкиДокумента.ДоговорКонтрагента.ДатаОкончанияДействияДоговора;
	Движение.ДатаПлатежа                  = СтрокаТЗ.ДатаПлатежа;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Функция ПодготовитьТаблицуНачислений(РезультатЗапросаПоГрафику, СтруктураШапкиДокумента)

	ТаблицаПоНачислению = РезультатЗапросаПоГрафику.Выгрузить();

	Возврат ТаблицаПоНачислению;

КонецФункции // ПодготовитьТаблицуУслуг()
// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
//	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
//	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
//	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль или УчитыватьКПН);
//	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
//	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("СчетУчетаВознагрождений"  , "СчетУчетаВознагрождений");
	СтруктураПолей.Вставить("СчетУчетаДоходов"  , "СчетУчетаДоходов");
	СтруктураПолей.Вставить("СубконтоДоходов1"  , "СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходов2"  , "СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходов3"  , "СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетУчетаВознагрожденийНУ"  , "СчетУчетаВознагрожденийНУ");
	СтруктураПолей.Вставить("СчетУчетаДоходовНУ"  , "СчетУчетаДоходовНУ");
	СтруктураПолей.Вставить("СубконтоДоходовНУ1"  , "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2"  , "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3"  , "СубконтоДоходовНУ3");
	СтруктураПолей.Вставить("Контрагент"    , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"    , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ТипОперации"    , "ТипОперации");
	СтруктураПолей.Вставить("Валюта"        , "Валюта");
	СтруктураПолей.Вставить("ВалСуммаВознагрождения"    , "ВалСуммаВознагрождения");
	СтруктураПолей.Вставить("СуммаВознагрождения"     , "СуммаВознагрождения");
	
//	РезультатЗапросаПоГрафику = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "График", СтруктураПолей);
	
	ТаблицаПоНачислению = ПодготовитьТаблицуПоГрафику(ЭтотОбъект.Ссылка);
			
	// Движения по документу
	Если Не Отказ Тогда

			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоНачислению, Отказ, Заголовок);
	КонецЕсли;

	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
