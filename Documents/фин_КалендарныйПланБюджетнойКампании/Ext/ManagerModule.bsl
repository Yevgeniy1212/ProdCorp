#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбновитьДиаграмму(Объект,Диаграмма,ВидШкалыВремени=Неопределено) Экспорт
	Регламент = БюджетныйРегламент(Объект);

	Отчет = Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.Создать();
	Отчет.БюджетныйРегламент = Регламент;
	Отчет.Организация = Объект.Организация;
	Отчет.СценарийПланирования = Объект.Сценарий;
	Отчет.ГрафикПроцесса.Загрузить(Объект.ГрафикПроцесса.Выгрузить());
	Для Каждого СтрокаОтчета Из Отчет.ГрафикПроцесса Цикл
		СтрокаОтчета.Организация = Объект.Организация;
		СтрокаОтчета.Сценарий = Объект.Сценарий;
	КонецЦикла;
	
	СтрокаДетализация = Отчет.Детализация.Добавить();
	СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Бюджет;
	СтрокаДетализация = Отчет.Детализация.Добавить();
	СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ВидЗадачи;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("УровеньДетализации",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"))).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.УровеньДетализации;
	КонецЕсли;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("ЭтапБюджетногоПроцесса",Справочники.фин_ЭтапыБюджетногоПроцесса.ПустаяСсылка())).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ЭтапБюджетногоПроцесса;
	КонецЕсли;
	Если Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Пользователь",Справочники.Пользователи.ПустаяСсылка())).Количество()<>Объект.ГрафикПроцесса.Количество() Тогда
		СтрокаДетализация = Отчет.Детализация.Добавить();
		СтрокаДетализация.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Пользователь;
	КонецЕсли;
	Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.СформироватьДиаграмму(Отчет,Диаграмма,ВидШкалыВремени,Ложь,,Истина);
КонецПроцедуры

Процедура Автозаполнение(Объект) Экспорт
	Объект.ГрафикПроцесса.Очистить();
	
	Регламент = БюджетныйРегламент(Объект);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Организация,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент
		|ИЗ
		|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИмеющихсяНастроек = РезультатЗапроса.Выгрузить();
	
	ПоРегламенту 				= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент",Регламент)).Количество()>0;
	ПоСценариюИОрганизации 		= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,СценарийПланирования,Организация",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Сценарий,Объект.Организация)).Количество()>0;
	ПоСценарию 					= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,СценарийПланирования",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Сценарий)).Количество()>0;
	ПоОрганизации 				= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,Организация",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),Объект.Организация)).Количество()>0;
	ПоПустомуСценарию 			= ТаблицаИмеющихсяНастроек.НайтиСтроки(Новый Структура("Регламент,СценарийПланирования",?(ПоРегламенту,Регламент,Документы.фин_БюджетныйРегламент.ПустаяСсылка()),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий())).Количество()>0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АктивныйРегламент",Регламент);
	Если ПоРегламенту Тогда
		РегламентПолученияНастроек = Регламент;
	Иначе
		РегламентПолученияНастроек = Документы.фин_БюджетныйРегламент.ПустаяСсылка();
	КонецЕсли;
	Если ПоСценариюИОрганизации Тогда
		Сценарий = Объект.Сценарий;
		Организация = Объект.Организация;
	ИначеЕсли ПоОрганизации Тогда
		Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
		Организация = Объект.Организация;
	ИначеЕсли ПоСценарию Тогда
		Сценарий = Объект.Сценарий;
		Организация = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ПоПустомуСценарию Тогда
		Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
		Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		Возврат;
	КонецЕсли;
	
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	График = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ГрафикУчетаРаботПоСогласованию");
	
	ТаблицаИмеющихсяНастроек = фин_ПроцедурыКалендарногоПланирования.ПолучитьСписокЗадачПоНастройкамРегламента(РегламентПолученияНастроек,Сценарий,Организация,Регламент);
	Для Каждого СтрокаНастроек Из ТаблицаИмеющихсяНастроек Цикл
		НоваяСтрока = Объект.ГрафикПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНастроек);
		НоваяСтрока.УровеньДетализации 	= ?(ЗначениеЗаполнено(СтрокаНастроек.УправленческоеПодразделение),СтрокаНастроек.УправленческоеПодразделение,СтрокаНастроек.Проект);
		ДатаЗавершения 					= фин_ПроцедурыКалендарногоПланирования.КалендарныйКонецСобытия(СтрокаНастроек,Объект.Сценарий,Объект.ПериодПланирования,ГоризонтПланирования,График,Истина);
		НоваяСтрока.ДатаНачала 			= фин_ПроцедурыКалендарногоПланирования.КалендарноеНачалоСобытия(СтрокаНастроек,Объект.Сценарий,ДатаЗавершения,График);
		НоваяСтрока.ДатаЗавершения		= ДатаЗавершения - ?(СтрокаНастроек.ЕдиницаИзмеренияВремениОтсчета=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Дней ИЛИ СтрокаНастроек.ЕдиницаИзмеренияВремениОтсчета=Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.Часов,1,0);
	КонецЦикла;
	
КонецПроцедуры

Функция БюджетныйРегламент(Объект) Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.БюджетныйРегламентПериода(Объект.ПериодПланирования);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение


////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПереопределяемыеТаблицы = Новый Массив;
	ПереопределяемыеТаблицы.Добавить("ГрафикПроцесса");
	
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,ПереопределяемыеТаблицы);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаГрафикПроцесса(НомераТаблиц, ПараметрыПроведения, Реквизиты) Экспорт
	
	НомераТаблиц.Вставить("ТаблицаГрафикПроцесса", НомераТаблиц.Количество());

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ГрафикПроцесса.Ссылка,
	               |	ГрафикПроцесса.НомерСтроки,
	               |	ГрафикПроцесса.ВидЗадачи,
	               |	ГрафикПроцесса.Бюджет,
	               |	ГрафикПроцесса.ЭтапБюджетногоПроцесса,
	               |	ГрафикПроцесса.Ранг,
	               |	ГрафикПроцесса.Пользователь,
	               |	ГрафикПроцесса.ДатаНачала,
	               |	ГрафикПроцесса.ДатаЗавершения,
	               |	ВЫБОР
	               |		КОГДА ГрафикПроцесса.УровеньДетализации = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
	               |				ИЛИ ГрафикПроцесса.УровеньДетализации.Ссылка ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
	               |		ИНАЧЕ ГрафикПроцесса.УровеньДетализации
	               |	КОНЕЦ КАК УровеньДетализации,
	               |	ГрафикПроцесса.Исполнитель,
	               |	ГрафикПроцесса.Ссылка.Организация КАК Организация,
	               |	ГрафикПроцесса.Ссылка.Сценарий КАК СценарийПланирования,
	               |	ГрафикПроцесса.Ссылка КАК КалендарныйПлан
	               |ИЗ
	               |	Документ.фин_КалендарныйПланБюджетнойКампании.ГрафикПроцесса КАК ГрафикПроцесса
	               |ГДЕ
	               |	ГрафикПроцесса.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Диаграмма
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДиаграммаГанта";
	КомандаПечати.Представление = НСтр("ru = 'Диаграмма Ганта'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("ПечатьНепроведенныхДокументов")<>Истина;
	КомандаПечати.Порядок = 50;
	
	// Таблица
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КалендарныйПлан";
	КомандаПечати.Представление = НСтр("ru = 'Календарный план'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьДополнительноеПравоПользователя("ПечатьНепроведенныхДокументов")<>Истина;
	КомандаПечати.Порядок = 60;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДиаграммаГанта") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДиаграммаГанта",
			НСтр("ru = 'Диаграмма Ганта'"),
			ПечатьДиаграммы(МассивОбъектов, ОбъектыПечати),
			,
			);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КалендарныйПлан") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КалендарныйПлан",
			НСтр("ru = 'Календарный план'"),
			ПечатьКалендарногоПлана(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.фин_КалендарныйПланБюджетнойКампании.КалендарныйПлан");
	КонецЕсли;
	

	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Подготовка табличных печатных документов.

// Функция формирует табличный документ с печатной формой 
// 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма 
//
Функция ПечатьДиаграммы(МассивОбъектов, ОбъектыПечати)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "фин_КалендарныйПланБюджетнойКампании_ДиаграммаГанта";
	
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Для Каждого ДокументОбъект Из МассивОбъектов Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Область = ТабДокумент.Область("R"+Формат(ТабДокумент.ВысотаТаблицы+1,"ЧГ=")+"C2");
		Диаграмма = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.ДиаграммаГанта);
		Диаграмма.Лево = 10;
		Диаграмма.Верх = Область.Верх;
		Диаграмма.Высота = 180;
		Диаграмма.Ширина = 230;
		Документы.фин_КалендарныйПланБюджетнойКампании.ОбновитьДиаграмму(ДокументОбъект,Диаграмма.Объект);
		// Первую колонку не печатаем
		ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		ВставлятьРазделительСтраниц = Истина;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
	
КонецФункции

// Функция формирует табличный документ с печатной формой 
// 
//
// Возвращаемое значение:
//  Табличный документ - печатная форма 
//
Функция ПечатьКалендарногоПлана(МассивОбъектов, ОбъектыПечати)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = Документы.фин_КалендарныйПланБюджетнойКампании.ПолучитьМакет("КалендарныйПлан");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "фин_КалендарныйПланБюджетнойКампании_КалендарныйПлан";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПроцесса.Ссылка КАК Ссылка,
		|	ГрафикПроцесса.НомерСтроки,
		|	ГрафикПроцесса.ВидЗадачи КАК ВидЗадачи,
		|	ГрафикПроцесса.Бюджет КАК Бюджет,
		|	ГрафикПроцесса.ЭтапБюджетногоПроцесса,
		|	ГрафикПроцесса.Ранг КАК Ранг,
		|	ГрафикПроцесса.Пользователь,
		|	ГрафикПроцесса.ДатаНачала КАК ДатаНачала,
		|	ГрафикПроцесса.ДатаЗавершения КАК ДатаЗавершения,
		|	ГрафикПроцесса.УровеньДетализации КАК УровеньДетализации,
		|	ГрафикПроцесса.Исполнитель,
		|	ГрафикПроцесса.Ссылка.Организация КАК Организация,
		|	ГрафикПроцесса.Ссылка.ПериодПланирования КАК ПериодПланирования,
		|	ГрафикПроцесса.Ссылка.Сценарий КАК Сценарий,
		|	ГрафикПроцесса.Ссылка.Автор КАК Автор,
		|	ГрафикПроцесса.Ссылка.Ответственный КАК Ответственный,
		|	ВЫБОР
		|		КОГДА ГрафикПроцесса.ЭтапБюджетногоПроцесса = ЗНАЧЕНИЕ(Справочник.фин_ЭтапыБюджетногоПроцесса.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЭтаповЗаполнено,
		|	ВЫБОР
		|		КОГДА ГрафикПроцесса.УровеньДетализации ССЫЛКА Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+"
		|				И ГрафикПроцесса.УровеньДетализации <> ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА ГрафикПроцесса.УровеньДетализации ССЫЛКА Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+"
		|				И ГрафикПроцесса.УровеньДетализации <> ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДетализацииЗаполнено,
		|	ГрафикПроцесса.Ссылка.Номер КАК НомерДокумента,
		|	ГрафикПроцесса.Ссылка.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.фин_КалендарныйПланБюджетнойКампании.ГрафикПроцесса КАК ГрафикПроцесса
		|ГДЕ
		|	ГрафикПроцесса.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ранг,
		|	Бюджет,
		|	ВидЗадачи,
		|	УровеньДетализации,
		|	ДатаНачала,
		|	ДатаЗавершения
		|ИТОГИ
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(ПериодПланирования),
		|	МАКСИМУМ(Сценарий),
		|	МАКСИМУМ(Автор),
		|	МАКСИМУМ(Ответственный),
		|	СУММА(ЭтаповЗаполнено),
		|	СУММА(ДетализацииЗаполнено),
		|	МАКСИМУМ(НомерДокумента),
		|	МАКСИМУМ(ДатаДокумента)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	ВставлятьРазделительСтраниц = Ложь;
	
	Для Каждого ДокументОбъект Из МассивОбъектов Цикл
		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ВыборкаСсылка.НайтиСледующий(Новый Структура("Ссылка",ДокументОбъект))=Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьШапкаБюджет = Макет.ПолучитьОбласть("Шапка|Бюджет");
		ОбластьШапкаБюджет.Параметры.Заполнить(ВыборкаСсылка);
		ОбластьШапкаБюджет.Параметры.ПредставлениеПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеИнтервалаСтрокой(ВыборкаСсылка.ПериодПланирования,ВыборкаСсылка.Сценарий);
		ТабДокумент.Вывести(ОбластьШапкаБюджет);
		Если ВыборкаСсылка.ДетализацииЗаполнено>0 Тогда
			ОбластьШапкаДетализация = Макет.ПолучитьОбласть("Шапка|Детализация");
			ТабДокумент.Присоединить(ОбластьШапкаДетализация);
		КонецЕсли;
		Если ВыборкаСсылка.ЭтаповЗаполнено>0 Тогда
			ОбластьШапкаЭтап = Макет.ПолучитьОбласть("Шапка|Этап");
			ТабДокумент.Присоединить(ОбластьШапкаЭтап);
		КонецЕсли;
		ОбластьШапкаСроки = Макет.ПолучитьОбласть("Шапка|Сроки");
		ОбластьШапкаСроки.Параметры.Заполнить(ВыборкаСсылка);
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") Тогда
			ОбластьШапкаСроки.Параметры.ПредставлениеОрганизации = ВыборкаСсылка.Организация;
			//Колонка = 4+?(ВыборкаСсылка.ДетализацииЗаполнено>0,1,0)+?(ВыборкаСсылка.ЭтаповЗаполнено>0,1,0);
			//ТабДокумент.Область("R2C"+Строка(Колонка)).Текст = "Организация";
		Иначе
			ОбластьШапкаСроки.Область("R2").Очистить(Истина,Истина,Истина);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьШапкаСроки);
		
		Выборка = ВыборкаСсылка.Выбрать();
		НомерСтроки = 1;
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаБюджет = Макет.ПолучитьОбласть("Строка|Бюджет");
			ОбластьСтрокаБюджет.Параметры.Заполнить(Выборка);
			ОбластьСтрокаБюджет.Параметры.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			ТабДокумент.Вывести(ОбластьСтрокаБюджет);
			Если ВыборкаСсылка.ДетализацииЗаполнено>0 Тогда
				ОбластьСтрокаДетализация = Макет.ПолучитьОбласть("Строка|Детализация");
				ОбластьСтрокаДетализация.Параметры.Заполнить(Выборка);
				ТабДокумент.Присоединить(ОбластьСтрокаДетализация);
			КонецЕсли;
			Если ВыборкаСсылка.ЭтаповЗаполнено>0 Тогда
				ОбластьСтрокаЭтап = Макет.ПолучитьОбласть("Строка|Этап");
				ОбластьСтрокаЭтап.Параметры.Заполнить(Выборка);
				ТабДокумент.Присоединить(ОбластьСтрокаЭтап);
			КонецЕсли;
			ОбластьСтрокаСроки = Макет.ПолучитьОбласть("Строка|Сроки");
			ОбластьСтрокаСроки.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьСтрокаСроки);
			
		КонецЦикла;
		
		
		// Первую колонку не печатаем
		ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		ВставлятьРазделительСтраниц = Истина;
		
		ВыборкаСсылка.Сбросить();
	КонецЦикла;
	
	Возврат ТабДокумент;
	
	
КонецФункции




////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли