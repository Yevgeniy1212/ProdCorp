////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы(ТабДокумент,имяМакета)
	
	Возврат ТабДокумент;

КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
			ТабДокумент = ПечатьТаблицы( Новый ТабличныйДокумент,"Макет");
	ИначеЕсли ИмяМакета = "Квартал" Тогда
			ТабДокумент = ПечатьТаблицы( Новый ТабличныйДокумент,"МакетКвартал");
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

Процедура РассчитатДанныеПоПлану() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ПериодПланирования));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ПериодПланирования)));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БюджетОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|   БюджетОбороты.СуммаОборот КАК Сумма
	|ИЗ
	|		РегистрНакопления.б_Бюджет.Обороты(&Началопериода, &КонецПериода, , Бюджет = &ФормируемыйБюджет) КАК БюджетОбороты
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ РасчетнаяТаблица Цикл
		
		СтрокаТЗ = тз.Найти(СтрокаТЧ.СтатьяБюджета,"СтатьяБюджета");
		
		СтрокаТЧ.Сумма = ?(СтрокаТЗ=НЕОПРЕДЕЛЕНО,0,СтрокаТЗ.Сумма);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатДанныеПоФакту() Экспорт
	
	мСубконтоДоходы = Новый Массив;
	мСубконтоДоходы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	
	мСубконтоТипыОпераций = Новый Массив;
	мСубконтоТипыОпераций.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	мСубконтоСтатьиЗатрат = Новый Массив;
	мСубконтоСтатьиЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	мСубконтоОС = Новый Массив;
	мСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	мСубконтоНМА = Новый Массив;
	мСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	
	мСписокСчетовПоставщиков = Новый Массив;
	мСписокСчетовПоставщиков.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ПериодПланирования));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ПериодПланирования)));
	
	Запрос.УстановитьПараметр("мСписокСчетовПоставщиков",мСписокСчетовПоставщиков);
	Запрос.УстановитьПараметр("мСубконтоОС",мСубконтоОС);
	Запрос.УстановитьПараметр("мСубконтоНМА",мСубконтоНМА);
	Запрос.УстановитьПараметр("мСубконтоСтатьиЗатрат",мСубконтоСтатьиЗатрат);
	Запрос.УстановитьПараметр("мСубконтоДоходы",мСубконтоДоходы);
	Запрос.УстановитьПараметр("мСубконтоТипыОпераций",мСубконтоТипыОпераций);

	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ФактБУ.СтатьяБюджета КАК СтатьяБюджета,
	|   Сумма(ФактБУ.Сумма) КАК Сумма
	|Поместить ФактическиеОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСчетамБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСчетамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК б_СоответствияСтатейБюджетаСчетамБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СоответствияСтатейБюджетаСчетамБУ.Счет
	|					ИЗ
	|						РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК СоответствияСтатейБюджетаСчетамБУ),
	|				,
	|				,
	|				,
	|				) КАК ТиповойОбороты
	|		ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСчетамБУ.Счет)
	|    
	|	Объединить Все
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаДоходамБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаДоходамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|				ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК б_СоответствияСтатейБюджетаДоходамБУ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Регистратор,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаДоходамБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК СоответствияСтатейБюджетаДоходамБУ),
	|					&мСубконтоДоходы,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаДоходамБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаДоходамБУ.Доход)
	|
	|	Объединить Все
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаТипамОперацийБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|				ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК б_СоответствияСтатейБюджетаТипамОперацийБУ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Регистратор,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаТипамОперацийБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК СоответствияСтатейБюджетаТипамОперацийБУ),
	|					&мСубконтоТипыОпераций,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаТипамОперацийБУ.ТипОперации)
	|
	|	Объединить Все
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|				ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК б_СоответствияСтатейБюджетаСтатьямЗатратБУ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Регистратор,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК СоответствияСтатейБюджетаСтатьямЗатратБУ),
	|					&мСубконтоСтатьиЗатрат,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяЗатрат)
	|
	|	Объединить Все
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаГруппамОСБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаГруппамОСБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаГруппамОСБУ.ПризнакСуммы
	|				ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаГруппамОСБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК б_СоответствияСтатейБюджетаГруппамОСБУ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Регистратор,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаГруппамОСБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК СоответствияСтатейБюджетаГруппамОСБУ),
	|					&мСубконтоОС,
	|					,
	|					КорСчет в ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаГруппамОСБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ГруппаОС = б_СоответствияСтатейБюджетаГруппамОСБУ.ГруппаОС)
	|
	|	Объединить Все
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаВидамНМАБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаВидамНМАБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаВидамНМАБУ.ПризнакСуммы
	|				ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаВидамНМАБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК б_СоответствияСтатейБюджетаВидамНМАБУ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Регистратор,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаВидамНМАБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК СоответствияСтатейБюджетаВидамНМАБУ),
	|					&мСубконтоОС,
	|					,
	|					КорСчет в ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаВидамНМАБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ВидНМА = б_СоответствияСтатейБюджетаВидамНМАБУ.ВидНМА)
	|    ) КАК ФактБУ
 	|
	|ГДЕ ФактБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|    СГРУППИРОВАТЬ ПО ФактБУ.СтатьяБюджета
 	|;
 	|
	|	ВЫБРАТЬ
	|		Фактпериода.СтатьяБюджета КАК СтатьяБюджета,
	|		Фактпериода.Сумма КАК Сумма
	|	ИЗ ФактическиеОбороты  КАК Фактпериода
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗависимостиСтатейБюджета.ЗависимаяСтатья,
	|		Сумма(ЕстьNull(ФактическийОборотПоБУ.Сумма,0)* ЗависимостиСтатейБюджета.ПризнакСуммы) КАК Сумма
	|	ИЗ
	|		РегистрСведений.б_ЗависимыеСтатьиДляФакторногоАнализа КАК ЗависимостиСтатейБюджета
    |	Внутреннее Соединение ФактическиеОбороты КАК ФактическийОборотПоБУ
    |		ПО ЗависимостиСтатейБюджета.ВлияющаяСтатья = ФактическийОборотПоБУ.СтатьяБюджета
	|	ГДЕ
	|		ЗависимостиСтатейБюджета.Бюджет = &ФормируемыйБюджет
	|    СГРУППИРОВАТЬ ПО ЗависимостиСтатейБюджета.ЗависимаяСтатья
    |";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ РасчетнаяТаблица Цикл
		
		СтрокаТЗ = тз.Найти(СтрокаТЧ.СтатьяБюджета,"СтатьяБюджета");
		
		СтрокаТЧ.Сумма = ?(СтрокаТЗ=НЕОПРЕДЕЛЕНО,0,СтрокаТЗ.Сумма);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет,Квартал","Расчетная таблица","Расчетная таблица (только квартал)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
									|ФормируемыйБюджет,
									|Сценарий,
									|ПериодПланирования");
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция ПодготовитьТаблицу(РезультатЗапросаПоРасчетнойТаблице,СтруктураШапкиДокумента)
	
	ТаблицаПоРасчетнойТаблице = РезультатЗапросаПоРасчетнойТаблице.Выгрузить();
	
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Бюджет");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Сценарий");
	ТаблицаПоРасчетнойТаблице.Колонки.Добавить("Организация");
	
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФормируемыйБюджет, "Бюджет");
	ТаблицаПоРасчетнойТаблице.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сценарий, "Сценарий");
	
	Возврат ТаблицаПоРасчетнойТаблице;
КонецФункции

Функция СформироватьТаблицуДляДоходовИРасходов(СтруктураШапкиДокумента)
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетнаяТаблица.ссылка.ФормируемыйБюджет КАК Бюджет,
		|	РасчетнаяТаблица.СтатьяБюджета КАК СтатьяБюджета,
		|	Сумма(РасчетнаяТаблица.Сумма) КАК Сумма,
		|	Сумма(РасчетнаяТаблица.СуммаПлан) КАК СуммаПлан,
		|	Сумма(Количество) КАК Количество,
		|	1 КАК ПризнакКоличество
		// Добавлено Бит Макеев (
		|	,РасчетнаяТаблица.бит_ВидЗаимствования КАК ВидЗаимствования,
		|	РасчетнаяТаблица.бит_НаименованиеЗаимствования КАК НаименованиеЗаимствования,
		|	СУММА(РасчетнаяТаблица.Сумма) КАК СуммаФакт
		// )
		|ИЗ
		|	Документ.б_УстановкаФактическихОборотовПоБюджетамДС.РасчетнаяТаблица КАК РасчетнаяТаблица
		|ГДЕ
		|	РасчетнаяТаблица.ссылка = &ТекДокумент
		|	И НЕ РасчетнаяТаблица.СтатьяБюджета.ЭтоГруппа
		|СГРУППИРОВАТЬ ПО РасчетнаяТаблица.ссылка.ФормируемыйБюджет,РасчетнаяТаблица.СтатьяБюджета
		// Добавлено Бит Макеев (
		|	,РасчетнаяТаблица.бит_ВидЗаимствования,
		|	РасчетнаяТаблица.бит_НаименованиеЗаимствования
		// )
		|
		|";
		
		тз = Запрос.Выполнить().Выгрузить();
		
	тз.Колонки.Добавить("Организация");
	тз.Колонки.Добавить("Период");
	тз.Колонки.Добавить("Статус");
	
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.Состояние, "Статус");
	тз.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПериодПланирования, "Период");
	
	Возврат тз;	
КонецФункции

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
									 Отказ, Заголовок)
									
	// Выполнить движения по регистру накопления 	
	НаборДвижений = Движения.б_БюджетФакт;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ТаблицаДанных = СформироватьТаблицуДляДоходовИРасходов(СтруктураШапкиДокумента);
	ТаблицаДанных.Колонки.Добавить("Активность");
	ТаблицаДанных.ЗаполнитьЗначения(Истина, "Активность");
	
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДанных, ТаблицаДвижений);
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.б_БюджетФакт.ВыполнитьДвижения();
	КонецЕсли;

Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							 Отказ, Заголовок);
							
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
