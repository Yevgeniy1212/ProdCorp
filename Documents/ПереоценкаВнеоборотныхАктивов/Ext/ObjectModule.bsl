
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПрименятьПараметрыАмортизацииВТекМесяце Экспорт; 

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, МетодПереоценки, СчетДоходовБУ, СчетРасходовБУ";
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	Если СтруктураШапкиДокумента.НеобходимостьОтражениявНУ Тогда		
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");		
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверим на виды операций, которые не будут полностью отработаны в данном документе
	Если СтруктураШапкиДокумента.ВидСобытияОС <> Перечисления.ВидыСобытийОС.Переоценка Тогда

		ОбщегоНазначения.ОшибкаПриПроведении("События с основными средствами с видом <"+строка(СтруктураШапкиДокумента.ВидСобытияОС)+">
		|не будут полноценно отражены данным документом (учетное состояние ОС не изменится)!",,Заголовок);

	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Проверим соответствие организайий ОС и организации документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      				, ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация"				, СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     				, СтруктураШапкиДокумента.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчет.Организация КАК Организация,
	               |	ОсновныеСредства.Код КАК Инв,
	               |	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	               |	ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.Ссылка) КАК ОсновноеСредствоПредставление
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |				&ДатаСреза,
	               |				ОсновноеСредство В (&СписокОС)
	               |					И Организация = &ВыбОрганизация) КАК МестонахождениеОСБухгалтерскийУчет
	               |		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	               |ГДЕ
	               |	ОсновныеСредства.Ссылка В(&СписокОС)
	               |	И (НЕ ОсновныеСредства.ЭтоГруппа)
	               |	И МестонахождениеОСБухгалтерскийУчет.Организация ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		Отказ = Истина;

		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(("Бух.учет: Несоответствие организаций ОС """ + СокрЛП(Выборка.ОсновноеСредствоПредставление) + """ код <" + СокрЛП(Выборка.Инв) + "> и организации указанной в документе."),, Заголовок);
		КонецЦикла;

	КонецЕсли;
	
	// Проверим соответствие структурного подразделения ОС и структурного подразделения документа

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      				, ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация"				, СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     				, СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"    , СтруктураШапкиДокумента.СтруктурноеПодразделение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестонахождениеОСБухгалтерскийУчет.Организация КАК Организация,
	               |	ОсновныеСредства.Код КАК Инв,
	               |	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	               |	ПРЕДСТАВЛЕНИЕ(ОсновныеСредства.Ссылка) КАК ОсновноеСредствоПредставление,
	               |	МестонахождениеОСБухгалтерскийУчет.Местонахождение
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	               |				&ДатаСреза,
	               |				ОсновноеСредство В (&СписокОС)
	               |					И Организация = &ВыбОрганизация) КАК МестонахождениеОСБухгалтерскийУчет
	               |		ПО ОсновныеСредства.Ссылка = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	               |ГДЕ
	               |	ОсновныеСредства.Ссылка В(&СписокОС)
	               |	И (НЕ ОсновныеСредства.ЭтоГруппа)
				   |	И МестонахождениеОСБухгалтерскийУчет.СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |	И МестонахождениеОСБухгалтерскийУчет.Организация ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда

		Отказ = Истина;

		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьОбОшибке(("Бух.учет: Несоответствие структурного подразделения ОС """ + СокрЛП(Выборка.ОсновноеСредствоПредставление) + """ код <" + СокрЛП(Выборка.Инв) + "> и структурного подразделения указанного в документе."),, Заголовок);
		КонецЦикла;

	КонецЕсли;
	
	// проверим заполнен ли счет учета амортизации основного средства, так как при принятии к учету
	// нет контроля к его заполнению.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС"      , ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ВыбОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаСреза"     , СтруктураШапкиДокумента.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	СчетаУчетаОССрезПоследних.ОсновноеСредство,
	               |	СчетаУчетаОССрезПоследних.ОсновноеСредство.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаОС.СрезПоследних(
	               |			&ДатаСреза,
	               |			Организация = &ВыбОрганизация
	               |				И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОССрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.СчетНачисленияАмортизацииБУ) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(("Бух.учет: для основного средства """ + Выборка.ОсновноеСредство + """ код <" + СокрЛП(Выборка.Код) + "> не указан счет учета амортизации"),, Заголовок);
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры // ПроверкаРеквизитов()

// Выполняет движения по регистрам НУ
//
Процедура ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)
	
	Если не СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		Возврат;
	КонецЕсли;	
	
	ПроводкиНУ			= Движения.Налоговый;	
	ВидУчета		 	= СтруктураШапкиДокумента.ВидУчетаНУ;
	
	ДатаДокумента      	= СтруктураШапкиДокумента.Дата;
	ТекОрганизация     	= СтруктураШапкиДокумента.Организация;
    ТекМетодПереоценки 	= СтруктураШапкиДокумента.МетодПереоценки;
	
	ТекСчетДоходовНУ      = СтруктураШапкиДокумента.СчетДоходовНУ;
	ТекСубконтоДоходовНУ1 = СтруктураШапкиДокумента.СубконтоДоходовНУ1;
	ТекСубконтоДоходовНУ2 = СтруктураШапкиДокумента.СубконтоДоходовНУ2;
	ТекСубконтоДоходовНУ3 = СтруктураШапкиДокумента.СубконтоДоходовНУ3;
	
	ТекСчетРасходовНУ	   = СтруктураШапкиДокумента.СчетРасходовНУ;
	ТекСубконтоРасходовНУ1 = СтруктураШапкиДокумента.СубконтоРасходовНУ1;
	ТекСубконтоРасходовНУ2 = СтруктураШапкиДокумента.СубконтоРасходовНУ2;
	ТекСубконтоРасходовНУ3 = СтруктураШапкиДокумента.СубконтоРасходовНУ3;

	Для Каждого СтрокаОС из  ТаблицаПоОС Цикл
		//рассчитываем новую стоимость для вычисления амортизации, а также суммы переоценки 
		СтоимостьДляВычисленияАмортизации 	= 0;
		СуммаПереоценкиСтоимости		  	= 0;
		СуммаПереоценкиАмортизации		  	= 0;
		ТекОС 								= СтрокаОС.ОсновноеСредство;
		
		Если ТекМетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.ПропорциональнаяПереоценкаНакопленнойАмортизации Тогда
			СуммаПереоценкиСтоимости   = Окр(СтрокаОС.СуммаПереоценкиСтоимости, 2) - Окр(СтрокаОС.СуммаПереоценкиАмортизации, 2);			
		Иначе
			СуммаПереоценкиСтоимости = Окр(СтрокаОС.СуммаПереоценки, 2);
		КонецЕсли;
		
		// дооценка
		Если СуммаПереоценкиСтоимости > 0 Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = ДатаДокумента;
			ПроводкаНУ.Организация  = ТекОрганизация;
			ПроводкаНУ.Содержание   = "Реверс убытка от  переоценки стоимости ОС";
			ПроводкаНУ.НомерЖурнала = "ОС";
			ПроводкаНУ.Сумма        = СуммаПереоценкиСтоимости;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
			ПроводкаНУ.СчетДт 		= ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС, ТекОрганизация, ДатаДокумента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);	
			
			ПроводкаНУ.СчетКт 		= ТекСчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, ТекСубконтоДоходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, ТекСубконтоДоходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ТекСубконтоДоходовНУ3);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчета);					
		КонецЕсли;
		
		// уценка
		Если СуммаПереоценкиСтоимости < 0 Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = ДатаДокумента;
			ПроводкаНУ.Организация  = ТекОрганизация;
			ПроводкаНУ.Содержание   = "Переоценка стоимости ОС";
			ПроводкаНУ.НомерЖурнала = "ОС";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
			ПроводкаНУ.СчетДт = ТекСчетРасходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, ТекСубконтоРасходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, ТекСубконтоРасходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, ТекСубконтоРасходовНУ3);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
						
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(ТекОС, ТекОрганизация, ДатаДокумента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Поступление);
						
			ПроводкаНУ.Сумма = -СуммаПереоценкиСтоимости;		
						
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчета);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок)
	
	#Если Клиент Тогда
	Сообщить(Заголовок);
	#КонецЕсли
	
	ДатаДокумента      			= СтруктураШапкиДокумента.Дата;
	ТекОрганизация     			= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
    ТекМетодПереоценки			= СтруктураШапкиДокумента.МетодПереоценки;
	ТекДокумент		   			= СтруктураШапкиДокумента.Ссылка;	
	
	ТекСчетДоходовБУ      = СтруктураШапкиДокумента.СчетДоходовБУ;
	ТекСубконтоДоходовБУ1 = СтруктураШапкиДокумента.СубконтоДоходовБУ1;
	ТекСубконтоДоходовБУ2 = СтруктураШапкиДокумента.СубконтоДоходовБУ2;
	ТекСубконтоДоходовБУ3 = СтруктураШапкиДокумента.СубконтоДоходовБУ3;
	
	ТекСчетРасходовБУ	   = СтруктураШапкиДокумента.СчетРасходовБУ;
	ТекСубконтоРасходовБУ1 = СтруктураШапкиДокумента.СубконтоРасходовБУ1;
	ТекСубконтоРасходовБУ2 = СтруктураШапкиДокумента.СубконтоРасходовБУ2;
	ТекСубконтоРасходовБУ3 = СтруктураШапкиДокумента.СубконтоРасходовБУ3;
	
	СобытияОС              = Движения.СобытияОСОрганизаций;
	ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ПереоценкаВА		   = Движения.ПереоценкаВнеоборотныхАктивов;	
	ПроводкиБУ             = Движения.Типовой;

	//запрос по списку ОС, которые переоцениваются с целью расчета суммм переоценок стоимости и амортизации  в зависимости от выбранного 
	//метода переоценки  ПропорциональнаяПереоценкаНакопленнойАмортизации или  СписаниеАмортизацииПриПереоценке, а также получения новых данных 
	//для расчета амортизации
	ЗапросСписокПереоцененныхОС  = Новый Запрос;
	ЗапросСписокПереоцененныхОС.УстановитьПараметр("СписокОС",    ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	ЗапросСписокПереоцененныхОС.УстановитьПараметр("Период",      ДатаДокумента);
	ЗапросСписокПереоцененныхОС.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросСписокПереоцененныхОС.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);

	ЗапросСписокПереоцененныхОС.УстановитьПараметр("Ссылка", 	  ТекДокумент);
	ЗапросСписокПереоцененныхОС.УстановитьПараметр("Состояние",   Перечисления.ВидыСостоянийОС.ПринятоКУчету);
	
	ЗапросСписокПереоцененныхОС.Текст = "ВЫБРАТЬ
	|	ПереоценкаВА.ОсновноеСредство,
	|	ПереоценкаВА.СтоимостьБУ,
	|	ПереоценкаВА.АмортизацияБУ,
	|	ПереоценкаВА.АмортизацияЗаМесяцБУ,
	|	ПереоценкаВА.СписываемаяСуммаРезерваЗаМесяцБУ,
	|	ПереоценкаВА.ПереоцененнаяСтоимостьБУ,
	|	ПереоценкаВА.ЛиквидационнаяСтоимостьБУ,
	|	ПереоценкаВА.ПереоцененнаяСтоимостьБУ - (ПереоценкаВА.СтоимостьБУ - ПереоценкаВА.АмортизацияБУ - ПереоценкаВА.АмортизацияЗаМесяцБУ) КАК СуммаПереоценки,
	|	ВЫБОР
	|		КОГДА ПереоценкаВА.СтоимостьБУ - ПереоценкаВА.АмортизацияБУ - ПереоценкаВА.АмортизацияЗаМесяцБУ <> 0
	|			ТОГДА ПереоценкаВА.ПереоцененнаяСтоимостьБУ * (ПереоценкаВА.СтоимостьБУ / (ПереоценкаВА.СтоимостьБУ - ПереоценкаВА.АмортизацияБУ - ПереоценкаВА.АмортизацияЗаМесяцБУ)) - ПереоценкаВА.СтоимостьБУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПереоценкиСтоимости,
	|	ВЫБОР
	|		КОГДА ПереоценкаВА.СтоимостьБУ - ПереоценкаВА.АмортизацияБУ - ПереоценкаВА.АмортизацияЗаМесяцБУ <> 0
	|			ТОГДА ПереоценкаВА.ПереоцененнаяСтоимостьБУ * (ПереоценкаВА.СтоимостьБУ / (ПереоценкаВА.СтоимостьБУ - ПереоценкаВА.АмортизацияБУ - ПереоценкаВА.АмортизацияЗаМесяцБУ) - 1) - (ПереоценкаВА.АмортизацияБУ + ПереоценкаВА.АмортизацияЗаМесяцБУ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПереоценкиАмортизации,
	|	ПереоценкаВА.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ПереоценкаВА
	|ИЗ
	|	Документ.ПереоценкаВнеоборотныхАктивов.ОС КАК ПереоценкаВА
	|ГДЕ
	|	ПереоценкаВА.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереоценкаВА.ОсновноеСредство,
	|	ПереоценкаВА.СтоимостьБУ,
	|	ПереоценкаВА.АмортизацияБУ,
	|	ПереоценкаВА.АмортизацияЗаМесяцБУ,
	|	ПереоценкаВА.СписываемаяСуммаРезерваЗаМесяцБУ,
	|	ПереоценкаВА.ПереоцененнаяСтоимостьБУ,
	|	ПереоценкаВА.ЛиквидационнаяСтоимостьБУ,
	|	ПереоценкаВА.СуммаПереоценки,
	|	ПереоценкаВА.СуммаПереоценкиСтоимости,
	|	ПереоценкаВА.СуммаПереоценкиАмортизации,
	|	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	|	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК ДатаПоследнихПараметровАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемПродукцииРабот,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК ОбъемВыработанныхПродукцииРабот,
	|	ЕСТЬNULL(НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, Ложь) КАК НачислятьАмортизацию
	|ИЗ
	|	ВТ_ПереоценкаВА КАК ПереоценкаВА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПереоценкаВА.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &Период, , ОсновноеСредство В (&СписокОС)) КАК ВыработкаОСОбороты
	|		ПО ПереоценкаВА.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОССрезПоследних
	|		ПО ПереоценкаВА.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПереоценкаВА.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПереоценкаВА.НомерСтроки";
	СписокПереоцененныхОC = ЗапросСписокПереоцененныхОС.Выполнить().Выгрузить(); 									
										
	//запрос для получения непогашенных партий (положительных/отрицательных) по переоценкам ОС из списка переоценяемых ОС
	ЗапросДокументыПереоценкиВА  = Новый Запрос;
	ЗапросДокументыПереоценкиВА.УстановитьПараметр("СписокОС",    ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	ЗапросДокументыПереоценкиВА.УстановитьПараметр("Период",      ДатаДокумента);
	ЗапросДокументыПереоценкиВА.УстановитьПараметр("Организация", ТекОрганизация);
	ЗапросДокументыПереоценкиВА.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	ЗапросДокументыПереоценкиВА.Текст = "ВЫБРАТЬ
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки КАК ДокументПереоценки,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиСтоимостиОстаток КАК СуммаПереоценкиСтоимости,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.СуммаПереоценкиАмортизацииОстаток КАК СуммаПереоценкиАмортизации,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетДоходовБУ КАК СчетДоходовБУ,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ1 КАК СубконтоДоходовБУ1,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ2 КАК СубконтоДоходовБУ2,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоДоходовБУ3 КАК СубконтоДоходовБУ3,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СчетРасходовБУ КАК СчетРасходовБУ,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ1 КАК СубконтоРасходовБУ1,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ2 КАК СубконтоРасходовБУ2,
	                                    |	ПереоценкаВнеоборотныхАктивовОстатки.ДокументПереоценки.СубконтоРасходовБУ3 КАК СубконтоРасходовБУ3
	                                    |ИЗ
	                                    |	РегистрНакопления.ПереоценкаВнеоборотныхАктивов.Остатки(
	                                    |		&Период,
	                                    |		ВнеоборотныйАктив В (&СписокОС)
	                                    |		    И Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ПереоценкаВнеоборотныхАктивовОстатки
	                                    |
	                                    |УПОРЯДОЧИТЬ ПО
	                                    |	ДокументПереоценки
	                                    |ИТОГИ
	                                    |	СУММА(СуммаПереоценкиСтоимостиОстаток),
	                                    |	СУММА(СуммаПереоценкиАмортизацииОстаток)
	                                    |ПО
	                                    |	ВнеоборотныйАктив"; 	
	
	
	ДокументыПереоценкиВА = ЗапросДокументыПереоценкиВА.Выполнить();
	ВыборкаДокументовПереоценкиВА = ДокументыПереоценкиВА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаТекМестонахождение = Новый ТаблицаЗначений;
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(СтруктураШапкиДокумента.Дата);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(СтруктураШапкиДокумента.Дата);
	
	Если ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям Тогда
		СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
		ТаблицаТекМестонахождение = УправлениеВнеоборотнымиАктивами.ОпределитьТекущееМестонахождениеДляСпискаОС(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС);
	КонецЕсли;

	Для Каждого СтрокаОС Из СписокПереоцененныхОC Цикл
		
		Если СтрокаОС.СуммаПереоценки = 0 Тогда
			Сообщить("" + СокрЛП(СтрокаОС.ОсновноеСредство) +""" -  сумма переоценки равна 0, переоценка не будет произведена", СтатусСообщения.Информация);
			Продолжить;	
		Иначе
			
			ТекОС = СтрокаОС.ОсновноеСредство;
			
			// Движения по регистру СобытияОСОрганизаций
			ДвижениеСобытияОС = СобытияОС.Добавить();
			ДвижениеСобытияОС.Период        		   = ДатаДокумента;
			ДвижениеСобытияОС.Организация       	   = ТекОрганизация;
			ДвижениеСобытияОС.СтруктурноеПодразделение = ТекСтруктурноеПодразделение;
		    ДвижениеСобытияОС.ОсновноеСредство		   = ТекОС;
			ДвижениеСобытияОС.Событие        		   = СтруктураШапкиДокумента.СобытиеОС;
		    ДвижениеСобытияОС.НазваниеДокумента		   = Строка(ТекДокумент.Метаданные());
		    ДвижениеСобытияОС.НомерДокумента 		   = СтруктураШапкиДокумента.Номер;
			
			//рассчитываем новую стоимость для вычисления амортизации, а также суммы переоценки 
			СтоимостьДляВычисленияАмортизации = 0;
			СуммаПереоценкиСтоимости		  = 0;
			СуммаПереоценкиАмортизации		  = 0;
			СписываемаяСуммаРезерваЗаМесяц    = 0;
			
			СтоимостьДляВычисленияАмортизации = СтрокаОС.ПереоцененнаяСтоимостьБУ - СтрокаОС.ЛиквидационнаяСтоимостьБУ;
			СписываемаяСуммаРезерваЗаМесяц    = СтрокаОС.СписываемаяСуммаРезерваЗаМесяцБУ;
			
			Если ТекМетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.ПропорциональнаяПереоценкаНакопленнойАмортизации Тогда
				СуммаПереоценкиСтоимости   = Окр(СтрокаОС.СуммаПереоценкиСтоимости, 2);
				СуммаПереоценкиАмортизации = Окр(СтрокаОС.СуммаПереоценкиАмортизации, 2);
				Сообщить(Строка(ТекОС) + ", сумма корректировки стоимости: " + Строка(СуммаПереоценкиСтоимости)	+ " /сумма корректировки амортизации: "	+  Строка(СуммаПереоценкиАмортизации) );
			Иначе
				СуммаПереоценкиСтоимости = Окр(СтрокаОС.СуммаПереоценки, 2);
				Сообщить(Строка(ТекОС) + ", сумма корректировки стоимости:  " + Строка(СуммаПереоценкиСтоимости));
			КонецЕсли;
			
			// Движения по регистру ПараметрыАмортизации
			
			СрокИспользованияПослеПоследнихПараметровАмортизации = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(СтрокаОС.ДатаПоследнихПараметровАмортизации, ДатаДокумента); 
			Если СтрокаОС.НачислятьАмортизацию Тогда
				ДвижениеПараметрыАмортизацииОС = ПараметрыАмортизацииОС.Добавить();
				ДвижениеПараметрыАмортизацииОС.Период                                      = ДатаДокумента;
				ДвижениеПараметрыАмортизацииОС.ОсновноеСредство                            = ТекОС;
				ДвижениеПараметрыАмортизацииОС.Организация                                 = ТекОрганизация;
				ДвижениеПараметрыАмортизацииОС.СтруктурноеПодразделение                    = ТекСтруктурноеПодразделение;
				ДвижениеПараметрыАмортизацииОС.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользования;
				ДвижениеПараметрыАмортизацииОС.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизации - СрокИспользованияПослеПоследнихПараметровАмортизации ;
				ДвижениеПараметрыАмортизацииОС.ОбъемПродукцииРабот                         = СтрокаОС.ОбъемПродукцииРабот;
				//
				
				ДатаОкончанияДляРасчетаФактДанных = ?(мПрименятьПараметрыАмортизацииВТекМесяце, ДобавитьМесяц(КонецМесяца(ДатаДокумента), -1), ДатаДокумента);
				Если СтрокаОС.ОбъемВыработанныхПродукцииРабот <> 0 Тогда
					ДвижениеПараметрыАмортизацииОС.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации - УправлениеВнеоборотнымиАктивами.ОпределитьОбъемВыработкиОС(СтрокаОС.ДатаПоследнихПараметровАмортизации, ДатаОкончанияДляРасчетаФактДанных, ТекОС);
				КонецЕсли;	
				
				ДвижениеПараметрыАмортизацииОС.СтоимостьДляВычисленияАмортизации = СтоимостьДляВычисленияАмортизации;	
				ДвижениеПараметрыАмортизацииОС.ЛиквидационнаяСтоимость			 = СтрокаОС.ЛиквидационнаяСтоимостьБУ;
				
				//рассчитаем новый коэффициент амортизации
				Если (СтрокаОС.СрокИспользованияДляВычисленияАмортизации - СрокИспользованияПослеПоследнихПараметровАмортизации)<> 0 Тогда
					ДвижениеПараметрыАмортизацииОС.КоэффициентАмортизации = Окр((12/(СтрокаОС.СрокИспользованияДляВычисленияАмортизации - СрокИспользованияПослеПоследнихПараметровАмортизации)) * 100, 2);
				Иначе
					ДвижениеПараметрыАмортизацииОС.КоэффициентАмортизации = 0;	
				КонецЕсли;	
				ДвижениеПараметрыАмортизацииОС.КоэффициентУскорения = СтрокаОС.КоэффициентУскорения;
			КонецЕсли;
			//закрываем сумму накопленной амортизации, если  выбран метод переоценки  СписаниеАмортизацииПриПереоценке
			Если ТекМетодПереоценки = Перечисления.МетодыПереоценкиВнеоборотныхАктивов.СписаниеАмортизацииПриПереоценке Тогда
				Если  (СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ) <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДокумента;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Списана амортизация при переоценке";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = (СтрокаОС.АмортизацияБУ + СтрокаОС.АмортизацияЗаМесяцБУ);
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	        
					Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
					Проводка.СчетКт = СтрокаОС.СчетУчетаБУ ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					
					УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина, Истина);
					
				КонецЕсли;	
			КонецЕсли;
			
			ВыборкаДокументовПереоценкиВА.Сбросить();
			
			Если ВыборкаДокументовПереоценкиВА.НайтиСледующий(ТекОС, "ВнеоборотныйАктив") Тогда
				// были записи по переоценкам ВА, выбираем в цикле все партии переоценок и делаем корректировки	

				СписокПереоценокОС = ВыборкаДокументовПереоценкиВА.Выбрать();
				
				Пока СписокПереоценокОС.Следующий() и ((СуммаПереоценкиСтоимости <> 0) или (СуммаПереоценкиАмортизации <>0)) Цикл
						
					//При дооценки ОС делаем реверс имеющегося убытка по переоценки данного ОС 
					Если (СуммаПереоценкиСтоимости > 0)  или (СуммаПереоценкиАмортизации > 0) Тогда
						//выбираем все не закрытые отрицательные остатки по переоценкам
						Если (СписокПереоценокОС.СуммаПереоценкиСтоимости < 0) или (СписокПереоценокОС.СуммаПереоценкиАмортизации > 0)  Тогда
							
							// находим сумму убытка партии, которую можем реверсировать 
							РеверсируемаяСумма = СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации;
							
							Если РеверсируемаяСумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ТекРеверсируемаяСумма = МИН(-РеверсируемаяСумма, (СуммаПереоценкиСтоимости-СуммаПереоценкиАмортизации));
							
							Если СуммаПереоценкиАмортизации <> 0 Тогда
								ПроцентСтоимости = СписокПереоценокОС.СуммаПереоценкиСтоимости / (СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации);
								
								СуммаЗакрытияПереоценкиСтоимости = ПроцентСтоимости * ТекРеверсируемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = СуммаЗакрытияПереоценкиСтоимости - ТекРеверсируемаяСумма;
							Иначе
								СуммаЗакрытияПереоценкиСтоимости = ТекРеверсируемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = 0;
							КонецЕсли;	
							
							// может оказаться так, что поссчитанная применяя коэффициент, СуммаЗакрытияПереоценкиАмортизации больше суммы переоценки амортизации, тогда нужно 
							// в качестве СуммаЗакрытияПереоценкиАмортизации взять сумму переоценки амортизации
							Если СуммаЗакрытияПереоценкиАмортизации > СуммаПереоценкиАмортизации Тогда
								Разница = СуммаЗакрытияПереоценкиАмортизации - СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиАмортизации = СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиСтоимости = СуммаЗакрытияПереоценкиСтоимости - Разница;
							КонецЕсли;	
							
							//// так как сумма переоценки распределяется на переоценку стоимости и амортизации, нужно учесть сумму переоценки амортизации... 
							//РеверсируемаяСумма = РеверсируемаяСумма - СуммаПереоценкиАмортизации;
							//
							//СуммаЗакрытияПереоценкиСтоимости   = Мин(- СписокПереоценокОС.СуммаПереоценкиСтоимости,  СуммаПереоценкиСтоимости, -РеверсируемаяСумма);
							//СуммаЗакрытияПереоценкиАмортизации = Мин( СписокПереоценокОС.СуммаПереоценкиАмортизации, СуммаПереоценкиАмортизации);
							 							 
							// по бух. учету реверс дохода/убытка
							Если СуммаЗакрытияПереоценкиСтоимости <> 0 Тогда
								Проводка = ПроводкиБУ.Добавить();
								Проводка.Период       = ДатаДокумента;
								Проводка.Организация  = ТекОрганизация;
								Проводка.Содержание   = "Реверс убытка от  переоценки стоимости ОС";
								Проводка.НомерЖурнала = "ОС";
								Проводка.Сумма        = СуммаЗакрытияПереоценкиСтоимости;
								
								ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
	                
								Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
								УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
								
								Проводка.СчетКт = СписокПереоценокОС.СчетРасходовБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СписокПереоценокОС.СубконтоРасходовБУ1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СписокПереоценокОС.СубконтоРасходовБУ2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СписокПереоценокОС.СубконтоРасходовБУ3);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
						 	КонецЕсли;	
						 
							// Если СуммаПереоценкиАмортизации <> 0 Тогда
							
							// проверяем не равна ли сумма переоценки аморртизации нулю, если равна значит метод переоценки СписаниеАмортизацииПриПереоценке
							// и в этом случае не нужно делать реверс по амортизации...
							//
							Если СуммаЗакрытияПереоценкиАмортизации <> 0 И СуммаПереоценкиАмортизации <> 0 Тогда
								//делаем переоценку амортизации
								Проводка = ПроводкиБУ.Добавить();
								Проводка.Период       = ДатаДокумента;
								Проводка.Организация  = ТекОрганизация;
								Проводка.Содержание   = "Реверс дохода от  переоценки амортизации ОС";
								Проводка.НомерЖурнала = "ОС";
								Проводка.Сумма        =  СуммаЗакрытияПереоценкиАмортизации;
								
								ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
									
								Проводка.СчетДт = СписокПереоценокОС.СчетДоходовБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СписокПереоценокОС.СубконтоДоходовБУ1);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СписокПереоценокОС.СубконтоДоходовБУ2);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СписокПереоценокОС.СубконтоДоходовБУ3 );
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   ТекОС);
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
							 
								Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);		
								ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);		
								УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
							КонецЕсли;	

							 // по регистру ПереоценкаВнеоборотныхАктивов гасим предыдущие переоценки
							 ДвижениеПереоценкаВА = ПереоценкаВА.ДобавитьПриход();
							 ДвижениеПереоценкаВА.Период				 	= ДатаДокумента;
							 ДвижениеПереоценкаВА.Организация 		     	= ТекОрганизация;
							 ДвижениеПереоценкаВА.СтруктурноеПодразделение	= СтруктурноеПодразделение;							 
							 ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= ТекОС;
							 ДвижениеПереоценкаВА.ДокументПереоценки	 	= СписокПереоценокОС.ДокументПереоценки;
							 ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости  = СуммаЗакрытияПереоценкиСтоимости;
							 ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации= ?(СуммаПереоценкиАмортизации = 0, 0, - СуммаЗакрытияПереоценкиАмортизации);  
							 
							 ДвижениеПереоценкаВА.СчетДоходовБУ		 = СписокПереоценокОС.СчетДоходовБУ;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ1 = СписокПереоценокОС.СубконтоДоходовБУ1;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ2 = СписокПереоценокОС.СубконтоДоходовБУ2;
							 ДвижениеПереоценкаВА.СубконтоДоходовБУ3 = СписокПереоценокОС.СубконтоДоходовБУ3;
							 
							 ДвижениеПереоценкаВА.СчетРасходовБУ	  = СписокПереоценокОС.СчетРасходовБУ;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = СписокПереоценокОС.СубконтоРасходовБУ1;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = СписокПереоценокОС.СубконтоРасходовБУ2;
							 ДвижениеПереоценкаВА.СубконтоРасходовБУ3 = СписокПереоценокОС.СубконтоРасходовБУ3;
							 
							 СуммаПереоценкиСтоимости 	= СуммаПереоценкиСтоимости - СуммаЗакрытияПереоценкиСтоимости;
							 СуммаПереоценкиАмортизации = ?(СуммаПереоценкиАмортизации = 0, 0, (СуммаПереоценкиАмортизации - СуммаЗакрытияПереоценкиАмортизации));
						КонецЕсли; 
						
					//Закрытие имеющегося положительного резервам на переоценки данного вида ОС 
					ИначеЕсли (СуммаПереоценкиСтоимости < 0) или (СуммаПереоценкиАмортизации < 0)  Тогда
						//выбираем все не закрытые положительные переоценки	
						Если (СписокПереоценокОС.СуммаПереоценкиСтоимости > 0) или (СписокПереоценокОС.СуммаПереоценкиАмортизации < 0)  Тогда
							
							// найдем сумму резерва партии, которую можем закрыть
							ЗакрываемаяСумма = СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации;
							
							Если ЗакрываемаяСумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							// теперь учтем сумму списываемого в текущем месяце резерва
							ЗакрываемаяСумма = ЗакрываемаяСумма - СписываемаяСуммаРезерваЗаМесяц;
							
							//ТекЗакрываемаяСумма = МИН(ЗакрываемаяСумма, (-СуммаПереоценкиСтоимости+СуммаПереоценкиАмортизации));
							ТекЗакрываемаяСумма = МИН(МАКС(0,ЗакрываемаяСумма), (-СуммаПереоценкиСтоимости+СуммаПереоценкиАмортизации));
							
							//если ЗакрываемаяСумма = 0, значит списываемая сумма резерва полностью пойдет на погашение этой партии
							//    к тому же остаток по партии ПОЛНОСТЬЮ покроется суммой резерва, которая будет поссчитана за текущий месяц
							//если ЗакрываемаяСумма < 0, значит часть суммы резерва, которая будет поссчитана за тек.месяц пойдет на погашение текущей партии, 
							//    а остаток пойдет на погашение след. партии
							//если ЗакрываемаяСумма > 0, значит списываемая сумма резерва полностью пойдет на погашение этой партии
							//    к тому же остаток по партии ЧАСТИЧНО покроется суммой резерва, которая будет поссчитана за текущий месяц 
							СписываемаяСуммаРезерваЗаМесяц = МАКС(0, - ЗакрываемаяСумма);

							Если СуммаПереоценкиАмортизации <> 0 Тогда
								ПроцентСтоимости = СписокПереоценокОС.СуммаПереоценкиСтоимости / (СписокПереоценокОС.СуммаПереоценкиСтоимости + СписокПереоценокОС.СуммаПереоценкиАмортизации);
								СуммаЗакрытияПереоценкиСтоимости = ПроцентСтоимости * ТекЗакрываемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = ТекЗакрываемаяСумма - СуммаЗакрытияПереоценкиСтоимости;
							Иначе
								СуммаЗакрытияПереоценкиСтоимости = ТекЗакрываемаяСумма;
								СуммаЗакрытияПереоценкиАмортизации = 0;
							КонецЕсли;	
							
							// может оказаться так, что поссчитанная применяя коэффициент, СуммаЗакрытияПереоценкиАмортизации больше суммы переоценки амортизации, тогда нужно 
							// в качестве СуммаЗакрытияПереоценкиАмортизации взять сумму переоценки амортизации
							Если -СуммаЗакрытияПереоценкиАмортизации > -СуммаПереоценкиАмортизации Тогда
								Разница = -СуммаЗакрытияПереоценкиАмортизации - (- СуммаПереоценкиАмортизации);
								СуммаЗакрытияПереоценкиАмортизации = СуммаПереоценкиАмортизации;
								СуммаЗакрытияПереоценкиСтоимости = СуммаЗакрытияПереоценкиСтоимости - Разница;
							КонецЕсли;	
							
							//// так как сумма переоценки распределяется на переоценку стоимости и амортизации, нужно учесть сумму переоценки амортизации... 
							//ЗакрываемаяСумма = ЗакрываемаяСумма - СуммаПереоценкиАмортизации;
							
							//СуммаЗакрытияПереоценкиСтоимости   = Мин ( СписокПереоценокОС.СуммаПереоценкиСтоимости,   - СуммаПереоценкиСтоимости, ЗакрываемаяСумма);
							//СуммаЗакрытияПереоценкиАмортизации = -Мин ( -СписокПереоценокОС.СуммаПереоценкиАмортизации, - СуммаПереоценкиАмортизации);
							
							 // если нечего корректировать для этой партии, т.е. итоговые суммы корректировок равны 0, тогда движения не делаем
							 Если СуммаЗакрытияПереоценкиСтоимости <> 0 Или СуммаЗакрытияПереоценкиАмортизации <> 0 Тогда
						
								Если СуммаЗакрытияПереоценкиСтоимости <> 0 Тогда
									// по бух. учету реверс дохода/убытка
								 	Проводка = ПроводкиБУ.Добавить();
								 	Проводка.Период       = ДатаДокумента;
								 	Проводка.Организация  = ТекОрганизация;
								 	Проводка.Содержание   = "Погашение резерва переоценки стоимости ОС";
								 	Проводка.НомерЖурнала = "ОС";
								 	Проводка.Сумма        = СуммаЗакрытияПереоценкиСтоимости;
									
									ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
								 	Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
								 
								 	Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
								 	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
									ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
									УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
								 КонецЕсли;	
							 
								 // проверяем не равна ли сумма переоценки амортизации нулю, если равна значит метод переоценки СписаниеАмортизацииПриПереоценке
								 // и в этом случае не нужно делать погашение резерва по амортизации...
								 // 
								 Если (СуммаЗакрытияПереоценкиАмортизации <> 0) И (СуммаПереоценкиАмортизации <> 0) Тогда
									 //делаем переоценку амортизации
									 Проводка = ПроводкиБУ.Добавить();
									 Проводка.Период       = ДатаДокумента;
									 Проводка.Организация  = ТекОрганизация;
									 Проводка.Содержание   = "Погашение резерва переоценки стоимости ОС";
									 Проводка.НомерЖурнала = "ОС";
									 Проводка.Сумма        =  - СуммаЗакрытияПереоценкиАмортизации;
									 
									 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									 	Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
									 Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);		
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);		
									 УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
									 
									 Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
									 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
								 КонецЕсли;	

								 // по регистру ПереоценкаВнеоборотныхАктивов гасим предыдущие переоценки
								 ДвижениеПереоценкаВА = ПереоценкаВА.ДобавитьРасход();
								 ДвижениеПереоценкаВА.Период				 	= ДатаДокумента;
								 ДвижениеПереоценкаВА.Организация 		     	= ТекОрганизация;
								 ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктурноеПодразделение;
								 
								 ДвижениеПереоценкаВА.ВнеоборотныйАктив   	 	= ТекОС;
								 ДвижениеПереоценкаВА.ДокументПереоценки	 	= СписокПереоценокОС.ДокументПереоценки;;
								 ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости  = СуммаЗакрытияПереоценкиСтоимости;
								 ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации= ?(СуммаПереоценкиАмортизации = 0, 0, СуммаЗакрытияПереоценкиАмортизации);  
								 
								 ДвижениеПереоценкаВА.СчетДоходовБУ		  = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекОС;
								 ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
								 ДвижениеПереоценкаВА.СчетРасходовБУ	  = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
								 ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекОС;
								 ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
								 
							 КонецЕсли;
							 
							 СуммаПереоценкиСтоимости   = СуммаПереоценкиСтоимости + СуммаЗакрытияПереоценкиСтоимости;
							 СуммаПереоценкиАмортизации = ?(СуммаПереоценкиАмортизации = 0, 0, (СуммаПереоценкиАмортизации - СуммаЗакрытияПереоценкиАмортизации)); 
							
						КонецЕсли;	
					КонецЕсли; //Если СуммаПереоценкиСтоимости > 0 Тогда
					
				КонецЦикла;
				
			КонецЕсли;	
			
			//закрываем оставшиеся суммы на прямые движения по переоценке
			
			//дооценка ВА
			Если (СуммаПереоценкиСтоимости > 0) или (СуммаПереоценкиАмортизации > 0)Тогда
				//оставшуюся сумму закрываем за счет резерва на переоценку
				// по бух. учету
				Если СуммаПереоценкиСтоимости <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДокумента;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Переоценка стоимости ОС";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаПереоценкиСтоимости;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
					Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
					Проводка.СчетКт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);
					
					УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
				КонецЕсли; 	
				
				Если СуммаПереоценкиАмортизации <> 0 Тогда
					//закрываем на резерв сумму переоценки амортизации
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДокумента;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Переоценка амортизации ОС";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = СуммаПереоценкиАмортизации;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
					Проводка.СчетДт = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыИзмененийВСобственномКапитале", Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств);		
															
					Проводка.СчетКт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
				КонецЕсли; 	
				
				// по регистру ПереоценкаВнеоборотныхАктивов
				ДвижениеПереоценкаВА = ПереоценкаВА.ДобавитьПриход();
				ДвижениеПереоценкаВА.Период				 		= ДатаДокумента;
				ДвижениеПереоценкаВА.Организация 		 		= ТекОрганизация;
				ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктурноеПодразделение;
				
				ДвижениеПереоценкаВА.ВнеоборотныйАктив   = ТекОС;
				ДвижениеПереоценкаВА.ДокументПереоценки	 = ТекДокумент;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации = - СуммаПереоценкиАмортизации;  
				ДвижениеПереоценкаВА.СчетДоходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекОС;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
				ДвижениеПереоценкаВА.СчетРасходовБУ		 = ПланыСчетов.Типовой.РезервНаПереоценкуОсновныхСредств;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекОС;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = Перечисления.ВидыИзмененийВСобственномКапитале.ПереоценкаОсновныхСредств;
				
			ИначеЕсли (СуммаПереоценкиСтоимости < 0) или (СуммаПереоценкиАмортизации < 0) Тогда//уценка ВА
				
				Если СуммаПереоценкиСтоимости <> 0 Тогда
					// при уценки оставшуюся сумму закрываем на счета доходов/расходов
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДокумента;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Переоценка стоимости ОС";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = -СуммаПереоценкиСтоимости;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
					Проводка.СчетДт = ТекСчетРасходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекСубконтоРасходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекСубконтоРасходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекСубконтоРасходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",   ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);
				
					Проводка.СчетКт = СтрокаОС.СчетУчетаБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
					УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, , Истина);
				КонецЕсли;	
				
				Если СуммаПереоценкиАмортизации <> 0 Тогда
					//делаем переоценку амортизации
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период       = ДатаДокумента;
					Проводка.Организация  = ТекОрганизация;
					Проводка.Содержание   = "Переоценка амортизации ОС";
					Проводка.НомерЖурнала = "ОС";
					Проводка.Сумма        = -СуммаПереоценкиАмортизации;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
								
					Проводка.СчетДт = СтрокаОС.СчетНачисленияАмортизацииБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);		
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекОС);		
					УправлениеВнеоборотнымиАктивами.УстановитьАналитикуПоМестонахождениюОС(ВедетсяАналитУчетОсПоМОЛ, ВедетсяАналитУчетОсПоПодразделениям, Проводка, ТекОС, ТаблицаТекМестонахождение, Истина);
					
					Проводка.СчетКт = ТекСчетДоходовБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ТекСубконтоДоходовБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСубконтоДоходовБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ТекСубконтоДоходовБУ3 );
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",   ТекОС);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВнеоборотныеАктивы", ТекОС);
				КонецЕсли;	
				
				// по регистру ПереоценкаВнеоборотныхАктивов
				ДвижениеПереоценкаВА = ПереоценкаВА.ДобавитьРасход();
				ДвижениеПереоценкаВА.Период				 		= ДатаДокумента;
				ДвижениеПереоценкаВА.Организация 		 		= ТекОрганизация;
				ДвижениеПереоценкаВА.СтруктурноеПодразделение 	= СтруктурноеПодразделение;
				
				ДвижениеПереоценкаВА.ВнеоборотныйАктив   = ТекОС;
				ДвижениеПереоценкаВА.ДокументПереоценки	 = ТекДокумент;
				ДвижениеПереоценкаВА.СуммаПереоценкиСтоимости   = - СуммаПереоценкиСтоимости;
				ДвижениеПереоценкаВА.СуммаПереоценкиАмортизации =   СуммаПереоценкиАмортизации;  
				ДвижениеПереоценкаВА.СчетДоходовБУ		 = ТекСчетДоходовБУ;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ1  = ТекСубконтоДоходовБУ1;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ2  = ТекСубконтоДоходовБУ2;
				ДвижениеПереоценкаВА.СубконтоДоходовБУ3  = ТекСубконтоДоходовБУ3;
				ДвижениеПереоценкаВА.СчетРасходовБУ		 = ТекСчетРасходовБУ;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ1 = ТекСубконтоРасходовБУ1;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ2 = ТекСубконтоРасходовБУ2;
				ДвижениеПереоценкаВА.СубконтоРасходовБУ3 = ТекСубконтоРасходовБУ3;
			КонецЕсли;//Если СуммаПереоценкиСтоимости > 0 Тогда
			
		КонецЕсли; //Если СтрокаОС.СуммаПереоценки = 0 Тогда	
		
	КонецЦикла;//Для Каждого СтрокаОС Из СписокПереоцененныхОC Цикл
	
	ДвиженияПоРегистрамНУ(СтруктураШапкиДокумента, СписокПереоцененныхОC, Отказ, Заголовок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
  
	СтруктураПолей = Новый Структура("ОсновноеСредство", "ОсновноеСредство");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	//
	// Проверим, нет ли повторяющихся основных средств в таблице по ОС.
	УправлениеВнеоборотнымиАктивами.ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(ТаблицаПоОС, СтруктураШапкиДокумента,Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС,Отказ, Заголовок);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// определим признак применения параметров амортизации в тек. месяце
	мПрименятьПараметрыАмортизацииВТекМесяце = УправлениеВнеоборотнымиАктивами.ПолучитьПризнакПримененияПараметровАмортизацииВТекМесяце(Дата, Организация); 

	// проверим, установлен ли признак применения параметров амортизации в тек. месяце
	// и если установлен, то очищаем поля "АмортизацияЗаМесяц", "СписавыемаяСуммаРезерваЗаМесяц"
	// 
	Если мПрименятьПараметрыАмортизацииВТекМесяце Тогда
		Для Каждого СтрокаТЧ Из ОС Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.АмортизацияЗаМесяцБУ) Тогда
				СтрокаТЧ.АмортизацияЗаМесяцБУ = 0;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТЧ.СписываемаяСуммаРезерваЗаМесяцБУ) Тогда
				СтрокаТЧ.СписываемаяСуммаРезерваЗаМесяцБУ = 0;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	    	
	
КонецПроцедуры

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();