////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мИмяПланаСчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам.
// 
// Параметры: 
//  ПостроительЗапроса - построитель запроса, используемый для формирования итогового запроса
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(ПостроительЗапроса = Неопределено) Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Виды платежей по ОПВ, по которым будет считаться пеня (чтобы не начислять пени на сумму самой пени)
	СписокВидовПлатежей = Новый СписокЗначений;	
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , ДатаНачала);
	Запрос.УстановитьПараметр("парамКонец" , КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("парамПослеКонца" , КонецДня(ДатаОкончания)+1);
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамНалогВзнос", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамИсчисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамПеречисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("СрокПоМесяцуВыплатыДоходов", Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);
	Запрос.УстановитьПараметр("ВидПени", ВидПлатежа);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя);
	Иначе
		Запрос.УстановитьПараметр("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
	КонецЕсли;
	
	Если ПостроительЗапроса <> Неопределено Тогда
	
		// Установим параметры построителя запроса
		ПостроительЗапроса.Параметры.Вставить("парамНачало" , ДатаНачала);
		ПостроительЗапроса.Параметры.Вставить("парамКонец" , КонецДня(ДатаОкончания));
		ПостроительЗапроса.Параметры.Вставить("парамПослеКонца" , КонецДня(ДатаОкончания)+1);
		ПостроительЗапроса.Параметры.Вставить("парамПериодРегистрации" , ПериодРегистрации);		
		ПостроительЗапроса.Параметры.Вставить("парамОрганизация" , Организация);
		ПостроительЗапроса.Параметры.Вставить("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
		ПостроительЗапроса.Параметры.Вставить("парамПользователь" , Ответственный);
		ПостроительЗапроса.Параметры.Вставить("парамПодразделение" , ПодразделениеОрганизации);
		ПостроительЗапроса.Параметры.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
		ПостроительЗапроса.Параметры.Вставить("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
		ПостроительЗапроса.Параметры.Вставить("парамПриход", ВидДвиженияНакопления.Приход);
		ПостроительЗапроса.Параметры.Вставить("парамРасход", ВидДвиженияНакопления.Расход);
		ПостроительЗапроса.Параметры.Вставить("парамНалогВзнос", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		ПостроительЗапроса.Параметры.Вставить("парамИсчисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
		ПостроительЗапроса.Параметры.Вставить("парамПеречисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Перечисление);
		ПостроительЗапроса.Параметры.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		ПостроительЗапроса.Параметры.Вставить("СрокПоМесяцуВыплатыДоходов", Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов);
		ПостроительЗапроса.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		ПостроительЗапроса.Параметры.Вставить("СписокВидовПлатежей", СписокВидовПлатежей);
		ПостроительЗапроса.Параметры.Вставить("ВидПени", ВидПлатежа);

		Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
				Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
				Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
				Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
				Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
				Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя);
		Иначе
			ПостроительЗапроса.Параметры.Вставить("НалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		КонецЕсли;
	
	КонецЕсли;

	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	
	// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
	// подразделения (если оно задано)
	Если Ответственный <> ПустойОтветственный Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			Если ПодразделениеОрганизации = ПустоеПодразделение Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Расчетчики.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
				|
				|ГДЕ
				|	Расчетчики.Пользователь = &парамПользователь";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации");
					Возврат  Ложь;
				КонецЕсли;
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Подразделения.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК Подразделения
				|
				|ГДЕ
				|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение) И
				|	(Подразделения.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики ГДЕ 	Расчетчики.Пользователь = &парамПользователь ))";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
					Возврат  Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	 КонецЕсли;
	
	Если ПодразделениеОрганизации = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
	ИначеЕсли ПодразделениеОрганизации = ПустоеПодразделение Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = "ПодразделениеОрганизации.Владелец = &парамОрганизация";
		КонецЕсли;
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	
	// определим список физлиц
	Если ПостроительЗапроса <> Неопределено Тогда

		ИсходныйТекстПостроителя = ПостроительЗапроса.Текст;
		СписокРаботниковТекст = СтрЗаменить(ИсходныйТекстПостроителя,"РАЗРЕШЕННЫЕ","");
		СписокРаботниковТекст = Лев(СписокРаботниковТекст, Найти(СписокРаботниковТекст,"УПОРЯДОЧИТЬ") - 1);
		
	Иначе

		// определим работников, работающих в указанном подразделении на конец периода
		СписокРаботниковТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		|	РаботникиОрганизации.ПодразделениеОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизации.Период
		|			КОНЕЦ) КАК Период
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
		|		И РаботникиОрганизации.Период <= &парамКонец
		|		И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизации.Сотрудник.Физлицо) КАК ДатыПоследнихНазначений
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО ДатыПоследнихНазначений.Физлицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (ДатыПоследнихНазначений.Период = ВЫБОР
		|				КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен
		|					ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|				ИНАЧЕ РаботникиОрганизации.Период
		|			КОНЕЦ)
		|			И (РаботникиОрганизации.Организация = &парамГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПоследнихДоговоров.Физлицо,
		|	МАКСИМУМ(ДоговорникиОрганизации.ПодразделениеОрганизации) КАК ПодразделениеОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоговорникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|		МАКСИМУМ(ДоговорникиОрганизации.ДатаНачала) КАК ДатаНачала
		|	ИЗ
		|		РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
		|	ГДЕ
		|		ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация
		|		И ДоговорникиОрганизации.ДатаНачала <= &парамКонец
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДоговорникиОрганизации.Сотрудник.Физлицо) КАК ДатыПоследнихДоговоров
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
		|		ПО ДатыПоследнихДоговоров.Физлицо = ДоговорникиОрганизации.Сотрудник.Физлицо
		|			И ДатыПоследнихДоговоров.ДатаНачала = ДоговорникиОрганизации.ДатаНачала
		|			И (ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПоследнихДоговоров.Физлицо";
	
	КонецЕсли;
		
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
			
		// определяем тех физлиц, по которым производилось исчисление ОПВ (СО) за указанный пользователем период
		Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ Тогда
			ИмяРегистра = "ОПВРасчетыСФондами";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО Тогда
			ИмяРегистра = "СОРасчетыСФондами";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС Тогда
			ИмяРегистра = "ВОСМСРасчетыСФондами";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС Тогда
			ИмяРегистра = "ООСМСРасчетыСФондами";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
			ИмяРегистра = "ОПВРРасчетыСФондами";
		Иначе
			ИмяРегистра = "ОППВРасчетыСФондами";
		КонецЕсли;
	
		ДанныеРегистраТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.Физлицо,
		|	НАЧАЛОПЕРИОДА(Регистр.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	&парамНачало КАК СрокПеречисления // в данном запросе значение не важно, любое кроме NULL - потом используется для проверки заполненности
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + " КАК Регистр
		|ГДЕ
		|	Регистр.Организация = &парамОрганизация
		|	И Регистр.Период МЕЖДУ &парамНачало И &парамКонец
		|	И Регистр.ВидПлатежа = &парамНалогВзнос
		|	И Регистр.ВидСтроки = &парамИсчисление
		|";	
			
	Иначе // авторасчет

		Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
			ИмяРегистра = "ОПВПодлежитПеречислениюВФонды";
			ПолеМесяцВыплатыДоходов = "МесяцВыплатыДоходов";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
			ИмяРегистра = "СОРасчетыСФондами";
			ПолеМесяцВыплатыДоходов = "МесяцНалоговогоПериода";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
			ИмяРегистра = "ВОСМСПодлежитПеречислениюВФонды";
			ПолеМесяцВыплатыДоходов = "МесяцВыплатыДоходов";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
			ИмяРегистра = "ООСМСРасчетыСФондами";
			ПолеМесяцВыплатыДоходов = "МесяцНалоговогоПериода";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
			ИмяРегистра = "ОПВРРасчетыСФондами";
			ПолеМесяцВыплатыДоходов = "МесяцНалоговогоПериода";
		Иначе 
			ИмяРегистра = "ОППВРасчетыСФондами";
			ПолеМесяцВыплатыДоходов = "МесяцНалоговогоПериода";
		КонецЕсли;
		
		// сроки перечисления 
		СрокиПеречисленияТекст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Месяц,
		|	СрокиПеречисленияНалоговСборовОтчислений.СрокПеречисления,
		|	СрокиПеречисленияНалоговСборовОтчислений.ПорядокОпределенияСрокаПеречисления
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет,
		|		ВложенныйЗапрос.Месяц КАК Месяц
		|	ИЗ
		|		(ВЫБРАТЬ
		|			1 КАК Приоритет,
		|			НАЧАЛОПЕРИОДА(СрокиПеречисления.Месяц, МЕСЯЦ) КАК Месяц
		|		ИЗ
		|			РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисления
		|		ГДЕ
		|			СрокиПеречисления.ВидНалога = &НалогСборОтчисление
		|			И СрокиПеречисления.Организация = &парамОрганизация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			2,
		|			НАЧАЛОПЕРИОДА(СрокиПеречисления.Месяц, МЕСЯЦ)
		|		ИЗ
		|			РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисления
		|		ГДЕ
		|			СрокиПеречисления.ВидНалога = &НалогСборОтчисление
		|			И СрокиПеречисления.Организация = &ПустаяОрганизация) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.Месяц) КАК ВложенныйЗапрос
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисленияНалоговСборовОтчислений
		|		ПО ВложенныйЗапрос.Месяц = НАЧАЛОПЕРИОДА(СрокиПеречисленияНалоговСборовОтчислений.Месяц, МЕСЯЦ)
		|			И (ВЫБОР
		|				КОГДА ВложенныйЗапрос.Приоритет = 1
		|					ТОГДА СрокиПеречисленияНалоговСборовОтчислений.Организация = &парамОрганизация
		|				ИНАЧЕ СрокиПеречисленияНалоговСборовОтчислений.Организация = &ПустаяОрганизация
		|			КОНЕЦ)
		|			И (СрокиПеречисленияНалоговСборовОтчислений.ВидНалога = &НалогСборОтчисление)";
		
		// Физлица, по которым было перечисление ОПВ (ОППВ, СО, ВОСМС, ООСМС, ОПВР) с истекшим сроком за указанный пользователем в документе период 
		// либо по которым остались просроченные ОПВ (ОППВ, СО, ВОСМС, ООСМС, ОПВР) на конец периода

		ДанныеРегистраТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(Регистр.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СрокиПеречисления.СрокПеречисления
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + " КАК Регистр
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СрокиПеречисленияТекст + ") КАК СрокиПеречисления
		|		ПО ВЫБОР
		|				КОГДА СрокиПеречисления.ПорядокОпределенияСрокаПеречисления = &СрокПоМесяцуВыплатыДоходов
		|					ТОГДА НАЧАЛОПЕРИОДА(Регистр." + ПолеМесяцВыплатыДоходов + ", МЕСЯЦ) = СрокиПеречисления.Месяц
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(Регистр.МесяцНалоговогоПериода, МЕСЯЦ) = СрокиПеречисления.Месяц
		|			КОНЕЦ
		|ГДЕ
		|	Регистр.Период МЕЖДУ &парамНачало И &парамКонец
		|	И Регистр.Организация = &парамОрганизация
		|	И Регистр.ВидСтроки = &парамПеречисление
		|	И (СрокиПеречисления.СрокПеречисления ЕСТЬ NULL
		|		ИЛИ НАЧАЛОПЕРИОДА(Регистр.Период, ДЕНЬ) > СрокиПеречисления.СрокПеречисления)
		|	" + ?(ИмяРегистра = "СОРасчетыСФондами", "
		|	И Регистр.ВидПлатежа В (&СписокВидовПлатежей)", "") + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистр.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(Регистр.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СрокиПеречисления.СрокПеречисления
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + ".Остатки(
		|			&парамПослеКонца,
		|			Организация = &парамОрганизация
		|			" + ?(ИмяРегистра = "СОРасчетыСФондами", " И ВидПлатежа В (&СписокВидовПлатежей)", "") + " 
		|			) КАК Регистр
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СрокиПеречисленияТекст + ") КАК СрокиПеречисления
		|		ПО ВЫБОР
		|				КОГДА СрокиПеречисления.ПорядокОпределенияСрокаПеречисления = &СрокПоМесяцуВыплатыДоходов
		|					ТОГДА НАЧАЛОПЕРИОДА(Регистр." + ПолеМесяцВыплатыДоходов + ", МЕСЯЦ) = СрокиПеречисления.Месяц
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(Регистр.МесяцНалоговогоПериода, МЕСЯЦ) = СрокиПеречисления.Месяц
		|			КОНЕЦ
		|ГДЕ
		|	(СрокиПеречисления.СрокПеречисления ЕСТЬ NULL
		|		ИЛИ НАЧАЛОПЕРИОДА(&парамКонец, ДЕНЬ) > СрокиПеречисления.СрокПеречисления)
		|";
	
	КонецЕсли;

	// Окончательный список физлиц с учетом подразделения
	// Также выбираем тех физлиц, кто вообще не является работником или договорником,
	// но по ним возникли просроченные суммы ОПВ (ОППВ, СО, ВОСМС, ООСМС, ОПВР) и не было за период начисления пени
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		ИмяРегистра = "ОПВРасчетыСФондами";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		ИмяРегистра = "СОРасчетыСФондами";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		ИмяРегистра = "ВОСМСРасчетыСФондами";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда
		ИмяРегистра = "ООСМСРасчетыСФондами";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
		ИмяРегистра = "ОПВРРасчетыСФондами";
	Иначе 
		ИмяРегистра = "ОППВРасчетыСФондами";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеРегистра.Физлицо,
	|	ДанныеРегистра.МесяцНалоговогоПериода,
	|	МИНИМУМ(ДанныеРегистра.СрокПеречисления) КАК СрокПеречисления,
	|	&парамНачало КАК ДатаНачала,
	|	&парамКонец КАК ДатаОкончания
	|ИЗ
	|	(" + ДанныеРегистраТекст + ") КАК ДанныеРегистра
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СписокРаботниковТекст + ") КАК СписокФизЛиц
	|		ПО ДанныеРегистра.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамКонец, 
	|				Организация = &парамГоловнаяОрганизация 
	|				И Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство) КАК РаботникиОрганизации
	|		ПО ДанныеРегистра.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ДоговорникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо
	|						ИЗ
	|							РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизации
	|						ГДЕ
	|							ДоговорникиОрганизации.ДатаОкончания >= &парамНачало И
	|							ДоговорникиОрганизации.ДатаНачала <= &парамКонец И
	|							ДоговорникиОрганизации.Организация = &парамГоловнаяОрганизация) КАК ДоговорникиОрганизации
	|		ПО ДанныеРегистра.ФизЛицо = ДоговорникиОрганизации.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + " КАК РасчетыСФондами
	|		ПО ДанныеРегистра.ФизЛицо = РасчетыСФондами.ФизЛицо
	|			И РасчетыСФондами.Организация = &парамОрганизация
	|			И РасчетыСФондами.Период МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|			И РасчетыСФондами.ВидПлатежа = &ВидПени
	|			И РасчетыСФондами.ВидДвижения = &парамПриход
	|			И РасчетыСФондами.ВидСтроки = &парамИсчисление
	|			И РасчетыСФондами.ДатаНачала >= &парамНачало
	|			И РасчетыСФондами.ДатаОкончания <= &парамКонец
	|
	|ГДЕ
	|   (СписокФизЛиц." + УсловиеНаПодразделение + ") 
	|
	|	ИЛИ (РаботникиОрганизации.Сотрудник ЕСТЬ NULL
	|			И ДоговорникиОрганизации.ФизЛицо ЕСТЬ NULL
	|			И РасчетыСФондами.ФизЛицо ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Физлицо,
	|	ДанныеРегистра.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеРегистра.Физлицо.Наименование,
	|	ДанныеРегистра.МесяцНалоговогоПериода
	|";
		
	Если ПостроительЗапроса = Неопределено Тогда
		Запрос.Текст = ТекстЗапроса;
		ТЗИсчислениеПени = Запрос.Выполнить().Выгрузить();
	Иначе
		ПостроительЗапроса.Текст = ТекстЗапроса;
		ПостроительЗапроса.Выполнить();
		ТЗИсчислениеПени = ПостроительЗапроса.Результат.Выгрузить();
	КонецЕсли;
	
	СоответствиеПройденныеМесяцаНалоговогоПериода = Новый Соответствие;

	Для Каждого СтрокаТЗ Из ТЗИсчислениеПени Цикл
		Если СтрокаТЗ.СрокПеречисления = NULL Тогда
			Если СоответствиеПройденныеМесяцаНалоговогоПериода.Получить(Год(СтрокаТЗ.МесяцНалоговогоПериода)) = Неопределено Тогда
				Сообщить("Не заполнены сроки перечисления налогов, сборов, отчислений за "+Формат(СтрокаТЗ.МесяцНалоговогоПериода, "ДФ=гггг")+" год!", СтатусСообщения.Важное);
				СоответствиеПройденныеМесяцаНалоговогоПериода.Вставить(Год(СтрокаТЗ.МесяцНалоговогоПериода), 1);
			КонецЕсли;
		Иначе
			НоваяСтрока = ИсчислениеПени.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // Автозаполнение()

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа.
//
Процедура Рассчитать() Экспорт
	
	Отказ = Ложь;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, "Расчет");
	
	// проверим движения ИПН по данным табличной части
	ВыборкаПоПени = СформироватьЗапросПоИсчислениеПени(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоПени.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиИсчислениеПени(ВыборкаПоШапкеДокумента, ВыборкаПоПени, Отказ, Заголовок);
	КонецЦикла;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// список физлиц, по которым выполняется расчет
	СписокФизЛицТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТЧ.Физлицо
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК СтрокиТЧ
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &парамРегистратор
	|";
	
	// Выполняем расчет в зависимости от вида операции
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
	
		// автоматический расчет пени
			
		ДанныеРасчетаПени = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаПениОПВиСО(ВидОперации, Организация, ДатаНачала, ДатаОкончания, СписокФизЛицТекст, Новый Структура("парамРегистратор", Ссылка));
		Если ДанныеРасчетаПени <> Неопределено Тогда
			ПроведениеРасчетов.ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО(ВидОперации, ПериодРегистрации, ИсчислениеПени, ДанныеРасчетаПени);
		КонецЕсли;
	
	Иначе
	
		Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ Тогда
			ИмяРегистра = "ОПВРасчетыСФондами";
			ИмяРесурса 	= "Взнос";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС Тогда
			ИмяРегистра = "ВОСМСРасчетыСФондами";
			ИмяРесурса 	= "Взнос";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО Тогда
			ИмяРегистра = "СОРасчетыСФондами";
			ИмяРесурса 	= "Отчисление";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ПериодРегистрации);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС Тогда
			ИмяРегистра = "ООСМСРасчетыСФондами";
			ИмяРесурса 	= "Отчисление";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
			ИмяРегистра = "ОПВРРасчетыСФондами";
			ИмяРесурса 	= "Взнос";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, ПериодРегистрации);
		Иначе 
			ИмяРегистра = "ОППВРасчетыСФондами";
			ИмяРесурса 	= "Взнос";
			
			ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрации);
			
		КонецЕсли;
	
		// распределить сумму документа на физлиц
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончания));
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("Исчисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НалогВзнос", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокФизЛиц.ФизЛицо,
		|	РасчетыСФондамиФЛ.СтруктурнаяЕдиница,
		|	РасчетыСФондамиФЛ.ПодразделениеОрганизации,
		|	РасчетыСФондамиФЛ.МесяцНалоговогоПериода,
		|	ЕСТЬNULL(РасчетыСФондамиФЛ.Сумма, 0) КАК Сумма
		|ИЗ
		|	(" + СписокФизлицТекст + ") КАК СписокФизЛиц
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							РасчетыСФондами.ФизЛицо,
		|							РасчетыСФондами.СтруктурнаяЕдиница,
		|							РасчетыСФондами.ПодразделениеОрганизации,
		|							НАЧАЛОПЕРИОДА(РасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|							СУММА(РасчетыСФондами." + ИмяРесурса + ") КАК Сумма
		|						ИЗ
		|							РегистрНакопления." + ИмяРегистра + " КАК РасчетыСФондами
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизлицТекст + ") КАК СписокФизЛиц
		|								ПО РасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
		|						ГДЕ
		|							РасчетыСФондами.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|							И РасчетыСФондами.Организация = &Организация
		|							И РасчетыСФондами.ВидДвижения = &Приход
		|							И РасчетыСФондами.ВидПлатежа = &НалогВзнос
		|							И РасчетыСФондами.ВидСтроки = &Исчисление
		|						СГРУППИРОВАТЬ ПО
		|							РасчетыСФондами.ФизЛицо,
		|							РасчетыСФондами.СтруктурнаяЕдиница,
		|							РасчетыСФондами.ПодразделениеОрганизации,
		|							НАЧАЛОПЕРИОДА(РасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)) КАК РасчетыСФондамиФЛ
		|		ПО СписокФизЛиц.ФизЛицо = РасчетыСФондамиФЛ.Физлицо
		|			И РасчетыСФондамиФЛ.Сумма > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписокФизЛиц.ФизЛицо,
		|	РасчетыСФондамиФЛ.МесяцНалоговогоПериода
		|
		|ИТОГИ СУММА(Сумма)	ПО Общие
		|";
	
		ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаИтоги.Следующий() Тогда
			
			ОбщаяСумма = ВыборкаИтоги.Сумма;
			
			Если ОбщаяСумма = 0 Тогда
				
				Сообщить("Общая сумма взносов (отчислений) за период " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " равна нулю. Нет базы для распределения суммы пени!", СтатусСообщения.Важное);
	
			Иначе
			
				ИсчислениеПени.Очистить();
					
				РаспределеннаяСумма = 0;
					
				Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
						
					Если Выборка.Сумма <> 0 И Выборка.Сумма <> NULL Тогда
						СтрокаТЧ 						= ИсчислениеПени.Добавить();
						СтрокаТЧ.ФизЛицо 				= Выборка.ФизЛицо;
						СтрокаТЧ.МесяцНалоговогоПериода = Выборка.МесяцНалоговогоПериода;
						СтрокаТЧ.СтруктурнаяЕдиница		= Выборка.СтруктурнаяЕдиница;
						СтрокаТЧ.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
						СтрокаТЧ.Сумма					= ОбщегоНазначения.ОкруглитьЧисло(СуммаДокумента * Выборка.Сумма / ОбщаяСумма, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
						СтрокаТЧ.ДатаНачала 			= НачалоМесяца(Выборка.МесяцНалоговогоПериода);
						СтрокаТЧ.ДатаОкончания 			= КонецМесяца(Выборка.МесяцНалоговогоПериода);
						
						РаспределеннаяСумма 			= РаспределеннаяСумма + СтрокаТЧ.Сумма;
					КонецЕсли;						
					
				КонецЦикла;
			
				Если (РаспределеннаяСумма <> СуммаДокумента) И (ИсчислениеПени.Количество() > 0) Тогда
					// остаток на последнюю строку
					СтрокаТЧ = ИсчислениеПени[ИсчислениеПени.Количество() - 1];
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + (СуммаДокумента - РаспределеннаяСумма);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	СуммаДокумента = ИсчислениеПени.Итог("Сумма");
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры  // Рассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.ПериодРегистрации,
		|	ДанныеДокумента.ДатаНачала,
		|	ДанныеДокумента.ДатаОкончания,
		|	ДанныеДокумента.ВидПлатежа,
		|	ДанныеДокумента.СуммаДокумента,
		|	ДанныеДокумента.ВидОперации,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Ссылка,
		|	ЕСТЬNULL(СуммаТЧ.Сумма, 0) КАК СуммаПоТабличнойЧасти,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций
		|ИЗ
		|	Документ.РасчетПениОПВиСО КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ИсчислениеПени.Сумма) КАК Сумма
		|		ИЗ
		|			Документ.РасчетПениОПВиСО.ИсчислениеПени КАК ИсчислениеПени
		|		ГДЕ
		|			ИсчислениеПени.Ссылка = &ДокументСсылка) КАК СуммаТЧ
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодРегистрации, Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ИсчислениеПени" документа
//
Функция СформироватьЗапросПоИсчислениеПени(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);

	МассивПустыхСтруктурныхЕдиниц = Новый Массив();
	МассивПустыхСтруктурныхЕдиниц.Добавить(Неопределено);
	МассивПустыхСтруктурныхЕдиниц.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивПустыхСтруктурныхЕдиниц.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустыеСтруктурныеЕдиницы", МассивПустыхСтруктурныхЕдиниц);

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо,
		|	МесяцНалоговогоПериода КАК Период
		|ИЗ
		|	Документ.РасчетПениОПВиСО.ИсчислениеПени 
		|ГДЕ
		|	Ссылка = &ДокументСсылка";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, ВыборкаПоШапкеДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст+ 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиТЧ.НомерСтроки,
	|	СтрокиТЧ.МесяцНалоговогоПериода,
	|	СтрокиТЧ.Сумма,
	|	СтрокиТЧ.ФизЛицо";
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	СтрокиТЧ.ДатаНачала,
		|	СтрокиТЧ.ДатаОкончания
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&ПустаяДата КАК ДатаНачала,
		|	&ПустаяДата КАК ДатаОкончания
		|";
	КонецЕсли;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ", 
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.СтруктурнаяЕдиница НЕ В (&ПустыеСтруктурныеЕдиницы)
		|			ТОГДА СтрокиТЧ.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
		Запрос.Текст = Запрос.Текст + ", 
		|	&Организация КАК СтруктурнаяЕдиница";		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.ПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА СтрокиТЧ.ПодразделениеОрганизации
		|		КОГДА НЕ (МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|				И СтрокиТЧ.СтруктурнаяЕдиница = МестоРаботы.СтруктурнаяЕдиница
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
		|	КОНЕЦ КАК ПодразделениеОрганизации";
	Иначе 
		Запрос.Текст = Запрос.Текст + ",
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК СтрокиТЧ";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо
		|			И СтрокиТЧ.МесяцНалоговогоПериода = МестоРаботы.Период";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	СтрокиТЧ.Ссылка = &ДокументСсылка
	|	И СтрокиТЧ.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиТЧ.НомерСтроки
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчислениеПени()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок, Режим = "Проведение")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;

	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц начисления!", Отказ, Заголовок);
	КонецЕсли;

	//  ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата начала периода расчета пени!", Отказ, Заголовок);
	КонецЕсли;

	//  ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата окончания периода расчета пени!", Отказ, Заголовок);
	КонецЕсли;

	//  ВидПлатежа
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидПлатежа) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид платежа!", Отказ, Заголовок);
	КонецЕсли;
	
	// СуммаДокумента
	Если Режим = "Проведение" Тогда
		Если ВыборкаПоШапкеДокумента.СуммаДокумента <> ВыборкаПоШапкеДокумента.СуммаПоТабличнойЧасти Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Сумма документа не совпадает с суммой по табличной части документа!", Отказ, Заголовок);
		КонецЕсли;
	ИначеЕсли Режим = "Расчет" Тогда
		Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
				Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО
				Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ
				Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС
				Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС
				Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
			Если ВыборкаПоШапкеДокумента.СуммаДокумента = 0 Тогда
				ОбщегоНазначения.ОшибкаПриПроведении("Не указана сумма документа!", Отказ, Заголовок);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ИсчислениеПени" документа.
//
Процедура ПроверитьЗаполнениеСтрокиИсчислениеПени(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части: ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
			Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО 
			Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ
			Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС 
			Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС 
			Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
		
		ЕстьДатаНачала = Истина;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ЕстьДатаНачала = Ложь;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задана дата начала периода расчета пени!", Отказ, Заголовок);
		КонецЕсли;
		
		ЕстьДатаОкончания = Истина;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ЕстьДатаОкончания = Ложь;
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задана дата окончания периода расчета пени!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ЕстьДатаНачала И ЕстьДатаОкончания Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала периода расчета пени не может быть больше даты окончания!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсчислениеПени()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Движение = Движения.ОПВРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениОПВ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениВОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Движение = Движения.ВОСМСРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениВОСМС()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениСО(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.СОРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.СтруктурнаяЕдиница		= ВыборкаПоШапкеДокумента.Организация;
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
		
	// Ресурсы
	Движение.Отчисление					= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениСО()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениООСМС(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.ООСМСРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.СтруктурнаяЕдиница		= ВыборкаПоШапкеДокумента.Организация;
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
		
	// Ресурсы
	Движение.Отчисление					= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениООСМС()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениОППВ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.ОППВРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.СтруктурнаяЕдиница		= ВыборкаПоШапкеДокумента.Организация;
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
		
	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениОППВ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуИсчислениеПениОПВР(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.ОПВРРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                   	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.СтруктурнаяЕдиница		= ВыборкаПоШапкеДокумента.Организация;
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.МесяцНалоговогоПериода    	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.ВидПлатежа				   	= ВыборкаПоШапкеДокумента.ВидПлатежа;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
		
	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Сумма;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.ДатаНачала					= ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ДатаОкончания				= ВыборкаПоСтрокамДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуИсчислениеПениОПВР()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС 
			Или ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
		// если производился автоматический расчет, то обновим сумму документа
		СуммаДокумента = ИсчислениеПени.Итог("Сумма");
	КонецЕсли;	
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ИсчислениеПени);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок документа при проведении
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
    	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// исчисление пени
			
			// получим реквизиты табличной части
			ВыборкаПоИсчислениеПени = СформироватьЗапросПоИсчислениеПени(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоИсчислениеПени.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиИсчислениеПени(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					Если ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ
							Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ Тогда
						ДобавитьСтрокуИсчислениеПениОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО
							Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО Тогда
						ДобавитьСтрокуИсчислениеПениСО(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС
							Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС Тогда
						ДобавитьСтрокуИсчислениеПениВОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС
							Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС Тогда
						ДобавитьСтрокуИсчислениеПениООСМС(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР
							Или ВыборкаПоШапкеДокумента.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР Тогда
						ДобавитьСтрокуИсчислениеПениОПВР(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					Иначе
						ДобавитьСтрокуИсчислениеПениОППВ(ВыборкаПоШапкеДокумента, ВыборкаПоИсчислениеПени, ИсчислениеНалоговСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
