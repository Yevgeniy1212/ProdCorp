#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура Автозаполнение(Документ) Экспорт
	Документ.БюджетныеОперации.Очистить();
	Дата 							= Документ.Дата;
	УправленческоеПодразделение 	= Документ.УправленческоеПодразделение;
	ФинансовыйПоказатель			= Документ.ФинансовыйПоказатель;
	
	// Выберем статьи оборотов, для которых будем получать данные
	Запрос=Новый Запрос;
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Период",Дата);
	
	ТекстЗапроса="ВЫБРАТЬ
	|	ФинансовыеПоказатели.Ссылка КАК ФинансовыйПоказатель,
	|	ФинансовыеПоказатели.Ссылка.Представление КАК ФинансовыйПоказательПредставление,
	|	ФинансовыеПоказатели.УчетПоКоличеству,
	|	ФинансовыеПоказатели.УчетПоСумме,
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта.ТекстЗапроса КАК ТекстЗапроса,
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта.НастройкиПостроителя КАК НастройкиПостроителя,
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта.ИзмеренияИсточника КАК ИзмеренияИсточника,
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта.ПроизвольныйЗапрос КАК ПроизвольныйЗапрос,
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта.ДатыОтбораДанныхИсточника КАК ДатыОтбораДанныхИсточника,
	|	ПравилаОтложенногоСбораФактическихДанных.ПоказательИсточникаДанныхДляФактаСум,
	|	ПравилаОтложенногоСбораФактическихДанных.КоэффициентДляФактаСум,
	|	ПравилаОтложенногоСбораФактическихДанных.СпособОпределенияВалютыОборотаФакт,
	|	ПравилаОтложенногоСбораФактическихДанных.ПоказательИсточникаДанныхДляФактаКол,
	|	ПравилаОтложенногоСбораФактическихДанных.КоэффициентДляФактаКол,
	|	ФинансовыеПоказатели.ОсновнаяВалюта
    |ИЗ
	|	Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПравилаОтложенногоСбораФактическихДанных.СрезПоследних(&Период,) КАК ПравилаОтложенногоСбораФактическихДанных
	|			ПО ФинансовыеПоказатели.Ссылка = ПравилаОтложенногоСбораФактическихДанных.ФинансовыйПоказатель";
	Если НЕ УправленческоеПодразделение.Пустая() Тогда // Выбираем источники, в измерениях которых есть ЦФО
		ТекстЗапроса=ТекстЗапроса+"		  		  
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ИзмеренияИсточника КАК ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника
		|		ПО ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта = ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.Ссылка 
		|		И (ИсточникиДанныхДляРасчетовБюджетированияИзмеренияИсточника.ИзмерениеБюджетирования = &УправленческоеПодразделение)";
		СтруктураПараметров.Вставить("УправленческоеПодразделение",Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение);
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|ГДЕ
	|	ПравилаОтложенногоСбораФактическихДанных.ИсточникДанныхДляФакта <> &ПустойИсточникДанных";
	Если НЕ ФинансовыйПоказатель.Пустая() Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|И
		|	ФинансовыеПоказатели.Ссылка В ИЕРАРХИИ(&СтатьиОборотов)";
		СтруктураПараметров.Вставить("СтатьиОборотов",ФинансовыйПоказатель);
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустойИсточникДанных",Новый(Тип("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования")));
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		
	КонецЦикла;
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
		
	СписокЦФО=Новый СписокЗначений;
		
	//Заполним список ЦФО для отбора
	Если НЕ УправленческоеПодразделение.Пустая() Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	Подразделения.Ссылка КАК УправленческоеПодразделение
		             |ИЗ
		             |	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+" КАК Подразделения
		             |
		             |ГДЕ
		             |	Подразделения.Ссылка В ИЕРАРХИИ(&УправленческоеПодразделение)";
					 
		Запрос.УстановитьПараметр("УправленческоеПодразделение",УправленческоеПодразделение);
		СписокЦФО.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УправленческоеПодразделение"));
		
	КонецЕсли;
	
	ТабОперации = Документ.БюджетныеОперации.Выгрузить();
	
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ПолучитьДанныеПоСтатье(Документ,РезультатЗапроса,СписокЦФО,ТабОперации,БюджетированиеПоОрганизациям);
		
	КонецЦикла; 
	
КонецПроцедуры

// Формирует строку (строки) таблицы "Бюджетные операции" по данным источника,
// указанного для статьи оборотов 
//
// Параметры
//  Статья: строка результата запроса - содержит данные, необходимые для 
//  получения фактических данных.
//  СписокЦФО: список значений - список ЦФО для отбора данных.
//  ТабОперации: таблица значений - шаблон для заполнения перед добавлением в ТЧ "БюджетныеОперации"
//
Процедура ПолучитьДанныеПоСтатье(Документ,Статья,СписокЦФО,ТабОперации,БюджетированиеПоОрганизациям=Ложь)
	
	УправленческоеПодразделение = Документ.УправленческоеПодразделение;
	Организация 				= Документ.Организация;
	Ссылка 						= Документ.Ссылка;
	Дата 						= Документ.Дата;
	ДатаНачала 					= Документ.ДатаНачала;
	ДатаКонца 					= Документ.ДатаКонца;
	
	ПостроительОтчета=Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст=Статья.ТекстЗапроса;
	
	СохраненнаяНастройка=Статья.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Если Статья.ПроизвольныйЗапрос Тогда
			ПостроительОтчета.ЗаполнитьНастройки();
		КонецЕсли;
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			Если Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДатаРасчета Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Дата);
			ИначеЕсли Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.НачалоПлановогоПериода Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,ДатаНачала);
			ИначеЕсли Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ОкончаниеПлановогоПериода Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,КонецДня(ДатаКонца));
			ИначеЕсли Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДокументРегистратор Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Ссылка);
			ИначеЕсли Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.Организация Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Организация);
			ИначеЕсли Параметр.Значение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПодразделениеРасчета Тогда
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,УправленческоеПодразделение);
			Иначе	
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИзмеренияИсточника=Статья.ИзмеренияИсточника.Выгрузить();
	
	Для Каждого РазрезУчета Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
		Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(Статья.Финансовыйпоказатель,РазрезУчета.Значение) Тогда 
			СтрокаИзмерения=ИзмеренияИсточника.Найти(РазрезУчета.Значение,"ИзмерениеБюджетирования");
			Если НЕ СтрокаИзмерения=Неопределено Тогда
				ПолеВыбора=ПостроительОтчета.ВыбранныеПоля.Найти(СтрокаИзмерения.ИмяПоляИсточника);
				ПостроительОтчета.ВыбранныеПоля.Удалить(ПолеВыбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ УправленческоеПодразделение.Пустая() Тогда
		СтрокаИзмерения=ИзмеренияИсточника.Найти(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение,"ИзмерениеБюджетирования");
		Если НЕ СтрокаИзмерения=Неопределено Тогда
			НовыйОтбор=ПостроительОтчета.Отбор.Добавить(СтрокаИзмерения.ПутьКДанным);
			НовыйОтбор.ВидСравнения= ВидСравнения.ВСпискеПоИерархии;
			НовыйОтбор.Значение=СписокЦФО;
			НовыйОтбор.Использование=Истина;
		КонецЕсли;
	КонецЕсли;
	Если БюджетированиеПоОрганизациям Тогда
	    СтрокиИзмерениеОрганизация = ИзмеренияИсточника.НайтиСтроки(Новый Структура("ИзмерениеБюджетирования",Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация));
		Если СтрокиИзмерениеОрганизация.Количество() <> 0 Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(СтрокиИзмерениеОрганизация[0].ПутьКДанным);
			ЭлементОтбора.ВидСравнения 		= ВидСравнения.Равно;
			ЭлементОтбора.Значение 			= Организация;
			ЭлементОтбора.Использование 	= Истина;
		КонецЕсли;
	КонецЕсли;
				
	ДатыОтбораДанныхИсточника=Статья.ДатыОтбораДанныхИсточника.Выгрузить();
	
	Для каждого Граница Из ДатыОтбораДанныхИсточника Цикл
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			НачальнаяДатаГраницы=ДатаНачала;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			НачальнаяДатаГраницы=КонецДня(ДатаКонца);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериодаГраница Тогда
			НачальнаяДатаГраницы=Новый Граница(КонецДня(ДатаКонца), ВидГраницы.Включая);
			ПостроительОтчета.Текст = СтрЗаменить(ПостроительОтчета.Текст,"&"+Граница.ИмяДатаГраницы+" КАК Период","&prmКонецПериода КАК Период");
			ПостроительОтчета.Параметры.Вставить("prmКонецПериода",КонецДня(ДатаКонца));
			ПостроительОтчета.ЗаполнитьНастройки();
		КонецЕсли;
		ПостроительОтчета.Параметры.Вставить(Граница.ИмяДатаГраницы,НачальнаяДатаГраницы);
	КонецЦикла;
	
	Если ПостроительОтчета.ВыбранныеПоля.Найти("Период")=Неопределено Тогда
		Если НЕ ПостроительОтчета.ДоступныеПоля.Найти("Период")=Неопределено Тогда
			ПостроительОтчета.ВыбранныеПоля.Вставить("Период","Период",ПостроительОтчета.ВыбранныеПоля.Количество()+1);
		Иначе
			Сообщить(Статья.ФинансовыйПоказательПредставление+": в источнике для получения фактических данных отсутствует поле ""Период"". Данные не получены.");
			Возврат;
		КонецЕсли;
	КонецЕсли;		
		
	Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор")=Неопределено Тогда
		Если НЕ ПостроительОтчета.ДоступныеПоля.Найти("Регистратор")=Неопределено Тогда
			ПостроительОтчета.ВыбранныеПоля.Вставить("Регистратор","Регистратор",ПостроительОтчета.ВыбранныеПоля.Количество()+1);
		Иначе
			Попытка
				ПостроительОтчета.ДоступныеПоля.Добавить("Регистратор","Регистратор");
				ПостроительОтчета.ВыбранныеПоля.Вставить("Регистратор","Регистратор",ПостроительОтчета.ВыбранныеПоля.Количество()+1);
			Исключение
				Сообщить(Статья.ФинансовыйПоказательПредставление+": в источнике для получения фактических данных отсутствует поле ""Регистратор"". Данные о документе движений не получены.");
			КонецПопытки;
			//Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	ПостроительОтчета.Выполнить();
	ТабИсточника=ПостроительОтчета.Результат.Выгрузить();
	Если ТабИсточника.Количество()=0 Тогда
		Сообщить("Нет данных по статье "+Статья.ФинансовыйПоказательПредставление);
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из ИзмеренияИсточника Цикл
		Если НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(Статья.ФинансовыйПоказатель,Строка.ИзмерениеБюджетирования)
			Тогда
			Продолжить;
		КонецЕсли;
		Если ТабИсточника.Колонки.Найти(Строка.ИзмерениеБюджетирования) = Неопределено Тогда
			ТабИсточника.Колонки[Строка.ИмяПоляИсточника].Имя = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Строка.ИзмерениеБюджетирования);
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаИсточник Из ТабИсточника Цикл
		
		НоваяОперация=ТабОперации.Добавить();
		
		Для каждого Колонка Из ТабОперации.Колонки Цикл
			
			КолонкаИсточника = ТабИсточника.Колонки.Найти(Колонка.Имя);
			Если КолонкаИсточника <> Неопределено Тогда			
				НоваяОперация[Колонка.Имя] = СтрокаИсточник[Колонка.Имя];
			КонецЕсли;
			
		КонецЦикла;
		Если НЕ Статья.ПоказательИсточникаДанныхДляФактаКол="" Тогда
			Если НЕ СтрокаИсточник[Статья.ПоказательИсточникаДанныхДляФактаКол]=NULL Тогда 
				НоваяОперация.Количество=СтрокаИсточник[Статья.ПоказательИсточникаДанныхДляФактаКол]*Статья.КоэффициентДляФактаКол;
			Иначе
				НоваяОперация.Количество=0;
			КонецЕсли;
		Иначе
			НоваяОперация.Количество=0;
		КонецЕсли;
		Если НЕ Статья.ПоказательИсточникаДанныхДляФактаСум="" Тогда
			Если НЕ СтрокаИсточник[Статья.ПоказательИсточникаДанныхДляФактаСум]=NULL Тогда
				НоваяОперация.Сумма=СтрокаИсточник[Статья.ПоказательИсточникаДанныхДляФактаСум]*Статья.КоэффициентДляФактаСум;
			Иначе
				НоваяОперация.Сумма=0;
			КонецЕсли;
		Иначе
			НоваяОперация.Сумма=0;
		КонецЕсли;
	КонецЦикла; 
				
	// Заполним валюты операций
	Если Статья.СпособОпределенияВалютыОборотаФакт=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ВалютаУправленческогоУчета Тогда
		ТабОперации.ЗаполнитьЗначения(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"),"Валюта");
	ИначеЕсли Статья.СпособОпределенияВалютыОборотаФакт=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ВалютаРегламентированногоУчета Тогда
		ТабОперации.ЗаполнитьЗначения(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"),"Валюта");
	ИначеЕсли Статья.СпособОпределенияВалютыОборотаФакт=Перечисления.фин_СпособыОпределенияВалютыОборотаПоСтатье.ОсновнаяВалютаСтатьи Тогда
	    ТабОперации.ЗаполнитьЗначения(Статья.ОсновнаяВалюта,"Валюта");
	КонецЕсли;
	
	ТабОперации.ЗаполнитьЗначения(Статья.ФинансовыйПоказатель,"ФинансовыйПоказатель");
	
	// Переносим сформированные операции в табличную часть
	Для каждого СтрокаОперации Из ТабОперации Цикл
		
		Если СтрокаОперации.Количество=0 И СтрокаОперации.Сумма=0 Тогда
			
			Продолжить;
			
		Иначе
			
			НоваяОперация=Документ.БюджетныеОперации.Добавить();
			НоваяОперация.Период=СтрокаОперации.Период;
			НоваяОперация.Валюта=СтрокаОперации.Валюта;
			НоваяОперация.ФинансовыйПоказатель=СтрокаОперации.ФинансовыйПоказатель;
			НоваяОперация.Количество=СтрокаОперации.Количество;
			НоваяОперация.Сумма=СтрокаОперации.Сумма;
			НоваяОперация.Регистратор=СтрокаОперации.Регистратор;
			Для Каждого РазрезУчета Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
				 ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезУчета.Значение);
				 НоваяОперация[ИмяРазреза]=СтрокаОперации[ИмяРазреза];
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабОперации.Очистить();
		
КонецПроцедуры //ПолучитьДанныеПоСтатье



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// Заполнение

Процедура ЗаполнитьПоДокументуОснованию(Объект, ДокументОснование) Экспорт
	
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Объект, ДокументОснование);
	
//	Объект.ДокументОснование = ДокументОснование;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов") Тогда
		Объект.Дата = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(Объект,ДокументОснование);
		Объект.ДатаНачала = ТекущаяДата();
		Объект.ДатаКонца = ТекущаяДата();
		//Объект.Состояние = фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
		ТЧ = ДокументОснование.БюджетныеОперации.Выгрузить();
		ТЧ.ЗаполнитьЗначения(ТекущаяДата(),"Период");
		Объект.БюджетныеОперации.Загрузить(ТЧ);
	КонецЕсли;
	
КонецПроцедуры   


Процедура ЗаполнитьПоОснованию(Объект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Структура") Тогда
	
		фин_ПроцедурыМеханизмовБюджетирования.ЗаполнитьДокументРегистрацииФактаПоОстаткамОтчета(Объект, ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПереопределяемыеТаблицы = Новый Массив;
	ПереопределяемыеТаблицы.Добавить("БюджетныеОперации");
	
	ДополнительныеПараметрыЗапросов = Новый Структура;
	ДополнительныеПараметрыЗапросов.Вставить("ВалютаУпрУчета",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	ДополнительныеПараметрыЗапросов.Вставить("БюджетированиеПоОрганизациям",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"));
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ,,,,,,ПереопределяемыеТаблицы,ДополнительныеПараметрыЗапросов);
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ТекстЗапросаБюджетныеОперации(НомераТаблиц,ПараметрыПроведения, Реквизиты)  Экспорт

	ТекстЗапроса = "";
	
	Если НЕ Реквизиты["ЕстьБюджетныеОперации"] Тогда
		ПараметрыПроведения.Вставить("ТаблицаБюджетныеОперации", Неопределено);
	Иначе
	ТекстЗапроса="ВЫБРАТЬ
	             |	БюджетныеОперации.Ссылка,
	             |	БюджетныеОперации.Ссылка.Дата КАК Дата,
	             |	БюджетныеОперации.НомерСтроки,
	             |	БюджетныеОперации.Период,
	             |	БюджетныеОперации.ФинансовыйПоказатель,
	             |	БюджетныеОперации.УправленческоеПодразделение,
	             |	БюджетныеОперации.Проект,
	             |	БюджетныеОперации.Контрагент,
	             |	БюджетныеОперации.Номенклатура,
	             |	БюджетныеОперации.Валюта,
	             |	БюджетныеОперации.Количество,
	             |	БюджетныеОперации.Сумма,
	             |	БюджетныеОперации.Регистратор,
	             |	БюджетныеОперации.Разрез1,
	             |	БюджетныеОперации.Разрез10,
	             |	БюджетныеОперации.Разрез2,
	             |	БюджетныеОперации.Разрез3,
	             |	БюджетныеОперации.Разрез4,
	             |	БюджетныеОперации.Разрез5,
	             |	БюджетныеОперации.Разрез6,
	             |	БюджетныеОперации.Разрез7,
	             |	БюджетныеОперации.Разрез8,
	             |	БюджетныеОперации.Разрез9,
	             |	БюджетныеОперации.ДополнительныеРазрезы,
	             |	БюджетныеОперации.Ссылка.Организация
	             |ПОМЕСТИТЬ ВТ_Операции
	             |ИЗ
	             |	Документ.фин_УчетФактическихДанныхПоБюджетам.БюджетныеОперации КАК БюджетныеОперации
	             |ГДЕ
	             |	БюджетныеОперации.Ссылка = &Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата,
	             |	КурсыВалют.Курс КАК Курс,
	             |	КурсыВалют.Кратность КАК Кратность,
	             |	КурсыВалют.Валюта КАК Валюта
	             |ПОМЕСТИТЬ ВТ_КурсыОперации
	             |ИЗ
	             |	РегистрСведений.КурсыВалют КАК КурсыВалют
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	             |			Обороты.Дата КАК Дата,
	             |			КурсыВнутр.Валюта КАК Валюта
	             |		ИЗ
	             |			РегистрСведений.КурсыВалют КАК КурсыВнутр
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |					УчетФактическихДанныхПоБюджетамБюджетныеОперации.Период КАК Дата,
	             |					УчетФактическихДанныхПоБюджетамБюджетныеОперации.Валюта КАК ВалютаДок
	             |				ИЗ
	             |					ВТ_Операции КАК УчетФактическихДанныхПоБюджетамБюджетныеОперации) КАК Обороты
	             |				ПО (Обороты.Дата >= КурсыВнутр.Период)
	             |					И КурсыВнутр.Валюта = Обороты.ВалютаДок
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Обороты.Дата,
	             |			КурсыВнутр.Валюта) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	             |		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	             |			И КурсыВалют.Валюта = ПериодПоследнейЗаписиКурсаНаДатуОборота.Валюта
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПериодПоследнейЗаписиКурсаНаДатуОборота.Дата КАК Дата,
	             |	КурсыВалют.Курс КАК Курс,
	             |	КурсыВалют.Кратность КАК Кратность
	             |ПОМЕСТИТЬ ВТ_КурсыУпрУчета
	             |ИЗ
	             |	РегистрСведений.КурсыВалют КАК КурсыВалют
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			МАКСИМУМ(КурсыВнутр.Период) КАК Период,
	             |			Обороты.Дата КАК Дата
	             |		ИЗ
	             |			РегистрСведений.КурсыВалют КАК КурсыВнутр
	             |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |					ОперацииДата.Период КАК Дата
	             |				ИЗ
	             |					ВТ_Операции КАК ОперацииДата) КАК Обороты
	             |				ПО (Обороты.Дата >= КурсыВнутр.Период)
	             |					И (КурсыВнутр.Валюта = &ВалютаУпрУчета)
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			Обороты.Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуОборота
	             |		ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуОборота.Период
	             |ГДЕ
	             |	КурсыВалют.Валюта = &ВалютаУпрУчета
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	БюджетныеОперацииДокумент.Дата КАК Период,
	             |	БюджетныеОперацииДокумент.Регистратор КАК ПервичныйДокумент,
	             |	БюджетныеОперацииДокумент.Валюта КАК Валюта,
	             |	БюджетныеОперацииДокумент.УправленческоеПодразделение КАК УправленческоеПодразделение,
	             |	БюджетныеОперацииДокумент.Проект КАК Проект,
	             |	БюджетныеОперацииДокумент.Контрагент КАК Контрагент,
	             |	БюджетныеОперацииДокумент.Номенклатура КАК Номенклатура,
	             |	БюджетныеОперацииДокумент.ДополнительныеРазрезы КАК ДополнительныеРазрезы,
	             |	БюджетныеОперацииДокумент.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
	             |	СУММА(БюджетныеОперацииДокумент.Сумма) КАК ВалютнаяСумма,
	             |	СУММА(БюджетныеОперацииДокумент.Количество) КАК Количество,
	             |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	             |				КОГДА БюджетныеОперацииДокумент.Валюта = &ВалютаУпрУчета
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма
	             |				КОГДА БюджетныеОперацииДокумент.Валюта <> &ВалютаУпрУчета
	             |						И КурсыОперации.Курс <> 0
	             |						И КурсыУпрУчета.Курс <> 0
	             |					ТОГДА БюджетныеОперацииДокумент.Сумма * КурсыОперации.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыОперации.Кратность)
	             |				ИНАЧЕ 0
	             |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр,
	             |	БюджетныеОперацииДокумент.Период КАК ПериодПланирования,
	             |	ВЫБОР
	             |		КОГДА &БюджетированиеПоОрганизациям
	             |			ТОГДА БюджетныеОперацииДокумент.Организация
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	             |	КОНЕЦ КАК Организация
	             |ИЗ
	             |	ВТ_Операции КАК БюджетныеОперацииДокумент
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыОперации КАК КурсыОперации
	             |		ПО (КурсыОперации.Дата = БюджетныеОперацииДокумент.Период)
	             |			И (КурсыОперации.Валюта = БюджетныеОперацииДокумент.Валюта)
	             |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыУпрУчета КАК КурсыУпрУчета
	             |		ПО (КурсыУпрУчета.Дата = БюджетныеОперацииДокумент.Период)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	БюджетныеОперацииДокумент.Дата,
	             |	БюджетныеОперацииДокумент.Регистратор,
	             |	БюджетныеОперацииДокумент.Период,
	             |	БюджетныеОперацииДокумент.Валюта,
	             |	БюджетныеОперацииДокумент.УправленческоеПодразделение,
	             |	БюджетныеОперацииДокумент.ДополнительныеРазрезы,
	             |	БюджетныеОперацииДокумент.Проект,
	             |	БюджетныеОперацииДокумент.Контрагент,
	             |	БюджетныеОперацииДокумент.Номенклатура,
	             |	БюджетныеОперацииДокумент.ФинансовыйПоказатель,
	             |	БюджетныеОперацииДокумент.Период,
	             |	ВЫБОР
	             |		КОГДА &БюджетированиеПоОрганизациям
	             |			ТОГДА БюджетныеОперацииДокумент.Организация
	             |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	             |	КОНЕЦ";

		ТекстЗапроса = ТекстЗапроса + фин_УправлениеПроведениемДокументовСервер.ТекстРазделителяЗапросовПакета();
		НомераТаблиц.Вставить("ВТ_Операции",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_КурсыОперации",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_КурсыУпрУчета",  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаБюджетныеОперации",  НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции


#КонецЕсли