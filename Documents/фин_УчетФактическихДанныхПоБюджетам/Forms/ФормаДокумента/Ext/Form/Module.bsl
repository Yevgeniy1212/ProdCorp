#Область ОбработчикиСобытийформы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Если Объект.Ссылка.Пустая() Тогда
        Объект.ДатаКонца = ТекущаяДата();    
		Объект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Состояние) Тогда
		Объект.Состояние=фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
	КонецЕсли;
	ВалютаРегл = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	мТекущаяДатаДокумента = Объект.Дата; // запомним текущую дату документа для контроля номера документа
	// Установить доступность формы с учетом даты запрета редактирования	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("БюджетныеОперации");
	НастроитьРазрезыБюджета(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов"),СписокТЧ);
	УстановитьВидимость();
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.БюджетныеОперации);
	Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка = Истина;
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	фин_ОбщегоНазначенияКлиентСервер.УстановитьЦенуВДинамическойКолонке(Объект.БюджетныеОперации);
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

#Область ОбработчикиСобытийТаблицыБюджетныеОперации

&НаКлиенте
Процедура БюджетныеОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
				Элементы.БюджетныеОперации.ТекущиеДанные[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,Элементы.БюджетныеОперации.ТекущиеДанные[Пара.Представление]);
			КонецЦикла;
			Элементы.БюджетныеОперации.ТекущиеДанные.Период = Объект.ДатаНачала;
			Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель = Объект.ФинансовыйПоказатель;
			Элементы.БюджетныеОперации.ТекущиеДанные.УправленческоеПодразделение = Объект.УправленческоеПодразделение;
			Элементы.БюджетныеОперации.ТекущиеДанные.Валюта = ВалютаРегл;
		КонецЕсли;
	КонецЕсли;
	ОписаниеТипов = ОписаниеТиповНоменклатурногоПеречня(Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель);
	Элементы.БюджетныеОперацииНоменклатура.ОграничениеТипа = ОписаниеТипов;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БюджетныеОперации.ТекущиеДанные;
	ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ТекущиеДанные.ФинансовыйПоказатель);
	ТекущиеДанные.Номенклатура = ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Номенклатура);
	ОбработатьИзменениеПоказателя(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БюджетныеОперации.ТекущиеДанные;
	Если ТекущиеДанные.Количество<>0 И ТекущиеДанные.Цена<>0 Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",ПараметрыВыбораСтатьи(Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель),Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииФинансовыйПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.фин_СтатьиБюджета") Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.БюджетныеОперации.ТекущиеДанные.ФинансовыйПоказатель = ФинансовыйПоказатель(ВыбранноеЗначение);
		БюджетныеОперацииФинансовыйПоказательПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	мТекущаяДатаДокумента = Объект.Дата; // запомним текущую дату документа для контроля номера документа
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Автозаполнение(Команда)
	Если Объект.БюджетныеОперации.Количество() > 0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаВопросаПередЗаполнением",ЭтотОбъект);
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ПоказатьВопрос(ОбработчикОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		АвтозаполнениеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораИзСтатейБюджетов(Команда)
	Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка = НЕ Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортВТабличныйДокумент(Команда)
	ЗаголовокФайла = "Фактические данные за период "+Формат(Объект.ДатаНачала,"ДФ=dd.MM.yyyy")+" - " + Формат(Объект.ДатаКонца,"ДФ=dd.MM.yyyy");
	ПараметрыФормы = Новый Структура("ДляЗагрузкиФактическихИПрогнозныхДанных,ЗаголовокФайла,АдресДанных",Истина,ЗаголовокФайла,АдресДанныхТЧ());
	ОткрытьФорму("Обработка.фин_ОбменТабличнымиДокументами.Форма",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзТабличногоДокумента(Команда)
	ПараметрыФормы = Новый Структура("ДляЗагрузкиФактическихИПрогнозныхДанных,Загрузка,АдресДанных",Истина,Истина,АдресДанных());
	ОписаниеОповещенияЗагрузкиТабличногоДокумента = Новый ОписаниеОповещения("ОбработкаОповещенияЗагрузкиТабличногоДокумента",ЭтотОбъект);
	ОткрытьФорму("Обработка.фин_ОбменТабличнымиДокументами.Форма",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор,,,ОписаниеОповещенияЗагрузкиТабличногоДокумента);
КонецПроцедуры

&НаКлиенте
Процедура БюджетныйКонтроль(Команда)
	Если Модифицированность Тогда
		//Вставить содержимое обработчика.
		ПараметрыФормы = Новый Структура("Документ,АдресДанных",Объект.Ссылка,АдресДанныхТЧ(Ложь));
		ОткрытьФорму("Обработка.фин_КонтрольПрогнозныхТранзакций.Форма", ПараметрыФормы,ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		//Вставить содержимое обработчика.
		ПараметрыФормы = Новый Структура("Документ",Объект.Ссылка);
		ОткрытьФорму("Обработка.фин_КонтрольПрогнозныхТранзакций.Форма", ПараметрыФормы,ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель);
КонецФункции

//Процедура УстановитьВидимость
//
&НаСервере
Процедура УстановитьВидимость()
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") Тогда 
	 	Элементы.Организация.Видимость = Истина;
	Иначе
	 	Элементы.Организация.Видимость = Ложь;
    КонецЕсли;
КонецПроцедуры //УстановитьВидимость

&НаСервере
Функция ПолучитьИмяРазреза(Значение)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Значение)
КонецФункции

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета(ПереченьРазрезов,СписокТЧ)
	ОбработанныеРазрезы=Новый Массив;
	Для Каждого Разрез Из ПереченьРазрезов Цикл
		//ИмяРазреза = фин_ПроцедурыМеханизмовБюджетирования.ИмяРазреза(Разрез.Значение);
		ИмяРазреза = ПолучитьИмяРазреза(Разрез.Значение);
		СоответствиеРазрезовИзмерениям.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение),ИмяРазреза);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение);
		ЭтотОбъект["ТипРазреза"+НомерРазреза]=ЭлементПВХ;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы["БюджетныеОперацииРазрез"+НомерРазреза].Видимость 	= Истина;
		КонецЦикла;
		Для Каждого ТЧ Из СписокТЧ Цикл
			Элементы["БюджетныеОперацииРазрез"+НомерРазреза].Заголовок = ?(СокрЛП(ЭлементПВХ.ПредставлениеДополнительногоРеквизита)="",Строка(ЭлементПВХ),ЭлементПВХ.ПредставлениеДополнительногоРеквизита);
			Элементы["БюджетныеОперацииРазрез"+НомерРазреза].ОграничениеТипа = ЭлементПВХ.ТипЗначения;
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		//Элементы["БюджетныеОперацииРазрез"+НомерРазреза]
		ИмяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(имяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Элементы["БюджетныеОперации"+ИмяЭлемента].Видимость 			= Ложь;
				//Элементы["БюджетныеОперации"+ИмяЭлемента].ИзменятьВидимость 	= Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеНаСервере()
	Документы.фин_УчетФактическихДанныхПоБюджетам.Автозаполнение(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПередЗаполнением(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		АвтозаполнениеНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоказателя(СтрокаДокумента)
	СписокРазрезов = ВсеРазрезы();
	ФинансовыйПоказатель = СтрокаДокумента.ФинансовыйПоказатель;
	РазрезыФинансовогоПоказателя = РазрезыФинансовогоПоказателя(ФинансовыйПоказатель);
	Для Каждого Разрез Из СписокРазрезов Цикл
		Если РазрезыФинансовогоПоказателя.НайтиПоЗначению(Разрез)=Неопределено Тогда
			Если Найти(Разрез,"Разрез")=0 Тогда
				СтрокаДокумента[Разрез] = "";
			Иначе
				СтрокаДокумента[Разрез] = ПриведенноеЗначение(ЭтотОбъект["Тип"+СтрЗаменить(Разрез,"Разрез","Разреза")],Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрезыФинансовогоПоказателя(ФинансовыйПоказатель)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокИменРазрезовПоказателя(ФинансовыйПоказатель);	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеРазрезы()
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВыбораСтатьи(ФинансовыйПоказатель)
	Статья = фин_ПроцедурыМеханизмовБюджетирования.ОпределитьСтатьюБюджетаПоПоказателю(ФинансовыйПоказатель);
	Структура = Новый Структура("ТекущаяСтрока",Статья);
	Если ЗначениеЗаполнено(Статья) Тогда
		Структура.Вставить("Отбор",Новый Структура("Владелец",Статья.Владелец));
	КонецЕсли;
	Возврат структура;
КонецФункции

&НаСервереБезКонтекста
Функция ФинансовыйПоказатель(СтатьяБюджета)
	Возврат СтатьяБюджета.ФинансовыйПоказатель;	
КонецФункции

&НаСервереБезКонтекста
Функция ПриведенноеЗначение(ЭлементПВХ,Значение)
	Возврат ?(ЗначениеЗаполнено(ЭлементПВХ),ЭлементПВХ.ТипЗначения.ПривестиЗначение(Значение),Неопределено);	
КонецФункции

&НаКлиенте
Процедура ПодборИзПлана(Команда)
	ОткрытьФорму("РегистрНакопления.фин_ОборотыБюджетов.ФормаСписка",Новый Структура("РежимПодбора,Сценарий",Истина,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования")),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		НС = Объект.БюджетныеОперации.Добавить();
		ЗаполнитьЗначенияСвойств(НС,ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтрокуВОтдельномОкне(Команда)
	Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка = НЕ Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура БюджетныеОперацииПередНачаломИзменения(Элемент, Отказ)
	Если Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка Тогда
		Отказ = Истина;
		ОткрытьРедактор(Элементы.БюджетныеОперации.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактор(ИдентификаторСтроки=Неопределено,Копирование=Ложь)
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ФинансовыйПоказатель,Период",Объект.ФинансовыйПоказатель,Объект.ДатаНачала);
	Иначе
		СтрокаДокумента = Объект.БюджетныеОперации.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураПараметров = ПустаяСтруктура();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,СтрокаДокумента);
	КонецЕсли;
	СтруктураПараметров.Вставить("РежимВыбораИзСтатейБюджетов",Элементы.БюджетныеОперацииРежимВыбораИзСтатейБюджетов.Пометка);
	СтруктураПараметров.Вставить("ТолькоПросмотр",ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОткрытияРедактора",ЭтотОбъект,?(Копирование,Неопределено,ИдентификаторСтроки));
	ОткрытьФорму("Обработка.фин_РедактированиеСтрокиТабличнойЧастиДокумента.Форма",СтруктураПараметров,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОткрытияРедактора(Результат,ИдентификаторСтроки) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	СтрокаДокумента = ?(ИдентификаторСтроки=Неопределено,Объект.БюджетныеОперации.Добавить(),Объект.БюджетныеОперации.НайтиПоИдентификатору(ИдентификаторСтроки));
	ЗаполнитьЗначенияСвойств(СтрокаДокумента,Результат);
	Элементы.БюджетныеОперации.ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяСтруктура()
	Структура = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Обработки.фин_РедактированиеСтрокиТабличнойЧастиДокумента.Реквизиты Цикл
		Структура.Вставить(Реквизит.Имя);	
	КонецЦикла;
	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура БюджетныеОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.БюджетныеОперацииРедактироватьСтрокуВОтдельномОкне.Пометка Тогда
		Отказ = Истина;
		ОткрытьРедактор(?(Копирование,Элементы.БюджетныеОперации.ТекущаяСтрока,Неопределено),Копирование);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция АдресДанныхТЧ(ДляОбменаExcel=Истина)
	ТаблицаЗначений = Объект.БюджетныеОперации.Выгрузить();
	Если ДляОбменаExcel Тогда
		ТаблицаЗначений.Колонки.Период.Имя 	= "ПериодПланирования";
		ТаблицаЗначений.Колонки.Сумма.Имя 	= "ВалютнаяСумма";
		ТаблицаЗначений.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число"));
		ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			Если СтрокаТаблицы.ВалютнаяСумма=0 ИЛИ СтрокаТаблицы.Валюта = ВалютаУправленческогоУчета Тогда
				СтрокаТаблицы.СуммаУпр = СтрокаТаблицы.ВалютнаяСумма;
			Иначе
		
				КурсСтаройВалюты 	= фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(СтрокаТаблицы.Валюта,	СтрокаТаблицы.ПериодПланирования);
				КурсНовойВалюты 	= фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,		СтрокаТаблицы.ПериодПланирования);
				
				СтарыйКурс			= КурсСтаройВалюты.Курс;
				СтараяКратность 	= КурсСтаройВалюты.Кратность;
				
				СтрокаТаблицы.СуммаУпр = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ВалютнаяСумма,
														СтрокаТаблицы.Валюта,ВалютаУправленческогоУчета,
														СтарыйКурс,КурсНовойВалюты.Курс,
														СтараяКратность,КурсНовойВалюты.Кратность);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	АдресТЧ = ПоместитьВоВременноеХранилище(ТаблицаЗначений,УникальныйИдентификатор);
	Возврат АдресТЧ;
КонецФункции

&НаСервере
Функция АдресДанных()
	АдресТЧ = ПоместитьВоВременноеХранилище("",УникальныйИдентификатор);
	Возврат АдресТЧ;
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияЗагрузкиТабличногоДокумента(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
		ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(Результат.Адрес);
		Если Результат.Добавлять = Ложь Тогда
			Объект.БюджетныеОперации.Очистить();
		КонецЕсли;
		ЗагружаемыеДанные.Колонки.ВалютнаяСумма.Имя 		= "Сумма";
		ЗагружаемыеДанные.Колонки.ПериодПланирования.Имя 	= "Период";
		Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
				СтрокаТаблицы.Период = Объект.ДатаНачала;
			КонецЕсли;
			Если СтрокаТаблицы.ФинансовыйПоказатель.УчетПоСумме Тогда
				Если СтрокаТаблицы.Сумма=0 И СтрокаТаблицы.СуммаУпр<>0 Тогда
			
					КурсСтаройВалюты 	= фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,СтрокаТаблицы.Период);
					КурсНовойВалюты 	= фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(ВалютаРегл,СтрокаТаблицы.Период);
					
					СтарыйКурс			= КурсСтаройВалюты.Курс;
					СтараяКратность 	= КурсСтаройВалюты.Кратность;
					
					СтрокаТаблицы.Сумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУпр,
															ВалютаУправленческогоУчета,ВалютаРегл,
															СтарыйКурс,КурсНовойВалюты.Курс,
															СтараяКратность,КурсНовойВалюты.Кратность);
				КонецЕсли;
			Иначе
				СтрокаТаблицы.Сумма=0;
			КонецЕсли;
			Если СтрокаТаблицы.ФинансовыйПоказатель.УчетПоКоличеству Тогда
				СтрокаТаблицы.Количество=0;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
			Если ЗначениеЗаполнено(СтрокаДанных.ФинансовыйПоказатель) И (СтрокаДанных.Сумма<>0 ИЛИ СтрокаДанных.Количество<>0) Тогда
				НоваяСтрока = Объект.БюджетныеОперации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
				Для Каждого Пара Из СоответствиеРазрезовИзмерениям Цикл
					НоваяСтрока[Пара.Представление]=ПриведенноеЗначение(Пара.Значение,НоваяСтрока[Пара.Представление]);
				КонецЦикла;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) И НоваяСтрока.ФинансовыйПоказатель.УчетПоСумме Тогда
					НоваяСтрока.Валюта = ВалютаРегл;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
