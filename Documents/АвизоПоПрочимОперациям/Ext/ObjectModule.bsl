////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция ПечатьИзвещения()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Контрагент Как Получатель
	|ИЗ
	|	Документ.АвизоПоПрочимОперациям КАК Авизо
	|ГДЕ
	|	Ссылка = &ТекДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дебет", Перечисления.ВидыОперацийПоАвизо.Дебет);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Авизо.НомерСтроки,
	|	ВЫБОР КОГДА Авизо.ссылка.ВидОперации = &Дебет
	|	ТОГДА Авизо.ссылка.СчетУчетаРасчетовСоСтруктурнымПодразделением
	|	ИНАЧЕ Авизо.СчетУчетаБУ
	|	КОНЕЦ КАК СчетКонтрагента,
	|	ВЫБОР КОГДА Авизо.ссылка.ВидОперации = &Дебет
	|	ТОГДА Авизо.СчетУчетаБУ
	|	ИНАЧЕ Авизо.ссылка.СчетУчетаРасчетовСоСтруктурнымПодразделением
	|	КОНЕЦ КАК СчетУчетаБУ,
	|	Авизо.СубконтоБУ1 КАК СубконтоБУ1,
	|	Авизо.СубконтоБУ2 КАК СубконтоБУ2,
	|	Авизо.СубконтоБУ3 КАК СубконтоБУ3,
	|	Авизо.Сумма КАК Сумма
	|ИЗ
	|	Документ.АвизоПоПрочимОперациям.Корреспонденции КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка = &ТекДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
    |";
	
	ЗапросПоКорСчетам = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Авизо_Извещение";

	Макет = ПолучитьМакет("Макет");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Извещение", глСписокПрефиксовУзлов);
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ОбластьМакета.Параметры.СчетКонтрагента = СчетУчетаРасчетовСоСтруктурнымПодразделением;
	ОбластьМакета.Параметры.представлениеПериода = Шапка.ДатаДокумента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);
	Сумма = 0;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Для каждого ВыборкаСтрокТовары из ЗапросПоКорСчетам Цикл 
		
		ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтрока.Параметры.НомерСтроки = ЗапросПоКорСчетам.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтрока.Параметры.ПредставлениеСубконтоБУ = СокрЛП(ВыборкаСтрокТовары.СубконтоБУ1)
		+ " "+СокрЛП(ВыборкаСтрокТовары.СубконтоБУ2)
		+ " "+СокрЛП(ВыборкаСтрокТовары.СубконтоБУ3);
		//ОбластьСтрока.Параметры.СчетКонтрагента = счетучетаРасчетовСКонтрагентом;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма ;
		
	КонецЦикла;

	// Вывести Итого
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Сумма = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьИтого);


	// Вывести подписи
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(Шапка.Организация, КонецДня(Шапка.ДатаДокумента),);
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Бухгалтер), "Не предусмотрен", Бухгалтер);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьЗ8()
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Извещение" Тогда
		ТабДокумент = ПечатьИзвещения();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ГоловнойКонтрагент, Контрагент,СчетУчетаРасчетовСоСтруктурнымПодразделением,ДоговорКонтрагента");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Извещение","Извещение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Типовой;
	// Проводки по товарам
	Для каждого СтрокаТаблицы Из Корреспонденции Цикл
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Авизо";
		
		Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Дебет Тогда
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
			Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1, СтрокаТаблицы.СубконтоБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2, СтрокаТаблицы.СубконтоБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3, СтрокаТаблицы.СубконтоБУ3);
			
			Если СтрокаТаблицы.СчетУчетаБУ.Количественный Тогда
				 Проводка.КоличествоКт = СтрокаТаблицы.Количество;
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Кредит Тогда
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТаблицы.СубконтоБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТаблицы.СубконтоБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТаблицы.СубконтоБУ3);
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если СтрокаТаблицы.СчетУчетаБУ.Количественный Тогда
				 Проводка.КоличествоДт = СтрокаТаблицы.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТаблицы.Валюта;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалСумма;
		КонецЕсли;
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.Валюта;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалСумма;
		КонецЕсли;
		
		Проводка.Сумма  = СтрокаТаблицы.Сумма;
		
		Если ГоловнойКонтрагент <> Контрагент Тогда
			
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение = Организация;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
			Иначе
				КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			Если КонтрагентОрганизации <> ГоловнойКонтрагент Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Авизо";
				
				
				Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Дебет Тогда
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.ГоловнойКонтрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				КонецЕсли;
				
				Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Кредит Тогда
					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.ГоловнойКонтрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;
				
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтрокаТаблицы.Валюта;
					Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалСумма;
				КонецЕсли;
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтрокаТаблицы.Валюта;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалСумма;
				КонецЕсли;
				
				Проводка.Сумма  = СтрокаТаблицы.Сумма;
				
				Если СтруктураШапкиДокумента.Организация<>СтруктураШапкиДокумента.Организация.Головнаяорганизация тогда
					Если ЗначениеЗаполнено(Связанныйдокумент) Тогда
						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация.Головнаяорганизация;
						Проводка.Содержание   = "Авизо";
						Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Дебет Тогда
							Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
							
							Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", КонтрагентОрганизации);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
							
						КонецЕсли;
						
						Если ВидОперации = Перечисления.ВидыОперацийПоАвизо.Кредит Тогда
							Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", КонтрагентОрганизации);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
							
							Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСоСтруктурнымПодразделением;
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиОборотов",       СтруктураШапкиДокумента.ДоговорКонтрагента);
						КонецЕсли;
						
						
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = СтрокаТаблицы.Валюта;
							Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалСумма;
						КонецЕсли;
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтрокаТаблицы.Валюта;
							Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалСумма;
						КонецЕсли;
						
						Проводка.Сумма  = СтрокаТаблицы.Сумма;
					Конецесли;
				Конецесли;
				
				
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()


// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры
