Перем мВалютаРегламентированногоУчета Экспорт;
// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранит способ ведения взаиморасчетов
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 


// Проверяет правильность заполнения табличной части Прочее
// в специфических случаях
Процедура ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, СтруктураОбязательныхПолейДляПроверки, ТаблицаДокумента, ИмяТабличнойЧасти, Отказ, Заголовок)
	// Цикл по строкам табличной части.
	
	МетаданныеРеквизиты = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
    СтрокаНачалаСообщенияОбОшибке = "";
	
	Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ИмяТабличнойЧасти +""": ";
		// копируем исходные общие поля для проверки		
		СтруктураОбязательныхПолей = Новый Структура;
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолейДляПроверки Цикл
			
			СтруктураОбязательныхПолей.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		//////////////////////////////////////////////////////////////////////////////////
		// Проверяем построчно
		
		// проверка реквизитов НДС						
		Если СтруктураШапкиДокумента.УчитыватьНДС И ((СтрокаТаблицы.СтавкаНДС.Ставка <> 0) и (Не СтруктураШапкиДокумента.НДСВключенВСтоимость)) Тогда 
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;			
				
		Если СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда 
			// будут формироваться записи по НДС к возмещению
			СтруктураОбязательныхПолей.Вставить("НДСВидОборота");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДСКВозмещению");
		КонецЕсли;			
		
		// Цикл проверки по списку реквизитов
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];           			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда // нужно ругаться
				
				// Проверка и вывод сообщений
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //стандартное ругательство
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;				
				КонецЕсли;                                  
				
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;                                  
		КонецЦикла;		
	КонецЦикла;         

КонецПроцедуры	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ЕстьКоэффициент = Ложь)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СчетУчетаЦенности");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если ЕстьКоэффициент И (СтрокаТаблицы.Коэффициент <> 0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидНДС) Тогда		
			СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСОблагаемыйИмпорт;		
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("Контрагент");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Контрагент");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура выполняет заполнение реквизитов документа по реквизитам ДокументаОснования 
//
Процедура ЗаполнитьРеквизитыДокумента() Экспорт
		
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента 		= мВалютаРегламентированногоУчета;
		КурсВзаиморасчетов 		= 1;
		КратностьВзаиморасчетов = 1;		
	КонецЕсли;                                      	
	
КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

Процедура УставитьВидНалогаНДС() Экспорт
	//ли Контрагент.СтранаРезидентства.Код = 
КонецПроцедуры

// Процедура выполняет заполнение документа по 
// данным документа Списание товаров
//
Процедура ЗаполнитьТабличнуюЧастьПоДокументуОснования(Основание, СтруктураТЧ  = Неопределено) Экспорт
	Если СтруктураТЧ  = Неопределено Тогда 
		МетаданныеДокумента = Основание.ПолучитьОбъект().Метаданные();	
		
		// заполним табличные части
		// структура табличных частей документа основания для заполнения	
		СтруктураТЧ = Новый Структура;
		
		Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл			
			
			ИмяТабЧастиОснование = ТабЧасть.Имя;
			ИмяТабЧастиОбъекта   = ИмяТабЧастиОснование;		
			
			ТабличнаяЧасть = ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабЧастиОбъекта); 
			
			Если НЕ ТабличнаяЧасть = Неопределено Тогда
				СтруктураТЧ.Вставить(ИмяТабЧастиОбъекта, ИмяТабЧастиОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	// Заполнение ТЧ
	Для Каждого ЗначениеТЧ Из СтруктураТЧ Цикл		
		ИмяТабЧастиОбъекта = ЗначениеТЧ.Ключ;
		ИмяТабЧастиОснование = ЗначениеТЧ.Значение;
		Для Каждого Строка Из Основание[ИмяТабЧастиОснование] Цикл		
			НоваяСтрока = ЭтотОбъект[ИмяТабЧастиОбъекта].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);			
			ЗаполнитьРеквизитыДокументаОснованияВСтрокеТабличнойЧасти(НоваяСтрока, ИмяТабЧастиОбъекта, Основание);
						
			РассчитатьОборотПоРеализацииВСтрокеТабличнойЧасти(НоваяСтрока, ИмяТабЧастиОбъекта);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "СуммаНДС", Истина);    
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, ИмяТабЧастиОбъекта, Истина);
			ЗаполнитьРеквизитыНалоговогоУчета(НоваяСтрока);				
									
			Если ИмяТабЧастиОснование = "Товары"  Тогда
				НоваяСтрока.КодТНВЭД 			= НоваяСтрока.Номенклатура.КодТНВЭД;
				НоваяСтрока.НаименованиеТовара 	= ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.НаименованиеПолное)
																			, НоваяСтрока.Номенклатура.НаименованиеПолное
																			, НоваяСтрока.Номенклатура.Наименование);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
				КонецЕсли;	
				
				НоваяСтрока.СтранаПроисхождения = Контрагент.СтранаРезидентства;
				
			КонецЕсли;		
		КонецЦикла;		
	КонецЦикла
КонецПроцедуры // ЗаполнитьПоПриходнойНакладной

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
					
	ДокументОснование = Основание.Ссылка;
	
	//ВалютаДокумента = мВалютаРегламентированногоУчета;
	//КурсВзаиморасчетов = 1;
		
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
	// Документ не имеет смысла без данного признака
	УчитыватьНДС 		= Истина;		
	//из документа основания
	ЗаполнитьРеквизитыДокумента();
			
	Если ЗначениеЗаполнено(Контрагент.СтранаРезидентства) Тогда
	 	ВидНалогаНДС = Контрагент.СтранаРезидентства.УчастникТаможенногоСоюза.ВидНДСПриИмпорте;	
	КонецЕсли; 
	
	МетаданныеДокумента = ДокументОснование.ПолучитьОбъект().Метаданные();		
	// заполним табличные части
	// структура табличных частей документа основания для заполнения	
	СтруктураТЧ = Новый Структура;
	
	Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл			
		
		ИмяТабЧастиОснование = ТабЧасть.Имя;
		ИмяТабЧастиОбъекта   = ИмяТабЧастиОснование;		
		
		ТабличнаяЧасть = ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ИмяТабЧастиОбъекта); 
		
		Если НЕ ТабличнаяЧасть = Неопределено Тогда
			СтруктураТЧ.Вставить(ИмяТабЧастиОбъекта, ИмяТабЧастиОснование);
		КонецЕсли;
	КонецЦикла;
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КурсВзаиморасчетов = 1;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		КурсВзаиморасчетов = ДокументОснование.КурсВзаиморасчетов;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
		КратностьВзаиморасчетов = ДокументОснование.КратностьВзаиморасчетов;
	КонецЕсли;
		
	ЗаполнитьТабличнуюЧастьПоДокументуОснования(Основание,СтруктураТЧ);	
	
	УставитьВидНалогаНДС();
	
КонецПроцедуры

// Производит заполнение и установку реквизитов налогового учета и НДС 
// в строке табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт		
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОперацииРеализации)  Тогда
		СтрокаТабличнойЧасти.НДСВидОперацииРеализации = Справочники.ВидыРеализации.ПрочийОблагаемыйИмпорт;
	КонецЕсли;                                           	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНДС)  Тогда
		СтрокаТабличнойЧасти.ВидНДС = Перечисления.ВидыНДС.НДСОблагаемыйИмпорт;	
	КонецЕсли;
	// Для метода зачета заполняем дополнительные сведения
	Если СтрокаТабличнойЧасти.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НДСВидОборота)  Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли; 		
	КонецЕсли;	
Конецпроцедуры	

// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента = "")

	Если ЗаполнятьБУ = Истина Тогда		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПоРеализации;
		КонецЕсли; 		           		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
			СтрокаТЧ.СчетУчетаНДСКВозмещению = СчетаУчета.СчетУчетаНДСПоПриобретению;
		КонецЕсли; 		           		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДСКВозмещению = ПланыСчетов.Типовой.ПустаяСсылка();			
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьСчетаБУ

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Если ИмяТабЧасти = "ОС" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОС(Организация, СтрокаТЧ.ОсновноеСредство, Дата);			
	Иначе	
		СчетаУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоРеализации) Тогда
		СчетаУчета.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
	КонецЕсли;	
	Если  НЕ ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПоПриобретению) Тогда
		СчетаУчета.СчетУчетаНДСПоПриобретению = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению
	КонецЕсли;	
		
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
  	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);		

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Рассчитывает оборот по реализации, исходя
// из курса валюты и суммы дополнительных расходов
Процедура РассчитатьОборотПоРеализацииВСтрокеТабличнойЧасти(СтрокаТЧ, ИмяТабЧасти) Экспорт
   	ОборотПоРеализации = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма,СтрокаТЧ.Валюта,мВалютаРегламентированногоУчета,СтрокаТЧ.КурсВалюты,1);
	СтрокаТЧ.ОборотПоРеализации = ОборотПоРеализации + СтрокаТЧ.СуммаДополнительныхРасходов;      
КонецПроцедуры

// Заполняет реквизиты строки связанные с документом основания
// 
Процедура ЗаполнитьРеквизитыДокументаОснованияВСтрокеТабличнойЧасти(СтрокаТЧ, ИмяТабЧасти, Основание) Экспорт
	Если ТипЗнч(Основание)= Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СтрокаТЧ.Валюта							= Основание.ВалютаДокумента;
		СтрокаТЧ.КурсВалюты						= Основание.КурсВзаиморасчетов / Основание.КратностьВзаиморасчетов;
		СтрокаТЧ.ДокументОснование				= Основание;
		СтрокаТЧ.НомерТранспортногоДокумента 	= Основание.НомерВходящегоДокумента;
		СтрокаТЧ.ДатаТранспортногоДокумента 	= Основание.ДатаВходящегоДокумента;			
		СтрокаТЧ.ДатаПринятияНаУчет 			= Основание.Дата;
	Иначе
		СтрокаТЧ.Валюта							= ВалютаДокумента;
		СтрокаТЧ.КурсВалюты						= КурсВзаиморасчетов / КратностьВзаиморасчетов;
	КонецЕсли; 
КонецПроцедуры
 
#Если Клиент Тогда

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьЗаявленияОВвозе() Экспорт

	ТабДокумент = Новый ТабличныйДокумент;

	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	Макет = ПолучитьМакет("ЗаявлениеНаВвоз");
	
	// Заполнение Шапки
	ЗапросПоШапке = Новый Запрос("ВЫБРАТЬ
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Номер КАК Номер,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Дата КАК Дата,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.Наименование КАК КонтрагентНаименование,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент КАК Контрагент,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Ссылка КАК Организация,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Наименование КАК ОрганизацияНаименование,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
								 |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.СтруктурноеПодразделение,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента КАК  ДоговорКонтрагента,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации КАК ОрганизацияСтранаРегистрации,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.Код КАК ОрганизацияСтранаРегистрацииКод,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.КодАльфа3 КАК ОрганизацияСтранаРегистрацииКодАльфа3,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства КАК КонтрагентСтранаРезидентства,
								 |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.КодАльфа3 КАК КонтрагентСтранаРезидентстваКодАльфа3,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НомерНалоговойРегистрацииВСтранеРезидентства КАК КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства
	                             |ИЗ
	                             |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
	                             |ГДЕ
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка = &Ссылка");
	ЗапросПоШапке.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(ВыборкаПоШапке.Организация, ВыборкаПоШапке.СтруктурноеПодразделение);
	
	СведенияОПокупателе = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Дата, ,);
	СведенияОПоставщике = ОбщегоНазначения.СведенияОЮрФизЛице(Контрагент, Дата, ,);
	
	
	// Выводим шапку накладной       	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");		
	ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.Дата = Формат(Дата, "ДЛФ=DD");
	
	// 11. В строках «Продавец/Покупатель» Заявления указываются:   
   // наименование юридического лица или фамилия, имя, отчество индивидуального предпринимателя, физического лица;

	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбластьМакета.Параметры.ПродавецНаименование = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Контрагент.ФизЛицо, Дата).Представление;
	Иначе	
		ОбластьМакета.Параметры.ПродавецНаименование = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");	
	КонецЕсли; 
	
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбластьМакета.Параметры.ПокупательНаименование = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Организация, Организация.ИндивидуальныйПредприниматель, Дата).Представление;
	Иначе
		ОбластьМакета.Параметры.ПокупательНаименование = ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	КонецЕсли;
												 
	
	// для налогоплательщиков Республики Беларусь – УНП (учетный номер плательщика), для налогоплательщиков Республики Казахстан – РНН (регистрационный номер налогоплательщика) либо БИН (бизнес - идентификационный номер) либо ИИН (индивидуальный идентификационный номер), для налогоплательщиков Российской Федерации – ИНН/КПП (идентификационный номер налогоплательщика/код причины постановки на учет); 
	ОбластьМакета.Параметры.ПродавецРНН = ВыборкаПоШапке.КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства;	
	ДатаПрекращенияВыводаРНН 			= Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата<ДатаПрекращенияВыводаРНН;
	
	Если ВыводитьРНН Тогда
		// выводим РНН
		ОбластьМакета.Параметры.ПокупательРНН = СтруктурнаяЕдиницаОрганизация.РНН;		
	Иначе
		// Выводим БИН
		ОбластьМакета.Параметры.ПокупательРНН = СтруктурнаяЕдиницаОрганизация.ИдентификационныйНомер;		
	КонецЕсли;	
	
	ОбластьМакета.Параметры.ПродавецКодСтраныАдрес = СокрЛП(ВыборкаПоШапке.КонтрагентСтранаРезидентстваКод) + ", " +  ОбщегоНазначения.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	ОбластьМакета.Параметры.ПокупательКодСтраныАдрес = ?(ЗначениеЗаполнено(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), СокрЛП(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), Справочники.КлассификаторСтранМира.Казахстан.Код) + ", " +  ОбщегоНазначения.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");	
	// Формат даты договора
	ОбластьМакета.Параметры.ДатаДоговора = Формат(ВыборкаПоШапке.ДатаДоговора, "ДЛФ=DD");
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод табличной части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;
    ЗапросПоТоварам = Новый Запрос("ВЫБРАТЬ
                                   |	1 КАК IDТабличнойЧасти,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
								   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НаименованиеТовара КАК НаименованиеТовара,  
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КодТНВЭД КАК КодТНВЭД,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Количество,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Сумма,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта.Код КАК ВалютаКод,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КурсВалюты,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерТранспортногоДокумента,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаТранспортногоДокумента,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСчетаФактуры,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаСчетаФактуры,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ОборотПоРеализации КАК ОборотПоРеализации,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.Представление КАК СтавкаНДСПредставление,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС КАК СуммаНДС,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта КАК Валюта,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСтроки КАК НомерСтроки,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДокументОснование,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.ДляОсвобожденногоОборота,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.МестоРеализацииНеРК
                                   |ИЗ
                                   |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
                                   |ГДЕ
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
                                   |
                                   |ОБЪЕДИНИТЬ ВСЕ
                                   |
                                   |ВЫБРАТЬ
                                   |	2,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.Наименование,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
								   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КодТНВЭД,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения.Представление,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Количество,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Сумма,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта.Код,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КурсВалюты,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерТранспортногоДокумента,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаТранспортногоДокумента,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСчетаФактуры,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаСчетаФактуры,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОборотПоРеализации,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.Представление,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСтроки,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДокументОснование,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.ДляОсвобожденногоОборота,
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.МестоРеализацииНеРК
                                   |ИЗ
                                   |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
                                   |ГДЕ
                                   |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка
                                   |
                                   |УПОРЯДОЧИТЬ ПО
                                   |	IDТабличнойЧасти,
                                   |	НомерСтроки
                                   |ИТОГИ
                                   |	СУММА(ОборотПоРеализации),
                                   |	СУММА(СуммаНДС)
                                   |ПО
                                   |	ОБЩИЕ"); 	
	ЗапросПоТоварам.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаОбщиеИтоги = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ВыборкаОбщиеИтоги .Следующий();
	ОбластьМакетаИтоги = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаИтоги.Параметры.Заполнить(ВыборкаОбщиеИтоги );
	
	ВыборкаПоТоварам = ВыборкаОбщиеИтоги.Выбрать();	
	НомерСтроки = 1;
	Пока ВыборкаПоТоварам.Следующий() Цикл		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);	
		// Полное наименование
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаПоТоварам.НаименованиеТовара)) Тогда
			НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НаименованиеТовара);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоТоварам.НоменклатураНаименованиеПолное) Тогда
			НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НоменклатураНаименованиеПолное);
		Иначе                                                     
			НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НоменклатураНаименование);
		КонецЕсли;	                		
		ОбластьМакета.Параметры.НоменклатураНаименование = НоменклатураНаименование;
		// ставка НДС
		Если ВыборкаПоТоварам.СтавкаНДСДляОсвобожденногоОборота = ИСТИНА ИЛИ ВыборкаПоТоварам.СтавкаНДСМестоРеализацииНеРК = ИСТИНА Тогда
			ОбластьМакета.Параметры.СтавкаНДСПредставление = "льгота"
		КонецЕсли;	
		// общая нумерация по обеим табличным частям
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	
	ТабДокумент.Вывести(ОбластьМакетаИтоги); 
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");		
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Дата);
	ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), "Не предусмотрен", Руководители.ГлавныйБухгалтер);
	ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
	                                                		
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()
 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = ПечатьЗаявленияОВвозе();
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураФорм = Новый Структура("ЗавявлениеНаВвоз", "Заявление о ввозе товаров");	
	
	Возврат СтруктураФорм;            
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
		
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСБУ", "Корр. счет отнесения НДС (БУ)");
	СтруктураОбязательныхПолей.Вставить("ВидНалогаНДС");	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетЗатратНДСНУ", "Корр. счет отнесения НДС (НУ)");
	КонецЕсли;
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()
  
// Проверяет правильность заполнения строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента,ТаблицаПоТоварам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");				
	КонецЕсли;    		                                                     	
	
	Если НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) Тогда
		СтруктураОбязательныхПолей.Вставить("СтранаПроисхождения");
	КонецЕсли;
    
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента,СтруктураОбязательныхПолей, ТаблицаПоТоварам, "Товары", Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ОС".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");					
	КонецЕсли;    		                                                     	
		
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧастиПострочно(СтруктураШапкиДокумента, СтруктураОбязательныхПолей, ТаблицаПоОС, "ОС", Отказ, Заголовок);
			
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаДокумента, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок)
	
		   
	// Проводки по товарам
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		// В бухгалтерском учете
		Проводка = ПроводкиБУ.Добавить();				
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Если СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			Проводка.Содержание  = "НДС методом зачета начислен: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);
		Иначе	
			Проводка.Содержание  = "НДС по импорту: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);			
		КонецЕсли; 
		
		
		// Проводка по затратной части
		Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатратНДСБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ3);
		
		
		Проводка.СчетКт       = СтрокаТаблицы.СчетУчетаНДС;			
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", ВидНалогаНДС);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		// переопределяем вид налога НДС для последующего зачета
		Если СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		КонецЕсли;
		
		Если Проводка.СчетДт.Валютный Тогда	
			// отражаем в тенге
			Проводка.ВалютаДт 			= мВалютаРегламентированногоУчета;		
			Проводка.ВалютнаяСуммаДт 	= СтрокаТаблицы.НДС;				
		КонецЕсли;		
			
		// Отражение в налоговом учете
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЗначениеЗаполнено(СчетЗатратНДСНУ) Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ .Период      = Дата;
			ПроводкаНУ .Организация = Организация;
			ПроводкаНУ .Сумма       = СтрокаТаблицы.НДС;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
			ПроводкаНУ .СчетДт      = СчетЗатратНДСНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ3);
						
			Если СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
				ПроводкаНУ.Содержание  = "НДС методом зачета начислен: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);
			Иначе	
				ПроводкаНУ.Содержание  = "НДС по импорту: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);			
			КонецЕсли; 		
			
			ПроводкаНУ.СчетКт       = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДС);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", ВидНалогаНДС);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
		КонецЕсли;		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		// Для метода зачета формируем также "Закрывающую корреспонденцию"
		Если СтрокаТаблицы.ВидНДС = Перечисления.ВидыНДС.НДСМетодомЗачета Тогда
			// В бухгалтерском учете
			Проводка = ПроводкиБУ.Добавить();				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = "НДС методом зачета принят к зачету: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);		
			
			// Проводка по затратной части
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетЗатратНДСБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоЗатратНДСБУ3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаНДСКВозмещению;			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
						
			Если Проводка.СчетКт.Валютный Тогда				
				Проводка.ВалютаКт 			= мВалютаРегламентированногоУчета;		
				Проводка.ВалютнаяСуммаКт 	= СтрокаТаблицы.НДС;				
			КонецЕсли;		
			
			// Отражение в налоговом учете
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  И ЗначениеЗаполнено(СчетЗатратНДСНУ) Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ .Период      = Дата;
				ПроводкаНУ .Организация = Организация;
				ПроводкаНУ .Сумма       = СтрокаТаблицы.НДС;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
				ПроводкаНУ .СчетКт      = СчетЗатратНДСНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтруктураШапкиДокумента.СубконтоЗатратНДСНУ3);
				
				ПроводкаНУ.СчетДт        = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТаблицы.СчетУчетаНДСКВозмещению);			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"НалогиСборыОтчисления", ВидНалогаНДС);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроводкаНУ .Содержание  = "НДС методом зачета принят к зачету: " + СокрЛП(СтруктураШапкиДокумента.Комментарий);					
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;		
		КонецЕсли;	 // НДС методом зачета		
	КонецЦикла;		
КонецПроцедуры // ДвиженияПоРегистрамРегл 

// Процедура выполняет движения по регистрам
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,  ТаблицаПоОС, Отказ, Заголовок)
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнить движения по спецрегистрам подсистемы учета НДС
	ТаблицыДокумента = Новый Структура();
	ТаблицыДокумента.Вставить("ТаблицаПоТоварам",	ТаблицаПоТоварам);	
	ТаблицыДокумента.Вставить("ТаблицаПоОС",		ТаблицаПоОС);    	
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок);
	
	
		
	ПроводкиБУ 		= Движения.Типовой;		
	ПроводкиНУ 		= Движения.Налоговый;				
	ДатаДокумента 	= СтруктураШапкиДокумента.Дата;		
		
	// Проводки по БУ
	ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоТоварам, ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);		
	ДвиженияПоРегистрамРегл (СтруктураШапкиДокумента, ТаблицаПоОС, 		ПроводкиБУ, ПроводкиНУ, Отказ, Заголовок);
				
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок)
	
	Если НЕ ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
		
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;          		
		Если ТабЧасть.Количество()> 0 Тогда              						
			УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ);		
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПроверитьСоответствиеНалоговомуПериоду() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ТМЗ"" КАК ТабЧасть,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура КАК Номенклатура,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
		|	И (ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет < &НалоговыйПериодНачало
		|			ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет > &НалоговыйПериодКонец)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ОС"",
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСтроки,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет,
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДокументОснование
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка
		|	И (ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет < &НалоговыйПериодНачало
		|			ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет > &НалоговыйПериодКонец)";
	
	Запрос.УстановитьПараметр("НалоговыйПериодНачало", НачалоМесяца(НалоговыйПериод));
	Запрос.УстановитьПараметр("НалоговыйПериодКонец" , КонецМесяца(НалоговыйПериод));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'В документе <" + Ссылка + ">'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'выявлены несоответствия ""Даты принятия к учету"" налоговому периоду документа ""%1"":'"),
			Формат(НалоговыйПериод, "ДФ='MMMM yyyy'"));
		
		ВыборкаНесоответствия = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаНесоответствия.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '- ""%1"": строка <%2> по документу <%3> не относится к выбранному налоговому периоду'"),
					ВыборкаНесоответствия.ТабЧасть, ВыборкаНесоответствия.НомерСтроки, ВыборкаНесоответствия.ДокументОснование);
		КонецЦикла;
		
		ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения, СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	Для Каждого СтрокаТовары Из ЭтотОбъект.Товары Цикл
		СтрокаТовары.НомерГТД = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);       	
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

//Процедура-обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;		
	
	//определим сумму документа
	СуммаДокумента  = Товары.Итог("СуммаНДС")+ ОС.Итог("СуммаНДС");
	
	Если НЕ Отказ И НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Дата) 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Признак происхождения
		ЗаполнитьПустыеПризнакиПроисхождения("Товары");
		
		МассивСозданныхНомеровГТД = НайтиСоздатьОбновитьНомераГТД();
		ДополнительныеСвойства.Вставить("МассивСозданныхНомеровГТД", МассивСозданныхНомеровГТД);
	КонецЕсли;

	
КонецПроцедуры

//Процедура-обработчик соыбтия "ОбработкаПроведения" документа
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	НеобходимостьОтраженияВНУ = УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ);
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", НеобходимостьОтраженияВНУ);
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	
	//проверим заполнение шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
			
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура", 			"Номенклатура");	
	СтруктураПолей.Вставить("Услуга"        , 			"Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество", 				"Количество");
	СтруктураПолей.Вставить("Коэффициент", 				"Коэффициент");
	СтруктураПолей.Вставить("Сумма", 					"ОборотПоРеализации");		
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");	
	
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	СтруктураПолей.Вставить("ВидНДС", 					"ВидНДС");                  	
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("СчетУчетаНДСКВозмещению",	"СчетУчетаНДСКВозмещению");
	// дополнительные поля стандартных таблиц по приобретению реализации
	СтруктураПолей.Вставить("СуммаБезНДС", 				"ОборотПоРеализации");	
	СтруктураПолей.Вставить("НомерГТД", 				"НомерГТД");
	СтруктураПолей.Вставить("СтранаПроисхождения", 		"СтранаПроисхождения");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
			
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "ОсновныеСредства".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура",				"ОсновноеСредство");	
	СтруктураПолей.Вставить("Сумма", 					"ОборотПоРеализации");	
	СтруктураПолей.Вставить("СтавкаНДС", 				"СтавкаНДС");
	СтруктураПолей.Вставить("НДС", 						"СуммаНДС");	
	
	СтруктураПолей.Вставить("СчетУчетаНДС", 			"СчетУчетаНДС");
	СтруктураПолей.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");	
	СтруктураПолей.Вставить("ВидНДС", 					"ВидНДС");
	СтруктураПолей.Вставить("НДСВидОборота", 			"НДСВидОборота");
	СтруктураПолей.Вставить("СчетУчетаНДСКВозмещению",	"СчетУчетаНДСКВозмещению");
	// дополнительные поля стандартных таблиц по приобретению реализации
	СтруктураПолей.Вставить("СуммаБезНДС", 				"ОборотПоРеализации");
	
	РезультатЗапросаПоОсновнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
		
	// Подготовим таблицы товаров,ОС для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, Истина);
	//проверим заполнение табличной части  Товары                                                                                 	
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ТаблицаПоОС = ПодготовитьТаблицуТоваров(РезультатЗапросаПоОсновнымСредствам, СтруктураШапкиДокумента);
	//проверим заполнение табличной части  ОС
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОС, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
		
		// Движения по регистру накопления ТоварыОрганизацийБУ.
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаПоТоварам, СтруктураШапкиДокумента, Движения, Отказ);
		
	КонецЕсли;
	
	// Если происходит отказ от записи, то элементы справочника НомераГТД,
	// созданные в событии ПередЗаписью будут иметь вид <Объект не найден>,
	// поэтому ссылки на них нужно очистить в таблицах Товары и ОС.
	Если Отказ Тогда
		Если ДополнительныеСвойства.Свойство("МассивСозданныхНомеровГТД") Тогда
			УдалитьСозданныеНомераГТДИзТаблицТоварыИОС(ДополнительныеСвойства.МассивСозданныхНомеровГТД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НайтиСоздатьОбновитьНомераГТД()
	
	ТаблицаНомеровГТД = Справочники.НомераГТД.ПустаяТаблицаНомеровГТД();
	ТаблицаНомеровГТД.Колонки.Добавить("НомерСтрокиГТДЧисло", Новый ОписаниеТипов("Число"));
	
	// Заполнить ТаблицаНомеровГТД, которая будет использоваться 
	// для поиска, создания, обновления номеров ГТД.
	Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
		
		СтрокаНомерГТД = ТаблицаНомеровГТД.Добавить();
		
		СтрокаНомерГТД.Идентификатор = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		СтрокаНомерГТД.НомерСтроки = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		
		СтрокаНомерГТД.НомерГТД = ЭтотОбъект.РегистрационныйНомер;
		СтрокаНомерГТД.НомерСтрокиГТД = Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ=");
		СтрокаНомерГТД.НомерСтрокиГТДЧисло = СтрокаТовар.НомерСтроки;
		СтрокаНомерГТД.КодТНВЭД = СтрокаТовар.КодТНВЭД;
		СтрокаНомерГТД.ГСВС = ЭСФСерверПереопределяемый.ПолучитьГСВС(,СтрокаТовар.КодТНВЭД);
		СтрокаНомерГТД.НаименованиеТовара = СтрокаТовар.НаименованиеТовара;
		СтрокаНомерГТД.СтранаПроисхожденияТовара = СтрокаТовар.СтранаПроисхождения;
		СтрокаНомерГТД.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ТС;
		СтрокаНомерГТД.РегистрационныйНомерЭСФ = "";
		СтрокаНомерГТД.СсылкаНомерГТД = СтрокаТовар.НомерГТД;
		СтрокаНомерГТД.ПризнакПроисхождения = СтрокаТовар.ПризнакПроисхождения;
	КонецЦикла;
	
	Если ТаблицаНомеровГТД.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;   
	    			
	РеквизитыИзменены = (РегистрационныйНомер <> Ссылка.РегистрационныйНомер) ИЛИ ИзменилисьРеквизитыТЧТовары(ТаблицаНомеровГТД);
	Если НЕ РеквизитыИзменены Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивСозданныхНомеровГТД = Справочники.НомераГТД.НайтиСоздатьОбновитьНомераГТД(ТаблицаНомеровГТД, "ТМЗ", ЭтотОбъект.Ссылка);
	
	// Заполнить в таблице Товары ссылки на найденные и созданные элементы справочника НомераГТД. 
	Для Каждого СтрокаТовар Из ЭтотОбъект.Товары Цикл
		Если СтрокаТовар.НомерГТД.Пустая() Тогда
			СтрокаНомерГТД = ТаблицаНомеровГТД.Найти(Формат(СтрокаТовар.НомерСтроки, "ЧН=0; ЧГ="), "Идентификатор");
			СтрокаТовар.НомерГТД = СтрокаНомерГТД.СсылкаНомерГТД;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат МассивСозданныхНомеровГТД;
КонецФункции

Функция ИзменилисьРеквизитыТЧТовары(ТаблицаНомеровГТД)
			
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НомераГТД", ТаблицаНомеровГТД);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НомераГТД.НомерСтрокиГТДЧисло КАК НомерСтрокиГТД,
	               |    НомераГТД.КодТНВЭД КАК КодТНВЭД,	              
	               |	НомераГТД.НаименованиеТовара КАК НаименованиеТовара,
	               |	НомераГТД.СтранаПроисхожденияТовара КАК СтранаПроисхожденияТовара,
	               |	НомераГТД.ПризнакПроисхождения КАК ПризнакПроисхождения,
	               |	НомераГТД.СсылкаНомерГТД КАК СсылкаНомерГТД,
	               |	1 КАК Счетчик
	               |ПОМЕСТИТЬ ВТ_НовыеДанныеНомераГТД
	               |ИЗ
	               |	&НомераГТД КАК НомераГТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.СсылкаНомерГТД КАК СсылкаНомерГТД
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТЧТовары.НомерСтроки КАК НомерСтрокиГТД,
	               |		ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	               |		ТЧТовары.НаименованиеТовара КАК НаименованиеТовара,
	               |		ТЧТовары.СтранаПроисхождения КАК СтранаПроисхожденияТовара,
	               |		ТЧТовары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	               |		ТЧТовары.НомерГТД КАК СсылкаНомерГТД,
	               |		-1 КАК Счетчик
	               |	ИЗ
	               |		Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ТЧТовары
	               |	ГДЕ
	               |		ТЧТовары.Ссылка = &ДокументСсылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НомераГТД.НомерСтрокиГТД,
	               |		НомераГТД.КодТНВЭД,
	               |		НомераГТД.НаименованиеТовара,
	               |		НомераГТД.СтранаПроисхожденияТовара,
	               |		НомераГТД.ПризнакПроисхождения,
	               |		НомераГТД.СсылкаНомерГТД,
	               |		НомераГТД.Счетчик
	               |	ИЗ
	               |		ВТ_НовыеДанныеНомераГТД КАК НомераГТД) КАК Товары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.СтранаПроисхожденияТовара,
	               |	Товары.ПризнакПроисхождения,
	               |	Товары.КодТНВЭД,
	               |	Товары.НаименованиеТовара,	              
	               |	Товары.СсылкаНомерГТД,
	               |	Товары.НомерСтрокиГТД
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(Товары.Счетчик) <> 0
	               |		ИЛИ Товары.СсылкаНомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))";
				   
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());

КонецФункции


//Заполнение пустых признаков происхождения по умолчанию
//
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ИмяТЧ)
	
	ЭСФСервер.ЗаполнитьПустыеПризнакиПроисхождения(ЭтотОбъект, ИмяТЧ)
	
КонецПроцедуры


Процедура УдалитьСозданныеНомераГТДИзТаблицТоварыИОС(Знач МассивСозданныхНомеровГТД)
	
	МассивИменТаблиц = Новый Массив;
	МассивИменТаблиц.Добавить("Товары");
	
	Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
			
			Если МассивСозданныхНомеровГТД.Найти(СтрокаТаблицы.НомерГТД) <> Неопределено Тогда
				
				СтрокаТаблицы.НомерГТД = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

мВалютаРегламентированногоУчета 				= Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 			= ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();