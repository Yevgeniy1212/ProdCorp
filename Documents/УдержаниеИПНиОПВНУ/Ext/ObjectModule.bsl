////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Процедура по месяцам налогового периода расчитывает сумму налогов(взносов)
// пропорционально выплаченным доходам.
//
Процедура РассчитатьВсе(РасчетИПН, РасчетОПВ, РасчетВОСМС)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамНачало", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПослеКон", КонецМесяца(ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамВидСтроки", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);

	// Виды платежей по ОПВ и ВОСМС, по которым считается сумма подлежащая перечислению и, 
	// соответственно, потом будет считаться пеня
	СписокВидовПлатежей = Новый СписокЗначений;	
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		// в случае работы со структурными подразделениями удельный вес определяем в целом по налогоплательщику
		Запрос.УстановитьПараметр("парамНалогоплательщик", ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																									Организация,
																									глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
	Иначе
		Запрос.УстановитьПараметр("парамНалогоплательщик", Организация);
	КонецЕсли;

	// Получим настройки из учетной политики
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации,
	|	УчетнаяПолитикаНУ.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтражениеПоПериодуРегистрации 					= Выборка.ОтражениеПоПериодуРегистрации;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 		= Выборка.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ;
	Иначе
		ОтражениеПоПериодуРегистрации 					= Ложь;
		ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ 		= Ложь;
	КонецЕсли;

	// Список работников, по которым выполнять расчет
	СписокРаботниковТекст = "";
	
	Если РасчетИПН Тогда
		СписокРаботниковТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанныйИПН.ФизЛицо
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныйИПН КАК УдержанныйИПН
		|ГДЕ
		|	УдержанныйИПН.Ссылка = &ДокументСсылка
		|";
	КонецЕсли;
	
	Если РасчетОПВ Тогда
		Если СписокРаботниковТекст <> "" Тогда
			СписокРаботниковТекст = СписокРаботниковТекст + "
			|
			|ОБЪЕДИНИТЬ
			|
			|";
		КонецЕсли;
		
		СписокРаботниковТекст = СписокРаботниковТекст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанныйОПВ.ФизЛицо
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныйОПВ КАК УдержанныйОПВ
		|ГДЕ
		|	УдержанныйОПВ.Ссылка = &ДокументСсылка
		|";
	КонецЕсли;
	
	Если РасчетВОСМС Тогда
		Если СписокРаботниковТекст <> "" Тогда
			СписокРаботниковТекст = СписокРаботниковТекст + "
			|
			|ОБЪЕДИНИТЬ
			|
			|";
		КонецЕсли;
		
		СписокРаботниковТекст = СписокРаботниковТекст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанныеВзносыОСМС.ФизЛицо
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныеВзносыОСМС КАК УдержанныеВзносыОСМС
		|ГДЕ
		|	УдержанныеВзносыОСМС.Ссылка = &ДокументСсылка
		|";
	КонецЕсли;

	Если СписокРаботниковТекст = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СписокФизЛиц.Физлицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ
	|	(" + СписокРаботниковТекст + ") КАК СписокФизЛиц
	|ИНДЕКСИРОВАТЬ ПО 
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	
	// Данные для расчета коэффициентов выплаты дохода по каждому физлицу в разрезе месяцев налогового периода
	ДоходыВыплатаСальдоТекст = "
	|// сальдо текущих взаиморасчетов за период регистрации
	|ВЫБРАТЬ	
	|	ВзаиморасчетыСРаботниками.ФизЛицо КАК ФизЛицо,
	|	ВзаиморасчетыСРаботниками.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВзаиморасчетыСРаботниками.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток КАК СальдоПоЗП,
	|	0 КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
	|							&парамНачало, 
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВзаиморасчетыСРаботниками
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// сальдо депонированной зарплаты за период регистрации
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.ФизЛицо КАК ФизЛицо,
	|	ВзаиморасчетыСДепонентами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВзаиморасчетыСДепонентами.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентами.ПериодВзаиморасчетов, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВзаиморасчетыСДепонентами.СуммаВзаиморасчетовОстаток КАК СальдоПоЗП,
	|	0 КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
	|							&парамНачало, 
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВзаиморасчетыСДепонентами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|// сальдо по актам закупа за период регистрации
	|ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.Контрагент КАК Физлицо,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентамиФизЛицами.ПериодВзаиморасчетов, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВзаиморасчетыСКонтрагентамиФизЛицами.СуммаВзаиморасчетовОстаток КАК СальдоПоЗП,
	|	0 КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|							&парамНачало,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И Контрагент В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВзаиморасчетыСКонтрагентамиФизЛицами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// выплаченные доходы
	|ВЫБРАТЬ
	|	ВыплаченныеДоходы.ФизЛицо КАК ФизЛицо,
	|	ВыплаченныеДоходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВыплаченныеДоходы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ВыплаченныеДоходы.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	0 КАК СальдоПоЗП,
	|	0 КАК НачисленоЗП,
	|	ВыплаченныеДоходы.СуммаДоходаОборот КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ВыплаченныеДоходыРаботникамОрганизацийНУ.Обороты(
	|							&парамНачало,
	|							&парамКонец,
	|							,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВыплаченныеДоходы
	|";
	
	Если НЕ ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ Тогда
		// зачитывать в выплаченные доходы фактически перечисленные суммы по исполнительным листам
		ДоходыВыплатаСальдоТекст = ДоходыВыплатаСальдоТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыСПолучателямиИЛ.ДокументОснование.ФизЛицо КАК ФизЛицо,
		|	ВзаиморасчетыСПолучателямиИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВзаиморасчетыСПолучателямиИЛ.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСПолучателямиИЛ.ПериодВзаиморасчетов, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовНачальныйОстаток + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовНачальныйОстаток КАК СальдоПоЗП,
		|	0 КАК НачисленоЗП,
		|	ВзаиморасчетыСПолучателямиИЛ.СуммаВзаиморасчетовРасход + ВзаиморасчетыСПолучателямиИЛ.СуммаСборовРасход КАК ВыплаченоЗП
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыОрганизацийСПолучателямиИЛ.ОстаткиИОбороты(
		|				&парамНачало,
		|				&парамКонец,
		|				,
		|				ДвиженияИГраницыПериода,
		|				Налогоплательщик = &парамНалогоплательщик
		|				И ДокументОснование.ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВзаиморасчетыСПолучателямиИЛ
		|";
	//Иначе
		// суммы удержаний по ИЛ уже находятся в регистре накопления ВыплаченныеДоходыРаботникамОрганизацийНУ
	КонецЕсли;
	                         
	ДоходыВыплатаСальдоТекст = ДоходыВыплатаСальдоТекст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// начисление доходы (по ИПНСведенияОДоходах, где зарегистрированы все полученные доходы)
	|ВЫБРАТЬ
	|	ДоходыВНатуральнойФорме.ФизЛицо КАК ФизЛицо,
	|	ДоходыВНатуральнойФорме.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДоходыВНатуральнойФорме.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ДоходыВНатуральнойФорме.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	0 КАК СальдоПоЗП,
	|	ДоходыВНатуральнойФорме.СуммаДохода КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ДоходыВНатуральнойФорме
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
	|		ПО ДоходыВНатуральнойФорме.ФизЛицо = Работники.ФизЛицо
	|ГДЕ
	|	ДоходыВНатуральнойФорме.ПериодРегистрации МЕЖДУ &парамНачало И &парамКонец И
	|	ДоходыВНатуральнойФорме.Налогоплательщик = &парамНалогоплательщик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	0 КАК СальдоПоЗП,
	|	- ИПНРасчетыСБюджетом.Налог КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК СписокФизЛиц
	|			ПО ИПНРасчетыСБюджетом.ФизЛицо = СписокФизЛиц.ФизЛицо
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Период МЕЖДУ &парамНачало И &парамКонец И
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик И
	|	ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход И 
	|	ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОПВРасчетыСФондами.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	0 КАК СальдоПоЗП,
	|	- ОПВРасчетыСФондами.Взнос КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК СписокФизЛиц
	|			ПО ОПВРасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
	|ГДЕ
	|	ОПВРасчетыСФондами.Период МЕЖДУ &парамНачало И &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВОСМСРасчетыСФондами.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	0 КАК СальдоПоЗП,
	|	- ВОСМСРасчетыСФондами.Взнос КАК НачисленоЗП,
	|	0 КАК ВыплаченоЗП
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК СписокФизЛиц
	|			ПО ВОСМСРасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Период МЕЖДУ &парамНачало И &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа
	|";

	// Общая сумма доходов и выплат
	ДоходыВыплатаСальдоТекст = "
	|ВЫБРАТЬ
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации,
	|	Данные.МесяцНалоговогоПериода,
	|	СУММА(Данные.СальдоПоЗП) КАК СальдоПоЗП,
	|	СУММА(Данные.НачисленоЗП) КАК НачисленоЗП,
	|	СУММА(Данные.ВыплаченоЗП) КАК ВыплаченоЗП
	|ИЗ
	|	(" + ДоходыВыплатаСальдоТекст + ") КАК Данные
	|СГРУППИРОВАТЬ ПО
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации,
	|	Данные.МесяцНалоговогоПериода
	|";

	// сальдо по налогу/взносам определяем в разрезе организаций, чтобы правильно закрыть регистры
	СальдоИПНиОПВТекст = "";
	
	Если РасчетИПН Тогда
		СальдоИПНиОПВТекст = "
		|ВЫБРАТЬ
		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ИПНРасчетыСБюджетом.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ИПНРасчетыСБюджетом.НалогОстаток КАК СальдоПоИПН,
		|	0 КАК СальдоПоОПВ,
		|	0 КАК СальдоПоВОСМС
		|ИЗ
		|	РегистрНакопления.ИПНРасчетыСБюджетом.Остатки(
		|			&парамПослеКон,
		|			Организация = &парамОрганизация
		|			И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ИПНРасчетыСБюджетом
		|";
	КонецЕсли;
	
	Если РасчетОПВ Тогда
		Если СальдоИПНиОПВТекст <> "" Тогда
			СальдоИПНиОПВТекст = СальдоИПНиОПВТекст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		СальдоИПНиОПВТекст = СальдоИПНиОПВТекст + "
		|ВЫБРАТЬ
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	ОПВРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОПВРасчетыСФондами.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	0 КАК СальдоПоИПН,
		|	ОПВРасчетыСФондами.ВзносОстаток КАК СальдоПоОПВ,
		|	0 КАК СальдоПоВОСМС
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами.Остатки(
		|			&парамПослеКон,
		|			Организация = &парамОрганизация И
		|			ВидПлатежа В (&СписокВидовПлатежей) И
		|			ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ОПВРасчетыСФондами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОПВПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
		|	ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОПВПодлежитПеречислениюВФонды.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ОПВПодлежитПеречислениюВФонды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	0 КАК СальдоПоИПН,
		|	- ОПВПодлежитПеречислениюВФонды.ВзносОстаток КАК СальдоПоОПВ,
		|	0 КАК СальдоПоВОСМС
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
		|			&парамПослеКон,
		|			Организация = &парамОрганизация
		|			И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ОПВПодлежитПеречислениюВФонды
		|";
	КонецЕсли;
	
	Если РасчетВОСМС Тогда
		Если СальдоИПНиОПВТекст <> "" Тогда
			СальдоИПНиОПВТекст = СальдоИПНиОПВТекст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		СальдоИПНиОПВТекст = СальдоИПНиОПВТекст + "
		|ВЫБРАТЬ
		|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	ВОСМСРасчетыСФондами.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВОСМСРасчетыСФондами.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	0 КАК СальдоПоИПН,
		|	0 КАК СальдоПоОПВ,
		|	ВОСМСРасчетыСФондами.ВзносОстаток КАК СальдоПоВОСМС
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
		|			&парамПослеКон,
		|			Организация = &парамОрганизация И
		|			ВидПлатежа В (&СписокВидовПлатежей) И
		|			ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВОСМСРасчетыСФондами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВОСМСПодлежитПеречислениюВФонды.ФизЛицо КАК ФизЛицо,
		|	ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВОСМСПодлежитПеречислениюВФонды.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ВОСМСПодлежитПеречислениюВФонды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	0 КАК СальдоПоИПН,
		|	0 КАК СальдоПоОПВ,
		|	- ВОСМСПодлежитПеречислениюВФонды.ВзносОстаток КАК СальдоПоВОСМС
		|ИЗ
		|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
		|			&парамПослеКон,
		|			Организация = &парамОрганизация
		|			И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ ВТСписокФизЛиц КАК СписокФизЛиц)) КАК ВОСМСПодлежитПеречислениюВФонды
		|";
	КонецЕсли;

	// Общая сумма задолженности по ИПН и ОПВ
	СальдоИПНиОПВТекст = "
	|ВЫБРАТЬ
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации,
	|	Данные.МесяцНалоговогоПериода,
	|	СУММА(Данные.СальдоПоИПН) КАК СальдоПоИПН,
	|	СУММА(Данные.СальдоПоОПВ) КАК СальдоПоОПВ,
	|	СУММА(Данные.СальдоПоВОСМС) КАК СальдоПоВОСМС
	|ИЗ
	|	(" + СальдоИПНиОПВТекст + ") КАК Данные
	|СГРУППИРОВАТЬ ПО 
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации,
	|	Данные.МесяцНалоговогоПериода
	|";

	// Определяем размер удерживаемых ИПН и ОПВ
	УдерживаемыеСуммыТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Физлицо,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации,
	|	Данные.МесяцНалоговогоПериода,
	|	СУММА(Данные.СальдоПоИПН) КАК СальдоПоИПН,
	|	СУММА(Данные.СальдоПоОПВ) КАК СальдоПоОПВ,
	|	СУММА(Данные.СальдоПоВОСМС) КАК СальдоПоВОСМС,
	|	ВЫБОР
	|		КОГДА СУММА(Данные.ОтсутствиеДанных) > 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтсутствиеДанных,
	|	СУММА(Данные.СальдоПоЗП) КАК СальдоПоЗП,
	|	СУММА(Данные.НачисленоЗП) КАК НачисленоЗП,
	|	СУММА(Данные.ВыплаченоЗП) КАК ВыплаченоЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		СальдоИПНиОПВ.ФизЛицо,
	|		СальдоИПНиОПВ.СтруктурнаяЕдиница,
	|		СальдоИПНиОПВ.ПодразделениеОрганизации,
	|		СальдоИПНиОПВ.МесяцНалоговогоПериода,
	|		СальдоИПНиОПВ.СальдоПоИПН,
	|		СальдоИПНиОПВ.СальдоПоОПВ,
	|		СальдоИПНиОПВ.СальдоПоВОСМС,
	|		0 КАК ОтсутствиеДанных,
	|		0 КАК СальдоПоЗП,
	|		0 КАК НачисленоЗП,
	|		0 КАК ВыплаченоЗП
	|	ИЗ
	|		(" + СальдоИПНиОПВТекст + ") КАК СальдоИПНиОПВ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДоходыВыплатаСальдо.ФизЛицо,
	|		ДоходыВыплатаСальдо.СтруктурнаяЕдиница,
	|		ДоходыВыплатаСальдо.ПодразделениеОрганизации,
	|		ДоходыВыплатаСальдо.МесяцНалоговогоПериода,
	|		0 КАК СальдоПоИПН,
	|		0 КАК СальдоПоОПВ,
	|		0 КАК СальдоПоВОСМС,
	|		1 КАК ОтсутствиеДанных,
	|		ДоходыВыплатаСальдо.СальдоПоЗП,
	|		ДоходыВыплатаСальдо.НачисленоЗП,
	|		ДоходыВыплатаСальдо.ВыплаченоЗП
	|	ИЗ
	|		(" + ДоходыВыплатаСальдоТекст + ") КАК ДоходыВыплатаСальдо
	|
	|) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ФизЛицо, 
	|	Данные.СтруктурнаяЕдиница, 
	|	Данные.ПодразделениеОрганизации, 
	|	Данные.МесяцНалоговогоПериода
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Данные.ФизЛицо, 
	|	Данные.МесяцНалоговогоПериода,
	|	Данные.СтруктурнаяЕдиница,
	|	Данные.ПодразделениеОрганизации
	|";
	
	Запрос.Текст = УдерживаемыеСуммыТекст;	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Перезаполним имеющиеся строки
	Если РасчетИПН Тогда
		УдержанныйИПН.Очистить();
	КонецЕсли;
	Если РасчетОПВ Тогда
		УдержанныйОПВ.Очистить();
	КонецЕсли;
	Если РасчетВОСМС Тогда
		УдержанныеВзносыОСМС.Очистить();
	КонецЕсли;

	ТекущееФизЛицо = Неопределено;
	ТекущаяСтруктурнаяЕдиница = Неопределено;
	СальдоПоЗППрошлыхМесяцев = Новый Массив(3);
	
	МассивПравилОкругления = Новый Массив(3);
	МассивПравилОкругления[0] = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ПериодРегистрации);
	МассивПравилОкругления[1] = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации);
	Если ПериодРегистрации >= '20220101' Тогда
		МассивПравилОкругления[2] = Новый Структура("МетодОкругления, ПорядокОкругления, Период", Перечисления.МетодыОкругления.ПоАрифметическимПравилам, Перечисления.ПорядкиОкругления.Окр1,'20220101');
	Иначе	
		МассивПравилОкругления[2] = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	КонецЕсли;
	
	ЕстьДанные = Выборка.Следующий();
	
	Пока ЕстьДанные Цикл
		// Начало данных по новому физлицу
		ТекущееФизЛицо = Выборка.ФизЛицо;		
		ТекущаяСтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		ТекущееПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		Для ВидСуммы = 0 По 2 Цикл
			СальдоПоЗППрошлыхМесяцев[ВидСуммы] = 0;
		КонецЦикла;
		
		Пока ЕстьДанные
			 И Выборка.ФизЛицо = ТекущееФизЛицо
			 И Выборка.СтруктурнаяЕдиница = ТекущаяСтруктурнаяЕдиница 
			 И Выборка.ПодразделениеОрганизации = ТекущееПодразделениеОрганизации Цикл
			 
			 Для ВидСуммы = 0 По 2 Цикл
			 	 
			 	Если ВидСуммы = 0 Тогда // перечисление ИПН 
			 		Если РасчетИПН Тогда
			 			НачисленоЗП = Выборка.НачисленоЗП;
			 			ВыплаченоЗП = Выборка.ВыплаченоЗП;
			 			СальдоПоЗП  = Выборка.СальдоПоЗП;
			 			СальдоПоНалогуВзносу = Выборка.СальдоПоИПН;
			 		Иначе
			 			Продолжить; // ИПН рассчитывать не надо
			 		КонецЕсли;
			 	ИначеЕсли ВидСуммы = 1 Тогда // перечисление ОПВ
			 		Если РасчетОПВ Тогда
			 			НачисленоЗП = Выборка.НачисленоЗП;
			 			ВыплаченоЗП = Выборка.ВыплаченоЗП;
			 			СальдоПоЗП  = Выборка.СальдоПоЗП;
			 			СальдоПоНалогуВзносу = Выборка.СальдоПоОПВ;
					Иначе
						Продолжить; // ВОСМС рассчитывать не надо
					КонецЕсли;
				Иначе // перечисление ВОСМС
					Если РасчетВОСМС тогда
			 			НачисленоЗП = Выборка.НачисленоЗП;
			 			ВыплаченоЗП = Выборка.ВыплаченоЗП;
			 			СальдоПоЗП  = Выборка.СальдоПоЗП;
			 			СальдоПоНалогуВзносу = Выборка.СальдоПоВОСМС;
					Иначе
						Продолжить; // ВОСМС рассчитывать не надо
					КонецЕсли;
					
			 	КонецЕсли;
			 
				КоэффициентПеречисления = 0;
				 
				Если Выборка.ОтсутствиеДанных Тогда
				 	// всю зарплату уже выплатили ранее (т.к. нет даже нач. сальдо по зарплате) - перечисляем всю сумму налогов/взносов
					КоэффициентПеречисления = 1;

				ИначеЕсли СальдоПоЗП + НачисленоЗП <= ВыплаченоЗП Тогда
					// выплатили всю зарплату или даже с авансом - перечисляем всю сумму налогов/взносов
					КоэффициентПеречисления = 1;					
					СальдоПоЗППрошлыхМесяцев[ВидСуммы] = СальдоПоЗППрошлыхМесяцев[ВидСуммы] + СальдоПоЗП + НачисленоЗП - ВыплаченоЗП;

				ИначеЕсли СальдоПоЗП + НачисленоЗП = 0 Тогда
				 	// за данный месяц была переплата, которая полностью погасилась начислением - перечисляем всю сумму налогов/взносов
					КоэффициентПеречисления = 1;
					СальдоПоЗППрошлыхМесяцев[ВидСуммы] = СальдоПоЗППрошлыхМесяцев[ВидСуммы] + СальдоПоЗП + НачисленоЗП - ВыплаченоЗП;

				ИначеЕсли СальдоПоЗППрошлыхМесяцев[ВидСуммы] < 0 Тогда // по прошлым месяцам была переплата - переносим ее при расчете суммы текущей выплаты
					// добавим к выплате за текущий месяц сальдо с прошлых месяцев 
					ДополнительноВыплачено = Мин( - СальдоПоЗППрошлыхМесяцев[ВидСуммы], СальдоПоЗП + НачисленоЗП - ВыплаченоЗП);
					КоэффициентПеречисления = (ВыплаченоЗП + ДополнительноВыплачено) / (СальдоПоЗП + НачисленоЗП);
					СальдоПоЗППрошлыхМесяцев[ВидСуммы] = СальдоПоЗППрошлыхМесяцев[ВидСуммы] + СальдоПоЗП + НачисленоЗП - ВыплаченоЗП - ДополнительноВыплачено;
				
				Иначе
					// самая обычная ситуация - перечисляем пропорционально выплаченному доходу
					КоэффициентПеречисления = ВыплаченоЗП / (СальдоПоЗП + НачисленоЗП);
					СальдоПоЗППрошлыхМесяцев[ВидСуммы] = СальдоПоЗППрошлыхМесяцев[ВидСуммы] + СальдоПоЗП + НачисленоЗП - ВыплаченоЗП;
					
				КонецЕсли;
				
				Если КоэффициентПеречисления <> 1 Тогда
					ПравилоОкругления 	= МассивПравилОкругления[ВидСуммы];
					СуммаКПеречислению 	= ОбщегоНазначения.ОкруглитьЧисло(СальдоПоНалогуВзносу * КоэффициентПеречисления, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
				Иначе
					// чтобы ничего не зависало из-за округления берем всю задолженность
					СуммаКПеречислению = СальдоПоНалогуВзносу;
				КонецЕсли;
					
				Если СуммаКПеречислению <> 0 Тогда
					Если ВидСуммы = 0 Тогда // перечисление ИПН
						СтрокаТЧ 		= УдержанныйИПН.Добавить();
						СтрокаТЧ.Налог 	= СуммаКПеречислению;
					ИначеЕсли ВидСуммы = 1 Тогда // перечисление ОПВ
						СтрокаТЧ 		= УдержанныйОПВ.Добавить();
						СтрокаТЧ.Взнос 	= СуммаКПеречислению;
					Иначе // перечисление ВОСМС
						СтрокаТЧ 		= УдержанныеВзносыОСМС.Добавить();
						СтрокаТЧ.Взнос 	= СуммаКПеречислению;
					КонецЕсли;
					
					СтрокаТЧ.ФизЛицо 					= Выборка.ФизЛицо;
					СтрокаТЧ.МесяцНалоговогоПериода 	= Выборка.МесяцНалоговогоПериода;
					СтрокаТЧ.СтруктурнаяЕдиница			= Выборка.СтруктурнаяЕдиница;
					СтрокаТЧ.ПодразделениеОрганизации 	= Выборка.ПодразделениеОрганизации;
				КонецЕсли;
				
			 КонецЦикла;
			 
			 ЕстьДанные = Выборка.Следующий();
		КонецЦикла;
	
	КонецЦикла;
	
	
КонецПроцедуры // РассчитатьВсе()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным учетных регистров.
//
Функция Автозаполнение() Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПослеКон" , КонецМесяца(ПериодРегистрации) + 1);
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" , ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПользователь" , Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Год", Год(ПериодРегистрации));
	Запрос.УстановитьПараметр("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамУдержание", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);

	// Виды платежей по ОПВ, по которым считается сумма подлежащая перечислению и, 
	// соответственно, потом будет считаться пеня
	СписокВидовПлатежей = Новый СписокЗначений;	
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	СписокВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	
	Запрос.УстановитьПараметр("СписокВидовПлатежей", СписокВидовПлатежей);

	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	
	// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
	// подразделения (если оно задано)
	Если Ответственный <> ПустойОтветственный Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			Если ПодразделениеОрганизации = ПустоеПодразделение Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Расчетчики.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
				|
				|ГДЕ
				|	Расчетчики.Пользователь = &парамПользователь";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации");
					Возврат  Ложь;
				КонецЕсли;
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Подразделения.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК Подразделения
				|
				|ГДЕ
				|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение) И
				|	(Подразделения.Ссылка В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ 	Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики ГДЕ 	Расчетчики.Пользователь = &парамПользователь ))";
				Если Запрос.Выполнить().Пустой() Тогда
					Сообщить("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
					Возврат  Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	 КонецЕсли;
	
	Если ПодразделениеОрганизации = ПустоеПодразделение И Ответственный = ПустойОтветственный Тогда
		ПоВсемПодразделениямОрганизации = Истина;
		УсловиеНаПодразделение = "СписокФизЛиц.ПодразделениеОрганизации.Владелец = &парамОрганизация";
	ИначеЕсли ПодразделениеОрганизации = ПустоеПодразделение Тогда
		Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].РасчетЗарплатыОрганизацииПоОтветственным Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			УсловиеНаПодразделение = "СписокФизЛиц.ПодразделениеОрганизации В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ Расчетчики.ПодразделениеОрганизации ИЗ РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) Расчетчики ГДЕ Расчетчики.Пользователь = &парамПользователь)";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			УсловиеНаПодразделение = "СписокФизЛиц.ПодразделениеОрганизации.Владелец = &парамОрганизация";
		КонецЕсли;
	Иначе
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "СписокФизЛиц.ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
	КонецЕсли;
	
	//СписокРаботниковТекст
	//Описание:
	//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и принятых за месяц,
	//	а также переведенных в середине месяца из других обособленных подразделений
	СписокРаботниковТекст = "
	|		// срез работников на начало месяца
	|		ВЫБРАТЬ
	|			СписокФизЛиц.Сотрудник.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&парамНачало, 
	|						Организация = &парамГоловнаяОрганизация) КАК СписокФизЛиц
	|		ГДЕ
	|			СписокФизЛиц.Организация = &парамГоловнаяОрганизация И
	|			СписокФизЛиц.ОбособленноеПодразделение = &парамОрганизация
	|		"+?(ПоВсемПодразделениямОрганизации, "", "И "+УсловиеНаПодразделение)+"
	|		
	|		ОБЪЕДИНИТЬ
	|
	|		// движения работников за месяц
	|		ВЫБРАТЬ
	|			СписокФизЛиц.Сотрудник.Физлицо
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК СписокФизЛиц
	|
	|           ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки,
	|									МАКСИМУМ(ПредыдущееНазначение.Период) КАК ДатаПредыдущегоНазначения
	|								ИЗ
	|									РегистрСведений.РаботникиОрганизаций КАК ТекущееНазначение
	|									ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущееНазначение
	|										ПО ТекущееНазначение.Сотрудник = ПредыдущееНазначение.Сотрудник
	|											И ПредыдущееНазначение.Организация = &парамГоловнаяОрганизация
	|											И ПредыдущееНазначение.Период < ТекущееНазначение.Период
	|								ГДЕ
	|									ТекущееНазначение.Период > &парамНачало
	|									И ТекущееНазначение.Период <= &парамКонец
	|									И ТекущееНазначение.Организация = &парамГоловнаяОрганизация
	|									И ТекущееНазначение.ОбособленноеПодразделение = &парамОрганизация
	|								СГРУППИРОВАТЬ ПО
	|									ТекущееНазначение.Регистратор,
	|									ТекущееНазначение.НомерСтроки) КАК ДатыПредыдущихНазначений
	|				ПО СписокФизЛиц.Регистратор = ДатыПредыдущихНазначений.Регистратор
	|					И СписокФизЛиц.НомерСтроки = ДатыПредыдущихНазначений.НомерСтроки
	|	
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПредыдущиеНазначения
	|				ПО СписокФизЛиц.Сотрудник = ПредыдущиеНазначения.Сотрудник
	|					И ПредыдущиеНазначения.Организация = &парамГоловнаяОрганизация
	|					И ДатыПредыдущихНазначений.ДатаПредыдущегоНазначения = ПредыдущиеНазначения.Период 
	|		
	|		ГДЕ
	|			СписокФизЛиц.Период > &парамНачало
	|			И СписокФизЛиц.Период <= &парамКонец
	|			И СписокФизЛиц.Организация = &парамГоловнаяОрганизация
	|			И (СписокФизЛиц.ПричинаИзмененияСостояния = &Принят
	|					ИЛИ СписокФизЛиц.ОбособленноеПодразделение <> ПредыдущиеНазначения.ОбособленноеПодразделение)
	|			И СписокФизЛиц.ОбособленноеПодразделение = &парамОрганизация
	|			"+?(ПоВсемПодразделениямОрганизации, "", "И "+УсловиеНаПодразделение)+"
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			СписокФизЛиц.Сотрудник.Физлицо
	|		ИЗ
	|			РегистрСведений.ДоговорникиОрганизаций КАК СписокФизЛиц
	|
	|		ГДЕ
	|			СписокФизЛиц.ДатаОкончания >= &парамНачало И
	|			СписокФизЛиц.ДатаНачала <= &парамКонец И
	|			СписокФизЛиц.Организация = &парамГоловнаяОрганизация И
	|			СписокФизЛиц.ОбособленноеПодразделение = &парамОрганизация
	|			"+?(ПоВсемПодразделениямОрганизации, "", "И "+УсловиеНаПодразделение)+"
	|";
	
	// Физлица, по которым имеются остатки по ИПН на конец месяца
	ОстаткиИПНТекст = "
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	ИПНРасчетыСБюджетом.СтруктурнаяЕдиница,
	|	ИПНРасчетыСБюджетом.НалогОстаток
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом.Остатки(&парамПослеКон, Организация = &парамОрганизация) КАК ИПНРасчетыСБюджетом
	|";
	
	// ФизЛица, по которым имеются остатки по ОПВ на конец месяца
	ОстаткиОПВТекст = "
	|ВЫБРАТЬ
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	СУММА(Данные.ВзносОстаток) КАК ВзносОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОПВРасчетыСФондами.ФизЛицо,
	|		ОПВРасчетыСФондами.СтруктурнаяЕдиница,
	|		ОПВРасчетыСФондами.ВзносОстаток
	|	ИЗ
	|		РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|					&парамПослеКон, 
	|					Организация = &парамОрганизация И
	|					ВидПлатежа В (&СписокВидовПлатежей)) КАК ОПВРасчетыСФондами
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОПВПодлежитПеречислениюВФонды.ФизЛицо,
	|		ОПВПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|		- ОПВПодлежитПеречислениюВФонды.ВзносОстаток
	|	ИЗ
	|		РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(
	|					&парамПослеКон,
	|					Организация = &парамОрганизация) КАК ОПВПодлежитПеречислениюВФонды) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО 
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница
	|
	|ИМЕЮЩИЕ 
	|	СУММА(Данные.ВзносОстаток) <> 0
	|";
	
	// ФизЛица, по которым имеются остатки по ВОСМС на конец месяца
	ОстаткиВОСМСТекст = "
	|ВЫБРАТЬ
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница,
	|	СУММА(Данные.ВзносОстаток) КАК ВзносОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВОСМСРасчетыСФондами.ФизЛицо,
	|		ВОСМСРасчетыСФондами.СтруктурнаяЕдиница,
	|		ВОСМСРасчетыСФондами.ВзносОстаток
	|	ИЗ
	|		РегистрНакопления.ВОСМСРасчетыСФондами.Остатки(
	|					&парамПослеКон, 
	|					Организация = &парамОрганизация И
	|					ВидПлатежа В (&СписокВидовПлатежей)) КАК ВОСМСРасчетыСФондами
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВОСМСПодлежитПеречислениюВФонды.ФизЛицо,
	|		ВОСМСПодлежитПеречислениюВФонды.СтруктурнаяЕдиница,
	|		- ВОСМСПодлежитПеречислениюВФонды.ВзносОстаток
	|	ИЗ
	|		РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(
	|					&парамПослеКон,
	|					Организация = &парамОрганизация) КАК ВОСМСПодлежитПеречислениюВФонды) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО 
	|	Данные.ФизЛицо,
	|	Данные.СтруктурнаяЕдиница
	|
	|ИМЕЮЩИЕ 
	|	СУММА(Данные.ВзносОстаток) <> 0
	|";

	// В список физлиц добавим еще тех, кто не является работником,
	// но при этом по ним имеется остатки ИПН, ОПВ или ВОСМС и нет движений по удержанию за месяц (напр, акты закупа)
	СписокРаботниковТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо
	|ИЗ
	|	(" + СписокРаботниковТекст + ") КАК РаботникиОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОстаткиИПН.ФизЛицо
	|ИЗ
	|	(" + ОстаткиИПНТекст + ") КАК ОстаткиИПН
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамКонец, 
	|				Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
	|		ПО ОстаткиИПН.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|
	|ГДЕ
	|	РаботникиОрганизации.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОстаткиОПВ.ФизЛицо
	|ИЗ
	|	(" + ОстаткиОПВТекст + ") КАК ОстаткиОПВ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамКонец, 
	|				Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
	|		ПО ОстаткиОПВ.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|
	|ГДЕ
	|	РаботникиОрганизации.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОстаткиВОСМС.ФизЛицо
	|ИЗ
	|	(" + ОстаткиВОСМСТекст + ") КАК ОстаткиВОСМС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&парамКонец, 
	|				Организация = &парамГоловнаяОрганизация) КАК РаботникиОрганизации
	|		ПО ОстаткиВОСМС.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|			И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|
	|ГДЕ
	|	РаботникиОрганизации.Сотрудник ЕСТЬ NULL 
	|";
	
	// заполнение табличной части "УдержанныйИПН"
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ОстаткиИПН.ФизЛицо,
	|	ОстаткиИПН.СтруктурнаяЕдиница,
	|	&парамНачало КАК МесяцНалоговогоПериода
	|ИЗ
	|	(" + ОстаткиИПНТекст + ") КАК ОстаткиИПН
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокРаботниковТекст + ") КАК Работники
	|		ПО ОстаткиИПН.ФизЛицо = Работники.ФизЛицо
	|";
	
	УдержанныйИПН.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// заполнение табличной части "УдержанныйОПВ"
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ОстаткиОПВ.ФизЛицо,
	|	ОстаткиОПВ.СтруктурнаяЕдиница,
	|	&парамНачало КАК МесяцНалоговогоПериода
	|ИЗ
	|	(" + ОстаткиОПВТекст + ") КАК ОстаткиОПВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокРаботниковТекст + ") КАК Работники
	|		ПО ОстаткиОПВ.ФизЛицо = Работники.ФизЛицо
	|";
	
	УдержанныйОПВ.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// заполнение табличной части "УдержанныеВзносыОСМС"
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ОстаткиВОСМС.ФизЛицо,
	|	ОстаткиВОСМС.СтруктурнаяЕдиница,
	|	&парамНачало КАК МесяцНалоговогоПериода
	|ИЗ
	|	(" + ОстаткиВОСМСТекст + ") КАК ОстаткиВОСМС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокРаботниковТекст + ") КАК Работники
	|		ПО ОстаткиВОСМС.ФизЛицо = Работники.ФизЛицо
	|";
	
	УдержанныеВзносыОСМС.Загрузить(Запрос.Выполнить().Выгрузить());

КонецФункции // Автозаполнение()

// Процедура рассчитывает результат УдержанныйИПН.
//
Процедура РассчитатьИПН() Экспорт
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();

	// проверим движения ИПН по данным табличной части
	ВыборкаПоИПН = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, Истина, Ложь, Ложь).Выбрать();
	Пока ВыборкаПоИПН.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоИПН, Отказ, "");
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 

	РассчитатьВсе(Истина, Ложь, Ложь);

	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	

КонецПроцедуры // РассчитатьИПН()

// Процедура рассчитывает результат УдержанныйОПВ.
//
Процедура РассчитатьОПВ() Экспорт
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();

	// проверим движения ОПВ по данным табличной части
	ВыборкаПоОПВ = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, Ложь, Истина, Ложь).Выбрать();
	Пока ВыборкаПоОПВ.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоОПВ, Отказ, "");
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 

	РассчитатьВсе(Ложь, Истина, Ложь);

	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	

КонецПроцедуры // РассчитатьОПВ()

// Процедура рассчитывает результат УдержанныеВОСМС.
//
Процедура РассчитатьВОСМС() Экспорт
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();

	// проверим движения ВОСМС по данным табличной части
	ВыборкаПоВОСМС = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, Ложь, Ложь, Истина).Выбрать();
	Пока ВыборкаПоВОСМС.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоВОСМС, Отказ, "");
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 

	РассчитатьВсе(Ложь, Ложь, Истина);

	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	

КонецПроцедуры // РассчитатьОПВ()

// Процедура рассчитывает результаты всех табличных частей документа.
//
Процедура Рассчитать() Экспорт
	
	Отказ = Ложь;
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);

	// проверим движения ИПН и ОПВ по данным табличной части
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, Истина, Истина, Истина).Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоСтрокамДокумента, Отказ, "");
	КонецЦикла;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РассчитатьВсе(Истина, Истина, Истина);
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры // Рассчитать()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Дата, 
	|	ДанныеДокумента.ПериодРегистрации, 
	|	ДанныеДокумента.Организация, 
	| 	ДанныеДокумента.Ссылка,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ, ЛОЖЬ) КАК УпрощенныйУчетИПНиОПВ,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций
	|
	|ИЗ 
	|	Документ.УдержаниеИПНиОПВНУ КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&парамПериодРегистрации, 
	|				Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличным частям документа.
//
Функция СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, ФормироватьПоИПН = Истина, ФормироватьПоОПВ = Истина, ФормироватьПоВОСМС = Истина)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	Запрос.УстановитьПараметр("ДокументСсылка", ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	
	// массив пустых значений СтруктурнойЕдиницы
	МассивПустыеСтруктурныеЕдиницы = Новый Массив();
	МассивПустыеСтруктурныеЕдиницы.Добавить(Неопределено);
	МассивПустыеСтруктурныеЕдиницы.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивПустыеСтруктурныеЕдиницы.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустыеСтруктурныеЕдиницы", МассивПустыеСтруктурныеЕдиницы);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "";
		Если ФормироватьПоИПН Тогда
			ПериодыФизЛицаТекст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФизЛицо,
			|	МесяцНалоговогоПериода КАК Период
			|ИЗ
			|	Документ.УдержаниеИПНиОПВНУ.УдержанныйИПН 
			|ГДЕ
			|	Ссылка = &ДокументСсылка
			|";
		КонецЕсли;
		Если ФормироватьПоОПВ Тогда
			Если НЕ ПустаяСтрока(ПериодыФизЛицаТекст) Тогда
				ПериодыФизЛицаТекст = ПериодыФизЛицаТекст + "
				|
				|ОБЪЕДИНИТЬ // берем только различные строки
				|";
			КонецЕсли;
			ПериодыФизЛицаТекст = ПериодыФизЛицаТекст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФизЛицо,
			|	МесяцНалоговогоПериода КАК Период
			|ИЗ
			|	Документ.УдержаниеИПНиОПВНУ.УдержанныйОПВ 
			|ГДЕ
			|	Ссылка = &ДокументСсылка
			|";
		КонецЕсли;
		
		Если ФормироватьПоВОСМС Тогда
			Если НЕ ПустаяСтрока(ПериодыФизЛицаТекст) Тогда
				ПериодыФизЛицаТекст = ПериодыФизЛицаТекст + "
				|
				|ОБЪЕДИНИТЬ // берем только различные строки
				|";
			КонецЕсли;
			ПериодыФизЛицаТекст = ПериодыФизЛицаТекст + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФизЛицо,
			|	МесяцНалоговогоПериода КАК Период
			|ИЗ
			|	Документ.УдержаниеИПНиОПВНУ.УдержанныеВзносыОСМС 
			|ГДЕ
			|	Ссылка = &ДокументСсылка
			|";
		КонецЕсли;

	    ПериодыФизЛицаТекст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ * ПОМЕСТИТЬ ПериодыФизЛицаВТ ИЗ ("+ПериодыФизЛицаТекст+") КАК ЗапросПоПериодамДляВТ;" ;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ПериодыФизЛицаТекст;
		Запрос.Выполнить();
		
		ПериодыФизЛицаТекстВТ = "ВЫБРАТЬ * ИЗ ПериодыФизЛицаВТ КАК ВложенныйЗапросПериодыФизЛицаИзВТ";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекстВТ, ВыборкаПоШапкеДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст+ "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиТЧ.ВидСтрокиЗапроса,
	|	СтрокиТЧ.НомерСтроки,
	|	СтрокиТЧ.ФизЛицо,
	|	СтрокиТЧ.МесяцНалоговогоПериода,
	|	СтрокиТЧ.Налог,
	|	СтрокиТЧ.Взнос,
	|	СтрокиТЧ.ВзносОСМС";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА СтрокиТЧ.СтруктурнаяЕдиница НЕ В (&ПустыеСтруктурныеЕдиницы)
		|			ТОГДА СтрокиТЧ.СтруктурнаяЕдиница
		|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация 
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе 
		Запрос.Текст = Запрос.Текст + ",
		|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	СтрокиТЧ.ПодразделениеОрганизации КАК ПодразделениеОрганизации";
	Иначе 
		Запрос.Текст = Запрос.Текст + ",
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации";	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	(";
	
	Если ФормироватьПоИПН Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	""УдержанныйИПН"" КАК ВидСтрокиЗапроса,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.ФизЛицо,
		|	СтрокиТЧ.МесяцНалоговогоПериода,
		|	СтрокиТЧ.СтруктурнаяЕдиница,
		|	СтрокиТЧ.ПодразделениеОрганизации,
		|	СтрокиТЧ.Налог,
		|	0 КАК Взнос,
		|	0 КАК ВзносОСМС
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныйИПН КАК СтрокиТЧ
		|ГДЕ
		|	СтрокиТЧ.Ссылка = &ДокументСсылка
		|";
	КонецЕсли;
	
	Если ФормироватьПоОПВ Тогда
		Если ФормироватьПоИПН Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	""УдержанныйОПВ"" КАК ВидСтрокиЗапроса,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.ФизЛицо,
		|	СтрокиТЧ.МесяцНалоговогоПериода,
		|	СтрокиТЧ.СтруктурнаяЕдиница,
		|	СтрокиТЧ.ПодразделениеОрганизации,
		|	0 КАК Налог,
		|	СтрокиТЧ.Взнос,
		|	0 КАК ВзносОСМС
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныйОПВ КАК СтрокиТЧ
		|ГДЕ
		|	СтрокиТЧ.Ссылка = &ДокументСсылка
		|";
	КонецЕсли;
	
	Если ФормироватьПоВОСМС Тогда
		Если ФормироватьПоИПН
			ИЛИ ФормироватьПоОПВ Тогда 
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	""УдержанныеВзносыОСМС"" КАК ВидСтрокиЗапроса,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.ФизЛицо,
		|	СтрокиТЧ.МесяцНалоговогоПериода,
		|	СтрокиТЧ.СтруктурнаяЕдиница,
		|	СтрокиТЧ.ПодразделениеОрганизации,
		|	0 КАК Налог,
		|	0 КАК Взнос,
		|	СтрокиТЧ.Взнос КАК ВзносОСМС
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ.УдержанныеВзносыОСМС КАК СтрокиТЧ
		|ГДЕ
		|	СтрокиТЧ.Ссылка = &ДокументСсылка
		| ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + ") КАК СтрокиТЧ";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО СтрокиТЧ.ФизЛицо = МестоРаботы.ФизЛицо
		|			И СтрокиТЧ.МесяцНалоговогоПериода = МестоРаботы.Период";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиТЧ.ВидСтрокиЗапроса,
	|	СтрокиТЧ.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнымЧастям()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;

	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц расчета, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;
	
	// При ведении упрощенного учета движения по регистрам производится при расчете ИПН и ОПВ
	Если ВыборкаПоШапкеДокумента.УпрощенныйУчетИПНиОПВ Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В учетной политике по налоговому учету установлен признак ""При начислении ИПН, ОПВ и ВОСМС принимать исчисленные суммы к учету как удержанные"",
								|поэтому документ ""Удержание ИПН, ОПВ и ВОСМС по налоговому учету"" создавать не надо!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ документа.
//
Процедура ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "УдержанныйИПН" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
										""" табл. части ""ИПН"": ";
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "УдержанныйОПВ" Тогда
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
										""" табл. части ""ОПВ"": ";
	Иначе
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
										""" табл. части ""Взносы ОСМС"": ";
	
	КонецЕсли;
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиТЧ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуУдержанныйИПН(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Движение = Движения.ИПНРасчетыСБюджетом.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;

	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;	
	Движение.МесяцНалоговогоПериода     = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
	
КонецПроцедуры // ДобавитьСтрокуУдержанныйИПН()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуУдержанныйОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе		
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;	
	Движение.МесяцНалоговогоПериода     = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
    Движение.МесяцВыплатыДоходов	    = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Взнос;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
	
КонецПроцедуры // ДобавитьСтрокуУдержанныйОПВ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам.
//
Процедура ДобавитьСтрокуУдержанныеВзносыОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																						ВыборкаПоШапкеДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе		
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;	
	Движение.МесяцНалоговогоПериода     = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
    Движение.МесяцВыплатыДоходов	    = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда 
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.ВзносОСМС;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
	
КонецПроцедуры // ДобавитьСтрокуУдержанныеВзносыОСМС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью" документа.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(УдержанныйИПН);
	МассивТЧ.Добавить(УдержанныйОПВ);
	МассивТЧ.Добавить(УдержанныеВзносыОСМС);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "ФизЛицо");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок документа при проведении
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");


	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоТабличнымЧастям(ВыборкаПоШапкеДокумента, Истина, Истина, Истина).Выбрать();

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "УдержанныйИПН" Тогда
						ДобавитьСтрокуУдержанныйИПН(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "УдержанныйОПВ" Тогда
						ДобавитьСтрокуУдержанныйОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
					ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "УдержанныеВзносыОСМС" Тогда
						ДобавитьСтрокуУдержанныеВзносыОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

/////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
