////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

// Хранит настройку учетной политики по налоговому учету - признак расчета СН
Перем мОрганизацияЯвляетсяПлательщикомСН Экспорт; 



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

// Проверяет и создает при необходимости элемент справочника ФизическиеЛица по реквизиту документа Контрагент.
//
// Возвращаемое значение:
//	Истина - если все в порядке, иначе Ложь
//
Функция ПроверитьИСоздатьФизЛицоПоКонтрагенту(СоздаватьФизЛицо = Ложь, ВыводитьСообщения = Ложь) Экспорт

#Если Клиент Тогда
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент!");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.ФизЛицо) Тогда
		// Если физ. лицо заполнено, то не обязательно оно доступно текущему пользователю
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.РНН,
		|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты).ФизЛицо";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			Возврат Ложь;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		// не надо ничего создавать - проверим только РНН
		Если Контрагент.ИдентификационныйКодЛичности <> Выборка.ИИН И ВыводитьСообщения Тогда
			Сообщить("ИИН контрагента не совпадает с ИИН физического лица!");
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если НЕ СоздаватьФизЛицо Тогда 
			Возврат Ложь;
		КонецЕсли;
		Ответ = Вопрос("Для контрагента не указано соответствующее ему физическое лицо, создать его автоматически?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Попытка 
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		
		НовоеФизЛицо 								= Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовоеФизЛицо.Родитель						= Справочники.ФизическиеЛица.НайтиПоНаименованию("Физические лица");
		Если НЕ НовоеФизЛицо.Родитель.ЭтоГруппа Тогда
			НовоеФизЛицо.Родитель					= Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		НовоеФизЛицо.Наименование 					= КонтрагентОбъект.Наименование;
		НовоеФизЛицо.РНН	        				= КонтрагентОбъект.РНН;
		НовоеФизЛицо.СИК	        				= КонтрагентОбъект.СИК;
		НовоеФизЛицо.ИдентификационныйКодЛичности	= КонтрагентОбъект.ИдентификационныйКодЛичности;
		НовоеФизЛицо.Комментарий					= КонтрагентОбъект.Комментарий;
		НовоеФизЛицо.ГруппаДоступаФизическогоЛица	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяГруппаДоступаФизическогоЛица");
		
		НовоеФизЛицо.Записать();
		
		КонтрагентОбъект.ФизЛицо = НовоеФизЛицо.Ссылка;
		КонтрагентОбъект.Записать();
		
		// ФИОФизЛиц
		Если ЗначениеЗаполнено(КонтрагентОбъект.НаименованиеПолное) Тогда
			ФИОСтрокой = КонтрагентОбъект.НаименованиеПолное;
		Иначе
			ФИОСтрокой = КонтрагентОбъект.Наименование;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ФИОСтрокой) Тогда

			МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период  = Макс(НастройкаПравДоступа.ПолучитьПервуюДатуДоступногоПериода(), '19000101');
			МенеджерЗаписи.ФизЛицо = НовоеФизЛицо.Ссылка;
				
			МассивФИО = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ФИОСтрокой, " ");
			Если МассивФИО.Количество() > 0 Тогда
				МенеджерЗаписи.Фамилия = МассивФИО[0];
			КонецЕсли;
			Если МассивФИО.Количество() > 1 Тогда
				МенеджерЗаписи.Имя = МассивФИО[1];
			КонецЕсли;
			Если МассивФИО.Количество() > 2 Тогда
				МенеджерЗаписи.Отчество = МассивФИО[2];
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
	
	Исключение
		Если ВыводитьСообщения Тогда 
			Сообщить("При создании физлица возникла ошибка: " + ОписаниеОшибки());
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
#Иначе
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.РНН,
	|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИИН
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = ВЫРАЗИТЬ(&Контрагент КАК Справочник.Контрагенты).ФизЛицо";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
#КонецЕсли

КонецФункции // ПроверитьИСоздатьФизЛицоПоКонтрагенту() 

Функция ВозможноИспользованиеКонтрагента(Контрагент, Сообщать = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК КонтрагентЯвляетсяЮрЛицом
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если Сообщать Тогда 
			Сообщить("""" + СокрЛП(Контрагент) + """ не является физическим лицом, расчет налогов при поступлении активов и услуг для него не предусмотрен!");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа.
//
Процедура РассчитатьВсе(КомментироватьРасчет = Ложь) Экспорт
	
	Отказ = Ложь;
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
		
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация, 
																		ВыборкаПоШапкеДокумента.Организация, 
																		ИсчислениеНалоговСтруктурныхЕдиниц, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	
	// определим является ли организация плательщиком СН по общеустановленному порядку
	мОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ПериодРегистрации);
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если ВыборкаПоШапкеДокумента.УчитыватьИПН Тогда
		ВыборкаПоИсчисленныйИПН = СформироватьЗапросПоИсчисленныйИПН().Выбрать();
		Пока ВыборкаПоИсчисленныйИПН.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиИсчисленныйИПН(ВыборкаПоИсчисленныйИПН, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.УчитыватьВОСМС Тогда
		ВыборкаПоИсчисленныйВОСМС = СформироватьЗапросПоИсчисленныеВОСМС().Выбрать();
		Пока ВыборкаПоИсчисленныйВОСМС.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиИсчисленныеВОСМС(ВыборкаПоИсчисленныйВОСМС, Отказ);
		КонецЦикла;
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.УчитыватьОПВ Тогда
		ВыборкаПоИсчисленныйОПВ = СформироватьЗапросПоИсчисленныйОПВ().Выбрать();
		Пока ВыборкаПоИсчисленныйОПВ.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиИсчисленныйОПВ(ВыборкаПоИсчисленныйОПВ, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если мОрганизацияЯвляетсяПлательщикомСН И ВыборкаПоШапкеДокумента.УчитыватьСН Тогда
		ВыборкаПоИсчисленныйСН = СформироватьЗапросПоИсчисленныйСН().Выбрать();
		Пока ВыборкаПоИсчисленныйСН.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиИсчисленныйСН(ВыборкаПоИсчисленныйСН, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	//++Аксиома 19.02.2025
    Если ВыборкаПоШапкеДокумента.УчитыватьСО Тогда
		ВыборкаПоИсчисленныйСО = СформироватьЗапросПоИсчисленныйСО().Выбрать();
		Пока ВыборкаПоИсчисленныйСО.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиИсчисленныйСО(ВыборкаПоИсчисленныйСО, Отказ);
		КонецЦикла;
	КонецЕсли;
	//--Аксиома 19.02.2025
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// запишем доход в регистры ИПНСведенияОДоходах, СНСведенияОДоходах, ВОСМССведенияОДоходах
	ДобавитьСтрокуВДвиженияПоРегистрамНакопленияПоШапке(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);
	Движения.ИПНСведенияОДоходах.Записать();
	Движения.СНСведенияОДоходах.Записать();
	Движения.ВОСМССведенияОДоходах.Записать();
	Движения.ОПВСведенияОДоходах.Записать();
	//++Аксиома 19.02.2025
	Движения.СОСведенияОДоходах.Записать();
	//--Аксиома 19.02.2025
	
	// Сначала удалим существующие движения
	// ИПНРасчетыСБюджетом
	НаборИПНРасчетыСБюджетом = РегистрыНакопления.ИПНРасчетыСБюджетом.СоздатьНаборЗаписей();
	НаборИПНРасчетыСБюджетом.Отбор.Регистратор.Значение = Ссылка;
	НаборИПНРасчетыСБюджетом.Записать();

	// СНИсчисленный
	НаборСНИсчисленный = РегистрыНакопления.СНИсчисленный.СоздатьНаборЗаписей();
	НаборСНИсчисленный.Отбор.Регистратор.Значение = Ссылка;
	НаборСНИсчисленный.Записать();
	
	// ВОСМСИсчисленные
	НаборВОСМСИсчисленные = РегистрыНакопления.ВОСМСИсчисленные.СоздатьНаборЗаписей();
	НаборВОСМСИсчисленные.Отбор.Регистратор.Значение = Ссылка;
	НаборВОСМСИсчисленные.Записать();
	
	// ОПВРасчетыСФондами
	НаборОПВРасчетыСФондами = РегистрыНакопления.ОПВРасчетыСФондами.СоздатьНаборЗаписей();
	НаборОПВРасчетыСФондами.Отбор.Регистратор.Значение = Ссылка;
	НаборОПВРасчетыСФондами.Записать();
	
	//СведенияОбИсчисленииВычетовИПН
	НаборСведенияОбИсчисленииВычетовИПН = РегистрыНакопления.СведенияОбИсчисленииВычетовИПН.СоздатьНаборЗаписей();
	НаборСведенияОбИсчисленииВычетовИПН.Отбор.Регистратор.Значение = Ссылка;
	НаборСведенияОбИсчисленииВычетовИПН.Записать();
	
	//++Аксиома 19.02.2025
	НаборСОРасчетыСФондами = РегистрыНакопления.СОРасчетыСФондами.СоздатьНаборЗаписей();
	НаборСОРасчетыСФондами.Отбор.Регистратор.Значение = Ссылка;
	НаборСОРасчетыСФондами.Записать();
	//--Аксиома 19.02.2025
    
	Если КомментироватьРасчет Тогда
		КомментарийИПН = РаботаССообщениями.КомментарийРасчета("Расчет <B>Индивидуальный подоходный налог</B>", , , , , , -100); // ИПН сразу после ОПВ, потом уже все остальные удержания
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.УчитыватьВОСМС Тогда
		// Составим текст запроса для выбора списка физлиц, по которым надо считать ВОСМС
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныеВОСМС КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		// получение результата ВОСМС по прогрессивной шкале ставок
		ДанныеВОСМС = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаВОСМС(Неопределено, ПериодРегистрации,  Налогоплательщик, Ссылка, СписокФизлицТекст, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации);
		Если ДанныеВОСМС <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьНаборЗаписейПоДаннымВОСМС(ИсчисленныеВОСМС, ПериодРегистрации, НаборВОСМСИсчисленные, ДанныеВОСМС, Налогоплательщик, Организация, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, , Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
			// Запишем расчитанный ВОСМС для расчета \ИПН 
			НаборВОСМСИсчисленные.Записать();
		КонецЕсли;
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.УчитыватьОПВ Тогда
		// Составим текст запроса для выбора списка физлиц, по которым надо считать ОПВ
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйОПВ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		// получение результата ОПВ
		ДанныеОПВ = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ(Неопределено, ПериодРегистрации,  Налогоплательщик, Ссылка, СписокФизлицТекст);
		Если ДанныеОПВ <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьНаборЗаписейПоДаннымОПВ(ИсчисленныйОПВ, ПериодРегистрации, НаборОПВРасчетыСФондами, ДанныеОПВ, Налогоплательщик, Организация, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, , Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
			// Запишем расчитанный ОПВ
			НаборОПВРасчетыСФондами.Записать();
		КонецЕсли;
				
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.УчитыватьИПН Тогда
		// Составим текст запроса для выбора списка физлиц, по которым надо считать ИПН
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйИПН КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		// Расчет вычетов ИПН
        ПроведениеРасчетов.ПроверитьПерерасчетИПНДоходОтНалоговогоАгентаДо2020(ЭтотОбъект);
		
		ДанныеВычетовИПН = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаВычетовИПН(ВыборкаПоШапкеДокумента.ПериодРегистрации,  Налогоплательщик, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.Ссылка, СписокФизлицТекст);
		Если ДанныеВычетовИПН <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьНаборЗаписейПоДаннымВычетовИПН(ВычетыИПН, ПериодРегистрации, НаборСведенияОбИсчисленииВычетовИПН, ДанныеВычетовИПН, Налогоплательщик, ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, , , НЕ ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
			// Запишем расчитанные вычеты для расчета ИПН
			НаборСведенияОбИсчисленииВычетовИПН.Записать();
		КонецЕсли;
		
		// получение результата ИПН по прогрессивной шкале ставок
		ДанныеИПН = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаИПН(Неопределено, ПериодРегистрации,  Налогоплательщик, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст);
		Если ДанныеИПН <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьНаборЗаписейПоДаннымИПН(ИсчисленныйИПН, ПериодРегистрации, Неопределено, ДанныеИПН, Налогоплательщик, ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, КомментарийИПН, , Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
		КонецЕсли;
	КонецЕсли;
	
	Если мОрганизацияЯвляетсяПлательщикомСН И ВыборкаПоШапкеДокумента.УчитыватьСН 
			И ВыборкаПоШапкеДокумента.ОблагаетсяСН <> Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
		// Составим текст запроса для выбора списка физлиц, по которым надо считать СН
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСН КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		// получение результата СН по регрессивной шкале ставок
		ДанныеСН = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаСН(Неопределено, ПериодРегистрации,  Налогоплательщик, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст);
		Если ДанныеСН <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьТабличнуюЧастьПоДаннымСН(ИсчисленныйСН, ПериодРегистрации, ДанныеСН, Налогоплательщик, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, , Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
		КонецЕсли;
	КонецЕсли;
	
	//++Аксиома 19.02.2025
	Если ВыборкаПоШапкеДокумента.УчитыватьСО 
		И ВыборкаПоШапкеДокумента.ОблагаетсяСО <> Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
		// Составим текст запроса для выбора списка физлиц, по которым надо считать СО
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСО КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор";
		
		// получение результата СО по регрессивной шкале ставок
		ДанныеСО = ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаСО(Неопределено, ПериодРегистрации,  Налогоплательщик, Ссылка, СписокФизлицТекст, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации);
		Если ДанныеСО <> НеОпределено Тогда
			ПроведениеРасчетов.ЗаполнитьНаборЗаписейПоДаннымСО(ИсчисленныйСО, ПериодРегистрации, НаборСОРасчетыСФондами, ДанныеСО, Налогоплательщик, Организация, ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, , КомментироватьРасчет, , Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам);
		КонецЕсли;
	КонецЕсли;
	//--Аксиома 19.02.2025
    
	// Очистим движения по регистру ИПНСведенияОДоходах
	Движения.ИПНСведенияОДоходах.Очистить();
	Движения.ИПНСведенияОДоходах.Записать();

	// Очистим движения по регистру СНСведенияОДоходах
	Движения.СНСведенияОДоходах.Очистить();
	Движения.СНСведенияОДоходах.Записать();
	
	// Очистим движения по регистру ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
	Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Очистить();
	Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Записать();
	
	// Очистим движения по регистру ВОСМССведенияОДоходах
	Движения.ВОСМССведенияОДоходах.Очистить();
	Движения.ВОСМССведенияОДоходах.Записать();
	
	// Очистим движения по регистру ВОСМСРасчетыСФондами
	НаборВОСМСИсчисленные.Очистить();
	НаборВОСМСИсчисленные.Записать();

	// Очистим движения по регистру ОПВСведенияОДоходах
	Движения.ОПВСведенияОДоходах.Очистить();
	Движения.ОПВСведенияОДоходах.Записать();
	
	// Очистим движения по регистру НаборОПВРасчетыСФондами
	НаборОПВРасчетыСФондами.Очистить();
	НаборОПВРасчетыСФондами.Записать();
	
	// Очистим движения по регистру СведенияОбИсчисленииВычетовИПН
	НаборСведенияОбИсчисленииВычетовИПН.Очистить();
	НаборСведенияОбИсчисленииВычетовИПН.Записать();
	
	//++Аксиома 19.02.2025
	Движения.СОСведенияОДоходах.Очистить();
	Движения.СОСведенияОДоходах.Записать();
	
	НаборСОРасчетыСФондами.Очистить();
	НаборСОРасчетыСФондами.Записать();
	//--Аксиома 19.02.2025
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры  // РассчитатьВсе()
	
#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
//
Функция СформироватьЗапросПоШапке()

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	МестоРаботыТекст="";
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ФизЛицо", Контрагент.ФизЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПериодыФизЛицаТекст = "ВЫБРАТЬ &ФизЛицо КАК ФизЛицо, &парамПериодРегистрации КАК Период";
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	КонецЕсли;

	Запрос.Текст = МестоРаботыТекст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Дата, 
	|	ДанныеДокумента.ПериодРегистрации, 
	|	ДанныеДокумента.Организация, 
	|	ДанныеДокумента.Организация.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ДанныеДокумента.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ)
		|			ТОГДА ВЫБОР 
		|					КОГДА ЕСТЬNULL(ДанныеДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|						ТОГДА ДанныеДокумента.ПодразделениеОрганизации
		|					КОГДА НЕ (ДанныеДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|						ТОГДА ДанныеДокумента.СтруктурноеПодразделение
		|					ИНАЧЕ ДанныеДокумента.Организация
		|				КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|					ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|				КОГДА ЕСТЬNULL(ДанныеДокумента.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
		|					ТОГДА ДанныеДокумента.ПодразделениеОрганизации
		|				КОГДА НЕ (ДанныеДокумента.СтруктурноеПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|					ТОГДА ДанныеДокумента.СтруктурноеПодразделение
		|				ИНАЧЕ ДанныеДокумента.Организация
		|			КОНЕЦ
		|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
		Запрос.Текст = Запрос.Текст + ", 
		|	ДанныеДокумента.Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",
	| 	ДанныеДокумента.Ссылка,
	| 	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК ФИОФизЛица,
	|	ДанныеДокумента.Контрагент.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.ДоговорКонтрагента,
	|	ДанныеДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ДанныеДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Сделка,
	|	ДанныеДокумента.ВидРасчета,
	|	ДанныеДокумента.ВидРасчета.ВидДохода КАК ВидДохода,
	|	ДанныеДокумента.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН,
	|	ДанныеДокумента.ВидРасчета.ОблагаетсяСН КАК ОблагаетсяСН,
	|	ДанныеДокумента.ВидРасчета.ОблагаетсяВОСМС КАК ОблагаетсяВОСМС,
	|	ДанныеДокумента.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
	|	ДанныеДокумента.ВидУчетаНУ,
	|	ДанныеДокумента.УчитыватьКПН,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.СчетЗатрат,
	|	ДанныеДокумента.СчетЗатратНУ,
	|	ДанныеДокумента.СубконтоДт1,
	|	ДанныеДокумента.СубконтоДт2,
	|	ДанныеДокумента.СубконтоДт3,
	|	ДанныеДокумента.СубконтоДтНУ1,
	|	ДанныеДокумента.СубконтоДтНУ2,
	|	ДанныеДокумента.СубконтоДтНУ3,
	|	ЕСТЬNULL(ТабличнаяЧастьИПН.Налог, 0) КАК СуммаИПН,
	|	ЕСТЬNULL(ТабличнаяЧастьСН.Налог, 0) КАК СуммаСН,
	|	ЕСТЬNULL(ТабличнаяЧастьВОСМС.Взнос, 0) КАК СуммаВОСМС,
	|	ЕСТЬNULL(ТабличнаяЧастьОПВ.Взнос, 0) КАК СуммаОПВ,
	//++Аксиома 19.02.2025
	|	ЕСТЬNULL(ТабличнаяЧастьСО.Отчисление, 0) КАК СуммаСО,
	|	ДанныеДокумента.УчитыватьСО,
	|	ДанныеДокумента.СчетЗатрат_СО,
	|	ДанныеДокумента.СчетЗатратНУ_СО,
	|	ДанныеДокумента.СубконтоДт1_СО,
	|	ДанныеДокумента.СубконтоДт2_СО,
	|	ДанныеДокумента.СубконтоДт3_СО,
	|	ДанныеДокумента.СубконтоДтНУ1_СО,
	|	ДанныеДокумента.СубконтоДтНУ2_СО,
	|	ДанныеДокумента.СубконтоДтНУ3_СО,
	|	ДанныеДокумента.ВидРасчета.ОблагаетсяСО КАК ОблагаетсяСО,
	//--Аксиома 19.02.2025
 	|	ДанныеДокумента.СчетУчетаРасчетовПоАвансам,
	|	ДанныеДокумента.СчетУчетаРасчетовСКонтрагентом,
	|	ДанныеДокумента.УчитыватьИПН,
	|	ДанныеДокумента.УчитыватьВОСМС,
	|	ДанныеДокумента.УчитыватьСН,
	|	ДанныеДокумента.УчитыватьОПВ,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ, ЛОЖЬ) КАК УпрощенныйУчетИПНиОПВ,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ИСТИНА) КАК ОрганизацияЯвляетсяПлательщикомСН,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)) КАК Страна
	|
	|ИЗ 
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СУММА(СтрокиТЧ.Взнос) КАК Взнос
	|						ИЗ
	|							Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныеВОСМС КАК СтрокиТЧ
	|						ГДЕ
	|							СтрокиТЧ.Ссылка = &ДокументСсылка) КАК ТабличнаяЧастьВОСМС
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СУММА(СтрокиТЧ.Налог) КАК Налог
	|						ИЗ
	|							Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйИПН КАК СтрокиТЧ
	|						ГДЕ
	|							СтрокиТЧ.Ссылка = &ДокументСсылка) КАК ТабличнаяЧастьИПН
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СУММА(СтрокиТЧ.Налог) КАК Налог
	|						ИЗ
	|							Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСН КАК СтрокиТЧ
	|						ГДЕ
	|							СтрокиТЧ.Ссылка = &ДокументСсылка) КАК ТабличнаяЧастьСН
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СУММА(СтрокиТЧ.Взнос) КАК Взнос
	|						ИЗ
	|							Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйОПВ КАК СтрокиТЧ
	|						ГДЕ
	|							СтрокиТЧ.Ссылка = &ДокументСсылка) КАК ТабличнаяЧастьОПВ
	|		ПО ИСТИНА
	//++Аксиома 19.02.2025
    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							СУММА(СтрокиТЧ.Отчисление) КАК Отчисление
	|						ИЗ
	|							Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСО КАК СтрокиТЧ
	|						ГДЕ
	|							СтрокиТЧ.Ссылка = &ДокументСсылка) КАК ТабличнаяЧастьСО
	|		ПО ИСТИНА
	//--Аксиома 19.02.2025
    |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&парамПериодРегистрации, 
	|				Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ),
	|				ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛиц
	|		ПО ИСТИНА
	|";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ИСТИНА
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ИсчисленныйИПН" документа
//
Функция СформироватьЗапросПоИсчисленныйИПН()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиИсчисленныйИПН.НомерСтроки,
	|	СтрокиИсчисленныйИПН.ФизЛицо,
	|	СтрокиИсчисленныйИПН.МесяцНалоговогоПериода,
	|	СтрокиИсчисленныйИПН.Налог,
	|	СтрокиИсчисленныйИПН.ВидДохода,
	|	СтрокиИсчисленныйИПН.ПримененныйВычет,
	|	СтрокиИсчисленныйИПН.ПримененнаяЛьгота,
	|	СтрокиИсчисленныйИПН.РазрешенныйВычет,
	|	СтрокиИсчисленныйИПН.ОблагаемаяБаза
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйИПН КАК СтрокиИсчисленныйИПН
	|ГДЕ
	|	СтрокиИсчисленныйИПН.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиИсчисленныйИПН.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныйИПН()

// Формирует запрос по таблице "ИсчисленныйСН" документа.
//
Функция СформироватьЗапросПоИсчисленныйСН()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиИсчисленныйСН.НомерСтроки,
	|	СтрокиИсчисленныйСН.ФизЛицо,
	|	СтрокиИсчисленныйСН.МесяцНалоговогоПериода,
	|	СтрокиИсчисленныйСН.Налог,
	|	СтрокиИсчисленныйСН.ОблагаемаяБаза
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСН КАК СтрокиИсчисленныйСН
	|ГДЕ
	|	СтрокиИсчисленныйСН.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиИсчисленныйСН.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныйСН()

// Формирует запрос по таблице "ИсчисленныеВОСМС" документа
//
Функция СформироватьЗапросПоИсчисленныеВОСМС()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиИсчисленныеВОСМС.НомерСтроки,
	|	СтрокиИсчисленныеВОСМС.ФизЛицо,
	|	СтрокиИсчисленныеВОСМС.МесяцНалоговогоПериода,
	|	СтрокиИсчисленныеВОСМС.Взнос,
	|	СтрокиИсчисленныеВОСМС.ВидДохода,
	|	СтрокиИсчисленныеВОСМС.ОблагаемаяБаза
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныеВОСМС КАК СтрокиИсчисленныеВОСМС
	|ГДЕ
	|	СтрокиИсчисленныеВОСМС.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиИсчисленныеВОСМС.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныеВОСМС()

// Формирует запрос по таблице "ВычетыИПН" документа
//
Функция СформироватьЗапросПоВычетыИПН()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыИПН.НомерСтроки,
	|	ВычетыИПН.ФизЛицо,
	|	ВычетыИПН.ВидВычета,
	|	ВычетыИПН.МесяцНалоговогоПериода,
	|	ВычетыИПН.РазрешенныйВычет,
	|	ВычетыИПН.ПримененныйВычет,
	|	ВычетыИПН.ВидДохода
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ВычетыИПН КАК ВычетыИПН
	|ГДЕ
	|	ВычетыИПН.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыИПН.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныйИПН()

Функция СформироватьЗапросПоИсчисленныйОПВ()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиИсчисленныйОПВ.НомерСтроки,
	|	СтрокиИсчисленныйОПВ.ФизЛицо,
	|	СтрокиИсчисленныйОПВ.МесяцНалоговогоПериода,
	|	СтрокиИсчисленныйОПВ.Взнос,
	|	СтрокиИсчисленныйОПВ.ОблагаемаяБаза
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйОПВ КАК СтрокиИсчисленныйОПВ
	|ГДЕ
	|	СтрокиИсчисленныйОПВ.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиИсчисленныйОПВ.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныеОПВ()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;

	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан месяц расчета, по которой начисляется зарплата!", Отказ, Заголовок);
	КонецЕсли;
	
	// Контрагент
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Контрагент) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан контрагент!", Отказ, Заголовок);
	КонецЕсли;

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Для контрагента не указано соответствующее ему физлицо!", Отказ, Заголовок);
	КонецЕсли;

	// Договор контрагента
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан договор контрагента!", Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// ОблагаетсяИПН
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОблагаетсяИПН) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Для вида расчета не указан способ обложения ИПН!", Отказ, Заголовок);
	КонецЕсли;

	// ОблагаетсяСН
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОблагаетсяСН) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Для вида расчета не указан способ обложения СН!", Отказ, Заголовок);
	КонецЕсли;
	
	//++Аксиома 19.02.2025
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОблагаетсяСО) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Для вида расчета не указан способ обложения СО!", Отказ, Заголовок);
	КонецЕсли;
	//--Аксиома 19.02.2025
 
	// ОблагаетсяВОСМС
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОблагаетсяВОСМС) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Для вида расчета не указан способ обложения ВОСМС!", Отказ, Заголовок);
	КонецЕсли;
	
	// СчетУчетаРасчетовСКонтрагентом
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет учета расчетов с контрагентом!", Отказ, Заголовок);
	КонецЕсли;

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидУчетаНУ) и ВыборкаПоШапкеДокумента.УчитыватьКПН Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана вид учета НУ!", Отказ, Заголовок);
	КонецЕсли;

	// СуммаДокумента
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СуммаДокумента) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана сумма документа!", Отказ, Заголовок);
	КонецЕсли;

	// ДокументОснование
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДокументОснование) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан документ-основание!", Отказ, Заголовок);
	КонецЕсли;
	
	// СчетЗатрат
	Если ВыборкаПоШапкеДокумента.СуммаСН <> 0 Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СчетЗатрат) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет затрат для социального налога!", Отказ, Заголовок);
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ОблагаетсяСН = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Для выбранного вида расчета установлен способ обложения социальным налогом ""Не облагается"", необходимо очистить сумму СН!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// УчитыватьИПН или УчитыватьСН
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяПлательщикомСН Тогда // должен быть указан признак УчитыватьИПН или УчитыватьСН
		Если НЕ ВыборкаПоШапкеДокумента.УчитыватьИПН И НЕ ВыборкаПоШапкеДокумента.УчитыватьСН Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид налога, который необходимо рассчитать. Установите признак ""Учитывать ИПН"" или ""Учитывать СН""!", Отказ, Заголовок);
		КонецЕсли;
	Иначе // должен быть указан признак УчитыватьИПН или Учитывать ВОСМС
		Если НЕ ВыборкаПоШапкеДокумента.УчитыватьИПН И НЕ ВыборкаПоШапкеДокумента.УчитыватьВОСМС Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид налога, который необходимо рассчитать. Установите признак ""Учитывать ИПН"" или ""Учитывать ВОСМС""!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ИсчисленныйИПН" документа.
//
Процедура ПроверитьЗаполнениеСтрокиИсчисленныйИПН(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""ИПН"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсчисленныйИПН()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ИсчисленныеВОСМС" документа.
//
Процедура ПроверитьЗаполнениеСтрокиИсчисленныеВОСМС(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""ВОСМС"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсчисленныеВОСМС()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ИсчисленныйСН" документа.
//
Процедура ПроверитьЗаполнениеСтрокиИсчисленныйСН(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""СН"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсчисленныйСН()

Процедура ПроверитьЗаполнениеСтрокиИсчисленныйОПВ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""ОПВ"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсчисленныйОПВ()

// По строке выборки результата запроса по документу формируем движения по регистрам доходов.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопленияПоШапке(ВыборкаПоШапкеДокумента, 
																ИсчислениеНалоговСтруктурныхЕдиниц);

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;

	///////////////////////////
	// ИПНСведенияОДоходах	
	
	Если ВыборкаПоШапкеДокумента.УчитыватьИПН Тогда
		Движение = Движения.ИПНСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо 			= ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения = ВыборкаПоШапкеДокумента.ОблагаетсяИПН;
		Движение.ВидРасчета			= ВыборкаПоШапкеДокумента.ВидРасчета;
		Движение.ВидДохода			= ВыборкаПоШапкеДокумента.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоШапкеДокумента.СуммаДокумента;
    КонецЕсли;

	
	///////////////////////////
	// ВОСМССведенияОДоходах	
	
	Если ВыборкаПоШапкеДокумента.УчитыватьВОСМС Тогда
		Движение = Движения.ВОСМССведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо 			= ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда			
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе			
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения = ВыборкаПоШапкеДокумента.ОблагаетсяВОСМС;
		Движение.ВидРасчета			= ВыборкаПоШапкеДокумента.ВидРасчета;
		Движение.ВидДохода			= ВыборкаПоШапкеДокумента.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоШапкеДокумента.СуммаДокумента;
    КонецЕсли;
	
	///////////////////////////
	// ОПВСведенияОДоходах	
	
	Если ВыборкаПоШапкеДокумента.УчитыватьОПВ Тогда
		Движение = Движения.ОПВСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо 			= ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда			
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе			
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения = ВыборкаПоШапкеДокумента.ОблагаетсяОПВ;
		Движение.ВидРасчета			= ВыборкаПоШапкеДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоШапкеДокумента.СуммаДокумента;
    КонецЕсли;
	
	//++Аксиома 19.02.2025
	Если ВыборкаПоШапкеДокумента.УчитыватьСО Тогда
		Движение = Движения.СОСведенияОДоходах.Добавить();
		
		// Свойства
		Движение.Период 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		
		// Измерения
		Движение.ФизЛицо 			= ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда			
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе			
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения = ВыборкаПоШапкеДокумента.ОблагаетсяСО;
		Движение.ВидРасчета			= ВыборкаПоШапкеДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоШапкеДокумента.СуммаДокумента;
	КонецЕсли;
	//--Аксиома 19.02.2025
    
	///////////////////////////////////////////////////
    // ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
	
	Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
	// Свойства
	Движение.ВидДвижения	  		= ВидДвиженияНакопления.Приход;
	Движение.Период			  		= ВыборкаПоШапкеДокумента.Дата;
			
	// Измерения
	Движение.Контрагент				= ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов 	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
			
	// Ресурсы
	//++Аксиома 19.02.2025
 	//Движение.СуммаВзаиморасчетов  	= ВыборкаПоШапкеДокумента.СуммаДокумента - ?(ВыборкаПоШапкеДокумента.УчитыватьИПН,ВыборкаПоШапкеДокумента.СуммаИПН,0) - ?(ВыборкаПоШапкеДокумента.УчитыватьВОСМС,ВыборкаПоШапкеДокумента.СуммаВОСМС,0) - ?(ВыборкаПоШапкеДокумента.УчитыватьОПВ,ВыборкаПоШапкеДокумента.СуммаОПВ,0);
    Движение.СуммаВзаиморасчетов  	= ВыборкаПоШапкеДокумента.СуммаДокумента - ?(ВыборкаПоШапкеДокумента.УчитыватьИПН,ВыборкаПоШапкеДокумента.СуммаИПН,0) - ?(ВыборкаПоШапкеДокумента.УчитыватьВОСМС,ВыборкаПоШапкеДокумента.СуммаВОСМС,0) - ?(ВыборкаПоШапкеДокумента.УчитыватьОПВ,ВыборкаПоШапкеДокумента.СуммаОПВ,0) - ?(ВыборкаПоШапкеДокумента.УчитыватьСО,ВыборкаПоШапкеДокумента.СуммаСО,0);
    //--Аксиома 19.02.2025


    ///////////////////////////////////////////////////
    // СНСведенияОДоходах

	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяПлательщикомСН И ВыборкаПоШапкеДокумента.УчитыватьСН   
			И (ВыборкаПоШапкеДокумента.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо
					Или ВыборкаПоШапкеДокумента.ОблагаетсяСН <> Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) Тогда
	
		// доход для СН не регистрируем для ИП, если вид расчета не облагается СН
				
		Движение = Движения.СНСведенияОДоходах.Добавить();

		// Свойства
		Движение.Период  	       		= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);

		// Измерения
		Движение.ФизЛицо               	= ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница = ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	   	= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация		   	= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения 	= ВыборкаПоШапкеДокумента.ОблагаетсяСН;
		Движение.ВидРасчета			 	= ВыборкаПоШапкеДокумента.ВидРасчета;
 		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоШапкеДокумента.СуммаДокумента; 
	
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопленияПоШапке()

// По строке выборок из результатов запроса по документу формируем движения по регистрам ИПН.
//
Процедура ДобавитьСтрокуИсчисленныйИПН(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);

	Если ВыборкаПоСтрокамДокумента.Налог = 0 
	   И ВыборкаПоСтрокамДокумента.ПримененныйВычет = 0
	   И ВыборкаПоСтрокамДокумента.ПримененнаяЛьгота = 0
	   И ВыборкаПоСтрокамДокумента.ОблагаемаяБаза = 0
	   И ВыборкаПоСтрокамДокумента.РазрешенныйВычет = 0  Тогда
		Возврат;
	КонецЕсли;

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;
	
	// ИПН расчеты с бюджетом
	
	Движение = Движения.ИПНРасчетыСБюджетом.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
		
	// Ресурсы
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.НеОтражатьВРеглУчете		= Истина;
	
		
	// ИПН исчисленный
	Движение = Движения.ИПНИсчисленный.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	Движение.ВидДохода                  = ВыборкаПоСтрокамДокумента.ВидДохода;
		
	// Ресурсы
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.НеОтражатьВРеглУчете		= Истина;
	
	
	
	// сразу же регистрируем факт удержания налога
	Если УпрощенныйУчетИПНиОПВ Тогда 

		Движение = Движения.ИПНРасчетыСБюджетом.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		Движение.НеОтражатьВРеглУчете		= Истина;
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ОблагаемаяБаза <> 0  
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененныйВычет <> 0 
		ИЛИ ВыборкаПоСтрокамДокумента.ПримененнаяЛьгота <> 0
		ИЛИ ВыборкаПоСтрокамДокумента.РазрешенныйВычет <> 0 Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период 				= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
        Движение.СпособНалогообложения      = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
        Движение.ВидДохода					= ВыборкаПоСтрокамДокумента.ВидДохода;

		// Ресурсы
		Движение.ОблагаемаяБаза				= ВыборкаПоСтрокамДокумента.ОблагаемаяБаза;
		Движение.ПримененныйВычет			= ВыборкаПоСтрокамДокумента.ПримененныйВычет;
		Движение.ПримененнаяЛьгота			= ВыборкаПоСтрокамДокумента.ПримененнаяЛьгота;
		Движение.РазрешенныйВычет			= ВыборкаПоСтрокамДокумента.РазрешенныйВычет;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьСтрокуИсчисленныйИПН()

// По строке выборок из результатов запроса по документу формируем движения по регистрам ВОСМС.
//
Процедура ДобавитьСтрокуИсчисленныеВОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);

	Если ВыборкаПоСтрокамДокумента.Взнос = 0 
	   И ВыборкаПоСтрокамДокумента.ОблагаемаяБаза = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;

	Движение = Движения.ВОСМСРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе                                                   		
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Взнос = ВыборкаПоСтрокамДокумента.Взнос;
	
	// Реквизиты
	Движение.ВидПлатежа      			= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;	
	Движение.НеОтражатьВРеглУчете		= Истина;
	
	
	// ВОСМС исчисленные
	Движение = Движения.ВОСМСИсчисленные.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	Движение.ВидДохода                  = ВыборкаПоСтрокамДокумента.ВидДохода;
	Движение.ВидПлатежа      			= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		
	// Ресурсы
	Движение.Взнос						= ВыборкаПоСтрокамДокумента.Взнос;
	
	// Реквизиты 
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	Движение.НеОтражатьВРеглУчете		= Истина;
	
	 
	
	// сразу же регистрируем факт удержания налога
	Если УпрощенныйУчетИПНиОПВ Тогда 

		Движение = Движения.ВОСМСПодлежитПеречислениюВФонды.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда			
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе			
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		Движение.МесяцВыплатыДоходов        = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.Взнос						= ВыборкаПоСтрокамДокумента.Взнос;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ОблагаемаяБаза <> 0 Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период 				= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
        Движение.СпособНалогообложения      = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
		Движение.ВидДохода                  = ВыборкаПоСтрокамДокумента.ВидДохода;
	 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;  

		// Ресурсы
		Движение.ОблагаемаяБаза				= ВыборкаПоСтрокамДокумента.ОблагаемаяБаза;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуИсчисленныеВОСМС()

// По строке выборок из результатов запроса по документу формируем движения по регистрам ОПВ.
//
Процедура ДобавитьСтрокуИсчисленныйОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);

	Если ВыборкаПоСтрокамДокумента.Взнос = 0 
	   И ВыборкаПоСтрокамДокумента.ОблагаемаяБаза = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;

	Движение = Движения.ОПВРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе                                                   		
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Взнос = ВыборкаПоСтрокамДокумента.Взнос;
	
	// Реквизиты
	Движение.ВидПлатежа      			= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;	
	Движение.НеОтражатьВРеглУчете		= Истина;
	                  	
	// сразу же регистрируем факт удержания налога
	Если УпрощенныйУчетИПНиОПВ Тогда 

		Движение = Движения.ОПВПодлежитПеречислениюВФонды.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда			
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе			
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		
		Движение.СтруктурнаяЕдиница	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Иначе
			Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		Движение.МесяцВыплатыДоходов  = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.Взнос						= ВыборкаПоСтрокамДокумента.Взнос;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Удержание;
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ОблагаемаяБаза <> 0 Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период 				= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
        Движение.СпособНалогообложения      = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;        

		// Ресурсы
		Движение.ОблагаемаяБаза				= ВыборкаПоСтрокамДокумента.ОблагаемаяБаза;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуИсчисленныйОПВ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам СН.
//
Процедура ДобавитьСтрокуИсчисленныйСН(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)

	Если ВыборкаПоСтрокамДокумента.Налог = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;

	Движение = Движения.СНИсчисленный.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница				= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода     = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода     = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
  	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
	
	// Реквизиты 
	Движение.НеОтражатьВРеглУчете		= Истина;
	
	
	Если ВыборкаПоСтрокамДокумента.ОблагаемаяБаза <> 0 Тогда
		
		Движение = Движения.СНСведенияОДоходах.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период			 		= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		
		Движение.ПериодРегистрации 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения      = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.ОблагаемаяБаза				= ВыборкаПоСтрокамДокумента.ОблагаемаяБаза;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуИсчисленныйСН()

// По строке выборок из результатов запроса по документу формируем движения по регистру СведенияОбИсчисленииВычетовИПН.
//
Процедура ДобавитьСтрокуВычетыИПН(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если  ВыборкаПоСтрокамДокумента.РазрешенныйВычет = 0
		И ВыборкаПоСтрокамДокумента.ПримененныйВычет = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;
	
	Движение = Движения.СведенияОбИсчисленииВычетовИПН.Добавить();
	
	// Свойства
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Иначе
		Движение.Период 				= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	
	// Измерения
	Движение.ФизическоеЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик		= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Движение.ПериодРегистрации			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидВычета					= ВыборкаПоСтрокамДокумента.ВидВычета;
	Движение.ВидДохода					= ВыборкаПоСтрокамДокумента.ВидДохода;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.ПримененныйВычет			= ВыборкаПоСтрокамДокумента.ПримененныйВычет;
	Движение.РазрешенныйВычет			= ВыборкаПоСтрокамДокумента.РазрешенныйВычет;
	
КонецПроцедуры // ДобавитьСтрокуВычетыИПН()

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// заголовок документа при проведении
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	       
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим учетную политику
			УпрощенныйУчетИПНиОПВ = ВыборкаПоШапкеДокумента.УпрощенныйУчетИПНиОПВ;
			
			////////////////////////////////////////////////////////////////////////
			// исчисленный ВОСМС
			
			Если ВыборкаПоШапкеДокумента.УчитыватьВОСМС Тогда
				// получим реквизиты табличной части
				ВыборкаПоИсчисленныйВОСМС = СформироватьЗапросПоИсчисленныеВОСМС().Выбрать();

				Пока ВыборкаПоИсчисленныйВОСМС.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиИсчисленныеВОСМС(ВыборкаПоИсчисленныйВОСМС, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуИсчисленныеВОСМС(ВыборкаПоШапкеДокумента, ВыборкаПоИсчисленныйВОСМС, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
						
			////////////////////////////////////////////////////////////////////////
			// исчисленный ОПВ
			
			Если ВыборкаПоШапкеДокумента.УчитыватьОПВ Тогда
				// получим реквизиты табличной части
				ВыборкаПоИсчисленныйОПВ = СформироватьЗапросПоИсчисленныйОПВ().Выбрать();

				Пока ВыборкаПоИсчисленныйОПВ.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиИсчисленныйОПВ(ВыборкаПоИсчисленныйОПВ, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуИсчисленныйОПВ(ВыборкаПоШапкеДокумента, ВыборкаПоИсчисленныйОПВ, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			////////////////////////////////////////////////////////////////////////
			// исчисленный ИПН
			
			Если ВыборкаПоШапкеДокумента.УчитыватьИПН Тогда
				// получим реквизиты табличной части
				ВыборкаПоИсчисленныйИПН = СформироватьЗапросПоИсчисленныйИПН().Выбрать();

				Пока ВыборкаПоИсчисленныйИПН.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиИсчисленныйИПН(ВыборкаПоИсчисленныйИПН, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуИсчисленныйИПН(ВыборкаПоШапкеДокумента, ВыборкаПоИсчисленныйИПН, ИсчислениеНалоговСтруктурныхЕдиниц, УпрощенныйУчетИПНиОПВ);
					КонецЕсли;
				КонецЦикла;
				
				ВыборкаПоВычетыИПН = СформироватьЗапросПоВычетыИПН().Выбрать();
				
				Пока ВыборкаПоВычетыИПН.Следующий() Цикл 

					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуВычетыИПН(ВыборкаПоШапкеДокумента, ВыборкаПоВычетыИПН, ИсчислениеНалоговСтруктурныхЕдиниц);
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////
			// исчисленный СН
			
			Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяПлательщикомСН И ВыборкаПоШапкеДокумента.УчитыватьСН
					И ВыборкаПоШапкеДокумента.ОблагаетсяСН <> Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
				// получим реквизиты табличной части
				ВыборкаПоИсчисленныйСН = СформироватьЗапросПоИсчисленныйСН().Выбрать();

				Пока ВыборкаПоИсчисленныйСН.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиИсчисленныйСН(ВыборкаПоИсчисленныйСН, Отказ);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуИсчисленныйСН(ВыборкаПоШапкеДокумента, ВыборкаПоИсчисленныйСН, ИсчислениеНалоговСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//++Аксиома 19.02.2025
			Если ВыборкаПоШапкеДокумента.УчитыватьСО
					И ВыборкаПоШапкеДокумента.ОблагаетсяСО <> Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом Тогда
				// получим реквизиты табличной части
				ВыборкаПоИсчисленныйСО = СформироватьЗапросПоИсчисленныйСО().Выбрать();

				Пока ВыборкаПоИсчисленныйСО.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиИсчисленныйСО(ВыборкаПоИсчисленныйСО, Отказ);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуИсчисленныйСО(ВыборкаПоШапкеДокумента, ВыборкаПоИсчисленныйСО, ИсчислениеНалоговСтруктурныхЕдиниц);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//--Аксиома 19.02.2025
            
			Если НЕ Отказ Тогда

				/////////////////////////////////////////////////////////////////////
				// прочие регистры накопления
				ДобавитьСтрокуВДвиженияПоРегистрамНакопленияПоШапке(ВыборкаПоШапкеДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);

				/////////////////////////////////////////////////////////////////////
				// БУ И НУ
				
				// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
				// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
				
				// Сформируем структуру реквизитов шапки документа
				СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

				СтруктураШапкиДокумента.Вставить("ТипОперации",              						ДокументОснование.ТипОперации);

				СтруктураШапкиДокумента.Вставить("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
				СтруктураШапкиДокумента.Вставить("Дата",   ВыборкаПоШапкеДокумента.Дата);			
				
				ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
				ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
				СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
				СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
				СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
				СтруктураШапкиДокумента.Вставить("УчитыватьКПН",                                    ВыборкаПоШапкеДокумента.УчитыватьКПН);
				
							     				
				ДобавитьСтрокуПоРегистрамБУиНУ(ВыборкаПоШапкеДокумента, Отказ, , ИсчислениеНалоговСтруктурныхЕдиниц, СтруктураШапкиДокумента);
				
				Если НЕ Отказ Тогда			
					ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеНМА")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
		Если Основание.Пустая() Тогда
			Основание = Неопределено;
			Возврат;
		КонецЕсли;
	
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия Тогда
				Сообщить("Для документов с видом операции, отличным от ""Покупка"" ввод на основании не поддерживается!");
				Основание = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Если Основание.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			Сообщить("У документа " + Основание.Ссылка + " установлена валюта, отличная от валюты регл. учета, расчет налогов не поддерживается!");
			Основание = Неопределено;
			Возврат;
		КонецЕсли;
		
		Если НЕ ВозможноИспользованиеКонтрагента(Основание.Контрагент, Истина) Тогда 
			Возврат;
		КонецЕсли;
		
		// заполним одинаково называющиеся реквизиты шапки
		ОснованиеОбъект = Основание.Ссылка.ПолучитьОбъект(); // получим как объект, чтобы можно было строки неогр. длины (напр, Комментарий)
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипЗнч(Основание));
		Для Каждого Реквизит Из Метаданные().Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			Если МетаданныеОснования.Реквизиты.Найти(ИмяРеквизита) <> Неопределено И НЕ ИмяРеквизита = "Автор" Тогда
				ЭтотОбъект[ИмяРеквизита] = ОснованиеОбъект[ИмяРеквизита];
			КонецЕсли;
		КонецЦикла;
		
		// заполним прочие реквизиты
		Если ОбщегоНазначения.ЕстьПредопределенныйЭлемент("ПрочиеДоходыОблагаемыеУИсточника", Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций) Тогда
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПрочиеДоходыОблагаемыеУИсточника;
		Иначе
			ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		ДокументОснование = ОснованиеОбъект.Ссылка;
		ПериодРегистрации = НачалоМесяца(ОснованиеОбъект.Дата);
		
		// очистим договор если он валютный
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
			Если НЕ ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда 
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Сообщить("Договор контрагента должен быть в валюте регламентированного учета");
			КонецЕсли;
		КонецЕсли;
	
		// подсчитаем сумму по документу
		Если ТипЗнч(ОснованиеОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			СуммаДокумента = ОснованиеОбъект.Товары.Итог("Сумма") + ОснованиеОбъект.Услуги.Итог("Сумма") + ОснованиеОбъект.ОС.Итог("Сумма");
			Если ОснованиеОбъект.УчитыватьНДС И ОснованиеОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента - ОснованиеОбъект.Товары.Итог("СуммаНДС") - ОснованиеОбъект.Услуги.Итог("СуммаНДС") - ОснованиеОбъект.ОС.Итог("СуммаНДС");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОснованиеОбъект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
			СуммаДокумента = ОснованиеОбъект.Сумма + ОснованиеОбъект.Товары.Итог("Сумма") + ОснованиеОбъект.ОС.Итог("Сумма");
			Если ОснованиеОбъект.УчитыватьНДС И ОснованиеОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента - ОснованиеОбъект.СуммаНДС - ОснованиеОбъект.Товары.Итог("СуммаНДС") - ОснованиеОбъект.ОС.Итог("СуммаНДС");
			КонецЕсли;
		Иначе
			СуммаДокумента = ОснованиеОбъект.НМА.Итог("Сумма");
			Если ОснованиеОбъект.УчитыватьНДС И ОснованиеОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента - ОснованиеОбъект.НМА.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьИСоздатьФизЛицоПоКонтрагенту();
		
		ИсчисленныйИПН.Очистить();
		
		НоваяСтрока = ИсчисленныйИПН.Добавить();
		НоваяСтрока.ФизЛицо = Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = ПериодРегистрации;
		
		ИсчисленныеВОСМС.Очистить();
		
		НоваяСтрока = ИсчисленныеВОСМС.Добавить();
		НоваяСтрока.ФизЛицо = Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = ПериодРегистрации;
		
		ИсчисленныйОПВ.Очистить();
		
		НоваяСтрока = ИсчисленныйОПВ.Добавить();
		НоваяСтрока.ФизЛицо = Контрагент;
		НоваяСтрока.МесяцНалоговогоПериода = ПериодРегистрации;
		
	КонецЕсли;

КонецПроцедуры

// По шапке документа формируем движения по регистрам БУ и НУ
//
Процедура ДобавитьСтрокуПоРегистрамБУиНУ(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "", ИсчислениеНалоговСтруктурныхЕдиниц,СтруктураШапкиДокумента)
	
	ДатаДок = ВыборкаПоШапкеДокумента.Дата;
	
	// удержание ВОСМС 
	Если СтруктураШапкиДокумента.УчитыватьВОСМС И ВыборкаПоШапкеДокумента.СуммаВОСМС <> 0 Тогда
		
		СодержаниеПроводки = "Взносы на обязательное социальное медицинское стра";
	
		// работа с авансами
		ТаблицаВОСМС = Новый ТаблицаЗначений;
		ТаблицаВОСМС.Колонки.Добавить("Контрагент");
		ТаблицаВОСМС.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаВОСМС.Колонки.Добавить("ВедениеВзаиморасчетов");
		ТаблицаВОСМС.Колонки.Добавить("ВалютаВзаиморасчетов");
		ТаблицаВОСМС.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаВОСМС.Колонки.Добавить("КратностьВзаиморасчетов");
		ТаблицаВОСМС.Колонки.Добавить("Сделка");
		ТаблицаВОСМС.Колонки.Добавить("СчетОплатыБУ");
		ТаблицаВОСМС.Колонки.Добавить("СчетАванса");
		ТаблицаВОСМС.Колонки.Добавить("ТенговаяСумма");
		ТаблицаВОСМС.Колонки.Добавить("ВалютнаяСумма");
		ТаблицаВОСМС.Колонки.Добавить("СуммаВзаиморасчетов");
		ТаблицаВОСМС.Колонки.Добавить("СтатьяДДС");
		ТаблицаВОСМС.Колонки.Добавить("КоррСчет");
		ТаблицаВОСМС.Колонки.Добавить("КоррСубконто1");
		ТаблицаВОСМС.Колонки.Добавить("КоррСубконто2");
		ТаблицаВОСМС.Колонки.Добавить("КоррСубконто3");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ТаблицаВОСМС.Колонки.Добавить("СчетОплатыНУ");			
			ТаблицаВОСМС.Колонки.Добавить("КоррСчетНУ");
			ТаблицаВОСМС.Колонки.Добавить("КоррСубконтоНУ1");
			ТаблицаВОСМС.Колонки.Добавить("КоррСубконтоНУ2");
			ТаблицаВОСМС.Колонки.Добавить("КоррСубконтоНУ3");
		КонецЕсли;
		                	
		НоваяСтрока = ТаблицаВОСМС.Добавить();
		НоваяСтрока.Контрагент 					= ВыборкаПоШапкеДокумента.Контрагент;
		НоваяСтрока.ДоговорКонтрагента 			= ВыборкаПоШапкеДокумента.ДоговорКонтрагента;
		НоваяСтрока.ВедениеВзаиморасчетов 		= ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов;
		НоваяСтрока.ВалютаВзаиморасчетов 		= мВалютаРегламентированногоУчета;
		НоваяСтрока.КурсВзаиморасчетов		 	= 1;
		НоваяСтрока.КратностьВзаиморасчетов	 	= 1;
		НоваяСтрока.Сделка					 	= ВыборкаПоШапкеДокумента.Сделка;
		НоваяСтрока.СчетОплатыБУ			 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СчетАванса				 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам;
		НоваяСтрока.ТенговаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаВОСМС;
		НоваяСтрока.ВалютнаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаВОСМС;
		НоваяСтрока.СуммаВзаиморасчетов		 	= ВыборкаПоШапкеДокумента.СуммаВОСМС;
		НоваяСтрока.КоррСчет				 	= ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
		НоваяСтрока.КоррСубконто1			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		НоваяСтрока.КоррСубконто2			 	= ВыборкаПоШапкеДокумента.ФизЛицо;
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			КоррСчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);
			НоваяСтрока.СчетОплатыНУ    		 	= ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			НоваяСтрока.КоррСчетНУ				 	= КоррСчетНУ;
			НоваяСтрока.КоррСубконтоНУ1			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			НоваяСтрока.КоррСубконтоНУ2			 	= ВыборкаПоШапкеДокумента.ФизЛицо;
		КонецЕсли;
		
		// скорректируем/добавим некоторые реквизиты
		СтруктураШапкиДокумента.Ссылка = ВыборкаПоШапкеДокумента.ДокументОснование; // чтобы не расширять типы реквизита Сделка во всех документах 
		// используем в качестве Ссылки документ-основание
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 1);
		СтруктураШапкиДокумента.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
		
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда			
			СтруктураШапкиДокумента.Вставить("КоррСчетНУ"			,КоррСчетНУ);
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат"		,Ложь);
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоВОСМС", ТаблицаВОСМС);
		
		УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаВОСМС);	
		
		
	КонецЕсли;
	
	// удержание ОПВ 
	Если СтруктураШапкиДокумента.УчитыватьОПВ И ВыборкаПоШапкеДокумента.СуммаОПВ <> 0 Тогда
		
		СодержаниеПроводки = "Обязательные пенсионные взносы";
	
		// работа с авансами
		ТаблицаОПВ = Новый ТаблицаЗначений;
		ТаблицаОПВ.Колонки.Добавить("Контрагент");
		ТаблицаОПВ.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОПВ.Колонки.Добавить("ВедениеВзаиморасчетов");
		ТаблицаОПВ.Колонки.Добавить("ВалютаВзаиморасчетов");
		ТаблицаОПВ.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОПВ.Колонки.Добавить("КратностьВзаиморасчетов");
		ТаблицаОПВ.Колонки.Добавить("Сделка");
		ТаблицаОПВ.Колонки.Добавить("СчетОплатыБУ");
		ТаблицаОПВ.Колонки.Добавить("СчетАванса");
		ТаблицаОПВ.Колонки.Добавить("ТенговаяСумма");
		ТаблицаОПВ.Колонки.Добавить("ВалютнаяСумма");
		ТаблицаОПВ.Колонки.Добавить("СуммаВзаиморасчетов");
		ТаблицаОПВ.Колонки.Добавить("СтатьяДДС");
		ТаблицаОПВ.Колонки.Добавить("КоррСчет");
		ТаблицаОПВ.Колонки.Добавить("КоррСубконто1");
		ТаблицаОПВ.Колонки.Добавить("КоррСубконто2");
		ТаблицаОПВ.Колонки.Добавить("КоррСубконто3");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ТаблицаОПВ.Колонки.Добавить("СчетОплатыНУ");			
			ТаблицаОПВ.Колонки.Добавить("КоррСчетНУ");
			ТаблицаОПВ.Колонки.Добавить("КоррСубконтоНУ1");
			ТаблицаОПВ.Колонки.Добавить("КоррСубконтоНУ2");
			ТаблицаОПВ.Колонки.Добавить("КоррСубконтоНУ3");
		КонецЕсли;
		                	
		НоваяСтрока = ТаблицаОПВ.Добавить();
		НоваяСтрока.Контрагент 					= ВыборкаПоШапкеДокумента.Контрагент;
		НоваяСтрока.ДоговорКонтрагента 			= ВыборкаПоШапкеДокумента.ДоговорКонтрагента;
		НоваяСтрока.ВедениеВзаиморасчетов 		= ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов;
		НоваяСтрока.ВалютаВзаиморасчетов 		= мВалютаРегламентированногоУчета;
		НоваяСтрока.КурсВзаиморасчетов		 	= 1;
		НоваяСтрока.КратностьВзаиморасчетов	 	= 1;
		НоваяСтрока.Сделка					 	= ВыборкаПоШапкеДокумента.Сделка;
		НоваяСтрока.СчетОплатыБУ			 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СчетАванса				 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам;
		НоваяСтрока.ТенговаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаОПВ;
		НоваяСтрока.ВалютнаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаОПВ;
		НоваяСтрока.СуммаВзаиморасчетов		 	= ВыборкаПоШапкеДокумента.СуммаОПВ;
		НоваяСтрока.КоррСчет				 	= ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		НоваяСтрока.КоррСубконто1			 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		НоваяСтрока.КоррСубконто2			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		НоваяСтрока.КоррСубконто3			 	= ВыборкаПоШапкеДокумента.ФизЛицо;
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			КоррСчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям, Дата, ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);
			НоваяСтрока.СчетОплатыНУ    		 	= ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			НоваяСтрока.КоррСчетНУ				 	= КоррСчетНУ;
			НоваяСтрока.КоррСубконтоНУ1			 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			НоваяСтрока.КоррСубконтоНУ2			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			НоваяСтрока.КоррСубконтоНУ3			 	= ВыборкаПоШапкеДокумента.ФизЛицо;
		КонецЕсли;
		
		// скорректируем/добавим некоторые реквизиты
		СтруктураШапкиДокумента.Ссылка = ВыборкаПоШапкеДокумента.ДокументОснование; // чтобы не расширять типы реквизита Сделка во всех документах 
		// используем в качестве Ссылки документ-основание
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 1);
		СтруктураШапкиДокумента.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
		
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда			
			СтруктураШапкиДокумента.Вставить("КоррСчетНУ"			,КоррСчетНУ);
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат"		,Ложь);
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоОПВ", ТаблицаОПВ);
		
		УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаОПВ);	
		
	КонецЕсли;

	// удержание ИПН 
	Если СтруктураШапкиДокумента.УчитыватьИПН И ВыборкаПоШапкеДокумента.СуммаИПН <> 0 Тогда
		
		Если ДатаДок >= Дата(2015, 07, 01) Тогда
			ВидИПН = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог;
		Иначе
			Если ВыборкаПоШапкеДокумента.Страна <> Справочники.КлассификаторСтранМира.Казахстан Тогда
				ВидИПН = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане;
			Иначе
				ВидИПН = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог;
			КонецЕсли;
		КонецЕсли;
		СодержаниеПроводки = ВидИПН.Наименование;
	
		// работа с авансами
		ТаблицаИПН = Новый ТаблицаЗначений;
		ТаблицаИПН.Колонки.Добавить("Контрагент");
		ТаблицаИПН.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаИПН.Колонки.Добавить("ВедениеВзаиморасчетов");
		ТаблицаИПН.Колонки.Добавить("ВалютаВзаиморасчетов");
		ТаблицаИПН.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаИПН.Колонки.Добавить("КратностьВзаиморасчетов");
		ТаблицаИПН.Колонки.Добавить("Сделка");
		ТаблицаИПН.Колонки.Добавить("СчетОплатыБУ");
		ТаблицаИПН.Колонки.Добавить("СчетАванса");
		ТаблицаИПН.Колонки.Добавить("ТенговаяСумма");
		ТаблицаИПН.Колонки.Добавить("ВалютнаяСумма");
		ТаблицаИПН.Колонки.Добавить("СуммаВзаиморасчетов");
		ТаблицаИПН.Колонки.Добавить("СтатьяДДС");
		ТаблицаИПН.Колонки.Добавить("КоррСчет");
		ТаблицаИПН.Колонки.Добавить("КоррСубконто1");
		ТаблицаИПН.Колонки.Добавить("КоррСубконто2");
		ТаблицаИПН.Колонки.Добавить("КоррСубконто3");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ТаблицаИПН.Колонки.Добавить("СчетОплатыНУ");			
			ТаблицаИПН.Колонки.Добавить("КоррСчетНУ");
			ТаблицаИПН.Колонки.Добавить("КоррСубконтоНУ1");
			ТаблицаИПН.Колонки.Добавить("КоррСубконтоНУ2");
			ТаблицаИПН.Колонки.Добавить("КоррСубконтоНУ3");
		КонецЕсли;
		                	
		НоваяСтрока = ТаблицаИПН.Добавить();
		НоваяСтрока.Контрагент 					= ВыборкаПоШапкеДокумента.Контрагент;
		НоваяСтрока.ДоговорКонтрагента 			= ВыборкаПоШапкеДокумента.ДоговорКонтрагента;
		НоваяСтрока.ВедениеВзаиморасчетов 		= ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетов;
		НоваяСтрока.ВалютаВзаиморасчетов 		= мВалютаРегламентированногоУчета;
		НоваяСтрока.КурсВзаиморасчетов		 	= 1;
		НоваяСтрока.КратностьВзаиморасчетов	 	= 1;
		НоваяСтрока.Сделка					 	= ВыборкаПоШапкеДокумента.Сделка;
		НоваяСтрока.СчетОплатыБУ			 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СчетАванса				 	= ВыборкаПоШапкеДокумента.СчетУчетаРасчетовПоАвансам;
		НоваяСтрока.ТенговаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаИПН;
		НоваяСтрока.ВалютнаяСумма			 	= ВыборкаПоШапкеДокумента.СуммаИПН;
		НоваяСтрока.СуммаВзаиморасчетов		 	= ВыборкаПоШапкеДокумента.СуммаИПН;
		НоваяСтрока.КоррСчет				 	= ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог;
		НоваяСтрока.КоррСубконто1			 	= ВидИПН;
		НоваяСтрока.КоррСубконто2			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			КоррСчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог, Дата, ПланыСчетов.Налоговый.ПрочиеНалоги);
			НоваяСтрока.СчетОплатыНУ    		 	= ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			НоваяСтрока.КоррСчетНУ				 	= КоррСчетНУ;
			НоваяСтрока.КоррСубконтоНУ1			 	= ВидИПН;
			НоваяСтрока.КоррСубконтоНУ2			 	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
		КонецЕсли;
		
		// в случае поддержки работы со структурными подразделениями проверим наличие субконто
		// Контрагенты на счете 3120 Индивидуальный подоходный налог
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Если ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) <> Неопределено Тогда
				НоваяСтрока.КоррСубконто3	 	= ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																														ВыборкаПоШапкеДокумента.Организация,
																														ИсчислениеНалоговСтруктурныхЕдиниц,
																														Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
			КонецЕсли;
		КонецЕсли;
		
		// скорректируем/добавим некоторые реквизиты
		СтруктураШапкиДокумента.Ссылка = ВыборкаПоШапкеДокумента.ДокументОснование; // чтобы не расширять типы реквизита Сделка во всех документах 
		// используем в качестве Ссылки документ-основание
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 1);
		СтруктураШапкиДокумента.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
		
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог);
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда			
			СтруктураШапкиДокумента.Вставить("КоррСчетНУ"			,КоррСчетНУ);
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("ЭтоВозврат"		,Ложь);
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоИПН", ТаблицаИПН);
		
		УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаИПН);	
		
		
	КонецЕсли;
	
	// социальный налог 
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяПлательщикомСН И ВыборкаПоШапкеДокумента.УчитыватьСН И ВыборкаПоШапкеДокумента.СуммаСН <> 0 Тогда
		
	    // бухгалтерский учет
	    Проводка = Движения.Типовой.Добавить();
	    
	    Проводка.Период 		= ДатаДок;
	    Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
	    Проводка.Содержание		= ВыборкаПоШапкеДокумента.ФИОФизЛица;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

	    Проводка.СчетДт 		= ВыборкаПоШапкеДокумента.СчетЗатрат;
	    Для Н = 1 По 3 Цикл
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Н, ВыборкаПоШапкеДокумента["СубконтоДт" + Н]);
	    КонецЦикла;
	    
	    Проводка.СчетКт			= ПланыСчетов.Типовой.СоциальныйНалог;
	    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.СоциальныйНалог);
	    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	    
	    // проверим наличие субконто Контрагенты в случае поддержки работы со структруными подразделениями
	    // для записи в него налогового комитета структурной единицы
	    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Если ПланыСчетов.Типовой.СоциальныйНалог.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) <> Неопределено тогда
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
	    																																													ВыборкаПоШапкеДокумента.Организация,
	    																																													ИсчислениеНалоговСтруктурныхЕдиниц,
	    																																													Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
	    	КонецЕсли;
	    КонецЕсли;
	    
	    Проводка.Сумма			= ВыборкаПоШапкеДокумента.СуммаСН;
		
	    // Проводка по налоговому учету
	    Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

		    Проводка = Движения.Налоговый.Добавить();
		    
		    Проводка.Период 		= ДатаДок;
		    Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
		    Проводка.Содержание		= ВыборкаПоШапкеДокумента.ФИОФизЛица;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		    Проводка.СчетДт 		= ВыборкаПоШапкеДокумента.СчетЗатратНУ;
		    Для Н = 1 По 3 Цикл
		    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Н, ВыборкаПоШапкеДокумента["СубконтоДтНУ" + Н]);
		    КонецЦикла;
		    
		    Проводка.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.СоциальныйНалог, КонецМесяца(ПериодРегистрации), ПланыСчетов.Налоговый.ПрочиеНалоги);
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.СоциальныйНалог);
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		    
		    Проводка.Сумма			= ВыборкаПоШапкеДокумента.СуммаСН;

			Проводка.ВидУчетаДт = ВидУчетаНУ;
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
				Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
			КонецЕсли;
	    	
	    КонецЕсли;
	    
	КонецЕсли; 
	
	//++Аксиома 19.02.2025
	Если ВыборкаПоШапкеДокумента.УчитыватьСО И ВыборкаПоШапкеДокумента.СуммаСО <> 0 Тогда
		
		Суффикс = "_СО";
	    // бухгалтерский учет
	    Проводка = Движения.Типовой.Добавить();
	    
	    Проводка.Период 		= ДатаДок;
	    Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
	    Проводка.Содержание		= ВыборкаПоШапкеДокумента.ФИОФизЛица;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

	    Проводка.СчетДт 		= ВыборкаПоШапкеДокумента.СчетЗатрат_СО;
	    Для Н = 1 По 3 Цикл
	    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Н, ВыборкаПоШапкеДокумента["СубконтоДт" + Н + Суффикс]);
	    КонецЦикла;
	    
	    Проводка.СчетКт			= ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию;
	    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	    
	    // проверим наличие субконто Контрагенты в случае поддержки работы со структруными подразделениями
	    // для записи в него налогового комитета структурной единицы
	    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	    	Если ПланыСчетов.Типовой.ИныеНалогиИОбязательныеПлатежиВБюджетСоцОтчисленияСоб.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты) <> Неопределено тогда
	    		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
	    																																													ВыборкаПоШапкеДокумента.Организация,
	    																																													ИсчислениеНалоговСтруктурныхЕдиниц,
	    																																													Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
	    	КонецЕсли;
	    КонецЕсли;
	    
	    Проводка.Сумма			= ВыборкаПоШапкеДокумента.СуммаСО;
		
	    // Проводка по налоговому учету
	    Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда

		    Проводка = Движения.Налоговый.Добавить();
		    
		    Проводка.Период 		= ДатаДок;
		    Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
		    Проводка.Содержание		= ВыборкаПоШапкеДокумента.ФИОФизЛица;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		    Проводка.СчетДт 		= ВыборкаПоШапкеДокумента.СчетЗатратНУ_СО;
		    Для Н = 1 По 3 Цикл
		    	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Н, ВыборкаПоШапкеДокумента["СубконтоДтНУ" + Н + Суффикс]);
		    КонецЦикла;
		    
		    Проводка.СчетКт			= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию, КонецМесяца(ПериодРегистрации), ПланыСчетов.Налоговый.ПрочиеНалоги);
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
		    ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		    
		    Проводка.Сумма			= ВыборкаПоШапкеДокумента.СуммаСО;

			Проводка.ВидУчетаДт = ВидУчетаНУ;
			Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
				Проводка.ВидУчетаКт = Проводка.ВидУчетаДт;
			КонецЕсли;
	    	
	    КонецЕсли;
	    
	КонецЕсли; 
	//--Аксиома 19.02.2025
 

КонецПроцедуры // ДобавитьСтрокуПоРегистрамБУиНУ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения" документа.
//
Процедура ОбработкаЗаполнения(Основание) Экспорт
	
	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

				// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

//++Аксиома 19.02.2025
Функция СформироватьЗапросПоИсчисленныйСО()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиИсчисленныйСО.НомерСтроки,
	|	СтрокиИсчисленныйСО.ФизЛицо,
	|	СтрокиИсчисленныйСО.МесяцНалоговогоПериода,
	|	СтрокиИсчисленныйСО.Отчисление,
	|	СтрокиИсчисленныйСО.ОблагаемаяБаза
	|ИЗ
	|	Документ.РасчетНалоговПриПоступленииАктивовУслуг.ИсчисленныйСО КАК СтрокиИсчисленныйСО
	|ГДЕ
	|	СтрокиИсчисленныйСО.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиИсчисленныйСО.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоИсчисленныйСО()

Процедура ПроверитьЗаполнениеСтрокиИсчисленныйСО(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""СН"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСтрокуИсчисленныйСО(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц);

	Если ВыборкаПоСтрокамДокумента.Отчисление = 0 
	   И ВыборкаПоСтрокамДокумента.ОблагаемаяБаза = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница,
																		ВыборкаПоШапкеДокумента.Организация,
																		ИсчислениеНалоговСтруктурныхЕдиниц,
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	КонецЕсли;

	Движение = Движения.СОРасчетыСФондами.Добавить();

	// Свойства
	Движение.Период						= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.Контрагент;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда		
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе                                                   		
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница	= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
	Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
		Движение.МесяцНалоговогоПериода = НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Иначе
		Движение.МесяцНалоговогоПериода = ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	КонецЕсли;
	Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;

	// Ресурсы
	Движение.Отчисление = ВыборкаПоСтрокамДокумента.Отчисление;
	
	// Реквизиты
	Движение.ВидПлатежа      			= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
	Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;	
	Движение.НеОтражатьВРеглУчете		= Истина;
		
	Если ВыборкаПоСтрокамДокумента.ОблагаемаяБаза <> 0 Тогда
		
		Движение = Движения.СОСведенияОДоходах.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период 				= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик		= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик		= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница			= ВыборкаПоШапкеДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации 			= НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
        Движение.СпособНалогообложения      = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
	 	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		КонецЕсли;        

		// Ресурсы
		Движение.ОблагаемаяБаза				= ВыборкаПоСтрокамДокумента.ОблагаемаяБаза;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуИсчисленныйОПВ()
//--Аксиома 19.02.2025

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
мОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, Дата);
