////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьОборотнуюНоменклатуру Экспорт;
Перем мРазделятьПоСтавкамНДС Экспорт;
Перем мУчетВПродажныхЦенах Экспорт;
// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Организация,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ПеремещениеТоваров.Организация.Наименование
	|		ИНАЧЕ ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель
	|	КОНЕЦ КАК ПредставлениеСЕОтправитель,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваров.СтруктурноеПодразделениеПолучатель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ПеремещениеТоваров.Организация.Наименование
	|		ИНАЧЕ ПеремещениеТоваров.СтруктурноеПодразделениеПолучатель
	|	КОНЕЦ КАК ПредставлениеСЕПолучатель,
	|	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	|	ПеремещениеТоваров.СкладОтправитель.Представление КАК ПредставлениеОтправителя,
	|	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	|	ПеремещениеТоваров.СкладПолучатель.Представление КАК ПредставлениеПолучателя,
	|	ОтветственныеЛицаСкладОтправитель.ФизическоеЛицо КАК МОЛОтправителя,
	|	ОтветственныеЛицаСкладПолучатель.ФизическоеЛицо КАК МОЛПолучателя,
	|	ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСкладОтправитель
	|		ПО ПеремещениеТоваров.СкладОтправитель = ОтветственныеЛицаСкладОтправитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСкладПолучатель
	|		ПО ПеремещениеТоваров.СкладПолучатель = ОтветственныеЛицаСкладПолучатель.СтруктурнаяЕдиница
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ПеремещениеТоваров.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделениеОтправитель);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Накладная на перемещение", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	СуммаИтого 	  = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		СуммаИтого = СуммаИтого + ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		
        ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
		
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;    
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;

	// Вывести подвал
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвала.Параметры.СуммаИтого = СуммаИтого;
	ТабДокумент.Вывести(ОбластьПодвала);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ПредставлениеМОЛОтправителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.МОЛОтправителя);
	ОбластьМакета.Параметры.ПредставлениеМОЛПолучателя  = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.МОЛПолучателя);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Функция формирует табличный документ с печатной формой "З-5".
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗ5()

		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеОтправитель);

	// сформируем запрос по данным шапки 
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата"	   , ЭтотОбъект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель КАК СтруктурноеПодразделение,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Дата,";
	Если СтруктурноеПодразделениеОтправитель <> Справочники.ПодразделенияОрганизаций.ПустаяСсылка() ИЛИ СтруктурноеПодразделениеПолучатель <> Справочники.ПодразделенияОрганизаций.ПустаяСсылка() ИЛИ  мОтображатьСтруктурныеПодразделения Тогда 
		Запрос.Текст = Запрос.Текст + " (ВЫБОР КОГДА ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
										| ТОГДА ПеремещениеТоваров.СтруктурноеПодразделениеОтправитель.Наименование + ""/"" + ПеремещениеТоваров.СкладОтправитель.Наименование
										| ИНАЧЕ ПеремещениеТоваров.Организация.Наименование + ""/"" + ПеремещениеТоваров.СкладОтправитель.Наименование
										| КОНЕЦ) КАК Отправитель,";
	Иначе
		Запрос.Текст = Запрос.Текст + " ПеремещениеТоваров.СкладОтправитель КАК Отправитель, ";
	КонецЕсли;
	
	Если СтруктурноеПодразделениеПолучатель <> Справочники.ПодразделенияОрганизаций.ПустаяСсылка() ИЛИ СтруктурноеПодразделениеОтправитель <> Справочники.ПодразделенияОрганизаций.ПустаяСсылка() ИЛИ мОтображатьСтруктурныеПодразделения Тогда
		Запрос.Текст = Запрос.Текст + " (ВЫБОР КОГДА ПеремещениеТоваров.СтруктурноеПодразделениеПолучатель <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
										| ТОГДА ПеремещениеТоваров.СтруктурноеПодразделениеПолучатель.Наименование + ""/"" + ПеремещениеТоваров.СкладПолучатель.Наименование
										| ИНАЧЕ ПеремещениеТоваров.Организация.Наименование + ""/"" + ПеремещениеТоваров.СкладПолучатель.Наименование
										| КОНЕЦ) КАК Получатель,"; 
	Иначе
		Запрос.Текст = Запрос.Текст + " ПеремещениеТоваров.СкладПолучатель КАК Получатель, ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	ОтветственныеЛицаСрезПоследнихОтправитель.ФизическоеЛицо КАК МОЛОтправитель,
	|	ОтветственныеЛицаСрезПоследнихПолучатель.ФизическоеЛицо КАК МОЛПолучатель
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследнихОтправитель
	|		ПО ПеремещениеТоваров.СкладОтправитель = ОтветственныеЛицаСрезПоследнихОтправитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, ) КАК ОтветственныеЛицаСрезПоследнихПолучатель
	|		ПО ПеремещениеТоваров.СкладПолучатель = ОтветственныеЛицаСрезПоследнихПолучатель.СтруктурнаяЕдиница
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекДокумент";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
		
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Номенклатура,
	|	ВЫРАЗИТЬ(ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ПеремещениеТоваров.Номенклатура.Код КАК ТоварКод,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ДвиженияТиповой.Сумма, 0) / ДвиженияТиповой.КоличествоКт * ПеремещениеТоваров.Количество * ПеремещениеТоваров.Коэффициент КАК Сумма,
	|	ПеремещениеТоваров.НомерСтроки КАК НомерПП
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ПеремещениеТоваров.Количество) КАК Количество,
	|		МИНИМУМ(ПеремещениеТоваров.НомерСтроки) КАК НомерСтроки,
	|		ПеремещениеТоваров.Коэффициент КАК Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ КАК СчетУчета
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПеремещениеТоваров.Номенклатура,
	|		ПеремещениеТоваров.Ссылка,
	|		ПеремещениеТоваров.ЕдиницаИзмерения,
	|		ПеремещениеТоваров.Коэффициент,
	|		ПеремещениеТоваров.СчетУчетаБУ) КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			СУММА(ТиповойДвиженияССубконто.КоличествоКт) КАК КоличествоКт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1) КАК ДвиженияТиповой
	|		ПО ПеремещениеТоваров.Номенклатура = ДвиженияТиповой.СубконтоКт1
	|			И ПеремещениеТоваров.СчетУчета = ДвиженияТиповой.СчетКт
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|   СУММА(Сумма), КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	|ПО
	|	Общие
	|";
	
	ВыборкаТоварыОбщие = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЕстьТовары		   = ВыборкаТоварыОбщие.Следующий();
	
	ВыборкаТовары = ВыборкаТоварыОбщие.Выбрать();
		
	ТабДокумент						= Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_З5";
	Макет      						= ПолучитьМакет("З5");
	
	// получим области макета
	Шапка 						= Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы2			= Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ЗаголовокТаблицыДляПереноса = Макет.ПолучитьОбласть("ЗаголовокТаблицыДляПереноса");
	СтрокаТаблицы2				= Макет.ПолучитьОбласть("СтрокаТаблицы2");
	ИтогоТаблицы2				= Макет.ПолучитьОбласть("ИтогоТаблицы2");
	Подвал						= Макет.ПолучитьОбласть("Подвал");
	
	// Вывод шапки
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Шапка.Параметры.ОрганизацияРНН_БИН 		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	Шапка.Параметры.Заполнить(Док);
		
	ТабДокумент.Вывести(Шапка);
	
	// вывод таблицы
	
	//заголовок
	Валюта							   = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаголовокТаблицы2.Параметры.Валюта = Валюта;
	ТабДокумент.Вывести(ЗаголовокТаблицы2);
	ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
	
	//вывцодим строки таблицы
	ВсегоКоличество = 0;
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы2) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы2);
			ТабДокумент.Вывести(ЗаголовокТаблицыДляПереноса);
			
		КонецЕсли;
		
		СуммаТовара = ?(ВыборкаТовары.Сумма = Null, 0, ВыборкаТовары.Сумма);
		
		СтрокаТаблицы2.Параметры.Заполнить(ВыборкаТовары);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаТовары.ТоварНаименование) Тогда 
			СтрокаТаблицы2.Параметры.ТоварНаименование = ВыборкаТовары.Номенклатура;
		КонецЕсли;
		
		СтрокаТаблицы2.Параметры.Количество = Формат(ВыборкаТовары.Количество, "ЧДЦ=3");
		СтрокаТаблицы2.Параметры.Сумма		= Формат(СуммаТовара, "ЧДЦ=2");
		СтрокаТаблицы2.Параметры.Цена		= Формат(?(ЗначениеЗаполнено(ВыборкаТовары.Количество), СуммаТовара/ВыборкаТовары.Количество, 0), "ЧДЦ=2");
		
		ТабДокумент.Вывести(СтрокаТаблицы2);
		
		ВсегоКоличество = ВсегоКоличество + ВыборкаТовары.Количество;
		
	КонецЦикла;	
	
	
	// вывод подвала
	Если ЕстьТовары Тогда
		Подвал.Параметры.КоличествоОтпущено		= ОбщегоНазначения.КоличествоПрописью(ВсегоКоличество);
		Подвал.Параметры.СуммаПрописью 			= ОбщегоНазначения.СформироватьСуммуПрописью(?(ЗначениеЗаполнено(ВыборкаТоварыОбщие.Сумма),ВыборкаТоварыОбщие.Сумма,0), Валюта);
        ИтогоТаблицы2.Параметры.ИтогоКоличество = ВсегоКоличество;
		ИтогоТаблицы2.Параметры.ИтогоСумма		=  ?(ЗначениеЗаполнено(ВыборкаТоварыОбщие.Сумма),ВыборкаТоварыОбщие.Сумма,0);
	Иначе
		Подвал.Параметры.КоличествоОтпущено 	= ОбщегоНазначения.КоличествоПрописью(0);;
		Подвал.Параметры.СуммаПрописью 			= "";
		ИтогоТаблицы2.Параметры.ИтогоКоличество = "";
		ИтогоТаблицы2.Параметры.ИтогоСумма		= "";
	КонецЕсли;
	
	//МОЛ
	ДанныеОтправителя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.МОЛОтправитель,Док.Дата);
	ДанныеПолучателя  = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.МОЛПолучатель,Док.Дата);
	
	Подвал.Параметры.ДолжностьОтпустил = ДанныеОтправителя.Должность;
	Подвал.Параметры.ФИООтпустил 	   = ДанныеОтправителя.Представление;
	
	Подвал.Параметры.ДолжностьПолучил = ДанныеПолучателя.Должность;
	Подвал.Параметры.ФИОПолучил 	  = ДанныеПолучателя.Представление;
	
	Подвал.Параметры.Валюта = Валюта;
	
	ТабДокумент.Вывести(ИтогоТаблицы2);
	
	Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, Подвал) Тогда
			
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
	КонецЕсли;
		
	ТабДокумент.Вывести(Подвал);	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьЗ5()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
		
	ИначеЕсли ИмяМакета = "З5" Тогда
		
		ТабДокумент = ПечатьЗ5();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Заполняет табличную часть остатками на складе
//
Процедура ЗаполнитьТабличнуюЧастьПоостаткам() Экспорт

	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Сообщить("Не заполнен склад для получения остатков!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не заполнена организация для получения остатков!");
	КонецЕсли;
	
	Если Товары.Количество()>0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена.
						|Продолжить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		    Товары.Очистить();
			НомераГТД.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение";	
	Иначе 
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
    |	ТиповойОстатки.Счет,
  	|	ТиповойОстатки.Субконто1 КАК Номенклатура,
  	|	СУММА(ТиповойОстатки.КоличествоОстаток) КАК Количество
  	|ИЗ
  	|	РегистрБухгалтерии.Типовой.Остатки(
  	|		&Дата,
  	|		,
  	|		&ВидыСубконто,
  	|		Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
  	|			И Субконто2 = &Склад) КАК ТиповойОстатки
  	|
  	|СГРУППИРОВАТЬ ПО
  	|	ТиповойОстатки.Субконто1,
	|	ТиповойОстатки.Счет");
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад",		 СкладОтправитель);
	Запрос.УстановитьПараметр("Дата",		 ?(ЭтоНовый(),Дата(1,1,1),Дата));
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделениеОтправитель);
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Количество 	 	 = Выборка.Количество;
		НоваяСтрока.Номенклатура	 = Выборка.Номенклатура;
		НоваяСтрока.СчетУчетаБУ  	 = Выборка.Счет;
		НоваяСтрока.НовыйСчетУчетаБУ = Выборка.Счет;
		НоваяСтрока.Коэффициент  	 = 1;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.Номенклатура.БазоваяЕдиницаИзмерения;
		
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(НоваяСтрока, "СчетУчетаБУ","СчетУчетаНУ" , Дата);	
		НоваяСтрока.НовыйСчетУчетаНУ = 	НоваяСтрока.СчетУчетаНУ;
		НоваяСтрока.КлючСвязи = ОбщегоНазначенияКлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Товары);	
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоостаткам()

#КонецЕсли

Процедура ДобавитьДвижениеЗерна()
	//+++ Oleg SmartT. 2021-12-28	
	Движения.ур_ДвиженияЗерна.Записывать = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ур_ПеремещениеЗернаТовары.Номенклатура
	               |ПОМЕСТИТЬ НоменклатураЗерна
	               |ИЗ
	               |	Документ.ур_ПеремещениеЗерна.Товары КАК ур_ПеремещениеЗернаТовары
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ур_ПеремещениеЗернаТовары.Номенклатура
	               |;
	               |
	               |/////////////////////+ Стрелюк 25/04/22 Добавление движений ЗерноНаСкладах в док Перемещение ТМЗ
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваров.Дата КАК Период,
	               |	ПеремещениеТоваров.Организация,
	               |	ПеремещениеТоваров.ТипОперации,
	               |	ЗНАЧЕНИЕ(Перечисление.ур_РегламентныеОперацииДвиженияЗерна.Расход) КАК РегламентныйВидОперацииРасход,
	               |	ПеремещениеТоваровТовары.Количество КАК ЗачтенныйВес,
	               |	ВложенныйЗапрос.ВидРесурса,
	               |	ПеремещениеТоваровТовары.СчетУчетаБУ КАК Счет,
	               |	СпрНоменклатура.Класс,
	               |	СпрНоменклатура.ГодУрожая,
	               |	СпрНоменклатура.ВидКультуры КАК Культура,
	               |	ЗНАЧЕНИЕ(Перечисление.ур_РегламентныеОперацииДвиженияЗерна.Приход) КАК РегламентныйВидОперацииПриход,
	               |	ПеремещениеТоваров.СкладОтправитель,
	               |	ПеремещениеТоваров.СкладПолучатель,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ЕСТЬNULL(НоменклатураЗерна.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура1
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ур_СоответствиеСчетовУчетаРесурсов.СчетУчета КАК СчетУчета,
	               |				ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса КАК ВидРесурса
	               |			ИЗ
	               |				РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК ур_СоответствиеСчетовУчетаРесурсов
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ур_СоответствиеСчетовУчетаРесурсов.СчетУчета,
	               |				ур_СоответствиеСчетовУчетаРесурсов.ВидРесурса) КАК ВложенныйЗапрос
	               |			ПО ПеремещениеТоваровТовары.СчетУчетаБУ = ВложенныйЗапрос.СчетУчета
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |			ПО ПеремещениеТоваровТовары.Номенклатура = СпрНоменклатура.Ссылка
	               |			ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураЗерна КАК НоменклатураЗерна
	               |			ПО ПеремещениеТоваровТовары.Номенклатура = НоменклатураЗерна.Номенклатура
	               |		ПО (ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка)
	               |ГДЕ
	               |	ПеремещениеТоваров.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.Номенклатура.Зерно";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		//расход
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		Движение.РегламентныйВидОперации = Выборка.РегламентныйВидОперацииРасход;
		Движение.Склад = Выборка.СкладОтправитель;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
		//приход
		Движение = Движения.ур_ДвиженияЗерна.Добавить();
		Движение.РегламентныйВидОперации = Выборка.РегламентныйВидОперацииПриход;
		Движение.Склад = Выборка.СкладПолучатель;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
		// + Стрелюк 25/04/22 Добавление движений ЗерноНаСкладах в док Перемещение ТМЗ
		//расход
		//Если ЗначениеЗаполнено(Выборка.Номенклатура1) И НЕ Выборка.Номенклатура1 = Null Тогда
			Движение = Движения.ур_ЗерноНаСкладах.ДобавитьРасход();
			Движение.ВидДвиженияЗерна = Справочники.ур_ВидыДвиженияЗерна.НайтиПоНаименованию("Внутриреспубликанское перемещение");
			Движение.ТипОперации = Справочники.ТипыОпераций.ЗерноВПути;
			Движение.Склад = Выборка.СкладОтправитель;
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
			
			//приход
			Движение = Движения.ур_ЗерноНаСкладах.ДобавитьПриход();
			Движение.ВидДвиженияЗерна = Справочники.ур_ВидыДвиженияЗерна.НайтиПоНаименованию("Внутриреспубликанское перемещение");
			Движение.ТипОперации = Справочники.ТипыОпераций.ЗерноВПути;
			Движение.Склад = Выборка.СкладПолучатель;
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
		//КонецЕсли;
		// - Стрелюк 15/04/22 Добавление движений ЗерноНаСкладах в док Перемещение ТМЗ
	КонецЦикла;
	//--- Oleg SmartT. 2021-12-28	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура"); 		
	СтруктураПоиска.Вставить("ЕдиницаИзмерения");
	СтруктураПоиска.Вставить("СчетУчетаБУ");
	СтруктураПоиска.Вставить("СчетУчетаНУ");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДокументОснование = Основание;
		СкладОтправитель = Основание.Склад;
		Для Каждого СтрокаТовары Из Основание.Товары Цикл
			
			СтруктураПоиска.Вставить("Номенклатура",    СтрокаТовары.Номенклатура); 		
			СтруктураПоиска.Вставить("ЕдиницаИзмерения",СтрокаТовары.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("СчетУчетаБУ",     СтрокаТовары.СчетУчетаБУ);
			СтруктураПоиска.Вставить("СчетУчетаНУ",     СтрокаТовары.СчетУчетаНУ);
			
			НоваяСтрока = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаТовары, Товары, НомераГТД);
			
			НоваяСтрока.НовыйСчетУчетаБУ = СтрокаТовары.СчетУчетаБУ;
			НоваяСтрока.НовыйСчетУчетаНУ = СтрокаТовары.СчетУчетаНУ;			
			// - куфиб - начало
			НоваяСтрока.ЗаявкаМТС 		 = СтрокаТовары.ЗаявкаМТС;
			НоваяСтрока.Подразделение 	 = СтрокаТовары.Подразделение;
			// - куфиб - конец
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда	
		ДокументОснование = Основание;
		СкладОтправитель = Основание.Склад;
		Для Каждого СтрокаПродукция Из Основание.Продукция Цикл
			
			СтруктураПоиска.Вставить("Номенклатура",    СтрокаПродукция.Номенклатура); 		
			СтруктураПоиска.Вставить("ЕдиницаИзмерения",СтрокаПродукция.ЕдиницаИзмерения);
			СтруктураПоиска.Вставить("СчетУчетаБУ",     СтрокаПродукция.СчетБУ);
			СтруктураПоиска.Вставить("СчетУчетаНУ",     СтрокаПродукция.СчетНУ);
			
			НоваяСтрока = НомераГТДСервер.ЗаполнитьТабличныеЧастиСУчетомНомеровГТД(СтруктураПоиска, СтрокаПродукция, Товары, НомераГТД);
			
			НоваяСтрока.СчетУчетаБУ 	 = СтрокаПродукция.СчетБУ;
			НоваяСтрока.НовыйСчетУчетаБУ = СтрокаПродукция.СчетБУ;
			НоваяСтрока.СчетУчетаНУ 	 = СтрокаПродукция.СчетНУ;
			НоваяСтрока.НовыйСчетУчетаНУ = СтрокаПродукция.СчетНУ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Заполняет счета БУ в строке табличной части.
//
Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ, ЗаполнятьНУ)

	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаБУ      = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.НовыйСчетУчетаБУ = СчетаУчетаНовые.СчетУчетаБУ;

	ИначеЕсли ЗаполнятьБУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаБУ      = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.НовыйСчетУчетаБУ = ПланыСчетов.Типовой.ПустаяСсылка();

	КонецЕсли;
	
	Если ЗаполнятьНУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаНУ      = СчетаУчета.СчетУчетаНУ;
		СтрокаТЧ.НовыйСчетУчетаНУ = СчетаУчетаНовые.СчетУчетаНУ;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда

		СтрокаТЧ.СчетУчетаНУ      = ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.НовыйСчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетаБУ()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Ведомость, З5","Перемещение товаров", "З-5 (Накладная на перемещение)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета БУ и НУ в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета 		= ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	СчетаУчетаНовые = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);

	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, СчетаУчетаНовые, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Процедура заполняет счета БУ в табличной части.
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);		
	КонецЦикла;

КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("Регистратор");

	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект,   "Регистратор");
	
	ТаблицаТоваров.Колонки.Добавить("СтруктурноеПодразделение");
	ТаблицаТоваров.Колонки.Добавить("КорСтруктурноеПодразделение");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, "СтруктурноеПодразделение");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель,  "КорСтруктурноеПодразделение");
	
	МассивСтрокКУдалению =  Новый  Массив;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаТоваров Цикл
		Если (СтрокаТаблицы.Коэффициент<>0) Тогда
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество*СтрокаТаблицы.Коэффициент;
		КонецЕсли;
		Если СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель = СтруктураШапкиДокумента. СтруктурноеПодразделениеПолучатель
			И  СтруктураШапкиДокумента.СкладПолучатель = СтруктураШапкиДокумента.СкладОтправитель 
			И  СтрокаТаблицы.СчетУчетаБУ = СтрокаТаблицы.НовыйСчетУчетаБУ
			И  СтрокаТаблицы.СчетУчетаНУ = СтрокаТаблицы.НовыйСчетУчетаНУ  Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивСтрокКУдалению Цикл
		ТаблицаТоваров.Удалить(СтрокаУдаления);
	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");
	
	Если  СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
			
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Укажем, что надо проверить:
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	СтруктураОбязательныхПолей.Вставить("НовыйСчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.УчитыватьКПН И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("НовыйСчетУчетаНУ");
	КонецЕсли;
		

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоТоварам, Истина, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, Отказ,,"Перемещены ТМЗ");
	
	ДобавитьДвижениеЗерна(); //+++ Oleg SmartT. 2021-12-28	
КонецПроцедуры // ДвиженияПоРегистрам()

Функция ПодготовитьТаблицуПоНомерамГТД(ВидДвижения,ИмяРеквизитаНомерГТД)   
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
		
	Запрос.Текст = "ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаНомераГТД.НомерСтроки) КАК НомерСтроки, 
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаНомераГТД.Номенклатура КАК Номенклатура,
	|	ТаблицаНомераГТД."+ ИмяРеквизитаНомерГТД + " КАК НомерГТД,
	|	СУММА(ТаблицаНомераГТД.Количество*ТаблицаНомераГТД.Коэффициент) КАК Количество,
	|	&ВидДвижения КАК ВидДвижения
	|ИЗ
	|	Документ.ПеремещениеТоваров.НомераГТД КАК ТаблицаНомераГТД
	|ГДЕ
	|	ТаблицаНомераГТД.Ссылка = &Ссылка
	|И
	|	(ТаблицаНомераГТД.НомерГТД <> ТаблицаНомераГТД.НовыйНомерГТД
	|			ИЛИ ТаблицаНомераГТД.Ссылка.СтруктурноеПодразделениеОтправитель <> ТаблицаНомераГТД.Ссылка.СтруктурноеПодразделениеПолучатель)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНомераГТД."+ ИмяРеквизитаНомерГТД + ",
	|	ТаблицаНомераГТД.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();	 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И ВедениеУчетаВременныхРазницБалансовымМетодом И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);
			

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Коэффициент"     , "Коэффициент");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СчетУчетаБУ"     , "СчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ", "НовыйСчетУчетаБУ");
	
	СтруктураПолей.Вставить("СчетУчетаНУ"     , "СчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаНУ", "НовыйСчетУчетаНУ");
	

	// Поля необходимы для партионного учета
	СтруктураПолей.Вставить("Организация",            "Ссылка.Организация");
	СтруктураПолей.Вставить("Склад",                  "Ссылка.СкладОтправитель");
	СтруктураПолей.Вставить("КорСчетСписанияБУ",      "НовыйСчетУчетаБУ");
	
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписанияБУ3", "Ссылка");
	
	СтруктураПолей.Вставить("КорСчетСписанияНУ",      "НовыйСчетУчетаНУ");
	
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ1", "Номенклатура");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ2", "Ссылка.СкладПолучатель");
	СтруктураПолей.Вставить("КорСубконтоСписанияНУ3", "Ссылка");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам 	= ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам	, СтруктураШапкиДокумента, Истина);
			
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		//ДВИЖЕНИЯ ПО РЕГИСТРУ "ТОВАРЫ ОРГАНИЗАЦИЙ (БУ)"
		ТаблицаТоварыОрганизацийПриход = ПодготовитьТаблицуПоНомерамГТД(ВидДвиженияНакопления.Приход, "НовыйНомерГТД");
		ТаблицаТоварыОрганизацийРасход = ПодготовитьТаблицуПоНомерамГТД(ВидДвиженияНакопления.Расход, "НомерГТД");

		//Приход
		СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель);
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийПриход(ТаблицаТоварыОрганизацийПриход, СтруктураШапкиДокумента,Движения, Отказ);
		//Расход
		СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
		НомераГТДСервер.СформироватьДвиженияТоварыОрганизацийРасход(ТаблицаТоварыОрганизацийРасход, СтруктураШапкиДокумента,Движения, Отказ);
		
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()


// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

//Процедура- обработчик события "ПриКопировании" Формы
Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЗначениеЗаполнено(ОбъектКопирования.НомераГТД) Тогда
		НомераГТД.Очистить();
	КонецЕсли;  	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
			
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НомераГТДСервер.ЗаполнитьТаблицуНомераГТД(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
УчетнаяПолитикаНеЗадана = Ложь;
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();