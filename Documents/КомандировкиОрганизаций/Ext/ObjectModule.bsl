Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;
Перем ФорматДаты Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА   

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КомандировкиОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомандировкиОрганизаций.Дата КАК ДатаДок,
		|	КомандировкиОрганизаций.Номер КАК НомерДок,
		|	ВЫРАЗИТЬ(КомандировкиОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	КомандировкиОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	КомандировкиОрганизаций.ГородНазначения КАК СтранаНазначения,
		|	КомандировкиОрганизаций.ОрганизацияНазначения КАК ОрганизацияНазначения, 
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|			ИНАЧЕ """"
		|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ВЫРАЗИТЬ(КомандировкиОрганизаций.ОснованиеКомандировки КАК СТРОКА(1000)) КАК ОснованиеКомандировки
		|ИЗ
		|	Документ.КомандировкиОрганизаций КАК КомандировкиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО КомандировкиОрганизаций.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	КомандировкиОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("Организация",	 Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, КомандировкиОрганизацииРаботники.ФизЛицо.Наименование) КАК Работник,
		|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование, """") КАК ДокументВид,
		|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия, """") КАК ДокументСерия,
		|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер, """") КАК ДокументНомер,
		|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументДатаВыдачи,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(1000)), """") КАК ДокументКемВыдан,
		|	КомандировкиОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	КомандировкиОрганизацииРаботники.ДатаНачала,
		|	КомандировкиОрганизацииРаботники.ДатаОкончания,
		|	ВЫРАЗИТЬ(КомандировкиОрганизацииРаботники.Цель КАК СТРОКА(1000)) КАК Цель,
		|	Работники.Сотрудник.Код КАК ТабельныйНомер,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеРаботника,
		|	Работники.Должность,
		|	Работники.ТарифныйРазряд
		|ИЗ
		|	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        КомандировкиОрганизацииРаботники.ФизЛицо
		|		    ИЗ
		|		        Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|		    ГДЕ
		|		        КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка
		|				И НЕ КомандировкиОрганизацииРаботники.Сторно)) КАК ФИОФизЛиц
		|		ПО КомандировкиОрганизацииРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
		|		&ДатаДокумента,
		|		ФизЛицо В
		|		    (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		        КомандировкиОрганизацииРаботники.ФизЛицо
		|		    ИЗ
		|		        Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизацииРаботники
		|		    ГДЕ
		|		        КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка
		|				И НЕ КомандировкиОрганизацииРаботники.Сторно)) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|		ПО КомандировкиОрганизацииРаботники.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			Работники.Сотрудник.Код ТабельныйНомер,
		|			Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
		|			Работники.Должность.Наименование КАК Должность,
		|			Работники.ТарифныйРазряд.Наименование КАК ТарифныйРазряд
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК КомандировкиОрганизаций
		|					ПО РаботникиВнутри.Сотрудник = КомандировкиОрганизаций.Сотрудник
		|						И (РаботникиВнутри.Организация = &ГоловнаяОрганизация)
		|						И РаботникиВнутри.Период <= КомандировкиОрганизаций.ДатаНачала
		|						И НЕ КомандировкиОрганизаций.Сторно
		|			ГДЕ
		|				КомандировкиОрганизаций.Ссылка = &ДокументСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО СписокДат.Сотрудник = Работники.Сотрудник
		|					И СписокДат.ДатаПоследнегоИзменения = Работники.Период
		|					И (Работники.Организация = &ГоловнаяОрганизация)) КАК Работники
		|		ПО КомандировкиОрганизацииРаботники.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	КомандировкиОрганизацииРаботники.Ссылка = &ДокументСсылка
		|	И НЕ КомандировкиОрганизацииРаботники.Сторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

#Если Клиент Тогда

//
Функция ПечатьРасчетКомандировочныхРасходов(ИмяМакета)	
ТабДокумент = Новый ТабличныйДокумент;
ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Расчет_Командировочных_Расходов";

//Получаем Мрп
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныеРасчетныеПоказателиСрезПоследних.РазмерМРП
		|ИЗ
		|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НаДату, ) КАК РегламентированныеРасчетныеПоказателиСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Мрп = ВыборкаДетальныеЗаписи.РазмерМРП*2;
	КонецЦикла;
///////////////////////////////////////////

Макет = ПолучитьМакет(ИмяМакета);

ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
ОбластьТаблица      = Макет.ПолучитьОбласть("Таблица");
ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");

ТабДокумент.Вывести(ОбластьШапка);
ТабДокумент.Вывести(ОбластьШапкаТаблицы);

ИтогоПроезд      = 0;
ИтогоСут         = 0;
ИтогоРа          = 0;
ИтогоЗадолжность = 0;
ИтогоВсего       = 0;
	
Для Каждого Таблица Из РаботникиОрганизации Цикл
	
//Получаем задолжность сотрудника перед организации///////////////////
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 КАК Сотрудник,
		|	ТиповойОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&НаДату, Счет = &Счет, , Субконто1 = &Сотрудник) КАК ТиповойОстатки";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
	Запрос.УстановитьПараметр("Сотрудник",Таблица.Сотрудник.Физлицо);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	СуммаЗадолжностиСотрудника = ВыборкаДетальныеЗаписи.СуммаОстаток;
    Иначе
	СуммаЗадолжностиСотрудника = 0;
	КонецЕсли;

/////////////////////
ОбластьТаблица.Параметры.ФИО          = Таблица.Сотрудник;
ОбластьТаблица.Параметры.Маршрут      = СтранаНазначения.Наименование + " " + ГородНазначения.Наименование;
ОбластьТаблица.Параметры.Проезд       = Таблица.Проезд;
ИтогоПроезд = ИтогоПроезд + Таблица.Проезд;
//вычисляем количество дней отпуска
КолвоДней                             = (Таблица.ДатаОкончания - Таблица.ДатаНачала)/мДлинаСуток+1;

ОбластьТаблица.Параметры.СуКолДней    = КолвоДней;
ОбластьТаблица.Параметры.СуСутки      = Мрп;
СуИтого                               = КолвоДней*Мрп;
ИтогоСут = ИтогоСут + СуИтого;
ОбластьТаблица.Параметры.СуИтого      = СуИтого;
ОбластьТаблица.Параметры.РаКолДней    = Таблица.КоличествоДней;
ОбластьТаблица.Параметры.РаСутки      = Таблица.Сутки;
РаИтого                               = Таблица.Итого;
ИтогоРа = ИтогоРа + РаИтого;
ОбластьТаблица.Параметры.РаИтого      = РаИтого;
ОбластьТаблица.Параметры.Задолжность  = СуммаЗадолжностиСотрудника;
ИтогоЗадолжность = ИтогоЗадолжность  + СуммаЗадолжностиСотрудника;
Всего                                 =  СуИтого + РаИтого;
ОбластьТаблица.Параметры.Всего        = Всего;
ИтогоВсего = ИтогоВсего + Всего;
ОбластьТаблица.Параметры.Основание    = "№ " + Номер + " от " + ФорматДаты;

ТабДокумент.Вывести(ОбластьТаблица);

        ОбластьИтого.Параметры.ИтогоПроезд      = ИтогоПроезд;
		ОбластьИтого.Параметры.ИтогоСут         = ИтогоСут;
		ОбластьИтого.Параметры.ИтогоРа     =  ИтогоРа;
		ОбластьИтого.Параметры.ИтогоЗадолжность = ИтогоЗадолжность;
		ОбластьИтого.Параметры.ИтогоВсего       = ИтогоВсего;
		
КонецЦикла;	
ТабДокумент.Вывести(ОбластьИтого);

ОбластьПодвал.Параметры.Исполнитель = Ответственный;
ТабДокумент.Вывести(ОбластьПодвал);
Возврат ТабДокумент;
КонецФункции	

//
Функция ПечатьРасчетКомандировочныхРасходовВВалюте(ИмяМакета)
		
	///Получаем валюту
	USD = Справочники.Валюты.НайтиПоКоду("840");
	EUR = Справочники.Валюты.НайтиПоКоду("978");
	/////////////////////
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Расчет_Командировочных_Расходов_В_Валюте";
	
	
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьТаблица      = Макет.ПолучитьОбласть("Таблица");
	ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент.Вывести(ОбластьШапка);
	ОбластьШапкаТаблицы.Параметры.ДатаДокумента = ФорматДаты;
	
	
	////////////////////////////////////////////////
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних.СутДоллор,
		|	Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних.СутЕвро
		|ИЗ
		|	РегистрСведений.Бух_ЛимитыОтдельныхАдмРасходов.СрезПоследних(&Дата, Государство = &Страна) КАК Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Страна",СтранаНазначения);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда					
			
			СуммаСуточныхUSD       = ВыборкаДетальныеЗаписи.СутДоллор;
			СуммаСуточныхEUR       = ВыборкаДетальныеЗаписи.СутЕвро;
			
			Если ЗначениеЗаполнено(СуммаСуточныхUSD) Тогда
				СуммаСуточных       = ВыборкаДетальныеЗаписи.СутДоллор;	
				Валюта = USD;
			ИначеЕсли ЗначениеЗаполнено(СуммаСуточныхEUR) Тогда
				Валюта = EUR;
				СуммаСуточных       = ВыборкаДетальныеЗаписи.СутДоллор;
			КонецЕсли;
		КонецЕсли;
		КурсВалюты =  ПолучитьКурс(Валюта);
		ОбластьШапкаТаблицы.Параметры.СутВалюта = Валюта;
		ОбластьШапкаТаблицы.Параметры.КвВалюта  = Валюта;
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	// Заполняем из таблицы документа
	
	ИтогоПроезд      = 0;
	ИтогоСутИтого    = 0;
	ИтогоКвИтого     = 0;
	ИтогоЗадолжность = 0;
	ИтогоВсего       = 0;
	
	Для Каждого Таблица Из РаботникиОрганизации Цикл
						
		//Получаем задолжность сотрудника перед организации///////////////////
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 КАК Сотрудник,
		|	ТиповойОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&НаДату, Счет = &Счет, , Субконто1 = &Сотрудник) КАК ТиповойОстатки";
		
		Запрос.УстановитьПараметр("НаДату", Дата);
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
		Запрос.УстановитьПараметр("Сотрудник",Таблица.Сотрудник.Физлицо);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СуммаЗадолжностиСотрудника = ВыборкаДетальныеЗаписи.СуммаОстаток;
		Иначе
			СуммаЗадолжностиСотрудника = 0;
		КонецЕсли;
		
		/////////////////////
		
		ОбластьТаблица.Параметры.ФИО          = Таблица.Сотрудник;
		ОбластьТаблица.Параметры.Маршрут      = СтранаНазначения.Наименование + " " + ГородНазначения.Наименование;
		ОбластьТаблица.Параметры.Проезд       = Таблица.Проезд;
		ИтогоПроезд = ИтогоПроезд + Таблица.Проезд;
		ОбластьТаблица.Параметры.Курс         = КурсВалюты;
		//вычисляем количество дней отпуска
		КолвоДней                             = (Таблица.ДатаОкончания - Таблица.ДатаНачала)/мДлинаСуток+1;
		
		ОбластьТаблица.Параметры.СутКолДней    = КолвоДней;
		ОбластьТаблица.Параметры.СутСуммаВалюты = СуммаСуточных;
		СутТенге                               = КурсВалюты * СуммаСуточных;
		ОбластьТаблица.Параметры.СутТенге      = СутТенге;
		СутИтого                              = КолвоДней*СутТенге;
		ОбластьТаблица.Параметры.СутИтого      = СутИтого;
		ИтогоСутИтого = ИтогоСутИтого + СутИтого;
		
		КвТенге                               = КурсВалюты * Таблица.Сутки;
		ОбластьТаблица.Параметры.КвСуммаВалюты  = Таблица.Сутки;
		ОбластьТаблица.Параметры.КвКолДней    = Таблица.КоличествоДней;
		ОбластьТаблица.Параметры.КвТенге      = КурсВалюты * Таблица.Сутки;
		КвИтого                               =  КвТенге * Таблица.КоличествоДней;
		ОбластьТаблица.Параметры.КвИтого      = КвИтого;
		ИтогоКвИтого                          = ИтогоКвИтого + КвИтого;
		ОбластьТаблица.Параметры.Задолжность  = СуммаЗадолжностиСотрудника;
		ИтогоЗадолжность                      = ИтогоЗадолжность +  СуммаЗадолжностиСотрудника;
		ОбластьТаблица.Параметры.Всего        = СутИтого + КвИтого;
		ИтогоВсего                            = ИтогоВсего +  ОбластьТаблица.Параметры.Всего;
		ОбластьТаблица.Параметры.Приказ       = "№ " + Номер + " От " + ФорматДаты ;
		
		ТабДокумент.Вывести(ОбластьТаблица);
		
		ОбластьИтого.Параметры.ИтогоПроезд      = ИтогоПроезд;
		ОбластьИтого.Параметры.ИтогоСутИтого    = ИтогоСутИтого;
		ОбластьИтого.Параметры.ИтогоКвИтого     = ИтогоКвИтого;
		ОбластьИтого.Параметры.ИтогоЗадолжность = ИтогоЗадолжность;
		ОбластьИтого.Параметры.ИтогоВсего       = ИтогоВсего; 
		
		
	КонецЦикла;	
	ТабДокумент.Вывести(ОбластьИтого);
	ОбластьПодвал.Параметры.Исполнитель = Ответственный;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции	
//
//
Функция ПечатьРасчетКомандировочныхРасходовОбязательныхОтчислений(ИмяМакета)
	
	
	//Получаем валюту
	USD = Справочники.Валюты.НайтиПоКоду("840");
	EUR = Справочники.Валюты.НайтиПоКоду("978");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Расчет_Командировочных_Расходов_В_Валюте";
	
	
	//Получаем Мрп
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныеРасчетныеПоказателиСрезПоследних.РазмерМРП
	|ИЗ
	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НаДату, ) КАК РегламентированныеРасчетныеПоказателиСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Мрп = ВыборкаДетальныеЗаписи.РазмерМРП*8;
	КонецЦикла;
	
	Макет = ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьТаблица      = Макет.ПолучитьОбласть("Таблица");
	ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних.СутДоллор,
	|	Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних.СутЕвро,
	|	Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних.Государство
	|ИЗ
	|	РегистрСведений.Бух_ЛимитыОтдельныхАдмРасходов.СрезПоследних(&Дата, Государство = &Страна) КАК Бух_ЛимитыОтдельныхАдмРасходовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Страна",СтранаНазначения);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаСуточныхUSD       = ВыборкаДетальныеЗаписи.СутДоллор;
		СуммаСуточныхEUR       = ВыборкаДетальныеЗаписи.СутЕвро;
		
		Если ЗначениеЗаполнено(СуммаСуточныхUSD) Тогда
			СуммаСуточных       = ВыборкаДетальныеЗаписи.СутДоллор;	
			Валюта = USD;
		ИначеЕсли ЗначениеЗаполнено(СуммаСуточныхEUR) Тогда
			Валюта = EUR;
			СуммаСуточных       = ВыборкаДетальныеЗаписи.СутЕвро;
		КонецЕсли;	
	КонецЕсли;
	КурсВалюты =  ПолучитьКурс(Валюта);
	ОбластьШапкаТаблицы.Параметры.СутВалюта = Валюта;
	ОбластьШапкаТаблицы.Параметры.КвВалюта  = Валюта;	
	ТабДокумент.Вывести(ОбластьШапка);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);
	// Заполняем из таблицы документа
	ИтогоВсего = 0;
	
	Для Каждого Таблица Из РаботникиОрганизации Цикл
		
		///////////////////////////////////////////
		
		//Получаем задолжность сотрудника перед организации///////////////////
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Субконто1 КАК Сотрудник,
		|	ТиповойОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&НаДату, Счет = &Счет, , Субконто1 = &Сотрудник) КАК ТиповойОстатки";
		
		Запрос.УстановитьПараметр("НаДату", Дата);
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц);
		Запрос.УстановитьПараметр("Сотрудник",Таблица.Сотрудник);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			СуммаЗадолжностиСотрудника = ВыборкаДетальныеЗаписи.СуммаОстаток;
		Иначе
			СуммаЗадолжностиСотрудника = 0;
		КонецЕсли;
		
		/////////////////////
		
		ОбластьТаблица.Параметры.ФИО          = Таблица.Сотрудник;
		ОбластьТаблица.Параметры.Маршрут      = СтранаНазначения.Наименование + " " + ГородНазначения.Наименование;
		
		ОбластьТаблица.Параметры.Курс         = КурсВалюты;
		ОбластьТаблица.Параметры.Дата         = ФорматДаты;
		//вычисляем количество дней отпуска
		КолвоДней                             = (Таблица.ДатаОкончания - Таблица.ДатаНачала)/мДлинаСуток+1;
		
		ОбластьТаблица.Параметры.СутКолДней    = КолвоДней;
		ОбластьТаблица.Параметры.СутСуммаВалюты = СуммаСуточных;
		СутТенге                                  =КурсВалюты * Таблица.Сутки;
		ОбластьТаблица.Параметры.СутТенге      = СутТенге;
		СутТенге                               =  КолвоДней*СутТенге;
		ОбластьТаблица.Параметры.СутИтого      = СутТенге;
		ОбластьТаблица.Параметры.Мрп          = Мрп;
		НеоИтого                               = Таблица.КоличествоДней * Мрп;
		ОбластьТаблица.Параметры.НеоКолДней    = Таблица.КоличествоДней;
		ОбластьТаблица.Параметры.НеоТенге      = Мрп;
		ОбластьТаблица.Параметры.НеоИтого      = НеоИтого;
		ОбластьТаблица.Параметры.Всего        = СутТенге - НеоИтого;
		ОбластьТаблица.Параметры.Приказ       = "№ " + Номер + " От " + ФорматДаты ;
		ИтогоВсего = ИтогоВсего + ОбластьТаблица.Параметры.Всего;
		
		ОбластьИтого.Параметры.ИтогоВсего = ИтогоВсего;
		ТабДокумент.Вывести(ОбластьТаблица);
	КонецЦикла;	
	ТабДокумент.Вывести(ОбластьИтого);
	ОбластьПодвал.Параметры.Исполнитель = Ответственный;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ПолучитьКурс(мВалюта)
  // Получаем курс для стран 
Валюта = Новый Структура("Валюта",мВалюта);	
мКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,Валюта);
КурсВалюты = мКурсВалюты.Курс;
Возврат КурсВалюты;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Удостоверение" Тогда
		ТабДокумент = ПечатьУдостоверения(ИмяМакета)
	ИначеЕсли ИмяМакета = "Приказ" Тогда
		ТабДокумент = ПечатьПриказа(ИмяМакета)
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Удостоверение, Приказ", "Командировочное удостоверение", "Приказ");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Функция формирует табличный документ с печатной формой приказа,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомандировкиОрганизации_Приказа";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки	  = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета	    = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати;
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если РаботникиОрганизации.Количество() > 1 Тогда
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.СтранаНазначения = СокрЛП(ВыборкаДляШапки.СтранаНазначения);
		ОбластьМакета.Параметры.ОрганизацияНазначения = СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения);
		ОбластьМакета.Параметры.Цель = СокрЛП(ВыборкаРаботники.Цель);
		ОбластьМакета.Параметры.ОснованиеКомандировки = СокрЛП(ВыборкаДляШапки.ОснованиеКомандировки);
		ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),"",Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьПриказа()	

// Функция формирует табличный документ с печатной формой удостоверения,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьУдостоверения(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомандировкиОрганизации_Удостоверение";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка  = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета		= Макет.ПолучитьОбласть("Работник"); // строка работника
	ОборотШапка			= Макет.ПолучитьОбласть("ШапкаОтметок"); // оборот удостоверения - отметки от прибытии-выбытии
	ОборотОтметки		= Макет.ПолучитьОбласть("Отметки"); 

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапки.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // область работника
		НомерДокДляПечати	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
		ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати; 		
	КонецЕсли;

	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
        Если РаботникиОрганизации.Количество() > 1 Тогда
		    ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + ВыборкаРаботники.НомерСтроки
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		ОбластьМакета.Параметры.Продолжительность = ?(НЕ ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),"",Цел((ВыборкаРаботники.ДатаОкончания - ВыборкаРаботники.ДатаНачала + 1) / мДлинаСуток) + 1);
		Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
			ОбластьМакета.Параметры.Должность = "" + ВыборкаРаботники.Должность + ", " + ВыборкаРаботники.ТарифныйРазряд;
		КонецЕсли;
		ОбластьМакета.Параметры.СтранаНазначения = СокрЛП(ВыборкаДляШапки.СтранаНазначения);
		ОбластьМакета.Параметры.ОрганизацияНазначения = СокрЛП(ВыборкаДляШапки.ОрганизацияНазначения);
		ОбластьМакета.Параметры.Цель = СокрЛП(ВыборкаРаботники.Цель);
		
		// Реквизиты документа личности
		РеквизитыПаспорта = "";
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДокументВид) Тогда
			РеквизитыПаспорта = ВыборкаРаботники.ДокументВид;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДокументСерия) Тогда
			РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + "серия " + ВыборкаРаботники.ДокументСерия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДокументНомер) Тогда
			РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + "№ " + ВыборкаРаботники.ДокументНомер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДокументДатаВыдачи) Тогда
			РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + Формат(ВыборкаРаботники.ДокументДатаВыдачи, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРаботники.ДокументКемВыдан) Тогда
			РеквизитыПаспорта = РеквизитыПаспорта + ?(ЗначениеЗаполнено(РеквизитыПаспорта), ", ", "") + "выд. "+ СокрЛП(ВыборкаРаботники.ДокументКемВыдан);
		КонецЕсли;
		ОбластьМакета.Параметры.РеквизитыПаспорта = РеквизитыПаспорта;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
        // выводим оборот удостоверения
		ТабДокумент.Вывести(ОборотШапка);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
        // выводим оборот удостоверения
		ТабДокумент.Вывести(ОборотШапка);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
		ТабДокумент.Вывести(ОборотОтметки);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьУдостоверения()	

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать 
	|	Дата, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим)

	Запрос = Новый Запрос;

	// Заполним список обособленных подразделений организации 
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	ПроверкаШтатногоРасписания = УчетнаяПолитикаПоПерсоналуОрганизации[Организация].ПроверкаШтатногоРасписания;
			   
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли сотрудник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "Работники":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
	//		по набору измерений <Сотрудник>
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботникиОрганизации.Сотрудник,
	               |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	               |	ТЧРаботникиОрганизации.ДатаНачала,
	               |	ТЧРаботникиОрганизации.ДатаОкончания,
	               |	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
	               |	ТЧРаботникиОрганизации.ОсвобождатьСтавку
				   |ПОМЕСТИТЬ ВТДанныеДокумента
				   |ИЗ 
				   |	Документ.КомандировкиОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
				   |ГДЕ
				   |	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
				   |	И (НЕ ТЧРаботникиОрганизации.Сторно)
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Сотрудник
				   |;
				   |/////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	               |	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	ТЧРаботникиОрганизации.Сотрудник,
	               |	ТЧРаботникиОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	               |	ТЧРаботникиОрганизации.ДатаНачала,
	               |	ТЧРаботникиОрганизации.ДатаОкончания,
	               |	ТЧРаботникиОрганизации.ПроизошедшееСобытие,
	               |	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
	               |	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
	               |	ДанныеПоРаботникуДоНазначения.Должность,
				   |	ДанныеПоРаботникуДоНазначения.ТарифныйРазряд,
	               |	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок,
	               |	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
			   	   |	ВЫБОР
				   |		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	               |	NULL КАК КонфликтныйДокумент
	               |ИЗ
	               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	               |
	               |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |			МАКСИМУМ(Работники.Период) КАК ДатаДвижения
	               |		ИЗ
	               |			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	               |
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	               |				ПО Работники.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
	               |					И (Работники.Организация = &ГоловнаяОрганизация) 
	               |					И Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	               |		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботникиОрганизации.НомерСтроки
	               |
	               |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	               |		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
	               |			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация) 
	               |			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	               |
	               |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	               |		ИЗ
	               |			ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	               |
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации2
	               |				ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник 
	               |					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки 
	               |					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала 
				   |					И (ТЧРаботникиОрганизации.ДатаОкончания = &ПустаяДата
				   |						ИЛИ ТЧРаботникиОрганизации.ПроизошедшееСобытие = ЛОЖЬ
				   |						ИЛИ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	               |		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	""КонфликтныйДокумент"",
	               |	ТЧРаботникиОрганизации.НомерСтроки,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
				   |	NULL,
	               |	NULL,
	               |	СостояниеРаботниковОрганизации.Регистратор
	               |ИЗ
	               |	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	               |
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизации
	               |		ПО СостояниеРаботниковОрганизации.Сотрудник = ТЧРаботникиОрганизации.Сотрудник 
	               |			И (СостояниеРаботниковОрганизации.Организация = &ГоловнаяОрганизация) 
	               |			И (ТЧРаботникиОрганизации.ПроизошедшееСобытие 
				   |					И (СостояниеРаботниковОрганизации.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания)
				   |				ИЛИ СостояниеРаботниковОрганизации.Период = ТЧРаботникиОрганизации.ДатаНачала)
	               |
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, сотрудники которой отправляются в командировку!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
		КонецЕсли;
	
		// Сотрудник
		ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НЕ ЕстьСотрудник Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		ЕстьДатаНачала = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НЕ ЕстьДатаНачала Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала командировки!", Отказ, Заголовок);
		КонецЕсли;

		Если ЕстьСотрудник И ЕстьДатаНачала Тогда

			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала командировки не может превышать дату окончания!", Отказ, Заголовок);
			КонецЕсли;
			
			// Проверка: ранее работник должен быть принят на работу
			Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
				СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			Иначе	

			КонецЕсли; 

			// Проверка: противоречие другой строке документа
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
				СтрокаСообщениеОбОшибке = "период командировки пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;	

		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	

		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);

	КонецЕсли;	
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("СостояниеРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("НамеченныеСобытияПоПерсоналуОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
		  СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналуОрганизации)

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	ИмяРегистра = "СостояниеРаботниковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		// движения по дате "с"
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Ресурсы
		Движение.Состояние                  = Перечисления.СостоянияРаботникаОрганизации.Командировка;
			
	КонецЕсли; 

	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда

		// Движения по дате "по"
		Если  ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
			
			ИмяРегистра = "СостояниеРаботниковОрганизаций";		
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
	            // Свойства
	            Движение.ПериодЗавершения = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	            // Ресурсы
	            Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
            КонецЕсли;
			
		Иначе
			
			ИмяРегистра = "НамеченныеСобытияПоПерсоналуОрганизаций";
			Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

				Движение = Движения[ИмяРегистра].Добавить();

				// Свойства
				Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;

				// Измерения
				Движение.Сотрудник				    = ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.Организация;
				Движение.ДатаИзменения              = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
				Движение.ПланируемоеСобытие         = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.Командировка;

				// Реквизиты
				Движение.ЗанимаемыхСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
				Движение.ЗаниматьСтавку             = ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Создает и заполняет структуру, содержащую имена регистров накопления
// документа. В дальнейшем движения заносятся только по тем регистрам накопления, для которых в 
// данной процедуре заданы ключи
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления)

	СтруктураПроведенияПоРегистрамНакопления = Новый Структура();
	СтруктураПроведенияПоРегистрамНакопления.Вставить("ЗанятыеШтатныеЕдиницыОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
	
	СтруктураПроведенияПоРегистрамНакопления, СтруктураПараметров = "")

    // Если документ нужно проводить по регистру, то для него есть ключ в структуре
    ИмяРегистра = "ЗанятыеШтатныеЕдиницыОрганизаций";
    Если СтруктураПроведенияПоРегистрамНакопления.Свойство(ИмяРегистра) Тогда

		Движение = Движения[ИмяРегистра].Добавить();
		
		// Свойства
		Движение.Период                 = ВыборкаПоРаботникиОрганизации.ДатаНачала;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;

		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность			    	= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ТарифныйРазряд		    	= ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

		// Ресурсы
		Движение.КоличествоСтавок           = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок; 

		// Реквизиты
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник; 

		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и ВыборкаПоРаботникиОрганизации.ПроизошедшееСобытие Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			Движение.Период                = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			Движение.ВидДвижения		   = ВидДвиженияНакопления.Приход;
	
			// Измерения
			Движение.ПодразделениеОрганизации = ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность			      = ВыборкаПоРаботникиОрганизации.Должность;
			Движение.ТарифныйРазряд		      = ВыборкаПоРаботникиОрганизации.ТарифныйРазряд;

			// Ресурсы
			Движение.КоличествоСтавок     	  = ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник				  = ВыборкаПоРаботникиОрганизации.Сотрудник; 
			
		КонецЕсли;
   КонецЕсли; 

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
   	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);	

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			ЗаполнитьСтруктуруПроведенияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамНакопления);

			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим);
			ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);

				Если НЕ Отказ И ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналуОрганизации);

					Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
						ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамНакопления);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Механизм исправлений
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);

КонецПроцедуры


мДлинаСуток = 86400;
мВосстанавливатьДвижения = Ложь;