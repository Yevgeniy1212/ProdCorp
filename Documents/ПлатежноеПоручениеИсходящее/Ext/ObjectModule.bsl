// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем ДатаДвижений;
// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;
Перем ТаблицаЗатратНаКомиссиюБанка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтрагента - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат  		= ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);
	
	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезТиын - булево - флаг представления суммы без Тиын
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезТиын)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";	
	ПарамПредмета = ВалютаДокумента.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезТиын Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0") - 1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезТиын - булево - флаг представления суммы без тиын
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезТиын)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезТиын Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, (Найти(Результат,"=")-1));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим формирования запроса (по шапке, по табличной части)
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", 	Ссылка);
	Запрос.УстановитьПараметр("парамДата", 				Дата);

	Если Режим = "ПоРеквизитам" Тогда
		
		СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеОтправитель);
		
		Если ТипЗнч(СтруктурнаяЕдиницаОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ТекстДляЗапроса = "Организация";
		Иначе 
			ТекстДляЗапроса = "СтруктурноеПодразделениеОтправитель";
		КонецЕсли;
		
		// список способов заполнения только зарплаты из текущих взаиморасчетов
		СписокСпособовЗарплата = Новый СписокЗначений;
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета);
		
		Запрос.УстановитьПараметр("парамСписокСпособовЗарплата", СписокСпособовЗарплата);
		
		// список способов заполнения только зарплаты из депонированных сумм
		СписокСпособовДепонированныеСуммы = Новый СписокЗначений;
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц);
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца);
		
		Запрос.УстановитьПараметр("парамСписокСпособовДепонированныеСуммы", СписокСпособовДепонированныеСуммы);
		
		ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(Дата);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + ТекстДляЗапроса + ".НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ИИКОрганизации,
		|	ПлатежноеПоручениеИсходящее." + ТекстДляЗапроса + ".РНН КАК РННОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК БИКОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК БанкОрганизации,
		|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК АдресБанкаОрганизации,
		|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК КБеОрганизации,
		|	ПлатежноеПоручениеИсходящее.Номер КАК НомерДокумента,
		|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаДокумента
		|";
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		
			ТекстЗапроса = ТекстЗапроса + ",
			|	ПеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа,
			|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВП,
			|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК НазваниеГЦВП,
			|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ИИКГЦВП,
			|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК БИКГЦВП,
			|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК БанкГЦВП,
			|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК АдресБанкаГЦВП,
			|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННГЦВП,
			|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК БИНГЦВП
			|";
		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
			ТекстЗапроса = ТекстЗапроса + ",
			|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК БанкНаименование,
			|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
			|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
			|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,
			|	ПлатежноеПоручениеИсходящее.ПроцентКомиссии КАК ПроцентКомиссииБанка,
			|	ПериодыВыплаты.ПериодС,
			|	ПериодыВыплаты.ПериодПо
			|";
		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

			ТекстЗапроса = ТекстЗапроса + ",
			|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК БанкНаименование,
			|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
			|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
			|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,
			|	ПлатежноеПоручениеИсходящее.ПроцентКомиссии КАК ПроцентКомиссииБанка
			|";
			
		КонецЕсли;		
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|";
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
			
		 	Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа
			|
			|ПОМЕСТИТЬ ВТПериодПлатежа
			|
			|ИЗ
			|	Документ.ОПВПеречислениеВФонды КАК ПеречислениеВФонды
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречисление
			|		ПО ПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречисление.Документ
			|ГДЕ
			|	ПлатежноеПоручениеИсходящееПеречисление.Ссылка = &парамДокументСсылка";
		 	
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
			КонецЕсли;
			
		 	Запрос.Выполнить();
		 
			ТекстЗапроса = ТекстЗапроса + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодПлатежа КАК ПеречислениеВФонды
			|		ПО ИСТИНА
			|";
		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МИНИМУМ(ВЫБОР
			|			КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0
			|					И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
			|				ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
			|			КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0
			|					И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
			|				ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты < ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
			|						ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
			|					ИНАЧЕ ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
			|				КОНЕЦ
			|		КОНЕЦ) КАК ПериодС,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0
			|					И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
			|				ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
			|			КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0
			|					И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
			|				ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
			|			ИНАЧЕ ВЫБОР
			|					КОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты > ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
			|						ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
			|					ИНАЧЕ ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
			|				КОНЕЦ
			|		КОНЕЦ) КАК ПериодПо
			|
			|ПОМЕСТИТЬ ВТПеречислениеЗарплаты
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(ВЫБОР
			|				КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовЗарплата)
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ) КАК ТекущиеВзаиморасчеты,
			|		СУММА(ВЫБОР
			|				КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовДепонированныеСуммы)
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ) КАК ДепонированныеСуммы,
			|		МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МинПериодНачисленияЗарплаты,
			|		МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МаксПериодНачисленияЗарплаты,
			|		ВЫБОР
			|			КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
			|			ИНАЧЕ МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты)
			|		КОНЕЦ КАК МинПериодНачисленияДепонированнойЗарплаты,
			|		ВЫБОР
			|			КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
			|			ИНАЧЕ МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты)
			|		КОНЕЦ КАК МаксПериодНачисленияДепонированнойЗарплаты
			|	ИЗ
			|		Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗарплаты
			|	ГДЕ
			|		ПеречислениеЗарплаты.Ссылка = &парамДокументСсылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ПеречислениеЗарплаты.Ведомость) КАК ПеречислениеЗарплаты";
			
			Запрос.Выполнить();
		
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречислениеЗарплаты КАК ПериодыВыплаты
			|		ПО ИСТИНА
			|";
		
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "	
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
	ИначеЕсли Режим = "ПоТабличнойЧасти" Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
			|	ОПВПеречислениеВФонды.ФизЛицо.СИК КАК СИК,
			|	ОПВПеречислениеВФонды.ФизЛицо.РНН КАК РНН,
			|	ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИИН,
			|	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
			|	ВЫБОР
			|		КОГДА ОПВПеречислениеВФонды.Сумма ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ ОПВПеречислениеВФонды.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КАК ФИО,
			|	ФИОФизЛицПриПрисвоенииСИК.Фамилия + "" "" + ФИОФизЛицПриПрисвоенииСИК.Имя + "" "" + ФИОФизЛицПриПрисвоенииСИК.Отчество КАК ФИОПриПрисвоенииСИК,
			|	ОПВПеречислениеВФонды.ПериодРегистрации КАК ПериодРегистрации
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации КАК ПериодРегистрации,
			|		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
			|			ВЫБОР
			|				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
			|					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
			|				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
			|			КОНЕЦ КАК ФизЛицо,
			|			ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма
			|		ИЗ
			|			Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
			|		ГДЕ
			|			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.Ссылка
			|					ИЗ
			|						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			|					ГДЕ
			|						ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &парамДокументСсылка)) КАК ОПВПеречислениеВФондыПенсионныеВзносы
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо,
			|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодРегистрации) КАК ОПВПеречислениеВФонды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
			|		ПО ФИОФизЛицПриПрисвоенииСИК.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
			|		ПО  ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо
			|						
			|УПОРЯДОЧИТЬ ПО
			|	ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество,
			|	ОПВПеречислениеВФонды.ПериодРегистрации";
			
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПенсионныеВзносы", "СоциальныеОтчисления");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
			Иначе 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБОР 
					|				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
					|					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
					|				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо 
					|			КОНЕЦ", "ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо");
			КонецЕсли;
		
			Запрос.Текст = ТекстЗапроса;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ЗарплатаКВыплате.Физлицо,
			               |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.РНН
			               |		ИНАЧЕ ЗарплатаКВыплате.Физлицо.РНН
			               |	КОНЕЦ КАК РННРаботника,
						   |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.ИдентификационныйКодЛичности
			               |		ИНАЧЕ ЗарплатаКВыплате.Физлицо.ИдентификационныйКодЛичности
			               |	КОНЕЦ КАК ИИНРаботника,						   
			               |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.Фамилия + "" "" + ЗарплатаКВыплате.НомерКартСчета.Имя + "" "" + ЗарплатаКВыплате.НомерКартСчета.Отчество
			               |		ИНАЧЕ ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ЗарплатаКВыплате.Физлицо.Наименование)
			               |	КОНЕЦ КАК ФИОРаботника,
			               |	ЗарплатаКВыплате.НомерКартСчета.НомерСчета КАК НомерКартСчета,
			               |	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаКВыплате
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ППИ
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
			               |		ПО ППИ.Ведомость = ЗарплатаКВыплате.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
			               |		ПО (ЗарплатаКВыплате.Физлицо = ФИОФизЛиц.ФизЛицо)
			               |ГДЕ
			               |	ППИ.Ссылка = &парамДокументСсылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЗарплатаКВыплате.Физлицо,
			               |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.РНН
			               |		ИНАЧЕ ЗарплатаКВыплате.Физлицо.РНН
			               |	КОНЕЦ,
						   |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.ИдентификационныйКодЛичности
			               |		ИНАЧЕ ЗарплатаКВыплате.Физлицо.ИдентификационныйКодЛичности
			               |	КОНЕЦ,						   
			               |	ВЫБОР
			               |		КОГДА ЗарплатаКВыплате.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ЗарплатаКВыплате.НомерКартСчета.Фамилия + "" "" + ЗарплатаКВыплате.НомерКартСчета.Имя + "" "" + ЗарплатаКВыплате.НомерКартСчета.Отчество
			               |		ИНАЧЕ ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ЗарплатаКВыплате.Физлицо.Наименование)
			               |	КОНЕЦ,
			               |	ЗарплатаКВыплате.НомерКартСчета.НомерСчета
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ФИОРаботника";

			Запрос.Текст = ТекстЗапроса;

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ПеречислениеВПодотчет.ФизЛицо,
			               |	ВЫБОР
			               |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
			               |		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
			               |	КОНЕЦ КАК РННРаботника,
						   |	ВЫБОР
			               |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
			               |		ИНАЧЕ ПеречислениеВПодотчет.Физлицо.ИдентификационныйКодЛичности
			               |	КОНЕЦ КАК ИИНРаботника,						   
			               |	ВЫБОР
			               |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия + "" "" + ПеречислениеВПодотчет.НомерКартСчета.Имя + "" "" + ПеречислениеВПодотчет.НомерКартСчета.Отчество
			               |		ИНАЧЕ ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ПеречислениеВПодотчет.ФизЛицо.Наименование)
			               |	КОНЕЦ КАК ФИОРаботника,
			               |	ПеречислениеВПодотчет.НомерКартСчета.НомерСчета КАК НомерКартСчета,
			               |	СУММА(ПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаКВыплате
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
			               |		ПО ПеречислениеВПодотчет.ФизЛицо = ФИОФизЛиц.ФизЛицо
			               |ГДЕ
			               |	ПеречислениеВПодотчет.Ссылка = &парамДокументСсылка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПеречислениеВПодотчет.ФизЛицо,
			               |	ВЫБОР
			               |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
			               |		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
			               |	КОНЕЦ,
						   |	ВЫБОР
						   |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
			               |		ИНАЧЕ ПеречислениеВПодотчет.Физлицо.ИдентификационныйКодЛичности
			               |	КОНЕЦ,						   
			               |	ВЫБОР
			               |		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
			               |			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия + "" "" + ПеречислениеВПодотчет.НомерКартСчета.Имя + "" "" + ПеречислениеВПодотчет.НомерКартСчета.Отчество
			               |		ИНАЧЕ ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ПеречислениеВПодотчет.ФизЛицо.Наименование)
			               |	КОНЕЦ,
			               |	ПеречислениеВПодотчет.НомерКартСчета.НомерСчета
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ФИОРаботника";

			Запрос.Текст = ТекстЗапроса;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеОтправитель);
	
	НомерПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";

	Макет = ПолучитьМакет("ПлатежноеПоручение");
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   	= СчетОрганизации.МесяцПрописью;
	СуммаБезДробнойЧасти= СчетОрганизации.СуммаБезДробнойЧасти;
	ФорматДаты      	= ?(МесяцПрописью = 1,"ДЛФ = ДД", "ДФ='дд.ММ.гггг'");
	БанкОрганизации 	= СчетОрганизации.Банк;
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Дата);
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаВыписки<ДатаПрекращенияВыводаРНН;
	ИмяПараметра = ?(ВыводитьРНН, "РНН", "БИН_ИИН");

	СведенияОбОрганизации[ИмяПараметра] = ?(ПустаяСтрока(РННПлательщика), СведенияОбОрганизации[ИмяПараметра], СокрЛП(РННПлательщика));	

	ОбластьМакета.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	
	ДатаДокумента = "";
	
	Если МесяцПрописью = 1 Тогда 
		ДатаДокумента = СтрЗаменить(Формат(Дата,ФорматДаты), "г.", "года"); 
	Иначе 
		ДатаДокумента = Формат(Дата,ФорматДаты) + " года"; 
	КонецЕсли;
			
	ОбластьМакета.Параметры.ДатаДокумента           = ДатаДокумента;
	
	СуммаСКомиссией									= ?(ВключатьКомиссиюБанка,СуммаДокумента + СуммаКомиссии, СуммаДокумента);
	ОбластьМакета.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаСКомиссией,СуммаБезДробнойЧасти);
	ОбластьМакета.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаСКомиссией,СуммаБезДробнойЧасти);

	ОбластьМакета.Параметры.ПлательщикРНН_БИН       = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Дата, , , , , Истина);
    	
    ТекстПлательщикПечать = ?(ПустаяСтрока(ТекстПлательщика), СтруктурнаяЕдиницаОрганизация.НаименованиеПолное, СокрЛП(ТекстПлательщика));		
    
	ОбластьМакета.Параметры.Плательщик            = ТекстПлательщикПечать;
	ОбластьМакета.Параметры.БанкПлательщика       = "" + БанкОрганизации + " " + БанкОрганизации.Город;
	ОбластьМакета.Параметры.НомерСчетаПлательщика = ВернутьРасчетныйСчет(СчетОрганизации);
	ОбластьМакета.Параметры.БикБанкаПлательщика   = УправлениеДенежнымиСредствами.ПолучитьБИКБанка(Дата, БанкОрганизации);
	ОбластьМакета.Параметры.ПлательщикКБЕ    	  = Организация.КБЕ;

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		КонтрагентДляПечати 		= ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеПолучатель);		
		СчетКонтрагентаДляПечати 	= СчетКонтрагента;
		БанкПосредникДляПечати 		= БанкПосредник;
		ПроверятьТекстовыеРеквизиты = Ложь;
	Иначе
		КонтрагентДляПечати 		= Контрагент;
		СчетКонтрагентаДляПечати 	= СчетКонтрагента;
		БанкПосредникДляПечати 		= БанкПосредник;
		ПроверятьТекстовыеРеквизиты = Истина;
	КонецЕсли;
	
	СведенияОПолучателе = ОбщегоНазначения.СведенияОЮрФизЛице(КонтрагентДляПечати, Дата);
	СведенияОПолучателе[ИмяПараметра] = ?(ПустаяСтрока(РННПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе[ИмяПараметра], СокрЛП(РННПолучателя));

	БанкКонтрагента 	= СчетКонтрагентаДляПечати.Банк;	

	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда		
		ОбластьМакета.Параметры.ПолучательРНН_БИН = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПолучателе, Дата, , , , , Истина);
		ОбластьМакета.Параметры.Получатель      = ?(ПустаяСтрока(ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты,КонтрагентДляПечати.НаименованиеПолное,СокрЛП(ТекстПолучателя));		
		ОбластьМакета.Параметры.ПолучательКБЕ	= КонтрагентДляПечати.КБЕ;		
	Иначе		
		// реквизиты организации или СП
		СведенияОбОрганизации[ИмяПараметра] 	  = ?(ПустаяСтрока(РННПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе[ИмяПараметра], СокрЛП(РННПолучателя));
		ОбластьМакета.Параметры.ПолучательРНН_БИН = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОПолучателе, Дата, , , , , Истина);
		ОбластьМакета.Параметры.Получатель        = ?(ПустаяСтрока(ТекстПолучателя) ИЛИ НЕ ПроверятьТекстовыеРеквизиты, СведенияОПолучателе.ПолноеНаименование, СокрЛП(ТекстПолучателя));		
		ОбластьМакета.Параметры.ПолучательКБЕ	  = СведенияОПолучателе.КБЕ;				
	КонецЕсли;

	ОбластьМакета.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	ОбластьМакета.Параметры.БикБанкаПолучателя      = УправлениеДенежнымиСредствами.ПолучитьБИКБанка(Дата, БанкКонтрагента);
	ОбластьМакета.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагентаДляПечати);
	
	Если НЕ БанкПосредникДляПечати = Неопределено Тогда
		ОбластьМакета.Параметры.БанкПосредник			= ?(ТипЗнч(БанкПосредникДляПечати) = "СправочникСсылка.Контрагенты", БанкПосредникДляПечати.НаименованиеПолное, БанкПосредникДляПечати.Наименование); 
		ОбластьМакета.Параметры.БанкПосредникБИК        = УправлениеДенежнымиСредствами.ПолучитьБИКБанка(Дата, СчетБанкаПосредника.Банк);
	КонецЕсли;
	
	ОбластьМакета.Параметры.НазначениеПлатежа       	= СокрЛП(НазначениеПлатежа);
	ОбластьМакета.Параметры.КодБюджетнойКлассификации 	= КодБК;
	ОбластьМакета.Параметры.КодНазначенияПлатежа    	= СокрЛП(КодНазначенияПлатежа);
	ОбластьМакета.Параметры.ДатаВалютирования	  		= Формат(ДатаВалютирования,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ДатаПолученияТовара  		= ?(ЗначениеЗаполнено(ДатаПолученияТовара), СтрЗаменить(Формат(ДатаПолученияТовара,"ДЛФ=DD"),"г.", "года"),"");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(Дата),);

	ОбластьМакета.Параметры.ФИОРуководителя 		= Руководители.Руководитель;
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера 	= ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов), "Не предусмотрен", Руководители.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
    
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьРазделителя = Макет.ПолучитьОбласть("Разделитель");
	ТабДокумент.Вывести(ОбластьРазделителя);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму списка на перечисление на карт-счета физлиц к платежному поручению.
//
Функция ПечатьСпискаНаКартСчета()

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Сообщить("Не указан получатель.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетКонтрагента) Тогда
		Сообщить("Не указан банковский счет получателя.", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(СчетКонтрагента.Банк) Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		РаботаССообщениями.ОшибкаРасчета("", "Не указан банк в банковском счете получателя.", СчетКонтрагента);
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		Если ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
			Сообщить("Не указаны ведомости на перечисление зарплаты!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ПеречислениеВПодотчет.Количество() = 0 Тогда
			Сообщить("Не указаны подотчетные лица!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//СтруктурнаяЕдиницаПодразделение = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеОтправитель);
	СтруктурнаяЕдиницаПодразделение = Организация;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокНаКартСчетаКПлатежномуПоручению";
	
	Макет = ПолучитьМакет("СписокПеречисленияНаКартСчета");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапкаСтрОбщий 		= Макет.ПолучитьОбласть("ШапкаСтр|Общий");
	ОбластьШапкаСтрКомСбор 		= Макет.ПолучитьОбласть("ШапкаСтр|КомСбор");

	ОбластьСтрокаОбщий 			= Макет.ПолучитьОбласть("Строка|Общий");
	ОбластьСтрокаКомСбор 		= Макет.ПолучитьОбласть("Строка|КомСбор");
	
	ОбластьИтогСтраницыОбщий 	= Макет.ПолучитьОбласть("ИтогСтраницы|Общий");
	ОбластьИтогСтраницыКомСбор 	= Макет.ПолучитьОбласть("ИтогСтраницы|КомСбор");

	ОбластьПодвалОбщий 			= Макет.ПолучитьОбласть("Подвал|Общий");
	ОбластьПодвалКомСбор 		= Макет.ПолучитьОбласть("Подвал|КомСбор");

	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтрокаОбщий);
	ВыводимыеОбласти.Добавить(ОбластьИтогСтраницыОбщий);
	
	// получим данные для печати
	ВыборкаПоШапкеДокумента = СформироватьЗапросДляПечати("ПоРеквизитам").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ОбластьШапка.Параметры.Заполнить(ВыборкаПоШапкеДокумента);	
	ОбластьШапка.Параметры.НомерДокумента 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьШапка.Параметры.ДатаДокумента 	= Формат(ВыборкаПоШапкеДокумента.ДатаДокумента, "ДФ='дд ММММ гггг'");
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда

		ОбластьШапка.Параметры.НазначениеПлатежа 	= "на перечисление заработной платы";
		ОбластьШапка.Параметры.ОписаниеПериода 		= "за " + УправлениеОтчетами.ПолноеОписаниеПериода(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодС), КонецМесяца(ВыборкаПоШапкеДокумента.ПериодПо), Ложь);
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

		ОбластьШапка.Параметры.НазначениеПлатежа 	= "на перечисление денежных средств в подотчет";
		ОбластьШапка.Параметры.ОписаниеПериода 		= "";
	
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// вспомогательные переменные
	ПроцентКомиссииБанка = ВыборкаПоШапкеДокумента.ПроцентКомиссииБанка;
	
	ИтогоПоСтраницеСуммаКВыплате 		= 0;
	ИтогоПоСтраницеКомСбор 				= 0;
	ИтогоПоСтраницеСуммаКПеречислению 	= 0;
	
	ИтогоСуммаКВыплате 		= 0;
	ИтогоКомСбор 			= 0;
	ИтогоСуммаКПеречислению = 0;
	
	НомерСтроки = 0;
	
	// по работникам
	ВыборкаПоРаботникам = СформироватьЗапросДляПечати("ПоТабличнойЧасти").Выбрать();

	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаВыписки<ДатаПрекращенияВыводаРНН;

	ОбластьШапкаСтрОбщий.Параметры.ТекстРНН_ИИН = ?(ВыводитьРНН, "РНН", "ИИН");
	
	// Первая страница
	ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
	Если ВключатьКомиссиюБанка Тогда
		ТабДокумент.Присоединить(ОбластьШапкаСтрКомСбор);
	КонецЕсли;

	//Цикл печати
	КоличествоСтрок 	= ВыборкаПоРаботникам.Количество(); 
	КоличествоСтраниц 	= 1;
	
	Пока ВыборкаПоРаботникам.Следующий() Цикл
		
	    Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти) Тогда
	    	КоличествоСтраниц = КоличествоСтраниц + 1;
	    	// конец страницы
	    	ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаКВыплате 		= ИтогоПоСтраницеСуммаКВыплате;
			ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеКомСбор 			= ИтогоПоСтраницеКомСбор;
			ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению;
			
			ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
			Если ВключатьКомиссиюБанка Тогда
				ТабДокумент.Присоединить(ОбластьИтогСтраницыКомСбор);
			КонецЕсли;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// начинается новая страница
			ТабДокумент.Вывести(ОбластьШапкаСтрОбщий);
			Если ВключатьКомиссиюБанка Тогда
				ТабДокумент.Присоединить(ОбластьШапкаСтрКомСбор);
			КонецЕсли;
			
			ИтогоПоСтраницеСуммаКВыплате 		= 0;
			ИтогоПоСтраницеКомСбор 				= 0;
			ИтогоПоСтраницеСуммаКПеречислению 	= 0;
	    КонецЕсли;
	
	    // новая строка
	    НомерСтроки = НомерСтроки + 1;
	    ОбластьСтрокаОбщий.Параметры.Заполнить(ВыборкаПоРаботникам);
	    ОбластьСтрокаОбщий.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтрокаОбщий.Параметры.РНН_ИИНРаботника = ?(ВыводитьРНН, ВыборкаПоРаботникам.РННРаботника, ВыборкаПоРаботникам.ИИНРаботника);
	    ТабДокумент.Вывести(ОбластьСтрокаОбщий);

		// копим итоги
		ИтогоПоСтраницеСуммаКВыплате 		= ИтогоПоСтраницеСуммаКВыплате + ВыборкаПоРаботникам.СуммаКВыплате;
		ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению + ВыборкаПоРаботникам.СуммаКВыплате;
	    
	    ИтогоСуммаКВыплате 		= ИтогоСуммаКВыплате + ВыборкаПоРаботникам.СуммаКВыплате;
	    ИтогоСуммаКПеречислению = ИтогоСуммаКПеречислению + ВыборкаПоРаботникам.СуммаКВыплате;
	    
	    Если ВключатьКомиссиюБанка Тогда
	    	Если НомерСтроки = КоличествоСтрок Тогда
	    		// корректируем последнюю строку для подгонки суммы комсбора под общую сумму по документу
	        	ОбластьСтрокаКомСбор.Параметры.КомСбор = ВыборкаПоШапкеДокумента.СуммаКомиссии - ИтогоКомСбор;
	        Иначе
	        	ОбластьСтрокаКомСбор.Параметры.КомСбор = Окр(ВыборкаПоРаботникам.СуммаКВыплате * ПроцентКомиссииБанка / 100, 2);
	        КонецЕсли;
	        ОбластьСтрокаКомСбор.Параметры.СуммаКПеречислению = ВыборкаПоРаботникам.СуммаКВыплате + ОбластьСтрокаКомСбор.Параметры.КомСбор;
	    	ТабДокумент.Присоединить(ОбластьСтрокаКомСбор);
	    	
	    	// копим итоги
	    	ИтогоПоСтраницеКомСбор 				= ИтогоПоСтраницеКомСбор + ОбластьСтрокаКомСбор.Параметры.КомСбор;
	    	ИтогоПоСтраницеСуммаКПеречислению 	= ИтогоПоСтраницеСуммаКПеречислению + ОбластьСтрокаКомСбор.Параметры.КомСбор;
	        
	    	ИтогоКомСбор 			= ИтогоКомСбор + ОбластьСтрокаКомСбор.Параметры.КомСбор;
	    	ИтогоСуммаКПеречислению = ИтогоСуммаКПеречислению + ОбластьСтрокаКомСбор.Параметры.КомСбор;
	    КонецЕсли;
	    
	КонецЦикла;

	// итог по последней странице
	Если КоличествоСтраниц > 1 Тогда
		ОбластьИтогСтраницыОбщий.Параметры.ИтогоПоСтраницеСуммаКВыплате 	   = ИтогоПоСтраницеСуммаКВыплате;
		ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеКомСбор 		   = ИтогоПоСтраницеКомСбор;
		ОбластьИтогСтраницыКомСбор.Параметры.ИтогоПоСтраницеСуммаКПеречислению = ИтогоПоСтраницеСуммаКПеречислению;
			
		ТабДокумент.Вывести(ОбластьИтогСтраницыОбщий);
		Если ВключатьКомиссиюБанка Тогда
			ТабДокумент.Присоединить(ОбластьИтогСтраницыКомСбор);
		КонецЕсли;
	КонецЕсли;

	// итоги в целом
	ОбластьПодвалОбщий.Параметры.ИтогоСуммаКВыплате = ИтогоСуммаКВыплате;
	ТабДокумент.Вывести(ОбластьПодвалОбщий);                                  
	Если ВключатьКомиссиюБанка Тогда
		ОбластьПодвалКомСбор.Параметры.ИтогоКомСбор 			= ИтогоКомСбор;
		ОбластьПодвалКомСбор.Параметры.ИтогоСуммаКПеречислению 	= ИтогоСуммаКПеречислению;
		ТабДокумент.Присоединить(ОбластьПодвалКомСбор);
	КонецЕсли;
	
	// подписи
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаПодразделение, Дата, Ответственный.ФизЛицо);
	ОбластьПодписи.Параметры.Заполнить(ОтветЛица);
	ОбластьПодписи.Параметры.ИтогоСуммаКПеречислениюПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаКПеречислению, СчетОрганизации.ВалютаДенежныхСредств);
	ТабДокумент.Вывести(ОбластьПодписи);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьСпискаНаКартСчета()

// Формирует печатную форму реестра к платежному поручению
//
// Параметры:
//  нет
//
Функция ПечатьРеестра() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			Сообщить("Не заполнен реквизит ""ГЦВП"".", СтатусСообщения.Важное);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
			Сообщить("Не заполнен реквизит ""ГФСС"".", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
	ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ДатаВыписки<ДатаПрекращенияВыводаРНН;
    
	//СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделениеОтправитель); //-=-=
	//-=-=
	СтруктурнаяЕдиницаОрганизация = Организация;
	//-=-=
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрКПлатежномуПоручению_РеестрКПлатежномуПоручению";
	
	Макет = ПолучитьМакет("Реестр");
	ОбластьШапки   			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкиФонда   	= Макет.ПолучитьОбласть("ШапкаФонда");
	
	ОбластьШапкиТаблицы  	= Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ВыводитьРНН, "", "_ИИН"));
	ОбластьСтроки  			= Макет.ПолучитьОбласть("СтрокаРаботника" + ?(ВыводитьРНН, "", "_ИИН"));
	
	Если ВыводитьРНН Тогда
		ОбластьПодвала 			= Макет.ПолучитьОбласть("Подвал|Подписи");
	Иначе 
		ОбластьПодвала			= Макет.ПолучитьОбласть("Подвал|Подписи_ИИН");
	КонецЕсли;
	
	ОбластьПодвалаИтог		= Макет.ПолучитьОбласть("Подвал|Итог");

	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьСтроки);
	
	// получим данные для печати
	ВыборкаПоШапкеДокумента = СформироватьЗапросДляПечати("ПоРеквизитам").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, ВыборкаПоШапкеДокумента.ДатаДокумента);
	ИмяПараметра = ?(ВыводитьРНН, "РНН", "БИН_ИИН");
	СведенияОбОрганизации[ИмяПараметра] = ?(ПустаяСтрока(РННПлательщика), СведенияОбОрганизации[ИмяПараметра], СокрЛП(РННПлательщика));

	ОбластьШапки.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	ОбластьШапкиФонда.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
	
	ОбластьШапки.Параметры.НомерДокумента  = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьШапки.Параметры.ДатаДокумента   = Формат(ВыборкаПоШапкеДокумента.ДатаДокумента, "ДФ='дд ММММ гггг'") + " г.";

	// переопределяем параметры организации
	ОбластьШапки.Параметры.НазваниеОрганизации = ?(ПустаяСтрока(ТекстПлательщика), ВыборкаПоШапкеДокумента.НазваниеОрганизации, СокрЛП(ТекстПлательщика));
	ОбластьШапки.Параметры.РНН_БИНОрганизации  = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, ВыборкаПоШапкеДокумента.ДатаДокумента);

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Если ПеречислениеПенсионныхВзносов.Количество() = 0 Тогда
			ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных пенсионных взносов";
		Иначе
			Ведомость = ПеречислениеПенсионныхВзносов[0]["Документ"];
			Если Ведомость.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных профессиональных пенсионных взносов";
			ИначеЕсли Ведомость.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных пенсионных взносов работодателя";
			Иначе
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление обязательных пенсионных взносов";
			КонецЕсли;
		КонецЕсли;
		ОбластьШапки.Параметры.РНН_БИНГЦВП  = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапкеДокумента.ГЦВП, ВыборкаПоШапкеДокумента.ДатаДокумента);
	Иначе
		Если ПеречислениеСоциальныхОтчислений.Количество() = 0 Тогда
			ОбластьШапки.Параметры.Наименование  = "Список на перечисление социальных отчислений";
		Иначе 
			Ведомость = ПеречислениеСоциальныхОтчислений[0]["Документ"];
			Если Ведомость.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление социальных отчислений";
			ИначеЕсли Ведомость.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление взносов обязательного социального медицинского страхования";
			ИначеЕсли Ведомость.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
				ОбластьШапки.Параметры.Наименование  = "Список на перечисление отчислений обязательного социального медицинского страхования";
			КонецЕсли;	
		КонецЕсли;
		ОбластьШапки.Параметры.РНН_БИНГЦВП	= ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(ВыборкаПоШапкеДокумента.ГЦВП, ВыборкаПоШапкеДокумента.ДатаДокумента); //?(ВыводитьРНН, "РНН: " + ВыборкаПоШапкеДокумента.РННГЦВП, "БИН: " + ВыборкаПоШапкеДокумента.БИНГЦВП);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапки);
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
	// по работникам
	ВыборкаПоРаботникам = СформироватьЗапросДляПечати("ПоТабличнойЧасти").Выбрать();
	
	// подсчитываем количество строк документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаПоРаботникам.Количество();
	
	НомерСтроки = 1; СуммаИтого = 0;
	Пока ВыборкаПоРаботникам.Следующий() Цикл
		Если ВыборкаПоРаботникам.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Заполнить(ВыборкаПоРаботникам);
		ОбластьСтроки.Параметры.НомерСтроки  	= НомерСтроки;
		ОбластьСтроки.Параметры.ПериодПлатежа 	= ВыборкаПоРаботникам.ПериодРегистрации;
		ОбластьСтроки.Параметры.РНН_ИИН			= ?(ВыводитьРНН, ВыборкаПоРаботникам.РНН, ВыборкаПоРаботникам.ИИН);
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если НЕ ВывестиПодвалЛиста И НомерСтроки = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьПодвала);
			ВывестиПодвалЛиста = НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ОбластьШапки);
			ТабДокумент.Вывести(ОбластьШапкиТаблицы);			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтроки);
		СуммаИтого  = СуммаИтого + ВыборкаПоРаботникам.Сумма;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// подвал
	ОбластьПодвалаИтог.Параметры.СуммаИтого	 = Формат(СуммаИтого, "ЧЦ=10; ЧДЦ=2; ЧРД=,");
	ОбластьПодвала.Параметры.КоличествоСтрок = ВсегоСтрокДокумента;
	ОбластьПодвала.Параметры.СуммаПрописью   = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
	
	ОтветЛица = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Дата, глЗначениеПеременной("глТекущийПользователь").ФизЛицо);
	ОбластьПодвала.Параметры.Руководитель = ОтветЛица.Руководитель;
	ОбластьПодвала.Параметры.ГлавныйБухгалтер = ?(ПустаяСтрока(ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов), "Не предусмотрен", ОтветЛица.ГлавныйБухгалтерДляПодписиБанковскихДокументов);

	ТабДокумент.Вывести(ОбластьПодвала);
    ТабДокумент.Присоединить(ОбластьПодвалаИтог);

	Возврат ТабДокумент;

КонецФункции // ПечатьРеестра()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда
		
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();

	ИначеЕсли ИмяМакета = "Реестр" тогда

		ТабДокумент = ПечатьРеестра();
		
	ИначеЕсли ИмяМакета = "СписокНаКартСчета" тогда

		ТабДокумент = ПечатьСпискаНаКартСчета();	
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("ПлатежноеПоручение", "Платежное поручение"); 	

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
	 
		СтруктураПечатныхФорм.Вставить("Реестр", "Реестр к платежному поручению");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		  
		СтруктураПечатныхФорм.Вставить("СписокНаКартСчета", "Список в банк");
	КонецЕсли;

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет счета учета БУ и НУ в документе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа(АвтоподстановкаСуммыНДС = "СуммаИНДС") Экспорт
		#Если Клиент ИЛИ ВнешнееСоединение Тогда
		
	НазваниеВалюты = НРег(СчетОрганизации.ВалютаДенежныхСредств.НаименованиеПолное);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
	
		СтрокаТекста = "";
		ПериодРегистрацииПеречислений = НачалоМесяца(Дата);
		
		СведенияОКонтрагенте = ОбщегоНазначения.СведенияОЮрФизЛице(Контрагент, Дата, , СчетКонтрагента);
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			// Перечисление пенсионных взносов
			Если (ПеречислениеПенсионныхВзносов.Количество() > 0) Тогда
				ДокументДляПеречисления = ПеречислениеПенсионныхВзносов[0].Документ;
				ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;
				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
					Если ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
						ВидОПВ = "ОПВ";
					ИначеЕсли ДокументДляПеречисления.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
						ВидОПВ = "ОПВР";
					Иначе
						ВидОПВ = "ОППВ";
					КонецЕсли;
					Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
					 ИЛИ ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда 
						СтрокаТекста = "Пеня за несвоевременное перечисление обязательных " + ?(ВидОПВ = "ОПВ", "", "профессиональных ") + "пенсионных взносов";
						Если ВидОПВ = "ОПВ" Тогда
							КодНазначенияПлатежа = "019";
						ИначеЕсли ВидОПВ = "ОПВР" Тогда
							КодНазначенияПлатежа = "098";
						Иначе
							КодНазначенияПлатежа = "009";
						КонецЕсли;
					ИначеЕсли ВидОПВ = "ОПВ" Тогда
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.КодНазначенияПлатежа;					
					ИначеЕсли ВидОПВ = "ОПВР" Тогда
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.КодНазначенияПлатежа;
					Иначе
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.КодНазначенияПлатежа;					
					КонецЕсли;
					
					Если СтрокаТекста =  "" Тогда
						Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
							Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																							Организация,
																							глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																							Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
						Иначе
							Налогоплательщик = Организация;
						КонецЕсли;
						
						Если ВидОПВ = "ОПВ" Тогда
							СтавкаОПВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
							СтрокаТекста = Строка(СтавкаОПВ) + "% обязательные пенсионные взносы";
						ИначеЕсли ВидОПВ = "ОПВР" Тогда
							СтавкаОПВР = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, ПериодРегистрацииПеречислений);
							СтрокаТекста = Строка(СтавкаОПВР) + "% обязательные пенсионные взносы работодателя";
						Иначе 
							СтавкаОППВ = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрацииПеречислений);
							СтрокаТекста = Строка(СтавкаОППВ) + "% обязательные профессиональные пенсионные взносы";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Перечисление социальных отчислений
			Если (ПеречислениеСоциальныхОтчислений.Количество() > 0) Тогда
				ДокументДляПеречисления = ПеречислениеСоциальныхОтчислений[0].Документ;
				ПериодРегистрацииПеречислений = ДокументДляПеречисления.ПериодРегистрации;
				Если ЗначениеЗаполнено(ДокументДляПеречисления) Тогда
					ВидСоцСтрахования = ДокументДляПеречисления.ВидОперации;
					
					Если ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт
						Или ДокументДляПеречисления.ВидПлатежа = Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам Тогда
						
						Если ВидСоцСтрахования = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
							СтрокаТекста = "Пеня за несвоевременное перечисление социальных отчислений";
							КодНазначенияПлатежа = "017";
						ИначеЕсли ВидСоцСтрахования = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
							СтрокаТекста = "Пеня за несвоевременное перечисление отчислений на обязательное социальное медицинское страхование";
							КодНазначенияПлатежа = "123";
						Иначе
							СтрокаТекста = "Пеня за несвоевременное перечисление взносов на обязательное социальное медицинское страхование";
							КодНазначенияПлатежа = "124";
						КонецЕсли;
					ИначеЕсли ВидСоцСтрахования = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
						СтрокаТекста = "Социальные отчисления";
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.КодНазначенияПлатежа;
					ИначеЕсли ВидСоцСтрахования = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
						СтрокаТекста = "Взносы на обязательное социальное медицинское страхование";
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;
					Иначе
						СтрокаТекста = "Отчисления на обязательное социальное медицинское страхование";
						КодНазначенияПлатежа = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.КодНазначенияПлатежа;
					КонецЕсли;
					
				КонецЕсли;			 
				
				СтрокаТекста = СтрокаТекста + " в " + СокрЛП(СведенияОКонтрагенте.ПолноеНаименование);
			КонецЕсли;
			
		КонецЕсли;

		СтрокаТекста = СтрокаТекста + " за период " + НРег(Формат(ПериодРегистрацииПеречислений, "ДФ='ММММ гггг'")) + " г.";
		
	   	НазначениеПлатежа = СтрокаТекста + "  cогласно прилагаемого списка. НДС не облагается.";
		
		Если ВключатьКомиссиюБанка Тогда

			НазначениеПлатежа 	= НазначениеПлатежа + " В том числе комиссия банка " + ПроцентКомиссии + "%. " 
									+ "Комиссионное вознаграждение банка " + Формат(СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + НазваниеВалюты + ".";
		
		
		КонецЕсли;

	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда 
	
		ТекстНазначение = "Для зачисления на картсчета сотрудникам согласно спискам ";
				
		Если ВключатьКомиссиюБанка Тогда

			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
				СуммаПоВедомостям	= ПеречислениеЗаработнойПлаты.Итог("СуммаКВыплате");
			Иначе
				СуммаПоВедомостям	= ПеречислениеВПодотчет.Итог("СуммаПлатежа");
			КонецЕсли;
				ТекстНазначение 	= ТекстНазначение + Формат(СуммаПоВедомостям + СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + НазваниеВалюты + ". "
									+ "В том числе комиссия банка " + ПроцентКомиссии + "%. " 
									+ "Комиссионное вознаграждение банка " + Формат(СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + НазваниеВалюты + ".";
		
		Иначе
			ТекстНазначение = ТекстНазначение + Формат(СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + НазваниеВалюты;
		КонецЕсли;
		
		НазначениеПлатежа = ТекстНазначение;
		
	Иначе
		// Все прочие виды операций по единому образцу
		
		// Удаляем ранее включенные в текст сведения о сумме платежа и НДС
		АдресСуммы=Найти(НазначениеПлатежа,"Сумма");
		
		Если АдресСуммы > 0 Тогда
			ТекстНазначение=Лев(НазначениеПлатежа,АдресСуммы-2);
		Иначе
			ТекстНазначение=НазначениеПлатежа;
		КонецЕсли;
		
		АдресНДС = Найти(ТекстНазначение,"в т.ч. НДС");
		
		Если АдресНДС > 0 Тогда
			ТекстНазначение=Лев(ТекстНазначение,АдресНДС-2);		
		КонецЕсли;
		
		АдресКомиссии = Найти(ТекстНазначение,"В том числе комиссия");
		
		Если АдресКомиссии > 0 Тогда
			ТекстНазначение=Лев(ТекстНазначение,АдресКомиссии-2);		
		КонецЕсли;

		// формируем текст назначения по данным счета контрагента, если такая возможность есть
		Если ТекстНазначение = "" И НЕ СчетКонтрагента.Пустая() Тогда
			ТекстНазначение = СчетКонтрагента.ТекстНазначения;
		КонецЕсли;	
		
		// добавляем в текст сведения о сумме платежа, в соответствии с форматом автоподставновки, выбранным пользователем		
		ТекстСумма = "";
		
		Если ВключатьКомиссиюБанка Тогда

			СуммаДляПлатежа	= СуммаДокумента + СуммаКомиссии;
		Иначе
			СуммаДляПлатежа	= СуммаДокумента;		
		КонецЕсли;
		           
		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" или АвтоподстановкаСуммыНДС = "Сумма" Тогда
			ТекстСумма = "Сумма " + ОбщегоНазначения.ФорматСумм(СуммаДляПлатежа, ВалютаДокумента, "0-00","", "-", Истина);			
		КонецЕсли;	
		
		// добавляем в текст сведения о сумме НДС, в соответствии с форматом автоподставновки, выбранным пользователем
		Если АвтоподстановкаСуммыНДС = "СуммаИНДС" ИЛИ АвтоподстановкаСуммыНДС = "НДС" Тогда
			ТабНДС = РасшифровкаПлатежа.Выгрузить();		
			ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");			
			
			Для Каждого СтрокаНДС Из ТабНДС Цикл    				
				ТекстСумма = ТекстСумма + " в т.ч. НДС(" + ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + ОбщегоНазначения.ФорматСумм(СтрокаНДС.СуммаНДС, ВалютаДокумента, "0-00","", "-", Истина) ;				
			КонецЦикла;
		КонецЕсли;
		
		НазначениеПлатежа=ТекстНазначение + ?(НЕ ТекстСумма = "", Символы.ПС + ТекстСумма, ".");
		Если (АвтоподстановкаСуммыНДС = "СуммаИНДС"  или АвтоподстановкаСуммыНДС = "Сумма") 
			 И  ВключатьКомиссиюБанка  И НЕ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
			 						   ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
									   ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
									   ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты)Тогда
			 НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + "В том числе комиссия банка " + ПроцентКомиссии + "%. " 
			 					+ "Комиссионное вознаграждение банка " + Формат(СуммаКомиссии, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + " " + НазваниеВалюты + ".";
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	#КонецЕсли	
	
КонецПроцедуры // СформироватьНазначениеПлатежа()                                                                      

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ДОКУМЕНТА

// Выполняет проверку заполнения необходимых реквизитов документа
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок)
	
	СтруктураОбязательныхПолейРасчетыУпр=Новый Структура;
	СтруктураОбязательныхПолейРасчетыУпр.Вставить("СчетБанк");
	СтруктураОбязательныхПолейРасчетыУпр.Вставить("СчетОрганизации");
	СтруктураОбязательныхПолейРасчетыУпр.Вставить("СуммаДокумента");

	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр, Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли; 	

	
	СтруктураПолей = Новый Структура("Организация", "Не указано значение организации.");
	
	СтруктураПолей.Вставить("СчетБанк");
	СтруктураПолей.Вставить("СчетОрганизации");
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СуммаДокумента");
	Иначе  		
		Если СуммаДокумента + СуммаКомиссии = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указана ни одна из сумм (сумма документа, сумма комиссии)! Для проведения документа одна из сумм должна быть заполнена!",Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли; 	        	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;

	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента");
	КонецЕсли;  	
	
	Если СтруктураШапкиДокумента.ВключатьКомиссиюБанка И Не СуммаКомиссии =0 Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет затрат для отнесении комиссии банка.");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет затрат налогового учета для отнесении комиссии банка.");
		КонецЕсли; 	 	
	
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не заполнено значение реквизита ""Счет""");
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
	 		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств) Тогда
			
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не заполнено значение реквизита ""Счет (НУ)""");
		КонецЕсли;
					
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		СтруктураПолей.Вставить("Контрагент");		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда

		СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГЦВП""");		

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

		СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГФСС""");		
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не заполнено значение реквизита ""Банковский счет получателя""");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда		
		
		// синонимы колонок табличной части для вывода диагностических сообщений				
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ,ДоговорКонтрагента");
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЕстьРасчетыПоКредитам Тогда				
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли; 	
		
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, Платеж.ДоговорКонтрагента, 
			Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выплата заработной платы может осуществляться только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок)
		КонецЕсли;
	
		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ВЫБОР  
		|		КОГДА НЕ(РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченныеСуммы.Регистратор
		|		ИНАЧЕ
		|			NULL
		|	КОНЕЦ КАК КонфликтныйДокумент
		|			
		|	
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка       = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Пока РезультатЗапроса.Следующий() Цикл
			Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": ведомость уже включена в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ЗарплатаКВыплате.Сумма+ЗарплатаКВыплате.ДепонированнаяСумма), 0) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Выплачено",	Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);		
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		НеСоответствиеСумм = Ложь;
		Если НЕ Результат.Следующий() Тогда
			НеСоответствиеСумм = Истина;
		ИначеЕсли Результат.СуммаВыплачено <> СтруктураШапкиДокумента.СуммаДокумента Тогда
				  
			НеСоответствиеСумм = Истина;
		КонецЕсли;
		
		Если НеСоответствиеСумм Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы "+?(СтруктураШапкиДокумента.ВключатьКомиссиюБанка, "(с учетом комиссиии банка)", ""), Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВключатьКомиссиюБанка  И Не СтруктураШапкиДокумента.СуммаКомиссии = 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат для отнесения комиссии банка!",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		 
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			  
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументСсылка",      Ссылка);
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОПВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |        	И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОПВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов)
						   |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |// ОППВ
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОППВРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
			               |
						   |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОППВРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов)
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |// ОПВР
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ПО ОПВРРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка
						   |			И ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
			               |
						   |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ,
			               |	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
			               |		ПО ОПВРРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка
						   |			И АвансовыйОтчетПеречислениеПенсионныхВзносов.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя)
						   |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ = РанееИспользованныеВедомости.Ведомость
			               |ГДЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &ДокументСсылка";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": документ уже включен в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеПенсионныхВзносов.Документ.ВидОперации КАК ВидОперации
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПеречислениеПенсионныхВзносов
			               |ГДЕ
			               |	ПеречислениеПенсионныхВзносов.Ссылка = &ДокументСсылка";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Списки на перечисление пенсионных взносов"" указаны ведомости с различными видами операций:
													|нельзя выполнять платеж одним документом по разным видам пенсионных взносов (ОПВ и ОППВ, ОПВР).", Отказ, Заголовок);
			КонецЕсли;
			
			ИмяСписочногоДокумента = "ОПВПеречислениеВФонды";
			ИмяТаблЧастиСписочногоДокумента = "ПенсионныеВзносы";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеПенсионныхВзносов";			
			НачалоТекстСообщения = "Перечисление пенсионных взносов";
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
			
			// Проверка на то, что документы, введенные в табличную часть не указаны ни в одном другом проведенном документе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументСсылка",      Ссылка);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Регистратор
			               |ПОМЕСТИТЬ ВТ_РанееИспользованныеВедомости
			               |ИЗ
			               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО СОРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО СОРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО ООСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО ООСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ,
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ПО ВОСМСРасчетыСФондами.Регистратор = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ,
			               |	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |ИЗ
			               |	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
			               |		ПО ВОСМСРасчетыСФондами.Регистратор = АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка
			               |			И (АвансовыйОтчетПеречислениеСоциальныхОтчислений.Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС))
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ведомость
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ КАК Ведомость,
			               |	РанееИспользованныеВедомости.Регистратор КАК КонфликтныйДокумент
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РанееИспользованныеВедомости КАК РанееИспользованныеВедомости
			               |		ПО ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ = РанееИспользованныеВедомости.Ведомость
			               |ГДЕ
			               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &ДокументСсылка";
			РезультатЗапроса = Запрос.Выполнить().Выбрать();

			Пока РезультатЗапроса.Следующий() Цикл
				Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": документ уже включен в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			// Проверка на одинаковый вид операции в ведомости
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	ПеречислениеСоциальныхОтчислений.Документ.ВидОперации КАК ВидОперации
			               |ИЗ
			               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПеречислениеСоциальныхОтчислений
			               |ГДЕ
			               |	ПеречислениеСоциальныхОтчислений.Ссылка = &ДокументСсылка";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Количество() > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Списки на перечисление взносов и отчислений социального страхования"" указаны ведомости с различными видами операций:
													|нельзя выполнять платеж одним документом по разным видам социального страхования (СО, Отчисления ОСМС, Взносы ОСМС).", Отказ, Заголовок);
			КонецЕсли;

			ИмяСписочногоДокумента = "СОПеречислениеВФонды";
			ИмяТаблЧастиСписочногоДокумента = "СоциальныеОтчисления";
			ИмяПоля = "Сумма";
			ИмяТаблЧастиППИ = "ПеречислениеСоциальныхОтчислений";
			НачалоТекстСообщения = "Перечисление социальных отчислений";
		
		Иначе
			ИмяСписочногоДокумента = "ИЛПеречислениеПолучателям";
			ИмяТаблЧастиСписочногоДокумента = "ИсполнительныеЛисты";
			ИмяПоля = "СуммаПлатежа";
			ИмяТаблЧастиППИ = "ПеречислениеПоИсполнительнымЛистам";
			НачалоТекстСообщения = "Перечисление по исполнительным листам";
		
		КонецЕсли;  
		  
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке(НачалоТекстСообщения + " может осуществляться только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок)
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(" + ИмяПоля + ") КАК Сумма
		|ИЗ
		|	Документ." + ИмяСписочногоДокумента + "." + ИмяТаблЧастиСписочногоДокумента + " КАК Док
		|
		|ГДЕ
		|	Док.Ссылка В (ВЫБРАТЬ
		|						ППИ.Документ
		|					ИЗ
		|						Документ.ПлатежноеПоручениеИсходящее." + ИмяТаблЧастиППИ + " КАК ППИ
		|					ГДЕ
		|						ППИ.Ссылка = &ДокументСсылка)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СуммаПоСпискам = Выборка.Сумма;
		Иначе
			СуммаПоСпискам = 0;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.СуммаДокумента <> СуммаПоСпискам Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма платежного поручения не совпадает с суммой по спискам на перечисление!", Отказ, Заголовок);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

		СтруктураПолей = Новый Структура("СчетУчета,ФизЛицо",
											"Счет учета", 
											"Подотчетник");
			
		ВыводитьНомераСтрокВСообщении = ПеречислениеВПодотчет.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПеречислениеВПодотчет", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);
		
		СуммаВПодотчет 		= ПеречислениеВПодотчет.Итог("СуммаПлатежа");
		НеСоответствиеСумм 	= Ложь;
		Если  СуммаВПодотчет <> СтруктураШапкиДокумента.СуммаДокумента Тогда				   
			НеСоответствиеСумм = Истина;
		КонецЕсли;

		Если НеСоответствиеСумм Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и суммы по списку на перечисление "+?(СтруктураШапкиДокумента.ВключатьКомиссиюБанка, "(с учетом комиссиии банка)", ""), Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВключатьКомиссиюБанка И Не СтруктураШапкиДокумента.СуммаКомиссии = 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат для отнесения комиссии банка!",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеДокумента()

// Выполняет заполнение документа
// по данным документа-основания
Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты;
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
		Организация        = Основание.Организация;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		// Определим суммы к выплате
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СсылкаПП", 	Ссылка);
		Запрос.УстановитьПараметр("Основание", 	Основание);
		Запрос.УстановитьПараметр("Выплачено", 	Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("ЧерезБанк", 	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
		|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаКВыплате
		|
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|	ПО ЗарплатаКВыплате.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|	   И ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|	   И РанееВыплаченныеСуммы.Регистратор <> &СсылкаПП
		|ГДЕ
		|	ЗарплатаКВыплате.Ссылка = &Основание И
		|	ЗарплатаКВыплате.Ссылка.СпособВыплаты = &ЧерезБанк И
		|	РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.КоличествоСтрок > 0 Тогда
				СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
				СтрокаВедомость.Ведомость     = Основание;
				СтрокаВедомость.СуммаКВыплате = РезультатЗапроса.СуммаКВыплате;
				СуммаДокумента				  = РезультатЗапроса.СуммаКВыплате;
			КонецЕсли;
		КонецЕсли;

		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ЗначениеЗаполнено(Основание.Банк) Тогда
			// поищем соответствующий банк в справочнике контрагентов
			// по наличию банковского счета в банке, совпадающим с Основание.Банк,
			// и ИИН контрагента = ИИН банка
			Запрос.УстановитьПараметр("парамБанк", 				Основание.Банк);
			Запрос.УстановитьПараметр("парамВалютаРеглУчета", 	мВалютаРегламентированногоУчета);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	БанковскиеСчета.Владелец КАК Контрагент,
			|	БанковскиеСчета.Владелец.РНН КАК РНН,
			|	БанковскиеСчета.Владелец.ИдентификационныйКодЛичности КАК ИИН,
			|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
			|	БанковскиеСчета.Ссылка КАК СчетКонтрагента
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Банк = &парамБанк И
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты И
			|	(БанковскиеСчета.ВалютаДенежныхСредств.Ссылка ЕСТЬ NULL ИЛИ БанковскиеСчета.ВалютаДенежныхСредств = &парамВалютаРеглУчета)
			|";
			
			ЕстьДанные = Ложь;
			Если ЗначениеЗаполнено(Основание.Банк.Контрагент) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.Ссылка = БанковскиеСчета.Банк.Контрагент";
				ЕстьДанные = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(Основание.Банк.ИдентификационныйНомер) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.ИдентификационныйКодЛичности = БанковскиеСчета.Банк.ИдентификационныйНомер";
				ЕстьДанные = Истина;
				
			ИначеЕсли ЗначениеЗаполнено(Основание.Банк.РНН) Тогда
				
				Запрос.Текст = Запрос.Текст + " И БанковскиеСчета.Владелец.РНН = БанковскиеСчета.Банк.РНН";
				ЕстьДанные = Истина;
				
			КонецЕсли;
			
			Если ЕстьДанные Тогда 
				ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
				ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ ОбщегоНазначения.ПолучитьРабочуюДату() < ДатаПрекращенияВыводаРНН;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент 		= Выборка.Контрагент;
					СчетКонтрагента = Выборка.СчетКонтрагента;
					РННПолучателя	= ?(ВыводитьРНН, Выборка.РНН, Выборка.ИИН);
					ТекстПолучателя = Выборка.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ОПВПеречислениеВФонды")) Тогда
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Контрагент = Основание.Контрагент;
		Если Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  = ПеречислениеПенсионныхВзносов.Добавить();
		СтрокаСписок.Документ			= Основание;
		СтрокаСписок.СуммаКПеречислению = Основание.ПенсионныеВзносы.Итог("Сумма");
		СуммаДокумента 					= СтрокаСписок.СуммаКПеречислению;
		
		БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();		
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.СОПеречислениеВФонды")) Тогда
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаСписок  					= ПеречислениеСоциальныхОтчислений.Добавить();
		СтрокаСписок.Документ			= Основание;
		СтрокаСписок.СуммаКПеречислению = Основание.СоциальныеОтчисления.Итог("Сумма");
		СуммаДокумента 					= СтрокаСписок.СуммаКПеречислению;
		
		Контрагент = Основание.Контрагент;
		Если Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям") Тогда
		
		ВидОперации        = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам;
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
		Организация        = Основание.Организация;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		// Определим суммы к перечислению
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Основание", Основание);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ИЛПеречислениеПолучателям.Получатель) КАК КоличествоСтрок,
		|	МАКСИМУМ(ИЛПеречислениеПолучателям.Получатель) КАК Получатель,
		|	МАКСИМУМ(ИЛПеречислениеПолучателям.ДокументОснование) КАК ДокументОснование,
		|	ЕСТЬNULL(СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов), 0) КАК СуммаВзаиморасчетов,
		|	ЕСТЬNULL(СУММА(ИЛПеречислениеПолучателям.СуммаСборов), 0) КАК СуммаСборов
		|
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
		|ГДЕ
		|	ИЛПеречислениеПолучателям.Ссылка = &Основание
		|";
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			СтрокаСписок = ПеречислениеПоИсполнительнымЛистам.Добавить();
			СтрокаСписок.Документ	  		= Основание;
			СтрокаСписок.СуммаКПеречислению = РезультатЗапроса.СуммаВзаиморасчетов;
			СтрокаСписок.СуммаСборов 		= РезультатЗапроса.СуммаСборов;
			СтрокаСписок.СуммаПлатежа 		= РезультатЗапроса.СуммаВзаиморасчетов + РезультатЗапроса.СуммаСборов;
			
			СуммаДокумента				    = СтрокаСписок.СуммаПлатежа;
			
			Если РезультатЗапроса.КоличествоСтрок = 1 Тогда
				// Подставим контрагента в шапку документа
				Контрагент 			= РезультатЗапроса.Получатель;
				СчетКонтрагента 	= ?(ЗначениеЗаполнено(Контрагент), Контрагент.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
				РННПолучателя  		= Контрагент.РНН;
				ТекстПолучателя  	= Контрагент.НаименованиеПолное;
			КонецЕсли;
		КонецЕсли;

		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасчетПениОПВиСО") Тогда

		Если Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ
		 ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ 
		 ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ
		 ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ 
		 ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР
		 ИЛИ Основание.ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов;
			
			ИмяСписочногоДокумента = "ОПВПеречислениеВФонды";
			ИмяТабличнойЧастиСписочногоДокумента = "ПенсионныеВзносы";
			ИмяТабличнойЧастиППИ = "ПеречислениеПенсионныхВзносов";
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений;
			
			ИмяСписочногоДокумента = "СОПеречислениеВФонды";
			ИмяТабличнойЧастиСписочногоДокумента = "СоциальныеОтчисления";
			ИмяТабличнойЧастиППИ = "ПеречислениеСоциальныхОтчислений";
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
		КонецЕсли;
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		БанкПосредник = Справочники.Контрагенты.ПустаяСсылка();

		// создадим столько документов ОПВ(СО)ПеречислениеВФонды, сколько месяцев налогового периода существует в расчете пени
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Основание);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ИсчислениеПени.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо,
		|	ИсчислениеПени.Ссылка.ВидОперации КАК ВидОперации,
		|	СУММА(ИсчислениеПени.Сумма) КАК Сумма
		|ИЗ
		|	Документ.РасчетПениОПВиСО.ИсчислениеПени КАК ИсчислениеПени
		|ГДЕ
		|	ИсчислениеПени.Ссылка = &Основание
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсчислениеПени.МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо,
		|	ИсчислениеПени.Ссылка.ВидОперации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсчислениеПени.МесяцНалоговогоПериода,
		|	ИсчислениеПени.ФизЛицо.Наименование
		|
		|ИТОГИ СУММА(Сумма), МАКСИМУМ(ВидОперации) ПО
		|	МесяцНалоговогоПериода
		|";
		
		ВыборкаМесяцНалоговогоПериода = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СуммаДокумента = 0;
		
		Пока ВыборкаМесяцНалоговогоПериода.Следующий() Цикл
		
			#Если Клиент Тогда
			Состояние("Создание документов перечисления за " + Формат(ВыборкаМесяцНалоговогоПериода.МесяцНалоговогоПериода, "ДФ='ММММ гггг'"));
			#КонецЕсли
		
			НовыйДок = Документы[ИмяСписочногоДокумента].СоздатьДокумент();
			НовыйДок.Дата = Основание.Дата;
		
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДок, Основание);
			
			НовыйДок.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			НовыйДок.ВидПлатежа = Основание.ВидПлатежа;
			НовыйДок.ДокументОснование = Основание;
			НовыйДок.ПериодРегистрации = ВыборкаМесяцНалоговогоПериода.МесяцНалоговогоПериода;
			НовыйДок.Комментарий = "Создан автоматически при перечислении пени по документу " + Строка(Основание);
			
			НовыйДок.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюОПВ.ПоЗадолженностиЗаМесяц;
			
			// заполним вид операции
			Если ИмяСписочногоДокумента = "ОПВПеречислениеВФонды" Тогда
				Если НЕ ЗначениеЗаполнено(НовыйДок.ВидОперации) Тогда 					
					Если Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВ = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВР = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОПВР = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя;
					ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениОППВ = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда
						НовыйДок.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов;
					КонецЕсли;					
				КонецЕсли;						
			КонецЕсли;
			
			Если ИмяСписочногоДокумента = "СОПеречислениеВФонды" Тогда 					
				Если Перечисления.ВидыОперацийРасчетПени.РасчетПениСО = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениСО = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
					НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
				ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениВОСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
					НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС;
				ИначеЕсли Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации ИЛИ Перечисления.ВидыОперацийРасчетПени.РаспределениеПениООСМС = ВыборкаМесяцНалоговогоПериода.ВидОперации Тогда 
					НовыйДок.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС;
				КонецЕсли; 							
			КонецЕсли;

			// заполняем табличную часть списочного документа
			Выборка = ВыборкаМесяцНалоговогоПериода.Выбрать();
			Пока Выборка.Следующий() Цикл								
				Если Выборка.Сумма > 0 Тогда					
					НоваяСтрока = НовыйДок[ИмяТабличнойЧастиСписочногоДокумента].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НовыйДок.СуммаДокумента = НовыйДок.СуммаДокумента + НоваяСтрока.Сумма;
					СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;											
				КонецЕсли;
			КонецЦикла;			
			
			// сохраняем документ в базе 
			НовыйДок.Записать();
			
			// включаем его в состав табличной части текущего платежного поручения
			НоваяСтрока = ЭтотОбъект[ИмяТабличнойЧастиППИ].Добавить();
			НоваяСтрока.Документ = НовыйДок.Ссылка;
			НоваяСтрока.СуммаКПеречислению = НовыйДок.СуммаДокумента;
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами;
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = Основание.Организация;
			Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОтправитель) Тогда
				СтруктурноеПодразделениеОтправитель = Основание.СтруктурноеПодразделение;
			КонецЕсли;
		КонецЕсли;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СуммаИПН 		= ?(Основание.УчитыватьИПН	, Основание.ИсчисленныйИПН.Итог("Налог"), 0);
		СуммаВОСМС 		= ?(Основание.УчитыватьВОСМС, Основание.ИсчисленныеВОСМС.Итог("Взнос"), 0);
		СуммаОПВ 		= ?(Основание.УчитыватьОПВ,   Основание.ИсчисленныйОПВ.Итог("Взнос"), 0);

		СуммаДокумента	= Основание.СуммаДокумента - СуммаИПН - СуммаВОСМС - СуммаОПВ;
		
		// Подставим получателя
		Контрагент = Основание.Контрагент;
		РННПолучателя  	= Контрагент.РНН;
		ТекстПолучателя  	= Контрагент.НаименованиеПолное;
			
		Если Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		СтрокаПлатеж.ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомБУ = Основание.СчетУчетаРасчетовСКонтрагентом;
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Основание.СчетУчетаРасчетовСКонтрагентом));
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = Основание.СчетУчетаРасчетовПоАвансам;

	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьДокументПоОснованиюРегл()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	/// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
			
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	ДокументОснование           = ПараметрыДокументаОснования.Ссылка;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;
	
	Если ВидДокументаОснования = "ПоступлениеТоваровУслуг"
		ИЛИ ВидДокументаОснования = "ПоступлениеДопРасходов" 
		ИЛИ ВидДокументаОснования = "ПоступлениеНМА"
		ИЛИ	ВидДокументаОснования = "ВозвратТоваровОтПокупателя" 
		ИЛИ ВидДокументаОснования = "ПоступлениеИзПереработки"  Тогда
		
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя"  Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидДокументаОснования = "ПоступлениеТоваровУслуг" И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОтСтруктурногоПодразделения Тогда
			ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли; 
		
		Контрагент 			  = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента 	  = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов  = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
		СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		
		Если ВидДокументаОснования = "ПоступлениеДопРасходов" Тогда
			Если НЕ(ПараметрыДокументаОснования.Сумма = 0 И ПараметрыДокументаОснования.СуммаНДС = 0)  тогда
				Если СуммаДокументаОснования.Количество() = 0 Тогда
					СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
				Иначе
					СтрокаТаблицыСумм = СуммаДокументаОснования[0];
				КонецЕсли;
				СтрокаТаблицыСумм.СуммаПлатежа	= СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.Сумма;
				СтрокаТаблицыСумм.СуммаНДС		= СтрокаТаблицыСумм.СуммаНДС + ПараметрыДокументаОснования.СуммаНДС;
				Если НЕ ПараметрыДокументаОснования.СуммаВключаетНДС Тогда
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ПараметрыДокументаОснования.СуммаНДС;
				КонецЕсли; 
			КонецЕсли;
			СуммаДокументаОснования.ЗаполнитьЗначения(ПараметрыДокументаОснования.СтавкаНДС,"СтавкаНДС");
		КонецЕсли;		
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,						"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,		"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,	"КратностьВзаиморасчетов");
		
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
		
		Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		// реквизиты нзываются иначе
		Если ВидДокументаОснования = "ВозвратТоваровОтПокупателя" Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, 	"СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, 	"СчетУчетаРасчетовПоАвансам") ;        			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, 	"СчетУчетаРасчетовСКонтрагентомБУ") ;			
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, 		"СчетУчетаРасчетовПоАвансам") ;        			
		КонецЕсли;
	
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента 	= РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж 	= РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")
			  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОПВПеречислениеВФонды")
			  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СОПеречислениеВФонды") 
			  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ИЛПеречислениеПолучателям")
			  ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РасчетПениОПВиСО") 
			  ИЛИ ТипЗНЧ(Основание) = Тип("ДокументСсылка.РасчетНалоговПриПоступленииАктивовУслуг") Тогда
		
		ЗаполнитьДокументПоОснованиюРегл(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ден_ЗаявкаНаРасходованиеСредств") Тогда

		Если НЕ Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
			куфиб_ОбщегоНазначения.СообщитьПользователю("Заявка оформлена на расходование наличных денежных средств.");
			Возврат;
		КонецЕсли;

		ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание);
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") Тогда	
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СУММА(СуммаНДСТабличнойЧасти.СуммаНДС) КАК СуммаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодБК КАК КодБК,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.Контрагент КАК Контрагент,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетУчетаРасчетовСКонтрагентомБУ,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетКонтрагента КАК СчетКонтрагента,
		                      |	ВЫРАЗИТЬ(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа
		                      |ИЗ
		                      |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			СУММА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС) КАК СуммаНДС
		                      |		ИЗ
		                      |			Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
		                      |		ГДЕ
		                      |			ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ВидНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета)
		                      |			И ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
		                      |		
		                      |		ОБЪЕДИНИТЬ ВСЕ
		                      |		
		                      |		ВЫБРАТЬ
		                      |			СУММА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС)
		                      |		ИЗ
		                      |			Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
		                      |		ГДЕ
		                      |			ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ВидНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыНДС.НДСМетодомЗачета)
		                      |			И ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка) КАК СуммаНДСТабличнойЧасти
		                      |		ПО (ИСТИНА)
		                      |ГДЕ
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка = &Ссылка
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ВЫРАЗИТЬ(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.НазначениеПлатежа КАК СТРОКА(1000)),
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодБК,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.КодНазначенияПлатежа,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.Контрагент,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетКонтрагента,
		                      |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ВидНалогаНДС.СчетУчетаРасчетовСКонтрагентомБУ");
		Запрос.УстановитьПараметр("Ссылка", Основание);					  
		ВыборкаПоОснованию = Запрос.Выполнить().Выбрать();
		ВыборкаПоОснованию.Следующий();
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;		
		ВалютаДокумента = мВалютаРегламентированногоУчета;		
		КурсДокумента           = 1;
		КратностьДокумента      = 1;
		ВидНалога 				= ВыборкаПоОснованию.ВидНалогаНДС;
		СуммаДокумента			= ВыборкаПоОснованию.СуммаНДС;
		
		КодБК 					= ВыборкаПоОснованию.КодБК;
		КодНазначенияПлатежа 	= ВыборкаПоОснованию.КодНазначенияПлатежа;
		Контрагент 				= ВыборкаПоОснованию.Контрагент;		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		
		ОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Контрагент.ОсновнойДоговорКонтрагента);		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованию.Контрагент) Тогда			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;       			
		ИначеЕсли НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда			
			Если Организация.Пустая() Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				Организация = ОсновнойДоговорКонтрагента.Организация;				
			ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
				ИЛИ ОсновнойДоговорКонтрагента.Организация = Организация Тогда				
				СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента; 				
			КонецЕсли;			
		КонецЕсли;    		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;		
		СчетКонтрагента	 				= ВыборкаПоОснованию.СчетКонтрагента;		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя = СчетКонтрагента.ТекстКорреспондента;
		Иначе
			ТекстПолучателя = ?(НЕ ЗначениеЗаполнено(Контрагент.НаименованиеПолное), Контрагент.Наименование, Контрагент.НаименованиеПолное);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидНалога.НазначениеПлатежа) Тогда
			НазначениеПлатежа = СокрЛП(ВыборкаПоОснованию.НазначениеПлатежа);
		КонецЕсли;	
		СчетУчетаРасчетовСКонтрагентомБУ 	= ВыборкаПоОснованию.СчетУчетаРасчетовСКонтрагентомБУ;	
		УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ЭтотОбъект, "СчетУчетаРасчетовСКонтрагентомБУ", "СчетУчетаРасчетовСКонтрагентомНУ", Дата);	
		
		// Установим значения субконто, в случае, если они повторяют реквизиты 
		// документа
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
			Для Ном = 1 По СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = СчетУчетаРасчетовСКонтрагентомБУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					ЭтотОбъект["СубконтоДтБУ" + Ном] = ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					ЭтотОбъект["СубконтоДтБУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			Для Ном = 1 По СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество() Цикл
				ТекущийВидСубконто = СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто;						
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления Тогда
					ЭтотОбъект["СубконтоДтНУ" + Ном] = ВидНалога;
				КонецЕсли;					
				Если ТекущийВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды Тогда
					ЭтотОбъект["СубконтоДтНУ" + Ном] = Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;	
		
		СформироватьНазначениеПлатежа();
		
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасчетКомандировочных") Тогда
		
		Автор = ПараметрыСеанса.ТекущийПользователь;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Организация = Основание.Организация;
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		УчитыватьКПН = Истина;
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтраженоВОперУчете = Истина;
		Дата = ТекущаяДата();
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
		  
		//ФизЛицоПодотчетник = Основание.Физлицо;
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие выплаты по операционной деятельности");
		СчетПодоотчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
		КодНазначенияПлатежа = "871";
		ДатаВалютирования = ТекущаяДата();
					
		Для Каждого ТекСтрокаРаботникиОрганизации Из Основание.РаботникиОрганизации Цикл
			ФизЛицоПодотчетник = ТекСтрокаРаботникиОрганизации.ФизЛицо;
			
			НаборЗаписейКартСчета = РегистрыСведений.КартСчетаФизЛиц.СоздатьНаборЗаписей();
		
			НаборЗаписейКартСчета.Отбор.ФизЛицо.Значение = ФизЛицоПодотчетник;
			НаборЗаписейКартСчета.Отбор.ФизЛицо.Использование = Истина;
			НаборЗаписейКартСчета.Прочитать();
			
			Если НаборЗаписейКартСчета.Количество() > 0 Тогда
				НомерКартСчета = НаборЗаписейКартСчета[0].НомерКартСчета;
			Иначе
				НомерКартСчета = Справочники.КартСчета.ПустаяСсылка();
			КонецЕсли;

			Если ТекСтрокаРаботникиОрганизации.Проезд > 0 Тогда
				НоваяСтрока = ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = ТекСтрокаРаботникиОрганизации.Проезд;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыНаПроезд;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;
			                                                                  
			Если ТекСтрокаРаботникиОрганизации.Проживание > 0 Тогда
				НоваяСтрока = ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = ТекСтрокаРаботникиОрганизации.Проживание;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыПоНаймуЖилья;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;

			Если ТекСтрокаРаботникиОрганизации.Суточные > 0 Тогда
				НоваяСтрока = ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = ТекСтрокаРаботникиОрганизации.Суточные;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;

		КонецЦикла;
		
		
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаРегл();	
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Пользователь = глЗначениеПеременной("глТекущийПользователь");	
	Ответственный             = Пользователь;		
КонецПроцедуры // ЗаполнитьПоДокументуОснования

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПРОВЕДЕНИЯ ПеречисленияЗаработнойПлаты

// Процедура формирует движения по регистрам накполения и бухгалтерии 
// для операции выплаты заработной платы
// 
Процедура ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
		
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	// Проведение по регистру Типовой
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата
	|ИТОГИ
	|	МАКСИМУМ(СтатьяДвиженияДенежныхСредств),
	|	СУММА(Сумма),
	|	СУММА(ДепонированнаяСумма)
	|ПО
	|	Ведомость";

	ТекстЗапросаПоВзаиморасчетам = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ) КАК ПериодНачисленияЗарплаты,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисленияДепонированнойЗарплаты,
//	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств, 
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате КАК СпособРасчетаСуммКВыплате,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.ДепонированнаяСумма) КАК ДепонированнаяСумма
	|
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
	|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
	|
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
	|	И (РанееВыплаченныеСуммы.ФизЛицо ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ),
//	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств, 
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияЗарплаты, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодНачисленияДепонированнойЗарплаты, МЕСЯЦ)
	|	КОНЕЦ,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособРасчетаСуммКВыплате
	|";

	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СуммаКВыплате = 0;

	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

	Пока Результат.Следующий() Цикл

		СуммаКВыплате = СуммаКВыплате + Результат.Сумма + Результат.ДепонированнаяСумма;	
		
		Если НЕ ВедетсяУчетПоСотрудникам Тогда
			
			// Формируем проводки по выплате зарплаты
			Если Результат.Сумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Результат.Сумма;
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;				
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
				
				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= Результат.Сумма;
				КонецЕсли;
				
				Проводка.Содержание  = "Выплата з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");				
			КонецЕсли;
		
			// Формируем проводки по выплате депонированной зарплаты
			Если Результат.ДепонированнаяСумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Результат.ДепонированнаяСумма;
				
				Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Результат.ФизЛицо);
				
				Проводка.СчетКт      = СтруктураШапкиДокумента.СчетБанк;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);

				//Бит Источники финансирования
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
				//Бит Источники финансирования

				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт 	= Результат.ДепонированнаяСумма;
				КонецЕсли;

				Проводка.Содержание  = "Выплата деп.з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				СуммаКПроводке = Результат.ДепонированнаяСумма + Результат.Сумма;
				Если СуммаКПроводке <> 0 Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить(); 					
					// Свойства
					ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;					
					// Измерения
					ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
					
					ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
					
					// Корреспондеция счетов и аналитика
					ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);								
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
					// Ресурсы
					ПроводкаНУ.Сумма			= СуммаКПроводке; 					
					// Реквизиты
					ПроводкаНУ.Содержание		= "Выплата з/п по ведомости №" + Результат.Номер + " от " + Формат(Результат.Дата, "ДФ='дд.ММ.гг'");  
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);

				КонецЕсли;
			КонецЕсли;  			
			
		КонецЕсли;

		РезультатПоФизЛицам = Результат.Выбрать();
		
		Пока РезультатПоФизЛицам.Следующий() Цикл
			// Отмечаем факт выплаты по ведомости
			Движение = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
			// Измерения
			Движение.Ведомость 	= РезультатПоФизЛицам.Ведомость;
			Движение.Физлицо 	= РезультатПоФизЛицам.ФизЛицо;
			
			Если ВедетсяУчетПоСотрудникам Тогда
			
				// Формируем проводки по выплате зарплаты
				Если РезультатПоФизЛицам.Сумма <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = РезультатПоФизЛицам.Сумма;
					
					Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);
					
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетБанк;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
					
					//Бит Источники финансирования
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
					//Бит Источники финансирования

					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт 	= РезультатПоФизЛицам.Сумма;
					КонецЕсли;
					
					Проводка.Содержание  = "Выплата з/п по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'");				
				КонецЕсли;
			
				// Формируем проводки по выплате депонированной зарплаты
				Если РезультатПоФизЛицам.ДепонированнаяСумма <> 0 Тогда
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = РезультатПоФизЛицам.ДепонированнаяСумма;
					
					Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);
					
					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетБанк;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);

					//Бит Источники финансирования
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
					//Бит Источники финансирования

					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
						Проводка.ВалютнаяСуммаКт 	= РезультатПоФизЛицам.ДепонированнаяСумма;
					КонецЕсли;

					Проводка.Содержание  = "Выплата деп.з/п по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'");				
				КонецЕсли;
				
				//Отражение в налоговом учете
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
					СуммаКПроводке = РезультатПоФизЛицам.ДепонированнаяСумма + РезультатПоФизЛицам.Сумма;
					Если СуммаКПроводке <> 0 Тогда
						
						ПроводкаНУ = Движения.Налоговый.Добавить(); 					
						
						ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;					
						
						ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
						
						//заполнения счет Дт(НУ)
						ПроводкаНУ.СчетДт = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", РезультатПоФизЛицам.ФизЛицо);					
						
						ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);								
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Результат.СтатьяДвиженияДенежныхСредств);
						
						ПроводкаНУ.Сумма			= СуммаКПроводке; 					
						
						ПроводкаНУ.Содержание		= "Выплата з/п по ведомости №" + РезультатПоФизЛицам.Номер + " от " + Формат(РезультатПоФизЛицам.Дата, "ДФ='дд.ММ.гг'"); 
						
						ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);						
						
						ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);						
					КонецЕсли;
				КонецЕсли;  		
				
				
			КонецЕсли;		

		КонецЦикла;
		
				
	КонецЦикла;

		// движения по выплате заработной платы по регистрам накопления
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоВыплатеЗарплаты(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));

КонецПроцедуры

// Процедура формирует движения по регистрам накопления и бухгалтерии
// для операции перечислений по исполнительным листам
// 
Процедура ДвиженияПоПеречислениюПоИЛ(СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",	СтруктураШапкиДокумента.Дата);

	// Проведение по регистру Типовой
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ КАК ФИОРаботника,
	|	ИЛПеречислениеПолучателям.Получатель КАК Получатель,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов + ИЛПеречислениеПолучателям.СуммаСборов) КАК Сумма,
	|	ИЛПеречислениеполучателям.ДокументОснование.Номер КАК НомерИЛ,
	|	ИЛПеречислениеполучателям.ДокументОснование.Дата КАК ДатаИЛ,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ППИ
	|		ПО ИЛПеречислениеПолучателям.Ссылка = ППИ.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизЛиц
	|		ПО ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	ППИ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL ТОГДА ИЛПеречислениеПолучателям.ДокументОснование.ФизЛицо.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + ВЫБОР 
	|									КОГДА ФИОФизЛиц.Имя <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Имя, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ 
	|								+ ВЫБОР
	|									КОГДА ФИОФизЛиц.Отчество <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛиц.Отчество, 1, 1) + "".""
	|									ИНАЧЕ """"
	|								  КОНЕЦ
	|	КОНЕЦ,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеполучателям.ДокументОснование.Номер,
	|	ИЛПеречислениеполучателям.ДокументОснование.Дата,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации
	|";


	Результат = Запрос.Выполнить().Выбрать();
	СуммаКВыплате = 0;

	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;


	Пока Результат.Следующий() Цикл

		Если Результат.Сумма <> 0 Тогда
			// Формируем проводки по перечислению по ИЛ
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = Результат.Сумма;
			
			Проводка.СчетДт      = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Результат.Получатель);
			
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтатьяДДС);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Результат.Сумма;
			КонецЕсли;
			
			Проводка.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				// Формируем проводки по НУ перечислению по ИЛ
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       = Результат.Сумма;
				
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам, Дата, ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Результат.Получатель);
				
				ПроводкаНУ.СчетКт      = СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
				
				ПроводкаНУ.Содержание  = "ИЛ " + СокрЛП(Результат.НомерИЛ) + " от " + Формат(Результат.ДатаИЛ, "ДФ='дд.ММ.гг'") + " за " + Формат(Результат.ПериодВзаиморасчетов, "ДФ='МММ гг'")+" от "+СокрЛП(Результат.ФИОРаботника);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// по регистрам накопления

	ТекстЗапросаПоВзаиморасчетам = 
	"ВЫБРАТЬ
	|	ИЛПеречислениеПолучателям.Получатель КАК Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ИЛПеречислениеПолучателям.СуммаСборов) КАК СуммаСборов
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателям
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ППИ
	|		ПО ИЛПеречислениеПолучателям.Ссылка = ППИ.Документ
	|
	|ГДЕ
	|	ППИ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИЛПеречислениеПолучателям.Получатель,
	|	ИЛПеречислениеПолучателям.ДокументОснование,	
	|	ИЛПеречислениеПолучателям.Ссылка.ПериодРегистрации
	|";

	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
	
	ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюИЛ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));

КонецПроцедуры // ДвиженияПоПеречислениюПоИЛ

// Процедура  формирует движения по регистрам для операции
// перечисления НДС с измененным сроком уплаты
// 
Процедура ДвиженияПоПеречислениюНДССИзмененымСрокомУплаты(СтруктураШапкиДокумента, Отказ);
	
	ДанныеОВалюте   	= ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);			
	
	Для Каждого СтрокаТЧ Из ПеречислениеНДССИзмененнымСрокомУплаты Цикл
		Если СтрокаТЧ.СуммаПлатежа = 0 Тогда
			Продолжить;
		КонецЕсли;
		СуммаНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Если СуммаНДС = 0 Тогда
			Продолжить;									
		КонецЕсли;
		// Проверки заполнения
		
		// Вид операции
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НДСВидПоступления) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид операции поступления, в строке " +СтрокаТЧ.НомерСтроки , Отказ);		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НДСВидоборота) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид оборота, в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ГТД) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан номер ГТД, в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СрокПлатежа) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан срок платежа НДС, в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указана ставка НДС, в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет учета НДС в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указан счет учета расчетов с таможенным органом по НДС в строке " +СтрокаТЧ.НомерСтроки , Отказ);			
		КонецЕсли;
		
		// Работа со структурными подразделениями
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																		СтруктураШапкиДокумента.Организация,
																		глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																		Перечисления.РазделыНалоговогоУчета.НДС);
		Иначе
			ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
		КонецЕсли;																
		
		СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
		
		// Непосредственно по регистру НДССИзмененнымСрокомУплаты
		Движение 				= Движения.НДССИзмененнымСрокомУплаты.Добавить();
		Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		Движение.Период 		= СтруктураШапкиДокумента.Дата;		
		
		Движение.Налогоплательщик	= СтруктураШапкиДокумента.ПлательщикНДС;
		Движение.Организация		= СтруктураШапкиДокумента.Организация;		
		Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		Движение.ВидНалогаНДС 		= Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты;		
		Движение.ГТД				= СтрокаТЧ.ГТД;
		Движение.СрокПлатежа 		= СтрокаТЧ.СрокПлатежа;		
		Движение.Контрагент 		= СтрокаТЧ.Контрагент;
		Движение.Договор 			= СтрокаТЧ.Договор;
		Движение.СчетУчетаНДС		= СтрокаТЧ.СчетУчетаНДС;
		Движение.ВидОперацииПоступления 		= СтрокаТЧ.НДСВидПоступления;
		Движение.СчетУчетаРасчетовСКонтрагентом = СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом;		
				
		Движение.СуммаНДС  		= СуммаНДС;
		// Реквизиты												
		Движение.СпособПогашения 			= Перечисления.ВидыВзаиморасчетовСБюджетом.Уплата;
		Движение.ДатаПлатежногоДокумента 	= СтруктураШапкиДокумента.Дата;
		Движение.НомерПлатежногоДокумента 	= СтруктураШапкиДокумента.Номер;		
		
		// Сумма налога, уплаченная в бюджет, принимается к зачету
		Движение 						= Движения.НДСКВозмещению.Добавить();	
		Движение.Период 				= СтруктураШапкиДокумента.Дата;
		
		Движение.Налогоплательщик		= СтруктураШапкиДокумента.ПлательщикНДС;
		Движение.Организация			= СтруктураШапкиДокумента.Организация;		
		Движение.СтруктурнаяЕдиница 	= СтруктураШапкиДокумента.Организация;		
		
		Движение.ВидОборота				= СтрокаТЧ.НДСВидОборота;
		Движение.ВидОперацииПоступления	= СтрокаТЧ.НДСВидПоступления;
		Движение.ВидНалогаНДС			= Перечисления.ВидыНДС.НДССИзменениемСрокаУплаты;
		Движение.СтавкаНДС				= СтрокаТЧ.СтавкаНДС;		
		Движение.Контрагент 			= СтруктураШапкиДокумента.Контрагент;
		
		Движение.ВидВходящегоДокумента  = "Платежное поручение исходящие";       
		Движение.НомерВходящегоДокумента= ЭтотОбъект.Номер;      
		Движение.ДатаВходящегоДокумента = ЭтотОбъект.Дата;
		
			
		Движение.СуммаБезНДС 			= ?(СтрокаТЧ.СтавкаНДС.Ставка = 0, 0,СуммаНДС*100/СтрокаТЧ.СтавкаНДС.Ставка);
		Движение.СуммаНДС    			= СуммаНДС;			
		Движение.УплаченныйНДС			= СуммаНДС;
		
		// по бухгалтерскому учету теперь нужно отразить факт
		// принятия уплаченной суммы в зачет
		Проводка = Движения.Типовой.Добавить();		
		
		//	Свойства
		Проводка.Период			= СтруктураШапкиДокумента.Дата;		
		// Измерения
		Проводка.Организация 	= СтруктураШапкиДокумента.Организация;		
		
		// Корреспонденция счетов и аналитика
		Проводка.СчетДт			= СтрокаТЧ.СчетУчетаНДС;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		Проводка.СчетКт			= СтрокаТЧ.СчетУчетаНДС;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		// Ресурсы
		Проводка.Сумма			= СуммаНДС;		
		// Реквизиты
		Проводка.Содержание		= "НДС, уплаченный в бюджет принят к зачету";
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			
		ПроводкаНУ = Движения.Налоговый.Добавить();		
		
		//	Свойства
		ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;		
		// Измерения
		ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;		
		
		СчетУчетаНДСНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСКВозмещениюНУ(СтрокаТЧ.СчетУчетаНДС, Дата);
		// Корреспонденция счетов и аналитика
		ПроводкаНУ.СчетДт			= СчетУчетаНДСНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		ПроводкаНУ.СчетКт			= СчетУчетаНДСНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "НалогиСборыОтчисления", 		Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыПлатежейВБюджетИФонды", 	Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);				
		// Ресурсы
		ПроводкаНУ.Сумма			= СуммаНДС;		
		// Реквизиты
		ПроводкаНУ.Содержание		= "НДС, уплаченный в бюджет принят к зачету";

		КонецЕсли;		
		
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияПоПеречислениюНДССИзмененымСрокомУплаты

// Процедура формирует движения по регистрам накопления для операции "Расчеты по доходу от разовых выплат"
//
Процедура ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами(Отказ, Заголовок, СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст="";
	Запрос.УстановитьПараметр("парамСсылка", 		Ссылка);
	Запрос.УстановитьПараметр("парамДата", 			СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("парамОрганизация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("парамКонтрагент", 	СтруктураШапкиДокумента.Контрагент);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		// вдруг закупают что-то у собственных сотрудников и хотят отражать через взаиморасчеты
		// получим подразделение на начало месяца
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ
		|	Контрагент.ФизЛицо КАК ФизЛицо,
		|	Дата КАК Период
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	Ссылка = &парамСсылка
		|";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
		
		
	КонецЕсли;
	
	Запрос.Текст = МестоРаботыТекст + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ФизЛицо КАК ФизЛицо,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК РННКонтрагента,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ФизЛицо.РНН КАК РННФизЛица,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК БИНКонтрагента,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ФизЛицо.ИдентификационныйКодЛичности КАК ИИНФизЛица,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовОстаток,0) КАК СуммаВзаиморасчетовОстаток,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(Взаиморасчеты.ПериодВзаиморасчетов, &парамДата), МЕСЯЦ) КАК ПериодВзаиморасчетов";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА НЕ (Взаиморасчеты.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА Взаиморасчеты.СтруктурнаяЕдиница
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &парамОрганизация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	Взаиморасчеты.Налогоплательщик
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	&парамОрганизация КАК СтруктурнаяЕдиница,
		|	&парамОрганизация КАК СтруктурнаяЕдиницаПоМестуРаботы,
		|	&парамОрганизация КАК Налогоплательщик
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Остатки(
	|									&парамДата,
	|									Организация = &парамОрганизация
	|									И Контрагент = &парамКонтрагент) КАК Взаиморасчеты
	|		ПО ИСТИНА";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
		|		ПО ИСТИНА" ;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаиморасчеты.ПериодВзаиморасчетов
	|ИТОГИ 
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ФизЛицо),
	|	МАКСИМУМ(РННКонтрагента),
	|	МАКСИМУМ(РННФизЛица),
	|	МАКСИМУМ(БИНКонтрагента),
	|	МАКСИМУМ(ИИНФизЛица),
	|	МАКСИМУМ(СтруктурнаяЕдиницаПоМестуРаботы)
	|ПО ОБЩИЕ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ФизЛицо							= Неопределено;
	СтруктурнаяЕдиницаПоМестуРаботы = Неопределено;
	ВалютаРег       				= мВалютаРегламентированногоУчета;
	ДанныеОВалюте  					= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	
	СуммаКРаспределению = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);	
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
													
	Пока Выборка.Следующий() И СуммаКРаспределению <> 0 Цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			// проверим заполнение
			
			ДатаПрекращенияВыводаРНН = Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();
			ВыводитьРНН = НЕ ЗначениеЗаполнено(ДатаПрекращенияВыводаРНН) ИЛИ Дата < ДатаПрекращенияВыводаРНН;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ФизЛицо) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для контрагента не указано соответствующее ему физлицо.",Отказ,Заголовок);
			ИначеЕсли ВыводитьРНН И Выборка.РННКонтрагента <> Выборка.РННФизлица Тогда
				ОбщегоНазначения.СообщитьОбОшибке("РНН контрагента и физлица, связанного с контрагентом, не совпадают.", Отказ, Заголовок, СтатусСообщения.Важное);
			ИначеЕсли НЕ ВыводитьРНН И Выборка.БИНКонтрагента <> Выборка.ИИНФизЛица Тогда
				ОбщегоНазначения.СообщитьОбОшибке("ИИН/БИН контрагента и физлица, связанного с контрагентом, не совпадают.", Отказ, Заголовок, СтатусСообщения.Важное);
			КонецЕсли;
			
			ФизЛицо = Выборка.ФизЛицо;
			СтруктурнаяЕдиницаПоМестуРаботы = Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
			
		ИначеЕсли НЕ Отказ Тогда
		
			СуммаКВыплате = Мин(Выборка.СуммаВзаиморасчетовОстаток, СуммаКРаспределению);
			СуммаКРаспределению = СуммаКРаспределению - СуммаКВыплате;
			Если СуммаКВыплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////
			// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
			//
			
			Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
			// Свойства
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Движение.Контрагент 	= СтруктураШапкиДокумента.Контрагент;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Если Выборка.Налогоплательщик = NULL Тогда
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиницаПоМестуРаботы;
					Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаПоМестуРаботы,
																						СтруктураШапкиДокумента.Организация,
																						ИсчислениеНалоговСтруктурныхЕдиниц,
																						Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
				Иначе
					СтруктурнаяЕдиница 	= Выборка.СтруктурнаяЕдиница;
					Налогоплательщик 	= Выборка.Налогоплательщик;
				КонецЕсли;
				Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.ПериодВзаиморасчетов 	= Выборка.ПериодВзаиморасчетов;
			Движение.Организация 			= СтруктураШапкиДокумента.Организация;
			
			// Ресурсы
			Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
			//////////////////////////////////////////////////////////////////////
			// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
			Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
			// Свойства
			Движение.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Движение.ФизЛицо		= СтруктураШапкиДокумента.Контрагент;
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				Движение.СтруктурнаяЕдиница	= СтруктурнаяЕдиница;
				Движение.Налогоплательщик	= Налогоплательщик;
			Иначе
				Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			Движение.Организация			= СтруктураШапкиДокумента.Организация;
			Движение.МесяцНалоговогоПериода = Выборка.ПериодВзаиморасчетов;
			
			// Ресурсы
			Движение.СуммаДохода	= СуммаКВыплате;
			
		КонецЕсли;
	КонецЦикла;
	
	// если что-то осталось, то создаем запись на сумму остатка
	Если СуммаКРаспределению <> 0 Тогда

		СуммаКВыплате = СуммаКРаспределению;
		
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																				СтруктураШапкиДокумента.Организация,
																				ИсчислениеНалоговСтруктурныхЕдиниц,
																				Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////
		// ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами
		//
			
		Движение = Движения.ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами.Добавить();
			
		// Свойства
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период			= СтруктураШапкиДокумента.Дата;
			
		// Измерения
		Движение.Контрагент 	= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.ПериодВзаиморасчетов 	= НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Организация 			= СтруктураШапкиДокумента.Организация;		
			
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= СуммаКВыплате;
			
		//////////////////////////////////////////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
			
		Движение = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
		// Свойства
		Движение.Период			= СтруктураШапкиДокумента.Дата;
			
		// Измерения
		Движение.ФизЛицо		= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоМестуРаботы;
			Движение.Налогоплательщик 	= Налогоплательщик;
		Иначе
			Движение.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
			Движение.Налогоплательщик	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;
		Движение.МесяцНалоговогоПериода = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		Движение.Организация			= СтруктураШапкиДокумента.Организация;
			
		// Ресурсы
		Движение.СуммаДохода	= СуммаКВыплате;
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами

////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПРОВЕДЕНИЯ ПеречисленияПенсионныхВзносов и ПеречисленияСоциальныхОтчислений

// Формирует движения по регистрам учета ОПВ
//
Процедура ДвиженияПоРегистрамОПВ(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоВзаиморасчетам = 
	"ВЫБРАТЬ
	|	ОПВПеречислениеВФонды.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
	|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
	|	КОНЕЦ КАК ФизЛицоБУ,
	|	НАЧАЛОПЕРИОДА(ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
	|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
	|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
	|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
	|	СУММА(ОПВПеречислениеВФонды.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФонды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ППИ
	|		ПО ОПВПеречислениеВФонды.Ссылка = ППИ.Документ
	|ГДЕ
	|	ППИ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ОПВПеречислениеВФонды.ФизЛицо
	|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ФизЛицо
	|	КОНЕЦ,
	|	ОПВПеречислениеВФонды.ФизЛицо,
	|	ОПВПеречислениеВФонды.Ссылка.ПериодРегистрации,
	|	ОПВПеречислениеВФонды.Ссылка.ВидПлатежа,
	|	ОПВПеречислениеВФонды.Ссылка.ВидОперации,
	|	ОПВПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	
	РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
		
	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоПенсионнымОтчислениям	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям);
				
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		 ТаблицаДляПроведенияПоРегиструБухгалтерии = РезультатЗапроса.Выгрузить();
		 ТаблицаДляПроведенияПоРегиструБухгалтерии.Свернуть("ВидПлатежа, ВидОперации, МесяцИсчисления", "Сумма");  
		 Для Каждого СтрокаДанных Из ТаблицаДляПроведенияПоРегиструБухгалтерии Цикл
			// движения по регистру бухгалтерии
			
			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов = СтрокаДанных.ВидОперации Тогда 
				ТекстПроводки				  = "ОПВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВ(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя = СтрокаДанных.ВидОперации Тогда 
				ТекстПроводки				  = "ОПВР";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВР(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов = СтрокаДанных.ВидОперации Тогда
				ТекстПроводки 				  = "ОППВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОППВ(СчетДт, Дата);   
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
				СчетДт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
			КонецЕсли; 
			
			Проводка = Движения.Типовой.Добавить();

			//	Свойства
			Проводка.Период		 = СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;                                                					
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);			
						
			Проводка.СчетКт		 = СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;
			
			// Ресурсы
			Проводка.Сумма		 = СтрокаДанных.Сумма;
			
			// Реквизиты
			Проводка.Содержание	 = ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";		 
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
				
				
				ПроводкаНУ.СчетДт			= СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
								
				ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
				
				ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		= ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		 КонецЦикла;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
	
		ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(Выборка, Отказ, Заголовок);
				
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВедетсяУчетПоСотрудникам Тогда
			
			ТекстПроводки = "";
			
			Если Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов = Выборка.ВидОперации Тогда 
				ТекстПроводки				  = "ОПВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;		
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВ(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя = Выборка.ВидОперации Тогда
				ТекстПроводки 				  = "ОПВР";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;	
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОПВР(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов = Выборка.ВидОперации Тогда
				ТекстПроводки 				  = "ОППВ";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;	
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ;
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУОППВ(СчетДт, Дата);  
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
				СчетДт = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; 
			КонецЕсли; 
			
				
			// движения по регистру бухгалтерии
			Проводка = Движения.Типовой.Добавить();

			//	Свойства
			Проводка.Период		= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;         
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);				
						
			Проводка.СчетКт		= СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Выборка.Сумма;
			КонецЕсли;
			
			// Ресурсы
			Проводка.Сумма		= Выборка.Сумма;
			
			// Реквизиты
			Проводка.Содержание	= ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
					
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата;
				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
								
				ПроводкаНУ.СчетДт			= СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления"	 , СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);					
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций"	 , Выборка.ФизЛицоБУ);
												
				ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
				
				ПроводкаНУ.Сумма			= Выборка.Сумма;				
				// Реквизиты
				ПроводкаНУ.Содержание		= ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";	
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		КонецЕсли;			
	
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 	
	
	ВидОПВ = Неопределено;
	
	// Определим вид ОПВ по последней строке выборки
	Если Выборка.Количество() > 0 Тогда
		ВидОПВ = Выборка.ВидОперации;
	КонецЕсли;	
	
	Если ВидОПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПрофессиональныхПенсионныхВзносов Тогда
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОППВ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	ИначеЕсли ВидОПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВР(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));																									
	Иначе 
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюОПВ(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетам,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
КонецПроцедуры // ДвиженияПоРегистрамОПВ()

// Формирует движения по документам табличной части для перечисления СО
//
Процедура ДвиженияПоРегистрамСО(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;    	
	
	ТекстЗапросаПоВзаиморасчетам = 
		"ВЫБРАТЬ
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ КАК ФизЛицоБУ,
		|	НАЧАЛОПЕРИОДА(СОПеречислениеВФонды.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцИсчисления,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации КАК ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению,
		|	СУММА(СОПеречислениеВФонды.Сумма) КАК Сумма
		|ИЗ
		|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФонды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ППИ
		|		ПО СОПеречислениеВФонды.Ссылка = ППИ.Документ
		|ГДЕ
		|	ППИ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СОПеречислениеВФонды.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|			ТОГДА СОПеречислениеВФонды.ФизЛицо
		|		ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо
		|	КОНЕЦ,
		|	СОПеречислениеВФонды.Ссылка.ПериодРегистрации,
		|	СОПеречислениеВФонды.Ссылка.ВидПлатежа,
		|	СОПеречислениеВФонды.Ссылка.ВидОперации,
		|	СОПеречислениеВФонды.Ссылка.СпособРасчетаСуммКПеречислению";
	
	СтруктураПараметровЗапроса = Новый Структура();
	СтруктураПараметровЗапроса.Вставить("Ссылка", Ссылка);
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьСО  = Ложь;
	ЕстьВОСМС = Ложь;
	ЕстьООСМС = Ложь;

    Выборка = РезультатЗапроса.Выбрать();
	
	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;

	// определим есть ли субконто "Работники организаций" на счете ОбязательстваПоСоциальномуСтрахованию	
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	
	// если учет по сотрудникам не ведется, необходимо сгруппировать данные для отображения в БУ по виду платежа и месяцу исчисления
	Если НЕ ВедетсяУчетПоСотрудникам Тогда
		 ТаблицаДляПроведенияПоРегиструБухгалтерии = РезультатЗапроса.Выгрузить();
		 ТаблицаДляПроведенияПоРегиструБухгалтерии.Свернуть("ВидПлатежа, ВидОперации, МесяцИсчисления", "Сумма");  
		 Для Каждого СтрокаДанных Из ТаблицаДляПроведенияПоРегиструБухгалтерии Цикл
			 
 			ТекстПроводки = "";
					
			Если Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений = СтрокаДанных.ВидОперации Тогда 
				ЕстьСО						  = Истина;
				ТекстПроводки				  = "СО";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУСО(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС = СтрокаДанных.ВидОперации Тогда 
				ЕстьВОСМС					  = Истина;
				ТекстПроводки 				  = "Взносы ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВОСМС(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС = СтрокаДанных.ВидОперации Тогда 
				ЕстьООСМС					  = Истина;
				ТекстПроводки 				  = "Отчисления ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУООСМС(СчетДт, Дата);
			КонецЕсли;

			 // Проведение по регистру бухгалтерии	
			Проводка = Движения.Типовой.Добавить();
			
			//	Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт		 = СчетДт;        
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды",	СтрокаДанных.ВидПлатежа);
			
			Проводка.СчетКт			= СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтатьяДДС);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= СтрокаДанных.Сумма;
			КонецЕсли;

			// Ресурсы
			Проводка.Сумма			= СтрокаДанных.Сумма;
			
			// Реквизиты
			Проводка.Содержание		=  ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";		 
			
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата; 				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
							
				ПроводкаНУ.СчетДт			= СчетДтНУ; 								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", СтрокаДанных.ВидПлатежа);
								
				ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
				
				ПроводкаНУ.Сумма			= СтрокаДанных.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		=  ТекстПроводки + " за " + Формат(СтрокаДанных.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;

		 КонецЦикла;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
	
		ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(Выборка, Отказ, Заголовок);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВедетсяУчетПоСотрудникам Тогда
			
			Если Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений = Выборка.ВидОперации Тогда 
				ЕстьСО						  = Истина;
				ТекстПроводки				  = "СО";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУСО(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС = Выборка.ВидОперации Тогда 
				ЕстьВОСМС					  = Истина;
				ТекстПроводки 				  = "Взносы ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВОСМС(СчетДт, Дата);
			ИначеЕсли Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС = Выборка.ВидОперации Тогда 
				ЕстьООСМС					  = Истина;
				ТекстПроводки 				  = "Отчисления ОСМС";
				СубконтоНалогиСборыОтчисления = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Корреспонденция счетов БУ и НУ
				СчетДт = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ;
				Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
					СчетДт = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
				КонецЕсли;     	
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУООСМС(СчетДт, Дата);
			КонецЕсли;

			// Проведение по регистру бухгалтерии	
			Проводка = Движения.Типовой.Добавить();
					
			//	Свойства
			Проводка.Период			= СтруктураШапкиДокумента.Дата;
			
			// Измерения
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			
			// Корреспонденция счетов и аналитика
			Проводка.СчетДт			= СчетДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВБюджетИФонды",	Выборка.ВидПлатежа);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", 		Выборка.ФизЛицоБУ);
			
			Проводка.СчетКт			= СтруктураШапкиДокумента.СчетБанк;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтатьяДДС);

			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
			//Бит Источники финансирования

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт 			= СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт 	= Выборка.Сумма;
			КонецЕсли;

			// Ресурсы
			Проводка.Сумма			= Выборка.Сумма;
			
			// Реквизиты
			Проводка.Содержание		= ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
			
			//Движения по регистру "Налоговый"
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = Движения.Налоговый.Добавить();				
				// Свойства
				ПроводкаНУ.Период			= СтруктураШапкиДокумента.Дата; 				
				// Измерения
				ПроводкаНУ.Организация	= СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт			= СчетДтНУ; 								
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "НалогиСборыОтчисления", СубконтоНалогиСборыОтчисления);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыПлатежейВБюджетИФонды", Выборка.ВидПлатежа);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", 		Выборка.ФизЛицоБУ);
						
				ПроводкаНУ.СчетКт			= СтруктураШапкиДокумента.СчетБанкНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ДенежныеСредства", СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДДС);
				
				ПроводкаНУ.Сумма			= Выборка.Сумма;
				
				// Реквизиты
				ПроводкаНУ.Содержание		=  ТекстПроводки + " за " + Формат(Выборка.МесяцИсчисления, "ДФ='ММММ гггг'") + " г.";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли;
			
		КонецЕсли;			
	
	КонецЦикла; // Пока Выборка.Следующий() Цикл

	Если Отказ Тогда
		Возврат;
	КонецЕсли;      	
	
	Если ЕстьСО Тогда 
		ТекстЗапросаПоВзаиморасчетамСО = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ППИ.Ссылка = &Ссылка", "ППИ.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");
	
		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюСО(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамСО,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
	Если ЕстьВОСМС Тогда
		ТекстЗапросаПоВзаиморасчетамВОСМС = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ППИ.Ссылка = &Ссылка", "ППИ.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюВОСМС(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамВОСМС,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
												
	Если ЕстьООСМС Тогда
		ТекстЗапросаПоВзаиморасчетамООСМС = СтрЗаменить(ТекстЗапросаПоВзаиморасчетам, "ППИ.Ссылка = &Ссылка", "ППИ.Ссылка = &Ссылка И СОПеречислениеВФонды.Ссылка.ВидОперации = &ВидОперации");

		СтруктураПараметровЗапроса.Вставить("ВидОперации", Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС);
	
		ПроведениеРасчетов.ВыполнитьДвиженияПоРегистрамПоПеречислениюООСМС(ЭтотОбъект,
													ТекстЗапросаПоВзаиморасчетамООСМС,
													СтруктураПараметровЗапроса,
													глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"));
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамСО()

// Проверяет правильность заполнения реквизитов в строке выборки из результата
// запроса по документам перечисления ОПВ (СО).
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
//
// Параметры: 
//  ВыборкаПоСтрокамПеречисления - спозиционированная на определеной строке выборка 
//  							   из результата запроса, 
//  Отказ 						 - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО(ВыборкаПоСтрокамПеречисления, Отказ, Заголовок)

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на перечисление присутствуют строки с не указанным физическим лицом!", Отказ, Заголовок);
	КонецЕсли;

	// месяц исчисления
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамПеречисления.МесяцИсчисления) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("В списках на перечисление присутствуют документы с не заданным месяцем исчисления!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиПеречисленияОПВиСО()

////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ДЛЯ ПРОВЕДЕНИЯ 

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок,  СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам бухгалтерского и налогового учета
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.Оплачено) Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Типовой;
	ПроводкиНУ = Движения.Налоговый;
	
	РасчетыВВалюте = Ложь;
	Если СчетОрганизации.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;
	
	ВидСчетаОрг = СчетОрганизации.ВидСчета;
	ВалютаСчета = СчетОрганизации.ВалютаДенежныхСредств;
	
	СчетКт		= СтруктураШапкиДокумента.СчетБанк;
	СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
	
	СтруктураШапкиДокумента.Вставить("СчетБанкНУ",СчетКтНУ );
                    	
	РасчетыВВалюте = Ложь;
	
	Если СчетБанк.Валютный Тогда
		РасчетыВВалюте = Истина;
	КонецЕсли;
	
	СтатьяДДС = Неопределено;
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
		СтатьяДДС = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	
	ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами Тогда
			ДвиженияПоВзаиморасчетамСКонтрагентамиФизЛицами(Отказ, Заголовок, СтруктураШапкиДокумента);
		КонецЕсли;
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,СчетКт);
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ"		,СчетКтНУ);
		
		СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению, Истина, Ложь));
		//Вызов универсальной процедуры подготовки реестра платежей по данным документа.
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплатыБУ"),"СчетАванса");
			КонецЕсли; 
			
			УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента, Истина,Отказ,Заголовок,,,РеестрПлатежей); 	  
		Иначе //расчеты по кредитам
			УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента, Истина,Отказ,Заголовок,"Расчеты по кредитам и займам",,РеестрПлатежей);
		КонецЕсли; 
	
	// перечисление заработной платы
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда

		ДвиженияПоЗарплатеРегл(СтруктураШапкиДокумента);
		
	// перечисленные пенсионные взносы
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		ДвиженияПоРегистрамОПВ(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	// перечисленные социальные отчисления
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
	
		ДвиженияПоРегистрамСО(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам Тогда
		
		ДвиженияПоПеречислениюПоИЛ(СтруктураШапкиДокумента);
	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ   ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты	
		ИЛИ   ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты	Тогда		
			ДвиженияПоПеречислениюНДССИзмененымСрокомУплаты(СтруктураШапкиДокумента, Отказ);
		КонецЕсли;
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,
								"Перечисление налога",
								"Прочее списание денежных средств");
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДтБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДтБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДтБУ3);
		
		Проводка.СчетКт      = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтатьяДДС);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ИсточникФинансирования);
		//Бит Источники финансирования

				
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			   						Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
		Иначе
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		КонецЕсли;
			
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
			
				
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
														СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
														СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		
		
		// проводки по НУ 
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда  
			
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;				
			
			ПроводкаНУ.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
			ПроводкаНУ.Содержание  = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,
								"Перечисление налога",
								"Прочее списание денежных средств");

			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СубконтоДтНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
			
			Если  ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда				
				ПроводкаНУ.СчетКт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();						
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			Иначе
				 ПроводкаНУ.СчетКт     = СчетКтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтатьяДДС);
			 КонецЕсли;
			 
			 
			 Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
				 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							 ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
			 Иначе
				 
				 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
							 ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				 
			 КонецЕсли;
			 
			Если РасчетыВВалюте Тогда
				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
												СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли; // Если РасчетыВВалюте Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			
			 Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				 
				 //если выбран счет затрат или доходов, то сделаем еще одну проводку
				 //погашение начисленной выше задолженности
				 ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				 
				 ПроводкаНУ_Погашение.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 
				 ПроводкаНУ_Погашение.СчетКт     = СчетКтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 2, СтатьяДДС);
				 
				 Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
					 //СП = СП-отправитель, так как мы с 3310Н(СП-отправитель) переносим  на 1010Н также на СП-отправитель
					 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					 				    ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
				 Иначе
					 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					 
				 КонецЕсли;
												 
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);

			 КонецЕсли;

		КонецЕсли;        
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Перевод средств на другой счет организации";
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ИсточникФинансирования);
		//Бит Источники финансирования

		Проводка.СчетКт      = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтатьяДДС);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ИсточникФинансирования);
		//Бит Источники финансирования
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);

		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
			
			Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();
			
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаНУ.Содержание  = "Перевод средств на другой счет организации";
			
			ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетКонтрагента, Истина).СчетУчетаНУ;	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
			ПроводкаНУ.СчетКт      = СчетКтНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, СтатьяДДС);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			Если РасчетыВВалюте Тогда  		
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
				
				ПроводкаНУ.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
				
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда 

		СуммаПеречисленияВПодотчет = 0;
		ВалютаРег       = мВалютаРегламентированногоУчета;
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);
		
		// формируем корреспонденции по табличной части Выдача в подотчет
		Для Каждого Строка Из ПеречислениеВПодотчет Цикл
			Если  Строка.СуммаПлатежа = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			СуммаПеречисленияВПодотчет = СуммаПеречисленияВПодотчет + Строка.СуммаПлатежа;
			
			Проводка = ПроводкиБУ.Добавить();		
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание = "Перечисление средств подотчетнику";
			
			Проводка.СчетДт = Строка.СчетУчета;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", 			Строка.ФизЛицо);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыЗадолженностиПодотчетныхЛиц", Строка.ВидЗадолженностиПодотчетногоЛица);					
			
			Проводка.СчетКт = СчетКт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДенежныеСредства",				СтруктураШапкиДокумента.СчетОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",Строка.СтатьяДвиженияДенежныхСредств);
			
			//Бит Источники финансирования
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт, "ИсточникФинансирования", ИсточникФинансирования);
			//Бит Источники финансирования

			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = Строка.СуммаПлатежа;					
			КонецЕсли;         				
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = Строка.СуммаПлатежа;					
			КонецЕсли;         				
			
			Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
															СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
															СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);			
																	
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Перечисление средств подотчетнику";
				
				ПроводкаНУ.СчетДт      = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(Строка.СчетУчета, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "РаботникиОрганизаций", 			Строка.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ВидыЗадолженностиПодотчетныхЛиц", Строка.ВидЗадолженностиПодотчетногоЛица);					
				
				ПроводкаНУ.СчетКт      = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"СтатьиДвиженияДенежныхСредств",Строка.СтатьяДвиженияДенежныхСредств);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
																СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
																СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
															
		КонецЦикла; 				
		
		
	КонецЕсли;
			
	// комиссия банка
	Если ВключатьКомиссиюБанка И СуммаКомиссии <> 0 Тогда
		
		ВалютаРег       = мВалютаРегламентированногоУчета;
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДтБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДтБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДтБУ3);
		
		Проводка.СчетКт      = СчетКт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДенежныеСредства", 				СтруктураШапкиДокумента.СчетОрганизации);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		//Бит Источники финансирования
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ИсточникФинансирования", СтруктураШапкиДокумента.ИсточникФинансирования);
		//Бит Источники финансирования
				
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

		Проводка.Содержание  = "Комиссия банка";
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаКомиссии;					
		КонецЕсли;         				
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаКомиссии;					
		КонецЕсли;   
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаКомиссии, 
												СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);			
		
		// проводки по НУ для комиссии банка
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда				
			ПроводкиНУ = Движения.Налоговый;
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;				
			
			ПроводкаНУ.СчетДт     = СчетУчетаРасчетовСКонтрагентомНУ;
			ПроводкаНУ.Содержание = "Комиссия банка";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,1,СубконтоДтНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СубконтоДтНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,3,СубконтоДтНУ3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				Если ЗначениеЗаполнено(СчетОрганизации) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты", 	СчетОрганизации.Банк.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры", 	СчетОрганизации.ДоговорКонтрагента);
				КонецЕсли;
			Иначе
				ПроводкаНУ.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;  			
			
			ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаКомиссии, 
													СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
													СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				
				//если выбран счет затрат или доходов, то сделаем еще одну проводку
				//погашение начисленной выше задолженности
				ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				
				ПроводкаНУ_Погашение.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				Если ЗначениеЗаполнено(СчетОрганизации) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт,ПроводкаНУ_Погашение.СубконтоДт,"Контрагенты", 	СчетОрганизации.Банк.Контрагент);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт,ПроводкаНУ_Погашение.СубконтоДт,"Договоры", 	СчетОрганизации.ДоговорКонтрагента);
				КонецЕсли;
                							
				
				ПроводкаНУ_Погашение.СчетКт     = СчетКтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "СтатьиДвиженияДенежныхСредств", 	СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);
				
			КонецЕсли; 			
		КонецЕсли;        
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

	
	
	
	//fcc
	Если ПередаватьЗадолженностьПоТрехстороннемуСоглашению тогда
		
		ТабБу = Движения.Типовой.Выгрузить();
		ТабНу = Движения.Налоговый.Выгрузить();		
		ТабДДС = Движения.ден_ДвиженияДенежныхСредств.Выгрузить();
		
		Для Каждого строкатч из ТабБу Цикл
			
			Проводка = движения.Типовой.Добавить();
			Проводка.СчетДт = СтрокаТЧ.СчетДт;
			Проводка.СчетКт = СтрокаТЧ.СчетДт;
			Проводка.Период = строкатч.период;
			проводка.Организация = строкатч.организация;
			Проводка.СтруктурноеПодразделениеДт = строкатч.СтруктурноеПодразделениеДт;
			Проводка.СтруктурноеПодразделениеКт = строкатч.СтруктурноеПодразделениеДт;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт1,строкатч.субконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт2,строкатч.субконтоДт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт3,строкатч.субконтоДт3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт4,строкатч.субконтоДт4);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт1,строкатч.субконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт2,строкатч.субконтоДт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт3,строкатч.субконтоДт3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт4,строкатч.субконтоДт4);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Контрагенты",КонтрагентПоТрехстороннемуСоглашению);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Договоры",ДоговорКонтрагентаПоТрехстороннемуСоглашения);
			
			
			Если СтрокаТЧ.СчетДт.Валютный тогда
				Проводка.ВалютаДт = СтрокаТч.ВалютаДт;
				Проводка.ВалютаКт = СтрокаТЧ.ВалютаДт;
				Проводка.ВалютнаяСуммаДт = СтрокаТч.ВалютнаяСуммаДт;
				Проводка.ВалютнаяСуммаКт = СтрокаТч.ВалютнаяСуммаДт;
			КонецЕсли;
			
			проводка.Сумма = СтрокаТЧ.Сумма;
			Проводка.Содержание = "Передача задолженности по трехстороннему соглашению";
			
		КонецЦикла;
		Для Каждого строкатч из ТабНу Цикл
			
			Проводка = движения.Налоговый.Добавить();
			Проводка.СчетДт = СтрокаТЧ.СчетДт;
			Проводка.СчетКт = СтрокаТЧ.СчетДт;
			Проводка.Период = строкатч.период;           
			проводка.ВидУчетаДт = строкатч.видучетадт;
			проводка.ВидУчетакт = строкатч.видучетадт;
			проводка.Организация = строкатч.организация;
			Проводка.СтруктурноеПодразделениеДт = строкатч.СтруктурноеПодразделениеДт;
			Проводка.СтруктурноеПодразделениеКт = строкатч.СтруктурноеПодразделениеДт;
						
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт1,строкатч.субконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт2,строкатч.субконтоДт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,проводка.СубконтоКт,строкатч.видсубконтодт3,строкатч.субконтоДт3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт1,строкатч.субконтоДт1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт2,строкатч.субконтоДт2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.Счетдт,проводка.Субконтодт,строкатч.видсубконтодт3,строкатч.субконтоДт3);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Контрагенты",КонтрагентПоТрехстороннемуСоглашению);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,проводка.СубконтоДт,"Договоры",ДоговорКонтрагентаПоТрехстороннемуСоглашения);
			
			Проводка.Сумма = СтрокаТЧ.Сумма;
			Проводка.Содержание = "Передача задолженности по трехстороннему соглашению";
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ из ТабДДС Цикл
			
			Движение = движения.ден_ДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
			Движение.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход;
			Движение = движения.ден_ДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТЧ);
			движение.Контрагент = КонтрагентПоТрехстороннемуСоглашению;
			Движение.ДоговорКонтрагента = ДоговорКонтрагентаПоТрехстороннемуСоглашения;
			
		КонецЦикла;
		
	КонецЕсли;

	
	//Дополнительная проводка по структурному подразделению
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
			
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение = СтруктурноеПодразделение;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				КонтрагентПодразделения = НаборЗаписей[0].Контрагент;
			Иначе
				КонтрагентПодразделения = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			
			Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период     = СтруктураШапкиДокумента.Дата;		
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание = "Оплата поставщику";
				
				
				Проводка.СчетДт = СчетУчетаРасчетовСоСтруктурнымПодразделением;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, КонтрагентПодразделения);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);
				
				Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
					Проводка.СчетКт     = СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентомБУ;
					если ПередаватьЗадолженностьПоТрехстороннемуСоглашению тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, КонтрагентПоТрехстороннемуСоглашению);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ДоговорКонтрагентаПоТрехстороннемуСоглашения);
					иначе
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.ДоговорКонтрагента);
					КонецЕсли;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ТипОперации);
				Иначе
					Проводка.СчетКт     = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоДТБУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоДТБУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоДТБУ3);
				КонецЕсли;
				
				// установка валюты для валютных корреспонденций
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаПлатежа.СуммаПлатежа;
				КонецЕсли;
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
				
				Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
				
				
				
			КонецЦикла;	
		КонецЕсли;
	//ИначеЕсли 
	//	ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
	//	ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений тогда
	//	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
	//		
	//		НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Организация.Значение = СтруктурноеПодразделение;
	//		НаборЗаписей.Отбор.Организация.Использование = Истина;
	//		НаборЗаписей.Прочитать();
	//		
	//		Если НаборЗаписей.Количество() > 0 Тогда
	//			КонтрагентПодразделения = НаборЗаписей[0].Контрагент;
	//		Иначе
	//			КонтрагентПодразделения = Справочники.Контрагенты.ПустаяСсылка();
	//		КонецЕсли;
	//		
	//		Таб = ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов, ЭтотОбъект.ПеречислениеПенсионныхВзносов,ЭтотОбъект.ПеречислениеСоциальныхОтчислений);
	//		СчетКт = ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов, ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям,ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию);
	//		
	//		Для Каждого СтрокаПлатежа Из таб Цикл
	//			
	//			Проводка 						= ПроводкиБУ.Добавить();
	//			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
	//			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
	//			Проводка.ИсточникФинансирования = СтруктураШапкиДокумента.ИсточникФинансирования;
	//			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
	//			Проводка.СчетДт 				= СчетУчетаРасчетовСоСтруктурнымПодразделением;
	//			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, КонтрагентПодразделения);
	//			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);
	//			
	//			Проводка.СчетКт 				= СчетКт; 	
	//			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПлатежа.Документ.ВидПлатежа);
	//			Проводка.Сумма 					= СтрокаПлатежа.СуммаКПеречислению;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобственныеКонтрагенты.Организация,
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты";
	
	ТабСоб = запрос.Выполнить().Выгрузить();
	
	СчетПоЗп = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
		
		
	// Передать проводки по зарплате
	Для Каждого СтрокаВедомость Из ПеречислениеЗаработнойПлаты Цикл
		
		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() Тогда
				
				Сообщить("В строке № " + СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
				
			КонецЕсли;

			//{[+](фрагмент ДОБАВЛЕН), Олег И. 05.06.2023 14:30:15			
			Для Каждого СтрокаВедомостьЗарплата Из СтрокаВедомость.Ведомость.Зарплата Цикл
				
				Проводка				= ПроводкиБУ.Добавить();
				Проводка.Период			= СтруктураШапкиДокумента.Дата;		
				Проводка.Организация	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание		= "Передача факта оплаты структурному подразделению";			
				Проводка.СчетДт			= СчетУчетаРасчетовСоСтруктурнымПодразделением;
				СтрКонтр				= ТабСоб.Найти(СтрокаВедомость.Ведомость.Организация);
				
				Если СтрКонтр <> Неопределено тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,стрконтр.контрагент);
				КонецЕсли;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
				Проводка.СчетКт	= СчетПоЗп;				
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаВедомостьЗарплата.Физлицо);
				Проводка.Сумма	= СтрокаВедомостьЗарплата.Сумма;
				
			КонецЦикла;
			//}Олег И. 05.06.2023 14:30:15			
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Передать проводки по ОПВ
	//СчетОПВ = планысчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям; //-=-=
	
	Для каждого СтрокаВедомость из ПеречислениеПенсионныхВзносов Цикл
		
		//-=-=
		Если СтрокаВедомость.Документ.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
			СчетОПВ = ПланыСчетов.Типовой.НайтиПоКоду("3222");
		Иначе
			СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
		КонецЕсли;	
		//-=-=
		
		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() тогда
				Сообщить("В строке № "+ СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
			КонецЕсли;
			
			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			Проводка.СчетДт 				= СчетУчетаРасчетовСоСтруктурнымПодразделением;
			СтрКонтр = ТабСоб.Найти(СтрокаВедомость.документ.Организация);
			
			Если СтрКонтр<>Неопределено тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,стрконтр.контрагент);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
			Проводка.СчетКт 				= СчетОПВ; 	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаВедомость.Документ.ВидПлатежа);
			Проводка.Сумма 					= СтрокаВедомость.СуммаКПеречислению;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Передать проводки по СО
	
	Для каждого СтрокаВедомость из ПеречислениеСоциальныхОтчислений Цикл
		
			Если СтрокаВедомость.Документ.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
	        ИначеЕсли СтрокаВедомость.Документ.ВидОперации = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС Тогда
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
			Иначе
				 СчетОПВ = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию;
			КонецЕсли;
		
		Если СтрокаВедомость.ПередаватьЗадолженность Тогда
			
			Если СтрокаВедомость.Авизо.Пустая() тогда
				Сообщить("В строке № "+ СтрокаВедомость.НомерСтроки + " указана необходимость передачи задолженности, однако, не указан документ Авизо");
				Отказ = Истина;
			КонецЕсли;
			
			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			Проводка.СчетДт 				= СчетУчетаРасчетовСоСтруктурнымПодразделением;
			СтрКонтр = ТабСоб.Найти(СтрокаВедомость.документ.Организация);
			
			Если СтрКонтр<>Неопределено тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,стрконтр.контрагент);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);			
			Проводка.СчетКт 				= СчетОПВ; 	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаВедомость.Документ.ВидПлатежа);
			Проводка.Сумма 					= СтрокаВедомость.СуммаКПеречислению;
			
		КонецЕсли;
		
	КонецЦикла;	

	
	//Передать проводки по подотчету
	
	Для каждого СтрокаВедомость из ПеречислениеВПодотчет Цикл
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСоСтруктурнымПодразделением) И ЗначениеЗаполнено(СтруктурноеПодразделение)
			И ЗначениеЗаполнено(СтатьяОборотов) Тогда
			
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение = Организация;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
			Иначе
				КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;

			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			
				Проводка.СчетДт = СчетУчетаРасчетовСоСтруктурнымПодразделением;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, КонтрагентОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);
				
				Проводка.СчетКт     = СтрокаВедомость.СчетУчета;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаВедомость.ФизЛицо);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаВедомость.ВидЗадолженностиПодотчетногоЛица);
									
				// установка валюты для валютных корреспонденций
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтрокаВедомость.СуммаПлатежа;
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаВедомость.СуммаПлатежа;
				КонецЕсли;
				
				ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
				
				Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаВедомость.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
				СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);

		КонецЕсли;
		
	КонецЦикла;
	
	
	//Передать проводки по исполнительным листам
	
	Для каждого СтрокаВедомость из ПеречислениеПоИсполнительнымЛистам Цикл
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСоСтруктурнымПодразделением) Тогда
			
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Значение = Организация;
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				КонтрагентОрганизации = НаборЗаписей[0].Контрагент;
			Иначе
				КонтрагентОрганизации = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			Проводка 						= ПроводкиБУ.Добавить();
			Проводка.Период     			= СтруктураШапкиДокумента.Дата;		
			Проводка.Организация 			= СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Передача факта оплаты структурному подразделению";			
			
			СчетИЛ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоИсполнительнымЛистам;
			
			Проводка.СчетДт = СчетУчетаРасчетовСоСтруктурнымПодразделением;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, КонтрагентОрганизации);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяОборотов);
			
			Проводка.СчетКт = СчетИЛ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Контрагент);
			
			// установка валюты для валютных корреспонденций
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаВедомость.СуммаПлатежа;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаВедомость.СуммаПлатежа;
			КонецЕсли;
			
			ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
			
			Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаВедомость.СуммаПлатежа, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТА

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)     	
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);		
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		И Не ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств  Тогда
		СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделениеОтправитель;
	КонецЕсли;

	//Если НЕ Оплачено И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	//	ТекстСообщения = "Проведение документа возможно только после установки флага ""Платежное поручение оплачено"".
	//	|Документ будет записан без проведения."; 
	//	
	//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Информация);
	//	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	//КонецЕсли;	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "Проведение".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	                          
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;
		
	Иначе	
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента);
	
	ДатаДвижений = Дата;
	СтруктураШапкиДокумента.Вставить("Дата",ДатаДвижений);	
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
		// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
		ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
		ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
		СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
		СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
		СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	КонецЕсли;		
	 //так как для всех операций, кроме одной используется только одно поле дя выбора структурного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеОтправитель);
	Если НЕ ЕстьРасчетыСКонтрагентами Тогда
		Если РасшифровкаПлатежа.Количество() > 0 Тогда
			СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", РасшифровкаПлатежа[0].ДоговорКонтрагента);
		Иначе
			СтруктураШапкиДокумента.Вставить("ОсновнойДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;	
	
	//Бит источники финансирования 
	СтруктураШапкиДокумента.Вставить("ИсточникФинансирования", ИсточникФинансирования); 
	//Бит источники финансирования 
	
	// Документ должен принадлежать хотя бы к одному виду учета  (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПолучитьТаблицуПлатежейППУпр(СтруктураШапкиДокумента);
	ПодготовитьТаблицуЗатратНаКомиссиюБанка(СтруктураШапкиДокумента);
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты И РасшифровкаПлатежа.Количество()>0 И ЗначениеЗаполнено(РасшифровкаПлатежа[0].ДокументПланированияПлатежа) Тогда
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].ДокументПланированияПлатежа,"ДокументПланированияПлатежа");
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].Проект,"Проект");
		ТаблицаПлатежейУпр.ЗаполнитьЗначения(РасшифровкаПлатежа[0].Подразделение,"Подразделение");
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Режим, Заголовок);
	КонецЕсли;

	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если ВключатьКомиссиюБанка И СуммаКомиссии <> 0 И Не ЗначениеЗаполнено(СчетОрганизации.Банк.Контрагент) Тогда
		Отказ = Истина;
		Сообщить("Для отражения комиссинных взносов банку, необходимо заполнить поле ""Контрагент""" + Символы.ПС
		+ " у банка: " + СчетОрганизации.Банк);
		Возврат;		
	КонецЕсли; 	
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда 
		
		Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли;
		
	//Проверим на возможность проведения в БУ 
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда

		//Проверим на возможность проведения в БУ и НУ
		Для Каждого СтрокаОплаты Из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
											Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
										
	КонецЕсли;
		             
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если НЕ Отказ И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете  Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание) 
	ден_ПроцедурыКазначейства.ППИ_ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(ЭтотОбъект,Основание,мВалютаРегламентированногоУчета);
КонецПроцедуры
 
//Процедура проверяет на заполненость необходимых реквизитов документа
//необходимых для проведения по управленческому учету
//
Процедура ПроверитьЗаполнениеДокументаУпр(СтруктураШапкиДокумента, Отказ, Режим, Заголовок)

	СтруктураПолей = Новый Структура("Организация");
	
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если СчетБанк.Валютный Тогда
		СтруктураПолей.Вставить("ВалютаДокумента","Не указана валюта документа.");
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		СтруктураПолей.Вставить("Контрагент");		
	КонецЕсли;         
    ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	
    ДляОплаченных = УправлениеДенежнымиСредствами.ПрименятьКонтрольЗаполненияЗаявокДляОплаченныхДокументов(Дата);
	Если ОтраженоВОперУчете И ((НЕ Оплачено) ИЛИ ДляОплаченных)
		И (НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда

			ЕстьРазрешение=УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезЗаявки();
		
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
					СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
					
			Отказ=Отказ И НЕ ЕстьРазрешение;

		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"),СтруктурноеПодразделениеОтправитель);
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты И НЕ ПеречислениеЗаработнойПлаты.Количество()=0 Тогда
				
		// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НеВыплачено", Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	ВЫБОР  
		|		КОГДА НЕ(РанееВыплаченныеСуммы.Ведомость ЕСТЬ NULL)
		|			ТОГДА РанееВыплаченныеСуммы.Регистратор
		|		ИНАЧЕ
		|			NULL
		|	КОНЕЦ КАК КонфликтныйДокумент
		|			
		|	
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.ФизЛицо = РанееВыплаченныеСуммы.ФизЛицо
		|		   И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|		   И РанееВыплаченныеСуммы.Регистратор <> &Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка       = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить().Выбрать();

		Пока РезультатЗапроса.Следующий() Цикл
			Если ЗначениеЗаполнено(РезультатЗапроса.КонфликтныйДокумент) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПредставлениеДокументаПриПроведении(РезультатЗапроса.Ведомость)+": ведомость уже включена в " + РезультатЗапроса.КонфликтныйДокумент, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплате.Сумма+ЗарплатаКВыплате.ДепонированнаяСумма) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		НеСоответствиеСумм = Ложь;
		Если (НЕ Результат.Следующий()) ИЛИ Результат.СуммаВыплачено=NULL Тогда
			НеСоответствиеСумм = Истина;
		ИначеЕсли СтруктураШапкиДокумента.ВключатьКомиссиюБанка 		
				  И Результат.СуммаВыплачено > СтруктураШапкиДокумента.СуммаДокумента Тогда
			НеСоответствиеСумм = Истина;
		ИначеЕсли Не СтруктураШапкиДокумента.ВключатьКомиссиюБанка
				  И Результат.СуммаВыплачено <> СтруктураШапкиДокумента.СуммаДокумента Тогда
			НеСоответствиеСумм = Истина;
		КонецЕсли;
		
		Если НеСоответствиеСумм Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы "+?(СтруктураШапкиДокумента.ВключатьКомиссиюБанка, "(с учетом комиссиии банка)", ""), Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВключатьКомиссиюБанка И ОтражатьВБухгалтерскомУчете Тогда
			Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат для отнесения комиссии банка!",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

//формирует движения по управленческми регистрам накопления
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;

	ДвиженияПоСтатьям=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам=ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву=ТаблицаПлатежейУпр.Скопировать();

	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,ВестиПоДокументамРасчетовСКонтрагентом,Сделка,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
		
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к списанию"
		НаборДвиженийСписание   = Движения.ден_ДенежныеСредстваКСписанию;
		ТаблицаДвиженийСписание = НаборДвиженийСписание.Выгрузить();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаСКомиссией = ?(ВключатьКомиссиюБанка, СуммаДокумента + СуммаКомиссии, СуммаДокумента);
		СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаСКомиссией, ВалютаДокумента,
							Константы.ВалютаУправленческогоУчета.Получить(), 
							СтрокаКурсыВалют.КурсДокумента,
							СтрокаКурсыВалют.КурсУпрУчета, 
							СтрокаКурсыВалют.КратностьДокумента,
							СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийОстатки.Сумма               = СуммаСКомиссией;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		СтрокаДвиженийОстатки.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
		
		// По регистру "Денежные средства к списанию"
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийСписание = ТаблицаДвиженийСписание.Добавить();
			СтрокаДвиженийСписание.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвиженийСписание.Организация 		   = Организация;
			СтрокаДвиженийСписание.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийСписание.СуммаУпр            = СтрокаДвижение.СуммаУпр;
			СтрокаДвиженийСписание.ДокументСписания    = Ссылка;
			СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийСписание.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
			
		КонецЦикла;
		
		НаборДвиженийОстатки.мПериод              = ДатаДвижений;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ден_ДенежныеСредства.ВыполнитьРасход();
		
		Если ОтраженоВОперУчете Тогда
			НаборДвиженийСписание.мПериод              = ДатаДвижений;
			НаборДвиженийСписание.мТаблицаДвижений     = ТаблицаДвиженийСписание;
			Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьРасход();
		КонецЕсли;	
		Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			// Поступление на расчетный счет
			ТаблицаДвиженийОстатки.Очистить();
			
			СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
			СтрокаДвиженийОстатки.БанковскийСчетКасса = СчетКонтрагента;
			СтрокаДвиженийОстатки.Организация 		  = Организация;
			СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
			СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
			СтрокаДвиженийОстатки.СтруктурноеПодразделение  = СтруктурноеПодразделениеПолучатель;
			
			НаборДвиженийОстатки.мПериод              = ДатаДвижений;
			НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
			Движения.ден_ДенежныеСредства.ВыполнитьПриход();
			
			Если ОтраженоВОперУчете Тогда
				// по регистру "Денежные средства к получению"
				
				НаборДвиженийПолучение   = Движения.ден_ДенежныеСредстваКПолучению;
				ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
				
				Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
					
					СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
					СтрокаДвиженийПолучение.БанковскийСчетКасса = СчетКонтрагента;
					СтрокаДвиженийПолучение.Организация 		= Организация;
					СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
					СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
					СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
					СтрокаДвиженийПолучение.ДокументПолучения    = Ссылка;
					СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
					СтрокаДвиженийПолучение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
					
				КонецЦикла;
				
				НаборДвиженийПолучение.мПериод              = ДатаДвижений;
				НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
				Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;

	// По регистру "Денежные средства к списанию"
	НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКСписанию;
	ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
	ТаблицаДвиженийДС.Очистить();

	Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
		
		СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
		СтрокаДвиженийДС.БанковскийСчетКасса = СчетОрганизации;
		СтрокаДвиженийДС.Организация 		 = Организация;
		СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
		СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
		СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
		СтрокаДвиженийДС.ДокументСписания    = Ссылка;
		СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
		СтрокаДвиженийДС.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
		
	КонецЦикла;

	НаборДвиженийДС.мПериод              = ?(Оплачено,Мин(ДатаДвижений,Дата),Дата);
	НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
	Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		// По регистру "Денежные средства к получению"
		НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКПолучению;
		ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
		ТаблицаДвиженийДС.Очистить();
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
			СтрокаДвиженийДС.БанковскийСчетКасса = СчетКонтрагента;
			СтрокаДвиженийДС.Организация 		 = Организация;
			СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
			СтрокаДвиженийДС.ДокументПолучения   = Ссылка;
			СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийДС.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
			
		КонецЦикла;
		
		НаборДвиженийДС.мПериод              = ?(Оплачено,Мин(ДатаДвижений,Дата),Дата);
		НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
		Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
		
	КонецЕсли;
	
	ЕстьРезерв=Ложь;
	ЕстьРазмещение=Ложь;
	
	// По регистру "Денежные средства в резерве"
	НаборДвиженийРезерв   = Движения.ден_ДенежныеСредстваВРезерве;
	ТаблицаДвиженийРезерв = НаборДвиженийРезерв.Выгрузить();
	ТаблицаДвиженийРезерв.Очистить();
	
	// По регистру "Размещение заявок на расходование средств"
	НаборДвиженийРазмещение  = Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
	ТаблицаДвиженийРазмещение = НаборДвиженийРазмещение.Выгрузить();
	ТаблицаДвиженийРазмещение.Очистить();
	
	// По регистру "Заявки на расходование средств"
	НаборДвиженийЗаявки   = Движения.ден_ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.Выгрузить();
	ТаблицаДвиженийЗаявки.Очистить();
	
	// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
	Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
		
		Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументЗаявка",СтрокаЗаявка.ДокументПланированияПлатежа);
			Запрос.УстановитьПараметр("БанковскийСчетКасса",СчетОрганизации);
			Запрос.Текст = "ВЫБРАТЬ
			|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.ден_ДенежныеСредстваВРезерве.Остатки(, ДокументРезервирования = &ДокументЗаявка И БанковскийСчетКасса=&БанковскийСчетКасса) КАК ДенежныеСредстваВРезервеОстатки";
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL) И (НЕ Результат.СуммаОстаток=0) Тогда
				
				СтрокаДвижений = ТаблицаДвиженийРезерв.Добавить();
				СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвижений.Организация 		   = Организация;
				СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвижений.Сумма               = ?(Результат.СуммаОстаток <СтрокаЗаявка.СуммаПлатежаПлан,Результат.СуммаОстаток,СтрокаЗаявка.СуммаПлатежаПлан);
				СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
				СтрокаДвижений.СтруктурноеПодразделение  = СтруктурноеПодразделениеОтправитель;
				
				ЕстьРезерв=Истина;
				
			КонецЕсли;
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
			|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
			// Ранжируем планиуемые поступления для закрытия. Первыми закрывается размещение по планируемым поступлениям,
			// у которых совпадает счет, затем форма оплаты, затем организация.
			|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса=&СчетОрганизации
			|		Тогда 4
			|	Иначе 0
			|	Конец
			|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты=&ФормаОплаты
			|		Тогда 2
			|	Иначе 0
			|	Конец
			|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация=&Организация
			|		Тогда 1
			|	Иначе 0
			|	Конец) КАК Релевантность,
			|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
			|ИЗ
			|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования=&ДокументРезервирования) КАК РазмещениеЗаявок
			|ГДЕ НЕ((РазмещениеЗаявок.СуммаОстаток) ЕСТЬ NULL )";
			
			Запрос.УстановитьПараметр("СчетОрганизации",СчетОрганизации);
			Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ден_ВидыДенежныхСредств.Безналичные);
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("ДокументРезервирования",СтрокаЗаявка.ДокументПланированияПлатежа);
			
			ТабРазмещение=Запрос.Выполнить().Выгрузить();
			
			ТабРазмещение.Сортировать("Релевантность Убыв,ДатаПоступления Возр");
			
			СуммаКСписанию=СтрокаЗаявка.СуммаПлатежаПлан;
			
			Для Каждого Строка Из ТабРазмещение Цикл
				
				ЕстьРазмещение=Истина;
				
				СтрокаДвижение=ТаблицаДвиженийРазмещение.Добавить();
				СтрокаДвижение.ДокументПланирования=Строка.ДокументПланирования;
				СтрокаДвижение.ДокументРезервирования=СтрокаЗаявка.ДокументПланированияПлатежа;
				
				Если Строка.СуммаОстаток>=СуммаКСписанию Тогда
					
					СтрокаДвижение.Сумма=СуммаКСписанию;
					Прервать;
					
				Иначе
					
					СтрокаДвижение.Сумма=Строка.СуммаОстаток;
					СуммаКСписанию=СуммаКСписанию-Строка.СуммаОстаток;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРезерв тогда
		
		НаборДвиженийРезерв.мПериод          = Дата;
		НаборДвиженийРезерв.мТаблицаДвижений = ТаблицаДвиженийРезерв;	
		Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьРасход();
		
	КонецЕсли;
	
	Если ЕстьРазмещение Тогда
		
		НаборДвиженийРазмещение.мПериод          = Дата;
		НаборДвиженийРазмещение.мТаблицаДвижений = ТаблицаДвиженийРазмещение;	
		Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
		
	КонецЕсли;
	
	
	// По строкам табличной части
	Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
		
		ЕстьЗаявка=Ложь;
		ЕстьРасчеты=Ложь;
		
		Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
			
			СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
			СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
			СтрокаДвиженийЗаявки.СуммаУпр						= СтрокаПлатеж.СуммаУпр;
			СтрокаДвиженийЗаявки.Сумма							= СтрокаПлатеж.СуммаПлатежаПлан;
			СтрокаДвиженийЗаявки.СуммаВзаиморасчетов			= СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвиженийЗаявки.ЗаявкаНаРасходование			= СтрокаПлатеж.ДокументПланированияПлатежа;
			СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
			СтрокаДвиженийЗаявки.Проект							= СтрокаПлатеж.Проект;
			СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
			СтрокаДвиженийЗаявки.Организация					= Организация;
			СтрокаДвиженийЗаявки.СтруктурноеПодразделение  		= СтруктурноеПодразделениеОтправитель;
			СтрокаДвиженийЗаявки.ЦФО							= СтрокаПлатеж.Подразделение;
			
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты или
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику тогда
				Если СтрокаПлатеж.ДокументПланированияПлатежа = РасшифровкаПлатежа[0].ДокументПланированияПлатежа Тогда
					
					СтрокаДвиженийЗаявки.Контрагент = Контрагент;
				Иначе
					
					СтрокаДвиженийЗаявки.Контрагент	= Справочники.Контрагенты.ПустаяСсылка();
				КонецЕсли;
				
			Иначе
				СтрокаДвиженийЗаявки.Контрагент	= Контрагент;
				
			КонецЕсли;
			
			СтрокаДвиженийЗаявки.Сделка = СтрокаПлатеж.Сделка;
			
			Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаДвиженийЗаявки.Сделка = СтрокаПлатеж.Сделка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДвиженийЗаявки.Количество()>0 Тогда
		
		НаборДвиженийЗаявки.мПериод          = Дата;
		НаборДвиженийЗаявки.мТаблицаДвижений = ТаблицаДвиженийЗаявки;
		Движения.ден_ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
		
	КонецЕсли;
	

	Если Оплачено И ОтраженоВОперУчете Тогда  // Проводим по фактическим взаиморасчетам

		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		// Заполним таблицу движений. 
		
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
		
			
		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
		
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,ДатаДвижений,"ДенежныеСредстваСписание",Ссылка);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет,Контрагент,Организация),"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеОтправитель,"СтруктурноеПодразделение");
		
		
		НаборДвижений.мПериод            = ДатаДвижений;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(СчетКонтрагента,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
			
			НаборДвижений.мПериод            = ДатаДвижений;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//   
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураПолей.Вставить("СчетБанк","Не указан счет учета денежных средств");	
	КонецЕсли;
	
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");	
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаВыписки","Не указана дата выписки документа!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет  Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда

		СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГЦВП""");		

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

		СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГФСС""");		
		СтруктураПолей.Вставить("БанкПосредник", "Не заполнено значение реквизита ""ГЦВП""");		
		СтруктураПолей.Вставить("СчетБанкаПосредника", "Не заполнено значение реквизита ""Счет ГЦВП""");		
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация, СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

		
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда

		Если НЕ Оплачено Тогда // если Оплачено, то поле будет включено в СтруктураОбязательныхПолейОплата()
			СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГЦВП""");		
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

		Если НЕ Оплачено Тогда // если Оплачено, то поле будет включено в СтруктураОбязательныхПолейОплата()
			СтруктураПолей.Вставить("Контрагент", "Не заполнено значение реквизита ""ГФСС""");		
			СтруктураПолей.Вставить("БанкПосредник", "Не заполнено значение реквизита ""ГЦВП""");		
			СтруктураПолей.Вставить("СчетБанкаПосредника", "Не заполнено значение реквизита ""Счет ГЦВП""");		
		КонецЕсли;
		
	Иначе
	
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

//Процедура формирует таблицу для затрат на комиссию банка
//
Процедура ПодготовитьТаблицуЗатратНаКомиссиюБанка(СтруктураШапкиДокумента)

	Если ТаблицаПлатежейУпр.Колонки.Найти("ВидСтрокиЗапроса") = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	ТаблицаЗатратНаКомиссиюБанка = ТаблицаПлатежейУпр.Скопировать();
	Н = ТаблицаЗатратНаКомиссиюБанка.Количество() - 1;
	Пока Н >= 0 Цикл
		Если ТаблицаЗатратНаКомиссиюБанка[Н].ВидСтрокиЗапроса <> "КомиссияБанка" Тогда
			ТаблицаЗатратНаКомиссиюБанка.Удалить(Н);
		КонецЕсли;			
		Н = Н - 1;
	КонецЦикла;
	
	Если ТаблицаЗатратНаКомиссиюБанка.Количество() > 0 Тогда // комиссия всегда идет одной строкой

		// дополним таблицу движений дополнительными колонками - по аналогии с табл. часть документа ПрочиеЗатраты
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("Продукция", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		//ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СерияПродукции", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("Сумма");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СчетЗатратБУ");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СчетЗатратНУ");
		//ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("Заказ");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратБУ1");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратБУ2");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратБУ3");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратНУ1");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратНУ2");
		ТаблицаЗатратНаКомиссиюБанка.Колонки.Добавить("СубконтоЗатратНУ3");
				
		// заполним добавленные колонки 
		ТаблицаЗатратНаКомиссиюБанка.ЗаполнитьЗначения(ТаблицаЗатратНаКомиссиюБанка[0].СуммаРегл, "Сумма"); // УправлениеПроизводством.ДвиженияПоПрочимЗатратамУпр() сама пересчитает в валюту упр. учета
		ТаблицаЗатратНаКомиссиюБанка.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомБУ, "СчетЗатратБУ");
		ТаблицаЗатратНаКомиссиюБанка.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомНУ, "СчетЗатратНУ");
		
		Для Н = 1 По 3 Цикл
			ТаблицаЗатратНаКомиссиюБанка.ЗаполнитьЗначения(СтруктураШапкиДокумента["СубконтоДтБУ" + Н], "СубконтоЗатратБУ" + Н);
			ТаблицаЗатратНаКомиссиюБанка.ЗаполнитьЗначения(СтруктураШапкиДокумента["СубконтоДтНУ" + Н], "СубконтоЗатратНУ" + Н);
		КонецЦикла;
		
		// попытаемся подставить прочую аналитику по значениям субконто
		Для Каждого Колонка Из ТаблицаЗатратНаКомиссиюБанка.Колонки Цикл
			Если Не ЗначениеЗаполнено(ТаблицаЗатратНаКомиссиюБанка[0][Колонка.Имя]) Тогда
				Для Н = 1 По 3 Цикл
					Если Колонка.ТипЗначения.СодержитТип(ТипЗнч(СтруктураШапкиДокумента["СубконтоДтБУ" + Н])) Тогда
						ТаблицаЗатратНаКомиссиюБанка[0][Колонка.Имя] = СтруктураШапкиДокумента["СубконтоДтБУ" + Н];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры
 
// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейППУпр(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Если Не (ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты  ИЛИ 
		 ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты ИЛИ 
		 ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов  ИЛИ 
		 ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам  ИЛИ 
		 ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику  ИЛИ
		 ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений ) Тогда
		 		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПлатежноеПоручениеИсходящее",(ВключатьКомиссиюБанка И СуммаКомиссии<>0))

	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
			ИмяТЧ = ПеречислениеЗаработнойПлаты;
			ТЧ    = "ПеречислениеЗаработнойПлаты";
			СуммаКВыплате = "СуммаКВыплате";
		иначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ИмяТЧ = ПеречислениеВПодотчет;
			ТЧ    = "ПеречислениеВПодотчет";
			СуммаКВыплате = "СуммаПлатежа";
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
			ИмяТЧ = ПеречислениеНДССИзмененнымСрокомУплаты;
			ТЧ    = "ПеречислениеНДССИзмененнымСрокомУплаты";
			СуммаКВыплате = "СуммаПлатежа";
		ИначеЕсли  ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
			ИмяТЧ = ПеречислениеПенсионныхВзносов;
			ТЧ    = "ПеречислениеПенсионныхВзносов";
			СуммаКВыплате = "СуммаКПеречислению";
		ИначеЕсли   ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам  Тогда
			ИмяТЧ = ПеречислениеПоИсполнительнымЛистам ;
			ТЧ    = "ПеречислениеПоИсполнительнымЛистам";
			СуммаКВыплате = "СуммаКПеречислению";
		Иначе
			ИмяТЧ = ПеречислениеСоциальныхОтчислений ;	
			ТЧ    = "ПеречислениеСоциальныхОтчислений";  	
			СуммаКВыплате = "СуммаКПеречислению";
			
		КонецЕсли;
		
		Если ИмяТЧ.Количество()>0 Тогда
			Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты Тогда
				Запрос.Текст="ВЫБРАТЬ 
				|	Договор КАК ДоговорКонтрагента,  
			    |	Док.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
				|	Док.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
				|	Док.Проект КАК Проект, ";
				Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств" , СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , РасшифровкаПлатежа[0].ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("Проект" , РасшифровкаПлатежа[0].Проект);

			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
				Запрос.Текст="ВЫБРАТЬ 
				|	&ПустойДоговор КАК ДоговорКонтрагента, 
				|	Док.СтатьяДвиженияДенежныхСредств,
				|	Док.ДокументПланированияПлатежа,			
				|	Док.Проект, " ;

			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
				Запрос.Текст="ВЫБРАТЬ 
				|	&ПустойДоговор КАК ДоговорКонтрагента, 
				|	Док.СтатьяДвиженияДенежныхСредств,
				|	Док.ДокументПланированияПлатежа,
				|	Док.Проект, ";
			Иначе
				
				Запрос.Текст="ВЫБРАТЬ 
				|	&ПустойДоговор КАК ДоговорКонтрагента, 
				|	&СтатьяДвиженияДенежныхСредств,
				|	&ДокументПланированияПлатежа,
				|	&Проект, " ;
				
				Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств" ,  РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , РасшифровкаПлатежа[0].ДокументПланированияПлатежа);
				Запрос.УстановитьПараметр("Проект" , РасшифровкаПлатежа[0].Проект);
				
			КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
				
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	Док.Подразделение КАК Подразделение,
			|	Док." + СуммаКВыплате + " КАК СуммаПлатежа,
			|	Док." + СуммаКВыплате + "  КАК СуммаВзаиморасчетов,
			|	Док." + СуммаКВыплате + "  КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА Док." + СуммаКВыплате + " 
			|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			Док." + СуммаКВыплате + " *КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА Док." + СуммаКВыплате + " 
			|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
			|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
			|			Док." + СуммаКВыплате + " *КурсыДокумента.Курс
			|			/ КурсыДокумента.Кратность
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
			|	" + ?(ВключатьКомиссиюБанка, ",
			|	"""" КАК ВидСтрокиЗапроса,
			|	NULL КАК ПодразделениеОрганизации", "") + "
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее."  + ТЧ + "   КАК Док
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
			|	ПО ИСТИНА
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
			|	ПО ИСТИНА
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
										
		Иначе  			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&ПустойДоговор КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	Док.Подразделение КАК Подразделение,
			|	Док.СуммаДокумента КАК СуммаПлатежа,
			|	Док.СуммаДокумента КАК СуммаВзаиморасчетов,
			|	Док.СуммаДокумента КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА Док.СуммаДокумента
			|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|			Док.СуммаДокумента*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
			|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ 
			|	(ВЫБОР 
			|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА Док.СуммаДокумента
			|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
			|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
			|			Док.СуммаДокумента*КурсыДокумента.Курс
			|			/ КурсыДокумента.Кратность
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
			|	&ПустаяСтатья КАК СтатьяДвиженияДенежныхСредств,
			|	&ПустойДокументПланирования КАК ДокументПланированияПлатежа,
			|	&ПустойПроект КАК Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее КАК Док
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
			|	ПО ИСТИНА
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
			|	ПО ИСТИНА
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
				
			Запрос.УстановитьПараметр("ПустаяСтатья", ?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты И РасшифровкаПлатежа.Количество()>0,РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка()));
			Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойДокументПланирования", Документы.ден_ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
				
		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНДССИзмененнымСрокомУплаты ИЛИ
			ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты ИЛИ
			ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ИмяТЧДляКомиссии = ИмяТЧ;
		Иначе
			ИмяТЧДляКомиссии = РасшифровкаПлатежа;
		КонецЕсли; 					
		
		Если ИмяТЧДляКомиссии.Количество() >0 И ВключатьКомиссиюБанка  И СуммаКомиссии <> 0 Тогда
				
				// добавим еще оплату комиссии банка				
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СчетОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	ВЫБОР 
				|		КОГДА  Док.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
				|			ТОГДА Док.СчетОрганизации.СтатьяДвиженияДенежныхСредств
				|		ИНАЧЕ  Док.СтатьяДвиженияДенежныхСредств
				|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
				|	&ДокументПланированияПлатежа,
//				|	&ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
				|	&Проект,
				|	НЕОПРЕДЕЛЕНО КАК Сделка,
//				|	Неопределено КАК ДокументРасчетовСКонтрагентом,
				|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
				|	Док.Подразделение КАК Подразделение,
				|	Док.СуммаКомиссии КАК СуммаПлатежа,
				|	Док.СуммаКомиссии КАК СуммаВзаиморасчетов,
				|	Док.СуммаКомиссии КАК СуммаПлатежаПлан,
				|	ВЫРАЗИТЬ 
				|	(ВЫБОР 
				|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА Док.СуммаКомиссии 
				|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
				|			(Док.СуммаКомиссии )*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
				|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
				|		ИНАЧЕ
				|			0
				|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
				|	ВЫРАЗИТЬ 
				|	(ВЫБОР 
				|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА Док.СуммаКомиссии
				|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
				|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
				|			(Док.СуммаКомиссии)*КурсыДокумента.Курс
				|			/ КурсыДокумента.Кратность
				|		ИНАЧЕ
				|			0
				|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
				|	ВЫБОР
				|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
				|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
				|	ВЫБОР
				|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
				|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
				|	ВЫБОР
				|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
				|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
				|	ВЫБОР
				|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
				|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета
				|	"+ ?(ВключатьКомиссиюБанка, ",
				|	"""" КАК ВидСтрокиЗапроса,
				|	NULL КАК ПодразделениеОрганизации", "") + "
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее КАК Док
				|	ЛЕВОЕ СОЕДИНЕНИЕ 
				|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
				|	ПО ИСТИНА
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
				|	ПО ИСТИНА
				|ГДЕ
				|	Док.Ссылка = &Ссылка";
				
				Попытка
					Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , ИмяТЧДляКомиссии[0].ДокументПланированияПлатежа);
					Запрос.УстановитьПараметр("ВключатьВПлатежныйКалендарь" , ИмяТЧДляКомиссии[0].ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь);
					Запрос.УстановитьПараметр("Проект" , ИмяТЧДляКомиссии[0].Проект);
				Исключение
					Запрос.УстановитьПараметр("ДокументПланированияПлатежа" , Документы.ден_ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
					Запрос.УстановитьПараметр("ВключатьВПлатежныйКалендарь" , Ложь);
					Запрос.УстановитьПараметр("Проект" , Справочники.Проекты.ПустаяСсылка());
				КонецПопытки;
			КонецЕсли;   		
		
		Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаДокумента",ДатаДвижений);
		Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуПлатежей()

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.СогласованоБП = ЛОЖЬ;
	ЭтотОбъект.СогласованоГБ = Ложь;
	ЭтотОбъект.СогласованоДП = Ложь;
	ЭтотОбъект.УтверженоК = Ложь;
КонецПроцедуры

мВалютаРегламентированногоУчета 				= Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения				= ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
