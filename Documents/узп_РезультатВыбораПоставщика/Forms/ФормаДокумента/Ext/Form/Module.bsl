
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Строки = ПодборПоставщика.ПолучитьЭлементы();
	Для Каждого СтрокаТЧ Из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Поставщик) Тогда
			НайденныеПозиции = ТекущийОбъект.Позиции.НайтиСтроки(Новый Структура("Номенклатура,основной", СтрокаТЧ.Номенклатура,истина));
			Для Каждого НайденнаяПозиция из НайденныеПозиции Цикл
				НайденнаяПозиция.Поставщик = СтрокаТЧ.Поставщик;
				НайденнаяПозиция.ИтоговыйБалл = СтрокаТЧ.ИтоговыйБалл;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	дог_УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

&НаКлиенте
Процедура ПодборПоставщикаПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	////СтандартнаяОбработка = Ложь;
	//МассивПоставщиков = Новый Массив;
	//Элементы.ПодборПоставщикаПоставщик.РежимВыбораИзСписка = Истина;
	//Строки = ПодборПоставщика.ПолучитьЭлементы();
	//Для Индекс = 0 По Строки.Количество() - 1 Цикл
	//	СтрокаТЧ = Строки[Индекс];
	//	Если СтрокаТЧ.Номенклатура = Элементы.ПодборПоставщика.ТекущиеДанные.Номенклатура Тогда 
	//		ПоставщикиНоменклатуры = ПодборПоставщика.ПолучитьЭлементы().Получить(Индекс).ПолучитьЭлементы();
	//		Для каждого Поставщик из ПоставщикиНоменклатуры Цикл
	//			Если ЗначениеЗаполнено(Поставщик.Поставщик) Тогда 
	//				МассивПоставщиков.Добавить(Поставщик.Поставщик);
	//				//Элементы.ПодборПоставщикаПоставщик.СписокВыбора.Добавить(Поставщик.Поставщик);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//ДанныеВыбора = МассивПоставщиков;
	//
	СтандартнаяОбработка = Ложь;
	Элементы.ПодборПоставщикаПоставщик.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Элементы.ПодборПоставщика.ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Истина;
		Элементы.ПодборПоставщикаПоставщик.РежимВыбораИзСписка = Истина;
		Строки = ПодборПоставщика.ПолучитьЭлементы();
		
		Для Индекс = 0 По Строки.Количество() - 1 Цикл
			СтрокаТЧ = Строки[индекс];
			Если СтрокаТЧ.Номенклатура = Элементы.ПодборПоставщика.ТекущиеДанные.Номенклатура Тогда 
				ПоставщикиНоменклатуры = ПодборПоставщика.ПолучитьЭлементы().Получить(Индекс).ПолучитьЭлементы();
				Для каждого Поставщик из ПоставщикиНоменклатуры Цикл
					Если ЗначениеЗаполнено(Поставщик.Поставщик) Тогда 
						Элементы.ПодборПоставщикаПоставщик.СписокВыбора.Добавить(Поставщик.Поставщик);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоставщикаПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НайденныйПоставщик = Объект.НоменклатураПоставщиков.НайтиСтроки(Новый Структура("Контрагент",ВыбранноеЗначение));
	Для каждого Поставщик из НайденныйПоставщик Цикл
		Элементы.ПодборПоставщика.ТекущиеДанные.ИтоговыйБалл = Поставщик.ИтоговыйБалл;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоставщикаПриАктивизацииСтроки(Элемент)
	Если ЗначениеЗаполнено(объект.ДокументОснование) Тогда
		Элементы.ПодборПоставщикаНоменклатура.ТолькоПросмотр = истина;
	Иначе
		Элементы.ПодборПоставщикаНоменклатура.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура РассчитатьБаллы(Команда)
	ОбновитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	МассивКонтрагентов = СформироватьЗаказыНаСервере();
	Для Каждого СтрокаКонтрагент Из МассивКонтрагентов Цикл
		ПараметрыФормы = Новый Структура;
		Документ = ПолучитьФорму("Документ.узп_ЗаказПоставщику.ФормаОбъекта",ПараметрыФормы,,Новый УникальныйИдентификатор);
		//Документы.узп_ЗаказПоставщику.ЗаполнитьПоДокументуОснованию();
		Документ.Объект.Контрагент = СтрокаКонтрагент.Контрагент;
		Документ.Объект.ТипЦен = Объект.ТипЦен;
		Документ.Объект.Организация = Объект.Организация;
		Документ.Объект.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		Документ.Объект.ДокументОснование = Объект.Ссылка;
		Документ.Объект.ТипЦен = Объект.ТипЦен;
		Документ.Объект.Дата = ТекущаяДата();
		Для Каждого СтрокаТЧ Из СтрокаКонтрагент.ТЧ Цикл
			Если ПолучитьСвойство(СтрокаТЧ.Номенклатура,"Услуга") Тогда
				НоваяСтрока = Документ.Объект.Услуги.Добавить();
				ТЧ = "Услуги";
			Иначе
				НоваяСтрока = Документ.Объект.Товары.Добавить();
				ТЧ = "Товары";
			КонецЕсли;
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			Если ИспользоватьХарактеристики Тогда
				НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
			КонецЕсли;
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			НоваяСтрока.ЗаявкаМТС = СтрокаТЧ.Заявка;
			НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
			НоваяСтрока.ОбъектРемонта = СтрокаТЧ.ОбъектРемонта;
			Если ИспользоватьПроекты Тогда
				НоваяСтрока.Проект = СтрокаТЧ.Проект;
			КонецЕсли;
			НайденныеСтроки = Объект.НоменклатураПоставщиков.НайтиСтроки(Новый Структура("Контрагент, Номенклатура", СтрокаКонтрагент.Контрагент,СтрокаТЧ.Номенклатура));
			ЗаполнитьЗначенияСвойств(НоваяСтрока,НоменклатураПриИзмененииНаСервере(НоваяСтрока.ПолучитьИдентификатор(), ТЧ, Документ.Объект));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока.Цена = НайденнаяСтрока.Цена;
			КонецЦикла;
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			НоваяСтрока.СрокПоставки = Документ.Объект.СрокПоставки;
			
			УстановитьДанныеСтрокиЗаказа(НоваяСтрока,ТЧ);
			//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока);
			//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Документ.Объект);
			//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(НоваяСтрока, Документ.Объект.СуммаВключаетНДС);
		КонецЦикла;
		Документ.Объект.СуммаДокумента = Документ.Объект.Товары.Итог("Сумма")+Документ.Объект.Услуги.Итог("Сумма")+?(Документ.Объект.УчитыватьНДС И НЕ Документ.Объект.СуммаВключаетНДС,Документ.Объект.Товары.Итог("СуммаНДС")+Документ.Объект.Услуги.Итог("СуммаНДС"),0);
		Документ.Открыть();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьДанныеСтрокиЗаказа(СтрокаТЧ,ТЧ = "Товары")
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ПредопределенноеЗначение("Документ.узп_ЗаказПоставщику.ПустаяСсылка"));
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.УчитыватьНДС = истина;//ПолучитьСвойство(ДанныеОбъекта.ТипЦен,"УчитыватьНДС");
	ДанныеОбъекта.СуммаВключаетНДС = ПолучитьСвойство(ДанныеОбъекта.ТипЦен,"ЦенаВключаетНДС");
	ТекущиеДанные 							= СтрокаТЧ;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда
		ТекущиеДанные.СтавкаНДС = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), "ОсновнаяСтавкаНДС");
		Если ТЧ = "Товары" Тогда
			ТекущиеДанные.ЕдиницаИзмерения = ПолучитьСвойство(ТекущиеДанные.Номенклатура,"ПлановаяЕдиницаИзмерения");
			ТекущиеДанные.Коэффициент = 1;
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ПредопределенноеЗначение("Документ.узп_ЗаказПоставщику.ПустаяСсылка"),ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	//МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	Если Не СведенияОНоменклатуре = Неопределено Тогда
		ДанныеСтрокиТаблицы.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ПолучитьСвойство(ДанныеСтрокиТаблицы.Номенклатура,"БазоваяЕдиницаИзмерения");
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаСервере 
Функция НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "Товары", знач Объект)
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ТекущиеДанные 							= Объект[ТЧ].НайтиПоИдентификатору(Идентификатор);
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат Новый Структура("");
	КонецЕсли;
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") Тогда
		ДанныеСтрокиТаблицы.СтавкаНДС = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяСтавкаНДС");
		Если ТЧ = "Товары" Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения = ТекущиеДанные.Номенклатура.ПлановаяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
			ДанныеСтрокиТаблицы.СтавкаНДС = ТекущиеДанные.Номенклатура.СтавкаНДС;
		КонецЕсли;
		Возврат ДанныеСтрокиТаблицы;
	КонецЕсли;
	//МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат ДанныеСтрокиТаблицы;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
		//ДанныеСтрокиТаблицы.Цена			   	= СведенияОНоменклатуре.Цена;
	КонецЕсли;
	ДанныеСтрокиТаблицы.СтавкаНДС         	= СведенияОНоменклатуре.СтавкаНДС;
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	//ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	Возврат ДанныеСтрокиТаблицы
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокЗаказов(Команда)
	ОбновитьСписокЗаказовНаСервере();
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Состояние) Тогда
		Объект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	ИспользоватьХарактеристики = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ИспользоватьХарактеристикиНоменклатурыПриПланированииЗакупок");
	ИспользоватьПроекты = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	
	ОбновитьДанные();
	
	ОбновитьСписокЗаказовНаСервере();
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СформироватьНадписьЦеныИВалюта(Форма);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьНоменклатуруПоставщиков()
	НайденныеСтроки = Объект.НастройкиСхемыРасчета.НайтиСтроки(Новый Структура("Критерий", ПланыВидовХарактеристик.узп_КритерииОценкиПоставщиков.Цена));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Коэффициент = 0;
	Иначе
		Коэффициент = НайденныеСтроки[0].Приоритет;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Лот", Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ТипЦен", Объект.ТипЦен);
	Запрос.УстановитьПараметр("СписокТоваров", Объект.Позиции.Выгрузить(,"Номенклатура"));
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	узп_ОценкаПоставщиковСрезПоследних.Контрагент
	               |ПОМЕСТИТЬ ВТ_Контрагенты
	               |ИЗ
	               |	РегистрСведений.узп_ОценкаПоставщиков.СрезПоследних(&Период, Лот = &Лот) КАК узп_ОценкаПоставщиковСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Номенклатура КАК Номенклатура,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.ТипЦен,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Валюта,
	               |	ЕСТЬNULL(узп_ПереченьЦенПоставщиковСрезПоследних.Цена, 0) КАК Цена,
	               |	0 КАК ИтоговыйБалл,
	               |	ВТ_Контрагенты.Контрагент,
	               |	узп_ПереченьЦенПоставщиковСрезПоследних.Характеристика
	               |ИЗ
	               |	ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПереченьЦенПоставщиков.СрезПоследних(
	               |				&Период,
	               |				Номенклатура В (&СписокТоваров)
	               |					И ТИПЗНАЧЕНИЯ(Регистратор.ДокументОснование) = ТИП(Документ.узп_Лот)
	               |					И ТипЦен = &ТипЦен) КАК узп_ПереченьЦенПоставщиковСрезПоследних
	               |		ПО ВТ_Контрагенты.Контрагент = узп_ПереченьЦенПоставщиковСрезПоследних.Контрагент
	               |ИТОГИ
	               |	МИНИМУМ(Цена)
	               |ПО
	               |	Номенклатура";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() ТОгда
		Возврат;
	КонецЕсли;
	ТЧШаблон = Результат.Выгрузить();
	ТЧШаблон.Очистить();
	ТЧ = ТЧШаблон.Скопировать();
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ТЧТекНоменклатура = ТЧШаблон.Скопировать();
		МинЦена = ВыборкаНоменклатура.Цена;
		МаксЦена = ВыборкаНоменклатура.Цена;
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТЧТекНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ТЧТекНоменклатура Цикл
			Если СтрокаТЧ.Цена < МинЦена Тогда
				МинЦена = СтрокаТЧ.Цена;
			КонецЕсли;
			Если СтрокаТЧ.Цена > МаксЦена Тогда
				МаксЦена = СтрокаТЧ.Цена;
			КонецЕсли;
		КонецЦикла;
		Дельта = МаксЦена - МинЦена;
		Для Каждого СтрокаТЧ Из ТЧТекНоменклатура Цикл
			Если СтрокаТЧ.Цена = МинЦена Тогда 
				СтрокаТЧ.ИтоговыйБалл 	= 5
			ИначеЕсли СтрокаТЧ.Цена = МаксЦена Тогда 
				СтрокаТЧ.ИтоговыйБалл 	= 0
			Иначе
				ТекущаяДельта 			= СтрокаТЧ.Цена - МинЦена;
				ПромежуточныйБалл 		= 5 * ТекущаяДельта / ?(Дельта=0,1,Дельта);
				СтрокаТЧ.ИтоговыйБалл 	= 5 - ПромежуточныйБалл;
			КонецЕсли;
		КонецЦикла;
		//вычисление итогового балла
		Для Каждого СтрокаТЧ Из ТЧТекНоменклатура Цикл
			НоваяСтрока 				= ТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
			//НоваяСтрока.ИтоговыйБалл 	= НоваяСтрока.ИтоговыйБалл * Коэффициент / 100;
		КонецЦикла;
	КонецЦикла;
	
	Объект.НоменклатураПоставщиков.Загрузить(ТЧ);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ПодборПоставщика");
	Дерево.Строки.Очистить();
	СписокНоменклатур = Объект.Позиции.Выгрузить();
	Если ИспользоватьПроекты Тогда
		СтрокаПроект = ", Проект";
	Иначе
		СтрокаПроект = "";
	КонецЕсли;
	Если ИспользоватьХарактеристики Тогда 
		СтрокаХарактеристика = ", Характеристика";
	Иначе
		СтрокаХарактеристика = "";
	КонецЕсли;
	//Если ИспользоватьХарактеристики Тогда 
	//	СписокНоменклатур.Свернуть("Номенклатура, Характеристика, Заявка, Проект", "Количество");
	//Иначе
	//	СписокНоменклатур.Свернуть("Номенклатура, Заявка, Проект", "Количество");
	//КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СписокНоменклатур Цикл
		НоваяСтрокаНоменклатура = Дерево.Строки.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = СтрокаТЧ.Номенклатура;
		Если ИспользоватьХарактеристики Тогда
			НоваяСтрокаНоменклатура.Характеристика = СтрокаТЧ.Характеристика;
			ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
		Иначе
			ПараметрыПоиска = Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура);
		КонецЕсли;
		НоваяСтрокаНоменклатура.Количество = СтрокаТЧ.Количество;
		НоваяСтрокаНоменклатура.Заявка = СтрокаТЧ.Заявка;
		НоваяСтрокаНоменклатура.Подразделение = СтрокаТЧ.Подразделение;
		НоваяСтрокаНоменклатура.ОбъектРемонта = СтрокаТЧ.ОбъектРемонта;
		Если ИспользоватьПроекты Тогда
			НоваяСтрокаНоменклатура.Проект = СтрокаТЧ.Проект;
		КонецЕсли;
		
		НайденныеПоставщики = Объект.НоменклатураПоставщиков.НайтиСтроки(ПараметрыПоиска);
		
		Подстрока = Неопределено;
		Если Не НайденныеПоставщики.Количество()=0 Тогда 
			ЛучшийПоставщик = НайденныеПоставщики[0].Контрагент;
			ЛучшийБалл = НайденныеПоставщики[0].ИтоговыйБалл;
			//Количество = НайденныеПоставщики[0].Количество;
		КонецЕсли;
		
		Для Каждого НайденныйПоставщик из НайденныеПоставщики Цикл
			Подстрока = НоваяСтрокаНоменклатура.Строки.Добавить();
			Подстрока.Поставщик = НайденныйПоставщик.Контрагент;
			Подстрока.ИтоговыйБалл = НайденныйПоставщик.ИтоговыйБалл;
			//Подстрока.ПоУмолчанию = ?(НайденныйПоставщик.Контрагент = СтрокаТЧ.Номенклатура.ОсновнойПоставщик, Истина, Ложь);
			Если НайденныйПоставщик.ИтоговыйБалл > ЛучшийБалл Тогда
				ЛучшийБалл = НайденныйПоставщик.ИтоговыйБалл;
				ЛучшийПоставщик = НайденныйПоставщик.Контрагент;
				//ПоУмолчанию = ?(НайденныйПоставщик.Контрагент = СтрокаТЧ.Номенклатура.ОсновнойПоставщик, Истина, Ложь);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПодСтрокаТЧ Из НоваяСтрокаНоменклатура.Строки Цикл
			Если ПодСтрокаТЧ.Поставщик = ЛучшийПоставщик Тогда
				ПодСтрокаТЧ.Основной = Истина;
			Иначе
				ПодСтрокаТЧ.Основной = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Подстрока = Неопределено Тогда
			Подстрока = НоваяСтрокаНоменклатура.Строки.Добавить();
			Подстрока.Поставщик = Справочники.Контрагенты.ПустаяСсылка();	
			Подстрока.ИтоговыйБалл =0;
			ЛучшийБалл = 0;
			ЛучшийПоставщик = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		НоваяСтрокаНоменклатура.Поставщик = ЛучшийПоставщик;
		НоваяСтрокаНоменклатура.ИтоговыйБалл = ЛучшийБалл;
		//НоваяСтрокаНоменклатура.ОсновнойПоставщик = узп_УправлениеЗакупками.ПолучитьПараметрыНоменклатуры(СтрокаТЧ.Номенклатура).ОсновнойПоставщик;
		НоваяСтрокаНоменклатура.ОсновнойПоставщик = СтрокаТЧ.Номенклатура.ОсновнойПоставщик;
		Если СтрокаТЧ.Поставщик = НоваяСтрокаНоменклатура.ОсновнойПоставщик 
			И ЗначениеЗаполнено(СтрокаТЧ.Поставщик) Тогда 
			НоваяСтрокаНоменклатура.ИспользоватьОсновногоПоставщика = Истина;
		КонецЕсли;
		//НоваяСтрокаНоменклатура.Количество = Количество;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево,"ПодборПоставщика");
	ВывестиОтчетОбАналитике();
КонецПроцедуры

&НаСервере
Функция РассчитатьБаллыПоставщиков()
	Объект.АналитикаПодбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СхемаРасчета",Объект.СхемаРасчета);
	Запрос.УстановитьПараметр("Дата",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Лот",Объект.ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.СхемаРасчета,
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.Критерий,
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.Приоритет,
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.ШкалаФормула,
	               |	узп_ОценкаПоставщиковСрезПоследних.Контрагент,
	               |	узп_ОценкаПоставщиковСрезПоследних.Лот,
	               |	узп_ОценкаПоставщиковСрезПоследних.Балл,
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.Приоритет * узп_ОценкаПоставщиковСрезПоследних.Балл / 100 КАК ИтоговыйБалл,
	               |	узп_ПозицииЛота.Номенклатура,
				   |	узп_ПозицииЛота.Характеристика
	               |ИЗ
	               |	РегистрСведений.узп_НастройкиСхемРасчетаОценок.СрезПоследних(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И СхемаРасчета = &СхемаРасчета) КАК узп_НастройкиСхемРасчетаОценокСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ОценкаПоставщиков.СрезПоследних(
	               |				&Дата,
	               |				Организация = &Организация
	               |					И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |					И Лот = &Лот) КАК узп_ОценкаПоставщиковСрезПоследних
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПозицииЛота КАК узп_ПозицииЛота
	               |			ПО узп_ПозицииЛота.Лот = узп_ОценкаПоставщиковСрезПоследних.Лот
	               |		ПО узп_НастройкиСхемРасчетаОценокСрезПоследних.Организация = узп_ОценкаПоставщиковСрезПоследних.Организация
	               |			И узп_НастройкиСхемРасчетаОценокСрезПоследних.СтруктурноеПодразделение = узп_ОценкаПоставщиковСрезПоследних.СтруктурноеПодразделение
	               |			И узп_НастройкиСхемРасчетаОценокСрезПоследних.Критерий = узп_ОценкаПоставщиковСрезПоследних.Критерий";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не обнаружены настройки для выбранной схемы расчета!");
		Возврат Ложь;
	КонецЕсли;
	
	ПриоритетыСхемыРасчета = Результат.Выгрузить();
	Для Каждого СтрокаТЧ Из Объект.НоменклатураПоставщиков Цикл
		НайденныеСтроки = ПриоритетыСхемыРасчета.НайтиСтроки(Новый Структура("Контрагент, Номенклатура, Критерий", СтрокаТЧ.Контрагент, СтрокаТЧ.Номенклатура, ПланыВидовХарактеристик.узп_КритерииОценкиПоставщиков.Цена));
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НайденнаяСтрока.Балл = СтрокаТЧ.ИтоговыйБалл;
			НайденнаяСтрока.ИтоговыйБалл = СтрокаТЧ.ИтоговыйБалл * НайденнаяСтрока.Приоритет / 100;
		КонецЦикла;
	КонецЦикла;
	
	БаллыПоставщиков 	= ПриоритетыСхемыРасчета.Скопировать();
	БаллыПоставщиков.Свернуть("Контрагент, Номенклатура","ИтоговыйБалл");
	Для Каждого Поставщик из БаллыПоставщиков Цикл
		НайденныеПозиции = Объект.НоменклатураПоставщиков.НайтиСтроки(Новый Структура("Контрагент, Номенклатура",Поставщик.Контрагент,Поставщик.Номенклатура));
		Для Каждого НайденнаяПозиция Из НайденныеПозиции Цикл
			НайденнаяПозиция.ИтоговыйБалл = Поставщик.ИтоговыйБалл;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ПриоритетыСхемыРасчета Цикл
		НоваяСтрока 				= Объект.АналитикаПодбора.Добавить();
		НоваяСтрока.Контрагент 		= СтрокаТЧ.Контрагент;
		НоваяСтрока.Номенклатура 	= СтрокаТЧ.Номенклатура;
		НоваяСтрока.Критерий 		= СтрокаТЧ.Критерий;
		НоваяСтрока.Балл 			= СтрокаТЧ.Балл;
		НоваяСтрока.Приоритет		= СтрокаТЧ.Приоритет;
		НоваяСтрока.ИтоговыйБалл	= СтрокаТЧ.ИтоговыйБалл;
		Если ИспользоватьХарактеристики Тогда
			НоваяСтрока.Характеристика	= СтрокаТЧ.Характеристика;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат Истина;	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	дог_УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = фин_ОбщегоНазначенияКлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиСхемыРасчета()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("СхемаРасчета", Объект.СхемаРасчета);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.Приоритет,
	               |	узп_НастройкиСхемРасчетаОценокСрезПоследних.Критерий
	               |ИЗ
	               |	РегистрСведений.узп_НастройкиСхемРасчетаОценок.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И СхемаРасчета = &СхемаРасчета) КАК узп_НастройкиСхемРасчетаОценокСрезПоследних";
				   
	Результат = Запрос.Выполнить();
	Объект.НастройкиСхемыРасчета.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ВывестиОтчетОбАналитике()
	//Отчет.Очистить();
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(Объект.Ссылка);
	//ТЧ = Документы.узп_РезультатВыбораПоставщика.ПечатьАнализПодбора(МассивОбъектов,Новый СписокЗначений);
	//Отчет.Вывести(ТЧ);
	
КонецПроцедуры

&НаСервере
Функция СформироватьЗаказыНаСервере()
	Если Не Объект.Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не утвержден, операция не доступна!");
		Возврат Новый Массив;
	КонецЕсли;

	мДерево = РеквизитФормыВЗначение("ПодборПоставщика");
	ТЧ = Новый ТаблицаЗначений;
	ТЧ.Колонки.Добавить("Номенклатура");
	Если ИспользоватьХарактеристики Тогда
		ТЧ.Колонки.Добавить("Характеристика");
	КонецЕсли;
	ТЧ.Колонки.Добавить("Поставщик");
	ТЧ.Колонки.Добавить("Количество");
	ТЧ.Колонки.Добавить("Заявка");
	ТЧ.Колонки.Добавить("Проект");
	ТЧ.Колонки.Добавить("Подразделение");
	ТЧ.Колонки.Добавить("ОбъектРемонта");
	Для Каждого СтрокаДерева Из мДерево.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.Поставщик) Тогда
			НоваяСтрока = ТЧ.Добавить();
			НоваяСтрока.Номенклатура = СтрокаДерева.Номенклатура;
			Если СтрокаДерева.ИспользоватьОсновногоПоставщика Тогда
				НоваяСтрока.Поставщик = СтрокаДерева.ОсновнойПоставщик;
			Иначе
				НоваяСтрока.Поставщик = СтрокаДерева.Поставщик;
			КонецЕсли;
			
			НоваяСтрока.Количество = СтрокаДерева.Количество;
			НоваяСтрока.Заявка = СтрокаДерева.Заявка;
			Если ИспользоватьХарактеристики Тогда
				НоваяСтрока.Характеристика = СтрокаДерева.Характеристика;
			КонецЕсли;
			Если ИспользоватьПроекты Тогда
				НоваяСтрока.Проект = СтрокаДерева.Проект;
			КонецЕсли;
			НоваяСтрока.Подразделение = СтрокаДерева.Подразделение;
			НоваяСтрока.ОбъектРемонта = СтрокаДерева.ОбъектРемонта;
		КонецЕсли;
	КонецЦикла;
	Если ИспользоватьПроекты Тогда
		СтрокаПроект = ", Проект";
	Иначе
		СтрокаПроект = "";
	КонецЕсли;
	Если ИспользоватьХарактеристики Тогда 
		СтрокаХарактеристика = ", Характеристика";
	Иначе
		СтрокаХарактеристика = "";
	КонецЕсли;
	ТЧ.Свернуть("Поставщик, Номенклатура, Подразделение, Заявка, ОбъектРемонта" + СтрокаХарактеристика + СтрокаПроект,"Количество");
	СписокПоставщиков = ТЧ.Скопировать();
	СписокПоставщиков.Свернуть("Поставщик");
	СписокПоставщиков = СписокПоставщиков.ВыгрузитьКолонку("Поставщик");
	МассивДокументов = Новый Массив;
	
	Для Каждого Поставщик Из СписокПоставщиков Цикл
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Контрагент",Поставщик);
		НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("Поставщик",Поставщик));
		Если Не НайденныеСтроки.Количество()=0 Тогда 
			МассивТЧ = Новый Массив;
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				СтруктураТЧ = Новый Структура("Номенклатура, Заявка, Подразделение, Количество, ОбъектРемонта" + СтрокаХарактеристика + СтрокаПроект);
				СтруктураТЧ.Номенклатура 	= СтрокаТЧ.Номенклатура;
				СтруктураТЧ.Заявка 			= СтрокаТЧ.Заявка;
				СтруктураТЧ.Количество 		= СтрокаТЧ.Количество;
				Если ИспользоватьХарактеристики Тогда
					СтруктураТЧ.Характеристика 	= СтрокаТЧ.Характеристика;
				КонецЕсли;
				Если ИспользоватьПроекты Тогда 
					СтруктураТЧ.Проект 		= СтрокаТЧ.Проект;
				КонецЕсли;
				СтруктураТЧ.Подразделение	= СтрокаТЧ.Подразделение;
				СтруктураТЧ.ОбъектРемонта	= СтрокаТЧ.ОбъектРемонта;
				МассивТЧ.Добавить(СтруктураТЧ);
			КонецЦикла;
		КонецЕсли;
		СтруктураДокумента.Вставить("ТЧ",МассивТЧ);
		МассивДокументов.Добавить(СтруктураДокумента);
	КонецЦикла;
	Возврат МассивДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Если Не Значение = Неопределено Тогда
		Возврат Значение[Свойство];
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗаказовНаСервере()
	Запрос = Новый Запрос;
	запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	узп_ЗаказПоставщику.Ссылка,
	               |	узп_ЗаказПоставщику.Проведен
	               |ИЗ
	               |	Документ.узп_ЗаказПоставщику КАК узп_ЗаказПоставщику
	               |ГДЕ
	               |	узп_ЗаказПоставщику.ДокументОснование = &Ссылка";
	Результат = Запрос.Выполнить();
	ОформленныеЗаказы.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	Расчитано = Истина;
	Если Не Объект.Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
		ЗагрузитьНастройкиСхемыРасчета();
		ЗагрузитьНоменклатуруПоставщиков();
		Рассчитано = РассчитатьБаллыПоставщиков();
	КонецЕсли;
	Если Расчитано Тогда
		ОбновитьДеревоНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформленныеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОформленныеЗаказы.ТекущиеДанные;
	Если Поле.Имя = "ОформленныеЗаказыСсылка" Тогда 
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры
