
/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура ПриСозданииНаСервере
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НадписьНастройкиРасчета 		= "Настройки расчета";
	НадписьПоказателиРасчета 		= "Показатели расчета";
	НадписьРазрезыРасчета 			= "Разрезы расчета";
	НадписьФормулыРасчетаРесурсов 	= "Формулы расчета ресурсов";
	НадписьКорАналитика				= "План счетов бюджетирования";
	АдресТабличнойЧасти = Параметры.АдресТабличнойЧасти;
	Сценарий = Параметры.Сценарий;
	ОсновнойИсточникДанных = Параметры.ОсновнойИсточникДанных;
	ТабличныеЧасти = ПолучитьИзВременногоХранилища(АдресТабличнойЧасти);
	ЗначениеВРеквизитФормы(ТабличныеЧасти.Правила.Скопировать(),"ТабличнаяЧастьДокумента");
	ЗначениеВРеквизитФормы(ТабличныеЧасти.Показатели.Скопировать(),"Показатели");
	Данные=Параметры.Данные;
	ОбновитьДанные();
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель));
	УправлениеДоступностьюРеквизитов();
	МассивТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель),Сценарий).Типы();
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям"));
	ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(МассивТипов);
	Элементы.ЗначениеИзмененияНоменклатура.ОграничениеТипа = ОписаниеТиповНоменклатуры;
	Элементы.НастройкаПроводок.Видимость = ФормироватьПроводки;
	ОбновитьСпискиВыбора();
КонецПроцедуры

// процедура обновляет данные из дерева бюджета
// вызывается программно
//
&НаСервере
Процедура ОбновитьДанные() Экспорт
	Если ТабличнаяЧастьДокумента.Количество()=0 Тогда
		ТолькоПросмотр = Истина;
		Возврат;
	Иначе
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТабличнаяЧастьДокумента[Данные]);
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель));
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры //ОбновитьДанные

// Процедура УправлениеДоступностьюРеквизитов
// 
&НаСервере
Процедура УправлениеДоступностьюРеквизитов()
	ОбработанныеРазрезы = Новый Массив;
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
		Элементы["Группа"+ИмяРазреза].Видимость = Истина;
		Элементы["Надпись"+ИмяРазреза].Заголовок = РазрезЭлемент.Представление;
		Если ЭтотОбъект["ВидИзменения"+ИмяРазреза] = Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета 
			ИЛИ ЭтотОбъект["ВидИзменения"+ИмяРазреза]=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПустаяСсылка() Тогда
			Элементы["ЗначениеИзменения"+ИмяРазреза].Доступность = Ложь;
		Иначе
			Элементы["ЗначениеИзменения"+ИмяРазреза].Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
	МассивРазрезов = Новый Массив;
	МассивРазрезов.Добавить("Проект");
	МассивРазрезов.Добавить("Контрагент");
	МассивРазрезов.Добавить("Номенклатура");
	МассивРазрезов.Добавить("Разрез1");
	МассивРазрезов.Добавить("Разрез2");
	МассивРазрезов.Добавить("Разрез3");
	МассивРазрезов.Добавить("Разрез4");
	МассивРазрезов.Добавить("Разрез5");
	МассивРазрезов.Добавить("Разрез6");
	МассивРазрезов.Добавить("Разрез7");
	МассивРазрезов.Добавить("Разрез8");
	МассивРазрезов.Добавить("Разрез9");
	МассивРазрезов.Добавить("Разрез10");
	Для Каждого Разрез Из МассивРазрезов Цикл
		Если ОбработанныеРазрезы.Найти(Разрез)=Неопределено Тогда
			Элементы["Группа"+Разрез].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ТабличнаяЧастьДокумента.Количество()=0 Тогда
		Элементы.Удалить.Доступность = Ложь;
	Иначе
		Элементы.Удалить.Доступность = Истина;
	КонецЕсли;
	Если Данные=ТабличнаяЧастьДокумента.Количество()-1 Тогда
		Элементы.Далее.Доступность=Ложь;
		Если ТабличнаяЧастьДокумента.Количество()>1 Тогда
			Элементы.Назад.Доступность=Истина;
		Иначе
			Элементы.Назад.Доступность=Ложь;
		КонецЕсли;
	ИначеЕсли Данные=0 Тогда
		Если ТабличнаяЧастьДокумента.Количество()>0 Тогда
			Элементы.Далее.Доступность=Истина;
		Иначе
			Элементы.Далее.Доступность=Ложь;
		КонецЕсли;
	    Элементы.Назад.Доступность=Ложь;
	ИначеЕсли Данные=-1 Тогда
		Элементы.Далее.Доступность=Ложь;
	    Элементы.Назад.Доступность=Ложь;
	Иначе
		Элементы.Далее.Доступность=Истина;
	    Элементы.Назад.Доступность=Истина;
	КонецЕсли;
	Если НЕ ?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель).УчетПоСумме Тогда
		Элементы.ВидИзмененияВалюта.Доступность=Ложь;
		Элементы.ВидИзмененияВалюта.АвтоОтметкаНезаполненного=Ложь;
		Элементы.ВидИзмененияВалюта.ОтметкаНезаполненного=Ложь;
		Элементы.ЗначениеИзмененияВалюта.Доступность=Ложь;
		Элементы.ФормулаСумма.Доступность = Ложь;
	Иначе
		Элементы.ВидИзмененияВалюта.Доступность=Истина;
		Элементы.ВидИзмененияВалюта.АвтоОтметкаНезаполненного=Истина;
		Элементы.ВидИзмененияВалюта.ОтметкаНезаполненного=Не ЗначениеЗаполнено(ВидИзмененияВалюта);
		Если ВидИзмененияВалюта=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета
			ИЛИ ВидИзмененияВалюта=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПустаяСсылка() Тогда
			Элементы.ЗначениеИзмененияВалюта.Доступность=Ложь;
		Иначе
			Элементы.ЗначениеИзмененияВалюта.Доступность=Истина;
		КонецЕсли;
		Элементы.ФормулаСумма.Доступность = Истина;
	КонецЕсли;
	Элементы.ФормулаКоличество.Доступность = ?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель).УчетПоКоличеству;
	Элементы.ФинансовыйПоказатель.Видимость = НЕ ГрупповаяНастройка;
	Элементы.АгрегатПоказателей.Видимость 	= ГрупповаяНастройка;
КонецПроцедуры //УправлениеДоступностьюРеквизитов

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура ВидИзмененияПоКонтрагентамПриИзменении
// 
&НаКлиенте
Процедура ВидИзмененияПриИзменении(Элемент)
	ИмяРазреза = Сред(Элемент.Имя,СтрДлина("ВидИзменения")+1);
	ЗначениеРазреза = ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза];
	Если ЗначениеЗаполнено("ЗначениеИзменения"+ИмяРазреза) Тогда
		Если ЗначениеРазреза=ПредопределенноеЗначение("Перечисление.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение") Тогда
			ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]=Новый(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования"+ИмяРазреза)).ТипЗначения);
		ИначеЕсли ЗначениеРазреза=ПредопределенноеЗначение("Перечисление.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета") Тогда
			ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]="";
		Иначе
			ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]=Новый(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям"));
		КонецЕсли;
	Иначе
		ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]=Неопределено;
	КонецЕсли;
	ПоказательПриИзменении(Элементы["ЗначениеИзменения"+ИмяРазреза]);
	ПоказательПриИзменении(Элемент);
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры //ВидИзмененияПоКонтрагентамПриИзменении

//Процедура ПоказательПриИзменении
//
&НаКлиенте
Процедура ПоказательПриИзменении(Элемент)
	Реквизит 			= Элемент.Имя;
	СохранитьЗначениеВТаблице(Реквизит,ЭтотОбъект[Реквизит]);
	Если Реквизит = "ФормироватьПроводки" Тогда
		Элементы.НастройкаПроводок.Видимость = ФормироватьПроводки;
	КонецЕсли;
КонецПроцедуры //ПоказательПриИзменении

&НаСервере
Процедура СохранитьЗначениеВТаблице(Реквизит,Значение)
	ТабличнаяЧастьДокумента[Данные][Реквизит] 	= Значение;
КонецПроцедуры //СохранитьЗначениеВТаблице

// Процедура ЗначениеИзмененияПоКонтрагентамНачалоВыбора
// 
&НаКлиенте
Процедура ЗначениеИзмененияНачалоВыбора(Элемент, ДанныеВыбора,СтандартнаяОбработка)
	ИмяРазреза = Сред(Элемент.Имя,СтрДлина("ЗначениеИзменения")+1);
		
	Если ЭтотОбъект["ВидИзменения"+ИмяРазреза]=ПредопределенноеЗначение("Перечисление.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение") ИЛИ
		ЭтотОбъект["ВидИзменения"+ИмяРазреза]=ПредопределенноеЗначение("Перечисление.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение") Тогда
		СтандартнаяОбработка=Ложь;
		СтруктураПараметров = Новый Структура("ВыборГруппИЭлементов,Отбор",ИспользованиеГруппИЭлементов.Элементы,Новый Структура("ИзмерениеБюджетирования",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования."+ИмяРазреза)));
        ОткрытьФорму("Справочник.фин_ПрофилиИзмененияПлановПоИзмерениям.ФормаВыбора",СтруктураПараметров,Элемент);
	ИначеЕсли ЭтотОбъект["ВидИзменения"+ИмяРазреза]=ПредопределенноеЗначение("Перечисление.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение") И ИмяРазреза <>"Валюта" Тогда
		Элемент.ОграничениеТипа = НастроитьОписаниеТипа(ИмяРазреза);
	КонецЕсли;
		
КонецПроцедуры //ЗначениеИзмененияПоКонтрагентамНачалоВыбора

//Процедура НастроитьОписаниеТипа
//
Функция НастроитьОписаниеТипа(ИмяРазреза)
	Если Найти(ИмяРазреза,"Разрез")=0 Тогда
		Если ИмяРазреза="Номенклатура" Тогда
			Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(?(ГрупповаяНастройка,АгрегатПоказателей,ФинансовыйПоказатель),Сценарий);
		Иначе
			МассивТипов = Метаданные.Документы.фин_РасчетнаяМодельБюджетирования.ТабличныеЧасти.ОборотыПоСтатьямБюджетов.Реквизиты.Найти("ЗначениеИзменения"+ИмяРазреза).Тип.Типы();
			МассивТипов.Удалить(МассивТипов.Найти(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям")));
		КонецЕсли;
		ОписаниеТиповЭлемента = Новый ОписаниеТипов(МассивТипов);
	Иначе
		ОписаниеТиповЭлемента = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]).ТипЗначения;
	КонецЕсли;
	Возврат ОписаниеТиповЭлемента;
КонецФункции

//Процедура ФормулаКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//
&НаКлиенте
Процедура ФормулаКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресПоказателейФормулы", ПоместитьТаблицуПоказателейВХранилище());
	ПараметрыФормы.Вставить("ТекстФормулы",ФормулаКоличество);
	ПараметрыФормы.Вставить("ПредставлениеВВидеКодов",Истина);
	ПараметрыФормы.Вставить("ВКвадратныхСкобках",Истина);
	ОписаниеОповещенияРедактированиеФормулы = Новый ОписаниеОповещения("ОбработкаЗавершенияРедактированияФормулы",ЭтотОбъект,"Количество");
	ОткрытьФорму("ОбщаяФорма.фин_ФормаВводаФормулы",ПараметрыФормы,Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияРедактированиеФормулы);
			
КонецПроцедуры

//Процедура ФормулаСуммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//
&НаКлиенте
Процедура ФормулаСуммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресПоказателейФормулы", ПоместитьТаблицуПоказателейВХранилище());
	ПараметрыФормы.Вставить("ТекстФормулы",ФормулаСумма);
	ПараметрыФормы.Вставить("ПредставлениеВВидеКодов",Истина);
	ПараметрыФормы.Вставить("ВКвадратныхСкобках",Истина);

	ОписаниеОповещенияРедактированиеФормулы = Новый ОписаниеОповещения("ОбработкаЗавершенияРедактированияФормулы",ЭтотОбъект,"Сумма");
	ОткрытьФорму("ОбщаяФорма.фин_ФормаВводаФормулы",ПараметрыФормы,Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияРедактированиеФормулы);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗавершенияРедактированияФормулы(Результат,ВидФормулы) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормулы = "Количество" Тогда
		ФормулаКоличество = Результат.ТекстФормулы;
		ПоказательПриИзменении(Элементы.ФормулаКоличество);
	ИначеЕсли ВидФормулы = "Сумма" Тогда
		ФормулаСумма = Результат.ТекстФормулы;
		ПоказательПриИзменении(Элементы.ФормулаСумма);
	КонецЕсли;
КонецПроцедуры

//Функция ПолучитьТаблицуПоказателей()
//
&НаСервере
Функция ПоместитьТаблицуПоказателейВХранилище()
	 Возврат ПоместитьВоВременноеХранилище(Показатели.Выгрузить(),УникальныйИдентификатор);
КонецФункции

// Процедура ФинансовыйПоказательПриИзменении
// 
&НаКлиенте
Процедура ФинансовыйПоказательПриИзменении(Элемент)

	мСтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
	
	Для Каждого ЭлементРазрезПредыдущий Из СтруктураРазрезов Цикл
		Если мСтруктураРазрезов.НайтиПоЗначению(ЭлементРазрезПредыдущий.Значение)=Неопределено Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрезПредыдущий.Значение);
			
			ЭтотОбъект["ВидИзменения"+ИмяРазреза]="";
			ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]=Неопределено;
			ПоказательПриИзменении(Элементы["ВидИзменения"+ИмяРазреза]);
			ПоказательПриИзменении(Элементы["ЗначениеИзменения"+ИмяРазреза]);
		
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ФинансовыйПоказатель);
	
	Если НЕ ПолеОбъекта(ФинансовыйПоказатель,"УчетПоСумме") Тогда
		ВидИзмененияВалюта="";
		ПоказательПриИзменении(Элементы.ВидИзмененияВалюта);
		ЗначениеИзмененияВалюта="";
		ПоказательПриИзменении(Элементы.ЗначениеИзмененияВалюта);
		ФормулаСумма = "";
		ПоказательПриИзменении(Элементы.ФормулаСумма);
	КонецЕсли;
	
	Если НЕ ПолеОбъекта(ФинансовыйПоказатель,"УчетПоКоличеству") Тогда
		ФормулаКоличество = "";
		ПоказательПриИзменении(Элементы.ФормулаКоличество);
	КонецЕсли;
	
	УправлениеДоступностьюРеквизитов();
	
	ПоказательПриИзменении(Элемент);
	
	Если СокрЛП(ИмяРасчета) ="" Тогда
		ИмяРасчета = ПолеОбъекта(ФинансовыйПоказатель,"Наименование");
		ПоказательПриИзменении(Элементы.ИмяРасчета);
	КонецЕсли;
	
	МассивТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,Сценарий).Типы();
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям"));
	ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(МассивТипов);
	ЗначениеИзмененияНоменклатура = ОписаниеТиповНоменклатуры.ПривестиЗначение(ЗначениеИзмененияНоменклатура);
	
КонецПроцедуры //ФинансовыйПоказательПриИзменении

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,ИмяПоля)
	Возврат ОбъектДанных[ИмяПоля];	
КонецФункции

// Процедура ИмяРасчетаПриИзменении
// 
&НаКлиенте
Процедура ИмяРасчетаПриИзменении(Элемент)
	ПоказательПриИзменении(Элемент);
КонецПроцедуры //ИмяРасчетаПриИзменении



// Процедура НазадНажатие
// 
&НаСервере
Процедура НазадНажатие()
	Данные = Данные-1;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТабличнаяЧастьДокумента[Данные]);
	ОбновитьДанные();
КонецПроцедуры //НазадНажатие

// Процедура ДалееНажатие
// 
&НаСервере
Процедура ДалееНажатие()
	Данные = Данные+1;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТабличнаяЧастьДокумента[Данные]);
	ОбновитьДанные();
КонецПроцедуры //ДалееНажатие

// Процедура ДобавитьНажатие
// 
&НаСервере
Процедура ДобавитьНажатие(Копировать = Ложь)
	НоваяСтрока = ТабличнаяЧастьДокумента.Добавить();
	Если Копировать Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭтотОбъект);
	КонецЕсли;
	Данные = ТабличнаяЧастьДокумента.Индекс(ТабличнаяЧастьДокумента.НайтиПоИдентификатору(НоваяСтрока.ПолучитьИдентификатор()));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТабличнаяЧастьДокумента[Данные]);
	ОбновитьДанные();
КонецПроцедуры //ДобавитьНажатие

// Процедура УдалитьНажатие
// 
&НаСервере
Процедура УдалитьНажатие()
	Если ТабличнаяЧастьДокумента.Количество() >1 Тогда
		мДанные = Данные;
		Если Данные = ТабличнаяЧастьДокумента.Количество()-1 Тогда
			мДанные=Данные-1;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ТабличнаяЧастьДокумента[мДанные]);
		ТабличнаяЧастьДокумента.Удалить(ТабличнаяЧастьДокумента.Получить(Данные));
		Данные = мДанные;
		ОбновитьДанные();
	ИначеЕсли ТабличнаяЧастьДокумента.Количество() =1 Тогда
		ТабличнаяЧастьДокумента.Удалить(ТабличнаяЧастьДокумента.Получить(0));
		Данные = -1;
		ОбновитьДанные();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет строк для удаления!");
	КонецЕсли;
КонецПроцедуры //УдалитьНажатие

&НаКлиенте
Процедура ВидИзмененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяРазреза = Сред(Элемент.Имя,СтрДлина("ВидИзменения")+1);
	ДанныеВыбора = ЭтотОбъект["Список"+ИмяРазреза];
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	Закрыть(СохранитьДанные());	
КонецПроцедуры

&НаСервере
Функция СохранитьДанные()
	Таблица = РеквизитФормыВЗначение("ТабличнаяЧастьДокумента").Скопировать();
	Возврат ПоместитьВоВременноеХранилище(Таблица,АдресТабличнойЧасти);
КонецФункции

// Обновляет списки выбора видов распределения по измерениям
// в зависимости от источников данных
//
&НаСервере
Процедура ОбновитьСпискиВыбора()

	СтруктураРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	
	Если НЕ ЗначениеЗаполнено(ОсновнойИсточникДанных) Тогда
		СписокВыбора=Новый СписокЗначений;
		СписокВыбора.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение);
		ПеренестиВСписок("СписокВалюта",СписокВыбора);
		СписокВыбора.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение);
		СписокВыбора.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение);
		Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			ПеренестиВСписок("Список"+ИмяРазреза,СписокВыбора);
		КонецЦикла;
	Иначе
		Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			СписокВыбораРазреза=Новый СписокЗначений;
			СписокВыбораРазреза.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение);
			Если НЕ ОсновнойИсточникДанных.ИзмеренияИсточника.Найти(Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза],"ИзмерениеБюджетирования")=Неопределено Тогда
				СписокВыбораРазреза.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета);
			КонецЕсли;
			СписокВыбораРазреза.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение);
			СписокВыбораРазреза.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение);
			ПеренестиВСписок("Список"+ИмяРазреза,СписокВыбораРазреза);
		КонецЦикла;
		// Список выбора для валюты	 
		СписокВыбораВидВалюты=Новый СписокЗначений;
		СписокВыбораВидВалюты.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение);
		Если НЕ ОсновнойИсточникДанных.ИзмеренияИсточника.Найти(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта,"ИзмерениеБюджетирования")=Неопределено Тогда
			СписокВыбораВидВалюты.Добавить(Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета);
		КонецЕсли;
		ПеренестиВСписок("Список"+"Валюта",СписокВыбораВидВалюты);
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьСпискиВыбора

&НаСервере
Процедура ПеренестиВСписок(ИмяСписка,Список)
	 ЭтотОбъект[ИмяСписка].ЗагрузитьЗначения(Список.ВыгрузитьЗначения());
КонецПроцедуры


// Процедура ФинансовыйПоказательПриИзменении
// 
&НаКлиенте
Процедура АгрегатПоказателейПриИзменении(Элемент)

	мСтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(АгрегатПоказателей);
	
	Для Каждого ЭлементРазрезПредыдущий Из СтруктураРазрезов Цикл
		Если мСтруктураРазрезов.НайтиПоЗначению(ЭлементРазрезПредыдущий.Значение)=Неопределено Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ЭлементРазрезПредыдущий.Значение);
			
			ЭтотОбъект["ВидИзменения"+ИмяРазреза]="";
			ЭтотОбъект["ЗначениеИзменения"+ИмяРазреза]=Неопределено;
			ПоказательПриИзменении(Элементы["ВидИзменения"+ИмяРазреза]);
			ПоказательПриИзменении(Элементы["ЗначениеИзменения"+ИмяРазреза]);
		
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(АгрегатПоказателей);
	
	Если НЕ ПолеОбъекта(АгрегатПоказателей,"УчетПоСумме") Тогда
		ВидИзмененияВалюта="";
		ПоказательПриИзменении(Элементы.ВидИзмененияВалюта);
		ЗначениеИзмененияВалюта="";
		ПоказательПриИзменении(Элементы.ЗначениеИзмененияВалюта);
		ФормулаСумма = "";
		ПоказательПриИзменении(Элементы.ФормулаСумма);
	КонецЕсли;
	
	Если НЕ ПолеОбъекта(АгрегатПоказателей,"УчетПоКоличеству") Тогда
		ФормулаКоличество = "";
		ПоказательПриИзменении(Элементы.ФормулаКоличество);
	КонецЕсли;
	
	УправлениеДоступностьюРеквизитов();
	
	ПоказательПриИзменении(Элемент);
	
	Если СокрЛП(ИмяРасчета) ="" Тогда
		ИмяРасчета = ПолеОбъекта(АгрегатПоказателей,"Наименование");
		ПоказательПриИзменении(Элементы.ИмяРасчета);
	КонецЕсли;
	
	МассивТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(АгрегатПоказателей,Сценарий).Типы();
	МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям"));
	ОписаниеТиповНоменклатуры = Новый ОписаниеТипов(МассивТипов);
	ЗначениеИзмененияНоменклатура = ОписаниеТиповНоменклатуры.ПривестиЗначение(ЗначениеИзмененияНоменклатура);
	
КонецПроцедуры //ФинансовыйПоказательПриИзменении

&НаКлиенте
Процедура ГрупповаяНастройкаПриИзменении(Элемент)
	СохранитьЗначениеВТаблице("ГрупповаяНастройка",ГрупповаяНастройка);
	Если ГрупповаяНастройка Тогда
		ФинансовыйПоказатель = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
		СохранитьЗначениеВТаблице("ФинансовыйПоказатель",ФинансовыйПоказатель);
	Иначе
		АгрегатПоказателей = ПредопределенноеЗначение("Справочник.фин_АгрегатыФинансовыхПоказателей.ПустаяСсылка");
		СохранитьЗначениеВТаблице("АгрегатПоказателей",АгрегатПоказателей);
	КонецЕсли;
	УправлениеДоступностьюРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	ДобавитьНажатие();
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	УдалитьНажатие();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ДалееНажатие();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	НазадНажатие();
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	ДобавитьНажатие(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФормулаКоличествоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
