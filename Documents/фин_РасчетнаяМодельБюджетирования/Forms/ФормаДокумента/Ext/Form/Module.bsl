
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтотОбъект);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_фин_РасчетнаяМодельБюджетирования", ПараметрыЗаписи, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СотрудникиОрганизаций.Форма.ФормаСписка" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры


&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачалоИспользованияПриИзменении(Элемент)
	Объект.НачалоИспользования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.НачалоИспользования,ПериодичностьСценария(Объект.Сценарий));
КонецПроцедуры

&НаКлиенте
Процедура НачалоИспользованияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка 		= Ложь;
	Периодичность 				= ПериодичностьСценария(Объект.Сценарий);
	Объект.НачалоИспользования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.НачалоИспользования,Периодичность,Направление),Периодичность);
КонецПроцедуры

&НаКлиенте
Процедура КонецИспользованияПриИзменении(Элемент)
	Объект.КонецИспользования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.КонецИспользования,ПериодичностьСценария(Объект.Сценарий));
КонецПроцедуры

&НаКлиенте
Процедура КонецИспользованияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка 		= Ложь;
	Периодичность 				= ПериодичностьСценария(Объект.Сценарий);
	Объект.КонецИспользования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.КонецИспользования,Периодичность,Направление),Периодичность);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойИсточникДанныхПриИзменении(Элемент)
	ОсновнойИсточникДанныхПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	ОсновнойИсточникДанныхОчисткаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДополнительныеСценарии

&НаКлиенте
Процедура ДополнительныеСценарииСценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("Отбор",Новый Структура("Периодичность",Периодичности()));
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ФормаВыбора",СтруктураПараметров,Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДополнительныеИсточники

&НаКлиенте
Процедура ДополнительныеИсточникиДанныхПередУдалением(Элемент, Отказ)
	УдалитьПоказателиИсточника(Элементы.ДополнительныеИсточникиДанных.ТекущиеДанные.КодИсточника);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеИсточникиДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.ДополнительныеИсточникиДанных.ТекущиеДанные;
	
	Если НЕ ОтменаРедактирования Тогда
		Для Каждого СтрокаИсточник Из Объект.ДополнительныеИсточникиДанных Цикл
			Если СтрокаИсточник.ИсточникДанных = ТекущиеДанные.ИсточникДанных И НЕ СтрокаИсточник.ПолучитьИдентификатор() = ТекущиеДанные.ПолучитьИдентификатор() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Повторяющийся источник данных: "+Строка(ТекущиеДанные.ИсточникДанных));
				Отказ=Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеДанные.ИсточникДанных = Объект.ОсновнойИсточникДанных Тогда
			УдалитьПоказателиИсточника(ТекущиеДанные.КодИсточника);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Повторяющийся источник данных: "+Строка(ТекущиеДанные.ИсточникДанных));
			Отказ=Истина;
		КонецЕсли;
		Если НЕ Отказ Тогда
			ЗаполнитьПоказателиИсточника(ТекущиеДанные.ИсточникДанных,ТекущиеДанные.КодИсточника);
        КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеИсточникиДанныхИсточникДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеИсточникиДанных.ТекущиеДанные;
	Если НЕ ПустаяСтрока(СокрЛП(ТекущиеДанные.КодИсточника)) Тогда
		УдалитьПоказателиИсточника(ТекущиеДанные.КодИсточника);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	Если РучноеИменованиеПоказателей Тогда
		мКод = "";
		ОписаниеОповещениеВводаКодаИсточника = Новый ОписаниеОповещения("ОбработатьВводКодаИсточника",ЭтотОбъект,Новый Структура("ИдентификаторСтроки",ТекущиеДанные.ПолучитьИдентификатор()));
		ПоказатьВводСтроки(ОписаниеОповещениеВводаКодаИсточника,мКод,"Введите код источника (без пробелов и спец. символов):",10,Ложь);
	Иначе
		ТекущиеДанные.КодИсточника="ИД"+УдалитьВедущиеНули(ПолеОбъекта(ТекущиеДанные.ИсточникДанных,"Код"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеИсточникиДанныхИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	УдалитьПоказателиИсточника(Элементы.ДополнительныеИсточникиДанных.ТекущиеДанные.КодИсточника);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Показатели

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущийИндекс = ТекущийИндекс + 1;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если РучноеИменованиеПоказателей Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				мКод = "";
				ВвестиСтроку(мКод,"Введите код показателя (без пробелов и спец. символов):",10,Ложь);
				ОбработатьВводКодаПоказателя(мКод,Новый Структура("ИдентификаторСтроки",ТекущиеДанные.ПолучитьИдентификатор()));
			#Иначе
				мКод = "";
				ОписаниеОповещенияВводаКодаПоказателя = Новый ОписаниеОповещения("ОбработатьВводКодаПоказателя",ЭтотОбъект,Новый Структура("ИдентификаторСтроки",ТекущиеДанные.ПолучитьИдентификатор()));
				общ_ОбщегоНазначенияКлиент.мПоказатьВводСтроки(ЭтотОбъект,ОписаниеОповещенияВводаКодаПоказателя,мКод,"Введите код показателя (без пробелов и спец. символов):",10,Ложь);
			#КонецЕсли
		Иначе
			ТекущиеДанные.Код="РО"+Формат(ТекущийИндекс,"ЧЦ=2; ЧВН=");
		КонецЕсли;
	ИначеЕсли НЕ ТекущиеДанные.КодИсточника="" Тогда
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


&НаКлиенте
Процедура РучноеИменованиеПоказателей(Команда)
	Элементы.ФормаРучноеИменованиеПоказателей.Пометка 	= НЕ Элементы.ФормаРучноеИменованиеПоказателей.Пометка;
	РучноеИменованиеПоказателей 						= Элементы.ФормаРучноеИменованиеПоказателей.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОткрытьРедактор(Команда)
	Если Элементы.ОборотыПоСтатьямБюджетов.ТекущиеДанные <> Неопределено Тогда
		ОткрытьРедактор(Элементы.ОборотыПоСтатьямБюджетов);
	Иначе
		ПоказатьПредупреждение(,"Необходимо выбрать строку для редактирования!");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ (ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ ЗначениеЗаполнено(Параметры.Основание)) Тогда
			// по умолчанию при распределении учитываются все возможные показатели
			Если Объект.ОборотыПоСтатьямБюджетов.Количество()=0 Тогда
				НоваяСтрока = Объект.ОборотыПоСтатьямБюджетов.Добавить();
				Элементы.ОборотыПоСтатьямБюджетов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Объект.НачалоИспользования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
				Объект.КонецИспользования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДобавитьМесяц(Объект.НачалоИспользования,12),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
				Объект.Организация 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
		КонецЕсли;
		Объект.Ответственный 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
		Объект.Состояние 		= фин_БюджетированиеОбщегоНазначения.СостояниеОбъектаПоУмолчанию();
	КонецЕсли;
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ОборотыПоСтатьямБюджетов);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.Показатели);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДополнительныеИсточникиДанных);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДополнительныеСценарии);
	ФорматПериода();
	ТекущийИндекс=1;
	Для Каждого Строка Из Объект.Показатели Цикл
		Если Найти(Строка.Код,"РО")>0 Тогда
			СтрокаИндекс=Число(Сред(Строка.Код,3));
			Если СтрокаИндекс>ТекущийИндекс Тогда
				ТекущийИндекс=СтрокаИндекс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	ВестиУчетПоПроектам				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	ВестиУчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	УправлениеФормой(ЭтотОбъект);
	 оф_ВыполнениеЦиклическихРасчетов 						= "Выполнение циклических расчетов";
	 оф_ДополнительныеИсточникиДанных 						= "Дополнительные источники данных";
	 оф_ИспользованиеДляСценариевСДробнымШагомПланирования 	= "Использование для сценариев с дробным шагом планирования";
	 оф_ИспользованиеСДругимиМоделямиВКонтекстеРасчета 		= "Использование с другими моделями в контексте расчета";
	 оф_ПереченьРасчетовПоМодели 							= "Перечень расчетов по модели";
	 оф_ПериодВыполненияРасчетовПоМодели 					= "Период выполнения расчетов по модели";
	 оф_ПоказателиМодели 									= "Показатели модели";
	 
КонецПроцедуры 


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ИсточникСПроизвольнымЗапросом(Объект.ОсновнойИсточникДанных) Тогда
		Элементы.ДополнительныеИсточникиДанных.Доступность=Ложь;
	Иначе
		Элементы.ДополнительныеИсточникиДанных.Доступность=Истина;
	КонецЕсли;
	ПродолжительностьЦикла 							= ПродолжительностьЦикла(Объект.Сценарий);
    Элементы.РасчетДляКаждогоПериода.Доступность 	= (ТипЗнч(ПродолжительностьЦикла)=Тип("Число") И ПродолжительностьЦикла > 1) ИЛИ ТипЗнч(ПродолжительностьЦикла)<>Тип("Число");
	Элементы.Организация.Видимость					= Форма.БюджетированиеПоОрганизациям;
	Элементы.ДекорацияСостояние.Картинка			= ?(Объект.Состояние = фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден(),БиблиотекаКартинок.фин_ДокументУтвержден,БиблиотекаКартинок.фин_ДокументНеУтвержден);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсточникСПроизвольнымЗапросом(ИсточникДанных)
	Возврат ИсточникДанных.ПроизвольныйЗапрос;
КонецФункции

&НаСервереБезКонтекста
Функция ПродолжительностьЦикла(Сценарий)
	Возврат Сценарий.ПродолжительностьЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция ПериодичностьСценария(Сценарий)
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
КонецФункции

// Процедура ФорматПериода
// 
&НаСервере
Процедура ФорматПериода()
	
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий);
	
	Если Периодичность = Перечисления.фин_Периодичность.Год Тогда
		ФорматПериод = "ДФ = ""гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Квартал Тогда
		ФорматПериод = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Месяц Тогда
		ФорматПериод = "ДФ = ""ММММ гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.Неделя Тогда
		ФорматПериод = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
	ИначеЕсли Периодичность = Перечисления.фин_Периодичность.День Тогда
		ФорматПериод = "ДФ = ""дд.ММ.гггг """"г.""""""";
	Иначе
		ФорматПериод = "";
	КонецЕсли;
	
КонецПроцедуры //ФорматПериода


&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	Сценарий					= Объект.Сценарий;
	Периодичность 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	Объект.НачалоИспользования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.НачалоИспользования,Периодичность);
	Объект.КонецИспользования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.КонецИспользования,Периодичность);
	ФорматПериода();
	Детализация 				= Сценарий.ДетализацияПланирования;
	Для Каждого Строка Из Объект.ОборотыПоСтатьямБюджетов Цикл
		МассивТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(Строка.ФинансовыйПоказатель,Сценарий,ВестиУчетПоПлановойНоменклатуре).Типы();
		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям"));
		ОписаниеТиповНоменклатуры 				= Новый ОписаниеТипов(МассивТипов);
		Строка.ЗначениеИзмененияНоменклатура	= ОписаниеТиповНоменклатуры.ПривестиЗначение(Строка.ЗначениеИзмененияНоменклатура);
	КонецЦикла;
	Если ТипЗнч(Сценарий.ПродолжительностьЦикла)=Тип("Число") И Сценарий.ПродолжительностьЦикла < 2 Тогда
		Объект.РасчетДляКаждогоПериода = Ложь;
	КонецЕсли;
	Периодичности = фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаСценарий Из Объект.ДополнительныеСценарии Цикл
		Если Периодичности.НайтипоЗначению(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СтрокаСценарий.Сценарий))=Неопределено Тогда
			 СтрокиУдалить.Добавить(СтрокаСценарий);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.ДополнительныеСценарии.Удалить(СтрокиУдалить);
	КонецЦикла;
	 
	УправлениеФормой(ЭтотОбъект);
	 
КонецПроцедуры

&НаСервере
Функция Периодичности()
	Возврат фин_УправлениеБюджетированием.ПолучитьСписокВариантовПериодаСМеньшейПериодичностью(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий));
КонецФункции

&НаСервере
Процедура ОсновнойИсточникДанныхПриИзмененииНаСервере()
	
	УдалитьПоказателиИсточника(Объект.КодОсновногоИсточника);
	
	Для Каждого СтрокаИсточник Из Объект.ДополнительныеИсточникиДанных Цикл
		Если СтрокаИсточник.ИсточникДанных = Объект.ОсновнойИсточникДанных Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Повторяющийся источник данных: "+Строка(Объект.ОсновнойИсточникДанных));
			ОсновнойИсточникДанных=Неопределено;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойИсточникДанных) Тогда
		Объект.КодОсновногоИсточника="";	
	Иначе
		Если Объект.ОсновнойИсточникДанных.ПроизвольныйЗапрос Тогда 
			// При использовании источника на основе пользовательского запроса дополнительные источники данных не используются
			Для Каждого СтрокаИсточник Из Объект.ДополнительныеИсточникиДанных Цикл
				УдалитьПоказателиИсточника(СтрокаИсточник.КодИсточника);
			КонецЦикла;
			Объект.ДополнительныеИсточникиДанных.Очистить();
		КонецЕсли;
		Если РучноеИменованиеПоказателей Тогда
			мКод = "";
			//Если ВвестиСтроку(мКод,"Введите код источника (без пробелов и спец. символов):",10,Ложь) Тогда
			//	мКод = СокрЛП(мКод);
			//	мКод = УдалитьНедопустимыеСимволыНомера(мКод);
			//	Пока мКод="" И ВвестиСтроку(мКод,"Введите код источника (без пробелов и спец. символов):",10,Ложь) Цикл
			//		мКод = СокрЛП(мКод);
			//		мКод = УдалитьНедопустимыеСимволыНомера(мКод);
			//	КонецЦикла;
			//	Если мКод="" Тогда
			//		Объект.КодОсновногоИсточника="ИД"+УдалитьВедущиеНули(Объект.ОсновнойИсточникДанных.Код);
			//	Иначе
			//		Если Объект.Показатели.НайтиСтроки(Новый Структура("Код",мКод)).Количество() > 0 Тогда
			//			Объект.КодОсновногоИсточника=мКод+"ОСН";
			//		Иначе
			//			Объект.КодОсновногоИсточника=мКод;
			//		КонецЕсли;
			//	КонецЕсли;
			//Иначе	
				Объект.КодОсновногоИсточника="ИД"+УдалитьВедущиеНули(Объект.ОсновнойИсточникДанных.Код);
			//КонецЕсли;
		Иначе
			Объект.КодОсновногоИсточника="ИД"+УдалитьВедущиеНули(Объект.ОсновнойИсточникДанных.Код);
		КонецЕсли;
		ЗаполнитьПоказателиИсточника(Объект.ОсновнойИсточникДанных,Объект.КодОсновногоИсточника);
	КонецЕсли;
		
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	НоваяСтрока = Объект.ОборотыПоСтатьямБюджетов.Добавить();
	Элементы.ОборотыПоСтатьямБюджетов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОсновнойИсточникДанныхОчисткаНаСервере()
	УдалитьПоказателиИсточника(Объект.КодОсновногоИсточника);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

// Удаляет из списка показателей показатели, относящиеся к источнику с переданным кодом.
// Удаляет ссылки на эти показатели из формул расчета.
//
Процедура УдалитьПоказателиИсточника(КодИсточника)
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("КодИсточника",КодИсточника);
	
	МассивПоказатели=Объект.Показатели.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаПоказатель Из МассивПоказатели Цикл
		
		//Удаляем ссылки в формулах
		Для Каждого СтрокаРасчет Из Объект.ОборотыПоСтатьямБюджетов Цикл
			СтрокаРасчет.ФормулаКоличество=СтрЗаменить(СтрокаРасчет.ФормулаКоличество,"["+СтрокаПоказатель.Код+"]","");
		    СтрокаРасчет.ФормулаСумма=СтрЗаменить(СтрокаРасчет.ФормулаСумма,"["+СтрокаПоказатель.Код+"]","");
		КонецЦикла;
		
		Объект.Показатели.Удалить(СтрокаПоказатель);
		
	КонецЦикла;

КонецПроцедуры //УдалитьПоказателиИсточника

// Добавляет в список показателей доступные к использованию ресурсы источника
//
&НаСервере
Процедура ЗаполнитьПоказателиИсточника(ИсточникДанных,КодИсточника)
	
	Индекс=1;
	Для Каждого Показатель Из ИсточникДанных.Показатели Цикл
		Если Показатель.Использование И Объект.Показатели.НайтиСтроки(Новый Структура("Код",КодИсточника+Формат(Индекс,"ЧЦ=2; ЧВН="))).Количество()=0 Тогда
			НовыйПоказатель=Объект.Показатели.Добавить();
			НовыйПоказатель.Код=КодИсточника+Формат(Индекс,"ЧЦ=2; ЧВН=");
			НовыйПоказатель.Представление=Показатель.Представление;
			НовыйПоказатель.Имя=Показатель.Имя;
			НовыйПоказатель.КодИсточника=КодИсточника;
			НовыйПоказатель.ПредставлениеИсточника=Строка(ИсточникДанных);
			Индекс=Индекс+1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПоказателиИсточника

// Удаляет ведущие нули из номера источника данных
// 
Функция УдалитьВедущиеНули(Знач ИсходныйНомер)
	
	ИсходныйНомер = СокрЛП(ИсходныйНомер);
	
	Пока Лев(ИсходныйНомер, 1)="0" Цикл
		ИсходныйНомер=Сред(ИсходныйНомер, 2);
	КонецЦикла;
	Возврат ИсходныйНомер;

КонецФункции // УдалитьВедущиеНули()

&НаКлиенте
Процедура ОбработатьВводКодаИсточника(Строка,ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Объект.ДополнительныеИсточникиДанных.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если Строка<>Неопределено И Строка<>"" Тогда
		мКод = СокрЛП(Строка);
		мКод = УдалитьНедопустимыеСимволыНомера(мКод);
		Если мКод="" Тогда
			ТекущиеДанные.КодИсточника="ИД"+УдалитьВедущиеНули(ПолеОбъекта(ТекущиеДанные.ИсточникДанных,"Код"));
		Иначе
			Если Объект.Показатели.НайтиСтроки(Новый Структура("Код",мКод)).Количество() > 0 Тогда
				ТекущиеДанные.КодИсточника=мКод+УдалитьВедущиеНули(ПолеОбъекта(ТекущиеДанные.ИсточникДанных,"Код"));
			Иначе
				ТекущиеДанные.КодИсточника=мКод;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ТекущиеДанные.КодИсточника="ИД"+УдалитьВедущиеНули(ПолеОбъекта(ТекущиеДанные.ИсточникДанных,"Код"));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,ИмяПоля)
	Возврат ОбъектДанных[ИмяПоля];	
КонецФункции

// возвращает строку без дефиса
// применяется для формирования кода источника на основании бюджетной операции
// Параметры
//  КодИсточника  - Строка - редактируемый код
//
// Возвращаемое значение:
//   Строка   - редактируемый код без дефиса
//
Функция УдалитьНедопустимыеСимволыНомера(КодИсточника,Длина=10)  Экспорт
    МассивНедопустимыхСимволов = Новый Массив;
	МассивНедопустимыхСимволов.Добавить("-");
	МассивНедопустимыхСимволов.Добавить("/");
	МассивНедопустимыхСимволов.Добавить("*");
	МассивНедопустимыхСимволов.Добавить("+");
	МассивНедопустимыхСимволов.Добавить(",");
	МассивНедопустимыхСимволов.Добавить(".");
	МассивНедопустимыхСимволов.Добавить("?");
	МассивНедопустимыхСимволов.Добавить("(");
	МассивНедопустимыхСимволов.Добавить(")");
	МассивНедопустимыхСимволов.Добавить("=");
	МассивНедопустимыхСимволов.Добавить("/");
	МассивНедопустимыхСимволов.Добавить("\");
	МассивНедопустимыхСимволов.Добавить("|");
	МассивНедопустимыхСимволов.Добавить("");
	МассивНедопустимыхСимволов.Добавить("""");
	МассивНедопустимыхСимволов.Добавить("'");
	МассивНедопустимыхСимволов.Добавить("!");
	МассивНедопустимыхСимволов.Добавить("#");
	МассивНедопустимыхСимволов.Добавить(",");
	МассивНедопустимыхСимволов.Добавить("%");
	МассивНедопустимыхСимволов.Добавить("$");
	МассивНедопустимыхСимволов.Добавить("^");
	МассивНедопустимыхСимволов.Добавить("&");
	МассивНедопустимыхСимволов.Добавить(";");
	МассивНедопустимыхСимволов.Добавить("[");
	МассивНедопустимыхСимволов.Добавить("]");
	МассивНедопустимыхСимволов.Добавить("{");
	МассивНедопустимыхСимволов.Добавить("}");
	МассивНедопустимыхСимволов.Добавить("`");
	МассивНедопустимыхСимволов.Добавить("~");
	МассивНедопустимыхСимволов.Добавить("0");
	МассивНедопустимыхСимволов.Добавить(" ");
	
	Результат = "";
	ДлинаКода = СтрДлина(КодИсточника);
	ЕстьНедопустимыйСимвол = Ложь;
	Для Инд= 1 По ДлинаКода Цикл
		 Симв = Сред(КодИсточника,Инд,1);
		 Если МассивНедопустимыхСимволов.Найти(Симв)<>Неопределено Тогда
			//Если Симв ="0" Тогда
			//	Если ЕстьНедопустимыйСимвол Тогда
			//		Продолжить; 
			//	КонецЕсли;
			//Иначе
				ЕстьНедопустимыйСимвол=Истина;
				Продолжить;
			//КонецЕсли;
		 Иначе
			ЕстьНедопустимыйСимвол = Ложь;
		 КонецЕсли;
		 Результат =Результат + Симв;
	КонецЦикла;
	Если СтрДлина(Результат)>Длина Тогда
		Результат = Прав(Результат,Длина);
	КонецЕсли;
    Возврат Результат;
КонецФункции // УдалитьДефисНомера()

&НаКлиенте
Процедура ОбработатьВводКодаПоказателя(Строка,ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Объект.Показатели.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если Строка<>Неопределено И Строка<>"" Тогда
		мКод = СокрЛП(Строка);
		мКод = УдалитьНедопустимыеСимволыНомера(мКод,13);
		//Пока мКод="" И ВвестиСтроку(мКод,"Введите код показателя (без пробелов и спец. символов):",10,Ложь) Цикл
		//	мКод = СокрЛП(мКод);
		//	мКод = УдалитьНедопустимыеСимволыНомера(мКод,13);
		//КонецЦикла;
		Если мКод="" Тогда
			ТекущиеДанные.Код="РО"+Формат(ТекущийИндекс,"ЧЦ=2; ЧВН=");
		Иначе
			Если Объект.Показатели.НайтиСтроки(Новый Структура("Код",мКод)).Количество() > 0 Тогда
				ТекущиеДанные.Код=мКод+Формат(ТекущийИндекс,"ЧЦ=2; ЧВН=");
			Иначе
				ТекущиеДанные.Код=мКод;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ТекущиеДанные.Код="РО"+Формат(ТекущийИндекс,"ЧЦ=2; ЧВН=");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоСтатьямБюджетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьРедактор(Элемент);
КонецПроцедуры


//Процедура ОткрытьРедактор
//
&НаКлиенте
Процедура ОткрытьРедактор(Элемент)
	СтруктураПараметров = Новый Структура("Данные,АдресТабличнойЧасти,Сценарий,ОсновнойИсточникДанных",Элемент.ТекущиеДанные.НомерСтроки-1,ПолучитьАдресДанных(),Объект.Сценарий,Объект.ОсновнойИсточникДанных);
	Если ТолькоПросмотр Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр",Истина);
	КонецЕсли;
	ОписаниеОповещенияОЗакрытииРедактора = Новый ОписаниеОповещения("ОбработкаЗакрытияРедактора",ЭтотОбъект);
	Открытьформу("Документ.фин_РасчетнаяМодельБюджетирования.Форма.ФормаРедактора",СтруктураПараметров,ЭтотОбъект,,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияОЗакрытииРедактора);
КонецПроцедуры //ОткрытьРедактор

&НаСервере
Функция ПолучитьАдресДанных()
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Правила,Показатели",Объект.ОборотыПоСтатьямБюджетов.Выгрузить(),Объект.Показатели.Выгрузить()),УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбработкаЗакрытияРедактора(Результат,ДополнительныеПараметры)
	Если Результат<>Неопределено Тогда
		Объект.ОборотыПоСтатьямБюджетов.Загрузить(ПолучитьИзВременногоХранилища(Результат));
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры