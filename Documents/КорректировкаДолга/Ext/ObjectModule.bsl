////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

Перем НомераСубконтоРДпоСчету;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАктаВзаимозачета()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолга.Номер,
	|	КорректировкаДолга.Дата,
	|	КорректировкаДолга.КонтрагентДебитор КАК Дебитор,
	|	КорректировкаДолга.КонтрагентКредитор КАК Кредитор,
	|	КорректировкаДолга.Организация Как Организация,
	| 	КорректировкаДолга.СтруктурноеПодразделение,
	|	КорректировкаДолга.ВалютаДокумента
	|ИЗ
	|	Документ.КорректировкаДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	

	ЗапросДолги = Новый Запрос;
	ЗапросДолги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДолги.УстановитьПараметр("ВидЗадолженностиДебиторка", Перечисления.ВидыЗадолженности.Дебиторская);
	ЗапросДолги.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	КорректировкаДолга.СчетУчетаРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА КорректировкаДолга.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВалютнаяСуммаДебиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.Сумма
	|		КОНЕЦ) КАК СуммаКредиторки,
	|	СУММА(ВЫБОР
	|			КОГДА КорректировкаДолга.ВидЗадолженности = &ВидЗадолженностиДебиторка
	|				ТОГДА 0
	|			ИНАЧЕ КорректировкаДолга.СуммаВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКредиторки
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолга.ДоговорКонтрагента,
	|	КорректировкаДолга.СчетУчетаРасчетов";
						
	ТаблицаЗадолженностей = ЗапросДолги.Выполнить().Выгрузить();

	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_Акт";
	Макет       = ПолучитьМакет("Взаимозачет");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации 	 = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата);
	СведенияОКредиторе 	   	 = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Кредитор, Шапка.Дата);
	СведенияОДебиторе 	  	 = ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Дебитор, Шапка.Дата);
	
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Кредитор = ?(ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности, Шапка.Дебитор, Шапка.Кредитор);
	ПредставлениеКредитора   = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Кредитор, Шапка.Дата), "ПолноеНаименование,");
	
	ОбластьМакета.Параметры.Организация  =  ПредставлениеОрганизации;
	СтрокаКредиторки = "1. Задолженность " + ПредставлениеОрганизации + " перед " + ПредставлениеКредитора + " составляет ";
	Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(Шапка.ВалютаДокумента) Тогда
		КолонкаСуммы = "Сумма";
		ПредставлениеВалюты = Строка(мВалютарегламентированногоУчета);
	Иначе	
		КолонкаСуммы = "ВалютнаяСумма";
		ПредставлениеВалюты = Строка(Шапка.ВалютаДокумента);
	КонецЕсли; 
	
	ВыводитьИтогКонтрагентов = Истина;
	
	//в зависимости  от операции, заголовок меняется
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ТекстШапки = "Акт взаимозачета";
		ТекстСуммы = "Взаимозачет";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		ТекстШапки = "Акт списания задолженности";
		ТекстСуммы = "Списание задолженности";
		ВыводитьИтогКонтрагентов = Ложь;
	Иначе
		ТекстШапки = "Акт переноса задолженности";
		ТекстСуммы = "Перенос задолженности";
	КонецЕсли;     			
	СтрокаШапки =  ТекстШапки + " № "+ ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов)+Символы.ПС+" от " + Формат(Шапка.Дата, "ДЛФ=DD"); 
	СтрокаКредиторки  = СтрокаКредиторки + Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Кредиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+" "+ ПредставлениеВалюты +" по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаШапки = СтрокаШапки;
	ОбластьМакета.Параметры.СтрокаКредиторки = СтрокаКредиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКредиторки");
	Для каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы+"Кредиторки"]=0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.Договор = СокрЛП(СтрокаЗадолженности.ДоговорКонтрагента);
		ОбластьМакета.Параметры.Счет    = СтрокаЗадолженности.СчетУчетаРасчетов;
		ОбластьМакета.Параметры.Сумма   = Формат(СтрокаЗадолженности[КолонкаСуммы+"Кредиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+" "+ПредставлениеВалюты;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДебиторки");
	ПредставлениеДебитора  = ОбщегоНазначения.ОписаниеОрганизации(СведенияОДебиторе, "ПолноеНаименование,");
	ПредставлениеКредитора = ОбщегоНазначения.ОписаниеОрганизации(СведенияОКредиторе, "ПолноеНаименование,");
	СтрокаДебиторки  = "2. Задолженность "+ПредставлениеДебитора+" перед " + ПредставлениеОрганизации + " составляет "
	+ Формат(ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Дебиторки"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+" "+ ПредставлениеВалюты +" по следующим договорам:";
	
	ОбластьМакета.Параметры.СтрокаДебиторки = СтрокаДебиторки;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДебиторки");
	Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженностей Цикл
		Если СтрокаЗадолженности[КолонкаСуммы+"Дебиторки"]=0 Тогда
			Продолжить;
		КонецЕсли; 
		ОбластьМакета.Параметры.Договор = СокрЛП(СтрокаЗадолженности.ДоговорКонтрагента);
		ОбластьМакета.Параметры.Счет    = СтрокаЗадолженности.СчетУчетаРасчетов;
		ОбластьМакета.Параметры.Сумма   = Формат(СтрокаЗадолженности[КолонкаСуммы+"Дебиторки"], "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+" "+ПредставлениеВалюты;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("ИтоговаяСумма");
	ОбластьПодвала     = Макет.ПолучитьОбласть("Подвал|Организация");
	
	СуммаДебиторки     = ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Дебиторки");
	СуммаКредиторки    = ТаблицаЗадолженностей.Итог(КолонкаСуммы+"Кредиторки");
	СуммаЗадолженности = ?(СуммаДебиторки = 0, СуммаКредиторки, СуммаДебиторки);
	
	СтрокаВзаимозачета = ТекстСуммы + " производится на сумму "
	                   + Формат(СуммаЗадолженности, "ЧЦ=15; ЧДЦ=2; ЧН=Ноль") + " " + ПредставлениеВалюты;
	ОбластьИтого.Параметры.СтрокаВзаимозачета       = СтрокаВзаимозачета;	
	ТабДокумент.Вывести(ОбластьИтого);
	
	//выводим подвал
	ОбластьПодвала.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;	
	ОбластьПодвала.Параметры.РНН_БИНОрганизации 	  = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОбОрганизации, Шапка.Дата);
	ОбластьПодвала.Параметры.АдресОрганизации 		  = СведенияОбОрганизации.ЮридическийАдрес;
	ТабДокумент.Вывести(ОбластьПодвала);
	
	РНН_БИНКредитора = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОКредиторе, Шапка.Дата);
	
	//в случае списания выводить контрагентов не нужно
	Если  ВыводитьИтогКонтрагентов И Шапка.Кредитор <> Шапка.Дебитор Тогда
		ОбластьПодвалаКонтрагентов = Макет.ПолучитьОбласть("ПодвалКонтрагентов");	
		
		ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
		ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНКредитора 		  = РНН_БИНКредитора;
		ОбластьПодвалаКонтрагентов.Параметры.АдресКредитора 		  = СведенияОКредиторе.ЮридическийАдрес;
		
		ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеДебитора    = ПредставлениеДебитора;
		ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНДебитора 		  = ОбщегоНазначения.ПолучитьРегистрационныйНомерОрганизацииКонтрагентаВПечатнуюФорму(СведенияОДебиторе, Шапка.Дата);
		ОбластьПодвалаКонтрагентов.Параметры.АдресДебитора 			  = СведенияОДебиторе.ЮридическийАдрес;
		
		ТабДокумент.Вывести(ОбластьПодвалаКонтрагентов);
	ИначеЕсли  ВыводитьИтогКонтрагентов И Шапка.Кредитор = Шапка.Дебитор Тогда
		ОбластьПодвалаКонтрагентов = Макет.ПолучитьОбласть("Подвал|Кредитор");	
		ОбластьПодвалаКонтрагентов.Параметры.ПредставлениеКредитора   = ПредставлениеКредитора;
		ОбластьПодвалаКонтрагентов.Параметры.РНН_БИНКредитора 		  = РНН_БИНКредитора;
		ОбластьПодвалаКонтрагентов.Параметры.АдресКредитора 		  = СведенияОКредиторе.ЮридическийАдрес;
		
		ТабДокумент.Присоединить(ОбластьПодвалаКонтрагентов);  
	КонецЕсли;
	
		               	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КорректировкаДолга" Тогда		
		
		ТабДокумент = ПечатьАктаВзаимозачета();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками взаиморасчетов по контрагенту
//
Процедура ЗаполнитьОстаткамиВзаиморасчетов(ПоКонтрагенту, ВидЗадолженности) Экспорт
	
	СчетаРасчетов = УправлениеВзаиморасчетами.ПолучитьСписокСчетовВзаиморасчетов().ВыгрузитьКолонку("Ссылка");
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение = &СтруктурноеПодразделение ";
	Иначе
		УсловиеСтруктурноеПодразделение = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 1
	|			ТОГДА Типовой.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетаПоДокументам,
	|	ВЫБОР
	|		КОГДА НаличиеНужныхСубконто.ЕстьДокументыРасчетов = 0
	|			ТОГДА Типовой.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетаБезДокументов,
	|	НаличиеНужныхСубконто.ЕстьДокументыРасчетов
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойВидыСубконто.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоКонтрагенты
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьКонтрагенты,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДоговоры
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьДоговоры,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ТиповойВидыСубконто.ВидСубконто = &ВидСубконтоДокументыРасчетов
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЕстьДокументыРасчетов
	|		ИЗ
	|			ПланСчетов.Типовой.ВидыСубконто КАК ТиповойВидыСубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойВидыСубконто.Ссылка) КАК НаличиеНужныхСубконто
	|		ПО Типовой.Ссылка = НаличиеНужныхСубконто.Ссылка
	|ГДЕ
	|	НаличиеНужныхСубконто.ЕстьКонтрагенты = 1
	|	И НаличиеНужныхСубконто.ЕстьДоговоры = 1
	|	И Типовой.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
	|	И Типовой.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)";
	
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументыРасчетов", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	СчетаУчетаРасчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СчетаРасчетовБезАналитикиПоДокументам = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаБезДокументов"),Истина);
	СчетаРасчетовСАналитикойПоДокументам = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетаУчетаРасчетов.ВыгрузитьКолонку("СчетаПоДокументам"),Истина);

	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	
	Если НЕ СчетаРасчетовБезАналитикиПоДокументам.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто2 КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовБезАналитикиПоДокументам),
		|		&ВидыСубконтоБезДокументов,
		|		Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
		|		    И Субконто1 = &Контрагент) КАК ТиповойОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ТиповойОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ТиповойОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ"
	КонецЕсли;
	
	Если НЕ СчетаРасчетовСАналитикойПоДокументам.Количество() = 0 Тогда
	
		Запрос.Текст = ?(ПустаяСтрока(Запрос.Текст),"",Запрос.Текст + Символы.ПС + "Объединить Все" +Символы.ПС)+
		"ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1 КАК Контрагент,
		|	ТиповойОстатки.Субконто2 КАК Договор,
		|	ТиповойОстатки.Субконто3 КАК ДокументРасчетов,
		|	ТиповойОстатки.СуммаОстаток,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|	ТиповойОстатки.Субконто2.ВидДоговора КАК ВидДоговора,
		|	ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(
		|		&Период,
		|		Счет В (&СчетаРасчетовСАналитикойПоДокументам),
		|		&ВидыСубконтоСДокументами,
		|		Организация = &Организация " + УсловиеСтруктурноеПодразделение + "
		|		    И Субконто1 = &Контрагент) КАК ТиповойОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВалютаДокумента В (&ВалютаРегУчета)
		|				ТОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|			ИНАЧЕ (НЕ ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета))
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ТиповойОстатки.Субконто2.ВалютаВзаиморасчетов В (&ВалютаРегУчета)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|							ТОГДА ТиповойОстатки.СуммаОстаток > 0
		|						ИНАЧЕ ТиповойОстатки.СуммаОстаток < 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВидЗадолженности = &ВидЗадолженностиДебиторская
		|						ТОГДА ТиповойОстатки.ВалютнаяСуммаОстаток > 0
		|					ИНАЧЕ ТиповойОстатки.ВалютнаяСуммаОстаток < 0
		|				КОНЕЦ
		|		КОНЕЦ";
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",						  Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",				  Организация);
	Запрос.УстановитьПараметр("Контрагент", 				  ПоКонтрагенту);
	Запрос.УстановитьПараметр("ВидЗадолженности",			  ВидЗадолженности);
	Запрос.УстановитьПараметр("ВидЗадолженностиДебиторская",  Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("ВидЗадолженностиКредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	
	ВалютыРеглУчета = Новый СписокЗначений;
	ВалютыРеглУчета.Добавить(Константы.ВалютаРегламентированногоУчета.Получить());
	ВалютыРеглУчета.Добавить(Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаРегУчета",ВалютыРеглУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	КонецЕсли;
	
	Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = неопределено Тогда
		//Документ в иностранной валюте. Установим отбор только по договорам в нужной валюте
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация","Организация = &Организация и Валюта = &ВалютаДокумента");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("СчетаРасчетовБезАналитикиПоДокументам",СчетаРасчетовБезАналитикиПоДокументам);
	Запрос.УстановитьПараметр("СчетаРасчетовСАналитикойПоДокументам", СчетаРасчетовСАналитикойПоДокументам);
	
	ВидыСубконтоБезДокументов = Новый Массив();
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоБезДокументов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Запрос.УстановитьПараметр("ВидыСубконтоБезДокументов",ВидыСубконтоБезДокументов);
	
	ВидыСубконтоСДокументами = Новый Массив();
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	ВидыСубконтоСДокументами.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоСДокументами", ВидыСубконтоСДокументами);
	
	ТекущийРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Множитель = ?(ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,1,-1);
	Для Каждого СтрокаОстатков Из ТекущийРезультат Цикл
	    НоваяСтрока = СуммыДолга.Добавить();
		НоваяСтрока.ВидЗадолженности = ВидЗадолженности;
		НоваяСтрока.ДоговорКонтрагента = СтрокаОстатков.Договор;
		НоваяСтрока.Сделка = СтрокаОстатков.ДокументРасчетов;
		НоваяСтрока.СчетУчетаРасчетов = СтрокаОстатков.Счет;
		Если ВалютыРеглУчета.НайтиПоЗначению(ВалютаДокумента) = Неопределено Тогда
			НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
			НоваяСтрока.КурсВзаиморасчетов = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
			
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
			
		Иначе	
			
			Если ВалютыРеглУчета.НайтиПоЗначению(СтрокаОстатков.ВалютаВзаиморасчетов) = Неопределено Тогда
				// Это расчеты в у.е.
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток;
				КурсИКратностьРасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаОстатков.ВалютаВзаиморасчетов, Дата);
				
				НоваяСтрока.КратностьВзаиморасчетов = КурсИКратностьРасчетов.Кратность;
				НоваяСтрока.КурсВзаиморасчетов = ?(Множитель*СтрокаОстатков.ВалютнаяСуммаОстаток=0,0,СтрокаОстатков.СуммаОстаток/СтрокаОстатков.ВалютнаяСуммаОстаток)/?(КурсИКратностьРасчетов.Кратность = 0,1,КурсИКратностьРасчетов.Кратность);
				
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Множитель*СтрокаОстатков.СуммаОстаток;	
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли; 
			НоваяСтрока.Сумма = Множитель*СтрокаОстатков.СуммаОстаток;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();
	
	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		
		Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Типовой.Вспомогательный,"КоррСчет");
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		Если СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор Тогда
			// Очистим корр. счет и аналитику (далее заполняться счет и аналитика будут отдельным алгоритмом)
			ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено,"КоррСчет,КоррСубконто1, КоррСубконто2, КоррСубконто3");
		Иначе
			// Счет переноса для кредиторской задолженности устанавливается из другого поля
			Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
				СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			КонецЦикла; 
			
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
			
			// При наличии аналитики по документам расчетов в конце документ перенесем из проводки по счету учета
			ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"КоррСубконто3");
		КонецЕсли;
		
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
			СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
			СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
			СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
			Если  СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				СтрокаКредиторки.КоррСчетНУ = СтруктураШапкиДокумента.СчетКтНУ;
				СтрокаКредиторки.КоррСубконтоНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
				СтрокаКредиторки.КоррСубконтоНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
				СтрокаКредиторки.КоррСубконтоНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ТаблицаРасчетов.Колонки.Добавить("СтруктурноеПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение,"СтруктурноеПодразделение");
			
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская и СтрокаРасчетов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
			//Это возврат от поставщика
			СтрокаРасчетов.ЭтоВозврат = Истина;
		ИначеЕсли СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская и СтрокаРасчетов.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			//Это возврат покупателю
			СтрокаРасчетов.ЭтоВозврат = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	// Дополним таблицу расчетов полями тенговой и валютной сумм (для отработки стандартных механизмов движения денег)
	ТаблицаРасчетов.Колонки.Добавить("ТенговаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("Сумма"),"ТенговаяСумма");
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
	Иначе
		ТаблицаРасчетов.ЗагрузитьКолонку(ТаблицаРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов"),"ВалютнаяСумма");
		Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
			СтрокаРасчетов.ТенговаяСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСумма,
						СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
						СтрокаРасчетов.КурсВзаиморасчетов, 1, 
	                    СтрокаРасчетов.КратностьВзаиморасчетов, 1);
		КонецЦикла; 
	КонецЕсли;	
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("ВалютаДокумента", "Не заполнено значение реквизита ""Валюта""");
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор");
		Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнен вспомогательный счет для проведения взаиморасчета");
		КонецЕсли; 
	Иначе
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор","Не заполнен контрагент для списания задолженности");
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			
			СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор","Не заполнен контрагент для зачисления задолженности");
			
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт","Не заполнен счет зачисления дебиторской задолженности");
			КонецЕсли; 
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетКт","Не заполнен счет зачисления кредиторской задолженности");
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетДт","Не заполнен счет списания дебиторской задолженности");
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ и ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СтруктураШапкиДокумента.СчетДт) Тогда
					СтруктураОбязательныхПолей.Вставить("СчетДтНУ","Не заполнен счет списания дебиторской задолженности по налоговому учету");
				КонецЕсли;
			КонецЕсли;
			
			Если не ТаблицаПоСуммамДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская,"ВидЗадолженности") = Неопределено Тогда
				СтруктураОбязательныхПолей.Вставить("СчетКт","Не заполнен счет списания кредиторской задолженности");
				Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ и ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СтруктураШапкиДокумента.СчетКт) Тогда
					СтруктураОбязательныхПолей.Вставить("СчетКтНУ","Не заполнен счет списания кредиторской задолженности по налоговому учету");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	
		
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		и НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента)Тогда

		СтрокаСообщения = "Не заполнен договор для зачисления задолженности!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
	КонецЕсли; 

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ТабСумм         = ТаблицаПоСуммамДолга.Скопировать();
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или СтруктураШапкиДокумента.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка() Тогда
			ТабСумм.Свернуть("ВидЗадолженности","Сумма");
		Иначе
			ТабСумм.Свернуть("ВидЗадолженности","СуммаВзаиморасчетов");
			ТабСумм.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
		КонецЕсли; 
		
		СуммаДеб  = 0;
		СуммаКред = 0;
		
		Для каждого СтрокаСумм Из ТабСумм Цикл
			Если  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				СуммаДеб  = СтрокаСумм.Сумма;
			ИначеЕсли  СтрокаСумм.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
				СуммаКред = СтрокаСумм.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		
		Разница = СуммаДеб - СуммаКред;
		
		Если не Разница =0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2; ЧН=0,00")+" " +Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2; ЧН=-")+" "+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2")+Строка(СтруктураШапкиДокумента.ВалютаДокумента);
			
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);

	Если ТаблицаПоСуммамДолга.Количество()=0 Тогда
		 Возврат;
	КонецЕсли;  
	
	ТаблицаДебиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаКредиторскойЗадолженности = ТаблицаПоСуммамДолга.Скопировать();

	ВидЗадолженностиДебиторская = Перечисления.ВидыЗадолженности.Дебиторская;
	ВидЗадолженностиКредиторская = Перечисления.ВидыЗадолженности.Кредиторская;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаДебиторскойЗадолженности.Количество() Цикл

		СтрокаТаблицы = ТаблицаДебиторскойЗадолженности.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиДебиторская Тогда
			 ТаблицаДебиторскойЗадолженности.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаКредиторскойЗадолженности.Количество() Цикл

		СтрокаТаблицы = ТаблицаКредиторскойЗадолженности.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = ВидЗадолженностиКредиторская Тогда
			 ТаблицаКредиторскойЗадолженности.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности);

КонецПроцедуры // ДвиженияПоРегистрам()

//Функция для получения номера субконто "Расчетные документы" по счету учета
//
// Параметры
//  Счет         - счет по которому определяетс номер субконто "Документы расчетов с контрагентами"
// Возвращаемое значение:
//   Число   – номер субконто "Документы расчетов с контрагентами" на счете. Если субконто нет - возвращается 0.
//
Функция ПолучитьНомерСубконтоРД(Счет)
    Если НомераСубконтоРДпоСчету = Неопределено Тогда
	    НомераСубконтоРДпоСчету = Новый Соответствие();
	КонецЕсли; 
	
	НомерСубконтоРД = НомераСубконтоРДпоСчету[Счет];
	
	Если  НомерСубконтоРД = Неопределено Тогда
		НомерСубконтоРД = 0;
		
		// Определим начичие субконто "Документы расчетов с контрагентами" по счету учета.
		ВидыСубконто = Счет.ВидыСубконто;
		СтрокаСубконтоРД = ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами,"ВидСубконто");
		Если не СтрокаСубконтоРД = Неопределено Тогда
			НомераСубконтоРДпоСчету.Вставить(Счет, СтрокаСубконтоРД.НомерСтроки);
			НомерСубконтоРД = СтрокаСубконтоРД.НомерСтроки;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НомерСубконтоРД;

КонецФункции // ПолучитьНомерСубконтоРД()

Процедура ДвиженияПоРегистрамРегл( СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок, ТаблицаДебиторскойЗадолженности,ТаблицаКредиторскойЗадолженности)
	
	СодержаниеПроводки = "";
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		СодержаниеПроводки = "Взаимозачет";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		СодержаниеПроводки = "Перенос задолженности";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		СодержаниеПроводки = "Списание задолженности";
	КонецЕсли; 
	
	КоличествоПроводокПоДебиторке = 0;
	
	Если ТаблицаДебиторскойЗадолженности.Количество()>0 Тогда
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Дебиторская);
		
		Если не ТаблицаДебиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
			Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
			Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДебиторскойЗадолженности);
			Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
			
			// Сначала по возвратам пройдемся
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
			// Затем отработаем погашение задолженности
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
			
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		
		Иначе
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаДебиторскойЗадолженности)=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движении для последующей корректировки
			НаборДвиженийДебиторка = Движения.Типовой.Выгрузить();
			КоличествоПроводокПоДебиторке = Движения.Типовой.Количество();
			
			Движения.Типовой.Очистить();
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
			и СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор 
			Тогда
			
			Для каждого Проводка Из Движения.Типовой Цикл
				Если НЕ ЗначениеЗаполнено(проводка.СчетДт) Тогда
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетДт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетДт) = 0  Тогда
						НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
						
						Если НомерСубконтоРД = 0 Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						Иначе
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами);
						КонецЕсли; 
					КонецЕсли; 
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
						Проводка.ВалютнаяСуммаДт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Проводка.Сумма, мВалютаРегламентированногоУчета,
																			  СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,1,
																			  СтруктураКурса.Курс,1,СтруктураКурса.Кратность);
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
						
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(проводка.СчетКт) Тогда
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетДт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетДт) = 0  Тогда
						НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
						
						Если НомерСубконтоРД = 0 Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						Иначе
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами);
						КонецЕсли; 
					КонецЕсли; 
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
						Проводка.ВалютнаяСуммаКт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Проводка.Сумма, мВалютаРегламентированногоУчета,
																			  СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,1,
																			  СтруктураКурса.Курс,1,СтруктураКурса.Кратность);
					КонецЕсли;

					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
										
				КонецЕсли; 
			
			КонецЦикла; 
			КоличествоПроводокПоДебиторке = Движения.Типовой.Количество();
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТаблицаКредиторскойЗадолженности.Количество()>0 Тогда
		СтруктураШапкиДокумента.Вставить("ВидЗадолженности",Перечисления.ВидыЗадолженности.Кредиторская);
		
		Если не ТаблицаКредиторскойЗадолженности.Найти(Истина,"ЭтоВозврат") = Неопределено Тогда
			Построитель_ТаблицаЗадолженности = Новый построительЗапроса();
			Построитель_ТаблицаЗадолженности.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаКредиторскойЗадолженности);
			Построитель_ТаблицаЗадолженности.Отбор.Добавить("ЭтоВозврат");
			
			// Сначала по возвратам пройдемся
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Истина,Истина);
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Истина);
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
			// Затем отработаем погашение задолженности
			СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);
			Построитель_ТаблицаЗадолженности.Отбор.ЭтоВозврат.Установить(Ложь,Истина);
			
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,Построитель_ТаблицаЗадолженности.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой))=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		
		Иначе
			Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,ТаблицаКредиторскойЗадолженности)=Ложь тогда
				// Ошибка при списании задолженности
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
			// Выгружаем набор движении для последующей корректировки
			НаборДвиженийКредиторка = Движения.Типовой.Выгрузить();
			
			Движения.Типовой.Очистить();
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
			и (Движения.Типовой.Количество()) >0 
			и СтруктураШапкиДокумента.КонтрагентКредитор = СтруктураШапкиДокумента.КонтрагентДебитор
			Тогда
			Для НомерПроводки = КоличествоПроводокПоДебиторке по Движения.Типовой.Количество()-1 Цикл
				Проводка = Движения.Типовой[НомерПроводки];
				Если НЕ ЗначениеЗаполнено(проводка.СчетДт) Тогда
					Проводка.СчетДт = СтруктураШапкиДокумента.СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетКт) = 0  Тогда
						
						НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
							
						Если НомерСубконтоРД = 0 Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						Иначе
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами);
						КонецЕсли; 
					КонецЕсли;
					
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
						Проводка.ВалютнаяСуммаДт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Проводка.Сумма, мВалютаРегламентированногоУчета,
																			  СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,1,
																			  СтруктураКурса.Курс,1,СтруктураКурса.Кратность);
					КонецЕсли;
			
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
										
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(проводка.СчетКт) Тогда
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетКт;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 	СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если не ПолучитьНомерСубконтоРД (СтруктураШапкиДокумента.СчетКт) = 0  Тогда
						НомерСубконтоРД = ПолучитьНомерСубконтоРД (Проводка.СчетКт);
						
						Если НомерСубконтоРД = 0 Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);
						Иначе
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами);
						КонецЕсли; 
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						СтруктураКурса = ОбщегоНазначения.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
						Проводка.ВалютнаяСуммаКт = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Проводка.Сумма, мВалютаРегламентированногоУчета,
																			  СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,1,
																			  СтруктураКурса.Курс,1,СтруктураКурса.Кратность);
					КонецЕсли;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
					
				КонецЕсли; 
			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета и не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет и КоличествоПроводокПоДебиторке>0 Тогда
		// Сопоставление дебета и кредита проводки
		// Сопоставление производится по сумме регламентированного учета - балансовый реквизит проводки
		ВспомогательныйСчет = ПланыСчетов.Типовой.Вспомогательный;
		
		Для каждого СтрокаДебиторки Из НаборДвиженийДебиторка Цикл
			Если не СтрокаДебиторки.СчетДт = ВспомогательныйСчет Тогда
				// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
				Проводка  = Движения.Типовой.Добавить();
				Проводка.Период			= СтрокаДебиторки.Период;
				Проводка.Организация	= СтрокаДебиторки.Организация;
				Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
				Проводка.Содержание		= СтрокаДебиторки.Содержание;
				Проводка.Сумма			= СтрокаДебиторки.Сумма;
				
				Проводка.СчетДт			= СтрокаДебиторки.СчетДт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаДебиторки["ВидСубконтоДт"+НомерСубконто], СтрокаДебиторки["СубконтоДт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаДт		= СтрокаДебиторки.ВалютаДт;
				Проводка.ВалютнаяСуммаДт= СтрокаДебиторки.ВалютнаяСуммаДт;
				
				Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
				Проводка.ВалютнаяСуммаКт= СтрокаДебиторки.ВалютнаяСуммаКт;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтрокаДебиторки.СтруктурноеПодразделениеДт, СтрокаДебиторки.СтруктурноеПодразделениеКт);

				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
				Если СтрокаДебиторки.Сумма = 0 Тогда
				    Прервать;
				КонецЕсли;
				Если СтрокаКредиторки.Сумма = 0 Тогда
				    Продолжить;
				КонецЕсли;
				
				Если не СтрокаКредиторки.СчетКт = ВспомогательныйСчет Тогда
					// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
					Проводка  = Движения.Типовой.Добавить();
					Проводка.Период			= СтрокаКредиторки.Период;
					Проводка.Организация	= СтрокаКредиторки.Организация;
					Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
					Проводка.Содержание		= СтрокаКредиторки.Содержание;
					Проводка.Сумма			= СтрокаКредиторки.Сумма;
					
					Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
					Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
					
					Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					
					Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
					Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
					
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						Проводка, СтрокаКредиторки.СтруктурноеПодразделениеДт, СтрокаКредиторки.СтруктурноеПодразделениеКт);

					СтрокаКредиторки.Сумма = 0;
					СтрокаКредиторки.ВалютнаяСуммаДт = 0;
					СтрокаКредиторки.ВалютнаяСуммаКт = 0;
					Продолжить;
				КонецЕсли; 
				
				СуммаСоответствия = мин(СтрокаДебиторки.Сумма,СтрокаКредиторки.Сумма);
				
				Если СуммаСоответствия = 0 Тогда
					продолжить;
				КонецЕсли; 
				
				// Проводка взаимозачета
				Проводка  = Движения.Типовой.Добавить();
				Проводка.Период			= СтрокаДебиторки.Период;
				Проводка.Организация	= СтрокаДебиторки.Организация;
				Проводка.НомерЖурнала	= СтрокаДебиторки.НомерЖурнала;
				Проводка.Содержание		= СтрокаДебиторки.Содержание;
				Проводка.Сумма			= СуммаСоответствия;
				
				Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
						Если СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры  Тогда
							ДоговорКредитовки =  СтрокаКредиторки["СубконтоДт"+НомерСубконто];
						КонецЕсли; 						
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
				Проводка.ВалютнаяСуммаДт= Окр(СтрокаКредиторки.ВалютнаяСуммаДт*СуммаСоответствия/СтрокаКредиторки.Сумма,2);
				
				
				Проводка.СчетКт			= СтрокаДебиторки.СчетКт;
				Для НомерСубконто = 1  По 3 Цикл
					Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
						Если СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры Тогда
							ДоговорДебиторки =  СтрокаДебиторки["СубконтоКт"+НомерСубконто];
						КонецЕсли; 			
						ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
					КонецЕсли; 
				КонецЦикла; 
				
				Проводка.ВалютаКт		= СтрокаДебиторки.ВалютаКт;
				Проводка.ВалютнаяСуммаКт= Окр(СтрокаДебиторки.ВалютнаяСуммаКт*СуммаСоответствия/СтрокаДебиторки.Сумма,2);
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтрокаДебиторки.СтруктурноеПодразделениеДт, СтрокаДебиторки.СтруктурноеПодразделениеКт);
				
				СтрокаДебиторки.Сумма			= СтрокаДебиторки.Сумма - СуммаСоответствия;
				СтрокаДебиторки.ВалютнаяСуммаКт = СтрокаДебиторки.ВалютнаяСуммаКт - Проводка.ВалютнаяСуммаКт;
			
				СтрокаКредиторки.Сумма			= СтрокаКредиторки.Сумма - СуммаСоответствия;
				СтрокаКредиторки.ВалютнаяСуммаДт = СтрокаКредиторки.ВалютнаяСуммаДт - Проводка.ВалютнаяСуммаДт;
				
				//отразим данные в НУ
				СчетДтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаКредиторки.СчетДт); 
				СчетКтНУ = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаДебиторки.СчетКт);
				Если СтруктураШапкиДокумента.НеобходимостьотраженияВНУ  
					И  (ДоговорДебиторки <> ДоговорКредитовки или СчетДтНУ <> СчетКтНУ)Тогда
					
					ПроводкаНУ = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период			= СтрокаДебиторки.Период;
					ПроводкаНУ.Организация		= СтрокаДебиторки.Организация;
					ПроводкаНУ.НомерЖурнала		= СтрокаДебиторки.НомерЖурнала;
					ПроводкаНУ.Содержание		= СтрокаДебиторки.Содержание;
					ПроводкаНУ.Сумма			= СуммаСоответствия;
					
					ПроводкаНУ.СчетДт			= СчетДтНУ;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда 													
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла;   						
					
					ПроводкаНУ.СчетКт			= СчетКтНУ;
					Для НомерСубконто = 1  По 3 Цикл
						Если Не СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, СтрокаДебиторки["ВидСубконтоКт"+НомерСубконто], СтрокаДебиторки["СубконтоКт"+НомерСубконто]);
						КонецЕсли; 
					КонецЦикла; 
					ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
						ПроводкаНУ, СтрокаДебиторки.СтруктурноеПодразделениеДт, СтрокаДебиторки.СтруктурноеПодразделениеКт);
					
					ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);						
				КонецЕсли;			
			КонецЦикла; 
		КонецЦикла; 
	
		Для каждого СтрокаКредиторки Из НаборДвиженийКредиторка Цикл
			Если СтрокаКредиторки.Сумма = 0 и СтрокаКредиторки.ВалютнаяСуммаДт = 0 и СтрокаКредиторки.ВалютнаяСуммаКт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Суммовые разницы или что-то подобное (проводка не самого взаимозачета)
			Проводка  = Движения.Типовой.Добавить();
			Проводка.Период			= СтрокаКредиторки.Период;
			Проводка.Организация	= СтрокаКредиторки.Организация;
			Проводка.НомерЖурнала	= СтрокаКредиторки.НомерЖурнала;
			Проводка.Содержание		= СтрокаКредиторки.Содержание;
			Проводка.Сумма			= СтрокаКредиторки.Сумма;
			
			Проводка.СчетДт			= СтрокаКредиторки.СчетДт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто] = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаКредиторки["ВидСубконтоДт"+НомерСубконто], СтрокаКредиторки["СубконтоДт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаДт		= СтрокаКредиторки.ВалютаДт;
			Проводка.ВалютнаяСуммаДт= СтрокаКредиторки.ВалютнаяСуммаДт;
			
			Проводка.СчетКт			= СтрокаКредиторки.СчетКт;
			Для НомерСубконто = 1  По 3 Цикл
				Если Не СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто] = Неопределено Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконтоПоВидуСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаКредиторки["ВидСубконтоКт"+НомерСубконто], СтрокаКредиторки["СубконтоКт"+НомерСубконто]);
				КонецЕсли; 
			КонецЦикла; 
			
			Проводка.ВалютаКт		= СтрокаКредиторки.ВалютаКт;
			Проводка.ВалютнаяСуммаКт= СтрокаКредиторки.ВалютнаяСуммаКт;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					Проводка, СтрокаКредиторки.СтруктурноеПодразделениеДт, СтрокаКредиторки.СтруктурноеПодразделениеКт);

			СтрокаКредиторки.Сумма = 0;
			СтрокаКредиторки.ВалютнаяСуммаДт = 0;
			СтрокаКредиторки.ВалютнаяСуммаКт = 0;
			Продолжить;
		КонецЦикла; 
		
	КонецЕсли;
	
	// Списание задолженности в налоговом учете
	Если СтруктураШапкиДокумента.НеобходимостьотраженияВНУ и ТаблицаПоСуммамДолга.Количество()>0 
		И НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Для Каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
				И СтрокаДолга.СуммаНУ = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
				И  СтруктураШапкиДокумента.ДоговорКонтрагента = СтрокаДолга.ДоговорКонтрагента 
				И СтрокаДолга.Сумма = 0  Тогда
				Продолжить;
			КонецЕсли;
				
			ПроводкаНУ = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
						
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда 				
				//списание задолженности
				Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
					ПроводкаНУ.Содержание  	= "Списана дебиторская задолженность";
					ПроводкаНУ.СчетДт 		= СтрокаДолга.КоррСчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.КоррСубконтоНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.КоррСубконтоНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3,СтрокаДолга.КоррСубконтоНУ3);											
					
					ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
					//перенос  задолженности
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
					
					ПроводкаНУ.Сумма       	=  СтрокаДолга.Сумма;
					ПроводкаНУ.Содержание  	= "Перенос задолженности";
					ПроводкаНУ.СчетДт 		= СтрокаДолга.КоррСчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				КонецЕсли;  				
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаДолга.СчетОплатыБУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.ДоговорКонтрагента);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);                          				
			ИначеЕсли СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда				
				
				ПроводкаНУ.СчетДт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ(СтрокаДолга.СчетОплатыБУ);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1,СтрокаДолга.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2,СтрокаДолга.ДоговорКонтрагента);
				
				//списание задолженности
				Если  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
					ПроводкаНУ.Содержание  = "Списана кредиторская задолженность";					
					ПроводкаНУ.Сумма       =  СтрокаДолга.СуммаНУ;
					
					ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтрокаДолга.КоррСубконтоНУ1);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтрокаДолга.КоррСубконтоНУ2);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3,СтрокаДолга.КоррСубконтоНУ3);
					
					//перенос задолженности
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда					
					ПроводкаНУ.Сумма       =  СтрокаДолга.Сумма;
					
					ПроводкаНУ.СчетКт = СтрокаДолга.КоррСчетНУ;
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1,СтруктураШапкиДокумента.КонтрагентКредитор);
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2,СтруктураШапкиДокумента.ДоговорКонтрагента);					
					ПроводкаНУ.Содержание  = "Перенос задолженности";					
				КонецЕсли; 
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 

	
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Занесем в структуру шапки дополнительный параметр для проведения 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",Ложь);

	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	                                                                       
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	
	СтруктураПолей.Вставить("Сделка"                				  , "Сделка");
	СтруктураПолей.Вставить("ВидДоговора"                             , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("Сумма"              					  , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"              		  , "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
 	СтруктураПолей.Вставить("СчетОплатыБУ"         					  , "СчетУчетаРасчетов");
 	СтруктураПолей.Вставить("СчетАванса"          					  , "СчетУчетаРасчетов");
	
	СтруктураПолей.Вставить("КоррСчет"              				  , "Ссылка.СчетДт");
	СтруктураПолей.Вставить("КоррСубконто1"              			  , "Ссылка.СубконтоДт1");
	СтруктураПолей.Вставить("КоррСубконто2"              			  , "Ссылка.СубконтоДт2");
	СтруктураПолей.Вставить("КоррСубконто3"              			  , "Ссылка.СубконтоДт3");
	
	// {ОбособленныеПодразделения
	СтруктураПолей.Вставить("КоррСтруктурноеПодразделение"			  , "Ссылка.СтруктурноеПодразделение");
	// }ОбособленныеПодразделения
	
	Если  СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураПолей.Вставить("СуммаНУ"              				  , "СуммаНУ");		
		СтруктураПолей.Вставить("КоррСчетНУ"              			  , "Ссылка.СчетДтНУ");
		СтруктураПолей.Вставить("КоррСубконтоНУ1"              		  , "Ссылка.СубконтоДтНУ1");
		СтруктураПолей.Вставить("КоррСубконтоНУ2"              		  , "Ссылка.СубконтоДтНУ2");
		СтруктураПолей.Вставить("КоррСубконтоНУ3"              		  , "Ссылка.СубконтоДтНУ3");
		
	КонецЕсли; 
	
	РезультатЗапросаПоСуммамДолга = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
		Если Не Отказ 
			и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			
			Если Не Отказ Тогда			
				ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
			КонецЕсли;
		КонецЕсли;	

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();