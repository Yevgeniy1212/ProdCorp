Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа отпусками по утвержденным отпускам управленческого учета
//
// Параметры
//  ДатаНачала, ДатаОкончания – даты начала и окончания 
//								просмотра графика отпусков	
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("Состояние", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	ПараметрыЗапроса.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыЗапроса.Вставить("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	ПараметрыЗапроса.Вставить("ПустаяСсылкаФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("ПустаяСсылкаПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("ПустаяСсылкаДолжность", Справочники.ДолжностиОрганизаций.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("ОтпускЕжегодный", Справочники.ВидыТрудовыхОтпусков.ОтпускЕжегодный);
	ПараметрыЗапроса.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	ПараметрыЗапроса.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	ДанныеРасчетаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ГоловнаяОрганизация КАК Организация,
	|	РаботникиОрганизации.Сотрудник,
	|	// для учета возможности предоставления отпуска авансов за будущие года сдвинем дату расчета вперед
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(СобытийныйПланЗанятостиФизлиц.Период, ГОД, 1)) КАК ДатаРасчета
	|ПОМЕСТИТЬ ВТ_ДанныеРасчета
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|									&ДатаОкончания,
	|									Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизации
	|		ПО СобытийныйПланЗанятостиФизлиц.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
	|			И РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
	|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &ВнутреннееСовместительство
	|
	|ГДЕ 	
	|	СобытийныйПланЗанятостиФизлиц.Период МЕЖДУ &ДатаНачала И &ДатаОкончания 
	|	И СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Сотрудник
	|";
	
	НеиспользованныеОтпускаТекст = ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаНеиспользованныеОтпуска(ДанныеРасчетаТекст, ПараметрыЗапроса);
		
	// Установим параметры запроса
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	                 
	ОтпускаТекст = "
	|" + НеиспользованныеОтпускаТекст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытийныйПланЗанятостиФизЛиц.ФизЛицо,
	|	СобытийныйПланЗанятостиФизЛиц.Период КАК ДатаНачала,
	|	СобытийныйПланЗанятостиФизЛиц.ДатаОкончания КАК ДатаОкончания,
	|	НеиспользованныеОтпуска.Сотрудник,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска,
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска КАК ОчередностьПредоставленияОтпуска,
	|	НеиспользованныеОтпуска.РабочийГодС,
	|	НеиспользованныеОтпуска.РабочийГодПо,
	|	НеиспользованныеОтпуска.Результат КАК ЧислоДней
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизЛиц КАК СобытийныйПланЗанятостиФизЛиц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НеиспользованныеОтпуска КАК НеиспользованныеОтпуска
	|		ПО СобытийныйПланЗанятостиФизЛиц.ФизЛицо = НеиспользованныеОтпуска.ФизЛицо
	|
	|ГДЕ
	|	СобытийныйПланЗанятостиФизлиц.Период МЕЖДУ &ДатаНачала И &ДатаОкончания 
	|	И СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	СобытийныйПланЗанятостиФизЛиц.ФизЛицо,
	|	НеиспользованныеОтпуска.Сотрудник,
	|	СобытийныйПланЗанятостиФизЛиц.Период,
	|	СобытийныйПланЗанятостиФизЛиц.ДатаОкончания,
	|	ВЫБОР КОГДА НеиспользованныеОтпуска.Результат < 0 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ,
	|	НеиспользованныеОтпуска.РабочийГодС,	
	|	НеиспользованныеОтпуска.ВидТрудовогоОтпуска.ОчередностьПредоставленияОтпуска
	|
	|ИТОГИ 
	|	МИНИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания)
	|ПО
	|	ОБЩИЕ
	|";
			                 
	Запрос.Текст = ОтпускаТекст;
	
	ВыборкаОбщие = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщие.Следующий() Тогда
		// кэшируем производственный календарь
		Запрос.УстановитьПараметр("ДатаНач", ВыборкаОбщие.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКон", ВыборкаОбщие.ДатаОкончания);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РеглПроизводственныйКалендарь.ДатаКалендаря,
		|	РеглПроизводственныйКалендарь.КалендарныеДни
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РеглПроизводственныйКалендарь
		|ГДЕ
		|	РеглПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеглПроизводственныйКалендарь.ДатаКалендаря
		|";
		
		ТаблицаКалендаря = Запрос.Выполнить().Выгрузить();
		
		// таблица уже учтенных дней отпуска - чтобы в цикле отслеживать сколько дней от какого вида отпуска за какой раб. год уже учтено
		ТаблицаУчтено = Новый ТаблицаЗначений;
		ТаблицаУчтено.Колонки.Добавить("ВидТрудовогоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыТрудовыхОтпусков"));
		ТаблицаУчтено.Колонки.Добавить("РабочийГодС", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаУчтено.Колонки.Добавить("УчтеноДней", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0));
		
		Выборка = ВыборкаОбщие.Выбрать();
		ТекущееФизЛицо = Неопределено;
		ТекущийСотурдник = Неопределено;
		ТекущаяДатаНачала = Неопределено;
		ТекущаяДатаОкончания = '00010101';
		ТекущаяДата = Неопределено;
		ОбщееЧислоДней = 0;
		ПредоставлятьОтпуск = Истина;
		ПоследняяДатаОкончания = '00010101';
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ФизЛицо <> ТекущееФизЛицо
					ИЛИ Выборка.Сотрудник <> ТекущийСотурдник
					ИЛИ Выборка.ДатаНачала <> ТекущаяДатаНачала Тогда
					
				// очистим переменные состояния
				ТекущаяДата = Выборка.ДатаНачала;
				
				Если Выборка.ФизЛицо <> ТекущееФизЛицо
						ИЛИ Выборка.Сотрудник <> ТекущийСотурдник Тогда
					// таблицу уже учтенных дней имеющего отпуска чистим только когда меняется работник
					ТаблицаУчтено.Очистить();
					ОбщееЧислоДней = 0;
					
					Если ПоследняяДатаОкончания <> ТекущаяДатаОкончания И ТекущееФизЛицо <> Неопределено Тогда
						Если НачалоДня(ПоследняяДатаОкончания) <> НачалоДня(ТекущаяДатаОкончания) Тогда
							Сообщить(ТекущееФизЛицо.Наименование + " не имеет неиспользованных дней отпуска для предоставления до " + Формат(ТекущаяДатаОкончания, "ДФ=dd.MM.yyyy"));
						КонецЕсли;
					КонецЕсли;
					
					ПоследняяДатаОкончания = '00010101';
				КонецЕсли;
				
				ТекущееФизЛицо 		 = Выборка.ФизЛицо;
				ТекущийСотурдник 	 = Выборка.Сотрудник;
				ТекущаяДатаНачала 	 = Выборка.ДатаНачала;
				ТекущаяДатаОкончания = Выборка.ДатаОкончания;
				ТекущаяДата 		 = Выборка.ДатаНачала;
				ПредоставлятьОтпуск  = Истина;
				
				СтрокаКалендаря = ТаблицаКалендаря.Найти(ТекущаяДата, "ДатаКалендаря");
				
				Если СтрокаКалендаря <> Неопределено Тогда
					ИндКалендаря = ТаблицаКалендаря.Индекс(СтрокаКалендаря);
				Иначе
					Сообщить("Не заполнен регламентированный производственный календарь за " + Формат(ТекущаяДата, "ДФ=гггг"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПредоставлятьОтпуск Тогда
				Продолжить;
			КонецЕсли;
			
			// Определим, сколько дней можем предоставить по данному виду отпуска.
			// Из-за того, что у одного работника может быть несколько отдельных интервалов отпуска в году,
			// но т.к. запрос выполняется еще без учета этих интервалов, то для каждого из них он
			// будет возвращать в том числе и те виды отпуска, которые уже вошли в предыдущие интервалы
			// на более ранних шагах цикла обхода результата выборки, поэтому здесь ведем расчет отпусков 
			// с учетом данных, обработанных на предыдущих шагах цикла.
			УчтеноДней = Выборка.ЧислоДней;
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ВидТрудовогоОтпуска", Выборка.ВидТрудовогоОтпуска);
			СтруктураПоиска.Вставить("РабочийГодС", НачалоДня(Выборка.РабочийГодС));
			
			НайденныеСтроки = ТаблицаУчтено.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				УчтеноДней = УчтеноДней - НайденныеСтроки[0].УчтеноДней;
			КонецЕсли;
			
			Если УчтеноДней <> 0 Тогда
				
				// определим число предоставляемых дней
				Если ОбщееЧислоДней >= 0 Тогда
					// полностью предоставляем все дни текущего вида отпуска
					ЧислоПредоставляемыхДней = УчтеноДней;
				Иначе
					// предоставляем только положительное число дней отпуска
					ЧислоПредоставляемыхДней = ОбщееЧислоДней + УчтеноДней;
				КонецЕсли;
			
				ОбщееЧислоДней = ОбщееЧислоДней + УчтеноДней;
				Если ОбщееЧислоДней > 0 И ЧислоПредоставляемыхДней > 0 Тогда
					// пошли дни реального отпуска
					ДатаНачала = ТекущаяДата;
					ПрошлоДней = 0;
					Пока ТекущаяДата <= Выборка.ДатаОкончания
							И ПрошлоДней < ЧислоПредоставляемыхДней Цикл
						
						Если ИндКалендаря < ТаблицаКалендаря.Количество() Тогда
							ПрошлоДней = ПрошлоДней + ТаблицаКалендаря[ИндКалендаря].КалендарныеДни;
							ТекущаяДата = ТекущаяДата + мДлинаСуток;
							ИндКалендаря = ИндКалендаря + 1;
						Иначе
							Сообщить("Не заполнен регламентированный производственный календарь за " + Формат(ТекущаяДата, "ДФ=гггг"));
							Возврат;
						КонецЕсли;	
						
					КонецЦикла;
					
					// добавляем строку в т.ч. РаботникиОрганизации
					НоваяСтрока = РаботникиОрганизации.Добавить();
					НоваяСтрока.ФизЛицо = Выборка.ФизЛицо;
					НоваяСтрока.Сотрудник = Выборка.Сотрудник;
					НоваяСтрока.ВидТрудовогоОтпуска = Выборка.ВидТрудовогоОтпуска;
					НоваяСтрока.ДатаНачала = ДатаНачала;
					НоваяСтрока.ДатаОкончания = ТекущаяДата - мДлинаСуток;
					НоваяСтрока.РабочийГодС = Выборка.РабочийГодС;
					НоваяСтрока.РабочийГодПо = Выборка.РабочийГодПо;
					НоваяСтрока.ДнейОтпуска = ПрошлоДней;
					
					ПоследняяДатаОкончания = Макс(ПоследняяДатаОкончания, НоваяСтрока.ДатаОкончания);
					
					Если НачалоДня(НоваяСтрока.ДатаОкончания) = НачалоДня(Выборка.ДатаОкончания) Тогда
						// предоставили весь запланированный отпуск
						ПредоставлятьОтпуск = Ложь;
					КонецЕсли;
					
					// определим сколько реально дней использовали
					УчтеноДней = УчтеноДней + (ПрошлоДней - ЧислоПредоставляемыхДней);	
				КонецЕсли;
			КонецЕсли;
			
			// запомним, сколько дней учли
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].УчтеноДней = НайденныеСтроки[0].УчтеноДней + УчтеноДней; 
			Иначе
				НоваяСтрока = ТаблицаУчтено.Добавить();
				НоваяСтрока.ВидТрудовогоОтпуска = Выборка.ВидТрудовогоОтпуска;
				НоваяСтрока.РабочийГодС = НачалоДня(Выборка.РабочийГодС);
				НоваяСтрока.УчтеноДней = УчтеноДней;
			КонецЕсли;

		КонецЦикла;
		
		Если ПоследняяДатаОкончания <> ТекущаяДатаОкончания И ТекущееФизЛицо <> Неопределено Тогда
			Если НачалоДня(ПоследняяДатаОкончания) <> НачалоДня(ТекущаяДатаОкончания) Тогда
				Сообщить(ТекущееФизЛицо.Наименование + " не имеет неиспользованных дней отпуска для предоставления до " + Формат(ТекущаяДатаОкончания, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("ДокументСсылка.ПланированиеОтпуска") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен и Основание.Решение = Перечисления.СостоянияОбъектов.Утвержден Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация")
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СобытийныйПланЗанятостиФизлиц.Период КАК ДатаНачала,
			|	СобытийныйПланЗанятостиФизлиц.ДатаОкончания,
			|	СобытийныйПланЗанятостиФизлиц.ФизЛицо,
			|	РаботникиОрганизацииСрезПоследних.Сотрудник
			|ИЗ
			|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &ГоловнаяОрганизация 
			|						) КАК РаботникиОрганизацииСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = СобытийныйПланЗанятостиФизлиц.ФизЛицо 
			|			И (РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Владелец = &Организация)
			|			И РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ СобытийныйПланЗанятостиФизлиц.ФизЛицо ИЗ РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК СобытийныйПланЗанятостиФизлиц ГДЕ СобытийныйПланЗанятостиФизлиц.Регистратор = &Регистратор)
			|
			|ГДЕ
			|	(НЕ((РаботникиОрганизацииСрезПоследних.Сотрудник) ЕСТЬ NULL)) 
			|	И СобытийныйПланЗанятостиФизлиц.Состояние = &Состояние И
			|	СобытийныйПланЗанятостиФизлиц.Регистратор = &Регистратор";
			
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("Состояние",Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
			Запрос.УстановитьПараметр("Регистратор",Основание);
			Запрос.УстановитьПараметр("Дата",Дата);
	
			РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()	

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ИмяМакета = "Диаграмма" Тогда
		
		Если НЕ Проведен Тогда
			Предупреждение("Диаграмму графика отпусков можно распечатать только после проведения документа!");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета <> "Диаграмма" Тогда
		
		МассивВидовРуководителей = Новый Массив();
		МассивВидовРуководителей.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		МассивВидовРуководителей.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ВидЛица",		 МассивВидовРуководителей);
		Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикОтпусковОрганизации.Дата,
		|	ГрафикОтпусковОрганизации.Номер,
		|	ВЫРАЗИТЬ(ГрафикОтпусковОрганизации.Организация.НаименованиеПолное КАК СТРОКА(1000)) КАК Организация,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ВЫБОР КОГДА Работники.ГодГрафика1=Работники.ГодГрафика2 ТОГДА Работники.ГодГрафика1 ИНАЧЕ 0 КОНЕЦ КАК ГодГрафика
		|ИЗ
		|	Документ.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Ссылка,МИНИМУМ(ГОД(ДатаНачала)) КАК ГодГрафика1,
		|						МАКСИМУМ(ГОД(ДатаОкончания)) КАК ГодГрафика2
		|		 ИЗ Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации 
		|				ГДЕ Ссылка=&ТекущийДокумент СГРУППИРОВАТЬ ПО Ссылка) КАК Работники
		|	ПО ГрафикОтпусковОрганизации.Ссылка = Работники.Ссылка 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо В (&ВидЛица)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ГрафикОтпусковОрганизации.Организация = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|
		|ГДЕ
		|	ГрафикОтпусковОрганизации.Ссылка = &ТекущийДокумент";

		РезультатДляШапкиИПодвала = Запрос.Выполнить();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("ВидЛица",		 Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикОтпусковОрганизацииРаботники.НомерСтроки,
		|	ВЫБОР КОГДА (ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество) ЕСТЬ NULL  ТОГДА ГрафикОтпусковОрганизацииРаботники.ФизЛицо.Наименование ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество КОНЕЦ КАК Работник,
		|	РаботникиОрганизацииСрезПоследних.Сотрудник.Код КАК ТабельныйНомер,
		|	ГрафикОтпусковОрганизацииРаботники.ВидТрудовогоОтпуска.Наименование КАК ВидТрудовогоОтпуска,
		|	ГрафикОтпусковОрганизацииРаботники.ДатаНачала,
		|	ГрафикОтпусковОрганизацииРаботники.РабочийГодС,
		|	ГрафикОтпусковОрганизацииРаботники.РабочийГодПо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Представление КАК ДолжностьРуководителя,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КОНЕЦ КАК ФИОРуководителя,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизацииСрезПоследних.Должность КАК Должность,
		|	РаботникиОрганизацииСрезПоследних.ТарифныйРазряд КАК ТарифныйРазряд,
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование,
		|	РаботникиОрганизацииСрезПоследних.Должность.Наименование,
		|	РаботникиОрганизацииСрезПоследних.ТарифныйРазряд.Наименование,
		|	ГрафикОтпусковОрганизацииРаботники.ДатаОкончания,
		|	ГрафикОтпусковОрганизацииРаботники.ДнейОтпуска КАК Продолжительность
		|ИЗ
		|	Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ГрафикОтпусковОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, Физлицо В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	ГрафикОтпусковОрганизацииРаботникиОрганизации.ФизЛицо ИЗ Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ГрафикОтпусковОрганизацииРаботникиОрганизации ГДЕ 	ГрафикОтпусковОрганизацииРаботникиОрганизации.Ссылка = &ТекущийДокумент )) КАК ФИОФизЛиц
		|		ПО ГрафикОтпусковОрганизацииРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента,  Организация = &ГоловнаяОрганизация И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ ГрафикОтпусковОрганизацииРаботникиОрганизации.Сотрудник ИЗ Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ГрафикОтпусковОрганизацииРаботникиОрганизации ГДЕ ГрафикОтпусковОрганизацииРаботникиОрганизации.Ссылка = &ТекущийДокумент)) КАК РаботникиОрганизацииСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаДокумента, ОтветственноеЛицо = &ВидЛица) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаДокумента, ) КАК ФИОФизЛицСрезПоследних
		|				ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|			ПО РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|		ПО ГрафикОтпусковОрганизацииРаботники.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
		|
		|ГДЕ
		|	ГрафикОтпусковОрганизацииРаботники.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодразделениеОрганизации ИЕРАРХИЯ,
		|	Должность,
		|	ТарифныйРазряд,
		|	Работник,
		|	ДатаНачала";
                                                     
		РезультатРаботникиОрганизации = Запрос.Выполнить();

		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланированиеОтпускаОрганизации_Т7";
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
        ТабДокумент.ПолеСлева = 0;
		ТабДокумент.ПолеСправа = 0;
		
		// Шапка документа.
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		// повторяющаяся шапка страницы
		ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати");
        // Начало подвала документа
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ВыборкаДляШапкиИПодвала = РезультатДляШапкиИПодвала.Выбрать();
		Если ВыборкаДляШапкиИПодвала.Следующий() Тогда // выводим данные о руководителях организации
			 
			ОбластьМакета.Параметры.НазваниеОрганизации = СокрЛП(ВыборкаДляШапкиИПодвала.Организация);
			ОбластьМакета.Параметры.НомерДок 			= ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
			ОбластьМакета.Параметры.ДатаДок 			= ВыборкаДляШапкиИПодвала.Дата;
			ОбластьМакета.Параметры.Год		 			= Формат(ВыборкаДляШапкиИПодвала.ГодГрафика,"ЧГ=0");

			ВыборкаДляШапкиИПодвала = РезультатДляШапкиИПодвала.Выбрать();
			Если ВыборкаДляШапкиИПодвала.НайтиСледующий(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель,"ОтветственноеЛицо") Тогда
				ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапкиИПодвала);
			КонецЕсли;

			// Для подвала
			ВыборкаДляШапкиИПодвала = РезультатДляШапкиИПодвала.Выбрать();
			Если ВыборкаДляШапкиИПодвала.НайтиСледующий(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы,"ОтветственноеЛицо") Тогда
				ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала);
			КонецЕсли;

		КонецЕсли;

		ВыборкаРаботники = РезультатРаботникиОрганизации.Выбрать();
		// добавляем подписи руководителей подразделений
		ШапкаРуководителейПодразделений = Макет.ПолучитьОбласть("ШапкаРуководителейПодразделений");
		ОбластьМакетаПодвал.Вывести(ШапкаРуководителейПодразделений);
		
		ПодписьРуководителяПодразделения = Макет.ПолучитьОбласть("РуководительПодразделения");
		Пока ВыборкаРаботники.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
			ПодписьРуководителяПодразделения.Параметры.Заполнить(ВыборкаРаботники);
			ОбластьМакетаПодвал.Вывести(ПодписьРуководителяПодразделения);
		КонецЦикла;

		// Начинаем формировать выходной документ (шапка дока)
		ТабДокумент.Вывести(ОбластьМакета);

		ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник");

		// массив с двумя строками - для разбиения на страницы
	    ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		ВыведеноСтрок = 0;
		// выводим строки по работникам
		ВыборкаРаботники = РезультатРаботникиОрганизации.Выбрать();
		Пока ВыборкаРаботники.Следующий() Цикл

			// Данные по работнику.
			ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
			Если ЗначениеЗаполнено(ВыборкаРаботники.ТарифныйРазряд) Тогда
				ОбластьМакета.Параметры.ДолжностьНаименование = "" + ВыборкаРаботники.ДолжностьНаименование + ", " + ВыборкаРаботники.ТарифныйРазряд;
			КонецЕсли;

			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;

		// если не было ни одного работника - выводим пустой бланк
		Если ВыведеноСтрок = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

	ИначеЕсли ИмяМакета = "Диаграмма" тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ПланированиеОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ПланированиеОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ПланированиеОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ПланированиеОтпускаОрганизацииРаботники.Ссылка = &Ссылка");

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();	 
		
		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.Отпуска.Создать();
			Форма = Отчет.ПолучитьФорму();
			ЗначениеНастройкиПользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(Отчет, Форма);
			ЗначениеНастройкиПользователя.ВыводитьДиаграммуГанта = Истина;
			ЗначениеНастройкиПользователя.ВыводитьЗаголовокОтчета = Истина;
			Отчет.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПользователя);
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НачалоПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаНач),НачалоГода(РабочаяДата),НачалоМесяца(Выборка.ДатаНач)));
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "КонецПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаКон),КонецГода(РабочаяДата),КонецМесяца(Выборка.ДатаКон)));
			ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Регистратор", Ссылка);
			ТабДокумент = Новый ТабличныйДокумент;
			Отчет.СформироватьОтчет(ТабДокумент);
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (диаграмма)"));
		Иначе
            Предупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ГрафикОтпусков, Диаграмма", "График отпусков", "Диаграмма");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());

	Запрос.Текст = "
	|Выбрать РАЗРЕШЕННЫЕ
	|	Дата, 
	|	Организация,
	|	ВЫБОР КОГДА Организация.ГоловнаяОрганизация = &ПустаяОрганизация ТОГДА Организация ИНАЧЕ Организация.ГоловнаяОрганизация КОНЕЦ КАК ГоловнаяОрганизация,	
	| 	Ссылка 
	|Из 
	|	Документ." + Метаданные().Имя + "
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Прием",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');

	// Описание текста запроса:
	// 1. Выборка "ПерваяТаблица": 
	//		Представляет собой вложенный запрос, в котором:  
	//         - в выборке "РаботникиДокумента" выбираются строки документа
	//         - из основной таблицы регистра (выборка "ГрафикОтпусковОрганизации") 
	//           присоединяются даты движений, непосредственно предшествующих
	//           датам ДатаОкончания из строк документа
	// 2. Выборка "ГрафикОтпусковОрганизации": 
	//		Из основной таблицы регистра выбираются значения ресурсов на полученные  
	//      в первой выборке даты
	// 3. Выборка "ВтораяТаблица": 
	//		Среди строк документа ищем строки с пересекающимися периодами отпусков 
	//      для одного работника
	//
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
				   |	ПерваяТаблица.Сотрудник,
	               |	ПерваяТаблица.ДатаНачала,
	               |	ПерваяТаблица.ДатаОкончания,
	               |	ПерваяТаблица.ВидТрудовогоОтпуска,
	               |	ПерваяТаблица.РабочийГодС,
	               |	ПерваяТаблица.РабочийГодПо,
	               |	ПерваяТаблица.ДнейОтпуска,
	               |	ВЫБОР 
	               |		КОГДА ГрафикОтпусковОрганизации.Состояние = &Отпуск 
	               |				ИЛИ ПерваяТаблица.ДатаЗначения >= ПерваяТаблица.ДатаНачала 
	               |			ТОГДА ""Нельзя"" 
	               |		ИНАЧЕ ""Можно"" 
	               |	КОНЕЦ КАК ПроверяемоеЗначение,
	               |	ВЫБОР
	               |		КОГДА ПерваяТаблица.РабочийГодС = &ПустаяДата
	               |				ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПерваяТаблица.РабочийГодС, ГОД), МЕСЯЦ, МЕСЯЦ(ПоследниеДатыПриемов.ДатаПриема)-1), ДЕНЬ, ДЕНЬ(ПоследниеДатыПриемов.ДатаПриема)-1) = ПерваяТаблица.РабочийГодС
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОшибкаВРабочемГодеС,
	               |	ВЫБОР
	               |		КОГДА (ПерваяТаблица.РабочийГодПо = &ПустаяДата И ПерваяТаблица.РабочийГодС = &ПустаяДата)
	               |				ИЛИ " + ПроцедурыУправленияПерсоналом.СформироватьТекстЗапросаКонецРабочегоГода("ПерваяТаблица.РабочийГодС") + " = ПерваяТаблица.РабочийГодПо
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОшибкаВРабочемГодеПо,
	               |	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК КонфликтнаяСтрока
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		МАКСИМУМ(ГрафикОтпусковОрганизации.Период) КАК ДатаЗначения,
				   |		РаботникиДокумента.Сотрудник КАК Сотрудник,
	               |		РаботникиДокумента.ДатаОкончания КАК ДатаОкончания,
	               |		РаботникиДокумента.ДатаНачала КАК ДатаНачала,
	               |		РаботникиДокумента.ВидТрудовогоОтпуска КАК ВидТрудовогоОтпуска,
	               |		РаботникиДокумента.РабочийГодС КАК РабочийГодС,
	               |		РаботникиДокумента.РабочийГодПо КАК РабочийГодПо,
	               |		РаботникиДокумента.Ссылка КАК Ссылка,
	               |		РаботникиДокумента.НомерСтроки КАК НомерСтроки,
	               |		РаботникиДокумента.ДнейОтпуска КАК ДнейОтпуска
	               |	ИЗ
	               |		Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК РаботникиДокумента
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	               |			ПО ГрафикОтпусковОрганизации.Сотрудник = РаботникиДокумента.Сотрудник 
	               |				И (ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация) 
	               |				И РаботникиДокумента.ДатаОкончания > ГрафикОтпусковОрганизации.Период
	               |	
	               |	ГДЕ
	               |		РаботникиДокумента.Ссылка = &ДокументСсылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
				   |		РаботникиДокумента.Сотрудник,
	               |		РаботникиДокумента.ДатаОкончания,
	               |		РаботникиДокумента.ДатаНачала,
	               |		РаботникиДокумента.ВидТрудовогоОтпуска,
	               |		РаботникиДокумента.РабочийГодС,
	               |		РаботникиДокумента.РабочийГодПо,
	               |		РаботникиДокумента.Ссылка,
	               |		РаботникиДокумента.НомерСтроки,
	               |		РаботникиДокумента.ДнейОтпуска) КАК ПерваяТаблица
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	               |		ПО ПерваяТаблица.Сотрудник = ГрафикОтпусковОрганизации.Сотрудник 
				   |			И ПерваяТаблица.ДатаЗначения = ГрафикОтпусковОрганизации.Период
	               |			И (ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация) 
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ВтораяТаблица
	               |		ПО ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка 
				   |			И ПерваяТаблица.Сотрудник = ВтораяТаблица.Сотрудник 
	               |			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки 
	               |			И (ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаНачала 
	               |				И ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаОкончания 
	               |					ИЛИ ПерваяТаблица.ДатаНачала <= ВтораяТаблица.ДатаОкончания 
	               |				И ВтораяТаблица.ДатаОкончания <= ПерваяТаблица.ДатаОкончания 
	               |					ИЛИ ВтораяТаблица.ДатаНачала <= ПерваяТаблица.ДатаНачала 
	               |				И ПерваяТаблица.ДатаОкончания <= ВтораяТаблица.ДатаОкончания)
	               |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |								ТЧРаботникиОрганизации.НомерСтроки,	
	               |								МАКСИМУМ(РаботникиОрганизации.Период) КАК ДатаПриема
	               |							ИЗ
	               |								Документ.ГрафикОтпусковОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	               |								ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	               |									ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
	               |										И РаботникиОрганизации.Период <= ТЧРаботникиОрганизации.ДатаНачала
	               |										И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	               |										И РаботникиОрганизации.ПричинаИзмененияСостояния = &Прием
	               |							ГДЕ
	               |								ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	               |							СГРУППИРОВАТЬ ПО
	               |								ТЧРаботникиОрганизации.НомерСтроки) КАК ПоследниеДатыПриемов
	               |		ПО ПерваяТаблица.НомерСтроки = ПоследниеДатыПриемов.НомерСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПерваяТаблица.НомерСтроки,
	               |	ГрафикОтпусковОрганизации.Состояние,
				   |	ПерваяТаблица.Сотрудник,
	               |	ПерваяТаблица.ДатаЗначения,
	               |	ПерваяТаблица.ДатаНачала,
	               |	ПерваяТаблица.ДатаОкончания,
	               |	ПерваяТаблица.ВидТрудовогоОтпуска,
	               |	ПерваяТаблица.РабочийГодС,
	               |	ПерваяТаблица.РабочийГодПо,
	               |	ПерваяТаблица.ДнейОтпуска,
	               |	ПоследниеДатыПриемов.ДатаПриема
	               |";
		
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, для которой составляется график отпусков!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
										""" табл. части ""Сотрудники организации"": ";

		// Сотрудник
		ЕстьСотрудник = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НЕ ЕстьСотрудник Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ВидТрудовогоОтпуска
		Если (НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидТрудовогоОтпуска) И ВыборкаПоСтрокамДокумента.РабочийГодС <> '00010101')
				ИЛИ (ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидТрудовогоОтпуска) И ВыборкаПоСтрокамДокумента.РабочийГодС = '00010101') Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "для планирования по видам трудовых отпусков необходимо указание рабочего года, за который планируется предоставить отпуск!", Отказ, Заголовок);
		КонецЕсли;

		// РабочийГодС
		Если ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеС Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала рабочего года не соответствует дате приема!", Отказ, Заголовок);
		КонецЕсли;

		// РабочийГодПо
		Если ВыборкаПоСтрокамДокумента.ОшибкаВРабочемГодеПо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания рабочего года не соответствует дате приема!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
        ЕстьДатаС = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НЕ ЕстьДатаС Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаОкончания
        ЕстьДатаПо = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания);
		Если НЕ ЕстьДатаПо Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания отпуска!", Отказ, Заголовок);
		КонецЕсли;
		
		Если ЕстьСотрудник И ЕстьДатаС И ЕстьДатаПо Тогда
			
			Если ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.ПроверяемоеЗначение = "Нельзя" Тогда
				СтрокаПродолжениеСообщенияОбОшибке = " на указанный период ранее уже был запланирован другой отпуск!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> Null Тогда
				СтрокаПродолжениеСообщенияОбОшибке = " в строке №" + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указан пересекающийся период отпуска!";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                                           по которым надо проводить документ
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	
	СтруктураПроведенияПоРегистрамСведений.Вставить("ГрафикОтпусковОрганизаций");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации,  
	
	СтруктураПроведенияПоРегистрамСведений, СтруктураПараметров = "", УчетнаяПолитикаПоПерсоналуОрганизации)

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
    ИмяРегистра = "ГрафикОтпусковОрганизаций";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

		// отразим начало
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаНачала;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидТрудовогоОтпуска		= ВыборкаПоРаботникиОрганизации.ВидТрудовогоОтпуска;

		// Ресурсы
		Движение.Состояние					= Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный;
		
		// Реквизиты
		Движение.ДатаОкончания				= КонецДня(ВыборкаПоРаботникиОрганизации.ДатаОкончания);
		Движение.РабочийГодС				= ВыборкаПоРаботникиОрганизации.РабочийГодС;
		Движение.РабочийГодПо				= ВыборкаПоРаботникиОрганизации.РабочийГодПо;
		Движение.ДнейОтпуска				= ВыборкаПоРаботникиОрганизации.ДнейОтпуска;

		// и окончание отпуска
		Движение = Движения[ИмяРегистра].Добавить();

		// Свойства
		Движение.Период                     = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток - 1;

		// Измерения
		Движение.Сотрудник                  = ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидТрудовогоОтпуска		= ВыборкаПоРаботникиОрганизации.ВидТрудовогоОтпуска;

		// Ресурсы
		Движение.Состояние					= Перечисления.ТипыПериодическихЗадачРаботника.Свободен;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
    	    ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоРаботники.Выбрать();

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПроведенияПоРегистрамСведений, , УчетнаяПолитикаПоПерсоналуОрганизации);
 				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

мДлинаСуток = 86400;
