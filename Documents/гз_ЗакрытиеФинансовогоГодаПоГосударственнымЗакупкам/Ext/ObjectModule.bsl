////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("Год, Организация");
		
		Если Год(СтруктураШапкиДокумента.Год) >= Год(СтруктураШапкиДокумента.Дата) Тогда
			Отказ = Истина;
			Сообщить("Закрываемый год должен предшествовать году даты документа!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;

		
		// Теперь позовем общую процедуру проверки.
		гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок.Регистратор
		               |Из
		               |	РегистрСведений.гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок КАК гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок
		               |ГДЕ
		               |	гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок.Год = &Год
		               |	И гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок.Организация = &Организация
		               |	И гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок.Регистратор <> &Регистратор";
		Запрос.УстановитьПараметр("Регистратор",СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("Год", 		СтруктураШапкиДокумента.Год);
		Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Сообщить("По организации "+СтруктураШапкиДокумента.Организация+" год планирования государственных закупок "+СтруктураШапкиДокумента.Год+"
						|		уже закрыт документом "+Выборка.Регистратор,СтатусСообщения.ОченьВажное);
		КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
		НаборДвижений   = Движения.гз_ЗакрытыеПериодыПоГодовымПланамГосЗакупок;
	
		Движение = НаборДвижений.Добавить();
		Движение.Организация 	= СтруктураШапкиДокумента.Организация;
		Движение.Год 			= СтруктураШапкиДокумента.Год;
	    Движение.Период			= СтруктураШапкиДокумента.Дата;
		
		НаборДвижений.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.Организация,
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.Год,
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.Номенклатура,
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.СпособЗакупки,
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.КоличествоОстаток КАК Количество,
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.СуммаОстаток КАК Сумма
		             |ИЗ
		             |	РегистрНакопления.гз_ДвижениеНоменклатурыПоГодовомуПлану.Остатки(
		             |			,
		             |			Год = &Год
		             |				И Организация = &Организация) КАК гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки
		             |ГДЕ
		             |	гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.КоличествоОстаток <> 0
		             |	ИЛИ гз_ДвижениеНоменклатурыПоГодовомуПлануОстатки.СуммаОстаток <> 0";
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Год",			СтруктураШапкиДокумента.Год );
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаВыравнивания = РезультатЗапроса.Выгрузить();
			ТаблицаВыравнивания.Колонки.Добавить("Активность");
			ТаблицаВыравнивания.Колонки.Добавить("ВидДвижения");
			ТаблицаВыравнивания.Колонки.Добавить("Регистратор");
			ТаблицаВыравнивания.Колонки.Добавить("Период");
			ТаблицаВыравнивания.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаВыравнивания.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,		"ВидДвижения");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"Регистратор");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		"Период");
			Для Каждого СтрокаТЗ Из ТаблицаВыравнивания Цикл
				СтрокаТЗ.Сумма 		= - СтрокаТЗ.Сумма;
				СтрокаТЗ.Количество = - СтрокаТЗ.Количество;
			КонецЦикла;
			Движения.гз_ДвижениеНоменклатурыПоГодовомуПлану.Загрузить(ТаблицаВыравнивания);
		КонецЕсли;
		
		Запрос=новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Организация,
		             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.ДокументЗаявка,
		             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.Номенклатура,
		             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток КАК Количество
		             |ИЗ
		             |	РегистрНакопления.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Остатки(
		             |			,
		             |			ДокументЗаявка.Год = &Год
		             |				И Организация = &Организация) КАК гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки
		             |ГДЕ
		             |	гз_СостояниеКонкурсовПоГосударственнымЗакупкамОстатки.КоличествоОстаток <> 0";
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Год",			СтруктураШапкиДокумента.Год );
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаВыравнивания = РезультатЗапроса.Выгрузить();
			ТаблицаВыравнивания.Колонки.Добавить("Активность");
			ТаблицаВыравнивания.Колонки.Добавить("ВидДвижения");
			ТаблицаВыравнивания.Колонки.Добавить("Регистратор");
			ТаблицаВыравнивания.Колонки.Добавить("Период");
			ТаблицаВыравнивания.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаВыравнивания.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,		"ВидДвижения");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"Регистратор");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		"Период");
			Для Каждого СтрокаТЗ Из ТаблицаВыравнивания Цикл
				СтрокаТЗ.Количество = - СтрокаТЗ.Количество;
			КонецЦикла;
			Движения.гз_СостояниеКонкурсовПоГосударственнымЗакупкам.Загрузить(ТаблицаВыравнивания);
		КонецЕсли;
		
		Запрос=новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.Организация,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.Год,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.Номенклатура,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.Склад,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.ДоговорКонтрагента,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.КоличествоОстаток КАК Количество,
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.СуммаОстаток КАК Сумма
		             |ИЗ
		             |	РегистрНакопления.гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставки.Остатки(
		             |			,
		             |			Год = &Год
		             |				И Организация = &Организация) КАК гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки
		             |ГДЕ
		             |	гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.КоличествоОстаток <> 0
		             |	ИЛИ гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставкиОстатки.СуммаОстаток <> 0";
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Год",			СтруктураШапкиДокумента.Год );
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаВыравнивания = РезультатЗапроса.Выгрузить();
			ТаблицаВыравнивания.Колонки.Добавить("Активность");
			ТаблицаВыравнивания.Колонки.Добавить("ВидДвижения");
			ТаблицаВыравнивания.Колонки.Добавить("Регистратор");
			ТаблицаВыравнивания.Колонки.Добавить("Период");
			ТаблицаВыравнивания.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаВыравнивания.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,		"ВидДвижения");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"Регистратор");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		"Период");
			Для Каждого СтрокаТЗ Из ТаблицаВыравнивания Цикл
				СтрокаТЗ.Сумма 		= - СтрокаТЗ.Сумма;
				СтрокаТЗ.Количество = - СтрокаТЗ.Количество;
			КонецЦикла;
			Движения.гз_ДвижениеНоменклатурыПоДоговорамПоМестамПоставки.Загрузить(ТаблицаВыравнивания);
		КонецЕсли;
		
		Запрос=новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_РезервированиеПозицийГодовогоПланаОстатки.Организация,
		             |	гз_РезервированиеПозицийГодовогоПланаОстатки.Заказ,
		             |	гз_РезервированиеПозицийГодовогоПланаОстатки.Номенклатура,
		             |	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток КАК Количество
		             |ИЗ
		             |	РегистрНакопления.гз_РезервированиеПозицийГодовогоПлана.Остатки(
		             |			,
		             |			Заказ.Год = &Год
		             |				И Организация = &Организация) КАК гз_РезервированиеПозицийГодовогоПланаОстатки
		             |ГДЕ
		             |	гз_РезервированиеПозицийГодовогоПланаОстатки.КоличествоОстаток <> 0";
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Год",			СтруктураШапкиДокумента.Год );
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаВыравнивания = РезультатЗапроса.Выгрузить();
			ТаблицаВыравнивания.Колонки.Добавить("Активность");
			ТаблицаВыравнивания.Колонки.Добавить("ВидДвижения");
			ТаблицаВыравнивания.Колонки.Добавить("Регистратор");
			ТаблицаВыравнивания.Колонки.Добавить("Период");
			ТаблицаВыравнивания.ЗаполнитьЗначения(Истина,"Активность");
			ТаблицаВыравнивания.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,		"ВидДвижения");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"Регистратор");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		"Период");
			Для Каждого СтрокаТЗ Из ТаблицаВыравнивания Цикл
				СтрокаТЗ.Количество = - СтрокаТЗ.Количество;
			КонецЦикла;
			Движения.гз_РезервированиеПозицийГодовогоПлана.Загрузить(ТаблицаВыравнивания);
		КонецЕсли;
		
		Запрос=новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Период,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Регистратор,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.НомерСтроки,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Активность,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Заявка,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Организация,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Подразделение,
		             |	гз_СостоянияТекущихЗаявокСрезПоследних.Состояние
		             |ИЗ
		             |	РегистрСведений.гз_СостоянияТекущихЗаявок.СрезПоследних(
		             |			,
		             |			Заявка.Год = &Год
		             |				И Организация = &Организация
		             |				И Состояние.Ссылка <> &Выполнен) КАК гз_СостоянияТекущихЗаявокСрезПоследних";
		Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Год",			СтруктураШапкиДокумента.Год );
		Запрос.УстановитьПараметр("Выполнен",		Перечисления.гз_СостоянияЗаказа.Выполнена);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаВыравнивания = РезультатЗапроса.Выгрузить();
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,	"Регистратор");
			ТаблицаВыравнивания.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,		"Период");
			Для Каждого СтрокаТЗ Из ТаблицаВыравнивания Цикл
				СтрокаТЗ.Состояние = Перечисления.гз_СостоянияЗаказа.Выполнена;
			КонецЦикла;
			Движения.гз_СостоянияТекущихЗаявок.Загрузить(ТаблицаВыравнивания);
		КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаУдаленияПроведения" объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ПередЗаписью" объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(ЭтотОбъект));

КонецПроцедуры //ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения" объекта.
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()
