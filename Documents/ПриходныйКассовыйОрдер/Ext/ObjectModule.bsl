////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;
Перем мОтображатьСтруктурныеПодразделенияВЗарплате Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов = Новый Структура("Дебет,Кредит");
	СчетДт = СчетКасса;
	
	// Определяем код счета дебета
	КассаВВалюте = Ложь;
	ВалютаРег    = мВалютаРегламентированногоУчета;
	Если СчетДт.Валютный Тогда
		КассаВВалюте = Истина;
	КонецЕсли; 		
	КодыСчетов.Дебет = СчетДт;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда		
		СтрокаКредит = СчетУчетаРасчетовСКонтрагентомБУ.Код;		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		СтрокаКредит = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.Код;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтрокаКредит = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам.Код;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда	
		СтрокаКредит = СчетУчетаРасчетовСКонтрагентомБУ.Код;		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда	//	
		СтрокаКредит = СчетУчетаРасчетовСКонтрагентомБУ.Код;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда		
		ТабСчет = РасшифровкаПлатежа.Выгрузить();                        		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентомБУ,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");		
		
		СтрокаКредит = "";		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентомБУ.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код) = 0 Тогда
				СтрокаКредит = СтрокаКредит+", " + Строка.СчетУчетаРасчетовСКонтрагентомБУ.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовПоАвансам.Код) = 0 Тогда
				СтрокаКредит = СтрокаКредит + ", " + Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;		
		СтрокаКредит = Сред(СтрокаКредит,2);		
	КонецЕсли;	
	
	КодыСчетов.Кредит = СтрокаКредит;
	
	Возврат КодыСчетов;
	
КонецФункции // ОпределитьКодыСчетСубсчет()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПКО(ИмяМакета = "ПКО")

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент"	  , ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза"		  , Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Касса);

	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ПриходныйКассовыйОрдер.Номер,
	              |	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
	              |	ПриходныйКассовыйОрдер.Организация КАК Орган,
	              |	ПриходныйКассовыйОрдер.Организация,
				  |	ПриходныйКассовыйОрдер.СтруктурноеПодразделениеПолучатель Как СтруктурноеПодразделение,
				  |	ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель Как СтруктурноеПодразделениеОтправитель,
	              |	ПриходныйКассовыйОрдер.Организация КАК Руководители,
	              |	ПриходныйКассовыйОрдер.Контрагент,
	              |	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.ПринятоОт КАК СТРОКА(1000)) КАК ПринятоОт,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.Основание КАК СТРОКА(1000)) КАК Основание,
	              |	ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.Приложение КАК СТРОКА(1000)) КАК Приложение,
	              |	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента,
	              |	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
	              |	ПриходныйКассовыйОрдер.СтавкаНДС,
	              |	ВЫБОР
	              |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	              |			ТОГДА ОтветственныеЛица.ФизическоеЛицо.Наименование
	              |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	              |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	              |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	              |				ИНАЧЕ """"
	              |			КОНЕЦ + ВЫБОР
	              |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	              |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	              |				ИНАЧЕ """"
	              |			КОНЕЦ
	              |	КОНЕЦ КАК Кассир,
	              |	ЕстьNull(ТаблицаРасшифровкиПлатежа.СуммаНДС,0) как СуммаНДС
	              |ИЗ
	              |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	              |		ПО ОтветственныеЛица.СтруктурнаяЕдиница = ПриходныйКассовыйОрдер.Касса
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
	              |		ПО ОтветственныеЛица.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо,
	              |	(ВЫБРАТЬ
	              |		СУММА(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС
	              |	ИЗ
	              |		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	              |	ГДЕ
	              |		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ТекущийДокумент) КАК ТаблицаРасшифровкиПлатежа
	              |ГДЕ
	              |	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);

	Макет       					= ПолучитьМакет("КО1");
	ТабДокумент 					= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Валютный = (НЕ Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета);

	// Выводим шапку ПКО

	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.ДатаДокумента);
    ТекстРНН_БИН 		  = "";
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");

	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	ОбластьМакета.Параметры.Сумма = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2");
	
	СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);	
	Если ИмяМакета = "ПКОНДС" Тогда
		СуммаПрописью = СуммаПрописью + " В т.ч. НДС " + Формат(Шапка.СуммаНДС,"ЧЦ=15; ЧДЦ=2") + ".";
	КонецЕсли;
		
	ОбластьМакета.Параметры.СуммаПрописью      = СуммаПрописью;
	
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Шапка.ДатаДокумента, "ru");
	ОбластьМакета.Параметры.ДатаДокумента      = Формат(Шапка.ДатаДокумента, "ДФ = 'дд.ММ.гггг'")+" года";
	ОбластьМакета.Параметры.НомерДокумента     = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);

	КодыСчетСубсчет = ОпределитьКодыСчетСубсчет();

	ОбластьМакета.Параметры.КодДебета = КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет   = КодыСчетСубсчет.Кредит;

	Руководители = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, КонецДня(Шапка.ДатаДокумента),);
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;
    	
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ?(НЕ ЗначениеЗаполнено(Бухгалтер), "Не предусмотрен", Бухгалтер);
	ОбластьМакета.Параметры.ФИОКассира            = Шапка.Кассир;

	ТекстПринятоОт = Шапка.ПринятоОт;

	Если НЕ ЗначениеЗаполнено(ТекстПринятоОт) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			ОрганизацияПлательщик = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделениеОтправитель);
			ТекстВыдать = ?(ЗначениеЗаполнено(ОрганизацияПлательщик), ОрганизацияПлательщик.Наименование, ОрганизацияПлательщик.НаименованиеПолное);
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Дата"   , Дата);
				Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
				Запрос.Текст = "ВЫБРАТЬ
				|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
				|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
				|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
				|	ФИОФизЛицСрезПоследних.НеСклонятьФамилию КАК неСклонятьФамилию
				|ИЗ
				|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда
					СтруктураФИО = Новый Структура;
					СтруктураФИО.Вставить("Фамилия"	, Результат.Фамилия); 
					СтруктураФИО.Вставить("Имя"		, Результат.Имя);
					СтруктураФИО.Вставить("Отчество", Результат.Отчество);
					ТекстПринятоОт = ОбщегоНазначения.ПреобразоватьФИОВРодительныйПадеж(СтруктураФИО, Результат.НеСклонятьФамилию);
				КонецЕсли;
				
			ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ТекстПринятоОт = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.ПринятоОт = ТекстПринятоОт;
	ОбластьМакета.Параметры.Основание = Основание;

	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПКО" Или ИмяМакета = "ПКОНДС" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО(ИмяМакета);
	КонецЕсли;
	               
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли
	
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО, ПКОНДС","Приходный кассовый ордер", "Приходный кассовый ордер (с НДС)");
	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);

	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = СтрокаПлатеж.СтавкаНДС.Ставка;

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

// Заполняет счета учета БУ и НУ в документе
//
Процедура ЗаполнитьСчетаУчетаРегл() Экспорт
	
	Если Не Касса.Пустая() Тогда
		СчетУчетаКассы = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(Касса, СчетКасса.Пустая()).СчетУчетаБУ;
		Если ЗначениеЗаполнено(СчетУчетаКассы) Тогда
			СчетКасса = СчетУчетаКассы;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРегл()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	
    Запрос.УстановитьПараметр("СчетРасчета",СчетУчетаРасчетовСКонтрагентомБУ);
	Запрос.УстановитьПараметр("Сотрудник",  Контрагент);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаИтогов", ТекущаяДата());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТиповойОстатки.Счет,
	|	ЕстьNull(ТиповойОстатки.СуммаОстатокДт,0) Как СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&ДатаИтогов, Счет = &СчетРасчета, ,
	|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ТиповойОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаОстаток;
		СуммаДокумента = СтрокаПлатеж.СуммаВзаиморасчетов;
						
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()
 
//Заполняет документ на основании расходного кассового ордера
//
Процедура ЗаполнитьПоРКО(ДокументОснование)
	
	СчетКасса = ДокументОснование.СчетКасса;
	
	Подразделение = ДокументОснование.Подразделение;
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = ОбщегоНазначения.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;						
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;			
			
			СтрокаПлатеж.Подразделение 	= СтрокаОснование.Подразделение;
			СтрокаПлатеж.Проект 		= СтрокаОснование.Проект;
			
		КонецЦикла;
		
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению Тогда		
		
		Запрос = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Организация
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Контрагент = &КонтрагентОрганизации");
		
		Запрос.УстановитьПараметр("КонтрагентОрганизации", ДокументОснование.Контрагент);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			#Если Клиент Тогда
			Сообщить("Нет организации, соответсвтующей контрагенту документа-основания.", СтатусСообщения.Внимание);
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		ОрганизацияДокумента = ВыборкаРезультатов.Организация;
		
		Запрос = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобственныеКонтрагенты.Контрагент
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ 
		| 	СобственныеКонтрагенты.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", ДокументОснование.Организация);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ВыборкаРезультатов = Результат.Выбрать();
			ВыборкаРезультатов.Следующий();
			КонтрагентДокумента = ВыборкаРезультатов.Контрагент;
			
		Иначе
			
			КонтрагентДокумента = Справочники.Контрагенты.ПустаяСсылка();
			#Если Клиент Тогда
			Сообщить("Нет контрагента, соответсвтующего организации документа-основания, контрагент не будет заполнен.");
			#КонецЕсли
			
		КонецЕсли;
		
		Касса = Справочники.Кассы.ПустаяСсылка();
		
		Организация = ОрганизацияДокумента;		
		
		СтрокаРасшифровкиОснования = ДокументОснование.РасшифровкаПлатежа[0];
		
		Если ЗначениеЗаполнено(КонтрагентДокумента) Тогда
			
			Контрагент = КонтрагентДокумента;
			
			ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаРасшифровкиОснования.ДоговорКонтрагента) Тогда
				ПараметрВалюта = СтрокаРасшифровкиОснования.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Иначе
				ПараметрВалюта = ДокументОснование.ВалютаДокумента
			КонецЕсли;
			
			ДоступныйОсновнойДоговорКонтрагента = ОбщегоНазначения.ДоступныйДоговорКонтрагента(Контрагент.ОсновнойДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(ДоступныйОсновнойДоговорКонтрагента) Тогда
				Если (ДоступныйОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) И
					 (ДоступныйОсновнойДоговорКонтрагента.Организация = Организация) И
					 (ДоступныйОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = ПараметрВалюта) Тогда
					ДоговорКонтрагентаДокумента = ДоступныйОсновнойДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДоговорКонтрагентаДокумента) Тогда
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
				
				Запрос.УстановитьПараметр("Владелец", Контрагент);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
				
				Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрВалюта);
				
				Результат = Запрос.Выполнить();
				
				Если Не Результат.Пустой() Тогда
					
					ВыборкаРезультатов = Результат.Выбрать();
					ВыборкаРезультатов.Следующий();
					ДоговорКонтрагента = ВыборкаРезультатов.Ссылка;
					
				Иначе
					
					#Если Клиент Тогда
					Сообщить("Нет договора с поставщиком, соответсвтующего контрагенту, организации и валюте. Будет создан новый договор.");
					#КонецЕсли
					ДоговорКонтрагентаДокумента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					ДоговорКонтрагентаДокумента.Владелец = Контрагент;
					ДоговорКонтрагентаДокумента.Наименование = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(ПараметрВалюта) + ")"; 
					ДоговорКонтрагентаДокумента.Организация = Организация;
					ДоговорКонтрагентаДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					ДоговорКонтрагентаДокумента.ВалютаВзаиморасчетов = ПараметрВалюта;
					ДоговорКонтрагентаДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					ДоговорКонтрагентаДокумента.Записать();
					
					ДоговорКонтрагента = ДоговорКонтрагентаДокумента.Ссылка;
						
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		
		
		НоваяСтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРасшифровки.СуммаПлатежа = СтрокаРасшифровкиОснования.СуммаПлатежа;
		НоваяСтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровкиОснования.СуммаВзаиморасчетов;
		НоваяСтрокаРасшифровки.КурсВзаиморасчетов = СтрокаРасшифровкиОснования.КурсВзаиморасчетов;
		НоваяСтрокаРасшифровки.КратностьВзаиморасчетов = СтрокаРасшифровкиОснования.КратностьВзаиморасчетов;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			НоваяСтрокаРасшифровки.ДоговорКонтрагента = ДоговорКонтрагента;
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентомБУ = СчетаУчета.СчетРасчетовПокупателя;
			НоваяСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентомБУ = СчетУчетаРасчетовСКонтрагентомБУ;
		КонецЕсли;
		
		СуммаДокумента = ДокументОснование.СуммаДокумента;
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения;
		
		НоваяСтрокаРасшифровки.Подразделение 	= СтрокаРасшифровкиОснования.Подразделение;
		НоваяСтрокаРасшифровки.Проект 			= СтрокаРасшифровкиОснования.Проект;
			
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда		
		// Отказываем
		#Если Клиент Тогда
		Сообщить("Приходный кассовый ордер не предусмотрен для ""возврата денежных средств покупателю""");
		#КонецЕсли
		Возврат;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		Контрагент                       = ДокументОснование.Контрагент;
		РасчетныйДокумент	             = ДокументОснование;
		СтруктураКурса                   = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		СчетУчетаРасчетовСКонтрагентомБУ   = ДокументОснование.СчетУчетаРасчетовСКонтрагентомБУ;		
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
		
		//заполняем табличную часть "Выдача в подотчет" сумму распределяем пропорционально
		//оставщейся сумме
		Если СтрокаПлатеж.СуммаПлатежа <> 0 Тогда
			ВыдачаВПодотчет.Загрузить(ДокументОснование.ВыдачаВПодотчет.Выгрузить());
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаПлатеж.СуммаПлатежа,ВыдачаВПодотчет.ВыгрузитьКолонку("СуммаПлатежа"));
			ВыдачаВПодотчет.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
		КонецЕсли;	
		
		СтрокаПлатеж.Проект = ДокументОснование.РасшифровкаПлатежа[0].Проект;
	
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
				Или ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником;
		
		СуммаДокумента = ДокументОснование.СуммаДокумента;
		
		Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			Контрагент = ДокументОснование.Контрагент;
		КонецЕсли;

		// Дальше заполняем по умолчанию
		Возврат;
			
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	Иначе
	
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоРКОУпр()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
    	
	ВалютаДокумента = мВалютаРегламентированногоУчета;	
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЦФО", Основание.Метаданные()) Тогда
		Подразделение = Основание.ЦФО;
	КонецЕсли;
    	
	ПараметрыДокументаОснования = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Основание);
	ВидДокументаОснования       = Основание.Метаданные().Имя;
	Если ВидДокументаОснования = "СчетНаОплатуПокупателю"  Или  ВидДокументаОснования = "Доверенность" Тогда
		СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ПараметрыДокументаОснования.Организация, 
		                                                ПараметрыДокументаОснования.Контрагент, ПараметрыДокументаОснования.ДоговорКонтрагента);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовСКонтрагентом",    СчетаУчета.СчетРасчетовПокупателя);
		ПараметрыДокументаОснования.Вставить("СчетУчетаРасчетовПоАвансам",        СчетаУчета.СчетАвансовПокупателя);		
	КонецЕсли;

	Если  ВидДокументаОснования = "Доверенность" Тогда
		ВидОперации  =  Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	КонецЕсли;
	
	ДокументОснование = ПараметрыДокументаОснования.Ссылка;
	
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Или 
		 (ТипЗнч(Основание) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")) Тогда

		ЗаполнитьПоРКО(Основание);
		
	ИначеЕсли ВидДокументаОснования = "РеализацияТоваровУслуг"
	 или ВидДокументаОснования = "АктОбОказанииПроизводственныхУслуг" 	 
	 или ВидДокументаОснования = "РеализацияУслугПоПереработке" 
	 или ВидДокументаОснования = "ПередачаОС" 
	 или ВидДокументаОснования = "СчетНаОплатуПокупателю"
	 или ВидДокументаОснования = "ВозвратТоваровПоставщику"
	 или ВидДокументаОснования = "ПередачаНМА" тогда

		
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику"  Тогда
			ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли (ВидДокументаОснования = "РеализацияТоваровУслуг"   И Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению)
			Или (ВидДокументаОснования = "ПередачаОС"   И Основание.ВидОперации = Перечисления.ВидыОперацийПередачиОС.ПередачаСтруктурномуПодразделению) Тогда
			ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения;
		Иначе
			ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		КонецЕсли; 

		
		Контрагент            = ПараметрыДокументаОснования.Контрагент;
		ДоговорКонтрагента    = ПараметрыДокументаОснования.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = УправлениеВзаиморасчетами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		Если ВидРасчетовПоДоговору=Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте тогда
			ВалютаДокумента = ПараметрыДокументаОснования.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов         = ОбщегоНазначения.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если Не ВидДокументаОснования = "ПередачаНМА" тогда
			СуммаДокументаОснования = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
		    СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			Если ВидДокументаОснования = "ПередачаНМА" тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ПараметрыДокументаОснования.СуммаДокумента;
				СтрокаТаблицыСумм.СтавкаНДС    = ПараметрыДокументаОснования.СтавкаНДС;
				СтрокаТаблицыСумм.СуммаНДС     = ПараметрыДокументаОснования.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		Если ПараметрыДокументаОснования.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание,"Сделка");
		КонецЕсли;

		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");

		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 


		ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентомБУ") ;
		Если ВидДокументаОснования = "ВозвратТоваровПоставщику" Тогда 
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоВозвратам, "СчетУчетаРасчетовПоАвансам") ;
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(ПараметрыДокументаОснования.СчетУчетаРасчетовПоАвансам, "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;
			
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	ИначеЕсли ВидДокументаОснования = "ден_ДенежныйЧек" Тогда
		
		ДенежныйЧек = ПараметрыДокументаОснования.Ссылка;
		ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		СуммаДокумента	= Основание.СуммаДокумента;
		СчетОрганизации = Основание.СчетОрганизации;
		СчетУчетаРасчетовСКонтрагентомБУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, СчетУчетаРасчетовСКонтрагентомБУ.Пустая()).СчетУчетаБУ;
		СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредствОтправитель;
		СтрокаПлатежа = ?(РасшифровкаПлатежа.Количество()=0,РасшифровкаПлатежа.Добавить(),РасшифровкаПлатежа[0]);
		СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Основание.СтатьяДвиженияДенежныхСредствПолучатель;
		СтрокаПлатежа.Подразделение = Основание.ЦФО;
	ИначеЕсли ВидДокументаОснования = "ден_ПланируемоеПоступлениеДенежныхСредств" Тогда
		
		Если Основание.ФормаОплаты=Перечисления.ден_ВидыДенежныхСредств.Безналичные Тогда
			Сообщить("Документом планировалось поступление безналичных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		#Если Клиент Тогда
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
		#КонецЕсли
		
		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииПоступление);
		
		Организация = Основание.Организация;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			Касса = Основание.БанковскийСчетКасса;
		КонецЕсли;
		
		Ответственный     = Основание.Ответственный;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента,);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		СтруктурноеПодразделениеПолучатель = Основание.СтруктурноеПодразделение;
		
		//Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		//	
		//	//ВидПриемаРозничнойВыручки=Основание.ВидПриемаРозничнойВыручки;
		//	Контрагент=Основание.КассаККМ;
		//				
		//КонецЕсли;
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ВалютаДокумента,
							КурсДокумента,
							КратностьДокумента,
							ВидОперации,
							Подразделение);
							
		Если Основание.ВидОперации = Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств И Основание.РасшифровкаПлатежа.Количество()>0 Тогда
            СтатьяДвиженияДенежныхСредств = Основание.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	КонецЕсли;

	ЗаполнитьСчетаУчетаРегл();	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	ОтраженоВОперУчете = Истина;
	Оплачено = Истина;
	ОтражатьВУправленческомУчете = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет");
	Если (ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками) Тогда
		
		ОтражатьВБухгалтерскомУчете	= Ложь;
		ОтражатьВНалоговомУчете		= Ложь;
		
	Иначе
		
		ОтражатьВБухгалтерскомУчете	= Истина;
		
	КонецЕсли;
	
	Если ПринятоОт = "" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПринятоОт = ?(Контрагент.НаименованиеПолное = "", Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
					Или ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",    Дата);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				              Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя),
				              " " + Лев(Результат.Имя,1) + "." + ?(НЕ ПустаяСтрока(Результат.Отчество),Лев(Результат.Отчество,1)+".", ""), ""),"");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет проверку заполненности обязательных реквизитов,
// проверку корректности установленных значений
//
Процедура ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента)
 	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 	

	//Проверяем заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	СтруктураОбязательныхПолей.Вставить("Касса",				"Не указана касса.");	
	СтруктураОбязательныхПолей.Вставить("СуммаДокумента",		"Не указана сумма документа.");	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		СтруктураОбязательныхПолей.Вставить("ВидУчетаНУ");
	КонецЕсли;
	

	Если СчетКасса.Валютный Тогда
		 СтруктураОбязательныхПолей.Вставить("ВалютаДокумента",	"Не указана валюта документа.");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ","Не указан счет учета.");
		// проводки по НУ для вида операции "Прочее"
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ","Не указан счет налогового учета.");			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомБУ",	"Не указан счет учета.");
		СтруктураОбязательныхПолей.Вставить("СчетОрганизации",					"Не указан банковский счет организации");
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		// Проверка соответствия суммы документа- расшифровке по строкам
		Если ВыдачаВПодотчет.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			Сообщить("Не совпадает сумма документа и суммы выплат по строкам документа.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;	
		СтруктураПолей = Новый Структура();
		СтруктураПолей = Новый Структура("ВидЗадолженностиПодотчетногоЛица");
		
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыдачаВПодотчет", СтруктураПолей, Отказ, Заголовок);
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		// Проверка заполнения работника
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Сообщить("Не указан работник.", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Возврат заработной платы можно оформлять только в " + мВалютаРегламентированногоУчета + "!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверяем заполнение табличной части 
	Если (ЕстьРасчетыСКонтрагентами) ИЛИ (ЕстьРасчетыПоКредитам) Тогда

		СтруктураПолей = Новый Структура();

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентомБУ");

		СтруктураПолей.Вставить("ДоговорКонтрагента");
		
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И ЕстьрасчетыПоКредитам Тогда
			СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентомНУ");
		КонецЕсли;	
		
		ВыводитьНомераСтрокВСообщении = РасшифровкаПлатежа.Количество()>1;
		ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок, ВыводитьНомераСтрокВСообщении);

		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, Платеж.ДоговорКонтрагента, 
			                                                       Платеж.ДоговорКонтрагента.Организация, Отказ, Заголовок);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеДокумента

// Формирует движения по регистрам заработной платы
//
Процедура ДвижениеПоЗарплатеРегл(СтруктураШапкиДокумента)

	СтруктураПризнаковРаспределенияНалогов = ПроцедурыНалоговогоУчета.ПолучитьПризнакиРаспределенияНалогов(Организация, Дата);
	
	РаспределятьНалогиПоСтруктурнымЕдиницам = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоСтруктурнымЕдиницам;
	РаспределятьНалогиПоПодразделениямОрганизаций = СтруктураПризнаковРаспределенияНалогов.РаспределятьНалогиПоПодразделениямОрганизаций;
	
	ПроводкиБУ         = Движения.Типовой;
	ПроводкиНУ         = Движения.Налоговый;

	Запрос = Новый Запрос();
	МестоРаботыТекст="";
	Запрос.УстановитьПараметр("Дата", 			СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Физлицо", 		СтруктураШапкиДокумента.Контрагент);
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
		ПериодыФизЛицаТекст = "ВЫБРАТЬ &ФизЛицо КАК ФизЛицо, &Дата КАК Период";
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, СтруктураШапкиДокумента.Организация, Запрос, Истина);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ = "МестоРаботыВТ";
		
		Запрос.Текст = МестоРаботыТекст + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.Налогоплательщик КАК Налогоплательщик,
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	- (ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток) КАК Остаток,		
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА НЕ(МестоРаботы.ПодразделениеОрганизации ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.ПодразделениеОрганизации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	КОНЕЦ КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	ВЫБОР
		|		КОГДА НЕ (МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
		|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
		|		ИНАЧЕ &Организация
		|	КОНЕЦ КАК СтруктурнаяЕдиницаПоМестуРаботы
		|ИЗ
		|	" + МестоРаботыВТ + " КАК МестоРаботы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
		|			&Дата, 
		|			Организация = &Организация 
		|			И Физлицо = &Физлицо) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
		|		ПО МестоРаботы.ФизЛицо = ВзаиморасчетыСРаботникамиОрганизацииОстатки.ФизЛицо
		|			И ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодВзаиморасчетов";
		
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Организация КАК СтруктурнаяЕдиница,
		|	&Организация КАК Налогоплательщик,
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	- (ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток) КАК Остаток,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизацииПоМестуРаботы,
		|	&Организация КАК СтруктурнаяЕдиницаПоМестуРаботы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(
		|			&Дата, 
		|			Организация = &Организация 
		|			И Физлицо = &Физлицо) КАК ВзаиморасчетыСРаботникамиОрганизацииОстатки
		|ГДЕ
		|	ВзаиморасчетыСРаботникамиОрганизацииОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодВзаиморасчетов";
		
	КонецЕсли;
	
	ВыборкаОстатков = Запрос.Выполнить().Выбрать();
	СуммаКПогашению = СуммаДокумента;
	ЕстьДанные 		= ВыборкаОстатков.Следующий();
	
	СтруктурнаяЕдиницаПоМестуРаботы = ВыборкаОстатков.СтруктурнаяЕдиницаПоМестуРаботы;
	ПодразделениеОрганизацииПоМестуРаботы = ВыборкаОстатков.ПодразделениеОрганизацииПоМестуРаботы;
			
	Пока ЕстьДанные И ВыборкаОстатков.Налогоплательщик <> NULL Цикл 
			
		/////////////////////////////////////////////////////////////////////
		// ВзаиморасчетыСРаботникамиОрганизаций
		//
		
		СтрокаДвижений = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		//Свойства
		СтрокаДвижений.Период = СтруктураШапкиДокумента.Дата;
		СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		//Измерения
		СтрокаДвижений.ФизЛицо = СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда			
			СтрокаДвижений.Налогоплательщик		= ВыборкаОстатков.Налогоплательщик;
			СтрокаДвижений.СтруктурнаяЕдиница	= ВыборкаОстатков.СтруктурнаяЕдиница;
		Иначе
			СтрокаДвижений.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;                                                                   		
		СтрокаДвижений.ПериодВзаиморасчетов = ВыборкаОстатков.ПериодВзаиморасчетов;
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		//Остаток списываем всегда чтобы не было зависания остатков
		СтрокаДвижений.ПодразделениеОрганизации = ВыборкаОстатков.ПодразделениеОрганизации;
		
		//Ресурсы
		СуммаВзаиморасчетов 				= Мин(ВыборкаОстатков.Остаток,СуммаКПогашению);
		СтрокаДвижений.СуммаВзаиморасчетов 	= - СуммаВзаиморасчетов;
			
		// Реквизиты
		СтрокаДвижений.ХарактерВыплаты 	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		СтрокаДвижений.СпособВыплаты	= Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		СтрокаДвижений.ВидСтроки		= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;
			
		/////////////////////////////////////////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
		//
			
		СтрокаДвижений = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
		// Свойства
		СтрокаДвижений.Период = СтруктураШапкиДокумента.Дата;
			
		// Измерения
		СтрокаДвижений.ФизЛицо 					= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда			
			СтрокаДвижений.Налогоплательщик		= ВыборкаОстатков.Налогоплательщик;
			СтрокаДвижений.СтруктурнаяЕдиница	= ВыборкаОстатков.СтруктурнаяЕдиница;
		Иначе			
			СтрокаДвижений.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;		
		СтрокаДвижений.МесяцНалоговогоПериода 	= ВыборкаОстатков.ПериодВзаиморасчетов;
		СтрокаДвижений.Организация 				= СтруктураШапкиДокумента.Организация;
		//Остаток списываем всегда чтобы не было зависания остатков
		СтрокаДвижений.ПодразделениеОрганизации = ВыборкаОстатков.ПодразделениеОрганизации;
			
		// Ресурсы
		СтрокаДвижений.СуммаДохода				= - СуммаВзаиморасчетов;
			
			
		СуммаКПогашению = СуммаКПогашению - СуммаВзаиморасчетов;
			
		Если СуммаКПогашению = 0 Тогда
			Прервать;
		КонецЕсли;
			
		ЕстьДанные = ВыборкаОстатков.Следующий();
		
	КонецЦикла;
			
	Если СуммаКПогашению <> 0 Тогда

		/////////////////////////////////////////////////////////////////////
		// ВзаиморасчетыСРаботникамиОрганизаций
		//
			
		СтрокаДвижений = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		//Свойства
		СтрокаДвижений.Период 		= СтруктураШапкиДокумента.Дата;
		СтрокаДвижений.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		
		//Измерения
		СтрокаДвижений.ФизЛицо 		= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
			Налогоплательщик		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиницаПоМестуРаботы,
																					СтруктураШапкиДокумента.Организация,
																					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
			
			СтрокаДвижений.Налогоплательщик		= Налогоплательщик;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
		Иначе			
			СтрокаДвижений.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;                                                                		
		СтрокаДвижений.ПериодВзаиморасчетов = НачалоМесяца(СтруктураШапкиДокумента.Дата);
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		// Нераспределенный остаток относим на основное место работы только если используется распределение
		Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			СтрокаДвижений.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
		КонецЕсли;
		
		//Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов = - СуммаКПогашению;

		// Реквизиты
		СтрокаДвижений.ХарактерВыплаты 	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		СтрокаДвижений.СпособВыплаты	= Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
		СтрокаДвижений.ВидСтроки		= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Возврат;

		/////////////////////////////////////////////////////////////////////
		// ВыплаченныеДоходыРаботникамОрганизацийНУ
		//

		СтрокаДвижений = Движения.ВыплаченныеДоходыРаботникамОрганизацийНУ.Добавить();
			
		// Свойства
		СтрокаДвижений.Период 					= СтруктураШапкиДокумента.Дата;
			
		// Измерения
		СтрокаДвижений.ФизЛицо 					= СтруктураШапкиДокумента.Контрагент;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или РаспределятьНалогиПоСтруктурнымЕдиницам Тогда			
			СтрокаДвижений.Налогоплательщик		= Налогоплательщик;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктурнаяЕдиницаПоМестуРаботы;
		Иначе			
			СтрокаДвижений.Налогоплательщик		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.СтруктурнаяЕдиница	= СтруктураШапкиДокумента.Организация;
		КонецЕсли;                                                                    		
		СтрокаДвижений.МесяцНалоговогоПериода 	= НачалоМесяца(СтруктураШапкиДокумента.Дата);
		СтрокаДвижений.Организация 				= СтруктураШапкиДокумента.Организация;
		Если РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			СтрокаДвижений.ПодразделениеОрганизации = ПодразделениеОрганизацииПоМестуРаботы;
		КонецЕсли;
			
		// Ресурсы
		СтрокаДвижений.СуммаДохода				= - СуммаКПогашению;
			
	КонецЕсли;
	
	// Движение по регистру бухгалтерии		
	Проводка = ПроводкиБУ.Добавить();
	
	Проводка.Период      = СтруктураШапкиДокумента.Дата;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Сумма 		 = СтруктураШапкиДокумента.СуммаДокумента;
	
	
	ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
	Проводка.СчетДт      = СтруктураШапкиДокумента.СчетКасса;
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.Касса);
	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
	
	Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда;
	ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
	Если ВедетсяУчетПоСотрудникам Тогда
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент);
	КонецЕсли;
	
	Если Проводка.СчетДт.Валютный Тогда
		Проводка.ВалютаДт 			= ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт 	= СтруктураШапкиДокумента.СуммаДокумента;
	КонецЕсли;
	
	Если Основание = "" Тогда
		Проводка.Содержание = "Возврат заработной платы"; 
	Иначе
		Проводка.Содержание = Основание; 
	КонецЕсли;
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		// Движение по регистру бухгалтерии		
		ПроводкаНУ = ПроводкиНУ.Добавить();
		
		ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.Сумма 	   = СтруктураШапкиДокумента.СуммаДокумента;
		
		ПроводкаНУ.СчетДт      = СтруктураШапкиДокумента.СчетКассаНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ДенежныеСредства", СтруктураШапкиДокумента.Касса);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		ПроводкаНУ.СчетКт 	= ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда, Дата, ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
		ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам(ПроводкаНУ.СчетКт);
		Если ВедетсяУчетПоСотрудникам Тогда
        	ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент);
		КонецЕсли;
			
		Если Основание = "" Тогда
			ПроводкаНУ.Содержание = "Возврат заработной платы"; 
		Иначе
			ПроводкаНУ.Содержание = Основание; 
		КонецЕсли; 
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
									ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ,  СтруктураШапкиДокумента.ВидУчетаНУ);

	КонецЕсли;      	
	
	
КонецПроцедуры // ДвижениеПоЗарплатеРегл()

// Формирует движения по регистрам бухгалтерского и налогового учета
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок ,СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтраженоВОперУчете)) Тогда
		Возврат;
	КонецЕсли;
	
	// Бухгалтерские проводки документа

	ДатаДок            = Дата;
	ПроводкиБУ         = Движения.Типовой;
	ПроводкиНУ         = Движения.Налоговый;

	ВалютаРег          = мВалютаРегламентированногоУчета;
	ДанныеОВалюте      = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, ДатаДок);

	КурсДокумента      = ОбщегоНазначения.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьДокумента = ОбщегоНазначения.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	СчетДт             = СчетКасса;
	КассаВВалюте       = СчетДт.Валютный;	
	
	СчетДтНУ = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.Касса, Истина).СчетУчетаНУ;	
		
	СтруктураШапкиДокумента.Вставить("СчетКассаНУ",СчетДтНУ );

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет",СчетДт);
		СтруктураШапкиДокумента.Вставить("КоррСчетНУ",СчетДтНУ);
		СтруктураШапкиДокумента.Вставить("ОбъектУчетаДенежныхСредств", Касса);

		СтруктураШапкиДокумента.Вставить("ВзаиморасчетыСоСтруктурнымПодразделением", ?(ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения, Истина, Ложь));
		
		Если УправлениеДенежнымиСредствами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,"Расчеты по кредитам и займам",""))=Ложь тогда
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		Для каждого СтрокаТЧ Из ВыдачаВПодотчет Цикл		
			Если СтрокаТЧ.СуммаПлатежа = 0 Тогда			
				Продолжить;                     			
			КонецЕсли; 
			
			Проводка = ПроводкиБУ.Добавить();			
			Проводка.Период      = ДатаДок;
			Проводка.Организация = Организация;
			
			Проводка.СчетДт      = СчетДт;
			Проводка.СубконтоДт.ДенежныеСредства = Касса;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиДвиженияДенежныхСредств",СтрокаТЧ.СтатьяДвиженияДенежныхСредств);
			
			СчетКт = СчетУчетаРасчетовСКонтрагентомБУ;
			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Возврат средств от подотчетника";			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций",Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыЗадолженностиПодотчетныхЛиц",СтрокаТЧ.ВидЗадолженностиПодотчетногоЛица);			
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			КурсДокумента, ДанныеОВалюте.Курс, 
			КратностьДокумента, ДанныеОВалюте.Кратность);
			
			
			Если СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаТЧ.СуммаПлатежа;
			КонецЕсли;			
			
			Если СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаПлатежа;
			КонецЕсли;		
			
			Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();			
				ПроводкаНУ.Период      = ДатаДок;
				ПроводкаНУ.Организация = Организация;
				
				ПроводкаНУ.СчетДт      = СчетДтНУ;
				ПроводкаНУ.СубконтоДт.ДенежныеСредства = Касса;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"СтатьиДвиженияДенежныхСредств",СтрокаТЧ.СтатьяДвиженияДенежныхСредств);
				
				СчетКтНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаРасчетовСКонтрагентомБУ, Дата, ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);;
				ПроводкаНУ.СчетКт     = СчетКтНУ;
				ПроводкаНУ.Содержание = "Возврат средств от подотчетника";			
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"РаботникиОрганизаций",Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыЗадолженностиПодотчетныхЛиц",СтрокаТЧ.ВидЗадолженностиПодотчетногоЛица);			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
								ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаПлатежа, 
							СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
							КурсДокумента, ДанныеОВалюте.Курс, 
							КратностьДокумента, ДанныеОВалюте.Кратность);
				
				
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			КонецЕсли;                                                                              			                                                                                        				
			
		КонецЦикла;                                                                                		
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
	
		ДвижениеПоЗарплатеРегл(СтруктураШапкиДокумента);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ВедетсяУчетПоСотрудникам = ОбщегоНазначения.ПолучитьПризнакВеденияУчетаПоСотрудникам();
		// Движение по регистру регламентированных расчетов с работниками по займам
		НаборДвижений 	= Движения.ПогашениеЗаймовРаботникамиОрганизаций;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
		СтрокаДвижений 				= ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 	= Организация;
		СтрокаДвижений.ФизЛицо 		= Контрагент;
		СтрокаДвижений.ДоговорЗайма = РасчетныйДокумент;
			
		СуммаРасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента, мВалютаРегламентированногоУчета,
																	КурсДокумента,1,
																	КратностьДокумента,1);
		
		СтрокаДвижений.ОсновнойДолг = СуммаРасчетов;
		СтрокаДвижений.УдержаноИзЗарплаты = Ложь;
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.ВыполнитьРасход();
		
		// Движение по регистру бухгалтерии		
		Проводка 			 = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДок;
		Проводка.Организация = Организация;
		Проводка.Сумма 		 = СуммаРасчетов;

		Проводка.СчетДт      = СчетДт;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДенежныеСредства",Касса);			
		Если  ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиДвиженияДенежныхСредств",РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтатьиДвиженияДенежныхСредств",СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт 			= ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт 	= СуммаДокумента;
		КонецЕсли;
		
		Проводка.СчетКт 	= ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам;
		Если ВедетсяУчетПоСотрудникам Тогда
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РаботникиОрганизаций",Контрагент);
		КонецЕсли;
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
		Если Основание = "" Тогда
			Проводка.Содержание = "Погашение займа"; 
		Иначе
			Проводка.Содержание = Основание; 
		КонецЕсли;
		
	Иначе

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = Организация;

		Проводка.СчетДт      = СчетДт;
		Проводка.СубконтоДт.ДенежныеСредства = Касса;
		
		Если  ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		Иначе
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентомБУ;

			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Прочие поступления";

			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СубконтоКтБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СубконтоКтБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СубконтоКтБУ3);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда

			СчетКт = СчетУчетаРасчетовСКонтрагентомБУ;

			Проводка.Содержание = "Получение наличных в банке";
			Проводка.СчетКт     = СчетКт;
			Проводка.СубконтоКт.ДенежныеСредства = СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			
		КонецЕсли; // Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке  
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
											Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
		Иначе
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
											Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
		КонецЕсли;

		// проводки по НУ для вида операции "Прочее"
		Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  Тогда				
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период      = ДатаДок;
			ПроводкаНУ.Организация = Организация;	
			
			
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
				ПроводкаНУ.СчетКт     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, Истина).СчетУчетаНУ;	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СчетОрганизации);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СтатьяДвиженияДенежныхСредств);
				ПроводкаНУ.Содержание = "Получение наличных в банке";
				
				ПроводкаНУ.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;

			Иначе  				
				ПроводкаНУ.СчетКт     = СчетУчетаРасчетовСКонтрагентомНУ;
				ПроводкаНУ.Содержание = "Прочие поступления";
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,2,СтатьяДвиженияДенежныхСредств);
                						
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,1,СубконтоКтНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,2,СубконтоКтНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,3,СубконтоКтНУ3);
			КонецЕсли;
					
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее 
				И ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ) Тогда				
				ПроводкаНУ.СчетДт     = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();						
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			Иначе
				ПроводкаНУ.СчетДт     = СчетДтНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.Касса);
				Если  ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
					ПроводкаНУ.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
				Иначе
					ПроводкаНУ.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				КонецЕсли;
				
			КонецЕсли;   			
			     			
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеОтправитель);
			Иначе
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
										ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);

			КонецЕсли;  
			
			Если КассаВВалюте Тогда				
				ПроводкаНУ.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);
			Иначе
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли; // Если КассаВВалюте Тогда
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, СтруктураШапкиДокумента.ВидУчетаНУ);
			
			Если ПроцедурыНалоговогоУчета.ВлияетНаНалогооблагаемыйДоход(СчетУчетаРасчетовСКонтрагентомБУ)
				И ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
				 
				 //если выбран счет затрат или доходов, то сделаем еще одну проводку
				 //погашение начисленной выше задолженности
				 ПроводкаНУ_Погашение = ПроводкиНУ.Добавить();
				 ЗаполнитьЗначенияСвойств(ПроводкаНУ_Погашение, ПроводкаНУ, "Период, Организация, Сумма,Содержание") ;
				 
				 ПроводкаНУ_Погашение.СчетДт     = СчетДтНУ;
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 1, СтруктураШапкиДокумента.Касса);
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетДт, ПроводкаНУ_Погашение.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
				 
				 ПроводкаНУ_Погашение.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				 ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ_Погашение.СчетКт, ПроводкаНУ_Погашение.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				 				 
				 ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
													 ПроводкаНУ_Погашение, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель, СтруктураШапкиДокумента.СтруктурноеПодразделениеПолучатель);
				 
				 ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ_Погашение,  СтруктураШапкиДокумента.ВидУчетаНУ);
              КонецЕсли; 			
		  КонецЕсли;  	
		  		
		// установка валюты для валютных корреспонденций
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
				
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
				
		ДанныеОВалюте   = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаДок);
				
		Проводка.Сумма  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
													СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);


	КонецЕсли; // Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаЗаполнения(Основание)	
	 // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа.
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами	= УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам		= УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль 
													И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	 //так как для всех операций, кроме одной используется только одно поле дя выбора струткрного подразделения,
	 //то добавим в структуру еще одну запись
	СтруктураШапкиДокумента.Вставить("СтруктурноеПодразделение", 			СтруктурноеПодразделениеПолучатель);
	
	// Документ должен принадлежать хотя бы к одному виду учета (бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПриходныйКассовыйОрдер");
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	ПроверитьЗаполнениеДокумента(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда 
		Для Каждого СтрокаОплаты Из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
												Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;	
		
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		Если НЕ Отказ И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения
        
//Процедура-обработчик события "ПередЗаписью" документа
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке
		И Не ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее	 Тогда
		СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделениеПолучатель;
	КонецЕсли;
	
КонецПроцедуры

// Формирует остаток по договору займа с работником при соответствующем виде операции
//
Функция ПолучитьОстатокПоДоговоруЗайма(Основание) Экспорт
	
	ОсновнойДолг = 0;
	
	Если ЗначениеЗаполнено(Основание) Тогда		
		
		Если Основание.ОтражатьВБухгалтерскомУчете Тогда
			ИмяРегистра = "ПогашениеЗаймовРаботникамиОрганизаций";
		Иначе
			ИмяРегистра = "ПогашениеЗаймовРаботниками";
		КонецЕсли;
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПогашениеЗаймовОстатки.ОсновнойДолгОстаток КАК ОсновнойДолгОстаток
		|ИЗ
		|	РегистрНакопления."+ИмяРегистра+".Остатки(, ДоговорЗайма=&ДоговорЗайма) КАК ПогашениеЗаймовОстатки";
		
		Запрос.УстановитьПараметр("ДоговорЗайма",Основание);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ОсновнойДолг = Результат.ОсновнойДолгОстаток;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновнойДолг;
	
КонецФункции // ПолучитьОстатокПоДоговоруЗайма()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если Не (ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указан договор займа");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

//Процедура проверяет на заполненость необходимых реквизитов документа
//необходимых для проведения по управленческому учету
//
Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)
     ОбязательноОтражатьВОперУчете = УправлениеДенежнымиСредствами.КонтрольОтраженияПлатежныхДокументовВОперативномУчете(Дата);
	Если ОбязательноОтражатьВОперУчете И (НЕ ОтраженоВОперУчете) И НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПроводитьБезОперУчета() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ необходимо отразить в оперативном учете", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	Если Оплачено Тогда
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И (ОтражатьВУправленческомУчете И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет")) Тогда

		Сообщить(Заголовок+"
		         |Не выбрано правило проведения по оперативному учету (""Отражено в опер. учете"",""Оплачено"")");
		Отказ = Истина;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Не совпадают валюты банковского счета и кассы");
			Отказ=Истина;
	КонецЕсли;

	Если (ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами) 
		И НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента  Тогда

		Сообщить(Заголовок+"
		         |не совпадают сумма документа и ее расшифровка.");
		Отказ = Истина;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником И 
		НЕ ВыдачаВПодОтчет.Итог("СуммаПлатежа") = СуммаДокумента Тогда

		Сообщить(Заголовок+"
		         |не совпадают сумма документа и сумма табличной части ""Выдача в подотчет"".");
		Отказ = Истина;

	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		Если РасчетныйДокумент.ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор займа отмечен как неотражаемый в управленческом учете!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура Формирует движения по управленческим регистрам накопления
//
Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если ОтражатьВУправленческомУчете И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУправленческийУчет") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			НаборДвижений = Движения.ВзаиморасчетыСРаботниками;
			
			СтрокаДвижений = НаборДвижений.Добавить();
			СтрокаДвижений.ФизЛицо = Контрагент;
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаДвижений.СуммаУпр = - СуммаДокумента;
			СтрокаДвижений.Период=Дата;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
			// Движение по регистру управленческих расчетов с работниками по займам
			НаборДвижений 	= Движения.ПогашениеЗаймовРаботниками;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			СтрокаДвижений 				= ТаблицаДвижений.Добавить();
			СтрокаДвижений.ФизЛицо 		= Контрагент;
			СтрокаДвижений.ДоговорЗайма = РасчетныйДокумент;
			
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			СтруктураКурса 	= ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Дата);
			
			СуммаРасчетов	= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента,ВалютаДокумента,ВалютаУправленческогоУчета,
														КурсДокумента,СтруктураКурса.Курс,
														КратностьДокумента,СтруктураКурса.Кратность);
			
			СтрокаДвижений.ОсновнойДолг = СуммаРасчетов;
			СтрокаДвижений.УдержаноИзЗарплаты = Ложь;
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ПогашениеЗаймовРаботниками.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтраженоВОперУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДенежныйЧек.Пустая() Тогда
		ПоДенежномуЧеку = Истина;
	Иначе
		ПоДенежномуЧеку = Ложь;
	КонецЕсли;

	ДвиженияПоСтатьям = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	
	
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	Если Оплачено Тогда
		
		// По регистру "Денежные средства"
		НаборДвиженийОстатки 		= Движения.ден_ДенежныеСредства;
		ТаблицаДвиженийОстатки 		= НаборДвиженийОстатки.Выгрузить();
		
		// По регистру "Денежные средства к получению"
		НаборДвиженийПолучение   = Движения.ден_ДенежныеСредстваКПолучению;
		ТаблицаДвиженийПолучение = НаборДвиженийПолучение.Выгрузить();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											Константы.ВалютаУправленческогоУчета.Получить(), 
											СтрокаКурсыВалют.КурсДокумента,
											СтрокаКурсыВалют.КурсУпрУчета, 
											СтрокаКурсыВалют.КратностьДокумента,
											СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДвиженийОстатки.Добавить();
		СтрокаДвиженийОстатки.БанковскийСчетКасса = Касса;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		СтрокаДвиженийОстатки.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
		
		НаборДвиженийОстатки.мПериод              = Дата;
		НаборДвиженийОстатки.мТаблицаДвижений     = ТаблицаДвиженийОстатки;
		Движения.ден_ДенежныеСредства.ВыполнитьПриход();		
		
		Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
			// По регистру "Денежные средства к получению"
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийПолучение = ТаблицаДвиженийПолучение.Добавить();
				СтрокаДвиженийПолучение.БанковскийСчетКасса = Касса;
				СтрокаДвиженийПолучение.Организация 		= Организация;
				СтрокаДвиженийПолучение.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
				СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийПолучение.ДокументПолучения   = ?(Не ЗначениеЗаполнено(ДенежныйЧек), Ссылка, ДенежныйЧек);
				СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийПолучение.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
			
			НаборДвиженийПолучение.мПериод              = Дата;
			НаборДвиженийПолучение.мТаблицаДвижений     = ТаблицаДвиженийПолучение;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьРасход();
		КонецЕсли;
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
			
			// По регистру "Денежные средства"
			НаборДвижений   = Движения.ден_ДенежныеСредства;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
			СтрокаДвижений.Организация 		   = Организация;
			СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
			СтрокаДвижений.Сумма               = СуммаДокумента;
			СтрокаДвижений.СуммаУпр            = СуммаУпр;
			СтрокаДвижений.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
			
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
			
			Движения.ден_ДенежныеСредства.ВыполнитьРасход();
			
			Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
				// По регистру "Денежные средства к списанию"
				НаборДвижений   = Движения.ден_ДенежныеСредстваКСписанию;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвижений.Организация 		   = Организация;
				СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвижений.ДокументСписания    = Ссылка;
				СтрокаДвижений.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
				СтрокаДвижений.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;

				СтрокаДвижений.Сумма               = СуммаДокумента;
				СтрокаДвижений.СуммаУпр            = СуммаУпр;
				
				НаборДвижений.мПериод              = Дата;
				НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
				
				Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьРасход();
  			КонецЕсли;
			
		КонецЕсли;
		
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
			
			// Резервируем денежные средства, если приход планировался и по нему размещались заявки
			Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
				|ИЗ
				|	РегистрНакопления.ден_РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументПланирования=&ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДокументРезервированияДатаРасхода";
				
				Запрос.УстановитьПараметр("ДокументПланирования",СтрокаРезерв.ДокументПланированияПлатежа);
				
				Результат=Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					
					СуммаРезерв=СтрокаРезерв.СуммаПлатежа;	
					
					НаборРазмещение=Движения.ден_РазмещениеЗаявокНаРасходованиеСредств;
					ТаблицаРазмещение=НаборРазмещение.Выгрузить();
					ТаблицаРазмещение.Очистить();
					
					НаборРезерв=Движения.ден_ДенежныеСредстваВРезерве;
					ТаблицаРезерв=НаборРезерв.Выгрузить();
					ТаблицаРезерв.Очистить();
					
					Выборка=Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.СуммаОстаток>=СуммаРезерв Тогда
							
							СтрокаРазмещение=ТаблицаРазмещение.Добавить();
							СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
							СтрокаРазмещение.Сумма=СуммаРезерв;
							
							СтрокаРезерв=ТаблицаРезерв.Добавить();
							СтрокаРезерв.БанковскийСчетКасса=Касса;
							СтрокаРезерв.Организация = Организация;
							СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Наличные;
							СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
							СтрокаРезерв.Сумма=СуммаРезерв;
							СтрокаРезерв.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
							
							Прервать;
							
						Иначе
							
							СтрокаРазмещение=ТаблицаРазмещение.Добавить();
							СтрокаРазмещение.ДокументПланирования=СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования=Выборка.Заявка;
							СтрокаРазмещение.Сумма=Выборка.СуммаОстаток;
							
							СтрокаРезерв=ТаблицаРезерв.Добавить();
							СтрокаРезерв.БанковскийСчетКасса=Касса;
							СтрокаРезерв.Организация = Организация;
							СтрокаРезерв.ВидДенежныхСредств=Перечисления.ден_ВидыДенежныхСредств.Наличные;
							СтрокаРезерв.ДокументРезервирования=Выборка.Заявка;
							СтрокаРезерв.Сумма=Выборка.СуммаОстаток;
							СтрокаРезерв.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
							
							СуммаРезерв=СуммаРезерв-Выборка.СуммаОстаток;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НаборРазмещение.мПериод=Дата;
					НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
					Движения.ден_РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
					
					НаборРезерв.мПериод=Дата;
					НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
					Движения.ден_ДенежныеСредстваВРезерве.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам;

	Если ОтраженоВОперУчете Тогда // Разнесено менеджером по оперативным взаиморасчетам
		
		Если НЕ ПоДенежномуЧеку Тогда
			
			// По регистру "Денежные средства к получению"
			НаборДвиженийДС   = Движения.ден_ДенежныеСредстваКПолучению;
			ТаблицаДвиженийДС = НаборДвиженийДС.Выгрузить();
			ТаблицаДвиженийДС.Очистить();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДвиженийДС.Добавить();
				СтрокаДвиженийДС.БанковскийСчетКасса = Касса;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Наличные;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументПолучения    = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийДС.СтруктурноеПодразделение = СтруктурноеПодразделениеПолучатель;
				
			КонецЦикла;
			
			НаборДвиженийДС.мПериод              = Дата;
			НаборДвиженийДС.мТаблицаДвижений     = ТаблицаДвиженийДС;
			Движения.ден_ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
			Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
				
				// По регистру "Денежные средства к списанию"
				НаборДвижений   = Движения.ден_ДенежныеСредстваКСписанию;
				ТаблицаДвижений = НаборДвижений.Выгрузить();
				ТаблицаДвижений.Очистить();
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.БанковскийСчетКасса = СчетОрганизации;
				СтрокаДвижений.Организация 		 = Организация;
				СтрокаДвижений.ВидДенежныхСредств  = Перечисления.ден_ВидыДенежныхСредств.Безналичные;
				СтрокаДвижений.ДокументСписания    = Ссылка;
				СтрокаДвижений.СтатьяДвиженияДенежныхСредств=СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
				СтрокаДвижений.СтруктурноеПодразделение = СтруктурноеПодразделениеОтправитель;
				
				СтрокаДвижений.Сумма               = СуммаДокумента;
				СтрокаДвижений.СуммаУпр            = СуммаУпр;
				
				НаборДвижений.мПериод              = Дата;
				НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
				
				Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
				
		// По регистру "Планируемые поступления денежных средств"
		НаборДвиженийПлан  = Движения.ден_ПланируемыеПоступленияДенежныхСредств;
		ТаблицаДвиженийПлан = НаборДвиженийПлан.Выгрузить();
		ТаблицаДвиженийПлан.Очистить();
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
			
			ЕстьПланПоступление=Ложь;
			ЕстьРасчеты=Ложь;
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа=СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки = ТаблицаДвиженийПлан.Добавить();
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Организация					= Организация;
				СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
				СтрокаДвиженийЗаявки.СтруктурноеПодразделение 		= СтруктурноеПодразделениеПолучатель;
				//СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					СтрокаДвиженийЗаявки.Сделка = ?(Не ЗначениеЗаполнено(СтрокаПлатеж.Сделка),
																			Ссылка,
																			СтрокаПлатеж.Сделка);
				КонецЕсли;
				
				ЕстьПланПоступление = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДвиженийПлан.Количество()>0 Тогда
			
			НаборДвиженийПлан.мПериод          = Дата;
			НаборДвиженийПлан.мТаблицаДвижений = ТаблицаДвиженийПлан;
			Движения.ден_ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
	КонецЕсли;

	Если Оплачено И ОтраженоВОперУчете Тогда  // Разнесено по оперативным взаиморасчетам
		// и принято кассиром: проводим по фактическим взаиморасчетам
			
		// По регистру "Движения денежных средств"
		НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
			
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
			
		// Заполним таблицу движений. 
			
		ДвиженияДенежныхСредств=ТаблицаПлатежейУпр.Скопировать();
			

		ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект,Подразделение","СуммаПлатежа,СуммаУпр");
		ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
			
		фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,Дата,"ДенежныеСредстваПоступление",Ссылка);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Наличные,"ВидДенежныхСредств");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ПриходРасход");
		ТаблицаДвижений.ЗаполнитьЗначения(Касса,"БанковскийСчетКасса");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеПолучатель,"СтруктурноеПодразделение");
			
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
		Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
				
			// По регистру "Движения денежных средств"
			НаборДвижений = Движения.ден_ДвиженияДенежныхСредств;
				
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
				
			// Заполним таблицу движений.
			фин_УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств,ТаблицаДвижений,Неопределено,Дата,"ДенежныеСредства");
				
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДенежныхСредств.Безналичные,"ВидДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ден_ВидыДвиженийПриходРасход.Расход,"ПриходРасход");
			ТаблицаДвижений.ЗаполнитьЗначения(СчетОрганизации,"БанковскийСчетКасса");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументДвижения");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктурноеПодразделениеОтправитель,"СтруктурноеПодразделение");
				
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				
			Движения.ден_ДвиженияДенежныхСредств.ВыполнитьДвижения();
				
		КонецЕсли;
			
		Если (ПоДенежномуЧеку) И (ДенежныйЧек.ВыплатаЗаработнойПлаты.Количество()>0) Тогда
				
			// Резервируем наличные ДС для выплаты заработной платы
			// По регистру "ДенежныеСредстваКСписанию"
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	&СП КАК СтруктурноеПодразделение,
			|	ПриходныйКассовыйОрдер.Организация              КАК Организация,
			|	ПриходныйКассовыйОрдер.Касса                    КАК БанковскийСчетКасса,
			|	ДенежныйЧекВыплатаЗаработнойПлаты.Ведомость     КАК ДокументСписания,
			|	ДенежныйЧекВыплатаЗаработнойПлаты.СуммаКВыплате КАК Сумма,
			|	ДенежныйЧекВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	&ВидДенежныхСредств                             КАК ВидДенежныхСредств
			|ИЗ
			|	Документ.ден_ДенежныйЧек.ВыплатаЗаработнойПлаты КАК ДенежныйЧекВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
			|		ПО ДенежныйЧекВыплатаЗаработнойПлаты.Ссылка = ПриходныйКассовыйОрдер.ДенежныйЧек
			|
			|ГДЕ
			|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
				
			Запрос.УстановитьПараметр("СП", СтруктурноеПодразделениеПолучатель);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ВидДенежныхСредств", Перечисления.ден_ВидыДенежныхСредств.Наличные);
				
			ТабВедомостиРезерв=Запрос.Выполнить().Выгрузить();
				
			// По регистру "Денежные средства к списанию"
			НаборДвижений = Движения.ден_ДенежныеСредстваКСписанию;
				
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТабВедомостиРезерв;
			
			Для Каждого СтрокаДвижения Из НаборДвижений Цикл
				 СтрокаДвижения.СуммаУпр = 	ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.Сумма, ВалютаДокумента,
											Константы.ВалютаУправленческогоУчета.Получить(), 
											СтрокаКурсыВалют.КурсДокумента,
											СтрокаКурсыВалют.КурсУпрУчета, 
											СтрокаКурсыВалют.КратностьДокумента,
											СтрокаКурсыВалют.КратностьУпрУчета);

			КонецЦикла;
				
			Движения.ден_ДенежныеСредстваКСписанию.ВыполнитьПриход();
	
		КонецЕсли;
		
	КонецЕсли;   

КонецПроцедуры

мВалютаРегламентированногоУчета 				= Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
мОтображатьСтруктурныеПодразделенияВЗарплате = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделенийВЗарплате();