// Строки, хранят реквизиты имеющие смысл только для бухгалтерского и налогового учетов
// соответственно в случае если документ не отражается в каком-то виде учета,
// делаются невидимыми.
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)

Перем мСтруктураШапкиДокумента;         // (Общ) Результат запроса по шапке документа

Перем мВалютаРегламентированногоУчета Экспорт;

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполнения списка реквизитов зависимых от типов учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	мСтрокаРеквизитыБухУчета = "СчетУчетаРасчетовСКонтрагентом, НадписьСчетУчетаРасчетовСКонтрагентом,
	|СчетУчетаРасчетовПоАвансам, НадписьСчетУчетаРасчетовПоАвансам,
	|Услуги.СчетУчетаБУ, Услуги.СчетДоходовБУ, Услуги.СчетСписанияСебестоимостиБУ,
	|Услуги.СубконтоДоходовБУ1,Услуги.СубконтоДоходовБУ2,Услуги.СубконтоДоходовБУ3,
	|СубконтоСписанияСебестоимостиБУ1,СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполнения счетов бухгалтерского учета в строке услуг
//
Процедура ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ)
	
	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетДоходовБУ  				= СчетаУчета.СчетДоходовОтРеализацииБУ;
		СтрокаТЧ.СчетСписанияСебестоимостиБУ 	= СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
		СтрокаТЧ.СчетУчетаНДСПоРеализации 		= СчетаУчета.СчетУчетаНДСПоРеализации;
		
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");			
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");					
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		СтрокаТЧ.СчетДоходовБУ  			 = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаНДСПоРеализации 	 = ПланыСчетов.Типовой.ПустаяСсылка();
		
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоДоходовБУ" + СчетчикЦикла] = Неопределено;
			СтрокаТЧ["СубконтоСписанияСебестоимостиБУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаБУВСтрокеУслуг

// Процедура заполнения счетов налогового учета в строке услуг
//
Процедура ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ)
	
	Если ЗаполнятьНУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаНУ 					= СчетаУчета.СчетУчетаНУ;		
		СтрокаТЧ.СчетДоходовНУ  				= СчетаУчета.СчетДоходовОтРеализацииНУ;
		СтрокаТЧ.СчетСписанияСебестоимостиНУ 	= СчетаУчета.СчетСебестоимостиПриРеализацииНУ;
		
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");			
		ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТЧ, СчетаУчета, "СубконтоСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");					
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		СтрокаТЧ.СчетУчетаНУ 					= ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.СчетДоходовНУ  				= ПланыСчетов.Налоговый.ПустаяСсылка();
		СтрокаТЧ.СчетСписанияСебестоимостиНУ 	= ПланыСчетов.Налоговый.ПустаяСсылка();
		
		Для СчетчикЦикла = 1 По 3 Цикл
			СтрокаТЧ["СубконтоДоходовНУ" + СчетчикЦикла] = Неопределено;
			СтрокаТЧ["СубконтоСписанияСебестоимостиНУ" + СчетчикЦикла] = Неопределено;
		КонецЦикла; 	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаНУВСтрокеУслуг

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа, результат которого
// сохраняется в переменной мСтруктураШапкиДокумента
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
	|СчетУчетаРасчетовСКонтрагентом";//, СчетУчетаРасчетовПоАвансам
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда
		РеквизитыШапки = РеквизитыШапки + ", ВидУчетаНУ";
	КонецЕсли;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УправлениеПроизводством.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, мСтрокаРеквизитыБухУчета);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	мСтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, Новый Структура(РеквизитыШапки), мВалютаРегламентированногоУчета);
	
	РеквизитыШапки = Новый Структура(РеквизитыШапки);
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ОбщегоНазначения.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, мСтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	РеквизитыУсл = "Номенклатура, Количество, Сумма";
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СчетУчетаНДСПоРеализации";					
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";			
		РеквизитыУсл = РеквизитыУсл + ", НДСВидОперацииРеализации";		
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", Новый Структура(РеквизитыУсл), Отказ, Заголовок);
	
	// Получим необходимые данные для проверки заполенения по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");
	
	ТабУслуги = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей).Выгрузить();
	
КонецПроцедуры // ПроверкаРеквизитов()

// Производит заполнение и установку реквизитов налогового учета и НДС в табличной части
//
Процедура ЗаполнитьРеквизитыНалоговогоУчета(СтрокаТабличнойЧасти) Экспорт
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекущийПользователь);
Конецпроцедуры	

// Процедура заполнения счетов учета в строке табличной части услуги
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	
	ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ);
	ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

// Процедура заполнения счетов учета в табличной части услуги
//
Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ)
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ПоддержкаУчетаВременныхРазниц = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, Неопределено) 
									И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, Неопределено);


	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		Если Основание.МатериалыЗаказчика.Количество() = 0  Тогда
			#Если Клиент Тогда
				Сообщить("Требование накладная №" + основание.Номер + " не отражает перемещение давальческого сырья в производство");
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
		
		
		// Заполним реквизиты шапки по документу основанию.
		Организация     	= Основание.Организация;
		мУчетнаяПолитикаПоНалоговомуУчету = Неопределено;
		УчитыватьНДС 		= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, ТекущаяДата(), мУчетнаяПолитикаПоНалоговомуУчету);
		
		Контрагент      	= Основание.Контрагент;
		
		Для Каждого СтрокаОснование Из Основание.МатериалыЗаказчика Цикл
			
			Строка = МатериалыЗаказчика.Добавить();	
			Строка.Номенклатура  =  СтрокаОснование.Номенклатура;
			Строка.СчетУчета     =  СтрокаОснование.СчетПередачи;
			Строка.Количество	   =  СтрокаОснование.Количество;
			
		КонецЦикла;
		
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Организация     = Основание.Организация;
		
		Для Каждого СтрокаОснование Из Основание.Продукция Цикл
			
			СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаОснование.Номенклатура);
			
			Строка = Услуги.Добавить();	
			Строка.Номенклатура  	=  СтрокаОснование.Номенклатура;
			Строка.Содержание 	= Строка.Номенклатура.НаименованиеПолное;
			Строка.Количество	   	=  СтрокаОснование.Количество;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ЭтотОбъект);
			ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();				  
			
			// Заполнение цены зависит от розничности операции.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(Строка, ЭтотОбъект, мВалютаРегламентированногоУчета); 
			
			Строка.Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Строка.Номенклатура, Дата);
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Строка, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Строка, ЭтотОбъект);
			
			СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура);
			
			Строка.СчетДоходовБУ  			 = СчетаУчета.СчетДоходовОтРеализацииБУ;
			Строка.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			Строка.СчетУчетаНДСПоРеализации 	 = СчетаУчета.СчетУчетаНДСПоРеализации;
			Строка.СчетУчетаБУ 				 = СчетаУчета.СчетУчетаБУ;
			
			Строка.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(Строка.Номенклатура,
			ТипЦенПлановойСебестоимости, Дата,
			мВалютаРегламентированногоУчета, 1,, Организация);
			УправлениеПроизводством.ПересчитатьПлановуюСумму(Строка);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(Строка, Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			ЗаполнитьРеквизитыНалоговогоУчета(Строка);
		КонецЦикла;
		
		ДокументОснование = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Если Основание.ПодтвержденДокументамиОтгрузки  Тогда
			#Если Клиент Тогда
				Если Основание.ПодтвержденДокументамиОтгрузки Тогда
					Сообщить("Данные счет-фактуры уже подтверждены документами отгрузки! Ввод на основании не возможен!", СтатусСообщения.Важное);					  
				КонецЕсли;
				
			#КонецЕсли
			
			Возврат;       		
		КонецЕсли;  	
		// Заполним реквизиты шапки по документу основанию.
		
		ДокументОснование = Основание.Ссылка;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Дата						= Основание.ДатаСовершенияОборотаПоРеализации;
		Грузополучатель             = Основание.Контрагент;	 	
		БанковскийСчетОрганизации   = Основание.СчетОрганизации;
		АдресДоставки			    = Основание.ПунктНазначения;
		
		
		// Флаги включения налогов.
		УчитыватьНДС = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, Дата);	
		
		ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();				  
		//заполним совпадающие колонки из та.части Услуги счет-фактуры
		УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект, Основание.Ссылка);
		
		Для Каждого Строка Из Услуги Цикл
			
			Строка.Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Строка.Номенклатура, Дата);
			
			
			СчетаУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(Организация, Строка.Номенклатура);
			
			Строка.СчетДоходовБУ  			 = СчетаУчета.СчетДоходовОтРеализацииБУ;
			Строка.СчетСписанияСебестоимостиБУ = СчетаУчета.СчетСебестоимостиПриРеализацииБУ;
			Строка.СчетУчетаНДСПоРеализации 	 = СчетаУчета.СчетУчетаНДСПоРеализации;
			Строка.СчетУчетаБУ 				 = СчетаУчета.СчетУчетаБУ;
			
			Строка.ПлановаяСтоимость = УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(Строка.Номенклатура,
			ТипЦенПлановойСебестоимости, Дата,
			мВалютаРегламентированногоУчета, 1,, Организация);
			УправлениеПроизводством.ПересчитатьПлановуюСумму(Строка);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(Строка, Истина, УчитыватьКПН И (ПоддержкаУчетаВременныхРазниц ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
			ЗаполнитьРеквизитыНалоговогоУчета(Строка);
		КонецЦикла;        	  
		
	КонецЕсли;             		  
КонецПроцедуры


#Если Клиент Тогда 
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(НазваниеДокумента)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаТаблицыСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента КАК Основание,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Содержание КАК Товар,
	|	РеализацияУслугПоПереработке.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	| РеализацияУслугПоПереработке.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РеализацияУслугПоПереработке.Количество) КАК Количество,
	|	РеализацияУслугПоПереработке.Цена,
	|	СУММА(РеализацияУслугПоПереработке.Сумма) КАК Сумма,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	СУММА(РеализацияУслугПоПереработке.СуммаНДС) КАК СуммаНДС
	
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработке.Содержание,
	|	РеализацияУслугПоПереработке.Номенклатура."+ ТекстКодАртикул + ",
	|	РеализацияУслугПоПереработке.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияУслугПоПереработке.СтавкаНДС,
	|	РеализацияУслугПоПереработке.Цена";
	
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Акт";
	Макет       = ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	НазваниеДокумента = "Акт оказания услуг по переработке ";
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Акт", глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ОбластьМакета.Параметры.Поставщик 				= СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ОбластьМакета.Параметры.Получатель 				= Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;	
	
	ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = СтрокаТабличнойЧасти.КодАртикул;				
		КонецЕсли;            
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	Если ТаблицаУслуги <> Неопределено Тогда
		
		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		
	Иначе
		
		Сумма    = 0;
		СуммаНДС = 0;
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Шапка.УчитыватьНДС Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()
	
// Функция формирует табличный документ с печатной формой отчета о
// продукции, произведенной из давальческого сырья и переданной давальцу
//
// Возвращаемое значение:
//  Табличный документ - печатная форма отчета
//
Функция ПечатьОтчета(ТабЧасть, НазваниеДокумента)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";		
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента КАК Основание,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СтруктурноеПодразделение,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросПродукция = Новый Запрос;
	ЗапросПродукция.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросПродукция.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура."+ТекстКодАртикул+" КАК КодАртикул,
	|	Номенклатура КАК Товар,
	|	Количество,
	|   Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения";
	Если ТабЧасть = "Услуги" Тогда
		ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
		|	,
		|	Цена,
		|	Сумма";
	КонецЕсли;
	ЗапросПродукция.Текст = ЗапросПродукция.Текст + "
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент
	|";
	ТаблицаПродукция = ЗапросПродукция.Выполнить().Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Шапка.Организация, Шапка.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Отчет_о_" + ТабЧасть;
	Макет       = ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	НазваниеДокумента = "Отчет о " + ?(ТабЧасть = "Услуги", "продукции, произведенной из сырья заказчика", "переработанном сырье ");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "Отчет о " + ?(ТабЧасть = "Услуги", "продукции, произведенной из сырья заказчика", "переработанном сырье "), глСписокПрефиксовУзлов);	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(ПредставлениеПоставщика);
	ОбластьМакета.Параметры.Поставщик 				= СтруктурнаяЕдиницаОрганизация;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ПредставлениеПолучателя);
	ОбластьМакета.Параметры.Получатель 				= Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(Шапка.Основание) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Основание");
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести табличную часть
	Если ВыводитьКоды Тогда
		ОбластьМакета  = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТабЧасть + "СКодом");
		ОбластьСтроки  = Макет.ПолучитьОбласть("Строка" + ТабЧасть + "СКодом");
		ОбластьМакета.Параметры.Колонка = Колонка;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ТабЧасть);
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + ТабЧасть);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродукция Цикл	
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		Если ВыводитьКоды Тогда
			ОбластьСтроки.Параметры.КодАртикул = СтрокаТабличнойЧасти.КодАртикул;				
		КонецЕсли;    
		ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	Сумма    = 0;
	
	Если ТабЧасть = "Услуги" Тогда
		Если ТаблицаПродукция <> Неопределено Тогда
			
			Сумма    = ТаблицаПродукция.Итог("Сумма");
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма;
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего продукции " + НомерСтроки
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если ТабЧасть = "МатериалыЗаказчика" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
	
КонецФункции // ПечатьОтчетаОпродукции()

// Функция формирует табличный документ унифицированной формы Р-1
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме Р-1.
//
Функция ПечатьР1()

	ЗапросДок = Новый Запрос;
	ЗапросДок.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросДок.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияУслугПоПереработке.Номер,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента КАК Основание,
	|	РеализацияУслугПоПереработке.Контрагент КАК Заказчик,
	|	РеализацияУслугПоПереработке.Организация КАК Исполнитель,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.СтруктурноеПодразделение,
	|	РеализацияУслугПоПереработке.СуммаДокумента,
	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	|	РеализацияУслугПоПереработке.УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.Ответственный.ФизЛицо КАК Ответственный,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	РеализацияУслугПоПереработке.ДатаНачалаОтчетногоПериода КАК ДатаНачалаОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ДатаОкончанияОтчетногоПериода КАК ДатаОкончанияОтчетногоПериода,
	|	РеализацияУслугПоПереработке.ПереченьДокументации КАК ПереченьДокументации
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Док = ЗапросДок.Выполнить().Выбрать();
	Док.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияУслугПоПереработкеУслуги.НомерСтроки) КАК НомерСтроки,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Содержание,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Код КАК УслугаКод,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.Количество) КАК Количество,
	|	РеализацияУслугПоПереработкеУслуги.Цена,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.Сумма) КАК Сумма,
	|	СУММА(РеализацияУслугПоПереработкеУслуги.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
	|ГДЕ
	|	РеализацияУслугПоПереработкеУслуги.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура,
	|	РеализацияУслугПоПереработкеУслуги.Содержание,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Код,
	|	РеализацияУслугПоПереработкеУслуги.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаНДС)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаСтрокУслугиИтоги = ЗапросУслуги.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаСтрокУслугиИтоги.Следующий();
	
	ВыборкаСтрокУслуги = ВыборкаСтрокУслугиИтоги.Выбрать();

	ЗапросМатериалы = Новый Запрос;
	ЗапросМатериалы.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	ЗапросМатериалы.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ЗапросМатериалы.Текст =  
	"ВЫБРАТЬ
	|	МИНИМУМ(РеализацияУслугПоПереработкеМатериалыЗаказчика.НомерСтроки) КАК НомерСтроки,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.Код КАК УслугаКод,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета,
	|	СУММА(РеализацияУслугПоПереработкеМатериалыЗаказчика.Количество) КАК Количество,
	|	СУММА(-1 * ТиповойОбороты.СуммаОборот) КАК СуммаОборот
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.МатериалыЗаказчика КАК РеализацияУслугПоПереработкеМатериалыЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(, , Регистратор, , &ВидыСубконто, , , ) КАК ТиповойОбороты
	|		ПО РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура = ТиповойОбороты.Субконто1
	|			И РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка = ТиповойОбороты.Регистратор
	|			И РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета = ТиповойОбороты.Счет
	|ГДЕ
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.Номенклатура.Код,
	|	РеализацияУслугПоПереработкеМатериалыЗаказчика.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	ОБЩИЕ";
	
	ВыборкаСтрокМатериалыЗаказчикаИтоги = ЗапросМатериалы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ВыборкаСтрокМатериалыЗаказчикаИтоги.Следующий();
	
	ВыборкаСтрокМатериалыЗаказчика = ВыборкаСтрокМатериалыЗаказчикаИтоги.Выбрать();
    	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	//формирование печатной формы документа

	Макет = ПолучитьОбщийМакет("Р1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Итого 			 = Макет.ПолучитьОбласть("Итого");
	Запасы 			 = Макет.ПолучитьОбласть("Запасы");
	Подвал			 = Макет.ПолучитьОбласть("Подвал");	
			
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Р1";

	////////////////////////////////////////////////////////////////////////
		
	// Выведем шапку документа
	СведенияОбОрганизации = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Руководители 		  = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.Дата);
	
	Шапка.Параметры.Заполнить(Док);
	
	// Организация-исполнитель
	ПредставлениеИсполнителя 				 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеИсполнителя = ПредставлениеИсполнителя;
	Шапка.Параметры.ОрганизацияРНН_БИН		 = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	// Организация-сдатчик
	СведенияОбОрганизацииЗаказчике 		   = ОбщегоНазначения.СведенияОЮрФизЛице(Док.Заказчик, Док.Дата);
	ПредставлениеЗаказчика 				   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,", , Док.Дата, "ru");
	Шапка.Параметры.ПредставлениеЗаказчика = ПредставлениеЗаказчика;
	Шапка.Параметры.КонтрагентРНН_БИН	   = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизацииЗаказчике, "БИН_ИИН,", Ложь, Док.Дата, "ru");
	
	//Номер, Дата
	Шапка.Параметры.ДатаДокумента  = Формат(Док.Дата, "ДЛФ=Д");
	Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект.Ссылка, глСписокПрефиксовУзлов); 
	
	//   Договор 
	Шапка.Параметры.ДокументОснование = Док.Основание;
	
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	ИтогоКоличество = 0;
	ИтогоСуммаНДС 	= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоСумма 		= 0;
	
	НомерСтроки = 1;
	
	УчитыватьНДС_     = Док.УчитыватьНДС;
	СуммаВключаетНДС_ = Док.СуммаВключаетНДС;

	Пока ВыборкаСтрокУслуги.Следующий() Цикл

		Количество = ВыборкаСтрокУслуги.Количество;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если Не УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			// Выведем переносимую часть заголовка таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаСтрокУслуги);
		СтрокаТаблицы.Параметры.НомерПП = НомерСтроки;
		
		Если ЗначениеЗаполнено(ВыборкаСтрокУслуги.Содержание) Тогда 
			СтрокаТаблицы.Параметры.Наименование = ВыборкаСтрокУслуги.Содержание;
		Иначе 
			СтрокаТаблицы.Параметры.Наименование = ?(ЗначениеЗаполнено(ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное), ВыборкаСтрокУслуги.Номенклатура.НаименованиеПолное, ВыборкаСтрокУслуги.Номенклатура);
		КонецЕсли;
		
		СтрокаТаблицы.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаСтрокУслуги.ЕдиницаИзмерения;
			
		Если УчитыватьНДС_ И НЕ СуммаВключаетНДС_ Тогда 
			
			СтрокаТаблицы.Параметры.Цена = Окр((ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС) / ВыборкаСтрокУслуги.Количество, 2) ;

			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма + ВыборкаСтрокУслуги.СуммаНДС;
			
		Иначе 
			СтрокаТаблицы.Параметры.Сумма = ВыборкаСтрокУслуги.Сумма;

			ИтогоСумма = ИтогоСумма + ВыборкаСтрокУслуги.Сумма;
		КонецЕсли;
	
		ИтогоКоличество = ИтогоКоличество + Количество;
		
		ТабДокумент.Вывести(СтрокаТаблицы);

		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Итоги
	
	Итого.Параметры.ИтогоСумма 		= ИтогоСумма;
	Итого.Параметры.ИтогоКоличество	= ИтогоКоличество;
	
    ТабДокумент.Вывести(Итого);
	
	//Запасы
	Запасы.Параметры.Запасы = "";
	
	Пока ВыборкаСтрокМатериалыЗаказчика.Следующий() Цикл
		
		Запасы.Параметры.Запасы = Запасы.Параметры.Запасы + ВыборкаСтрокМатериалыЗаказчика.Номенклатура + "; " + ВыборкаСтрокМатериалыЗаказчика.Количество + " " + ВыборкаСтрокМатериалыЗаказчика.ЕдиницаИзмерения + "; " + ВыборкаСтрокМатериалыЗаказчика.СуммаОборот+ " " + ЭтотОбъект.ВалютаДокумента+". ";	
				
	КонецЦикла;
	
	Запасы.Параметры.Заполнить(Док);
	
	ТабДокумент.Вывести(Запасы);
	
	// Подвал
	Если ЗначениеЗаполнено(Док.Ответственный) Тогда 
		ДанныеМОЛ = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный, Док.Дата);
		Подвал.Параметры.ДолжностьОтветственного = ДанныеМОЛ.Должность;
		Подвал.Параметры.ФИООтветственного       = ДанныеМОЛ.Представление;
	КонецЕсли;
	Подвал.Параметры.ДатаПринятия                = Формат(Док.Дата, "ДЛФ=Д");
		
	ТабДокумент.Вывести(Подвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьР1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	НазваниеДокумента = "";
	Если ИмяМакета = "Акт" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "Продукция" Тогда
		
		ТабДокумент = ПечатьОтчета("Услуги", НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "Материалы" Тогда
		
		ТабДокумент = ПечатьОтчета("МатериалыЗаказчика", НазваниеДокумента);
		
	ИначеЕсли ИмяМакета = "Р1" Тогда
		
		ТабДокумент = ПечатьР1();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, НазваниеДокумента), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Акт, Продукция, Материалы, Р1", "Акт об оказании услуг", "Отчет о продукции", "Отчет о материалах", "Р-1 (акт выполненных работ)");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция подготовки таблицы услуг
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаУслуг.Колонки.СчетСписанияСебестоимостиБУ.Имя = "КорСчетСписанияБУ";
	ТаблицаУслуг.Колонки.СчетСписанияСебестоимостиНУ.Имя = "КорСчетСписанияНУ";
	
	КоэффОплаты      = 0;
	
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияБУ3");
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаУслуг.Колонки.Добавить("КорСубконтоСписанияНУ3");
	ТаблицаУслуг.Колонки.Добавить("ДокументОприходования");
	ТаблицаУслуг.Колонки.Добавить("Регистратор");
	ТаблицаУслуг.Колонки.Добавить("Организация");
	ТаблицаУслуг.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаУслуг.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаУслуг.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаУслуг.Колонки.Добавить("НоменклатураДляВыручки");
	
	ТаблицаУслуг.Колонки.Добавить("КоэффОплаты");
	
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		
		Если СтрокаТаблицы.СчетДоходовБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура) = Неопределено Тогда
			СтрокаТаблицы.НоменклатураДляВыручки = Неопределено;
		Иначе
			СтрокаТаблицы.НоменклатураДляВыручки = СтрокаТаблицы.Номенклатура;
		КонецЕсли;
		
		Если СтрокаТаблицы.СчетДоходовБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НоменклатурныеГруппы) = Неопределено Тогда
			СтрокаТаблицы.НоменклатурнаяГруппа = Неопределено;
		Иначе
			СтрокаТаблицы.НоменклатурнаяГруппа = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
		
		СтрокаТаблицы.КорСубконтоСписанияБУ1 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ1;
		СтрокаТаблицы.КорСубконтоСписанияБУ2 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ2;
		СтрокаТаблицы.КорСубконтоСписанияБУ3 = СтрокаТаблицы.СубконтоСписанияСебестоимостиБУ3;		
		
		СтрокаТаблицы.КорСубконтоСписанияНУ1 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ1;
		СтрокаТаблицы.КорСубконтоСписанияНУ2 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ2;
		СтрокаТаблицы.КорСубконтоСписанияНУ3 = СтрокаТаблицы.СубконтоСписанияСебестоимостиНУ3;
	КонецЦикла;
	
	ТаблицаУслуг.ЗаполнитьЗначения(КоэффОплаты,      						   "КоэффОплаты");
	ТаблицаУслуг.ЗаполнитьЗначения(ЭтотОбъект,                                 "Регистратор");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        "Организация");
	ТаблицаУслуг.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПодготовитьТаблицуУслуг()

// Функция подготовки таблицы материалов
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)
	
	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	ТаблицаМатериалов.Колонки.Добавить("ДокументОприходования");
	ТаблицаМатериалов.Колонки.Добавить("Регистратор");
	ТаблицаМатериалов.Колонки.Добавить("Склад");
	ТаблицаМатериалов.Колонки.Добавить("Контрагент");
	ТаблицаМатериалов.Колонки.Добавить("Организация");	
	ТаблицаМатериалов.Колонки.Добавить("СтруктурноеПодразделение");
	
	
	ТаблицаМатериалов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаМатериалов.Колонки.Добавить("ДоговорПоставщика");
	ТаблицаМатериалов.Колонки.Добавить("ОтражениеВНУ");
	ТаблицаМатериалов.Колонки.Добавить("Валюта");
	ТаблицаМатериалов.Колонки.Добавить("ВходящийНДС");
	ТаблицаМатериалов.Колонки.Добавить("КоэффОплаты");
	
	ТаблицаМатериалов.Колонки.Добавить("КорСчетСписанияБУ");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаМатериалов.Колонки.Добавить("КорСубконтоСписанияБУ3");
	
	КоэффОплаты      = 1;
	ТаблицаМатериалов.ЗаполнитьЗначения(КоэффОплаты,   "КоэффОплаты");
	ТаблицаМатериалов.ЗаполнитьЗначения(ЭтотОбъект,    "Регистратор");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,         			"Контрагент");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, 			"ДоговорКонтрагента");
	ТаблицаМатериалов.ЗаполнитьЗначения(Неопределено,                       					"ДоговорПоставщика");
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,        			"Организация");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтруктурноеПодразделение,		"СтруктурноеПодразделение");
	
	ТаблицаМатериалов.ЗаполнитьЗначения(ПланыСчетов.Типовой.ПустаяСсылка(),    				"КорСчетСписанияБУ");
	Возврат ТаблицаМатериалов;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СуммаПлановая");
	СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		СтруктураОбязательныхПолей.Вставить("НДСВидОперацииРеализации");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		СтруктураОбязательныхПолей.Вставить("СчетСписанияСебестоимостиНУ");
	КонецЕсли;	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	// Формирование движений регистров
	ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, Заголовок, Отказ,РежимПроведения);
	// признак "отражать в налоговом учете" пока не отрабатываем, поэтому установим "Ложь"
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(ТаблицаПоМатериалам, Истина, Ложь, Ложь, Отказ);
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		ПроцедурыБухгалтерскогоУчета.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ);
	КонецЕсли; // Учет курсовых разниц
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ДвиженияПоТабличнойЧастиУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, Заголовок, Отказ, РежимПроведения)
	
	Если ТаблицаПоУслугам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам,Отказ, Заголовок, РежимПроведения);
	
	ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиУслуги()

// Процедура формерует движения  регистров выпуска продукции услуг
//
Процедура ДвиженияРегистровВыпускаПродукцииУслуг(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	ДвиженияВыпускПродукцииУслугБУ = Движения.ВыпускПродукцииУслугБухгалтерскийУчет;
	ТаблицаДвиженийВыпускБУ        = ДвиженияВыпускПродукцииУслугБУ.Выгрузить();
	ТаблицаДвиженийВыпускБУ.Очистить();
	
	ДвиженияВыпускПродукцииУслугНУ = Движения.ВыпускПродукцииУслугНалоговыйУчет;
	ТаблицаДвиженийВыпускНУ        = ДвиженияВыпускПродукцииУслугНУ.Выгрузить();
	ТаблицаДвиженийВыпускНУ.Очистить();
	
	
	
	ПроводкиБУ  = Движения.Типовой;
	ПроводкиНУ  = Движения.Налоговый;
	
	Для каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		// Отражение в бухгалтерском регистре выпуска продукции.
		НоваяПроводка = ПроводкиБУ.Добавить();
		
		НоваяПроводка.Период       = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Организация  = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Сумма        = СтрокаУслуги.СуммаПлановая;
		НоваяПроводка.Содержание   = "Затраты от реализации услуг перераб.дав.сырья в план.ценах";
		НоваяПроводка.НомерЖурнала = "";
		
		НоваяПроводка.СчетДт   = СтрокаУслуги.КорСчетСписанияБУ;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаУслуги.СубконтоСписанияСебестоимостиБУ3);		 
		
		НоваяПроводка.СчетКт   = СтрокаУслуги.СчетУчетаБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, СтрокаУслуги.Номенклатура);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
		
		НоваяПроводка.КоличествоКт = СтрокаУслуги.Количество;
		
		СтрокаДвижения = ТаблицаДвиженийВыпускБУ.Добавить();
		
		СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
		СтрокаДвижения.СчетЗатрат           = СтрокаУслуги.СчетУчетаБУ;
		СтрокаДвижения.СчетСписания         = СтрокаУслуги.КорСчетСписанияБУ;
		
		СтрокаДвижения.СубконтоСписания1    = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ1;
		СтрокаДвижения.СубконтоСписания2    = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ2;
		СтрокаДвижения.СубконтоСписания3    = СтрокаУслуги.СубконтоСписанияСебестоимостиБУ3;
		
		СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
		СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;	
		
		СтрокаДвижения.СтруктурноеПодразделение = СтруктурноеПодразделение;
		
		Если  СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
			
			
			// Отражение в налоговом регистре выпуска продукции.
			НоваяПроводка = ПроводкиНУ.Добавить();
			
			НоваяПроводка.Период       = СтруктураШапкиДокумента.Дата;
			НоваяПроводка.Организация  = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Сумма        = СтрокаУслуги.СуммаПлановая;
			НоваяПроводка.Содержание   = "Затраты от реализации услуг перераб.дав.сырья в план.ценах";
			НоваяПроводка.НомерЖурнала = "";
			
			НоваяПроводка.СчетДт   = СтрокаУслуги.КорСчетСписанияНУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаУслуги.СубконтоСписанияСебестоимостиНУ3);		 
			
			НоваяПроводка.СчетКт   = СтрокаУслуги.СчетУчетаНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, 1, СтрокаУслуги.Номенклатура);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
			
			НоваяПроводка.КоличествоКт = ?(НоваяПроводка.СчетКт.Количественный, СтрокаУслуги.Количество, 0);       		
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(НоваяПроводка, ВидУчетаНУ);	
			
			СтрокаДвижения = ТаблицаДвиженийВыпускНУ.Добавить();
			
			СтрокаДвижения.Организация          = СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.Продукция            = СтрокаУслуги.Номенклатура;
			СтрокаДвижения.СчетЗатрат         	= СтрокаУслуги.СчетУчетаНУ;
			СтрокаДвижения.СчетСписания      	= СтрокаУслуги.КорСчетСписанияНУ;
			
			СтрокаДвижения.СубконтоСписания1    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ1;
			СтрокаДвижения.СубконтоСписания2    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ2;
			СтрокаДвижения.СубконтоСписания3    = СтрокаУслуги.СубконтоСписанияСебестоимостиНУ3;
			
			СтрокаДвижения.Количество           = СтрокаУслуги.Количество;
			СтрокаДвижения.ПлановаяСтоимость    = СтрокаУслуги.СуммаПлановая;
			СтрокаДвижения.ВидУчета        		= НоваяПроводка.ВидУчетаДт;  
			
			СтрокаДвижения.СтруктурноеПодразделение = СтруктурноеПодразделение;
		КонецЕсли;    	
	КонецЦикла;
	
	ДвиженияВыпускПродукцииУслугБУ.мПериод = Дата;
	ДвиженияВыпускПродукцииУслугБУ.мТаблицаДвижений = ТаблицаДвиженийВыпускБУ;
	ДвиженияВыпускПродукцииУслугБУ.ДобавитьДвижение();
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ  И  СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
		ДвиженияВыпускПродукцииУслугНУ.мПериод = Дата;
		ДвиженияВыпускПродукцииУслугНУ.мТаблицаДвижений = ТаблицаДвиженийВыпускНУ;
		ДвиженияВыпускПродукцииУслугНУ.ДобавитьДвижение();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура формирует движения регистров по табличной части Услуги
//
Процедура ФормированиеПроводокПоОтражениюВыручкиИНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = Дата;
	НомерЖурнала   = "";
	
	ПроводкиБУ  = Движения.Типовой;
	ПроводкиНУ  = Движения.Налоговый;
	
	//Возможны корректировки таблиц при расчетах в у.е.
	ТаблицаАвансов = УправлениеВзаиморасчетами.ЗачетАванса(ЭтотОбъект,СтруктураШапкиДокумента,Истина, мВалютаРегламентированногоУчета, Новый Структура("ТаблицаПоУслугам",ТаблицаПоУслугам), Отказ,Заголовок,"АВ", мУчетнаяПолитикаПоБухгалтерскомуУчету);
	
	//Распределение выручки по товарам по партиям
	СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетУчетаНУ, СчетДоходовБУ,
	|СчетДоходовНУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,
	|СубконтоДоходовНУ1, СубконтоДоходовНУ2,СубконтоДоходовНУ3,НоменклатурнаяГруппа, НоменклатураДляВыручки,
	|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,СуммаСписания,СуммаПлановая, Количество");
	
	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
	
	// Для дальнейшей работы количество по услугам интереса не представляет.
	//ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
	
	//Дополним данными по таблице улсуг с распределением по партиям
	
	//Развернем таблицу услуг по партиям для распределения выручки по БУ.
	ВыручкаПоУслугам = ТаблицаВыручки.Скопировать();
	ВыручкаПоУслугам.Очистить();
	
	СписокРаспределяемыхКолонок = Новый Структура("Количество,Сумма,СуммаВал,НДС,НДСВал,СуммаБезНДС,СуммаБезНДСВал");
	
	Для каждого СтрокаТаблицыУслуг Из ВыручкаПоУслугам Цикл 
		
		ТаблицаПартийБУ = СтрокаТаблицыУслуг.СписанныеПартииБУ;
		
		Для каждого Партия из ТаблицаПартийБУ Цикл
			
			СтрокаТаблицыВыручки = ВыручкаПоУслугам.Добавить();
			
			Для каждого Колонка из ВыручкаПоУслугам.Колонки Цикл
				
				Если СписокРаспределяемыхКолонок.Свойство(Колонка.Имя) тогда
					СтрокаТаблицыВыручки[Колонка.Имя]= Партия.Количество;
					
				ИначеЕсли Не(ТаблицаПартийБУ.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = Партия[Колонка.Имя];
					
				ИначеЕсли Не(ТаблицаПоУслугам.Колонки.Найти(Колонка.Имя)=Неопределено) тогда
					СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаТаблицыУслуг[Колонка.Имя];
					
				КонецЕсли;
				
			КонецЦикла; // Для каждого Колонка из ВыручкаПоУслугам.Колонки Цикл
			
		КонецЦикла; // Для каждого Партия из ТаблицаПартийБУ Цикл
		
	КонецЦикла; // Для каждого СтрокаТаблицыУслуг Из ВыручкаПоУслугам Цикл 
	
	//Распределим выручку по партиям
	
	ВыручкаПоТоварам = УправлениеВзаиморасчетами.СформироватьКорректирующиеЗаписи(ТаблицаПоУслугам,ВыручкаПоУслугам,СписокРаспределяемыхКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоУслугам,ТаблицаВыручки );
	
	//Фиксация выручки и НДС по БУ (проводки)
	ВыручкаПоБУ = ТаблицаВыручки.Скопировать();
	ВыручкаПоБУ.Свернуть("СчетУчетаНДСПоРеализации, СчетДоходовБУ, СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3,НоменклатурнаяГруппа, НоменклатураДляВыручки, СтавкаНДС","Сумма, СуммаВал,СуммаБезНДС, СуммаБезНДСВал, НДС, НДСВал, Количество");
	
	Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
		
		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      	= ДатаДока;
		Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       	= СтрокаТаблицы.СуммаБезНДС;
		Проводка.НомерЖурнала 	= НомерЖурнала;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
		Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        				СтруктураШапкиДокумента.Контрагент);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           				СтруктураШапкиДокумента.ДоговорКонтрагента);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", 	Ссылка);
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаБезНДСВал;
			
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		
		Проводка.Содержание   = "Выручка от реализации произв. услуг";
		
		Если Проводка.СчетКт.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал;
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      	= ДатаДока;
			Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       	= СтрокаТаблицы.НДС;
			Проводка.Содержание  	= "Выделен НДС";
			Проводка.НомерЖурнала 	= НомерЖурнала;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",Ссылка);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
			
		КонецЕсли;
		
	КонецЦикла; // Для каждого СтрокаТаблицы из ВыручкаПоБУ Цикл
	
	//Фиксация выручки по НУ (проводки)
	// Налоговый учет
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		ВыручкаПоНУ = ТаблицаВыручки.Скопировать();
		ВыручкаПоНУ.Свернуть("СчетУчетаНДСПоРеализации,СчетДоходовНУ, СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3, Номенклатура","СуммаБезНДС, НДС");
		
		Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл			
			// Выручка
			Если СтрокаТаблицы.СуммаБезНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.СуммаБезНДС;
			Проводка.Содержание = "Выручка от реализации";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
			Проводка, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
			
			Проводка.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",                СтруктураШапкиДокумента.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",                   СтруктураШапкиДокумента.ДоговорКонтрагента);			
			
			Проводка.СчетКт      = СтрокаТаблицы.СчетДоходовНУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовНУ3);
			
			Если Проводка.СчетКт.Количественный тогда
				Проводка.КоличествоКт = СтрокаТаблицы.Количество;
			КонецЕсли;	
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(Проводка, ВидУчетаНУ);
			
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      	= ДатаДока;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Сумма       	= СтрокаТаблицы.НДС;
				ПроводкаНУ.Содержание  	= "Выделен НДС";
				ПроводкаНУ.НомерЖурнала 	= НомерЖурнала;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, СтруктураШапкиДокумента.СтруктурноеПодразделение, СтруктураШапкиДокумента.СтруктурноеПодразделение);
				
				ПроводкаНУ.СчетДт      = ПроцедурыНалоговогоУчета.ПолучитьСчетРасчетовСКонтрагентомНУ();
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        			 СтруктураШапкиДокумента.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           			 СтруктураШапкиДокумента.ДоговорКонтрагента);
								
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНДСНачисленногоНУ(СтрокаТаблицы.СчетУчетаНДСПоРеализации, Дата);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"НалогиСборыОтчисления", 	Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимость);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"ВидыПлатежейВБюджетИФонды", Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
				
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли;
			
		КонецЦикла; // Для каждого СтрокаТаблицы из ВыручкаПоНУ Цикл
	КонецЕсли; 
	
	//сформируем движения для регистра "Реализация ТМЗ"
	ТаблицаВыручкиРеализацияТМЗ = ТаблицаВыручки.Скопировать();
	ТаблицаВыручкиРеализацияТМЗ.Свернуть("СчетУчетаБУ, Номенклатура","Сумма, СуммаПлановая, Количество, НДС");
	Для Каждого СтрокаРеализации ИЗ ТаблицаВыручкиРеализацияТМЗ Цикл
		
		ДвижениеРеализации = Движения.РеализацияТМЗ.Добавить();
		
		ДвижениеРеализации.Период = ДатаДока;
		
		// записываем измерения
		ДвижениеРеализации.Организация 				= СтруктураШапкиДокумента.Организация;
		ДвижениеРеализации.СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
		ДвижениеРеализации.СчетУчета 				= СтрокаРеализации.СчетУчетаБУ;
		ДвижениеРеализации.Номенклатура 			= СтрокаРеализации.Номенклатура;
		ДвижениеРеализации.Склад 					= Справочники.Склады.ПустаяСсылка();
		ДвижениеРеализации.Партия 					= Неопределено;
		ДвижениеРеализации.ДоговорКонтрагента 		= СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		//записываем ресурсы
		ДвижениеРеализации.Сумма 	  = СтрокаРеализации.Сумма;
		ДвижениеРеализации.НДС 		  = СтрокаРеализации.НДС;
		ДвижениеРеализации.Стоимость  = СтрокаРеализации.СуммаПлановая;
		ДвижениеРеализации.Количество = СтрокаРеализации.Количество;
		
	КонецЦикла;
				
КонецПроцедуры // ФормированиеПроводокПоОтражениюВыручкиИНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДС"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)
	
	Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
		СтруктураШапкиДокумента.Организация,
		глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
		Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
	КонецЕсли;																
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
	
	УчетНДСИАкциза.СформироватьДвиженияПоРегиструНДС(СтруктураШапкиДокумента, ТаблицаДокумента, "Услуги", Движения, Отказ, ТаблицаПоУчастникамСовместнойДеятельности);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	УчетНДСИАкциза.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	//синхронизируем данные счет-фактуры и документа основания
	УчетНДСИАкциза.СинхронизироватьДанныеДокументаИСчетаФактуры(ЭтотОбъект, Отказ, "СчетФактураВыданный"); 		
	Если Отказ Тогда
		Сообщить("Документ не записан ...", СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПриЗаписи

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	ВедениеУчетаВременныхРазницБалансовымМетодом = ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 		ВедениеУчетаВременныхРазницБалансовымМетодом);
	
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация" , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора" , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Контрагент" 		  , "Организация" , "ДоговорОрганизация");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          				, "Количество");
	СтруктураПолей.Вставить("Сумма"               				, "Сумма");
	СтруктураПолей.Вставить("СуммаПлановая"       				, "СуммаПлановая");
	СтруктураПолей.Вставить("Цена"                				, "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           				, "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 				, "СуммаНДС");
	
	СтруктураПолей.Вставить("НДСВидОперацииРеализации"			, "НДСВидОперацииРеализации");
	СтруктураПолей.Вставить("НомерСтроки"         				, "НомерСтроки");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиБУ"    	, "СчетСписанияСебестоимостиБУ");
	СтруктураПолей.Вставить("СчетСписанияСебестоимостиНУ"    	, "СчетСписанияСебестоимостиНУ");
	
	СтруктураПолей.Вставить("СчетДоходовБУ"       				, "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"       				, "СчетДоходовНУ");
	
	СтруктураПолей.Вставить("СчетУчетаБУ"         				, "СчетУчетаБУ");	
	СтруктураПолей.Вставить("СчетУчетаНУ"         				, "СчетУчетаНУ");
	
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"				, "СубконтоДоходовБУ1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"    			, "СубконтоДоходовБУ2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"    			, "СубконтоДоходовБУ3");
	
	СтруктураПолей.Вставить("СубконтоДоходовНУ1"    			, "СубконтоДоходовНУ1");
	СтруктураПолей.Вставить("СубконтоДоходовНУ2"    			, "СубконтоДоходовНУ2");
	СтруктураПолей.Вставить("СубконтоДоходовНУ3"    			, "СубконтоДоходовНУ3");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ1" 	, "СубконтоСписанияСебестоимостиБУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ2" 	, "СубконтоСписанияСебестоимостиБУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиБУ3"  , "СубконтоСписанияСебестоимостиБУ3");
	
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ1" 	, "СубконтоСписанияСебестоимостиНУ1");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ2" 	, "СубконтоСписанияСебестоимостиНУ2");
	СтруктураПолей.Вставить("СубконтоСписанияСебестоимостиНУ3" 	, "СубконтоСписанияСебестоимостиНУ3");
	
	СтруктураПолей.Вставить("СчетУчетаНДСПоРеализации"  		, "СчетУчетаНДСПоРеализации");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	// Подготовим таблицу материалам для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НомерСтроки" , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить("Количество"  , "Количество");
	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчета");
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "МатериалыЗаказчика", СтруктураПолей);
	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоМатериалам, Отказ, Заголовок);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);									 
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Истина, "СчетФактураВыданный");
		Если НЕ Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	Если  НЕ Отказ Тогда
		УчетНДСИАкциза.СинхронизацияПризнакаПроведенияУСчетаФактуры(Ссылка, Отказ, Ложь, "СчетФактураВыданный");
	КонецЕсли;	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	// Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
		
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();