////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

// переменные для управления реквизитами налогового учета
Перем мУчетнаяПолитикаПоНалоговомуУчету Экспорт;
Перем мУчетнаяПолитикаПоБухгалтерскомуУчету Экспорт;

Перем мВалютаРегламентированногоУчета;
Перем ТаблицаТекущегоСостояния;

Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьАктСписанияНМА()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеНМА.Номер КАК НомерДокумента,
	|	СписаниеНМА.Дата КАК ДатаДокумента,
	|	СписаниеНМА.Организация,
	|	СписаниеНМА.СтруктурноеПодразделение,
	|	СписаниеНМА.Ответственный,
	|	СписаниеНМА.СчетЗатратБУ КАК СчетСписания,
	|	СписаниеНМА.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	|	СписаниеНМА.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	|	СписаниеНМА.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	|	СписаниеНМА.СуммаНУ,
	|	ДвиженияТиповой.СчетКт КАК Счет,
	|	ДвиженияТиповой.Сумма КАК Сумма,
	|	СписаниеНМА.НематериальныйАктив,
	|	СписаниеНМА.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ВЫРАЗИТЬ(СписаниеНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование
	|ИЗ
	|	Документ.СписаниеНМА КАК СписаниеНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			ТиповойДвиженияССубконто.СчетДт КАК СчетДт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.СчетДт) КАК ДвиженияТиповой
	|		ПО СписаниеНМА.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	|			И СписаниеНМА.НематериальныйАктив = ДвиженияТиповой.СубконтоКт1
	|ГДЕ
	|	СписаниеНМА.Ссылка = &ТекущийДокумент";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	
	СтруктурнаяЕдиницаОрганизация = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	//установим альбомный формат по умолчанию
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеНМА_АктСписания";

	Макет = ПолучитьМакет("АктСписания");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка"); 	
	ОбластьМакета.Параметры.Заполнить(Док);
	ОбластьМакета.Параметры.Ответственный = Док.Ответственный.ФизЛицо.Наименование;
	ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДокумента), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ОрганизацияНаименование = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим строки накладной
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	СуммаИтог = 0;
	
	ОбластьСтрока.Параметры.Заполнить(Док);
	ОбластьСтрока.Параметры.НомерСтроки = 1;
	ОбластьСтрока.Параметры.Количество = 1;
	ОбластьСтрока.Параметры.Себестоимость = Док.Сумма;
    		
	ОбластьСтрока.Параметры.Субконто = ?(Док.СубконтоЗатратБУ1 = Null, "",Док.СубконтоЗатратБУ1 + Символы.ПС) + 
		                                   ?(Док.СубконтоЗатратБУ2 = Null, "",Док.СубконтоЗатратБУ2 + Символы.ПС) + 
										   ?(Док.СубконтоЗатратБУ3 = Null, "",Док.СубконтоЗатратБУ3);
	ТабДокумент.Вывести(ОбластьСтрока);
	  
	СуммаИтог = Док.Сумма; 
	
	// Выводим итоги накладной
	
	ОбластьИтогов = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтогов.Параметры.СуммаИтог = СуммаИтог;
	
	ТабДокумент.Вывести(ОбластьИтогов);
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии",        "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		
		ДанныеПредседателя = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДокумента);
			
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
		
	Иначе
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
		
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДокумента);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 1 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															 "");
		ОбластьМакета.Параметры.Должность          = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной ДА3
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДА3()
	
		//вспомогательные запросы для формирования печатной формы документа
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента"  , Дата);
	Запрос.УстановитьПараметр("Организация"	   , Организация);
	Запрос.УстановитьПараметр("ПринятКУчету"   , Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеНМА.Номер КАК НомерДок,
	|	СписаниеНМА.Дата КАК ДатаДок,
	|	СписаниеНМА.Организация,
	|	СписаниеНМА.СтруктурноеПодразделение,
	|	СписаниеНМА.Ответственный,
	|	СписаниеНМА.СчетЗатратБУ КАК СчетСписания,
	|	СписаниеНМА.СубконтоЗатратБУ1.Наименование КАК СубконтоЗатратБУ1,
	|	СписаниеНМА.СубконтоЗатратБУ2.Наименование КАК СубконтоЗатратБУ2,
	|	СписаниеНМА.СубконтоЗатратБУ3.Наименование КАК СубконтоЗатратБУ3,
	|	СписаниеНМА.СуммаНУ,
	|	ДвиженияТиповой.СчетКт КАК Счет,
	|	ДвиженияТиповой.Сумма КАК Сумма,
	|	СписаниеНМА.НематериальныйАктив,
	|	СписаниеНМА.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо КАК ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК ИнвентаризационнаяКомиссия,
	|	ВЫРАЗИТЬ(СписаниеНМА.НематериальныйАктив.НаименованиеПолное КАК СТРОКА(1000)) КАК Наименование,
	|	СписаниеНМА.НематериальныйАктив.Код КАК ИнвНомер,
	//|	СостоянияНМАОрганизацийПоступил.Период КАК ДатаПриобретения,
	|	СостоянияНМАОрганизацийПринятКУчету.Период КАК ДатаВводаВЭксплуатацию,
	|	ПервоначальныеСведенияНМАСрезПоследних.Период КАК ДатаПоследнихПараметровАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость
	|ИЗ
	|	Документ.СписаниеНМА КАК СписаниеНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|			СУММА(ТиповойДвиженияССубконто.Сумма) КАК Сумма,
	|			ТиповойДвиженияССубконто.СчетДт КАК СчетДт
	|		ИЗ
	|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &ТекущийДокумент) КАК ТиповойДвиженияССубконто
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТиповойДвиженияССубконто.СчетКт,
	|			ТиповойДвиженияССубконто.СубконтоКт1,
	|			ТиповойДвиженияССубконто.СчетДт) КАК ДвиженияТиповой
	|		ПО СписаниеНМА.СчетЗатратБУ = ДвиженияТиповой.СчетДт
	|			И СписаниеНМА.НематериальныйАктив = ДвиженияТиповой.СубконтоКт1
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	//|		&ДатаДокумента,
	//|		Организация = &Организация
	//|		    И Состояние = &Поступил) КАК СостоянияНМАОрганизацийПоступил
	//|		ПО СписаниеНМА.НематериальныйАктив = СостоянияНМАОрганизацийПоступил.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|		    И Состояние = &ПринятКУчету) КАК СостоянияНМАОрганизацийПринятКУчету
	|		ПО СписаниеНМА.НематериальныйАктив = СостоянияНМАОрганизацийПринятКУчету.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК ПервоначальныеСведенияНМАСрезПоследних
	|		ПО СписаниеНМА.НематериальныйАктив = ПервоначальныеСведенияНМАСрезПоследних.НематериальныйАктив
	|ГДЕ
	|	СписаниеНМА.Ссылка = &ТекущийДокумент";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	ТаблицаИнвентаризационнаяКомиссия = Док.ИнвентаризационнаяКомиссия.Выгрузить();
	СтруктурнаяЕдиницаОрганизация	  = ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Док.Организация, Док.СтруктурноеПодразделение);
	СведенияОбОрганизации			  = ОбщегоНазначения.СведенияОЮрФизЛице(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);

	//формирование печатной формы документа
	
	ТабДокумент						= Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеНМА_ДА3";
	
  	Макет = ПолучитьОбщийМакет("ДА3");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
	ОбластьМакета.Параметры.Заполнить(Док);
	ОбластьМакета.Параметры.ОрганизацияРНН_БИН       = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "БИН_ИИН,", Ложь, Док.ДатаДок, "ru");

	ОбластьМакета.Параметры.НомерДок				 = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект, глСписокПрефиксовУзлов);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ОбщегоНазначения.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	Руководители 							   = ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СтруктурнаяЕдиницаОрганизация, Док.ДатаДок);
	ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.Руководитель;	
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВалютаПечати = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаголовокТаблицы1				   = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
	ЗаголовокТаблицы1.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ЗаголовокТаблицы1);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		// Выведем заголовок таблицы
		ТабДокумент.Вывести(ЗаголовокТаблицы1);
	КонецЕсли;
		
	ОбластьМакета.Параметры.Заполнить(Док);
	
	ОбластьМакета.Параметры.НаимОС = ?(ЗначениеЗаполнено(Док.Наименование),Док.Наименование,Док.НематериальныйАктив);
	
	Если Док.ДатаПоследнихПараметровАмортизации <> Null Тогда 
		ФактическийСрокИспользования						= УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(Док.ДатаПоследнихПараметровАмортизации, Док.ДатаДок); 
		ОбластьМакета.Параметры.ФактическийСрокЭксплуатации = ФактическийСрокИспользования;
	КонецЕсли;
	
	// расчитаем амортизацию
	Если Проведен Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Период"	   , ЭтотОбъект.МоментВремени());  
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НМА"		   , Док.НематериальныйАктив);	
		
		Запрос.Текст="ВЫБРАТЬ
		             |	ЕСТЬNULL(ТиповойОборотыДтКт.СуммаОборот, 0) КАК Сумма
		             |ИЗ
		             |	РегистрБухгалтерии.Типовой.ОборотыДтКт(
		             |			&Период,
		             |			&Период,
		             |			,
		             |			СчетДт В
		             |				(ВЫБРАТЬ
		             |					НМА_БУ.СчетНачисленияАмортизацииБУ КАК СчетАмортизацииБУ
		             |				ИЗ
		             |					РегистрСведений.СчетаУчетаНМА.СрезПоследних(&Период, Организация = &Организация
		             |						И НематериальныйАктив = &НМА) КАК НМА_БУ),
		             |			,
		             |			,
		             |			,
		             |			Организация = &Организация) КАК ТиповойОборотыДтКт";
					 
		Аморт = Запрос.Выполнить().Выбрать();
		Если Аморт.Следующий() Тогда
			СуммаАмортизации = Аморт.Сумма;
		КонецЕсли;
	Иначе
		ТаблицаТекущегоСостоянияНМА = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(Док.Организация,
		                                                                                          Док.СтруктурноеПодразделение, 
																								  Док.НематериальныйАктив,
																								  ЭтотОбъект.МоментВремени());

		ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМАБухРегл(Док.ДатаДок,
		                                                                                   Док.Организация, 
																						   Док.СтруктурноеПодразделение, 
																						   Док.НематериальныйАктив, 
																						   Истина);
																						   
		СтрокаАмортизации = ТаблицаАмортизацииБУ.Найти(Док.НематериальныйАктив,"НМА");
		СтрокаТТС         = ТаблицаТекущегоСостоянияНМА.Найти(Док.НематериальныйАктив,"НМА_БУ");
		
		АмортизацияБУ = 0;
		АмортизацияЗаМесяц = 0;
		Если СтрокаТТС <> Неопределено Тогда
			АмортизацияБУ = СтрокаТТС.АмортизацияБУ;
			Если СтрокаАмортизации <> Неопределено тогда
				АмортизацияЗаМесяц = СтрокаАмортизации.Бух;
			КонецЕсли;
		КонецЕсли;
		
		СуммаАмортизации = АмортизацияБУ + АмортизацияЗаМесяц;
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.НачАмортизация		= СуммаАмортизации;
	ОбластьМакета.Параметры.НачСтоимость  		= Док.ПервоначальнаяСтоимость;
	ОбластьМакета.Параметры.БалансоваяСтоимость = Док.ПервоначальнаяСтоимость - СуммаАмортизации;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета								   = Макет.ПолучитьОбласть("ЗаголовокТаблицы2");
	ОбластьМакета.Параметры.ДокументОснованиеДата  = Формат("""____""________________20__года");
	ОбластьМакета.Параметры.ДокументОснованиеВид   = Формат("приказом (распоряжением)___________________________");
	ОбластьМакета.Параметры.ДокументОснованиеНомер = Формат("_______");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета							= Макет.ПолучитьОбласть("СписокОсмотренных");
	ОбластьМакета.Параметры.ПроизвелаОсмотр = "на основании ________________ произвела осмотр";
	ОбластьМакета.Параметры.НаимОС			= Док.Наименование;
	ТабДокумент.Вывести(ОбластьМакета);
		
	ОбластьМакета = Макет.ПолучитьОбласть("ПричинаСписания");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОборотнаяСторона");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//Печать данных о комисси
	ОбластьМакета = Макет.ПолучитьОбласть("Комиссия");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаКомиссии = Новый Структура();
	ЗаголовокРазделаКомиссии.Вставить("МОЛ"					, "Материально-ответственное лицо:");
	ЗаголовокРазделаКомиссии.Вставить("ПредседательКомиссии", "Председатель комиссии:");
	ЗаголовокРазделаКомиссии.Вставить("ЧленыКомиссии"		, "Члены комиссии:");
	
	// Выведем подпись председателя инвентаризационной комиссии
	ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
	
	Если НЕ (ПредседательКомиссии = Неопределено) Тогда
		ДанныеПредседателя								 = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.ДатаДок);
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = ДанныеПредседателя.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
	Иначе
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.ПредседательКомиссии;
		ОбластьМакета.Параметры.Должность                = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи       = "";
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выведем подписи членов комиссии
	ВыводитьЗаголовок = Истина;
	
	// Сформируем список членов комиссии
	СписокЧленовКомиссии = Новый Массив();
	
	Для Каждого Строка Из ТаблицаИнвентаризационнаяКомиссия Цикл
		Если НЕ Строка.Председатель Тогда
			СписокЧленовКомиссии.Добавить(Строка.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЧленовКомиссии = ПроцедурыУправленияПерсоналом.ДанныеФизЛиц(Док.Организация, СписокЧленовКомиссии, Док.ДатаДок);
	
	// Сначала выведем членов комиссии из выборки
	Для Каждого ЧленКомиссии Из ДанныеЧленовКомиссии Цикл
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
		                                               		 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
													   		 "");
		ОбластьМакета.Параметры.Должность          = ЧленКомиссии.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ЧленКомиссии.Представление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЦикла;
	
	// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
	Если ДанныеЧленовКомиссии.Количество() < 1 Тогда
		
		Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
		КонецЕсли;
		
		ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ?(ВыводитьЗаголовок, 
															 ЗаголовокРазделаКомиссии.ЧленыКомиссии,
															 "");
		ОбластьМакета.Параметры.Должность          = "";
		ОбластьМакета.Параметры.РасшифровкаПодписи = "";
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
		
	КонецЕсли;
		
	Если НЕ УниверсальныеМеханизмы.ПроверитьВыводДляТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
		// Выведем разрыв страницы
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Док.Ответственный.ФизЛицо) Тогда 
		ДанныеОФизЛице							   = ПроцедурыУправленияПерсоналом.ДанныеФизЛица(Док.Организация, Док.Ответственный.ФизЛицо, Док.ДатаДок);
		ОбластьМакета.Параметры.Должность          = ДанныеОФизЛице.Должность;
		ОбластьМакета.Параметры.РасшифровкаПодписи = ДанныеОФизЛице.Представление;
	Иначе
		ОбластьМакета.Параметры.РасшифровкаПодписи = Док.Ответственный;
	КонецЕсли;
		
	ОбластьМакета.Параметры.ЗаголовокРазделаКомиссии = ЗаголовокРазделаКомиссии.МОЛ;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы3");
	ОбластьМакета.Параметры.Валюта = ВалютаПечати;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы3");
	ТабДокумент.Вывести(ОбластьМакета);	
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТаблицы3");
	ТабДокумент.Вывести(ОбластьМакета);
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Валюта			   = ВалютаПечати;
	ОбластьМакета.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтер;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
  	
КонецФункции // ПечатьСписаниеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ДА3" Тогда 
		ТабДокумент = ПечатьДА3();					
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДА3", "ДА-3 (Акт на списание)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

/////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	ОбязательныеРеквизитыШапки = "Организация, НематериальныйАктив, СчетЗатратБУ";
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", СчетЗатратНУ";
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.УчитыватьКПН Тогда			
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", ВидУчетаНУ";
	КонецЕсли;

	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);	

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет, достаточно ли данных в таблице по ОС.
//
Процедура ПроверитьДанныеПоНМА(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("ДатаДокумента", 		 Дата);
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Ссылка", 			 Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПервоначСведения.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ ПервоначальныеСведенияНМА
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК ПервоначСведения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СостоянияНМАОрганизацииСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	               |ПОМЕСТИТЬ НМА_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация
	               |				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)) КАК СостоянияНМАОрганизацииСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	НематериальныйАктив
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаУчетаНМА.НематериальныйАктив,
	               |	СчетаУчетаНМА.Организация,
	               |	СчетаУчетаНМА.СчетУчетаБУ
	               |ПОМЕСТИТЬ ВТ_СчетаУчетаНМА
	               |ИЗ
	               |	РегистрСведений.СчетаУчетаНМА.СрезПоследних(
	               |			&ДатаДокумента,
	               |			НематериальныйАктив = &НематериальныйАктив
	               |				И Организация = &Организация) КАК СчетаУчетаНМА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Счет,
	               |	ТиповойОстатки.Субконто1 КАК НематериальныйАктив,
	               |	ТиповойОстатки.Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение,
	               |	ТиповойОстатки.СуммаОстаток
	               |ПОМЕСТИТЬ ВТ_СтоимостьНМА
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(
	               |			&ДатаДокумента,
	               |			Счет В (ВЫБРАТЬ СчетУчетаБУ ИЗ ВТ_СчетаУчетаНМА),
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |				И Субконто1 В (&НематериальныйАктив)) КАК ТиповойОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписаниеНМА.НематериальныйАктив,
	               |	СписаниеНМА.НематериальныйАктив.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА ПервоначальныеСведенияНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	               |	ВЫБОР
	               |		КОГДА НМА_СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета,
				   |	ВЫБОР
	               |		КОГДА СтоимостьНМА.НематериальныйАктив ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДанныеПоБухгалтерскомуУчету
	               |ИЗ
	               |	Документ.СписаниеНМА КАК СписаниеНМА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	               |		ПО СписаниеНМА.НематериальныйАктив = ПервоначальныеСведенияНМА.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НМА_СнятыеСУчета КАК НМА_СнятыеСУчета
	               |		ПО СписаниеНМА.НематериальныйАктив = НМА_СнятыеСУчета.НематериальныйАктив
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьНМА КАК СтоимостьНМА
	               |		ПО СписаниеНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	               |ГДЕ
	               |	СписаниеНМА.Ссылка = &Ссылка";
	               
	ТаблицаПоНМА = Запрос.Выполнить().Выгрузить();               
				   
	Для Каждого СтрокаНМА Из ТаблицаПоНМА Цикл
		
		Если НЕ СтрокаНМА.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нематериальный актив <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> не отражался в учете по указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если СтрокаНМА.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нематериальный актив <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> снят с учета в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ СтрокаНМА.ЕстьДанныеПоБухгалтерскомуУчету Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для нематериального актива <"+СтрокаНМА.НематериальныйАктив+"> код <" + СокрЛП(СтрокаНМА.Код) + "> не обнаружены данные по бухгалтерскому учету по указнному структурному подразделению организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ПроверитьТаблицуПоОС()

// Выполняет движения по регистру сведений 
// "ОбъектыНалоговогоУчетаФА"
Процедура ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента)
	
	// движения выполняются только в том случае, если объект списывается в налоговом учете
	Если Не СтруктураШапкиДокумента.УчитыватьКПН 
		И СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ СтруктураШапкиДокумента.СнятьСУчетаПоНалогам Тогда
		Возврат;
	КонецЕсли;	
	
	// Движения по регистру ОбъектыНалоговогоУчетаФА
	Движение = Движения.ОбъектыНалоговогоУчетаФА.Добавить();
	Движение.Период               			= СтруктураШапкиДокумента.Дата;
	Движение.ФиксированныйАктив   			= СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.ГруппаНУ			  			= СтруктураШапкиДокумента.ГруппаНУ;
	Движение.ПорядокПогашенияСтоимостиНУ	= СтруктураШапкиДокумента.ПорядокПогашенияСтоимостиНУ;
	Движение.Организация          			= СтруктураШапкиДокумента.Организация;
	Движение.СостояниеФиксированногоАктива 	= Перечисления.ВидыСостоянийФА.Выбыл;     
КонецПроцедуры

// Движения по регистру "ФиксированныеАктивыУчитываемыеОтдельно"
//
Процедура ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента)
	
	// движения выполняются только в том случае, если объект списывается в налоговом учете
	Если Не СтруктураШапкиДокумента.УчитыватьКПН 
		И СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.СнятьСУчетаПоНалогам Тогда
		Возврат;
	КонецЕсли;	
	
	// фиксируем выбытие только того актива, который выбывает, не включившись в состав группы	
	ПризнакОтдельногоУчета = СтруктураШапкиДокумента.ПризнакОтдельногоУчета;
	Если НЕ ПризнакОтдельногоУчета Тогда
		Возврат;
	КонецЕсли;
	
	Движение = Движения.ФиксированныеАктивыУчитываемыеОтдельно.Добавить();
	
	Движение.Период 			= СтруктураШапкиДокумента.Дата;
	Движение.Организация 		= СтруктураШапкиДокумента.Организация;
	Движение.ФиксированныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.ВидЛьготыФА 		= СтруктураШапкиДокумента.ВидЛьготыФА;
	Движение.Событие 			= Перечисления.СобытияФАУчитываемыхОтдельно.Выбытие;
	
КонецПроцедуры // ДвиженияПоРегиструФАУчитываемыеОтдельно()

// Снимает основное средство с учета по земельному, транспортному и имущественному налогам
//
Процедура ДвиженияпоРегистрамМестныхНалогов(СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.СнятьСучетапоНалогам Тогда
		Запрос  = Новый Запрос("ВЫБРАТЬ
		                       |	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог,
							   |	ОбъектыИмущественногоНалогаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаИмущественногоНалога	
		                       |ИЗ
		                       |	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&Дата, Налогоплательщик = &Налогоплательщик
		                       |			И ОбъектНалогообложения = &ОбъектНалогообложения) КАК ОбъектыИмущественногоНалогаСрезПоследних");
							   
		Запрос.УстановитьПараметр("Дата", 					СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Налогоплательщик",		СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ОбъектНалогообложения",  СтруктураШапкиДокумента.НематериальныйАктив);
		Результат = Запрос.Выполнить();
		Если не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если Выборка.НачислятьНалог Тогда
				// Снимаем с учета по налогу на имущество
		
				Движение = Движения.ОбъектыИмущественногоНалога.Добавить();
				Движение.Период 		= СтруктураШапкиДокумента.Дата;
				Движение.Организация 	= СтруктураШапкиДокумента.Организация;
				Движение.ОбъектНалогообложения = СтруктураШапкиДокумента.НематериальныйАктив;
				Движение.НачислятьНалог = Ложь;					
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					Движение.Налогоплательщик 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Выборка.СтруктурнаяЕдиницаИмущественногоНалога,
																							СтруктураШапкиДокумента.Организация,
																							глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																							Перечисления.РазделыНалоговогоУчета.МестныеНалоги);
					
					Движение.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиницаИмущественногоНалога;
				Иначе
					Движение.Налогоплательщик 	= СтруктураШапкиДокумента.Организация;
					Движение.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;			
	КонецЕсли;		
	
КонецПроцедуры	

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	ТекОрганизация	= СтруктураШапкиДокумента.Организация;
	ТекСтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока   		= СтруктураШапкиДокумента.Дата;
	ТекНМА       	= СтруктураШапкиДокумента.НематериальныйАктив;
	// формирование проводок по налоговому учету
	ПризнакФА 		= СтруктураШапкиДокумента.ПризнакФА;
	
	НомерЖурнала	= "НА";
	ПроводкиБУ   = Движения.Типовой;
	ПроводкиНУ   = Движения.Налоговый;
	
	// Движения по регистрам учета НМА и формирование проводок по начислению амортизации и списанию стоимости
	// получим данные о счетах учета и начисления амортизации по НМА
		
	// *Дополняет полями, нужными для отражения выбытия объекта
	Период = Новый МоментВремени(ДатаДока, СтруктураШапкиДокумента.Ссылка);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(ТекОрганизация, ТекСтруктурноеПодразделение, ТекНМА, Период);

	ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМАБухРегл(ДатаДока, ТекОрганизация, ТекСтруктурноеПодразделение, ТекНМА, Истина);
	ТаблицаАмортизацииБУ.Колонки.НМА.Имя = "ОбъектУчета";
	ТаблицаАмортизацииБУ.Колонки.Бух.Имя = "Сумма";
	ТаблицаАмортизацииБУ.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";

	ТабЗатрат    = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииБУ, СтруктураШапкиДокумента,"Бух",НомерЖурнала);
	
	СостояниеНМА = Движения.СостоянияНМАОрганизаций;
	
	СтрокаАмортизации = ТаблицаАмортизацииБУ.Найти(ТекНМА,"ОбъектУчета");
	СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА_БУ");
    БалансоваяСтоимостьНМА = 0;
	
	Если СтрокаТТС <> Неопределено Тогда
		
		
		СчетУчетаСтоимостиБУ   = СтрокаТТС.СчетУчетаБУ;
		СчетУчетаАмортизацииБУ = СтрокаТТС.СчетАмортизацииБУ;

		Если СтрокаАмортизации = Неопределено тогда
			АмортизацияЗаМесяц = 0;
		Иначе
			АмортизацияЗаМесяц = СтрокаАмортизации.Сумма;
		КонецЕсли;
		
		БалансоваяСтоимостьНМА = СтрокаТТС.СтоимостьБУ - СтрокаТТС.АмортизацияБУ - АмортизацияЗаМесяц;
		// списание амортизации Дт (Счет амортизации) Кт (счет учета)
		СуммаПроводки = СтрокаТТС.АмортизацияБУ + АмортизацияЗаМесяц;        
		Если СуммаПроводки <> 0  Тогда

			Проводка = ПроводкиБУ.Добавить();
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			Проводка.Содержание   = "Списана амортизация";
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);
            			
			Проводка.СчетДт       = СчетУчетаАмортизацииБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы"	, ТекНМА);
			Проводка.СчетКт       = СчетУчетаСтоимостиБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы"	, ТекНМА);
			Проводка.Сумма        = СуммаПроводки;

		КонецЕсли;

		// списание остаточной стоимости Дт (Счет затрат) Кт (счет учета)
		СуммаПроводки = СтрокаТТС.СтоимостьБУ - СтрокаТТС.АмортизацияБУ - АмортизацияЗаМесяц;		
		Если СуммаПроводки <> 0 Тогда

			Проводка = ПроводкиБУ.Добавить();
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = ТекОрганизация;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);

			Проводка.Содержание   = "Списана ост. стоимость";
			Проводка.Сумма        = СуммаПроводки;

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетЗатратБУ;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратБУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратБУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратБУ3);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВнеоборотныеАктивы", ТекНМА);
		
			Проводка.СчетКт  = СчетУчетаСтоимостиБУ;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
		КонецЕсли;         
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ Тогда		
		
		Если СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
			Если ПризнакФА Тогда
				ДвиженияПоРегиструФАОрганизации(СтруктураШапкиДокумента);
			КонецЕсли;
			
			ДвиженияПоРегиструФАУчитываемыеОтдельно(СтруктураШапкиДокумента);
			
		КонецЕсли;
		
		Если ПризнакФА Тогда 			
			Если СтруктураШапкиДокумента.СуммаНУ <> 0 Тогда
				// Для фиксированных активов уменьшение стоимостного баланса происходит в регламентных случаях			
				// соответственно уменьщение стоимостного баланса делаем только в случае, если сумма НУ <>0
				// Проводки по налоговому плану счетов
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.НомерЖурнала = НомерЖурнала;
				ПроводкаНУ.Период       = ДатаДока;
				ПроводкаНУ.Организация  = ТекОрганизация;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);
                				
				ПроводкаНУ.Содержание   = "Списание фиксированного актива в налоговом учете";
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтруктураШапкиДокумента.НематериальныйАктив, ТекОрганизация, ДатаДока, ПризнакФА);	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы"	, ТекНМА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);	 
				ПроводкаНУ.Сумма = СтруктураШапкиДокумента.СуммаНУ;			
				ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
			КонецЕсли;	 
			// Временные разницы
			// Если предприятие поддерживает временные разницы
			// образуем временную разницу между суммой списания по БУ и суммой списания актива по НУ
			Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
				ВР = БалансоваяСтоимостьНМА - СтруктураШапкиДокумента.СуммаНУ;
				Если ВР <> 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.НомерЖурнала = НомерЖурнала;
				ПроводкаНУ.Период       = ДатаДока;
				ПроводкаНУ.Организация  = ТекОрганизация;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);
    				
				ПроводкаНУ.Содержание   = "Временная разница при списании ФА в налоговом учете";
				
				ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтруктураШапкиДокумента.НематериальныйАктив, ТекОрганизация, ДатаДока, ПризнакФА);	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы"	, ТекНМА);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
				
				ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;	
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);	 
				
				ПроводкаНУ.Сумма = ВР;			
				ПроводкаНУ.ВидУчетаДт = Справочники.ВидыУчетаНУ.ВР;
				ПроводкаНУ.ВидУчетаКт = Справочники.ВидыУчетаНУ.ВР;

				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли БалансоваяСтоимостьНМА <> 0 Тогда 
			// Списание по НУ балансовой стоимости актива, не подлежащего амортизации в налоговом учете			
			// Проводки по налоговому плану счетов
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.НомерЖурнала = НомерЖурнала;
			ПроводкаНУ.Период       = ДатаДока;
			ПроводкаНУ.Организация  = ТекОрганизация;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
					ПроводкаНУ, ТекСтруктурноеПодразделение, ТекСтруктурноеПодразделение);

			ПроводкаНУ.Содержание   = "Списание внеоборотного актива в налоговом учете";
			// Для внеоборотных активов , не являющихся фиксированными активами организации списание
			// со счета учета выполняется по сумме БУ
			ПроводкаНУ.СчетКт = ПроцедурыНалоговогоУчета.ПолучитьСчетУчетаНУВнеоборотногоАктива(СтруктураШапкиДокумента.НематериальныйАктив, ТекОрганизация, ДатаДока, ПризнакФА);	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВнеоборотныеАктивы"	, ТекНМА);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ВидыДвиженияСтоимостиФА", Перечисления.ВидыДвиженияСтоимостиФА.Выбытие);			
			ПроводкаНУ.Сумма = БалансоваяСтоимостьНМА;
			
			ПроводкаНУ.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;	
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоЗатратНУ1);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоЗатратНУ2);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоЗатратНУ3);			
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);
		КонецЕсли;

    КонецЕсли;
	
	// Движения по регистру СостояниеНМА
	Движение = СостояниеНМА.Добавить();
	Движение.Период              = ДатаДока;
	Движение.НематериальныйАктив = ТекНМА;
	Движение.Организация         = ТекОрганизация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.Списан;     

	//проверка на дублирование состояние НМА
	ТаблицаДвижений = Движения.СостоянияНМАОрганизаций.Выгрузить(); 
	УправлениеВнеоборотнымиАктивами.ПроверкаДублированияЗаписейСостоянийНМА(Ссылка, ТекОрганизация, ТаблицаДвижений, Отказ, Заголовок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Процедура обработчик события проведения докумета
//
Процедура ОбработкаПроведения(Отказ)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаВременныхРазницБалансовымМетодом", 	ВедениеУчетаВременныхРазницБалансовымМетодом);		
	СтруктураШапкиДокумента.Вставить("НеобходимостьОтраженияВНУ", 						УчитыватьКПН И (ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ));
	СтруктураШапкиДокумента.Вставить("ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль", 	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль);
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль);
	

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПроверитьДанныеПоНМА(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		// формирование проводок по налоговому учету
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОбъектыНалоговогоУчетаФА.ГруппаНУ,
		|	ОбъектыНалоговогоУчетаФА.ПорядокПогашенияСтоимостиНУ,
		|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив,
		|	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ВидЛьготыФА,
		|	ВЫБОР
		|		КОГДА ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПризнакОтдельногоУчетаФА
		|ИЗ
		|	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
		|			&НачалоПериода,
		|			Организация = &Организация
		|				И ФиксированныйАктив = &НМА) КАК ОбъектыНалоговогоУчетаФА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
		|				&НачалоПериода,
		|				Организация = &Организация
		|					И ФиксированныйАктив = &НМА) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
		|		ПО ОбъектыНалоговогоУчетаФА.Организация = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Организация
		|			И ОбъектыНалоговогоУчетаФА.ФиксированныйАктив = ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
		|			И ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)");
		Запрос. УстановитьПараметр("НМА",		 	НематериальныйАктив);
		Запрос. УстановитьПараметр("Организация",	Организация);
		Запрос. УстановитьПараметр("НачалоПериода",	Дата);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СтруктураШапкиДокумента.Вставить("ПризнакФА", ЛОЖЬ);
			СтруктураШапкиДокумента.Вставить("ГруппаНУ");		
			СтруктураШапкиДокумента.Вставить("ВидЛьготыФА");
			СтруктураШапкиДокумента.Вставить("ПорядокПогашенияСтоимостиНУ");
			СтруктураШапкиДокумента.Вставить("ПризнакОтдельногоУчета", ЛОЖЬ);		
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтруктураШапкиДокумента.Вставить("ПризнакФА", 					ИСТИНА);
			СтруктураШапкиДокумента.Вставить("ГруппаНУ", 					Выборка.ГруппаНУ);
			СтруктураШапкиДокумента.Вставить("ВидЛьготыФА",					Выборка.ВидЛьготыФА);
			СтруктураШапкиДокумента.Вставить("ПризнакОтдельногоУчета",		Выборка.ПризнакОтдельногоУчетаФА);
			СтруктураШапкиДокумента.Вставить("ПорядокПогашенияСтоимостиНУ", Выборка.ПорядокПогашенияСтоимостиНУ);				
		КонецЕсли;	
	
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
		ДвиженияПоРегистрамМестныхНалогов(СтруктураШапкиДокумента);
		Если Не Отказ Тогда			
			ПроцедурыНалоговогоУчета.ОтразитьПостоянныеРазницыВНУ(ЭтотОбъект, СтруктураШапкиДокумента, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры


мВалютаРегламентированногоУчета 			  = Константы.ВалютаРегламентированногоУчета.Получить();
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОтображатьСтруктурныеПодразделения 		  = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();