////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	//так как нет печатных форм у документа, по умолчанию
	//ТабДокумент = Неопределено
	ТабДокумент = Неопределено;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;  

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	СуммаДокумента = 0;
	СуммаКомиссии = 0;
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание) Экспорт
			
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорПрямогоЗакупаЗерна") Тогда
		Поставщик = Основание.Поставщик;
		СуммаДокумента = Основание.СуммаДокумента;
		//Гарант = Основание.Гарант;
		ДокументОснование = Основание.Ссылка;
		Организация = Основание.Организация;
	//	ЦС_ОбщийПереопределяемый.УстановитьБанковскийСчет(СчетКонтрагента, Поставщик, 	Константы.ВалютаРегламентированногоУчета.Получить());
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Если ДокументОснование.СтатусЗаявки <> Перечисления.цс_СтатусЗаявкиФорвардныйЗакуп.Одобрена тогда
	//	Сообщить("Договор нельзя создавать на основании неодобренных или отклоненных заявок");
	//	Отказ = истина;
	//КонецЕсли;
	//
	//ЦС_ОбщийПереопределяемый.СинхронизацияПометкиНаУдалениеУГарантии(ЭтотОбъект, "цс_ГарантияФЗ");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, ЦС_ОбщегоНазначенияКлиентСерверПовтИсп.ТекущийПользователь(), , ,  ,,);		
	СрокИсполненияДоговора = '20141201';

КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ЦС_РасторгнутыеДоговораФорвардногоЗакупа
	Движение = Движения.ЦС_РасторгнутыеДоговораПрямогоЗакупа.Добавить();
	Движение.ЦС_Договор = ДокументОснование;
	Движение.Организация = Организация;
	Движение.ОснованиеДляРасторжения = ОснованиеДляРасторжения;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

