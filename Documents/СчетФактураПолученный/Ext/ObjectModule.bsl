Перем мВалютаРегламентированногоУчета Экспорт;
Перем ИзмененДоговорКонтрагента Экспорт;
Перем СписокВыбораСчетФактур Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИ ОБЩЕГО НАЗНАЧЕНИЯ 

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ЭлектронныйСчетФактура" Тогда
		ТабДокумент = ЭСФСервер.НоваяПечатнаяФормаЭСФ(Ссылка);
	КонецЕсли;	
	
	Если ТабДокумент <> Неопределено Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры // Печать

#КонецЕсли

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.Сторнирование") Тогда
		Если Не ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
			Сообщить("В документе: " + Основание + " не заполнен документ сторнирование. Нет данных для заполнения счет-фактуры");
			Возврат;
		КонецЕсли;
		
		ЕстьДокумент = Ложь;
		СписокДокументов = ОбщегоНазначения.ПолучитьСписокВводимыхДокументовНаОсновании(Документы.СчетФактураПолученный.ПустаяСсылка().Метаданные());
		Для Каждого Элемент ИЗ  СписокДокументов Цикл
			Если НЕ ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка." + Элемент.Значение) Тогда
				Продолжить;
			Иначе
				ЕстьДокумент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		Если Не ЕстьДокумент Тогда
			Сообщить("Для сторнируемого документа: " + Основание.ДокументОснование + " не предусмотрен ввод счет-фактуры полученной", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДокументОснование				  = Основание.Ссылка;
	Организация 					  = Основание.Организация;
	Дата 							  = Основание.Дата;
	                                             
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") 
			ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС"))
			И ЗначениеЗаполнено(Основание.ДокументОснование) Тогда
			
		ДатаСовершенияОборотаПоРеализации = Основание.ДокументОснование.Дата;	
	Иначе
		ДатаСовершенияОборотаПоРеализации = Основание.Дата;
	КонецЕсли;	
	
	Если Основание.Метаданные().Имя = "ВозвратТоваровПоставщику"
		ИЛИ Основание.Метаданные().Имя = "ВозвратТоваровПоставщикуИзНТТ"  Тогда
		
		ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;
	Иначе
		ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
	КонецЕсли;
	
	ДокументОснование = Основание.Ссылка;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.КорректировкаОборотаПоРеализации Тогда
		ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособПолучения) Тогда
		//создаем электронный СФ, если используется прямой обмен ЭСФ или обмен ЭСФ через XМLфайлы
		Если Константы.ИспользоватьОбменЭСФЧерезAPI.Получить() ИЛИ Константы.ИспользоватьОбменЭСФЧерезXML.Получить() Тогда
			СпособПолучения = Перечисления.СпособыОбменаДокументами.Электронно;
		Иначе
			СпособПолучения = Перечисления.СпособыОбменаДокументами.Бумажно;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОсновнойСчетФактура();
	
	//раз вводим на основани то збудем запрещать пользователю редактировать данные
	ПодтвержденДокументамиОтгрузки = Истина;
	
	//добавим документ-основания в табличную часть
	НоваяСтрока = ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = Основание.Ссылка;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.Сторнирование") Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание.ДокументОснование);
	Иначе
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;
	
	//заполним табличные части
	УчетНДСИАкциза.ЗаполнитьТабличныеЧастиИзДокументаОснования(ЭтотОбъект,Основание.Ссылка);				
	
	СвернутьТабличныеЧасти();
	
	// установим плательщика и покупателя
	Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
	Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);

	
КонецПроцедуры

//Процедура заполняет реквизит "Осн. счет-фактура", если для укзанных документов оснований, были
//уже введены счет-фактуры, т.е. введенная счет-фактура является дополнительной
//
Процедура ЗаполнитьОсновнойСчетФактура() Экспорт
	
	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный ИЛИ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			СписокВыбораСчетФактур = Новый СписокЗначений;
			Для Каждого ДокументОсн Из ДокументыОснования Цикл				
				Если ДокументОсн.ДокументОснование = Неопределено Тогда
					Продолжить;
				КонецЕсли;						
				СчетФактураОсновная = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОсн.ДокументОснование.ДокументОснование,"СчетФактураПолученный");		
				Если  Не ЗначениеЗаполнено(СчетФактураОсновная) Тогда
					Продолжить;
				Иначе
					СписокВыбораСчетФактур.Добавить(СчетФактураОсновная);
				КонецЕсли;				
			КонецЦикла;
			Если СписокВыбораСчетФактур.Количество() = 1  Тогда
				ОсновнойСчетФактура = СписокВыбораСчетФактур[0].Значение;
			Иначе
				ОсновнойСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ОсновнойСчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОснование.ДокументОснование,"СчетФактураПолученный");						
		КонецЕсли;				
	Иначе
		ОсновнойСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;  
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ЭлектронныйСчетФактура", "Электронный счет-фактура");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ИсточникДанных) Экспорт
	
	Если ДатаОборотаВТабличнойЧасти Тогда
		
		СтруктураТабличныхЧастей = Новый Структура("Товары, Услуги, ОС, НМА");
		
		Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
			Для Каждого СтрокаТаблицы Из ЭтотОбъект[КлючЗначение.Ключ] Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) Тогда 
					СтрокаТаблицы.ДатаОборота = Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументыОснования.Количество()=0 
		или не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		
		// Основание не выбрано, установим датой совершения оборота дату выписки счета-фактуры, прочие параметры не определяем
		Если НЕ ЗначениеЗаполнено(ДатаСовершенияОборотаПоРеализации) Тогда
			ДатаСовершенияОборотаПоРеализации = Дата;
		КонецЕсли;
		
		Возврат;
	КонецЕсли; 
	
	Док = ДокументыОснования[0].ДокументОснование;
	
	Если Не ЗначениеЗаполнено(Док) Тогда
		Возврат;
	КонецЕсли;
		
	МетаДок = Док.Метаданные();

	Если НЕ МетаДок.Реквизиты.Найти("ВалютаДокумента") = Неопределено  И Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Док.ВалютаДокумента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) И НЕ МетаДок.Реквизиты.Найти("Организация") = Неопределено Тогда
		Организация = Док.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) И НЕ МетаДок.Реквизиты.Найти("Контрагент") = Неопределено Тогда
		Контрагент = Док.Контрагент;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ МетаДок.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено Тогда
		ДоговорКонтрагента = Док.ДоговорКонтрагента;
		ИзмененДоговорКонтрагента = Истина;  		
	КонецЕсли;      	
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли; 
	
	// установим плательщика и покупателя
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
		Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);
	КонецЕсли;
	
	// Дата совершения оборота = дата выписки документа реализации
	Если НЕ ЗначениеЗаполнено(ДатаСовершенияОборотаПоРеализации) Тогда
		ДатаСовершенияОборотаПоРеализации = Док.Дата;
	КонецЕсли;
	
КонецПроцедуры        

//Процедура сворачивает табличные части документа по одинаковым разрезам
//
Процедура СвернутьТабличныеЧасти() Экспорт
	Если Товары.Количество() > 1 Тогда
		Товары.Свернуть("Номенклатура,Цена,СтавкаНДС, ЕдиницаИзмерения, Коэффициент, НомерГТД", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;
	
	Если Услуги.Количество() > 1 Тогда
		Услуги.Свернуть("Номенклатура,Содержание,Цена,СтавкаНДС", "Количество, Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если ОС.Количество() > 1 Тогда
		ОС.Свернуть("ОсновноеСредство,СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;

	Если НМА.Количество() > 1 Тогда
		НМА.Свернуть("НематериальныйАктив,СтавкаНДС", "Сумма, СуммаНДС, ОборотПоРеализации");
	КонецЕсли;   

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки( Отказ, Заголовок)
	
    // Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	СтруктураОбязательныхПолей.Вставить("Контрагент"); 	
	СтруктураОбязательныхПолей.Вставить("ДатаВходящегоДокумента"); 	
	СтруктураОбязательныхПолей.Вставить("НомерВходящегоДокумента"); 	
	СтруктураОбязательныхПолей.Вставить("ДатаСовершенияОборотаПоРеализации");
	
	Если ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный ИЛИ ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		СтруктураОбязательныхПолей.Вставить("ОсновнойСчетФактура");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                 
	
		// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                 
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"    , "Содержание");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = РезультатЗапросаПоУслугам.Выгрузить();
	
	// Проверим, вводился ли документ на основании АвансовогоОтчета
	НаОснованииАвансовогоОтчета = ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет");
	
	Если НЕ НаОснованииАвансовогоОтчета Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СчетФактураПолученныйДокументыОснования.ДокументОснование) = ТИП(Документ.АвансовыйОтчет)
		|	И СчетФактураПолученныйДокументыОснования.Ссылка = &Ссылка";
		
		Если Запрос.Выполнить().Выбрать().Следующий() Тогда
			НаОснованииАвансовогоОтчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НаОснованииАвансовогоОтчета Тогда
		// Проверить что в табличной части  Услуги нет товаров
		// Здесь товаров быть не должно.
		УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ,Заголовок); 
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	Если НЕ ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура");
	КонецЕсли;

	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
		
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"    , "Количество");
	СтруктураПолей.Вставить("Сумма"         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"     , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"           , "СуммаНДС");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ОС".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "НМА".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента, Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда		
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");			
	КонецЕсли;    		                                                     	
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураОбязательныхПолей, Отказ, Заголовок);
			
КонецПроцедуры

// Проверяет соответствие ключевых реквизитов документа и его оснований
//
Функция ПроверитьРеквизитыДокументовОснований(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Если счет-фактура выписывался на аванс и является более первичным
	// приходные документы не котролируем, так как они не будут синхронизироваться
	// с счетом-фактурой при проведении
	
	Если НЕ СтруктураШапкиДокумента.ПодтвержденДокументамиОтгрузки Тогда
		Возврат Истина;
	КонецЕсли;
	
	// В случае, если у документа несколько документов оснований
	// необходимо, чтобы ключевые реквизиты шапки совпадали в каждом из них.
	// В случае, если документ-основание только один - Счет-фактура может быть переоформлена автоматически.
	
	Если ДокументыОснования.Количество()< 2 Тогда
		Возврат Истина;
	КонецЕсли;
		
	РезультатПроверки = Истина;	
	// Проверка ключевых реквизитов
	Для Каждого СтрокаДокумент Из ДокументыОснования Цикл
		МетаданныеДокументаОснования = СтрокаДокумент.ДокументОснование.Метаданные();
		НачалоСообщения = "Документы-основания, строка:" + СокрЛП(СтрокаДокумент.НомерСтроки);
		
		ЕстьРеквизитКонтрагент 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования);
		ЕстьРеквизитДоговор 		 = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования);
		ЕстьРеквизитВалютаДокумента  = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования);
		
		Если ЕстьРеквизитКонтрагент И НЕ СтруктураШапкиДокумента.Контрагент = СтрокаДокумент.ДокументОснование.Контрагент Тогда
			ТекстСообщения = НачалоСообщения + ". Значение контрагента не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.Контрагент);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;	
		
		Если ЕстьРеквизитДоговор И НЕ СтруктураШапкиДокумента.ДоговорКонтрагента = СтрокаДокумент.ДокументОснование.ДоговорКонтрагента Тогда
			ТекстСообщения = НачалоСообщения + ". Значение договора контрагента не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.ДоговорКонтрагента);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;	
		
		Если ЕстьРеквизитВалютаДокумента И НЕ СтруктураШапкиДокумента.ВалютаДокумента = СтрокаДокумент.ДокументОснование.ВалютаДокумента Тогда
			ТекстСообщения = НачалоСообщения + ". Значение валюты документа не сооветствует значению, установленному в счете-фактуре - " + СокрЛП(СтрокаДокумент.ДокументОснование.ВалютаДокумента);
			ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщения, Отказ, Заголовок);
			
			РезультатПроверки = Ложь;
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат РезультатПроверки;
КонецФункции

// Добавляет движения, которые сторнируют исправляемый счет-фактуру и его дополнительные счета-фактуры.
//
Процедура ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(СтруктураШапкиДокумента, МассивСФПрекратившихДействие)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ОсновнойСчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СторнируемыеСчетаФактуры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ОсновнойСчетФактура = &ОсновнойСчетФактура
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияСчетовФактурПолученных.Период,
	|	СведенияСчетовФактурПолученных.Регистратор,
	|	СведенияСчетовФактурПолученных.Налогоплательщик,
	|	СведенияСчетовФактурПолученных.Организация,
	|	СведенияСчетовФактурПолученных.СтруктурнаяЕдиница,
	|	СведенияСчетовФактурПолученных.СчетФактура,
	|	СведенияСчетовФактурПолученных.СтавкаНДС,
	|	СведенияСчетовФактурПолученных.Контрагент,
	|	СведенияСчетовФактурПолученных.ТМЗ,
	|	СведенияСчетовФактурПолученных.Поставщик,
	|	-СведенияСчетовФактурПолученных.СуммаВВалютеДоговора КАК СуммаВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.СуммаРегл КАК СуммаРегл,
	|	-СведенияСчетовФактурПолученных.СуммаНДСВВалютеДоговора КАК СуммаНДСВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.СуммаНДСРегл КАК СуммаНДСРегл,
	|	-СведенияСчетовФактурПолученных.ОборотПоРеализацииВВалютеДоговора КАК ОборотПоРеализацииВВалютеДоговора,
	|	-СведенияСчетовФактурПолученных.ОборотПоРеализацииРегл КАК ОборотПоРеализацииРегл,
	|	СведенияСчетовФактурПолученных.УчастникСовместнойДеятельности
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурПолученных КАК СведенияСчетовФактурПолученных
	|ГДЕ
	|	СведенияСчетовФактурПолученных.Регистратор В
	|			(ВЫБРАТЬ
	|				СторнируемыеСчетаФактуры.СчетФактура
	|			ИЗ
	|				СторнируемыеСчетаФактуры КАК СторнируемыеСчетаФактуры)
	|	И СведенияСчетовФактурПолученных.Активность = ИСТИНА";	
	
	Запрос.УстановитьПараметр("ОсновнойСчетФактура", СтруктураШапкиДокумента.ОсновнойСчетФактура);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Если исправляемый счет-фактура является исправленным, то сторнируются только движения, которые он сделал.
		// Движения, которые он сторнировал, не сторнируются, т.к. это приведет к двойному сторнированию.		
		Если Выборка.Регистратор = СтруктураШапкиДокумента.ОсновнойСчетФактура
			И Выборка.СчетФактура <> СтруктураШапкиДокумента.ОсновнойСчетФактура Тогда			
			Продолжить;	// Это движение, которое сторнировал исправляемый счет-фактура, его сторнировать не требуется.		
		КонецЕсли;
		
		СтрокаДвижения = Движения.СведенияСчетовФактурПолученных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, Выборка);
		
		Если МассивСФПрекратившихДействие.Найти(Выборка.Регистратор) = Неопределено Тогда
			МассивСФПрекратившихДействие.Добавить(Выборка.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сторнирующие движения записываются тем же периодом, что и сторнируемые движения. Этот период может быть закрыт.
	Движения.СведенияСчетовФактурПолученных.ДополнительныеСвойства.Вставить(ЭСФКлиентСервер.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуОС(РезультатЗапросаПоОС, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаПоОС = РезультатЗапросаПоОС.Выгрузить();
	
	Возврат ТаблицаПоОС;

КонецФункции // ПодготовитьТаблицуОС()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
////
//// Параметры: 
////  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
////  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
////
//// Возвращаемое значение:
////  Сформированная таблиица значений.
////
Функция ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента)

	ТаблицаПоНМА = РезультатЗапросаПоНМА.Выгрузить();
	
	Возврат ТаблицаПоНМА;

КонецФункции // ПодготовитьТаблицуНМА()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

 //Процедура-обработчик события "ОбработкаПроведения" документа
 //
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

		/// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	мУчетнаяПолитикаПоНалоговомуУчету 		= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	мУчетнаяПолитикаПоБухгалтерскомуУчету 	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");
	
	// для плательщиков КПН в любом случае формируются корреспонденции по отражению в налоговом учете
	// если признак "Отражать в НУ" в документе не установлен, то формируется проводка по постоянной разнице
	ОрганизацияПлательщикНалогаНаПрибыль 			= ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоНалоговомуУчету);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль 	= ОрганизацияПлательщикНалогаНаПрибыль и ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);	
	ВедениеУчетаВременныхРазницБалансовымМетодом 	= ПроцедурыНалоговогоУчета.ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, Дата, мУчетнаяПолитикаПоБухгалтерскомуУчету);
		
	СтруктураШапкиДокумента.Вставить("ОрганизацияПлательщикНалогаНаПрибыль", 			ОрганизацияПлательщикНалогаНаПрибыль); 


	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);

	ПроверитьВозможностьПроведения(СтруктураШапкиДокумента, Отказ);	
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			 , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"   			 , "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				 , "Сумма");
	СтруктураПолей.Вставить("НДС"					 , "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации"	 , "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"	 		 , "ДатаОборота");
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"			 , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"   			 , "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"  				 , "Сумма");
	СтруктураПолей.Вставить("НДС"					 , "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации"	 , "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"	 		 , "ДатаОборота");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

    // Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОсновноеСредство".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство"		 , "ОсновноеСредство");
	СтруктураПолей.Вставить("СтавкаНДС"   			 , "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				 , "Сумма");
	СтруктураПолей.Вставить("НДС"					 , "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации"	 , "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"	 		 , "ДатаОборота");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);

    // Получим необходимые данные для проведения и проверки заполенения данные по табличной части "НМА".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив"	 , "НематериальныйАктив");
	СтруктураПолей.Вставить("СтавкаНДС"   		 	 , "СтавкаНДС");
	СтруктураПолей.Вставить("Сумма"   				 , "Сумма");
	СтруктураПолей.Вставить("НДС"					 , "СуммаНДС");
	СтруктураПолей.Вставить("ОборотПоРеализации"	 , "ОборотПоРеализации");
	СтруктураПолей.Вставить("ДатаОборота"	 		 , "ДатаОборота");
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НМА", СтруктураПолей);

	// Подготовим курс регламентированного учета
	КурсВалютыРегламентированногоУчета = ОбщегоНазначения.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);	

	// Подготовим таблицы для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоОС 	 = ПодготовитьТаблицуОС(РезультатЗапросаПоОС		  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	ТаблицаПоНМА 	 = ПодготовитьТаблицуНМА(РезультатЗапросаПоНМА		  , КурсВалютыРегламентированногоУчета, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОС(СтруктураШапкиДокумента	   , Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиНМА(СтруктураШапкиДокумента   , Отказ, Заголовок);
	
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, 	СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоОС, 		СтруктураШапкиДокумента, Истина);
	УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, 		СтруктураШапкиДокумента, Истина);

	
	// Подготовим таблицу УчастникиСовместнойДеятельности для проведения.
	ТаблицаПоУчастникамСовместнойДеятельности = ОбщегоНазначения.СформироватьТаблицуУчастниковСовместнойДеятельности(УчастникиСовместнойДеятельности);

	// Движения по документу
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок);
							
		ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭСФ") Тогда
		ЭСФСервер.ЗаполнитьСчетФактуруПолученный(Основание, ЭтотОбъект);
	ИначеЕсли ТипЗнч(Основание) <> Тип("Структура") И Основание <> Неопределено Тогда	
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры

//Процедура-обработчик события "ПередЗаписью" документа
 //
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	 
	Если Не ОбменДанными.Загрузка  Тогда
			
			//определим сумму документа
			СуммаДокумента  = УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги") 
							+ УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС") + УчетНДСИАкциза.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "НМА");
						
			//на всякий случай, если не заполнены попытемся заполнить
			ОпределениеПараметровСчетаФактуры(ЭтотОбъект);
			// установим плательщика и покупателя
			Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
				Поставщик  = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Контрагент);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
				Покупатель = УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(Организация);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
				ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
			КонецЕсли;
			
			ЭСФСервер.ПередЗаписьюСчетаФактуры(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
			
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭСФСервер.ОбновитьСторнирующиеДокументы(ЭтотОбъект);
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)	
	
	// Проверим возможность отмены проведения.
	// если по каким-либо причинам отмена проведения невозможна, то последующие действия выполнять не нужно
	ПроверитьВозможностьОтменыПроведения(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	ЭСФСервер.ОбновитьДвиженияСторнирующихДокументов(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОС, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Отказ, Заголовок)

	Если Метаданные.Перечисления.Найти("РазделыУчета") <> Неопределено
		И Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		МассивСФПрекратившихДействие = Новый Массив;
		ДобавитьДвиженияСторнирующиеИсправляемыеСчетаФактуры(СтруктураШапкиДокумента, МассивСФПрекратившихДействие);
		ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(СтруктураШапкиДокумента, МассивСФПрекратившихДействие);
	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Работа со структурными подразделениями
	Если мОтображатьСтруктурныеПодразделения Тогда
		ПлательщикНДС = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
																	СтруктураШапкиДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НДС);
	Иначе
		ПлательщикНДС = СтруктураШапкиДокумента.Организация;															
	КонецЕсли;	
	
	СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);

	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоТоварам.Количество() <> 0 Тогда 
		ТаблицаПоТоварам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоТоварам.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
    ПериодДвижений = ?(НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаСовершенияОборотаПоРеализации), СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ДатаСовершенияОборотаПоРеализации);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурПолученных.Добавить();           
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;  
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;	 	
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;	 	
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		 
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент; 
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.Номенклатура; 
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Поставщик 					  = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Поставщик 					  = СтруктураШапкиДокумента.Поставщик; 
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;
					
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		
		СтрокаДвижения.ОборотПоРеализацииРегл 				= СтрокаТаблицы.ОборотПоРеализации;		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора 	= СтрокаТаблицы.ОборотПоРеализацииВал;		
		СтрокаДвижения.СчетФактура							= Ссылка;
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоУслугам.Количество() <> 0 Тогда 
		ТаблицаПоУслугам = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоУслугам.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 

	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурПолученных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.Номенклатура;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Поставщик 					  = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Поставщик 					  = СтруктураШапкиДокумента.Поставщик; 
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;
        		
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		
		СтрокаДвижения.ОборотПоРеализацииРегл 				= СтрокаТаблицы.ОборотПоРеализации;		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора 	= СтрокаТаблицы.ОборотПоРеализацииВал;		
		СтрокаДвижения.СчетФактура							= Ссылка;
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоОС.Количество() <> 0 Тогда 
		ТаблицаПоОС = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоОС.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоОС Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурПолученных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.ОсновноеСредство;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Поставщик 					  = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Поставщик 					  = СтруктураШапкиДокумента.Поставщик; 
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;
		
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		
		СтрокаДвижения.ОборотПоРеализацииРегл 				= СтрокаТаблицы.ОборотПоРеализации;		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора 	= СтрокаТаблицы.ОборотПоРеализацииВал;		
		СтрокаДвижения.СчетФактура							= Ссылка;
	КонецЦикла;
	
	Если ТаблицаПоУчастникамСовместнойДеятельности <> Неопределено И ТаблицаПоНМА.Количество() <> 0 Тогда 
		ТаблицаПоНМА = УчетНДСИАкциза.СформироватьТаблицуНДСПоУчастникамСовместнойДеятельности(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаПоУчастникамСовместнойДеятельности, Истина, Ложь); 
	КонецЕсли;

	ЕстьУчастникСовместнойДеятельности = Не(ТаблицаПоНМА.Колонки.Найти("УчастникСовместнойДеятельности") = Неопределено); 

	Для Каждого СтрокаТаблицы Из ТаблицаПоНМА Цикл	
		
		СтрокаДвижения = Движения.СведенияСчетовФактурПолученных.Добавить();
		ПериодДвиженийПоСтроке = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаОборота) И СтруктураШапкиДокумента.ДатаОборотаВТабличнойЧасти, СтрокаТаблицы.ДатаОборота, ПериодДвижений);
		СтрокаДвижения.Период  = ПериодДвиженийПоСтроке;
		
		СтрокаДвижения.Налогоплательщик	  = СтруктураШапкиДокумента.ПлательщикНДС;
		СтрокаДвижения.Организация		  = СтруктураШапкиДокумента.Организация;		
		СтрокаДвижения.СтруктурнаяЕдиница = СтруктураШапкиДокумента.Организация;		
		
		СтрокаДвижения.СтавкаНДС  = СтрокаТаблицы.СтавкаНДС;		
		СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ТМЗ		  = СтрокаТаблицы.НематериальныйАктив;
		
		Если ЕстьУчастникСовместнойДеятельности Тогда 
			СтрокаДвижения.Поставщик 					  = СтрокаТаблицы.УчастникСовместнойДеятельности;
			СтрокаДвижения.УчастникСовместнойДеятельности = Истина;
		Иначе
			СтрокаДвижения.Поставщик 					  = СтруктураШапкиДокумента.Поставщик; 
			СтрокаДвижения.УчастникСовместнойДеятельности = Ложь;
		КонецЕсли;
		
		СтрокаДвижения.СуммаВВалютеДоговора    = СтрокаТаблицы.СуммаБезНДСВал;
		СтрокаДвижения.СуммаНДСВВалютеДоговора = СтрокаТаблицы.НДСВал;
		
		СтрокаДвижения.СуммаРегл              = СтрокаТаблицы.СуммаБезНДС;
		СтрокаДвижения.СуммаНДСРегл           = СтрокаТаблицы.НДС;
		
		СтрокаДвижения.ОборотПоРеализацииРегл 				= СтрокаТаблицы.ОборотПоРеализации;		
		СтрокаДвижения.ОборотПоРеализацииВВалютеДоговора 	= СтрокаТаблицы.ОборотПоРеализацииВал;		
		СтрокаДвижения.СчетФактура							= Ссылка;
	КонецЦикла;
	
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Добавляет движения, которые отмечают исправляемый счет-фактуру как прекративший действие
//
Процедура ДобавитьДвиженияПоСчетамФактурамПрекратившимДействие(СтруктураШапкиДокумента, МассивСФПрекратившихДействие)
	
	МассивСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(СтруктураШапкиДокумента.Ссылка);
	Для Каждого Сторно Из МассивСторнирований Цикл
		Если НЕ Сторно.Ссылка.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СчетФактура Из МассивСФПрекратившихДействие Цикл
		СтрокаДвижения = Движения.СчетаФактурыПрекратившиеДействие.Добавить();
		СтрокаДвижения.Период = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.СчетФактура = СчетФактура;
		СтрокаДвижения.Состояние = Перечисления.СостоянияДокументов.Аннулирован;
	КонецЦикла;
	
КонецПроцедуры

// Процедура запрещает отмену проведения документа,
// если для него выписаны и проведены исправленные документы
Процедура ПроверитьВозможностьОтменыПроведения(Отказ) Экспорт
		
	// Если текущий документ не актуален (исправлен другим), а так же сам влияет на актуальность др. документов
	// то отменять его проведение без корректировки связанных документов нельзя.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыПрекратившиеДействие.Регистратор
	|ИЗ
	|	РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(, СчетФактура = &Ссылка) КАК СчетаФактурыПрекратившиеДействие";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
				
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			ТекстСообщения = НСтр(
			"ru = 'Невозможно отменить проведение документа: ""%1"",
			|так как для документа проведен связанный документ: ""%2"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект.Ссылка, Выборка.Регистратор);			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект.Ссылка, , , Отказ);
			
		КонецЦикла;
					 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура запрещает проведение документа,
// если связанный с ним исправляемый СФ не проведен
Процедура ПроверитьВозможностьПроведения(СтруктураШапкиДокумента, Отказ) Экспорт
	// Исправленный ЭСФ можно провести только если проведен документ, взамен которого он выписан
	// в противном случае сторно-записи не будут сформированы
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда
		Если НЕ СтруктураШапкиДокумента.ОсновнойСчетФактура.Проведен Тогда			
			ПредставлениеДокумента = СокрЛП(Ссылка);
			ОбщегоНазначения.СообщитьОбОшибке("Исправляемый документ не проведен: " + СокрЛП(СтруктураШапкиДокумента.ОсновнойСчетФактура) + Символы.ПС
		                 + "Проведение исправленного документа невозможно.", Отказ, ПредставлениеДокумента);
		КонецЕсли;		 
	КонецЕсли;			
	
КонецПроцедуры

ИзмененДоговорКонтрагента = Ложь;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();