////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
Перем мСоответствиеПравилОкругления;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Рассчитывает часовую тарифную ставку по строке выборки
Функция ПолучитьЧасовуюТарифнуюСтавку(Выборка)

	Ставка = 0;
	ПродолжительностьРабочейНедели = ?(Выборка.ДлительностьРабочейНедели = NULL, 0, Выборка.ДлительностьРабочейНедели);
	
	Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
		 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням
		 ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда

		// Пересчет месячной тарифной ставки в часовую
		НормаВремени = ПроведениеРасчетов.НормаВремениЗаМесяц(Выборка, Перечисления.ВидыУчетаВремени.ПоЧасам);

		Если ПроведениеРасчетов.ЭтоРасчетПоМинимальнойЗаработнойПлате(Выборка.СпособРасчета) Тогда
			ОкладТариф = Выборка.ОкладТариф * Выборка.РазмерМЗП;
		Иначе
			ОкладТариф = Выборка.ОкладТариф;
		КонецЕсли;
		
		Ставка = ?(НормаВремени > 0, ОкладТариф / НормаВремени, 0);
		
	ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке тогда	

		// Пересчет дневной ставки в часовую
		Ставка = ПроцедурыУправленияПерсоналом.ПолучитьЧасовуюТарифнуюСтавкуНаОсновеДневнойСтавки(Выборка.ОкладТариф, ПродолжительностьРабочейНедели, Выборка.ВидГрафика);
		
	Иначе

		Ставка = Выборка.ОкладТариф;
	
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции // ПолучитьЧасовуюТарифнуюСтавку()

// Функция возвращает правило округления для вида расчета.
//
Функция ПравилоОкругленияВидаРасчета(ВидРасчета) Экспорт

	// сначала смотрим в кэше, если там не найдем, то обратимся к регистру
	ПравилоОкругления = мСоответствиеПравилОкругления[ВидРасчета];
	Если ПравилоОкругления = Неопределено Тогда
	
		ПравилоОкругления = ПроведениеРасчетов.ПолучитьПравилоОкругленияВидаРасчета(ВидРасчета, ПериодРегистрации);
		мСоответствиеПравилОкругления.Вставить(ВидРасчета, ПравилоОкругления);		
	
	КонецЕсли;
	
	Возврат ПравилоОкругления;

КонецФункции // ПравилоОкругленияВидаРасчета()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция СформироватьЗапросДляПерерасчета(ДокументСсылка, ПериодРегистрацииДокумента, Сотрудники = Неопределено, ПоЗаписямПерерасчета = Ложь) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("парамНачало",			НачалоМесяца(ПериодРегистрацииДокумента));
	Запрос.УстановитьПараметр("парамКонец",				КонецМесяца(ПериодРегистрацииДокумента));
	Запрос.УстановитьПараметр("СотрудникиПерерасчета",  Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам",		Ложь);

	Если ЗначениеЗаполнено(Сотрудники) Тогда
		
		Запрос.УстановитьПараметр("СотрудникиПерерасчета", Сотрудники);
		
	ИначеЕсли ПоЗаписямПерерасчета Тогда //  список физлиц для перерасчета получим из таблицы перерасчетов
		
		// получим список сотрудников для перерасчета
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник КАК Ссылка
		|ИЗ
		|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ДокументСсылка
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ДокументСсылка)";
		
		Запрос.УстановитьПараметр("СотрудникиПерерасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	Иначе 
		
		Запрос.УстановитьПараметр("ПоВсемСотрудникам", Истина);
	
	КонецЕсли;
	
	// Прочие параметры запроса
	Запрос.УстановитьПараметр("парамОрганизация", 			 Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация" ,   ОбщегоНазначения.ГоловнаяОрганизация(Организация));





	Запрос.УстановитьПараметр("ВалютаРеглУчета",			 мВалютаРегламентированногоУчета);

	
	ОсновнойТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаСверхурочных.НомерСтроки,
	|	ОплатаСверхурочных.Сотрудник,
	|	ОплатаСверхурочных.ПодразделениеОрганизации,
	|	ОплатаСверхурочных.ДатаНачала,
	|	ОплатаСверхурочных.ДатаОкончания,
	|	ОплатаСверхурочных.ВидРасчета,
	|	ОплатаСверхурочных.Размер,
	|	ОплатаСверхурочных.ОтработаноЧасов,
	|	ОплатаСверхурочных.КоэффициентОплаты,
	|	ОплатаСверхурочных.Результат,
	|	ОплатаСверхурочных.ДополнительныеДанные,
	|	ОплатаСверхурочных.СпособОтраженияВБухучете,
	|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период,
	|	ОплатаСверхурочных.Сторно
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихНазначений
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ОплатаСверхурочных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ОплатаСверхурочных.Сотрудник = РаботникиОрганизации.Сотрудник
	|			И (РаботникиОрганизации.Период <= ОплатаСверхурочных.ДатаНачала)
	|			И (РаботникиОрганизации.Организация = &парамГоловнаяОрганизация)
	|ГДЕ
	|	ОплатаСверхурочных.Ссылка = &ДокументСсылка
	|	И (НЕ ОплатаСверхурочных.Сторно)
	|	И (ОплатаСверхурочных.Сотрудник В (&СотрудникиПерерасчета)
	|			ИЛИ &ПоВсемСотрудникам)
	|	И ОплатаСверхурочных.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСверхурочных.НомерСтроки,
	|	ОплатаСверхурочных.Сотрудник,
	|	ОплатаСверхурочных.ПодразделениеОрганизации,
	|	ОплатаСверхурочных.ДатаНачала,
	|	ОплатаСверхурочных.ДатаОкончания,
	|	ОплатаСверхурочных.ВидРасчета,
	|	ОплатаСверхурочных.Размер,
	|	ОплатаСверхурочных.КоэффициентОплаты,
	|	ОплатаСверхурочных.ОтработаноЧасов,
	|	ОплатаСверхурочных.Результат,
	|	ОплатаСверхурочных.СпособОтраженияВБухучете,
	|	ОплатаСверхурочных.ДополнительныеДанные,
	|	ОплатаСверхурочных.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаСверхурочных.НомерСтроки,
	|	ОплатаСверхурочных.Сотрудник,
	|	ОплатаСверхурочных.ДатаНачала,
	|	МАКСИМУМ(ПлановыеНачисления.Период) КАК ПериодНачисления
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихНачислений
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ОплатаСверхурочных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|		ПО ОплатаСверхурочных.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И (ПлановыеНачисления.Период <= ОплатаСверхурочных.ДатаНачала)
	|			И (ПлановыеНачисления.Организация = &парамГоловнаяОрганизация)
	|			И (ПлановыеНачисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	ОплатаСверхурочных.Ссылка = &ДокументСсылка
	|	И (НЕ ОплатаСверхурочных.Сторно)
	|	И (ОплатаСверхурочных.Сотрудник В (&СотрудникиПерерасчета)
	|			ИЛИ &ПоВсемСотрудникам)
	|	И ОплатаСверхурочных.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаСверхурочных.НомерСтроки,
	|	ОплатаСверхурочных.Сотрудник,
	|	ОплатаСверхурочных.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ОсновноеЗначениеНормаПериодДействия
	|ПОМЕСТИТЬ ВТ_НормыВремениПоГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц = &парамНачало
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ССЫЛКА Справочник.ГрафикиРаботы
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанноеВремя.Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|				ТОГДА ОтработанноеВремя.ЧасовПоНормеОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасовПоТабелюЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ОтработанноеВремя.ВидИспользованияРабочегоВремени.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
	|				ТОГДА ОтработанноеВремя.ЧасовПоНормеОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовПоТабелюЗаМесяцОтклонение
	|ПОМЕСТИТЬ ВТ_НормаВремениПоТабелю
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций.Обороты(
	|			&парамНачало,
	|			&парамКонец,
	|			,
	|			Организация = &парамГоловнаяОрганизация
	|				И (Сотрудник В (&СотрудникиПерерасчета)
	|					ИЛИ &ПоВсемСотрудникам)) КАК ОтработанноеВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанноеВремя.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоследнихНазначений.НомерСтроки,
	|	ДатыПоследнихНазначений.Сотрудник,
	|	ДатыПоследнихНазначений.Сотрудник.Физлицо КАК ФизЛицо,
	|	ДатыПоследнихНазначений.ПодразделениеОрганизации,
	|	ДатыПоследнихНазначений.ДатаНачала,
	|	ДатыПоследнихНазначений.ДатаОкончания,
	|	ДатыПоследнихНазначений.ВидРасчета,
	|	ДатыПоследнихНазначений.Размер,
	|	ДатыПоследнихНазначений.ОтработаноЧасов,
	|	ДатыПоследнихНазначений.КоэффициентОплаты,
	|	ДатыПоследнихНазначений.Результат,
	|	ДатыПоследнихНазначений.СпособОтраженияВБухучете,
	|	ДатыПоследнихНазначений.ДополнительныеДанные,
	|	СписокРаботников.ПодразделениеОрганизации КАК НовоеПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеНачисления.ПериодЗавершения < ДатыПоследнихНазначений.ДатаНачала
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ПлановыеНачисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
	|							И ПоказателиЗавершения.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|						ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Размер, 0)
	|					ИНАЧЕ ЕСТЬNULL(ПлановыеНачисления.Показатель1Завершения, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
	|						ИЛИ Показатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|					ТОГДА ЕСТЬNULL(РазмерТарифныхСтавок.Размер, 0)
	|				ИНАЧЕ ЕСТЬNULL(ПлановыеНачисления.Показатель1, 0)
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА КурсыВалют.Валюта В (ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка), &ВалютаРеглУчета)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалют.Курс / КурсыВалют.Кратность, 1)
	|	КОНЕЦ КАК ОкладТариф,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ПлановыеНачисления.ПериодЗавершения < ДатыПоследнихНазначений.ДатаНачала
	|			ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.СпособРасчета
	|		ИНАЧЕ ПлановыеНачисления.ВидРасчета.СпособРасчета
	|	КОНЕЦ КАК СпособРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам) КАК ВидУчетаВремени,
	|	ЕСТЬNULL(СписокРаботников.ГрафикРаботы.ДлительностьРабочейНедели, 0) КАК ДлительностьРабочейНедели,
	|	СписокРаботников.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|	ЕСТЬNULL(БалансРабочегоВремени.НормаЧасов, НормыВремениПоГрафикам.ОсновноеЗначениеНормаПериодДействия) КАК ОсновноеЗначениеНормаПериодДействия,
	|	ЕСТЬNULL(НормаВремениПоТабелю.НормаЧасовПоТабелюЗаМесяц, 0) КАК НормаЧасовПоТабелюЗаМесяц,
	|	ЕСТЬNULL(НормаВремениПоТабелю.ЧасовПоТабелюЗаМесяцОтклонение, 0) КАК ЧасовПоТабелюЗаМесяцОтклонение,
	|	ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЛОЖЬ КАК ОшибкаВводаОтработанногоВремени
	|ИЗ
	|	ВТ_ДатыПоследнихНазначений КАК ДатыПоследнихНазначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК СписокРаботников
	|		ПО ДатыПоследнихНазначений.Сотрудник = СписокРаботников.Сотрудник
	|			И ДатыПоследнихНазначений.Период = СписокРаботников.Период
	|			И (СписокРаботников.Организация = &парамГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихНачислений КАК ДатыПоследнихНачислений
	|		ПО ДатыПоследнихНазначений.НомерСтроки = ДатыПоследнихНачислений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|		ПО (ДатыПоследнихНачислений.Сотрудник = ПлановыеНачисления.Сотрудник)
	|			И (ДатыПоследнихНачислений.ПериодНачисления = ПлановыеНачисления.Период)
	|			И (ПлановыеНачисления.Организация = &парамГоловнаяОрганизация)
	|			И (ПлановыеНачисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО (ПлановыеНачисления.ВидРасчета = Показатели.Ссылка)
	|			И (Показатели.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ПоказателиЗавершения
	|		ПО (ПлановыеНачисления.ВидРасчетаЗавершения = Показатели.Ссылка)
	|			И (Показатели.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамНачало, ) КАК РазмерТарифныхСтавок
	|		ПО (СписокРаботников.Должность = РазмерТарифныхСтавок.Должность)
	|			И (ПлановыеНачисления.ТарифныйРазряд1 = РазмерТарифныхСтавок.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК КурсыВалют
	|		ПО (КурсыВалют.Период = &парамНачало)
	|			И (ВЫБОР
	|				КОГДА ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ПлановыеНачисления.ПериодЗавершения < ДатыПоследнихНазначений.ДатаНачала
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ПлановыеНачисления.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
	|									ИЛИ ПоказателиЗавершения.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ПлановыеНачисления.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ПлановыеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
	|								ИЛИ Показатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ПлановыеНачисления.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ = КурсыВалют.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормыВремениПоГрафикам КАК НормыВремениПоГрафикам
	|		ПО (СписокРаботников.ГрафикРаботы = НормыВремениПоГрафикам.ГрафикРаботы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БалансРабочегоВремени КАК БалансРабочегоВремени
	|		ПО (СписокРаботников.ГрафикРаботы = БалансРабочегоВремени.ГрафикРаботы)
	|			И (БалансРабочегоВремени.ДатаМесяца = &парамНачало)
	|			И (ЕСТЬNULL(СписокРаботников.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормаВремениПоТабелю КАК НормаВремениПоТабелю
	|		ПО (СписокРаботников.Сотрудник = НормаВремениПоТабелю.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамНачало, ) КАК РегламентированныеРасчетныеПоказатели
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатыПоследнихНазначений.Сторно УБЫВ,
	|	СписокРаботников.Сотрудник.Наименование";

	Запрос.Текст = ОсновнойТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросДляПерерасчета()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//	Физлица		- список значений - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Сотрудники = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	Если НЕ ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	Если Сотрудники = Неопределено Тогда
		// таблица СотрудникиДляПерерасчета
		// Список сотрудников по которым необходимо выполнить перерасчет
		// Поля:
		//		Сотрудник
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		СотрудникиДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.Сотрудник,
		|	Перерасчет.ФизЛицо
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|";
		
		Запрос = Новый Запрос(СотрудникиДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		СотрудникиСписок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
	Иначе
		СотрудникиСписок = Сотрудники;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если СотрудникиСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////
	// Начисления
	НачатьТранзакцию();
	Прочитать();
	Выборка = СформироватьЗапросДляПерерасчета(Ссылка, ПериодРегистрации, СотрудникиСписок).Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = Начисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		
		ПравилоОкругления = ПравилоОкругленияВидаРасчета(СтрокаНачисления.ВидРасчета);
		
		СтрокаНачисления.ПодразделениеОрганизации = Выборка.НовоеПодразделениеОрганизации;
		СтрокаНачисления.Размер = ПолучитьЧасовуюТарифнуюСтавку(Выборка);
		СтрокаНачисления.Результат = ОбщегоНазначения.ОкруглитьЧисло(СтрокаНачисления.Размер * СтрокаНачисления.ОтработаноЧасов * СтрокаНачисления.КоэффициентОплаты, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
	КонецЦикла;
	
	// записываем документ перед запросом для обновления регистров
	Записать();

	Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки(); // только структуру без данных
	КонецЦикла;

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// получим реквизиты табличной части
	РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
	ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать();
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// Заполним записи в наборах записей регистров
		ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;

	// записываем движения по регистрам
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать();

	// свернем таблицы регистров накопления и запишим их в наборы записей
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
		НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
		НаборЗаписей.Записать();
	Конеццикла;
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	//
	НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	Если Сотрудники <> Неопределено Тогда
		НаборЗаписей.Прочитать();
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаПерерасчета из НаборЗаписей Цикл
			Если Сотрудники.НайтиПоЗначению(СтрокаПерерасчета.Сотрудник) <> Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаПерерасчета);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			НаборЗаписей.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники) Экспорт

	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных

	ПериодПерерассчитываемогоДокумента = ИсходныйДокумент.ПериодРегистрации;
	Выборка = СформироватьЗапросДляПерерасчета(ПерерассчитываемыйДокумент, ПериодПерерассчитываемогоДокумента, Сотрудники).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ДатаНачала					= Выборка.ДатаНачала;
		НоваяСтрока.ДатаОкончания				= Выборка.ДатаОкончания;
		НоваяСтрока.ВидРасчета					= Выборка.ВидРасчета;
		НоваяСтрока.Размер						= Выборка.Размер;
		НоваяСтрока.ОтработаноЧасов				= - Выборка.ОтработаноЧасов;
		НоваяСтрока.КоэффициентОплаты			= Выборка.КоэффициентОплаты;
		НоваяСтрока.ДополнительныеДанные		= - Выборка.ДополнительныеДанные;
		НоваяСтрока.Результат					= - Выборка.Результат;
		НоваяСтрока.Сторно						= Истина;
		НоваяСтрока.СпособОтраженияВБухучете	= Выборка.СпособОтраженияВБухучете;
		
		ПравилоОкругления = ПравилоОкругленияВидаРасчета(Выборка.ВидРасчета);
		
		// новая рассчитываемая строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.НовоеПодразделениеОрганизации;
		НоваяСтрока.ДатаНачала					= Выборка.ДатаНачала;
		НоваяСтрока.ДатаОкончания				= Выборка.ДатаОкончания;
		НоваяСтрока.ВидРасчета					= Выборка.ВидРасчета;
		НоваяСтрока.Размер						= Выборка.Размер;
		НоваяСтрока.ОтработаноЧасов				= Выборка.ОтработаноЧасов;
		НоваяСтрока.КоэффициентОплаты			= Выборка.КоэффициентОплаты;
		НоваяСтрока.СпособОтраженияВБухучете	= Выборка.СпособОтраженияВБухучете;
		НоваяСтрока.Авторасчет					= Истина;
	КонецЦикла;
	
	Начисления.Сортировать("Сторно УБЫВ", );
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура рассчитывает ресурсы для начислений
// и заполняет реквизит Результат соответствующих табличных частей документа
Процедура Рассчитать(Сотрудник = Неопределено, КомментироватьРасчет = Ложь) Экспорт

	//Перед вызов процедуры документ должнен быть записан

	Отказ = Ложь;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
	КонецЕсли;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	// записываем документ
	Записать();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация,
																	Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	НаборОсновныеНачисления.мВыполнятьВспомогательныеРасчеты = Ложь;
	
	// запишем данные о начислениях в регистр                                     
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, Сотрудник).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, );
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборОсновныеНачисления);

			Если НЕ (Сотрудник = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	НаборОсновныеНачисления.Записать();
	
	// рассчитаем запись начислений 
	ПроведениеРасчетов.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, , , Налогоплательщик, МассивИндексыСтрокНачисления, КомментироватьРасчет);
	
	Для Каждого СтрокаНачислений Из НаборОсновныеНачисления Цикл
		Если НЕ (СтрокаНачислений.Сторно И ЗначениеЗаполнено(ПерерассчитываемыйДокумент)) Тогда
			Если МассивИндексыСтрокНачисления <> Неопределено И МассивИндексыСтрокНачисления.Количество() <> 0 Тогда
				СтрокаТабличнойЧасти = Начисления.Получить(МассивИндексыСтрокНачисления[0]);
			Иначе
				СтрокаТабличнойЧасти = Начисления.Получить(НаборОсновныеНачисления.Индекс(СтрокаНачислений));
			КонецЕсли;
			СтрокаТабличнойЧасти.Результат 			  = СтрокаНачислений.Результат;
			СтрокаТабличнойЧасти.ДополнительныеДанные = СтрокаНачислений.ДополнительныеДанные;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дата, 
	|	Док.Организация,
	|	ВЫБОР 
	|		КОГДА Док.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА Док.Организация 
	|		ИНАЧЕ Док.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ Как ГоловнаяОрганизация, 
    |	Док.Организация,
	|	ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ПериодРегистрации, 
	|	Ответственный, 
	| 	Ссылка,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И Док.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Док.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель
	|Из 
	|	Документ." + Метаданные().Имя + " КАК Док
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|			&ПериодРегистрации,
	|			Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА	
	|Где 
	|	Ссылка = &ДокументСсылка
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента, Сотрудники = Неопределено)

	Запрос = Новый Запрос;
    МестоРаботыТекст = "";
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
    СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", 				Ссылка);
	Запрос.УстановитьПараметр("Организация", 					ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", СписокСтруктурныхПодразделений);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники",		  		Сотрудники);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель",  ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());

	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
			
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ДатаНачала") + " КАК Период
		|ИЗ 
		|	Документ.ОплатаСверхурочныхЧасов.Начисления 
		|ГДЕ 
		|	Ссылка = &ДокументСсылка
		|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "");
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ ("+МестоРаботыТекст+") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Начисления.Сотрудник,
			|	Начисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И Сотрудник В (&парамСотрудники)", "") +"
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Описание текста запроса:
    // 1. Выборка "ТЧНачисления": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	
	ТекстЗапроса = СтавкиОСМСТекст + МестоРаботыТекст+ 
	"ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыФизЛиц.Ссылка КАК ГрафикРаботыФизЛица,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(СтрокиНачисления.ДатаНачала, СтрокиНачисления.ДатаОкончания, ДЕНЬ) + 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПланГрафикЗаполнен
	|ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыФизЛиц.Ссылка = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СтрокиНачисления.ДатаНачала И СтрокиНачисления.ДатаОкончания)
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	ГрафикиРаботыФизЛиц.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ГрафикРаботыФизЛица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТ_ПересекающиесяСтроки
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления2
	|		ПО (ТЧНачисления2.Ссылка = &ДокументСсылка)
	|			И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|			И ТЧНачисления.НомерСтроки > ТЧНачисления2.НомерСтроки
	|			И ТЧНачисления.ДатаНачала = ТЧНачисления2.ДатаНачала
	|			И ТЧНачисления.ДатаОкончания = ТЧНачисления2.ДатаОкончания
	|			И ТЧНачисления.ВидРасчета = ТЧНачисления2.ВидРасчета
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	И НЕ ТЧНачисления.Сторно
	|	И НЕ ТЧНачисления2.Сторно
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧНачисления.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ТЧНачисления.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ТЧНачисления.Авторасчет КАК Авторасчет,
	|	ВЫБОР 
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1,1,1) 
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) 
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ТЧНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ТЧНачисления.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ВидДохода КАК ВидДохода,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяСН КАК ОблагаетсяСН,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяСО КАК ОблагаетсяСО,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОППВ КАК ОблагаетсяОППВ,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяВОСМС КАК ОблагаетсяВОСМС,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяООСМС КАК ОблагаетсяООСМС,
	|	ТЧНачисления.ВидРасчета.ОблагаетсяОПВР КАК ОблагаетсяОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ПериодыИсчисленияОППВ.ИсчислятьОППВ КАК ИсчислятьОППВ
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ",
	|	ТЧНачисления.Размер КАК Размер,
	|	ТЧНачисления.КоэффициентОплаты КАК КоэффициентОплаты,
	|   ТЧНачисления.Размер * ТЧНачисления.КоэффициентОплаты КАК ТарифнаяСтавкаРассч,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.СуммаВычетовДоходовОтОбратного,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,	
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеПоРаботникуДоНазначения.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(ДанныеПоРаботникуДоНазначения.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ДанныеПоРаботникуДоНазначения.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ВЫБОР 
	|		КОГДА НЕ(ТЧНачисления.ПодразделениеОрганизации.Владелец = &Организация) 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА ТЧНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ ТЧНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА ТЧНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	ТекстЗапроса = ТекстЗапроса + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	ТекстЗапроса = ТекстЗапроса + ",
	|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник 
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|					И РаботникиОрганизации.Период <= ТЧНачисления.ДатаНачала
	|		
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧНачисления.Сотрудник 
	|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация) 
	|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&парамПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО ТЧНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО ДанныеПоРаботникуДоНазначения.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И ДанныеПоРаботникуДоНазначения.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И ДанныеПоРаботникуДоНазначения.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПланГрафика.НомерСтроки
	|			И ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботыФизЛица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПересекающиесяСтроки КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО ТЧНачисления.Сотрудник = МестоРаботы.Сотрудник
	|			И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО ТЧНачисления.Сотрудник = ПериодыИсчисленияОППВ.Сотрудник
	|			И ТЧНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО ТЧНачисления.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА ТЧНачисления.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(ТЧНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "ТЧНачисления.ДатаНачала") + " = СтавкиОСМС.Период";
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	" + ?(Сотрудники <> Неопределено, " И ТЧНачисления.Сотрудник В (&парамСотрудники)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЧНачисления.НомерСтроки
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период регистрации (месяц)!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
	Если НетДатыНачала Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
 		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыНачала Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;	
	
	// График работы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
	КонецЕсли; 
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "указана повторяющаяся строка (см. строку  № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;	

КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец	    = ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно					    = ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник                  = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация                = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат 					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по отработанному времени (только часы)
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноЧасов 		= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеЧасы 		= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли;
	
	// Реквизиты
	Движение.Показатель1        		= ВыборкаПоСтрокамДокумента.ТарифнаяСтавкаРассч;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени  	        = Перечисления.ВидыУчетаВремени.ПоЧасам;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ДополнительныеДанные		= ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.СторнируемыйДокумент = ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент;
	КонецЕсли;
	
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ИсчислениеНалоговСтруктурныхЕдиниц)
	
    Если ВыборкаПоСтрокамДокумента.Результат = 0 Тогда
    	// нулевые суммы не записываем
    	Возврат;
    КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяИПН;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Движение.ВидДохода			= ВыборкаПоСтрокамДокумента.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
				
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
															
	КонецЕсли;
	
	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяСН;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;

	КонецЕсли;
	
	////////////////////////////////
	// ОПВСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОПВ;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;

	КонецЕсли;
	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяСО;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
	
	КонецЕсли;
	
	
	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ 
		И ВыборкаПоСтрокамДокумента.ИсчислятьОППВ
		И ВыборкаПоСтрокамДокумента.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОППВ;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
	
	КонецЕсли;
	
	
	////////////////////////////////
	// ВОСМССведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяВОСМС;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоСтрокамДокумента.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;

	КонецЕсли;
	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяООСМС;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
	
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ВыборкаПоСтрокамДокумента.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		//Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период = НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало);
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо			= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация		= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	=	ВыборкаПоСтрокамДокумента.ОблагаетсяОПВР;
		Движение.ВидРасчета			= ВыборкаПоСтрокамДокумента.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода		= ВыборкаПоСтрокамДокумента.Результат;
	
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	//Свойства
	Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
	Движение.Период 		= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	// Измерения
	Движение.ФизЛицо				= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница	= ВыборкаПоСтрокамДокумента.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоСтрокамДокумента.Результат;
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;
			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
						
				КонецЕсли;

			КонецЦикла;
			
			Если НЕ Отказ Тогда
				
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 

мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мСоответствиеПравилОкругления = Новый Соответствие;