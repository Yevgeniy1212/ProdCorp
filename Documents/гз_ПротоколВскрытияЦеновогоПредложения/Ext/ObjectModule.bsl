////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция выполняет проверку, существуют ли проведенные протоколы вскрытия ЦП по этому объявлению
//
// Возвращаемое значение:
//  Истина, если по данному объявлению уже существует протокол вскрытия ценового предложения, иначе - ложь
//  
Функция СуществуетПротоколВскрытияЦП() 
	
	// проверить, нет ли проведенных протоколов вскрытия ценовых предложений по этому же объявлению
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объявление", ОбъявлениеОПроведенииКонкурса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	гз_ПротоколВскрытияЦеновогоПредложения.Ссылка
	               |ИЗ
	               |	Документ.гз_ПротоколВскрытияЦеновогоПредложения КАК гз_ПротоколВскрытияЦеновогоПредложения
	               |ГДЕ
	               |	гз_ПротоколВскрытияЦеновогоПредложения.Проведен
	               |	И гз_ПротоколВскрытияЦеновогоПредложения.ОбъявлениеОПроведенииКонкурса = &Объявление
	               |	И гз_ПротоколВскрытияЦеновогоПредложения.Ссылка <> &Ссылка";	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СуществуетПротоколВскрытияЦП()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция выполняет проверку, сформированы ли итоги по объявлению-основанию
//
// Возвращаемое значение:
//  Истина, если по данному объявлению-основанию уже сформированы итоги государственных закупок, иначе - ложь
//  
Функция СформированыИтогиПоОбъявлению() Экспорт 
	
	// проверить, сформированы ли итоги гос закупок по объявлению, по которому сформирован данный документ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объявление",ОбъявлениеОПроведенииКонкурса);
	Запрос.Текст = "ВЫБРАТЬ
				   |	гз_ИтогиГосударственныхЗакупок.Ссылка
				   |ИЗ
				   |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
				   |ГДЕ
				   |	гз_ИтогиГосударственныхЗакупок.ДокументОснование = &Объявление
				   |	И гз_ИтогиГосударственныхЗакупок.Проведен
				   |
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	гз_РазыгрываниеКонкурса.Ссылка
				   |ИЗ
				   |	Документ.гз_РазыгрываниеКонкурса КАК гз_РазыгрываниеКонкурса
				   |ГДЕ
				   |	гз_РазыгрываниеКонкурса.ОбъявлениеОПроведенииЗакупок = &Объявление
				   |	И гз_РазыгрываниеКонкурса.Проведен";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СформированыИтогиПоОбъявлению()

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой НМА-1,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта (накладной) приемки-передачи НМА
	//
	Функция ПечатьПротокола()
		
		ОбластьШапкиТаблицыЦП  = "ШапкаТаблицыЦП";
		ОбластьСтрокиЦП = "ТаблицаЦП";
		ОбластьШапкиТаблицыОтклоненныхЦП  = "ШапкаТаблицыЦП";
		ОбластьСтрокиОтклоненныхЦП = "ТаблицаОтклоненныхЦП";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		
		Запрос.Текст ="ВЫБРАТЬ
		              |	гз_ПротоколВскрытияЦеновогоПредложения.ОбъявлениеОПроведенииКонкурса.МестоПоставки КАК МестоПоставки,
		              |	гз_ПротоколВскрытияЦеновогоПредложения.Дата,
		              |	гз_ПротоколВскрытияЦеновогоПредложения.Ссылка КАК ОбъявлениеОПроведенииЗакупок,
		              |	гз_ПротоколВскрытияЦеновогоПредложения.Ответственный
		              |ИЗ
		              |	Документ.гз_ПротоколВскрытияЦеновогоПредложения КАК гз_ПротоколВскрытияЦеновогоПредложения
		              |ГДЕ
		              |	гз_ПротоколВскрытияЦеновогоПредложения.Ссылка = &Ссылка";
		РезЗапроса = Запрос.Выполнить().Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ПротоколВскрытияЦеновыхПредложений";
		Макет       = ПолучитьМакет("Протокол");
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Пока РезЗапроса.Следующий() Цикл 
			ОбластьМакета.Параметры.Заполнить(РезЗапроса);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Пункт1");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		              |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик,
		              |	гз_ЦеновоеПредложениеПоставщика.Ссылка КАК ЦеновоеПредложение
		              |ИЗ
		              |	Документ.гз_ПротоколВскрытияЦеновогоПредложения.Поставщики КАК гз_ПротоколВскрытияЦеновогоПредложенияПоставщики
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		              |		ПО гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик = гз_ЦеновоеПредложениеПоставщика.Контрагент
		              |			И гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Ссылка.ОбъявлениеОПроведенииКонкурса = гз_ЦеновоеПредложениеПоставщика.ДокументОснование
		              |ГДЕ
		              |	(НЕ гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Отклонено)
		              |	И гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Ссылка = &Ссылка";
		РезЗапросаЦП = Запрос.Выполнить().Выбрать();
		
		Если РезЗапросаЦП.Следующий() Тогда 
		
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиТаблицыЦП);
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокиЦП);
			
			//// Вывести табличную часть
			РезЗапросаЦП.Сбросить();
			НомерСтроки = 1;
			Пока РезЗапросаЦП.Следующий() Цикл 
				ОбластьМакета.Параметры.Заполнить(РезЗапросаЦП);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("НетЦП");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Пункт2");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		              |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик,
		              |	гз_ЦеновоеПредложениеПоставщика.Ссылка КАК ЦеновоеПредложение,
		              |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Причина КАК ПричинаОтклонения
		              |ИЗ
		              |	Документ.гз_ПротоколВскрытияЦеновогоПредложения.Поставщики КАК гз_ПротоколВскрытияЦеновогоПредложенияПоставщики
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		              |		ПО гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик = гз_ЦеновоеПредложениеПоставщика.Контрагент
		              |			И гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Ссылка.ОбъявлениеОПроведенииКонкурса = гз_ЦеновоеПредложениеПоставщика.ДокументОснование
		              |ГДЕ
		              |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Отклонено
		              |	И гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Ссылка = &Ссылка";
		РезЗапросаОтклоненныхЦП = Запрос.Выполнить().Выбрать();
		
		Если РезЗапросаОтклоненныхЦП.Следующий() Тогда 
		
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиТаблицыОтклоненныхЦП);
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокиОтклоненныхЦП);
			
			//// Вывести табличную часть
			РезЗапросаОтклоненныхЦП.Сбросить();
			НомерСтроки = 1;
			Пока РезЗапросаОтклоненныхЦП.Следующий() Цикл 
				ОбластьМакета.Параметры.Заполнить(РезЗапросаОтклоненныхЦП);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("НетЦП");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Пункты3_4_5");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал 
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		РезЗапроса.Сбросить();
		Пока РезЗапроса.Следующий() Цикл 
			ОбластьМакета.Параметры.Заполнить(РезЗапроса);
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПротокола()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли НЕ гз_УправлениеПользователямиБК.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		Если НЕ гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		Если ИмяМакета = "Протокол" Тогда
			ТабДокумент = ПечатьПротокола();
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
		КонецЕсли;
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Протокол вскрытия ценовых предложений"));
		
	КонецПроцедуры // Печать()
	
#КонецЕсли
                                                     
// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		гз_ОбщегоНазначения.мЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объявление",Основание.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ЦеновоеПредложениеПоставщика.Контрагент КАК Поставщик
		               |ИЗ
		               |	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		               |ГДЕ
		               |	гз_ЦеновоеПредложениеПоставщика.ДокументОснование = &Объявление
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	гз_ЦеновоеПредложениеПоставщика.Контрагент";
		Поставщики.Загрузить(Запрос.Выполнить().Выгрузить());
		//
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьПоДокументуОснования()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, ДатаВскрытияПакетаДокументов, ОбъявлениеОПроведенииКонкурса";
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	
	// Теперь позовем общую процедуру проверки.
	гз_ОбщегоНазначения.мПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры //ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(ТабЗаявки, СтруктураШапкиДокумента,Отказ, Заголовок, ТипТЧ) Экспорт
	
	Запрос = Новый Запрос;                      
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_ЦеновоеПредложениеПоставщика.Контрагент КАК Поставщик
	                  |ИЗ
	                  |	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
	                  |ГДЕ
	                  |	гз_ЦеновоеПредложениеПоставщика.ДокументОснование = &Объявление";
	Запрос.УстановитьПараметр("Объявление",ОбъявлениеОПроведенииКонкурса);
	МассивПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поставщик");
	
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик
	                  |ИЗ
	                  |	Документ.гз_ПротоколВскрытияЦеновогоПредложения.Поставщики КАК гз_ПротоколВскрытияЦеновогоПредложенияПоставщики
	                  |ГДЕ
	                  |	гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Ссылка.ОбъявлениеОПроведенииКонкурса = &Объявление
	                  |	И (НЕ гз_ПротоколВскрытияЦеновогоПредложенияПоставщики.Поставщик В (&МассивПоставщиков))";
	Запрос.УстановитьПараметр("МассивПоставщиков",МассивПоставщиков);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Сообщить("Поставщик """+Выборка.Поставщик+""" не подавал ценового предложения по документу " + ОбъявлениеОПроведенииКонкурса);
		Отказ = Истина;
	КонецЦикла;
    	
	Если ТипТЧ = "Поставщики" Тогда
		РеквизитыТЧ = "Поставщик"; //через запятую
	КонецЕсли;
	гз_ОбщегоНазначения.мПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ТипТЧ, Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Протокол","Протокол");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирования движений регистров
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,  ТаблицаПоставщиков, Отказ)
	Если Не Отказ Тогда
		Для Каждого ТекСтрокаПоставщики Из ТаблицаПоставщиков Цикл
			// регистр гз_РезультатыВскрытияЦеновыхПредложений 
			Движение = Движения.гз_РезультатыВскрытияЦеновыхПредложений.Добавить();
			Движение.ОбъявлениеОПроведенииКонкурса = СтруктураШапкиДокумента.ОбъявлениеОПроведенииКонкурса;
			Движение.Поставщик = ТекСтрокаПоставщики.Поставщик;
			Движение.ЦеновоеПредложениеОтклонено = ТекСтрокаПоставщики.Отклонено;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = гз_ОбщегоНазначения.мПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если гз_ОбщегоНазначения.мРучнаяКорректировкаОбработкаПроведения(Ложь,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = гз_ОбщегоНазначения.мСформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Режим,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Оплата НМА".
	
	ТаблицаПоставщиков 	= Поставщики.Выгрузить();
	
	ПроверкаРеквизитовТЧ(ТаблицаПоставщиков, СтруктураШапкиДокумента,Отказ, Заголовок, "Поставщики");
	
	// Проверим, не дублируются ли Номенклатура в таб.части
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоставщиков, Отказ);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	гз_ОбщегоНазначения.мУдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь);
КонецПроцедуры //ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если СуществуетПротоколВскрытияЦП() Тогда 
		Отказ = Истина;
		Сообщить("Протокол вскрытия ценовых предложений "+Ссылка+" не записан:
		|	По выбранному объявлению уже сформирован протокол вскрытия ценовых предложений.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъявлениеОПроведенииКонкурса) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объявление",ОбъявлениеОПроведенииКонкурса);
		Запрос.Текст = "ВЫБРАТЬ
		               |	гз_ИтогиГосударственныхЗакупок.Ссылка
		               |ИЗ
		               |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
		               |ГДЕ
		               |	гз_ИтогиГосударственныхЗакупок.ДокументОснование = &Объявление
		               |	И гз_ИтогиГосударственныхЗакупок.Проведен
		               |
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	гз_РазыгрываниеКонкурса.Ссылка
		               |ИЗ
		               |	Документ.гз_РазыгрываниеКонкурса КАК гз_РазыгрываниеКонкурса
		               |ГДЕ
		               |	гз_РазыгрываниеКонкурса.ОбъявлениеОПроведенииЗакупок = &Объявление
		               |	И гз_РазыгрываниеКонкурса.Проведен";
		Если НЕ Запрос.Выполнить().Пустой() Тогда
             Отказ = Истина;
			 Сообщить("Протокол вскрытия ценовых предложений "+Ссылка+" не записан:
			 |	имеются протоколы разыгрывания конкурса, либо подведены итоги",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПередЗаписью()

