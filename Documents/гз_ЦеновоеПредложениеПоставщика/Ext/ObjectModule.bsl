////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой НМА-1,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта (накладной) приемки-передачи НМА
	//
	Функция ПечатьЗаявки() Экспорт
		
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		
		Если ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаТаблицыСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		КонецЕсли;
		
		// запрос для реквизитов шапки 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	гз_ЦеновоеПредложениеПоставщика.Организация,
		|	гз_ЦеновоеПредложениеПоставщика.Дата,
		|	гз_ЦеновоеПредложениеПоставщика.Номер,
		|	гз_ЦеновоеПредложениеПоставщика.Ответственный
		|Из
		|	Документ.гз_ЦеновоеПредложениеПоставщика КАК гз_ЦеновоеПредложениеПоставщика
		|ГДЕ
		|	гз_ЦеновоеПредложениеПоставщика.Ссылка = &Ссылка";	
		Док = Запрос.Выполнить().Выбрать();
		Если Не Док.Следующий() Тогда
			Возврат Новый ТабличныйДокумент;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("ДатаДок",     Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	гз_ЦеновоеПредложениеПоставщика.Номенклатура.Наименование КАК ТоварНаименование,
		|	гз_ЦеновоеПредложениеПоставщика.Номенклатура.БазоваяЕдиницаИзмерения КАК ед,
		|	гз_ЦеновоеПредложениеПоставщика.Количество,
		|	гз_ЦеновоеПредложениеПоставщика.Цена,
		|	гз_ЦеновоеПредложениеПоставщика.Номенклатура."+Колонка+" КАК КодАртикул,
		|	гз_ЦеновоеПредложениеПоставщика.НомерСтроки
		|Из
		|	Документ.гз_ЦеновоеПредложениеПоставщика.Товары КАК гз_ЦеновоеПредложениеПоставщика
		|ГДЕ
		|	гз_ЦеновоеПредложениеПоставщика.Ссылка.Ссылка = &Ссылка";
		РезЗапросаСписка = Запрос.Выполнить();
		ТаблицаПоСписку = РезЗапросаСписка.Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_гз_ЦеновоеПредложениеПоставщика";
		Макет       = ПолучитьМакет("ЦеновоеПредложение");
		
		// Выводим заголовок 
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Ценовое предложение поставщика ", глСписокПрефиксовУзлов);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку 
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Организация = Организация;
		ОбластьМакета.Параметры.Контрагент = Контрагент;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Количество = 0;	
		НомСтр = 1;
		Для Каждого ВыборкаСтрокТовары Из ТаблицаПоСписку Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;   
			ОбластьМакета.Параметры.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			ТабДокумент.Вывести(ОбластьМакета);
			Количество     = Количество + ВыборкаСтрокТовары.Количество;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итог = Количество;
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = СокрЛП(Док.Ответственный.Наименование);
		ТабДокумент.Вывести(ОбластьМакета);
		Возврат ТабДокумент;
	КонецФункции // ПечатьЗаявки()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;
		Если Не гз_РаботаСДиалогами.мПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		Если ИмяМакета = "ЦеновоеПредложение" Тогда
			ТабДокумент = ПечатьЗаявки();
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			ТабДокумент = гз_РаботаСДиалогами.мНапечататьВнешнююФорму(Ссылка, ИмяМакета);
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;		
		КонецЕсли;
		гз_РаботаСДиалогами.мНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, гз_РаботаСДиалогами.мСформироватьЗаголовокДокумента(ЭтотОбъект, "Ценовое предложение поставщика"));
		
	КонецПроцедуры // Печать()
	
#КонецЕсли

// Процедура выполняет заполнение документа по документу-основанию
//
Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		гз_ОбщегоНазначения.мЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		СкопироватьТовары(Основание);
		//
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьПоДокументуОснования()

// Процедура выполняет копирование строк в табличную часть документа
//
Процедура СкопироватьТовары(ДокументОснование)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	гз_ЗаявкиДляКонкурсаТовары.Номенклатура,
	|	гз_ЗаявкиДляКонкурсаТовары.Цена,
	|	гз_ЗаявкиДляКонкурсаТовары.Количество,
	|	гз_ЗаявкиДляКонкурсаТовары.Сумма
	|Из
	|	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ЗаявкиДляКонкурсаТовары
	|ГДЕ
	|	гз_ЗаявкиДляКонкурсаТовары.Ссылка.Ссылка = &Ссылка
	|	И гз_ЗаявкиДляКонкурсаТовары.Состояние = &СостояниеКонкурс";
	
	Запрос.УстановитьПараметр("СпособЗакупкиЦП", Справочники.гз_СпособыЗакупки.СпособомЗапросаЦеновыхПредложений);
	Запрос.УстановитьПараметр("СостояниеКонкурс", Перечисления.гз_СостоянияЗаказа.Конкурс);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ПарамСостояния", Перечисления.гз_СостоянияЗаказа.Конкурс);
	Товары.Загрузить(запрос.Выполнить().Выгрузить());
	
КонецПроцедуры //СкопироватьТовары()

// Процедура заполнения документа по документу-основанию
//
Процедура ЗаполнитьТЧПоОснованию() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	МИНИМУМ(ЕСТЬNULL(Товары.Цена, 0)) КАК Цена,
	               |	СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Количество,
	               |	Товары.Ссылка.МестоПоставки
	               |ИЗ
	               |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка.Ссылка = &ссылка
	               |	И Товары.Состояние <> &СостояниеВыполнена
	               |	И Товары.Состояние <> &СостояниеОтменена
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Номенклатура,
	               |	Товары.Ссылка.МестоПоставки
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("СостояниеВыполнена", Перечисления.гз_СостоянияЗаказа.Выполнена);			   
	Запрос.УстановитьПараметр("СостояниеОтменена", Перечисления.гз_СостоянияЗаказа.Отменена);	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Сообщить("Не обнаружены данные для заполнения табличных частей документа", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Результат = Результат.Выбрать();
	Товары.Очистить();
	Пока Результат.Следующий() Цикл
		НовСтр 					= Товары.Добавить();
		НовСтр.Номенклатура 	= Результат.Номенклатура;
		НовСтр.Цена				= Результат.Цена;
		НовСтр.Количество		= Результат.Количество;
		НовСтр.Сумма			= Результат.Количество * Результат.Цена;
	КонецЦикла;
	МестоПоставки = Результат.МестоПоставки;
	
КонецПроцедуры //ЗаполнитьТЧПоОснованию()

// Функция возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ЦеновоеПредложение","Ценовое предложение");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция выполняет проверку, сформированы ли итоги по объявлению-основанию
//
// Возвращаемое значение:
//  Истина, если по данному объявлению-основанию уже сформированы итоги государственных закупок, иначе - ложь
//  
Функция СформированыИтогиПоОбъявлению() Экспорт 
	
	// проверить, сформированы ли итоги гос закупок по объявлению, по которому сформирован данный документ
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объявление",ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
				   |	гз_ИтогиГосударственныхЗакупок.Ссылка
				   |ИЗ
				   |	Документ.гз_ИтогиГосударственныхЗакупок КАК гз_ИтогиГосударственныхЗакупок
				   |ГДЕ
				   |	гз_ИтогиГосударственныхЗакупок.ДокументОснование = &Объявление
				   |	И гз_ИтогиГосударственныхЗакупок.Проведен
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	гз_ПротоколВскрытияЦеновогоПредложения.Ссылка
				   |ИЗ
				   |	Документ.гз_ПротоколВскрытияЦеновогоПредложения КАК гз_ПротоколВскрытияЦеновогоПредложения
				   |ГДЕ
				   |	гз_ПротоколВскрытияЦеновогоПредложения.ОбъявлениеОПроведенииКонкурса = &Объявление
				   |	И гз_ПротоколВскрытияЦеновогоПредложения.Проведен
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	гз_РазыгрываниеКонкурса.Ссылка
				   |ИЗ
				   |	Документ.гз_РазыгрываниеКонкурса КАК гз_РазыгрываниеКонкурса
				   |ГДЕ
				   |	гз_РазыгрываниеКонкурса.ОбъявлениеОПроведенииЗакупок = &Объявление
				   |	И гз_РазыгрываниеКонкурса.Проведен";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // СформированыИтогиПоОбъявлению()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) =  Тип("ДокументСсылка.гз_ОбъявлениеОПроведенииГосударственныхЗакупок") Тогда
		ЗаполнитьПоДокументуОснования(Основание);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("ВнешняяОбработка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда 
		Сообщить("Не заполнено поле контрагент!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

