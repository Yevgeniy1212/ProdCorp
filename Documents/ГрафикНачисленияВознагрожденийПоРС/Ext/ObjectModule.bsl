////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если Клиент Тогда
	
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция формирует табличный документ с печатной формой графика
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьГрафика()
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	KZT = Справочники.Валюты.НайтиПоКоду("398").Ссылка;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.Организация КАК ПредставлениеОрганизации,
	|	ГрафикВознагрождений.Контрагент.НаименованиеПолное КАК ПредставлениеКонтрагента,
	|	ГрафикВознагрождений.ДоговорКонтрагента,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК валюта,
	|	ГрафикВознагрождений.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ДатаНачалаДействияДоговора КАК ДатаНачала,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ДатаОкончанияДействияДоговора КАК ДатаОкончания,
	|	ГрафикВознагрождений.ДоговорКонтрагента.НеснижаемыйОстаток КАК НеснижаемыйОстаток,
	|	ГрафикВознагрождений.ДоговорКонтрагента.МаксимальныйОстаток КАК МаксимальныйОстаток,
	|	ГрафикВознагрождений.ДоговорКонтрагента.РасчетныйСчет КАК РасчетныйСчет,
	|	ГрафикВознагрождений.ДоговорКонтрагента.ВИдКалендарныхДней КАК КоличествоДней
	|ИЗ
	|	Документ.ГрафикНачисленияВознагрожденийПоРС КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|";
	
	ЗапросШапка.Текст = ТекстЗапроса;
	
	ЗапросШапка = ЗапросШапка.Выполнить().Выбрать();
	ЗапросШапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.НомерСтроки,
	|	ГрафикВознагрождений.Период,
	|	ГрафикВознагрождений.Курс,
	|	ГрафикВознагрождений.Сумма,
	|	ГрафикВознагрождений.ВалютнаяСумма,
	|	ГрафикВознагрождений.КоличествоДней,
	|	ГрафикВознагрождений.ПроцентВознагрождения,
	|	ГрафикВознагрождений.СуммаВознагрождения,
	|	ГрафикВознагрождений.ВылютнаяСуммаВознаграждения
	|ИЗ
	|	Документ.ГрафикНачисленияВознагрожденийПоРС.График КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|Итоги 
	|	Сумма(СуммаВознагрождения),
	|	Сумма(ВылютнаяСуммаВознаграждения)
	|ПО Общие
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГрафикВознагрожденияПоКредитамИЗаймам";
    Если ДоговорКонтрагента.ВалютаВзаиморасчетов = KZT Тогда
	Макет = ПолучитьМакет("Макет");
    Иначе
	Макет = ПолучитьМакет("МакетВалюта");
	КонецЕсли;
	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ЗапросШапка);
	ОбластьМакета.Параметры.ДатаНачала = Формат(ЗапросШапка.ДатаНачала,"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ДатаОкончания = Формат(ЗапросШапка.ДатаОкончания,"ДФ = dd.MM.yyyy");
	ОбластьМакета.Параметры.ТекстЗаголовка = РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, "График вознагрождения", глСписокПрефиксовУзлов);
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	ВыборкаОбщийИтог.Следующий();
	
	выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	
	ОбластьИтого.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Ответственный = Ответственный;
	ТабДокумент.Вывести(ОбластьПодвал);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = ПечатьГрафика();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","График");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,Контрагент,ДоговорКонтрагента");

	// Теперь позовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

//Подготавливаем таблицу по классам для проведения
Функция ПодготовитьТаблицуПоГрафику(ДокументОбъект,СтруктураШапкиДокумента)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДокумент",ЭтотОбъект.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикВознагрождений.НомерСтроки,
	|	ГрафикВознагрождений.Период,
	|	ГрафикВознагрождений.ДатаПлатежа,
	|	ГрафикВознагрождений.Сумма,
	|	ГрафикВознагрождений.КоличествоДней,
	|	ГрафикВознагрождений.ПроцентВознагрождения,
	|	ГрафикВознагрождений.СуммаВознагрождения,
	|	ГрафикВознагрождений.СуммаКПН,
	|	ГрафикВознагрождений.СуммаВознагрожденияКПолучению
	|ИЗ
	|	Документ.ГрафикНачисленияВознагрожденийПоКредитамИЗаймам.График КАК ГрафикВознагрождений
	|ГДЕ
	|	 ГрафикВознагрождений.ссылка = &ТекДокумент
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

// По строке выборки  формируем движения по регистрам
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(СтрокаТЗ,СтруктураШапкиДокумента)
	
	//Движения по регистру "СведенияПоГрафикамВознагрождений"
	Движение = Движения.СведенияПоГрафикамВознагрождений.Добавить();
	// Свойства
	Движение.Период                     = НачалоМесяца(СтрокаТЗ.Период);
	// Измерения
	Движение.Организация				= СтруктураШапкиДокумента.Организация;
	Движение.Объект                     = СтруктураШапкиДокумента.ДоговорКонтрагента;
	// Ресурсы
	Движение.Сумма  		  				= СтрокаТЗ.Сумма;
	Движение.КоличествоДней   				= СтрокаТЗ.КоличествоДней;
	Движение.ПроцентВознагрождения 			= СтрокаТЗ.ПроцентВознагрождения;
	Движение.СуммаВознагрождения    		= СтрокаТЗ.СуммаВознагрождения;
	Движение.СуммаКПН    					= СтрокаТЗ.СуммаКПН;
	Движение.СуммаВознагрожденияКПолучению	= СтрокаТЗ.СуммаВознагрожденияКПолучению;
	// Реквизиты
	Движение.ДатаОкончания                  = СтруктураШапкиДокумента.ДоговорКонтрагента.ДатаОкончанияДействияДоговора;
	Движение.ДатаПлатежа                  = СтрокаТЗ.ДатаПлатежа;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоГрафику = ПодготовитьТаблицуПоГрафику(ЭтотОбъект,СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		Для Каждого СтрокаТЗ ИЗ ТаблицаПоГрафику Цикл
			
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(СтрокаТЗ,СтруктураШапкиДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
