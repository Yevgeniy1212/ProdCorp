////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
Перем мОсновнойГрафикРаботыПредприятия;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Процедура СформироватьСторноЗаписиПоПерерассчитываемомуДокументу() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ВидРасчета,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
    |	Начисления.Показатель6,
	|	Начисления.КоэффициентИндексации,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДополнительныеДанные,
	|	ИСТИНА КАК Сторно,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексСтроки = -1;
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ИндексСтроки = ИндексСтроки + 1;
		НоваяСтрока = Начисления.Вставить(ИндексСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры // СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;	
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = Дата('00010101');
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи
		Если Строка.Сторно ИЛИ 
			 Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя ИЛИ
			 Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя Тогда
			Продолжить;
		КонецЕсли; 
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли; 
		Иначе 	
			СтрокаНеПервая = Истина;
		КонецЕсли; 
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт 
	
	Если ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя
		 Или ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя Тогда
		Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени = Истина Или
			 ВыборкаПоШапкеДокумента.НеЦелодневныйПростой Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
	Иначе
		Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам 
				Или ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам
				Или ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасамДляПочасовогоОтклонения Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
				  Или ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавкеДляПочасовогоОтклонения Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		КонецЕсли; 
	КонецЕсли;
	
	ТЗОсновныеНачисления = НаборОсновныеНачисления.Выгрузить();
	ТЗОсновныеНачисления.Очистить();
	
	ТекущаяДатаНачала = ВыборкаПоШапкеДокумента.ДатаНачала;
	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоШапкеДокумента.ДатаОкончания);
	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		// строка движений
		Движение = ТЗОсновныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.ПериодДействияНачало       = НачалоДня(ТекущаяДатаНачала);
		Движение.ПериодДействияКонец 	    = КонецДня(ТекущаяДатаОкончания);
		Движение.ВидРасчета				    = ВыборкаПоШапкеДокумента.ВидРасчета;
		
		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Реквизиты
		Движение.Показатель1				= ВыборкаПоШапкеДокумента.Показатель1;
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Если ВыборкаПоШапкеДокумента.ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
			Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
				Движение.ГрафикРаботы  	    = ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе 
				Движение.ГрафикРаботы  	    = мОсновнойГрафикРаботыПредприятия;
			КонецЕсли;
		Иначе 
			Движение.ГрафикРаботы  	        = ВыборкаПоШапкеДокумента.ГрафикРаботы;
		КонецЕсли;		
		Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
		Движение.Авторасчет  	        	= Истина;
		
		Если ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя 
			 Или ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя Тогда
			Движение.КоэффициентИндексации		= 1;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачала;
		КонецЕсли;
		
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		
		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ВыборкаПоШапкеДокумента.ДатаОкончания);
		
	КонецЦикла;

	Если ВыборкаПоШапкеДокумента.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя 
			И ДатаНачала >= ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
		// если уже действует правила расчета с учетом коэффициента индексации
		ПроведениеРасчетов.РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация,
															ВыборкаПоШапкеДокумента.Сотрудник, 
															ТЗОсновныеНачисления);
	КонецЕсли;

	// перепишем в набор, не затирая уже существующие там записи
	// принудительно установим для всех строк таблицы Активность = Истина
	ТЗОсновныеНачисления.ЗаполнитьЗначения(Истина, "Активность");
	Для Каждого СтрокаТЗ Из ТЗОсновныеНачисления Цикл
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗ);
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, КомментироватьРасчет = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// Если почасовой простой, то записываем движения в регистр РабочееВремяРаботниковОрганизаций
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	НаборЗаписейРабочееВремя = Движения.РабочееВремяРаботниковОрганизаций;	
	Если ВыборкаПоШапкеДокумента.НеЦелодневныйПростой Тогда
 		ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, НаборЗаписейРабочееВремя, УчетнаяПолитикаПоПерсоналуОрганизации[ВыборкаПоШапкеДокумента.Организация]);
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																	ВыборкаПоШапкеДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	Отказ = НЕ ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета, УчетнаяПолитикаПоПерсоналуОрганизации, Налогоплательщик, КомментироватьРасчет);
	
	// Для документов-перерасчетов запишем еще сторно-записи из перерассчитываемого документа
	Если НЕ Отказ И НЕ ПерерассчитываемыйДокумент.Пустая() Тогда
		СформироватьСторноЗаписиПоПерерассчитываемомуДокументу();
	КонецЕсли;

	// Удаляем движения для режима интерактивного расчета
	Если НЕ РежимПерерасчета Тогда
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры  // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);	
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	//УчетнаяПолитикаПоПерсоналуОрганизации  = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");	
	ИмеетсяПерерассчитываемыйДокумент = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		// надо перезаполнить регистр расчета, т.к. добавили сторно-строки
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки(); // только структуру без данных
	КонецЦикла;

	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];	

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий(); 
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		Если ИмеетсяПерерассчитываемыйДокумент Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
		КонецЕсли;
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;
	
	// свернем таблицы регистров накопления и запишим их в наборы записей
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
		НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
		НаборЗаписей.Записать();
	Конеццикла;
	
	Если ИмеетсяПерерассчитываемыйДокумент Тогда
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать();
	КонецЕсли;
    
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
	НаборЗаписейПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	// выполним запрос к Начисления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ВидРасчета,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.КоэффициентИндексации,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДополнительныеДанные,
	|	ИСТИНА КАК Сторно,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексСтроки = -1;
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ИндексСтроки = ИндексСтроки + 1;
		НоваяСтрока = Начисления.Вставить(ИндексСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" 
		ИЛИ ИмяМакета = "РасчетСреднегоЗаработкаПодробно" Тогда
		ПодробнаяФорма = ?(ИмяМакета = "РасчетСреднегоЗаработкаПодробно", Истина, Ложь);
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачала, 12, "с " + Формат(ДатаНачала ,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy"), ?(НеЦелодневныйПростой,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляПочасовогоОтклонения,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку), , , ПодробнаяФорма);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	Если ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
		СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработка","Расчет по среднему заработку");
		СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаПодробно","Расчет по среднему заработку (подробная форма)");
	КонецЕсли;
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , 				Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала" , 					ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник" , 					Сотрудник);
	Запрос.УстановитьПараметр("Организация", 					Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПериодРегистрации", 				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("РегламентВалюта" , 				Константы.ВалютаРегламентированногоУчета.Получить());
	Если НеЦелодневныйПростой Тогда
		Запрос.УстановитьПараметр("ВидРасчетаПростойПоВинеРаботодателя" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя);
	Иначе
		Запрос.УстановитьПараметр("ВидРасчетаПростойПоВинеРаботодателя" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя);
	КонецЕсли;
	
	Если НеЦелодневныйПростой Тогда
		Запрос.УстановитьПараметр("ВидРасчетаПростойТарифЧасовой" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойТарифЧасовой);
	Иначе
		Запрос.УстановитьПараметр("ВидРасчетаПростойТарифЧасовой" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой);
	КонецЕсли;
	
	Если НеЦелодневныйПростой Тогда
		Запрос.УстановитьПараметр("ВидРасчетаПростойОкладПоЧасам" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойОкладПоЧасам);
	Иначе
		Запрос.УстановитьПараметр("ВидРасчетаПростойОкладПоЧасам" , ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоЧасам);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(Док.ДатаНачала, Док.ДатаОкончания, ДЕНЬ) + 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПланГрафикЗаполнен
	|ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО Док.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Док.ДатаНачала И Док.ДатаОкончания)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка)
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	Док.ДатаНачала,
	|	Док.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоказательОсновногоНачисления.ВидРасчета,
	|	ПоказательОсновногоНачисления.Показатель,
	|	ПоказательОсновногоНачисления.Показатель1ТипПоказателя
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновноеНачисление.ВидРасчетаЗавершения КАК ВидРасчета,
	|		Показатели1.Показатель КАК Показатель,
	|		Показатели1.Показатель.ТипПоказателя КАК Показатель1ТипПоказателя
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаНачала,
	|				Сотрудник = &Сотрудник
	|					И Организация = &ГоловнаяОрганизация
	|					И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ОсновноеНачисление
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|			ПО (Показатели1.НомерСтроки = 1)
	|				И ОсновноеНачисление.ВидРасчетаЗавершения = Показатели1.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновноеНачисление.ВидРасчета,
	|		Показатели1.Показатель,
	|		Показатели1.Показатель.ТипПоказателя
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаНачала,
	|				Сотрудник = &Сотрудник
	|					И Организация = &ГоловнаяОрганизация
	|					И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ОсновноеНачисление
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
	|			ПО ОсновноеНачисление.ВидРасчета = Показатели1.Ссылка
	|				И (Показатели1.НомерСтроки = 1)) КАК ПоказательОсновногоНачисления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацияПростоевВОрганизации.Дата,
	|	РегистрацияПростоевВОрганизации.ПериодРегистрации,
	|	РегистрацияПростоевВОрганизации.Организация,
	|	ВЫБОР 
	|		КОГДА РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА РегистрацияПростоевВОрганизации.Организация 
	|		ИНАЧЕ РегистрацияПростоевВОрганизации.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РегистрацияПростоевВОрганизации.Ссылка,
	|	РегистрацияПростоевВОрганизации.Физлицо,
	|	РегистрацияПростоевВОрганизации.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РегистрацияПростоевВОрганизации.Сотрудник,
	|	РегистрацияПростоевВОрганизации.ВидПростоя,
	|	РегистрацияПростоевВОрганизации.ПроцентОплаты,
	|	РегистрацияПростоевВОрганизации.ДатаНачала,
	|	РегистрацияПростоевВОрганизации.ДатаОкончания,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	РаботникиОрганизацииСрезПоследних.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL)
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ПараметрыВидаРасчета.Ссылка КАК ВидРасчета,
	|	ПараметрыВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ПараметрыВидаРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени КАК ВидВремени,	               
	|	ВЫБОР 
	|		КОГДА РегистрацияПростоевВОрганизации.ВидПростоя = ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоВинеРаботодателя) 
	|			ТОГДА РегистрацияПростоевВОрганизации.ПроцентОплаты
	|		ИНАЧЕ РегистрацияПростоевВОрганизации.ПроцентОплаты / 100 * ВЫБОР
	|						КОГДА ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|								И ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|							ТОГДА ВЫБОР
	|									КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|											ИЛИ ПоказателиОсновногоНачисленияЗавершения.Показатель1ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|										ТОГДА РазмерТарифныхСтавок.Размер * ВЫБОР
	|																				КОГДА РазмерТарифныхСтавок.Валюта В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|																					ТОГДА 1
	|																				ИНАЧЕ ЕСТЬNULL(Валюты.Курс, 0) / ЕСТЬNULL(Валюты.Кратность, 1)
	|																			КОНЕЦ
	|									ИНАЧЕ ОсновноеНачисление.Показатель1Завершения * ВЫБОР
	|																					КОГДА ОсновноеНачисление.Валюта1Завершения В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|																						ТОГДА 1                    
	|																					ИНАЧЕ ЕСТЬNULL(Валюты.Курс, 0) / ЕСТЬNULL(Валюты.Кратность, 1)
	|																				КОНЕЦ
	|								 КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|										ИЛИ ПоказателиОсновногоНачисления.Показатель1ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|									ТОГДА РазмерТарифныхСтавок.Размер * ВЫБОР
	|																			КОГДА РазмерТарифныхСтавок.Валюта В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|																				ТОГДА 1
	|																			ИНАЧЕ ЕСТЬNULL(Валюты.Курс, 0) / ЕСТЬNULL(Валюты.Кратность, 1)
	|																		КОНЕЦ
	|								ИНАЧЕ ОсновноеНачисление.Показатель1 * ВЫБОР
	|																	КОГДА ОсновноеНачисление.Валюта1 В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|																		ТОГДА 1
	|																	ИНАЧЕ ЕСТЬNULL(Валюты.Курс, 0) / ЕСТЬNULL(Валюты.Кратность, 1)
	|																  КОНЕЦ
	|							  КОНЕЦ
	|					КОНЕЦ * ВЫБОР
	|								КОГДА ВЫБОР
	|										КОГДА ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|												И ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|											ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|										ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|									  КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам))
	|									ТОГДА ЕСТЬNULL(РегламентированныеРасчетныеПоказатели.РазмерМЗП, 0)
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|	КОНЕЦ КАК Показатель1,
	|	ПараметрыВидаРасчета.СпособРасчета КАК СпособРасчета,
	|	ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -(ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка)) КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрацияПростоевВОрганизации.ДатаНачала, МЕСЯЦ), СЕКУНДА, -(1)) КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	РегистрацияПростоевВОрганизации.НеЦелодневныйПростой,
	|	РегистрацияПростоевВОрганизации.ОплачиватьЧасов + ЕСТЬNULL(-РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент.ОплачиватьЧасов, 0) КАК ОплачиватьЧасов,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияПростоевВОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И РегистрацияПростоевВОрганизации.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА РегистрацияПростоевВОрганизации.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА РегистрацияПростоевВОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях КАК РегистрацияПростоевВОрганизации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|					&ДатаНачала,
	|					Сотрудник = &Сотрудник
	|					И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|					&ДатаНачала,
	|					Сотрудник = &Сотрудник
	|					И Организация = &ГоловнаяОрганизация
	|					И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ОсновноеНачисление
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ПоказателиОсновногоНачисления
	|		ПО ОсновноеНачисление.ВидРасчета = ПоказателиОсновногоНачисления.ВидРасчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Показатели КАК ПоказателиОсновногоНачисленияЗавершения
	|		ПО ОсновноеНачисление.ВидРасчетаЗавершения = ПоказателиОсновногоНачисленияЗавершения.ВидРасчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаНачала) КАК РазмерТарифныхСтавок
	|		ПО РаботникиОрганизацииСрезПоследних.Должность = РазмерТарифныхСтавок.Должность
	|			И РазмерТарифныхСтавок.ТарифныйРазряд = ОсновноеНачисление.ТарифныйРазряд1
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО Валюты.Валюта = ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|										И ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|									ТОГДА ВЫБОР
	|											КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|													ИЛИ ПоказателиОсновногоНачисленияЗавершения.Показатель1ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|												ТОГДА РазмерТарифныхСтавок.Валюта
	|											ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|										  КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|												ИЛИ ПоказателиОсновногоНачисления.Показатель1ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|											ТОГДА РазмерТарифныхСтавок.Валюта
	|										ИНАЧЕ ОсновноеНачисление.Валюта1
	|									  КОНЕЦ
	|							КОНЕЦ
	|			И (Валюты.Период = &ПериодРегистрации)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = ВЫБОР 
	|					КОГДА РегистрацияПростоевВОрганизации.ВидПростоя = ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоВинеРаботодателя) 
	|						ТОГДА &ВидРасчетаПростойПоВинеРаботодателя 
	|					ИНАЧЕ ВЫБОР 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|										И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|									ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной) 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|											И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|										ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке)
	|							ИЛИ ВЫБОР
	|									КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|											И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|										ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|									ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|								КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)	
	|						ТОГДА &ВидРасчетаПростойТарифЧасовой 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|										И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|									ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам) 
	|						ТОГДА &ВидРасчетаПростойОкладПоЧасам 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|										И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|									ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам) 
	|						ТОГДА &ВидРасчетаПростойОкладПоЧасам 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|										И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|									ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням) 
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоДням) 
	|					КОГДА ВЫБОР
	|								КОГДА ОсновноеНачисление.ПериодЗавершения < &ДатаНачала
	|										И ОсновноеНачисление.ПериодЗавершения <> &НачальнаяДата
	|									ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения.СпособРасчета
	|								ИНАЧЕ ОсновноеНачисление.ВидРасчета.СпособРасчета
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням) 
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоДням) 
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка) КОНЕЦ КОНЕЦ)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|			И РаботникиОрганизацииСрезПоследних.Организация = ГрафикиРаботыФизЛиц.Организация
	|			И РаботникиОрганизацииСрезПоследних.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
	|		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&ПериодРегистрации,
	|				Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаНачала) КАК РегламентированныеРасчетныеПоказатели
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	РегистрацияПростоевВОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	МестоРаботыТекст = "";
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					  Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",						  ВыборкаПоШапкеДокумента.ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",						  ВыборкаПоШапкеДокумента.Сотрудник);
	Запрос.УстановитьПараметр("ПустаяДата",						  Дата('00010101'));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			  ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация",					  ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",		  ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ПериодРегистрации",				  ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", 	  ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 		  Справочники.Организации.ПустаяСсылка());
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыСотрудникаТекст = "
		|ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "&ДатаНачала") + " КАК Период";
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыСотрудникаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ (" + МестоРаботыТекст + ") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Сотрудник КАК Сотрудник,
			|	Начисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Ссылка.Сотрудник КАК Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтавкиОСМСТекст + МестоРаботыТекст +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(Док.ДатаНачала, Док.ДатаОкончания, ДЕНЬ) + 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПланГрафикЗаполнен
	|ПОМЕСТИТЬ ВТ_ДанныеПланГрафика
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО Док.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|			И (ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Док.ДатаНачала И Док.ДатаОкончания)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка)
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	Док.ДатаНачала,
	|	Док.ДатаОкончания
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ВидДохода КАК ВидДохода,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяИПН КАК СпособНалогообложенияИПН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСН КАК СпособНалогообложенияСН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВ КАК СпособНалогообложенияОПВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСО КАК СпособНалогообложенияСО,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОППВ КАК СпособНалогообложенияОППВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяВОСМС КАК СпособНалогообложенияВОСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяООСМС КАК СпособНалогообложенияООСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВР КАК СпособНалогообложенияОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				И &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &ПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &ПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР
	|";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ПериодыИсчисленияОППВ.ИсчислятьОППВ КАК ИсчислятьОППВ
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.КоэффициентИндексации,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР 
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком 
	|				И НЕ(ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.СуммаВычетовДоходовОтОбратного,
	|	ВЫБОР 
	|		КОГДА НЕ(СтрокиНачисления.ПодразделениеОрганизации.Владелец = &Организация) 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА СтрокиНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ СтрокиНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением, ЛОЖЬ)
	|			ТОГДА СтрокиНачисления.ПодразделениеОрганизации
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";		
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";	
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "	
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях.Начисления КАК СтрокиНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.РегистрацияПростоевВОрганизациях.Начисления КАК СтрокиНачисления
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачала 
	|					И РаботникиОрганизации.Сотрудник = &Сотрудник
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|		
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод 
	|			И РаботникиОрганизации.Сотрудник = &Сотрудник
	|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&ПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО СтрокиНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РаботникиОрганизации.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И РаботникиОрганизации.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПланГрафика КАК ДанныеПланГрафика
	|		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Или ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "СтрокиНачисления.ДатаНачала") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО СтрокиНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО СтрокиНачисления.Ссылка.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА СтрокиНачисления.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&ПериодРегистрации", "СтрокиНачисления.ДатаНачала") + " = СтавкиОСМС.Период";
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Ссылка.Физлицо,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР 
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.Размер,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
	|	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях.РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокаРасчетСреднего.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	ЕстьДатаНачала = Истина;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ЕстьДатаНачала = Ложь;
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.НеЦелодневныйПростой Тогда
		// ВидВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидВремени) 
			 Или ВыборкаПоШапкеДокумента.ВидВремени <> Перечисления.ВидыВремени.ЧасовоеНеотработанное Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Для вида расчета должен быть назначен учет времени, являющийся часовым отклонением!", Отказ, Заголовок);
		КонецЕсли;	
	
		// ОплачиватьЧасов
		Если ВыборкаПоШапкеДокумента.ОплачиватьЧасов < 0 
			 ИЛИ ВыборкаПоШапкеДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Число часов простоя должно быть в пределах от 1 до 24!", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		// ДатаОкончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
		КонецЕсли;
		
		//
		Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
	// ВидПростоя
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидПростоя) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан вид простоя!", Отказ, Заголовок);
	КонецЕсли;

	// ПроцентОплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка на увольнение
	Если ЕстьДатаНачала И ВыборкаПоШапкеДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоШапкеДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоШапкеДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаПродолжениеСообщенияОбОшибке, Ложь, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		И ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ПериодДействияКонец 	    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
 	Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней 					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов 				= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке 		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
	КонецЕсли;

	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке = ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеДни 	= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.УчитываемыеЧасы 	= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли; 
	
	// Реквизиты
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.КоэффициентИндексации		= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ДополнительныеДанные  	    = ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	Если ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
		Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
			Движение.ГрафикРаботы		= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
		Иначе 
			Движение.ГрафикРаботы		= мОсновнойГрафикРаботыПредприятия;
		КонецЕсли;
	Иначе 
		Движение.ГрафикРаботы			= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	КонецЕсли;	
	Если ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени = Истина
		 ИЛИ ВыборкаПоШапкеДокумента.НеЦелодневныйПростой Тогда
		Движение.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		Движение.ВидУчетаВремени 		= Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Иначе
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
	
	Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачала;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = НаборОсновныеНачисления.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало        	= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец     		= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    	= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;	
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОтработаноДней					= ВыборкаПоСтрокамДокумента.ОтработаноДней;
	Движение.ОтработаноЧасов				= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	// Реквизиты
	Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
	Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
	Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.Размер							= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ЧислоМесяцев					= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.КоэффициентИндексации			= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.ДатаНачалаПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаНачалаПериодаПремии;
	Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаОкончанияПериодаПремии;
	
КонецПроцедуры 

// По выборке из результатов запроса по шапке документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоШапкеДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к шапке документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, НаборЗаписей, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.НеЦелодневныйПростой 
		 И ВыборкаПоШапкеДокумента.ОплачиватьЧасов <> 0 Тогда
		 
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоШапкеДокумента.ДатаНачала;
		
		// Измерения
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Дней			= 0;
		Движение.Часов			= ВыборкаПоШапкеДокумента.ОплачиватьЧасов;
		Движение.ДнейПоНорме 	= 0;
		Движение.ЧасовПоНорме 	= ВыборкаПоШапкеДокумента.ОплачиватьЧасов;
		
		// Реквизиты
		Движение.СводнаяЗапись = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоТЧ.Результат = 0 Тогда
		// нулевые суммы не записываем
		Возврат;
	КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) И ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) И ВыборкаПоТЧ.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ОПВСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) И ВыборкаПоТЧ.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) И ВыборкаПоТЧ.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ
		И ВыборкаПоТЧ.ИсчислятьОППВ
		И ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) 
		И ВыборкаПоТЧ.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ВОСМССведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) И ВыборкаПоТЧ.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) И ВыборкаПоТЧ.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияООСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВР) И ВыборкаПоТЧ.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	// Свойства
	Движение.Период                 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения" 
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	
	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];

	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;
			
			// получим реквизиты табличной части Начисления
			РезультатЗапросаНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаНачислениям.Выбрать();

			// Движения по регистру РабочееВремяРаботниковОрганизаций
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, Движения.РабочееВремяРаботниковОрганизаций, УчетнаяПолитикаПоПерсоналуОрганизации);

			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);

				КонецЕсли;

			КонецЦикла;

			// получим реквизиты табличной части РасчетСреднего 
			РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
			ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
			
			Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка, УчетнаяПолитикаПоПерсоналуОрганизации);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ Отказ Тогда
				// свернем таблицы регистров накопления и запишем их в наборы записей
				Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
					ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
					НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
				Конеццикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мДлинаСуток 		= 86400; // в секундах
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОсновнойГрафикРаботыПредприятия = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
