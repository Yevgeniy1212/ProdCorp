&НаСервере
Перем КЭШ_Разрезы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КЭШ_Разрезы = Новый Соответствие;
	НадписьАналитическиеРазрезыКонтроляПоСценарию = "Аналитические разрезы контроля по сценарию";
	НадписьОбластьПримененияВводимыхОграничений = "Область применения вводимых ограничений";
	НадписьСписокОграничений = "Список ограничений";
	НадписьСпособВводаОграничений = "Способ ввода ограничений";
	Если ЗначениеЗаполнено(Объект.ИсправляемыйДокумент) Тогда
		ИнформацияИсправления = "Исправление для: "+Строка(Объект.ИсправляемыйДокумент);
	ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_УстановкаЛимитовИЦелевыхЗначений.Ссылка
			|ИЗ
			|	Документ.фин_УстановкаЛимитовИЦелевыхЗначений КАК фин_УстановкаЛимитовИЦелевыхЗначений
			|ГДЕ
			|	фин_УстановкаЛимитовИЦелевыхЗначений.Проведен
			|	И фин_УстановкаЛимитовИЦелевыхЗначений.ИсправляемыйДокумент = &ИсправляемыйДокумент";

		Запрос.УстановитьПараметр("ИсправляемыйДокумент", Объект.Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокДокументовИсправлений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		Если СписокДокументовИсправлений.Количество()>0 Тогда
			ИнформацияИсправления = "По документу имеется "+Строка(СписокДокументовИсправлений.Количество())+" исправлени"+ПолучитьОкончание(СписокДокументовИсправлений.Количество());
		Иначе
			ИнформацияИсправления = "Ввести исправление";
		КонецЕсли;
	Иначе
        Элементы.ИсправляемыйДокумент.Видимость = Ложь;
	КонецЕсли;
	УстановитьВидимость();
	мПериодичностьОграничения = ПериодичностьОграничения;
	мВидОграниченияОборотов = Объект.ВидОграниченияОборотов;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнойОтветственный");
		Объект.Организация = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	// заполнение разрезов
	ПолныйСписокРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();
	АктивныеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	Для Каждого Разрез Из ПолныйСписокРазрезов Цикл
		Элементы["ГраницыЗначений"+Разрез].Видимость = АктивныеРазрезы.НайтиПоЗначению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])<>Неопределено;
		Если Элементы["ГраницыЗначений"+Разрез].Видимость Тогда
			Элементы["ГраницыЗначений"+Разрез].ОграничениеТипа = фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]).ТипЗначения;
			Элементы["ГраницыЗначений"+Разрез].Заголовок = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]);
		КонецЕсли;
	КонецЦикла;
	// Установить доступность формы с учетом даты запрета редактирования	
	фин_БюджетированиеОбщегоНазначения.УстановитьДоступностьФормыДляРедактирования(РеквизитФормыВЗначение("Объект"), ЭтотОбъект);
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	ОткрыватьНастройкуДвижений = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ПоказыватьДвиженияПриПроведении");
	
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,"РазрезыКонтроля");
 	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокВыбораРазрезыУчета);

КонецПроцедуры

&НаСервере
Функция ПолучитьОкончание(Количество)
	Число = Количество - Цел(Количество/10)*10;
	Если Число = 1 Тогда
		Возврат "е";
	ИначеЕсли Число <=4 Тогда
		Возврат "я";
	Иначе
		Возврат "й";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	ПериодичностьОграничения = ?(Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет,?(Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Перечисления.фин_Периодичность.Месяц,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Объект.КонтролирующийСценарий));
	ТребуютсяНомГруппы = Ложь;
	НужныйСценарий = ?(Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет,?(Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,Неопределено,Объект.Сценарий),Объект.КонтролирующийСценарий);
	Если ЗначениеЗаполнено(НужныйСценарий) Тогда
		ТребуютсяНомГруппы = НужныйСценарий.ДетализацияПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы();
	КонецЕсли;
	Элементы.Сценарий.Видимость = Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании;
	Элементы.КонтролирующийСценарий.Видимость = Объект.ВидОграниченияОборотов<>Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет;
	Элементы.Страницы.ТекущаяСтраница=?(Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРазрезыКонтроля,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаГраницыЗначений);
	Элементы.ГраницыЗначенийСуммаСценарияКонтроль.Видимость = Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет;
	Элементы.ГраницыЗначенийВидОтклоненияКонтролируемыхЗначений.Видимость = Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно;
	Элементы.ГраницыЗначенийОтклонение.Видимость = Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно;
	Элементы.ГраницыЗначений.ТолькоПросмотр = ?(Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет,?(Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании,Объект.Сценарий.Пустая(),Ложь),Объект.КонтролирующийСценарий.Пустая());
	Элементы.ГруппаПериод.ТолькоПросмотр = ?(Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет,?(Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании,Объект.Сценарий.Пустая(),Ложь),Объект.КонтролирующийСценарий.Пустая());
	мФормат = фин_ПроцедурыМеханизмовБюджетирования.ФорматПериода(ПериодичностьОграничения);
	Элементы.ГраницыЗначенийПериод.Формат = мФормат;
//	Элементы.ГраницыЗначенийПериод.ФорматРедактирования = мФормат;
	Элементы.ДатаКонцаКонтролирующегоСценария.Формат = мФормат;
//	Элементы.ДатаКонцаКонтролирующегоСценария.ФорматРедактирования = мФормат;
	Элементы.ДатаНачалаКонтролирующегоСценария.Формат = мФормат;
//	Элементы.ДатаНачалаКонтролирующегоСценария.ФорматРедактирования = мФормат;
	Элементы.ГраницыЗначенийЗаполнитьПоНастройкамРегулярногоКонтроля.Видимость = (Объект.ВидОграниченияОборотов=Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет) 
																И (Объект.ИспользованиеКонтролируемыхЗначений=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриПланировании);
	Если СписокДокументовИсправлений.Количество()>0 Тогда
		ЭтотОбъект.ТолькоПросмотр=Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.ИсправляемыйДокумент) Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.ВидКонтролируемыхЗначений.ТолькоПросмотр = Истина;
		Элементы.ИспользованиеКонтролируемыхЗначений.ТолькоПросмотр = Истина;
		Элементы.Сценарий.ТолькоПросмотр = Истина;
		Элементы.ВидОграниченияОборотов.ТолькоПросмотр = Истина;
		Элементы.КонтролирующийСценарий.ТолькоПросмотр = Истина;
		Элементы.ВидОтклоненияКонтролируемыхЗначений.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаКонтролирующегоСценария.ТолькоПросмотр = Истина;
		Элементы.ДатаКонцаКонтролирующегоСценария.ТолькоПросмотр = Истина;
		Элементы.РазрезыКонтроля.ТолькоПросмотр = Истина;
		Элементы.ГраницыЗначений.ИзменятьСоставСтрок = Ложь;
		Для Каждого ПодчиненныйЭлемент Из Элементы.ГраницыЗначений.ПодчиненныеЭлементы Цикл
			ПодчиненныйЭлемент.ТолькоПросмотр = НЕ (ПодчиненныйЭлемент.Имя="ГраницыЗначенийОтклонение" ИЛИ ПодчиненныйЭлемент.Имя="ГраницыЗначенийСуммаСценарияКонтроль");
		КонецЦикла;
		Элементы.ГраницыЗначенийОчистить.Видимость = Ложь;
		Элементы.ГраницыЗначенийЗаполнить.Видимость = Ложь;
		Элементы.ГраницыЗначенийДобавить.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	УстановитьВидимость();
	ОбработатьИзменениеПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПериодичности()
	Если мПериодичностьОграничения = ПериодичностьОграничения Тогда
		Возврат;
	КонецЕсли;
	мПериодичностьОграничения = ПериодичностьОграничения;
	Объект.ДатаНачалаКонтролирующегоСценария = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
	Объект.ДатаКонцаКонтролирующегоСценария = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
	Для Каждого СтрокаОграничение Из Объект.ГраницыЗначений Цикл
		СтрокаОграничение.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОграничение.Период,ПериодичностьОграничения); 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Открыть настройку движений
	Если ВладелецФормы<>Неопределено Тогда
		Если Объект.Проведен Тогда
			Попытка
				ВладелецФормы.ИнформацияИсправления = "Документ исправлен";
				ВладелецФормы.ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеКонтролируемыхЗначенийПриИзменении(Элемент)
	УстановитьВидимость();
	ОбработатьИзменениеПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура ВидОграниченияОборотовПриИзменении(Элемент)
	УстановитьВидимость();
	Если НЕ мВидОграниченияОборотов = Объект.ВидОграниченияОборотов Тогда
		мВидОграниченияОборотов = Объект.ВидОграниченияОборотов;
		Объект.ГраницыЗначений.Очистить();
		Объект.РазрезыКонтроля.Очистить();
	КонецЕсли;
	ОбработатьИзменениеПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура КонтролирующийСценарийПриИзменении(Элемент)
	УстановитьВидимость();
	ОбработатьИзменениеПериодичности();
КонецПроцедуры


&НаКлиенте
Процедура ГраницыЗначенийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),ПериодичностьОграничения);
	КонецЕсли;
	
	Если НоваяСтрока И Объект.ВидОграниченияОборотов=ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно") Тогда
		
		Элемент.ТекущиеДанные.ВидОтклоненияКонтролируемыхЗначений=ПредопределенноеЗначение("Перечисление.фин_ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Относительное");
		
	КонецЕсли;
	
	НужныйСценарий = ?(Объект.ВидОграниченияОборотов=ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет"),?(Объект.ИспользованиеКонтролируемыхЗначений=ПредопределенноеЗначение("Перечисление.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении"),Неопределено,Объект.Сценарий),Объект.КонтролирующийСценарий);
	ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(Элемент.ТекущиеДанные.ФинансовыйПоказатель,НужныйСценарий);
	Элементы.ГраницыЗначенийНоменклатура.ОграничениеТипа = ОписаниеТипов;
	НастроитьДоступностьСтрокиПоПризнакамУчета(Элементы.ГраницыЗначений.ТекущиеДанные.ФинансовыйПоказатель);
КонецПроцедуры

&НаКлиенте
Процедура ГраницыЗначенийФинансовыйПоказательПриИзменении(Элемент)
	НужныйСценарий = ?(Объект.ВидОграниченияОборотов=ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет"),?(Объект.ИспользованиеКонтролируемыхЗначений=ПредопределенноеЗначение("Перечисление.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении"),Неопределено,Объект.Сценарий),Объект.КонтролирующийСценарий);
	ОписаниеТипов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОписаниеТиповНоменклатурногоПеречня(Элементы.ГраницыЗначений.ТекущиеДанные.ФинансовыйПоказатель,НужныйСценарий);
	Элементы.ГраницыЗначенийНоменклатура.ОграничениеТипа = ОписаниеТипов;
	Элементы.ГраницыЗначений.ТекущиеДанные.Номенклатура = ОписаниеТипов.ПривестиЗначение(Элементы.ГраницыЗначений.ТекущиеДанные.Номенклатура);
	НастроитьДоступностьСтрокиПоПризнакамУчета(Элементы.ГраницыЗначений.ТекущиеДанные.ФинансовыйПоказатель);
КонецПроцедуры


&НаКлиенте
Процедура ГраницыЗначенийФинансовыйПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаВыбора",Новый Структура("ИсключитьПостоянноКонтролируемые,ИспользованиеКонтролируемыхЗначений,Дата,Отбор",Истина,Объект.ИспользованиеКонтролируемыхЗначений,?(Элементы.ГраницыЗначений.ТекущиеДанные.Период='00010101',Объект.Дата,Элементы.ГраницыЗначений.ТекущиеДанные.Период),Новый Структура("ВидПоказателя",ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный"))),Элемент,УникальныйИдентификатор);
КонецПроцедуры


&НаКлиенте
Процедура ГраницыЗначенийПериодПриИзменении(Элемент)
	Если Элементы.ГраницыЗначений.ТекущиеДанные.Период<>'00010101' Тогда
		Элементы.ГраницыЗначений.ТекущиеДанные.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Элементы.ГраницыЗначений.ТекущиеДанные.Период,ПериодичностьОграничения); 
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ГраницыЗначенийПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Элементы.ГраницыЗначений.ТекущиеДанные.Период=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Элементы.ГраницыЗначений.ТекущиеДанные.Период,ПериодичностьОграничения,Направление);
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСтрокиПоПризнакамУчета(ФинансовыйПоказатель)
	ПолныйСписокРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();
	Для Каждого Разрез Из ПолныйСписокРазрезов Цикл
		Измерение = Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез];
		ИспользованиеРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,КЭШ_Разрезы);
		Элементы["ГраницыЗначений"+Разрез].ТолькоПросмотр = НЕ ИспользованиеРазреза;
		Если Не ИспользованиеРазреза Тогда
			Объект.ГраницыЗначений.НайтиПоИдентификатору(Элементы.ГраницыЗначений.ТекущаяСтрока)[Разрез] = Элементы["ГраницыЗначений"+Разрез].ОграничениеТипа.ПривестиЗначение(Неопределено);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Объект.ГраницыЗначений.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ДобавитьЗаполнить(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаполнить(Заполнение)
	Если Объект.ВидОграниченияОборотов.Пустая() Тогда 
		ПоказатьПредупреждение(,"Не выбран вид ограничения оборотов");
		Возврат;
	ИначеЕсли Объект.ВидОграниченияОборотов = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно") 
				И Объект.КонтролирующийСценарий.Пустая() Тогда
		ПоказатьПредупреждение(,"Не выбран контролирующий сценарий");		
		Возврат;
	ИначеЕсли Объект.ВидОграниченияОборотов = ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет") И НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ПоказатьПредупреждение(,"Не выбран сценарий!");		
		Возврат;
	КонецЕсли;
	Если Объект.ГраницыЗначений.Количество() > 0 И Заполнение Тогда
		Объект.ГраницыЗначений.Очистить();
	КонецЕсли;
	ОписаниеОбработатьВыборДляЗаполнения = Новый ОписаниеОповещения("ОбработатьВыборДляЗаполнения",ЭтотОбъект);
	ОткрытьФорму("Обработка.фин_ЗаполнениеКонтролируемыхФинансовыхПоказателей.Форма",Новый Структура("Заполнить,ИспользованиеКонтролируемыхЗначений,Сценарий,ВидОграниченияОборотов,Организация,Адрес",Заполнение,Объект.ИспользованиеКонтролируемыхЗначений,?(Объект.ВидОграниченияОборотов=ПредопределенноеЗначение("Перечисление.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет"),Объект.Сценарий,Объект.КонтролирующийСценарий),Объект.ВидОграниченияОборотов,Объект.Организация,АдресХранилища()),ЭтотОбъект,,,,ОписаниеОбработатьВыборДляЗаполнения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДляЗаполнения(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ОбработатьЗаполнение(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция АдресХранилища()
   Возврат ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбработатьЗаполнение(РезультатВыбора)
	Таблица = ПолучитьИзВременногоХранилища(РезультатВыбора);
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		НС = Объект.ГраницыЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	ДобавитьЗаполнить(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаКонтролирующегоСценарияПриИзменении(Элемент)
	Объект.ДатаНачалаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
	ПроверкаИнтервала();
КонецПроцедуры


// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
&НаКлиенте
Процедура ПроверкаИнтервала()

	Если (Объект.ДатаКонцаКонтролирующегоСценария='00010101') И (Объект.ДатаНачалаКонтролирующегоСценария<>'00010101') Тогда
		
		Объект.ДатаКонцаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
		
	ИначеЕсли (Объект.ДатаКонцаКонтролирующегоСценария<>'00010101') И (Объект.ДатаНачалаКонтролирующегоСценария='00010101') Тогда
		
		Объект.ДатаНачалаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
		
	ИначеЕсли Объект.ДатаКонцаКонтролирующегоСценария<Объект.ДатаНачалаКонтролирующегоСценария Тогда
		
		Если ТекущийЭлемент.Имя="ДатаКонцаКонтролирующегоСценария" Тогда
			
			Объект.ДатаНачалаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
			
		Иначе
			
			Объект.ДатаКонцаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ПроверкаИнтервала

&НаКлиенте
Процедура ДатаНачалаКонтролирующегоСценарияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Объект.ДатаНачалаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения,Направление);
	
	ПроверкаИнтервала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаКонтролирующегоСценарияПриИзменении(Элемент)
	
	Объект.ДатаКонцаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
	ПроверкаИнтервала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаКонтролирующегоСценарияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Объект.ДатаКонцаКонтролирующегоСценария=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения,Направление),ПериодичностьОграничения);
	
	ПроверкаИнтервала();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезыКонтроляИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазрезыУчета;
КонецПроцедуры

&НаКлиенте
Процедура ИсправляемыйДокументНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ИсправляемыйДокумент) Тогда
		ОткрытьФорму("Документ.фин_УстановкаЛимитовИЦелевыхЗначений.ФормаОбъекта",Новый Структура("Ключ",Объект.ИсправляемыйДокумент),,Объект.ИсправляемыйДокумент);
	ИначеЕсли СписокДокументовИсправлений.Количество()=1 Тогда
		РезультатВыбора = СписокДокументовИсправлений[0];
		ОткрытьФорму("Документ.фин_УстановкаЛимитовИЦелевыхЗначений.ФормаОбъекта",Новый Структура("Ключ",РезультатВыбора.Значение),,РезультатВыбора.Значение);
	ИначеЕсли СписокДокументовИсправлений.Количество()<>0 Тогда
		ОписаниеОбработатьВыборДокументовИсправлений = Новый ОписаниеОповещения("ОбработатьВыборДокументовИсправлений",ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОбработатьВыборДокументовИсправлений,СписокДокументовИсправлений,Элемент,СписокДокументовИсправлений[0]);
	Иначе
		Если Модифицированность Тогда
			ПоказатьПредупреждение(,"Перед вводом исправления необходимо сохранить изменения!");
			Возврат;
		КонецЕсли;
		ОткрытьФорму("Документ.фин_УстановкаЛимитовИЦелевыхЗначений.ФормаОбъекта",Новый Структура("Основание",Объект.Ссылка),ЭтотОбъект,Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументовИсправлений(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ОткрытьФорму("Документ.фин_УстановкаЛимитовИЦелевыхЗначений.ФормаОбъекта",Новый Структура("Ключ",РезультатВыбора.Значение),,РезультатВыбора.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНастройкамРегулярногоКонтроля(Команда)
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ОписаниеРезультатВыбораПериодов = Новый ОписаниеОповещения("ОбработкаРезультатВыбораПериодов",ЭтотОбъект);
		ОткрытьФорму("Документ.фин_УстановкаЛимитовИЦелевыхЗначений.Форма.ФормаВводаПериода",Новый Структура("Сценарий,ПериодПланирования",Объект.Сценарий,Объект.Дата),ЭтотОбъект,,,,ОписаниеРезультатВыбораПериодов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПоказатьПредупреждение(,"Необходимо указать контролируемый сценарий!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатВыбораПериодов(РезультатВыбораПериодов,ДополнительныеПараметры) Экспорт
	Если РезультатВыбораПериодов<>Неопределено Тогда
		Если Объект.ГраницыЗначений.Количество() > 0 Тогда
			Объект.ГраницыЗначений.Очистить();
		КонецЕсли;
		ЗаполнитьДокументПостояннымиПараметрамиКонтроля(РезультатВыбораПериодов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПостояннымиПараметрамиКонтроля(НачальныйПериод)
    фин_ЗащитаПривилегированныеПроцедуры.ЗаполнитьДокументПостояннымиПараметрамиКонтроля(Объект.ГраницыЗначений,Объект.Сценарий,Объект.ВидКонтролируемыхЗначений,Объект.ИспользованиеКонтролируемыхЗначений,НачальныйПериод);
КонецПроцедуры