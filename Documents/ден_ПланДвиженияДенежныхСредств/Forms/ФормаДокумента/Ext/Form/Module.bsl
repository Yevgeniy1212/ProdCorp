
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриСозданииНаСервере(ЭтаФорма);
	
	ПодготовитьФормуНаСервере();
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ДокументПриЧтенииНаСервере(ЭтотОбъект,ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.УстановитьЗаголовокФормыДокумента("", Объект.Ссылка, ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	общ_ОбщегоНазначенияКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	СценарийПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если (НЕ Объект.ВалютаДокумента = ТекущаяВалютаДокумента) И (ЗначениеЗаполнено(ТекущаяВалютаДокумента)) Тогда
		// Надо предложить пересчитать сумму.
		Если НЕ Объект.ДвиженияДенежныхСредств.Количество() = 0 Тогда 
			ТекстВопроса = НСтр("ru = 'Изменилась валюта планирования. Пересчитать суммы в табличной части документа?'");	
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОПересчетеСуммыВТабличнойЧасти", ЭтотОбъект), 
					   	   ТекстВопроса,
					   	   РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВалютаДокумента = Объект.ВалютаДокумента;
	
	ОбновитьКурсДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДвиженияДенежныхСредств

&НаКлиенте
Процедура ДвиженияДенежныхСредствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПериодПланирования 	= Объект.ПериодПланирования;
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидДенежныхСредств 	= Объект.ВидДенежныхСредств;
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.Подразделение 		= Объект.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствПериодПланированияПриИзменении(Элемент)
	
	ПериодПлан = Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПериодПланирования;
	
	Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПериодПланирования = ДвиженияДенежныхСредствПериодПланированияПриИзмененииНаСервере(ПериодПлан, Объект.Сценарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствПриходРасходПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход") Тогда
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя");
	ИначеЕсли Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход") Тогда
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход.Пустая() Тогда
		Если ТипЗнч(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации)=ТипЗнч(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка")) Тогда
			Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход");
		ИначеЕсли ТипЗнч(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации)=ТипЗнч(ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка")) Тогда
			Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Приход") Тогда
		 Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка");
	ИначеЕсли Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход") Тогда
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=ПредопределенноеЗначение("Перечисление.ден_ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка");
	Иначе
		СтандартнаяОбработка = Ложь;
		СписокТипов = Новый СписокЗначений;
		ПолучитьСписокТипов(СписокТипов);
		ДанныеВыбора = СписокТипов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление."+ВыбранноеЗначение+".ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДенежныхСредствДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.Контрагент) Тогда
	     Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.Контрагент=ПолучитьВладелца(Элементы.ДвиженияДенежныхСредств.ТекущиеДанные.ДоговорКонтрагента);
	 КонецЕсли;
	 
 КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда) Экспорт
	
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда) Экспорт
	
	Если НЕ фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ОбработкаЗаполненияНастройкой(Команда) Экспорт
	
	Если Объект.ВалютаДокумента.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана валюта планирования'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ДвиженияДенежныхСредств.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Очистить табличную часть перед заполнением?'");	
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОчисткеТабличнойЧасти", ЭтотОбъект, Команда), 
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, 
					   0);
	Иначе
		ОбработкаЗаполненияНастройкой(Команда);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыборПериода(Команда) Экспорт
	
	ВыбратьПериодПланирования(Объект.ПериодПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура МинусПериод(Команда) Экспорт
	
	ПлюсМинусПериодНаСервере(Ложь);
	УстановитьТекстПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлюсПериод(Команда) Экспорт
	
	ПлюсМинусПериодНаСервере(Истина);
	УстановитьТекстПериода();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.Ссылка.Пустая() тогда
		Параметр = "СценарийПланированияДДС";
		Объект.Сценарий = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(),Параметр);
		Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
	КонецЕсли;
	
	ТекущаяДатаДокумента 	= Объект.Дата;
	ТекущаяВалютаДокумента 	= Объект.ВалютаДокумента;
	
	РассчитатьИтоговыеСуммы();
	
	ТекущийПериодПланирования = Объект.ПериодПланирования;
	ВалютаУправленческогоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий, Объект.ПериодПланирования);
	ГоризонтПланирования 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий,Истина);
	ОткрыватьНастройкуДвижений 	= фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ПоказыватьДвиженияПриПроведении");	
	
	ЭтаФорма.Период = ПолучитьТекстПериода(Объект.ПериодПланирования, Объект.Сценарий);
	
	// обработка доступности формы на основании данных согласования документов
	усд_УправлениеСогласованиемДокументов.ДоступностьРедактированияДокумента(ЭтотОбъект,Объект);
	
	УстановкаЗаголовков();
	
	УстановитьКнопкиЗаполнения();
	УстановитьТекстПериода();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// способ вывода периода
	Периодичность = Объект.Сценарий.Периодичность;
	Если Объект.Сценарий.Пустая() ИЛИ (Периодичность = ПредопределенноеЗначение("Перечисление.фин_Периодичность.День") И ТипЗнч(Объект.Сценарий.ПродолжительностьЦикла) = Тип("Число")) Тогда
		// Элементы управления произвольным периодом
		Элементы.ПериодПланирования.Видимость = Истина;
		// Элементы управления периодом
		Элементы.НадписьПериодПланирования.Видимость = Ложь;
		Элементы.ПлюсПериод.Видимость = Ложь;
		Элементы.МинусПериод.Видимость = Ложь;
		Элементы.ПериодВыбрать.Видимость = Ложь;
	Иначе // периоды Месяц, Квартал, Год
		// Элементы управления датой
		Элементы.ПериодПланирования.Видимость = Ложь;
		// Элементы управления периодом
		Элементы.НадписьПериодПланирования.Видимость = Истина;
		Элементы.ПлюсПериод.Видимость = Истина;
		Элементы.МинусПериод.Видимость = Истина;
		Элементы.ПериодВыбрать.Видимость = Истина;
		Форма.Период = ПолучитьТекстПериода(Объект.ПериодПланирования, Объект.Сценарий);
	КонецЕсли;
	
	Элементы.ДвиженияДенежныхСредств.ПодчиненныеЭлементы.ДвиженияДенежныхСредствПериодПланирования.Видимость = ПолучитьПродолжительностьЦикла(Объект.Сценарий) > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеПоЭлементуНавигации(Элемент)
	
	общ_ОбщегоНазначенияКлиент.НажатиеНаПанельЗакладок(Элементы, Элемент, Элементы.ГруппаСтраницыЛевая);
	
КонецПроцедуры

// Рассчитывает итоговые суммы по плану
//
&НаСервере
Процедура РассчитатьИтоговыеСуммы();
	
	ИтогоПоступления = 0;
	ИтогоПлатежи = 0;
	Для Каждого Строка Из Объект.ДвиженияДенежныхСредств Цикл
		Если Строка.ПриходРасход = Перечисления.ден_ВидыДвиженийПриходРасход.Приход Тогда
			ИтогоПоступления = ИтогоПоступления+Строка.Сумма;
		ИначеЕсли  Строка.ПриходРасход = Перечисления.ден_ВидыДвиженийПриходРасход.Расход Тогда
	        ИтогоПлатежи = ИтогоПлатежи+Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ЧДП = ИтогоПоступления-ИтогоПлатежи;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы

&НаСервереБезКонтекста
Функция ПолучитьПродолжительностьЦикла(Знач Сценарий)

	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий);	

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьТекстПериода(ПериодПланирования, Сценарий)
	
	Периодичность = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность"); 
	
	Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ПериодПланирования, Периодичность);
	
	Возврат Период;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстПериода()
	
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования, Объект.Сценарий);
	НадписьПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования, Объект.Сценарий);
	ТекстГоризонт = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ГоризонтПланирования, Объект.Сценарий);
	Если ТекстГоризонт <> НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования + " - " + ТекстГоризонт;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаЗаголовков()
	
	оф_ДДСЗаголовок = "Планируемые движения";
	оф_ДополнительноЗаголовок = "Дополнительно";
	оф_ПериодПланированияЗаголовок = "Период планирования";
	оф_РазрезыПланированияЗаголовок = "Разрезы планирования";
	оф_СвободныйБалансПоПлануЗаголовок = "Свободный баланс по плану ДДС";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКнопкиЗаполнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗаполненияПланаДвиженияДенежныхСредств.Код,
		|	НастройкиЗаполненияПланаДвиженияДенежныхСредств.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ден_НастройкиЗаполненияПланаДвиженияДенежныхСредств КАК НастройкиЗаполненияПланаДвиженияДенежныхСредств
		|ГДЕ
		|	(НастройкиЗаполненияПланаДвиженияДенежныхСредств.Сценарий = &Сценарий
		|			ИЛИ НастройкиЗаполненияПланаДвиженияДенежныхСредств.Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка))
		|	И (НастройкиЗаполненияПланаДвиженияДенежныхСредств.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|			ИЛИ НастройкиЗаполненияПланаДвиженияДенежныхСредств.ВалютаДенежныхСредств = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|	И НастройкиЗаполненияПланаДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьКнопкиВКоманднойПанели("Настройка"+Выборка.Код,
									  Выборка.Наименование,
									  Элементы.ДвиженияДенежныхСредств.КоманднаяПанель.ПодчиненныеЭлементы.ПодменюЗаполнения, 
								   	  "Настройка"+Выборка.Код,
								   	  "Подключаемый_ОбработкаЗаполненияНастройкой");
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура СоздатьКнопкиВКоманднойПанели(ИмяКнопки,ЗаголовокКнопки,Родитель,ИмяКоманды,ИмяСобытия);
	
	Если Команды.Найти(ИмяКоманды) = Неопределено тогда
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = ИмяСобытия;
	КонецЕсли;
	Если Элементы.Найти(ИмяКнопки) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКнопки,Тип("КнопкаФормы"),Родитель);
		Элемент.Заголовок = ЗаголовокКнопки;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	
	ПродолжительностьЦикла 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	Объект.ПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Объект.ПериодПланирования,Объект.Сценарий);
	ГоризонтПланирования 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий,Истина);
	
	ПриИзмененииПериодаНаСервере();
	
	УстановитьТекстПериода();
	
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий)=1 Тогда
		Для Каждого СтрокаДДС Из Объект.ДвиженияДенежныхСредств Цикл
			СтрокаДДС.ПериодПланирования = Объект.ПериодПланирования;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаДДС Из Объект.ДвиженияДенежныхСредств Цикл
			СтрокаДДС.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаДДС.ПериодПланирования,Объект.Сценарий);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьКурсДокумента();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаНаСервере()
	
	Если ТекущийПериодПланирования = Объект.ПериодПланирования Тогда
		Возврат;	
	КонецЕсли;
	
	ПродолжительностьЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования);
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий,Истина);
	
	Для Каждого СтрокаОборотов Из Объект.ДвиженияДенежныхСредств Цикл
		Если СтрокаОборотов.ПериодПланирования = '00010101' Тогда
			СтрокаОборотов.ПериодПланирования = Объект.ПериодПланирования + (СтрокаОборотов.ПериодПланирования-ТекущийПериодПланирования);
			СтрокаОборотов.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотов.ПериодПланирования,Объект.Сценарий.Периодичность);
		Иначе
			ТекущийПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущийПериодПланирования,Объект.Сценарий.Периодичность);
			СмещениеПериода = 0;
			Если СтрокаОборотов.ПериодПланирования <> ТекущийПериодПланирования Тогда
				Флаг = 1;
				Если СтрокаОборотов.ПериодПланирования < ТекущийПериодПланирования Тогда
					Флаг = -1;
				КонецЕсли;
				ТребуемыйПериод 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОборотов.ПериодПланирования,Объект.Сценарий.Периодичность);
				РассчитанныйПериод 	= ТекущийПериодПланирования;
				Пока РассчитанныйПериод <> ТребуемыйПериод И (СмещениеПериода*Флаг) < 10000 Цикл
					СмещениеПериода 	= СмещениеПериода + Флаг;
					РассчитанныйПериод  = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(РассчитанныйПериод,Объект.Сценарий.Периодичность,Флаг);
				КонецЦикла;
			КонецЕсли;
			СтрокаОборотов.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий.Периодичность,СмещениеПериода);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийПериодПланирования 	= Объект.ПериодПланирования;

КонецПроцедуры 

// Получает курс и кратность документа на основании реквизитов шапки
//
&НаСервере
Процедура ОбновитьКурсДокумента() 
	
	Если Объект.Сценарий.ИспользоватьКурсыСценария Тогда
		РегистрКурсов = РегистрыСведений.КурсыВалютПоСценариям;
		ОтборПоВалюте = Новый Структура;
		ОтборПоВалюте.Вставить("Валюта", Объект.ВалютаДокумента);
		ОтборПоВалюте.Вставить("Сценарий", Объект.Сценарий);		
	Иначе
		РегистрКурсов = РегистрыСведений.КурсыВалют;
		ОтборПоВалюте = Новый Структура;
		ОтборПоВалюте.Вставить("Валюта",Объект.ВалютаДокумента);
	КонецЕсли;
	
	СтруктураКурсов = РегистрКурсов.ПолучитьПоследнее(Объект.ПериодПланирования,ОтборПоВалюте);
	Объект.КурсДокумента = СтруктураКурсов.Курс;
	Объект.КратностьДокумента = СтруктураКурсов.Кратность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланирования(Период)
	
	СписокПериодов = ПолучитьСписокПериодов(Период,Объект.Сценарий);
	Если СписокПериодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВыборИзСписка(
		Новый ОписаниеОповещения("ВыполнитьПослеВыбораИзСпискаПериодаПланирования", ЭтотОбъект),
		СписокПериодов,
		Элементы.ПериодВыбрать,
		СписокПериодов[0]);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПериодаПланирования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент.Значение) = Тип("Число") Тогда
		ВыбратьПериодПланирования(Дата(ВыбранныйЭлемент.Значение,1,1));
	Иначе
		Объект.ПериодПланирования = ВыбранныйЭлемент.Значение;
		УстановитьТекстПериода();
		ПриИзмененииПериодаНаСервере();
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПлюсМинусПериодНаСервере(Плюс = Истина)
	
	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ПериодПланирования, Объект.Сценарий, Плюс);
	
	Период = ПолучитьТекстПериода(Объект.ПериодПланирования, Объект.Сценарий);
	
	ОбновитьКурсДокумента();
	
	ПриИзмененииПериодаНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПериодов(ПериодПланирования, Сценарий)
	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования, Сценарий);	
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОПересчетеСуммыВТабличнойЧасти(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСуммыВТабличнойЧастиДДС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВТабличнойЧастиДДС()
	
	СтруктураГруппаВалют = Новый Структура;
	
	СтруктураГруппаВалют.Вставить("СтараяВалютаДокумента",  фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяВалютаДокумента, "Код"));
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.ВалютаДокумента, "Код"));
	СтруктураКурсыВалют = фин_ОбщегоНазначенияСервер.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, Объект.ПериодПланирования);
	
	Для Каждого Строка Из Объект.ДвиженияДенежныхСредств Цикл
		  Строка.Сумма = фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.Сумма,
										  										  ТекущаяВалютаДокумента,
																				  Объект.ВалютаДокумента,
																				  СтруктураКурсыВалют.СтараяВалютаДокументаКурс,
																				  СтруктураКурсыВалют.ВалютаДокументаКурс,
																				  СтруктураКурсыВалют.СтараяВалютаДокументаКратность,
																				  СтруктураКурсыВалют.ВалютаДокументаКратность);
	КонецЦикла;
	
	РассчитатьИтоговыеСуммы();
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ДвиженияДенежныхСредствПериодПланированияПриИзмененииНаСервере(Значение, Сценарий)
	
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Значение, Сценарий)
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокТипов(СписокТипов)
	
	СписокТипов.Добавить(Метаданные.Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.Имя, Метаданные.Перечисления.ден_ВидыОперацийПланируемоеПоступлениеДС.Синоним);
	СписокТипов.Добавить(Метаданные.Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.Имя, Метаданные.Перечисления.ден_ВидыОперацийЗаявкиНаРасходование.Синоним);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладелца(Значение)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Значение, "Владелец");
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОчисткеТабличнойЧасти(Ответ, Команда) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	
	ОбработкаЗаполненияНастройкой(Команда);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНачалоПериода(ДатаНачалаПроизвольная, Настройка) Экспорт
	
	Если ДатаНачалаПроизвольная = Неопределено Или Не ЗначениеЗаполнено(ДатаНачалаПроизвольная) Тогда
		ДатаНачалаПроизвольная = '00010101';
		Возврат;
	КонецЕсли;
	
	//ДатаНачалаПроизвольная = ДатаНачала;
	Подсказка = "Укажите окончание периода сбора данных";
	ДополнительныеПараметры = Новый Структура("Настройка, ДатаНачалаПроизвольная", Настройка, ДатаНачалаПроизвольная);
	ПоказатьВводДаты(Новый ОписаниеОповещения("ПослеВводаОкончаниеПериода",ЭтотОбъект, ДополнительныеПараметры),, Подсказка, ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОкончаниеПериода(ДатаОкончанияПроизвольная, ДополнительныеПараметры) Экспорт 
	
	Если ДатаОкончанияПроизвольная = Неопределено ИЛИ Не ЗначениеЗаполнено(ДатаОкончанияПроизвольная) Тогда
		ДатаОкончанияПроизвольная = '00010101';
		Возврат;
	КонецЕсли;
	
	ДатаОкончанияПроизвольная = КонецДня(ДатаОкончанияПроизвольная);
	
	Если Не ОбработкаЗаполненияНастройкойНаСервере(ДополнительныеПараметры.ДатаНачалаПроизвольная, ДатаОкончанияПроизвольная, ДополнительныеПараметры.Настройка) Тогда
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьНастройкуЗаполнения(КодНастройки, Настройка, КоличествоДанных)
	
	Настройка = Справочники.ден_НастройкиЗаполненияПланаДвиженияДенежныхСредств.НайтиПоКоду(КодНастройки);
	
	КоличествоДанных = Настройка.ОбъединяемыеДанные.НайтиСтроки(Новый Структура("СпособОпределенияПериода", Перечисления.ден_СпособыОпределенияПериодов.Произвольный)).Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияНастройкой(Команда)

	Настройка = Неопределено;

	КодНастройки = Сред(Команда.Имя, СтрДлина("Настройка") + 1);
	ДатаНачалаПроизвольная = '00010101';
	ДатаОкончанияПроизвольная = '00010101';
	КоличествоДанных = 0;
	ПолучитьНастройкуЗаполнения(КодНастройки,Настройка,КоличествоДанных);
	
	Если КоличествоДанных > 0 Тогда
		Подсказка = "Укажите начало периода сбора данных";
		ПоказатьВводДаты(Новый ОписаниеОповещения("ПослеВводаНачалоПериода",ЭтотОбъект,Настройка),, Подсказка, ЧастиДаты.Дата);
	Иначе
		Если Не ОбработкаЗаполненияНастройкойНаСервере(ДатаНачалаПроизвольная, ДатаОкончанияПроизвольная, Настройка) тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ОбработкаЗаполненияНастройкойНаСервере(ДатаНачалаПроизвольная, ДатаОкончанияПроизвольная, Настройка)
	
	РезультатОбработки = Документы.ден_ПланДвиженияДенежныхСредств.ОбработкаЗаполненияНастройкой(Объект, 
																								 ДатаНачалаПроизвольная, 
																								 ДатаОкончанияПроизвольная, 
																								 Настройка);
	
	Возврат РезультатОбработки;
	
КонецФункции 

