#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ОбработкаЗаполненияНастройкой(Объект, ДатаНачалаПроизвольная, ДатаОкончанияПроизвольная, Настройка) Экспорт

	ВалютаУправленческогоУчета 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	НачалоПлановогоПериода 					= Объект.ПериодПланирования;
	ОкончаниеПлановогоПериода 				= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования, Объект.Сценарий);
	НачалоПредыдущегоПлановогоПериода 		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,-1);
	ОкончаниеПредыдущегоПлановогоПериода 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(НачалоПредыдущегоПлановогоПериода,Объект.Сценарий);

	Если Не ДатаОкончанияПроизвольная = Неопределено Тогда
		ДатаОкончанияПроизвольная = КонецДня(ДатаОкончанияПроизвольная);
	КонецЕсли;
	
	СтруктураКурсовУпр	 		= Новый Соответствие;
	СтруктураКурсовДокумента 	= Новый Соответствие;
	
	Для Каждого СтрокаНастройки Из Настройка.ОбъединяемыеДанные Цикл
		Если ЗначениеЗаполнено(Объект.ВидДенежныхСредств) И ЗначениеЗаполнено(СтрокаНастройки.ВидДенежныхСредств)И Объект.ВидДенежныхСредств<>СтрокаНастройки.ВидДенежныхСредств Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВидДенежныхСредств) Тогда
			мВидДенежныхСредств = Объект.ВидДенежныхСредств;
		Иначе
			мВидДенежныхСредств = СтрокаНастройки.ВидДенежныхСредств;
		КонецЕсли;
		Запрос = Новый ПостроительОтчета;
		Периодичность	= "Период";
		Фильтр			= "";
		ИмяРегистра		= "";
		Поле_ПриходРасход 					= "ПриходРасход";
		Поле_ВидОперации 					= "ВидОперации";
		Поле_СтатьяДвиженияДенежныхСредств 	= "СтатьяДвиженияДенежныхСредств";
		Поле_Проект 						= "Проект";
		Поле_Контрагент 					= "Контрагент";
		Поле_ДоговорКонтрагента 			= "ДоговорКонтрагента";
		Поле_Сумма 							= "СуммаУпрОборот";
		Поле_ВидДенежныхСредств 			= "ВидДенежныхСредств";
		Поле_Подразделение 					= "Подразделение";
		Если СтрокаНастройки.ИсточникДанныхРасчета=Перечисления.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ПлановыеДвиженияДенежныхСредств Тогда
			ИмяРегистра 					= "ден_ПланыДвиженияДенежныхСредств";
		ИначеЕсли СтрокаНастройки.ИсточникДанныхРасчета=Перечисления.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ФактическиеДвиженияДенежныхСредств Тогда
			ИмяРегистра 					= "ден_ДвиженияДенежныхСредств";
			Поле_ВидОперации 				= "ДокументДвижения.ВидОперации";
		ИначеЕсли СтрокаНастройки.ИсточникДанныхРасчета=Перечисления.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений Тогда
			Поле_Сумма 						= "СуммаУпрПриход";
			ИмяРегистра = ?(СтрокаНастройки.ПриходРасход=Перечисления.ден_ВидыДвиженийПриходРасход.Приход,"ден_ПланируемыеПоступленияДенежныхСредств","ден_ЗаявкиНаРасходованиеСредств");
			Если СтрокаНастройки.ПриходРасход=Перечисления.ден_ВидыДвиженийПриходРасход.Приход Тогда
				Поле_ПриходРасход 			= "ЗНАЧЕНИЕ(Перечисление.ден_ВидыДвиженийПриходРасход.Приход)";
				Поле_ВидОперации 			= "ДокументПланирования.ВидОперации";
				Поле_ВидДенежныхСредств 	= "ДокументПланирования.ФормаОплаты";
				Поле_Подразделение 			= "ДокументПланирования.ЦФО";
			Иначе
				Поле_ПриходРасход 			= "ЗНАЧЕНИЕ(Перечисление.ден_ВидыДвиженийПриходРасход.Расход)";
				Поле_ВидОперации 			= "ЗаявкаНаРасходование.ВидОперации";
				Поле_ВидДенежныхСредств 	= "ЗаявкаНаРасходование.ФормаОплаты";
				Поле_Подразделение 			= "ЗаявкаНаРасходование.ЦФО";
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий)>1 Тогда
			Периодичность = Строка(Объект.Сценарий.Периодичность);
		КонецЕсли;
		Если ЗначениеЗаполнено(мВидДенежныхСредств) Тогда
			Фильтр = Фильтр + ?(Фильтр="",""," И ")+Поле_ВидДенежныхСредств+"=&ВидДенежныхСредств";
			Запрос.Параметры.Вставить("ВидДенежныхСредств",мВидДенежныхСредств);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Фильтр = Фильтр + ?(Фильтр="",""," И ")+Поле_Подразделение+"=&Подразделение";
			Запрос.Параметры.Вставить("Подразделение",Объект.Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаНастройки.ПриходРасход) И СтрокаНастройки.ИсточникДанныхРасчета<>Перечисления.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений Тогда
			Фильтр = Фильтр + ?(Фильтр="",""," И ")+Поле_ПриходРасход+"=&ПриходРасход";
			Запрос.Параметры.Вставить("ПриходРасход",СтрокаНастройки.ПриходРасход);
		КонецЕсли;
		Фильтр = Фильтр + ?(Фильтр="",""," И ")+"Организация=&Организация";
		Запрос.Параметры.Вставить("Организация",Объект.Организация);
		ДоступныеПоля = Новый СписокЗначений;
		ДоступныеПоля.Добавить(Поле_ПриходРасход,"ПриходРасход");
		ДоступныеПоля.Добавить(Поле_ВидДенежныхСредств,"ВидДенежныхСредств");
		Если СтрокаНастройки.СпособОпределенияПериода = Перечисления.ден_СпособыОпределенияПериодов.Произвольный Тогда
			ДоступныеПоля.Добавить(?(Периодичность="Период","&НачалоПериодаТекущего","Период"),"ПериодПланирования");
			Запрос.Параметры.Вставить("НачалоПериодаТекущего",	Объект.ПериодПланирования);
			Запрос.Параметры.Вставить("НачалоПериода",	ДатаНачалаПроизвольная);
			Запрос.Параметры.Вставить("КонецПериода",	ДатаОкончанияПроизвольная);
		ИначеЕсли СтрокаНастройки.СпособОпределенияПериода = Перечисления.ден_СпособыОпределенияПериодов.ПредшествующийПериод Тогда
			ДоступныеПоля.Добавить(?(Периодичность="Период","&НачалоПериодаТекущего","ДОБАВИТЬКДАТЕ(Период,"+Периодичность+","+Формат(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Объект.Сценарий,Объект.ПериодПланирования),"ЧРД=.; ЧГ=")+")"),"ПериодПланирования");
			Запрос.Параметры.Вставить("НачалоПериодаТекущего",	Объект.ПериодПланирования);
			Запрос.Параметры.Вставить("НачалоПериода",	НачалоПредыдущегоПлановогоПериода);
			Запрос.Параметры.Вставить("КонецПериода",	ОкончаниеПредыдущегоПлановогоПериода);
		Иначе
			ДоступныеПоля.Добавить(?(Периодичность="Период","&НачалоПериода","Период"),"ПериодПланирования");
			Запрос.Параметры.Вставить("НачалоПериода",	НачалоПлановогоПериода);
			Запрос.Параметры.Вставить("КонецПериода",	ОкончаниеПлановогоПериода);
		КонецЕсли;
		ДоступныеПоля.Добавить("СУММА("+Поле_Сумма+")","Сумма");
		Если ЗначениеЗаполнено(СтрокаНастройки.ВидОперации) Тогда
			Поле_ВидОперации = "&ВидОперации";
			Запрос.Параметры.Вставить("ВидОперации",СтрокаНастройки.ВидОперации);
		КонецЕсли;
		ДоступныеПоля.Добавить(Поле_ВидОперации,"ВидОперации");
		Если СтрокаНастройки.ЗаполнятьСтатьюДДС Тогда
			Если ЗначениеЗаполнено(СтрокаНастройки.СтатьяДвиженияДенежныхСредств) Тогда
				Поле_СтатьяДвиженияДенежныхСредств = "&СтатьяДвиженияДенежныхСредств";
				Запрос.Параметры.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаНастройки.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			ДоступныеПоля.Добавить(Поле_СтатьяДвиженияДенежныхСредств,"СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		Если СтрокаНастройки.ЗаполнятьПроект Тогда
			Если ЗначениеЗаполнено(СтрокаНастройки.Проект) Тогда
				Поле_Проект = "&Проект";
				Запрос.Параметры.Вставить("Проект",СтрокаНастройки.Проект);
			КонецЕсли;
			ДоступныеПоля.Добавить(Поле_Проект,"Проект");
		КонецЕсли;
		Если СтрокаНастройки.ЗаполнятьПодразделение Тогда
			Если ЗначениеЗаполнено(СтрокаНастройки.Подразделение) Тогда
				Поле_Подразделение = "&Подразделение";
				Запрос.Параметры.Вставить("Подразделение",СтрокаНастройки.Подразделение);
			КонецЕсли;
			ДоступныеПоля.Добавить(Поле_Подразделение,"Подразделение");
		КонецЕсли;
		Если СтрокаНастройки.ЗаполнятьКонтрагента Тогда
			ДоступныеПоля.Добавить(Поле_Контрагент,"Контрагент");
		КонецЕсли;
		Если СтрокаНастройки.ЗаполнятьДоговорКонтрагента Тогда
			ДоступныеПоля.Добавить(Поле_ДоговорКонтрагента,"ДоговорКонтрагента");
		КонецЕсли;
		ТекстПоля = "";
		ТекстГруппировки = "";
		Для Каждого Поле Из ДоступныеПоля Цикл
			ТекстПоля = ТекстПоля+?(ТекстПоля="","",",")+Символы.ПС+Поле.Значение+" КАК "+Поле.Представление;
			Если Поле.Представление<>"Сумма" Тогда
				ТекстГруппировки=ТекстГруппировки+?(ТекстГруппировки="","",",")+Символы.ПС+Поле.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ "+ТекстПоля+" ИЗ РегистрНакопления."+ИмяРегистра+".Обороты(&НачалоПериода,&КонецПериода,"+Периодичность+","+Фильтр+") КАК Регистр"+?(ТекстГруппировки="","","
		|СГРУППИРОВАТЬ ПО
		|	"+ТекстГруппировки);

		Запрос.ЗаполнитьНастройки();
		
		Если СтрокаНастройки.НастройкиОтбора <> "" Тогда
			Выгрузка = ден_ПроцедурыКазначейства.ПолучитьДвиженияДенежныхСредствПоНастройкеОтбора(Запрос.Текст, СтрокаНастройки.НастройкиОтбора, Запрос.Параметры);	
		Иначе
			Для Каждого Поле Из Запрос.ВыбранныеПоля Цикл
				Поле.Представление = Поле.Имя;
			КонецЦикла;
			Запрос.Выполнить();
			Выгрузка = Запрос.Результат.Выгрузить();
		КонецЕсли;
		
		Для Каждого Поле Из Запрос.ВыбранныеПоля Цикл
			Колонка = Выгрузка.Колонки.Найти(Поле.ПутьКДанным);
			Если Колонка <> Неопределено Тогда
				Колонка.Имя = Поле.Имя;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаВыборки Из Выгрузка Цикл
			//Если ЗначениеЗаполнено(СтрокаВыборки.ВидОперации) И ТипЗнч(СтрокаВыборки.ВидОперации)<>Тип("ПеречислениеСсылка.ден_ВидыОперацийЗаявкиНаРасходование") И ТипЗнч(СтрокаВыборки.ВидОперации)<>Тип("ПеречислениеСсылка.ден_ВидыОперацийПланируемоеПоступлениеДС") Тогда
			//	СтрокаВыборки.ВидОперации = УправлениеДенежнымиСредствамиКлиентСервер.ОпределитьВидОперацииПлан(СтрокаВыборки.ВидОперации);
			//КонецЕсли;
			СтрокаВыборки.Сумма = СтрокаВыборки.Сумма * СтрокаНастройки.КоэффициентРасчетаСуммы;
			Если Объект.ВалютаДокумента <> ВалютаУправленческогоУчета Тогда
				КурсУпр = СтруктураКурсовУпр.Получить(СтрокаВыборки.ПериодПланирования);
				Если КурсУпр = Неопределено Тогда
					КурсУпр = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,СтрокаВыборки.ПериодПланирования,Объект.Сценарий);
					СтруктураКурсовУпр.Вставить(СтрокаВыборки.ПериодПланирования,КурсУпр);
				КонецЕсли;
				Курс = СтруктураКурсовДокумента.Получить(СтрокаВыборки.ПериодПланирования);
				Если Курс = Неопределено Тогда
					Курс = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьКурсВалюты(Объект.ВалютаДокумента,СтрокаВыборки.ПериодПланирования,Объект.Сценарий);
					СтруктураКурсовДокумента.Вставить(СтрокаВыборки.ПериодПланирования,Курс);
				КонецЕсли;
				СтрокаВыборки.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаВыборки.Сумма,ВалютаУправленческогоУчета,Объект.ВалютаДокумента,КурсУпр.Курс,КурсУпр.Кратность,Курс.Курс,Курс.Кратность);
			КонецЕсли;
			НоваяСтрока = Объект.ДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВыборки);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = фин_УправлениеПроведениемДокументовСервер.ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ);
	
	ТаблицаДвиженияДенежныхСредств = ПараметрыПроведения.ТаблицаДвиженияДенежныхСредств;
	Если ТаблицаДвиженияДенежныхСредств <> Неопределено Тогда
		КолонкиГруппировок = "ПриходРасход,ВидОперации,СтатьяДвиженияДенежныхСредств,Проект,Контрагент,ДоговорКонтрагента,ВидДенежныхСредств,ПериодПланирования,Подразделение";
		ПараметрыПроведения.ТаблицаДвиженияДенежныхСредств.Свернуть(КолонкиГруппировок, "Сумма");
	КонецЕсли; 
	
	Возврат ПараметрыПроведения;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
КонецПроцедуры

#КонецЕсли