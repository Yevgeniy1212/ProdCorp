////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы З-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме З-8.
//
Функция Печатьтаблицы()
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнализФинансовогоРезультата";
	Макет       = ПолучитьМакет("Макет");

	
	ОбластьМакета = Макет.ПолучитьОбласть("Область1");
	
	НачалоПериода = НачалоГода(Дата);
	КонецПериода  = КонецМесяца(ДобавитьМесяц(Дата,-1));

	ОбластьМакета.Параметры.ПредставлениеФактическийРезультат	 = "Финансовый фактичекий результат за период " + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
    ОбластьМакета.Параметры.Сумма = ФинансовыйРезультатБУ;
	
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода  = КонецГода(Дата);
	
	ОбластьМакета.Параметры.ПредставлениеПрогноз = "Прогнозные на период " + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область2");
	Для Каждого СтрокаТЧ из ПланируемыеДоходыРасходы Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область3");
	ОбластьМакета.Параметры.ПредставлениеФинансовыйРезультатДоПродаж = "Финансовый результат до продаж";
	ОбластьМакета.Параметры.Сумма = ФинансовыйРезультатДоПродаж;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область4");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Область5");
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьБронирование()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Макет" Тогда
		ТабДокумент = Печатьтаблицы();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
                                                                                                                                                    
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Макет","Форма для печати");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//
//
Процедура ПолучитьФинансовыйРезультатПоБУ() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",НачалоДня(НачалоМесяца(Дата)));
		
	Запрос.УстановитьПараметр("ВыбСчет",ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстатокКт-ТиповойОстатки.СуммаОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Период, 
	|										Счет В ИЕРАРХИИ (&Выбсчет),
	|										,
	|										)
	|						КАК ТиповойОстатки
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ФинансовыйРезультатБУ = Результат.Остаток/1000;
	Иначе
		ФинансовыйРезультатБУ = 0;
	КонецЕсли;
	
	
КонецПроцедуры

//
//
Процедура ЗаполнитьДанныеПоПрогнозуДоходовРасходов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	| 	Справочник.ссылка Как СтатьяБюджета,
	| 	ВнЗапрос.Сумма Как Сумма
	|ИЗ
	|  Справочник.б_СтруктураПланируемыхДоходовРасходов КАК Справочник
	|
	|Левое Соединение
	|      (ВЫБРАТЬ
	|          СтатьиБюджета.ССылка КАК СтатьяОборотов,
	|          Сумма(ЕстьNull(Оборот.СуммаОборот,0)*СтатьиБюджета.ПризнакСуммы/1000) КАК Сумма
	|        ИЗ
	|  			Справочник.б_СтруктураПланируемыхДоходовРасходов.ДанныеПоБюджетам КАК СтатьиБюджета
	|
	|        	Левое Соединение 
	|              (ВЫБРАТЬ
	|					ТекущийБюджет.СтатьяБюджета,
	|					ТекущийБюджет.СуммаОборот
	|               ИЗ
	|					РегистрНакопления.б_Бюджет.Обороты(
	|						&НачалоПериода,
	|						&КонецПериода,
	|						,Статус = &Статус) КАК ТекущийБюджет
	|              ) КАК Оборот
	|         	ПО
	|           	  Оборот.СтатьяБюджета = СтатьиБюджета.СтатьяБюджета
	|        СГРУППИРОВАТЬ ПО СтатьиБюджета.ССылка
	|      ) КАК ВнЗапрос
	|     По ВнЗапрос.СтатьяОборотов = Справочник.Ссылка
	|
	|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоМесяца(Дата)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецГода(Дата)));
	Запрос.УстановитьПараметр("Статус", Перечисления.СостоянияОбъектов.Утвержден);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПланируемыеДоходыРасходы.Загрузить(Результат);
	
КонецПроцедуры

//
//
Процедура ПолучитьФинансовыйРезультатДоПродаж() Экспорт
	
	ФинансовыйРезультатДоПродаж = ФинансовыйРезультатБУ + ПланируемыеДоходыРасходы.Итог("Сумма");
	
КонецПроцедуры

Функция ПолучитьЦенуБезНДС(А) Экспорт
	ВозвЦена = 0;
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки = 2 Тогда
			ВозвЦена = СтрокаТЧ["Сумма"+СокрЛП(А)];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ВозвЦена;
КонецФункции

Функция ПолучитьСебестоимость(А) Экспорт
	ВозвЦена = 0;
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки = 3 Тогда
			ВозвЦена = СтрокаТЧ["Сумма"+СокрЛП(А)];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвЦена;
КонецФункции

//
//
Процедура РассчитатьТекущуюСтроку(ТекСтрока) Экспорт
	
	Для А = 1 По 20 Цикл
		ЦенаБезНДС = ПолучитьЦенуБезНДС(А);
		Себестоимость = ПолучитьСебестоимость(А);
		
		Если ЦенаБезНДС - Себестоимость <> 0 Тогда
			ТекСтрока["Сумма"+СокрЛП(А)] = ?(ТекСтрока.Количество=0,0,ФинансовыйРезультатДоПродаж 
											+ (ТекСтрока.Количество*(ЦенаБезНДС-Себестоимость))/1000);
		Иначе
			ТекСтрока["Сумма"+СокрЛП(А)] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСуммыПоКолонке(НомерКолонки) Экспорт
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.НомерСтроки > 3 Тогда
		СтрокаТЧ["Сумма"+СокрЛП(НомерКолонки)] = ФинансовыйРезультатДоПродаж 
										+ (СтрокаТЧ.Количество*(ПолучитьЦенуБезНДС(НомерКолонки)-ПолучитьСебестоимость(НомерКолонки)))/1000;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьЦенуБезНДС(СуммаСНДС,НомерКолонки) Экспорт
	
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		Если СтрокаТЧ.НомерСтроки = 2 Тогда
			СтрокаТЧ["Сумма"+НомерКолонки] = Окр(100 * СуммаСНДС / (100 + СтавкаНДС.Ставка),0,1);
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура РассчитатьРезультатСПродажами() Экспорт
	
	Для Каждого СтрокаТЧ из ФинансовыйРезультатСПродажами Цикл
		
		Если СтрокаТЧ.НомерСтроки > 3 Тогда
			Для А = 1 По 20 Цикл
				СтрокаТЧ["Сумма"+СокрЛП(А)] = 0;
			КонецЦикла;
			
			РассчитатьТекущуюСтроку(СтрокаТЧ)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура  ЗаполнитьДанныеПоПродажам() Экспорт
	ФинансовыйРезультатСПродажами.Очистить();
	
	НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	НоваяСтрока.Наименование = "Цена,тенге за тонну";
	
	НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	НоваяСтрока.Наименование = "Цена без НДС,тенге за тонну";
	
	НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	НоваяСтрока.Наименование = "Себестоимость без НДС,тенге за тонну";
	
	Для А = 1 По 20 Цикл
		НоваяСтрока = ФинансовыйРезультатСПродажами.Добавить();
	КонецЦИкла
	
КонецПроцедуры

//
//
Процедура ПервоначальноеЗаполнениеДанных() Экспорт
	
	ПолучитьФинансовыйРезультатПоБУ();
	ЗаполнитьДанныеПоПрогнозуДоходовРасходов();
	ПолучитьФинансовыйРезультатДоПродаж();
	ЗаполнитьДанныеПоПродажам();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    // Обработка для работы в версии 8.2
	Если ТипЗнч(Основание) <> Тип("Структура")
		И Основание <> НЕОПРЕДЕЛЕНО Тогда
	
		//ЗаполнитьПоДокументуОснования(Основание);
    КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаПроведения()

// Предопределенная процедура обработки удаления проведения документа
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();

