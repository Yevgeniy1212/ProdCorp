////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим       - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Дата,
	               |	ДатаСобеседования,
	               |	ВремяСобеседования,
	               |	Факт,
	               |	ФизЛицо,
	               |	РезультатСобеседования,
	               |	Ответственный,
				   |    Подразделение,
				   |    Должность,
	               |	Ссылка,
				   |	Статусы.Статус КАК Статус
	               |ИЗ
	               |	Документ." + Метаданные().Имя + "
				   |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КандидатыНаРаботуСрезПоследних.Статус КАК Статус,
	               |			КандидатыНаРаботуСрезПоследних.ФизЛицо КАК Кандидат 
	               |		ИЗ
	               |			РегистрСведений.КандидатыНаРаботу.СрезПоследних КАК КандидатыНаРаботуСрезПоследних) КАК Статусы
	               |		ПО  ФизЛицо = Статусы.Кандидат
	               |
	               |ГДЕ
	               |	Ссылка = &ДокументСсылка
				   |";
	
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если ВыборкаПоШапкеДокумента.Факт 
	   И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РезультатСобеседования) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбрано решение по кандидату!", Отказ, Заголовок);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФизЛицо) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбран кандидат!", Отказ, Заголовок);	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.Статус = Перечисления.СостоянияКандидатаНаРаботу.Отклонен Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Указан кандидат,по которому принято решение ""Отклонен""!", Отказ, Заголовок);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаСобеседования) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата собеседования!", Отказ, Заголовок);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВремяСобеседования) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указано время собеседования!", Отказ, Заголовок);	
	КонецЕсли;

	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Создает и заполняет структуру, содержащую имена регистров сведений 
//  по которым надо проводить документ
//
// Параметры: 
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров сведений 
//                 по которым надо проводить документ.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	Если ВыборкаПоШапкеДокумента.Факт Тогда
		СтруктураПроведенияПоРегистрамСведений.Вставить("КандидатыНаРаботу");
	КонецЕсли;
	СтруктураПроведенияПоРегистрамСведений.Вставить("НазначенныеСобеседования");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)
	
    ИмяРегистра = "КандидатыНаРаботу";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда

			Движение = Движения[ИмяРегистра].Добавить();

			// Свойства
			ДатаИзменений = ВыборкаПоШапкеДокумента.ДатаСобеседования;
			ВремяИзменений = ВыборкаПоШапкеДокумента.ВремяСобеседования; 
			                       
			 
    		Часы = Число(Лев(Строка(ВремяИзменений),2));
			Минуты = Число(Прав(Строка (ВремяИзменений),2));
			ДатаИзменений = ДатаИзменений + Часы * 3600 + Минуты * 60;
				
			
			Движение.Период        = ДатаИзменений;
			

			// Измерения
			Движение.ФизЛицо       = ВыборкаПоШапкеДокумента.ФизЛицо;

			// Ресурсы
			Движение.Статус        = ВыборкаПоШапкеДокумента.РезультатСобеседования;
			
			// Реквизиты
            Движение.Подразделение = ВыборкаПоШапкеДокумента.Подразделение;
			Движение.Должность     = ВыборкаПоШапкеДокумента.Должность;

	КонецЕсли;
	
    ИмяРегистра = "НазначенныеСобеседования";
	Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
		
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период			= ВыборкаПоШапкеДокумента.Дата;
				
			// Измерения
			Движение.Дата 			= ВыборкаПоШапкеДокумента.ДатаСобеседования;
			Движение.ИнтервалВремени= ВыборкаПоШапкеДокумента.ВремяСобеседования;
			Движение.Документ		= ВыборкаПоШапкеДокумента.Ссылка;
			
			// Ресурсы
			
			// Реквизиты
			Движение.ФизЛицо		= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Ответственный	= ВыборкаПоШапкеДокумента.Ответственный;
		
	КонецЕсли
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	

	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);

			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			
		КонецЕсли; 

	КонецЕсли;
	
КонецПроцедуры

