////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мДлинаСуток;
Перем мПоддержкаРаботыСоСтруктурнымиПодразделениями;
Перем мОсновнойГрафикРаботыПредприятия;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Добавляет строку в таблицу интервалов оплаты
//
Процедура ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачала, ВидРасчета, ПроцентОплаты)

	СтрокаИнтервала = ТаблицаИнтерваловОплаты.Добавить();
	СтрокаИнтервала.Начало = ДатаНачала;
	СтрокаИнтервала.Расчет = ВидРасчета;
	СтрокаИнтервала.ПроцентОплаты = ПроцентОплаты;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуИнтервалов()

// Формирует таблицу интервалов оплаты
//
Функция ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ПричинаНетрудоспособности, ВидРасчетаОтПричины, ПроцентОплаты) Экспорт
	
	ТаблицаИнтерваловОплаты = Новый ТаблицаЗначений;
	ТаблицаИнтерваловОплаты.Колонки.Добавить("Начало",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаИнтерваловОплаты.Колонки.Добавить("Расчет",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	ТаблицаИнтерваловОплаты.Колонки.Добавить("ПроцентОплаты",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,2)));
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуДо14хЛет Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 					ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 10 * мДлинаСуток, ВидРасчетаОтПричины, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	Иначе
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 		   ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток, ВидРасчетаОтПричины, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток, ВидРасчетаОтПричины, 0);
		
	КонецЕсли;
	
	Возврат ТаблицаИнтерваловОплаты;
	
КонецФункции // ЗаполнитьТаблицуИнтервалов()

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;	
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = Дата('00010101');
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи
		Если Строка.Сторно Тогда
			Продолжить;
		КонецЕсли; 
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли; 
		Иначе 	
			СтрокаНеПервая = Истина;
		КонецЕсли; 
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт
	
	ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	
	ТЗОсновныеНачисления = НаборОсновныеНачисления.ВыгрузитьКолонки(); //только структура колонок без данных
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	ТаблицаИнтерваловОплаты = ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности, ВыборкаПоШапкеДокумента.ВидРасчета, ВыборкаПоШапкеДокумента.ПроцентОплаты);
	
	Для Каждого ИнтервалОплаты Из ТаблицаИнтерваловОплаты Цикл
		
		НомерИнтервалаОплаты = ТаблицаИнтерваловОплаты.Индекс(ИнтервалОплаты);
		
		Если ИнтервалОплаты.Начало > ДатаОкончания Тогда
			Продолжить
		КонецЕсли;
		Если НомерИнтервалаОплаты < 2 и ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало < ДатаНачала Тогда
			Продолжить
		КонецЕсли;
		
		ОкончаниеИнтервалаОплаты = ?(НомерИнтервалаОплаты = 2, ДатаОкончания, Мин(ТаблицаИнтерваловОплаты[НомерИнтервалаОплаты + 1].Начало - мДлинаСуток,ДатаОкончания));
		
		ТекущаяДатаНачала = Макс(ИнтервалОплаты.Начало, ВыборкаПоШапкеДокумента.ДатаНачала);
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ОкончаниеИнтервалаОплаты);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			   
			// строка движений
			Движение = ТЗОсновныеНачисления.Добавить();
			
			// Свойства
			Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			Движение.ПериодДействияНачало       = НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец 	    = КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета				    = ИнтервалОплаты.Расчет;
			
			// Измерения
			Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

			// Реквизиты
			Движение.Показатель1				= ИнтервалОплаты.ПроцентОплаты;
			Движение.КоэффициентИндексации		= 1;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			Если глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[ВыборкаПоШапкеДокумента.Организация].ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
				
				Движение.ГрафикРаботы  	        = ВыборкаПоШапкеДокумента.ГрафикРаботы;
						
				Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени = Истина  Тогда
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
				Иначе
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
				КонецЕсли;
					
			Иначе 
				
				Движение.ГрафикРаботы  	        = мОсновнойГрафикРаботыПредприятия;
				
				Если мОсновнойГрафикРаботыПредприятия.СуммированныйУчетРабочегоВремени = Истина  Тогда
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
				Иначе
					ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
				КонецЕсли;
					
			КонецЕсли;
			Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ОкончаниеИнтервалаОплаты);
			
			Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
			Движение.Авторасчет					= Истина;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ДатаНачалаСобытия >= ПроведениеРасчетов.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
		// если уже действует правила расчета с учетом коэффициента индексации
		ПроведениеРасчетов.РазделитьЗаписиНабораПоПериодамИндексацииЗаработка(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация,
															ВыборкаПоШапкеДокумента.Сотрудник, 
															ТЗОсновныеНачисления,
															?(ЗначениеЗаполнено(ПервичныйБольничныйЛист), ДатаНачалаСобытия, Неопределено));
	КонецЕсли;
	
	// перепишем в набор, не затирая уже существующие там записи
	// принудительно установим для всех строк таблицы Активность = Истина
	ТЗОсновныеНачисления.ЗаполнитьЗначения(Истина, "Активность");
	Для Каждого СтрокаТЗ Из ТЗОсновныеНачисления Цикл
		Движение = НаборОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТЗ);
	КонецЦикла;

	// если есть перерассчитываемый документ, то нужно еще в регистр расчета ввести сторно записи 
	// по перерассчитываемому документу, чтобы правильно учитывать ограничение на размер пособия 
	// (отнимать сторнируемые записи)
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент) Тогда
		
		НаборПерерассчитываемогоДокумента = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		НаборПерерассчитываемогоДокумента.Отбор.Регистратор.Установить(ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент, Истина);
		
		НаборПерерассчитываемогоДокумента.Прочитать();
		
		ИндексСтроки = - 1;
		Для Каждого ЗаписьПерерассчитываемогоНабора Из НаборПерерассчитываемогоДокумента Цикл
			
			Если НЕ ЗаписьПерерассчитываемогоНабора.Сторно Тогда // сторно записи в самом перерассчитываемом документе пропускаем
				ИндексСтроки = ИндексСтроки + 1;
				Движение = НаборОсновныеНачисления.Вставить(ИндексСтроки);
			
				ЗаполнитьЗначенияСвойств(Движение, ЗаписьПерерассчитываемогоНабора,, "Регистратор");
				
				// свойства
				Движение.ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Движение.Сторно = Истина;
				
				// ресурсы
				Движение.Результат = - Движение.Результат;
				Движение.ОтработаноДней = - Движение.ОтработаноДней;
				Движение.ОтработаноЧасов = - Движение.ОтработаноЧасов;
				Движение.ОтработаноДнейПоПятидневке = - Движение.ОтработаноДнейПоПятидневке;
				Движение.НормаДней = - Движение.НормаДней;
				Движение.НормаЧасов = - Движение.НормаЧасов;
				Движение.НормаДнейПоПятидневке = - Движение.НормаДнейПоПятидневке;
				Движение.УчитываемыеДни = - Движение.УчитываемыеДни;
				Движение.УчитываемыеЧасы = - Движение.УчитываемыеЧасы;
				Движение.СторнируемыйДокумент = ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент;
				
				// реквизиты
				Движение.Авторасчет = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает дату начала события
//
Функция ПолучитьДатуНачалаСобытия() Экспорт

	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат ПервичныйБольничныйЛист.ДатаНачала;
	Иначе
		Возврат ДатаНачала;
	КонецЕсли; 

КонецФункции // ПолучитьДатуНачалаСобытия()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный, Автор"); // кроме указанных
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.КоэффициентИндексации,
	|	-Начисления.Результат КАК Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.НормаДней КАК НормаДней,
	|	-Начисления.НормаЧасов КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	-Начисления.ОтработаноДней КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Начисления.ДополнительныеДанные,
	|	ИСТИНА КАК Сторно,
	|	Начисления.СпособОтраженияВБухучете,
	|	ЛОЖЬ КАК Авторасчет,
	|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Ссылка.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексСтроки = -1;
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		ИндексСтроки = ИндексСтроки + 1;
		НоваяСтрока = Начисления.Вставить(ИндексСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, КомментироватьРасчет = Ложь) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	// расчет связан с записью документа и его движений, поэтому выполняется в транзакции
	НачатьТранзакцию();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	Налогоплательщик = ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоШапкеДокумента.Организация,
																	ВыборкаПоШапкеДокумента.Организация,
																	глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	
	Отказ = НЕ ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Налогоплательщик, КомментироватьРасчет);
	
	// В данном случае сторно-записи по перерассчитываемому документу вводятся при СформироватьДвиженияПоНачислениям()
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
КонецПроцедуры  // Рассчитать

// Выполняет перерасчет по заданному списку физлиц
// Параметры
// 	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;

	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина);	
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки(); // только структуру без данных
	КонецЦикла;
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий(); 
	
	ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
	КонецЦикла;

	// свернем таблицы регистров накопления и запишим их в наборы записей
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
		НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
		НаборЗаписей.Записать();
	Конеццикла;
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
	НаборЗаписейПерерасчета = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = Ссылка;
	НаборЗаписейПерерасчета.Записать();
	
КонецПроцедуры // Перерассчитать()

// Возвращает вид расчета, соответствующий причине нетрудоспособности
//
// Параметры
//  Причина  – <ПеречислениеСсылка.ПричиныНетрудочпособности> – причина нетрудоспособности
//
// Возвращаемое значение:
//   ПланыВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций   – вид расчета
//
Функция ПолучитьВидРасчетаОтПричиныНетрудоспособности(Причина) Экспорт

	Если Причина = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам;
		
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда	 
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве;
		
	ИначеЕсли Причина = Перечисления.ПричиныНетрудоспособности.ТравмаНеоплачиваемая Тогда	 
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту;
		
	Иначе
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ;		
		
	КонецЕсли; 
	
КонецФункции // ПолучитьВидРасчетаОтПричиныНетрудоспособности()

Процедура ЗаполнитьПоДокументуОснования(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		
		// Скопируем параметры начисления
		ПервичныйБольничныйЛист = Основание.Ссылка;
		ДатаНачала = КонецДня(Основание.ДатаОкончания) + 1;
		Организация = Основание.Организация;
		Сотрудник = Основание.Сотрудник;
		Физлицо = Основание.Физлицо;
		ПричинаНетрудоспособности = Основание.ПричинаНетрудоспособности;
		ПроцентОплаты = Основание.ПроцентОплаты;
		
		// Скопируем средний заработок
		РасчетСреднего.Загрузить(Основание.РасчетСреднего.Выгрузить());
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтсутствиеНаРаботеОрганизаций") Тогда
		
    	// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Форма = Основание.Ссылка.ПолучитьФорму();
		
        Если Форма.ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
			
			ЗапросПоФизЛицу = "И ТЧРаботникиОрганизации.Сотрудник = &Сотрудник
				              |	И ТЧРаботникиОрганизации.ДатаНачала = &ДатаНачала";
							  
		КонецЕсли;
		
		// Выборка данных по времени болезней работника из докуменат основания
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Минимум(ТЧРаботникиОрганизации.ДатаНачала),
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала) = &ПустаяДата
		|			ТОГДА &ПустаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала), ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	ТЧРаботникиОрганизации.Сотрудник
		|ИЗ
		|	Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МАКСИМУМ(Работники.Период) КАК Период
		|		ИЗ
		|			Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|				ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|					И (Работники.Организация = &ГоловнаяОрганизация)
		|					И (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|		ПО (ДанныеПоРаботникуДоНазначения.Сотрудник = ТЧРаботникиОрганизации.Сотрудник)
		|			И (ДанныеПоРаботникуДоНазначения.Организация = &ГоловнаяОрганизация)
		|			И (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствиеНаРаботеОрганизаций.РаботникиОрганизации КАК ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации
		|		ПО ТЧРаботникиОрганизации.Ссылка = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Ссылка
		|			И ТЧРаботникиОрганизации.Сотрудник = ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.Сотрудник
		|			И ТЧРаботникиОрганизации.ДатаНачала < ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ДатаНачала
		|			И (ОтсутствиеНаРаботеВОрганизацииРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает))
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
		|		ИЗ
		|			ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
		|		ГДЕ
		|			ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПростойПоБолезни) КАК ПВРПростой
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументОснование
		|	И ТЧРаботникиОрганизации.Сторно = ЛОЖЬ
		|	И ТЧРаботникиОрганизации.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)" + ЗапросПоФизЛицу + "
		|СГРУППИРОВАТЬ ПО
		|	ТЧРаботникиОрганизации.ДатаНачала,
		|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
		|	ПВРПростой.ВидРасчета,
		|	ТЧРаботникиОрганизации.Сотрудник
		|";   
					   
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
		Запрос.УстановитьПараметр("УчетВремениПростойПоБолезни", Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
		Запрос.УстановитьПараметр("ДокументОснование", Основание);					   
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Основание.Организация));
		 
		Если ЗапросПоФизЛицу <> Неопределено Тогда
			Запрос.УстановитьПараметр("Сотрудник", 	Форма.ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник);					   
			Запрос.УстановитьПараметр("ДатаНачала", Форма.ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.ДатаНачала);
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Результат.Следующий();
		
		Сотрудник 	  = Результат.Сотрудник; 
		ДатаНачала 	  = Результат.ДатаНачала;
		ДатаОкончания = Результат.ДатаОкончания;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если НЕ Основание.ТекущаяСтруктурнаяЕдиница.Пустая() Тогда
			Организация = Основание.ТекущаяСтруктурнаяЕдиница;
		Иначе
			Организация = Основание.Организация;
		КонецЕсли;
		
		Сотрудник	= Основание;
		Физлицо		= Основание.Физлицо;
		
	КонецЕсли;
	
	ДокументОснование = Основание;
	
КонецПроцедуры // ОбработкаЗаполненияУпр()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" 
		ИЛИ ИмяМакета = "РасчетСреднегоЗаработкаПодробно" Тогда
		ПодробнаяФорма = ?(ИмяМакета = "РасчетСреднегоЗаработкаПодробно", Истина, Ложь);
		ТабДокумент = ФормированиеПечатныхФорм.ПечатьРасчетаСреднегоЗаработка(Ссылка, ПолучитьДатуНачалаСобытия(), 12, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных, , , ПодробнаяФорма);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, РаботаСДиалогами.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура();
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработка","Расчет по среднему заработку");
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработкаПодробно","Расчет по среднему заработку (подробная форма)");
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , 		Ссылка);
	Запрос.УстановитьПараметр("Сотрудник" , 			Сотрудник);
	Запрос.УстановитьПараметр("Организация" , 			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация" , 	ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВидРасчетаКОплате", 		ПолучитьВидРасчетаОтПричиныНетрудоспособности(ПричинаНетрудоспособности));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия" , 	ПолучитьДатуНачалаСобытия());
	Запрос.УстановитьПараметр("ПериодРегистрации" , 	ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеПоБольничномуЛисту.Дата,
	|	НачислениеПоБольничномуЛисту.ПериодРегистрации,
	|	НачислениеПоБольничномуЛисту.Организация,
	|	ВЫБОР 
	|		КОГДА НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
	|			ТОГДА НачислениеПоБольничномуЛисту.Организация 
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.Организация.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеПоБольничномуЛисту.Ссылка,
	|	НачислениеПоБольничномуЛисту.ФизЛицо,
	|	НачислениеПоБольничномуЛисту.Сотрудник,
	|	НачислениеПоБольничномуЛисту.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	НачислениеПоБольничномуЛисту.ПроцентОплаты,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособности,
	|	ПараметрыВидаРасчета.Ссылка КАК ВидРасчета,
	|	&ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	НачислениеПоБольничномуЛисту.ДатаНачала,
	|	НачислениеПоБольничномуЛисту.ДатаОкончания,
	|	ПараметрыВидаРасчета.СпособРасчета КАК СпособРасчета,
	|	ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), МЕСЯЦ, -(ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка)) КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ), СЕКУНДА, -(1)) КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	РаботникиОрганизацииСрезПоследних.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеПоБольничномуЛисту.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам, ЛОЖЬ) КАК РаспределятьНалогиПоСтруктурнымЕдиницам,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций, ЛОЖЬ) КАК РаспределятьНалогиПоПодразделениямОрганизаций,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ, ЛОЖЬ) КАК ОрганизацияЯвляетсяВкладчикомОППВ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ЛОЖЬ)
	|				И НачислениеПоБольничномуЛисту.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА НачислениеПоБольничномуЛисту.Организация.ИндивидуальныйПредприниматель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаНачалаСобытия, 
	|				Сотрудник = &Сотрудник 
	|				И Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = &ВидРасчетаКОплате)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И РаботникиОрганизацииСрезПоследних.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И РаботникиОрганизацииСрезПоследних.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|							ВЫБОР
	|								КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(НачислениеПоБольничномуЛисту.ДатаНачала, НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ) + 1
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ КАК ПланГрафикЗаполнен
	|						ИЗ
	|							Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|								ПО НачислениеПоБольничномуЛисту.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|									И ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация
	|							
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|								ПО ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НачислениеПоБольничномуЛисту.ДатаНачала И НачислениеПоБольничномуЛисту.ДатаОкончания
	|									И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(ПеречислениЕ.ВидыУчетаВремени.ПоДням)
	|									И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка
	|
	|						ГДЕ
	|							НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка
	|
	|						СГРУППИРОВАТЬ ПО
	|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|							НачислениеПоБольничномуЛисту.ДатаНачала,
	|							НачислениеПоБольничномуЛисту.ДатаОкончания) КАК ДанныеПланГрафика
	|		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&ПериодРегистрации,
	|				Организация = &Организация) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
    МестоРаботыТекст="";
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , 	 			  Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", 			 			  ВыборкаПоШапкеДокумента.Сотрудник);
	Запрос.УстановитьПараметр("Организация",		 			  ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 			  ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаНачала",			 			  ВыборкаПоШапкеДокумента.ДатаНачала);
	Запрос.УстановитьПараметр("ПустаяДата",			 			  Дата('00010101'));
	Запрос.УстановитьПараметр("парамПериодРегистрации",			  ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", 	  ВыборкаПоШапкеДокумента.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	 	  Справочники.Организации.ПустаяСсылка());
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	
		ПериодыФизЛицаТекст = "
		|ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "&ДатаНачала") + " КАК Период";
		
		
		МестоРаботыТекст = ПроведениеРасчетов.СформироватьТекстЗапросаСтруктурныеЕдиницы(ПериодыФизЛицаТекст, 
																		ВыборкаПоШапкеДокумента.Организация,
																		Запрос);
		МестоРаботыТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *  
							|	ПОМЕСТИТЬ МестоРаботыВТ
							|	ИЗ (" + МестоРаботыТекст + ") КАК МестаРабот;";
		МестоРаботыВТ="МестоРаботыВТ";
	
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
	
		ПериодыНачисленийТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Сотрудник КАК Сотрудник,
			|	Начисления.ДатаОкончания КАК ПериодНачисления
			|ПОМЕСТИТЬ ВТ_ПериодыНачислений
			|ИЗ
			|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &ДокументСсылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ПериодНачисления";
			
		Запрос.Текст = ПериодыНачисленийТекст;
		Запрос.Выполнить();
		
		ПериодыНачисленийТекст = "ВТ_ПериодыНачислений";
		
		ПериодыИсчисленияОППВТекст = ПроведениеРасчетов.СформироватьТекстЗапросаПериодыИсчисленияОППВ(ПериодыНачисленийТекст, ВыборкаПоШапкеДокумента.Организация, Запрос);
		
	КонецЕсли;
	
	СтавкиОСМСТекст = "/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Ссылка.Сотрудник КАК Сотрудник,
	|	" + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "Данные.ДатаНачала") + " КАК Период,
	|	ВЫБОР
	|		КОГДА Данные.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|		ИНАЧЕ ЕСТЬNULL(Данные.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|	КОНЕЦ КАК ВидДохода
	|ПОМЕСТИТЬ ВТ_ПериодыПоДокументу
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВидДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &Организация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтавкахОСМССрезПоследних.Период КАК Период,
	|	СведенияОСтавкахОСМССрезПоследних.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахОСМС
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахОСМС.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахОСМС.Период,
	|			СведенияОСтавкахОСМС.ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМСУчетомПриоритетов КАК СведенияОСтавкахОСМС
	|		ПО СведенияОСтавкахОСМССрезПоследних.Период = СведенияОСтавкахОСМС.Период
	|			И СведенияОСтавкахОСМССрезПоследних.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И СведенияОСтавкахОСМССрезПоследних.Приоритет = СведенияОСтавкахОСМС.Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода КАК ВидДохода,
	|	ВТ_Периоды.Период КАК ПериодПоДокументу,
	|	МАКСИМУМ(СведенияОСтавкахОСМС.Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ ВТ_МаксимумПериодыСтавокОСМС
	|ИЗ
	|	ВТ_ПериодыПоДокументу КАК ВТ_Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Периоды.Период >= СведенияОСтавкахОСМС.Период
	|			И ВТ_Периоды.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.ВидДохода,
	|	ВТ_Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДохода,
	|	ПериодМаксимум
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Максимум.Сотрудник КАК Сотрудник,
	|	ВТ_Максимум.ВидДохода КАК ВидДохода,
	|	ВТ_Максимум.ПериодПоДокументу КАК Период,
	|	СведенияОСтавкахОСМС.СтавкаВзносы,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления
	|ПОМЕСТИТЬ ВТ_СтавкиОСМС
	|ИЗ
	|	ВТ_МаксимумПериодыСтавокОСМС КАК ВТ_Максимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|		ПО ВТ_Максимум.ВидДохода = СведенияОСтавкахОСМС.ВидДохода
	|			И ВТ_Максимум.ПериодМаксимум = СведенияОСтавкахОСМС.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидДохода,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтавкиОСМСТекст+ МестоРаботыТекст+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.УчетОтработанногоВремени КАК УчетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ВидДохода КАК ВидДохода,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяИПН КАК СпособНалогообложенияИПН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСН КАК СпособНалогообложенияСН,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВ КАК СпособНалогообложенияОПВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяСО КАК СпособНалогообложенияСО,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОППВ КАК СпособНалогообложенияОППВ,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяВОСМС КАК СпособНалогообложенияВОСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяООСМС КАК СпособНалогообложенияООСМС,
	|	СтрокиНачисления.ВидРасчета.ОблагаетсяОПВР КАК СпособНалогообложенияОПВР,
	|	ЕСТЬNULL(УчетНалогообложенияПоВидамДоходов.УчитыватьИПН, ИСТИНА) КАК УчитыватьИПН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВ,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСН ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСН
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСН,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьСО ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьСО
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьСО,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОППВ
	|		КОГДА ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОППВ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|				И ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьВОСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаВзносы,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьВОСМС,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сотрудник КАК Справочник.СотрудникиОрганизаций).Физлицо = &ИндивидуальныйПредприниматель
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) <= 0 И &парамПериодРегистрации < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьООСМС
	|		КОГДА ЕСТЬNULL(СтавкиОСМС.СтавкаОтчисления,0) > 0 И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2020, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьООСМС,
	|	ВЫБОР
	|		КОГДА НЕ (УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР ЕСТЬ NULL)
	|			ТОГДА УчетНалогообложенияПоВидамДоходов.УчитыватьОПВР
	|		КОГДА &парамПериодРегистрации >= ДАТАВРЕМЯ(2024, 1, 1) И ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)) = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьОПВР";
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ЕСТЬNULL(ПериодыИсчисленияОППВ.ИсчислятьОППВ, ЛОЖЬ) КАК ИсчислятьОППВ
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + ",
		|	ЛОЖЬ КАК ИсчислятьОППВ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ",
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ДатаОкончания <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ) 
	|		ИНАЧЕ &ПустаяДата 
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СтрокиНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,	
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,	
	|	СтрокиНачисления.КоэффициентИндексации,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.ИспользуетсяСовместноСПланГрафиком, ЛОЖЬ)
	|				И НЕ (ГрафикиРаботыФизЛиц.Ссылка ЕСТЬ NULL) 
	|				И ЕСТЬNULL(ДанныеПланГрафика.ПланГрафикЗаполнен, ЛОЖЬ)
	|			ТОГДА ГрафикиРаботыФизЛиц.Ссылка 
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы 
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам) 
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням) 
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.СуммаВычетовДоходовОтОбратного,
	|	ВЫБОР 
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации.Владелец <> &Организация 
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.СпособОтраженияВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
	|			ТОГДА СтрокиНачисления.Ссылка.СпособОтраженияВБухучете
	|		ИНАЧЕ СтрокиНачисления.СпособОтраженияВБухучете
	|	КОНЕЦ КАК СпособОтраженияВБухучете,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент";
	
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам И мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ПодразделениеОрганизации.ЯвляетсяСтруктурнымПодразделением
	|			ТОГДА СтрокиНачисления.ПодразделениеОрганизации
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	ИначеЕсли мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
	Запрос.Текст = Запрос.Текст + ",
	|	ВЫБОР
	|		КОГДА НЕ(МестоРаботы.СтруктурнаяЕдиница ЕСТЬ NULL)
	|			ТОГДА МестоРаботы.СтруктурнаяЕдиница
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК СтруктурнаяЕдиница";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	|	&Организация КАК СтруктурнаяЕдиница";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеПоБольничномуЛисту.Начисления КАК СтрокиНачисления
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачала 
	|					И РаботникиОрганизации.Сотрудник = &Сотрудник
	|					И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)  
	|		
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод 
	|			И РаботникиОрганизации.Сотрудник = &Сотрудник
	|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетНалогообложенияПоВидамДоходов.СрезПоследних(&парамПериодРегистрации, ) КАК УчетНалогообложенияПоВидамДоходов
	|		ПО СтрокиНачисления.ВидРасчета.ВидДохода = УчетНалогообложенияПоВидамДоходов.ВидДохода 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|		ПО РаботникиОрганизации.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник 
	|			И РаботникиОрганизации.Организация = ГрафикиРаботыФизЛиц.Организация 
	|			И РаботникиОрганизации.ГрафикРаботы = ГрафикиРаботыФизЛиц.ГрафикРаботы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|							ВЫБОР
	|								КОГДА КОЛИЧЕСТВО(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) = РАЗНОСТЬДАТ(НачислениеПоБольничномуЛисту.ДатаНачала, НачислениеПоБольничномуЛисту.ДатаОкончания, ДЕНЬ) + 1
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ КАК ПланГрафикЗаполнен
	|						ИЗ
	|							Документ.НачислениеПоБольничномуЛисту КАК НачислениеПоБольничномуЛисту
	|
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыФизЛиц КАК ГрафикиРаботыФизЛиц
	|								ПО НачислениеПоБольничномуЛисту.Сотрудник = ГрафикиРаботыФизЛиц.Сотрудник
	|									И ГрафикиРаботыФизЛиц.Организация = &ГоловнаяОрганизация
	|							
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|								ПО ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НачислениеПоБольничномуЛисту.ДатаНачала И НачислениеПоБольничномуЛисту.ДатаОкончания
	|									И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(ПеречислениЕ.ВидыУчетаВремени.ПоДням)
	|									И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыФизЛиц.Ссылка
	|
	|						ГДЕ
	|							НачислениеПоБольничномуЛисту.Ссылка = &ДокументСсылка
	|
	|						СГРУППИРОВАТЬ ПО
	|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|							НачислениеПоБольничномуЛисту.ДатаНачала,
	|							НачислениеПоБольничномуЛисту.ДатаОкончания) КАК ДанныеПланГрафика
	|		ПО ГрафикиРаботыФизЛиц.Ссылка = ДанныеПланГрафика.ГрафикРаботы";
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкиОСМС КАК СтавкиОСМС
	|		ПО СтрокиНачисления.Ссылка.Сотрудник = СтавкиОСМС.Сотрудник
	|	И ВЫБОР
	|			КОГДА СтрокиНачисления.Ссылка.Сотрудник.Физлицо = &ИндивидуальныйПредприниматель
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтНалоговогоАгента)
	|			ИНАЧЕ ЕСТЬNULL(СтрокиНачисления.ВидРасчета.ВидДохода, ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
	|		КОНЕЦ = СтавкиОСМС.ВидДохода
	|		И " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "СтрокиНачисления.ДатаНачала") + " = СтавкиОСМС.Период";
	
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями И Не ВыборкаПоШапкеДокумента.РаспределятьНалогиПоСтруктурнымЕдиницам Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + МестоРаботыВТ + " КАК МестоРаботы
	|		ПО " + ?(ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации, "&парамПериодРегистрации", "СтрокиНачисления.ДатаНачала") + " = МестоРаботы.Период";
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ Тогда
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыИсчисленияОППВТекст + " КАК ПериодыИсчисленияОППВ
	|		ПО СтрокиНачисления.ДатаОкончания = ПериодыИсчисленияОППВ.ПериодНачисления
	|";
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
	|
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Ссылка.ФизЛицо,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР 
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> &ПустаяДата 
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ &ПустаяДата КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Размер,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев,
	|	СтрокаРасчетСреднего.ДатаНачалаПериодаПремии,
	|	СтрокаРасчетСреднего.ДатаОкончанияПериодаПремии
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту.РасчетСреднего КАК СтрокаРасчетСреднего
	|
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокаРасчетСреднего.НомерСтроки
	|";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Организация документа не соответствует организации, указанной в карточке сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана организация, по которой выполняется начисление!", Отказ, Заголовок);
	КонецЕсли;

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата начала оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаОкончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана дата окончания оплачиваемого события!", Отказ, Заголовок);
	КонецЕсли;
	
	//
	Если ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
	КонецЕсли; 

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указана причина нетрудоспособности!", Отказ, Заголовок);
	КонецЕсли;
	
	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка на увольнение
	Если ВыборкаПоШапкеДокумента.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия, "ДЛФ=DD") + " сотрудник " + ВыборкаПоШапкеДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоШапкеДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> NULL 
		И ВыборкаПоШапкеДокумента.Организация <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	Иначе
		// Дата окончания 
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			Иначе	
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "указано подразделение, принадлежащее другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизтов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  Выборка				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.ПериодРегистрации          = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало       = ВыборкаПоСтрокамДокумента.ДатаНачала;
	Движение.ПериодДействияКонец 	    = ВыборкаПоСтрокамДокумента.ДатаОкончания;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    = ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоШапкеДокумента.ФизЛицо;
	Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней 					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов 				= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке 		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
	КонецЕсли;

	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней 			= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов 			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке = ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
	ИначеЕсли ВыборкаПоСтрокамДокумента.УчетОтработанногоВремени Тогда
		Движение.УчитываемыеДни 	= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.УчитываемыеЧасы 	= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	КонецЕсли; 
	
	// Реквизиты
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.КоэффициентИндексации		= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.ДополнительныеДанные  	    = ВыборкаПоСтрокамДокумента.ДополнительныеДанные;
	
	Если УчетнаяПолитикаПоПерсоналуОрганизации.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка = Перечисления.ИспользованиеГрафиковРаботыПриОплатеСреднегоЗаработка.ФактическийГрафикРаботыСотрудника Тогда
		
		Движение.ГрафикРаботы			= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
						
		Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени = Истина  Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		
	Иначе 
		
		Движение.ГрафикРаботы			= мОсновнойГрафикРаботыПредприятия;
							
		Если мОсновнойГрафикРаботыПредприятия.СуммированныйУчетРабочегоВремени = Истина  Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
	
	КонецЕсли;
	
	Движение.ВидУчетаВремени  	        = ВидУчетаВремени;
	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Иначе
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
	
	Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
	Движение.СпособОтраженияВБухучете	= ВыборкаПоСтрокамДокумента.СпособОтраженияВБухучете;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СуммаВычетовДоходовОтОбратного = ВыборкаПоСтрокамДокумента.СуммаВычетовДоходовОтОбратного;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборОсновныеНачисления, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Движение = НаборОсновныеНачисления.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации          	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.БазовыйПериодНачало        	= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец     		= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета				    	= ВыборкаПоСтрокамДокумента.ВидРасчета;
	
	// Измерения
	Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	
	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОтработаноПоПятидневке			= ВыборкаПоСтрокамДокумента.ОтработаноПоПятидневке;
	Движение.НормаПоПятидневке				= ВыборкаПоСтрокамДокумента.НормаПоПятидневке;
	Движение.ОтработаноДней					= ВыборкаПоСтрокамДокумента.ОтработаноДней;
	Движение.ОтработаноЧасов				= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	// Реквизиты
	Движение.Размер							= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
	Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
	Движение.КоэффициентИндексации			= ВыборкаПоСтрокамДокумента.КоэффициентИндексации;
	Движение.ЧислоМесяцев					= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.ДатаНачалаПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаНачалаПериодаПремии;
	Движение.ДатаОкончанияПериодаПремии		= ВыборкаПоСтрокамДокумента.ДатаОкончанияПериодаПремии;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ, ИсчислениеНалоговСтруктурныхЕдиниц)
	
	Если ВыборкаПоТЧ.Результат = 0 Тогда
		// нулевые суммы не записываем
		Возврат;
	КонецЕсли;

    Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик 		= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(ВыборкаПоТЧ.СтруктурнаяЕдиница,
																					ВыборкаПоШапкеДокумента.Организация,
																					ИсчислениеНалоговСтруктурныхЕдиниц,
																					Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
    КонецЕсли;

	////////////////////////////////
	// ИПНСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияИПН) И ВыборкаПоТЧ.УчитыватьИПН Тогда
		
		Движение = Движения.ИПНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияИПН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;

		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// СНСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСН) И ВыборкаПоТЧ.УчитыватьСН Тогда
		
		Движение = Движения.СНСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения	= ВыборкаПоТЧ.СпособНалогообложенияСН;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
		

	////////////////////////////////
	// ОПВСведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВ) И ВыборкаПоТЧ.УчитыватьОПВ Тогда
		
		Движение = Движения.ОПВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// СОСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияСО) И ВыборкаПоТЧ.УчитыватьСО Тогда
		
		Движение = Движения.СОСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияСО;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ОППВСведенияОДоходах
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЯвляетсяВкладчикомОППВ 
		И ВыборкаПоТЧ.ИсчислятьОППВ
		И ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОППВ) 
		И ВыборкаПоТЧ.УчитыватьОППВ Тогда
		
		Движение = Движения.ОППВСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОППВ;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВОСМССведенияОДоходах

	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияВОСМС) И ВыборкаПоТЧ.УчитыватьВОСМС Тогда
		
		Движение = Движения.ВОСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период             = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
		
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияВОСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Движение.ВидДохода				= ВыборкаПоТЧ.ВидДохода;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	
	////////////////////////////////
	// ООСМССведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияООСМС) И ВыборкаПоТЧ.УчитыватьООСМС Тогда
		
		Движение = Движения.ООСМССведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияООСМС;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;

	////////////////////////////////
	// ОПВРСведенияОДоходах
	
	Если ЗначениеЗаполнено(ВыборкаПоТЧ.СпособНалогообложенияОПВР) И ВыборкаПоТЧ.УчитыватьОПВР Тогда
		
		Движение = Движения.ОПВРСведенияОДоходах.мТаблицаДвижений.Добавить();
		
		// Свойства
		Если ВыборкаПоШапкеДокумента.ОтражениеПоПериодуРегистрации Тогда
			Движение.Период 			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Иначе
			Движение.Период             = ВыборкаПоТЧ.ДатаНачала;
		КонецЕсли;
			
		// Измерения
		Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
		Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Движение.Налогоплательщик	= Налогоплательщик;
		Иначе
			Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
		КонецЕсли;
		Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
		Движение.ПериодРегистрации      = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
		Движение.СпособНалогообложения  = ВыборкаПоТЧ.СпособНалогообложенияОПВР;
		Движение.ВидРасчета				= ВыборкаПоТЧ.ВидРасчета;
		Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
			Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
		КонецЕсли;
		
		// Ресурсы
		Движение.СуммаДохода			= ВыборкаПоТЧ.Результат; 
		
	КонецЕсли;
	
	////////////////////////////////
	// ВзаиморасчетыСРаботникамиОрганизаций
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.мТаблицаДвижений.Добавить();
	
	// Свойства
	Движение.Период                 = КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;

	// Измерения
	Движение.ФизЛицо                = ВыборкаПоШапкеДокумента.ФизЛицо;
	Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Движение.Налогоплательщик	= Налогоплательщик;
	Иначе
		Движение.Налогоплательщик	= ВыборкаПоШапкеДокумента.Организация;
	КонецЕсли;
	Движение.СтруктурнаяЕдиница 	= ВыборкаПоТЧ.СтруктурнаяЕдиница;
	Движение.ПериодВзаиморасчетов   = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Если ВыборкаПоШапкеДокумента.РаспределятьНалогиПоПодразделениямОрганизаций Тогда
		Движение.ПодразделениеОрганизации = ВыборкаПоТЧ.ПодразделениеОрганизации;
	КонецЕсли;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат; 
	
	// Реквизиты
	Движение.ВидСтроки				= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	ЗаполнитьПоДокументуОснования(Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект) Тогда
		Возврат
	КонецЕсли;

	// создадим таблицы движений по структуре совпадающие со структрой регистров накопления
	МассивНаборыЗаписей = Новый Массив();
	МассивНаборыЗаписей.Добавить(Движения.ВзаиморасчетыСРаботникамиОрганизаций);
	МассивНаборыЗаписей.Добавить(Движения.ИПНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СНСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.СОСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОППВСведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ВОСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ООСМССведенияОДоходах);
	МассивНаборыЗаписей.Добавить(Движения.ОПВРСведенияОДоходах);
	
	Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
		НаборЗаписей.мТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	КонецЦикла;

	// Проверим непрерывночть следования записей начислений
    ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация];
	
	ИсчислениеНалоговСтруктурныхЕдиниц = глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц");
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьРасчетПериодаНачисленияСотрудника = УчетнаяПолитикаПоПерсоналуОрганизации.ПроверкаПериодовНачисления;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, УчетнаяПолитикаПоПерсоналуОрганизации);
				ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ИсчислениеНалоговСтруктурныхЕдиниц);
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка, УчетнаяПолитикаПоПерсоналуОрганизации);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			// свернем таблицы регистров накопления и запишем их в наборы записей
			Для Каждого НаборЗаписей Из МассивНаборыЗаписей Цикл
				ОбщегоНазначения.СвернутьТаблицуДвиженийРегистраНакопления(НаборЗаписей);
				НаборЗаписей.мТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
				НаборЗаписей.Загрузить(НаборЗаписей.мТаблицаДвижений);
			Конеццикла;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПерерассчитываемыйДокумент = Неопределено

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток 		= 86400; // в секундах
мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мОсновнойГрафикРаботыПредприятия = Константы.ОсновнойГрафикРаботыПредприятия.Получить();
